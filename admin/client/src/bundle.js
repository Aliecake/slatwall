<<<<<<< HEAD
var hibachi =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 740);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(10);
var toSubscriber_1 = __webpack_require__(474);
var observable_1 = __webpack_require__(36);
var pipe_1 = __webpack_require__(59);
/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     console.log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remove this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     console.log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     console.log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     console.log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => console.log(num),
     *   undefined,
     *   () => console.log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   console.log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2.5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (sink.syncErrorThrowable) {
            sink.syncErrorThrowable = false;
            if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.syncErrorThrown = true;
            sink.syncErrorValue = err;
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            }
            else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                if (subscription) {
                    // if there is a subscription, then we can surmise
                    // the next handling is asynchronous. Any errors thrown
                    // need to be rejected explicitly and unsubscribe must be
                    // called manually
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscription.unsubscribe();
                    }
                }
                else {
                    // if there is NO subscription, then we're getting a nexted
                    // value synchronously during subscription. We can just call it.
                    // If it errors, Observable's `subscribe` will ensure the
                    // unsubscription logic is called, then synchronously rethrow the error.
                    // After that, Promise will trap the error and send it
                    // down the rejection path.
                    next(value);
                }
            }, reject, resolve);
        });
    };
    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {
        return this.source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[observable_1.observable] = function () {
        return this;
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * @example
     *
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * Rx.Observable.interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => console.log(x))
     */
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i - 0] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipe_1.pipeFromArray(operations)(this);
    };
    /* tslint:enable:max-line-length */
    Observable.prototype.toPromise = function (PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            }
            else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
exports.Observable = Observable;
//# sourceMappingURL=Observable.js.map

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(41);
var Subscription_1 = __webpack_require__(5);
var Observer_1 = __webpack_require__(66);
var rxSubscriber_1 = __webpack_require__(37);
/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        _super.call(this);
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = Observer_1.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = Observer_1.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    // HACK(benlesh): To resolve an issue where Node users may have multiple
                    // copies of rxjs in their node_modules directory.
                    if (isTrustedSubscriber(destinationOrNext)) {
                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();
                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
                        this.destination = trustedSubscriber;
                        trustedSubscriber.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
exports.Subscriber = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        _super.call(this);
        this._parentSubscriber = _parentSubscriber;
        var next;
        var context = this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer_1.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._error) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            }
            else {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            throw err;
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    };
    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
function isTrustedSubscriber(obj) {
    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);
}
//# sourceMappingURL=Subscriber.js.map

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = (function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        _super.apply(this, arguments);
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber));
exports.OuterSubscriber = OuterSubscriber;
//# sourceMappingURL=OuterSubscriber.js.map

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(10);
var isArrayLike_1 = __webpack_require__(163);
var isPromise_1 = __webpack_require__(165);
var isObject_1 = __webpack_require__(164);
var Observable_1 = __webpack_require__(0);
var iterator_1 = __webpack_require__(24);
var InnerSubscriber_1 = __webpack_require__(181);
var observable_1 = __webpack_require__(36);
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.closed) {
        return null;
    }
    if (result instanceof Observable_1.Observable) {
        if (result._isScalar) {
            destination.next(result.value);
            destination.complete();
            return null;
        }
        else {
            destination.syncErrorThrowable = true;
            return result.subscribe(destination);
        }
    }
    else if (isArrayLike_1.isArrayLike(result)) {
        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
            destination.next(result[i]);
        }
        if (!destination.closed) {
            destination.complete();
        }
    }
    else if (isPromise_1.isPromise(result)) {
        result.then(function (value) {
            if (!destination.closed) {
                destination.next(value);
                destination.complete();
            }
        }, function (err) { return destination.error(err); })
            .then(null, function (err) {
            // Escaping the Promise trap: globally throw unhandled errors
            root_1.root.setTimeout(function () { throw err; });
        });
        return destination;
    }
    else if (result && typeof result[iterator_1.iterator] === 'function') {
        var iterator = result[iterator_1.iterator]();
        do {
            var item = iterator.next();
            if (item.done) {
                destination.complete();
                break;
            }
            destination.next(item.value);
            if (destination.closed) {
                break;
            }
        } while (true);
    }
    else if (result && typeof result[observable_1.observable] === 'function') {
        var obs = result[observable_1.observable]();
        if (typeof obs.subscribe !== 'function') {
            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
        }
        else {
            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
        }
    }
    else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = ("You provided " + value + " where a stream was expected.")
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        destination.error(new TypeError(msg));
    }
    return null;
}
exports.subscribeToResult = subscribeToResult;
//# sourceMappingURL=subscribeToResult.js.map

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AsyncAction_1 = __webpack_require__(22);
var AsyncScheduler_1 = __webpack_require__(23);
/**
 *
 * Async Scheduler
 *
 * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>
 *
 * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript
 * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating
 * in intervals.
 *
 * If you just want to "defer" task, that is to perform it right after currently
 * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),
 * better choice will be the {@link asap} scheduler.
 *
 * @example <caption>Use async scheduler to delay task</caption>
 * const task = () => console.log('it works!');
 *
 * Rx.Scheduler.async.schedule(task, 2000);
 *
 * // After 2 seconds logs:
 * // "it works!"
 *
 *
 * @example <caption>Use async scheduler to repeat task in intervals</caption>
 * function task(state) {
 *   console.log(state);
 *   this.schedule(state + 1, 1000); // `this` references currently executing Action,
 *                                   // which we reschedule with new state and delay
 * }
 *
 * Rx.Scheduler.async.schedule(task, 3000, 0);
 *
 * // Logs:
 * // 0 after 3s
 * // 1 after 4s
 * // 2 after 5s
 * // 3 after 6s
 *
 * @static true
 * @name async
 * @owner Scheduler
 */
exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
//# sourceMappingURL=async.js.map

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray_1 = __webpack_require__(12);
var isObject_1 = __webpack_require__(164);
var isFunction_1 = __webpack_require__(41);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var UnsubscriptionError_1 = __webpack_require__(160);
/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject_1.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
            }
        }
        if (isArray_1.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject_1.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject_1.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var Subscriber_1 = __webpack_require__(1);
var Subscription_1 = __webpack_require__(5);
var ObjectUnsubscribedError_1 = __webpack_require__(39);
var SubjectSubscription_1 = __webpack_require__(67);
var rxSubscriber_1 = __webpack_require__(37);
/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        _super.call(this, destination);
        this.destination = destination;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
exports.SubjectSubscriber = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        _super.call(this);
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
exports.Subject = Subject;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        _super.call(this);
        this.destination = destination;
        this.source = source;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));
exports.AnonymousSubject = AnonymousSubject;
//# sourceMappingURL=Subject.js.map

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// typeof any so that it we don't have to cast when comparing a result to the error object
exports.errorObject = { e: {} };
//# sourceMappingURL=errorObject.js.map

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var hibachiinterceptor_1 = __webpack_require__(646);
//constant
var hibachipathbuilder_1 = __webpack_require__(647);
//services
var cacheservice_1 = __webpack_require__(639);
var publicservice_1 = __webpack_require__(658);
var accountservice_1 = __webpack_require__(638);
var cartservice_1 = __webpack_require__(640);
var draggableservice_1 = __webpack_require__(641);
var utilityservice_1 = __webpack_require__(665);
var selectionservice_1 = __webpack_require__(662);
var observerservice_1 = __webpack_require__(655);
var orderservice_1 = __webpack_require__(657);
var orderpaymentservice_1 = __webpack_require__(656);
var formservice_1 = __webpack_require__(645);
var filterservice_1 = __webpack_require__(644);
var expandableservice_1 = __webpack_require__(643);
var metadataservice_1 = __webpack_require__(654);
var rbkeyservice_1 = __webpack_require__(659);
var typeaheadservice_1 = __webpack_require__(664);
var hibachiservice_1 = __webpack_require__(649);
var historyservice_1 = __webpack_require__(652);
var localstorageservice_1 = __webpack_require__(653);
var hibachiservicedecorator_1 = __webpack_require__(650);
var hibachiscope_1 = __webpack_require__(648);
var requestservice_1 = __webpack_require__(660);
var scopeservice_1 = __webpack_require__(661);
var skuservice_1 = __webpack_require__(663);
var hibachivalidationservice_1 = __webpack_require__(651);
var entityservice_1 = __webpack_require__(642);
//controllers
var globalsearch_1 = __webpack_require__(620);
//filters
var percentage_1 = __webpack_require__(623);
var entityrbkey_1 = __webpack_require__(622);
var swtrim_1 = __webpack_require__(624);
var swunique_1 = __webpack_require__(625);
var datefilter_1 = __webpack_require__(621);
//directives
//  components
var swactioncaller_1 = __webpack_require__(581);
var swtypeaheadsearch_1 = __webpack_require__(618);
var swtypeaheadinputfield_1 = __webpack_require__(615);
var swtypeaheadmultiselect_1 = __webpack_require__(616);
var swtypeaheadsearchlineitem_1 = __webpack_require__(619);
var swtypeaheadremoveselection_1 = __webpack_require__(617);
var swcollectionconfig_1 = __webpack_require__(585);
var swcollectionfilter_1 = __webpack_require__(586);
var swcollectionorderby_1 = __webpack_require__(587);
var swcollectioncolumn_1 = __webpack_require__(584);
var swactioncallerdropdown_1 = __webpack_require__(582);
var swcolumnsorter_1 = __webpack_require__(588);
var swconfirm_1 = __webpack_require__(589);
var swdraggable_1 = __webpack_require__(591);
var swdraggablecontainer_1 = __webpack_require__(592);
var swentityactionbar_1 = __webpack_require__(593);
var swentityactionbarbuttongroup_1 = __webpack_require__(594);
var swexpandablerecord_1 = __webpack_require__(595);
var swexpiringsessionnotifier_1 = __webpack_require__(596);
var swgravatar_1 = __webpack_require__(598);
var swlogin_1 = __webpack_require__(601);
var swmodallauncher_1 = __webpack_require__(602);
var swmodalwindow_1 = __webpack_require__(603);
var swnumbersonly_1 = __webpack_require__(604);
var swloading_1 = __webpack_require__(600);
var swscrolltrigger_1 = __webpack_require__(609);
var swtabgroup_1 = __webpack_require__(613);
var swtabcontent_1 = __webpack_require__(612);
var swtooltip_1 = __webpack_require__(614);
var swrbkey_1 = __webpack_require__(608);
var swoptions_1 = __webpack_require__(605);
var swselection_1 = __webpack_require__(610);
var swclickoutside_1 = __webpack_require__(583);
var swdirective_1 = __webpack_require__(590);
var swexportaction_1 = __webpack_require__(597);
var swhref_1 = __webpack_require__(599);
var swprocesscaller_1 = __webpack_require__(607);
var swsortable_1 = __webpack_require__(611);
var sworderbycontrols_1 = __webpack_require__(606);
var alert_module_1 = __webpack_require__(169);
var dialog_module_1 = __webpack_require__(173);
var coremodule = angular.module('hibachi.core', [
    //Angular Modules
    'ngAnimate',
    'ngRoute',
    'ngSanitize',
    //3rdParty modules
    'ui.bootstrap',
    alert_module_1.alertmodule.name,
    dialog_module_1.dialogmodule.name
])
    .config(['$compileProvider', '$httpProvider', '$logProvider', '$filterProvider', '$provide', 'hibachiPathBuilder', 'appConfig', function ($compileProvider, $httpProvider, $logProvider, $filterProvider, $provide, hibachiPathBuilder, appConfig) {
        hibachiPathBuilder.setBaseURL(appConfig.baseURL);
        hibachiPathBuilder.setBasePartialsPath('/org/Hibachi/client/src/');
        if (!appConfig.debugFlag) {
            appConfig.debugFlag = false;
        }
        $logProvider.debugEnabled(appConfig.debugFlag);
        $filterProvider.register('likeFilter', function () {
            return function (text) {
                if (angular.isDefined(text) && angular.isString(text)) {
                    return text.replace(new RegExp('%', 'g'), '');
                }
            };
        });
        //This filter is used to shorten a string by removing the charecter count that is passed to it and ending it with "..."
        $filterProvider.register('truncate', function () {
            return function (input, chars, breakOnWord) {
                if (isNaN(chars))
                    return input;
                if (chars <= 0)
                    return '';
                if (input && input.length > chars) {
                    input = input.substring(0, chars);
                    if (!breakOnWord) {
                        var lastspace = input.lastIndexOf(' ');
                        //get last space
                        if (lastspace !== -1) {
                            input = input.substr(0, lastspace);
                        }
                    }
                    else {
                        while (input.charAt(input.length - 1) === ' ') {
                            input = input.substr(0, input.length - 1);
                        }
                    }
                    return input + '...';
                }
                return input;
            };
        });
        //This filter is used to shorten long string but unlike "truncate", it removes from the start of the string and prepends "..."
        $filterProvider.register('pretruncate', function () {
            return function (input, chars, breakOnWord) {
                if (isNaN(chars))
                    return input;
                if (chars <= 0)
                    return '';
                if (input && input.length > chars) {
                    input = input.slice('-' + chars);
                    //  input = input.substring(0, chars);
                    if (!breakOnWord) {
                        var lastspace = input.lastIndexOf(' ');
                        //get last space
                        if (lastspace !== -1) {
                            input = input.substr(0, lastspace);
                        }
                    }
                    else {
                        while (input.charAt(input.length - 1) === ' ') {
                            input = input.substr(0, input.length - 1);
                        }
                    }
                    return '...' + input;
                }
                return input;
            };
        });
        hibachiPathBuilder.setBaseURL(appConfig.baseURL);
        hibachiPathBuilder.setBasePartialsPath('/org/Hibachi/client/src/');
        // $provide.decorator('$hibachi',
        $httpProvider.interceptors.push('hibachiInterceptor');
        //Pulls seperate http requests into a single digest cycle.
        $httpProvider.useApplyAsync(true);
    }])
    .run(['$rootScope', '$hibachi', '$route', '$location', 'rbkeyService', function ($rootScope, $hibachi, $route, $location, rbkeyService) {
        $rootScope.buildUrl = $hibachi.buildUrl;
        $rootScope.rbKey = rbkeyService.rbKey;
        var original = $location.path;
        $location.path = function (path, reload) {
            if (reload === false) {
                var lastRoute = $route.current;
                var un = $rootScope.$on('$locationChangeSuccess', function () {
                    $route.current = lastRoute;
                    un();
                });
            }
            return original.apply($location, [path]);
        };
    }])
    .constant('hibachiPathBuilder', new hibachipathbuilder_1.HibachiPathBuilder())
    .constant('corePartialsPath', 'core/components/')
    //services
    .service('cacheService', cacheservice_1.CacheService)
    .service('publicService', publicservice_1.PublicService)
    .service('utilityService', utilityservice_1.UtilityService)
    .service('selectionService', selectionservice_1.SelectionService)
    .service('observerService', observerservice_1.ObserverService)
    .service('draggableService', draggableservice_1.DraggableService)
    .service('expandableService', expandableservice_1.ExpandableService)
    .service('filterService', filterservice_1.FilterService)
    .service('formService', formservice_1.FormService)
    .service('historyService', historyservice_1.HistoryService)
    .service('metadataService', metadataservice_1.MetaDataService)
    .service('rbkeyService', rbkeyservice_1.RbKeyService)
    .service('typeaheadService', typeaheadservice_1.TypeaheadService)
    .provider('$hibachi', hibachiservice_1.$Hibachi)
    .decorator('$hibachi', hibachiservicedecorator_1.HibachiServiceDecorator)
    .service('hibachiInterceptor', hibachiinterceptor_1.HibachiInterceptor.Factory())
    .service('hibachiScope', hibachiscope_1.HibachiScope)
    .service('scopeService', scopeservice_1.ScopeService)
    .service('skuService', skuservice_1.SkuService)
    .service('localStorageService', localstorageservice_1.LocalStorageService)
    .service('requestService', requestservice_1.RequestService)
    .service('accountService', accountservice_1.AccountService)
    .service('orderService', orderservice_1.OrderService)
    .service('orderPaymentService', orderpaymentservice_1.OrderPaymentService)
    .service('cartService', cartservice_1.CartService)
    .service('hibachiValidationService', hibachivalidationservice_1.HibachiValidationService)
    .service('entityService', entityservice_1.EntityService)
    //controllers
    .controller('globalSearch', globalsearch_1.GlobalSearchController)
    //filters
    .filter('dateFilter', ['$filter', datefilter_1.DateFilter.Factory])
    .filter('percentage', [percentage_1.PercentageFilter.Factory])
    .filter('trim', [swtrim_1.SWTrim.Factory])
    .filter('entityRBKey', ['rbkeyService', entityrbkey_1.EntityRBKey.Factory])
    .filter('swdate', ['$filter', datefilter_1.DateFilter.Factory])
    .filter('unique', [swunique_1.SWUnique.Factory])
    //directives
    .directive('swCollectionConfig', swcollectionconfig_1.SWCollectionConfig.Factory())
    .directive('swCollectionColumn', swcollectioncolumn_1.SWCollectionColumn.Factory())
    .directive('swCollectionFilter', swcollectionfilter_1.SWCollectionFilter.Factory())
    .directive('swCollectionOrderBy', swcollectionorderby_1.SWCollectionOrderBy.Factory())
    .directive('swTypeaheadSearch', swtypeaheadsearch_1.SWTypeaheadSearch.Factory())
    .directive('swTypeaheadInputField', swtypeaheadinputfield_1.SWTypeaheadInputField.Factory())
    .directive('swTypeaheadMultiselect', swtypeaheadmultiselect_1.SWTypeaheadMultiselect.Factory())
    .directive('swTypeaheadSearchLineItem', swtypeaheadsearchlineitem_1.SWTypeaheadSearchLineItem.Factory())
    .directive('swTypeaheadRemoveSelection', swtypeaheadremoveselection_1.SWTypeaheadRemoveSelection.Factory())
    .directive('swActionCaller', swactioncaller_1.SWActionCaller.Factory())
    .directive('swActionCallerDropdown', swactioncallerdropdown_1.SWActionCallerDropdown.Factory())
    .directive('swColumnSorter', swcolumnsorter_1.SWColumnSorter.Factory())
    .directive('swConfirm', swconfirm_1.SWConfirm.Factory())
    .directive('swEntityActionBar', swentityactionbar_1.SWEntityActionBar.Factory())
    .directive('swEntityActionBarButtonGroup', swentityactionbarbuttongroup_1.SWEntityActionBarButtonGroup.Factory())
    .directive('swExpandableRecord', swexpandablerecord_1.SWExpandableRecord.Factory())
    .directive('swExpiringSessionNotifier', swexpiringsessionnotifier_1.SWExpiringSessionNotifier.Factory())
    .directive('swGravatar', swgravatar_1.SWGravatar.Factory())
    .directive('swDraggable', swdraggable_1.SWDraggable.Factory())
    .directive('swDraggableContainer', swdraggablecontainer_1.SWDraggableContainer.Factory())
    .directive('swLogin', swlogin_1.SWLogin.Factory())
    .directive('swModalLauncher', swmodallauncher_1.SWModalLauncher.Factory())
    .directive('swModalWindow', swmodalwindow_1.SWModalWindow.Factory())
    .directive('swNumbersOnly', swnumbersonly_1.SWNumbersOnly.Factory())
    .directive('swLoading', swloading_1.SWLoading.Factory())
    .directive('swScrollTrigger', swscrolltrigger_1.SWScrollTrigger.Factory())
    .directive('swRbkey', swrbkey_1.SWRbKey.Factory())
    .directive('swOptions', swoptions_1.SWOptions.Factory())
    .directive('swSelection', swselection_1.SWSelection.Factory())
    .directive('swTabGroup', swtabgroup_1.SWTabGroup.Factory())
    .directive('swTabContent', swtabcontent_1.SWTabContent.Factory())
    .directive('swTooltip', swtooltip_1.SWTooltip.Factory())
    .directive('swClickOutside', swclickoutside_1.SWClickOutside.Factory())
    .directive('swDirective', swdirective_1.SWDirective.Factory())
    .directive('swExportAction', swexportaction_1.SWExportAction.Factory())
    .directive('swHref', swhref_1.SWHref.Factory())
    .directive('swProcessCaller', swprocesscaller_1.SWProcessCaller.Factory())
    .directive('sw:sortable', swsortable_1.SWSortable.Factory())
    .directive('swOrderByControls', sworderbycontrols_1.SWOrderByControls.Factory());
exports.coremodule = coremodule;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var errorObject_1 = __webpack_require__(7);
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject_1.errorObject.e = e;
        return errorObject_1.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
exports.tryCatch = tryCatch;
;
//# sourceMappingURL=tryCatch.js.map

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
// CommonJS / Node have global context exposed as "global" variable.
// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
// the global "global" var for now.
var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
    self instanceof WorkerGlobalScope && self;
var __global = typeof global !== 'undefined' && global;
var _root = __window || __global || __self;
exports.root = _root;
// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
// This is needed when used with angular/tsickle which inserts a goog.module statement.
// Wrap in IIFE
(function () {
    if (!_root) {
        throw new Error('RxJS could not find any global context (window, self, global)');
    }
})();
//# sourceMappingURL=root.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(63)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
exports.isScheduler = isScheduler;
//# sourceMappingURL=isScheduler.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArray.js.map

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var ScalarObservable_1 = __webpack_require__(43);
var EmptyObservable_1 = __webpack_require__(14);
var isScheduler_1 = __webpack_require__(11);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayObservable = (function (_super) {
    __extends(ArrayObservable, _super);
    function ArrayObservable(array, scheduler) {
        _super.call(this);
        this.array = array;
        this.scheduler = scheduler;
        if (!scheduler && array.length === 1) {
            this._isScalar = true;
            this.value = array[0];
        }
    }
    ArrayObservable.create = function (array, scheduler) {
        return new ArrayObservable(array, scheduler);
    };
    /**
     * Creates an Observable that emits some values you specify as arguments,
     * immediately one after the other, and then emits a complete notification.
     *
     * <span class="informal">Emits the arguments you provide, then completes.
     * </span>
     *
     * <img src="./img/of.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the arguments given, and the complete notification thereafter. It can
     * be used for composing with other Observables, such as with {@link concat}.
     * By default, it uses a `null` IScheduler, which means the `next`
     * notifications are sent synchronously, although with a different IScheduler
     * it is possible to determine when those notifications will be delivered.
     *
     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
     * var numbers = Rx.Observable.of(10, 20, 30);
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var interval = Rx.Observable.interval(1000);
     * var result = numbers.concat(letters).concat(interval);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link never}
     * @see {@link throw}
     *
     * @param {...T} values Arguments that represent `next` values to be emitted.
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emissions of the `next` notifications.
     * @return {Observable<T>} An Observable that emits each given input value.
     * @static true
     * @name of
     * @owner Observable
     */
    ArrayObservable.of = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len > 1) {
            return new ArrayObservable(array, scheduler);
        }
        else if (len === 1) {
            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
        }
        else {
            return new EmptyObservable_1.EmptyObservable(scheduler);
        }
    };
    ArrayObservable.dispatch = function (state) {
        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(array[index]);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        this.schedule(state);
    };
    /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var array = this.array;
        var count = array.length;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ArrayObservable.dispatch, 0, {
                array: array, index: index, count: count, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < count && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayObservable;
}(Observable_1.Observable));
exports.ArrayObservable = ArrayObservable;
//# sourceMappingURL=ArrayObservable.js.map

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var EmptyObservable = (function (_super) {
    __extends(EmptyObservable, _super);
    function EmptyObservable(scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits no items to the Observer and immediately
     * emits a complete notification.
     *
     * <span class="informal">Just emits 'complete', and nothing else.
     * </span>
     *
     * <img src="./img/empty.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the complete notification. It can be used for composing with other
     * Observables, such as in a {@link mergeMap}.
     *
     * @example <caption>Emit the number 7, then complete.</caption>
     * var result = Rx.Observable.empty().startWith(7);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
     * var interval = Rx.Observable.interval(1000);
     * var result = interval.mergeMap(x =>
     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following to the console:
     * // x is equal to the count on the interval eg(0,1,2,3,...)
     * // x will occur every 1000ms
     * // if x % 2 is equal to 1 print abc
     * // if x % 2 is not equal to 1 nothing will be output
     *
     * @see {@link create}
     * @see {@link never}
     * @see {@link of}
     * @see {@link throw}
     *
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emission of the complete notification.
     * @return {Observable} An "empty" Observable: emits only the complete
     * notification.
     * @static true
     * @name empty
     * @owner Observable
     */
    EmptyObservable.create = function (scheduler) {
        return new EmptyObservable(scheduler);
    };
    EmptyObservable.dispatch = function (arg) {
        var subscriber = arg.subscriber;
        subscriber.complete();
    };
    /** @deprecated internal use only */ EmptyObservable.prototype._subscribe = function (subscriber) {
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
        }
        else {
            subscriber.complete();
        }
    };
    return EmptyObservable;
}(Observable_1.Observable));
exports.EmptyObservable = EmptyObservable;
//# sourceMappingURL=EmptyObservable.js.map

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var baseobject_1 = __webpack_require__(171);
var Entities = __webpack_require__(629);
var Processes = __webpack_require__(635);
var BaseEntityService = /** @class */ (function (_super) {
    __extends(BaseEntityService, _super);
    //@ngInject
    function BaseEntityService($injector, $hibachi, utilityService, baseObjectName, objectName) {
        var _this = _super.call(this, $injector) || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.baseObjectName = baseObjectName;
        _this.objectName = objectName;
        _this.newEntity = function (baseObjectName, objectName) {
            if (!objectName) {
                objectName = baseObjectName;
            }
            return _this.newObject('Entity', baseObjectName, objectName);
        };
        _this.newProcessObject = function (baseObjectName, objectName) {
            if (!objectName) {
                objectName = baseObjectName;
            }
            return _this.newObject('Process', baseObjectName, objectName);
        };
        _this.newObject = function (type, baseObjectName, objectName) {
            if (!objectName) {
                objectName = baseObjectName;
            }
            var baseObject = _this.$hibachi.getEntityDefinition(baseObjectName);
            if (baseObject) {
                var Barrell = {};
                if (type === 'Entity') {
                    Barrell = Entities;
                }
                else if (type === 'Process') {
                    Barrell = Processes;
                }
                if (Barrell[objectName]) {
                    _this.utilityService.extend(Barrell[objectName], baseObject);
                    var entity = new Barrell[objectName](_this.$injector);
                }
                else {
                    var entity = new baseObject();
                    //throw('need to add '+ objectName+' class');
                }
                return entity;
            }
            else {
                return {};
            }
        };
        _this.utilityService = utilityService;
        _this.$hibachi = $hibachi;
        _this.$injector = $injector;
        if (!_this.objectName) {
            _this.objectName = _this.baseObjectName;
        }
        _this['new' + _this.objectName] = function () {
            return _this.newEntity(_this.baseObjectName, _this.objectName);
        };
        return _this;
    }
    return BaseEntityService;
}(baseobject_1.BaseObject));
exports.BaseEntityService = BaseEntityService;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ConnectableObservable_1 = __webpack_require__(68);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
 * which the source sequence's elements will be multicast to the selector function
 * or Subject to push source elements into.
 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} An Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
    return function multicastOperatorFunction(source) {
        var subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
        }
        else {
            subjectFactory = function subjectFactory() {
                return subjectOrSubjectFactory;
            };
        }
        if (typeof selector === 'function') {
            return source.lift(new MulticastOperator(subjectFactory, selector));
        }
        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);
        connectable.source = source;
        connectable.subjectFactory = subjectFactory;
        return connectable;
    };
}
exports.multicast = multicast;
var MulticastOperator = (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());
exports.MulticastOperator = MulticastOperator;
//# sourceMappingURL=multicast.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return Observable_1.Observable.of(this.value);
            case 'E':
                return Observable_1.Observable.throw(this.error);
            case 'C':
                return Observable_1.Observable.empty();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     */
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());
exports.Notification = Notification;
//# sourceMappingURL=Notification.js.map

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isScheduler_1 = __webpack_require__(11);
var of_1 = __webpack_require__(73);
var from_1 = __webpack_require__(72);
var concatAll_1 = __webpack_require__(46);
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from given
 * Observable and then moves on to the next.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * `concat` joins multiple Observables together, by subscribing to them one at a time and
 * merging their results into the output Observable. You can pass either an array of
 * Observables, or put them directly as arguments. Passing an empty array will result
 * in Observable that completes immediately.
 *
 * `concat` will subscribe to first input Observable and emit all its values, without
 * changing or affecting them in any way. When that Observable completes, it will
 * subscribe to then next Observable passed and, again, emit its values. This will be
 * repeated, until the operator runs out of Observables. When last input Observable completes,
 * `concat` will complete as well. At any given moment only one Observable passed to operator
 * emits values. If you would like to emit values from passed Observables concurrently, check out
 * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,
 * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.
 *
 * Note that if some input Observable never completes, `concat` will also never complete
 * and Observables following the one that did not complete will never be subscribed. On the other
 * hand, if some Observable simply completes immediately after it is subscribed, it will be
 * invisible for `concat`, which will just move on to the next Observable.
 *
 * If any Observable in chain errors, instead of passing control to the next Observable,
 * `concat` will error immediately as well. Observables that would be subscribed after
 * the one that emitted error, never will.
 *
 * If you pass to `concat` the same Observable many times, its stream of values
 * will be "replayed" on every subscription, which means you can repeat given Observable
 * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,
 * you can always use {@link repeat}.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = Rx.Observable.concat(timer, sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 *
 * @example <caption>Concatenate an array of 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 *
 * @example <caption>Concatenate the same Observable to repeat it</caption>
 * const timer = Rx.Observable.interval(1000).take(2);
 *
 * Rx.Observable.concat(timer, timer) // concating the same Observable!
 * .subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('...and it is done!')
 * );
 *
 * // Logs:
 * // 0 after 1s
 * // 1 after 2s
 * // 0 after 3s
 * // 1 after 4s
 * // "...and it is done!" also after 4s
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} input1 An input Observable to concatenate with others.
 * @param {ObservableInput} input2 An input Observable to concatenate with others.
 * More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {
        return from_1.from(observables[0]);
    }
    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));
}
exports.concat = concat;
//# sourceMappingURL=concat.js.map

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
exports.map = map;
var MapOperator = (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
exports.MapOperator = MapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = (function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        _super.call(this, destination);
        this.project = project;
        this.count = 0;
        this.thisArg = thisArg || this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=map.js.map

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var subscribeToResult_1 = __webpack_require__(3);
var OuterSubscriber_1 = __webpack_require__(2);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return function mergeMapOperatorFunction(source) {
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));
    };
}
exports.mergeMap = mergeMap;
var MergeMapOperator = (function () {
    function MergeMapOperator(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
    };
    return MergeMapOperator;
}());
exports.MergeMapOperator = MergeMapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = (function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            this.destination.next(innerValue);
        }
    };
    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
        var result;
        try {
            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeMapSubscriber = MergeMapSubscriber;
//# sourceMappingURL=mergeMap.js.map

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var scan_1 = __webpack_require__(54);
var takeLast_1 = __webpack_require__(56);
var defaultIfEmpty_1 = __webpack_require__(48);
var pipe_1 = __webpack_require__(59);
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns the
 * accumulated result when the source completes, given an optional seed value.
 *
 * <span class="informal">Combines together all values emitted on the source,
 * using an accumulator function that knows how to join a new source value into
 * the accumulation from the past.</span>
 *
 * <img src="./img/reduce.png" width="100%">
 *
 * Like
 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
 * `reduce` applies an `accumulator` function against an accumulation and each
 * value of the source Observable (from the past) to reduce it to a single
 * value, emitted on the output Observable. Note that `reduce` will only emit
 * one value, only when the source Observable completes. It is equivalent to
 * applying operator {@link scan} followed by operator {@link last}.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
 *   .takeUntil(Rx.Observable.interval(5000));
 * var ones = clicksInFiveSeconds.mapTo(1);
 * var seed = 0;
 * var count = ones.reduce((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link count}
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link scan}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
 * called on each source value.
 * @param {R} [seed] The initial accumulation value.
 * @return {Observable<R>} An Observable that emits a single value that is the
 * result of accumulating the values emitted by the source Observable.
 * @method reduce
 * @owner Observable
 */
function reduce(accumulator, seed) {
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        return function reduceOperatorFunctionWithSeed(source) {
            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);
        };
    }
    return function reduceOperatorFunction(source) {
        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {
            return accumulator(acc, value, index + 1);
        }), takeLast_1.takeLast(1))(source);
    };
}
exports.reduce = reduce;
//# sourceMappingURL=reduce.js.map

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(10);
var Action_1 = __webpack_require__(455);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsyncAction = (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
        this.pending = false;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        // Always replace the current state with the new state.
        this.state = state;
        // Set the pending flag indicating that this action has been scheduled, or
        // has recursively rescheduled itself.
        this.pending = true;
        var id = this.id;
        var scheduler = this.scheduler;
        //
        // Important implementation note:
        //
        // Actions only execute once by default, unless rescheduled from within the
        // scheduled callback. This allows us to implement single and repeat
        // actions via the same code path, without adding API surface area, as well
        // as mimic traditional recursion but across asynchronous boundaries.
        //
        // However, JS runtimes and timers distinguish between intervals achieved by
        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
        // serial `setTimeout` calls can be individually delayed, which delays
        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
        // guarantee the interval callback will be invoked more precisely to the
        // interval period, regardless of load.
        //
        // Therefore, we use `setInterval` to schedule single and repeat actions.
        // If the action reschedules itself with the same delay, the interval is not
        // canceled. If the action doesn't reschedule, or reschedules with a
        // different delay, the interval will be canceled after scheduled callback
        // execution.
        //
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.delay = delay;
        // If this action has already an async Id, don't request a new one.
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If this action is rescheduled with the same delay time, don't clear the interval id.
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        // Otherwise, if the action's delay time is different from the current delay,
        // or the action has been rescheduled before it's executed, clear the interval id
        return root_1.root.clearInterval(id) && undefined || undefined;
    };
    /**
     * Immediately executes this action and the `work` it contains.
     * @return {any}
     */
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            // Dequeue if the action didn't reschedule itself. Don't call
            // unsubscribe(), because the action could reschedule later.
            // For example:
            // ```
            // scheduler.schedule(function doWork(counter) {
            //   /* ... I'm a busy worker bee ... */
            //   var originalAction = this;
            //   /* wait 100ms before rescheduling the action */
            //   setTimeout(function () {
            //     originalAction.schedule(counter + 1);
            //   }, 100);
            // }, 1000);
            // ```
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action_1.Action));
exports.AsyncAction = AsyncAction;
//# sourceMappingURL=AsyncAction.js.map

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Scheduler_1 = __webpack_require__(183);
var AsyncScheduler = (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler() {
        _super.apply(this, arguments);
        this.actions = [];
        /**
         * A flag to indicate whether the Scheduler is currently executing a batch of
         * queued actions.
         * @type {boolean}
         */
        this.active = false;
        /**
         * An internal ID used to track the latest asynchronous task such as those
         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
         * others.
         * @type {any}
         */
        this.scheduled = undefined;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift()); // exhaust the scheduler queue
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler_1.Scheduler));
exports.AsyncScheduler = AsyncScheduler;
//# sourceMappingURL=AsyncScheduler.js.map

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(10);
function symbolIteratorPonyfill(root) {
    var Symbol = root.Symbol;
    if (typeof Symbol === 'function') {
        if (!Symbol.iterator) {
            Symbol.iterator = Symbol('iterator polyfill');
        }
        return Symbol.iterator;
    }
    else {
        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
        var Set_1 = root.Set;
        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
            return '@@iterator';
        }
        var Map_1 = root.Map;
        // required for compatability with es6-shim
        if (Map_1) {
            var keys = Object.getOwnPropertyNames(Map_1.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                    return key;
                }
            }
        }
        return '@@iterator';
    }
}
exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
exports.iterator = symbolIteratorPonyfill(root_1.root);
/**
 * @deprecated use iterator instead
 */
exports.$$iterator = exports.iterator;
//# sourceMappingURL=iterator.js.map

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an element was queried at a certain index of an
 * Observable, but no such index or position exists in that sequence.
 *
 * @see {@link elementAt}
 * @see {@link take}
 * @see {@link takeLast}
 *
 * @class ArgumentOutOfRangeError
 */
var ArgumentOutOfRangeError = (function (_super) {
    __extends(ArgumentOutOfRangeError, _super);
    function ArgumentOutOfRangeError() {
        var err = _super.call(this, 'argument out of range');
        this.name = err.name = 'ArgumentOutOfRangeError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ArgumentOutOfRangeError;
}(Error));
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
//# sourceMappingURL=ArgumentOutOfRangeError.js.map

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray_1 = __webpack_require__(12);
function isNumeric(val) {
    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    // adding 1 corrects loss of precision from parseFloat (#15100)
    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;
}
exports.isNumeric = isNumeric;
;
//# sourceMappingURL=isNumeric.js.map

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var basetransient_1 = __webpack_require__(60);
var BaseEntity = /** @class */ (function (_super) {
    __extends(BaseEntity, _super);
    function BaseEntity($injector) {
        return _super.call(this, $injector) || this;
    }
    return BaseEntity;
}(basetransient_1.BaseTransient));
exports.BaseEntity = BaseEntity;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var Subscription_1 = __webpack_require__(5);
/**
 * @class AsyncSubject<T>
 */
var AsyncSubject = (function (_super) {
    __extends(AsyncSubject, _super);
    function AsyncSubject() {
        _super.apply(this, arguments);
        this.value = null;
        this.hasNext = false;
        this.hasCompleted = false;
    }
    /** @deprecated internal use only */ AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(Subject_1.Subject));
exports.AsyncSubject = AsyncSubject;
//# sourceMappingURL=AsyncSubject.js.map

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var queue_1 = __webpack_require__(156);
var Subscription_1 = __webpack_require__(5);
var observeOn_1 = __webpack_require__(33);
var ObjectUnsubscribedError_1 = __webpack_require__(39);
var SubjectSubscription_1 = __webpack_require__(67);
/**
 * @class ReplaySubject<T>
 */
var ReplaySubject = (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
        _super.call(this);
        this.scheduler = scheduler;
        this._events = [];
        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        this._windowTime = windowTime < 1 ? 1 : windowTime;
    }
    ReplaySubject.prototype.next = function (value) {
        var now = this._getNow();
        this._events.push(new ReplayEvent(now, value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    /** @deprecated internal use only */ ReplaySubject.prototype._subscribe = function (subscriber) {
        var _events = this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
        }
        var len = _events.length;
        for (var i = 0; i < len && !subscriber.closed; i++) {
            subscriber.next(_events[i].value);
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || queue_1.queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        // Trim events that fall out of the time window.
        // Start at the front of the list. Break early once
        // we encounter an event that falls within the window.
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(Subject_1.Subject));
exports.ReplaySubject = ReplaySubject;
var ReplayEvent = (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());
//# sourceMappingURL=ReplaySubject.js.map

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var ArrayObservable_1 = __webpack_require__(13);
var isScheduler_1 = __webpack_require__(11);
var mergeAll_1 = __webpack_require__(32);
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler_1.isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
        return observables[0];
    }
    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));
}
exports.merge = merge;
//# sourceMappingURL=merge.js.map

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable_1 = __webpack_require__(13);
var isArray_1 = __webpack_require__(12);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
var none = {};
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from this Observable with values from
 * Observables passed as arguments. This is done by subscribing to each
 * Observable, in order, and collecting an array of each of the most recent
 * values any time any of the input Observables emits, then either taking that
 * array and passing it as arguments to an optional `project` function and
 * emitting the return value of that, or just emitting the array of recent
 * values directly if there is no `project` function.
 *
 * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {ObservableInput} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method combineLatest
 * @owner Observable
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var project = null;
    if (typeof observables[observables.length - 1] === 'function') {
        project = observables.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
        observables = observables[0].slice();
    }
    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };
}
exports.combineLatest = combineLatest;
var CombineLatestOperator = (function () {
    function CombineLatestOperator(project) {
        this.project = project;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));
    };
    return CombineLatestOperator;
}());
exports.CombineLatestOperator = CombineLatestOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CombineLatestSubscriber = (function (_super) {
    __extends(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, project) {
        _super.call(this, destination);
        this.project = project;
        this.active = 0;
        this.values = [];
        this.observables = [];
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(none);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === none ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.project) {
                this._tryProject(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryProject = function (values) {
        var result;
        try {
            result = this.project.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.CombineLatestSubscriber = CombineLatestSubscriber;
//# sourceMappingURL=combineLatest.js.map

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeMap_1 = __webpack_require__(20);
var identity_1 = __webpack_require__(162);
/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);
}
exports.mergeAll = mergeAll;
//# sourceMappingURL=mergeAll.js.map

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var Notification_1 = __webpack_require__(17);
/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
exports.observeOn = observeOn;
var ObserveOnOperator = (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
exports.ObserveOnOperator = ObserveOnOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = (function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        _super.call(this, destination);
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
}(Subscriber_1.Subscriber));
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());
exports.ObserveOnMessage = ObserveOnMessage;
//# sourceMappingURL=observeOn.js.map

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
exports.defaultThrottleConfig = {
    leading: true,
    trailing: false
};
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for a duration determined by another Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link throttleTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/throttle.png" width="100%">
 *
 * `throttle` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled by calling the `durationSelector` function with the source value,
 * which returns the "duration" Observable. When the duration Observable emits a
 * value or completes, the timer is disabled, and this process repeats for the
 * next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration for each source value, returned as an Observable or a Promise.
 * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults
 * to `{ leading: true, trailing: false }`.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttle
 * @owner Observable
 */
function throttle(durationSelector, config) {
    if (config === void 0) { config = exports.defaultThrottleConfig; }
    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };
}
exports.throttle = throttle;
var ThrottleOperator = (function () {
    function ThrottleOperator(durationSelector, leading, trailing) {
        this.durationSelector = durationSelector;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
    };
    return ThrottleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc
 * @ignore
 * @extends {Ignored}
 */
var ThrottleSubscriber = (function (_super) {
    __extends(ThrottleSubscriber, _super);
    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
        _super.call(this, destination);
        this.destination = destination;
        this.durationSelector = durationSelector;
        this._leading = _leading;
        this._trailing = _trailing;
        this._hasTrailingValue = false;
    }
    ThrottleSubscriber.prototype._next = function (value) {
        if (this.throttled) {
            if (this._trailing) {
                this._hasTrailingValue = true;
                this._trailingValue = value;
            }
        }
        else {
            var duration = this.tryDurationSelector(value);
            if (duration) {
                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
            }
            if (this._leading) {
                this.destination.next(value);
                if (this._trailing) {
                    this._hasTrailingValue = true;
                    this._trailingValue = value;
                }
            }
        }
    };
    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
        try {
            return this.durationSelector(value);
        }
        catch (err) {
            this.destination.error(err);
            return null;
        }
    };
    /** @deprecated internal use only */ ThrottleSubscriber.prototype._unsubscribe = function () {
        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;
        this._trailingValue = null;
        this._hasTrailingValue = false;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
    };
    ThrottleSubscriber.prototype._sendTrailing = function () {
        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;
        if (throttled && _trailing && _hasTrailingValue) {
            destination.next(_trailingValue);
            this._trailingValue = null;
            this._hasTrailingValue = false;
        }
    };
    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this._sendTrailing();
        this._unsubscribe();
    };
    ThrottleSubscriber.prototype.notifyComplete = function () {
        this._sendTrailing();
        this._unsubscribe();
    };
    return ThrottleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=throttle.js.map

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable_1 = __webpack_require__(13);
var isArray_1 = __webpack_require__(12);
var Subscriber_1 = __webpack_require__(1);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
var iterator_1 = __webpack_require__(24);
/* tslint:enable:max-line-length */
/**
 * @param observables
 * @return {Observable<R>}
 * @method zip
 * @owner Observable
 */
function zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return function zipOperatorFunction(source) {
        return source.lift.call(zipStatic.apply(void 0, [source].concat(observables)));
    };
}
exports.zip = zip;
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each
 * of its input Observables.
 *
 * If the latest parameter is a function, this function is used to compute the created value from the input values.
 * Otherwise, an array of the input values is returned.
 *
 * @example <caption>Combine age and name from different sources</caption>
 *
 * let age$ = Observable.of<number>(27, 25, 29);
 * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');
 * let isDev$ = Observable.of<boolean>(true, true, false);
 *
 * Observable
 *     .zip(age$,
 *          name$,
 *          isDev$,
 *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))
 *     .subscribe(x => console.log(x));
 *
 * // outputs
 * // { age: 27, name: 'Foo', isDev: true }
 * // { age: 25, name: 'Bar', isDev: true }
 * // { age: 29, name: 'Beer', isDev: false }
 *
 * @param observables
 * @return {Observable<R>}
 * @static true
 * @name zip
 * @owner Observable
 */
function zipStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var project = observables[observables.length - 1];
    if (typeof project === 'function') {
        observables.pop();
    }
    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));
}
exports.zipStatic = zipStatic;
var ZipOperator = (function () {
    function ZipOperator(project) {
        this.project = project;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.project));
    };
    return ZipOperator;
}());
exports.ZipOperator = ZipOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipSubscriber = (function (_super) {
    __extends(ZipSubscriber, _super);
    function ZipSubscriber(destination, project, values) {
        if (values === void 0) { values = Object.create(null); }
        _super.call(this, destination);
        this.iterators = [];
        this.active = 0;
        this.project = (typeof project === 'function') ? project : null;
        this.values = values;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (isArray_1.isArray(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[iterator_1.iterator] === 'function') {
            iterators.push(new StaticIterator(value[iterator_1.iterator]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (iterator.stillUnsubscribed) {
                this.add(iterator.subscribe(iterator, i));
            }
            else {
                this.active--; // not an observable
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        // abort if not all of them have values
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            var result = iterator.next();
            // check to see if it's completed now that you've gotten
            // the next value.
            if (iterator.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.project) {
            this._tryProject(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(Subscriber_1.Subscriber));
exports.ZipSubscriber = ZipSubscriber;
var StaticIterator = (function () {
    function StaticIterator(iterator) {
        this.iterator = iterator;
        this.nextResult = iterator.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[iterator_1.iterator] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipBufferIterator = (function (_super) {
    __extends(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        _super.call(this, destination);
        this.parent = parent;
        this.observable = observable;
        this.stillUnsubscribed = true;
        this.buffer = [];
        this.isComplete = false;
    }
    ZipBufferIterator.prototype[iterator_1.iterator] = function () {
        return this;
    };
    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
    //    this is legit because `next()` will never be called by a subscription in this case.
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index) {
        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
    };
    return ZipBufferIterator;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=zip.js.map

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(10);
function getSymbolObservable(context) {
    var $$observable;
    var Symbol = context.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.observable) {
            $$observable = Symbol.observable;
        }
        else {
            $$observable = Symbol('observable');
            Symbol.observable = $$observable;
        }
    }
    else {
        $$observable = '@@observable';
    }
    return $$observable;
}
exports.getSymbolObservable = getSymbolObservable;
exports.observable = getSymbolObservable(root_1.root);
/**
 * @deprecated use observable instead
 */
exports.$$observable = exports.observable;
//# sourceMappingURL=observable.js.map

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(10);
var Symbol = root_1.root.Symbol;
exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
    Symbol.for('rxSubscriber') : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
exports.$$rxSubscriber = exports.rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = (function (_super) {
    __extends(EmptyError, _super);
    function EmptyError() {
        var err = _super.call(this, 'no elements in sequence');
        this.name = err.name = 'EmptyError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return EmptyError;
}(Error));
exports.EmptyError = EmptyError;
//# sourceMappingURL=EmptyError.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = (function (_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var err = _super.call(this, 'object unsubscribed');
        this.name = err.name = 'ObjectUnsubscribedError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ObjectUnsubscribedError;
}(Error));
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isDate(value) {
    return value instanceof Date && !isNaN(+value);
}
exports.isDate = isDate;
//# sourceMappingURL=isDate.js.map

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isFunction(x) {
    return typeof x === 'function';
}
exports.isFunction = isFunction;
//# sourceMappingURL=isFunction.js.map

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

(function(){
  var crypt = __webpack_require__(178),
      utf8 = __webpack_require__(64).utf8,
      isBuffer = __webpack_require__(179),
      bin = __webpack_require__(64).bin,

  // The core
  md5 = function (message, options) {
    // Convert to byte array
    if (message.constructor == String)
      if (options && options.encoding === 'binary')
        message = bin.stringToBytes(message);
      else
        message = utf8.stringToBytes(message);
    else if (isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message))
      message = message.toString();
    // else, assume byte array already

    var m = crypt.bytesToWords(message),
        l = message.length * 8,
        a =  1732584193,
        b = -271733879,
        c = -1732584194,
        d =  271733878;

    // Swap endian
    for (var i = 0; i < m.length; i++) {
      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
    }

    // Padding
    m[l >>> 5] |= 0x80 << (l % 32);
    m[(((l + 64) >>> 9) << 4) + 14] = l;

    // Method shortcuts
    var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;

    for (var i = 0; i < m.length; i += 16) {

      var aa = a,
          bb = b,
          cc = c,
          dd = d;

      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
      c = FF(c, d, a, b, m[i+10], 17, -42063);
      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
      d = FF(d, a, b, c, m[i+13], 12, -40341101);
      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
      c = GG(c, d, a, b, m[i+11], 14,  643717713);
      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
      d = GG(d, a, b, c, m[i+10],  9,  38016083);
      c = GG(c, d, a, b, m[i+15], 14, -660478335);
      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
      b = HH(b, c, d, a, m[i+14], 23, -35309556);
      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
      a = HH(a, b, c, d, m[i+13],  4,  681279174);
      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
      d = HH(d, a, b, c, m[i+12], 11, -421815835);
      c = HH(c, d, a, b, m[i+15], 16,  530742520);
      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
      c = II(c, d, a, b, m[i+14], 15, -1416354905);
      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
      a = II(a, b, c, d, m[i+12],  6,  1700485571);
      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
      c = II(c, d, a, b, m[i+10], 15, -1051523);
      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
      d = II(d, a, b, c, m[i+15], 10, -30611744);
      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
      b = II(b, c, d, a, m[i+13], 21,  1309151649);
      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
      d = II(d, a, b, c, m[i+11], 10, -1120210379);
      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

      a = (a + aa) >>> 0;
      b = (b + bb) >>> 0;
      c = (c + cc) >>> 0;
      d = (d + dd) >>> 0;
    }

    return crypt.endian([a, b, c, d]);
  };

  // Auxiliary functions
  md5._ff  = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._gg  = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._hh  = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._ii  = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;

  module.exports = function (message, options) {
    if (message === undefined || message === null)
      throw new Error('Illegal argument ' + message);

    var digestbytes = crypt.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

})();


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ScalarObservable = (function (_super) {
    __extends(ScalarObservable, _super);
    function ScalarObservable(value, scheduler) {
        _super.call(this);
        this.value = value;
        this.scheduler = scheduler;
        this._isScalar = true;
        if (scheduler) {
            this._isScalar = false;
        }
    }
    ScalarObservable.create = function (value, scheduler) {
        return new ScalarObservable(value, scheduler);
    };
    ScalarObservable.dispatch = function (state) {
        var done = state.done, value = state.value, subscriber = state.subscriber;
        if (done) {
            subscriber.complete();
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        state.done = true;
        this.schedule(state);
    };
    /** @deprecated internal use only */ ScalarObservable.prototype._subscribe = function (subscriber) {
        var value = this.value;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ScalarObservable.dispatch, 0, {
                done: false, value: value, subscriber: subscriber
            });
        }
        else {
            subscriber.next(value);
            if (!subscriber.closed) {
                subscriber.complete();
            }
        }
    };
    return ScalarObservable;
}(Observable_1.Observable));
exports.ScalarObservable = ScalarObservable;
//# sourceMappingURL=ScalarObservable.js.map

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = __webpack_require__(12);
var ArrayObservable_1 = __webpack_require__(13);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    // if the only argument is an array, it was most likely called with
    // `race([obs1, obs2, ...])`
    if (observables.length === 1) {
        if (isArray_1.isArray(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());
}
exports.race = race;
var RaceOperator = (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());
exports.RaceOperator = RaceOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RaceSubscriber = (function (_super) {
    __extends(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        _super.call(this, destination);
        this.hasFirst = false;
        this.observables = [];
        this.subscriptions = [];
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.RaceSubscriber = RaceSubscriber;
//# sourceMappingURL=race.js.map

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Ignores source values for a duration determined by another Observable, then
 * emits the most recent value from the source Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link auditTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/audit.png" width="100%">
 *
 * `audit` is similar to `throttle`, but emits the last value from the silenced
 * time window, instead of the first value. `audit` emits the most recent value
 * from the source Observable on the output Observable as soon as its internal
 * timer becomes disabled, and ignores source values while the timer is enabled.
 * Initially, the timer is disabled. As soon as the first source value arrives,
 * the timer is enabled by calling the `durationSelector` function with the
 * source value, which returns the "duration" Observable. When the duration
 * Observable emits a value or completes, the timer is disabled, then the most
 * recent source value is emitted on the output Observable, and this process
 * repeats for the next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.audit(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration, returned as an Observable or a Promise.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method audit
 * @owner Observable
 */
function audit(durationSelector) {
    return function auditOperatorFunction(source) {
        return source.lift(new AuditOperator(durationSelector));
    };
}
exports.audit = audit;
var AuditOperator = (function () {
    function AuditOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    AuditOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    };
    return AuditOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AuditSubscriber = (function (_super) {
    __extends(AuditSubscriber, _super);
    function AuditSubscriber(destination, durationSelector) {
        _super.call(this, destination);
        this.durationSelector = durationSelector;
        this.hasValue = false;
    }
    AuditSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) {
            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
            if (duration === errorObject_1.errorObject) {
                this.destination.error(errorObject_1.errorObject.e);
            }
            else {
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);
                if (innerSubscription.closed) {
                    this.clearThrottle();
                }
                else {
                    this.add(this.throttled = innerSubscription);
                }
            }
        }
    };
    AuditSubscriber.prototype.clearThrottle = function () {
        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
        if (hasValue) {
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        }
    };
    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
        this.clearThrottle();
    };
    AuditSubscriber.prototype.notifyComplete = function () {
        this.clearThrottle();
    };
    return AuditSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=audit.js.map

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeAll_1 = __webpack_require__(32);
/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return mergeAll_1.mergeAll(1);
}
exports.concatAll = concatAll;
//# sourceMappingURL=concatAll.js.map

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeMap_1 = __webpack_require__(20);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, in a serialized fashion waiting for each one to complete before
 * merging the next.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link concatAll}.</span>
 *
 * <img src="./img/concatMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each new inner Observable is
 * concatenated with the previous inner Observable.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMapTo}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking values from each projected inner
 * Observable sequentially.
 * @method concatMap
 * @owner Observable
 */
function concatMap(project, resultSelector) {
    return mergeMap_1.mergeMap(project, resultSelector, 1);
}
exports.concatMap = concatMap;
//# sourceMappingURL=concatMap.js.map

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/* tslint:enable:max-line-length */
/**
 * Emits a given value if the source Observable completes without emitting any
 * `next` value, otherwise mirrors the source Observable.
 *
 * <span class="informal">If the source Observable turns out to be empty, then
 * this operator will emit a default value.</span>
 *
 * <img src="./img/defaultIfEmpty.png" width="100%">
 *
 * `defaultIfEmpty` emits the values emitted by the source Observable or a
 * specified default value if the source Observable is empty (completes without
 * having emitted any `next` value).
 *
 * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
 * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link empty}
 * @see {@link last}
 *
 * @param {any} [defaultValue=null] The default value used if the source
 * Observable is empty.
 * @return {Observable} An Observable that emits either the specified
 * `defaultValue` if the source Observable emits no items, or the values emitted
 * by the source Observable.
 * @method defaultIfEmpty
 * @owner Observable
 */
function defaultIfEmpty(defaultValue) {
    if (defaultValue === void 0) { defaultValue = null; }
    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
}
exports.defaultIfEmpty = defaultIfEmpty;
var DefaultIfEmptyOperator = (function () {
    function DefaultIfEmptyOperator(defaultValue) {
        this.defaultValue = defaultValue;
    }
    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
    };
    return DefaultIfEmptyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DefaultIfEmptySubscriber = (function (_super) {
    __extends(DefaultIfEmptySubscriber, _super);
    function DefaultIfEmptySubscriber(destination, defaultValue) {
        _super.call(this, destination);
        this.defaultValue = defaultValue;
        this.isEmpty = true;
    }
    DefaultIfEmptySubscriber.prototype._next = function (value) {
        this.isEmpty = false;
        this.destination.next(value);
    };
    DefaultIfEmptySubscriber.prototype._complete = function () {
        if (this.isEmpty) {
            this.destination.next(this.defaultValue);
        }
        this.destination.complete();
    };
    return DefaultIfEmptySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=defaultIfEmpty.js.map

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)
 *   .distinctUntilChanged()
 *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4
 *
 * @example <caption>An example using a compare function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinctUntilChanged
 * @owner Observable
 */
function distinctUntilChanged(compare, keySelector) {
    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
}
exports.distinctUntilChanged = distinctUntilChanged;
var DistinctUntilChangedOperator = (function () {
    function DistinctUntilChangedOperator(compare, keySelector) {
        this.compare = compare;
        this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctUntilChangedSubscriber = (function (_super) {
    __extends(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        _super.call(this, destination);
        this.keySelector = keySelector;
        this.hasKey = false;
        if (typeof compare === 'function') {
            this.compare = compare;
        }
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
        return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
        var keySelector = this.keySelector;
        var key = value;
        if (keySelector) {
            key = tryCatch_1.tryCatch(this.keySelector)(value);
            if (key === errorObject_1.errorObject) {
                return this.destination.error(errorObject_1.errorObject.e);
            }
        }
        var result = false;
        if (this.hasKey) {
            result = tryCatch_1.tryCatch(this.compare)(this.key, key);
            if (result === errorObject_1.errorObject) {
                return this.destination.error(errorObject_1.errorObject.e);
            }
        }
        else {
            this.hasKey = true;
        }
        if (Boolean(result) === false) {
            this.key = key;
            this.destination.next(value);
        }
    };
    return DistinctUntilChangedSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=distinctUntilChanged.js.map

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
exports.filter = filter;
var FilterOperator = (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FilterSubscriber = (function (_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.count = 0;
    }
    // the try catch block below is left specifically for
    // optimization and perf reasons. a tryCatcher is not necessary here.
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=filter.js.map

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Emits only the first value emitted by the source Observable that meets some
 * condition.
 *
 * <span class="informal">Finds the first value that passes some test and emits
 * that.</span>
 *
 * <img src="./img/find.png" width="100%">
 *
 * `find` searches for the first item in the source Observable that matches the
 * specified condition embodied by the `predicate`, and returns the first
 * occurrence in the source. Unlike {@link first}, the `predicate` is required
 * in `find`, and does not emit an error if a valid value is not found.
 *
 * @example <caption>Find and emit the first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.find(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link first}
 * @see {@link findIndex}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable<T>} An Observable of the first item that matches the
 * condition.
 * @method find
 * @owner Observable
 */
function find(predicate, thisArg) {
    if (typeof predicate !== 'function') {
        throw new TypeError('predicate is not a function');
    }
    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };
}
exports.find = find;
var FindValueOperator = (function () {
    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
    }
    FindValueOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
    };
    return FindValueOperator;
}());
exports.FindValueOperator = FindValueOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FindValueSubscriber = (function (_super) {
    __extends(FindValueSubscriber, _super);
    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
        this.index = 0;
    }
    FindValueSubscriber.prototype.notifyComplete = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    FindValueSubscriber.prototype._next = function (value) {
        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
        var index = this.index++;
        try {
            var result = predicate.call(thisArg || this, value, index, this.source);
            if (result) {
                this.notifyComplete(this.yieldIndex ? index : value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    FindValueSubscriber.prototype._complete = function () {
        this.notifyComplete(this.yieldIndex ? -1 : undefined);
    };
    return FindValueSubscriber;
}(Subscriber_1.Subscriber));
exports.FindValueSubscriber = FindValueSubscriber;
//# sourceMappingURL=find.js.map

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var FromObservable_1 = __webpack_require__(69);
var isArray_1 = __webpack_require__(12);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as
 * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same
 * as the source.
 *
 * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.
 * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`
 * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting
 * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another
 * Observable in provided series, no matter if previous Observable completed or ended with an error. This will
 * be happening until there is no more Observables left in the series, at which point returned Observable will
 * complete - even if the last subscribed stream ended with an error.
 *
 * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive
 * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable
 * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with
 * an error.
 *
 * Note that you do not get any access to errors emitted by the Observables. In particular do not
 * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take
 * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.
 *
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * Rx.Observable.of(1, 2, 3, 0)
 *   .map(x => {
 *       if (x === 0) { throw Error(); }
         return 10 / x;
 *   })
 *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))
 *   .subscribe(
 *     val => console.log(val),
 *     err => console.log(err),          // Will never be called.
 *     () => console.log('that\'s it!')
 *   );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "that's it!"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} observables Observables passed either directly or as an array.
 * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes
 * to the next passed Observable and so on, until it completes or runs out of Observables.
 * @method onErrorResumeNext
 * @owner Observable
 */
function onErrorResumeNext() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i - 0] = arguments[_i];
    }
    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
        nextSources = nextSources[0];
    }
    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };
}
exports.onErrorResumeNext = onErrorResumeNext;
/* tslint:enable:max-line-length */
function onErrorResumeNextStatic() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i - 0] = arguments[_i];
    }
    var source = null;
    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
        nextSources = nextSources[0];
    }
    source = nextSources.shift();
    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));
}
exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
var OnErrorResumeNextOperator = (function () {
    function OnErrorResumeNextOperator(nextSources) {
        this.nextSources = nextSources;
    }
    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    };
    return OnErrorResumeNextOperator;
}());
var OnErrorResumeNextSubscriber = (function (_super) {
    __extends(OnErrorResumeNextSubscriber, _super);
    function OnErrorResumeNextSubscriber(destination, nextSources) {
        _super.call(this, destination);
        this.destination = destination;
        this.nextSources = nextSources;
    }
    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._error = function (err) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._complete = function () {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
        var next = this.nextSources.shift();
        if (next) {
            this.add(subscribeToResult_1.subscribeToResult(this, next));
        }
        else {
            this.destination.complete();
        }
    };
    return OnErrorResumeNextSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
exports.refCount = refCount;
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=refCount.js.map

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
function scan(accumulator, seed) {
    var hasSeed = false;
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return function scanOperatorFunction(source) {
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    };
}
exports.scan = scan;
var ScanOperator = (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) { hasSeed = false; }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ScanSubscriber = (function (_super) {
    __extends(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        _super.call(this, destination);
        this.accumulator = accumulator;
        this._seed = _seed;
        this.hasSeed = hasSeed;
        this.index = 0;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=scan.js.map

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, emitting values only from the most recently projected Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link switch}.</span>
 *
 * <img src="./img/switchMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each time it observes one of these
 * inner Observables, the output Observable begins emitting the items emitted by
 * that inner Observable. When a new inner Observable is emitted, `switchMap`
 * stops emitting items from the earlier-emitted inner Observable and begins
 * emitting items from the new one. It continues to behave like this for
 * subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switch}
 * @see {@link switchMapTo}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking only the values from the most recently
 * projected inner Observable.
 * @method switchMap
 * @owner Observable
 */
function switchMap(project, resultSelector) {
    return function switchMapOperatorFunction(source) {
        return source.lift(new SwitchMapOperator(project, resultSelector));
    };
}
exports.switchMap = switchMap;
var SwitchMapOperator = (function () {
    function SwitchMapOperator(project, resultSelector) {
        this.project = project;
        this.resultSelector = resultSelector;
    }
    SwitchMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
    };
    return SwitchMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapSubscriber = (function (_super) {
    __extends(SwitchMapSubscriber, _super);
    function SwitchMapSubscriber(destination, project, resultSelector) {
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.index = 0;
    }
    SwitchMapSubscriber.prototype._next = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (error) {
            this.destination.error(error);
            return;
        }
        this._innerSub(result, value, index);
    };
    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
    };
    SwitchMapSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
    };
    /** @deprecated internal use only */ SwitchMapSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = null;
    };
    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            this.destination.next(innerValue);
        }
    };
    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
        var result;
        try {
            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return SwitchMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=switchMap.js.map

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var ArgumentOutOfRangeError_1 = __webpack_require__(25);
var EmptyObservable_1 = __webpack_require__(14);
/**
 * Emits only the last `count` values emitted by the source Observable.
 *
 * <span class="informal">Remembers the latest `count` values, then emits those
 * only when the source completes.</span>
 *
 * <img src="./img/takeLast.png" width="100%">
 *
 * `takeLast` returns an Observable that emits at most the last `count` values
 * emitted by the source Observable. If the source emits fewer than `count`
 * values then all of its values are emitted. This operator must wait until the
 * `complete` notification emission from the source in order to emit the `next`
 * values on the output Observable, because otherwise it is impossible to know
 * whether or not more values will be emitted on the source. For this reason,
 * all values are emitted synchronously, followed by the complete notification.
 *
 * @example <caption>Take the last 3 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 100);
 * var lastThree = many.takeLast(3);
 * lastThree.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of values to emit from the end of
 * the sequence of values emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits at most the last count
 * values emitted by the source Observable.
 * @method takeLast
 * @owner Observable
 */
function takeLast(count) {
    return function takeLastOperatorFunction(source) {
        if (count === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        else {
            return source.lift(new TakeLastOperator(count));
        }
    };
}
exports.takeLast = takeLast;
var TakeLastOperator = (function () {
    function TakeLastOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
        }
    }
    TakeLastOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
    };
    return TakeLastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeLastSubscriber = (function (_super) {
    __extends(TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) {
        _super.call(this, destination);
        this.total = total;
        this.ring = new Array();
        this.count = 0;
    }
    TakeLastSubscriber.prototype._next = function (value) {
        var ring = this.ring;
        var total = this.total;
        var count = this.count++;
        if (ring.length < total) {
            ring.push(value);
        }
        else {
            var index = count % total;
            ring[index] = value;
        }
    };
    TakeLastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        var count = this.count;
        if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) {
                var idx = (count++) % total;
                destination.next(ring[idx]);
            }
        }
        destination.complete();
    };
    return TakeLastSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=takeLast.js.map

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var map_1 = __webpack_require__(19);
/**
 * @param scheduler
 * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}
 * @method timestamp
 * @owner Observable
 */
function timestamp(scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return map_1.map(function (value) { return new Timestamp(value, scheduler.now()); });
    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));
}
exports.timestamp = timestamp;
var Timestamp = (function () {
    function Timestamp(value, timestamp) {
        this.value = value;
        this.timestamp = timestamp;
    }
    return Timestamp;
}());
exports.Timestamp = Timestamp;
;
//# sourceMappingURL=timestamp.js.map

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* tslint:disable:no-empty */
function noop() { }
exports.noop = noop;
//# sourceMappingURL=noop.js.map

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var noop_1 = __webpack_require__(58);
/* tslint:enable:max-line-length */
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i - 0] = arguments[_i];
    }
    return pipeFromArray(fns);
}
exports.pipe = pipe;
/* @internal */
function pipeFromArray(fns) {
    if (!fns) {
        return noop_1.noop;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
exports.pipeFromArray = pipeFromArray;
//# sourceMappingURL=pipe.js.map

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseobject_1 = __webpack_require__(171);
var BaseTransient = /** @class */ (function (_super) {
    __extends(BaseTransient, _super);
    function BaseTransient($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.errors = {};
        _this.messages = {};
        _this.populate = function (response) {
            var data = response;
            if (response.data) {
                data = response.data;
            }
            data = _this.utilityService.nvpToObject(data);
            var _loop_1 = function () {
                var propertyIdentifier = key.replace(_this.className.toLowerCase() + '.', '');
                var propertyIdentifierArray = propertyIdentifier.split('.');
                var propertyIdentifierKey = propertyIdentifier.replace(/\./g, '_');
                var currentEntity = _this;
                angular.forEach(propertyIdentifierArray, function (property, propertyKey) {
                    if (currentEntity.metaData[property]) {
                        //if we are on the last item in the array
                        if (propertyKey === propertyIdentifierArray.length - 1) {
                            //if is json
                            //if(currentEntity.metaData[key]){
                            //if propertyidentifier
                            // }else{
                            if (angular.isObject(data[key]) && currentEntity.metaData[property].fieldtype && currentEntity.metaData[property].fieldtype === 'many-to-one') {
                                var relatedEntity = _this.entityService.newEntity(currentEntity.metaData[property].cfc);
                                if (relatedEntity.populate) {
                                    relatedEntity.populate(data[key]);
                                    currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
                                }
                                else {
                                    relatedEntity.$$init(data[key]);
                                    currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
                                }
                            }
                            else if (angular.isArray(data[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {
                                currentEntity[property] = [];
                                angular.forEach(data[key], function (arrayItem, propertyKey) {
                                    var relatedEntity = _this.entityService.newEntity(currentEntity.metaData[property].cfc);
                                    if (relatedEntity.populate) {
                                        relatedEntity.populate(arrayItem);
                                        var hasItem = false;
                                        for (var item in currentEntity[property]) {
                                            if (currentEntity[property][item].$$getID().length > 0 && currentEntity[property][item].$$getID() === relatedEntity.$$getID()) {
                                                hasItem = true;
                                                break;
                                            }
                                        }
                                        if (!hasItem) {
                                            currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
                                        }
                                    }
                                    else {
                                        relatedEntity.$$init(arrayItem);
                                        currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
                                    }
                                });
                            }
                            else {
                                currentEntity[property] = data[key];
                            }
                            //}
                        }
                        else {
                            var propertyMetaData = currentEntity.metaData[property];
                            if (angular.isUndefined(currentEntity.data[property]) || (currentEntity.data[property] && currentEntity.data[property] === null)) {
                                if (propertyMetaData.fieldtype === 'one-to-many') {
                                    relatedEntity = [];
                                }
                                else {
                                    relatedEntity = _this.$hibachi['new' + propertyMetaData.cfc]();
                                }
                            }
                            else {
                                relatedEntity = currentEntity.data[property];
                            }
                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);
                            currentEntity = relatedEntity;
                        }
                    }
                    else {
                        _this[key] = data[key];
                    }
                });
            };
            for (var key in data) {
                _loop_1();
            }
            if (response.errors) {
                _this.errors = response.errors;
                _this.messages = response.messages;
            }
        };
        _this.addError = function (errorName, errorMessage) {
            if (!_this.errors[errorName]) {
                _this.errors[errorName] = [];
            }
            if (angular.isArray(errorMessage)) {
                _this.addErrorsByArray(errorName, errorMessage);
            }
            else if (angular.isObject(errorMessage)) {
                _this.addErrorsByObject(errorName, errorMessage);
            }
            else {
                _this.errors[errorName].push(errorMessage);
            }
        };
        _this.addErrorsByArray = function (errorName, errorMessages) {
            for (var i = 0; i < errorMessages.length; i++) {
                var message = errorMessages[i];
                _this.errors[errorName].push(message);
            }
        };
        _this.addErrorsByObject = function (errorName, errorMessage) {
            if (!_this.errors[errorName]) {
                _this.errors[errorName] = [];
            }
            for (var key in errorMessage) {
                for (var i = 0; i < errorMessage[key].length; i++) {
                    var message = errorMessage[i];
                    _this.errors[errorName].push(message);
                }
            }
        };
        _this.addErrors = function (errors) {
            for (var key in errors) {
                if (!_this.errors[key]) {
                    _this.errors[key] = [];
                }
                for (var message in errors[key]) {
                    _this.errors[key].push(message);
                }
            }
        };
        _this.getError = function (errorName) {
            return _this.getErrorByErrorName(errorName);
        };
        _this.getErrorByErrorName = function (errorName) {
            return _this.errors[errorName];
        };
        _this.hasError = function (errorName) {
            return _this.hasErrorByErrorName(errorName);
        };
        _this.hasErrorByErrorName = function (errorName) {
            return angular.isDefined(_this.errors[errorName]);
        };
        _this.hasErrors = function () {
            return Object.keys(_this.errors).length;
        };
        _this.hasSuccessfulAction = function (action) {
            return;
        };
        _this.$hibachi = _this.getService('$hibachi');
        _this.hibachiValidationService = _this.getService('hibachiValidationService');
        _this.utilityService = _this.getService('utilityService');
        _this.entityService = _this.getService('entityService');
        return _this;
    }
    return BaseTransient;
}(baseobject_1.BaseObject));
exports.BaseTransient = BaseTransient;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = __webpack_require__(182);
var IStore = /** @class */ (function () {
    //@ngInject
    function IStore(initialState, reducer, middleware) {
        var _this = this;
        this.initialState = initialState;
        this.reducer = reducer;
        this.middleware = middleware;
        this.dispatch = function (action) { return _this.actionStream$.next((action)); };
        this.getInstance = function () {
            return _this.store$;
        };
        this.actionStream$ = new rxjs_1.Subject();
        this.store$ = this.actionStream$.startWith(initialState).scan(reducer);
        if (middleware) {
            this.store$;
        }
        return this;
    }
    return IStore;
}());
exports.IStore = IStore;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var BaseService = /** @class */ (function () {
    function BaseService() {
    }
    return BaseService;
}());
exports.BaseService = BaseService;


/***/ }),
/* 63 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 64 */
/***/ (function(module, exports) {

var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

module.exports = charenc;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var ObjectUnsubscribedError_1 = __webpack_require__(39);
/**
 * @class BehaviorSubject<T>
 */
var BehaviorSubject = (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        _super.call(this);
        this._value = _value;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated internal use only */ BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject_1.Subject));
exports.BehaviorSubject = BehaviorSubject;
//# sourceMappingURL=BehaviorSubject.js.map

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.empty = {
    closed: true,
    next: function (value) { },
    error: function (err) { throw err; },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(5);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        _super.call(this);
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
exports.SubjectSubscription = SubjectSubscription;
//# sourceMappingURL=SubjectSubscription.js.map

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var Observable_1 = __webpack_require__(0);
var Subscriber_1 = __webpack_require__(1);
var Subscription_1 = __webpack_require__(5);
var refCount_1 = __webpack_require__(53);
/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(/** @deprecated internal use only */ source, 
        /** @deprecated internal use only */ subjectFactory) {
        _super.call(this);
        this.source = source;
        this.subjectFactory = subjectFactory;
        /** @deprecated internal use only */ this._refCount = 0;
        this._isComplete = false;
    }
    /** @deprecated internal use only */ ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    /** @deprecated internal use only */ ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount_1.refCount()(this);
    };
    return ConnectableObservable;
}(Observable_1.Observable));
exports.ConnectableObservable = ConnectableObservable;
var connectableProto = ConnectableObservable.prototype;
exports.connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subject: { value: null, writable: true },
    _connection: { value: null, writable: true },
    _subscribe: { value: connectableProto._subscribe },
    _isComplete: { value: connectableProto._isComplete, writable: true },
    getSubject: { value: connectableProto.getSubject },
    connect: { value: connectableProto.connect },
    refCount: { value: connectableProto.refCount }
};
var ConnectableSubscriber = (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    /** @deprecated internal use only */ ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=ConnectableObservable.js.map

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = __webpack_require__(12);
var isArrayLike_1 = __webpack_require__(163);
var isPromise_1 = __webpack_require__(165);
var PromiseObservable_1 = __webpack_require__(70);
var IteratorObservable_1 = __webpack_require__(324);
var ArrayObservable_1 = __webpack_require__(13);
var ArrayLikeObservable_1 = __webpack_require__(313);
var iterator_1 = __webpack_require__(24);
var Observable_1 = __webpack_require__(0);
var observeOn_1 = __webpack_require__(33);
var observable_1 = __webpack_require__(36);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromObservable = (function (_super) {
    __extends(FromObservable, _super);
    function FromObservable(ish, scheduler) {
        _super.call(this, null);
        this.ish = ish;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable from an Array, an array-like object, a Promise, an
     * iterable object, or an Observable-like object.
     *
     * <span class="informal">Converts almost anything to an Observable.</span>
     *
     * <img src="./img/from.png" width="100%">
     *
     * Convert various other objects and data types into Observables. `from`
     * converts a Promise or an array-like or an
     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
     * object into an Observable that emits the items in that promise or array or
     * iterable. A String, in this context, is treated as an array of characters.
     * Observable-like objects (contains a function named with the ES2015 Symbol
     * for Observable) can also be converted through this operator.
     *
     * @example <caption>Converts an array to an Observable</caption>
     * var array = [10, 20, 30];
     * var result = Rx.Observable.from(array);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 10 20 30
     *
     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
     * function* generateDoubles(seed) {
     *   var i = seed;
     *   while (true) {
     *     yield i;
     *     i = 2 * i; // double it
     *   }
     * }
     *
     * var iterator = generateDoubles(3);
     * var result = Rx.Observable.from(iterator).take(10);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 3 6 12 24 48 96 192 384 768 1536
     *
     * @see {@link create}
     * @see {@link fromEvent}
     * @see {@link fromEventPattern}
     * @see {@link fromPromise}
     *
     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
     * Observable-like, an Array, an iterable or an array-like object to be
     * converted.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * emissions of values.
     * @return {Observable<T>} The Observable whose values are originally from the
     * input object that was converted.
     * @static true
     * @name from
     * @owner Observable
     */
    FromObservable.create = function (ish, scheduler) {
        if (ish != null) {
            if (typeof ish[observable_1.observable] === 'function') {
                if (ish instanceof Observable_1.Observable && !scheduler) {
                    return ish;
                }
                return new FromObservable(ish, scheduler);
            }
            else if (isArray_1.isArray(ish)) {
                return new ArrayObservable_1.ArrayObservable(ish, scheduler);
            }
            else if (isPromise_1.isPromise(ish)) {
                return new PromiseObservable_1.PromiseObservable(ish, scheduler);
            }
            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {
                return new IteratorObservable_1.IteratorObservable(ish, scheduler);
            }
            else if (isArrayLike_1.isArrayLike(ish)) {
                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
            }
        }
        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
    };
    /** @deprecated internal use only */ FromObservable.prototype._subscribe = function (subscriber) {
        var ish = this.ish;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            return ish[observable_1.observable]().subscribe(subscriber);
        }
        else {
            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
        }
    };
    return FromObservable;
}(Observable_1.Observable));
exports.FromObservable = FromObservable;
//# sourceMappingURL=FromObservable.js.map

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(10);
var Observable_1 = __webpack_require__(0);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var PromiseObservable = (function (_super) {
    __extends(PromiseObservable, _super);
    function PromiseObservable(promise, scheduler) {
        _super.call(this);
        this.promise = promise;
        this.scheduler = scheduler;
    }
    /**
     * Converts a Promise to an Observable.
     *
     * <span class="informal">Returns an Observable that just emits the Promise's
     * resolved value, then completes.</span>
     *
     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
     * Observable. If the Promise resolves with a value, the output Observable
     * emits that resolved value as a `next`, and then completes. If the Promise
     * is rejected, then the output Observable emits the corresponding Error.
     *
     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link bindCallback}
     * @see {@link from}
     *
     * @param {PromiseLike<T>} promise The promise to be converted.
     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling
     * the delivery of the resolved value (or the rejection).
     * @return {Observable<T>} An Observable which wraps the Promise.
     * @static true
     * @name fromPromise
     * @owner Observable
     */
    PromiseObservable.create = function (promise, scheduler) {
        return new PromiseObservable(promise, scheduler);
    };
    /** @deprecated internal use only */ PromiseObservable.prototype._subscribe = function (subscriber) {
        var _this = this;
        var promise = this.promise;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    subscriber.next(this.value);
                    subscriber.complete();
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.next(value);
                        subscriber.complete();
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.error(err);
                    }
                })
                    .then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root_1.root.setTimeout(function () { throw err; });
                });
            }
        }
        else {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                    }
                })
                    .then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root_1.root.setTimeout(function () { throw err; });
                });
            }
        }
    };
    return PromiseObservable;
}(Observable_1.Observable));
exports.PromiseObservable = PromiseObservable;
function dispatchNext(arg) {
    var value = arg.value, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
    }
}
function dispatchError(arg) {
    var err = arg.err, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.error(err);
    }
}
//# sourceMappingURL=PromiseObservable.js.map

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(10);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var Observable_1 = __webpack_require__(0);
var Subscriber_1 = __webpack_require__(1);
var map_1 = __webpack_require__(19);
function getCORSRequest() {
    if (root_1.root.XMLHttpRequest) {
        return new root_1.root.XMLHttpRequest();
    }
    else if (!!root_1.root.XDomainRequest) {
        return new root_1.root.XDomainRequest();
    }
    else {
        throw new Error('CORS is not supported by your browser');
    }
}
function getXMLHttpRequest() {
    if (root_1.root.XMLHttpRequest) {
        return new root_1.root.XMLHttpRequest();
    }
    else {
        var progId = void 0;
        try {
            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];
            for (var i = 0; i < 3; i++) {
                try {
                    progId = progIds[i];
                    if (new root_1.root.ActiveXObject(progId)) {
                        break;
                    }
                }
                catch (e) {
                }
            }
            return new root_1.root.ActiveXObject(progId);
        }
        catch (e) {
            throw new Error('XMLHttpRequest is not supported by your browser');
        }
    }
}
function ajaxGet(url, headers) {
    if (headers === void 0) { headers = null; }
    return new AjaxObservable({ method: 'GET', url: url, headers: headers });
}
exports.ajaxGet = ajaxGet;
;
function ajaxPost(url, body, headers) {
    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });
}
exports.ajaxPost = ajaxPost;
;
function ajaxDelete(url, headers) {
    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });
}
exports.ajaxDelete = ajaxDelete;
;
function ajaxPut(url, body, headers) {
    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });
}
exports.ajaxPut = ajaxPut;
;
function ajaxPatch(url, body, headers) {
    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });
}
exports.ajaxPatch = ajaxPatch;
;
var mapResponse = map_1.map(function (x, index) { return x.response; });
function ajaxGetJSON(url, headers) {
    return mapResponse(new AjaxObservable({
        method: 'GET',
        url: url,
        responseType: 'json',
        headers: headers
    }));
}
exports.ajaxGetJSON = ajaxGetJSON;
;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var AjaxObservable = (function (_super) {
    __extends(AjaxObservable, _super);
    function AjaxObservable(urlOrRequest) {
        _super.call(this);
        var request = {
            async: true,
            createXHR: function () {
                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();
            },
            crossDomain: false,
            withCredentials: false,
            headers: {},
            method: 'GET',
            responseType: 'json',
            timeout: 0
        };
        if (typeof urlOrRequest === 'string') {
            request.url = urlOrRequest;
        }
        else {
            for (var prop in urlOrRequest) {
                if (urlOrRequest.hasOwnProperty(prop)) {
                    request[prop] = urlOrRequest[prop];
                }
            }
        }
        this.request = request;
    }
    /** @deprecated internal use only */ AjaxObservable.prototype._subscribe = function (subscriber) {
        return new AjaxSubscriber(subscriber, this.request);
    };
    /**
     * Creates an observable for an Ajax request with either a request object with
     * url, headers, etc or a string for a URL.
     *
     * @example
     * source = Rx.Observable.ajax('/products');
     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });
     *
     * @param {string|Object} request Can be one of the following:
     *   A string of the URL to make the Ajax call.
     *   An object with the following properties
     *   - url: URL of the request
     *   - body: The body of the request
     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE
     *   - async: Whether the request is async
     *   - headers: Optional headers
     *   - crossDomain: true if a cross domain request, else false
     *   - createXHR: a function to override if you need to use an alternate
     *   XMLHttpRequest implementation.
     *   - resultSelector: a function to use to alter the output value type of
     *   the Observable. Gets {@link AjaxResponse} as an argument.
     * @return {Observable} An observable sequence containing the XMLHttpRequest.
     * @static true
     * @name ajax
     * @owner Observable
    */
    AjaxObservable.create = (function () {
        var create = function (urlOrRequest) {
            return new AjaxObservable(urlOrRequest);
        };
        create.get = ajaxGet;
        create.post = ajaxPost;
        create.delete = ajaxDelete;
        create.put = ajaxPut;
        create.patch = ajaxPatch;
        create.getJSON = ajaxGetJSON;
        return create;
    })();
    return AjaxObservable;
}(Observable_1.Observable));
exports.AjaxObservable = AjaxObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AjaxSubscriber = (function (_super) {
    __extends(AjaxSubscriber, _super);
    function AjaxSubscriber(destination, request) {
        _super.call(this, destination);
        this.request = request;
        this.done = false;
        var headers = request.headers = request.headers || {};
        // force CORS if requested
        if (!request.crossDomain && !headers['X-Requested-With']) {
            headers['X-Requested-With'] = 'XMLHttpRequest';
        }
        // ensure content type is set
        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {
            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
        }
        // properly serialize body
        request.body = this.serializeBody(request.body, request.headers['Content-Type']);
        this.send();
    }
    AjaxSubscriber.prototype.next = function (e) {
        this.done = true;
        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;
        var response = new AjaxResponse(e, xhr, request);
        destination.next(response);
    };
    AjaxSubscriber.prototype.send = function () {
        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;
        var createXHR = request.createXHR;
        var xhr = tryCatch_1.tryCatch(createXHR).call(request);
        if (xhr === errorObject_1.errorObject) {
            this.error(errorObject_1.errorObject.e);
        }
        else {
            this.xhr = xhr;
            // set up the events before open XHR
            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
            // You need to add the event listeners before calling open() on the request.
            // Otherwise the progress events will not fire.
            this.setupEvents(xhr, request);
            // open XHR
            var result = void 0;
            if (user) {
                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);
            }
            else {
                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);
            }
            if (result === errorObject_1.errorObject) {
                this.error(errorObject_1.errorObject.e);
                return null;
            }
            // timeout, responseType and withCredentials can be set once the XHR is open
            if (async) {
                xhr.timeout = request.timeout;
                xhr.responseType = request.responseType;
            }
            if ('withCredentials' in xhr) {
                xhr.withCredentials = !!request.withCredentials;
            }
            // set headers
            this.setHeaders(xhr, headers);
            // finally send the request
            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);
            if (result === errorObject_1.errorObject) {
                this.error(errorObject_1.errorObject.e);
                return null;
            }
        }
        return xhr;
    };
    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {
        if (!body || typeof body === 'string') {
            return body;
        }
        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {
            return body;
        }
        if (contentType) {
            var splitIndex = contentType.indexOf(';');
            if (splitIndex !== -1) {
                contentType = contentType.substring(0, splitIndex);
            }
        }
        switch (contentType) {
            case 'application/x-www-form-urlencoded':
                return Object.keys(body).map(function (key) { return (encodeURI(key) + "=" + encodeURI(body[key])); }).join('&');
            case 'application/json':
                return JSON.stringify(body);
            default:
                return body;
        }
    };
    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {
        for (var key in headers) {
            if (headers.hasOwnProperty(key)) {
                xhr.setRequestHeader(key, headers[key]);
            }
        }
    };
    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {
        var progressSubscriber = request.progressSubscriber;
        function xhrTimeout(e) {
            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
            if (progressSubscriber) {
                progressSubscriber.error(e);
            }
            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.
        }
        ;
        xhr.ontimeout = xhrTimeout;
        xhrTimeout.request = request;
        xhrTimeout.subscriber = this;
        xhrTimeout.progressSubscriber = progressSubscriber;
        if (xhr.upload && 'withCredentials' in xhr) {
            if (progressSubscriber) {
                var xhrProgress_1;
                xhrProgress_1 = function (e) {
                    var progressSubscriber = xhrProgress_1.progressSubscriber;
                    progressSubscriber.next(e);
                };
                if (root_1.root.XDomainRequest) {
                    xhr.onprogress = xhrProgress_1;
                }
                else {
                    xhr.upload.onprogress = xhrProgress_1;
                }
                xhrProgress_1.progressSubscriber = progressSubscriber;
            }
            var xhrError_1;
            xhrError_1 = function (e) {
                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;
                if (progressSubscriber) {
                    progressSubscriber.error(e);
                }
                subscriber.error(new AjaxError('ajax error', this, request));
            };
            xhr.onerror = xhrError_1;
            xhrError_1.request = request;
            xhrError_1.subscriber = this;
            xhrError_1.progressSubscriber = progressSubscriber;
        }
        function xhrReadyStateChange(e) {
            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
            if (this.readyState === 4) {
                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                var status_1 = this.status === 1223 ? 204 : this.status;
                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);
                // fix status code when it is 0 (0 status is undocumented).
                // Occurs when accessing file resources or on Android 4.1 stock browser
                // while retrieving files from application cache.
                if (status_1 === 0) {
                    status_1 = response ? 200 : 0;
                }
                if (200 <= status_1 && status_1 < 300) {
                    if (progressSubscriber) {
                        progressSubscriber.complete();
                    }
                    subscriber.next(e);
                    subscriber.complete();
                }
                else {
                    if (progressSubscriber) {
                        progressSubscriber.error(e);
                    }
                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));
                }
            }
        }
        ;
        xhr.onreadystatechange = xhrReadyStateChange;
        xhrReadyStateChange.subscriber = this;
        xhrReadyStateChange.progressSubscriber = progressSubscriber;
        xhrReadyStateChange.request = request;
    };
    AjaxSubscriber.prototype.unsubscribe = function () {
        var _a = this, done = _a.done, xhr = _a.xhr;
        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {
            xhr.abort();
        }
        _super.prototype.unsubscribe.call(this);
    };
    return AjaxSubscriber;
}(Subscriber_1.Subscriber));
exports.AjaxSubscriber = AjaxSubscriber;
/**
 * A normalized AJAX response.
 *
 * @see {@link ajax}
 *
 * @class AjaxResponse
 */
var AjaxResponse = (function () {
    function AjaxResponse(originalEvent, xhr, request) {
        this.originalEvent = originalEvent;
        this.xhr = xhr;
        this.request = request;
        this.status = xhr.status;
        this.responseType = xhr.responseType || request.responseType;
        this.response = parseXhrResponse(this.responseType, xhr);
    }
    return AjaxResponse;
}());
exports.AjaxResponse = AjaxResponse;
/**
 * A normalized AJAX error.
 *
 * @see {@link ajax}
 *
 * @class AjaxError
 */
var AjaxError = (function (_super) {
    __extends(AjaxError, _super);
    function AjaxError(message, xhr, request) {
        _super.call(this, message);
        this.message = message;
        this.xhr = xhr;
        this.request = request;
        this.status = xhr.status;
        this.responseType = xhr.responseType || request.responseType;
        this.response = parseXhrResponse(this.responseType, xhr);
    }
    return AjaxError;
}(Error));
exports.AjaxError = AjaxError;
function parseXhrResponse(responseType, xhr) {
    switch (responseType) {
        case 'json':
            if ('response' in xhr) {
                //IE does not support json as responseType, parse it internally
                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');
            }
            else {
                // HACK(benlesh): TypeScript shennanigans
                // tslint:disable-next-line:no-any latest TS seems to think xhr is "never" here.
                return JSON.parse(xhr.responseText || 'null');
            }
        case 'xml':
            return xhr.responseXML;
        case 'text':
        default:
            // HACK(benlesh): TypeScript shennanigans
            // tslint:disable-next-line:no-any latest TS seems to think xhr is "never" here.
            return ('response' in xhr) ? xhr.response : xhr.responseText;
    }
}
/**
 * @see {@link ajax}
 *
 * @class AjaxTimeoutError
 */
var AjaxTimeoutError = (function (_super) {
    __extends(AjaxTimeoutError, _super);
    function AjaxTimeoutError(xhr, request) {
        _super.call(this, 'ajax timeout', xhr, request);
    }
    return AjaxTimeoutError;
}(AjaxError));
exports.AjaxTimeoutError = AjaxTimeoutError;
//# sourceMappingURL=AjaxObservable.js.map

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FromObservable_1 = __webpack_require__(69);
exports.from = FromObservable_1.FromObservable.create;
//# sourceMappingURL=from.js.map

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayObservable_1 = __webpack_require__(13);
exports.of = ArrayObservable_1.ArrayObservable.of;
//# sourceMappingURL=of.js.map

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TimerObservable_1 = __webpack_require__(329);
exports.timer = TimerObservable_1.TimerObservable.create;
//# sourceMappingURL=timer.js.map

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var timeInterval_1 = __webpack_require__(143);
exports.TimeInterval = timeInterval_1.TimeInterval;
/**
 * @param scheduler
 * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}
 * @method timeInterval
 * @owner Observable
 */
function timeInterval(scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return timeInterval_1.timeInterval(scheduler)(this);
}
exports.timeInterval = timeInterval;
//# sourceMappingURL=timeInterval.js.map

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var audit_1 = __webpack_require__(45);
var timer_1 = __webpack_require__(74);
/**
 * Ignores source values for `duration` milliseconds, then emits the most recent
 * value from the source Observable, then repeats this process.
 *
 * <span class="informal">When it sees a source values, it ignores that plus
 * the next ones for `duration` milliseconds, and then it emits the most recent
 * value from the source.</span>
 *
 * <img src="./img/auditTime.png" width="100%">
 *
 * `auditTime` is similar to `throttleTime`, but emits the last value from the
 * silenced time window, instead of the first value. `auditTime` emits the most
 * recent value from the source Observable on the output Observable as soon as
 * its internal timer becomes disabled, and ignores source values while the
 * timer is enabled. Initially, the timer is disabled. As soon as the first
 * source value arrives, the timer is enabled. After `duration` milliseconds (or
 * the time unit determined internally by the optional `scheduler`) has passed,
 * the timer is disabled, then the most recent source value is emitted on the
 * output Observable, and this process repeats for the next source value.
 * Optionally takes a {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.auditTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} duration Time to wait before emitting the most recent source
 * value, measured in milliseconds or the time unit determined internally
 * by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the rate-limiting behavior.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method auditTime
 * @owner Observable
 */
function auditTime(duration, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return audit_1.audit(function () { return timer_1.timer(duration, scheduler); });
}
exports.auditTime = auditTime;
//# sourceMappingURL=auditTime.js.map

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Buffers the source Observable values until `closingNotifier` emits.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when another Observable emits.</span>
 *
 * <img src="./img/buffer.png" width="100%">
 *
 * Buffers the incoming Observable values until the given `closingNotifier`
 * Observable emits a value, at which point it emits the buffer on the output
 * Observable and starts a new buffer internally, awaiting the next time
 * `closingNotifier` emits.
 *
 * @example <caption>On every click, emit array of most recent interval events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var buffered = interval.buffer(clicks);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link window}
 *
 * @param {Observable<any>} closingNotifier An Observable that signals the
 * buffer to be emitted on the output Observable.
 * @return {Observable<T[]>} An Observable of buffers, which are arrays of
 * values.
 * @method buffer
 * @owner Observable
 */
function buffer(closingNotifier) {
    return function bufferOperatorFunction(source) {
        return source.lift(new BufferOperator(closingNotifier));
    };
}
exports.buffer = buffer;
var BufferOperator = (function () {
    function BufferOperator(closingNotifier) {
        this.closingNotifier = closingNotifier;
    }
    BufferOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
    };
    return BufferOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSubscriber = (function (_super) {
    __extends(BufferSubscriber, _super);
    function BufferSubscriber(destination, closingNotifier) {
        _super.call(this, destination);
        this.buffer = [];
        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
    }
    BufferSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var buffer = this.buffer;
        this.buffer = [];
        this.destination.next(buffer);
    };
    return BufferSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=buffer.js.map

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Buffers the source Observable values until the size hits the maximum
 * `bufferSize` given.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when its size reaches `bufferSize`.</span>
 *
 * <img src="./img/bufferCount.png" width="100%">
 *
 * Buffers a number of values from the source Observable by `bufferSize` then
 * emits the buffer and clears it, and starts a new buffer each
 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
 * `null`, then new buffers are started immediately at the start of the source
 * and when each buffer closes and is emitted.
 *
 * @example <caption>Emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>On every click, emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2, 1);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link pairwise}
 * @see {@link windowCount}
 *
 * @param {number} bufferSize The maximum size of the buffer emitted.
 * @param {number} [startBufferEvery] Interval at which to start a new buffer.
 * For example if `startBufferEvery` is `2`, then a new buffer will be started
 * on every other value from the source. A new buffer is started at the
 * beginning of the source by default.
 * @return {Observable<T[]>} An Observable of arrays of buffered values.
 * @method bufferCount
 * @owner Observable
 */
function bufferCount(bufferSize, startBufferEvery) {
    if (startBufferEvery === void 0) { startBufferEvery = null; }
    return function bufferCountOperatorFunction(source) {
        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
    };
}
exports.bufferCount = bufferCount;
var BufferCountOperator = (function () {
    function BufferCountOperator(bufferSize, startBufferEvery) {
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        if (!startBufferEvery || bufferSize === startBufferEvery) {
            this.subscriberClass = BufferCountSubscriber;
        }
        else {
            this.subscriberClass = BufferSkipCountSubscriber;
        }
    }
    BufferCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
    };
    return BufferCountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferCountSubscriber = (function (_super) {
    __extends(BufferCountSubscriber, _super);
    function BufferCountSubscriber(destination, bufferSize) {
        _super.call(this, destination);
        this.bufferSize = bufferSize;
        this.buffer = [];
    }
    BufferCountSubscriber.prototype._next = function (value) {
        var buffer = this.buffer;
        buffer.push(value);
        if (buffer.length == this.bufferSize) {
            this.destination.next(buffer);
            this.buffer = [];
        }
    };
    BufferCountSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer.length > 0) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    return BufferCountSubscriber;
}(Subscriber_1.Subscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSkipCountSubscriber = (function (_super) {
    __extends(BufferSkipCountSubscriber, _super);
    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
        _super.call(this, destination);
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        this.buffers = [];
        this.count = 0;
    }
    BufferSkipCountSubscriber.prototype._next = function (value) {
        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
        this.count++;
        if (count % startBufferEvery === 0) {
            buffers.push([]);
        }
        for (var i = buffers.length; i--;) {
            var buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) {
                buffers.splice(i, 1);
                this.destination.next(buffer);
            }
        }
    };
    BufferSkipCountSubscriber.prototype._complete = function () {
        var _a = this, buffers = _a.buffers, destination = _a.destination;
        while (buffers.length > 0) {
            var buffer = buffers.shift();
            if (buffer.length > 0) {
                destination.next(buffer);
            }
        }
        _super.prototype._complete.call(this);
    };
    return BufferSkipCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=bufferCount.js.map

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(4);
var Subscriber_1 = __webpack_require__(1);
var isScheduler_1 = __webpack_require__(11);
/* tslint:enable:max-line-length */
/**
 * Buffers the source Observable values for a specific time period.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * those arrays periodically in time.</span>
 *
 * <img src="./img/bufferTime.png" width="100%">
 *
 * Buffers values from the source for a specific time duration `bufferTimeSpan`.
 * Unless the optional argument `bufferCreationInterval` is given, it emits and
 * resets the buffer every `bufferTimeSpan` milliseconds. If
 * `bufferCreationInterval` is given, this operator opens the buffer every
 * `bufferCreationInterval` milliseconds and closes (emits and resets) the
 * buffer every `bufferTimeSpan` milliseconds. When the optional argument
 * `maxBufferSize` is specified, the buffer will be closed either after
 * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.
 *
 * @example <caption>Every second, emit an array of the recent click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(1000);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(2000, 5000);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link windowTime}
 *
 * @param {number} bufferTimeSpan The amount of time to fill each buffer array.
 * @param {number} [bufferCreationInterval] The interval at which to start new
 * buffers.
 * @param {number} [maxBufferSize] The maximum buffer size.
 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
 * intervals that determine buffer boundaries.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferTime
 * @owner Observable
 */
function bufferTime(bufferTimeSpan) {
    var length = arguments.length;
    var scheduler = async_1.async;
    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {
        scheduler = arguments[arguments.length - 1];
        length--;
    }
    var bufferCreationInterval = null;
    if (length >= 2) {
        bufferCreationInterval = arguments[1];
    }
    var maxBufferSize = Number.POSITIVE_INFINITY;
    if (length >= 3) {
        maxBufferSize = arguments[2];
    }
    return function bufferTimeOperatorFunction(source) {
        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
    };
}
exports.bufferTime = bufferTime;
var BufferTimeOperator = (function () {
    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
    }
    BufferTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
    };
    return BufferTimeOperator;
}());
var Context = (function () {
    function Context() {
        this.buffer = [];
    }
    return Context;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferTimeSubscriber = (function (_super) {
    __extends(BufferTimeSubscriber, _super);
    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        _super.call(this, destination);
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
        this.contexts = [];
        var context = this.openContext();
        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
        if (this.timespanOnly) {
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
        else {
            var closeState = { subscriber: this, context: context };
            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };
            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
        }
    }
    BufferTimeSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        var filledBufferContext;
        for (var i = 0; i < len; i++) {
            var context = contexts[i];
            var buffer = context.buffer;
            buffer.push(value);
            if (buffer.length == this.maxBufferSize) {
                filledBufferContext = context;
            }
        }
        if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
        }
    };
    BufferTimeSubscriber.prototype._error = function (err) {
        this.contexts.length = 0;
        _super.prototype._error.call(this, err);
    };
    BufferTimeSubscriber.prototype._complete = function () {
        var _a = this, contexts = _a.contexts, destination = _a.destination;
        while (contexts.length > 0) {
            var context = contexts.shift();
            destination.next(context.buffer);
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated internal use only */ BufferTimeSubscriber.prototype._unsubscribe = function () {
        this.contexts = null;
    };
    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
        this.closeContext(context);
        var closeAction = context.closeAction;
        closeAction.unsubscribe();
        this.remove(closeAction);
        if (!this.closed && this.timespanOnly) {
            context = this.openContext();
            var bufferTimeSpan = this.bufferTimeSpan;
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
    };
    BufferTimeSubscriber.prototype.openContext = function () {
        var context = new Context();
        this.contexts.push(context);
        return context;
    };
    BufferTimeSubscriber.prototype.closeContext = function (context) {
        this.destination.next(context.buffer);
        var contexts = this.contexts;
        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
        if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context), 1);
        }
    };
    return BufferTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchBufferTimeSpanOnly(state) {
    var subscriber = state.subscriber;
    var prevContext = state.context;
    if (prevContext) {
        subscriber.closeContext(prevContext);
    }
    if (!subscriber.closed) {
        state.context = subscriber.openContext();
        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
    }
}
function dispatchBufferCreation(state) {
    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
    var context = subscriber.openContext();
    var action = this;
    if (!subscriber.closed) {
        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
        action.schedule(state, bufferCreationInterval);
    }
}
function dispatchBufferClose(arg) {
    var subscriber = arg.subscriber, context = arg.context;
    subscriber.closeContext(context);
}
//# sourceMappingURL=bufferTime.js.map

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(5);
var subscribeToResult_1 = __webpack_require__(3);
var OuterSubscriber_1 = __webpack_require__(2);
/**
 * Buffers the source Observable values starting from an emission from
 * `openings` and ending when the output of `closingSelector` emits.
 *
 * <span class="informal">Collects values from the past as an array. Starts
 * collecting only when `opening` emits, and calls the `closingSelector`
 * function to get an Observable that tells when to close the buffer.</span>
 *
 * <img src="./img/bufferToggle.png" width="100%">
 *
 * Buffers values from the source by opening the buffer via signals from an
 * Observable provided to `openings`, and closing and sending the buffers when
 * a Subscribable or Promise returned by the `closingSelector` function emits.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var buffered = clicks.bufferToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferWhen}
 * @see {@link windowToggle}
 *
 * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new
 * buffers.
 * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns a Subscribable or Promise,
 * which, when it emits, signals that the associated buffer should be emitted
 * and cleared.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferToggle
 * @owner Observable
 */
function bufferToggle(openings, closingSelector) {
    return function bufferToggleOperatorFunction(source) {
        return source.lift(new BufferToggleOperator(openings, closingSelector));
    };
}
exports.bufferToggle = bufferToggle;
var BufferToggleOperator = (function () {
    function BufferToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    BufferToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return BufferToggleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferToggleSubscriber = (function (_super) {
    __extends(BufferToggleSubscriber, _super);
    function BufferToggleSubscriber(destination, openings, closingSelector) {
        _super.call(this, destination);
        this.openings = openings;
        this.closingSelector = closingSelector;
        this.contexts = [];
        this.add(subscribeToResult_1.subscribeToResult(this, openings));
    }
    BufferToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        for (var i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
        }
    };
    BufferToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context = contexts.shift();
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
        }
        this.contexts = null;
        _super.prototype._error.call(this, err);
    };
    BufferToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context = contexts.shift();
            this.destination.next(context.buffer);
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
        }
        this.contexts = null;
        _super.prototype._complete.call(this);
    };
    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    };
    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
        this.closeBuffer(innerSub.context);
    };
    BufferToggleSubscriber.prototype.openBuffer = function (value) {
        try {
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) {
                this.trySubscribe(closingNotifier);
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
        var contexts = this.contexts;
        if (contexts && context) {
            var buffer = context.buffer, subscription = context.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        }
    };
    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
        var contexts = this.contexts;
        var buffer = [];
        var subscription = new Subscription_1.Subscription();
        var context = { buffer: buffer, subscription: subscription };
        contexts.push(context);
        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context);
        }
        else {
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        }
    };
    return BufferToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=bufferToggle.js.map

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(5);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Buffers the source Observable values, using a factory function of closing
 * Observables to determine when to close, emit, and reset the buffer.
 *
 * <span class="informal">Collects values from the past as an array. When it
 * starts collecting values, it calls a function that returns an Observable that
 * tells when to close the buffer and restart collecting.</span>
 *
 * <img src="./img/bufferWhen.png" width="100%">
 *
 * Opens a buffer immediately, then closes the buffer when the observable
 * returned by calling `closingSelector` function emits a value. When it closes
 * the buffer, it immediately opens a new buffer and repeats the process.
 *
 * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferWhen(() =>
 *   Rx.Observable.interval(1000 + Math.random() * 4000)
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link windowWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals buffer closure.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferWhen
 * @owner Observable
 */
function bufferWhen(closingSelector) {
    return function (source) {
        return source.lift(new BufferWhenOperator(closingSelector));
    };
}
exports.bufferWhen = bufferWhen;
var BufferWhenOperator = (function () {
    function BufferWhenOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    BufferWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
    };
    return BufferWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferWhenSubscriber = (function (_super) {
    __extends(BufferWhenSubscriber, _super);
    function BufferWhenSubscriber(destination, closingSelector) {
        _super.call(this, destination);
        this.closingSelector = closingSelector;
        this.subscribing = false;
        this.openBuffer();
    }
    BufferWhenSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferWhenSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated internal use only */ BufferWhenSubscriber.prototype._unsubscribe = function () {
        this.buffer = null;
        this.subscribing = false;
    };
    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openBuffer();
    };
    BufferWhenSubscriber.prototype.notifyComplete = function () {
        if (this.subscribing) {
            this.complete();
        }
        else {
            this.openBuffer();
        }
    };
    BufferWhenSubscriber.prototype.openBuffer = function () {
        var closingSubscription = this.closingSubscription;
        if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        }
        var buffer = this.buffer;
        if (this.buffer) {
            this.destination.next(buffer);
        }
        this.buffer = [];
        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject_1.errorObject) {
            this.error(errorObject_1.errorObject.e);
        }
        else {
            closingSubscription = new Subscription_1.Subscription();
            this.closingSubscription = closingSubscription;
            this.add(closingSubscription);
            this.subscribing = true;
            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
            this.subscribing = false;
        }
    };
    return BufferWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=bufferWhen.js.map

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
 *
 * <img src="./img/catch.png" width="100%">
 *
 * @example <caption>Continues with a different Observable when there's an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n == 4) {
 * 	     throw 'four!';
 *     }
 *	   return n;
 *   })
 *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, I, II, III, IV, V
 *
 * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n === 4) {
 * 	     throw 'four!';
 *     }
 * 	   return n;
 *   })
 *   .catch((err, caught) => caught)
 *   .take(30)
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, 1, 2, 3, ...
 *
 * @example <caption>Throws a new error when the source Observable throws an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 *     if (n == 4) {
 *       throw 'four!';
 *     }
 *     return n;
 *   })
 *   .catch(err => {
 *     throw 'error in source. Details: ' + err;
 *   })
 *   .subscribe(
 *     x => console.log(x),
 *     err => console.log(err)
 *   );
 *   // 1, 2, 3, error in source. Details: four!
 *
 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
 *  is returned by the `selector` will be used to continue the observable chain.
 * @return {Observable} An observable that originates from either the source or the observable returned by the
 *  catch `selector` function.
 * @name catchError
 */
function catchError(selector) {
    return function catchErrorOperatorFunction(source) {
        var operator = new CatchOperator(selector);
        var caught = source.lift(operator);
        return (operator.caught = caught);
    };
}
exports.catchError = catchError;
var CatchOperator = (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CatchSubscriber = (function (_super) {
    __extends(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        _super.call(this, destination);
        this.selector = selector;
        this.caught = caught;
    }
    // NOTE: overriding `error` instead of `_error` because we don't want
    // to have this flag this subscriber as `isStopped`. We can mimic the
    // behavior of the RetrySubscriber (from the `retry` operator), where
    // we unsubscribe from our source chain, reset our Subscriber flags,
    // then subscribe to the selector result.
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            this.add(subscribeToResult_1.subscribeToResult(this, result));
        }
    };
    return CatchSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=catchError.js.map

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var combineLatest_1 = __webpack_require__(31);
function combineAll(project) {
    return function (source) { return source.lift(new combineLatest_1.CombineLatestOperator(project)); };
}
exports.combineAll = combineAll;
//# sourceMappingURL=combineAll.js.map

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var concat_1 = __webpack_require__(18);
var concat_2 = __webpack_require__(18);
exports.concatStatic = concat_2.concat;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from every
 * given input Observable after the current Observable.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * Joins this Observable with multiple other Observables by subscribing to them
 * one at a time, starting with the source, and merging their results into the
 * output Observable. Will wait for each Observable to complete before moving
 * on to the next.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = timer.concat(sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 * @example <caption>Concatenate 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = timer1.concat(timer2, timer3);
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} other An input Observable to concatenate after the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @method concat
 * @owner Observable
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return function (source) { return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables))); };
}
exports.concat = concat;
//# sourceMappingURL=concat.js.map

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var concatMap_1 = __webpack_require__(47);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in a serialized fashion on the output Observable.
 *
 * <span class="informal">It's like {@link concatMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/concatMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. Each new `innerObservable`
 * instance emitted on the output Observable is concatenated with the previous
 * `innerObservable` instance.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter
 * set to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link mergeMapTo}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An observable of values merged together by joining the
 * passed observable with itself, one after the other, for each value emitted
 * from the source.
 * @method concatMapTo
 * @owner Observable
 */
function concatMapTo(innerObservable, resultSelector) {
    return concatMap_1.concatMap(function () { return innerObservable; }, resultSelector);
}
exports.concatMapTo = concatMapTo;
//# sourceMappingURL=concatMapTo.js.map

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Counts the number of emissions on the source and emits that number when the
 * source completes.
 *
 * <span class="informal">Tells how many values were emitted, when the source
 * completes.</span>
 *
 * <img src="./img/count.png" width="100%">
 *
 * `count` transforms an Observable that emits values into an Observable that
 * emits a single value that represents the number of values emitted by the
 * source Observable. If the source Observable terminates with an error, `count`
 * will pass this error notification along without emitting a value first. If
 * the source Observable does not terminate at all, `count` will neither emit
 * a value nor terminate. This operator takes an optional `predicate` function
 * as argument, in which case the output emission will represent the number of
 * source values that matched `true` with the `predicate`.
 *
 * @example <caption>Counts how many seconds have passed before the first click happened</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var secondsBeforeClick = seconds.takeUntil(clicks);
 * var result = secondsBeforeClick.count();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>
 * var numbers = Rx.Observable.range(1, 7);
 * var result = numbers.count(i => i % 2 === 1);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 4
 *
 * @see {@link max}
 * @see {@link min}
 * @see {@link reduce}
 *
 * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A
 * boolean function to select what values are to be counted. It is provided with
 * arguments of:
 * - `value`: the value from the source Observable.
 * - `index`: the (zero-based) "index" of the value from the source Observable.
 * - `source`: the source Observable instance itself.
 * @return {Observable} An Observable of one number that represents the count as
 * described above.
 * @method count
 * @owner Observable
 */
function count(predicate) {
    return function (source) { return source.lift(new CountOperator(predicate, source)); };
}
exports.count = count;
var CountOperator = (function () {
    function CountOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    CountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
    };
    return CountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CountSubscriber = (function (_super) {
    __extends(CountSubscriber, _super);
    function CountSubscriber(destination, predicate, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.source = source;
        this.count = 0;
        this.index = 0;
    }
    CountSubscriber.prototype._next = function (value) {
        if (this.predicate) {
            this._tryPredicate(value);
        }
        else {
            this.count++;
        }
    };
    CountSubscriber.prototype._tryPredicate = function (value) {
        var result;
        try {
            result = this.predicate(value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.count++;
        }
    };
    CountSubscriber.prototype._complete = function () {
        this.destination.next(this.count);
        this.destination.complete();
    };
    return CountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=count.js.map

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Emits a value from the source Observable only after a particular time span
 * determined by another Observable has passed without another source emission.
 *
 * <span class="informal">It's like {@link debounceTime}, but the time span of
 * emission silence is determined by a second Observable.</span>
 *
 * <img src="./img/debounce.png" width="100%">
 *
 * `debounce` delays values emitted by the source Observable, but drops previous
 * pending delayed emissions if a new value arrives on the source Observable.
 * This operator keeps track of the most recent value from the source
 * Observable, and spawns a duration Observable by calling the
 * `durationSelector` function. The value is emitted only when the duration
 * Observable emits a value or completes, and if no other value was emitted on
 * the source Observable since the duration Observable was spawned. If a new
 * value appears before the duration Observable emits, the previous value will
 * be dropped and will not be emitted on the output Observable.
 *
 * Like {@link debounceTime}, this is a rate-limiting operator, and also a
 * delay-like operator since output emissions do not necessarily occur at the
 * same time as they did on the source Observable.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounce(() => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the timeout
 * duration for each source value, returned as an Observable or a Promise.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified duration Observable returned by
 * `durationSelector`, and may drop some values if they occur too frequently.
 * @method debounce
 * @owner Observable
 */
function debounce(durationSelector) {
    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };
}
exports.debounce = debounce;
var DebounceOperator = (function () {
    function DebounceOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    DebounceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
    };
    return DebounceOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceSubscriber = (function (_super) {
    __extends(DebounceSubscriber, _super);
    function DebounceSubscriber(destination, durationSelector) {
        _super.call(this, destination);
        this.durationSelector = durationSelector;
        this.hasValue = false;
        this.durationSubscription = null;
    }
    DebounceSubscriber.prototype._next = function (value) {
        try {
            var result = this.durationSelector.call(this, value);
            if (result) {
                this._tryNext(value, result);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DebounceSubscriber.prototype._complete = function () {
        this.emitValue();
        this.destination.complete();
    };
    DebounceSubscriber.prototype._tryNext = function (value, duration) {
        var subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
        }
        subscription = subscribeToResult_1.subscribeToResult(this, duration);
        if (!subscription.closed) {
            this.add(this.durationSubscription = subscription);
        }
    };
    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    DebounceSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    DebounceSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            var value = this.value;
            var subscription = this.durationSubscription;
            if (subscription) {
                this.durationSubscription = null;
                subscription.unsubscribe();
                this.remove(subscription);
            }
            this.value = null;
            this.hasValue = false;
            _super.prototype._next.call(this, value);
        }
    };
    return DebounceSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=debounce.js.map

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var async_1 = __webpack_require__(4);
/**
 * Emits a value from the source Observable only after a particular time span
 * has passed without another source emission.
 *
 * <span class="informal">It's like {@link delay}, but passes only the most
 * recent value from each burst of emissions.</span>
 *
 * <img src="./img/debounceTime.png" width="100%">
 *
 * `debounceTime` delays values emitted by the source Observable, but drops
 * previous pending delayed emissions if a new value arrives on the source
 * Observable. This operator keeps track of the most recent value from the
 * source Observable, and emits that only when `dueTime` enough time has passed
 * without any other value appearing on the source Observable. If a new value
 * appears before `dueTime` silence occurs, the previous value will be dropped
 * and will not be emitted on the output Observable.
 *
 * This is a rate-limiting operator, because it is impossible for more than one
 * value to be emitted in any time window of duration `dueTime`, but it is also
 * a delay-like operator since output emissions do not occur at the same time as
 * they did on the source Observable. Optionally takes a {@link IScheduler} for
 * managing timers.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounceTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} dueTime The timeout duration in milliseconds (or the time
 * unit determined internally by the optional `scheduler`) for the window of
 * time required to wait for emission silence before emitting the most recent
 * source value.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the timeout for each value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified `dueTime`, and may drop some values if they occur
 * too frequently.
 * @method debounceTime
 * @owner Observable
 */
function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
}
exports.debounceTime = debounceTime;
var DebounceTimeOperator = (function () {
    function DebounceTimeOperator(dueTime, scheduler) {
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    }
    DebounceTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    };
    return DebounceTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceTimeSubscriber = (function (_super) {
    __extends(DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
        _super.call(this, destination);
        this.dueTime = dueTime;
        this.scheduler = scheduler;
        this.debouncedSubscription = null;
        this.lastValue = null;
        this.hasValue = false;
    }
    DebounceTimeSubscriber.prototype._next = function (value) {
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
    };
    DebounceTimeSubscriber.prototype._complete = function () {
        this.debouncedNext();
        this.destination.complete();
    };
    DebounceTimeSubscriber.prototype.debouncedNext = function () {
        this.clearDebounce();
        if (this.hasValue) {
            this.destination.next(this.lastValue);
            this.lastValue = null;
            this.hasValue = false;
        }
    };
    DebounceTimeSubscriber.prototype.clearDebounce = function () {
        var debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        }
    };
    return DebounceTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNext(subscriber) {
    subscriber.debouncedNext();
}
//# sourceMappingURL=debounceTime.js.map

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(4);
var isDate_1 = __webpack_require__(40);
var Subscriber_1 = __webpack_require__(1);
var Notification_1 = __webpack_require__(17);
/**
 * Delays the emission of items from the source Observable by a given timeout or
 * until a given Date.
 *
 * <span class="informal">Time shifts each item by some specified amount of
 * milliseconds.</span>
 *
 * <img src="./img/delay.png" width="100%">
 *
 * If the delay argument is a Number, this operator time shifts the source
 * Observable by that amount of time expressed in milliseconds. The relative
 * time intervals between the values are preserved.
 *
 * If the delay argument is a Date, this operator time shifts the start of the
 * Observable execution until the given date occurs.
 *
 * @example <caption>Delay each click by one second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @example <caption>Delay all clicks until a future date happens</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var date = new Date('March 15, 2050 12:00:00'); // in the future
 * var delayedClicks = clicks.delay(date); // click emitted only after that date
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 *
 * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
 * a `Date` until which the emission of the source items is delayed.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for
 * managing the timers that handle the time-shift for each item.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified timeout or Date.
 * @method delay
 * @owner Observable
 */
function delay(delay, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    var absoluteDelay = isDate_1.isDate(delay);
    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };
}
exports.delay = delay;
var DelayOperator = (function () {
    function DelayOperator(delay, scheduler) {
        this.delay = delay;
        this.scheduler = scheduler;
    }
    DelayOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
    };
    return DelayOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelaySubscriber = (function (_super) {
    __extends(DelaySubscriber, _super);
    function DelaySubscriber(destination, delay, scheduler) {
        _super.call(this, destination);
        this.delay = delay;
        this.scheduler = scheduler;
        this.queue = [];
        this.active = false;
        this.errored = false;
    }
    DelaySubscriber.dispatch = function (state) {
        var source = state.source;
        var queue = source.queue;
        var scheduler = state.scheduler;
        var destination = state.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
            queue.shift().notification.observe(destination);
        }
        if (queue.length > 0) {
            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay_1);
        }
        else {
            source.active = false;
        }
    };
    DelaySubscriber.prototype._schedule = function (scheduler) {
        this.active = true;
        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this, destination: this.destination, scheduler: scheduler
        }));
    };
    DelaySubscriber.prototype.scheduleNotification = function (notification) {
        if (this.errored === true) {
            return;
        }
        var scheduler = this.scheduler;
        var message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) {
            this._schedule(scheduler);
        }
    };
    DelaySubscriber.prototype._next = function (value) {
        this.scheduleNotification(Notification_1.Notification.createNext(value));
    };
    DelaySubscriber.prototype._error = function (err) {
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
    };
    DelaySubscriber.prototype._complete = function () {
        this.scheduleNotification(Notification_1.Notification.createComplete());
    };
    return DelaySubscriber;
}(Subscriber_1.Subscriber));
var DelayMessage = (function () {
    function DelayMessage(time, notification) {
        this.time = time;
        this.notification = notification;
    }
    return DelayMessage;
}());
//# sourceMappingURL=delay.js.map

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var Observable_1 = __webpack_require__(0);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Delays the emission of items from the source Observable by a given time span
 * determined by the emissions of another Observable.
 *
 * <span class="informal">It's like {@link delay}, but the time span of the
 * delay duration is determined by a second Observable.</span>
 *
 * <img src="./img/delayWhen.png" width="100%">
 *
 * `delayWhen` time shifts each emitted value from the source Observable by a
 * time span determined by another Observable. When the source emits a value,
 * the `delayDurationSelector` function is called with the source value as
 * argument, and should return an Observable, called the "duration" Observable.
 * The source value is emitted on the output Observable only when the duration
 * Observable emits a value or completes.
 *
 * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which
 * is an Observable. When `subscriptionDelay` emits its first value or
 * completes, the source Observable is subscribed to and starts behaving like
 * described in the previous paragraph. If `subscriptionDelay` is not provided,
 * `delayWhen` will subscribe to the source Observable as soon as the output
 * Observable is subscribed.
 *
 * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delayWhen(event =>
 *   Rx.Observable.interval(Math.random() * 5000)
 * );
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounce}
 * @see {@link delay}
 *
 * @param {function(value: T): Observable} delayDurationSelector A function that
 * returns an Observable for each value emitted by the source Observable, which
 * is then used to delay the emission of that item on the output Observable
 * until the Observable returned from this function emits a value.
 * @param {Observable} subscriptionDelay An Observable that triggers the
 * subscription to the source Observable once it emits any value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by an amount of time specified by the Observable returned by
 * `delayDurationSelector`.
 * @method delayWhen
 * @owner Observable
 */
function delayWhen(delayDurationSelector, subscriptionDelay) {
    if (subscriptionDelay) {
        return function (source) {
            return new SubscriptionDelayObservable(source, subscriptionDelay)
                .lift(new DelayWhenOperator(delayDurationSelector));
        };
    }
    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };
}
exports.delayWhen = delayWhen;
var DelayWhenOperator = (function () {
    function DelayWhenOperator(delayDurationSelector) {
        this.delayDurationSelector = delayDurationSelector;
    }
    DelayWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    };
    return DelayWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelayWhenSubscriber = (function (_super) {
    __extends(DelayWhenSubscriber, _super);
    function DelayWhenSubscriber(destination, delayDurationSelector) {
        _super.call(this, destination);
        this.delayDurationSelector = delayDurationSelector;
        this.completed = false;
        this.delayNotifierSubscriptions = [];
        this.values = [];
    }
    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        var value = this.removeSubscription(innerSub);
        if (value) {
            this.destination.next(value);
        }
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype._next = function (value) {
        try {
            var delayNotifier = this.delayDurationSelector(value);
            if (delayNotifier) {
                this.tryDelay(delayNotifier, value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DelayWhenSubscriber.prototype._complete = function () {
        this.completed = true;
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
        subscription.unsubscribe();
        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        var value = null;
        if (subscriptionIdx !== -1) {
            value = this.values[subscriptionIdx];
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
            this.values.splice(subscriptionIdx, 1);
        }
        return value;
    };
    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
        if (notifierSubscription && !notifierSubscription.closed) {
            this.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
        }
        this.values.push(value);
    };
    DelayWhenSubscriber.prototype.tryComplete = function () {
        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
        }
    };
    return DelayWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelayObservable = (function (_super) {
    __extends(SubscriptionDelayObservable, _super);
    function SubscriptionDelayObservable(/** @deprecated internal use only */ source, subscriptionDelay) {
        _super.call(this);
        this.source = source;
        this.subscriptionDelay = subscriptionDelay;
    }
    /** @deprecated internal use only */ SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    };
    return SubscriptionDelayObservable;
}(Observable_1.Observable));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelaySubscriber = (function (_super) {
    __extends(SubscriptionDelaySubscriber, _super);
    function SubscriptionDelaySubscriber(parent, source) {
        _super.call(this);
        this.parent = parent;
        this.source = source;
        this.sourceSubscribed = false;
    }
    SubscriptionDelaySubscriber.prototype._next = function (unused) {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype._error = function (err) {
        this.unsubscribe();
        this.parent.error(err);
    };
    SubscriptionDelaySubscriber.prototype._complete = function () {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
        if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        }
    };
    return SubscriptionDelaySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=delayWhen.js.map

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Converts an Observable of {@link Notification} objects into the emissions
 * that they represent.
 *
 * <span class="informal">Unwraps {@link Notification} objects as actual `next`,
 * `error` and `complete` emissions. The opposite of {@link materialize}.</span>
 *
 * <img src="./img/dematerialize.png" width="100%">
 *
 * `dematerialize` is assumed to operate an Observable that only emits
 * {@link Notification} objects as `next` emissions, and does not emit any
 * `error`. Such Observable is the output of a `materialize` operation. Those
 * notifications are then unwrapped using the metadata they contain, and emitted
 * as `next`, `error`, and `complete` on the output Observable.
 *
 * Use this operator in conjunction with {@link materialize}.
 *
 * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>
 * var notifA = new Rx.Notification('N', 'A');
 * var notifB = new Rx.Notification('N', 'B');
 * var notifE = new Rx.Notification('E', void 0,
 *   new TypeError('x.toUpperCase is not a function')
 * );
 * var materialized = Rx.Observable.of(notifA, notifB, notifE);
 * var upperCase = materialized.dematerialize();
 * upperCase.subscribe(x => console.log(x), e => console.error(e));
 *
 * // Results in:
 * // A
 * // B
 * // TypeError: x.toUpperCase is not a function
 *
 * @see {@link Notification}
 * @see {@link materialize}
 *
 * @return {Observable} An Observable that emits items and notifications
 * embedded in Notification objects emitted by the source Observable.
 * @method dematerialize
 * @owner Observable
 */
function dematerialize() {
    return function dematerializeOperatorFunction(source) {
        return source.lift(new DeMaterializeOperator());
    };
}
exports.dematerialize = dematerialize;
var DeMaterializeOperator = (function () {
    function DeMaterializeOperator() {
    }
    DeMaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DeMaterializeSubscriber(subscriber));
    };
    return DeMaterializeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DeMaterializeSubscriber = (function (_super) {
    __extends(DeMaterializeSubscriber, _super);
    function DeMaterializeSubscriber(destination) {
        _super.call(this, destination);
    }
    DeMaterializeSubscriber.prototype._next = function (value) {
        value.observe(this.destination);
    };
    return DeMaterializeSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=dematerialize.js.map

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
var Set_1 = __webpack_require__(471);
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 *
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 *
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 *
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)
 *   .distinct()
 *   .subscribe(x => console.log(x)); // 1, 2, 3, 4
 *
 * @example <caption>An example using a keySelector function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     .distinct((p: Person) => p.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 *
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [keySelector] Optional function to select which value you want to check as distinct.
 * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */
function distinct(keySelector, flushes) {
    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };
}
exports.distinct = distinct;
var DistinctOperator = (function () {
    function DistinctOperator(keySelector, flushes) {
        this.keySelector = keySelector;
        this.flushes = flushes;
    }
    DistinctOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
    };
    return DistinctOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctSubscriber = (function (_super) {
    __extends(DistinctSubscriber, _super);
    function DistinctSubscriber(destination, keySelector, flushes) {
        _super.call(this, destination);
        this.keySelector = keySelector;
        this.values = new Set_1.Set();
        if (flushes) {
            this.add(subscribeToResult_1.subscribeToResult(this, flushes));
        }
    }
    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values.clear();
    };
    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DistinctSubscriber.prototype._next = function (value) {
        if (this.keySelector) {
            this._useKeySelector(value);
        }
        else {
            this._finalizeNext(value, value);
        }
    };
    DistinctSubscriber.prototype._useKeySelector = function (value) {
        var key;
        var destination = this.destination;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this._finalizeNext(key, value);
    };
    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
        var values = this.values;
        if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
        }
    };
    return DistinctSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.DistinctSubscriber = DistinctSubscriber;
//# sourceMappingURL=distinct.js.map

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var distinctUntilChanged_1 = __webpack_require__(49);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,
 * using a property accessed by using the key provided to check if the two items are distinct.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>An example comparing the name of persons</caption>
 *
 *  interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'},
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilKeyChanged('name')
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @example <caption>An example comparing the first letters of the name</caption>
 *
 * interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo1'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo2'},
 *     { age: 6, name: 'Foo3'})
 *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo1' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo2' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 *
 * @param {string} key String key for object property lookup on each item.
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.
 * @method distinctUntilKeyChanged
 * @owner Observable
 */
function distinctUntilKeyChanged(key, compare) {
    return distinctUntilChanged_1.distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
}
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
//# sourceMappingURL=distinctUntilKeyChanged.js.map

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var ArgumentOutOfRangeError_1 = __webpack_require__(25);
/**
 * Emits the single value at the specified `index` in a sequence of emissions
 * from the source Observable.
 *
 * <span class="informal">Emits only the i-th value, then completes.</span>
 *
 * <img src="./img/elementAt.png" width="100%">
 *
 * `elementAt` returns an Observable that emits the item at the specified
 * `index` in the source Observable, or a default value if that `index` is out
 * of range and the `default` argument is provided. If the `default` argument is
 * not given and the `index` is out of range, the output Observable will emit an
 * `ArgumentOutOfRangeError` error.
 *
 * @example <caption>Emit only the third click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.elementAt(2);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // click 1 = nothing
 * // click 2 = nothing
 * // click 3 = MouseEvent object logged to console
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link skip}
 * @see {@link single}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the
 * Observable has completed before emitting the i-th `next` notification.
 *
 * @param {number} index Is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {T} [defaultValue] The default value returned for missing indices.
 * @return {Observable} An Observable that emits a single item, if it is found.
 * Otherwise, will emit the default value if given. If not, then emits an error.
 * @method elementAt
 * @owner Observable
 */
function elementAt(index, defaultValue) {
    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };
}
exports.elementAt = elementAt;
var ElementAtOperator = (function () {
    function ElementAtOperator(index, defaultValue) {
        this.index = index;
        this.defaultValue = defaultValue;
        if (index < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
        }
    }
    ElementAtOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));
    };
    return ElementAtOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ElementAtSubscriber = (function (_super) {
    __extends(ElementAtSubscriber, _super);
    function ElementAtSubscriber(destination, index, defaultValue) {
        _super.call(this, destination);
        this.index = index;
        this.defaultValue = defaultValue;
    }
    ElementAtSubscriber.prototype._next = function (x) {
        if (this.index-- === 0) {
            this.destination.next(x);
            this.destination.complete();
        }
    };
    ElementAtSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index >= 0) {
            if (typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
            }
            else {
                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);
            }
        }
        destination.complete();
    };
    return ElementAtSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=elementAt.js.map

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 *
 * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
 *  Observable.of(1, 2, 3, 4, 5, 6)
 *     .every(x => x < 5)
 *     .subscribe(x => console.log(x)); // -> false
 *
 * @param {function} predicate A function for determining if an item meets a specified condition.
 * @param {any} [thisArg] Optional object to use for `this` in the callback.
 * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
 * @method every
 * @owner Observable
 */
function every(predicate, thisArg) {
    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };
}
exports.every = every;
var EveryOperator = (function () {
    function EveryOperator(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    EveryOperator.prototype.call = function (observer, source) {
        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    };
    return EveryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var EverySubscriber = (function (_super) {
    __extends(EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
        this.index = 0;
        this.thisArg = thisArg || this;
    }
    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    };
    EverySubscriber.prototype._next = function (value) {
        var result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    };
    EverySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return EverySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=every.js.map

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Converts a higher-order Observable into a first-order Observable by dropping
 * inner Observables while the previous inner Observable has not yet completed.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * next inner Observables while the current inner is still executing.</span>
 *
 * <img src="./img/exhaust.png" width="100%">
 *
 * `exhaust` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable begins emitting the items emitted by that
 * inner Observable. So far, it behaves like {@link mergeAll}. However,
 * `exhaust` ignores every new inner Observable if the previous Observable has
 * not yet completed. Once that one completes, it will accept and flatten the
 * next inner Observable and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));
 * var result = higherOrder.exhaust();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link switch}
 * @see {@link mergeAll}
 * @see {@link exhaustMap}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable that takes a source of Observables and propagates the first observable
 * exclusively until it completes before subscribing to the next.
 * @method exhaust
 * @owner Observable
 */
function exhaust() {
    return function (source) { return source.lift(new SwitchFirstOperator()); };
}
exports.exhaust = exhaust;
var SwitchFirstOperator = (function () {
    function SwitchFirstOperator() {
    }
    SwitchFirstOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchFirstSubscriber(subscriber));
    };
    return SwitchFirstOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstSubscriber = (function (_super) {
    __extends(SwitchFirstSubscriber, _super);
    function SwitchFirstSubscriber(destination) {
        _super.call(this, destination);
        this.hasCompleted = false;
        this.hasSubscription = false;
    }
    SwitchFirstSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(subscribeToResult_1.subscribeToResult(this, value));
        }
    };
    SwitchFirstSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=exhaust.js.map

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable only if the previous projected Observable has completed.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link exhaust}.</span>
 *
 * <img src="./img/exhaustMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. When it projects a source value to
 * an Observable, the output Observable begins emitting the items emitted by
 * that projected Observable. However, `exhaustMap` ignores every new projected
 * Observable if the previous projected Observable has not yet completed. Once
 * that one completes, it will accept and flatten the next projected Observable
 * and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaust}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable containing projected Observables
 * of each item of the source, ignoring projected Observables that start before
 * their preceding Observable has completed.
 * @method exhaustMap
 * @owner Observable
 */
function exhaustMap(project, resultSelector) {
    return function (source) { return source.lift(new SwitchFirstMapOperator(project, resultSelector)); };
}
exports.exhaustMap = exhaustMap;
var SwitchFirstMapOperator = (function () {
    function SwitchFirstMapOperator(project, resultSelector) {
        this.project = project;
        this.resultSelector = resultSelector;
    }
    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));
    };
    return SwitchFirstMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstMapSubscriber = (function (_super) {
    __extends(SwitchFirstMapSubscriber, _super);
    function SwitchFirstMapSubscriber(destination, project, resultSelector) {
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.hasSubscription = false;
        this.hasCompleted = false;
        this.index = 0;
    }
    SwitchFirstMapSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.tryNext(value);
        }
    };
    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {
        var index = this.index++;
        var destination = this.destination;
        try {
            var result = this.project(value, index);
            this.hasSubscription = true;
            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
        }
        catch (err) {
            destination.error(err);
        }
    };
    SwitchFirstMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        if (resultSelector) {
            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            destination.next(innerValue);
        }
    };
    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        try {
            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            destination.next(result);
        }
        catch (err) {
            destination.error(err);
        }
    };
    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=exhaustMap.js.map

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/* tslint:enable:max-line-length */
/**
 * Recursively projects each source value to an Observable which is merged in
 * the output Observable.
 *
 * <span class="informal">It's similar to {@link mergeMap}, but applies the
 * projection function to every source value as well as every output value.
 * It's recursive.</span>
 *
 * <img src="./img/expand.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger. *Expand* will re-emit on the output
 * Observable every source value. Then, each output value is given to the
 * `project` function which returns an inner Observable to be merged on the
 * output Observable. Those output values resulting from the projection are also
 * given to the `project` function to produce new output values. This is how
 * *expand* behaves recursively.
 *
 * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var powersOfTwo = clicks
 *   .mapTo(1)
 *   .expand(x => Rx.Observable.of(2 * x).delay(1000))
 *   .take(10);
 * powersOfTwo.subscribe(x => console.log(x));
 *
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 *
 * @param {function(value: T, index: number) => Observable} project A function
 * that, when applied to an item emitted by the source or the output Observable,
 * returns an Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each projected inner Observable.
 * @return {Observable} An Observable that emits the source values and also
 * result of applying the projection function to each value emitted on the
 * output Observable and and merging the results of the Observables obtained
 * from this transformation.
 * @method expand
 * @owner Observable
 */
function expand(project, concurrent, scheduler) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (scheduler === void 0) { scheduler = undefined; }
    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };
}
exports.expand = expand;
var ExpandOperator = (function () {
    function ExpandOperator(project, concurrent, scheduler) {
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
    }
    ExpandOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    };
    return ExpandOperator;
}());
exports.ExpandOperator = ExpandOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ExpandSubscriber = (function (_super) {
    __extends(ExpandSubscriber, _super);
    function ExpandSubscriber(destination, project, concurrent, scheduler) {
        _super.call(this, destination);
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
        this.index = 0;
        this.active = 0;
        this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) {
            this.buffer = [];
        }
    }
    ExpandSubscriber.dispatch = function (arg) {
        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
        subscriber.subscribeToProjection(result, value, index);
    };
    ExpandSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (destination.closed) {
            this._complete();
            return;
        }
        var index = this.index++;
        if (this.active < this.concurrent) {
            destination.next(value);
            var result = tryCatch_1.tryCatch(this.project)(value, index);
            if (result === errorObject_1.errorObject) {
                destination.error(errorObject_1.errorObject.e);
            }
            else if (!this.scheduler) {
                this.subscribeToProjection(result, value, index);
            }
            else {
                var state = { subscriber: this, result: result, value: value, index: index };
                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
        this.active++;
        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
    };
    ExpandSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this._next(innerValue);
    };
    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
        }
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    return ExpandSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.ExpandSubscriber = ExpandSubscriber;
//# sourceMappingURL=expand.js.map

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var Subscription_1 = __webpack_require__(5);
/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when
 * the source terminates on complete or error.
 * @param {function} callback Function to be called when source terminates.
 * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.
 * @method finally
 * @owner Observable
 */
function finalize(callback) {
    return function (source) { return source.lift(new FinallyOperator(callback)); };
}
exports.finalize = finalize;
var FinallyOperator = (function () {
    function FinallyOperator(callback) {
        this.callback = callback;
    }
    FinallyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
    };
    return FinallyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FinallySubscriber = (function (_super) {
    __extends(FinallySubscriber, _super);
    function FinallySubscriber(destination, callback) {
        _super.call(this, destination);
        this.add(new Subscription_1.Subscription(callback));
    }
    return FinallySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=finalize.js.map

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var find_1 = __webpack_require__(51);
/**
 * Emits only the index of the first value emitted by the source Observable that
 * meets some condition.
 *
 * <span class="informal">It's like {@link find}, but emits the index of the
 * found value, not the value itself.</span>
 *
 * <img src="./img/findIndex.png" width="100%">
 *
 * `findIndex` searches for the first item in the source Observable that matches
 * the specified condition embodied by the `predicate`, and returns the
 * (zero-based) index of the first occurrence in the source. Unlike
 * {@link first}, the `predicate` is required in `findIndex`, and does not emit
 * an error if a valid value is not found.
 *
 * @example <caption>Emit the index of first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link first}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of the index of the first item that
 * matches the condition.
 * @method find
 * @owner Observable
 */
function findIndex(predicate, thisArg) {
    return function (source) { return source.lift(new find_1.FindValueOperator(predicate, source, true, thisArg)); };
}
exports.findIndex = findIndex;
//# sourceMappingURL=findIndex.js.map

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var EmptyError_1 = __webpack_require__(38);
/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {function(value: T, index: number): R} [resultSelector] A function to
 * produce the value on the output Observable based on the values
 * and the indices of the source Observable. The arguments passed to this
 * function are:
 * - `value`: the value that was emitted on the source.
 * - `index`: the "index" of the value from the source.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first(predicate, resultSelector, defaultValue) {
    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };
}
exports.first = first;
var FirstOperator = (function () {
    function FirstOperator(predicate, resultSelector, defaultValue, source) {
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
    }
    FirstOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return FirstOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FirstSubscriber = (function (_super) {
    __extends(FirstSubscriber, _super);
    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.index = 0;
        this.hasCompleted = false;
        this._emitted = false;
    }
    FirstSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index);
        }
        else {
            this._emit(value, index);
        }
    };
    FirstSubscriber.prototype._tryPredicate = function (value, index) {
        var result;
        try {
            result = this.predicate(value, index, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this._emit(value, index);
        }
    };
    FirstSubscriber.prototype._emit = function (value, index) {
        if (this.resultSelector) {
            this._tryResultSelector(value, index);
            return;
        }
        this._emitFinal(value);
    };
    FirstSubscriber.prototype._tryResultSelector = function (value, index) {
        var result;
        try {
            result = this.resultSelector(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this._emitFinal(result);
    };
    FirstSubscriber.prototype._emitFinal = function (value) {
        var destination = this.destination;
        if (!this._emitted) {
            this._emitted = true;
            destination.next(value);
            destination.complete();
            this.hasCompleted = true;
        }
    };
    FirstSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
            destination.next(this.defaultValue);
            destination.complete();
        }
        else if (!this.hasCompleted) {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return FirstSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=first.js.map

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var Subscription_1 = __webpack_require__(5);
var Observable_1 = __webpack_require__(0);
var Subject_1 = __webpack_require__(6);
var Map_1 = __webpack_require__(469);
var FastMap_1 = __webpack_require__(467);
/* tslint:enable:max-line-length */
/**
 * Groups the items emitted by an Observable according to a specified criterion,
 * and emits these grouped items as `GroupedObservables`, one
 * {@link GroupedObservable} per group.
 *
 * <img src="./img/groupBy.png" width="100%">
 *
 * @example <caption>Group objects by id and return as array</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs3'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *     )
 *     .groupBy(p => p.id)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // [ { id: 1, name: 'aze1' },
 * //   { id: 1, name: 'erg1' },
 * //   { id: 1, name: 'df1' } ]
 * //
 * // [ { id: 2, name: 'sf2' },
 * //   { id: 2, name: 'dg2' },
 * //   { id: 2, name: 'sfqfb2' },
 * //   { id: 2, name: 'qsgqsfg2' } ]
 * //
 * // [ { id: 3, name: 'qfs3' } ]
 *
 * @example <caption>Pivot data on the id field</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs1'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *                   )
 *     .groupBy(p => p.id, p => p.name)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], ["" + group$.key]))
 *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }
 * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }
 * // { id: 3, values: [ 'qfs1' ] }
 *
 * @param {function(value: T): K} keySelector A function that extracts the key
 * for each item.
 * @param {function(value: T): R} [elementSelector] A function that extracts the
 * return element for each item.
 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
 * A function that returns an Observable to determine how long each group should
 * exist.
 * @return {Observable<GroupedObservable<K,R>>} An Observable that emits
 * GroupedObservables, each of which corresponds to a unique key value and each
 * of which emits those items from the source Observable that share that key
 * value.
 * @method groupBy
 * @owner Observable
 */
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return function (source) {
        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
    };
}
exports.groupBy = groupBy;
var GroupByOperator = (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupBySubscriber = (function (_super) {
    __extends(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        _super.call(this, destination);
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
        this.groups = null;
        this.attemptedToUnsubscribe = false;
        this.count = 0;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(Subscriber_1.Subscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupDurationSubscriber = (function (_super) {
    __extends(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        _super.call(this, group);
        this.key = key;
        this.group = group;
        this.parent = parent;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    /** @deprecated internal use only */ GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(Subscriber_1.Subscriber));
/**
 * An Observable representing values belonging to the same group represented by
 * a common key. The values emitted by a GroupedObservable come from the source
 * Observable. The common key is available as the field `key` on a
 * GroupedObservable instance.
 *
 * @class GroupedObservable<K, T>
 */
var GroupedObservable = (function (_super) {
    __extends(GroupedObservable, _super);
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        _super.call(this);
        this.key = key;
        this.groupSubject = groupSubject;
        this.refCountSubscription = refCountSubscription;
    }
    /** @deprecated internal use only */ GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new Subscription_1.Subscription();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(Observable_1.Observable));
exports.GroupedObservable = GroupedObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerRefCountSubscription = (function (_super) {
    __extends(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        _super.call(this);
        this.parent = parent;
        parent.count++;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(Subscription_1.Subscription));
//# sourceMappingURL=groupBy.js.map

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var noop_1 = __webpack_require__(58);
/**
 * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.
 *
 * <img src="./img/ignoreElements.png" width="100%">
 *
 * @return {Observable} An empty Observable that only calls `complete`
 * or `error`, based on which one is called by the source Observable.
 * @method ignoreElements
 * @owner Observable
 */
function ignoreElements() {
    return function ignoreElementsOperatorFunction(source) {
        return source.lift(new IgnoreElementsOperator());
    };
}
exports.ignoreElements = ignoreElements;
var IgnoreElementsOperator = (function () {
    function IgnoreElementsOperator() {
    }
    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
    };
    return IgnoreElementsOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IgnoreElementsSubscriber = (function (_super) {
    __extends(IgnoreElementsSubscriber, _super);
    function IgnoreElementsSubscriber() {
        _super.apply(this, arguments);
    }
    IgnoreElementsSubscriber.prototype._next = function (unused) {
        noop_1.noop();
    };
    return IgnoreElementsSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=ignoreElements.js.map

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
function isEmpty() {
    return function (source) { return source.lift(new IsEmptyOperator()); };
}
exports.isEmpty = isEmpty;
var IsEmptyOperator = (function () {
    function IsEmptyOperator() {
    }
    IsEmptyOperator.prototype.call = function (observer, source) {
        return source.subscribe(new IsEmptySubscriber(observer));
    };
    return IsEmptyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IsEmptySubscriber = (function (_super) {
    __extends(IsEmptySubscriber, _super);
    function IsEmptySubscriber(destination) {
        _super.call(this, destination);
    }
    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
        var destination = this.destination;
        destination.next(isEmpty);
        destination.complete();
    };
    IsEmptySubscriber.prototype._next = function (value) {
        this.notifyComplete(false);
    };
    IsEmptySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return IsEmptySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=isEmpty.js.map

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var EmptyError_1 = __webpack_require__(38);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * <img src="./img/last.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {function} predicate - The condition any source emitted item has to satisfy.
 * @return {Observable} An Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 * @method last
 * @owner Observable
 */
function last(predicate, resultSelector, defaultValue) {
    return function (source) { return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source)); };
}
exports.last = last;
var LastOperator = (function () {
    function LastOperator(predicate, resultSelector, defaultValue, source) {
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
    }
    LastOperator.prototype.call = function (observer, source) {
        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return LastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var LastSubscriber = (function (_super) {
    __extends(LastSubscriber, _super);
    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.hasValue = false;
        this.index = 0;
        if (typeof defaultValue !== 'undefined') {
            this.lastValue = defaultValue;
            this.hasValue = true;
        }
    }
    LastSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index);
        }
        else {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this.lastValue = value;
            this.hasValue = true;
        }
    };
    LastSubscriber.prototype._tryPredicate = function (value, index) {
        var result;
        try {
            result = this.predicate(value, index, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this.lastValue = value;
            this.hasValue = true;
        }
    };
    LastSubscriber.prototype._tryResultSelector = function (value, index) {
        var result;
        try {
            result = this.resultSelector(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.lastValue = result;
        this.hasValue = true;
    };
    LastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.hasValue) {
            destination.next(this.lastValue);
            destination.complete();
        }
        else {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return LastSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=last.js.map

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Emits the given constant value on the output Observable every time the source
 * Observable emits a value.
 *
 * <span class="informal">Like {@link map}, but it maps every source value to
 * the same output value every time.</span>
 *
 * <img src="./img/mapTo.png" width="100%">
 *
 * Takes a constant `value` as argument, and emits that whenever the source
 * Observable emits a value. In other words, ignores the actual source value,
 * and simply uses the emission moment to know when to emit the given `value`.
 *
 * @example <caption>Map every click to the string 'Hi'</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var greetings = clicks.mapTo('Hi');
 * greetings.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {any} value The value to map each source value to.
 * @return {Observable} An Observable that emits the given `value` every time
 * the source Observable emits something.
 * @method mapTo
 * @owner Observable
 */
function mapTo(value) {
    return function (source) { return source.lift(new MapToOperator(value)); };
}
exports.mapTo = mapTo;
var MapToOperator = (function () {
    function MapToOperator(value) {
        this.value = value;
    }
    MapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapToSubscriber(subscriber, this.value));
    };
    return MapToOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapToSubscriber = (function (_super) {
    __extends(MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
        _super.call(this, destination);
        this.value = value;
    }
    MapToSubscriber.prototype._next = function (x) {
        this.destination.next(this.value);
    };
    return MapToSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=mapTo.js.map

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var Notification_1 = __webpack_require__(17);
/**
 * Represents all of the notifications from the source Observable as `next`
 * emissions marked with their original types within {@link Notification}
 * objects.
 *
 * <span class="informal">Wraps `next`, `error` and `complete` emissions in
 * {@link Notification} objects, emitted as `next` on the output Observable.
 * </span>
 *
 * <img src="./img/materialize.png" width="100%">
 *
 * `materialize` returns an Observable that emits a `next` notification for each
 * `next`, `error`, or `complete` emission of the source Observable. When the
 * source Observable emits `complete`, the output Observable will emit `next` as
 * a Notification of type "complete", and then it will emit `complete` as well.
 * When the source Observable emits `error`, the output will emit `next` as a
 * Notification of type "error", and then `complete`.
 *
 * This operator is useful for producing metadata of the source Observable, to
 * be consumed as `next` emissions. Use it in conjunction with
 * {@link dematerialize}.
 *
 * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>
 * var letters = Rx.Observable.of('a', 'b', 13, 'd');
 * var upperCase = letters.map(x => x.toUpperCase());
 * var materialized = upperCase.materialize();
 * materialized.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - Notification {kind: "N", value: "A", error: undefined, hasValue: true}
 * // - Notification {kind: "N", value: "B", error: undefined, hasValue: true}
 * // - Notification {kind: "E", value: undefined, error: TypeError:
 * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x
 * //   [as project] (http://1…, hasValue: false}
 *
 * @see {@link Notification}
 * @see {@link dematerialize}
 *
 * @return {Observable<Notification<T>>} An Observable that emits
 * {@link Notification} objects that wrap the original emissions from the source
 * Observable with metadata.
 * @method materialize
 * @owner Observable
 */
function materialize() {
    return function materializeOperatorFunction(source) {
        return source.lift(new MaterializeOperator());
    };
}
exports.materialize = materialize;
var MaterializeOperator = (function () {
    function MaterializeOperator() {
    }
    MaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MaterializeSubscriber(subscriber));
    };
    return MaterializeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MaterializeSubscriber = (function (_super) {
    __extends(MaterializeSubscriber, _super);
    function MaterializeSubscriber(destination) {
        _super.call(this, destination);
    }
    MaterializeSubscriber.prototype._next = function (value) {
        this.destination.next(Notification_1.Notification.createNext(value));
    };
    MaterializeSubscriber.prototype._error = function (err) {
        var destination = this.destination;
        destination.next(Notification_1.Notification.createError(err));
        destination.complete();
    };
    MaterializeSubscriber.prototype._complete = function () {
        var destination = this.destination;
        destination.next(Notification_1.Notification.createComplete());
        destination.complete();
    };
    return MaterializeSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=materialize.js.map

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var reduce_1 = __webpack_require__(21);
/**
 * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the largest value.
 *
 * <img src="./img/max.png" width="100%">
 *
 * @example <caption>Get the maximal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .max()
 *   .subscribe(x => console.log(x)); // -> 8
 *
 * @example <caption>Use a comparer function to get the maximal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'
 * }
 *
 * @see {@link min}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable} An Observable that emits item with the largest value.
 * @method max
 * @owner Observable
 */
function max(comparer) {
    var max = (typeof comparer === 'function')
        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }
        : function (x, y) { return x > y ? x : y; };
    return reduce_1.reduce(max);
}
exports.max = max;
//# sourceMappingURL=max.js.map

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var merge_1 = __webpack_require__(30);
var merge_2 = __webpack_require__(30);
exports.mergeStatic = merge_2.merge;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (either the source or an
 * Observable given as argument), and simply forwards (without doing any
 * transformation) all the values from all the input Observables to the output
 * Observable. The output Observable only completes once all input Observables
 * have completed. Any error delivered by an input Observable will be immediately
 * emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = clicks.merge(timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = timer1.merge(timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {ObservableInput} other An input Observable to merge with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} An Observable that emits items that are the result of
 * every input Observable.
 * @method merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return function (source) { return source.lift.call(merge_1.merge.apply(void 0, [source].concat(observables))); };
}
exports.merge = merge;
//# sourceMappingURL=merge.js.map

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in the output Observable.
 *
 * <span class="informal">It's like {@link mergeMap}, but maps each value always
 * to the same inner Observable.</span>
 *
 * <img src="./img/mergeMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then merges those resulting Observables into one
 * single Observable, which is the output Observable.
 *
 * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable.
 * @method mergeMapTo
 * @owner Observable
 */
function mergeMapTo(innerObservable, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
        resultSelector = null;
    }
    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };
}
exports.mergeMapTo = mergeMapTo;
// TODO: Figure out correct signature here: an Operator<Observable<T>, R>
//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>
var MergeMapToOperator = (function () {
    function MergeMapToOperator(ish, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        this.ish = ish;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
    }
    MergeMapToOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));
    };
    return MergeMapToOperator;
}());
exports.MergeMapToOperator = MergeMapToOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapToSubscriber = (function (_super) {
    __extends(MergeMapToSubscriber, _super);
    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        _super.call(this, destination);
        this.ish = ish;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeMapToSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var resultSelector = this.resultSelector;
            var index = this.index++;
            var ish = this.ish;
            var destination = this.destination;
            this.active++;
            this._innerSub(ish, destination, resultSelector, value, index);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapToSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        if (resultSelector) {
            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            destination.next(innerValue);
        }
    };
    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        var result;
        try {
            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        destination.next(result);
    };
    MergeMapToSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeMapToSubscriber = MergeMapToSubscriber;
//# sourceMappingURL=mergeMapTo.js.map

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var subscribeToResult_1 = __webpack_require__(3);
var OuterSubscriber_1 = __webpack_require__(2);
/**
 * Applies an accumulator function over the source Observable where the
 * accumulator function itself returns an Observable, then each intermediate
 * Observable returned is merged into the output Observable.
 *
 * <span class="informal">It's like {@link scan}, but the Observables returned
 * by the accumulator are merged into the outer Observable.</span>
 *
 * @example <caption>Count the number of click events</caption>
 * const click$ = Rx.Observable.fromEvent(document, 'click');
 * const one$ = click$.mapTo(1);
 * const seed = 0;
 * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);
 * count$.subscribe(x => console.log(x));
 *
 * // Results:
 * 1
 * 2
 * 3
 * 4
 * // ...and so on for each click
 *
 * @param {function(acc: R, value: T): Observable<R>} accumulator
 * The accumulator function called on each source value.
 * @param seed The initial accumulation value.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of
 * input Observables being subscribed to concurrently.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method mergeScan
 * @owner Observable
 */
function mergeScan(accumulator, seed, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };
}
exports.mergeScan = mergeScan;
var MergeScanOperator = (function () {
    function MergeScanOperator(accumulator, seed, concurrent) {
        this.accumulator = accumulator;
        this.seed = seed;
        this.concurrent = concurrent;
    }
    MergeScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
    };
    return MergeScanOperator;
}());
exports.MergeScanOperator = MergeScanOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeScanSubscriber = (function (_super) {
    __extends(MergeScanSubscriber, _super);
    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
        _super.call(this, destination);
        this.accumulator = accumulator;
        this.acc = acc;
        this.concurrent = concurrent;
        this.hasValue = false;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeScanSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var index = this.index++;
            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);
            var destination = this.destination;
            if (ish === errorObject_1.errorObject) {
                destination.error(errorObject_1.errorObject.e);
            }
            else {
                this.active++;
                this._innerSub(ish, value, index);
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeScanSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var destination = this.destination;
        this.acc = innerValue;
        this.hasValue = true;
        destination.next(innerValue);
    };
    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    return MergeScanSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeScanSubscriber = MergeScanSubscriber;
//# sourceMappingURL=mergeScan.js.map

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var reduce_1 = __webpack_require__(21);
/**
 * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the smallest value.
 *
 * <img src="./img/min.png" width="100%">
 *
 * @example <caption>Get the minimal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .min()
 *   .subscribe(x => console.log(x)); // -> 2
 *
 * @example <caption>Use a comparer function to get the minimal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'
 * }
 *
 * @see {@link max}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable<R>} An Observable that emits item with the smallest value.
 * @method min
 * @owner Observable
 */
function min(comparer) {
    var min = (typeof comparer === 'function')
        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }
        : function (x, y) { return x < y ? x : y; };
    return reduce_1.reduce(min);
}
exports.min = min;
//# sourceMappingURL=min.js.map

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Groups pairs of consecutive emissions together and emits them as an array of
 * two values.
 *
 * <span class="informal">Puts the current value and previous value together as
 * an array, and emits that.</span>
 *
 * <img src="./img/pairwise.png" width="100%">
 *
 * The Nth emission from the source Observable will cause the output Observable
 * to emit an array [(N-1)th, Nth] of the previous and the current value, as a
 * pair. For this reason, `pairwise` emits on the second and subsequent
 * emissions from the source Observable, but not on the first emission, because
 * there is no previous value in that case.
 *
 * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var pairs = clicks.pairwise();
 * var distance = pairs.map(pair => {
 *   var x0 = pair[0].clientX;
 *   var y0 = pair[0].clientY;
 *   var x1 = pair[1].clientX;
 *   var y1 = pair[1].clientY;
 *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));
 * });
 * distance.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 *
 * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of
 * consecutive values from the source Observable.
 * @method pairwise
 * @owner Observable
 */
function pairwise() {
    return function (source) { return source.lift(new PairwiseOperator()); };
}
exports.pairwise = pairwise;
var PairwiseOperator = (function () {
    function PairwiseOperator() {
    }
    PairwiseOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new PairwiseSubscriber(subscriber));
    };
    return PairwiseOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var PairwiseSubscriber = (function (_super) {
    __extends(PairwiseSubscriber, _super);
    function PairwiseSubscriber(destination) {
        _super.call(this, destination);
        this.hasPrev = false;
    }
    PairwiseSubscriber.prototype._next = function (value) {
        if (this.hasPrev) {
            this.destination.next([this.prev, value]);
        }
        else {
            this.hasPrev = true;
        }
        this.prev = value;
    };
    return PairwiseSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=pairwise.js.map

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var not_1 = __webpack_require__(473);
var filter_1 = __webpack_require__(50);
/**
 * Splits the source Observable into two, one with values that satisfy a
 * predicate, and another with values that don't satisfy the predicate.
 *
 * <span class="informal">It's like {@link filter}, but returns two Observables:
 * one like the output of {@link filter}, and the other with values that did not
 * pass the condition.</span>
 *
 * <img src="./img/partition.png" width="100%">
 *
 * `partition` outputs an array with two Observables that partition the values
 * from the source Observable through the given `predicate` function. The first
 * Observable in that array emits source values for which the predicate argument
 * returns true. The second Observable emits source values for which the
 * predicate returns false. The first behaves like {@link filter} and the second
 * behaves like {@link filter} with the predicate negated.
 *
 * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');
 * var clicksOnDivs = parts[0];
 * var clicksElsewhere = parts[1];
 * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));
 * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));
 *
 * @see {@link filter}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted on the first Observable in the returned array, if
 * `false` the value is emitted on the second Observable in the array. The
 * `index` parameter is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {[Observable<T>, Observable<T>]} An array with two Observables: one
 * with values that passed the predicate, and another with values that did not
 * pass the predicate.
 * @method partition
 * @owner Observable
 */
function partition(predicate, thisArg) {
    return function (source) { return [
        filter_1.filter(predicate, thisArg)(source),
        filter_1.filter(not_1.not(predicate, thisArg))(source)
    ]; };
}
exports.partition = partition;
//# sourceMappingURL=partition.js.map

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var map_1 = __webpack_require__(19);
/**
 * Maps each source value (an object) to its specified nested property.
 *
 * <span class="informal">Like {@link map}, but meant only for picking one of
 * the nested properties of every emitted object.</span>
 *
 * <img src="./img/pluck.png" width="100%">
 *
 * Given a list of strings describing a path to an object property, retrieves
 * the value of a specified nested property from all values in the source
 * Observable. If a property can't be resolved, it will return `undefined` for
 * that value.
 *
 * @example <caption>Map every click to the tagName of the clicked target element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var tagNames = clicks.pluck('target', 'tagName');
 * tagNames.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {...string} properties The nested properties to pluck from each source
 * value (an object).
 * @return {Observable} A new Observable of property values from the source values.
 * @method pluck
 * @owner Observable
 */
function pluck() {
    var properties = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        properties[_i - 0] = arguments[_i];
    }
    var length = properties.length;
    if (length === 0) {
        throw new Error('list of properties cannot be empty.');
    }
    return function (source) { return map_1.map(plucker(properties, length))(source); };
}
exports.pluck = pluck;
function plucker(props, length) {
    var mapper = function (x) {
        var currentProp = x;
        for (var i = 0; i < length; i++) {
            var p = currentProp[props[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    };
    return mapper;
}
//# sourceMappingURL=pluck.js.map

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Subject_1 = __webpack_require__(6);
var multicast_1 = __webpack_require__(16);
/* tslint:enable:max-line-length */
/**
 * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
 * before it begins emitting items to those Observers that have subscribed to it.
 *
 * <img src="./img/publish.png" width="100%">
 *
 * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times
 * as needed, without causing multiple subscriptions to the source sequence.
 * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
 * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.
 * @method publish
 * @owner Observable
 */
function publish(selector) {
    return selector ?
        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :
        multicast_1.multicast(new Subject_1.Subject());
}
exports.publish = publish;
//# sourceMappingURL=publish.js.map

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var BehaviorSubject_1 = __webpack_require__(65);
var multicast_1 = __webpack_require__(16);
/**
 * @param value
 * @return {ConnectableObservable<T>}
 * @method publishBehavior
 * @owner Observable
 */
function publishBehavior(value) {
    return function (source) { return multicast_1.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source); };
}
exports.publishBehavior = publishBehavior;
//# sourceMappingURL=publishBehavior.js.map

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AsyncSubject_1 = __webpack_require__(28);
var multicast_1 = __webpack_require__(16);
function publishLast() {
    return function (source) { return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(source); };
}
exports.publishLast = publishLast;
//# sourceMappingURL=publishLast.js.map

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ReplaySubject_1 = __webpack_require__(29);
var multicast_1 = __webpack_require__(16);
/* tslint:enable:max-line-length */
function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
        scheduler = selectorOrScheduler;
    }
    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
    var subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
    return function (source) { return multicast_1.multicast(function () { return subject; }, selector)(source); };
}
exports.publishReplay = publishReplay;
//# sourceMappingURL=publishReplay.js.map

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray_1 = __webpack_require__(12);
var race_1 = __webpack_require__(44);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that mirrors the first source Observable to emit an item
 * from the combination of this Observable and supplied Observables.
 * @param {...Observables} ...observables Sources used to race for which Observable emits first.
 * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.
 * @method race
 * @owner Observable
 */
function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return function raceOperatorFunction(source) {
        // if the only argument is an array, it was most likely called with
        // `pair([obs1, obs2, ...])`
        if (observables.length === 1 && isArray_1.isArray(observables[0])) {
            observables = observables[0];
        }
        return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));
    };
}
exports.race = race;
//# sourceMappingURL=race.js.map

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var EmptyObservable_1 = __webpack_require__(14);
/**
 * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.
 *
 * <img src="./img/repeat.png" width="100%">
 *
 * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield
 * an empty Observable.
 * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most
 * count times.
 * @method repeat
 * @owner Observable
 */
function repeat(count) {
    if (count === void 0) { count = -1; }
    return function (source) {
        if (count === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        else if (count < 0) {
            return source.lift(new RepeatOperator(-1, source));
        }
        else {
            return source.lift(new RepeatOperator(count - 1, source));
        }
    };
}
exports.repeat = repeat;
var RepeatOperator = (function () {
    function RepeatOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RepeatOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
    };
    return RepeatOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatSubscriber = (function (_super) {
    __extends(RepeatSubscriber, _super);
    function RepeatSubscriber(destination, count, source) {
        _super.call(this, destination);
        this.count = count;
        this.source = source;
    }
    RepeatSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.complete.call(this);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RepeatSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=repeat.js.map

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source
 * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable
 * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise
 * this method will resubscribe to the source Observable.
 *
 * <img src="./img/repeatWhen.png" width="100%">
 *
 * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with
 * which a user can `complete` or `error`, aborting the repetition.
 * @return {Observable} The source Observable modified with repeat logic.
 * @method repeatWhen
 * @owner Observable
 */
function repeatWhen(notifier) {
    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };
}
exports.repeatWhen = repeatWhen;
var RepeatWhenOperator = (function () {
    function RepeatWhenOperator(notifier) {
        this.notifier = notifier;
    }
    RepeatWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
    };
    return RepeatWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatWhenSubscriber = (function (_super) {
    __extends(RepeatWhenSubscriber, _super);
    function RepeatWhenSubscriber(destination, notifier, source) {
        _super.call(this, destination);
        this.notifier = notifier;
        this.source = source;
        this.sourceIsBeingSubscribedTo = true;
    }
    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    };
    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        if (this.sourceIsBeingSubscribedTo === false) {
            return _super.prototype.complete.call(this);
        }
    };
    RepeatWhenSubscriber.prototype.complete = function () {
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) {
            if (!this.retries) {
                this.subscribeToRetries();
            }
            if (!this.retriesSubscription || this.retriesSubscription.closed) {
                return _super.prototype.complete.call(this);
            }
            this._unsubscribeAndRecycle();
            this.notifications.next();
        }
    };
    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
        if (notifications) {
            notifications.unsubscribe();
            this.notifications = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
        this.notifications = null;
        this.retries = null;
        this.retriesSubscription = null;
        _super.prototype._unsubscribeAndRecycle.call(this);
        this.notifications = notifications;
        this.retries = retries;
        this.retriesSubscription = retriesSubscription;
        return this;
    };
    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
        this.notifications = new Subject_1.Subject();
        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);
        if (retries === errorObject_1.errorObject) {
            return _super.prototype.complete.call(this);
        }
        this.retries = retries;
        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
    };
    return RepeatWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=repeatWhen.js.map

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given
 * as a number parameter) rather than propagating the `error` call.
 *
 * <img src="./img/retry.png" width="100%">
 *
 * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
 * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
 * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
 * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
 * @param {number} count - Number of retry attempts before failing.
 * @return {Observable} The source Observable modified with the retry logic.
 * @method retry
 * @owner Observable
 */
function retry(count) {
    if (count === void 0) { count = -1; }
    return function (source) { return source.lift(new RetryOperator(count, source)); };
}
exports.retry = retry;
var RetryOperator = (function () {
    function RetryOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RetryOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
    };
    return RetryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetrySubscriber = (function (_super) {
    __extends(RetrySubscriber, _super);
    function RetrySubscriber(destination, count, source) {
        _super.call(this, destination);
        this.count = count;
        this.source = source;
    }
    RetrySubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.error.call(this, err);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RetrySubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=retry.js.map

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.
 * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child
 * subscription. Otherwise this method will resubscribe to the source Observable.
 *
 * <img src="./img/retryWhen.png" width="100%">
 *
 * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a
 * user can `complete` or `error`, aborting the retry.
 * @return {Observable} The source Observable modified with retry logic.
 * @method retryWhen
 * @owner Observable
 */
function retryWhen(notifier) {
    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };
}
exports.retryWhen = retryWhen;
var RetryWhenOperator = (function () {
    function RetryWhenOperator(notifier, source) {
        this.notifier = notifier;
        this.source = source;
    }
    RetryWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
    };
    return RetryWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetryWhenSubscriber = (function (_super) {
    __extends(RetryWhenSubscriber, _super);
    function RetryWhenSubscriber(destination, notifier, source) {
        _super.call(this, destination);
        this.notifier = notifier;
        this.source = source;
    }
    RetryWhenSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) {
                errors = new Subject_1.Subject();
                retries = tryCatch_1.tryCatch(this.notifier)(errors);
                if (retries === errorObject_1.errorObject) {
                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);
                }
                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
            }
            else {
                this.errors = null;
                this.retriesSubscription = null;
            }
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        }
    };
    /** @deprecated internal use only */ RetryWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
        if (errors) {
            errors.unsubscribe();
            this.errors = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
        this.errors = null;
        this.retries = null;
        this.retriesSubscription = null;
        this._unsubscribeAndRecycle();
        this.errors = errors;
        this.retries = retries;
        this.retriesSubscription = retriesSubscription;
        this.source.subscribe(this);
    };
    return RetryWhenSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=retryWhen.js.map

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Emits the most recently emitted value from the source Observable whenever
 * another Observable, the `notifier`, emits.
 *
 * <span class="informal">It's like {@link sampleTime}, but samples whenever
 * the `notifier` Observable emits something.</span>
 *
 * <img src="./img/sample.png" width="100%">
 *
 * Whenever the `notifier` Observable emits a value or completes, `sample`
 * looks at the source Observable and emits whichever value it has most recently
 * emitted since the previous sampling, unless the source has not emitted
 * anything since the previous sampling. The `notifier` is subscribed to as soon
 * as the output Observable is subscribed.
 *
 * @example <caption>On every click, sample the most recent "seconds" timer</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = seconds.sample(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {Observable<any>} notifier The Observable to use for sampling the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable whenever the notifier Observable
 * emits value or completes.
 * @method sample
 * @owner Observable
 */
function sample(notifier) {
    return function (source) { return source.lift(new SampleOperator(notifier)); };
}
exports.sample = sample;
var SampleOperator = (function () {
    function SampleOperator(notifier) {
        this.notifier = notifier;
    }
    SampleOperator.prototype.call = function (subscriber, source) {
        var sampleSubscriber = new SampleSubscriber(subscriber);
        var subscription = source.subscribe(sampleSubscriber);
        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));
        return subscription;
    };
    return SampleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleSubscriber = (function (_super) {
    __extends(SampleSubscriber, _super);
    function SampleSubscriber() {
        _super.apply(this, arguments);
        this.hasValue = false;
    }
    SampleSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
    };
    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    SampleSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    SampleSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
        }
    };
    return SampleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=sample.js.map

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var async_1 = __webpack_require__(4);
/**
 * Emits the most recently emitted value from the source Observable within
 * periodic time intervals.
 *
 * <span class="informal">Samples the source Observable at periodic time
 * intervals, emitting what it samples.</span>
 *
 * <img src="./img/sampleTime.png" width="100%">
 *
 * `sampleTime` periodically looks at the source Observable and emits whichever
 * value it has most recently emitted since the previous sampling, unless the
 * source has not emitted anything since the previous sampling. The sampling
 * happens periodically in time every `period` milliseconds (or the time unit
 * defined by the optional `scheduler` argument). The sampling starts as soon as
 * the output Observable is subscribed.
 *
 * @example <caption>Every second, emit the most recent click at most once</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.sampleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {number} period The sampling period expressed in milliseconds or the
 * time unit determined internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the sampling.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable at the specified time interval.
 * @method sampleTime
 * @owner Observable
 */
function sampleTime(period, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };
}
exports.sampleTime = sampleTime;
var SampleTimeOperator = (function () {
    function SampleTimeOperator(period, scheduler) {
        this.period = period;
        this.scheduler = scheduler;
    }
    SampleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
    };
    return SampleTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleTimeSubscriber = (function (_super) {
    __extends(SampleTimeSubscriber, _super);
    function SampleTimeSubscriber(destination, period, scheduler) {
        _super.call(this, destination);
        this.period = period;
        this.scheduler = scheduler;
        this.hasValue = false;
        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));
    }
    SampleTimeSubscriber.prototype._next = function (value) {
        this.lastValue = value;
        this.hasValue = true;
    };
    SampleTimeSubscriber.prototype.notifyNext = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
        }
    };
    return SampleTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNotification(state) {
    var subscriber = state.subscriber, period = state.period;
    subscriber.notifyNext();
    this.schedule(state, period);
}
//# sourceMappingURL=sampleTime.js.map

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
/**
 * Compares all values of two observables in sequence using an optional comparor function
 * and returns an observable of a single boolean value representing whether or not the two sequences
 * are equal.
 *
 * <span class="informal">Checks to see of all values emitted by both observables are equal, in order.</span>
 *
 * <img src="./img/sequenceEqual.png" width="100%">
 *
 * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either
 * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom
 * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the
 * observables completes, the operator will wait for the other observable to complete; If the other
 * observable emits before completing, the returned observable will emit `false` and complete. If one observable never
 * completes or emits after the other complets, the returned observable will never complete.
 *
 * @example <caption>figure out if the Konami code matches</caption>
 * var code = Rx.Observable.from([
 *  "ArrowUp",
 *  "ArrowUp",
 *  "ArrowDown",
 *  "ArrowDown",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "KeyB",
 *  "KeyA",
 *  "Enter" // no start key, clearly.
 * ]);
 *
 * var keys = Rx.Observable.fromEvent(document, 'keyup')
 *  .map(e => e.code);
 * var matches = keys.bufferCount(11, 1)
 *  .mergeMap(
 *    last11 =>
 *      Rx.Observable.from(last11)
 *        .sequenceEqual(code)
 *   );
 * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 * @see {@link withLatestFrom}
 *
 * @param {Observable} compareTo The observable sequence to compare the source sequence to.
 * @param {function} [comparor] An optional function to compare each value pair
 * @return {Observable} An Observable of a single boolean value representing whether or not
 * the values emitted by both observables were equal in sequence.
 * @method sequenceEqual
 * @owner Observable
 */
function sequenceEqual(compareTo, comparor) {
    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };
}
exports.sequenceEqual = sequenceEqual;
var SequenceEqualOperator = (function () {
    function SequenceEqualOperator(compareTo, comparor) {
        this.compareTo = compareTo;
        this.comparor = comparor;
    }
    SequenceEqualOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
    };
    return SequenceEqualOperator;
}());
exports.SequenceEqualOperator = SequenceEqualOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SequenceEqualSubscriber = (function (_super) {
    __extends(SequenceEqualSubscriber, _super);
    function SequenceEqualSubscriber(destination, compareTo, comparor) {
        _super.call(this, destination);
        this.compareTo = compareTo;
        this.comparor = comparor;
        this._a = [];
        this._b = [];
        this._oneComplete = false;
        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
    }
    SequenceEqualSubscriber.prototype._next = function (value) {
        if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
        }
        else {
            this._a.push(value);
            this.checkValues();
        }
    };
    SequenceEqualSubscriber.prototype._complete = function () {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
    };
    SequenceEqualSubscriber.prototype.checkValues = function () {
        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
        while (_a.length > 0 && _b.length > 0) {
            var a = _a.shift();
            var b = _b.shift();
            var areEqual = false;
            if (comparor) {
                areEqual = tryCatch_1.tryCatch(comparor)(a, b);
                if (areEqual === errorObject_1.errorObject) {
                    this.destination.error(errorObject_1.errorObject.e);
                }
            }
            else {
                areEqual = a === b;
            }
            if (!areEqual) {
                this.emit(false);
            }
        }
    };
    SequenceEqualSubscriber.prototype.emit = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    SequenceEqualSubscriber.prototype.nextB = function (value) {
        if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
        }
        else {
            this._b.push(value);
            this.checkValues();
        }
    };
    return SequenceEqualSubscriber;
}(Subscriber_1.Subscriber));
exports.SequenceEqualSubscriber = SequenceEqualSubscriber;
var SequenceEqualCompareToSubscriber = (function (_super) {
    __extends(SequenceEqualCompareToSubscriber, _super);
    function SequenceEqualCompareToSubscriber(destination, parent) {
        _super.call(this, destination);
        this.parent = parent;
    }
    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
        this.parent.nextB(value);
    };
    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
        this.parent.error(err);
    };
    SequenceEqualCompareToSubscriber.prototype._complete = function () {
        this.parent._complete();
    };
    return SequenceEqualCompareToSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=sequenceEqual.js.map

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var multicast_1 = __webpack_require__(16);
var refCount_1 = __webpack_require__(53);
var Subject_1 = __webpack_require__(6);
function shareSubjectFactory() {
    return new Subject_1.Subject();
}
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .multicast(() => new Subject()).refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };
}
exports.share = share;
;
//# sourceMappingURL=share.js.map

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ReplaySubject_1 = __webpack_require__(29);
/**
 * @method shareReplay
 * @owner Observable
 */
function shareReplay(bufferSize, windowTime, scheduler) {
    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };
}
exports.shareReplay = shareReplay;
function shareReplayOperator(bufferSize, windowTime, scheduler) {
    var subject;
    var refCount = 0;
    var subscription;
    var hasError = false;
    var isComplete = false;
    return function shareReplayOperation(source) {
        refCount++;
        if (!subject || hasError) {
            hasError = false;
            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
            subscription = source.subscribe({
                next: function (value) { subject.next(value); },
                error: function (err) {
                    hasError = true;
                    subject.error(err);
                },
                complete: function () {
                    isComplete = true;
                    subject.complete();
                },
            });
        }
        var innerSub = subject.subscribe(this);
        return function () {
            refCount--;
            innerSub.unsubscribe();
            if (subscription && refCount === 0 && isComplete) {
                subscription.unsubscribe();
            }
        };
    };
}
;
//# sourceMappingURL=shareReplay.js.map

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var EmptyError_1 = __webpack_require__(38);
/**
 * Returns an Observable that emits the single item emitted by the source Observable that matches a specified
 * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no
 * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.
 *
 * <img src="./img/single.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches
 * the predicate.
 .
 * @method single
 * @owner Observable
 */
function single(predicate) {
    return function (source) { return source.lift(new SingleOperator(predicate, source)); };
}
exports.single = single;
var SingleOperator = (function () {
    function SingleOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    SingleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
    };
    return SingleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SingleSubscriber = (function (_super) {
    __extends(SingleSubscriber, _super);
    function SingleSubscriber(destination, predicate, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.source = source;
        this.seenValue = false;
        this.index = 0;
    }
    SingleSubscriber.prototype.applySingleValue = function (value) {
        if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
        }
        else {
            this.seenValue = true;
            this.singleValue = value;
        }
    };
    SingleSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this.tryNext(value, index);
        }
        else {
            this.applySingleValue(value);
        }
    };
    SingleSubscriber.prototype.tryNext = function (value, index) {
        try {
            if (this.predicate(value, index, this.source)) {
                this.applySingleValue(value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    SingleSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
        }
        else {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return SingleSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=single.js.map

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Returns an Observable that skips the first `count` items emitted by the source Observable.
 *
 * <img src="./img/skip.png" width="100%">
 *
 * @param {Number} count - The number of times, items emitted by source Observable should be skipped.
 * @return {Observable} An Observable that skips values emitted by the source Observable.
 *
 * @method skip
 * @owner Observable
 */
function skip(count) {
    return function (source) { return source.lift(new SkipOperator(count)); };
}
exports.skip = skip;
var SkipOperator = (function () {
    function SkipOperator(total) {
        this.total = total;
    }
    SkipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipSubscriber(subscriber, this.total));
    };
    return SkipOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipSubscriber = (function (_super) {
    __extends(SkipSubscriber, _super);
    function SkipSubscriber(destination, total) {
        _super.call(this, destination);
        this.total = total;
        this.count = 0;
    }
    SkipSubscriber.prototype._next = function (x) {
        if (++this.count > this.total) {
            this.destination.next(x);
        }
    };
    return SkipSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=skip.js.map

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var ArgumentOutOfRangeError_1 = __webpack_require__(25);
/**
 * Skip the last `count` values emitted by the source Observable.
 *
 * <img src="./img/skipLast.png" width="100%">
 *
 * `skipLast` returns an Observable that accumulates a queue with a length
 * enough to store the first `count` values. As more values are received,
 * values are taken from the front of the queue and produced on the result
 * sequence. This causes values to be delayed.
 *
 * @example <caption>Skip the last 2 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 5);
 * var skipLastTwo = many.skipLast(2);
 * skipLastTwo.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 1 2 3
 *
 * @see {@link skip}
 * @see {@link skipUntil}
 * @see {@link skipWhile}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws
 * ArgumentOutOrRangeError if `i < 0`.
 *
 * @param {number} count Number of elements to skip from the end of the source Observable.
 * @returns {Observable<T>} An Observable that skips the last count values
 * emitted by the source Observable.
 * @method skipLast
 * @owner Observable
 */
function skipLast(count) {
    return function (source) { return source.lift(new SkipLastOperator(count)); };
}
exports.skipLast = skipLast;
var SkipLastOperator = (function () {
    function SkipLastOperator(_skipCount) {
        this._skipCount = _skipCount;
        if (this._skipCount < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
        }
    }
    SkipLastOperator.prototype.call = function (subscriber, source) {
        if (this._skipCount === 0) {
            // If we don't want to skip any values then just subscribe
            // to Subscriber without any further logic.
            return source.subscribe(new Subscriber_1.Subscriber(subscriber));
        }
        else {
            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
        }
    };
    return SkipLastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipLastSubscriber = (function (_super) {
    __extends(SkipLastSubscriber, _super);
    function SkipLastSubscriber(destination, _skipCount) {
        _super.call(this, destination);
        this._skipCount = _skipCount;
        this._count = 0;
        this._ring = new Array(_skipCount);
    }
    SkipLastSubscriber.prototype._next = function (value) {
        var skipCount = this._skipCount;
        var count = this._count++;
        if (count < skipCount) {
            this._ring[count] = value;
        }
        else {
            var currentIndex = count % skipCount;
            var ring = this._ring;
            var oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
        }
    };
    return SkipLastSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=skipLast.js.map

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
 *
 * <img src="./img/skipUntil.png" width="100%">
 *
 * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to
 * be mirrored by the resulting Observable.
 * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits
 * an item, then emits the remaining items.
 * @method skipUntil
 * @owner Observable
 */
function skipUntil(notifier) {
    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };
}
exports.skipUntil = skipUntil;
var SkipUntilOperator = (function () {
    function SkipUntilOperator(notifier) {
        this.notifier = notifier;
    }
    SkipUntilOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));
    };
    return SkipUntilOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipUntilSubscriber = (function (_super) {
    __extends(SkipUntilSubscriber, _super);
    function SkipUntilSubscriber(destination, notifier) {
        _super.call(this, destination);
        this.hasValue = false;
        this.isInnerStopped = false;
        this.add(subscribeToResult_1.subscribeToResult(this, notifier));
    }
    SkipUntilSubscriber.prototype._next = function (value) {
        if (this.hasValue) {
            _super.prototype._next.call(this, value);
        }
    };
    SkipUntilSubscriber.prototype._complete = function () {
        if (this.isInnerStopped) {
            _super.prototype._complete.call(this);
        }
        else {
            this.unsubscribe();
        }
    };
    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.hasValue = true;
    };
    SkipUntilSubscriber.prototype.notifyComplete = function () {
        this.isInnerStopped = true;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    return SkipUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=skipUntil.js.map

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
 * true, but emits all further source items as soon as the condition becomes false.
 *
 * <img src="./img/skipWhile.png" width="100%">
 *
 * @param {Function} predicate - A function to test each item emitted from the source Observable.
 * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the
 * specified predicate becomes false.
 * @method skipWhile
 * @owner Observable
 */
function skipWhile(predicate) {
    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
}
exports.skipWhile = skipWhile;
var SkipWhileOperator = (function () {
    function SkipWhileOperator(predicate) {
        this.predicate = predicate;
    }
    SkipWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    };
    return SkipWhileOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipWhileSubscriber = (function (_super) {
    __extends(SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.skipping = true;
        this.index = 0;
    }
    SkipWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (this.skipping) {
            this.tryCallPredicate(value);
        }
        if (!this.skipping) {
            destination.next(value);
        }
    };
    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
        try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    return SkipWhileSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=skipWhile.js.map

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayObservable_1 = __webpack_require__(13);
var ScalarObservable_1 = __webpack_require__(43);
var EmptyObservable_1 = __webpack_require__(14);
var concat_1 = __webpack_require__(18);
var isScheduler_1 = __webpack_require__(11);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i - 0] = arguments[_i];
    }
    return function (source) {
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len === 1) {
            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);
        }
        else if (len > 1) {
            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);
        }
        else {
            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);
        }
    };
}
exports.startWith = startWith;
//# sourceMappingURL=startWith.js.map

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var switchMap_1 = __webpack_require__(55);
var identity_1 = __webpack_require__(162);
function switchAll() {
    return switchMap_1.switchMap(identity_1.identity);
}
exports.switchAll = switchAll;
//# sourceMappingURL=switchAll.js.map

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is flattened multiple
 * times with {@link switch} in the output Observable.
 *
 * <span class="informal">It's like {@link switchMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/switchMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. The output Observables
 * emits values only from the most recently emitted instance of
 * `innerObservable`.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link switch}
 * @see {@link switchMap}
 * @see {@link mergeMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable, and taking only the values
 * from the most recently projected inner Observable.
 * @method switchMapTo
 * @owner Observable
 */
function switchMapTo(innerObservable, resultSelector) {
    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };
}
exports.switchMapTo = switchMapTo;
var SwitchMapToOperator = (function () {
    function SwitchMapToOperator(observable, resultSelector) {
        this.observable = observable;
        this.resultSelector = resultSelector;
    }
    SwitchMapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));
    };
    return SwitchMapToOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapToSubscriber = (function (_super) {
    __extends(SwitchMapToSubscriber, _super);
    function SwitchMapToSubscriber(destination, inner, resultSelector) {
        _super.call(this, destination);
        this.inner = inner;
        this.resultSelector = resultSelector;
        this.index = 0;
    }
    SwitchMapToSubscriber.prototype._next = function (value) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));
    };
    SwitchMapToSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
    };
    /** @deprecated internal use only */ SwitchMapToSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = null;
    };
    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        if (resultSelector) {
            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            destination.next(innerValue);
        }
    };
    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
        var result;
        try {
            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        destination.next(result);
    };
    return SwitchMapToSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=switchMapTo.js.map

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var ArgumentOutOfRangeError_1 = __webpack_require__(25);
var EmptyObservable_1 = __webpack_require__(14);
/**
 * Emits only the first `count` values emitted by the source Observable.
 *
 * <span class="informal">Takes the first `count` values from the source, then
 * completes.</span>
 *
 * <img src="./img/take.png" width="100%">
 *
 * `take` returns an Observable that emits only the first `count` values emitted
 * by the source Observable. If the source emits fewer than `count` values then
 * all of its values are emitted. After that, it completes, regardless if the
 * source completes.
 *
 * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
 * var interval = Rx.Observable.interval(1000);
 * var five = interval.take(5);
 * five.subscribe(x => console.log(x));
 *
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of `next` values to emit.
 * @return {Observable<T>} An Observable that emits only the first `count`
 * values emitted by the source Observable, or all of the values from the source
 * if the source emits fewer than `count` values.
 * @method take
 * @owner Observable
 */
function take(count) {
    return function (source) {
        if (count === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        else {
            return source.lift(new TakeOperator(count));
        }
    };
}
exports.take = take;
var TakeOperator = (function () {
    function TakeOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
        }
    }
    TakeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeSubscriber(subscriber, this.total));
    };
    return TakeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeSubscriber = (function (_super) {
    __extends(TakeSubscriber, _super);
    function TakeSubscriber(destination, total) {
        _super.call(this, destination);
        this.total = total;
        this.count = 0;
    }
    TakeSubscriber.prototype._next = function (value) {
        var total = this.total;
        var count = ++this.count;
        if (count <= total) {
            this.destination.next(value);
            if (count === total) {
                this.destination.complete();
                this.unsubscribe();
            }
        }
    };
    return TakeSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=take.js.map

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Emits the values emitted by the source Observable until a `notifier`
 * Observable emits a value.
 *
 * <span class="informal">Lets values pass until a second Observable,
 * `notifier`, emits something. Then, it completes.</span>
 *
 * <img src="./img/takeUntil.png" width="100%">
 *
 * `takeUntil` subscribes and begins mirroring the source Observable. It also
 * monitors a second Observable, `notifier` that you provide. If the `notifier`
 * emits a value or a complete notification, the output Observable stops
 * mirroring the source Observable and completes.
 *
 * @example <caption>Tick every second until the first click happens</caption>
 * var interval = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = interval.takeUntil(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @param {Observable} notifier The Observable whose first emitted value will
 * cause the output Observable of `takeUntil` to stop emitting values from the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable until such time as `notifier` emits its first value.
 * @method takeUntil
 * @owner Observable
 */
function takeUntil(notifier) {
    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };
}
exports.takeUntil = takeUntil;
var TakeUntilOperator = (function () {
    function TakeUntilOperator(notifier) {
        this.notifier = notifier;
    }
    TakeUntilOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));
    };
    return TakeUntilOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeUntilSubscriber = (function (_super) {
    __extends(TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination, notifier) {
        _super.call(this, destination);
        this.notifier = notifier;
        this.add(subscribeToResult_1.subscribeToResult(this, notifier));
    }
    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.complete();
    };
    TakeUntilSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    return TakeUntilSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=takeUntil.js.map

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * Emits values emitted by the source Observable so long as each value satisfies
 * the given `predicate`, and then completes as soon as this `predicate` is not
 * satisfied.
 *
 * <span class="informal">Takes values from the source only while they pass the
 * condition given. When the first value does not satisfy, it completes.</span>
 *
 * <img src="./img/takeWhile.png" width="100%">
 *
 * `takeWhile` subscribes and begins mirroring the source Observable. Each value
 * emitted on the source is given to the `predicate` function which returns a
 * boolean, representing a condition to be satisfied by the source values. The
 * output Observable emits the source values until such time as the `predicate`
 * returns false, at which point `takeWhile` stops mirroring the source
 * Observable and completes the output Observable.
 *
 * @example <caption>Emit click events only while the clientX property is greater than 200</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.takeWhile(ev => ev.clientX > 200);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates a value emitted by the source Observable and returns a boolean.
 * Also takes the (zero-based) index as the second argument.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable so long as each value satisfies the condition defined by the
 * `predicate`, then completes.
 * @method takeWhile
 * @owner Observable
 */
function takeWhile(predicate) {
    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };
}
exports.takeWhile = takeWhile;
var TakeWhileOperator = (function () {
    function TakeWhileOperator(predicate) {
        this.predicate = predicate;
    }
    TakeWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
    };
    return TakeWhileOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeWhileSubscriber = (function (_super) {
    __extends(TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.index = 0;
    }
    TakeWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        var result;
        try {
            result = this.predicate(value, this.index++);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this.nextOrComplete(value, result);
    };
    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
        var destination = this.destination;
        if (Boolean(predicateResult)) {
            destination.next(value);
        }
        else {
            destination.complete();
        }
    };
    return TakeWhileSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=takeWhile.js.map

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/* tslint:enable:max-line-length */
/**
 * Perform a side effect for every emission on the source Observable, but return
 * an Observable that is identical to the source.
 *
 * <span class="informal">Intercepts each emission on the source and runs a
 * function, but returns an output which is identical to the source as long as errors don't occur.</span>
 *
 * <img src="./img/do.png" width="100%">
 *
 * Returns a mirrored Observable of the source Observable, but modified so that
 * the provided Observer is called to perform a side effect for every value,
 * error, and completion emitted by the source. Any errors that are thrown in
 * the aforementioned Observer or handlers are safely sent down the error path
 * of the output Observable.
 *
 * This operator is useful for debugging your Observables for the correct values
 * or performing other side effects.
 *
 * Note: this is different to a `subscribe` on the Observable. If the Observable
 * returned by `do` is not subscribed, the side effects specified by the
 * Observer will never happen. `do` therefore simply spies on existing
 * execution, it does not trigger an execution to happen like `subscribe` does.
 *
 * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks
 *   .do(ev => console.log(ev))
 *   .map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link map}
 * @see {@link subscribe}
 *
 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
 * callback for `next`.
 * @param {function} [error] Callback for errors in the source.
 * @param {function} [complete] Callback for the completion of the source.
 * @return {Observable} An Observable identical to the source, but runs the
 * specified Observer or callback(s) for each item.
 * @name tap
 */
function tap(nextOrObserver, error, complete) {
    return function tapOperatorFunction(source) {
        return source.lift(new DoOperator(nextOrObserver, error, complete));
    };
}
exports.tap = tap;
var DoOperator = (function () {
    function DoOperator(nextOrObserver, error, complete) {
        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
    }
    DoOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DoSubscriber = (function (_super) {
    __extends(DoSubscriber, _super);
    function DoSubscriber(destination, nextOrObserver, error, complete) {
        _super.call(this, destination);
        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
        safeSubscriber.syncErrorThrowable = true;
        this.add(safeSubscriber);
        this.safeSubscriber = safeSubscriber;
    }
    DoSubscriber.prototype._next = function (value) {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.next(value);
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.next(value);
        }
    };
    DoSubscriber.prototype._error = function (err) {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.error(err);
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.error(err);
        }
    };
    DoSubscriber.prototype._complete = function () {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.complete();
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.complete();
        }
    };
    return DoSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=tap.js.map

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var async_1 = __webpack_require__(4);
var throttle_1 = __webpack_require__(34);
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for `duration` milliseconds, then repeats this process.
 *
 * <span class="informal">Lets a value pass, then ignores source values for the
 * next `duration` milliseconds.</span>
 *
 * <img src="./img/throttleTime.png" width="100%">
 *
 * `throttleTime` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled. After `duration` milliseconds (or the time unit determined
 * internally by the optional `scheduler`) has passed, the timer is disabled,
 * and this process repeats for the next source value. Optionally takes a
 * {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {number} duration Time to wait before emitting another value after
 * emitting the last value, measured in milliseconds or the time unit determined
 * internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the throttling.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttleTime
 * @owner Observable
 */
function throttleTime(duration, scheduler, config) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }
    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
}
exports.throttleTime = throttleTime;
var ThrottleTimeOperator = (function () {
    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    };
    return ThrottleTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ThrottleTimeSubscriber = (function (_super) {
    __extends(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
        _super.call(this, destination);
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
        this._hasTrailingValue = false;
        this._trailingValue = null;
    }
    ThrottleTimeSubscriber.prototype._next = function (value) {
        if (this.throttled) {
            if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
        else {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
            if (this.leading) {
                this.destination.next(value);
            }
        }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
        var throttled = this.throttled;
        if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    };
    return ThrottleTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNext(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
}
//# sourceMappingURL=throttleTime.js.map

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var async_1 = __webpack_require__(4);
function timeInterval(scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return function (source) { return source.lift(new TimeIntervalOperator(scheduler)); };
}
exports.timeInterval = timeInterval;
var TimeInterval = (function () {
    function TimeInterval(value, interval) {
        this.value = value;
        this.interval = interval;
    }
    return TimeInterval;
}());
exports.TimeInterval = TimeInterval;
;
var TimeIntervalOperator = (function () {
    function TimeIntervalOperator(scheduler) {
        this.scheduler = scheduler;
    }
    TimeIntervalOperator.prototype.call = function (observer, source) {
        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));
    };
    return TimeIntervalOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeIntervalSubscriber = (function (_super) {
    __extends(TimeIntervalSubscriber, _super);
    function TimeIntervalSubscriber(destination, scheduler) {
        _super.call(this, destination);
        this.scheduler = scheduler;
        this.lastTime = 0;
        this.lastTime = scheduler.now();
    }
    TimeIntervalSubscriber.prototype._next = function (value) {
        var now = this.scheduler.now();
        var span = now - this.lastTime;
        this.lastTime = now;
        this.destination.next(new TimeInterval(value, span));
    };
    return TimeIntervalSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=timeInterval.js.map

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(4);
var isDate_1 = __webpack_require__(40);
var Subscriber_1 = __webpack_require__(1);
var TimeoutError_1 = __webpack_require__(159);
/**
 *
 * Errors if Observable does not emit a value in given time span.
 *
 * <span class="informal">Timeouts on Observable that doesn't emit values fast enough.</span>
 *
 * <img src="./img/timeout.png" width="100%">
 *
 * `timeout` operator accepts as an argument either a number or a Date.
 *
 * If number was provided, it returns an Observable that behaves like a source
 * Observable, unless there is a period of time where there is no value emitted.
 * So if you provide `100` as argument and first value comes after 50ms from
 * the moment of subscription, this value will be simply re-emitted by the resulting
 * Observable. If however after that 100ms passes without a second value being emitted,
 * stream will end with an error and source Observable will be unsubscribed.
 * These checks are performed throughout whole lifecycle of Observable - from the moment
 * it was subscribed to, until it completes or errors itself. Thus every value must be
 * emitted within specified period since previous value.
 *
 * If provided argument was Date, returned Observable behaves differently. It throws
 * if Observable did not complete before provided Date. This means that periods between
 * emission of particular values do not matter in this case. If Observable did not complete
 * before provided Date, source Observable will be unsubscribed. Other than that, resulting
 * stream behaves just as source Observable.
 *
 * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)
 * when returned Observable will check if source stream emitted value or completed.
 *
 * @example <caption>Check if ticks are emitted within certain timespan</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(1100) // Let's use bigger timespan to be safe,
 *                       // since `interval` might fire a bit later then scheduled.
 * .subscribe(
 *     value => console.log(value), // Will emit numbers just as regular `interval` would.
 *     err => console.log(err) // Will never be called.
 * );
 *
 * seconds.timeout(900).subscribe(
 *     value => console.log(value), // Will never be called.
 *     err => console.log(err) // Will emit error before even first value is emitted,
 *                             // since it did not arrive within 900ms period.
 * );
 *
 * @example <caption>Use Date to check if Observable completed</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(new Date("December 17, 2020 03:24:00"))
 * .subscribe(
 *     value => console.log(value), // Will emit values as regular `interval` would
 *                                  // until December 17, 2020 at 03:24:00.
 *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,
 *                             // since Observable did not complete by then.
 * );
 *
 * @see {@link timeoutWith}
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.
 * @method timeout
 * @owner Observable
 */
function timeout(due, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    var absoluteTimeout = isDate_1.isDate(due);
    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError())); };
}
exports.timeout = timeout;
var TimeoutOperator = (function () {
    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.scheduler = scheduler;
        this.errorInstance = errorInstance;
    }
    TimeoutOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));
    };
    return TimeoutOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutSubscriber = (function (_super) {
    __extends(TimeoutSubscriber, _super);
    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {
        _super.call(this, destination);
        this.absoluteTimeout = absoluteTimeout;
        this.waitFor = waitFor;
        this.scheduler = scheduler;
        this.errorInstance = errorInstance;
        this.action = null;
        this.scheduleTimeout();
    }
    TimeoutSubscriber.dispatchTimeout = function (subscriber) {
        subscriber.error(subscriber.errorInstance);
    };
    TimeoutSubscriber.prototype.scheduleTimeout = function () {
        var action = this.action;
        if (action) {
            // Recycle the action if we've already scheduled one. All the production
            // Scheduler Actions mutate their state/delay time and return themeselves.
            // VirtualActions are immutable, so they create and return a clone. In this
            // case, we need to set the action reference to the most recent VirtualAction,
            // to ensure that's the one we clone from next time.
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));
        }
    };
    TimeoutSubscriber.prototype._next = function (value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        _super.prototype._next.call(this, value);
    };
    /** @deprecated internal use only */ TimeoutSubscriber.prototype._unsubscribe = function () {
        this.action = null;
        this.scheduler = null;
        this.errorInstance = null;
    };
    return TimeoutSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=timeout.js.map

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = __webpack_require__(4);
var isDate_1 = __webpack_require__(40);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/* tslint:enable:max-line-length */
/**
 *
 * Errors if Observable does not emit a value in given time span, in case of which
 * subscribes to the second Observable.
 *
 * <span class="informal">It's a version of `timeout` operator that let's you specify fallback Observable.</span>
 *
 * <img src="./img/timeoutWith.png" width="100%">
 *
 * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,
 * still accepting as a first argument either a number or a Date, which control - respectively -
 * when values of source Observable should be emitted or when it should complete.
 *
 * The only difference is that it accepts a second, required parameter. This parameter
 * should be an Observable which will be subscribed when source Observable fails any timeout check.
 * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting
 * values from second Observable. Note that this fallback Observable is not checked for timeouts
 * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second
 * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that
 * stream completes, it completes as well.
 *
 * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided
 * here - as a third, optional parameter. It still is used to schedule timeout checks and -
 * as a consequence - when second Observable will be subscribed, since subscription happens
 * immediately after failing check.
 *
 * @example <caption>Add fallback observable</caption>
 * const seconds = Rx.Observable.interval(1000);
 * const minutes = Rx.Observable.interval(60 * 1000);
 *
 * seconds.timeoutWith(900, minutes)
 *     .subscribe(
 *         value => console.log(value), // After 900ms, will start emitting `minutes`,
 *                                      // since first value of `seconds` will not arrive fast enough.
 *         err => console.log(err) // Would be called after 900ms in case of `timeout`,
 *                                 // but here will never be called.
 *     );
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable
 *                          passed as a second parameter.
 * @method timeoutWith
 * @owner Observable
 */
function timeoutWith(due, withObservable, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return function (source) {
        var absoluteTimeout = isDate_1.isDate(due);
        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
    };
}
exports.timeoutWith = timeoutWith;
var TimeoutWithOperator = (function () {
    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
    }
    TimeoutWithOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    };
    return TimeoutWithOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutWithSubscriber = (function (_super) {
    __extends(TimeoutWithSubscriber, _super);
    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        _super.call(this, destination);
        this.absoluteTimeout = absoluteTimeout;
        this.waitFor = waitFor;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
        this.action = null;
        this.scheduleTimeout();
    }
    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
        var withObservable = subscriber.withObservable;
        subscriber._unsubscribeAndRecycle();
        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));
    };
    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
        var action = this.action;
        if (action) {
            // Recycle the action if we've already scheduled one. All the production
            // Scheduler Actions mutate their state/delay time and return themeselves.
            // VirtualActions are immutable, so they create and return a clone. In this
            // case, we need to set the action reference to the most recent VirtualAction,
            // to ensure that's the one we clone from next time.
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
        }
    };
    TimeoutWithSubscriber.prototype._next = function (value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        _super.prototype._next.call(this, value);
    };
    /** @deprecated internal use only */ TimeoutWithSubscriber.prototype._unsubscribe = function () {
        this.action = null;
        this.scheduler = null;
        this.withObservable = null;
    };
    return TimeoutWithSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=timeoutWith.js.map

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var reduce_1 = __webpack_require__(21);
function toArrayReducer(arr, item, index) {
    if (index === 0) {
        return [item];
    }
    arr.push(item);
    return arr;
}
function toArray() {
    return reduce_1.reduce(toArrayReducer, []);
}
exports.toArray = toArray;
//# sourceMappingURL=toArray.js.map

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Branch out the source Observable values as a nested Observable whenever
 * `windowBoundaries` emits.
 *
 * <span class="informal">It's like {@link buffer}, but emits a nested Observable
 * instead of an array.</span>
 *
 * <img src="./img/window.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping
 * windows. It emits the current window and opens a new one whenever the
 * Observable `windowBoundaries` emits an item. Because each window is an
 * Observable, the output is a higher-order Observable.
 *
 * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var result = clicks.window(interval)
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link buffer}
 *
 * @param {Observable<any>} windowBoundaries An Observable that completes the
 * previous window and starts a new window.
 * @return {Observable<Observable<T>>} An Observable of windows, which are
 * Observables emitting values of the source Observable.
 * @method window
 * @owner Observable
 */
function window(windowBoundaries) {
    return function windowOperatorFunction(source) {
        return source.lift(new WindowOperator(windowBoundaries));
    };
}
exports.window = window;
var WindowOperator = (function () {
    function WindowOperator(windowBoundaries) {
        this.windowBoundaries = windowBoundaries;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        var windowSubscriber = new WindowSubscriber(subscriber);
        var sourceSubscription = source.subscribe(windowSubscriber);
        if (!sourceSubscription.closed) {
            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));
        }
        return sourceSubscription;
    };
    return WindowOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination) {
        _super.call(this, destination);
        this.window = new Subject_1.Subject();
        destination.next(this.window);
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow();
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this._complete();
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
    };
    /** @deprecated internal use only */ WindowSubscriber.prototype._unsubscribe = function () {
        this.window = null;
    };
    WindowSubscriber.prototype.openWindow = function () {
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var destination = this.destination;
        var newWindow = this.window = new Subject_1.Subject();
        destination.next(newWindow);
    };
    return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=window.js.map

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
var Subject_1 = __webpack_require__(6);
/**
 * Branch out the source Observable values as a nested Observable with each
 * nested Observable emitting at most `windowSize` values.
 *
 * <span class="informal">It's like {@link bufferCount}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowCount.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows every `startWindowEvery`
 * items, each containing no more than `windowSize` items. When the source
 * Observable completes or encounters an error, the output Observable emits
 * the current window and propagates the notification from the source
 * Observable. If `startWindowEvery` is not provided, then new windows are
 * started immediately at the start of the source and when each window completes
 * with size `windowSize`.
 *
 * @example <caption>Ignore every 3rd click event, starting from the first one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(3)
 *   .map(win => win.skip(1)) // skip first of every 3 clicks
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Ignore every 3rd click event, starting from the third one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(2, 3)
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link bufferCount}
 *
 * @param {number} windowSize The maximum number of values emitted by each
 * window.
 * @param {number} [startWindowEvery] Interval at which to start a new window.
 * For example if `startWindowEvery` is `2`, then a new window will be started
 * on every other value from the source. A new window is started at the
 * beginning of the source by default.
 * @return {Observable<Observable<T>>} An Observable of windows, which in turn
 * are Observable of values.
 * @method windowCount
 * @owner Observable
 */
function windowCount(windowSize, startWindowEvery) {
    if (startWindowEvery === void 0) { startWindowEvery = 0; }
    return function windowCountOperatorFunction(source) {
        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
    };
}
exports.windowCount = windowCount;
var WindowCountOperator = (function () {
    function WindowCountOperator(windowSize, startWindowEvery) {
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
    }
    WindowCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    };
    return WindowCountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowCountSubscriber = (function (_super) {
    __extends(WindowCountSubscriber, _super);
    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
        _super.call(this, destination);
        this.destination = destination;
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
        this.windows = [new Subject_1.Subject()];
        this.count = 0;
        destination.next(this.windows[0]);
    }
    WindowCountSubscriber.prototype._next = function (value) {
        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        var destination = this.destination;
        var windowSize = this.windowSize;
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
        }
        var c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
        }
        if (++this.count % startWindowEvery === 0 && !this.closed) {
            var window_1 = new Subject_1.Subject();
            windows.push(window_1);
            destination.next(window_1);
        }
    };
    WindowCountSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().error(err);
            }
        }
        this.destination.error(err);
    };
    WindowCountSubscriber.prototype._complete = function () {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().complete();
            }
        }
        this.destination.complete();
    };
    /** @deprecated internal use only */ WindowCountSubscriber.prototype._unsubscribe = function () {
        this.count = 0;
        this.windows = null;
    };
    return WindowCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=windowCount.js.map

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var async_1 = __webpack_require__(4);
var Subscriber_1 = __webpack_require__(1);
var isNumeric_1 = __webpack_require__(26);
var isScheduler_1 = __webpack_require__(11);
function windowTime(windowTimeSpan) {
    var scheduler = async_1.async;
    var windowCreationInterval = null;
    var maxWindowSize = Number.POSITIVE_INFINITY;
    if (isScheduler_1.isScheduler(arguments[3])) {
        scheduler = arguments[3];
    }
    if (isScheduler_1.isScheduler(arguments[2])) {
        scheduler = arguments[2];
    }
    else if (isNumeric_1.isNumeric(arguments[2])) {
        maxWindowSize = arguments[2];
    }
    if (isScheduler_1.isScheduler(arguments[1])) {
        scheduler = arguments[1];
    }
    else if (isNumeric_1.isNumeric(arguments[1])) {
        windowCreationInterval = arguments[1];
    }
    return function windowTimeOperatorFunction(source) {
        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
    };
}
exports.windowTime = windowTime;
var WindowTimeOperator = (function () {
    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
    }
    WindowTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
    };
    return WindowTimeOperator;
}());
var CountedSubject = (function (_super) {
    __extends(CountedSubject, _super);
    function CountedSubject() {
        _super.apply(this, arguments);
        this._numberOfNextedValues = 0;
    }
    CountedSubject.prototype.next = function (value) {
        this._numberOfNextedValues++;
        _super.prototype.next.call(this, value);
    };
    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
        get: function () {
            return this._numberOfNextedValues;
        },
        enumerable: true,
        configurable: true
    });
    return CountedSubject;
}(Subject_1.Subject));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowTimeSubscriber = (function (_super) {
    __extends(WindowTimeSubscriber, _super);
    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        _super.call(this, destination);
        this.destination = destination;
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
        this.windows = [];
        var window = this.openWindow();
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            var closeState = { subscriber: this, window: window, context: null };
            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };
            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        }
        else {
            var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };
            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        }
    }
    WindowTimeSubscriber.prototype._next = function (value) {
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len; i++) {
            var window_1 = windows[i];
            if (!window_1.closed) {
                window_1.next(value);
                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                    this.closeWindow(window_1);
                }
            }
        }
    };
    WindowTimeSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        while (windows.length > 0) {
            windows.shift().error(err);
        }
        this.destination.error(err);
    };
    WindowTimeSubscriber.prototype._complete = function () {
        var windows = this.windows;
        while (windows.length > 0) {
            var window_2 = windows.shift();
            if (!window_2.closed) {
                window_2.complete();
            }
        }
        this.destination.complete();
    };
    WindowTimeSubscriber.prototype.openWindow = function () {
        var window = new CountedSubject();
        this.windows.push(window);
        var destination = this.destination;
        destination.next(window);
        return window;
    };
    WindowTimeSubscriber.prototype.closeWindow = function (window) {
        window.complete();
        var windows = this.windows;
        windows.splice(windows.indexOf(window), 1);
    };
    return WindowTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchWindowTimeSpanOnly(state) {
    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
    if (window) {
        subscriber.closeWindow(window);
    }
    state.window = subscriber.openWindow();
    this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
    var window = subscriber.openWindow();
    var action = this;
    var context = { action: action, subscription: null };
    var timeSpanState = { subscriber: subscriber, window: window, context: context };
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
    var subscriber = state.subscriber, window = state.window, context = state.context;
    if (context && context.action && context.subscription) {
        context.action.remove(context.subscription);
    }
    subscriber.closeWindow(window);
}
//# sourceMappingURL=windowTime.js.map

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var Subscription_1 = __webpack_require__(5);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Branch out the source Observable values as a nested Observable starting from
 * an emission from `openings` and ending when the output of `closingSelector`
 * emits.
 *
 * <span class="informal">It's like {@link bufferToggle}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowToggle.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows that contain those items
 * emitted by the source Observable between the time when the `openings`
 * Observable emits an item and when the Observable returned by
 * `closingSelector` emits an item.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var result = clicks.windowToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * ).mergeAll();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowWhen}
 * @see {@link bufferToggle}
 *
 * @param {Observable<O>} openings An observable of notifications to start new
 * windows.
 * @param {function(value: O): Observable} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns an Observable,
 * which, when it emits (either `next` or `complete`), signals that the
 * associated window should complete.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowToggle
 * @owner Observable
 */
function windowToggle(openings, closingSelector) {
    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };
}
exports.windowToggle = windowToggle;
var WindowToggleOperator = (function () {
    function WindowToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    WindowToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return WindowToggleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowToggleSubscriber = (function (_super) {
    __extends(WindowToggleSubscriber, _super);
    function WindowToggleSubscriber(destination, openings, closingSelector) {
        _super.call(this, destination);
        this.openings = openings;
        this.closingSelector = closingSelector;
        this.contexts = [];
        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));
    }
    WindowToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        if (contexts) {
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].window.next(value);
            }
        }
    };
    WindowToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context = contexts[index];
                context.window.error(err);
                context.subscription.unsubscribe();
            }
        }
        _super.prototype._error.call(this, err);
    };
    WindowToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context = contexts[index];
                context.window.complete();
                context.subscription.unsubscribe();
            }
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated internal use only */ WindowToggleSubscriber.prototype._unsubscribe = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context = contexts[index];
                context.window.unsubscribe();
                context.subscription.unsubscribe();
            }
        }
    };
    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (outerValue === this.openings) {
            var closingSelector = this.closingSelector;
            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
            if (closingNotifier === errorObject_1.errorObject) {
                return this.error(errorObject_1.errorObject.e);
            }
            else {
                var window_1 = new Subject_1.Subject();
                var subscription = new Subscription_1.Subscription();
                var context = { window: window_1, subscription: subscription };
                this.contexts.push(context);
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
                if (innerSubscription.closed) {
                    this.closeWindow(this.contexts.length - 1);
                }
                else {
                    innerSubscription.context = context;
                    subscription.add(innerSubscription);
                }
                this.destination.next(window_1);
            }
        }
        else {
            this.closeWindow(this.contexts.indexOf(outerValue));
        }
    };
    WindowToggleSubscriber.prototype.notifyError = function (err) {
        this.error(err);
    };
    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
        if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
        }
    };
    WindowToggleSubscriber.prototype.closeWindow = function (index) {
        if (index === -1) {
            return;
        }
        var contexts = this.contexts;
        var context = contexts[index];
        var window = context.window, subscription = context.subscription;
        contexts.splice(index, 1);
        window.complete();
        subscription.unsubscribe();
    };
    return WindowToggleSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=windowToggle.js.map

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/**
 * Branch out the source Observable values as a nested Observable using a
 * factory function of closing Observables to determine when to start a new
 * window.
 *
 * <span class="informal">It's like {@link bufferWhen}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowWhen.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping windows.
 * It emits the current window and opens a new one whenever the Observable
 * produced by the specified `closingSelector` function emits an item. The first
 * window is opened immediately when subscribing to the output Observable.
 *
 * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks
 *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link bufferWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals (on either `next` or
 * `complete`) when to close the previous window and start a new one.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowWhen
 * @owner Observable
 */
function windowWhen(closingSelector) {
    return function windowWhenOperatorFunction(source) {
        return source.lift(new WindowOperator(closingSelector));
    };
}
exports.windowWhen = windowWhen;
var WindowOperator = (function () {
    function WindowOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
    };
    return WindowOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination, closingSelector) {
        _super.call(this, destination);
        this.destination = destination;
        this.closingSelector = closingSelector;
        this.openWindow();
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
        if (this.closingNotification) {
            this.closingNotification.unsubscribe();
        }
    };
    WindowSubscriber.prototype.openWindow = function (innerSub) {
        if (innerSub === void 0) { innerSub = null; }
        if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
        }
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var window = this.window = new Subject_1.Subject();
        this.destination.next(window);
        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject_1.errorObject) {
            var err = errorObject_1.errorObject.e;
            this.destination.error(err);
            this.window.error(err);
        }
        else {
            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
        }
    };
    return WindowSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=windowWhen.js.map

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(2);
var subscribeToResult_1 = __webpack_require__(3);
/* tslint:enable:max-line-length */
/**
 * Combines the source Observable with other Observables to create an Observable
 * whose values are calculated from the latest values of each, only when the
 * source emits.
 *
 * <span class="informal">Whenever the source Observable emits a value, it
 * computes a formula using that value plus the latest values from other input
 * Observables, then emits the output of that formula.</span>
 *
 * <img src="./img/withLatestFrom.png" width="100%">
 *
 * `withLatestFrom` combines each value from the source Observable (the
 * instance) with the latest values from the other input Observables only when
 * the source emits a value, optionally using a `project` function to determine
 * the value to be emitted on the output Observable. All input Observables must
 * emit at least one value before the output Observable will emit a value.
 *
 * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var result = clicks.withLatestFrom(timer);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineLatest}
 *
 * @param {ObservableInput} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Function} [project] Projection function for combining values
 * together. Receives all values in order of the Observables passed, where the
 * first parameter is a value from the source Observable. (e.g.
 * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
 * passed, arrays will be emitted on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method withLatestFrom
 * @owner Observable
 */
function withLatestFrom() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
    }
    return function (source) {
        var project;
        if (typeof args[args.length - 1] === 'function') {
            project = args.pop();
        }
        var observables = args;
        return source.lift(new WithLatestFromOperator(observables, project));
    };
}
exports.withLatestFrom = withLatestFrom;
var WithLatestFromOperator = (function () {
    function WithLatestFromOperator(observables, project) {
        this.observables = observables;
        this.project = project;
    }
    WithLatestFromOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    };
    return WithLatestFromOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WithLatestFromSubscriber = (function (_super) {
    __extends(WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) {
        _super.call(this, destination);
        this.observables = observables;
        this.project = project;
        this.toRespond = [];
        var len = observables.length;
        this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            this.toRespond.push(i);
        }
        for (var i = 0; i < len; i++) {
            var observable = observables[i];
            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
        }
    }
    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        var toRespond = this.toRespond;
        if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
                toRespond.splice(found, 1);
            }
        }
    };
    WithLatestFromSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    WithLatestFromSubscriber.prototype._next = function (value) {
        if (this.toRespond.length === 0) {
            var args = [value].concat(this.values);
            if (this.project) {
                this._tryProject(args);
            }
            else {
                this.destination.next(args);
            }
        }
    };
    WithLatestFromSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return WithLatestFromSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=withLatestFrom.js.map

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var zip_1 = __webpack_require__(35);
function zipAll(project) {
    return function (source) { return source.lift(new zip_1.ZipOperator(project)); };
}
exports.zipAll = zipAll;
//# sourceMappingURL=zipAll.js.map

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__(22);
var AsyncScheduler_1 = __webpack_require__(23);
var VirtualTimeScheduler = (function (_super) {
    __extends(VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        var _this = this;
        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }
        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }
        _super.call(this, SchedulerAction, function () { return _this.frame; });
        this.maxFrames = maxFrames;
        this.frame = 0;
        this.index = -1;
    }
    /**
     * Prompt the Scheduler to execute all of its queued actions, therefore
     * clearing its queue.
     * @return {void}
     */
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.VirtualTimeScheduler = VirtualTimeScheduler;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var VirtualAction = (function (_super) {
    __extends(VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) { index = scheduler.index += 1; }
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
        this.index = index;
        this.active = true;
        this.index = scheduler.index = index;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.active = false;
        // If an action is rescheduled, we save allocations by mutating its state,
        // pushing it to the end of the scheduler queue, and recycling the action.
        // But since the VirtualTimeScheduler is used for testing, VirtualActions
        // must be immutable so they can be inspected later.
        var action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(AsyncAction_1.AsyncAction));
exports.VirtualAction = VirtualAction;
//# sourceMappingURL=VirtualTimeScheduler.js.map

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AsapAction_1 = __webpack_require__(458);
var AsapScheduler_1 = __webpack_require__(459);
/**
 *
 * Asap Scheduler
 *
 * <span class="informal">Perform task as fast as it can be performed asynchronously</span>
 *
 * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task
 * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing
 * code to end and then it will try to execute given task as fast as possible.
 *
 * `asap` scheduler will do its best to minimize time between end of currently executing code
 * and start of scheduled task. This makes it best candidate for performing so called "deferring".
 * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves
 * some (although minimal) unwanted delay.
 *
 * Note that using `asap` scheduler does not necessarily mean that your task will be first to process
 * after currently executing code. In particular, if some task was also scheduled with `asap` before,
 * that task will execute first. That being said, if you need to schedule task asynchronously, but
 * as soon as possible, `asap` scheduler is your best bet.
 *
 * @example <caption>Compare async and asap scheduler</caption>
 *
 * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...
 * Rx.Scheduler.asap.schedule(() => console.log('asap'));
 *
 * // Logs:
 * // "asap"
 * // "async"
 * // ... but 'asap' goes first!
 *
 * @static true
 * @name asap
 * @owner Scheduler
 */
exports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
//# sourceMappingURL=asap.js.map

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var QueueAction_1 = __webpack_require__(460);
var QueueScheduler_1 = __webpack_require__(461);
/**
 *
 * Queue Scheduler
 *
 * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
 *
 * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
 *
 * When used without delay, it schedules given task synchronously - executes it right when
 * it is scheduled. However when called recursively, that is when inside the scheduled task,
 * another task is scheduled with queue scheduler, instead of executing immediately as well,
 * that task will be put on a queue and wait for current one to finish.
 *
 * This means that when you execute task with `queue` scheduler, you are sure it will end
 * before any other task scheduled with that scheduler will start.
 *
 * @examples <caption>Schedule recursively first, then do something</caption>
 *
 * Rx.Scheduler.queue.schedule(() => {
 *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue
 *
 *   console.log('first');
 * });
 *
 * // Logs:
 * // "first"
 * // "second"
 *
 *
 * @example <caption>Reschedule itself recursively</caption>
 *
 * Rx.Scheduler.queue.schedule(function(state) {
 *   if (state !== 0) {
 *     console.log('before', state);
 *     this.schedule(state - 1); // `this` references currently executing Action,
 *                               // which we reschedule with new state
 *     console.log('after', state);
 *   }
 * }, 0, 3);
 *
 * // In scheduler that runs recursively, you would expect:
 * // "before", 3
 * // "before", 2
 * // "before", 1
 * // "after", 1
 * // "after", 2
 * // "after", 3
 *
 * // But with queue it logs:
 * // "before", 3
 * // "after", 3
 * // "before", 2
 * // "after", 2
 * // "before", 1
 * // "after", 1
 *
 *
 * @static true
 * @name queue
 * @owner Scheduler
 */
exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
//# sourceMappingURL=queue.js.map

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SubscriptionLog = (function () {
    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {
        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }
        this.subscribedFrame = subscribedFrame;
        this.unsubscribedFrame = unsubscribedFrame;
    }
    return SubscriptionLog;
}());
exports.SubscriptionLog = SubscriptionLog;
//# sourceMappingURL=SubscriptionLog.js.map

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SubscriptionLog_1 = __webpack_require__(157);
var SubscriptionLoggable = (function () {
    function SubscriptionLoggable() {
        this.subscriptions = [];
    }
    SubscriptionLoggable.prototype.logSubscribedFrame = function () {
        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));
        return this.subscriptions.length - 1;
    };
    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {
        var subscriptionLogs = this.subscriptions;
        var oldSubscriptionLog = subscriptionLogs[index];
        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());
    };
    return SubscriptionLoggable;
}());
exports.SubscriptionLoggable = SubscriptionLoggable;
//# sourceMappingURL=SubscriptionLoggable.js.map

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when duetime elapses.
 *
 * @see {@link timeout}
 *
 * @class TimeoutError
 */
var TimeoutError = (function (_super) {
    __extends(TimeoutError, _super);
    function TimeoutError() {
        var err = _super.call(this, 'Timeout has occurred');
        this.name = err.name = 'TimeoutError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return TimeoutError;
}(Error));
exports.TimeoutError = TimeoutError;
//# sourceMappingURL=TimeoutError.js.map

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = (function (_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        _super.call(this);
        this.errors = errors;
        var err = Error.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return UnsubscriptionError;
}(Error));
exports.UnsubscriptionError = UnsubscriptionError;
//# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function applyMixins(derivedCtor, baseCtors) {
    for (var i = 0, len = baseCtors.length; i < len; i++) {
        var baseCtor = baseCtors[i];
        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);
        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {
            var name_1 = propertyKeys[j];
            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];
        }
    }
}
exports.applyMixins = applyMixins;
//# sourceMappingURL=applyMixins.js.map

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function identity(x) {
    return x;
}
exports.identity = identity;
//# sourceMappingURL=identity.js.map

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArrayLike.js.map

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isObject(x) {
    return x != null && typeof x === 'object';
}
exports.isObject = isObject;
//# sourceMappingURL=isObject.js.map

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
exports.isPromise = isPromise;
//# sourceMappingURL=isPromise.js.map

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(475);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(63)))

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * ------------------------
 * Importing these Actions:
 *
 * Action constants are used in both the controller (to dispatch to the correct reducer)
 * as well as the service (where the reducer lives).
 * These can be imported using * and then aliased (such as action) such that
 * they can be referenced from multiple places as action.TOGGLE_EDITCOMMENT.
 * The naming convention is slightly different for UI actions and server actions.
 * ---
 * Server Based Actions:
 *
 * A server action example would be any object CRUD like SAVE_COMMENT, DELETE_PRODUCT, ETC.
 * A server action also has a third part added: Requested | Success | Fail so the action may be
 * dispatched as SAVE_COMMENT_REQUESTED but would be returned as SAVE_COMMENT_SUCCESS or SAVE_COMMENT_FAILED.
 * ---
 * UI Based Actions:
 *
 * UI actions do not include the REQUESTED|SUCCESS|FAILED part because they are simple enough that
 * they should not do anything other than success.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This action will toggle the comment edit and allow a user to start editing or stop editing a comment.
 */
exports.TOGGLE_EDITCOMMENT = "TOGGLE_EDITCOMMENT";
/**
 * This action will toggle the page loader.
 */
exports.TOGGLE_LOADER = "TOGGLE_LOADER";
/**
 * This will toggle the batch listing to its full or half size view.
 */
exports.TOGGLE_BATCHLISTING = "TOGGLE_BATCHLISTING";
/**
 * This will toggle the fulfillment listing between fulfillment and order items on the order fulfillments list screen
 */
exports.TOGGLE_FULFILLMENT_LISTING = "TOGGLE_FULFILLMENT_LISTING";
/**
 * This sets up all the state data on page start and should only be called once in a constructor.
 */
exports.SETUP_BATCHDETAIL = "SETUP_BATCHDETAIL";
/**
 * This updates all of the state for the batch detail page.
 */
exports.UPDATE_BATCHDETAIL = "UPDATE_BATCHDETAIL";
/**
 * This will refresh all of the batch detail state.
 */
exports.REFRESH_BATCHDETAIL = "REFRESH_BATCHDETAIL";
/**
 * This will create a new batch by passing all batch data.
 */
exports.ADD_BATCH = "ADD_BATCH";
/**
 * This will fire when the current page records selected on a table are updated.
 */
exports.CURRENT_PAGE_RECORDS_SELECTED = "CURRENT_PAGE_RECORDS_SELECTED";
/**
 * This setups the page that displays the order delivery custom attributes and should only be called once.
 */
exports.SETUP_ORDERDELIVERYATTRIBUTES = "SETUP_ORDERDELIVERYATTRIBUTES";
/**
 * This will delete a comment permenently.
 */
exports.DELETE_COMMENT_REQUESTED = "DELETE_COMMENT_REQUESTED";
/** This action coming back from the reducer indicated that the action was a success. */
exports.DELETE_COMMENT_SUCCESS = "DELETE_COMMENT_SUCCESS";
/** This action coming back from the reducer indicated that the action was a failure. */
exports.DELETE_COMMENT_FAILURE = "DELETE_COMMENT_FAILURE";
/**
 * This will delete a fulfillment batch item permenently and from the fulfillment batch.
 */
exports.DELETE_FULFILLMENTBATCHITEM_REQUESTED = "DELETE_FULFILLMENTBATCHITEM_REQUESTED";
/** This action coming back from the reducer indicated that the action was a success. */
exports.DELETE_FULFILLMENTBATCHITEM_SUCCESS = "DELETE_FULFILLMENTBATCHITEM_SUCCESS";
/** This action coming back from the reducer indicated that the action was a failure. */
exports.DELETE_FULFILLMENTBATCHITEM_FAILURE = "DELETE_FULFILLMENTBATCHITEM_FAILURE";
/**
 * This will save a comment.
 */
exports.SAVE_COMMENT_REQUESTED = "SAVE_COMMENT_REQUESTED";
/** This action coming back from the reducer indicated that the action was a success. */
exports.SAVE_COMMENT_SUCCESS = "SAVE_COMMENT_SUCCESS";
/** This action coming back from the reducer indicated that the action was a failure. */
exports.SAVE_COMMENT_FAILURE = "SAVE_COMMENT_FAILURE";
/**
 * This will fulfill the batch item if it has all needed information.
 */
exports.CREATE_FULFILLMENT_REQUESTED = "CREATE_FULFILLMENT_REQUESTED";
/** This action coming back from the reducer indicated that the action was a success. */
exports.CREATE_FULFILLMENT_SUCCESS = "CREATE_FULFILLMENT_SUCCESS";
/** This action coming back from the reducer indicated that the action was a failure. */
exports.CREATE_FULFILLMENT_FAILURE = "CREATE_FULFILLMENT_FAILURE";
/**
 * This will print the picking list that the user has defined.
 */
exports.PRINT_PICKINGLIST_REQUESTED = "PRINT_PICKINGLIST_REQUESTED";
/** This action coming back from the reducer indicated that the action was a success. */
exports.PRINT_PICKINGLIST_SUCCESS = "PRINT_PICKINGLIST_SUCCESS";
/** This action coming back from the reducer indicated that the action was a failure. */
exports.PRINT_PICKINGLIST_FAILURE = "PRINT_PICKINGLIST_FAILURE";
/**
 * This will print the packing list that the user has defined.
 */
exports.PRINT_PACKINGLIST_REQUESTED = "PRINT_PACKINGLIST_REQUESTED";
/** This action coming back from the reducer indicated that the action was a success. */
exports.PRINT_PACKINGLIST_SUCCESS = "PRINT_PACKINGLIST_SUCCESS";
/** This action coming back from the reducer indicated that the action was a failure. */
exports.PRINT_PACKINGLIST_FAILURE = "PRINT_PACKINGLIST_FAILURE";
/**
 * This will return a list of print templates that are defined for fulfillment batches.
 */
exports.PRINT_LIST_REQUESTED = "PRINT_LIST_REQUESTED";
/** This action coming back from the reducer indicated that the action was a success. */
exports.PRINT_LIST_SUCCESS = "PRINT_LIST_SUCCESS";
/** This action coming back from the reducer indicated that the action was a failure. */
exports.PRINT_LIST_FAILURE = "PRINT_LIST_FAILURE";
/**
 * This will return a list of emails that are defined for orderFulfillments
 */
exports.EMAIL_LIST_REQUESTED = "EMAIL_LIST_REQUESTED";
/** This action coming back from the reducer indicated that the action was a success. */
exports.EMAIL_LIST_SUCCESS = "EMAIL_LIST_SUCCESS";
/** This action coming back from the reducer indicated that the action was a failure. */
exports.EMAIL_LIST_FAILURE = "EMAIL_LIST_FAILURE";


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../../../../node_modules/typescript/lib/lib.es6.d.ts" />
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var FluxStore = __webpack_require__(61);
var actions = __webpack_require__(167);
/**
 * Fulfillment List Controller
 */
var OrderFulfillmentService = /** @class */ (function () {
    //@ngInject
    function OrderFulfillmentService($timeout, observerService, $hibachi, collectionConfigService, listingService, $rootScope, selectionService) {
        var _this = this;
        this.$timeout = $timeout;
        this.observerService = observerService;
        this.$hibachi = $hibachi;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.$rootScope = $rootScope;
        this.selectionService = selectionService;
        //This is the single object that contains all state for the component.
        this.state = {
            //boolean
            showFulfillmentListing: true,
            expandedFulfillmentBatchListing: true,
            editComment: false,
            //objects
            commentBeingEdited: undefined,
            emailTemplates: undefined,
            //strings
            currentSelectedFulfillmentBatchItemID: "",
            fulfillmentBatchId: undefined,
            //empty collections
            smFulfillmentBatchItemCollection: undefined,
            lgFulfillmentBatchItemCollection: undefined,
            currentRecordOrderDetail: undefined,
            commentsCollection: undefined,
            orderFulfillmentItemsCollection: undefined,
            emailCollection: undefined,
            printCollection: undefined,
            //arrays
            accountNames: [],
            orderDeliveryAttributes: [],
            loading: false,
            tableSelections: {
                table1: [],
                table2: []
            }
        };
        this.updateLock = false;
        this.selectedValue = "";
        // Middleware - Logger - add this into the store declaration to log all calls to the reducer.
        this.loggerEpic = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return args;
        };
        /**
         * The reducer is responsible for modifying the state of the state object into a new state.
         */
        this.orderFulfillmentStateReducer = function (state, action) {
            switch (action.type) {
                case actions.TOGGLE_FULFILLMENT_LISTING:
                    _this.state.showFulfillmentListing = !_this.state.showFulfillmentListing;
                    return __assign({}, _this.state, { action: action });
                case actions.ADD_BATCH:
                    return __assign({}, state, { action: action });
                case actions.SETUP_BATCHDETAIL:
                    //Setup the detail
                    if (action.payload.fulfillmentBatchId != undefined) {
                        _this.state.fulfillmentBatchId = action.payload.fulfillmentBatchId;
                    }
                    _this.setupFulfillmentBatchDetail();
                    return __assign({}, _this.state, { action: action });
                case actions.UPDATE_BATCHDETAIL:
                    return __assign({}, _this.state, { action: action });
                case actions.TOGGLE_BATCHLISTING:
                    //Toggle the listing from expanded to half size.
                    _this.state.expandedFulfillmentBatchListing = !_this.state.expandedFulfillmentBatchListing;
                    return __assign({}, _this.state, { action: action });
                case actions.TOGGLE_EDITCOMMENT:
                    //Update the comment.
                    _this.state.editComment = !_this.state.editComment;
                    if (_this.state.editComment == true) {
                        _this.state.commentBeingEdited = action.payload.comment;
                    }
                    else {
                        _this.state.commentBeingEdited = undefined;
                    }
                    return __assign({}, _this.state, { action: action });
                case actions.SAVE_COMMENT_REQUESTED:
                    if (action.payload.comment && action.payload.commentText) {
                        //saving
                        _this.saveComment(action.payload.comment, action.payload.commentText);
                    }
                    else {
                        //editing
                        _this.saveComment({}, action.payload.commentText);
                    }
                    //toggle edit mode. so we are no longer editing.
                    _this.state.editComment = false;
                    _this.state.commentBeingEdited = undefined;
                    return __assign({}, _this.state, { action: action });
                case actions.DELETE_COMMENT_REQUESTED:
                    _this.deleteComment(action.payload.comment);
                    _this.state.editComment = false;
                    _this.state.commentBeingEdited = undefined;
                    return __assign({}, _this.state, { action: action });
                case actions.CREATE_FULFILLMENT_REQUESTED:
                    //create all the data
                    _this.fulfillItems(action.payload.viewState, false);
                    return __assign({}, _this.state, { action: action });
                case actions.SETUP_ORDERDELIVERYATTRIBUTES:
                    _this.createOrderDeliveryAttributeCollection();
                    return __assign({}, _this.state, { action: action });
                case actions.DELETE_FULFILLMENTBATCHITEM_REQUESTED:
                    _this.deleteFulfillmentBatchItem();
                    return __assign({}, _this.state, { action: action });
                case actions.PRINT_LIST_REQUESTED:
                    _this.getPrintList();
                    return __assign({}, _this.state, { action: action });
                case actions.EMAIL_LIST_REQUESTED:
                    _this.getEmailList();
                    return __assign({}, _this.state, { action: action });
                case actions.TOGGLE_LOADER:
                    _this.state.loading = !_this.state.loading;
                    return __assign({}, _this.state, { action: action });
                default:
                    return _this.state;
            }
        };
        /** When a row is selected, remove the other selections.  */
        this.swSelectionToggleSelectionfulfillmentBatchItemTable2 = function (args) {
            if (args.action === "uncheck" || args.selectionid != "fulfillmentBatchItemTable2") {
                return;
            }
            //Are any previously checked?
            if (args.action === "check" && args.selection != undefined && args.selectionid == "fulfillmentBatchItemTable2") {
                //set the selection.
                //save the selected value
                var current = "";
                if (_this.selectedValue != undefined && _this.selectedValue.length) {
                    current = _this.selectedValue;
                    _this.selectedValue = args.selection;
                    //remove that old value
                    _this.selectionService.removeSelection("fulfillmentBatchItemTable2", current);
                    _this.state.currentSelectedFulfillmentBatchItemID = _this.selectedValue;
                    _this.state.smFulfillmentBatchItemCollection.getEntity().then(function (results) {
                        for (var result in results.pageRecords) {
                            var currentRecord = results['pageRecords'][result];
                            if (currentRecord['fulfillmentBatchItemID'] == _this.state.currentSelectedFulfillmentBatchItemID) {
                                //Matched - Save some items from the currentRecord to display.
                                //Get the orderItems for this fulfillment
                                _this.createOrderFulfillmentItemCollection(currentRecord['orderFulfillment_orderFulfillmentID']);
                                _this.createCurrentRecordDetailCollection(currentRecord);
                                _this.emitUpdateToClient();
                            }
                        }
                    });
                }
                else {
                    _this.selectedValue = args.selection;
                }
            }
        };
        /** Sets up the batch detail page including responding to listing changes. */
        this.setupFulfillmentBatchDetail = function () {
            //Create the fulfillmentBatchItemCollection
            _this.createLgOrderFulfillmentBatchItemCollection();
            _this.createSmOrderFulfillmentBatchItemCollection();
            _this.getOrderFulfillmentEmailTemplates();
            //Select the initial table row
            //get the listingDisplay store and listen for changes to the listing display state.
            _this.listingService.listingDisplayStore.store$.subscribe(function (update) {
                if (update.action && update.action.type && update.action.type == actions.CURRENT_PAGE_RECORDS_SELECTED) {
                    /*  Check for the tables we care about fulfillmentBatchItemTable1, fulfillmentBatchItemTable2
                        Outer table, will need to toggle and set the floating cards to this data.
                        on the first one being selected, go to the shrink view and set the selection on there as well.*/
                    if (angular.isDefined(update.action.payload)) {
                        if (angular.isDefined(update.action.payload.listingID) && update.action.payload.listingID == "fulfillmentBatchItemTable1") {
                            //If there is only one item selected, show that detail.
                            if (angular.isDefined(update.action.payload.values) && update.action.payload.values.length == 1) {
                                if (_this.state.expandedFulfillmentBatchListing) {
                                    _this.state.expandedFulfillmentBatchListing = !_this.state.expandedFulfillmentBatchListing;
                                }
                                _this.state.currentSelectedFulfillmentBatchItemID = update.action.payload.values[0];
                                //set the selection.
                                if (update.action.payload.values.length && _this.state.currentSelectedFulfillmentBatchItemID) {
                                    var selectedRowIndex = _this.listingService.getSelectedBy("fulfillmentBatchItemTable1", "fulfillmentBatchItemID", _this.state.currentSelectedFulfillmentBatchItemID);
                                    if (selectedRowIndex != -1) {
                                        _this.listingService
                                            .getListing("fulfillmentBatchItemTable2").selectionService
                                            .addSelection(_this.listingService.getListing("fulfillmentBatchItemTable2").tableID, _this.listingService.getListingPageRecords("fulfillmentBatchItemTable2")[selectedRowIndex][_this.listingService.getListingBaseEntityPrimaryIDPropertyName("fulfillmentBatchItemTable2")]);
                                    }
                                }
                                //use this id to get the record and set it to currentRecordOrderDetail.
                                //*****Need to iterate over the collection and find the ID to match against and get the orderfulfillment collection that matches this record.
                                _this.state.smFulfillmentBatchItemCollection.getEntity().then(function (results) {
                                    for (var result in results.pageRecords) {
                                        var currentRecord = results['pageRecords'][result];
                                        if (currentRecord['fulfillmentBatchItemID'] == _this.state.currentSelectedFulfillmentBatchItemID) {
                                            //Matched - Save some items from the currentRecord to display.
                                            //Get the orderItems for this fulfillment
                                            _this.createOrderFulfillmentItemCollection(currentRecord['orderFulfillment_orderFulfillmentID']);
                                            _this.createCurrentRecordDetailCollection(currentRecord);
                                            _this.emitUpdateToClient();
                                        }
                                    }
                                });
                            }
                        }
                        if (angular.isDefined(update.action.payload.listingID) && update.action.payload.listingID == "fulfillmentBatchItemTable2") {
                            //if nothing is selected, go back to the outer view.
                            if (!angular.isDefined(update.action.payload.values) || update.action.payload.values.length == 0) {
                                if (_this.state.expandedFulfillmentBatchListing == false) {
                                    _this.state.expandedFulfillmentBatchListing = !_this.state.expandedFulfillmentBatchListing;
                                    //Clear all selections.
                                    _this.listingService.clearAllSelections("fulfillmentBatchItemTable2");
                                    _this.listingService.clearAllSelections("fulfillmentBatchItemTable1");
                                    _this.emitUpdateToClient();
                                }
                            }
                        }
                    }
                }
            });
        };
        /** During key times when data changes, we would like to alert the client to those changes. This allows us to do that. */
        this.emitUpdateToClient = function () {
            _this.orderFulfillmentStore.dispatch({
                type: actions.UPDATE_BATCHDETAIL,
                payload: { noop: angular.noop() }
            });
        };
        /**
         * Creates a batch. This should use api:main.post with a context of process and an entityName instead of doAction.
         * The process object should have orderItemIdList or orderFulfillmentIDList defined and should have
         * optionally an accountID, and or locationID (or locationIDList).
         */
        this.addBatch = function (processObject) {
            if (processObject) {
                processObject.data.entityName = "FulfillmentBatch";
                processObject.data['fulfillmentBatch'] = {};
                processObject.data['fulfillmentBatch']['fulfillmentBatchID'] = "";
                //If only 1, add that to the list.
                if (processObject.data.locationID) {
                    processObject.data.locationIDList = processObject.data.locationID;
                }
                return _this.$hibachi.saveEntity("fulfillmentBatch", '', processObject.data, "create");
            }
        };
        /** Creates the orderDelivery - fulfilling the items quantity of items specified, capturing as needed. */
        this.fulfillItems = function (state, ignoreCapture) {
            if (state === void 0) { state = {}; }
            if (ignoreCapture === void 0) { ignoreCapture = false; }
            var data = {};
            //Add the order information
            data.order = {};
            data.order['orderID'] = _this.state.currentRecordOrderDetail['order_orderID'];
            //Add the orderFulfillment.
            data['orderDeliveryID'] = ""; //this indicates the the orderDelivery is being created.
            data['orderFulfillment'] = {};
            data['orderFulfillment']['orderFulfillmentID'] = _this.state.currentRecordOrderDetail['fulfillmentBatchItem']['orderFulfillment_orderFulfillmentID'];
            data['trackingNumber'] = state.trackingCode || "";
            if (data['trackingNumer'] == undefined || !data['trackingNumber'].length) {
                data['useShippingIntegrationForTrackingNumber'] = state.useShippingIntegrationForTrackingNumber || "false";
            }
            //console.log("Batch Information: ", this.state.currentRecordOrderDetail['fulfillmentBatchItem']);
            //Add the orderDelivertyItems as an array with the quantity set to the quantity.
            //Make sure all of the deliveryitems have a quantity set by the user.
            var idx = 1; //coldfusion indexes at 1
            data['orderDeliveryItems'] = [];
            for (var orderDeliveryItem in state.orderItem) {
                if (state.orderItem[orderDeliveryItem] != undefined) {
                    if (state.orderItem[orderDeliveryItem] && state.orderItem[orderDeliveryItem] > 0) {
                        data['orderDeliveryItems'].push({ orderItem: { orderItemID: orderDeliveryItem }, quantity: state.orderItem[orderDeliveryItem] });
                    }
                }
                idx++;
            }
            //Add the payment information
            if (_this.state.currentRecordOrderDetail['order_paymentAmountDue'] > 0 && !ignoreCapture) {
                data.captureAuthorizedPaymentsFlag = true;
                data.capturableAmount = _this.state.currentRecordOrderDetail['order_paymentAmountDue'];
            }
            //If the user input a captuable amount, use that instead.
            if (state.capturableAmount != undefined) {
                data['capturableAmount'] = state.capturableAmount;
                data['captureAuthorizedPaymentsFlag'] = false;
                //hidden fields
                data['order'] = {};
                data['order']['orderID'] = _this.state.currentRecordOrderDetail['order_orderID'] || "";
                //shippingMethod.shippingMethodID
                data['shippingMethod'] = {};
                data['shippingMethod']['shippingMethodID'] = _this.state.currentRecordOrderDetail['shippingMethod_shippingMethodID'];
                //shippingAddress.addressID
                data['shippingAddress'] = {};
                data['shippingAddress']['addressID'] = _this.state.currentRecordOrderDetail['shippingAddress_addressID'];
            }
            //Create the process object.
            var processObject = _this.$hibachi.newOrderDelivery_Create();
            processObject.data = data;
            processObject.data.entityName = "OrderDelivery";
            //Basic Information
            processObject.data['location'] = { 'locationID': _this.$rootScope.slatwall.defaultLocation || "5cacb1d00b20aa339bc5585e13549dda" }; //sets a random location for now until batch issue with location is resolved.
            //Shipping information.
            processObject.data['containerLabel'] = data.containerLabel || "";
            processObject.data['shippingIntegration'] = data.shippingIntegration || "";
            processObject.data['shippingAddress'] = data.shippingAddress || "";
            processObject.data['useShippingIntegrationForTrackingNumber'] = data.useShippingIntegrationForTrackingNumber || false;
            _this.$hibachi.saveEntity("OrderDelivery", '', processObject.data, "create").then(function (result) {
                if (result.orderDeliveryID != undefined && result.orderDeliveryID != '') {
                    return result;
                }
                //Sets the next selected value.
                var selectedRowIndex = _this.listingService.getSelectedBy("fulfillmentBatchItemTable1", "fulfillmentBatchItemID", _this.state.currentSelectedFulfillmentBatchItemID);
                //clear first
                _this.listingService.clearAllSelections("fulfillmentBatchItemTable1");
                _this.listingService.clearAllSelections("fulfillmentBatchItemTable2");
                //then select the next.
                if (selectedRowIndex != -1) {
                    //Set the next one.
                    selectedRowIndex = selectedRowIndex + 1;
                    _this.listingService
                        .getListing("fulfillmentBatchItemTable1").selectionService
                        .addSelection(_this.listingService.getListing("fulfillmentBatchItemTable1").tableID, _this.listingService.getListingPageRecords("fulfillmentBatchItemTable1")[selectedRowIndex][_this.listingService.getListingBaseEntityPrimaryIDPropertyName("fulfillmentBatchItemTable1")]);
                    _this.listingService
                        .getListing("fulfillmentBatchItemTable2").selectionService
                        .addSelection(_this.listingService.getListing("fulfillmentBatchItemTable2").tableID, _this.listingService.getListingPageRecords("fulfillmentBatchItemTable2")[selectedRowIndex][_this.listingService.getListingBaseEntityPrimaryIDPropertyName("fulfillmentBatchItemTable1")]);
                }
                //refresh.
                //Scroll to the quantity div.
                //scrollTo(orderItemQuantity_402828ee57e7a75b0157fc89b45b05c4)
            });
        };
        /** Saves a comment. */
        this.saveComment = function (comment, newCommentText) {
            //Editing
            if (angular.isDefined(comment) && angular.isDefined(comment.comment) && angular.isDefined(comment.commentID)) {
                comment.comment = newCommentText;
                return _this.$hibachi.saveEntity("comment", comment.commentID, comment, "save");
                //New
            }
            else {
                //this is a new comment.
                var commentObject = {
                    comment: "",
                    fulfillmentBatchItem: {
                        fulfillmentBatchItemID: ""
                    },
                    fulfillmentBatchItemID: "",
                    createdByAccountID: ""
                };
                commentObject.comment = newCommentText;
                commentObject.fulfillmentBatchItem.fulfillmentBatchItemID = _this.state.currentSelectedFulfillmentBatchItemID;
                commentObject.createdByAccountID = _this.$rootScope.slatwall.account.accountID || "";
                _this.$hibachi.saveEntity("comment", '', commentObject, "save").then(function (result) {
                    //now regrab all comments so they are redisplayed.
                    return _this.createCommentsCollectionForFulfillmentBatchItem(_this.state.currentSelectedFulfillmentBatchItemID);
                });
            }
        };
        /** Deletes a comment. */
        this.deleteComment = function (comment) {
            if (comment != undefined) {
                _this.$hibachi.saveEntity("comment", comment.commentID, comment, "delete").then(function (result) {
                    return _this.createCommentsCollectionForFulfillmentBatchItem(_this.state.currentSelectedFulfillmentBatchItemID);
                });
            }
        };
        /** Deletes a fulfillment batch item. */
        this.deleteFulfillmentBatchItem = function () {
            if (_this.state.currentSelectedFulfillmentBatchItemID) {
                var fulfillmentBatchItem = { "fulfillmentBatchItemID": _this.state.currentSelectedFulfillmentBatchItemID }; //get current fulfillmentBatchItem;
                if (fulfillmentBatchItem.fulfillmentBatchItemID != undefined) {
                    _this.$hibachi.saveEntity("fulfillmentBatchItem", fulfillmentBatchItem.fulfillmentBatchItemID, fulfillmentBatchItem, "delete").then(function (result) {
                        window.location.reload(false);
                    });
                }
            }
        };
        /**
         * Returns the comments for the selectedFulfillmentBatchItem
         */
        this.createCommentsCollectionForFulfillmentBatchItem = function (fulfillmentBatchItemID) {
            _this.state.commentsCollection = _this.collectionConfigService.newCollectionConfig("Comment");
            _this.state.commentsCollection.addDisplayProperty("createdDateTime");
            _this.state.commentsCollection.addDisplayProperty("createdByAccountID");
            _this.state.commentsCollection.addDisplayProperty("commentID");
            _this.state.commentsCollection.addDisplayProperty("comment");
            _this.state.commentsCollection.addFilter("fulfillmentBatchItem.fulfillmentBatchItemID", fulfillmentBatchItemID, "=");
            _this.state.commentsCollection.getEntity().then(function (comments) {
                if (comments && comments.pageRecords.length) {
                    _this.state.commentsCollection = comments['pageRecords'];
                    for (var account in _this.state.commentsCollection) {
                        if (angular.isDefined(_this.state.commentsCollection[account]['createdByAccountID'])) {
                            //sets the account name to the account names object indexed by the account id.
                            _this.getAccountNameByAccountID(_this.state.commentsCollection[account]['createdByAccountID']);
                        }
                    }
                }
                else {
                    _this.state.commentsCollection = comments.pageRecords;
                    _this.emitUpdateToClient();
                }
            });
        };
        /**
         * Returns the comments for the selectedFulfillmentBatchItem
         */
        this.createCurrentRecordDetailCollection = function (currentRecord) {
            //Get a new collection using the orderFulfillment.
            _this.state.currentRecordOrderDetail = _this.collectionConfigService.newCollectionConfig("OrderFulfillment");
            _this.state.currentRecordOrderDetail.addFilter("orderFulfillmentID", currentRecord['orderFulfillment_orderFulfillmentID'], "=");
            //For the order
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.orderOpenDateTime", "Open Date"); //date placed
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.orderCloseDateTime", "Close Date");
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.orderNumber", "Order Number");
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.orderID", "OrderID");
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.calculatedTotal", "Total");
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.paymentAmountDue", "Amount Due", { persistent: false });
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.paymentAmountAuthorizedTotal", "Authorized", { persistent: false });
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.paymentAmountCapturedTotal", "Captured", { persistent: false });
            //For the account portion of the tab.
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.account.accountID", "Account Number");
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.account.firstName", "First Name");
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.account.lastName", "Last Name");
            _this.state.currentRecordOrderDetail.addDisplayProperty("order.account.company", "Company");
            //For the shipping portion of the tab.
            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingMethod.shippingMethodID");
            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingMethod.shippingMethodName");
            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingAddress.addressID");
            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingAddress.city");
            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingAddress.stateCode");
            _this.state.currentRecordOrderDetail.addDisplayProperty("orderFulfillmentStatusType.typeName");
            _this.state.currentRecordOrderDetail.getEntity().then(function (entityResults) {
                if (entityResults['pageRecords'].length) {
                    _this.state.currentRecordOrderDetail = entityResults['pageRecords'][0];
                    //set the capturable amount to the amount that still needs to be paid on this order.
                    if (_this.state.currentRecordOrderDetail) {
                        _this.state.capturableAmount = _this.state.currentRecordOrderDetail['order_paymentAmountDue'];
                    }
                    _this.state.currentRecordOrderDetail['fulfillmentBatchItem'] = currentRecord;
                    _this.state.currentRecordOrderDetail['comments'] = _this.createCommentsCollectionForFulfillmentBatchItem(_this.state.currentSelectedFulfillmentBatchItemID);
                    _this.emitUpdateToClient();
                }
            });
        };
        /**
         * Returns account information given an accountID
         */
        this.getAccountNameByAccountID = function (accountID) {
            var accountCollection = _this.collectionConfigService.newCollectionConfig("Account");
            accountCollection.addFilter("accountID", accountID, "=");
            accountCollection.getEntity().then(function (account) {
                if (account['pageRecords'].length) {
                    _this.state.accountNames[accountID] = account['pageRecords'][0]['firstName'] + ' ' + account['pageRecords'][0]['lastName'];
                    _this.emitUpdateToClient();
                }
            });
        };
        /**
        * Setup the initial orderFulfillment Collection.
        */
        this.createLgOrderFulfillmentBatchItemCollection = function () {
            _this.state.lgFulfillmentBatchItemCollection = _this.collectionConfigService.newCollectionConfig("FulfillmentBatchItem");
            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.order.orderOpenDateTime", "Date");
            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.shippingMethod.shippingMethodName");
            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.shippingAddress.stateCode");
            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.orderFulfillmentStatusType.typeName");
            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("fulfillmentBatchItemID");
            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.orderFulfillmentID");
            _this.state.lgFulfillmentBatchItemCollection.addFilter("fulfillmentBatch.fulfillmentBatchID", _this.state.fulfillmentBatchId, "=");
        };
        /**
        * Get a collection of orderFulfillment email templates.
        */
        this.getOrderFulfillmentEmailTemplates = function () {
            var emailTemplates = _this.collectionConfigService.newCollectionConfig("EmailTemplate");
            emailTemplates.addFilter("emailTemplateObject", "orderFulfillment", "=");
            emailTemplates.getEntity().then(function (emails) {
                if (emails['pageRecords'].length) {
                    _this.state.emailTemplates = emails['pageRecords'];
                    _this.emitUpdateToClient();
                }
            });
        };
        /**
        * Setup the initial orderFulfillment Collection.
        */
        this.createSmOrderFulfillmentBatchItemCollection = function () {
            _this.state.smFulfillmentBatchItemCollection = _this.collectionConfigService.newCollectionConfig("FulfillmentBatchItem");
            _this.state.smFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.order.orderOpenDateTime");
            _this.state.smFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.shippingMethod.shippingMethodName");
            _this.state.smFulfillmentBatchItemCollection.addDisplayProperty("fulfillmentBatchItemID");
            _this.state.smFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.orderFulfillmentID");
            _this.state.smFulfillmentBatchItemCollection.addFilter("fulfillmentBatch.fulfillmentBatchID", _this.state.fulfillmentBatchId, "=");
            return _this.state.smFulfillmentBatchItemCollection;
        };
        /**
        * Setup the initial orderFulfillment Collection.
        */
        this.createLocationCollection = function () {
            _this.state.locationCollection = _this.collectionConfigService.newCollectionConfig("FulfillmentBatchLocation");
            _this.state.locationCollection.addDisplayProperty("locationID");
            _this.state.locationCollection.addDisplayProperty("fulfillmentBatchID");
            _this.state.locationCollection.addFilter("fulfillmentBatchID", _this.state.fulfillmentBatchId, "=");
            return _this.state.locationCollection.getEntity().then(function (result) { return (result.pageRecords.length) ? result.pageRecords : []; });
        };
        /**
         * Setup the initial print template -> orderFulfillment Collection.
         */
        this.getPrintList = function () {
            _this.state.printCollection = _this.collectionConfigService.newCollectionConfig("PrintTemplate");
            _this.state.printCollection.addDisplayProperty("printTemplateID");
            _this.state.printCollection.addDisplayProperty("printTemplateName");
            _this.state.printCollection.addDisplayProperty("printTemplateObject");
            _this.state.printCollection.addFilter("printTemplateObject", 'OrderFulfillment', "=");
            _this.state.printCollection.getEntity().then(function (result) {
                _this.state.printCollection = result.pageRecords || [];
            });
        };
        /**
         * Setup the initial email template -> orderFulfillment Collection.
         */
        this.getEmailList = function () {
            _this.state.emailCollection = _this.collectionConfigService.newCollectionConfig("EmailTemplate");
            _this.state.emailCollection.addDisplayProperty("emailTemplateID");
            _this.state.emailCollection.addDisplayProperty("emailTemplateName");
            _this.state.emailCollection.addDisplayProperty("emailTemplateObject");
            _this.state.emailCollection.addFilter("emailTemplateObject", 'OrderFulfillment', "=");
            _this.state.emailCollection.getEntity().then(function (result) {
                _this.state.emailCollection = result.pageRecords || [];
            });
        };
        /**
         * Returns  orderFulfillmentItem Collection given an orderFulfillmentID.
         */
        this.createOrderFulfillmentItemCollection = function (orderFulfillmentID) {
            var collection = _this.collectionConfigService.newCollectionConfig("OrderItem");
            collection.addDisplayProperty("orderFulfillment.orderFulfillmentID");
            collection.addDisplayProperty("sku.skuCode");
            collection.addDisplayProperty("sku.product.productName");
            collection.addDisplayProperty("sku.skuName");
            collection.addDisplayProperty("sku.imagePath", "Path", { persistent: false });
            collection.addDisplayProperty("sku.imageFileName", "File Name", { persistent: false });
            collection.addDisplayProperty("sku.calculatedQOH");
            collection.addDisplayProperty("quantity");
            collection.addDisplayProperty("quantityDelivered");
            collection.addDisplayProperty("orderItemID");
            collection.addFilter("orderFulfillment.orderFulfillmentID", orderFulfillmentID, "=");
            collection.getEntity().then(function (orderItems) {
                if (orderItems && orderItems.pageRecords && orderItems.pageRecords.length) {
                    _this.state.orderFulfillmentItemsCollection = orderItems['pageRecords'];
                }
                else {
                    _this.state.orderFulfillmentItemsCollection = [];
                }
                _this.emitUpdateToClient();
            });
        };
        /**
        * Returns  orderFulfillmentItem Collection given an orderFulfillmentID.
        */
        this.createOrderDeliveryAttributeCollection = function () {
            var orderDeliveryAttributes = [];
            //Get all the attributes from those sets where the set object is orderDelivery.
            var attributeCollection = _this.collectionConfigService.newCollectionConfig("Attribute");
            attributeCollection.addFilter("attributeSet.attributeSetObject", "OrderDelivery", "=");
            attributeCollection.getEntity().then(function (attributes) {
                if (attributes && attributes.pageRecords) {
                    attributes.pageRecords.forEach(function (attribute) {
                        var newAttribute = {
                            name: attribute.attributeName,
                            code: attribute.attributeCode,
                            description: attribute.attributeDescription,
                            hint: attribute.attributeHint,
                            type: attribute.attributeInputType,
                            default: attribute.defaultValue,
                            isRequired: attribute.requiredFlag,
                            isActive: attributes.activeFlag
                        };
                        orderDeliveryAttributes.push(newAttribute);
                    });
                }
            });
            //For each attribute set, get all the attributes.
            _this.state.orderDeliveryAttributes = orderDeliveryAttributes;
            _this.emitUpdateToClient(); //alert the client that we have new data to give.
        };
        //To create a store, we instantiate it using the object that holds the state variables,
        //and the reducer. We can also add a middleware to the end if you need.
        this.orderFulfillmentStore = new FluxStore.IStore(this.state, this.orderFulfillmentStateReducer);
        this.observerService.attach(this.swSelectionToggleSelectionfulfillmentBatchItemTable2, "swSelectionToggleSelectionfulfillmentBatchItemTable2", "swSelectionToggleSelectionfulfillmentBatchItemTableListener");
    }
    return OrderFulfillmentService;
}());
exports.OrderFulfillmentService = OrderFulfillmentService;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//controllers
var alertcontroller_1 = __webpack_require__(540);
//services
var alertservice_1 = __webpack_require__(542);
var alertmodule = angular.module('hibachi.alert', [])
    //controllers
    .controller('alertController', alertcontroller_1.AlertController)
    //services
    .service('alertService', alertservice_1.AlertService);
exports.alertmodule = alertmodule;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(8);
//services
var collectionconfigservice_1 = __webpack_require__(579);
var collectionservice_1 = __webpack_require__(580);
//controllers
var collections_1 = __webpack_require__(574);
var createcollection_1 = __webpack_require__(576);
var confirmationcontroller_1 = __webpack_require__(575);
var entity_createcollection_1 = __webpack_require__(577);
//directives
var swcollection_1 = __webpack_require__(553);
var swaddfilterbuttons_1 = __webpack_require__(552);
var swdisplayoptions_1 = __webpack_require__(568);
var swdisplayitem_1 = __webpack_require__(566);
var swdisplayitemaggregate_1 = __webpack_require__(567);
var swcollectiontable_1 = __webpack_require__(554);
var swcolumnitem_1 = __webpack_require__(555);
var swconditioncriteria_1 = __webpack_require__(556);
var swcriteria_1 = __webpack_require__(557);
var swcriteriaboolean_1 = __webpack_require__(558);
var swcriteriadate_1 = __webpack_require__(559);
var swcriteriamanytomany_1 = __webpack_require__(560);
var swcriteriamanytoone_1 = __webpack_require__(561);
var swcriterianumber_1 = __webpack_require__(562);
var swcriteriaonetomany_1 = __webpack_require__(563);
var swcriteriarelatedobject_1 = __webpack_require__(564);
var swcriteriastring_1 = __webpack_require__(565);
var sweditfilteritem_1 = __webpack_require__(569);
var swfiltergroups_1 = __webpack_require__(571);
var swfilteritem_1 = __webpack_require__(572);
var swfiltergroupitem_1 = __webpack_require__(570);
var swrestrictionconfig_1 = __webpack_require__(573);
//filters
var aggregatefilter_1 = __webpack_require__(578);
var collectionmodule = angular.module('hibachi.collection', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('collectionPartialsPath', 'collection/components/')
    //controllers
    .controller('collections', collections_1.CollectionController)
    .controller('confirmationController', confirmationcontroller_1.ConfirmationController)
    .controller('createCollection', createcollection_1.CreateCollection)
    .controller('entity_createcollection', entity_createcollection_1.CollectionCreateController)
    //services
    .factory('collectionConfigService', ['rbkeyService', '$hibachi', 'utilityService', 'observerService', function (rbkeyService, $hibachi, utilityService, observerService) { return new collectionconfigservice_1.CollectionConfig(rbkeyService, $hibachi, utilityService, observerService); }])
    .service('collectionService', collectionservice_1.CollectionService)
    //directives
    .directive('swRestrictionConfig', swrestrictionconfig_1.SWRestrictionConfig.Factory())
    .directive('swCollection', swcollection_1.SWCollection.Factory())
    .directive('swAddFilterButtons', swaddfilterbuttons_1.SWAddFilterButtons.Factory())
    .directive('swDisplayOptions', swdisplayoptions_1.SWDisplayOptions.Factory())
    .directive('swDisplayItem', swdisplayitem_1.SWDisplayItem.Factory())
    .directive('swDisplayItemAggregate', swdisplayitemaggregate_1.SWDisplayItemAggregate.Factory())
    .directive('swCollectionTable', swcollectiontable_1.SWCollectionTable.Factory())
    .directive('swColumnItem', swcolumnitem_1.SWColumnItem.Factory())
    .directive('swConditionCriteria', swconditioncriteria_1.SWConditionCriteria.Factory())
    .directive('swCriteria', swcriteria_1.SWCriteria.Factory())
    .directive('swCriteriaBoolean', swcriteriaboolean_1.SWCriteriaBoolean.Factory())
    .directive('swCriteriaDate', swcriteriadate_1.SWCriteriaDate.Factory())
    .directive('swCriteriaManyToMany', swcriteriamanytomany_1.SWCriteriaManyToMany.Factory())
    .directive('swCriteriaManyToOne', swcriteriamanytoone_1.SWCriteriaManyToOne.Factory())
    .directive('swCriteriaNumber', swcriterianumber_1.SWCriteriaNumber.Factory())
    .directive('swCriteriaOneToMany', swcriteriaonetomany_1.SWCriteriaOneToMany.Factory())
    .directive('swCriteriaRelatedObject', swcriteriarelatedobject_1.SWCriteriaRelatedObject.Factory())
    .directive('swCriteriaString', swcriteriastring_1.SWCriteriaString.Factory())
    .directive('swEditFilterItem', sweditfilteritem_1.SWEditFilterItem.Factory())
    .directive('swFilterGroups', swfiltergroups_1.SWFilterGroups.Factory())
    .directive('swFilterItem', swfilteritem_1.SWFilterItem.Factory())
    .directive('swFilterGroupItem', swfiltergroupitem_1.SWFilterGroupItem.Factory())
    //filters
    .filter('aggregateFilter', ['$filter', aggregatefilter_1.AggregateFilter.Factory]);
exports.collectionmodule = collectionmodule;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var BaseObject = /** @class */ (function () {
    //@ngInject
    function BaseObject($injector) {
        var _this = this;
        this.getService = function (serviceName) {
            //return;
            if (_this.$injector.has(serviceName)) {
                //returns a generic service
                return _this.$injector.get(serviceName);
            }
        };
        this.getHibachiScope = function () {
            return _this.getService('publicService');
        };
        this.getAppConfig = function () {
            return _this.getService('appConfig');
        };
        this.$injector = $injector;
        var constructorString = this.constructor.toString();
        this.className = constructorString.match(/\w+/g)[1];
    }
    return BaseObject;
}());
exports.BaseObject = BaseObject;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var basetransient_1 = __webpack_require__(60);
var Request = /** @class */ (function (_super) {
    __extends(Request, _super);
    function Request(url, data, method, headers, $injector) {
        var _this = _super.call(this, $injector) || this;
        _this.loading = true;
        _this.errors = {};
        _this.processResponse = function (response) {
            _this.loading = false;
            if (response.errors) {
                _this.errors = response.errors;
            }
            if (response.messages) {
                _this.messages = response.messages;
            }
        };
        //returns hibachiAction value from url and data;
        _this.getAction = function () {
            var config = _this.getAppConfig();
            //typically hibachiAction
            var actionName = config.action;
            var params = _this.utilityService.getQueryParamsFromUrl(_this.url);
            if (params[actionName]) {
                return params[actionName];
            }
            if (_this.data && _this.data[actionName]) {
                return _this.data[actionName];
            }
            if (_this.url.indexOf('api/scope/') > 0) {
                return _this.extractPublicAction(_this.url);
            }
        };
        _this.extractPublicAction = function (url) {
            //get in between api/scope and / or ? or end of word
            var regex = /\api\/scope\/(.*?)(?=\/|\?|$)/;
            var arr = regex.exec(url);
            return arr[1];
        };
        _this.processSuccess = function (response) {
            _this.processResponse(response);
        };
        _this.processError = function (response) {
            _this.processResponse(response);
        };
        /** used to turn data into a correct format for the post */
        _this.toFormParams = function (data) {
            if (data) {
                return $.param(data);
            }
            else {
                return "";
            }
            //return data = this.serializeData(data) || "";
        };
        _this.serializeData = function (data) {
            // If this is not an object, defer to native stringification.
            if (!angular.isObject(data)) {
                return ((data == null) ? "" : data.toString());
            }
            var buffer = [];
            // Serialize each key in the object.
            for (var name in data) {
                if (!data.hasOwnProperty(name)) {
                    continue;
                }
                var value = data[name];
                buffer.push(encodeURIComponent(name) + "=" + encodeURIComponent((value == null) ? "" : value));
            }
            // Serialize the buffer and clean it up for transportation.
            var source = buffer.join("&").replace(/%20/g, "+");
            return (source);
        };
        _this.headers = headers;
        _this.$q = _this.getService('$q');
        _this.$http = _this.getService('$http');
        _this.$window = _this.getService('$window');
        _this.url = url;
        _this.data = data;
        _this.method = method;
        _this.utilityService = _this.getService('utilityService');
        if (!method) {
            if (data == undefined) {
                method = "get";
            }
            else {
                method = "post";
            }
        }
        var deferred = _this.$q.defer();
        if (method == "post") {
            if (_this.headers['Content-Type'] !== "application/json") {
                data = _this.toFormParams(data);
            }
            //post
            var promise = _this.$http({
                url: url, data: data, headers: _this.headers, method: 'post'
            })
                .success(function (result) {
                _this.processSuccess(result);
                deferred.resolve(result);
            }).error(function (response) {
                _this.processError(response);
                deferred.reject(response);
            });
            _this.promise = deferred.promise;
        }
        else {
            //get
            _this.$http({ url: url, method: 'get' })
                .success(function (result) {
                _this.processSuccess(result);
                deferred.resolve(result);
            }).error(function (reason) {
                _this.processError(reason);
                deferred.reject(reason);
            });
            _this.promise = deferred.promise;
        }
        return _this;
    }
    return Request;
}(basetransient_1.BaseTransient));
exports.Request = Request;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//services
var dialogservice_1 = __webpack_require__(667);
//controllers
var pagedialog_1 = __webpack_require__(666);
var dialogmodule = angular.module('hibachi.dialog', []).config(function () {
})
    //services
    .service('dialogService', dialogservice_1.DialogService)
    //controllers
    .controller('pageDialog', pagedialog_1.PageDialogController)
    //filters
    //constants
    .constant('dialogPartials', 'dialog/components/');
exports.dialogmodule = dialogmodule;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//services
// import {AccountService} from "./services/accountservice";
// import {CartService} from "./services/cartservice";
// import {UtilityService} from "./services/utilityservice";
// import {SelectionService} from "./services/selectionservice";
// import {ObserverService} from "./services/observerservice";
// import {FormService} from "./services/formservice";
// import {MetaDataService} from "./services/metadataservice";
//controllers
var otherwisecontroller_1 = __webpack_require__(671);
var routercontroller_1 = __webpack_require__(672);
//directives
var swdetailtabs_1 = __webpack_require__(669);
var swdetail_1 = __webpack_require__(668);
var swlist_1 = __webpack_require__(670);
var core_module_1 = __webpack_require__(8);
var entitymodule = angular.module('hibachi.entity', ['ngRoute', core_module_1.coremodule.name])
    .config(['$routeProvider', '$injector', '$locationProvider', 'appConfig',
    function ($routeProvider, $injector, $locationProvider, appConfig) {
        //detect if we are in hashbang mode
        var vars = {};
        var parts = window.location.href.replace(/[?&]+([^=&]+)#([^/]*)/gi, function (m, key, value) {
            vars[key] = value;
        });
        if (vars.ng) {
            $locationProvider.html5Mode(false).hashPrefix('!');
        }
        var snakeToCapitalCase = function (s) {
            return s.charAt(0).toUpperCase() + s.replace(/(\-\w)/g, function (m) { return m[1].toUpperCase(); }).slice(1);
        };
        $routeProvider.when('/entity/:entityName/', {
            template: function (params) {
                var entityDirectiveExists = $injector.has('sw' + snakeToCapitalCase(params.entityName) + 'ListDirective');
                if (entityDirectiveExists) {
                    return '<sw-' + params.entityName.toLowerCase() + '-list></sw-' + params.entityName.toLowerCase() + '-list>';
                }
                else {
                    return '<sw-list></sw-list>';
                }
            },
            controller: 'routerController'
        }).when('/entity/:entityName/:entityID', {
            template: function (params) {
                var entityDirectiveExists = $injector.has('sw' + snakeToCapitalCase(params.entityName) + 'DetailDirective');
                if (entityDirectiveExists) {
                    return '<sw-' + params.entityName.toLowerCase() + '-detail></sw-' + params.entityName.toLowerCase() + '-detail>';
                }
                else {
                    return '<sw-detail></sw-detail>';
                }
            },
            controller: 'routerController',
        });
        //        .otherwise({
        //         //controller:'otherwiseController'
        //         templateUrl: appConfig.baseURL + '/admin/client/js/partials/otherwise.html',
        //     });
    }])
    .constant('coreEntityPartialsPath', 'entity/components/')
    //services
    //controllers
    .controller('otherwiseController', otherwisecontroller_1.OtherWiseController)
    .controller('routerController', routercontroller_1.RouterController)
    //filters
    //directives
    .directive('swDetail', swdetail_1.SWDetail.Factory())
    .directive('swDetailTabs', swdetailtabs_1.SWDetailTabs.Factory())
    .directive('swList', swlist_1.SWList.Factory());
exports.entitymodule = entitymodule;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWPropertyDisplayController = /** @class */ (function () {
    //@ngInject
    function SWPropertyDisplayController($filter, utilityService, $injector, metadataService, observerService, listingService) {
        var _this = this;
        this.$filter = $filter;
        this.utilityService = utilityService;
        this.$injector = $injector;
        this.metadataService = metadataService;
        this.observerService = observerService;
        this.listingService = listingService;
        this.saved = false;
        this.$onInit = function () {
            var bindToControllerProps = _this.$injector.get('swPropertyDisplayDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i] && _this.swForm && _this.swForm[i]) {
                    _this[i] = _this.swForm[i];
                }
            }
            _this.errors = {};
            _this.edited = false;
            _this.edit = _this.edit || _this.editing;
            _this.editing = _this.editing || _this.edit;
            _this.errorName = _this.errorName || _this.name;
            _this.initialValue = _this.object[_this.property];
            _this.propertyDisplayID = _this.utilityService.createID(32);
            if (angular.isUndefined(_this.showSave)) {
                _this.showSave = true;
            }
            if (angular.isUndefined(_this.inListingDisplay)) {
                _this.inListingDisplay = false;
            }
            if (angular.isUndefined(_this.rowSaveEnabled)) {
                _this.rowSaveEnabled = _this.inListingDisplay;
            }
            if (angular.isDefined(_this.revertToValue) && angular.isUndefined(_this.showRevert)) {
                _this.showRevert = true;
            }
            if (angular.isDefined(_this.revertToValue) && angular.isUndefined(_this.revertText)) {
                _this.revertText = _this.revertToValue;
            }
            if (angular.isUndefined(_this.showRevert)) {
                _this.showRevert = false;
            }
            if (angular.isUndefined(_this.rawFileTarget)) {
                _this.rawFileTarget = _this.property;
            }
            if (angular.isUndefined(_this.editing)) {
                _this.editing = false;
            }
            if (angular.isUndefined(_this.editable)) {
                _this.editable = true;
            }
            if (angular.isUndefined(_this.isHidden)) {
                _this.isHidden = false;
            }
            if (angular.isUndefined(_this.noValidate)) {
                _this.noValidate = false;
            }
            if (angular.isUndefined(_this.inModal)) {
                _this.inModal = false;
            }
            if (angular.isUndefined(_this.optionsArguments)) {
                _this.optionsArguments = {};
            }
            if ((_this.fieldType !== 'hidden' &&
                angular.isUndefined(_this.inListingDisplay)) ||
                (angular.isDefined(_this.inListingDisplay) && !_this.inListingDisplay)) {
                _this.showLabel = true;
            }
            else {
                _this.showLabel = false;
            }
            if (angular.isDefined(_this.pageRecord) && angular.isUndefined(_this.pageRecord.edited)) {
                _this.pageRecord.edited = false;
            }
            _this.applyFilter = function (model, filter) {
                try {
                    return _this.$filter(filter)(model);
                }
                catch (e) {
                    return model;
                }
            };
            //swfproperty logic
            if (angular.isUndefined(_this.fieldType) && _this.object && _this.object.metaData) {
                _this.fieldType = _this.metadataService.getPropertyFieldType(_this.object, _this.propertyIdentifier);
            }
            if (angular.isUndefined(_this.title) && _this.object && _this.object.metaData) {
                _this.labelText = _this.metadataService.getPropertyTitle(_this.object, _this.propertyIdentifier);
            }
            _this.labelText = _this.labelText || _this.title;
            _this.title = _this.title || _this.labelText;
            _this.fieldType = _this.fieldType || "text";
            _this.class = _this.class || "form-control";
            _this.fieldAttributes = _this.fieldAttributes || "";
            _this.label = _this.label || "true";
            _this.labelText = _this.labelText || "";
            _this.labelClass = _this.labelClass || "";
            _this.name = _this.name || "unnamed";
            _this.value = _this.value || _this.initialValue;
            _this.object = _this.object || _this.swForm.object; //this is the process object
            /** handle options */
            if (_this.options && angular.isString(_this.options)) {
                var optionsArray = [];
                optionsArray = _this.options.toString().split(",");
                angular.forEach(optionsArray, function (o) {
                    var newOption = {
                        name: "",
                        value: ""
                    };
                    newOption.name = o;
                    newOption.value = o;
                    _this.optionValues.push(newOption);
                });
            }
            /** handle turning the options into an array of objects */
            /** handle setting the default value for the yes / no element  */
            if (_this.fieldType == "yesno" && (_this.value && angular.isString(_this.value))) {
                _this.selected == _this.value;
            }
            if (angular.isUndefined(_this.hint) && _this.object && _this.object.metaData) {
                _this.hint = _this.metadataService.getPropertyHintByObjectAndPropertyIdentifier(_this.object, _this.propertyIdentifier);
            }
            if ((_this.hasOnChangeCallback || _this.inListingDisplay || _this.onChangeEvent) &&
                (angular.isDefined(_this.swForm) && angular.isDefined(_this.name))) {
                _this.swInputOnChangeEvent = _this.swForm.name + _this.name + 'change';
                _this.observerService.attach(_this.onChange, _this.swInputOnChangeEvent);
            }
        };
        this.onChange = function (result) {
            _this.edited = true;
            if (_this.saved) {
                _this.saved = false;
            }
            if (_this.hasOnChangeCallback) {
                _this.onChangeCallback(result);
            }
            if (_this.inListingDisplay && _this.rowSaveEnabled) {
                _this.listingService.markEdited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID, _this.save);
            }
            if (angular.isDefined(_this.onChangeEvent)) {
                _this.observerService.notify(_this.onChangeEvent, result);
            }
        };
        this.clear = function () {
            if (_this.reverted) {
                _this.reverted = false;
                _this.showRevert = true;
            }
            _this.edited = false;
            _this.object.data[_this.property] = _this.initialValue;
            if (_this.inListingDisplay && _this.rowSaveEnabled) {
                _this.listingService.markUnedited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID);
            }
        };
        this.revert = function () {
            _this.showRevert = false;
            _this.reverted = true;
            _this.object.data[_this.property] = _this.revertToValue;
            _this.onChange();
        };
        this.save = function () {
            //do this eagerly to hide save will reverse if theres an error
            _this.edited = false;
            _this.saved = true;
            if (!_this.inModal) {
                _this.object.$$save().then(function (response) {
                    if (_this.hasSaveCallback) {
                        _this.saveCallback(response);
                    }
                }, function (reason) {
                    _this.edited = true;
                    _this.saved = false;
                });
            }
            else if (_this.hasModalCallback) {
                _this.modalCallback();
            }
        };
    }
    return SWPropertyDisplayController;
}());
exports.SWPropertyDisplayController = SWPropertyDisplayController;
var SWPropertyDisplay = /** @class */ (function () {
    //@ngInject
    function SWPropertyDisplay($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.swpropertyPartialPath = swpropertyPartialPath;
        this.require = { swForm: "?^swForm", form: "?^form" };
        this.restrict = 'AE';
        this.scope = {};
        this.bindToController = {
            //swfproperty scope
            name: "@?",
            errorName: "@?",
            class: "@?",
            edit: "@?",
            valueObject: "=?",
            valueObjectProperty: "=?",
            propertyIdentifier: "@?",
            valueOptions: "=?",
            fieldAttributes: "@?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            errorText: "@?",
            errorClass: "@?",
            formTemplate: "@?",
            eventAnnouncers: "@",
            hideErrors: '=?',
            value: "@?",
            //swpropertyscope
            property: "@?",
            object: "=?",
            editable: "=?",
            editing: "=?",
            isHidden: "=?",
            title: "=?",
            hint: "@?",
            options: "=?",
            optionsArguments: "=?",
            eagerLoadOptions: "=?",
            isDirty: "=?",
            onChangeCallback: "&?onChange",
            onChangeEvent: "@?",
            saveCallback: "&?",
            fieldType: "@?",
            rawFileTarget: "@?",
            binaryFileTarget: "@?",
            noValidate: "=?",
            inListingDisplay: "=?",
            inModal: "=?",
            modalCallback: "&?",
            hasModalCallback: "=?",
            rowSaveEnabled: "=?",
            revertToValue: "=?",
            revertText: "@?",
            showRevert: "=?",
            showSave: "=?",
            placeholderText: "@",
            placeholderRbKey: "@",
            inputAttributes: "@?",
            optionValues: "=?",
            eventListeners: "=?",
            context: "@?"
        };
        this.controller = SWPropertyDisplayController;
        this.controllerAs = "swPropertyDisplay";
        this.templateUrlPath = "propertydisplay.html";
        this.link = function ($scope, element, attrs, formController) {
            $scope.frmController = formController;
            $scope.swfPropertyDisplay = $scope.swPropertyDisplay;
            if (angular.isDefined(attrs.onChange)) {
                $scope.swPropertyDisplay.hasOnChangeCallback = true;
            }
            else {
                $scope.swPropertyDisplay.hasOnChangeCallback = false;
            }
            if (angular.isDefined(attrs.saveCallback)) {
                $scope.swPropertyDisplay.hasSaveCallback = true;
            }
            else {
                $scope.swPropertyDisplay.hasSaveCallback = false;
            }
            if (angular.isDefined($scope.swPropertyDisplay.inListingDisplay) && $scope.swPropertyDisplay.inListingDisplay) {
                var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
                if (angular.isDefined(currentScope["pageRecord"])) {
                    $scope.swPropertyDisplay.pageRecord = currentScope["pageRecord"];
                }
                var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
                if (angular.isDefined(currentScope["pageRecordKey"])) {
                    $scope.swPropertyDisplay.pageRecordIndex = currentScope["pageRecordKey"];
                }
                var currentScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
                if (angular.isDefined(currentScope["swListingDisplay"])) {
                    $scope.swPropertyDisplay.listingID = currentScope["swListingDisplay"].tableID;
                }
            }
            if (angular.isDefined($scope.swPropertyDisplay.inModal) && $scope.swPropertyDisplay.inModal) {
                var modalScope = _this.scopeService.getRootParentScope($scope, "swModalLauncher");
                $scope.swPropertyDisplay.modalName = modalScope.swModalLauncher.modalName;
                if (angular.isFunction(modalScope.swModalLauncher.launchModal)) {
                    $scope.swPropertyDisplay.modalCallback = modalScope.swModalLauncher.launchModal;
                    $scope.swPropertyDisplay.hasModalCallback = true;
                }
            }
        };
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + swpropertyPartialPath;
    }
    SWPropertyDisplay.Factory = function (swpropertyClass, swpropertyPartialPath) {
        var directive = function ($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder) { return new swpropertyClass($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, 
        //not an inejctable don't add to $inject. This is in the form.module Factory implementation
        swpropertyPartialPath); };
        directive.$inject = ['$compile', 'scopeService', 'coreFormPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWPropertyDisplay.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
    return SWPropertyDisplay;
}());
exports.SWPropertyDisplay = SWPropertyDisplay;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//services
var workflowconditionservice_1 = __webpack_require__(739);
var scheduleservice_1 = __webpack_require__(738);
//directives
var swadmincreatesuperuser_1 = __webpack_require__(726);
var swworkflowbasic_1 = __webpack_require__(728);
var swworkflowcondition_1 = __webpack_require__(729);
var swworkflowconditiongroupitem_1 = __webpack_require__(730);
var swworkflowconditiongroups_1 = __webpack_require__(731);
var swworkflowtask_1 = __webpack_require__(732);
var swworkflowtaskactions_1 = __webpack_require__(733);
var swworkflowtasks_1 = __webpack_require__(734);
var swworkflowtrigger_1 = __webpack_require__(735);
var swworkflowtriggers_1 = __webpack_require__(737);
var swworkflowtriggerhistory_1 = __webpack_require__(736);
var swschedulepreview_1 = __webpack_require__(727);
//filters
var workflowmodule = angular.module('hibachi.workflow', ['hibachi.collection']).config(function () {
})
    //constants
    .constant('workflowPartialsPath', 'workflow/components/')
    //services
    .service('workflowConditionService', workflowconditionservice_1.WorkflowConditionService)
    .service('scheduleService', scheduleservice_1.ScheduleService)
    //directives
    .directive('swAdminCreateSuperUser', swadmincreatesuperuser_1.SWAdminCreateSuperUser.Factory())
    .directive('swWorkflowBasic', swworkflowbasic_1.SWWorkflowBasic.Factory())
    .directive('swWorkflowCondition', swworkflowcondition_1.SWWorkflowCondition.Factory())
    .directive('swWorkflowConditionGroupItem', swworkflowconditiongroupitem_1.SWWorkflowConditionGroupItem.Factory())
    .directive('swWorkflowConditionGroups', swworkflowconditiongroups_1.SWWorkflowConditionGroups.Factory())
    .directive('swWorkflowTask', swworkflowtask_1.SWWorkflowTask.Factory())
    .directive('swWorkflowTaskActions', swworkflowtaskactions_1.SWWorkflowTaskActions.Factory())
    .directive('swWorkflowTasks', swworkflowtasks_1.SWWorkflowTasks.Factory())
    .directive('swWorkflowTrigger', swworkflowtrigger_1.SWWorkflowTrigger.Factory())
    .directive('swWorkflowTriggers', swworkflowtriggers_1.SWWorkflowTriggers.Factory())
    .directive('swWorkflowTriggerHistory', swworkflowtriggerhistory_1.SWWorkflowTriggerHistory.Factory())
    .directive('swSchedulePreview', swschedulepreview_1.SWSchedulePreview.Factory());
exports.workflowmodule = workflowmodule;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/// <reference path='../typings/slatwallTypescript.d.ts' />
/// <reference path='../typings/tsd.d.ts' />
/*jshint browser:true */
var basebootstrap_1 = __webpack_require__(543);
var slatwalladmin_module_1 = __webpack_require__(539);
//custom bootstrapper
var bootstrapper = /** @class */ (function (_super) {
    __extends(bootstrapper, _super);
    function bootstrapper() {
        var _this = this;
        var angular = _this = _super.call(this, slatwalladmin_module_1.slatwalladminmodule.name) || this;
        angular.bootstrap();
        return _this;
    }
    return bootstrapper;
}(basebootstrap_1.BaseBootStrapper));
module.exports = new bootstrapper();


/***/ }),
/* 178 */
/***/ (function(module, exports) {

(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();


/***/ }),
/* 179 */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),
/* 180 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(1);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = (function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        _super.call(this);
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber));
exports.InnerSubscriber = InnerSubscriber;
//# sourceMappingURL=InnerSubscriber.js.map

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* tslint:disable:no-unused-variable */
// Subject imported before Observable to bypass circular dependency issue since
// Subject extends Observable and Observable references Subject in it's
// definition
var Subject_1 = __webpack_require__(6);
exports.Subject = Subject_1.Subject;
exports.AnonymousSubject = Subject_1.AnonymousSubject;
/* tslint:enable:no-unused-variable */
var Observable_1 = __webpack_require__(0);
exports.Observable = Observable_1.Observable;
// statics
/* tslint:disable:no-use-before-declare */
__webpack_require__(184);
__webpack_require__(185);
__webpack_require__(186);
__webpack_require__(187);
__webpack_require__(188);
__webpack_require__(191);
__webpack_require__(192);
__webpack_require__(193);
__webpack_require__(194);
__webpack_require__(195);
__webpack_require__(196);
__webpack_require__(197);
__webpack_require__(198);
__webpack_require__(199);
__webpack_require__(200);
__webpack_require__(205);
__webpack_require__(201);
__webpack_require__(202);
__webpack_require__(203);
__webpack_require__(204);
__webpack_require__(206);
__webpack_require__(209);
__webpack_require__(207);
__webpack_require__(208);
__webpack_require__(210);
//dom
__webpack_require__(189);
__webpack_require__(190);
//operators
__webpack_require__(213);
__webpack_require__(214);
__webpack_require__(215);
__webpack_require__(216);
__webpack_require__(217);
__webpack_require__(218);
__webpack_require__(219);
__webpack_require__(220);
__webpack_require__(221);
__webpack_require__(222);
__webpack_require__(223);
__webpack_require__(224);
__webpack_require__(225);
__webpack_require__(231);
__webpack_require__(226);
__webpack_require__(227);
__webpack_require__(228);
__webpack_require__(229);
__webpack_require__(230);
__webpack_require__(232);
__webpack_require__(233);
__webpack_require__(234);
__webpack_require__(235);
__webpack_require__(238);
__webpack_require__(239);
__webpack_require__(240);
__webpack_require__(236);
__webpack_require__(241);
__webpack_require__(242);
__webpack_require__(243);
__webpack_require__(244);
__webpack_require__(245);
__webpack_require__(246);
__webpack_require__(247);
__webpack_require__(248);
__webpack_require__(211);
__webpack_require__(212);
__webpack_require__(249);
__webpack_require__(250);
__webpack_require__(237);
__webpack_require__(251);
__webpack_require__(252);
__webpack_require__(253);
__webpack_require__(254);
__webpack_require__(255);
__webpack_require__(256);
__webpack_require__(257);
__webpack_require__(258);
__webpack_require__(259);
__webpack_require__(260);
__webpack_require__(261);
__webpack_require__(262);
__webpack_require__(263);
__webpack_require__(264);
__webpack_require__(265);
__webpack_require__(266);
__webpack_require__(267);
__webpack_require__(268);
__webpack_require__(270);
__webpack_require__(269);
__webpack_require__(271);
__webpack_require__(272);
__webpack_require__(273);
__webpack_require__(274);
__webpack_require__(275);
__webpack_require__(276);
__webpack_require__(277);
__webpack_require__(278);
__webpack_require__(279);
__webpack_require__(280);
__webpack_require__(281);
__webpack_require__(282);
__webpack_require__(283);
__webpack_require__(284);
__webpack_require__(285);
__webpack_require__(286);
__webpack_require__(287);
__webpack_require__(288);
__webpack_require__(289);
__webpack_require__(290);
__webpack_require__(291);
__webpack_require__(292);
__webpack_require__(293);
__webpack_require__(294);
__webpack_require__(295);
__webpack_require__(296);
__webpack_require__(297);
__webpack_require__(298);
__webpack_require__(299);
__webpack_require__(300);
__webpack_require__(301);
__webpack_require__(302);
__webpack_require__(303);
__webpack_require__(304);
__webpack_require__(305);
__webpack_require__(306);
__webpack_require__(307);
__webpack_require__(308);
__webpack_require__(309);
__webpack_require__(310);
__webpack_require__(311);
__webpack_require__(312);
/* tslint:disable:no-unused-variable */
var Subscription_1 = __webpack_require__(5);
exports.Subscription = Subscription_1.Subscription;
var Subscriber_1 = __webpack_require__(1);
exports.Subscriber = Subscriber_1.Subscriber;
var AsyncSubject_1 = __webpack_require__(28);
exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
var ReplaySubject_1 = __webpack_require__(29);
exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
var BehaviorSubject_1 = __webpack_require__(65);
exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
var ConnectableObservable_1 = __webpack_require__(68);
exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
var Notification_1 = __webpack_require__(17);
exports.Notification = Notification_1.Notification;
var EmptyError_1 = __webpack_require__(38);
exports.EmptyError = EmptyError_1.EmptyError;
var ArgumentOutOfRangeError_1 = __webpack_require__(25);
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
var ObjectUnsubscribedError_1 = __webpack_require__(39);
exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
var TimeoutError_1 = __webpack_require__(159);
exports.TimeoutError = TimeoutError_1.TimeoutError;
var UnsubscriptionError_1 = __webpack_require__(160);
exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
var timeInterval_1 = __webpack_require__(75);
exports.TimeInterval = timeInterval_1.TimeInterval;
var timestamp_1 = __webpack_require__(57);
exports.Timestamp = timestamp_1.Timestamp;
var TestScheduler_1 = __webpack_require__(465);
exports.TestScheduler = TestScheduler_1.TestScheduler;
var VirtualTimeScheduler_1 = __webpack_require__(154);
exports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
var AjaxObservable_1 = __webpack_require__(71);
exports.AjaxResponse = AjaxObservable_1.AjaxResponse;
exports.AjaxError = AjaxObservable_1.AjaxError;
exports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;
var pipe_1 = __webpack_require__(59);
exports.pipe = pipe_1.pipe;
var asap_1 = __webpack_require__(155);
var async_1 = __webpack_require__(4);
var queue_1 = __webpack_require__(156);
var animationFrame_1 = __webpack_require__(462);
var rxSubscriber_1 = __webpack_require__(37);
var iterator_1 = __webpack_require__(24);
var observable_1 = __webpack_require__(36);
var _operators = __webpack_require__(453);
exports.operators = _operators;
/* tslint:enable:no-unused-variable */
/**
 * @typedef {Object} Rx.Scheduler
 * @property {Scheduler} queue Schedules on a queue in the current event frame
 * (trampoline scheduler). Use this for iteration operations.
 * @property {Scheduler} asap Schedules on the micro task queue, which uses the
 * fastest transport mechanism available, either Node.js' `process.nextTick()`
 * or Web Worker MessageChannel or setTimeout or others. Use this for
 * asynchronous conversions.
 * @property {Scheduler} async Schedules work with `setInterval`. Use this for
 * time-based operations.
 * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.
 * Use this for synchronizing with the platform's painting
 */
var Scheduler = {
    asap: asap_1.asap,
    queue: queue_1.queue,
    animationFrame: animationFrame_1.animationFrame,
    async: async_1.async
};
exports.Scheduler = Scheduler;
/**
 * @typedef {Object} Rx.Symbol
 * @property {Symbol|string} rxSubscriber A symbol to use as a property name to
 * retrieve an "Rx safe" Observer from an object. "Rx safety" can be defined as
 * an object that has all of the traits of an Rx Subscriber, including the
 * ability to add and remove subscriptions to the subscription chain and
 * guarantees involving event triggering (can't "next" after unsubscription,
 * etc).
 * @property {Symbol|string} observable A symbol to use as a property name to
 * retrieve an Observable as defined by the [ECMAScript "Observable" spec](https://github.com/zenparsing/es-observable).
 * @property {Symbol|string} iterator The ES6 symbol to use as a property name
 * to retrieve an iterator from an object.
 */
var Symbol = {
    rxSubscriber: rxSubscriber_1.rxSubscriber,
    observable: observable_1.observable,
    iterator: iterator_1.iterator
};
exports.Symbol = Symbol;
//# sourceMappingURL=Rx.js.map

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * An execution context and a data structure to order tasks and schedule their
 * execution. Provides a notion of (potentially virtual) time, through the
 * `now()` getter method.
 *
 * Each unit of work in a Scheduler is called an {@link Action}.
 *
 * ```ts
 * class Scheduler {
 *   now(): number;
 *   schedule(work, delay?, state?): Subscription;
 * }
 * ```
 *
 * @class Scheduler
 */
var Scheduler = (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    /**
     * Schedules a function, `work`, for execution. May happen at some point in
     * the future, according to the `delay` parameter, if specified. May be passed
     * some context object, `state`, which will be passed to the `work` function.
     *
     * The given arguments will be processed an stored as an Action object in a
     * queue of actions.
     *
     * @param {function(state: ?T): ?Subscription} work A function representing a
     * task, or some unit of work to be executed by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler itself.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @return {Subscription} A subscription in order to be able to unsubscribe
     * the scheduled work.
     */
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
    return Scheduler;
}());
exports.Scheduler = Scheduler;
//# sourceMappingURL=Scheduler.js.map

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var bindCallback_1 = __webpack_require__(331);
Observable_1.Observable.bindCallback = bindCallback_1.bindCallback;
//# sourceMappingURL=bindCallback.js.map

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var bindNodeCallback_1 = __webpack_require__(332);
Observable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
//# sourceMappingURL=bindNodeCallback.js.map

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var combineLatest_1 = __webpack_require__(333);
Observable_1.Observable.combineLatest = combineLatest_1.combineLatest;
//# sourceMappingURL=combineLatest.js.map

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var concat_1 = __webpack_require__(18);
Observable_1.Observable.concat = concat_1.concat;
//# sourceMappingURL=concat.js.map

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var defer_1 = __webpack_require__(334);
Observable_1.Observable.defer = defer_1.defer;
//# sourceMappingURL=defer.js.map

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var ajax_1 = __webpack_require__(336);
Observable_1.Observable.ajax = ajax_1.ajax;
//# sourceMappingURL=ajax.js.map

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var webSocket_1 = __webpack_require__(337);
Observable_1.Observable.webSocket = webSocket_1.webSocket;
//# sourceMappingURL=webSocket.js.map

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var empty_1 = __webpack_require__(338);
Observable_1.Observable.empty = empty_1.empty;
//# sourceMappingURL=empty.js.map

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var forkJoin_1 = __webpack_require__(339);
Observable_1.Observable.forkJoin = forkJoin_1.forkJoin;
//# sourceMappingURL=forkJoin.js.map

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var from_1 = __webpack_require__(72);
Observable_1.Observable.from = from_1.from;
//# sourceMappingURL=from.js.map

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var fromEvent_1 = __webpack_require__(340);
Observable_1.Observable.fromEvent = fromEvent_1.fromEvent;
//# sourceMappingURL=fromEvent.js.map

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var fromEventPattern_1 = __webpack_require__(341);
Observable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;
//# sourceMappingURL=fromEventPattern.js.map

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var fromPromise_1 = __webpack_require__(342);
Observable_1.Observable.fromPromise = fromPromise_1.fromPromise;
//# sourceMappingURL=fromPromise.js.map

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var generate_1 = __webpack_require__(343);
Observable_1.Observable.generate = generate_1.generate;
//# sourceMappingURL=generate.js.map

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var if_1 = __webpack_require__(344);
Observable_1.Observable.if = if_1._if;
//# sourceMappingURL=if.js.map

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var interval_1 = __webpack_require__(345);
Observable_1.Observable.interval = interval_1.interval;
//# sourceMappingURL=interval.js.map

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var merge_1 = __webpack_require__(30);
Observable_1.Observable.merge = merge_1.merge;
//# sourceMappingURL=merge.js.map

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var never_1 = __webpack_require__(346);
Observable_1.Observable.never = never_1.never;
//# sourceMappingURL=never.js.map

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var of_1 = __webpack_require__(73);
Observable_1.Observable.of = of_1.of;
//# sourceMappingURL=of.js.map

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var onErrorResumeNext_1 = __webpack_require__(347);
Observable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var pairs_1 = __webpack_require__(348);
Observable_1.Observable.pairs = pairs_1.pairs;
//# sourceMappingURL=pairs.js.map

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var race_1 = __webpack_require__(44);
Observable_1.Observable.race = race_1.race;
//# sourceMappingURL=race.js.map

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var range_1 = __webpack_require__(349);
Observable_1.Observable.range = range_1.range;
//# sourceMappingURL=range.js.map

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var throw_1 = __webpack_require__(350);
Observable_1.Observable.throw = throw_1._throw;
//# sourceMappingURL=throw.js.map

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var timer_1 = __webpack_require__(74);
Observable_1.Observable.timer = timer_1.timer;
//# sourceMappingURL=timer.js.map

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var using_1 = __webpack_require__(351);
Observable_1.Observable.using = using_1.using;
//# sourceMappingURL=using.js.map

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var zip_1 = __webpack_require__(352);
Observable_1.Observable.zip = zip_1.zip;
//# sourceMappingURL=zip.js.map

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var audit_1 = __webpack_require__(353);
Observable_1.Observable.prototype.audit = audit_1.audit;
//# sourceMappingURL=audit.js.map

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var auditTime_1 = __webpack_require__(354);
Observable_1.Observable.prototype.auditTime = auditTime_1.auditTime;
//# sourceMappingURL=auditTime.js.map

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var buffer_1 = __webpack_require__(355);
Observable_1.Observable.prototype.buffer = buffer_1.buffer;
//# sourceMappingURL=buffer.js.map

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var bufferCount_1 = __webpack_require__(356);
Observable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;
//# sourceMappingURL=bufferCount.js.map

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var bufferTime_1 = __webpack_require__(357);
Observable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;
//# sourceMappingURL=bufferTime.js.map

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var bufferToggle_1 = __webpack_require__(358);
Observable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;
//# sourceMappingURL=bufferToggle.js.map

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var bufferWhen_1 = __webpack_require__(359);
Observable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;
//# sourceMappingURL=bufferWhen.js.map

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var catch_1 = __webpack_require__(360);
Observable_1.Observable.prototype.catch = catch_1._catch;
Observable_1.Observable.prototype._catch = catch_1._catch;
//# sourceMappingURL=catch.js.map

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var combineAll_1 = __webpack_require__(361);
Observable_1.Observable.prototype.combineAll = combineAll_1.combineAll;
//# sourceMappingURL=combineAll.js.map

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var combineLatest_1 = __webpack_require__(362);
Observable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;
//# sourceMappingURL=combineLatest.js.map

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var concat_1 = __webpack_require__(363);
Observable_1.Observable.prototype.concat = concat_1.concat;
//# sourceMappingURL=concat.js.map

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var concatAll_1 = __webpack_require__(364);
Observable_1.Observable.prototype.concatAll = concatAll_1.concatAll;
//# sourceMappingURL=concatAll.js.map

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var concatMap_1 = __webpack_require__(365);
Observable_1.Observable.prototype.concatMap = concatMap_1.concatMap;
//# sourceMappingURL=concatMap.js.map

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var concatMapTo_1 = __webpack_require__(366);
Observable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;
//# sourceMappingURL=concatMapTo.js.map

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var count_1 = __webpack_require__(367);
Observable_1.Observable.prototype.count = count_1.count;
//# sourceMappingURL=count.js.map

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var debounce_1 = __webpack_require__(368);
Observable_1.Observable.prototype.debounce = debounce_1.debounce;
//# sourceMappingURL=debounce.js.map

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var debounceTime_1 = __webpack_require__(369);
Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
//# sourceMappingURL=debounceTime.js.map

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var defaultIfEmpty_1 = __webpack_require__(370);
Observable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
//# sourceMappingURL=defaultIfEmpty.js.map

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var delay_1 = __webpack_require__(371);
Observable_1.Observable.prototype.delay = delay_1.delay;
//# sourceMappingURL=delay.js.map

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var delayWhen_1 = __webpack_require__(372);
Observable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;
//# sourceMappingURL=delayWhen.js.map

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var dematerialize_1 = __webpack_require__(373);
Observable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;
//# sourceMappingURL=dematerialize.js.map

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var distinct_1 = __webpack_require__(374);
Observable_1.Observable.prototype.distinct = distinct_1.distinct;
//# sourceMappingURL=distinct.js.map

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var distinctUntilChanged_1 = __webpack_require__(375);
Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
//# sourceMappingURL=distinctUntilChanged.js.map

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var distinctUntilKeyChanged_1 = __webpack_require__(376);
Observable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
//# sourceMappingURL=distinctUntilKeyChanged.js.map

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var do_1 = __webpack_require__(377);
Observable_1.Observable.prototype.do = do_1._do;
Observable_1.Observable.prototype._do = do_1._do;
//# sourceMappingURL=do.js.map

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var elementAt_1 = __webpack_require__(378);
Observable_1.Observable.prototype.elementAt = elementAt_1.elementAt;
//# sourceMappingURL=elementAt.js.map

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var every_1 = __webpack_require__(379);
Observable_1.Observable.prototype.every = every_1.every;
//# sourceMappingURL=every.js.map

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var exhaust_1 = __webpack_require__(380);
Observable_1.Observable.prototype.exhaust = exhaust_1.exhaust;
//# sourceMappingURL=exhaust.js.map

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var exhaustMap_1 = __webpack_require__(381);
Observable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;
//# sourceMappingURL=exhaustMap.js.map

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var expand_1 = __webpack_require__(382);
Observable_1.Observable.prototype.expand = expand_1.expand;
//# sourceMappingURL=expand.js.map

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var filter_1 = __webpack_require__(383);
Observable_1.Observable.prototype.filter = filter_1.filter;
//# sourceMappingURL=filter.js.map

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var finally_1 = __webpack_require__(384);
Observable_1.Observable.prototype.finally = finally_1._finally;
Observable_1.Observable.prototype._finally = finally_1._finally;
//# sourceMappingURL=finally.js.map

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var find_1 = __webpack_require__(385);
Observable_1.Observable.prototype.find = find_1.find;
//# sourceMappingURL=find.js.map

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var findIndex_1 = __webpack_require__(386);
Observable_1.Observable.prototype.findIndex = findIndex_1.findIndex;
//# sourceMappingURL=findIndex.js.map

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var first_1 = __webpack_require__(387);
Observable_1.Observable.prototype.first = first_1.first;
//# sourceMappingURL=first.js.map

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var groupBy_1 = __webpack_require__(388);
Observable_1.Observable.prototype.groupBy = groupBy_1.groupBy;
//# sourceMappingURL=groupBy.js.map

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var ignoreElements_1 = __webpack_require__(389);
Observable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;
//# sourceMappingURL=ignoreElements.js.map

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var isEmpty_1 = __webpack_require__(390);
Observable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;
//# sourceMappingURL=isEmpty.js.map

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var last_1 = __webpack_require__(391);
Observable_1.Observable.prototype.last = last_1.last;
//# sourceMappingURL=last.js.map

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var let_1 = __webpack_require__(392);
Observable_1.Observable.prototype.let = let_1.letProto;
Observable_1.Observable.prototype.letBind = let_1.letProto;
//# sourceMappingURL=let.js.map

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var map_1 = __webpack_require__(393);
Observable_1.Observable.prototype.map = map_1.map;
//# sourceMappingURL=map.js.map

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var mapTo_1 = __webpack_require__(394);
Observable_1.Observable.prototype.mapTo = mapTo_1.mapTo;
//# sourceMappingURL=mapTo.js.map

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var materialize_1 = __webpack_require__(395);
Observable_1.Observable.prototype.materialize = materialize_1.materialize;
//# sourceMappingURL=materialize.js.map

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var max_1 = __webpack_require__(396);
Observable_1.Observable.prototype.max = max_1.max;
//# sourceMappingURL=max.js.map

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var merge_1 = __webpack_require__(397);
Observable_1.Observable.prototype.merge = merge_1.merge;
//# sourceMappingURL=merge.js.map

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var mergeAll_1 = __webpack_require__(398);
Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
//# sourceMappingURL=mergeAll.js.map

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var mergeMap_1 = __webpack_require__(399);
Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
//# sourceMappingURL=mergeMap.js.map

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var mergeMapTo_1 = __webpack_require__(400);
Observable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;
Observable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;
//# sourceMappingURL=mergeMapTo.js.map

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var mergeScan_1 = __webpack_require__(401);
Observable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;
//# sourceMappingURL=mergeScan.js.map

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var min_1 = __webpack_require__(402);
Observable_1.Observable.prototype.min = min_1.min;
//# sourceMappingURL=min.js.map

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var multicast_1 = __webpack_require__(403);
Observable_1.Observable.prototype.multicast = multicast_1.multicast;
//# sourceMappingURL=multicast.js.map

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var observeOn_1 = __webpack_require__(404);
Observable_1.Observable.prototype.observeOn = observeOn_1.observeOn;
//# sourceMappingURL=observeOn.js.map

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var onErrorResumeNext_1 = __webpack_require__(405);
Observable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var pairwise_1 = __webpack_require__(406);
Observable_1.Observable.prototype.pairwise = pairwise_1.pairwise;
//# sourceMappingURL=pairwise.js.map

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var partition_1 = __webpack_require__(407);
Observable_1.Observable.prototype.partition = partition_1.partition;
//# sourceMappingURL=partition.js.map

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var pluck_1 = __webpack_require__(408);
Observable_1.Observable.prototype.pluck = pluck_1.pluck;
//# sourceMappingURL=pluck.js.map

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var publish_1 = __webpack_require__(409);
Observable_1.Observable.prototype.publish = publish_1.publish;
//# sourceMappingURL=publish.js.map

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var publishBehavior_1 = __webpack_require__(410);
Observable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;
//# sourceMappingURL=publishBehavior.js.map

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var publishLast_1 = __webpack_require__(411);
Observable_1.Observable.prototype.publishLast = publishLast_1.publishLast;
//# sourceMappingURL=publishLast.js.map

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var publishReplay_1 = __webpack_require__(412);
Observable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;
//# sourceMappingURL=publishReplay.js.map

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var race_1 = __webpack_require__(413);
Observable_1.Observable.prototype.race = race_1.race;
//# sourceMappingURL=race.js.map

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var reduce_1 = __webpack_require__(414);
Observable_1.Observable.prototype.reduce = reduce_1.reduce;
//# sourceMappingURL=reduce.js.map

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var repeat_1 = __webpack_require__(415);
Observable_1.Observable.prototype.repeat = repeat_1.repeat;
//# sourceMappingURL=repeat.js.map

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var repeatWhen_1 = __webpack_require__(416);
Observable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;
//# sourceMappingURL=repeatWhen.js.map

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var retry_1 = __webpack_require__(417);
Observable_1.Observable.prototype.retry = retry_1.retry;
//# sourceMappingURL=retry.js.map

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var retryWhen_1 = __webpack_require__(418);
Observable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;
//# sourceMappingURL=retryWhen.js.map

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var sample_1 = __webpack_require__(419);
Observable_1.Observable.prototype.sample = sample_1.sample;
//# sourceMappingURL=sample.js.map

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var sampleTime_1 = __webpack_require__(420);
Observable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;
//# sourceMappingURL=sampleTime.js.map

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var scan_1 = __webpack_require__(421);
Observable_1.Observable.prototype.scan = scan_1.scan;
//# sourceMappingURL=scan.js.map

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var sequenceEqual_1 = __webpack_require__(422);
Observable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;
//# sourceMappingURL=sequenceEqual.js.map

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var share_1 = __webpack_require__(423);
Observable_1.Observable.prototype.share = share_1.share;
//# sourceMappingURL=share.js.map

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var shareReplay_1 = __webpack_require__(424);
Observable_1.Observable.prototype.shareReplay = shareReplay_1.shareReplay;
//# sourceMappingURL=shareReplay.js.map

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var single_1 = __webpack_require__(425);
Observable_1.Observable.prototype.single = single_1.single;
//# sourceMappingURL=single.js.map

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var skip_1 = __webpack_require__(426);
Observable_1.Observable.prototype.skip = skip_1.skip;
//# sourceMappingURL=skip.js.map

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var skipLast_1 = __webpack_require__(427);
Observable_1.Observable.prototype.skipLast = skipLast_1.skipLast;
//# sourceMappingURL=skipLast.js.map

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var skipUntil_1 = __webpack_require__(428);
Observable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;
//# sourceMappingURL=skipUntil.js.map

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var skipWhile_1 = __webpack_require__(429);
Observable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;
//# sourceMappingURL=skipWhile.js.map

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var startWith_1 = __webpack_require__(430);
Observable_1.Observable.prototype.startWith = startWith_1.startWith;
//# sourceMappingURL=startWith.js.map

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var subscribeOn_1 = __webpack_require__(431);
Observable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;
//# sourceMappingURL=subscribeOn.js.map

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var switch_1 = __webpack_require__(432);
Observable_1.Observable.prototype.switch = switch_1._switch;
Observable_1.Observable.prototype._switch = switch_1._switch;
//# sourceMappingURL=switch.js.map

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var switchMap_1 = __webpack_require__(433);
Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
//# sourceMappingURL=switchMap.js.map

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var switchMapTo_1 = __webpack_require__(434);
Observable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;
//# sourceMappingURL=switchMapTo.js.map

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var take_1 = __webpack_require__(435);
Observable_1.Observable.prototype.take = take_1.take;
//# sourceMappingURL=take.js.map

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var takeLast_1 = __webpack_require__(436);
Observable_1.Observable.prototype.takeLast = takeLast_1.takeLast;
//# sourceMappingURL=takeLast.js.map

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var takeUntil_1 = __webpack_require__(437);
Observable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;
//# sourceMappingURL=takeUntil.js.map

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var takeWhile_1 = __webpack_require__(438);
Observable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;
//# sourceMappingURL=takeWhile.js.map

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var throttle_1 = __webpack_require__(439);
Observable_1.Observable.prototype.throttle = throttle_1.throttle;
//# sourceMappingURL=throttle.js.map

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var throttleTime_1 = __webpack_require__(440);
Observable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;
//# sourceMappingURL=throttleTime.js.map

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var timeInterval_1 = __webpack_require__(75);
Observable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;
//# sourceMappingURL=timeInterval.js.map

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var timeout_1 = __webpack_require__(441);
Observable_1.Observable.prototype.timeout = timeout_1.timeout;
//# sourceMappingURL=timeout.js.map

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var timeoutWith_1 = __webpack_require__(442);
Observable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;
//# sourceMappingURL=timeoutWith.js.map

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var timestamp_1 = __webpack_require__(443);
Observable_1.Observable.prototype.timestamp = timestamp_1.timestamp;
//# sourceMappingURL=timestamp.js.map

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var toArray_1 = __webpack_require__(444);
Observable_1.Observable.prototype.toArray = toArray_1.toArray;
//# sourceMappingURL=toArray.js.map

/***/ }),
/* 304 */
/***/ (function(module, exports) {

// HACK: does nothing, because `toPromise` now lives on the `Observable` itself.
// leaving this module here to prevent breakage.
//# sourceMappingURL=toPromise.js.map

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var window_1 = __webpack_require__(445);
Observable_1.Observable.prototype.window = window_1.window;
//# sourceMappingURL=window.js.map

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var windowCount_1 = __webpack_require__(446);
Observable_1.Observable.prototype.windowCount = windowCount_1.windowCount;
//# sourceMappingURL=windowCount.js.map

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var windowTime_1 = __webpack_require__(447);
Observable_1.Observable.prototype.windowTime = windowTime_1.windowTime;
//# sourceMappingURL=windowTime.js.map

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var windowToggle_1 = __webpack_require__(448);
Observable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;
//# sourceMappingURL=windowToggle.js.map

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var windowWhen_1 = __webpack_require__(449);
Observable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;
//# sourceMappingURL=windowWhen.js.map

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var withLatestFrom_1 = __webpack_require__(450);
Observable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;
//# sourceMappingURL=withLatestFrom.js.map

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var zip_1 = __webpack_require__(451);
Observable_1.Observable.prototype.zip = zip_1.zipProto;
//# sourceMappingURL=zip.js.map

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(0);
var zipAll_1 = __webpack_require__(452);
Observable_1.Observable.prototype.zipAll = zipAll_1.zipAll;
//# sourceMappingURL=zipAll.js.map

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var ScalarObservable_1 = __webpack_require__(43);
var EmptyObservable_1 = __webpack_require__(14);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayLikeObservable = (function (_super) {
    __extends(ArrayLikeObservable, _super);
    function ArrayLikeObservable(arrayLike, scheduler) {
        _super.call(this);
        this.arrayLike = arrayLike;
        this.scheduler = scheduler;
        if (!scheduler && arrayLike.length === 1) {
            this._isScalar = true;
            this.value = arrayLike[0];
        }
    }
    ArrayLikeObservable.create = function (arrayLike, scheduler) {
        var length = arrayLike.length;
        if (length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        else if (length === 1) {
            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
        }
        else {
            return new ArrayLikeObservable(arrayLike, scheduler);
        }
    };
    ArrayLikeObservable.dispatch = function (state) {
        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;
        if (subscriber.closed) {
            return;
        }
        if (index >= length) {
            subscriber.complete();
            return;
        }
        subscriber.next(arrayLike[index]);
        state.index = index + 1;
        this.schedule(state);
    };
    /** @deprecated internal use only */ ArrayLikeObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
        var length = arrayLike.length;
        if (scheduler) {
            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < length && !subscriber.closed; i++) {
                subscriber.next(arrayLike[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayLikeObservable;
}(Observable_1.Observable));
exports.ArrayLikeObservable = ArrayLikeObservable;
//# sourceMappingURL=ArrayLikeObservable.js.map

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var AsyncSubject_1 = __webpack_require__(28);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var BoundCallbackObservable = (function (_super) {
    __extends(BoundCallbackObservable, _super);
    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {
        _super.call(this);
        this.callbackFunc = callbackFunc;
        this.selector = selector;
        this.args = args;
        this.context = context;
        this.scheduler = scheduler;
    }
    /* tslint:enable:max-line-length */
    /**
     * Converts a callback API to a function that returns an Observable.
     *
     * <span class="informal">Give it a function `f` of type `f(x, callback)` and
     * it will return a function `g` that when called as `g(x)` will output an
     * Observable.</span>
     *
     * `bindCallback` is not an operator because its input and output are not
     * Observables. The input is a function `func` with some parameters, the
     * last parameter must be a callback function that `func` calls when it is
     * done.
     *
     * The output of `bindCallback` is a function that takes the same parameters
     * as `func`, except the last one (the callback). When the output function
     * is called with arguments it will return an Observable. If function `func`
     * calls its callback with one argument the Observable will emit that value.
     * If on the other hand the callback is called with multiple values the resulting
     * Observable will emit an array with said values as arguments.
     *
     * It is very important to remember that input function `func` is not called
     * when the output function is, but rather when the Observable returned by the output
     * function is subscribed. This means if `func` makes an AJAX request, that request
     * will be made every time someone subscribes to the resulting Observable, but not before.
     *
     * Optionally, a selector function can be passed to `bindObservable`. The selector function
     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.
     * Even though by default multiple arguments passed to callback appear in the stream as an array
     * the selector function will be called with arguments directly, just as the callback would.
     * This means you can imagine the default selector (when one is not provided explicitly)
     * as a function that aggregates all its arguments into an array, or simply returns first argument
     * if there is only one.
     *
     * The last optional parameter - {@link Scheduler} - can be used to control when the call
     * to `func` happens after someone subscribes to Observable, as well as when results
     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`
     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,
     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler
     * and call `subscribe` on the output Observable all function calls that are currently executing
     * will end before `func` is invoked.
     *
     * By default results passed to the callback are emitted immediately after `func` invokes the callback.
     * In particular, if the callback is called synchronously the subscription of the resulting Observable
     * will call the `next` function synchronously as well.  If you want to defer that call,
     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can
     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.
     *
     * Note that the Observable created by the output function will always emit a single value
     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent
     * calls will not appear in the stream. If you need to listen for multiple calls,
     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.
     *
     * If `func` depends on some context (`this` property) and is not already bound the context of `func`
     * will be the context that the output function has at call time. In particular, if `func`
     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context
     * it is recommended that the context of the output function is set to that object as well.
     *
     * If the input function calls its callback in the "node style" (i.e. first argument to callback is
     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}
     * provides convenient error handling and probably is a better choice.
     * `bindCallback` will treat such functions the same as any other and error parameters
     * (whether passed or not) will always be interpreted as regular callback argument.
     *
     *
     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>
     * // Suppose we have jQuery.getJSON('/my/url', callback)
     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);
     * var result = getJSONAsObservable('/my/url');
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     *
     * @example <caption>Receive an array of arguments passed to a callback</caption>
     * someFunction((a, b, c) => {
     *   console.log(a); // 5
     *   console.log(b); // 'some string'
     *   console.log(c); // {someProperty: 'someValue'}
     * });
     *
     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);
     * boundSomeFunction().subscribe(values => {
     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]
     * });
     *
     *
     * @example <caption>Use bindCallback with a selector function</caption>
     * someFunction((a, b, c) => {
     *   console.log(a); // 'a'
     *   console.log(b); // 'b'
     *   console.log(c); // 'c'
     * });
     *
     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);
     * boundSomeFunction().subscribe(value => {
     *   console.log(value) // 'abc'
     * });
     *
     *
     * @example <caption>Compare behaviour with and without async Scheduler</caption>
     * function iCallMyCallbackSynchronously(cb) {
     *   cb();
     * }
     *
     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);
     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);
     *
     * boundSyncFn().subscribe(() => console.log('I was sync!'));
     * boundAsyncFn().subscribe(() => console.log('I was async!'));
     * console.log('This happened...');
     *
     * // Logs:
     * // I was sync!
     * // This happened...
     * // I was async!
     *
     *
     * @example <caption>Use bindCallback on an object method</caption>
     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);
     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject
     * .subscribe(subscriber);
     *
     *
     * @see {@link bindNodeCallback}
     * @see {@link from}
     * @see {@link fromPromise}
     *
     * @param {function} func A function with a callback as the last parameter.
     * @param {function} [selector] A function which takes the arguments from the
     * callback and maps them to a value that is emitted on the output Observable.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * callbacks.
     * @return {function(...params: *): Observable} A function which returns the
     * Observable that delivers the same values the callback would deliver.
     * @static true
     * @name bindCallback
     * @owner Observable
     */
    BoundCallbackObservable.create = function (func, selector, scheduler) {
        if (selector === void 0) { selector = undefined; }
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new BoundCallbackObservable(func, selector, args, this, scheduler);
        };
    };
    /** @deprecated internal use only */ BoundCallbackObservable.prototype._subscribe = function (subscriber) {
        var callbackFunc = this.callbackFunc;
        var args = this.args;
        var scheduler = this.scheduler;
        var subject = this.subject;
        if (!scheduler) {
            if (!subject) {
                subject = this.subject = new AsyncSubject_1.AsyncSubject();
                var handler = function handlerFn() {
                    var innerArgs = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        innerArgs[_i - 0] = arguments[_i];
                    }
                    var source = handlerFn.source;
                    var selector = source.selector, subject = source.subject;
                    if (selector) {
                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                        if (result_1 === errorObject_1.errorObject) {
                            subject.error(errorObject_1.errorObject.e);
                        }
                        else {
                            subject.next(result_1);
                            subject.complete();
                        }
                    }
                    else {
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    }
                };
                // use named function instance to avoid closure.
                handler.source = this;
                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));
                if (result === errorObject_1.errorObject) {
                    subject.error(errorObject_1.errorObject.e);
                }
            }
            return subject.subscribe(subscriber);
        }
        else {
            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });
        }
    };
    BoundCallbackObservable.dispatch = function (state) {
        var self = this;
        var source = state.source, subscriber = state.subscriber, context = state.context;
        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;
        var subject = source.subject;
        if (!subject) {
            subject = source.subject = new AsyncSubject_1.AsyncSubject();
            var handler = function handlerFn() {
                var innerArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    innerArgs[_i - 0] = arguments[_i];
                }
                var source = handlerFn.source;
                var selector = source.selector, subject = source.subject;
                if (selector) {
                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                    if (result_2 === errorObject_1.errorObject) {
                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
                    }
                    else {
                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
                    }
                }
                else {
                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
                }
            };
            // use named function to pass values in without closure
            handler.source = source;
            var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));
            if (result === errorObject_1.errorObject) {
                subject.error(errorObject_1.errorObject.e);
            }
        }
        self.add(subject.subscribe(subscriber));
    };
    return BoundCallbackObservable;
}(Observable_1.Observable));
exports.BoundCallbackObservable = BoundCallbackObservable;
function dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}
//# sourceMappingURL=BoundCallbackObservable.js.map

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var AsyncSubject_1 = __webpack_require__(28);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var BoundNodeCallbackObservable = (function (_super) {
    __extends(BoundNodeCallbackObservable, _super);
    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {
        _super.call(this);
        this.callbackFunc = callbackFunc;
        this.selector = selector;
        this.args = args;
        this.context = context;
        this.scheduler = scheduler;
    }
    /* tslint:enable:max-line-length */
    /**
     * Converts a Node.js-style callback API to a function that returns an
     * Observable.
     *
     * <span class="informal">It's just like {@link bindCallback}, but the
     * callback is expected to be of type `callback(error, result)`.</span>
     *
     * `bindNodeCallback` is not an operator because its input and output are not
     * Observables. The input is a function `func` with some parameters, but the
     * last parameter must be a callback function that `func` calls when it is
     * done. The callback function is expected to follow Node.js conventions,
     * where the first argument to the callback is an error object, signaling
     * whether call was successful. If that object is passed to callback, it means
     * something went wrong.
     *
     * The output of `bindNodeCallback` is a function that takes the same
     * parameters as `func`, except the last one (the callback). When the output
     * function is called with arguments, it will return an Observable.
     * If `func` calls its callback with error parameter present, Observable will
     * error with that value as well. If error parameter is not passed, Observable will emit
     * second parameter. If there are more parameters (third and so on),
     * Observable will emit an array with all arguments, except first error argument.
     *
     * Optionally `bindNodeCallback` accepts selector function, which allows you to
     * make resulting Observable emit value computed by selector, instead of regular
     * callback arguments. It works similarly to {@link bindCallback} selector, but
     * Node.js-style error argument will never be passed to that function.
     *
     * Note that `func` will not be called at the same time output function is,
     * but rather whenever resulting Observable is subscribed. By default call to
     * `func` will happen synchronously after subscription, but that can be changed
     * with proper {@link Scheduler} provided as optional third parameter. Scheduler
     * can also control when values from callback will be emitted by Observable.
     * To find out more, check out documentation for {@link bindCallback}, where
     * Scheduler works exactly the same.
     *
     * As in {@link bindCallback}, context (`this` property) of input function will be set to context
     * of returned function, when it is called.
     *
     * After Observable emits value, it will complete immediately. This means
     * even if `func` calls callback again, values from second and consecutive
     * calls will never appear on the stream. If you need to handle functions
     * that call callbacks multiple times, check out {@link fromEvent} or
     * {@link fromEventPattern} instead.
     *
     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.
     * "Node.js-style" callbacks are just a convention, so if you write for
     * browsers or any other environment and API you use implements that callback style,
     * `bindNodeCallback` can be safely used on that API functions as well.
     *
     * Remember that Error object passed to callback does not have to be an instance
     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.
     * Error parameter of callback function is interpreted as "present", when value
     * of that parameter is truthy. It could be, for example, non-zero number, non-empty
     * string or boolean `true`. In all of these cases resulting Observable would error
     * with that value. This means usually regular style callbacks will fail very often when
     * `bindNodeCallback` is used. If your Observable errors much more often then you
     * would expect, check if callback really is called in Node.js-style and, if not,
     * switch to {@link bindCallback} instead.
     *
     * Note that even if error parameter is technically present in callback, but its value
     * is falsy, it still won't appear in array emitted by Observable or in selector function.
     *
     *
     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>
     * import * as fs from 'fs';
     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);
     * var result = readFileAsObservable('./roadNames.txt', 'utf8');
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     *
     * @example <caption>Use on function calling callback with multiple arguments</caption>
     * someFunction((err, a, b) => {
     *   console.log(err); // null
     *   console.log(a); // 5
     *   console.log(b); // "some string"
     * });
     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);
     * boundSomeFunction()
     * .subscribe(value => {
     *   console.log(value); // [5, "some string"]
     * });
     *
     *
     * @example <caption>Use with selector function</caption>
     * someFunction((err, a, b) => {
     *   console.log(err); // undefined
     *   console.log(a); // "abc"
     *   console.log(b); // "DEF"
     * });
     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);
     * boundSomeFunction()
     * .subscribe(value => {
     *   console.log(value); // "abcDEF"
     * });
     *
     *
     * @example <caption>Use on function calling callback in regular style</caption>
     * someFunction(a => {
     *   console.log(a); // 5
     * });
     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);
     * boundSomeFunction()
     * .subscribe(
     *   value => {}             // never gets called
     *   err => console.log(err) // 5
     *);
     *
     *
     * @see {@link bindCallback}
     * @see {@link from}
     * @see {@link fromPromise}
     *
     * @param {function} func Function with a Node.js-style callback as the last parameter.
     * @param {function} [selector] A function which takes the arguments from the
     * callback and maps those to a value to emit on the output Observable.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * callbacks.
     * @return {function(...params: *): Observable} A function which returns the
     * Observable that delivers the same values the Node.js callback would
     * deliver.
     * @static true
     * @name bindNodeCallback
     * @owner Observable
     */
    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {
        if (selector === void 0) { selector = undefined; }
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);
        };
    };
    /** @deprecated internal use only */ BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {
        var callbackFunc = this.callbackFunc;
        var args = this.args;
        var scheduler = this.scheduler;
        var subject = this.subject;
        if (!scheduler) {
            if (!subject) {
                subject = this.subject = new AsyncSubject_1.AsyncSubject();
                var handler = function handlerFn() {
                    var innerArgs = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        innerArgs[_i - 0] = arguments[_i];
                    }
                    var source = handlerFn.source;
                    var selector = source.selector, subject = source.subject;
                    var err = innerArgs.shift();
                    if (err) {
                        subject.error(err);
                    }
                    else if (selector) {
                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                        if (result_1 === errorObject_1.errorObject) {
                            subject.error(errorObject_1.errorObject.e);
                        }
                        else {
                            subject.next(result_1);
                            subject.complete();
                        }
                    }
                    else {
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    }
                };
                // use named function instance to avoid closure.
                handler.source = this;
                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));
                if (result === errorObject_1.errorObject) {
                    subject.error(errorObject_1.errorObject.e);
                }
            }
            return subject.subscribe(subscriber);
        }
        else {
            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });
        }
    };
    return BoundNodeCallbackObservable;
}(Observable_1.Observable));
exports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;
function dispatch(state) {
    var self = this;
    var source = state.source, subscriber = state.subscriber, context = state.context;
    // XXX: cast to `any` to access to the private field in `source`.
    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;
    var subject = source.subject;
    if (!subject) {
        subject = source.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function handlerFn() {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i - 0] = arguments[_i];
            }
            var source = handlerFn.source;
            var selector = source.selector, subject = source.subject;
            var err = innerArgs.shift();
            if (err) {
                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
            }
            else if (selector) {
                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
                if (result_2 === errorObject_1.errorObject) {
                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
                }
                else {
                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
                }
            }
            else {
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
            }
        };
        // use named function to pass values in without closure
        handler.source = source;
        var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));
        if (result === errorObject_1.errorObject) {
            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
        }
    }
    self.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}
//# sourceMappingURL=BoundNodeCallbackObservable.js.map

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var subscribeToResult_1 = __webpack_require__(3);
var OuterSubscriber_1 = __webpack_require__(2);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var DeferObservable = (function (_super) {
    __extends(DeferObservable, _super);
    function DeferObservable(observableFactory) {
        _super.call(this);
        this.observableFactory = observableFactory;
    }
    /**
     * Creates an Observable that, on subscribe, calls an Observable factory to
     * make an Observable for each new Observer.
     *
     * <span class="informal">Creates the Observable lazily, that is, only when it
     * is subscribed.
     * </span>
     *
     * <img src="./img/defer.png" width="100%">
     *
     * `defer` allows you to create the Observable only when the Observer
     * subscribes, and create a fresh Observable for each Observer. It waits until
     * an Observer subscribes to it, and then it generates an Observable,
     * typically with an Observable factory function. It does this afresh for each
     * subscriber, so although each subscriber may think it is subscribing to the
     * same Observable, in fact each subscriber gets its own individual
     * Observable.
     *
     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>
     * var clicksOrInterval = Rx.Observable.defer(function () {
     *   if (Math.random() > 0.5) {
     *     return Rx.Observable.fromEvent(document, 'click');
     *   } else {
     *     return Rx.Observable.interval(1000);
     *   }
     * });
     * clicksOrInterval.subscribe(x => console.log(x));
     *
     * // Results in the following behavior:
     * // If the result of Math.random() is greater than 0.5 it will listen
     * // for clicks anywhere on the "document"; when document is clicked it
     * // will log a MouseEvent object to the console. If the result is less
     * // than 0.5 it will emit ascending numbers, one every second(1000ms).
     *
     * @see {@link create}
     *
     * @param {function(): SubscribableOrPromise} observableFactory The Observable
     * factory function to invoke for each Observer that subscribes to the output
     * Observable. May also return a Promise, which will be converted on the fly
     * to an Observable.
     * @return {Observable} An Observable whose Observers' subscriptions trigger
     * an invocation of the given Observable factory function.
     * @static true
     * @name defer
     * @owner Observable
     */
    DeferObservable.create = function (observableFactory) {
        return new DeferObservable(observableFactory);
    };
    /** @deprecated internal use only */ DeferObservable.prototype._subscribe = function (subscriber) {
        return new DeferSubscriber(subscriber, this.observableFactory);
    };
    return DeferObservable;
}(Observable_1.Observable));
exports.DeferObservable = DeferObservable;
var DeferSubscriber = (function (_super) {
    __extends(DeferSubscriber, _super);
    function DeferSubscriber(destination, factory) {
        _super.call(this, destination);
        this.factory = factory;
        this.tryDefer();
    }
    DeferSubscriber.prototype.tryDefer = function () {
        try {
            this._callFactory();
        }
        catch (err) {
            this._error(err);
        }
    };
    DeferSubscriber.prototype._callFactory = function () {
        var result = this.factory();
        if (result) {
            this.add(subscribeToResult_1.subscribeToResult(this, result));
        }
    };
    return DeferSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=DeferObservable.js.map

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ErrorObservable = (function (_super) {
    __extends(ErrorObservable, _super);
    function ErrorObservable(error, scheduler) {
        _super.call(this);
        this.error = error;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits no items to the Observer and immediately
     * emits an error notification.
     *
     * <span class="informal">Just emits 'error', and nothing else.
     * </span>
     *
     * <img src="./img/throw.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the error notification. It can be used for composing with other
     * Observables, such as in a {@link mergeMap}.
     *
     * @example <caption>Emit the number 7, then emit an error.</caption>
     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
     * var interval = Rx.Observable.interval(1000);
     * var result = interval.mergeMap(x =>
     *   x === 13 ?
     *     Rx.Observable.throw('Thirteens are bad') :
     *     Rx.Observable.of('a', 'b', 'c')
     * );
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link never}
     * @see {@link of}
     *
     * @param {any} error The particular Error to pass to the error notification.
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emission of the error notification.
     * @return {Observable} An error Observable: emits only the error notification
     * using the given error argument.
     * @static true
     * @name throw
     * @owner Observable
     */
    ErrorObservable.create = function (error, scheduler) {
        return new ErrorObservable(error, scheduler);
    };
    ErrorObservable.dispatch = function (arg) {
        var error = arg.error, subscriber = arg.subscriber;
        subscriber.error(error);
    };
    /** @deprecated internal use only */ ErrorObservable.prototype._subscribe = function (subscriber) {
        var error = this.error;
        var scheduler = this.scheduler;
        subscriber.syncErrorThrowable = true;
        if (scheduler) {
            return scheduler.schedule(ErrorObservable.dispatch, 0, {
                error: error, subscriber: subscriber
            });
        }
        else {
            subscriber.error(error);
        }
    };
    return ErrorObservable;
}(Observable_1.Observable));
exports.ErrorObservable = ErrorObservable;
//# sourceMappingURL=ErrorObservable.js.map

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var EmptyObservable_1 = __webpack_require__(14);
var isArray_1 = __webpack_require__(12);
var subscribeToResult_1 = __webpack_require__(3);
var OuterSubscriber_1 = __webpack_require__(2);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ForkJoinObservable = (function (_super) {
    __extends(ForkJoinObservable, _super);
    function ForkJoinObservable(sources, resultSelector) {
        _super.call(this);
        this.sources = sources;
        this.resultSelector = resultSelector;
    }
    /* tslint:enable:max-line-length */
    /**
     * Joins last values emitted by passed Observables.
     *
     * <span class="informal">Wait for Observables to complete and then combine last values they emitted.</span>
     *
     * <img src="./img/forkJoin.png" width="100%">
     *
     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array
     * or directly as arguments. If no input Observables are provided, resulting stream will complete
     * immediately.
     *
     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last
     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting
     * array will have `n` values, where first value is the last thing emitted by the first Observable,
     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will
     * not emit more than once and it will complete after that. If you need to emit combined values not only
     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}
     * or {@link zip} instead.
     *
     * In order for resulting array to have the same length as the number of input Observables, whenever any of
     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well
     * and it will not emit anything either, even if it already has some last values from other Observables.
     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,
     * unless at any point some other Observable completes without emitting value, which brings us back to
     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments
     * have to emit something at least once and complete.
     *
     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables
     * will be immediately unsubscribed.
     *
     * Optionally `forkJoin` accepts project function, that will be called with values which normally
     * would land in emitted array. Whatever is returned by project function, will appear in output
     * Observable instead. This means that default project can be thought of as a function that takes
     * all its arguments and puts them into an array. Note that project function will be called only
     * when output Observable is supposed to emit a result.
     *
     * @example <caption>Use forkJoin with operator emitting immediately</caption>
     * const observable = Rx.Observable.forkJoin(
     *   Rx.Observable.of(1, 2, 3, 4),
     *   Rx.Observable.of(5, 6, 7, 8)
     * );
     * observable.subscribe(
     *   value => console.log(value),
     *   err => {},
     *   () => console.log('This is how it ends!')
     * );
     *
     * // Logs:
     * // [4, 8]
     * // "This is how it ends!"
     *
     *
     * @example <caption>Use forkJoin with operator emitting after some time</caption>
     * const observable = Rx.Observable.forkJoin(
     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete
     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete
     * );
     * observable.subscribe(
     *   value => console.log(value),
     *   err => {},
     *   () => console.log('This is how it ends!')
     * );
     *
     * // Logs:
     * // [2, 3] after 3 seconds
     * // "This is how it ends!" immediately after
     *
     *
     * @example <caption>Use forkJoin with project function</caption>
     * const observable = Rx.Observable.forkJoin(
     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete
     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete
     *   (n, m) => n + m
     * );
     * observable.subscribe(
     *   value => console.log(value),
     *   err => {},
     *   () => console.log('This is how it ends!')
     * );
     *
     * // Logs:
     * // 5 after 3 seconds
     * // "This is how it ends!" immediately after
     *
     * @see {@link combineLatest}
     * @see {@link zip}
     *
     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments
     * passed directly to the operator.
     * @param {function} [project] Function that takes values emitted by input Observables and returns value
     * that will appear in resulting Observable instead of default array.
     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables
     * or value from project function.
     * @static true
     * @name forkJoin
     * @owner Observable
     */
    ForkJoinObservable.create = function () {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i - 0] = arguments[_i];
        }
        if (sources === null || arguments.length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        var resultSelector = null;
        if (typeof sources[sources.length - 1] === 'function') {
            resultSelector = sources.pop();
        }
        // if the first and only other argument besides the resultSelector is an array
        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
        if (sources.length === 1 && isArray_1.isArray(sources[0])) {
            sources = sources[0];
        }
        if (sources.length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        return new ForkJoinObservable(sources, resultSelector);
    };
    /** @deprecated internal use only */ ForkJoinObservable.prototype._subscribe = function (subscriber) {
        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
    };
    return ForkJoinObservable;
}(Observable_1.Observable));
exports.ForkJoinObservable = ForkJoinObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ForkJoinSubscriber = (function (_super) {
    __extends(ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources, resultSelector) {
        _super.call(this, destination);
        this.sources = sources;
        this.resultSelector = resultSelector;
        this.completed = 0;
        this.haveValues = 0;
        var len = sources.length;
        this.total = len;
        this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
            if (innerSubscription) {
                innerSubscription.outerIndex = i;
                this.add(innerSubscription);
            }
        }
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var destination = this.destination;
        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            var value = resultSelector ? resultSelector.apply(this, values) : values;
            destination.next(value);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=ForkJoinObservable.js.map

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var tryCatch_1 = __webpack_require__(9);
var isFunction_1 = __webpack_require__(41);
var errorObject_1 = __webpack_require__(7);
var Subscription_1 = __webpack_require__(5);
var toString = Object.prototype.toString;
function isNodeStyleEventEmitter(sourceObj) {
    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isNodeList(sourceObj) {
    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';
}
function isHTMLCollection(sourceObj) {
    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';
}
function isEventTarget(sourceObj) {
    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromEventObservable = (function (_super) {
    __extends(FromEventObservable, _super);
    function FromEventObservable(sourceObj, eventName, selector, options) {
        _super.call(this);
        this.sourceObj = sourceObj;
        this.eventName = eventName;
        this.selector = selector;
        this.options = options;
    }
    /* tslint:enable:max-line-length */
    /**
     * Creates an Observable that emits events of a specific type coming from the
     * given event target.
     *
     * <span class="informal">Creates an Observable from DOM events, or Node.js
     * EventEmitter events or others.</span>
     *
     * <img src="./img/fromEvent.png" width="100%">
     *
     * `fromEvent` accepts as a first argument event target, which is an object with methods
     * for registering event handler functions. As a second argument it takes string that indicates
     * type of event we want to listen for. `fromEvent` supports selected types of event targets,
     * which are described in detail below. If your event target does not match any of the ones listed,
     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.
     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event
     * handler functions have different names, but they all accept a string describing event type
     * and function itself, which will be called whenever said event happens.
     *
     * Every time resulting Observable is subscribed, event handler function will be registered
     * to event target on given event type. When that event fires, value
     * passed as a first argument to registered function will be emitted by output Observable.
     * When Observable is unsubscribed, function will be unregistered from event target.
     *
     * Note that if event target calls registered function with more than one argument, second
     * and following arguments will not appear in resulting stream. In order to get access to them,
     * you can pass to `fromEvent` optional project function, which will be called with all arguments
     * passed to event handler. Output Observable will then emit value returned by project function,
     * instead of the usual value.
     *
     * Remember that event targets listed below are checked via duck typing. It means that
     * no matter what kind of object you have and no matter what environment you work in,
     * you can safely use `fromEvent` on that object if it exposes described methods (provided
     * of course they behave as was described above). So for example if Node.js library exposes
     * event target which has the same method names as DOM EventTarget, `fromEvent` is still
     * a good choice.
     *
     * If the API you use is more callback then event handler oriented (subscribed
     * callback function fires only once and thus there is no need to manually
     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}
     * instead.
     *
     * `fromEvent` supports following types of event targets:
     *
     * **DOM EventTarget**
     *
     * This is an object with `addEventListener` and `removeEventListener` methods.
     *
     * In the browser, `addEventListener` accepts - apart from event type string and event
     * handler function arguments - optional third parameter, which is either an object or boolean,
     * both used for additional configuration how and when passed function will be called. When
     * `fromEvent` is used with event target of that type, you can provide this values
     * as third parameter as well.
     *
     * **Node.js EventEmitter**
     *
     * An object with `addListener` and `removeListener` methods.
     *
     * **JQuery-style event target**
     *
     * An object with `on` and `off` methods
     *
     * **DOM NodeList**
     *
     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.
     *
     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes
     * it contains and install event handler function in every of them. When returned Observable
     * is unsubscribed, function will be removed from all Nodes.
     *
     * **DOM HtmlCollection**
     *
     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is
     * installed and removed in each of elements.
     *
     *
     * @example <caption>Emits clicks happening on the DOM document</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * clicks.subscribe(x => console.log(x));
     *
     * // Results in:
     * // MouseEvent object logged to console every time a click
     * // occurs on the document.
     *
     *
     * @example <caption>Use addEventListener with capture option</caption>
     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter
     *                                                                          // which will be passed to addEventListener
     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');
     *
     * clicksInDocument.subscribe(() => console.log('document'));
     * clicksInDiv.subscribe(() => console.log('div'));
     *
     * // By default events bubble UP in DOM tree, so normally
     * // when we would click on div in document
     * // "div" would be logged first and then "document".
     * // Since we specified optional `capture` option, document
     * // will catch event when it goes DOWN DOM tree, so console
     * // will log "document" and then "div".
     *
     * @see {@link bindCallback}
     * @see {@link bindNodeCallback}
     * @see {@link fromEventPattern}
     *
     * @param {EventTargetLike} target The DOM EventTarget, Node.js
     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.
     * @param {string} eventName The event name of interest, being emitted by the
     * `target`.
     * @param {EventListenerOptions} [options] Options to pass through to addEventListener
     * @param {SelectorMethodSignature<T>} [selector] An optional function to
     * post-process results. It takes the arguments from the event handler and
     * should return a single value.
     * @return {Observable<T>}
     * @static true
     * @name fromEvent
     * @owner Observable
     */
    FromEventObservable.create = function (target, eventName, options, selector) {
        if (isFunction_1.isFunction(options)) {
            selector = options;
            options = undefined;
        }
        return new FromEventObservable(target, eventName, selector, options);
    };
    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {
        var unsubscribe;
        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
            for (var i = 0, len = sourceObj.length; i < len; i++) {
                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
            }
        }
        else if (isEventTarget(sourceObj)) {
            var source_1 = sourceObj;
            sourceObj.addEventListener(eventName, handler, options);
            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
        }
        else if (isJQueryStyleEventEmitter(sourceObj)) {
            var source_2 = sourceObj;
            sourceObj.on(eventName, handler);
            unsubscribe = function () { return source_2.off(eventName, handler); };
        }
        else if (isNodeStyleEventEmitter(sourceObj)) {
            var source_3 = sourceObj;
            sourceObj.addListener(eventName, handler);
            unsubscribe = function () { return source_3.removeListener(eventName, handler); };
        }
        else {
            throw new TypeError('Invalid event target');
        }
        subscriber.add(new Subscription_1.Subscription(unsubscribe));
    };
    /** @deprecated internal use only */ FromEventObservable.prototype._subscribe = function (subscriber) {
        var sourceObj = this.sourceObj;
        var eventName = this.eventName;
        var options = this.options;
        var selector = this.selector;
        var handler = selector ? function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);
            if (result === errorObject_1.errorObject) {
                subscriber.error(errorObject_1.errorObject.e);
            }
            else {
                subscriber.next(result);
            }
        } : function (e) { return subscriber.next(e); };
        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);
    };
    return FromEventObservable;
}(Observable_1.Observable));
exports.FromEventObservable = FromEventObservable;
//# sourceMappingURL=FromEventObservable.js.map

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(41);
var Observable_1 = __webpack_require__(0);
var Subscription_1 = __webpack_require__(5);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromEventPatternObservable = (function (_super) {
    __extends(FromEventPatternObservable, _super);
    function FromEventPatternObservable(addHandler, removeHandler, selector) {
        _super.call(this);
        this.addHandler = addHandler;
        this.removeHandler = removeHandler;
        this.selector = selector;
    }
    /**
     * Creates an Observable from an API based on addHandler/removeHandler
     * functions.
     *
     * <span class="informal">Converts any addHandler/removeHandler API to an
     * Observable.</span>
     *
     * <img src="./img/fromEventPattern.png" width="100%">
     *
     * Creates an Observable by using the `addHandler` and `removeHandler`
     * functions to add and remove the handlers, with an optional selector
     * function to project the event arguments to a result. The `addHandler` is
     * called when the output Observable is subscribed, and `removeHandler` is
     * called when the Subscription is unsubscribed.
     *
     * @example <caption>Emits clicks happening on the DOM document</caption>
     * function addClickHandler(handler) {
     *   document.addEventListener('click', handler);
     * }
     *
     * function removeClickHandler(handler) {
     *   document.removeEventListener('click', handler);
     * }
     *
     * var clicks = Rx.Observable.fromEventPattern(
     *   addClickHandler,
     *   removeClickHandler
     * );
     * clicks.subscribe(x => console.log(x));
     *
     * @see {@link from}
     * @see {@link fromEvent}
     *
     * @param {function(handler: Function): any} addHandler A function that takes
     * a `handler` function as argument and attaches it somehow to the actual
     * source of events.
     * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that
     * takes a `handler` function as argument and removes it in case it was
     * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,
     * removeHandler function will forward it.
     * @param {function(...args: any): T} [selector] An optional function to
     * post-process results. It takes the arguments from the event handler and
     * should return a single value.
     * @return {Observable<T>}
     * @static true
     * @name fromEventPattern
     * @owner Observable
     */
    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {
        return new FromEventPatternObservable(addHandler, removeHandler, selector);
    };
    /** @deprecated internal use only */ FromEventPatternObservable.prototype._subscribe = function (subscriber) {
        var _this = this;
        var removeHandler = this.removeHandler;
        var handler = !!this.selector ? function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            _this._callSelector(subscriber, args);
        } : function (e) { subscriber.next(e); };
        var retValue = this._callAddHandler(handler, subscriber);
        if (!isFunction_1.isFunction(removeHandler)) {
            return;
        }
        subscriber.add(new Subscription_1.Subscription(function () {
            //TODO: determine whether or not to forward to error handler
            removeHandler(handler, retValue);
        }));
    };
    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {
        try {
            var result = this.selector.apply(this, args);
            subscriber.next(result);
        }
        catch (e) {
            subscriber.error(e);
        }
    };
    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {
        try {
            return this.addHandler(handler) || null;
        }
        catch (e) {
            errorSubscriber.error(e);
        }
    };
    return FromEventPatternObservable;
}(Observable_1.Observable));
exports.FromEventPatternObservable = FromEventPatternObservable;
//# sourceMappingURL=FromEventPatternObservable.js.map

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var isScheduler_1 = __webpack_require__(11);
var selfSelector = function (value) { return value; };
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var GenerateObservable = (function (_super) {
    __extends(GenerateObservable, _super);
    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {
        _super.call(this);
        this.initialState = initialState;
        this.condition = condition;
        this.iterate = iterate;
        this.resultSelector = resultSelector;
        this.scheduler = scheduler;
    }
    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
        if (arguments.length == 1) {
            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);
        }
        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {
            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);
        }
        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);
    };
    /** @deprecated internal use only */ GenerateObservable.prototype._subscribe = function (subscriber) {
        var state = this.initialState;
        if (this.scheduler) {
            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {
                subscriber: subscriber,
                iterate: this.iterate,
                condition: this.condition,
                resultSelector: this.resultSelector,
                state: state });
        }
        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;
        do {
            if (condition) {
                var conditionResult = void 0;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            var value = void 0;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return;
            }
        } while (true);
    };
    GenerateObservable.dispatch = function (state) {
        var subscriber = state.subscriber, condition = state.condition;
        if (subscriber.closed) {
            return;
        }
        if (state.needIterate) {
            try {
                state.state = state.iterate(state.state);
            }
            catch (err) {
                subscriber.error(err);
                return;
            }
        }
        else {
            state.needIterate = true;
        }
        if (condition) {
            var conditionResult = void 0;
            try {
                conditionResult = condition(state.state);
            }
            catch (err) {
                subscriber.error(err);
                return;
            }
            if (!conditionResult) {
                subscriber.complete();
                return;
            }
            if (subscriber.closed) {
                return;
            }
        }
        var value;
        try {
            value = state.resultSelector(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return;
        }
        if (subscriber.closed) {
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        return this.schedule(state);
    };
    return GenerateObservable;
}(Observable_1.Observable));
exports.GenerateObservable = GenerateObservable;
//# sourceMappingURL=GenerateObservable.js.map

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var subscribeToResult_1 = __webpack_require__(3);
var OuterSubscriber_1 = __webpack_require__(2);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IfObservable = (function (_super) {
    __extends(IfObservable, _super);
    function IfObservable(condition, thenSource, elseSource) {
        _super.call(this);
        this.condition = condition;
        this.thenSource = thenSource;
        this.elseSource = elseSource;
    }
    IfObservable.create = function (condition, thenSource, elseSource) {
        return new IfObservable(condition, thenSource, elseSource);
    };
    /** @deprecated internal use only */ IfObservable.prototype._subscribe = function (subscriber) {
        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;
        return new IfSubscriber(subscriber, condition, thenSource, elseSource);
    };
    return IfObservable;
}(Observable_1.Observable));
exports.IfObservable = IfObservable;
var IfSubscriber = (function (_super) {
    __extends(IfSubscriber, _super);
    function IfSubscriber(destination, condition, thenSource, elseSource) {
        _super.call(this, destination);
        this.condition = condition;
        this.thenSource = thenSource;
        this.elseSource = elseSource;
        this.tryIf();
    }
    IfSubscriber.prototype.tryIf = function () {
        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;
        var result;
        try {
            result = condition();
            var source = result ? thenSource : elseSource;
            if (source) {
                this.add(subscribeToResult_1.subscribeToResult(this, source));
            }
            else {
                this._complete();
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    return IfSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=IfObservable.js.map

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isNumeric_1 = __webpack_require__(26);
var Observable_1 = __webpack_require__(0);
var async_1 = __webpack_require__(4);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IntervalObservable = (function (_super) {
    __extends(IntervalObservable, _super);
    function IntervalObservable(period, scheduler) {
        if (period === void 0) { period = 0; }
        if (scheduler === void 0) { scheduler = async_1.async; }
        _super.call(this);
        this.period = period;
        this.scheduler = scheduler;
        if (!isNumeric_1.isNumeric(period) || period < 0) {
            this.period = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            this.scheduler = async_1.async;
        }
    }
    /**
     * Creates an Observable that emits sequential numbers every specified
     * interval of time, on a specified IScheduler.
     *
     * <span class="informal">Emits incremental numbers periodically in time.
     * </span>
     *
     * <img src="./img/interval.png" width="100%">
     *
     * `interval` returns an Observable that emits an infinite sequence of
     * ascending integers, with a constant interval of time of your choosing
     * between those emissions. The first emission is not sent immediately, but
     * only after the first period has passed. By default, this operator uses the
     * `async` IScheduler to provide a notion of time, but you may pass any
     * IScheduler to it.
     *
     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>
     * var numbers = Rx.Observable.interval(1000);
     * numbers.subscribe(x => console.log(x));
     *
     * @see {@link timer}
     * @see {@link delay}
     *
     * @param {number} [period=0] The interval size in milliseconds (by default)
     * or the time unit determined by the scheduler's clock.
     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
     * the emission of values, and providing a notion of "time".
     * @return {Observable} An Observable that emits a sequential number each time
     * interval.
     * @static true
     * @name interval
     * @owner Observable
     */
    IntervalObservable.create = function (period, scheduler) {
        if (period === void 0) { period = 0; }
        if (scheduler === void 0) { scheduler = async_1.async; }
        return new IntervalObservable(period, scheduler);
    };
    IntervalObservable.dispatch = function (state) {
        var index = state.index, subscriber = state.subscriber, period = state.period;
        subscriber.next(index);
        if (subscriber.closed) {
            return;
        }
        state.index += 1;
        this.schedule(state, period);
    };
    /** @deprecated internal use only */ IntervalObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var period = this.period;
        var scheduler = this.scheduler;
        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
            index: index, subscriber: subscriber, period: period
        }));
    };
    return IntervalObservable;
}(Observable_1.Observable));
exports.IntervalObservable = IntervalObservable;
//# sourceMappingURL=IntervalObservable.js.map

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(10);
var Observable_1 = __webpack_require__(0);
var iterator_1 = __webpack_require__(24);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IteratorObservable = (function (_super) {
    __extends(IteratorObservable, _super);
    function IteratorObservable(iterator, scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
        if (iterator == null) {
            throw new Error('iterator cannot be null.');
        }
        this.iterator = getIterator(iterator);
    }
    IteratorObservable.create = function (iterator, scheduler) {
        return new IteratorObservable(iterator, scheduler);
    };
    IteratorObservable.dispatch = function (state) {
        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;
        if (hasError) {
            subscriber.error(state.error);
            return;
        }
        var result = iterator.next();
        if (result.done) {
            subscriber.complete();
            return;
        }
        subscriber.next(result.value);
        state.index = index + 1;
        if (subscriber.closed) {
            if (typeof iterator.return === 'function') {
                iterator.return();
            }
            return;
        }
        this.schedule(state);
    };
    /** @deprecated internal use only */ IteratorObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;
        if (scheduler) {
            return scheduler.schedule(IteratorObservable.dispatch, 0, {
                index: index, iterator: iterator, subscriber: subscriber
            });
        }
        else {
            do {
                var result = iterator.next();
                if (result.done) {
                    subscriber.complete();
                    break;
                }
                else {
                    subscriber.next(result.value);
                }
                if (subscriber.closed) {
                    if (typeof iterator.return === 'function') {
                        iterator.return();
                    }
                    break;
                }
            } while (true);
        }
    };
    return IteratorObservable;
}(Observable_1.Observable));
exports.IteratorObservable = IteratorObservable;
var StringIterator = (function () {
    function StringIterator(str, idx, len) {
        if (idx === void 0) { idx = 0; }
        if (len === void 0) { len = str.length; }
        this.str = str;
        this.idx = idx;
        this.len = len;
    }
    StringIterator.prototype[iterator_1.iterator] = function () { return (this); };
    StringIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.str.charAt(this.idx++)
        } : {
            done: true,
            value: undefined
        };
    };
    return StringIterator;
}());
var ArrayIterator = (function () {
    function ArrayIterator(arr, idx, len) {
        if (idx === void 0) { idx = 0; }
        if (len === void 0) { len = toLength(arr); }
        this.arr = arr;
        this.idx = idx;
        this.len = len;
    }
    ArrayIterator.prototype[iterator_1.iterator] = function () { return this; };
    ArrayIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.arr[this.idx++]
        } : {
            done: true,
            value: undefined
        };
    };
    return ArrayIterator;
}());
function getIterator(obj) {
    var i = obj[iterator_1.iterator];
    if (!i && typeof obj === 'string') {
        return new StringIterator(obj);
    }
    if (!i && obj.length !== undefined) {
        return new ArrayIterator(obj);
    }
    if (!i) {
        throw new TypeError('object is not iterable');
    }
    return obj[iterator_1.iterator]();
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) {
        return 0;
    }
    if (len === 0 || !numberIsFinite(len)) {
        return len;
    }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) {
        return 0;
    }
    if (len > maxSafeInteger) {
        return maxSafeInteger;
    }
    return len;
}
function numberIsFinite(value) {
    return typeof value === 'number' && root_1.root.isFinite(value);
}
function sign(value) {
    var valueAsNumber = +value;
    if (valueAsNumber === 0) {
        return valueAsNumber;
    }
    if (isNaN(valueAsNumber)) {
        return valueAsNumber;
    }
    return valueAsNumber < 0 ? -1 : 1;
}
//# sourceMappingURL=IteratorObservable.js.map

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var noop_1 = __webpack_require__(58);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var NeverObservable = (function (_super) {
    __extends(NeverObservable, _super);
    function NeverObservable() {
        _super.call(this);
    }
    /**
     * Creates an Observable that emits no items to the Observer.
     *
     * <span class="informal">An Observable that never emits anything.</span>
     *
     * <img src="./img/never.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that emits
     * neither values nor errors nor the completion notification. It can be used
     * for testing purposes or for composing with other Observables. Please note
     * that by never emitting a complete notification, this Observable keeps the
     * subscription from being disposed automatically. Subscriptions need to be
     * manually disposed.
     *
     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>
     * function info() {
     *   console.log('Will not be called');
     * }
     * var result = Rx.Observable.never().startWith(7);
     * result.subscribe(x => console.log(x), info, info);
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link of}
     * @see {@link throw}
     *
     * @return {Observable} A "never" Observable: never emits anything.
     * @static true
     * @name never
     * @owner Observable
     */
    NeverObservable.create = function () {
        return new NeverObservable();
    };
    /** @deprecated internal use only */ NeverObservable.prototype._subscribe = function (subscriber) {
        noop_1.noop();
    };
    return NeverObservable;
}(Observable_1.Observable));
exports.NeverObservable = NeverObservable;
//# sourceMappingURL=NeverObservable.js.map

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
function dispatch(state) {
    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;
    if (index === length) {
        subscriber.complete();
        return;
    }
    var key = keys[index];
    subscriber.next([key, obj[key]]);
    state.index = index + 1;
    this.schedule(state);
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var PairsObservable = (function (_super) {
    __extends(PairsObservable, _super);
    function PairsObservable(obj, scheduler) {
        _super.call(this);
        this.obj = obj;
        this.scheduler = scheduler;
        this.keys = Object.keys(obj);
    }
    /**
     * Convert an object into an observable sequence of [key, value] pairs
     * using an optional IScheduler to enumerate the object.
     *
     * @example <caption>Converts a javascript object to an Observable</caption>
     * var obj = {
     *   foo: 42,
     *   bar: 56,
     *   baz: 78
     * };
     *
     * var source = Rx.Observable.pairs(obj);
     *
     * var subscription = source.subscribe(
     *   function (x) {
     *     console.log('Next: %s', x);
     *   },
     *   function (err) {
     *     console.log('Error: %s', err);
     *   },
     *   function () {
     *     console.log('Completed');
     *   });
     *
     * @param {Object} obj The object to inspect and turn into an
     * Observable sequence.
     * @param {Scheduler} [scheduler] An optional IScheduler to run the
     * enumeration of the input sequence on.
     * @returns {(Observable<Array<string | T>>)} An observable sequence of
     * [key, value] pairs from the object.
     */
    PairsObservable.create = function (obj, scheduler) {
        return new PairsObservable(obj, scheduler);
    };
    /** @deprecated internal use only */ PairsObservable.prototype._subscribe = function (subscriber) {
        var _a = this, keys = _a.keys, scheduler = _a.scheduler;
        var length = keys.length;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber
            });
        }
        else {
            for (var idx = 0; idx < length; idx++) {
                var key = keys[idx];
                subscriber.next([key, this.obj[key]]);
            }
            subscriber.complete();
        }
    };
    return PairsObservable;
}(Observable_1.Observable));
exports.PairsObservable = PairsObservable;
//# sourceMappingURL=PairsObservable.js.map

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var RangeObservable = (function (_super) {
    __extends(RangeObservable, _super);
    function RangeObservable(start, count, scheduler) {
        _super.call(this);
        this.start = start;
        this._count = count;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits a sequence of numbers within a specified
     * range.
     *
     * <span class="informal">Emits a sequence of numbers in a range.</span>
     *
     * <img src="./img/range.png" width="100%">
     *
     * `range` operator emits a range of sequential integers, in order, where you
     * select the `start` of the range and its `length`. By default, uses no
     * IScheduler and just delivers the notifications synchronously, but may use
     * an optional IScheduler to regulate those deliveries.
     *
     * @example <caption>Emits the numbers 1 to 10</caption>
     * var numbers = Rx.Observable.range(1, 10);
     * numbers.subscribe(x => console.log(x));
     *
     * @see {@link timer}
     * @see {@link interval}
     *
     * @param {number} [start=0] The value of the first integer in the sequence.
     * @param {number} [count=0] The number of sequential integers to generate.
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emissions of the notifications.
     * @return {Observable} An Observable of numbers that emits a finite range of
     * sequential integers.
     * @static true
     * @name range
     * @owner Observable
     */
    RangeObservable.create = function (start, count, scheduler) {
        if (start === void 0) { start = 0; }
        if (count === void 0) { count = 0; }
        return new RangeObservable(start, count, scheduler);
    };
    RangeObservable.dispatch = function (state) {
        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(start);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        state.start = start + 1;
        this.schedule(state);
    };
    /** @deprecated internal use only */ RangeObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var start = this.start;
        var count = this._count;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(RangeObservable.dispatch, 0, {
                index: index, count: count, start: start, subscriber: subscriber
            });
        }
        else {
            do {
                if (index++ >= count) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(start++);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
    };
    return RangeObservable;
}(Observable_1.Observable));
exports.RangeObservable = RangeObservable;
//# sourceMappingURL=RangeObservable.js.map

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var asap_1 = __webpack_require__(155);
var isNumeric_1 = __webpack_require__(26);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var SubscribeOnObservable = (function (_super) {
    __extends(SubscribeOnObservable, _super);
    function SubscribeOnObservable(source, delayTime, scheduler) {
        if (delayTime === void 0) { delayTime = 0; }
        if (scheduler === void 0) { scheduler = asap_1.asap; }
        _super.call(this);
        this.source = source;
        this.delayTime = delayTime;
        this.scheduler = scheduler;
        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
            this.delayTime = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            this.scheduler = asap_1.asap;
        }
    }
    SubscribeOnObservable.create = function (source, delay, scheduler) {
        if (delay === void 0) { delay = 0; }
        if (scheduler === void 0) { scheduler = asap_1.asap; }
        return new SubscribeOnObservable(source, delay, scheduler);
    };
    SubscribeOnObservable.dispatch = function (arg) {
        var source = arg.source, subscriber = arg.subscriber;
        return this.add(source.subscribe(subscriber));
    };
    /** @deprecated internal use only */ SubscribeOnObservable.prototype._subscribe = function (subscriber) {
        var delay = this.delayTime;
        var source = this.source;
        var scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source: source, subscriber: subscriber
        });
    };
    return SubscribeOnObservable;
}(Observable_1.Observable));
exports.SubscribeOnObservable = SubscribeOnObservable;
//# sourceMappingURL=SubscribeOnObservable.js.map

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isNumeric_1 = __webpack_require__(26);
var Observable_1 = __webpack_require__(0);
var async_1 = __webpack_require__(4);
var isScheduler_1 = __webpack_require__(11);
var isDate_1 = __webpack_require__(40);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var TimerObservable = (function (_super) {
    __extends(TimerObservable, _super);
    function TimerObservable(dueTime, period, scheduler) {
        if (dueTime === void 0) { dueTime = 0; }
        _super.call(this);
        this.period = -1;
        this.dueTime = 0;
        if (isNumeric_1.isNumeric(period)) {
            this.period = Number(period) < 1 && 1 || Number(period);
        }
        else if (isScheduler_1.isScheduler(period)) {
            scheduler = period;
        }
        if (!isScheduler_1.isScheduler(scheduler)) {
            scheduler = async_1.async;
        }
        this.scheduler = scheduler;
        this.dueTime = isDate_1.isDate(dueTime) ?
            (+dueTime - this.scheduler.now()) :
            dueTime;
    }
    /**
     * Creates an Observable that starts emitting after an `initialDelay` and
     * emits ever increasing numbers after each `period` of time thereafter.
     *
     * <span class="informal">Its like {@link interval}, but you can specify when
     * should the emissions start.</span>
     *
     * <img src="./img/timer.png" width="100%">
     *
     * `timer` returns an Observable that emits an infinite sequence of ascending
     * integers, with a constant interval of time, `period` of your choosing
     * between those emissions. The first emission happens after the specified
     * `initialDelay`. The initial delay may be a {@link Date}. By default, this
     * operator uses the `async` IScheduler to provide a notion of time, but you
     * may pass any IScheduler to it. If `period` is not specified, the output
     * Observable emits only one value, `0`. Otherwise, it emits an infinite
     * sequence.
     *
     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
     * var numbers = Rx.Observable.timer(3000, 1000);
     * numbers.subscribe(x => console.log(x));
     *
     * @example <caption>Emits one number after five seconds</caption>
     * var numbers = Rx.Observable.timer(5000);
     * numbers.subscribe(x => console.log(x));
     *
     * @see {@link interval}
     * @see {@link delay}
     *
     * @param {number|Date} initialDelay The initial delay time to wait before
     * emitting the first value of `0`.
     * @param {number} [period] The period of time between emissions of the
     * subsequent numbers.
     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
     * the emission of values, and providing a notion of "time".
     * @return {Observable} An Observable that emits a `0` after the
     * `initialDelay` and ever increasing numbers after each `period` of time
     * thereafter.
     * @static true
     * @name timer
     * @owner Observable
     */
    TimerObservable.create = function (initialDelay, period, scheduler) {
        if (initialDelay === void 0) { initialDelay = 0; }
        return new TimerObservable(initialDelay, period, scheduler);
    };
    TimerObservable.dispatch = function (state) {
        var index = state.index, period = state.period, subscriber = state.subscriber;
        var action = this;
        subscriber.next(index);
        if (subscriber.closed) {
            return;
        }
        else if (period === -1) {
            return subscriber.complete();
        }
        state.index = index + 1;
        action.schedule(state, period);
    };
    /** @deprecated internal use only */ TimerObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;
        return scheduler.schedule(TimerObservable.dispatch, dueTime, {
            index: index, period: period, subscriber: subscriber
        });
    };
    return TimerObservable;
}(Observable_1.Observable));
exports.TimerObservable = TimerObservable;
//# sourceMappingURL=TimerObservable.js.map

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var subscribeToResult_1 = __webpack_require__(3);
var OuterSubscriber_1 = __webpack_require__(2);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var UsingObservable = (function (_super) {
    __extends(UsingObservable, _super);
    function UsingObservable(resourceFactory, observableFactory) {
        _super.call(this);
        this.resourceFactory = resourceFactory;
        this.observableFactory = observableFactory;
    }
    UsingObservable.create = function (resourceFactory, observableFactory) {
        return new UsingObservable(resourceFactory, observableFactory);
    };
    /** @deprecated internal use only */ UsingObservable.prototype._subscribe = function (subscriber) {
        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;
        var resource;
        try {
            resource = resourceFactory();
            return new UsingSubscriber(subscriber, resource, observableFactory);
        }
        catch (err) {
            subscriber.error(err);
        }
    };
    return UsingObservable;
}(Observable_1.Observable));
exports.UsingObservable = UsingObservable;
var UsingSubscriber = (function (_super) {
    __extends(UsingSubscriber, _super);
    function UsingSubscriber(destination, resource, observableFactory) {
        _super.call(this, destination);
        this.resource = resource;
        this.observableFactory = observableFactory;
        destination.add(resource);
        this.tryUse();
    }
    UsingSubscriber.prototype.tryUse = function () {
        try {
            var source = this.observableFactory.call(this, this.resource);
            if (source) {
                this.add(subscribeToResult_1.subscribeToResult(this, source));
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    return UsingSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=UsingObservable.js.map

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var BoundCallbackObservable_1 = __webpack_require__(314);
exports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;
//# sourceMappingURL=bindCallback.js.map

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var BoundNodeCallbackObservable_1 = __webpack_require__(315);
exports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;
//# sourceMappingURL=bindNodeCallback.js.map

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isScheduler_1 = __webpack_require__(11);
var isArray_1 = __webpack_require__(12);
var ArrayObservable_1 = __webpack_require__(13);
var combineLatest_1 = __webpack_require__(31);
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from all the Observables passed as
 * arguments. This is done by subscribing to each Observable in order and,
 * whenever any Observable emits, collecting an array of the most recent
 * values from each Observable. So if you pass `n` Observables to operator,
 * returned Observable will always emit an array of `n` values, in order
 * corresponding to order of passed Observables (value from the first Observable
 * on the first place and so on).
 *
 * Static version of `combineLatest` accepts either an array of Observables
 * or each Observable can be put directly as an argument. Note that array of
 * Observables is good choice, if you don't know beforehand how many Observables
 * you will combine. Passing empty array will result in Observable that
 * completes immediately.
 *
 * To ensure output array has always the same length, `combineLatest` will
 * actually wait for all input Observables to emit at least once,
 * before it starts emitting results. This means if some Observable emits
 * values before other Observables started emitting, all that values but last
 * will be lost. On the other hand, is some Observable does not emit value but
 * completes, resulting Observable will complete at the same moment without
 * emitting anything, since it will be now impossible to include value from
 * completed Observable in resulting array. Also, if some input Observable does
 * not emit any value and never completes, `combineLatest` will also never emit
 * and never complete, since, again, it will wait for all streams to emit some
 * value.
 *
 * If at least one Observable was passed to `combineLatest` and all passed Observables
 * emitted something, resulting Observable will complete when all combined
 * streams complete. So even if some Observable completes, result of
 * `combineLatest` will still emit values when other Observables do. In case
 * of completed Observable, its value from now on will always be the last
 * emitted value. On the other hand, if any Observable errors, `combineLatest`
 * will error immediately as well, and all other Observables will be unsubscribed.
 *
 * `combineLatest` accepts as optional parameter `project` function, which takes
 * as arguments all values that would normally be emitted by resulting Observable.
 * `project` can return any kind of value, which will be then emitted by Observable
 * instead of default array. Note that `project` does not take as argument that array
 * of values, but values themselves. That means default `project` can be imagined
 * as function that takes all its arguments and puts them into an array.
 *
 *
 * @example <caption>Combine two timer Observables</caption>
 * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now
 * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now
 * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);
 * combinedTimers.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0] after 0.5s
 * // [1, 0] after 1s
 * // [1, 1] after 1.5s
 * // [2, 1] after 2s
 *
 *
 * @example <caption>Combine an array of Observables</caption>
 * const observables = [1, 5, 10].map(
 *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds
 * );
 * const combined = Rx.Observable.combineLatest(observables);
 * combined.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0, 0] immediately
 * // [1, 0, 0] after 1s
 * // [1, 5, 0] after 5s
 * // [1, 5, 10] after 10s
 *
 *
 * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {ObservableInput} observable1 An input Observable to combine with other Observables.
 * @param {ObservableInput} observable2 An input Observable to combine with other Observables.
 * More than one input Observables may be given as arguments
 * or an array of Observables may be given as the first argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each input Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @static true
 * @name combineLatest
 * @owner Observable
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var project = null;
    var scheduler = null;
    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        project = observables.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
        observables = observables[0];
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));
}
exports.combineLatest = combineLatest;
//# sourceMappingURL=combineLatest.js.map

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DeferObservable_1 = __webpack_require__(316);
exports.defer = DeferObservable_1.DeferObservable.create;
//# sourceMappingURL=defer.js.map

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var Subscriber_1 = __webpack_require__(1);
var Observable_1 = __webpack_require__(0);
var Subscription_1 = __webpack_require__(5);
var root_1 = __webpack_require__(10);
var ReplaySubject_1 = __webpack_require__(29);
var tryCatch_1 = __webpack_require__(9);
var errorObject_1 = __webpack_require__(7);
var assign_1 = __webpack_require__(472);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var WebSocketSubject = (function (_super) {
    __extends(WebSocketSubject, _super);
    function WebSocketSubject(urlConfigOrSource, destination) {
        if (urlConfigOrSource instanceof Observable_1.Observable) {
            _super.call(this, destination, urlConfigOrSource);
        }
        else {
            _super.call(this);
            this.WebSocketCtor = root_1.root.WebSocket;
            this._output = new Subject_1.Subject();
            if (typeof urlConfigOrSource === 'string') {
                this.url = urlConfigOrSource;
            }
            else {
                // WARNING: config object could override important members here.
                assign_1.assign(this, urlConfigOrSource);
            }
            if (!this.WebSocketCtor) {
                throw new Error('no WebSocket constructor can be found');
            }
            this.destination = new ReplaySubject_1.ReplaySubject();
        }
    }
    WebSocketSubject.prototype.resultSelector = function (e) {
        return JSON.parse(e.data);
    };
    /**
     * Wrapper around the w3c-compatible WebSocket object provided by the browser.
     *
     * @example <caption>Wraps browser WebSocket</caption>
     *
     * let socket$ = Observable.webSocket('ws://localhost:8081');
     *
     * socket$.subscribe(
     *    (msg) => console.log('message received: ' + msg),
     *    (err) => console.log(err),
     *    () => console.log('complete')
     *  );
     *
     * socket$.next(JSON.stringify({ op: 'hello' }));
     *
     * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>
     *
     * import { w3cwebsocket } from 'websocket';
     *
     * let socket$ = Observable.webSocket({
     *   url: 'ws://localhost:8081',
     *   WebSocketCtor: w3cwebsocket
     * });
     *
     * socket$.subscribe(
     *    (msg) => console.log('message received: ' + msg),
     *    (err) => console.log(err),
     *    () => console.log('complete')
     *  );
     *
     * socket$.next(JSON.stringify({ op: 'hello' }));
     *
     * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object
     * @return {WebSocketSubject}
     * @static true
     * @name webSocket
     * @owner Observable
     */
    WebSocketSubject.create = function (urlConfigOrSource) {
        return new WebSocketSubject(urlConfigOrSource);
    };
    WebSocketSubject.prototype.lift = function (operator) {
        var sock = new WebSocketSubject(this, this.destination);
        sock.operator = operator;
        return sock;
    };
    WebSocketSubject.prototype._resetState = function () {
        this.socket = null;
        if (!this.source) {
            this.destination = new ReplaySubject_1.ReplaySubject();
        }
        this._output = new Subject_1.Subject();
    };
    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures
    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {
        var self = this;
        return new Observable_1.Observable(function (observer) {
            var result = tryCatch_1.tryCatch(subMsg)();
            if (result === errorObject_1.errorObject) {
                observer.error(errorObject_1.errorObject.e);
            }
            else {
                self.next(result);
            }
            var subscription = self.subscribe(function (x) {
                var result = tryCatch_1.tryCatch(messageFilter)(x);
                if (result === errorObject_1.errorObject) {
                    observer.error(errorObject_1.errorObject.e);
                }
                else if (result) {
                    observer.next(x);
                }
            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });
            return function () {
                var result = tryCatch_1.tryCatch(unsubMsg)();
                if (result === errorObject_1.errorObject) {
                    observer.error(errorObject_1.errorObject.e);
                }
                else {
                    self.next(result);
                }
                subscription.unsubscribe();
            };
        });
    };
    WebSocketSubject.prototype._connectSocket = function () {
        var _this = this;
        var WebSocketCtor = this.WebSocketCtor;
        var observer = this._output;
        var socket = null;
        try {
            socket = this.protocol ?
                new WebSocketCtor(this.url, this.protocol) :
                new WebSocketCtor(this.url);
            this.socket = socket;
            if (this.binaryType) {
                this.socket.binaryType = this.binaryType;
            }
        }
        catch (e) {
            observer.error(e);
            return;
        }
        var subscription = new Subscription_1.Subscription(function () {
            _this.socket = null;
            if (socket && socket.readyState === 1) {
                socket.close();
            }
        });
        socket.onopen = function (e) {
            var openObserver = _this.openObserver;
            if (openObserver) {
                openObserver.next(e);
            }
            var queue = _this.destination;
            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {
                var closingObserver = _this.closingObserver;
                if (closingObserver) {
                    closingObserver.next(undefined);
                }
                if (e && e.code) {
                    socket.close(e.code, e.reason);
                }
                else {
                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +
                        'and an optional reason: { code: number, reason: string }'));
                }
                _this._resetState();
            }, function () {
                var closingObserver = _this.closingObserver;
                if (closingObserver) {
                    closingObserver.next(undefined);
                }
                socket.close();
                _this._resetState();
            });
            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {
                subscription.add(queue.subscribe(_this.destination));
            }
        };
        socket.onerror = function (e) {
            _this._resetState();
            observer.error(e);
        };
        socket.onclose = function (e) {
            _this._resetState();
            var closeObserver = _this.closeObserver;
            if (closeObserver) {
                closeObserver.next(e);
            }
            if (e.wasClean) {
                observer.complete();
            }
            else {
                observer.error(e);
            }
        };
        socket.onmessage = function (e) {
            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);
            if (result === errorObject_1.errorObject) {
                observer.error(errorObject_1.errorObject.e);
            }
            else {
                observer.next(result);
            }
        };
    };
    /** @deprecated internal use only */ WebSocketSubject.prototype._subscribe = function (subscriber) {
        var _this = this;
        var source = this.source;
        if (source) {
            return source.subscribe(subscriber);
        }
        if (!this.socket) {
            this._connectSocket();
        }
        var subscription = new Subscription_1.Subscription();
        subscription.add(this._output.subscribe(subscriber));
        subscription.add(function () {
            var socket = _this.socket;
            if (_this._output.observers.length === 0) {
                if (socket && socket.readyState === 1) {
                    socket.close();
                }
                _this._resetState();
            }
        });
        return subscription;
    };
    WebSocketSubject.prototype.unsubscribe = function () {
        var _a = this, source = _a.source, socket = _a.socket;
        if (socket && socket.readyState === 1) {
            socket.close();
            this._resetState();
        }
        _super.prototype.unsubscribe.call(this);
        if (!source) {
            this.destination = new ReplaySubject_1.ReplaySubject();
        }
    };
    return WebSocketSubject;
}(Subject_1.AnonymousSubject));
exports.WebSocketSubject = WebSocketSubject;
//# sourceMappingURL=WebSocketSubject.js.map

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AjaxObservable_1 = __webpack_require__(71);
exports.ajax = AjaxObservable_1.AjaxObservable.create;
//# sourceMappingURL=ajax.js.map

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var WebSocketSubject_1 = __webpack_require__(335);
exports.webSocket = WebSocketSubject_1.WebSocketSubject.create;
//# sourceMappingURL=webSocket.js.map

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var EmptyObservable_1 = __webpack_require__(14);
exports.empty = EmptyObservable_1.EmptyObservable.create;
//# sourceMappingURL=empty.js.map

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ForkJoinObservable_1 = __webpack_require__(318);
exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
//# sourceMappingURL=forkJoin.js.map

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FromEventObservable_1 = __webpack_require__(319);
exports.fromEvent = FromEventObservable_1.FromEventObservable.create;
//# sourceMappingURL=fromEvent.js.map

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FromEventPatternObservable_1 = __webpack_require__(320);
exports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;
//# sourceMappingURL=fromEventPattern.js.map

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var PromiseObservable_1 = __webpack_require__(70);
exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
//# sourceMappingURL=fromPromise.js.map

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var GenerateObservable_1 = __webpack_require__(321);
exports.generate = GenerateObservable_1.GenerateObservable.create;
//# sourceMappingURL=generate.js.map

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IfObservable_1 = __webpack_require__(322);
exports._if = IfObservable_1.IfObservable.create;
//# sourceMappingURL=if.js.map

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IntervalObservable_1 = __webpack_require__(323);
exports.interval = IntervalObservable_1.IntervalObservable.create;
//# sourceMappingURL=interval.js.map

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var NeverObservable_1 = __webpack_require__(325);
exports.never = NeverObservable_1.NeverObservable.create;
//# sourceMappingURL=never.js.map

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var onErrorResumeNext_1 = __webpack_require__(52);
exports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var PairsObservable_1 = __webpack_require__(326);
exports.pairs = PairsObservable_1.PairsObservable.create;
//# sourceMappingURL=pairs.js.map

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var RangeObservable_1 = __webpack_require__(327);
exports.range = RangeObservable_1.RangeObservable.create;
//# sourceMappingURL=range.js.map

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ErrorObservable_1 = __webpack_require__(317);
exports._throw = ErrorObservable_1.ErrorObservable.create;
//# sourceMappingURL=throw.js.map

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var UsingObservable_1 = __webpack_require__(330);
exports.using = UsingObservable_1.UsingObservable.create;
//# sourceMappingURL=using.js.map

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var zip_1 = __webpack_require__(35);
exports.zip = zip_1.zipStatic;
//# sourceMappingURL=zip.js.map

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var audit_1 = __webpack_require__(45);
/**
 * Ignores source values for a duration determined by another Observable, then
 * emits the most recent value from the source Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link auditTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/audit.png" width="100%">
 *
 * `audit` is similar to `throttle`, but emits the last value from the silenced
 * time window, instead of the first value. `audit` emits the most recent value
 * from the source Observable on the output Observable as soon as its internal
 * timer becomes disabled, and ignores source values while the timer is enabled.
 * Initially, the timer is disabled. As soon as the first source value arrives,
 * the timer is enabled by calling the `durationSelector` function with the
 * source value, which returns the "duration" Observable. When the duration
 * Observable emits a value or completes, the timer is disabled, then the most
 * recent source value is emitted on the output Observable, and this process
 * repeats for the next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.audit(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration, returned as an Observable or a Promise.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method audit
 * @owner Observable
 */
function audit(durationSelector) {
    return audit_1.audit(durationSelector)(this);
}
exports.audit = audit;
//# sourceMappingURL=audit.js.map

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var auditTime_1 = __webpack_require__(76);
/**
 * Ignores source values for `duration` milliseconds, then emits the most recent
 * value from the source Observable, then repeats this process.
 *
 * <span class="informal">When it sees a source values, it ignores that plus
 * the next ones for `duration` milliseconds, and then it emits the most recent
 * value from the source.</span>
 *
 * <img src="./img/auditTime.png" width="100%">
 *
 * `auditTime` is similar to `throttleTime`, but emits the last value from the
 * silenced time window, instead of the first value. `auditTime` emits the most
 * recent value from the source Observable on the output Observable as soon as
 * its internal timer becomes disabled, and ignores source values while the
 * timer is enabled. Initially, the timer is disabled. As soon as the first
 * source value arrives, the timer is enabled. After `duration` milliseconds (or
 * the time unit determined internally by the optional `scheduler`) has passed,
 * the timer is disabled, then the most recent source value is emitted on the
 * output Observable, and this process repeats for the next source value.
 * Optionally takes a {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.auditTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} duration Time to wait before emitting the most recent source
 * value, measured in milliseconds or the time unit determined internally
 * by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the rate-limiting behavior.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method auditTime
 * @owner Observable
 */
function auditTime(duration, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return auditTime_1.auditTime(duration, scheduler)(this);
}
exports.auditTime = auditTime;
//# sourceMappingURL=auditTime.js.map

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var buffer_1 = __webpack_require__(77);
/**
 * Buffers the source Observable values until `closingNotifier` emits.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when another Observable emits.</span>
 *
 * <img src="./img/buffer.png" width="100%">
 *
 * Buffers the incoming Observable values until the given `closingNotifier`
 * Observable emits a value, at which point it emits the buffer on the output
 * Observable and starts a new buffer internally, awaiting the next time
 * `closingNotifier` emits.
 *
 * @example <caption>On every click, emit array of most recent interval events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var buffered = interval.buffer(clicks);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link window}
 *
 * @param {Observable<any>} closingNotifier An Observable that signals the
 * buffer to be emitted on the output Observable.
 * @return {Observable<T[]>} An Observable of buffers, which are arrays of
 * values.
 * @method buffer
 * @owner Observable
 */
function buffer(closingNotifier) {
    return buffer_1.buffer(closingNotifier)(this);
}
exports.buffer = buffer;
//# sourceMappingURL=buffer.js.map

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var bufferCount_1 = __webpack_require__(78);
/**
 * Buffers the source Observable values until the size hits the maximum
 * `bufferSize` given.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when its size reaches `bufferSize`.</span>
 *
 * <img src="./img/bufferCount.png" width="100%">
 *
 * Buffers a number of values from the source Observable by `bufferSize` then
 * emits the buffer and clears it, and starts a new buffer each
 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
 * `null`, then new buffers are started immediately at the start of the source
 * and when each buffer closes and is emitted.
 *
 * @example <caption>Emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>On every click, emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2, 1);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link pairwise}
 * @see {@link windowCount}
 *
 * @param {number} bufferSize The maximum size of the buffer emitted.
 * @param {number} [startBufferEvery] Interval at which to start a new buffer.
 * For example if `startBufferEvery` is `2`, then a new buffer will be started
 * on every other value from the source. A new buffer is started at the
 * beginning of the source by default.
 * @return {Observable<T[]>} An Observable of arrays of buffered values.
 * @method bufferCount
 * @owner Observable
 */
function bufferCount(bufferSize, startBufferEvery) {
    if (startBufferEvery === void 0) { startBufferEvery = null; }
    return bufferCount_1.bufferCount(bufferSize, startBufferEvery)(this);
}
exports.bufferCount = bufferCount;
//# sourceMappingURL=bufferCount.js.map

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var isScheduler_1 = __webpack_require__(11);
var bufferTime_1 = __webpack_require__(79);
/* tslint:enable:max-line-length */
/**
 * Buffers the source Observable values for a specific time period.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * those arrays periodically in time.</span>
 *
 * <img src="./img/bufferTime.png" width="100%">
 *
 * Buffers values from the source for a specific time duration `bufferTimeSpan`.
 * Unless the optional argument `bufferCreationInterval` is given, it emits and
 * resets the buffer every `bufferTimeSpan` milliseconds. If
 * `bufferCreationInterval` is given, this operator opens the buffer every
 * `bufferCreationInterval` milliseconds and closes (emits and resets) the
 * buffer every `bufferTimeSpan` milliseconds. When the optional argument
 * `maxBufferSize` is specified, the buffer will be closed either after
 * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.
 *
 * @example <caption>Every second, emit an array of the recent click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(1000);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(2000, 5000);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link windowTime}
 *
 * @param {number} bufferTimeSpan The amount of time to fill each buffer array.
 * @param {number} [bufferCreationInterval] The interval at which to start new
 * buffers.
 * @param {number} [maxBufferSize] The maximum buffer size.
 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
 * intervals that determine buffer boundaries.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferTime
 * @owner Observable
 */
function bufferTime(bufferTimeSpan) {
    var length = arguments.length;
    var scheduler = async_1.async;
    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {
        scheduler = arguments[arguments.length - 1];
        length--;
    }
    var bufferCreationInterval = null;
    if (length >= 2) {
        bufferCreationInterval = arguments[1];
    }
    var maxBufferSize = Number.POSITIVE_INFINITY;
    if (length >= 3) {
        maxBufferSize = arguments[2];
    }
    return bufferTime_1.bufferTime(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this);
}
exports.bufferTime = bufferTime;
//# sourceMappingURL=bufferTime.js.map

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var bufferToggle_1 = __webpack_require__(80);
/**
 * Buffers the source Observable values starting from an emission from
 * `openings` and ending when the output of `closingSelector` emits.
 *
 * <span class="informal">Collects values from the past as an array. Starts
 * collecting only when `opening` emits, and calls the `closingSelector`
 * function to get an Observable that tells when to close the buffer.</span>
 *
 * <img src="./img/bufferToggle.png" width="100%">
 *
 * Buffers values from the source by opening the buffer via signals from an
 * Observable provided to `openings`, and closing and sending the buffers when
 * a Subscribable or Promise returned by the `closingSelector` function emits.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var buffered = clicks.bufferToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferWhen}
 * @see {@link windowToggle}
 *
 * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new
 * buffers.
 * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns a Subscribable or Promise,
 * which, when it emits, signals that the associated buffer should be emitted
 * and cleared.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferToggle
 * @owner Observable
 */
function bufferToggle(openings, closingSelector) {
    return bufferToggle_1.bufferToggle(openings, closingSelector)(this);
}
exports.bufferToggle = bufferToggle;
//# sourceMappingURL=bufferToggle.js.map

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var bufferWhen_1 = __webpack_require__(81);
/**
 * Buffers the source Observable values, using a factory function of closing
 * Observables to determine when to close, emit, and reset the buffer.
 *
 * <span class="informal">Collects values from the past as an array. When it
 * starts collecting values, it calls a function that returns an Observable that
 * tells when to close the buffer and restart collecting.</span>
 *
 * <img src="./img/bufferWhen.png" width="100%">
 *
 * Opens a buffer immediately, then closes the buffer when the observable
 * returned by calling `closingSelector` function emits a value. When it closes
 * the buffer, it immediately opens a new buffer and repeats the process.
 *
 * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferWhen(() =>
 *   Rx.Observable.interval(1000 + Math.random() * 4000)
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link windowWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals buffer closure.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferWhen
 * @owner Observable
 */
function bufferWhen(closingSelector) {
    return bufferWhen_1.bufferWhen(closingSelector)(this);
}
exports.bufferWhen = bufferWhen;
//# sourceMappingURL=bufferWhen.js.map

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var catchError_1 = __webpack_require__(82);
/**
 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
 *
 * <img src="./img/catch.png" width="100%">
 *
 * @example <caption>Continues with a different Observable when there's an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n == 4) {
 * 	     throw 'four!';
 *     }
 *	   return n;
 *   })
 *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, I, II, III, IV, V
 *
 * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n === 4) {
 * 	     throw 'four!';
 *     }
 * 	   return n;
 *   })
 *   .catch((err, caught) => caught)
 *   .take(30)
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, 1, 2, 3, ...
 *
 * @example <caption>Throws a new error when the source Observable throws an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 *     if (n == 4) {
 *       throw 'four!';
 *     }
 *     return n;
 *   })
 *   .catch(err => {
 *     throw 'error in source. Details: ' + err;
 *   })
 *   .subscribe(
 *     x => console.log(x),
 *     err => console.log(err)
 *   );
 *   // 1, 2, 3, error in source. Details: four!
 *
 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
 *  is returned by the `selector` will be used to continue the observable chain.
 * @return {Observable} An observable that originates from either the source or the observable returned by the
 *  catch `selector` function.
 * @method catch
 * @name catch
 * @owner Observable
 */
function _catch(selector) {
    return catchError_1.catchError(selector)(this);
}
exports._catch = _catch;
//# sourceMappingURL=catch.js.map

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var combineAll_1 = __webpack_require__(83);
/**
 * Converts a higher-order Observable into a first-order Observable by waiting
 * for the outer Observable to complete, then applying {@link combineLatest}.
 *
 * <span class="informal">Flattens an Observable-of-Observables by applying
 * {@link combineLatest} when the Observable-of-Observables completes.</span>
 *
 * <img src="./img/combineAll.png" width="100%">
 *
 * Takes an Observable of Observables, and collects all Observables from it.
 * Once the outer Observable completes, it subscribes to all collected
 * Observables and combines their values using the {@link combineLatest}
 * strategy, such that:
 * - Every time an inner Observable emits, the output Observable emits.
 * - When the returned observable emits, it emits all of the latest values by:
 *   - If a `project` function is provided, it is called with each recent value
 *     from each inner Observable in whatever order they arrived, and the result
 *     of the `project` function is what is emitted by the output Observable.
 *   - If there is no `project` function, an array of all of the most recent
 *     values is emitted by the output Observable.
 *
 * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev =>
 *   Rx.Observable.interval(Math.random()*2000).take(3)
 * ).take(2);
 * var result = higherOrder.combineAll();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineLatest}
 * @see {@link mergeAll}
 *
 * @param {function} [project] An optional function to map the most recent
 * values from each inner Observable into a new result. Takes each of the most
 * recent values from each collected inner Observable as arguments, in order.
 * @return {Observable} An Observable of projected results or arrays of recent
 * values.
 * @method combineAll
 * @owner Observable
 */
function combineAll(project) {
    return combineAll_1.combineAll(project)(this);
}
exports.combineAll = combineAll;
//# sourceMappingURL=combineAll.js.map

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var combineLatest_1 = __webpack_require__(31);
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from this Observable with values from
 * Observables passed as arguments. This is done by subscribing to each
 * Observable, in order, and collecting an array of each of the most recent
 * values any time any of the input Observables emits, then either taking that
 * array and passing it as arguments to an optional `project` function and
 * emitting the return value of that, or just emitting the array of recent
 * values directly if there is no `project` function.
 *
 * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {ObservableInput} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method combineLatest
 * @owner Observable
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return combineLatest_1.combineLatest.apply(void 0, observables)(this);
}
exports.combineLatest = combineLatest;
//# sourceMappingURL=combineLatest.js.map

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var concat_1 = __webpack_require__(84);
var concat_2 = __webpack_require__(18);
exports.concatStatic = concat_2.concat;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from every
 * given input Observable after the current Observable.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * Joins this Observable with multiple other Observables by subscribing to them
 * one at a time, starting with the source, and merging their results into the
 * output Observable. Will wait for each Observable to complete before moving
 * on to the next.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = timer.concat(sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 * @example <caption>Concatenate 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = timer1.concat(timer2, timer3);
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} other An input Observable to concatenate after the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @method concat
 * @owner Observable
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return concat_1.concat.apply(void 0, observables)(this);
}
exports.concat = concat;
//# sourceMappingURL=concat.js.map

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var concatAll_1 = __webpack_require__(46);
/* tslint:enable:max-line-length */
/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return concatAll_1.concatAll()(this);
}
exports.concatAll = concatAll;
//# sourceMappingURL=concatAll.js.map

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var concatMap_1 = __webpack_require__(47);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, in a serialized fashion waiting for each one to complete before
 * merging the next.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link concatAll}.</span>
 *
 * <img src="./img/concatMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each new inner Observable is
 * concatenated with the previous inner Observable.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMapTo}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking values from each projected inner
 * Observable sequentially.
 * @method concatMap
 * @owner Observable
 */
function concatMap(project, resultSelector) {
    return concatMap_1.concatMap(project, resultSelector)(this);
}
exports.concatMap = concatMap;
//# sourceMappingURL=concatMap.js.map

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var concatMapTo_1 = __webpack_require__(85);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in a serialized fashion on the output Observable.
 *
 * <span class="informal">It's like {@link concatMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/concatMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. Each new `innerObservable`
 * instance emitted on the output Observable is concatenated with the previous
 * `innerObservable` instance.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter
 * set to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link mergeMapTo}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An observable of values merged together by joining the
 * passed observable with itself, one after the other, for each value emitted
 * from the source.
 * @method concatMapTo
 * @owner Observable
 */
function concatMapTo(innerObservable, resultSelector) {
    return concatMapTo_1.concatMapTo(innerObservable, resultSelector)(this);
}
exports.concatMapTo = concatMapTo;
//# sourceMappingURL=concatMapTo.js.map

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var count_1 = __webpack_require__(86);
/**
 * Counts the number of emissions on the source and emits that number when the
 * source completes.
 *
 * <span class="informal">Tells how many values were emitted, when the source
 * completes.</span>
 *
 * <img src="./img/count.png" width="100%">
 *
 * `count` transforms an Observable that emits values into an Observable that
 * emits a single value that represents the number of values emitted by the
 * source Observable. If the source Observable terminates with an error, `count`
 * will pass this error notification along without emitting a value first. If
 * the source Observable does not terminate at all, `count` will neither emit
 * a value nor terminate. This operator takes an optional `predicate` function
 * as argument, in which case the output emission will represent the number of
 * source values that matched `true` with the `predicate`.
 *
 * @example <caption>Counts how many seconds have passed before the first click happened</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var secondsBeforeClick = seconds.takeUntil(clicks);
 * var result = secondsBeforeClick.count();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>
 * var numbers = Rx.Observable.range(1, 7);
 * var result = numbers.count(i => i % 2 === 1);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 4
 *
 * @see {@link max}
 * @see {@link min}
 * @see {@link reduce}
 *
 * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A
 * boolean function to select what values are to be counted. It is provided with
 * arguments of:
 * - `value`: the value from the source Observable.
 * - `index`: the (zero-based) "index" of the value from the source Observable.
 * - `source`: the source Observable instance itself.
 * @return {Observable} An Observable of one number that represents the count as
 * described above.
 * @method count
 * @owner Observable
 */
function count(predicate) {
    return count_1.count(predicate)(this);
}
exports.count = count;
//# sourceMappingURL=count.js.map

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var debounce_1 = __webpack_require__(87);
/**
 * Emits a value from the source Observable only after a particular time span
 * determined by another Observable has passed without another source emission.
 *
 * <span class="informal">It's like {@link debounceTime}, but the time span of
 * emission silence is determined by a second Observable.</span>
 *
 * <img src="./img/debounce.png" width="100%">
 *
 * `debounce` delays values emitted by the source Observable, but drops previous
 * pending delayed emissions if a new value arrives on the source Observable.
 * This operator keeps track of the most recent value from the source
 * Observable, and spawns a duration Observable by calling the
 * `durationSelector` function. The value is emitted only when the duration
 * Observable emits a value or completes, and if no other value was emitted on
 * the source Observable since the duration Observable was spawned. If a new
 * value appears before the duration Observable emits, the previous value will
 * be dropped and will not be emitted on the output Observable.
 *
 * Like {@link debounceTime}, this is a rate-limiting operator, and also a
 * delay-like operator since output emissions do not necessarily occur at the
 * same time as they did on the source Observable.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounce(() => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the timeout
 * duration for each source value, returned as an Observable or a Promise.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified duration Observable returned by
 * `durationSelector`, and may drop some values if they occur too frequently.
 * @method debounce
 * @owner Observable
 */
function debounce(durationSelector) {
    return debounce_1.debounce(durationSelector)(this);
}
exports.debounce = debounce;
//# sourceMappingURL=debounce.js.map

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var debounceTime_1 = __webpack_require__(88);
/**
 * Emits a value from the source Observable only after a particular time span
 * has passed without another source emission.
 *
 * <span class="informal">It's like {@link delay}, but passes only the most
 * recent value from each burst of emissions.</span>
 *
 * <img src="./img/debounceTime.png" width="100%">
 *
 * `debounceTime` delays values emitted by the source Observable, but drops
 * previous pending delayed emissions if a new value arrives on the source
 * Observable. This operator keeps track of the most recent value from the
 * source Observable, and emits that only when `dueTime` enough time has passed
 * without any other value appearing on the source Observable. If a new value
 * appears before `dueTime` silence occurs, the previous value will be dropped
 * and will not be emitted on the output Observable.
 *
 * This is a rate-limiting operator, because it is impossible for more than one
 * value to be emitted in any time window of duration `dueTime`, but it is also
 * a delay-like operator since output emissions do not occur at the same time as
 * they did on the source Observable. Optionally takes a {@link IScheduler} for
 * managing timers.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounceTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} dueTime The timeout duration in milliseconds (or the time
 * unit determined internally by the optional `scheduler`) for the window of
 * time required to wait for emission silence before emitting the most recent
 * source value.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the timeout for each value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified `dueTime`, and may drop some values if they occur
 * too frequently.
 * @method debounceTime
 * @owner Observable
 */
function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return debounceTime_1.debounceTime(dueTime, scheduler)(this);
}
exports.debounceTime = debounceTime;
//# sourceMappingURL=debounceTime.js.map

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var defaultIfEmpty_1 = __webpack_require__(48);
/* tslint:enable:max-line-length */
/**
 * Emits a given value if the source Observable completes without emitting any
 * `next` value, otherwise mirrors the source Observable.
 *
 * <span class="informal">If the source Observable turns out to be empty, then
 * this operator will emit a default value.</span>
 *
 * <img src="./img/defaultIfEmpty.png" width="100%">
 *
 * `defaultIfEmpty` emits the values emitted by the source Observable or a
 * specified default value if the source Observable is empty (completes without
 * having emitted any `next` value).
 *
 * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
 * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link empty}
 * @see {@link last}
 *
 * @param {any} [defaultValue=null] The default value used if the source
 * Observable is empty.
 * @return {Observable} An Observable that emits either the specified
 * `defaultValue` if the source Observable emits no items, or the values emitted
 * by the source Observable.
 * @method defaultIfEmpty
 * @owner Observable
 */
function defaultIfEmpty(defaultValue) {
    if (defaultValue === void 0) { defaultValue = null; }
    return defaultIfEmpty_1.defaultIfEmpty(defaultValue)(this);
}
exports.defaultIfEmpty = defaultIfEmpty;
//# sourceMappingURL=defaultIfEmpty.js.map

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var delay_1 = __webpack_require__(89);
/**
 * Delays the emission of items from the source Observable by a given timeout or
 * until a given Date.
 *
 * <span class="informal">Time shifts each item by some specified amount of
 * milliseconds.</span>
 *
 * <img src="./img/delay.png" width="100%">
 *
 * If the delay argument is a Number, this operator time shifts the source
 * Observable by that amount of time expressed in milliseconds. The relative
 * time intervals between the values are preserved.
 *
 * If the delay argument is a Date, this operator time shifts the start of the
 * Observable execution until the given date occurs.
 *
 * @example <caption>Delay each click by one second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @example <caption>Delay all clicks until a future date happens</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var date = new Date('March 15, 2050 12:00:00'); // in the future
 * var delayedClicks = clicks.delay(date); // click emitted only after that date
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 *
 * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
 * a `Date` until which the emission of the source items is delayed.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for
 * managing the timers that handle the time-shift for each item.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified timeout or Date.
 * @method delay
 * @owner Observable
 */
function delay(delay, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return delay_1.delay(delay, scheduler)(this);
}
exports.delay = delay;
//# sourceMappingURL=delay.js.map

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var delayWhen_1 = __webpack_require__(90);
/**
 * Delays the emission of items from the source Observable by a given time span
 * determined by the emissions of another Observable.
 *
 * <span class="informal">It's like {@link delay}, but the time span of the
 * delay duration is determined by a second Observable.</span>
 *
 * <img src="./img/delayWhen.png" width="100%">
 *
 * `delayWhen` time shifts each emitted value from the source Observable by a
 * time span determined by another Observable. When the source emits a value,
 * the `delayDurationSelector` function is called with the source value as
 * argument, and should return an Observable, called the "duration" Observable.
 * The source value is emitted on the output Observable only when the duration
 * Observable emits a value or completes.
 *
 * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which
 * is an Observable. When `subscriptionDelay` emits its first value or
 * completes, the source Observable is subscribed to and starts behaving like
 * described in the previous paragraph. If `subscriptionDelay` is not provided,
 * `delayWhen` will subscribe to the source Observable as soon as the output
 * Observable is subscribed.
 *
 * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delayWhen(event =>
 *   Rx.Observable.interval(Math.random() * 5000)
 * );
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounce}
 * @see {@link delay}
 *
 * @param {function(value: T): Observable} delayDurationSelector A function that
 * returns an Observable for each value emitted by the source Observable, which
 * is then used to delay the emission of that item on the output Observable
 * until the Observable returned from this function emits a value.
 * @param {Observable} subscriptionDelay An Observable that triggers the
 * subscription to the source Observable once it emits any value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by an amount of time specified by the Observable returned by
 * `delayDurationSelector`.
 * @method delayWhen
 * @owner Observable
 */
function delayWhen(delayDurationSelector, subscriptionDelay) {
    return delayWhen_1.delayWhen(delayDurationSelector, subscriptionDelay)(this);
}
exports.delayWhen = delayWhen;
//# sourceMappingURL=delayWhen.js.map

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dematerialize_1 = __webpack_require__(91);
/**
 * Converts an Observable of {@link Notification} objects into the emissions
 * that they represent.
 *
 * <span class="informal">Unwraps {@link Notification} objects as actual `next`,
 * `error` and `complete` emissions. The opposite of {@link materialize}.</span>
 *
 * <img src="./img/dematerialize.png" width="100%">
 *
 * `dematerialize` is assumed to operate an Observable that only emits
 * {@link Notification} objects as `next` emissions, and does not emit any
 * `error`. Such Observable is the output of a `materialize` operation. Those
 * notifications are then unwrapped using the metadata they contain, and emitted
 * as `next`, `error`, and `complete` on the output Observable.
 *
 * Use this operator in conjunction with {@link materialize}.
 *
 * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>
 * var notifA = new Rx.Notification('N', 'A');
 * var notifB = new Rx.Notification('N', 'B');
 * var notifE = new Rx.Notification('E', void 0,
 *   new TypeError('x.toUpperCase is not a function')
 * );
 * var materialized = Rx.Observable.of(notifA, notifB, notifE);
 * var upperCase = materialized.dematerialize();
 * upperCase.subscribe(x => console.log(x), e => console.error(e));
 *
 * // Results in:
 * // A
 * // B
 * // TypeError: x.toUpperCase is not a function
 *
 * @see {@link Notification}
 * @see {@link materialize}
 *
 * @return {Observable} An Observable that emits items and notifications
 * embedded in Notification objects emitted by the source Observable.
 * @method dematerialize
 * @owner Observable
 */
function dematerialize() {
    return dematerialize_1.dematerialize()(this);
}
exports.dematerialize = dematerialize;
//# sourceMappingURL=dematerialize.js.map

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var distinct_1 = __webpack_require__(92);
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 *
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 *
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 *
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)
 *   .distinct()
 *   .subscribe(x => console.log(x)); // 1, 2, 3, 4
 *
 * @example <caption>An example using a keySelector function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     .distinct((p: Person) => p.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 *
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [keySelector] Optional function to select which value you want to check as distinct.
 * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */
function distinct(keySelector, flushes) {
    return distinct_1.distinct(keySelector, flushes)(this);
}
exports.distinct = distinct;
//# sourceMappingURL=distinct.js.map

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var distinctUntilChanged_1 = __webpack_require__(49);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)
 *   .distinctUntilChanged()
 *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4
 *
 * @example <caption>An example using a compare function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinctUntilChanged
 * @owner Observable
 */
function distinctUntilChanged(compare, keySelector) {
    return distinctUntilChanged_1.distinctUntilChanged(compare, keySelector)(this);
}
exports.distinctUntilChanged = distinctUntilChanged;
//# sourceMappingURL=distinctUntilChanged.js.map

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var distinctUntilKeyChanged_1 = __webpack_require__(93);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,
 * using a property accessed by using the key provided to check if the two items are distinct.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>An example comparing the name of persons</caption>
 *
 *  interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'},
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilKeyChanged('name')
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @example <caption>An example comparing the first letters of the name</caption>
 *
 * interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo1'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo2'},
 *     { age: 6, name: 'Foo3'})
 *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo1' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo2' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 *
 * @param {string} key String key for object property lookup on each item.
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.
 * @method distinctUntilKeyChanged
 * @owner Observable
 */
function distinctUntilKeyChanged(key, compare) {
    return distinctUntilKeyChanged_1.distinctUntilKeyChanged(key, compare)(this);
}
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
//# sourceMappingURL=distinctUntilKeyChanged.js.map

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var tap_1 = __webpack_require__(141);
/* tslint:enable:max-line-length */
/**
 * Perform a side effect for every emission on the source Observable, but return
 * an Observable that is identical to the source.
 *
 * <span class="informal">Intercepts each emission on the source and runs a
 * function, but returns an output which is identical to the source as long as errors don't occur.</span>
 *
 * <img src="./img/do.png" width="100%">
 *
 * Returns a mirrored Observable of the source Observable, but modified so that
 * the provided Observer is called to perform a side effect for every value,
 * error, and completion emitted by the source. Any errors that are thrown in
 * the aforementioned Observer or handlers are safely sent down the error path
 * of the output Observable.
 *
 * This operator is useful for debugging your Observables for the correct values
 * or performing other side effects.
 *
 * Note: this is different to a `subscribe` on the Observable. If the Observable
 * returned by `do` is not subscribed, the side effects specified by the
 * Observer will never happen. `do` therefore simply spies on existing
 * execution, it does not trigger an execution to happen like `subscribe` does.
 *
 * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks
 *   .do(ev => console.log(ev))
 *   .map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link map}
 * @see {@link subscribe}
 *
 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
 * callback for `next`.
 * @param {function} [error] Callback for errors in the source.
 * @param {function} [complete] Callback for the completion of the source.
 * @return {Observable} An Observable identical to the source, but runs the
 * specified Observer or callback(s) for each item.
 * @method do
 * @name do
 * @owner Observable
 */
function _do(nextOrObserver, error, complete) {
    return tap_1.tap(nextOrObserver, error, complete)(this);
}
exports._do = _do;
//# sourceMappingURL=do.js.map

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var elementAt_1 = __webpack_require__(94);
/**
 * Emits the single value at the specified `index` in a sequence of emissions
 * from the source Observable.
 *
 * <span class="informal">Emits only the i-th value, then completes.</span>
 *
 * <img src="./img/elementAt.png" width="100%">
 *
 * `elementAt` returns an Observable that emits the item at the specified
 * `index` in the source Observable, or a default value if that `index` is out
 * of range and the `default` argument is provided. If the `default` argument is
 * not given and the `index` is out of range, the output Observable will emit an
 * `ArgumentOutOfRangeError` error.
 *
 * @example <caption>Emit only the third click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.elementAt(2);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // click 1 = nothing
 * // click 2 = nothing
 * // click 3 = MouseEvent object logged to console
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link skip}
 * @see {@link single}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the
 * Observable has completed before emitting the i-th `next` notification.
 *
 * @param {number} index Is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {T} [defaultValue] The default value returned for missing indices.
 * @return {Observable} An Observable that emits a single item, if it is found.
 * Otherwise, will emit the default value if given. If not, then emits an error.
 * @method elementAt
 * @owner Observable
 */
function elementAt(index, defaultValue) {
    return elementAt_1.elementAt(index, defaultValue)(this);
}
exports.elementAt = elementAt;
//# sourceMappingURL=elementAt.js.map

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var every_1 = __webpack_require__(95);
/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 *
 * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
 *  Observable.of(1, 2, 3, 4, 5, 6)
 *     .every(x => x < 5)
 *     .subscribe(x => console.log(x)); // -> false
 *
 * @param {function} predicate A function for determining if an item meets a specified condition.
 * @param {any} [thisArg] Optional object to use for `this` in the callback.
 * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
 * @method every
 * @owner Observable
 */
function every(predicate, thisArg) {
    return every_1.every(predicate, thisArg)(this);
}
exports.every = every;
//# sourceMappingURL=every.js.map

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var exhaust_1 = __webpack_require__(96);
/**
 * Converts a higher-order Observable into a first-order Observable by dropping
 * inner Observables while the previous inner Observable has not yet completed.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * next inner Observables while the current inner is still executing.</span>
 *
 * <img src="./img/exhaust.png" width="100%">
 *
 * `exhaust` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable begins emitting the items emitted by that
 * inner Observable. So far, it behaves like {@link mergeAll}. However,
 * `exhaust` ignores every new inner Observable if the previous Observable has
 * not yet completed. Once that one completes, it will accept and flatten the
 * next inner Observable and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));
 * var result = higherOrder.exhaust();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link switch}
 * @see {@link mergeAll}
 * @see {@link exhaustMap}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable that takes a source of Observables and propagates the first observable
 * exclusively until it completes before subscribing to the next.
 * @method exhaust
 * @owner Observable
 */
function exhaust() {
    return exhaust_1.exhaust()(this);
}
exports.exhaust = exhaust;
//# sourceMappingURL=exhaust.js.map

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var exhaustMap_1 = __webpack_require__(97);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable only if the previous projected Observable has completed.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link exhaust}.</span>
 *
 * <img src="./img/exhaustMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. When it projects a source value to
 * an Observable, the output Observable begins emitting the items emitted by
 * that projected Observable. However, `exhaustMap` ignores every new projected
 * Observable if the previous projected Observable has not yet completed. Once
 * that one completes, it will accept and flatten the next projected Observable
 * and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaust}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable containing projected Observables
 * of each item of the source, ignoring projected Observables that start before
 * their preceding Observable has completed.
 * @method exhaustMap
 * @owner Observable
 */
function exhaustMap(project, resultSelector) {
    return exhaustMap_1.exhaustMap(project, resultSelector)(this);
}
exports.exhaustMap = exhaustMap;
//# sourceMappingURL=exhaustMap.js.map

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var expand_1 = __webpack_require__(98);
/* tslint:enable:max-line-length */
/**
 * Recursively projects each source value to an Observable which is merged in
 * the output Observable.
 *
 * <span class="informal">It's similar to {@link mergeMap}, but applies the
 * projection function to every source value as well as every output value.
 * It's recursive.</span>
 *
 * <img src="./img/expand.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger. *Expand* will re-emit on the output
 * Observable every source value. Then, each output value is given to the
 * `project` function which returns an inner Observable to be merged on the
 * output Observable. Those output values resulting from the projection are also
 * given to the `project` function to produce new output values. This is how
 * *expand* behaves recursively.
 *
 * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var powersOfTwo = clicks
 *   .mapTo(1)
 *   .expand(x => Rx.Observable.of(2 * x).delay(1000))
 *   .take(10);
 * powersOfTwo.subscribe(x => console.log(x));
 *
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 *
 * @param {function(value: T, index: number) => Observable} project A function
 * that, when applied to an item emitted by the source or the output Observable,
 * returns an Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each projected inner Observable.
 * @return {Observable} An Observable that emits the source values and also
 * result of applying the projection function to each value emitted on the
 * output Observable and and merging the results of the Observables obtained
 * from this transformation.
 * @method expand
 * @owner Observable
 */
function expand(project, concurrent, scheduler) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (scheduler === void 0) { scheduler = undefined; }
    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
    return expand_1.expand(project, concurrent, scheduler)(this);
}
exports.expand = expand;
//# sourceMappingURL=expand.js.map

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var filter_1 = __webpack_require__(50);
/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
    return filter_1.filter(predicate, thisArg)(this);
}
exports.filter = filter;
//# sourceMappingURL=filter.js.map

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var finalize_1 = __webpack_require__(99);
/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when
 * the source terminates on complete or error.
 * @param {function} callback Function to be called when source terminates.
 * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.
 * @method finally
 * @owner Observable
 */
function _finally(callback) {
    return finalize_1.finalize(callback)(this);
}
exports._finally = _finally;
//# sourceMappingURL=finally.js.map

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var find_1 = __webpack_require__(51);
/* tslint:enable:max-line-length */
/**
 * Emits only the first value emitted by the source Observable that meets some
 * condition.
 *
 * <span class="informal">Finds the first value that passes some test and emits
 * that.</span>
 *
 * <img src="./img/find.png" width="100%">
 *
 * `find` searches for the first item in the source Observable that matches the
 * specified condition embodied by the `predicate`, and returns the first
 * occurrence in the source. Unlike {@link first}, the `predicate` is required
 * in `find`, and does not emit an error if a valid value is not found.
 *
 * @example <caption>Find and emit the first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.find(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link first}
 * @see {@link findIndex}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable<T>} An Observable of the first item that matches the
 * condition.
 * @method find
 * @owner Observable
 */
function find(predicate, thisArg) {
    return find_1.find(predicate, thisArg)(this);
}
exports.find = find;
//# sourceMappingURL=find.js.map

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var findIndex_1 = __webpack_require__(100);
/**
 * Emits only the index of the first value emitted by the source Observable that
 * meets some condition.
 *
 * <span class="informal">It's like {@link find}, but emits the index of the
 * found value, not the value itself.</span>
 *
 * <img src="./img/findIndex.png" width="100%">
 *
 * `findIndex` searches for the first item in the source Observable that matches
 * the specified condition embodied by the `predicate`, and returns the
 * (zero-based) index of the first occurrence in the source. Unlike
 * {@link first}, the `predicate` is required in `findIndex`, and does not emit
 * an error if a valid value is not found.
 *
 * @example <caption>Emit the index of first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link first}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of the index of the first item that
 * matches the condition.
 * @method find
 * @owner Observable
 */
function findIndex(predicate, thisArg) {
    return findIndex_1.findIndex(predicate, thisArg)(this);
}
exports.findIndex = findIndex;
//# sourceMappingURL=findIndex.js.map

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var first_1 = __webpack_require__(101);
/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {function(value: T, index: number): R} [resultSelector] A function to
 * produce the value on the output Observable based on the values
 * and the indices of the source Observable. The arguments passed to this
 * function are:
 * - `value`: the value that was emitted on the source.
 * - `index`: the "index" of the value from the source.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first(predicate, resultSelector, defaultValue) {
    return first_1.first(predicate, resultSelector, defaultValue)(this);
}
exports.first = first;
//# sourceMappingURL=first.js.map

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var groupBy_1 = __webpack_require__(102);
exports.GroupedObservable = groupBy_1.GroupedObservable;
/* tslint:enable:max-line-length */
/**
 * Groups the items emitted by an Observable according to a specified criterion,
 * and emits these grouped items as `GroupedObservables`, one
 * {@link GroupedObservable} per group.
 *
 * <img src="./img/groupBy.png" width="100%">
 *
 * @example <caption>Group objects by id and return as array</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs3'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *     )
 *     .groupBy(p => p.id)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // [ { id: 1, name: 'aze1' },
 * //   { id: 1, name: 'erg1' },
 * //   { id: 1, name: 'df1' } ]
 * //
 * // [ { id: 2, name: 'sf2' },
 * //   { id: 2, name: 'dg2' },
 * //   { id: 2, name: 'sfqfb2' },
 * //   { id: 2, name: 'qsgqsfg2' } ]
 * //
 * // [ { id: 3, name: 'qfs3' } ]
 *
 * @example <caption>Pivot data on the id field</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs1'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *                   )
 *     .groupBy(p => p.id, p => p.name)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], ["" + group$.key]))
 *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }
 * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }
 * // { id: 3, values: [ 'qfs1' ] }
 *
 * @param {function(value: T): K} keySelector A function that extracts the key
 * for each item.
 * @param {function(value: T): R} [elementSelector] A function that extracts the
 * return element for each item.
 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
 * A function that returns an Observable to determine how long each group should
 * exist.
 * @return {Observable<GroupedObservable<K,R>>} An Observable that emits
 * GroupedObservables, each of which corresponds to a unique key value and each
 * of which emits those items from the source Observable that share that key
 * value.
 * @method groupBy
 * @owner Observable
 */
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return groupBy_1.groupBy(keySelector, elementSelector, durationSelector, subjectSelector)(this);
}
exports.groupBy = groupBy;
//# sourceMappingURL=groupBy.js.map

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ignoreElements_1 = __webpack_require__(103);
/**
 * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.
 *
 * <img src="./img/ignoreElements.png" width="100%">
 *
 * @return {Observable} An empty Observable that only calls `complete`
 * or `error`, based on which one is called by the source Observable.
 * @method ignoreElements
 * @owner Observable
 */
function ignoreElements() {
    return ignoreElements_1.ignoreElements()(this);
}
exports.ignoreElements = ignoreElements;
;
//# sourceMappingURL=ignoreElements.js.map

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isEmpty_1 = __webpack_require__(104);
/**
 * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.
 *
 * <img src="./img/isEmpty.png" width="100%">
 *
 * @return {Observable} An Observable that emits a Boolean.
 * @method isEmpty
 * @owner Observable
 */
function isEmpty() {
    return isEmpty_1.isEmpty()(this);
}
exports.isEmpty = isEmpty;
//# sourceMappingURL=isEmpty.js.map

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var last_1 = __webpack_require__(105);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * <img src="./img/last.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {function} predicate - The condition any source emitted item has to satisfy.
 * @return {Observable} An Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 * @method last
 * @owner Observable
 */
function last(predicate, resultSelector, defaultValue) {
    return last_1.last(predicate, resultSelector, defaultValue)(this);
}
exports.last = last;
//# sourceMappingURL=last.js.map

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @param func
 * @return {Observable<R>}
 * @method let
 * @owner Observable
 */
function letProto(func) {
    return func(this);
}
exports.letProto = letProto;
//# sourceMappingURL=let.js.map

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var map_1 = __webpack_require__(19);
/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    return map_1.map(project, thisArg)(this);
}
exports.map = map;
//# sourceMappingURL=map.js.map

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mapTo_1 = __webpack_require__(106);
/**
 * Emits the given constant value on the output Observable every time the source
 * Observable emits a value.
 *
 * <span class="informal">Like {@link map}, but it maps every source value to
 * the same output value every time.</span>
 *
 * <img src="./img/mapTo.png" width="100%">
 *
 * Takes a constant `value` as argument, and emits that whenever the source
 * Observable emits a value. In other words, ignores the actual source value,
 * and simply uses the emission moment to know when to emit the given `value`.
 *
 * @example <caption>Map every click to the string 'Hi'</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var greetings = clicks.mapTo('Hi');
 * greetings.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {any} value The value to map each source value to.
 * @return {Observable} An Observable that emits the given `value` every time
 * the source Observable emits something.
 * @method mapTo
 * @owner Observable
 */
function mapTo(value) {
    return mapTo_1.mapTo(value)(this);
}
exports.mapTo = mapTo;
//# sourceMappingURL=mapTo.js.map

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var materialize_1 = __webpack_require__(107);
/**
 * Represents all of the notifications from the source Observable as `next`
 * emissions marked with their original types within {@link Notification}
 * objects.
 *
 * <span class="informal">Wraps `next`, `error` and `complete` emissions in
 * {@link Notification} objects, emitted as `next` on the output Observable.
 * </span>
 *
 * <img src="./img/materialize.png" width="100%">
 *
 * `materialize` returns an Observable that emits a `next` notification for each
 * `next`, `error`, or `complete` emission of the source Observable. When the
 * source Observable emits `complete`, the output Observable will emit `next` as
 * a Notification of type "complete", and then it will emit `complete` as well.
 * When the source Observable emits `error`, the output will emit `next` as a
 * Notification of type "error", and then `complete`.
 *
 * This operator is useful for producing metadata of the source Observable, to
 * be consumed as `next` emissions. Use it in conjunction with
 * {@link dematerialize}.
 *
 * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>
 * var letters = Rx.Observable.of('a', 'b', 13, 'd');
 * var upperCase = letters.map(x => x.toUpperCase());
 * var materialized = upperCase.materialize();
 * materialized.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - Notification {kind: "N", value: "A", error: undefined, hasValue: true}
 * // - Notification {kind: "N", value: "B", error: undefined, hasValue: true}
 * // - Notification {kind: "E", value: undefined, error: TypeError:
 * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x
 * //   [as project] (http://1…, hasValue: false}
 *
 * @see {@link Notification}
 * @see {@link dematerialize}
 *
 * @return {Observable<Notification<T>>} An Observable that emits
 * {@link Notification} objects that wrap the original emissions from the source
 * Observable with metadata.
 * @method materialize
 * @owner Observable
 */
function materialize() {
    return materialize_1.materialize()(this);
}
exports.materialize = materialize;
//# sourceMappingURL=materialize.js.map

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var max_1 = __webpack_require__(108);
/**
 * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the largest value.
 *
 * <img src="./img/max.png" width="100%">
 *
 * @example <caption>Get the maximal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .max()
 *   .subscribe(x => console.log(x)); // -> 8
 *
 * @example <caption>Use a comparer function to get the maximal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'
 * }
 *
 * @see {@link min}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable} An Observable that emits item with the largest value.
 * @method max
 * @owner Observable
 */
function max(comparer) {
    return max_1.max(comparer)(this);
}
exports.max = max;
//# sourceMappingURL=max.js.map

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var merge_1 = __webpack_require__(109);
var merge_2 = __webpack_require__(30);
exports.mergeStatic = merge_2.merge;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (either the source or an
 * Observable given as argument), and simply forwards (without doing any
 * transformation) all the values from all the input Observables to the output
 * Observable. The output Observable only completes once all input Observables
 * have completed. Any error delivered by an input Observable will be immediately
 * emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = clicks.merge(timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = timer1.merge(timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {ObservableInput} other An input Observable to merge with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} An Observable that emits items that are the result of
 * every input Observable.
 * @method merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return merge_1.merge.apply(void 0, observables)(this);
}
exports.merge = merge;
//# sourceMappingURL=merge.js.map

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeAll_1 = __webpack_require__(32);
/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return mergeAll_1.mergeAll(concurrent)(this);
}
exports.mergeAll = mergeAll;
//# sourceMappingURL=mergeAll.js.map

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeMap_1 = __webpack_require__(20);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return mergeMap_1.mergeMap(project, resultSelector, concurrent)(this);
}
exports.mergeMap = mergeMap;
//# sourceMappingURL=mergeMap.js.map

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeMapTo_1 = __webpack_require__(110);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in the output Observable.
 *
 * <span class="informal">It's like {@link mergeMap}, but maps each value always
 * to the same inner Observable.</span>
 *
 * <img src="./img/mergeMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then merges those resulting Observables into one
 * single Observable, which is the output Observable.
 *
 * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable.
 * @method mergeMapTo
 * @owner Observable
 */
function mergeMapTo(innerObservable, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return mergeMapTo_1.mergeMapTo(innerObservable, resultSelector, concurrent)(this);
}
exports.mergeMapTo = mergeMapTo;
//# sourceMappingURL=mergeMapTo.js.map

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var mergeScan_1 = __webpack_require__(111);
/**
 * Applies an accumulator function over the source Observable where the
 * accumulator function itself returns an Observable, then each intermediate
 * Observable returned is merged into the output Observable.
 *
 * <span class="informal">It's like {@link scan}, but the Observables returned
 * by the accumulator are merged into the outer Observable.</span>
 *
 * @example <caption>Count the number of click events</caption>
 * const click$ = Rx.Observable.fromEvent(document, 'click');
 * const one$ = click$.mapTo(1);
 * const seed = 0;
 * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);
 * count$.subscribe(x => console.log(x));
 *
 * // Results:
 * 1
 * 2
 * 3
 * 4
 * // ...and so on for each click
 *
 * @param {function(acc: R, value: T): Observable<R>} accumulator
 * The accumulator function called on each source value.
 * @param seed The initial accumulation value.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of
 * input Observables being subscribed to concurrently.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method mergeScan
 * @owner Observable
 */
function mergeScan(accumulator, seed, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return mergeScan_1.mergeScan(accumulator, seed, concurrent)(this);
}
exports.mergeScan = mergeScan;
//# sourceMappingURL=mergeScan.js.map

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var min_1 = __webpack_require__(112);
/**
 * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the smallest value.
 *
 * <img src="./img/min.png" width="100%">
 *
 * @example <caption>Get the minimal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .min()
 *   .subscribe(x => console.log(x)); // -> 2
 *
 * @example <caption>Use a comparer function to get the minimal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'
 * }
 *
 * @see {@link max}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable<R>} An Observable that emits item with the smallest value.
 * @method min
 * @owner Observable
 */
function min(comparer) {
    return min_1.min(comparer)(this);
}
exports.min = min;
//# sourceMappingURL=min.js.map

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var multicast_1 = __webpack_require__(16);
/* tslint:enable:max-line-length */
/**
 * Allows source Observable to be subscribed only once with a Subject of choice,
 * while still sharing its values between multiple subscribers.
 *
 * <span class="informal">Subscribe to Observable once, but send its values to multiple subscribers.</span>
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * `multicast` is an operator that works in two modes.
 *
 * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject
 * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be
 * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that
 * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when
 * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription
 * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,
 * even though usually it would send a request per every subscriber. Since it sends a request at the moment of
 * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.
 *
 * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,
 * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source
 * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,
 * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count
 * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least
 * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a
 * ConnectableObservable, use `refCount`.
 *
 * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.
 * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable
 * as well, which should be the input stream modified by any operators you want. Note that in this
 * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If
 * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.
 * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,
 * if inside the selector function you subscribe to the input Observable multiple times, actual source stream
 * will be subscribed only once. So if you have a chain of operators that use some Observable many times,
 * but you want to subscribe to that Observable only once, this is the mode you would use.
 *
 * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the
 * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject
 * has some special properties, Observable returned by `multicast` will have them as well. If you want to use
 * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},
 * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},
 * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually
 * just wrappers around `multicast`, with a specific Subject hardcoded inside.
 *
 * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,
 * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.
 *
 * @example <caption>Use ConnectableObservable</caption>
 * const seconds = Rx.Observable.interval(1000);
 * const connectableSeconds = seconds.multicast(new Subject());
 *
 * connectableSeconds.subscribe(value => console.log('first: ' + value));
 * connectableSeconds.subscribe(value => console.log('second: ' + value));
 *
 * // At this point still nothing happens, even though we subscribed twice.
 *
 * connectableSeconds.connect();
 *
 * // From now on `seconds` are being logged to the console,
 * // twice per every second. `seconds` Observable was however only subscribed once,
 * // so under the hood Observable.interval had only one clock started.
 *
 * @example <caption>Use selector</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds
 *     .multicast(
 *         () => new Subject(),
 *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.
 *                                         // Because we are inside selector, `seconds` is subscribed once,
 *     )                                   // thus starting only one clock used internally by Observable.interval.
 *     .subscribe();
 *
 * @see {@link publish}
 * @see {@link publishLast}
 * @see {@link publishBehavior}
 * @see {@link publishReplay}
 * @see {@link share}
 * @see {@link shareReplay}
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through
 * which the source sequence's elements will be multicast to the selector function input Observable or
 * ConnectableObservable returned by the operator.
 * @param {Function} [selector] - Optional selector function that can use the input stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the input source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector
 * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.
 *
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
    return multicast_1.multicast(subjectOrSubjectFactory, selector)(this);
}
exports.multicast = multicast;
//# sourceMappingURL=multicast.js.map

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var observeOn_1 = __webpack_require__(33);
/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return observeOn_1.observeOn(scheduler, delay)(this);
}
exports.observeOn = observeOn;
//# sourceMappingURL=observeOn.js.map

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var onErrorResumeNext_1 = __webpack_require__(52);
/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as
 * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same
 * as the source.
 *
 * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.
 * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`
 * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting
 * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another
 * Observable in provided series, no matter if previous Observable completed or ended with an error. This will
 * be happening until there is no more Observables left in the series, at which point returned Observable will
 * complete - even if the last subscribed stream ended with an error.
 *
 * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive
 * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable
 * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with
 * an error.
 *
 * Note that you do not get any access to errors emitted by the Observables. In particular do not
 * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take
 * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.
 *
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * Rx.Observable.of(1, 2, 3, 0)
 *   .map(x => {
 *       if (x === 0) { throw Error(); }
         return 10 / x;
 *   })
 *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))
 *   .subscribe(
 *     val => console.log(val),
 *     err => console.log(err),          // Will never be called.
 *     () => console.log('that\'s it!')
 *   );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "that's it!"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} observables Observables passed either directly or as an array.
 * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes
 * to the next passed Observable and so on, until it completes or runs out of Observables.
 * @method onErrorResumeNext
 * @owner Observable
 */
function onErrorResumeNext() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i - 0] = arguments[_i];
    }
    return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, nextSources)(this);
}
exports.onErrorResumeNext = onErrorResumeNext;
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var pairwise_1 = __webpack_require__(113);
/**
 * Groups pairs of consecutive emissions together and emits them as an array of
 * two values.
 *
 * <span class="informal">Puts the current value and previous value together as
 * an array, and emits that.</span>
 *
 * <img src="./img/pairwise.png" width="100%">
 *
 * The Nth emission from the source Observable will cause the output Observable
 * to emit an array [(N-1)th, Nth] of the previous and the current value, as a
 * pair. For this reason, `pairwise` emits on the second and subsequent
 * emissions from the source Observable, but not on the first emission, because
 * there is no previous value in that case.
 *
 * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var pairs = clicks.pairwise();
 * var distance = pairs.map(pair => {
 *   var x0 = pair[0].clientX;
 *   var y0 = pair[0].clientY;
 *   var x1 = pair[1].clientX;
 *   var y1 = pair[1].clientY;
 *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));
 * });
 * distance.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 *
 * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of
 * consecutive values from the source Observable.
 * @method pairwise
 * @owner Observable
 */
function pairwise() {
    return pairwise_1.pairwise()(this);
}
exports.pairwise = pairwise;
//# sourceMappingURL=pairwise.js.map

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var partition_1 = __webpack_require__(114);
/**
 * Splits the source Observable into two, one with values that satisfy a
 * predicate, and another with values that don't satisfy the predicate.
 *
 * <span class="informal">It's like {@link filter}, but returns two Observables:
 * one like the output of {@link filter}, and the other with values that did not
 * pass the condition.</span>
 *
 * <img src="./img/partition.png" width="100%">
 *
 * `partition` outputs an array with two Observables that partition the values
 * from the source Observable through the given `predicate` function. The first
 * Observable in that array emits source values for which the predicate argument
 * returns true. The second Observable emits source values for which the
 * predicate returns false. The first behaves like {@link filter} and the second
 * behaves like {@link filter} with the predicate negated.
 *
 * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');
 * var clicksOnDivs = parts[0];
 * var clicksElsewhere = parts[1];
 * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));
 * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));
 *
 * @see {@link filter}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted on the first Observable in the returned array, if
 * `false` the value is emitted on the second Observable in the array. The
 * `index` parameter is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {[Observable<T>, Observable<T>]} An array with two Observables: one
 * with values that passed the predicate, and another with values that did not
 * pass the predicate.
 * @method partition
 * @owner Observable
 */
function partition(predicate, thisArg) {
    return partition_1.partition(predicate, thisArg)(this);
}
exports.partition = partition;
//# sourceMappingURL=partition.js.map

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var pluck_1 = __webpack_require__(115);
/**
 * Maps each source value (an object) to its specified nested property.
 *
 * <span class="informal">Like {@link map}, but meant only for picking one of
 * the nested properties of every emitted object.</span>
 *
 * <img src="./img/pluck.png" width="100%">
 *
 * Given a list of strings describing a path to an object property, retrieves
 * the value of a specified nested property from all values in the source
 * Observable. If a property can't be resolved, it will return `undefined` for
 * that value.
 *
 * @example <caption>Map every click to the tagName of the clicked target element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var tagNames = clicks.pluck('target', 'tagName');
 * tagNames.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {...string} properties The nested properties to pluck from each source
 * value (an object).
 * @return {Observable} A new Observable of property values from the source values.
 * @method pluck
 * @owner Observable
 */
function pluck() {
    var properties = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        properties[_i - 0] = arguments[_i];
    }
    return pluck_1.pluck.apply(void 0, properties)(this);
}
exports.pluck = pluck;
//# sourceMappingURL=pluck.js.map

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var publish_1 = __webpack_require__(116);
/* tslint:enable:max-line-length */
/**
 * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
 * before it begins emitting items to those Observers that have subscribed to it.
 *
 * <img src="./img/publish.png" width="100%">
 *
 * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times
 * as needed, without causing multiple subscriptions to the source sequence.
 * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
 * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.
 * @method publish
 * @owner Observable
 */
function publish(selector) {
    return publish_1.publish(selector)(this);
}
exports.publish = publish;
//# sourceMappingURL=publish.js.map

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var publishBehavior_1 = __webpack_require__(117);
/**
 * @param value
 * @return {ConnectableObservable<T>}
 * @method publishBehavior
 * @owner Observable
 */
function publishBehavior(value) {
    return publishBehavior_1.publishBehavior(value)(this);
}
exports.publishBehavior = publishBehavior;
//# sourceMappingURL=publishBehavior.js.map

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var publishLast_1 = __webpack_require__(118);
/**
 * @return {ConnectableObservable<T>}
 * @method publishLast
 * @owner Observable
 */
function publishLast() {
    //TODO(benlesh): correct type-flow through here.
    return publishLast_1.publishLast()(this);
}
exports.publishLast = publishLast;
//# sourceMappingURL=publishLast.js.map

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var publishReplay_1 = __webpack_require__(119);
/* tslint:enable:max-line-length */
/**
 * @param bufferSize
 * @param windowTime
 * @param selectorOrScheduler
 * @param scheduler
 * @return {Observable<T> | ConnectableObservable<T>}
 * @method publishReplay
 * @owner Observable
 */
function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
    return publishReplay_1.publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);
}
exports.publishReplay = publishReplay;
//# sourceMappingURL=publishReplay.js.map

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var race_1 = __webpack_require__(120);
// NOTE: to support backwards compatability with 5.4.* and lower
var race_2 = __webpack_require__(44);
exports.raceStatic = race_2.race;
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that mirrors the first source Observable to emit an item
 * from the combination of this Observable and supplied Observables.
 * @param {...Observables} ...observables Sources used to race for which Observable emits first.
 * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.
 * @method race
 * @owner Observable
 */
function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return race_1.race.apply(void 0, observables)(this);
}
exports.race = race;
//# sourceMappingURL=race.js.map

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var reduce_1 = __webpack_require__(21);
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns the
 * accumulated result when the source completes, given an optional seed value.
 *
 * <span class="informal">Combines together all values emitted on the source,
 * using an accumulator function that knows how to join a new source value into
 * the accumulation from the past.</span>
 *
 * <img src="./img/reduce.png" width="100%">
 *
 * Like
 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
 * `reduce` applies an `accumulator` function against an accumulation and each
 * value of the source Observable (from the past) to reduce it to a single
 * value, emitted on the output Observable. Note that `reduce` will only emit
 * one value, only when the source Observable completes. It is equivalent to
 * applying operator {@link scan} followed by operator {@link last}.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
 *   .takeUntil(Rx.Observable.interval(5000));
 * var ones = clicksInFiveSeconds.mapTo(1);
 * var seed = 0;
 * var count = ones.reduce((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link count}
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link scan}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
 * called on each source value.
 * @param {R} [seed] The initial accumulation value.
 * @return {Observable<R>} An Observable that emits a single value that is the
 * result of accumulating the values emitted by the source Observable.
 * @method reduce
 * @owner Observable
 */
function reduce(accumulator, seed) {
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        return reduce_1.reduce(accumulator, seed)(this);
    }
    return reduce_1.reduce(accumulator)(this);
}
exports.reduce = reduce;
//# sourceMappingURL=reduce.js.map

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var repeat_1 = __webpack_require__(121);
/**
 * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.
 *
 * <img src="./img/repeat.png" width="100%">
 *
 * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield
 * an empty Observable.
 * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most
 * count times.
 * @method repeat
 * @owner Observable
 */
function repeat(count) {
    if (count === void 0) { count = -1; }
    return repeat_1.repeat(count)(this);
}
exports.repeat = repeat;
//# sourceMappingURL=repeat.js.map

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var repeatWhen_1 = __webpack_require__(122);
/**
 * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source
 * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable
 * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise
 * this method will resubscribe to the source Observable.
 *
 * <img src="./img/repeatWhen.png" width="100%">
 *
 * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with
 * which a user can `complete` or `error`, aborting the repetition.
 * @return {Observable} The source Observable modified with repeat logic.
 * @method repeatWhen
 * @owner Observable
 */
function repeatWhen(notifier) {
    return repeatWhen_1.repeatWhen(notifier)(this);
}
exports.repeatWhen = repeatWhen;
//# sourceMappingURL=repeatWhen.js.map

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var retry_1 = __webpack_require__(123);
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given
 * as a number parameter) rather than propagating the `error` call.
 *
 * <img src="./img/retry.png" width="100%">
 *
 * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
 * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
 * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
 * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
 * @param {number} count - Number of retry attempts before failing.
 * @return {Observable} The source Observable modified with the retry logic.
 * @method retry
 * @owner Observable
 */
function retry(count) {
    if (count === void 0) { count = -1; }
    return retry_1.retry(count)(this);
}
exports.retry = retry;
//# sourceMappingURL=retry.js.map

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var retryWhen_1 = __webpack_require__(124);
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.
 * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child
 * subscription. Otherwise this method will resubscribe to the source Observable.
 *
 * <img src="./img/retryWhen.png" width="100%">
 *
 * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a
 * user can `complete` or `error`, aborting the retry.
 * @return {Observable} The source Observable modified with retry logic.
 * @method retryWhen
 * @owner Observable
 */
function retryWhen(notifier) {
    return retryWhen_1.retryWhen(notifier)(this);
}
exports.retryWhen = retryWhen;
//# sourceMappingURL=retryWhen.js.map

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var sample_1 = __webpack_require__(125);
/**
 * Emits the most recently emitted value from the source Observable whenever
 * another Observable, the `notifier`, emits.
 *
 * <span class="informal">It's like {@link sampleTime}, but samples whenever
 * the `notifier` Observable emits something.</span>
 *
 * <img src="./img/sample.png" width="100%">
 *
 * Whenever the `notifier` Observable emits a value or completes, `sample`
 * looks at the source Observable and emits whichever value it has most recently
 * emitted since the previous sampling, unless the source has not emitted
 * anything since the previous sampling. The `notifier` is subscribed to as soon
 * as the output Observable is subscribed.
 *
 * @example <caption>On every click, sample the most recent "seconds" timer</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = seconds.sample(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {Observable<any>} notifier The Observable to use for sampling the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable whenever the notifier Observable
 * emits value or completes.
 * @method sample
 * @owner Observable
 */
function sample(notifier) {
    return sample_1.sample(notifier)(this);
}
exports.sample = sample;
//# sourceMappingURL=sample.js.map

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var sampleTime_1 = __webpack_require__(126);
/**
 * Emits the most recently emitted value from the source Observable within
 * periodic time intervals.
 *
 * <span class="informal">Samples the source Observable at periodic time
 * intervals, emitting what it samples.</span>
 *
 * <img src="./img/sampleTime.png" width="100%">
 *
 * `sampleTime` periodically looks at the source Observable and emits whichever
 * value it has most recently emitted since the previous sampling, unless the
 * source has not emitted anything since the previous sampling. The sampling
 * happens periodically in time every `period` milliseconds (or the time unit
 * defined by the optional `scheduler` argument). The sampling starts as soon as
 * the output Observable is subscribed.
 *
 * @example <caption>Every second, emit the most recent click at most once</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.sampleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {number} period The sampling period expressed in milliseconds or the
 * time unit determined internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the sampling.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable at the specified time interval.
 * @method sampleTime
 * @owner Observable
 */
function sampleTime(period, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return sampleTime_1.sampleTime(period, scheduler)(this);
}
exports.sampleTime = sampleTime;
//# sourceMappingURL=sampleTime.js.map

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var scan_1 = __webpack_require__(54);
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
function scan(accumulator, seed) {
    if (arguments.length >= 2) {
        return scan_1.scan(accumulator, seed)(this);
    }
    return scan_1.scan(accumulator)(this);
}
exports.scan = scan;
//# sourceMappingURL=scan.js.map

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var sequenceEqual_1 = __webpack_require__(127);
/**
 * Compares all values of two observables in sequence using an optional comparor function
 * and returns an observable of a single boolean value representing whether or not the two sequences
 * are equal.
 *
 * <span class="informal">Checks to see of all values emitted by both observables are equal, in order.</span>
 *
 * <img src="./img/sequenceEqual.png" width="100%">
 *
 * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either
 * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom
 * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the
 * observables completes, the operator will wait for the other observable to complete; If the other
 * observable emits before completing, the returned observable will emit `false` and complete. If one observable never
 * completes or emits after the other complets, the returned observable will never complete.
 *
 * @example <caption>figure out if the Konami code matches</caption>
 * var code = Rx.Observable.from([
 *  "ArrowUp",
 *  "ArrowUp",
 *  "ArrowDown",
 *  "ArrowDown",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "KeyB",
 *  "KeyA",
 *  "Enter" // no start key, clearly.
 * ]);
 *
 * var keys = Rx.Observable.fromEvent(document, 'keyup')
 *  .map(e => e.code);
 * var matches = keys.bufferCount(11, 1)
 *  .mergeMap(
 *    last11 =>
 *      Rx.Observable.from(last11)
 *        .sequenceEqual(code)
 *   );
 * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 * @see {@link withLatestFrom}
 *
 * @param {Observable} compareTo The observable sequence to compare the source sequence to.
 * @param {function} [comparor] An optional function to compare each value pair
 * @return {Observable} An Observable of a single boolean value representing whether or not
 * the values emitted by both observables were equal in sequence.
 * @method sequenceEqual
 * @owner Observable
 */
function sequenceEqual(compareTo, comparor) {
    return sequenceEqual_1.sequenceEqual(compareTo, comparor)(this);
}
exports.sequenceEqual = sequenceEqual;
//# sourceMappingURL=sequenceEqual.js.map

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var share_1 = __webpack_require__(128);
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 *
 * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.
 * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.
 * Observable.of("test").publish().refCount() will not re-emit "test" on new subscriptions, Observable.of("test").share() will
 * re-emit "test" to new subscriptions.
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
    return share_1.share()(this);
}
exports.share = share;
;
//# sourceMappingURL=share.js.map

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var shareReplay_1 = __webpack_require__(129);
/**
 * @method shareReplay
 * @owner Observable
 */
function shareReplay(bufferSize, windowTime, scheduler) {
    return shareReplay_1.shareReplay(bufferSize, windowTime, scheduler)(this);
}
exports.shareReplay = shareReplay;
;
//# sourceMappingURL=shareReplay.js.map

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var single_1 = __webpack_require__(130);
/**
 * Returns an Observable that emits the single item emitted by the source Observable that matches a specified
 * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no
 * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.
 *
 * <img src="./img/single.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches
 * the predicate.
 .
 * @method single
 * @owner Observable
 */
function single(predicate) {
    return single_1.single(predicate)(this);
}
exports.single = single;
//# sourceMappingURL=single.js.map

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var skip_1 = __webpack_require__(131);
/**
 * Returns an Observable that skips the first `count` items emitted by the source Observable.
 *
 * <img src="./img/skip.png" width="100%">
 *
 * @param {Number} count - The number of times, items emitted by source Observable should be skipped.
 * @return {Observable} An Observable that skips values emitted by the source Observable.
 *
 * @method skip
 * @owner Observable
 */
function skip(count) {
    return skip_1.skip(count)(this);
}
exports.skip = skip;
//# sourceMappingURL=skip.js.map

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var skipLast_1 = __webpack_require__(132);
/**
 * Skip the last `count` values emitted by the source Observable.
 *
 * <img src="./img/skipLast.png" width="100%">
 *
 * `skipLast` returns an Observable that accumulates a queue with a length
 * enough to store the first `count` values. As more values are received,
 * values are taken from the front of the queue and produced on the result
 * sequence. This causes values to be delayed.
 *
 * @example <caption>Skip the last 2 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 5);
 * var skipLastTwo = many.skipLast(2);
 * skipLastTwo.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 1 2 3
 *
 * @see {@link skip}
 * @see {@link skipUntil}
 * @see {@link skipWhile}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws
 * ArgumentOutOrRangeError if `i < 0`.
 *
 * @param {number} count Number of elements to skip from the end of the source Observable.
 * @returns {Observable<T>} An Observable that skips the last count values
 * emitted by the source Observable.
 * @method skipLast
 * @owner Observable
 */
function skipLast(count) {
    return skipLast_1.skipLast(count)(this);
}
exports.skipLast = skipLast;
//# sourceMappingURL=skipLast.js.map

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var skipUntil_1 = __webpack_require__(133);
/**
 * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
 *
 * <img src="./img/skipUntil.png" width="100%">
 *
 * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to
 * be mirrored by the resulting Observable.
 * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits
 * an item, then emits the remaining items.
 * @method skipUntil
 * @owner Observable
 */
function skipUntil(notifier) {
    return skipUntil_1.skipUntil(notifier)(this);
}
exports.skipUntil = skipUntil;
//# sourceMappingURL=skipUntil.js.map

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var skipWhile_1 = __webpack_require__(134);
/**
 * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
 * true, but emits all further source items as soon as the condition becomes false.
 *
 * <img src="./img/skipWhile.png" width="100%">
 *
 * @param {Function} predicate - A function to test each item emitted from the source Observable.
 * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the
 * specified predicate becomes false.
 * @method skipWhile
 * @owner Observable
 */
function skipWhile(predicate) {
    return skipWhile_1.skipWhile(predicate)(this);
}
exports.skipWhile = skipWhile;
//# sourceMappingURL=skipWhile.js.map

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var startWith_1 = __webpack_require__(135);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i - 0] = arguments[_i];
    }
    return startWith_1.startWith.apply(void 0, array)(this);
}
exports.startWith = startWith;
//# sourceMappingURL=startWith.js.map

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var subscribeOn_1 = __webpack_require__(454);
/**
 * Asynchronously subscribes Observers to this Observable on the specified IScheduler.
 *
 * <img src="./img/subscribeOn.png" width="100%">
 *
 * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.
 * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.
 .
 * @method subscribeOn
 * @owner Observable
 */
function subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return subscribeOn_1.subscribeOn(scheduler, delay)(this);
}
exports.subscribeOn = subscribeOn;
//# sourceMappingURL=subscribeOn.js.map

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var switchAll_1 = __webpack_require__(136);
/**
 * Converts a higher-order Observable into a first-order Observable by
 * subscribing to only the most recently emitted of those inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * previous inner Observable once a new one appears.</span>
 *
 * <img src="./img/switch.png" width="100%">
 *
 * `switch` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable subscribes to the inner Observable and
 * begins emitting the items emitted by that. So far, it behaves
 * like {@link mergeAll}. However, when a new inner Observable is emitted,
 * `switch` unsubscribes from the earlier-emitted inner Observable and
 * subscribes to the new inner Observable and begins emitting items from it. It
 * continues to behave like this for subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * // Each click event is mapped to an Observable that ticks every second
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var switched = higherOrder.switch();
 * // The outcome is that `switched` is essentially a timer that restarts
 * // on every click. The interval Observables from older clicks do not merge
 * // with the current interval Observable.
 * switched.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switchMap}
 * @see {@link switchMapTo}
 * @see {@link zipAll}
 *
 * @return {Observable<T>} An Observable that emits the items emitted by the
 * Observable most recently emitted by the source Observable.
 * @method switch
 * @name switch
 * @owner Observable
 */
function _switch() {
    return switchAll_1.switchAll()(this);
}
exports._switch = _switch;
//# sourceMappingURL=switch.js.map

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var switchMap_1 = __webpack_require__(55);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, emitting values only from the most recently projected Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link switch}.</span>
 *
 * <img src="./img/switchMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each time it observes one of these
 * inner Observables, the output Observable begins emitting the items emitted by
 * that inner Observable. When a new inner Observable is emitted, `switchMap`
 * stops emitting items from the earlier-emitted inner Observable and begins
 * emitting items from the new one. It continues to behave like this for
 * subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switch}
 * @see {@link switchMapTo}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking only the values from the most recently
 * projected inner Observable.
 * @method switchMap
 * @owner Observable
 */
function switchMap(project, resultSelector) {
    return switchMap_1.switchMap(project, resultSelector)(this);
}
exports.switchMap = switchMap;
//# sourceMappingURL=switchMap.js.map

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var switchMapTo_1 = __webpack_require__(137);
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is flattened multiple
 * times with {@link switch} in the output Observable.
 *
 * <span class="informal">It's like {@link switchMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/switchMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. The output Observables
 * emits values only from the most recently emitted instance of
 * `innerObservable`.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link switch}
 * @see {@link switchMap}
 * @see {@link mergeMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable, and taking only the values
 * from the most recently projected inner Observable.
 * @method switchMapTo
 * @owner Observable
 */
function switchMapTo(innerObservable, resultSelector) {
    return switchMapTo_1.switchMapTo(innerObservable, resultSelector)(this);
}
exports.switchMapTo = switchMapTo;
//# sourceMappingURL=switchMapTo.js.map

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var take_1 = __webpack_require__(138);
/**
 * Emits only the first `count` values emitted by the source Observable.
 *
 * <span class="informal">Takes the first `count` values from the source, then
 * completes.</span>
 *
 * <img src="./img/take.png" width="100%">
 *
 * `take` returns an Observable that emits only the first `count` values emitted
 * by the source Observable. If the source emits fewer than `count` values then
 * all of its values are emitted. After that, it completes, regardless if the
 * source completes.
 *
 * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
 * var interval = Rx.Observable.interval(1000);
 * var five = interval.take(5);
 * five.subscribe(x => console.log(x));
 *
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of `next` values to emit.
 * @return {Observable<T>} An Observable that emits only the first `count`
 * values emitted by the source Observable, or all of the values from the source
 * if the source emits fewer than `count` values.
 * @method take
 * @owner Observable
 */
function take(count) {
    return take_1.take(count)(this);
}
exports.take = take;
//# sourceMappingURL=take.js.map

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var takeLast_1 = __webpack_require__(56);
/**
 * Emits only the last `count` values emitted by the source Observable.
 *
 * <span class="informal">Remembers the latest `count` values, then emits those
 * only when the source completes.</span>
 *
 * <img src="./img/takeLast.png" width="100%">
 *
 * `takeLast` returns an Observable that emits at most the last `count` values
 * emitted by the source Observable. If the source emits fewer than `count`
 * values then all of its values are emitted. This operator must wait until the
 * `complete` notification emission from the source in order to emit the `next`
 * values on the output Observable, because otherwise it is impossible to know
 * whether or not more values will be emitted on the source. For this reason,
 * all values are emitted synchronously, followed by the complete notification.
 *
 * @example <caption>Take the last 3 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 100);
 * var lastThree = many.takeLast(3);
 * lastThree.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of values to emit from the end of
 * the sequence of values emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits at most the last count
 * values emitted by the source Observable.
 * @method takeLast
 * @owner Observable
 */
function takeLast(count) {
    return takeLast_1.takeLast(count)(this);
}
exports.takeLast = takeLast;
//# sourceMappingURL=takeLast.js.map

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var takeUntil_1 = __webpack_require__(139);
/**
 * Emits the values emitted by the source Observable until a `notifier`
 * Observable emits a value.
 *
 * <span class="informal">Lets values pass until a second Observable,
 * `notifier`, emits something. Then, it completes.</span>
 *
 * <img src="./img/takeUntil.png" width="100%">
 *
 * `takeUntil` subscribes and begins mirroring the source Observable. It also
 * monitors a second Observable, `notifier` that you provide. If the `notifier`
 * emits a value, the output Observable stops mirroring the source Observable
 * and completes.
 *
 * @example <caption>Tick every second until the first click happens</caption>
 * var interval = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = interval.takeUntil(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @param {Observable} notifier The Observable whose first emitted value will
 * cause the output Observable of `takeUntil` to stop emitting values from the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable until such time as `notifier` emits its first value.
 * @method takeUntil
 * @owner Observable
 */
function takeUntil(notifier) {
    return takeUntil_1.takeUntil(notifier)(this);
}
exports.takeUntil = takeUntil;
//# sourceMappingURL=takeUntil.js.map

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var takeWhile_1 = __webpack_require__(140);
/**
 * Emits values emitted by the source Observable so long as each value satisfies
 * the given `predicate`, and then completes as soon as this `predicate` is not
 * satisfied.
 *
 * <span class="informal">Takes values from the source only while they pass the
 * condition given. When the first value does not satisfy, it completes.</span>
 *
 * <img src="./img/takeWhile.png" width="100%">
 *
 * `takeWhile` subscribes and begins mirroring the source Observable. Each value
 * emitted on the source is given to the `predicate` function which returns a
 * boolean, representing a condition to be satisfied by the source values. The
 * output Observable emits the source values until such time as the `predicate`
 * returns false, at which point `takeWhile` stops mirroring the source
 * Observable and completes the output Observable.
 *
 * @example <caption>Emit click events only while the clientX property is greater than 200</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.takeWhile(ev => ev.clientX > 200);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates a value emitted by the source Observable and returns a boolean.
 * Also takes the (zero-based) index as the second argument.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable so long as each value satisfies the condition defined by the
 * `predicate`, then completes.
 * @method takeWhile
 * @owner Observable
 */
function takeWhile(predicate) {
    return takeWhile_1.takeWhile(predicate)(this);
}
exports.takeWhile = takeWhile;
//# sourceMappingURL=takeWhile.js.map

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var throttle_1 = __webpack_require__(34);
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for a duration determined by another Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link throttleTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/throttle.png" width="100%">
 *
 * `throttle` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled by calling the `durationSelector` function with the source value,
 * which returns the "duration" Observable. When the duration Observable emits a
 * value or completes, the timer is disabled, and this process repeats for the
 * next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration for each source value, returned as an Observable or a Promise.
 * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults
 * to `{ leading: true, trailing: false }`.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttle
 * @owner Observable
 */
function throttle(durationSelector, config) {
    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }
    return throttle_1.throttle(durationSelector, config)(this);
}
exports.throttle = throttle;
//# sourceMappingURL=throttle.js.map

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var throttle_1 = __webpack_require__(34);
var throttleTime_1 = __webpack_require__(142);
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for `duration` milliseconds, then repeats this process.
 *
 * <span class="informal">Lets a value pass, then ignores source values for the
 * next `duration` milliseconds.</span>
 *
 * <img src="./img/throttleTime.png" width="100%">
 *
 * `throttleTime` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled. After `duration` milliseconds (or the time unit determined
 * internally by the optional `scheduler`) has passed, the timer is disabled,
 * and this process repeats for the next source value. Optionally takes a
 * {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {number} duration Time to wait before emitting another value after
 * emitting the last value, measured in milliseconds or the time unit determined
 * internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the throttling.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttleTime
 * @owner Observable
 */
function throttleTime(duration, scheduler, config) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }
    return throttleTime_1.throttleTime(duration, scheduler, config)(this);
}
exports.throttleTime = throttleTime;
//# sourceMappingURL=throttleTime.js.map

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var timeout_1 = __webpack_require__(144);
/**
 *
 * Errors if Observable does not emit a value in given time span.
 *
 * <span class="informal">Timeouts on Observable that doesn't emit values fast enough.</span>
 *
 * <img src="./img/timeout.png" width="100%">
 *
 * `timeout` operator accepts as an argument either a number or a Date.
 *
 * If number was provided, it returns an Observable that behaves like a source
 * Observable, unless there is a period of time where there is no value emitted.
 * So if you provide `100` as argument and first value comes after 50ms from
 * the moment of subscription, this value will be simply re-emitted by the resulting
 * Observable. If however after that 100ms passes without a second value being emitted,
 * stream will end with an error and source Observable will be unsubscribed.
 * These checks are performed throughout whole lifecycle of Observable - from the moment
 * it was subscribed to, until it completes or errors itself. Thus every value must be
 * emitted within specified period since previous value.
 *
 * If provided argument was Date, returned Observable behaves differently. It throws
 * if Observable did not complete before provided Date. This means that periods between
 * emission of particular values do not matter in this case. If Observable did not complete
 * before provided Date, source Observable will be unsubscribed. Other than that, resulting
 * stream behaves just as source Observable.
 *
 * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)
 * when returned Observable will check if source stream emitted value or completed.
 *
 * @example <caption>Check if ticks are emitted within certain timespan</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(1100) // Let's use bigger timespan to be safe,
 *                       // since `interval` might fire a bit later then scheduled.
 * .subscribe(
 *     value => console.log(value), // Will emit numbers just as regular `interval` would.
 *     err => console.log(err) // Will never be called.
 * );
 *
 * seconds.timeout(900).subscribe(
 *     value => console.log(value), // Will never be called.
 *     err => console.log(err) // Will emit error before even first value is emitted,
 *                             // since it did not arrive within 900ms period.
 * );
 *
 * @example <caption>Use Date to check if Observable completed</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(new Date("December 17, 2020 03:24:00"))
 * .subscribe(
 *     value => console.log(value), // Will emit values as regular `interval` would
 *                                  // until December 17, 2020 at 03:24:00.
 *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,
 *                             // since Observable did not complete by then.
 * );
 *
 * @see {@link timeoutWith}
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.
 * @method timeout
 * @owner Observable
 */
function timeout(due, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return timeout_1.timeout(due, scheduler)(this);
}
exports.timeout = timeout;
//# sourceMappingURL=timeout.js.map

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var timeoutWith_1 = __webpack_require__(145);
/* tslint:enable:max-line-length */
/**
 *
 * Errors if Observable does not emit a value in given time span, in case of which
 * subscribes to the second Observable.
 *
 * <span class="informal">It's a version of `timeout` operator that let's you specify fallback Observable.</span>
 *
 * <img src="./img/timeoutWith.png" width="100%">
 *
 * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,
 * still accepting as a first argument either a number or a Date, which control - respectively -
 * when values of source Observable should be emitted or when it should complete.
 *
 * The only difference is that it accepts a second, required parameter. This parameter
 * should be an Observable which will be subscribed when source Observable fails any timeout check.
 * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting
 * values from second Observable. Note that this fallback Observable is not checked for timeouts
 * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second
 * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that
 * stream completes, it completes as well.
 *
 * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided
 * here - as a third, optional parameter. It still is used to schedule timeout checks and -
 * as a consequence - when second Observable will be subscribed, since subscription happens
 * immediately after failing check.
 *
 * @example <caption>Add fallback observable</caption>
 * const seconds = Rx.Observable.interval(1000);
 * const minutes = Rx.Observable.interval(60 * 1000);
 *
 * seconds.timeoutWith(900, minutes)
 *     .subscribe(
 *         value => console.log(value), // After 900ms, will start emitting `minutes`,
 *                                      // since first value of `seconds` will not arrive fast enough.
 *         err => console.log(err) // Would be called after 900ms in case of `timeout`,
 *                                 // but here will never be called.
 *     );
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable
 *                          passed as a second parameter.
 * @method timeoutWith
 * @owner Observable
 */
function timeoutWith(due, withObservable, scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return timeoutWith_1.timeoutWith(due, withObservable, scheduler)(this);
}
exports.timeoutWith = timeoutWith;
//# sourceMappingURL=timeoutWith.js.map

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var timestamp_1 = __webpack_require__(57);
/**
 * @param scheduler
 * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}
 * @method timestamp
 * @owner Observable
 */
function timestamp(scheduler) {
    if (scheduler === void 0) { scheduler = async_1.async; }
    return timestamp_1.timestamp(scheduler)(this);
}
exports.timestamp = timestamp;
//# sourceMappingURL=timestamp.js.map

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toArray_1 = __webpack_require__(146);
/**
 * Collects all source emissions and emits them as an array when the source completes.
 *
 * <span class="informal">Get all values inside an array when the source completes</span>
 *
 * <img src="./img/toArray.png" width="100%">
 *
 * `toArray` will wait until the source Observable completes
 * before emitting the array containing all emissions.
 * When the source Observable errors no array will be emitted.
 *
 * @example <caption>Create array from input</caption>
 * const input = Rx.Observable.interval(100).take(4);
 *
 * input.toArray()
 *   .subscribe(arr => console.log(arr)); // [0,1,2,3]
 *
 * @see {@link buffer}
 *
 * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}
 * @method toArray
 * @owner Observable
 */
function toArray() {
    return toArray_1.toArray()(this);
}
exports.toArray = toArray;
//# sourceMappingURL=toArray.js.map

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var window_1 = __webpack_require__(147);
/**
 * Branch out the source Observable values as a nested Observable whenever
 * `windowBoundaries` emits.
 *
 * <span class="informal">It's like {@link buffer}, but emits a nested Observable
 * instead of an array.</span>
 *
 * <img src="./img/window.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping
 * windows. It emits the current window and opens a new one whenever the
 * Observable `windowBoundaries` emits an item. Because each window is an
 * Observable, the output is a higher-order Observable.
 *
 * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var result = clicks.window(interval)
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link buffer}
 *
 * @param {Observable<any>} windowBoundaries An Observable that completes the
 * previous window and starts a new window.
 * @return {Observable<Observable<T>>} An Observable of windows, which are
 * Observables emitting values of the source Observable.
 * @method window
 * @owner Observable
 */
function window(windowBoundaries) {
    return window_1.window(windowBoundaries)(this);
}
exports.window = window;
//# sourceMappingURL=window.js.map

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var windowCount_1 = __webpack_require__(148);
/**
 * Branch out the source Observable values as a nested Observable with each
 * nested Observable emitting at most `windowSize` values.
 *
 * <span class="informal">It's like {@link bufferCount}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowCount.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows every `startWindowEvery`
 * items, each containing no more than `windowSize` items. When the source
 * Observable completes or encounters an error, the output Observable emits
 * the current window and propagates the notification from the source
 * Observable. If `startWindowEvery` is not provided, then new windows are
 * started immediately at the start of the source and when each window completes
 * with size `windowSize`.
 *
 * @example <caption>Ignore every 3rd click event, starting from the first one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(3)
 *   .map(win => win.skip(1)) // skip first of every 3 clicks
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Ignore every 3rd click event, starting from the third one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(2, 3)
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link bufferCount}
 *
 * @param {number} windowSize The maximum number of values emitted by each
 * window.
 * @param {number} [startWindowEvery] Interval at which to start a new window.
 * For example if `startWindowEvery` is `2`, then a new window will be started
 * on every other value from the source. A new window is started at the
 * beginning of the source by default.
 * @return {Observable<Observable<T>>} An Observable of windows, which in turn
 * are Observable of values.
 * @method windowCount
 * @owner Observable
 */
function windowCount(windowSize, startWindowEvery) {
    if (startWindowEvery === void 0) { startWindowEvery = 0; }
    return windowCount_1.windowCount(windowSize, startWindowEvery)(this);
}
exports.windowCount = windowCount;
//# sourceMappingURL=windowCount.js.map

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var async_1 = __webpack_require__(4);
var isNumeric_1 = __webpack_require__(26);
var isScheduler_1 = __webpack_require__(11);
var windowTime_1 = __webpack_require__(149);
function windowTime(windowTimeSpan) {
    var scheduler = async_1.async;
    var windowCreationInterval = null;
    var maxWindowSize = Number.POSITIVE_INFINITY;
    if (isScheduler_1.isScheduler(arguments[3])) {
        scheduler = arguments[3];
    }
    if (isScheduler_1.isScheduler(arguments[2])) {
        scheduler = arguments[2];
    }
    else if (isNumeric_1.isNumeric(arguments[2])) {
        maxWindowSize = arguments[2];
    }
    if (isScheduler_1.isScheduler(arguments[1])) {
        scheduler = arguments[1];
    }
    else if (isNumeric_1.isNumeric(arguments[1])) {
        windowCreationInterval = arguments[1];
    }
    return windowTime_1.windowTime(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this);
}
exports.windowTime = windowTime;
//# sourceMappingURL=windowTime.js.map

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var windowToggle_1 = __webpack_require__(150);
/**
 * Branch out the source Observable values as a nested Observable starting from
 * an emission from `openings` and ending when the output of `closingSelector`
 * emits.
 *
 * <span class="informal">It's like {@link bufferToggle}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowToggle.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows that contain those items
 * emitted by the source Observable between the time when the `openings`
 * Observable emits an item and when the Observable returned by
 * `closingSelector` emits an item.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var result = clicks.windowToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * ).mergeAll();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowWhen}
 * @see {@link bufferToggle}
 *
 * @param {Observable<O>} openings An observable of notifications to start new
 * windows.
 * @param {function(value: O): Observable} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns an Observable,
 * which, when it emits (either `next` or `complete`), signals that the
 * associated window should complete.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowToggle
 * @owner Observable
 */
function windowToggle(openings, closingSelector) {
    return windowToggle_1.windowToggle(openings, closingSelector)(this);
}
exports.windowToggle = windowToggle;
//# sourceMappingURL=windowToggle.js.map

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var windowWhen_1 = __webpack_require__(151);
/**
 * Branch out the source Observable values as a nested Observable using a
 * factory function of closing Observables to determine when to start a new
 * window.
 *
 * <span class="informal">It's like {@link bufferWhen}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowWhen.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping windows.
 * It emits the current window and opens a new one whenever the Observable
 * produced by the specified `closingSelector` function emits an item. The first
 * window is opened immediately when subscribing to the output Observable.
 *
 * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks
 *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link bufferWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals (on either `next` or
 * `complete`) when to close the previous window and start a new one.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowWhen
 * @owner Observable
 */
function windowWhen(closingSelector) {
    return windowWhen_1.windowWhen(closingSelector)(this);
}
exports.windowWhen = windowWhen;
//# sourceMappingURL=windowWhen.js.map

/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var withLatestFrom_1 = __webpack_require__(152);
/* tslint:enable:max-line-length */
/**
 * Combines the source Observable with other Observables to create an Observable
 * whose values are calculated from the latest values of each, only when the
 * source emits.
 *
 * <span class="informal">Whenever the source Observable emits a value, it
 * computes a formula using that value plus the latest values from other input
 * Observables, then emits the output of that formula.</span>
 *
 * <img src="./img/withLatestFrom.png" width="100%">
 *
 * `withLatestFrom` combines each value from the source Observable (the
 * instance) with the latest values from the other input Observables only when
 * the source emits a value, optionally using a `project` function to determine
 * the value to be emitted on the output Observable. All input Observables must
 * emit at least one value before the output Observable will emit a value.
 *
 * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var result = clicks.withLatestFrom(timer);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineLatest}
 *
 * @param {ObservableInput} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Function} [project] Projection function for combining values
 * together. Receives all values in order of the Observables passed, where the
 * first parameter is a value from the source Observable. (e.g.
 * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
 * passed, arrays will be emitted on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method withLatestFrom
 * @owner Observable
 */
function withLatestFrom() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
    }
    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);
}
exports.withLatestFrom = withLatestFrom;
//# sourceMappingURL=withLatestFrom.js.map

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var zip_1 = __webpack_require__(35);
/* tslint:enable:max-line-length */
/**
 * @param observables
 * @return {Observable<R>}
 * @method zip
 * @owner Observable
 */
function zipProto() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return zip_1.zip.apply(void 0, observables)(this);
}
exports.zipProto = zipProto;
//# sourceMappingURL=zip.js.map

/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var zipAll_1 = __webpack_require__(153);
/**
 * @param project
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method zipAll
 * @owner Observable
 */
function zipAll(project) {
    return zipAll_1.zipAll(project)(this);
}
exports.zipAll = zipAll;
//# sourceMappingURL=zipAll.js.map

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var audit_1 = __webpack_require__(45);
exports.audit = audit_1.audit;
var auditTime_1 = __webpack_require__(76);
exports.auditTime = auditTime_1.auditTime;
var buffer_1 = __webpack_require__(77);
exports.buffer = buffer_1.buffer;
var bufferCount_1 = __webpack_require__(78);
exports.bufferCount = bufferCount_1.bufferCount;
var bufferTime_1 = __webpack_require__(79);
exports.bufferTime = bufferTime_1.bufferTime;
var bufferToggle_1 = __webpack_require__(80);
exports.bufferToggle = bufferToggle_1.bufferToggle;
var bufferWhen_1 = __webpack_require__(81);
exports.bufferWhen = bufferWhen_1.bufferWhen;
var catchError_1 = __webpack_require__(82);
exports.catchError = catchError_1.catchError;
var combineAll_1 = __webpack_require__(83);
exports.combineAll = combineAll_1.combineAll;
var combineLatest_1 = __webpack_require__(31);
exports.combineLatest = combineLatest_1.combineLatest;
var concat_1 = __webpack_require__(84);
exports.concat = concat_1.concat;
var concatAll_1 = __webpack_require__(46);
exports.concatAll = concatAll_1.concatAll;
var concatMap_1 = __webpack_require__(47);
exports.concatMap = concatMap_1.concatMap;
var concatMapTo_1 = __webpack_require__(85);
exports.concatMapTo = concatMapTo_1.concatMapTo;
var count_1 = __webpack_require__(86);
exports.count = count_1.count;
var debounce_1 = __webpack_require__(87);
exports.debounce = debounce_1.debounce;
var debounceTime_1 = __webpack_require__(88);
exports.debounceTime = debounceTime_1.debounceTime;
var defaultIfEmpty_1 = __webpack_require__(48);
exports.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
var delay_1 = __webpack_require__(89);
exports.delay = delay_1.delay;
var delayWhen_1 = __webpack_require__(90);
exports.delayWhen = delayWhen_1.delayWhen;
var dematerialize_1 = __webpack_require__(91);
exports.dematerialize = dematerialize_1.dematerialize;
var distinct_1 = __webpack_require__(92);
exports.distinct = distinct_1.distinct;
var distinctUntilChanged_1 = __webpack_require__(49);
exports.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
var distinctUntilKeyChanged_1 = __webpack_require__(93);
exports.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
var elementAt_1 = __webpack_require__(94);
exports.elementAt = elementAt_1.elementAt;
var every_1 = __webpack_require__(95);
exports.every = every_1.every;
var exhaust_1 = __webpack_require__(96);
exports.exhaust = exhaust_1.exhaust;
var exhaustMap_1 = __webpack_require__(97);
exports.exhaustMap = exhaustMap_1.exhaustMap;
var expand_1 = __webpack_require__(98);
exports.expand = expand_1.expand;
var filter_1 = __webpack_require__(50);
exports.filter = filter_1.filter;
var finalize_1 = __webpack_require__(99);
exports.finalize = finalize_1.finalize;
var find_1 = __webpack_require__(51);
exports.find = find_1.find;
var findIndex_1 = __webpack_require__(100);
exports.findIndex = findIndex_1.findIndex;
var first_1 = __webpack_require__(101);
exports.first = first_1.first;
var groupBy_1 = __webpack_require__(102);
exports.groupBy = groupBy_1.groupBy;
var ignoreElements_1 = __webpack_require__(103);
exports.ignoreElements = ignoreElements_1.ignoreElements;
var isEmpty_1 = __webpack_require__(104);
exports.isEmpty = isEmpty_1.isEmpty;
var last_1 = __webpack_require__(105);
exports.last = last_1.last;
var map_1 = __webpack_require__(19);
exports.map = map_1.map;
var mapTo_1 = __webpack_require__(106);
exports.mapTo = mapTo_1.mapTo;
var materialize_1 = __webpack_require__(107);
exports.materialize = materialize_1.materialize;
var max_1 = __webpack_require__(108);
exports.max = max_1.max;
var merge_1 = __webpack_require__(109);
exports.merge = merge_1.merge;
var mergeAll_1 = __webpack_require__(32);
exports.mergeAll = mergeAll_1.mergeAll;
var mergeMap_1 = __webpack_require__(20);
exports.mergeMap = mergeMap_1.mergeMap;
var mergeMap_2 = __webpack_require__(20);
exports.flatMap = mergeMap_2.mergeMap;
var mergeMapTo_1 = __webpack_require__(110);
exports.mergeMapTo = mergeMapTo_1.mergeMapTo;
var mergeScan_1 = __webpack_require__(111);
exports.mergeScan = mergeScan_1.mergeScan;
var min_1 = __webpack_require__(112);
exports.min = min_1.min;
var multicast_1 = __webpack_require__(16);
exports.multicast = multicast_1.multicast;
var observeOn_1 = __webpack_require__(33);
exports.observeOn = observeOn_1.observeOn;
var onErrorResumeNext_1 = __webpack_require__(52);
exports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
var pairwise_1 = __webpack_require__(113);
exports.pairwise = pairwise_1.pairwise;
var partition_1 = __webpack_require__(114);
exports.partition = partition_1.partition;
var pluck_1 = __webpack_require__(115);
exports.pluck = pluck_1.pluck;
var publish_1 = __webpack_require__(116);
exports.publish = publish_1.publish;
var publishBehavior_1 = __webpack_require__(117);
exports.publishBehavior = publishBehavior_1.publishBehavior;
var publishLast_1 = __webpack_require__(118);
exports.publishLast = publishLast_1.publishLast;
var publishReplay_1 = __webpack_require__(119);
exports.publishReplay = publishReplay_1.publishReplay;
var race_1 = __webpack_require__(120);
exports.race = race_1.race;
var reduce_1 = __webpack_require__(21);
exports.reduce = reduce_1.reduce;
var repeat_1 = __webpack_require__(121);
exports.repeat = repeat_1.repeat;
var repeatWhen_1 = __webpack_require__(122);
exports.repeatWhen = repeatWhen_1.repeatWhen;
var retry_1 = __webpack_require__(123);
exports.retry = retry_1.retry;
var retryWhen_1 = __webpack_require__(124);
exports.retryWhen = retryWhen_1.retryWhen;
var refCount_1 = __webpack_require__(53);
exports.refCount = refCount_1.refCount;
var sample_1 = __webpack_require__(125);
exports.sample = sample_1.sample;
var sampleTime_1 = __webpack_require__(126);
exports.sampleTime = sampleTime_1.sampleTime;
var scan_1 = __webpack_require__(54);
exports.scan = scan_1.scan;
var sequenceEqual_1 = __webpack_require__(127);
exports.sequenceEqual = sequenceEqual_1.sequenceEqual;
var share_1 = __webpack_require__(128);
exports.share = share_1.share;
var shareReplay_1 = __webpack_require__(129);
exports.shareReplay = shareReplay_1.shareReplay;
var single_1 = __webpack_require__(130);
exports.single = single_1.single;
var skip_1 = __webpack_require__(131);
exports.skip = skip_1.skip;
var skipLast_1 = __webpack_require__(132);
exports.skipLast = skipLast_1.skipLast;
var skipUntil_1 = __webpack_require__(133);
exports.skipUntil = skipUntil_1.skipUntil;
var skipWhile_1 = __webpack_require__(134);
exports.skipWhile = skipWhile_1.skipWhile;
var startWith_1 = __webpack_require__(135);
exports.startWith = startWith_1.startWith;
/**
 * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be
 * treeshaken. Currently if this export is added back, it
 * forces apps to bring in asap scheduler along with
 * Immediate, root, and other supporting code.
 */
// export { subscribeOn } from './operators/subscribeOn';
var switchAll_1 = __webpack_require__(136);
exports.switchAll = switchAll_1.switchAll;
var switchMap_1 = __webpack_require__(55);
exports.switchMap = switchMap_1.switchMap;
var switchMapTo_1 = __webpack_require__(137);
exports.switchMapTo = switchMapTo_1.switchMapTo;
var take_1 = __webpack_require__(138);
exports.take = take_1.take;
var takeLast_1 = __webpack_require__(56);
exports.takeLast = takeLast_1.takeLast;
var takeUntil_1 = __webpack_require__(139);
exports.takeUntil = takeUntil_1.takeUntil;
var takeWhile_1 = __webpack_require__(140);
exports.takeWhile = takeWhile_1.takeWhile;
var tap_1 = __webpack_require__(141);
exports.tap = tap_1.tap;
var throttle_1 = __webpack_require__(34);
exports.throttle = throttle_1.throttle;
var throttleTime_1 = __webpack_require__(142);
exports.throttleTime = throttleTime_1.throttleTime;
var timeInterval_1 = __webpack_require__(143);
exports.timeInterval = timeInterval_1.timeInterval;
var timeout_1 = __webpack_require__(144);
exports.timeout = timeout_1.timeout;
var timeoutWith_1 = __webpack_require__(145);
exports.timeoutWith = timeoutWith_1.timeoutWith;
var timestamp_1 = __webpack_require__(57);
exports.timestamp = timestamp_1.timestamp;
var toArray_1 = __webpack_require__(146);
exports.toArray = toArray_1.toArray;
var window_1 = __webpack_require__(147);
exports.window = window_1.window;
var windowCount_1 = __webpack_require__(148);
exports.windowCount = windowCount_1.windowCount;
var windowTime_1 = __webpack_require__(149);
exports.windowTime = windowTime_1.windowTime;
var windowToggle_1 = __webpack_require__(150);
exports.windowToggle = windowToggle_1.windowToggle;
var windowWhen_1 = __webpack_require__(151);
exports.windowWhen = windowWhen_1.windowWhen;
var withLatestFrom_1 = __webpack_require__(152);
exports.withLatestFrom = withLatestFrom_1.withLatestFrom;
var zip_1 = __webpack_require__(35);
exports.zip = zip_1.zip;
var zipAll_1 = __webpack_require__(153);
exports.zipAll = zipAll_1.zipAll;
//# sourceMappingURL=operators.js.map

/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SubscribeOnObservable_1 = __webpack_require__(328);
/**
 * Asynchronously subscribes Observers to this Observable on the specified IScheduler.
 *
 * <img src="./img/subscribeOn.png" width="100%">
 *
 * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.
 * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.
 .
 * @method subscribeOn
 * @owner Observable
 */
function subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return function subscribeOnOperatorFunction(source) {
        return source.lift(new SubscribeOnOperator(scheduler, delay));
    };
}
exports.subscribeOn = subscribeOn;
var SubscribeOnOperator = (function () {
    function SubscribeOnOperator(scheduler, delay) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    SubscribeOnOperator.prototype.call = function (subscriber, source) {
        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
    };
    return SubscribeOnOperator;
}());
//# sourceMappingURL=subscribeOn.js.map

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(5);
/**
 * A unit of work to be executed in a {@link Scheduler}. An action is typically
 * created from within a Scheduler and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription {
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * }
 * ```
 *
 * @class Action<T>
 */
var Action = (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        _super.call(this);
    }
    /**
     * Schedules this action on its parent Scheduler for execution. May be passed
     * some context object, `state`. May happen at some point in the future,
     * according to the `delay` parameter, if specified.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler.
     * @return {void}
     */
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(Subscription_1.Subscription));
exports.Action = Action;
//# sourceMappingURL=Action.js.map

/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__(22);
var AnimationFrame_1 = __webpack_require__(466);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AnimationFrameAction = (function (_super) {
    __extends(AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If an animation frame has already been requested, don't request another
        // one. If an animation frame hasn't been requested yet, request one. Return
        // the current animation frame request id.
        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested animation frame and
        // set the scheduled flag to undefined so the next AnimationFrameAction will
        // request its own.
        if (scheduler.actions.length === 0) {
            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AnimationFrameAction;
}(AsyncAction_1.AsyncAction));
exports.AnimationFrameAction = AnimationFrameAction;
//# sourceMappingURL=AnimationFrameAction.js.map

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__(23);
var AnimationFrameScheduler = (function (_super) {
    __extends(AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        _super.apply(this, arguments);
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AnimationFrameScheduler = AnimationFrameScheduler;
//# sourceMappingURL=AnimationFrameScheduler.js.map

/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Immediate_1 = __webpack_require__(468);
var AsyncAction_1 = __webpack_require__(22);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsapAction = (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If a microtask has already been scheduled, don't schedule another
        // one. If a microtask hasn't been scheduled yet, schedule one now. Return
        // the current scheduled microtask id.
        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested microtask and
        // set the scheduled flag to undefined so the next AsapAction will schedule
        // its own.
        if (scheduler.actions.length === 0) {
            Immediate_1.Immediate.clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AsapAction;
}(AsyncAction_1.AsyncAction));
exports.AsapAction = AsapAction;
//# sourceMappingURL=AsapAction.js.map

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__(23);
var AsapScheduler = (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        _super.apply(this, arguments);
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AsapScheduler = AsapScheduler;
//# sourceMappingURL=AsapScheduler.js.map

/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction_1 = __webpack_require__(22);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var QueueAction = (function (_super) {
    __extends(QueueAction, _super);
    function QueueAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Otherwise flush the scheduler starting with this action.
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction_1.AsyncAction));
exports.QueueAction = QueueAction;
//# sourceMappingURL=QueueAction.js.map

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler_1 = __webpack_require__(23);
var QueueScheduler = (function (_super) {
    __extends(QueueScheduler, _super);
    function QueueScheduler() {
        _super.apply(this, arguments);
    }
    return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.QueueScheduler = QueueScheduler;
//# sourceMappingURL=QueueScheduler.js.map

/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var AnimationFrameAction_1 = __webpack_require__(456);
var AnimationFrameScheduler_1 = __webpack_require__(457);
/**
 *
 * Animation Frame Scheduler
 *
 * <span class="informal">Perform task when `window.requestAnimationFrame` would fire</span>
 *
 * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler
 * behaviour.
 *
 * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.
 * It makes sure scheduled task will happen just before next browser content repaint,
 * thus performing animations as efficiently as possible.
 *
 * @example <caption>Schedule div height animation</caption>
 * const div = document.querySelector('.some-div');
 *
 * Rx.Scheduler.schedule(function(height) {
 *   div.style.height = height + "px";
 *
 *   this.schedule(height + 1);  // `this` references currently executing Action,
 *                               // which we reschedule with new state
 * }, 0, 0);
 *
 * // You will see .some-div element growing in height
 *
 *
 * @static true
 * @name animationFrame
 * @owner Scheduler
 */
exports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
//# sourceMappingURL=animationFrame.js.map

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var Subscription_1 = __webpack_require__(5);
var SubscriptionLoggable_1 = __webpack_require__(158);
var applyMixins_1 = __webpack_require__(161);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ColdObservable = (function (_super) {
    __extends(ColdObservable, _super);
    function ColdObservable(messages, scheduler) {
        _super.call(this, function (subscriber) {
            var observable = this;
            var index = observable.logSubscribedFrame();
            subscriber.add(new Subscription_1.Subscription(function () {
                observable.logUnsubscribedFrame(index);
            }));
            observable.scheduleMessages(subscriber);
            return subscriber;
        });
        this.messages = messages;
        this.subscriptions = [];
        this.scheduler = scheduler;
    }
    ColdObservable.prototype.scheduleMessages = function (subscriber) {
        var messagesLength = this.messages.length;
        for (var i = 0; i < messagesLength; i++) {
            var message = this.messages[i];
            subscriber.add(this.scheduler.schedule(function (_a) {
                var message = _a.message, subscriber = _a.subscriber;
                message.notification.observe(subscriber);
            }, message.frame, { message: message, subscriber: subscriber }));
        }
    };
    return ColdObservable;
}(Observable_1.Observable));
exports.ColdObservable = ColdObservable;
applyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
//# sourceMappingURL=ColdObservable.js.map

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(6);
var Subscription_1 = __webpack_require__(5);
var SubscriptionLoggable_1 = __webpack_require__(158);
var applyMixins_1 = __webpack_require__(161);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var HotObservable = (function (_super) {
    __extends(HotObservable, _super);
    function HotObservable(messages, scheduler) {
        _super.call(this);
        this.messages = messages;
        this.subscriptions = [];
        this.scheduler = scheduler;
    }
    /** @deprecated internal use only */ HotObservable.prototype._subscribe = function (subscriber) {
        var subject = this;
        var index = subject.logSubscribedFrame();
        subscriber.add(new Subscription_1.Subscription(function () {
            subject.logUnsubscribedFrame(index);
        }));
        return _super.prototype._subscribe.call(this, subscriber);
    };
    HotObservable.prototype.setup = function () {
        var subject = this;
        var messagesLength = subject.messages.length;
        /* tslint:disable:no-var-keyword */
        for (var i = 0; i < messagesLength; i++) {
            (function () {
                var message = subject.messages[i];
                /* tslint:enable */
                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);
            })();
        }
    };
    return HotObservable;
}(Subject_1.Subject));
exports.HotObservable = HotObservable;
applyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
//# sourceMappingURL=HotObservable.js.map

/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(0);
var Notification_1 = __webpack_require__(17);
var ColdObservable_1 = __webpack_require__(463);
var HotObservable_1 = __webpack_require__(464);
var SubscriptionLog_1 = __webpack_require__(157);
var VirtualTimeScheduler_1 = __webpack_require__(154);
var defaultMaxFrame = 750;
var TestScheduler = (function (_super) {
    __extends(TestScheduler, _super);
    function TestScheduler(assertDeepEqual) {
        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);
        this.assertDeepEqual = assertDeepEqual;
        this.hotObservables = [];
        this.coldObservables = [];
        this.flushTests = [];
    }
    TestScheduler.prototype.createTime = function (marbles) {
        var indexOf = marbles.indexOf('|');
        if (indexOf === -1) {
            throw new Error('marble diagram for time should have a completion marker "|"');
        }
        return indexOf * TestScheduler.frameTimeFactor;
    };
    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {
        if (marbles.indexOf('^') !== -1) {
            throw new Error('cold observable cannot have subscription offset "^"');
        }
        if (marbles.indexOf('!') !== -1) {
            throw new Error('cold observable cannot have unsubscription marker "!"');
        }
        var messages = TestScheduler.parseMarbles(marbles, values, error);
        var cold = new ColdObservable_1.ColdObservable(messages, this);
        this.coldObservables.push(cold);
        return cold;
    };
    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {
        if (marbles.indexOf('!') !== -1) {
            throw new Error('hot observable cannot have unsubscription marker "!"');
        }
        var messages = TestScheduler.parseMarbles(marbles, values, error);
        var subject = new HotObservable_1.HotObservable(messages, this);
        this.hotObservables.push(subject);
        return subject;
    };
    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {
        var _this = this;
        var messages = [];
        observable.subscribe(function (value) {
            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });
        }, function (err) {
            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });
        }, function () {
            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });
        });
        return messages;
    };
    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {
        var _this = this;
        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }
        var actual = [];
        var flushTest = { actual: actual, ready: false };
        var unsubscriptionFrame = TestScheduler
            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;
        var subscription;
        this.schedule(function () {
            subscription = observable.subscribe(function (x) {
                var value = x;
                // Support Observable-of-Observables
                if (x instanceof Observable_1.Observable) {
                    value = _this.materializeInnerObservable(value, _this.frame);
                }
                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });
            }, function (err) {
                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });
            }, function () {
                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });
            });
        }, 0);
        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);
        }
        this.flushTests.push(flushTest);
        return {
            toBe: function (marbles, values, errorValue) {
                flushTest.ready = true;
                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);
            }
        };
    };
    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {
        var flushTest = { actual: actualSubscriptionLogs, ready: false };
        this.flushTests.push(flushTest);
        return {
            toBe: function (marbles) {
                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;
                flushTest.ready = true;
                flushTest.expected = marblesArray.map(function (marbles) {
                    return TestScheduler.parseMarblesAsSubscriptions(marbles);
                });
            }
        };
    };
    TestScheduler.prototype.flush = function () {
        var hotObservables = this.hotObservables;
        while (hotObservables.length > 0) {
            hotObservables.shift().setup();
        }
        _super.prototype.flush.call(this);
        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });
        while (readyFlushTests.length > 0) {
            var test = readyFlushTests.shift();
            this.assertDeepEqual(test.actual, test.expected);
        }
    };
    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {
        if (typeof marbles !== 'string') {
            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);
        }
        var len = marbles.length;
        var groupStart = -1;
        var subscriptionFrame = Number.POSITIVE_INFINITY;
        var unsubscriptionFrame = Number.POSITIVE_INFINITY;
        for (var i = 0; i < len; i++) {
            var frame = i * this.frameTimeFactor;
            var c = marbles[i];
            switch (c) {
                case '-':
                case ' ':
                    break;
                case '(':
                    groupStart = frame;
                    break;
                case ')':
                    groupStart = -1;
                    break;
                case '^':
                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {
                        throw new Error('found a second subscription point \'^\' in a ' +
                            'subscription marble diagram. There can only be one.');
                    }
                    subscriptionFrame = groupStart > -1 ? groupStart : frame;
                    break;
                case '!':
                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
                        throw new Error('found a second subscription point \'^\' in a ' +
                            'subscription marble diagram. There can only be one.');
                    }
                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;
                    break;
                default:
                    throw new Error('there can only be \'^\' and \'!\' markers in a ' +
                        'subscription marble diagram. Found instead \'' + c + '\'.');
            }
        }
        if (unsubscriptionFrame < 0) {
            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);
        }
        else {
            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);
        }
    };
    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {
        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }
        if (marbles.indexOf('!') !== -1) {
            throw new Error('conventional marble diagrams cannot have the ' +
                'unsubscription marker "!"');
        }
        var len = marbles.length;
        var testMessages = [];
        var subIndex = marbles.indexOf('^');
        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);
        var getValue = typeof values !== 'object' ?
            function (x) { return x; } :
            function (x) {
                // Support Observable-of-Observables
                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {
                    return values[x].messages;
                }
                return values[x];
            };
        var groupStart = -1;
        for (var i = 0; i < len; i++) {
            var frame = i * this.frameTimeFactor + frameOffset;
            var notification = void 0;
            var c = marbles[i];
            switch (c) {
                case '-':
                case ' ':
                    break;
                case '(':
                    groupStart = frame;
                    break;
                case ')':
                    groupStart = -1;
                    break;
                case '|':
                    notification = Notification_1.Notification.createComplete();
                    break;
                case '^':
                    break;
                case '#':
                    notification = Notification_1.Notification.createError(errorValue || 'error');
                    break;
                default:
                    notification = Notification_1.Notification.createNext(getValue(c));
                    break;
            }
            if (notification) {
                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });
            }
        }
        return testMessages;
    };
    return TestScheduler;
}(VirtualTimeScheduler_1.VirtualTimeScheduler));
exports.TestScheduler = TestScheduler;
//# sourceMappingURL=TestScheduler.js.map

/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(10);
var RequestAnimationFrameDefinition = (function () {
    function RequestAnimationFrameDefinition(root) {
        if (root.requestAnimationFrame) {
            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);
            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);
        }
        else if (root.mozRequestAnimationFrame) {
            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);
            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);
        }
        else if (root.webkitRequestAnimationFrame) {
            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);
            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);
        }
        else if (root.msRequestAnimationFrame) {
            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);
            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);
        }
        else if (root.oRequestAnimationFrame) {
            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);
            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);
        }
        else {
            this.cancelAnimationFrame = root.clearTimeout.bind(root);
            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };
        }
    }
    return RequestAnimationFrameDefinition;
}());
exports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;
exports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);
//# sourceMappingURL=AnimationFrame.js.map

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FastMap = (function () {
    function FastMap() {
        this.values = {};
    }
    FastMap.prototype.delete = function (key) {
        this.values[key] = null;
        return true;
    };
    FastMap.prototype.set = function (key, value) {
        this.values[key] = value;
        return this;
    };
    FastMap.prototype.get = function (key) {
        return this.values[key];
    };
    FastMap.prototype.forEach = function (cb, thisArg) {
        var values = this.values;
        for (var key in values) {
            if (values.hasOwnProperty(key) && values[key] !== null) {
                cb.call(thisArg, values[key], key);
            }
        }
    };
    FastMap.prototype.clear = function () {
        this.values = {};
    };
    return FastMap;
}());
exports.FastMap = FastMap;
//# sourceMappingURL=FastMap.js.map

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(clearImmediate, setImmediate) {/**
Some credit for this helper goes to http://github.com/YuzuJS/setImmediate
*/

var root_1 = __webpack_require__(10);
var ImmediateDefinition = (function () {
    function ImmediateDefinition(root) {
        this.root = root;
        if (root.setImmediate && typeof root.setImmediate === 'function') {
            this.setImmediate = root.setImmediate.bind(root);
            this.clearImmediate = root.clearImmediate.bind(root);
        }
        else {
            this.nextHandle = 1;
            this.tasksByHandle = {};
            this.currentlyRunningATask = false;
            // Don't get fooled by e.g. browserify environments.
            if (this.canUseProcessNextTick()) {
                // For Node.js before 0.9
                this.setImmediate = this.createProcessNextTickSetImmediate();
            }
            else if (this.canUsePostMessage()) {
                // For non-IE10 modern browsers
                this.setImmediate = this.createPostMessageSetImmediate();
            }
            else if (this.canUseMessageChannel()) {
                // For web workers, where supported
                this.setImmediate = this.createMessageChannelSetImmediate();
            }
            else if (this.canUseReadyStateChange()) {
                // For IE 6–8
                this.setImmediate = this.createReadyStateChangeSetImmediate();
            }
            else {
                // For older browsers
                this.setImmediate = this.createSetTimeoutSetImmediate();
            }
            var ci = function clearImmediate(handle) {
                delete clearImmediate.instance.tasksByHandle[handle];
            };
            ci.instance = this;
            this.clearImmediate = ci;
        }
    }
    ImmediateDefinition.prototype.identify = function (o) {
        return this.root.Object.prototype.toString.call(o);
    };
    ImmediateDefinition.prototype.canUseProcessNextTick = function () {
        return this.identify(this.root.process) === '[object process]';
    };
    ImmediateDefinition.prototype.canUseMessageChannel = function () {
        return Boolean(this.root.MessageChannel);
    };
    ImmediateDefinition.prototype.canUseReadyStateChange = function () {
        var document = this.root.document;
        return Boolean(document && 'onreadystatechange' in document.createElement('script'));
    };
    ImmediateDefinition.prototype.canUsePostMessage = function () {
        var root = this.root;
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `root.postMessage` means something completely different and can't be used for this purpose.
        if (root.postMessage && !root.importScripts) {
            var postMessageIsAsynchronous_1 = true;
            var oldOnMessage = root.onmessage;
            root.onmessage = function () {
                postMessageIsAsynchronous_1 = false;
            };
            root.postMessage('', '*');
            root.onmessage = oldOnMessage;
            return postMessageIsAsynchronous_1;
        }
        return false;
    };
    // This function accepts the same arguments as setImmediate, but
    // returns a function that requires no arguments.
    ImmediateDefinition.prototype.partiallyApplied = function (handler) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var fn = function result() {
            var _a = result, handler = _a.handler, args = _a.args;
            if (typeof handler === 'function') {
                handler.apply(undefined, args);
            }
            else {
                (new Function('' + handler))();
            }
        };
        fn.handler = handler;
        fn.args = args;
        return fn;
    };
    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {
        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);
        return this.nextHandle++;
    };
    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {
        var fn = function setImmediate() {
            var instance = setImmediate.instance;
            var handle = instance.addFromSetImmediateArguments(arguments);
            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));
            return handle;
        };
        fn.instance = this;
        return fn;
    };
    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
        var root = this.root;
        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';
        var onGlobalMessage = function globalMessageHandler(event) {
            var instance = globalMessageHandler.instance;
            if (event.source === root &&
                typeof event.data === 'string' &&
                event.data.indexOf(messagePrefix) === 0) {
                instance.runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };
        onGlobalMessage.instance = this;
        root.addEventListener('message', onGlobalMessage, false);
        var fn = function setImmediate() {
            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;
            var handle = instance.addFromSetImmediateArguments(arguments);
            instance.root.postMessage(messagePrefix + handle, '*');
            return handle;
        };
        fn.instance = this;
        fn.messagePrefix = messagePrefix;
        return fn;
    };
    ImmediateDefinition.prototype.runIfPresent = function (handle) {
        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'
        // So if we're currently running a task, we'll need to delay this invocation.
        if (this.currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // 'too much recursion' error.
            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);
        }
        else {
            var task = this.tasksByHandle[handle];
            if (task) {
                this.currentlyRunningATask = true;
                try {
                    task();
                }
                finally {
                    this.clearImmediate(handle);
                    this.currentlyRunningATask = false;
                }
            }
        }
    };
    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {
        var _this = this;
        var channel = new this.root.MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            _this.runIfPresent(handle);
        };
        var fn = function setImmediate() {
            var _a = setImmediate, channel = _a.channel, instance = _a.instance;
            var handle = instance.addFromSetImmediateArguments(arguments);
            channel.port2.postMessage(handle);
            return handle;
        };
        fn.channel = channel;
        fn.instance = this;
        return fn;
    };
    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {
        var fn = function setImmediate() {
            var instance = setImmediate.instance;
            var root = instance.root;
            var doc = root.document;
            var html = doc.documentElement;
            var handle = instance.addFromSetImmediateArguments(arguments);
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement('script');
            script.onreadystatechange = function () {
                instance.runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
            return handle;
        };
        fn.instance = this;
        return fn;
    };
    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {
        var fn = function setImmediate() {
            var instance = setImmediate.instance;
            var handle = instance.addFromSetImmediateArguments(arguments);
            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);
            return handle;
        };
        fn.instance = this;
        return fn;
    };
    return ImmediateDefinition;
}());
exports.ImmediateDefinition = ImmediateDefinition;
exports.Immediate = new ImmediateDefinition(root_1.root);
//# sourceMappingURL=Immediate.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(166).clearImmediate, __webpack_require__(166).setImmediate))

/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(10);
var MapPolyfill_1 = __webpack_require__(470);
exports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();
//# sourceMappingURL=Map.js.map

/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var MapPolyfill = (function () {
    function MapPolyfill() {
        this.size = 0;
        this._values = [];
        this._keys = [];
    }
    MapPolyfill.prototype.get = function (key) {
        var i = this._keys.indexOf(key);
        return i === -1 ? undefined : this._values[i];
    };
    MapPolyfill.prototype.set = function (key, value) {
        var i = this._keys.indexOf(key);
        if (i === -1) {
            this._keys.push(key);
            this._values.push(value);
            this.size++;
        }
        else {
            this._values[i] = value;
        }
        return this;
    };
    MapPolyfill.prototype.delete = function (key) {
        var i = this._keys.indexOf(key);
        if (i === -1) {
            return false;
        }
        this._values.splice(i, 1);
        this._keys.splice(i, 1);
        this.size--;
        return true;
    };
    MapPolyfill.prototype.clear = function () {
        this._keys.length = 0;
        this._values.length = 0;
        this.size = 0;
    };
    MapPolyfill.prototype.forEach = function (cb, thisArg) {
        for (var i = 0; i < this.size; i++) {
            cb.call(thisArg, this._values[i], this._keys[i]);
        }
    };
    return MapPolyfill;
}());
exports.MapPolyfill = MapPolyfill;
//# sourceMappingURL=MapPolyfill.js.map

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(10);
function minimalSetImpl() {
    // THIS IS NOT a full impl of Set, this is just the minimum
    // bits of functionality we need for this library.
    return (function () {
        function MinimalSet() {
            this._values = [];
        }
        MinimalSet.prototype.add = function (value) {
            if (!this.has(value)) {
                this._values.push(value);
            }
        };
        MinimalSet.prototype.has = function (value) {
            return this._values.indexOf(value) !== -1;
        };
        Object.defineProperty(MinimalSet.prototype, "size", {
            get: function () {
                return this._values.length;
            },
            enumerable: true,
            configurable: true
        });
        MinimalSet.prototype.clear = function () {
            this._values.length = 0;
        };
        return MinimalSet;
    }());
}
exports.minimalSetImpl = minimalSetImpl;
exports.Set = root_1.root.Set || minimalSetImpl();
//# sourceMappingURL=Set.js.map

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(10);
function assignImpl(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    var len = sources.length;
    for (var i = 0; i < len; i++) {
        var source = sources[i];
        for (var k in source) {
            if (source.hasOwnProperty(k)) {
                target[k] = source[k];
            }
        }
    }
    return target;
}
exports.assignImpl = assignImpl;
;
function getAssign(root) {
    return root.Object.assign || assignImpl;
}
exports.getAssign = getAssign;
exports.assign = getAssign(root_1.root);
//# sourceMappingURL=assign.js.map

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function not(pred, thisArg) {
    function notPred() {
        return !(notPred.pred.apply(notPred.thisArg, arguments));
    }
    notPred.pred = pred;
    notPred.thisArg = thisArg;
    return notPred;
}
exports.not = not;
//# sourceMappingURL=not.js.map

/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Subscriber_1 = __webpack_require__(1);
var rxSubscriber_1 = __webpack_require__(37);
var Observer_1 = __webpack_require__(66);
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
            return nextOrObserver[rxSubscriber_1.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer_1.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
//# sourceMappingURL=toSubscriber.js.map

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(63), __webpack_require__(180)))

/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWAssignedProductsController = /** @class */ (function () {
    //@ngInject
    function SWAssignedProductsController(collectionConfigService, utilityService) {
        this.collectionConfigService = collectionConfigService;
        this.utilityService = utilityService;
        this.collectionConfig = collectionConfigService.newCollectionConfig("Product");
        this.collectionConfig.addDisplayProperty("productID,productName,productCode,calculatedSalePrice,activeFlag,publishedFlag,productType.productTypeNamePath,productType.productTypeName,defaultSku.price");
        this.alreadySelectedProductsCollectionConfig = collectionConfigService.newCollectionConfig("ProductListingPage");
        this.alreadySelectedProductsCollectionConfig.addDisplayProperty("productListingPageID,sortOrder,product.productID,product.productName,product.productCode,product.calculatedSalePrice,product.activeFlag,product.publishedFlag");
        this.alreadySelectedProductsCollectionConfig.addFilter("content.contentID", this.contentId, "=");
        this.typeaheadDataKey = utilityService.createID(32);
    }
    return SWAssignedProductsController;
}());
exports.SWAssignedProductsController = SWAssignedProductsController;
var SWAssignedProducts = /** @class */ (function () {
    //@ngInject
    function SWAssignedProducts($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder) {
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.contentPartialsPath = contentPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            contentId: "@?",
            edit: "=?",
            productSortProperty: "@?",
            productSortDefaultDirection: "@?"
        };
        this.controller = SWAssignedProductsController;
        this.controllerAs = "swAssignedProducts";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "/assignedproducts.html";
    }
    SWAssignedProducts.Factory = function () {
        var directive = function ($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder) { return new SWAssignedProducts($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'paginationService',
            'contentPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWAssignedProducts;
}());
exports.SWAssignedProducts = SWAssignedProducts;


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWContentBasic = /** @class */ (function () {
    function SWContentBasic($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'EA',
            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "contentbasic.html",
            link: function (scope, element, attrs) {
                if (!scope.content.$$isPersisted()) {
                    if (angular.isDefined($routeParams.siteID)) {
                        var sitePromise;
                        var options = {
                            id: $routeParams.siteID
                        };
                        sitePromise = $hibachi.getSite(options);
                        sitePromise.promise.then(function () {
                            var site = sitePromise.value;
                            scope.content.$$setSite(site);
                        });
                    }
                    else {
                        var site = $hibachi.newSite();
                        scope.content.$$setSite(site);
                    }
                    var parentContent;
                    if (angular.isDefined($routeParams.parentContentID)) {
                        var parentContentPromise;
                        var options = {
                            id: $routeParams.parentContentID
                        };
                        parentContentPromise = $hibachi.getContent(options);
                        parentContentPromise.promise.then(function () {
                            var parentContent = parentContentPromise.value;
                            scope.content.$$setParentContent(parentContent);
                            $log.debug('contenttest');
                            $log.debug(scope.content);
                        });
                    }
                    else {
                        var parentContent = $hibachi.newContent();
                        scope.content.$$setParentContent(parentContent);
                    }
                    var contentTemplateType = $hibachi.newType();
                    scope.content.$$setContentTemplateType(contentTemplateType);
                }
                else {
                    scope.content.$$getSite();
                    scope.content.$$getParentContent();
                    scope.content.$$getContentTemplateType();
                }
            }
        };
    }
    SWContentBasic.Factory = function () {
        var directive = function ($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) { return new SWContentBasic($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$routeParams',
            '$hibachi',
            'formService',
            'contentPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWContentBasic;
}());
exports.SWContentBasic = SWContentBasic;


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWContentEditor = /** @class */ (function () {
    function SWContentEditor($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'EA',
            scope: {
                content: "="
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "contenteditor.html",
            link: function (scope, element, attrs) {
                scope.editorOptions = CKEDITOR.editorConfig;
                scope.onContentChange = function () {
                    var form = formService.getForm('contentEditor');
                    form.contentBody.$setDirty();
                };
                //                scope.saveContent = function(){
                //                   var urlString = _config.baseURL+'/index.cfm/?slatAction=api:main.post';
                //                   var params = {
                //                        entityID:scope.content.contentID,
                //                        templateHTML:scope.content.templateHTML,
                //                        context:'saveTemplateHTML',
                //                        entityName:'content'
                //                   }
                //                   $http.post(urlString,
                //                        {
                //                            params:params
                //                        }
                //                    )
                //                    .success(function(data){
                //                    }).error(function(reason){
                //                    });
                //                }
            }
        };
    }
    SWContentEditor.Factory = function () {
        var directive = function ($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) { return new SWContentEditor($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$location',
            '$http',
            '$hibachi',
            'formService',
            'contentPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWContentEditor;
}());
exports.SWContentEditor = SWContentEditor;


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWContentListController = /** @class */ (function () {
    //@ngInject
    function SWContentListController($scope, $log, $timeout, $hibachi, paginationService, observerService, collectionConfigService, localStorageService) {
        var _this = this;
        this.$scope = $scope;
        this.$log = $log;
        this.$timeout = $timeout;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.observerService = observerService;
        this.collectionConfigService = collectionConfigService;
        this.localStorageService = localStorageService;
        this.openRoot = true;
        this.$log.debug('slatwallcontentList init');
        var pageShow = 50;
        if (this.pageShow !== 'Auto') {
            pageShow = this.pageShow;
        }
        this.pageShowOptions = [
            { display: 10, value: 10 },
            { display: 20, value: 20 },
            { display: 50, value: 50 },
            { display: 250, value: 250 }
        ];
        this.loadingCollection = false;
        if (this.localStorageService.hasItem('selectedSiteOption')) {
            this.selectedSite = this.localStorageService.getItem('selectedSiteOption');
        }
        this.orderBy;
        var orderByConfig;
        this.getCollection = function (isSearching) {
            _this.collectionConfig = collectionConfigService.newCollectionConfig('Content');
            var columnsConfig = [
                //{"propertyIdentifier":"_content_childContents","title":"","isVisible":true,"isDeletable":true,"isSearchable":true,"isExportable":true,"ormtype":"string","aggregate":{"aggregateFunction":"COUNT","aggregateAlias":"childContentsCount"}},
                {
                    propertyIdentifier: '_content.contentID',
                    isVisible: false,
                    ormtype: 'id',
                    isSearchable: true
                },
                {
                    propertyIdentifier: '_content.urlTitlePath',
                    isVisible: false,
                    isSearchable: true
                },
                //need to get template via settings
                {
                    propertyIdentifier: '_content.allowPurchaseFlag',
                    isVisible: true,
                    ormtype: 'boolean',
                    isSearchable: false
                },
                {
                    propertyIdentifier: '_content.productListingPageFlag',
                    isVisible: true,
                    ormtype: 'boolean',
                    isSearchable: false
                },
                {
                    propertyIdentifier: '_content.activeFlag',
                    isVisible: true,
                    ormtype: 'boolean',
                    isSearchable: false
                }
            ];
            var options = {
                currentPage: '1',
                pageShow: '1',
                keywords: _this.keywords
            };
            var column = {};
            if (!isSearching || _this.keywords === '') {
                _this.isSearching = false;
                var filterGroupsConfig = [
                    {
                        "filterGroup": [
                            {
                                "propertyIdentifier": "parentContent",
                                "comparisonOperator": "is",
                                "value": 'null'
                            }
                        ]
                    }
                ];
                column = {
                    propertyIdentifier: '_content.title',
                    isVisible: true,
                    ormtype: 'string',
                    isSearchable: true,
                    tdclass: 'primary'
                };
                columnsConfig.unshift(column);
            }
            else {
                _this.collectionConfig.setKeywords(_this.keywords);
                _this.isSearching = true;
                var filterGroupsConfig = [
                    {
                        "filterGroup": [
                            {
                                "propertyIdentifier": "excludeFromSearch",
                                "comparisonOperator": "!=",
                                "value": true
                            }
                        ]
                    }
                ];
                column = {
                    propertyIdentifier: '_content.title',
                    isVisible: false,
                    ormtype: 'string',
                    isSearchable: true
                };
                columnsConfig.unshift(column);
                var titlePathColumn = {
                    propertyIdentifier: '_content.titlePath',
                    isVisible: true,
                    ormtype: 'string',
                    isSearchable: false
                };
                columnsConfig.unshift(titlePathColumn);
            }
            //if we have a selected Site add the filter
            if (_this.selectedSite && _this.selectedSite.siteID) {
                var selectedSiteFilter = {
                    logicalOperator: "AND",
                    propertyIdentifier: "site.siteID",
                    comparisonOperator: "=",
                    value: _this.selectedSite.siteID
                };
                filterGroupsConfig[0].filterGroup.push(selectedSiteFilter);
            }
            if (angular.isDefined(_this.orderBy)) {
                var orderByConfig = [];
                orderByConfig.push(_this.orderBy);
                options.orderByConfig = angular.toJson(orderByConfig);
            }
            angular.forEach(columnsConfig, function (column) {
                _this.collectionConfig.addColumn(column.propertyIdentifier, column.title, column);
            });
            _this.collectionConfig.addDisplayAggregate('childContents', 'COUNT', 'childContentsCount', { isVisible: false, isSearchable: false, title: 'test' });
            _this.collectionConfig.addDisplayProperty('site.siteID', undefined, {
                isVisible: false,
                ormtype: 'id',
                isSearchable: false
            });
            _this.collectionConfig.addDisplayProperty('site.domainNames', undefined, {
                isVisible: false,
                isSearchable: true
            });
            angular.forEach(filterGroupsConfig[0].filterGroup, function (filter) {
                _this.collectionConfig.addFilter(filter.propertyIdentifier, filter.value, filter.comparisonOperator, filter.logicalOperator);
            });
            _this.collectionListingPromise = _this.collectionConfig.getEntity();
            _this.collectionListingPromise.then(function (value) {
                _this.$timeout(function () {
                    _this.collection = value;
                    _this.collection.collectionConfig = _this.collectionConfig;
                    _this.firstLoad = true;
                    _this.loadingCollection = false;
                });
            });
            return _this.collectionListingPromise;
        };
        //this.getCollection(false);
        this.loadingCollection = false;
        this.searchCollection = function () {
            $log.debug('search with keywords');
            $log.debug(_this.keywords);
            $('.childNode').remove();
            //Set current page here so that the pagination does not break when getting collection
            _this.loadingCollection = true;
            var promise = _this.getCollection(true);
            promise.then(function () {
                _this.collection.collectionConfig = _this.collectionConfig;
                _this.loadingCollection = false;
            });
        };
        var siteChanged = function (selectedSiteOption) {
            _this.localStorageService.setItem('selectedSiteOption', selectedSiteOption);
            _this.selectedSite = _this.localStorageService.getItem('selectedSiteOption');
            _this.openRoot = true;
            _this.getCollection();
        };
        this.observerService.attach(siteChanged, 'optionsChanged', 'siteOptions');
        var sortChanged = function (orderBy) {
            _this.orderBy = orderBy;
            _this.getCollection();
        };
        this.observerService.attach(sortChanged, 'sortByColumn', 'siteSorting');
        var optionsLoaded = function () {
            var option;
            if (_this.selectedSite) {
                option = _this.selectedSite;
            }
            _this.observerService.notify('selectOption', option);
        };
        this.observerService.attach(optionsLoaded, 'optionsLoaded', 'siteOptionsLoaded');
    }
    return SWContentListController;
}());
var SWContentList = /** @class */ (function () {
    //@ngInject
    function SWContentList(contentPartialsPath, observerService, slatwallPathBuilder) {
        this.restrict = 'E';
        //public bindToController=true;
        this.controller = SWContentListController;
        this.controllerAs = "swContentList";
        this.link = function (scope, element, attrs, controller, transclude) {
            scope.$on('$destroy', function handler() {
                this.observerService.detachByEvent('optionsChanged');
                this.observerService.detachByEvent('sortByColumn');
            });
        };
        this.observerService = observerService;
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + 'contentlist.html';
    }
    SWContentList.Factory = function () {
        var directive = function (contentPartialsPath, observerService, slatwallPathBuilder) { return new SWContentList(contentPartialsPath, observerService, slatwallPathBuilder); };
        directive.$inject = [
            'contentPartialsPath',
            'observerService',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWContentList;
}());
exports.SWContentList = SWContentList;


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWContentNode = /** @class */ (function () {
    function SWContentNode($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'A',
            scope: {
                contentData: '=',
                loadChildren: "="
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + 'contentnode.html',
            link: function (scope, element, attr) {
                if (angular.isUndefined(scope.depth)) {
                    scope.depth = 0;
                }
                if (angular.isDefined(scope.$parent.depth)) {
                    scope.depth = scope.$parent.depth + 1;
                }
                var childContentColumnsConfig = [{
                        propertyIdentifier: '_content.contentID',
                        isVisible: false,
                        isSearchable: false
                    },
                    {
                        propertyIdentifier: '_content.title',
                        isVisible: true,
                        isSearchable: true
                    },
                    {
                        propertyIdentifier: '_content.urlTitlePath',
                        isVisible: true,
                        isSearchable: true
                    },
                    {
                        propertyIdentifier: '_content.site.siteID',
                        isVisible: false,
                        isSearchable: false
                    },
                    {
                        propertyIdentifier: '_content.site.siteName',
                        isVisible: true,
                        isSearchable: true
                    },
                    {
                        propertyIdentifier: '_content.site.domainNames',
                        isVisible: true,
                        isSearchable: true
                    },
                    //                            {
                    //                                propertyIdentifier: '_content.contentTemplateFile',
                    //                                persistent: false,
                    //                                setting: true,
                    //                                isVisible: true
                    //                            },
                    //need to get template via settings
                    {
                        propertyIdentifier: '_content.allowPurchaseFlag',
                        isVisible: true,
                        isSearchable: true
                    }, {
                        propertyIdentifier: '_content.productListingPageFlag',
                        isVisible: true,
                        isSearchable: true
                    }, {
                        propertyIdentifier: '_content.activeFlag',
                        isVisible: true,
                        isSearchable: true
                    }
                ];
                var childContentOrderBy = [
                    {
                        "propertyIdentifier": "_content.sortOrder",
                        "direction": "DESC"
                    }
                ];
                scope.toggleChildContent = function (parentContentRecord) {
                    if (angular.isUndefined(scope.childOpen) || scope.childOpen === false) {
                        scope.childOpen = true;
                        if (!scope.childrenLoaded) {
                            scope.getChildContent(parentContentRecord);
                        }
                    }
                    else {
                        scope.childOpen = false;
                    }
                };
                scope.getChildContent = function (parentContentRecord) {
                    var childContentfilterGroupsConfig = [{
                            "filterGroup": [{
                                    "propertyIdentifier": "_content.parentContent.contentID",
                                    "comparisonOperator": "=",
                                    "value": parentContentRecord.contentID
                                }]
                        }];
                    var collectionListingPromise = $hibachi.getEntity('Content', {
                        columnsConfig: angular.toJson(childContentColumnsConfig),
                        filterGroupsConfig: angular.toJson(childContentfilterGroupsConfig),
                        orderByConfig: angular.toJson(childContentOrderBy),
                        allRecords: true
                    });
                    collectionListingPromise.then(function (value) {
                        parentContentRecord.children = value.records;
                        var index = 0;
                        angular.forEach(parentContentRecord.children, function (child) {
                            child.site_domainNames = child.site_domainNames.split(",")[0];
                            scope['child' + index] = child;
                            element.after($compile('<tr class="childNode" style="margin-left:{{depth*15||0}}px" ng-if="childOpen"  sw-content-node data-content-data="child' + index + '"></tr>')(scope));
                            index++;
                        });
                        scope.childrenLoaded = true;
                    });
                };
                scope.childrenLoaded = false;
                //if the children have never been loaded and we are not in search mode based on the title received
                if (angular.isDefined(scope.loadChildren) && scope.loadChildren === true && !(scope.contentData.titlePath && scope.contentData.titlePath.trim().length)) {
                    scope.toggleChildContent(scope.contentData);
                }
            }
        };
    }
    SWContentNode.Factory = function () {
        var directive = function ($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder) { return new SWContentNode($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$compile',
            '$hibachi',
            'contentPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWContentNode;
}());
exports.SWContentNode = SWContentNode;


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSiteSelectorController = /** @class */ (function () {
    //@ngInject
    function SWSiteSelectorController(collectionConfigService, listingService, localStorageService, typeaheadService, utilityService) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.localStorageService = localStorageService;
        this.typeaheadService = typeaheadService;
        this.utilityService = utilityService;
        this.selectSite = function () {
            _this.collectionConfigToFilter.removeFilterByDisplayPropertyIdentifier(_this.simpleFilterPropertyIdentifier);
            console.log("selectSite", _this.selectedSite);
            switch (_this.selectedSite) {
                case "all":
                    //do nothing
                    console.log("donothing");
                    break;
                case "default":
                    _this.updateDefaultSiteID();
                    if (_this.defaultEstablished) {
                        console.log("adding filter", _this.defaultSiteID);
                        _this.collectionConfigToFilter.addFilter(_this.filterPropertyIdentifier, _this.defaultSiteID, "=");
                    }
                    break;
                case undefined:
                    //do nothing
                    break;
                default:
                    _this.localStorageService.setItem("defaultSiteID", _this.selectedSite);
                    _this.collectionConfigToFilter.addFilter(_this.filterPropertyIdentifier, _this.selectedSite, "=");
                    break;
            }
            if (_this.withTypeahead && _this.typeaheadDataKey != null) {
                _this.typeaheadService.getData(_this.typeaheadDataKey);
            }
            if (_this.inListingDisplay && _this.listingID != null) {
                _this.listingService.getCollection(_this.listingID);
            }
        };
        this.updateDefaultSiteID = function () {
            console.log("updating default established");
            if (_this.localStorageService.hasItem("defaultSiteID")) {
                _this.defaultEstablished = true;
                _this.defaultSiteID = _this.localStorageService.getItem("defaultSiteID");
            }
            else {
                console.log("default established false");
                _this.defaultEstablished = false;
            }
        };
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
        if (angular.isUndefined(this.simpleFilterPropertyIdentifier)) {
            this.simpleFilterPropertyIdentifier = "siteID";
        }
        this.sitesCollectionConfig = collectionConfigService.newCollectionConfig("Site");
        this.sitesCollectionConfig.addDisplayProperty("siteID, siteName, siteCode");
        this.sitesCollectionConfig.setAllRecords(true);
        this.sitesCollectionConfig.getEntity().then(function (data) {
            _this.sites = data.records;
            if (_this.sites[0]) {
                _this.selectedSite = _this.sites[0].siteID;
            }
        }, function (reason) {
            throw ("SWProductListingPages had trouble fetching sites because of " + reason);
        }).finally(function () {
            _this.selectSite();
        });
    }
    return SWSiteSelectorController;
}());
exports.SWSiteSelectorController = SWSiteSelectorController;
var SWSiteSelector = /** @class */ (function () {
    //@ngInject
    function SWSiteSelector($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.listingService = listingService;
        this.scopeService = scopeService;
        this.contentPartialsPath = contentPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            inListingDisplay: "=?",
            filterPropertyIdentifier: "@?",
            collectionConfigToFilter: "=?",
            withTypeahead: "=?",
            typeaheadDataKey: "@?",
            disabled: "=?"
        };
        this.controller = SWSiteSelectorController;
        this.controllerAs = "swSiteSelector";
        this.link = function ($scope, element, attrs) {
            if ($scope.swSiteSelector.withTypeahead == null) {
                $scope.swSiteSelector.withTypeahead = false;
            }
            if ($scope.swSiteSelector.inListingDisplay == null) {
                $scope.swSiteSelector.inListingDisplay = !$scope.swSiteSelector.withTypeahead;
            }
            if ($scope.swSiteSelector.inListingDisplay == true && _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
                var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
                $scope.swSiteSelector.listingID = listingDisplayScope.tableID;
                if (listingDisplayScope.collectionConfig != null) {
                    $scope.swSiteSelector.collectionConfigToFilter = listingDisplayScope.collectionConfig;
                }
                _this.listingService.attachToListingInitiated($scope.swSiteSelector.listingID, $scope.swSiteSelector.selectSite);
            }
            else {
                $scope.swSiteSelector.selectSite();
            }
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "/siteselector.html";
    }
    SWSiteSelector.Factory = function () {
        var directive = function ($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder) { return new SWSiteSelector($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'listingService',
            'scopeService',
            'contentPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSiteSelector;
}());
exports.SWSiteSelector = SWSiteSelector;


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(8);
//services
//filters
//directives
var swcontentbasic_1 = __webpack_require__(477);
var swcontenteditor_1 = __webpack_require__(478);
var swcontentlist_1 = __webpack_require__(479);
var swcontentnode_1 = __webpack_require__(480);
var swassignedproducts_1 = __webpack_require__(476);
var swsiteselector_1 = __webpack_require__(481);
var contentmodule = angular.module('hibachi.content', [core_module_1.coremodule.name]).config(function () {
})
    .constant('contentPartialsPath', 'content/components/')
    //services
    //filters
    //directives
    .directive('swContentBasic', swcontentbasic_1.SWContentBasic.Factory())
    .directive('swContentEditor', swcontenteditor_1.SWContentEditor.Factory())
    .directive('swContentList', swcontentlist_1.SWContentList.Factory())
    .directive('swContentNode', swcontentnode_1.SWContentNode.Factory())
    .directive('swAssignedProducts', swassignedproducts_1.SWAssignedProducts.Factory())
    .directive('swSiteSelector', swsiteselector_1.SWSiteSelector.Factory());
exports.contentmodule = contentmodule;


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormResponseListingController = /** @class */ (function () {
    //@ngInject
    function SWFormResponseListingController($filter, $http, $hibachi, paginationService, requestService) {
        var _this = this;
        this.$filter = $filter;
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.requestService = requestService;
        this.init = function () {
            if (angular.isUndefined(_this.formId)) {
                throw ("Form ID is required for swFormResponseListing");
            }
            _this.paginator = _this.paginationService.createPagination();
            _this.paginator.getCollection = _this.updateFormResponses;
            _this.updateFormResponses();
        };
        this.export = function () {
            var exportFormResponseRequest = _this.requestService.newAdminRequest(_this.$hibachi.getUrlWithActionPrefix() + 'api:main.exportformresponses&formID=' + _this.formId, {}, 'GET');
            exportFormResponseRequest.promise.then(function (response) {
                var anchor = angular.element('<a/>');
                anchor.attr({
                    href: 'data:attachment/csv;charset=utf-8,' + encodeURI(response),
                    target: '_blank',
                    download: 'formresponses' + _this.formId + '.csv'
                })[0].click();
            });
        };
        this.updateFormResponses = function () {
            var formResponsesRequestUrl = _this.$hibachi.getUrlWithActionPrefix() + "api:main.getformresponses&formID=" + _this.formId;
            var params = {};
            params.currentPage = _this.paginator.currentPage || 1;
            params.pageShow = _this.paginator.pageShow || 10;
            var formResponsesPromise = _this.$http({
                method: 'GET',
                url: formResponsesRequestUrl,
                params: params
            });
            formResponsesPromise.then(function (response) {
                _this.columns = response.data.columnRecords;
                _this.pageRecords = response.data.pageRecords;
                _this.paginator.recordsCount = response.data.recordsCount;
                _this.paginator.totalPages = response.data.totalPages;
                _this.paginator.pageStart = response.data.pageRecordsStart;
                _this.paginator.pageEnd = response.data.pageRecordsEnd;
                for (var i = 0; i < _this.pageRecords.length; i++) {
                    if (angular.isDefined(_this.pageRecords[i].createdDateTime)) {
                        _this.pageRecords[i].createdDateTime = _this.dateFilter(_this.pageRecords[i].createdDateTime, "MMM dd, yyyy - hh:mm a");
                    }
                }
            }, function (response) {
                throw ("There was a problem collecting the form responses");
            });
        };
        this.dateFilter = $filter("dateFilter");
        this.init();
    }
    return SWFormResponseListingController;
}());
exports.SWFormResponseListingController = SWFormResponseListingController;
var SWFormResponseListing = /** @class */ (function () {
    //@ngInject
    function SWFormResponseListing($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder) {
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.formBuilderPartialsPath = formBuilderPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            "formId": "@"
        };
        this.controller = SWFormResponseListingController;
        this.controllerAs = "swFormResponseListing";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(formBuilderPartialsPath) + "/formresponselisting.html";
    }
    SWFormResponseListing.Factory = function () {
        var directive = function ($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder) { return new SWFormResponseListing($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'paginationService',
            'formBuilderPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWFormResponseListing;
}());
exports.SWFormResponseListing = SWFormResponseListing;


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(8);
//controllers
//directives
var swformresponselisting_1 = __webpack_require__(483);
//models
var formbuildermodule = angular.module('formbuilder', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('formBuilderPartialsPath', 'formbuilder/components/')
    //controllers
    //directives
    .directive('swFormResponseListing', swformresponselisting_1.SWFormResponseListing.Factory());
exports.formbuildermodule = formbuildermodule;


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var actions = __webpack_require__(167);
/**
 * Fulfillment Batch Detail Controller
 */
var SWFulfillmentBatchDetailController = /** @class */ (function () {
    // @ngInject
    function SWFulfillmentBatchDetailController($hibachi, $timeout, collectionConfigService, observerService, utilityService, $location, $http, $window, typeaheadService, listingService, orderFulfillmentService, rbkeyService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.$location = $location;
        this.$http = $http;
        this.$window = $window;
        this.typeaheadService = typeaheadService;
        this.listingService = listingService;
        this.orderFulfillmentService = orderFulfillmentService;
        this.rbkeyService = rbkeyService;
        this.orderItem = {};
        this.userViewingFulfillmentBatchDetail = function (batchID) {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.SETUP_BATCHDETAIL,
                payload: { fulfillmentBatchId: batchID }
            });
        };
        this.userToggleFulfillmentBatchListing = function () {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.TOGGLE_BATCHLISTING,
                payload: {}
            });
        };
        //toggle_editcomment for action based
        this.userEditingComment = function (comment) {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.TOGGLE_EDITCOMMENT,
                payload: { comment: comment }
            });
        };
        //requested | failed | succeded
        this.userDeletingComment = function (comment) {
            //Only fire the event if the user agrees.
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.DELETE_COMMENT_REQUESTED,
                payload: { comment: comment }
            });
        };
        //Try to delete the fulfillment batch item.
        this.deleteFulfillmentBatchItem = function () {
            //Only fire the event if the user agrees.
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.DELETE_FULFILLMENTBATCHITEM_REQUESTED,
                payload: {}
            });
        };
        this.userSavingComment = function (comment, commentText) {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.SAVE_COMMENT_REQUESTED,
                payload: { comment: comment, commentText: commentText }
            });
        };
        this.userViewingOrderDeliveryAttributes = function () {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.SETUP_ORDERDELIVERYATTRIBUTES,
                payload: {}
            });
        };
        this.userCaptureAndFulfill = function () {
            //request the fulfillment process.
            _this.state.orderItem = _this.orderItem;
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.CREATE_FULFILLMENT_REQUESTED,
                payload: { viewState: _this.state }
            });
        };
        this.userPrintPickingList = function () {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.PRINT_PICKINGLIST_REQUESTED,
                payload: {}
            });
        };
        this.userPrintPackingList = function () {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.PRINT_PACKINGLIST_REQUESTED,
                payload: {}
            });
        };
        /** Returns a list of print templates related to fulfillment batches. */
        this.userRequiresPrintList = function () {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.PRINT_LIST_REQUESTED,
                payload: {}
            });
        };
        /** Returns a list of all emails related to orderfulfillments */
        this.userRequiresEmailList = function () {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: actions.EMAIL_LIST_REQUESTED,
                payload: {}
            });
        };
        /** Todo - Thiswill be for the barcode search which is currently commented out. */
        this.userBarcodeSearch = function () {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({
                type: "BAR_CODE_SEARCH_ACTION",
                payload: {}
            });
        };
        //setup a state change listener and send over the fulfillmentBatchID
        this.orderFulfillmentService.orderFulfillmentStore.store$.subscribe(function (stateChanges) {
            //Handle basic requests
            if ((stateChanges.action && stateChanges.action.type) && (stateChanges.action.type == actions.TOGGLE_EDITCOMMENT ||
                stateChanges.action.type == actions.SAVE_COMMENT_REQUESTED ||
                stateChanges.action.type == actions.DELETE_COMMENT_REQUESTED ||
                stateChanges.action.type == actions.CREATE_FULFILLMENT_REQUESTED ||
                stateChanges.action.type == actions.PRINT_LIST_REQUESTED ||
                stateChanges.action.type == actions.EMAIL_LIST_REQUESTED ||
                stateChanges.action.type == actions.UPDATE_BATCHDETAIL ||
                stateChanges.action.type == actions.SETUP_BATCHDETAIL ||
                stateChanges.action.type == actions.SETUP_ORDERDELIVERYATTRIBUTES ||
                stateChanges.action.type == actions.TOGGLE_LOADER)) {
                //set the new state.
                _this.orderItem = {};
                _this.state = stateChanges;
            }
        });
        //Get the attributes to display in the custom section.
        this.userViewingOrderDeliveryAttributes();
        //Dispatch the fulfillmentBatchID and setup the state.
        this.userViewingFulfillmentBatchDetail(this.fulfillmentBatchId);
    }
    return SWFulfillmentBatchDetailController;
}());
exports.SWFulfillmentBatchDetailController = SWFulfillmentBatchDetailController;
/**
 * This is a view helper class that uses the collection helper class.
 */
var SWFulfillmentBatchDetail = /** @class */ (function () {
    // @ngInject
    function SWFulfillmentBatchDetail($hibachi, $timeout, collectionConfigService, observerService, fulfillmentBatchDetailPartialsPath, slatwallPathBuilder) {
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.fulfillmentBatchDetailPartialsPath = fulfillmentBatchDetailPartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            fulfillmentBatchId: "@?"
        };
        this.controller = SWFulfillmentBatchDetailController;
        this.controllerAs = "swFulfillmentBatchDetailController";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(fulfillmentBatchDetailPartialsPath) + "fulfillmentbatchdetail.html";
    }
    SWFulfillmentBatchDetail.Factory = function () {
        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, fulfillmentBatchDetailPartialsPath, slatwallPathBuilder) { return new SWFulfillmentBatchDetail($hibachi, $timeout, collectionConfigService, observerService, fulfillmentBatchDetailPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            '$timeout',
            'collectionConfigService',
            'observerService',
            'fulfillmentBatchDetailPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWFulfillmentBatchDetail;
}());
exports.SWFulfillmentBatchDetail = SWFulfillmentBatchDetail;


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(8);
//services
var orderfulfillmentservice_1 = __webpack_require__(168);
//controllers
//directives
var swfulfillmentbatchdetail_1 = __webpack_require__(485);
//models 
var fulfillmentbatchdetailmodule = angular.module('fulfillmentbatchdetail', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('fulfillmentBatchDetailPartialsPath', 'fulfillmentbatch/components/')
    //services
    .service('orderFulfillmentService', orderfulfillmentservice_1.OrderFulfillmentService)
    //controllers
    //directives
    .directive('swFulfillmentBatchDetail', swfulfillmentbatchdetail_1.SWFulfillmentBatchDetail.Factory());
exports.fulfillmentbatchdetailmodule = fulfillmentbatchdetailmodule;


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var giftrecipient_1 = __webpack_require__(497);
var SWAddOrderItemRecipientController = /** @class */ (function () {
    //@ngInject
    function SWAddOrderItemRecipientController($hibachi, collectionConfigService, entityService, observerService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.collectionConfigService = collectionConfigService;
        this.entityService = entityService;
        this.observerService = observerService;
        this.unassignedCountArray = [];
        this.addGiftRecipientFromAccountList = function (account) {
            var giftRecipient = new giftrecipient_1.GiftRecipient();
            giftRecipient.firstName = account.firstName;
            giftRecipient.lastName = account.lastName;
            giftRecipient.emailAddress = account.primaryEmailAddress_emailAddress;
            giftRecipient.account = true;
            _this.orderItemGiftRecipients.push(giftRecipient);
            _this.searchText = "";
        };
        this.getUnassignedCountArray = function () {
            if (_this.getUnassignedCount() < _this.unassignedCountArray.length) {
                _this.unassignedCountArray.splice(_this.getUnassignedCount(), _this.unassignedCountArray.length);
            }
            if (_this.getUnassignedCount() > _this.unassignedCountArray.length) {
                for (var i = _this.unassignedCountArray.length + 1; i <= _this.getUnassignedCount(); i++) {
                    _this.unassignedCountArray.push({ name: i, value: i });
                }
            }
            return _this.unassignedCountArray;
        };
        this.getAssignedCount = function () {
            _this.assignedCount = 0;
            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
                _this.assignedCount += orderItemGiftRecipient.quantity;
            });
            return _this.assignedCount;
        };
        this.getUnassignedCount = function () {
            _this.unassignedCount = _this.quantity;
            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
                _this.unassignedCount -= orderItemGiftRecipient.quantity;
            });
            return _this.unassignedCount;
        };
        this.addGiftRecipient = function () {
            if (_this.currentGiftRecipient.forms.createRecipient.$valid) {
                _this.observerService.notify('updateBindings').then(function () {
                    _this.showInvalidAddFormMessage = true;
                    _this.adding = false;
                    var giftRecipient = new giftrecipient_1.GiftRecipient();
                    angular.extend(giftRecipient, _this.currentGiftRecipient.data);
                    _this.orderItemGiftRecipients.push(giftRecipient);
                    _this.searchText = "";
                    _this.currentGiftRecipient = _this.entityService.newEntity("OrderItemGiftRecipient");
                });
            }
            else {
                _this.showInvalidAddFormMessage = true;
            }
        };
        this.cancelAddRecipient = function () {
            _this.adding = false;
            _this.currentGiftRecipient.reset();
            _this.searchText = "";
            _this.showInvalidAddFormMessage = false;
        };
        this.startFormWithName = function (searchString) {
            if (searchString === void 0) { searchString = _this.searchText; }
            _this.adding = !_this.adding;
            if (_this.adding) {
                _this.currentGiftRecipient.forms.createRecipient.$setUntouched();
                _this.currentGiftRecipient.forms.createRecipient.$setPristine();
                if (searchString != "") {
                    _this.currentGiftRecipient.firstName = searchString;
                    _this.searchText = "";
                }
            }
        };
        this.getTotalQuantity = function () {
            var totalQuantity = 0;
            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
                totalQuantity += orderItemGiftRecipient.quantity;
            });
            return totalQuantity;
        };
        this.getMessageCharactersLeft = function () {
            if (_this.currentGiftRecipient.giftMessage && _this.currentGiftRecipient.giftMessage != null) {
                return 250 - _this.currentGiftRecipient.giftMessage.length;
            }
            else {
                return 250;
            }
        };
        if (angular.isUndefined(this.adding)) {
            this.adding = false;
        }
        if (angular.isUndefined(this.assignedCount)) {
            this.assignedCount = 0;
        }
        if (angular.isUndefined(this.searchText)) {
            this.searchText = "";
        }
        var count = 1;
        this.currentGiftRecipient = this.entityService.newEntity("OrderItemGiftRecipient");
        if (angular.isUndefined(this.orderItemGiftRecipients)) {
            this.orderItemGiftRecipients = [];
        }
        if (angular.isUndefined(this.showInvalidAddFormMessage)) {
            this.showInvalidAddFormMessage = false;
        }
        this.typeaheadCollectionConfig = collectionConfigService.newCollectionConfig('Account');
        this.typeaheadCollectionConfig.addDisplayProperty("accountID,firstName,lastName,primaryEmailAddress.emailAddress");
        this.typeaheadCollectionConfig.addFilter("primaryEmailAddress", "null", "is not");
    }
    return SWAddOrderItemRecipientController;
}());
exports.SWAddOrderItemRecipientController = SWAddOrderItemRecipientController;
var SWAddOrderItemGiftRecipient = /** @class */ (function () {
    function SWAddOrderItemGiftRecipient($hibachi, giftCardPartialsPath, slatwallPathBuilder) {
        this.$hibachi = $hibachi;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.require = "^form";
        this.restrict = "EA";
        this.transclude = true;
        this.scope = {};
        this.bindToController = {
            "quantity": "=?",
            "orderItemGiftRecipients": "=?",
            "adding": "=?",
            "searchText": "=?",
            "currentgiftRecipient": "=?",
            "showInvalidAddFormMessage": "=?",
            "showInvalidRowMessage": "=?",
            "tableForm": "=?",
            "recipientAddForm": "=?"
        };
        this.controller = SWAddOrderItemRecipientController;
        this.controllerAs = "addGiftRecipientControl";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/addorderitemgiftrecipient.html";
    }
    SWAddOrderItemGiftRecipient.Factory = function () {
        var directive = function ($hibachi, giftCardPartialsPath, slatwallPathBuilder) { return new SWAddOrderItemGiftRecipient($hibachi, giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    SWAddOrderItemGiftRecipient.$inject = ["$hibachi"];
    return SWAddOrderItemGiftRecipient;
}());
exports.SWAddOrderItemGiftRecipient = SWAddOrderItemGiftRecipient;


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardBalanceController = /** @class */ (function () {
    function SWGiftCardBalanceController(collectionConfigService) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.init = function () {
            _this.initialBalance = 0;
            var totalDebit = 0;
            var totalCredit = 0;
            var transactionConfig = _this.collectionConfigService.newCollectionConfig('GiftCardTransaction');
            transactionConfig.setDisplayProperties("giftCardTransactionID, creditAmount, debitAmount, giftCard.giftCardID");
            transactionConfig.addFilter('giftCard.giftCardID', _this.giftCard.giftCardID);
            transactionConfig.setAllRecords(true);
            transactionConfig.setOrderBy("createdDateTime|DESC");
            var transactionPromise = transactionConfig.getEntity();
            transactionPromise.then(function (response) {
                _this.transactions = response.records;
                var initialCreditIndex = _this.transactions.length - 1;
                _this.initialBalance = _this.transactions[initialCreditIndex].creditAmount;
                angular.forEach(_this.transactions, function (transaction, index) {
                    if (!angular.isString(transaction.debitAmount)) {
                        totalDebit += transaction.debitAmount;
                    }
                    if (!angular.isString(transaction.creditAmount)) {
                        totalCredit += transaction.creditAmount;
                    }
                });
                _this.currentBalance = totalCredit - totalDebit;
                _this.balancePercentage = parseInt(((_this.currentBalance / _this.initialBalance) * 100).toString());
            });
        };
        this.init();
    }
    SWGiftCardBalanceController.$inject = ["collectionConfigService"];
    return SWGiftCardBalanceController;
}());
exports.SWGiftCardBalanceController = SWGiftCardBalanceController;
var SWGiftCardBalance = /** @class */ (function () {
    function SWGiftCardBalance(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
        this.collectionConfigService = collectionConfigService;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCard: "=?",
            transactions: "=?",
            initialBalance: "=?",
            currentBalance: "=?",
            balancePercentage: "=?"
        };
        this.controller = SWGiftCardBalanceController;
        this.controllerAs = "swGiftCardBalance";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/balance.html";
        this.restrict = "EA";
    }
    SWGiftCardBalance.Factory = function () {
        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardBalance(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'collectionConfigService',
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWGiftCardBalance;
}());
exports.SWGiftCardBalance = SWGiftCardBalance;


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardDetailController = /** @class */ (function () {
    function SWGiftCardDetailController(collectionConfigService) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.init = function () {
            var giftCardConfig = _this.collectionConfigService.newCollectionConfig('GiftCard');
            giftCardConfig.setDisplayProperties("giftCardID, giftCardCode, currencyCode, giftCardPin, expirationDate, ownerFirstName, ownerLastName, ownerEmailAddress, activeFlag, calculatedBalanceAmount,  originalOrderItem.sku.product.productName, originalOrderItem.sku.product.productID, originalOrderItem.order.orderID, originalOrderItem.orderItemID, orderItemGiftRecipient.firstName, orderItemGiftRecipient.lastName, orderItemGiftRecipient.emailAddress, orderItemGiftRecipient.giftMessage, ownerAccount.accountID, ownerAccount.firstName, ownerAccount.lastName");
            giftCardConfig.addFilter('giftCardID', _this.giftCardId);
            giftCardConfig.setAllRecords(true);
            giftCardConfig.getEntity().then(function (response) {
                _this.giftCard = response.records[0];
            });
        };
        this.init();
    }
    SWGiftCardDetailController.$inject = ["collectionConfigService"];
    return SWGiftCardDetailController;
}());
exports.SWGiftCardDetailController = SWGiftCardDetailController;
var SWGiftCardDetail = /** @class */ (function () {
    function SWGiftCardDetail(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
        this.collectionConfigService = collectionConfigService;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCardId: "@",
            giftCard: "=?"
        };
        this.controller = SWGiftCardDetailController;
        this.controllerAs = "swGiftCardDetail";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/basic.html";
        this.restrict = "E";
    }
    SWGiftCardDetail.Factory = function () {
        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardDetail(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'collectionConfigService',
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWGiftCardDetail;
}());
exports.SWGiftCardDetail = SWGiftCardDetail;


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardHistoryController = /** @class */ (function () {
    //@ngInject
    function SWGiftCardHistoryController(collectionConfigService, $hibachi) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.$hibachi = $hibachi;
        var initialBalance = 0;
        var totalDebit = 0;
        var transactionConfig = this.collectionConfigService.newCollectionConfig('GiftCardTransaction');
        transactionConfig.setDisplayProperties("giftCardTransactionID, creditAmount, debitAmount, createdDateTime, giftCard.giftCardID, orderPayment.order.orderID, orderPayment.order.orderNumber, orderPayment.order.orderOpenDateTime", "id,credit,debit,created,giftcardID,ordernumber,orderdatetime");
        transactionConfig.addFilter('giftCard.giftCardID', this.giftCard.giftCardID);
        transactionConfig.setAllRecords(true);
        transactionConfig.setOrderBy("createdDateTime|DESC");
        var emailBounceConfig = this.collectionConfigService.newCollectionConfig('EmailBounce');
        emailBounceConfig.setDisplayProperties("emailBounceID, rejectedEmailTo, rejectedEmailSendTime, relatedObject, relatedObjectID");
        emailBounceConfig.addFilter('relatedObjectID', this.giftCard.giftCardID);
        emailBounceConfig.setAllRecords(true);
        emailBounceConfig.setOrderBy("rejectedEmailSendTime|DESC");
        var emailConfig = this.collectionConfigService.newCollectionConfig('Email');
        emailConfig.setDisplayProperties('emailID, emailTo, relatedObject, relatedObjectID, createdDateTime');
        emailConfig.addFilter('relatedObjectID', this.giftCard.giftCardID);
        emailConfig.setAllRecords(true);
        emailConfig.setOrderBy("createdDateTime|DESC");
        emailConfig.getEntity().then(function (response) {
            _this.emails = response.records;
            emailBounceConfig.getEntity().then(function (response) {
                _this.bouncedEmails = response.records;
                transactionConfig.getEntity().then(function (response) {
                    _this.transactions = response.records;
                    var initialCreditIndex = _this.transactions.length - 1;
                    var initialBalance = _this.transactions[initialCreditIndex].creditAmount;
                    var currentBalance = initialBalance;
                    for (var i = initialCreditIndex; i >= 0; i--) {
                        var transaction = _this.transactions[i];
                        if (typeof transaction.debitAmount !== "string") {
                            transaction.debit = true;
                            totalDebit += transaction.debitAmount;
                        }
                        else if (typeof transaction.creditAmount !== "string") {
                            if (i != initialCreditIndex) {
                                currentBalance += transaction.creditAmount;
                            }
                            transaction.debit = false;
                        }
                        transaction.detailOrderLink = $hibachi.buildUrl('admin:entity.detailOrder', 'orderID=' + transaction.orderPayment_order_orderID);
                        var tempCurrentBalance = currentBalance - totalDebit;
                        transaction.balance = tempCurrentBalance;
                        if (i == initialCreditIndex) {
                            var activeCard = {
                                activated: true,
                                debit: false,
                                activeAt: transaction.orderPayment_order_orderOpenDateTime,
                                balance: initialBalance
                            };
                            _this.transactions.splice(i, 0, activeCard);
                            if (angular.isDefined(_this.bouncedEmails)) {
                                angular.forEach(_this.bouncedEmails, function (email, bouncedEmailIndex) {
                                    email.bouncedEmail = true;
                                    email.balance = initialBalance;
                                    _this.transactions.splice(i, 0, email);
                                });
                            }
                            if (angular.isDefined(_this.emails)) {
                                angular.forEach(_this.emails, function (email) {
                                    email.emailSent = true;
                                    email.debit = false;
                                    email.sentAt = email.createdDateTime;
                                    email.balance = initialBalance;
                                    _this.transactions.splice(i, 0, email);
                                });
                            }
                        }
                    }
                });
            });
        });
        var orderConfig = this.collectionConfigService.newCollectionConfig('Order');
        orderConfig.setDisplayProperties("orderID,orderNumber,orderOpenDateTime,account.firstName,account.lastName,account.accountID,account.primaryEmailAddress.emailAddress");
        orderConfig.addFilter('orderID', this.giftCard.originalOrderItem_order_orderID);
        orderConfig.setAllRecords(true);
        orderConfig.getEntity().then(function (response) {
            _this.order = response.records[0];
        });
    }
    return SWGiftCardHistoryController;
}());
exports.SWGiftCardHistoryController = SWGiftCardHistoryController;
var SWGiftCardHistory = /** @class */ (function () {
    //@ngInject
    function SWGiftCardHistory(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
        this.collectionConfigService = collectionConfigService;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCard: "=?",
            transactions: "=?",
            bouncedEmails: "=?",
            order: "=?"
        };
        this.controller = SWGiftCardHistoryController;
        this.controllerAs = "swGiftCardHistory";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/history.html";
        this.restrict = "EA";
    }
    SWGiftCardHistory.Factory = function () {
        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardHistory(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'collectionConfigService',
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWGiftCardHistory;
}());
exports.SWGiftCardHistory = SWGiftCardHistory;


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardOrderInfoController = /** @class */ (function () {
    function SWGiftCardOrderInfoController(collectionConfigService) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.init = function () {
            var orderConfig = _this.collectionConfigService.newCollectionConfig('Order');
            orderConfig.setDisplayProperties("orderID, orderNumber, orderOpenDateTime, orderOrigin.orderOriginName, account.firstName, account.lastName");
            orderConfig.addFilter('orderID', _this.giftCard.originalOrderItem_order_orderID);
            orderConfig.setAllRecords(true);
            orderConfig.getEntity().then(function (response) {
                _this.order = response.records[0];
            });
        };
        this.init();
    }
    SWGiftCardOrderInfoController.$inject = ["collectionConfigService"];
    return SWGiftCardOrderInfoController;
}());
exports.SWGiftCardOrderInfoController = SWGiftCardOrderInfoController;
var SWGiftCardOrderInfo = /** @class */ (function () {
    function SWGiftCardOrderInfo(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
        this.collectionConfigService = collectionConfigService;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCard: "=?",
            order: "=?"
        };
        this.controller = SWGiftCardOrderInfoController;
        this.controllerAs = "swGiftCardOrderInfo";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/orderinfo.html";
        this.restrict = "EA";
    }
    SWGiftCardOrderInfo.Factory = function () {
        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardOrderInfo(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'collectionConfigService',
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    SWGiftCardOrderInfo.$inject = ["collectionConfigService", "partialsPath"];
    return SWGiftCardOrderInfo;
}());
exports.SWGiftCardOrderInfo = SWGiftCardOrderInfo;


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardOverviewController = /** @class */ (function () {
    function SWGiftCardOverviewController() {
    }
    return SWGiftCardOverviewController;
}());
exports.SWGiftCardOverviewController = SWGiftCardOverviewController;
var SWGiftCardOverview = /** @class */ (function () {
    function SWGiftCardOverview(giftCardPartialsPath, slatwallPathBuilder) {
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCard: "=?"
        };
        this.controller = SWGiftCardOverviewController;
        this.controllerAs = "swGiftCardOverview";
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/overview.html";
        this.restrict = "EA";
    }
    SWGiftCardOverview.Factory = function () {
        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardOverview(giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWGiftCardOverview;
}());
exports.SWGiftCardOverview = SWGiftCardOverview;


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardRecipientInfoController = /** @class */ (function () {
    //@ngInject
    function SWGiftCardRecipientInfoController($hibachi) {
        this.$hibachi = $hibachi;
        if (angular.isDefined(this.giftCard.ownerAccount_accountID)) {
            this.detailAccountLink = $hibachi.buildUrl('admin:entity.detailaccount', 'accountID=' + this.giftCard.ownerAccount_accountID);
        }
    }
    return SWGiftCardRecipientInfoController;
}());
exports.SWGiftCardRecipientInfoController = SWGiftCardRecipientInfoController;
var SWGiftCardRecipientInfo = /** @class */ (function () {
    function SWGiftCardRecipientInfo(giftCardPartialsPath, slatwallPathBuilder) {
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCard: "=?"
        };
        this.controller = SWGiftCardRecipientInfoController;
        this.controllerAs = "swGiftCardRecipientInfo";
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/recipientinfo.html";
        this.restrict = "EA";
    }
    SWGiftCardRecipientInfo.Factory = function () {
        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardRecipientInfo(giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWGiftCardRecipientInfo;
}());
exports.SWGiftCardRecipientInfo = SWGiftCardRecipientInfo;


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOrderItemGiftRecipientRowController = /** @class */ (function () {
    function SWOrderItemGiftRecipientRowController() {
        var _this = this;
        this.edit = function (recipient) {
            angular.forEach(_this.recipients, function (recipient) {
                recipient.editing = false;
            });
            if (!recipient.editing) {
                recipient.editing = true;
            }
        };
        this.delete = function (recipient) {
            _this.recipients.splice(_this.recipients.indexOf(recipient), 1);
        };
        this.saveGiftRecipient = function (recipient) {
            if (_this.tableForm.$valid) {
                _this.showInvalidRecipientMessage = false;
                recipient.editing = false;
            }
            else {
                _this.showInvalidRecipientMessage = true;
            }
        };
        this.getQuantity = function () {
            if (isNaN(_this.quantity)) {
                return 0;
            }
            else {
                return _this.quantity;
            }
        };
        this.getUnassignedCount = function () {
            var unassignedCount = _this.getQuantity();
            angular.forEach(_this.recipients, function (recipient) {
                unassignedCount -= recipient.quantity;
            });
            return unassignedCount;
        };
        this.getMessageCharactersLeft = function () {
            if (angular.isDefined(_this.recipient.giftMessage) && _this.recipient.giftMessage != null) {
                return 250 - _this.recipient.giftMessage.length;
            }
            else {
                return 250;
            }
        };
        this.getUnassignedCountArray = function () {
            var unassignedCountArray = new Array();
            for (var i = 1; i <= _this.recipient.quantity + _this.getUnassignedCount(); i++) {
                unassignedCountArray.push(i);
            }
            return unassignedCountArray;
        };
    }
    return SWOrderItemGiftRecipientRowController;
}());
exports.SWOrderItemGiftRecipientRowController = SWOrderItemGiftRecipientRowController;
var SWOrderItemGiftRecipientRow = /** @class */ (function () {
    function SWOrderItemGiftRecipientRow(giftCardPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'AE';
        this.scope = {
            recipient: "=",
            recipients: "=",
            quantity: "=",
            showInvalidRecipientMessage: "=",
            tableForm: "=?",
            index: "="
        };
        this.bindToController = {
            recipient: "=",
            recipients: "=",
            quantity: "=",
            showInvalidRecipientMessage: "=",
            tableForm: "=?",
            index: "="
        };
        this.controller = SWOrderItemGiftRecipientRowController;
        this.controllerAs = "giftRecipientRowControl";
        this.init = function () {
            _this.templateUrl = _this.slatwallPathBuilder.buildPartialsPath(_this.giftCardPartialsPath) + "/orderitemgiftrecipientrow.html";
        };
        this.init();
    }
    SWOrderItemGiftRecipientRow.Factory = function () {
        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWOrderItemGiftRecipientRow(giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWOrderItemGiftRecipientRow;
}());
exports.SWOrderItemGiftRecipientRow = SWOrderItemGiftRecipientRow;


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var OrderItemGiftRecipientControl = /** @class */ (function () {
    //@ngInject
    function OrderItemGiftRecipientControl($scope, $hibachi) {
        var _this = this;
        this.$scope = $scope;
        this.$hibachi = $hibachi;
        this.getUnassignedCountArray = function () {
            var unassignedCountArray = new Array();
            for (var i = 1; i <= _this.getUnassignedCount(); i++) {
                unassignedCountArray.push(i);
            }
            return unassignedCountArray;
        };
        this.getAssignedCount = function () {
            var assignedCount = 0;
            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
                assignedCount += orderItemGiftRecipient.quantity;
            });
            return assignedCount;
        };
        this.getUnassignedCount = function () {
            var unassignedCount = _this.quantity;
            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
                unassignedCount -= orderItemGiftRecipient.quantity;
            });
            return unassignedCount;
        };
        this.orderItemGiftRecipients = $scope.orderItemGiftRecipients = [];
        $scope.collection = {};
        this.adding = false;
        this.searchText = "";
        var count = 1;
    }
    OrderItemGiftRecipientControl.$inject = ["$scope", "$hibachi"];
    return OrderItemGiftRecipientControl;
}());
exports.OrderItemGiftRecipientControl = OrderItemGiftRecipientControl;


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(8);
//controllers
var preprocessorderitem_addorderitemgiftrecipient_1 = __webpack_require__(495);
//directives
var swaddorderitemgiftrecipient_1 = __webpack_require__(487);
var swgiftcardbalance_1 = __webpack_require__(488);
var swgiftcarddetail_1 = __webpack_require__(489);
var swgiftcardhistory_1 = __webpack_require__(490);
var swgiftcardoverview_1 = __webpack_require__(492);
var swgiftcardorderinfo_1 = __webpack_require__(491);
var swgiftcardrecipientinfo_1 = __webpack_require__(493);
var sworderitemgiftrecipientrow_1 = __webpack_require__(494);
var giftcardmodule = angular.module('giftcard', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('giftCardPartialsPath', 'giftcard/components/')
    //controllers
    .controller('preprocessorderitem_addorderitemgiftrecipient', preprocessorderitem_addorderitemgiftrecipient_1.OrderItemGiftRecipientControl)
    //directives
    .directive('swAddOrderItemGiftRecipient', swaddorderitemgiftrecipient_1.SWAddOrderItemGiftRecipient.Factory())
    .directive('swGiftCardBalance', swgiftcardbalance_1.SWGiftCardBalance.Factory())
    .directive('swGiftCardOverview', swgiftcardoverview_1.SWGiftCardOverview.Factory())
    .directive('swGiftCardDetail', swgiftcarddetail_1.SWGiftCardDetail.Factory())
    .directive('swGiftCardHistory', swgiftcardhistory_1.SWGiftCardHistory.Factory())
    .directive('swGiftCardRecipientInfo', swgiftcardrecipientinfo_1.SWGiftCardRecipientInfo.Factory())
    .directive('swGiftCardOrderInfo', swgiftcardorderinfo_1.SWGiftCardOrderInfo.Factory())
    .directive('swOrderItemGiftRecipientRow', sworderitemgiftrecipientrow_1.SWOrderItemGiftRecipientRow.Factory());
exports.giftcardmodule = giftcardmodule;


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var GiftRecipient = /** @class */ (function () {
    function GiftRecipient(firstName, lastName, emailAddress, giftMessage, quantity, account, editing) {
        var _this = this;
        this.reset = function () {
            _this.firstName = null;
            _this.lastName = null;
            _this.emailAddress = null;
            _this.account = null;
            _this.editing = false;
            _this.quantity = 1;
        };
        this.quantity = 1;
        this.editing = false;
        this.account = false;
    }
    return GiftRecipient;
}());
exports.GiftRecipient = GiftRecipient;


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var md5 = __webpack_require__(42);
var optionWithGroup = /** @class */ (function () {
    function optionWithGroup(optionID, optionGroupID, match) {
        var _this = this;
        this.optionID = optionID;
        this.optionGroupID = optionGroupID;
        this.match = match;
        this.toString = function () {
            return _this.optionID;
        };
    }
    return optionWithGroup;
}());
exports.optionWithGroup = optionWithGroup;
var SWAddOptionGroupController = /** @class */ (function () {
    // @ngInject
    function SWAddOptionGroupController($hibachi, $timeout, collectionConfigService, observerService, utilityService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.getOptionList = function () {
            _this.selection.sort();
            return _this.utilityService.arrayToList(_this.selection);
        };
        this.validateOptions = function (args) {
            _this.addToSelection(args[0], args[1].optionGroupId);
            if (_this.hasCompleteSelection()) {
                _this.validateSelection();
            }
        };
        this.validateSelection = function () {
            var optionList = _this.getOptionList();
            var validateSkuCollectionConfig = _this.collectionConfigService.newCollectionConfig("Sku");
            validateSkuCollectionConfig.addDisplayProperty("calculatedOptionsHash");
            validateSkuCollectionConfig.addFilter("product.productID", _this.productId);
            validateSkuCollectionConfig.addFilter("skuID", _this.skuId, "!=");
            validateSkuCollectionConfig.addFilter("calculatedOptionsHash", md5(optionList));
            validateSkuCollectionConfig.setAllRecords(true);
            validateSkuCollectionConfig.getEntity().then(function (response) {
                if (response.records && response.records.length == 0) {
                    _this.selectedOptionList = _this.getOptionList();
                    _this.showValidFlag = true;
                    _this.showInvalidFlag = false;
                }
                else {
                    _this.showValidFlag = false;
                    _this.showInvalidFlag = true;
                }
            });
        };
        this.hasCompleteSelection = function () {
            var answer = true;
            angular.forEach(_this.selection, function (pair) {
                if (pair.optionID.length === 0) {
                    answer = false;
                }
            });
            return answer;
        };
        this.addToSelection = function (optionId, optionGroupId) {
            angular.forEach(_this.selection, function (pair) {
                if (pair.optionGroupID === optionGroupId) {
                    pair.optionID = optionId;
                    return true;
                }
            });
            return false;
        };
        this.optionGroupIds = this.optionGroups.split(",");
        this.optionGroupIds.sort();
        this.selection = [];
        this.showValidFlag = false;
        this.showInvalidFlag = false;
        for (var i = 0; i < this.optionGroupIds.length; i++) {
            this.selection.push(new optionWithGroup("", this.optionGroupIds[i], false));
        }
        //get current selections
        this.optionCollectionConfig = collectionConfigService.newCollectionConfig("Option");
        this.optionCollectionConfig.setDisplayProperties('optionID,optionGroup.optionGroupID');
        this.optionCollectionConfig.addFilter('skus.skuID', this.skuId);
        this.optionCollectionConfig.setAllRecords(true);
        this.optionCollectionConfig.getEntity().then(function (response) {
            _this.savedOptions = {};
            if (response.records) {
                for (var kk in response.records) {
                    var record = response.records[kk];
                    _this.savedOptions[record['optionGroup_optionGroupID']] = record['optionID'];
                    _this.addToSelection(record['optionID'], record['optionGroup_optionGroupID']);
                }
            }
        });
        this.observerService.attach(this.validateOptions, "validateOptions");
    }
    return SWAddOptionGroupController;
}());
exports.SWAddOptionGroupController = SWAddOptionGroupController;
var SWAddOptionGroup = /** @class */ (function () {
    // @ngInject
    function SWAddOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) {
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.optionGroupPartialsPath = optionGroupPartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            productId: "@",
            skuId: "@",
            optionGroups: "="
        };
        this.controller = SWAddOptionGroupController;
        this.controllerAs = "swAddOptionGroup";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(optionGroupPartialsPath) + "addoptiongroup.html";
    }
    SWAddOptionGroup.Factory = function () {
        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) { return new SWAddOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            '$timeout',
            'collectionConfigService',
            'observerService',
            'optionGroupPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWAddOptionGroup;
}());
exports.SWAddOptionGroup = SWAddOptionGroup;


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOptionsForOptionGroupController = /** @class */ (function () {
    // @ngInject
    function SWOptionsForOptionGroupController($hibachi, $timeout, collectionConfigService, observerService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.validateChoice = function () {
            _this.observerService.notify("validateOptions", [_this.selectedOption, _this.optionGroup]);
        };
        this.optionCollectionConfig = collectionConfigService.newCollectionConfig("Option");
        this.optionCollectionConfig.setDisplayProperties("optionID, optionName, optionGroup.optionGroupID,optionGroup.optionGroupName");
        this.optionCollectionConfig.addFilter("optionGroup.optionGroupID", this.optionGroupId);
        this.optionCollectionConfig.setOrderBy('sortOrder|ASC');
        this.optionCollectionConfig.setAllRecords(true);
        this.optionCollectionConfig.getEntity().then(function (response) {
            _this.options = response.records;
            if (_this.options.length) {
                _this.optionGroup = {
                    optionGroupId: _this.options[0]['optionGroup_optionGroupID'],
                    optionGroupName: _this.options[0]['optionGroup_optionGroupName']
                };
                _this.selectedOption = _this.savedOptions[_this.optionGroup.optionGroupId];
            }
        });
    }
    return SWOptionsForOptionGroupController;
}());
exports.SWOptionsForOptionGroupController = SWOptionsForOptionGroupController;
var SWOptionsForOptionGroup = /** @class */ (function () {
    // @ngInject
    function SWOptionsForOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) {
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.optionGroupPartialsPath = optionGroupPartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            optionGroupId: "@",
            savedOptions: "="
        };
        this.controller = SWOptionsForOptionGroupController;
        this.controllerAs = "swOptionsForOptionGroup";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(optionGroupPartialsPath) + "optionsforoptiongroup.html";
    }
    SWOptionsForOptionGroup.Factory = function () {
        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) { return new SWOptionsForOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            '$timeout',
            'collectionConfigService',
            'observerService',
            'optionGroupPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWOptionsForOptionGroup;
}());
exports.SWOptionsForOptionGroup = SWOptionsForOptionGroup;


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(8);
//controllers
//directives
var swaddoptiongroup_1 = __webpack_require__(498);
var swoptionsforoptiongroup_1 = __webpack_require__(499);
var optiongroupmodule = angular.module('optiongroup', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('optionGroupPartialsPath', 'optiongroup/components/')
    //controllers
    //directives
    .directive('swAddOptionGroup', swaddoptiongroup_1.SWAddOptionGroup.Factory())
    .directive('swOptionsForOptionGroup', swoptionsforoptiongroup_1.SWOptionsForOptionGroup.Factory());
exports.optiongroupmodule = optiongroupmodule;


/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var FulfillmentsList;
(function (FulfillmentsList) {
    var Views;
    (function (Views) {
        Views[Views["Fulfillments"] = 0] = "Fulfillments";
        Views[Views["Items"] = 1] = "Items";
    })(Views = FulfillmentsList.Views || (FulfillmentsList.Views = {}));
    var ofisStatusType;
    (function (ofisStatusType) {
        ofisStatusType[ofisStatusType["unavailable"] = 0] = "unavailable";
        ofisStatusType[ofisStatusType["partial"] = 1] = "partial";
        ofisStatusType[ofisStatusType["available"] = 2] = "available";
    })(ofisStatusType = FulfillmentsList.ofisStatusType || (FulfillmentsList.ofisStatusType = {}));
})(FulfillmentsList || (FulfillmentsList = {}));
/**
 * Fulfillment List Controller
 */
var SWOrderFulfillmentListController = /** @class */ (function () {
    // @ngInject
    function SWOrderFulfillmentListController($hibachi, $timeout, collectionConfigService, observerService, utilityService, $location, $http, $window, typeaheadService, orderFulfillmentService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.$location = $location;
        this.$http = $http;
        this.$window = $window;
        this.typeaheadService = typeaheadService;
        this.orderFulfillmentService = orderFulfillmentService;
        this.usingRefresh = false;
        this.addingBatch = false;
        /**
         * Implements a listener for the orderFulfillment selections
         */
        this.swSelectionToggleSelectionorderFulfillmentCollectionTableListener = function (callBackData) {
            var processObject = _this.getProcessObject();
            if (_this.isSelected(callBackData.action)) {
                processObject['data']['orderFulfillmentIDList'] = _this.listAppend(processObject.data['orderFulfillmentIDList'], callBackData.selection);
            }
            else {
                processObject['data']['orderFulfillmentIDList'] = _this.listRemove(processObject.data['orderFulfillmentIDList'], callBackData.selection);
            }
            _this.setProcessObject(processObject);
        };
        this.collectionConfigUpdatedListener = function (callBackData) {
            if (_this.usingRefresh == true) {
                _this.refreshFlag = true;
            }
        };
        this.orderFulfillmentCollectionTablepageRecordsUpdatedListener = function (callBackData) {
            if (callBackData) {
                _this.updateCollectionsInView();
                _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));
            }
        };
        /**
         * Implements a listener for the orderItem selections
         */
        this.swSelectionToggleSelectionorderItemCollectionTableListener = function (callBackData) {
            var processObject = _this.getProcessObject();
            if (_this.isSelected(callBackData.action)) {
                processObject['data']['orderItemIDList'] = _this.listAppend(processObject['data']['orderItemIDList'], callBackData.selection);
            }
            else {
                processObject['data']['orderItemIDList'] = _this.listRemove(processObject['data']['orderItemIDList'], callBackData.selection);
            }
        };
        /**
         * returns true if the action is selected
         */
        this.isSelected = function (test) {
            if (test == "check") {
                return true;
            }
            else {
                return false;
            }
            ;
        };
        /**
         * Each collection has a view. The view is maintained by the enum. This Returns
         * the collection for that view.
         */
        this.getCollectionByView = function (view) {
            if (view == undefined || _this.collections == undefined) {
                return;
            }
            return _this.collections[view];
        };
        this.updateCollectionsInView = function () {
            _this.collections = [];
            _this.collections.push(_this.orderFulfillmentCollection);
            _this.collections.push(_this.orderItemCollection);
        };
        /**
         * Setup the initial orderFulfillment Collection.
         */
        this.createOrderFulfillmentCollection = function () {
            _this.orderFulfillmentCollection = _this.collectionConfigService.newCollectionConfig("OrderFulfillment");
            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentID", "ID");
            _this.orderFulfillmentCollection.addDisplayProperty("order.orderNumber", "Order Number");
            _this.orderFulfillmentCollection.addDisplayProperty("order.orderOpenDateTime", "Date Started");
            _this.orderFulfillmentCollection.addDisplayProperty("shippingMethod.shippingMethodName", "Shipping Method");
            _this.orderFulfillmentCollection.addDisplayProperty("shippingAddress.stateCode", "State");
            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentStatusType.typeName", "Status");
            //this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentItems.stock.location.locationID", "Stock Location");
            //this.orderFulfillmentCollection.addFilter("orderFulfillmentInvStatType.systemCode", "ofisAvailable", "=");
            _this.orderFulfillmentCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstUnfulfilled", "=");
            _this.orderFulfillmentCollection.addFilter("order.orderStatusType.systemCode", "ostNew", "=");
            _this.orderFulfillmentCollection.addFilter("order.orderNumber", "", "!=");
            _this.orderFulfillmentCollection.addFilter("fulfillmentMethod.fulfillmentMethodType", "shipping", "=");
        };
        this.createOrderFulfillmentCollectionWithStatus = function (status) {
            status = status.trim();
            _this.orderFulfillmentCollection = _this.collectionConfigService.newCollectionConfig("OrderFulfillment");
            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentID", "ID");
            _this.orderFulfillmentCollection.addDisplayProperty("order.orderNumber", "Order Number");
            _this.orderFulfillmentCollection.addDisplayProperty("order.orderOpenDateTime", "Date Started");
            _this.orderFulfillmentCollection.addDisplayProperty("shippingMethod.shippingMethodName", "Shipping Method");
            _this.orderFulfillmentCollection.addDisplayProperty("shippingAddress.stateCode", "State");
            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentStatusType.typeName", "Status");
            //this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentInvStatType.systemCode", "Availability");
            //this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentItems.stock.location.locationID", "Stock Location");
            _this.orderFulfillmentCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstUnfulfilled", "!=");
            _this.orderFulfillmentCollection.addFilter("fulfillmentMethod.fulfillmentMethodType", "shipping", "=");
            //Shipping
            _this.orderFulfillmentCollection.addFilter("order.orderStatusType.systemCode", "ostNew", "=");
            _this.orderFulfillmentCollection.addFilter("order.orderNumber", "", "!=");
            if (status) {
                console.log("S", status, status == "available");
                if (status == "unavailable") {
                    _this.orderFulfillmentCollection.addFilter("orderFulfillmentItems.sku.calculatedQOH", "0", "<=");
                }
                else if (status == "available") {
                    console.log("Made it.");
                    _this.orderFulfillmentCollection.addFilter("orderFulfillmentItems.sku.calculatedQOH", "0", ">");
                }
                else if (status == "paid") {
                    _this.orderFulfillmentCollection.addFilter("order.calculatedPaymentAmountReceivedTotal", "0", ">");
                }
            }
            _this.orderFulfillmentCollection.getEntity().then(function (result) {
                //refreshes the page.
                _this.collections[0] = _this.orderFulfillmentCollection;
                _this.view = _this.views.Fulfillments;
                _this.refreshFlag = false;
            });
        };
        this.createOrderItemCollectionWithStatus = function (status) {
            delete _this.orderItemCollection;
            _this.view = undefined;
            _this.orderItemCollection = _this.collectionConfigService.newCollectionConfig("OrderFulfillment");
            _this.orderItemCollection.addDisplayProperty("orderItemID", "ID");
            _this.orderItemCollection.addDisplayProperty("order.orderNumber", "Order Number");
            _this.orderItemCollection.addDisplayProperty("order.orderOpenDateTime", "Date Started");
            _this.orderItemCollection.addDisplayProperty("shippingMethod.shippingMethodName", "Shipping Method");
            _this.orderItemCollection.addDisplayProperty("shippingAddress.stateCode", "State");
            _this.orderItemCollection.addDisplayProperty("orderFulfillmentStatusType.typeName", "Status");
            _this.orderItemCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstUnfulfilled", "==");
            _this.orderItemCollection.addFilter("fulfillmentMethod.fulfillmentMethodName", "Shipping", "=");
            //Shipping
            _this.orderItemCollection.addFilter("order.orderStatusType.systemCode", "ostNew", "=");
            _this.orderItemCollection.addFilter("order.orderNumber", "", "!=");
            //"order.paymentAmountDue", "0", ">", {persistent: false}
            if (status) {
                if (status == "partial") {
                    _this.orderFulfillmentCollection.addFilter("sku.calculatedQOH", "0", ">", "AND");
                }
                else if (status == "unavailable") {
                    _this.orderFulfillmentCollection.addFilter("sku.calculatedQOH", "0", "<=", "AND");
                }
                else if (status == "available") {
                    _this.orderFulfillmentCollection.addFilter("sku.calculatedQOH", "0", ">", "AND");
                }
                else if (status == "paid") {
                    _this.orderFulfillmentCollection.addFilter("order.calculatedPaymentAmountReceivedTotal", "0", ">", "AND");
                }
            }
            _this.orderItemCollection.getEntity().then(function (result) {
                //refreshes the page.
                _this.collections[0] = _this.orderItemCollection;
                _this.view = _this.views.Fulfillments;
            });
        };
        this.createOrderFulfillmentCollectionWithFilterMap = function (filterMap) {
            delete _this.orderFulfillmentCollection;
            _this.view = undefined;
            _this.orderFulfillmentCollection = _this.collectionConfigService.newCollectionConfig("OrderFulfillment");
            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentID", "ID");
            _this.orderFulfillmentCollection.addDisplayProperty("order.orderNumber", "Order Number");
            _this.orderFulfillmentCollection.addDisplayProperty("order.orderOpenDateTime", "Date Started");
            _this.orderFulfillmentCollection.addDisplayProperty("shippingMethod.shippingMethodName", "Shipping Method");
            _this.orderFulfillmentCollection.addDisplayProperty("shippingAddress.stateCode", "State");
            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentStatusType.typeName", "Status");
            _this.orderFulfillmentCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstUnfulfilled", "=");
            _this.orderFulfillmentCollection.addFilter("fulfillmentMethod.fulfillmentMethodType", "shipping", "=");
            //Shipping
            _this.orderFulfillmentCollection.addFilter("order.orderStatusType.systemCode", "ostNew", "=");
            _this.orderFulfillmentCollection.addFilter("order.orderNumber", "", "!=");
            //this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentInvStatType.systemCode", "Availability");
            //this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentItems.stock.location.locationID", "Stock Location");
            //Build the collection using just the correct filters.
            //Check the filters for multiple true
            var hasMultipleEnabled = false;
            var filterCount = 0;
            filterMap.forEach(function (v, k) {
                if (filterMap.get(k) === true) {
                    filterCount++;
                }
            });
            if (filterCount > 1) {
                hasMultipleEnabled = true;
            }
            //Add the filters.
            filterMap.forEach(function (v, k) {
                var systemCode = k;
                //handle truth
                if (filterMap.get(k) === true) {
                    if (k) {
                        if (k == "unavailable") {
                            _this.orderFulfillmentCollection.addFilter("sku.calculatedQOH", "0", "=", "AND");
                        }
                        else if (k == "available") {
                            _this.orderFulfillmentCollection.addFilter("sku.calculatedQOH", "0", ">", "AND");
                        }
                        else if (k == "paid") {
                            console.log("Apply Paid Filter");
                            _this.orderFulfillmentCollection.addFilter("order.calculatedPaymentAmountReceivedTotal", "0", ">", "AND");
                        }
                    }
                }
                //handle false
                if (filterMap.get(k) === false && filterMap.get(k) != undefined) {
                    if (systemCode.length) {
                        //this.orderFulfillmentCollection.addFilter("orderFulfillmentItems.sku.calculatedQATS", systemCode, "!=", 'AND');
                        //this.orderFulfillmentCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstFulfilled", "!=", "AND");
                        //this.orderFulfillmentCollection.addFilter("order.orderNumber", "", "!=", "AND");
                    }
                }
            });
            if (_this.getCollectionByView(_this.getView())) {
                _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));
            }
        };
        /**
         * Setup the initial orderItem Collection.
         */
        this.createOrderItemCollection = function () {
            _this.orderItemCollection = _this.collectionConfigService.newCollectionConfig("OrderItem");
            _this.orderItemCollection.addDisplayProperty("orderItemID");
            _this.orderItemCollection.addDisplayProperty("quantity");
            _this.orderItemCollection.addDisplayProperty("order.orderNumber");
            _this.orderItemCollection.addDisplayProperty("order.orderOpenDateTime");
            _this.orderItemCollection.addDisplayProperty("orderFulfillment.orderFulfillmentStatusType.typeName");
            _this.orderItemCollection.addDisplayProperty("sku.product.productName");
            _this.orderItemCollection.addFilter("orderFulfillment.orderFulfillmentStatusType.systemCode", "ofstUnfulfilled", "=");
            _this.orderItemCollection.addFilter("orderFulfillment.fulfillmentMethod.fulfillmentMethodType", "shipping", "=");
            _this.orderItemCollection.addFilter("order.orderNumber", "", "!=");
        };
        /**
         * Toggle the Status Type filters on and off.
         */
        this.toggleFilter = function (filterName) {
            _this.filters[filterName] = !_this.filters[filterName];
            if (_this.filters[filterName]) {
                _this.addFilter(filterName, true);
                return;
            }
            _this.removeFilter(filterName, false);
        };
        /**
         * Toggle between views. We refresh the collection everytime we set the view.
         */
        this.setView = function (view) {
            _this.view = view;
            if (_this.getCollectionByView(_this.getView())) {
                _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));
            }
        };
        //ACTION CREATOR: This will toggle the listing between its 2 states (orderfulfillments and orderitems)
        this.toggleOrderFulfillmentListing = function () {
            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({ type: "TOGGLE_FULFILLMENT_LISTING", payload: {} });
            //reset the selections because you can't mix and match.
            _this.getProcessObject().data.orderFulfillmentIDList = "";
            _this.getProcessObject().data.orderItemIDList = "";
            try {
                _this.orderFulfillmentService.listingService.clearAllSelections("orderFulfillmentCollectionTable");
                _this.orderFulfillmentService.listingService.clearAllSelections("orderItemCollectionTable");
            }
            catch (e) {
                //no need to say anything.
            }
            _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));
        };
        /**
         * Returns the current view.
         */
        this.getView = function () {
            return _this.view;
        };
        /**
         * Refreshes the view
         */
        this.refreshPage = function () {
            if (_this.utilityService.isMultiPageMode()) {
                window.location.reload();
            }
        };
        /**
         * Initialized the collection so that the listingDisplay can you it to display its data.
         */
        this.refreshCollectionTotal = function (collection) {
            if (collection) {
                collection.getEntity().then(function (response) {
                    _this.total = response.recordsCount;
                    _this.refreshFlag = false;
                });
                return collection;
            }
        };
        this.getRecordsCount = function (collection) {
            _this.total = collection.recordsCount;
            _this.refreshFlag = false;
        };
        /**
         * Adds one of the status type filters into the collectionConfigService
         * @param key: FulfillmentsList.CollectionFilterValues {'partial' | 'available' | 'unavailable' | 'location'}
         * @param Vvalue: boolean: {true|false}
         */
        this.addFilter = function (key, value) {
            _this.$timeout(function () {
                _this.refreshFlag = true;
            }, 1);
            //Always keep the orderNumber filter.
            //If there is only one filter group add a second. otherwise add to the second.
            var filterGroup = [];
            var filter = {};
            if (_this.getCollectionByView(_this.getView()) && _this.getCollectionByView(_this.getView()).baseEntityName == "OrderFulfillment") {
                if (value == true) {
                    if (key == "partial") {
                        _this.createOrderFulfillmentCollectionWithStatus("partial");
                    }
                    if (key == "available") {
                        _this.createOrderFulfillmentCollectionWithStatus("available");
                    }
                    if (key == "unavailable") {
                        _this.createOrderFulfillmentCollectionWithStatus("unavailable");
                    }
                    if (key == "location" && value != undefined) {
                        filter = _this.getCollectionByView(_this.getView()).createFilter("orderFulfillmentItems.stock.location.locationName", value, "=", "OR", false);
                    }
                    if (key == "paid" && value != undefined) {
                        console.log("Applied Paid Filter");
                        _this.getCollectionByView(_this.getView()).addFilter("order.calculatedPaymentAmountReceivedTotal", "0", ">");
                    }
                }
                if (value = false) {
                    _this.createOrderFulfillmentCollection();
                }
            }
            else {
                if (value == true) {
                    if (key == "partial") {
                        _this.createOrderItemCollectionWithStatus("partial");
                    }
                    if (key == "available") {
                        _this.createOrderItemCollectionWithStatus("available");
                    }
                    if (key == "unavailable") {
                        _this.createOrderItemCollectionWithStatus("unavailable");
                    }
                    if (key == "location" && value != undefined) {
                        filter = _this.getCollectionByView(_this.getView()).createFilter("stock.location.locationName", value, "=", "OR", false);
                    }
                    if (key == "paid" && value != undefined) {
                        console.log("Applied Paid Filter");
                        _this.getCollectionByView(_this.getView()).addFilter("order.calculatedPaymentAmountReceivedTotal", "0", ">");
                    }
                }
                if (value = false) {
                    _this.createOrderItemCollection();
                }
            }
            _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));
        };
        /**
         * Adds one of the status type filters into the collectionConfigService
         * @param key: FulfillmentsList.CollectionFilterValues {'partial' | 'available' | 'unavailable' | 'location'}
         * @param Vvalue: boolean: {true|false}
         */
        this.removeFilter = function (key, value) {
            _this.refreshFlag = true;
            //Always keep the orderNumber filter.
            if (_this.getCollectionByView(_this.getView()) && _this.getCollectionByView(_this.getView()).baseEntityName == "OrderFulfillment") {
                var filterMap = new Map();
                filterMap.set("partial", _this.filters['partial']);
                filterMap.set("available", _this.filters['available']);
                filterMap.set("unavailable", _this.filters['unavailable']);
                filterMap.set("location", _this.filters['location']);
                filterMap.set("paid", _this.filters['paid']);
                _this.createOrderFulfillmentCollectionWithFilterMap(filterMap);
            }
            else if (_this.getCollectionByView(_this.getView()).baseEntityName == "OrderItem") {
                console.warn("Adding orderItem Filters", _this.getCollectionByView(_this.getView()));
            }
            //Calls to auto refresh the collection since a filter was added.
            _this.createOrderFulfillmentCollection();
            _this.createOrderItemCollection();
            //some view setup.
            _this.views = FulfillmentsList.Views;
            _this.setView(_this.views.Fulfillments);
            //add both collections into the collection object. Removed 0 elements (insert only).
            _this.collections.push(_this.orderFulfillmentCollection);
            _this.collections.push(_this.orderItemCollection);
            _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));
        };
        /**
         * This applies or removes a location filter from the collection.
         */
        this.addLocationFilter = function (locationID) {
            var currentCollection = _this.getCollectionByView(_this.getView());
            if (currentCollection && currentCollection.baseEntityName == "OrderFulfillment") {
                //If this is the fulfillment collection, the location is against, orderItems.stock.location
                currentCollection.addFilter("orderFulfillmentItems.stock.location.locationID", locationID, "=");
            }
            if (currentCollection && currentCollection.baseEntityName == "OrderItem") {
                //If this is the fulfillment collection, the location is against, stock.location
                currentCollection.addFilter("stock.location.locationID", locationID, "=");
            }
            //this.toggleOrderFulfillmentListing();
            //this.toggleOrderFulfillmentListing();
            _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));
        };
        /**
         * Saved the batch using the data stored in the processObject. This delegates to the service method.
         */
        this.addBatch = function () {
            _this.addingBatch = true;
            if (_this.getProcessObject()) {
                _this.orderFulfillmentService.addBatch(_this.getProcessObject()).then(_this.processCreateSuccess, _this.processCreateError);
            }
        };
        /**
         * Handles a successful post of the processObject
         */
        this.processCreateSuccess = function (result) {
            //Redirect to the created fulfillmentBatch.
            _this.addingBatch = false;
            if (result.data && result.data['fulfillmentBatchID']) {
                _this.$window.location.href = "/?slataction=entity.detailfulfillmentbatch&fulfillmentBatchID=" + result.data['fulfillmentBatchID'];
            }
        };
        /**
         * Handles a successful post of the processObject
         */
        this.processCreateError = function (data) {
            console.warn("Process Errors", data);
        };
        /**
         * Returns the processObject
         */
        this.getProcessObject = function () {
            return _this.processObject;
        };
        /**
         * Sets the processObject
         */
        this.setProcessObject = function (processObject) {
            _this.processObject = processObject;
        };
        /**
         * This will recieve all the notifications from all typeaheads on the page.
         * When I revieve a notification, it will be an object that has a name and data.
         * The name is the name of the form and the data is the selected id. The three types,
         * that I'm currently looking for are:
         * "locationIDfilter", "locationID", or "accountID" These are the same as the names of the forms.
         */
        this.recieveNotification = function (message) {
            switch (message.payload.name) {
                case "locationIDfilter":
                    //If this is called, then the filter needs to be updated based on this id.
                    _this.addLocationFilter(message.payload.data);
                    break;
                case "locationID":
                    //If this is called, then a location for the batch has been selected.
                    _this.getProcessObject().data['locationID'] = message.payload.data || "";
                    break;
                case "accountID":
                    //If this is called, then an account to assign to the batch has been selected.
                    _this.getProcessObject().data['assignedAccountID'] = message.payload.data || "";
                    break;
                default:
                    console.log("Warning: A default case was hit with the data: ", message);
            }
        };
        /**
         * Returns the number of selected fulfillments
         */
        this.getTotalFulfillmentsSelected = function () {
            var total = 0;
            if (_this.getProcessObject() && _this.getProcessObject().data) {
                try {
                    if (_this.getProcessObject().data.orderFulfillmentIDList && _this.getProcessObject().data.orderFulfillmentIDList.split(",").length > 0 && _this.getProcessObject().data.orderItemIDList && _this.getProcessObject().data.orderItemIDList.split(",").length > 0) {
                        return _this.getProcessObject().data.orderFulfillmentIDList.split(",").length + _this.getProcessObject().data.orderItemIDList.split(",").length;
                    }
                    else if (_this.getProcessObject().data.orderFulfillmentIDList && _this.getProcessObject().data.orderFulfillmentIDList.split(",").length > 0) {
                        return _this.getProcessObject().data.orderFulfillmentIDList.split(",").length;
                    }
                    else if (_this.getProcessObject().data.orderItemIDList && _this.getProcessObject().data.orderItemIDList.split(",").length > 0) {
                        return _this.getProcessObject().data.orderItemIDList.split(",").length;
                    }
                }
                catch (error) {
                    return 0; //default
                }
            }
        };
        //Set the initial state for the filters.
        this.filters = { "unavailable": false, "partial": false, "available": false, "paid": false };
        this.collections = [];
        //Some setup for the fulfillments collection.
        this.createOrderFulfillmentCollection();
        this.createOrderItemCollection();
        //some view setup.
        this.views = FulfillmentsList.Views;
        this.setView(this.views.Fulfillments);
        //add both collections into the collection object. Removed 0 elements (insert only).
        this.collections.push(this.orderFulfillmentCollection);
        this.collections.push(this.orderItemCollection);
        //Setup the processObject
        this.setProcessObject(this.$hibachi.newFulfillmentBatch_Create());
        //adds the two default filters to start.
        //this.addFilter('available', true);
        //this.addFilter('partial', true);
        var collection = this.refreshCollectionTotal(this.getCollectionByView(this.getView()));
        if (collection.entityName = "OrderFulfillment") {
            this.orderFulfillmentCollection = collection;
        }
        else {
            this.orderItemCollection = collection;
        }
        //Attach our listeners for selections on both listing displays.
        this.observerService.attach(this.swSelectionToggleSelectionorderFulfillmentCollectionTableListener, "swSelectionToggleSelectionorderFulfillmentCollectionTable", "swSelectionToggleSelectionorderFulfillmentCollectionTableListener");
        this.observerService.attach(this.swSelectionToggleSelectionorderItemCollectionTableListener, "swSelectionToggleSelectionorderItemCollectionTable", "swSelectionToggleSelectionorderItemCollectionTableListener");
        this.observerService.attach(this.collectionConfigUpdatedListener, "collectionConfigUpdated", "collectionConfigUpdatedListener");
        //Subscribe to state changes in orderFulfillmentService
        this.orderFulfillmentService.orderFulfillmentStore.store$.subscribe(function (state) {
            _this.state = state;
            if (state && state.showFulfillmentListing == true) {
                //set the view.
                _this.setView(_this.views.Fulfillments);
            }
            else {
                _this.setView(_this.views.Items);
            }
            _this.getCollectionByView(_this.getView());
        });
        //Subscribe for state changes to the typeahead.
        this.typeaheadService.typeaheadStore.store$.subscribe(function (update) {
            if (update.action && update.action.payload) {
                _this.recieveNotification(update.action);
            }
        });
    }
    /**
     * Adds a string to a list.
     */
    SWOrderFulfillmentListController.prototype.listAppend = function (str, subStr) {
        return this.utilityService.listAppend(str, subStr, ",");
    };
    /**
     * Removes a substring from a string.
     * str: The original string.
     * subStr: The string to remove.
     */
    SWOrderFulfillmentListController.prototype.listRemove = function (str, subStr) {
        return this.utilityService.listRemove(str, subStr);
    };
    return SWOrderFulfillmentListController;
}());
exports.SWOrderFulfillmentListController = SWOrderFulfillmentListController;
/**
 * This is a view helper class that uses the collection helper class.
 */
var SWOrderFulfillmentList = /** @class */ (function () {
    // @ngInject
    function SWOrderFulfillmentList(slatwallPathBuilder, orderFulfillmentPartialsPath) {
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {};
        this.controller = SWOrderFulfillmentListController;
        this.controllerAs = "swOrderFulfillmentListController";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(orderFulfillmentPartialsPath) + "orderfulfillmentlist.html";
    }
    SWOrderFulfillmentList.Factory = function () {
        var directive = function (slatwallPathBuilder, orderFulfillmentPartialsPath) { return new SWOrderFulfillmentList(slatwallPathBuilder, orderFulfillmentPartialsPath); };
        directive.$inject = [
            'slatwallPathBuilder',
            'orderFulfillmentPartialsPath'
        ];
        return directive;
    };
    return SWOrderFulfillmentList;
}());
exports.SWOrderFulfillmentList = SWOrderFulfillmentList;


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(8);
//services
var orderfulfillmentservice_1 = __webpack_require__(168);
//controllers
//directives
var sworderfulfillmentlist_1 = __webpack_require__(501);
//models 
var orderfulfillmentmodule = angular.module('orderFulfillment', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('orderFulfillmentPartialsPath', 'orderfulfillment/components/')
    //services
    .service('orderFulfillmentService', orderfulfillmentservice_1.OrderFulfillmentService)
    //controllers
    //directives
    .directive('swOrderFulfillmentList', sworderfulfillmentlist_1.SWOrderFulfillmentList.Factory());
exports.orderfulfillmentmodule = orderfulfillmentmodule;


/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWChildOrderItem = /** @class */ (function () {
    function SWChildOrderItem($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) {
        return {
            restrict: "A",
            scope: {
                orderItem: "=",
                orderId: "@",
                childOrderItems: "=",
                attributes: "="
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "childorderitem.html",
            link: function (scope, element, attr) {
                var columnsConfig = [
                    {
                        "isDeletable": false,
                        "isExportable": true,
                        "propertyIdentifier": "_orderitem.orderItemID",
                        "ormtype": "id",
                        "isVisible": true,
                        "isSearchable": true,
                        "title": "Order Item ID"
                    },
                    {
                        "title": "Order Item Type",
                        "propertyIdentifier": "_orderitem.orderItemType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Order Item Price",
                        "propertyIdentifier": "_orderitem.price",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku Name",
                        "propertyIdentifier": "_orderitem.sku.skuName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku Price",
                        "propertyIdentifier": "_orderitem.skuPrice",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku ID",
                        "propertyIdentifier": "_orderitem.sku.skuID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "SKU Code",
                        "propertyIdentifier": "_orderitem.sku.skuCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product ID",
                        "propertyIdentifier": "_orderitem.sku.product.productID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Name",
                        "propertyIdentifier": "_orderitem.sku.product.productName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Description",
                        "propertyIdentifier": "_orderitem.sku.product.productDescription",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Image File Name",
                        "propertyIdentifier": "_orderitem.sku.imageFile",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.sku.skuPrice",
                        "ormtype": "string"
                    },
                    {
                        "title": "Product Type",
                        "propertyIdentifier": "_orderitem.sku.product.productType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.sku.baseProductType",
                        "persistent": false
                    },
                    {
                        "title": "Qty.",
                        "propertyIdentifier": "_orderitem.quantity",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment Method Name",
                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment ID",
                        "propertyIdentifier": "_orderitem.orderFulfillment.orderFulfillmentID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment Method Type",
                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Street Address",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.streetAddress",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Street Address 2",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.street2Address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Postal Code",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.postalCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "City",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.city",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "State",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.stateCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Country",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.countryCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Total",
                        "propertyIdentifier": "_orderitem.itemTotal",
                        "persistent": false
                    },
                    {
                        "title": "Discount Amount",
                        "propertyIdentifier": "_orderitem.discountAmount",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.extendedPrice",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroup.amount"
                    },
                    {
                        "title": "Product Bundle Group",
                        "propertyIdentifier": "_orderitem.productBundleGroup.productBundleGroupID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroup.amountType"
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroupPrice",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundlePrice",
                        "persistent": false
                    }
                ];
                //add attributes to the column config
                angular.forEach(scope.attributes, function (attribute) {
                    var attributeColumn = {
                        propertyIdentifier: "_orderitem." + attribute.attributeCode,
                        attributeID: attribute.attributeID,
                        attributeSetObject: "orderItem"
                    };
                    columnsConfig.push(attributeColumn);
                });
                var filterGroupsConfig = [
                    {
                        "filterGroup": [
                            {
                                "propertyIdentifier": "_orderitem.parentOrderItem.orderItemID",
                                "comparisonOperator": "=",
                                "value": scope.orderItem.$$getID(),
                            }
                        ]
                    }
                ];
                var options = {
                    columnsConfig: angular.toJson(columnsConfig),
                    filterGroupsConfig: angular.toJson(filterGroupsConfig),
                    allRecords: true
                };
                //hide the children on click
                scope.hideChildren = function (orderItem) {
                    //Set all child order items to clicked = false.
                    angular.forEach(scope.childOrderItems, function (child) {
                        console.dir(child);
                        child.hide = !child.hide;
                        scope.orderItem.clicked = !scope.orderItem.clicked;
                    });
                };
                /**
                * Returns a list of child order items.
                */
                scope.getChildOrderItems = function (orderItem) {
                    orderItem.clicked = true;
                    if (!scope.orderItem.childItemsRetrieved) {
                        scope.orderItem.childItemsRetrieved = true;
                        var orderItemsPromise = $hibachi.getEntity('orderItem', options);
                        orderItemsPromise.then(function (value) {
                            var collectionConfig = {};
                            collectionConfig.columns = columnsConfig;
                            collectionConfig.baseEntityName = 'SlatwallOrderItem';
                            collectionConfig.baseEntityAlias = '_orderitem';
                            var childOrderItems = $hibachi.populateCollection(value.records, collectionConfig);
                            angular.forEach(childOrderItems, function (childOrderItem) {
                                childOrderItem.hide = false;
                                childOrderItem.depth = orderItem.depth + 1;
                                childOrderItem.data.parentOrderItem = orderItem;
                                childOrderItem.data.parentOrderItemQuantity = scope.orderItem.data.quantity / scope.orderItem.data.parentOrderItemQuantity;
                                scope.childOrderItems.splice(scope.childOrderItems.indexOf(orderItem) + 1, 0, childOrderItem);
                                childOrderItem.data.productBundleGroupPercentage = 1;
                                if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageIncrease') {
                                    childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;
                                }
                                else if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageDecrease') {
                                    childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;
                                }
                            });
                        });
                    }
                };
            }
        };
    }
    SWChildOrderItem.Factory = function () {
        var directive = function ($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) { return new SWChildOrderItem($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$http',
            '$compile',
            '$templateCache',
            '$hibachi',
            'orderItemPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWChildOrderItem;
}());
exports.SWChildOrderItem = SWChildOrderItem;


/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * Displays a shipping label in the order items row.
 * @module slatwalladmin
 * @class swOrderItemsShippingLabelStamp
 */
var SWOiShippingLabelStamp = /** @class */ (function () {
    function SWOiShippingLabelStamp($log, orderItemPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                orderFulfillment: "="
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderfulfillment-shippinglabel.html",
            link: function (scope, element, attrs) {
                //Get the template.
                $log.debug("\n\n<---ORDER FULFILLMENT STAMP--->\n\n");
                $log.debug(scope.orderFulfillment);
                $log.debug(scope.orderFulfillment.data.fulfillmentMethodType);
            }
        };
    }
    SWOiShippingLabelStamp.Factory = function () {
        var directive = function ($log, orderItemPartialsPath, slatwallPathBuilder) { return new SWOiShippingLabelStamp($log, orderItemPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            'orderItemPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWOiShippingLabelStamp;
}());
exports.SWOiShippingLabelStamp = SWOiShippingLabelStamp;


/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOrderItem = /** @class */ (function () {
    //@ngInject
    function SWOrderItem($log, $compile, $http, $templateCache, $hibachi, $timeout, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) {
        return {
            restrict: "A",
            scope: {
                orderItem: "=",
                orderId: "@",
                attributes: "=",
                paginator: "=?"
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem.html",
            link: function (scope, element, attr) {
                $log.debug('order item init');
                $log.debug(scope.orderItem);
                scope.orderItem.clicked = false; //Never been clicked
                scope.orderItem.details = [];
                scope.orderItem.events = [];
                scope.orderItem.queuePosition;
                scope.orderItem.onWaitlist = false;
                scope.orderItem.isPending = false;
                scope.orderItem.isRegistered = false;
                var foundPosition = false;
                if (scope.orderItem.data.sku.data.product.data.productType.data.systemCode === 'event') {
                    var eventRegistrationPromise = scope.orderItem.$$getEventRegistrations();
                    eventRegistrationPromise.then(function () {
                        angular.forEach(scope.orderItem.data.eventRegistrations, function (eventRegistration) {
                            $log.debug(eventRegistration);
                            var eventRegistrationPromise = eventRegistration.$$getEventRegistrationStatusType();
                            eventRegistrationPromise.then(function (rec) {
                                $log.debug(rec);
                                angular.forEach(rec.records, function (record) {
                                    $log.debug("Records");
                                    $log.debug(record.eventRegistrationStatusType);
                                    angular.forEach(record.eventRegistrationStatusType, function (statusType) {
                                        if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstWaitlisted") {
                                            scope.orderItem.onWaitlist = true;
                                            $log.debug("Found + " + statusType.systemCode);
                                            //Because the customer is waitlisted, we need to get the number of customers ahead of them in the queue.
                                            var position = getPositionInQueueFor(scope.orderItem);
                                            scope.orderItem.queuePosition = position;
                                        }
                                        else if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstRegistered") {
                                            scope.orderItem.isRegistered = true;
                                            $log.debug("Found + " + statusType.systemCode);
                                        }
                                        else if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstPendingApproval") {
                                            scope.orderItem.isPending = true;
                                            $log.debug("Found + " + statusType.systemCode);
                                        }
                                        else {
                                            $log.error("Couldn't resolve a status type for: " + statusType.systemCode);
                                        }
                                    });
                                });
                            });
                        });
                    });
                }
                /**
                * Returns the current position in the queue for an orderItem that's on the waiting list.
                */
                var getPositionInQueueFor = function (orderItem) {
                    $log.debug("Retrieving position in Queue: ");
                    var queueConfig = [
                        {
                            "propertyIdentifier": "_eventregistration.waitlistQueuePositionStruct",
                            "isVisible": true,
                            "persistent": false,
                            "title": "Event Registrations"
                        }
                    ];
                    var queueGroupsConfig = [
                        {
                            "filterGroup": [
                                {
                                    "propertyIdentifier": "_eventregistration.orderItem.orderItemID",
                                    "comparisonOperator": "=",
                                    "value": orderItem.$$getID(),
                                }
                            ]
                        }
                    ];
                    var queueOptions = {
                        columnsConfig: angular.toJson(queueConfig),
                        filterGroupsConfig: angular.toJson(queueGroupsConfig),
                        allRecords: true
                    };
                    var positionPromise = $hibachi.getEntity('EventRegistration', queueOptions);
                    $log.debug(positionPromise);
                    positionPromise.then(function (value) {
                        angular.forEach(value.records, function (position) {
                            $log.debug("Position: " + position.waitlistQueuePositionStruct);
                            if (position.waitlistQueuePositionStruct !== -1) {
                                scope.orderItem.queuePosition = position.waitlistQueuePositionStruct; //Use the value.
                                return position.waitlistQueuePositionStruct;
                            }
                        });
                    });
                };
                //define how we get child order items
                var columnsConfig = [
                    {
                        "isDeletable": false,
                        "isExportable": true,
                        "propertyIdentifier": "_orderitem.orderItemID",
                        "ormtype": "id",
                        "isVisible": true,
                        "isSearchable": true,
                        "title": "Order Item ID"
                    },
                    {
                        "title": "Order Item Type",
                        "propertyIdentifier": "_orderitem.orderItemType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Order Item Price",
                        "propertyIdentifier": "_orderitem.price",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku Name",
                        "propertyIdentifier": "_orderitem.sku.skuName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku Price",
                        "propertyIdentifier": "_orderitem.skuPrice",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku ID",
                        "propertyIdentifier": "_orderitem.sku.skuID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "SKU Code",
                        "propertyIdentifier": "_orderitem.sku.skuCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Bundle Group",
                        "propertyIdentifier": "_orderitem.productBundleGroup.productBundleGroupID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product ID",
                        "propertyIdentifier": "_orderitem.sku.product.productID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Name",
                        "propertyIdentifier": "_orderitem.sku.product.productName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Type",
                        "propertyIdentifier": "_orderitem.sku.product.productType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Description",
                        "propertyIdentifier": "_orderitem.sku.product.productDescription",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.sku.baseProductType",
                        "persistent": false
                    },
                    {
                        "title": "Event Start Date",
                        "propertyIdentifier": "_orderitem.sku.eventStartDateTime",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Description",
                        "propertyIdentifier": "_orderitem.sku.options",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.skuPrice",
                        "ormtype": "string"
                    },
                    {
                        "title": "Image File Name",
                        "propertyIdentifier": "_orderitem.sku.imageFile",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Qty.",
                        "propertyIdentifier": "_orderitem.quantity",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Order Return ID",
                        "propertyIdentifier": "_orderitem.orderReturn.orderReturnID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Return Street Address",
                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.streetAddress",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Return Street Address 2",
                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.street2Address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Return City",
                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.city",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Return State",
                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.stateCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Return Postal Code",
                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.postalCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment Method Name",
                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment ID",
                        "propertyIdentifier": "_orderitem.orderFulfillment.orderFulfillmentID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment Method Type",
                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Street Address",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.streetAddress",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Street Address 2",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.street2Address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Postal Code",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.postalCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "City",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.city",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "State",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.stateCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Country",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.countryCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Total",
                        "propertyIdentifier": "_orderitem.itemTotal",
                        "persistent": false
                    },
                    {
                        "title": "Discount Amount",
                        "propertyIdentifier": "_orderitem.discountAmount",
                        "persistent": false
                    },
                    {
                        "title": "Tax Amount",
                        "propertyIdentifier": "_orderitem.taxAmount",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.extendedPrice",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroup.amount",
                        "ormtype": "big_decimal"
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroup.amountType",
                        "ormtype": "string"
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroupPrice",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundlePrice",
                        "persistent": false
                    }
                ];
                //Add attributes to the column configuration
                angular.forEach(scope.attributes, function (attribute) {
                    var attributeColumn = {
                        propertyIdentifier: "_orderitem." + attribute.attributeCode,
                        attributeID: attribute.attributeID,
                        attributeSetObject: "orderItem"
                    };
                    columnsConfig.push(attributeColumn);
                });
                var filterGroupsConfig = [
                    {
                        "filterGroup": [
                            {
                                "propertyIdentifier": "_orderitem.parentOrderItem.orderItemID",
                                "comparisonOperator": "=",
                                "value": scope.orderItem.$$getID(),
                            }
                        ]
                    }
                ];
                var options = {
                    columnsConfig: angular.toJson(columnsConfig),
                    filterGroupsConfig: angular.toJson(filterGroupsConfig),
                    allRecords: true
                };
                //Create a list of order items.
                scope.childOrderItems = [];
                scope.orderItem.depth = 1;
                /**
                * Hide orderItem children on clicking the details link.
                */
                scope.hideChildren = function (orderItem) {
                    //Set all child order items to clicked = false.
                    angular.forEach(scope.childOrderItems, function (child) {
                        $log.debug("hideing");
                        child.hide = !child.hide;
                        scope.orderItem.clicked = !scope.orderItem.clicked;
                    });
                };
                //Delete orderItem
                scope.deleteEntity = function () {
                    $log.debug("Deleting");
                    $log.debug(scope.orderItem);
                    var deletePromise = scope.orderItem.$$delete();
                    deletePromise.then(function (result) {
                        if (!result.errors || !Object.keys(result.errors).length) {
                            delete scope.orderItem;
                            window.location.reload();
                        }
                        scope.paginator.getCollection();
                    });
                };
                /**
                * Gets a list of child order items if they exist.
                */
                scope.getChildOrderItems = function () {
                    if (!scope.orderItem.childItemsRetrieved) {
                        scope.orderItem.clicked = !scope.orderItem.clicked;
                        scope.orderItem.hide = !scope.orderItem.hide;
                        scope.orderItem.childItemsRetrieved = true;
                        if (scope.orderItem.sku.bundleFlag === 'Yes ' || scope.orderItem.sku.bundleFlag === 1) {
                            var skuBundleCollection = collectionConfigService.newCollectionConfig('SkuBundle');
                            skuBundleCollection.setDisplayProperties('bundledQuantity, bundledSku.skuCode, bundledSku.price, bundledSku.product.productName');
                            skuBundleCollection.addFilter('sku.skuID', scope.orderItem.sku.skuID);
                            var skuBundleCollectionPromise = skuBundleCollection.getEntity().then(function (data) {
                                if (data.pageRecords.length) {
                                    var childOrderItems = $hibachi.populateCollection(data.pageRecords, skuBundleCollection);
                                    angular.forEach(childOrderItems, function (childOrderItem) {
                                        childOrderItem.depth = scope.orderItem.depth + 1;
                                        scope.childOrderItems.push(childOrderItem);
                                        childOrderItem.data.productBundleGroupPercentage = 1;
                                        if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageIncrease') {
                                            childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;
                                        }
                                        else if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageDecrease') {
                                            childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;
                                        }
                                    });
                                }
                            });
                        }
                        else {
                            var orderItemsPromise = $hibachi.getEntity('orderItem', options);
                            orderItemsPromise.then(function (value) {
                                var collectionConfig = {};
                                collectionConfig.columns = columnsConfig;
                                collectionConfig.baseEntityName = 'SlatwallOrderItem';
                                collectionConfig.baseEntityAlias = '_orderitem';
                                var childOrderItems = $hibachi.populateCollection(value.records, collectionConfig);
                                angular.forEach(childOrderItems, function (childOrderItem) {
                                    childOrderItem.depth = scope.orderItem.depth + 1;
                                    scope.childOrderItems.push(childOrderItem);
                                    childOrderItem.data.productBundleGroupPercentage = 1;
                                    if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageIncrease') {
                                        childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;
                                    }
                                    else if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageDecrease') {
                                        childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;
                                    }
                                });
                            });
                        }
                    }
                    else {
                        //We already have the items so we just need to show them.
                        angular.forEach(scope.childOrderItems, function (child) {
                            child.hide = !child.hide;
                            scope.orderItem.clicked = !scope.orderItem.clicked;
                        });
                    }
                };
            }
        };
    }
    SWOrderItem.Factory = function () {
        var directive = function ($log, $compile, $http, $templateCache, $hibachi, $timeout, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) { return new SWOrderItem($log, $compile, $http, $templateCache, $hibachi, $timeout, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$compile',
            '$http',
            '$templateCache',
            '$hibachi',
            '$timeout',
            'collectionConfigService',
            'orderItemPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWOrderItem;
}());
exports.SWOrderItem = SWOrderItem;


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * Displays a shipping label in the order items row.
 * @module slatwalladmin
 * @class swOrderItemsShippingLabelStamp
 */
var SWOrderItemDetailStamp = /** @class */ (function () {
    function SWOrderItemDetailStamp($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'A',
            scope: {
                systemCode: "=",
                orderItemId: "=",
                skuId: "=",
                orderItem: "="
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem-detaillabel.html",
            link: function (scope, element, attrs) {
                scope.details = [];
                scope.orderItem.detailsName = [];
                var results;
                $log.debug("Detail stamp");
                $log.debug(scope.systemCode);
                $log.debug(scope.orderItemId);
                $log.debug(scope.skuId);
                $log.debug(scope.orderItem);
                /**
                 * For each type of orderItem, get the appropriate detail information.
                 *
                 * Merchandise: Option Group Name and Option
                 * Event: Event Date, Event Location
                 * Subscription: Subscription Term, Subscription Benefits
                 */
                var getMerchandiseDetails = function (orderItem) {
                    //Get option and option groups
                    for (var i = 0; i <= orderItem.data.sku.data.options.length - 1; i++) {
                        var optionGroupCollectionConfig = collectionConfigService.newCollectionConfig("Option");
                        optionGroupCollectionConfig.addDisplayProperty("optionID,optionName, optionGroup.optionGroupName");
                        optionGroupCollectionConfig.addFilter("optionID", orderItem.data.sku.data.options[i].optionID, "=");
                        optionGroupCollectionConfig.getEntity().then(function (results) {
                            if (angular.isDefined(results.pageRecords[0])) {
                                orderItem.detailsName.push(results.pageRecords[0].optionGroup_optionGroupName);
                                orderItem.details.push(results.pageRecords[0].optionName);
                            }
                        }, function (reason) {
                            throw ("SWOrderItemDetailStamp had trouble retrieving the option group for option");
                        });
                    }
                };
                var getSubscriptionDetails = function (orderItem) {
                    //get Subscription Term and Subscription Benefits
                    var name = orderItem.data.sku.data.subscriptionTerm.data.subscriptionTermName || "";
                    orderItem.detailsName.push("Subscription Term:");
                    orderItem.details.push(name);
                    //Maybe multiple benefits so show them all.
                    for (var i = 0; i <= orderItem.data.sku.data.subscriptionBenefits.length - 1; i++) {
                        var benefitName = orderItem.data.sku.data.subscriptionBenefits[i].subscriptionBenefitName || "";
                        orderItem.detailsName.push("Subscription Benefit:");
                        orderItem.details.push(benefitName);
                    }
                };
                var getEventDetails = function (orderItem) {
                    //get event date, and event location
                    orderItem.detailsName.push("Event Date: ");
                    orderItem.details.push(orderItem.data.sku.data.eventStartDateTime);
                    //Need to iterate this.
                    for (var i = 0; i <= orderItem.data.sku.data.locations.length - 1; i++) {
                        orderItem.detailsName.push("Location: ");
                        orderItem.details.push(orderItem.data.sku.data.locations[i].locationName);
                    }
                };
                if (angular.isUndefined(scope.orderItem.details)) {
                    scope.orderItem.details = [];
                }
                if (angular.isDefined(scope.orderItem.details)) {
                    switch (scope.systemCode) {
                        case "merchandise":
                            getMerchandiseDetails(scope.orderItem);
                            break;
                        case "subscription":
                            getSubscriptionDetails(scope.orderItem);
                            break;
                        case "event":
                            getEventDetails(scope.orderItem);
                            break;
                    }
                }
            }
        };
    }
    SWOrderItemDetailStamp.Factory = function () {
        var directive = function ($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) { return new SWOrderItemDetailStamp($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionConfigService',
            'orderItemPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWOrderItemDetailStamp;
}());
exports.SWOrderItemDetailStamp = SWOrderItemDetailStamp;


/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOrderItems = /** @class */ (function () {
    //@ngInject
    function SWOrderItems($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService, observerService) {
        return {
            restrict: 'E',
            scope: {
                orderId: "@"
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitems.html",
            link: function (scope, element, attrs) {
                var options = {};
                scope.keywords = "";
                scope.loadingCollection = false;
                scope.$watch('recordsCount', function (newValue, oldValue, scope) {
                    //Do anything with $scope.letters
                    if (oldValue != undefined && newValue != undefined && newValue.length > oldValue.length) {
                        //refresh so order totals refresh.
                        window.location.reload();
                    }
                });
                var searchPromise;
                scope.searchCollection = function () {
                    if (searchPromise) {
                        $timeout.cancel(searchPromise);
                    }
                    searchPromise = $timeout(function () {
                        $log.debug('search with keywords');
                        $log.debug(scope.keywords);
                        //Set current page here so that the pagination does not break when getting collection
                        scope.paginator.setCurrentPage(1);
                        scope.loadingCollection = true;
                        scope.getCollection();
                    }, 500);
                };
                $log.debug('Init Order Item');
                $log.debug(scope.orderId);
                //Setup the data needed for each order item object.
                scope.getCollection = function () {
                    if (scope.pageShow === 'Auto') {
                        scope.pageShow = 50;
                    }
                    var orderItemCollection = collectionConfigService.newCollectionConfig('OrderItem');
                    orderItemCollection.setDisplayProperties("orderItemID,currencyCode,sku.skuName\n                         ,price,skuPrice,sku.skuID,sku.skuCode,productBundleGroup.productBundleGroupID\n\t\t\t\t\t\t ,sku.product.productID\n \t\t\t\t\t\t ,sku.product.productName,sku.product.productDescription\n\t\t\t\t\t\t ,sku.eventStartDateTime\n \t\t\t\t\t\t ,quantity\n\t\t\t\t\t\t ,orderFulfillment.fulfillmentMethod.fulfillmentMethodName\n\t\t\t\t\t\t ,orderFulfillment.orderFulfillmentID\n \t\t\t\t\t\t ,orderFulfillment.shippingAddress.streetAddress\n     \t\t\t\t\t ,orderFulfillment.shippingAddress.street2Address\n\t\t\t\t\t\t ,orderFulfillment.shippingAddress.postalCode\n\t\t\t\t\t\t ,orderFulfillment.shippingAddress.city,orderFulfillment.shippingAddress.stateCode\n \t\t\t\t\t\t ,orderFulfillment.shippingAddress.countryCode\n                         ,orderItemType.systemCode\n\t\t\t\t\t\t ,orderFulfillment.fulfillmentMethod.fulfillmentMethodType\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.streetAddress\n\t\t\t\t\t\t ,orderFulfillment.pickupLocation.primaryAddress.address.street2Address\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.city\n\t\t\t\t\t\t ,orderFulfillment.pickupLocation.primaryAddress.address.stateCode\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.postalCode\n\t\t\t\t\t\t ,orderReturn.orderReturnID\n \t\t\t\t\t\t ,orderReturn.returnLocation.primaryAddress.address.streetAddress\n\t\t\t\t\t\t ,orderReturn.returnLocation.primaryAddress.address.street2Address\n                         ,orderReturn.returnLocation.primaryAddress.address.city\n\t\t\t\t\t\t ,orderReturn.returnLocation.primaryAddress.address.stateCode\n                         ,orderReturn.returnLocation.primaryAddress.address.postalCode\n\t\t\t\t\t\t ,itemTotal,discountAmount,taxAmount,extendedPrice,productBundlePrice,sku.baseProductType\n                         ,sku.subscriptionBenefits\n\t\t\t\t\t\t ,sku.product.productType.systemCode\n\t\t\t\t\t\t ,sku.bundleFlag \n\t\t\t\t\t\t ,sku.options\n\t\t\t\t\t\t ,sku.locations\n \t\t\t\t\t\t ,sku.subscriptionTerm.subscriptionTermName\n \t\t\t\t\t\t ,sku.imageFile\n                         ,stock.location.locationName")
                        .addFilter('order.orderID', scope.orderId)
                        .addFilter('parentOrderItem', 'null', 'IS')
                        .setKeywords(scope.keywords)
                        .setPageShow(scope.paginator.getPageShow())
                        .setCurrentPage(scope.paginator.getCurrentPage());
                    //add attributes to the column config
                    angular.forEach(scope.attributes, function (attribute) {
                        var attributeColumn = {
                            propertyIdentifier: "_orderitem." + attribute.attributeCode,
                            attributeID: attribute.attributeID,
                            attributeSetObject: "orderItem"
                        };
                        orderItemCollection.columns.push(attributeColumn);
                    });
                    var orderItemsPromise = orderItemCollection.getEntity();
                    orderItemsPromise.then(function (value) {
                        scope.collection = value;
                        var collectionConfig = {};
                        scope.recordsCount = value.pageRecords;
                        scope.orderItems = $hibachi.populateCollection(value.pageRecords, orderItemCollection);
                        for (var orderItem in scope.orderItems) {
                            $log.debug("OrderItem Product Type");
                            $log.debug(scope.orderItems);
                            //orderItem.productType = orderItem.data.sku.data.product.data.productType.$$getParentProductType();
                        }
                        scope.paginator.setPageRecordsInfo(scope.collection);
                        scope.loadingCollection = false;
                    }, function (value) {
                        scope.orderItems = [];
                    });
                };
                var attributesCollection = collectionConfigService.newCollectionConfig('Attribute');
                attributesCollection.setDisplayProperties('attributeID,attributeCode,attributeName')
                    .addFilter('displayOnOrderDetailFlag', true)
                    .addFilter('activeFlag', true)
                    .setAllRecords(true);
                var attItemsPromise = attributesCollection.getEntity();
                attItemsPromise.then(function (value) {
                    scope.attributes = [];
                    angular.forEach(value.records, function (attributeItemData) {
                        //Use that custom attribute name to get the value.
                        scope.attributes.push(attributeItemData);
                    });
                    scope.getCollection();
                });
                //Add claim function and cancel function
                /*scope.appendToCollection = function(){
                    if(scope.pageShow === 'Auto'){
                        $log.debug('AppendToCollection');
                        if(scope.paginator.autoScrollPage < scope.collection.totalPages){
                            scope.paginator.autoScrollDisabled = true;
                            scope.paginator.autoScrollPage++;

                            var appendOptions:any = {};
                            angular.extend(appendOptions,options);
                            appendOptions.pageShow = 50;
                            appendOptions.currentPage = scope.paginator.autoScrollPage;

                            var collectionListingPromise = $hibachi.getEntity('orderItem', appendOptions);
                            collectionListingPromise.then(function(value){
                                scope.collection.pageRecords = scope.collection.pageRecords.concat(value.pageRecords);
                                scope.autoScrollDisabled = false;
                            },function(reason){
                                scope.collection.pageRecords = [];
                            });
                        }
                    }
                };*/
                scope.paginator = paginationService.createPagination();
                scope.paginator.notifyById = false;
                scope.paginator.collection = scope.collection;
                scope.paginator.getCollection = scope.getCollection;
                //set up custom event as temporary fix to update when new sku is adding via jquery ajax instead of angular scope
                $(document).on("listingDisplayUpdate", {}, function (event, arg1, arg2) {
                    scope.orderItems = undefined;
                    scope.getCollection();
                });
                observerService.attach(scope.getCollection, 'swPaginationAction');
            } //<--End link
        };
    }
    SWOrderItems.Factory = function () {
        var directive = function ($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService, observerService) { return new SWOrderItems($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService, observerService); };
        directive.$inject = [
            '$log',
            '$timeout',
            '$location',
            '$hibachi',
            'collectionConfigService',
            'formService',
            'orderItemPartialsPath',
            'slatwallPathBuilder',
            'paginationService',
            'observerService'
        ];
        return directive;
    };
    return SWOrderItems;
}());
exports.SWOrderItems = SWOrderItems;


/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWResizedImage = /** @class */ (function () {
    function SWResizedImage($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                orderItem: "=",
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem-image.html",
            link: function (scope, element, attrs) {
                var profileName = attrs.profilename;
                var skuID = scope.orderItem.data.sku.data.skuID;
                //Get the template.
                //Call slatwallService to get the path from the image.
                $hibachi.getResizedImageByProfileName(profileName, skuID)
                    .then(function (response) {
                    $log.debug(response.resizedImagePaths[0]);
                    scope.orderItem.imagePath = response.resizedImagePaths[0];
                });
            }
        };
    }
    SWResizedImage.Factory = function () {
        var directive = function ($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder) { return new SWResizedImage($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http', '$log', '$q', '$hibachi', 'orderItemPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWResizedImage;
}());
exports.SWResizedImage = SWResizedImage;


/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/slatwallTypescript.d.ts" />
var core_module_1 = __webpack_require__(8);
//directives
var swchildorderitem_1 = __webpack_require__(503);
var sworderitem_1 = __webpack_require__(505);
var swoishippinglabelstamp_1 = __webpack_require__(504);
var sworderitemdetailstamp_1 = __webpack_require__(506);
var sworderitems_1 = __webpack_require__(507);
var swresizedimage_1 = __webpack_require__(508);
var orderitemmodule = angular.module('hibachi.orderitem', [core_module_1.coremodule.name])
    // .config(['$provide','baseURL',($provide,baseURL)=>{
    // 	$provide.constant('paginationPartials', baseURL+basePartialsPath+'pagination/components/');
    // }])
    .run([function () {
    }])
    //directives
    .directive('swChildOrderItem', swchildorderitem_1.SWChildOrderItem.Factory())
    .directive('swOrderItem', sworderitem_1.SWOrderItem.Factory())
    .directive('swoishippinglabelstamp', swoishippinglabelstamp_1.SWOiShippingLabelStamp.Factory())
    .directive('swOrderItemDetailStamp', sworderitemdetailstamp_1.SWOrderItemDetailStamp.Factory())
    .directive('swOrderItems', sworderitems_1.SWOrderItems.Factory())
    .directive('swresizedimage', swresizedimage_1.SWResizedImage.Factory())
    //constants
    .constant('orderItemPartialsPath', 'orderitem/components/');
exports.orderitemmodule = orderitemmodule;


/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWProductListingPagesController = /** @class */ (function () {
    //@ngInject
    function SWProductListingPagesController(collectionConfigService, listingService, utilityService) {
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.utilityService = utilityService;
        this.collectionConfig = collectionConfigService.newCollectionConfig("Content");
        this.collectionConfig.addDisplayProperty("contentID, title, activeFlag, site.siteName, titlePath");
        this.typeaheadDataKey = utilityService.createID(32);
        this.alreadySelectedContentCollectionConfig = collectionConfigService.newCollectionConfig("ProductListingPage");
        this.alreadySelectedContentCollectionConfig.addDisplayProperty("productListingPageID, product.productID, content.contentID, content.title, content.site.siteName, content.activeFlag");
        this.alreadySelectedContentCollectionConfig.addFilter("product.productID", this.productId, "=");
    }
    return SWProductListingPagesController;
}());
exports.SWProductListingPagesController = SWProductListingPagesController;
var SWProductListingPages = /** @class */ (function () {
    //@ngInject
    function SWProductListingPages($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) {
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.productPartialsPath = productPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            edit: "=?",
            selectedListingPageIdPaths: "@?",
            productId: "@?"
        };
        this.controller = SWProductListingPagesController;
        this.controllerAs = "swProductListingPages";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productPartialsPath) + "/productlistingpages.html";
    }
    SWProductListingPages.Factory = function () {
        var directive = function ($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) { return new SWProductListingPages($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'paginationService',
            'productPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWProductListingPages;
}());
exports.SWProductListingPages = SWProductListingPages;


/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWRelatedProductsController = /** @class */ (function () {
    //@ngInject
    function SWRelatedProductsController(collectionConfigService, utilityService) {
        this.collectionConfigService = collectionConfigService;
        this.utilityService = utilityService;
        this.collectionConfig = collectionConfigService.newCollectionConfig("Product");
        this.collectionConfig.addDisplayProperty("productID,productName,productCode,calculatedSalePrice,activeFlag,publishedFlag,productType.productTypeNamePath,productType.productTypeName,defaultSku.price");
        this.alreadySelectedProductsCollectionConfig = collectionConfigService.newCollectionConfig("ProductRelationship");
        this.alreadySelectedProductsCollectionConfig.addDisplayProperty("productRelationshipID,sortOrder,relatedProduct.productID,relatedProduct.productName,relatedProduct.productCode,relatedProduct.calculatedSalePrice,relatedProduct.activeFlag,relatedProduct.publishedFlag");
        this.alreadySelectedProductsCollectionConfig.addFilter("product.productID", this.productId, "=");
        this.typeaheadDataKey = utilityService.createID(32);
    }
    return SWRelatedProductsController;
}());
exports.SWRelatedProductsController = SWRelatedProductsController;
var SWRelatedProducts = /** @class */ (function () {
    //@ngInject
    function SWRelatedProducts($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) {
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.productPartialsPath = productPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            productId: "@?",
            edit: "=?",
            productSortProperty: "@?",
            productSortDefaultDirection: "@?"
        };
        this.controller = SWRelatedProductsController;
        this.controllerAs = "swRelatedProducts";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productPartialsPath) + "/relatedproducts.html";
    }
    SWRelatedProducts.Factory = function () {
        var directive = function ($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) { return new SWRelatedProducts($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'paginationService',
            'productPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWRelatedProducts;
}());
exports.SWRelatedProducts = SWRelatedProducts;


/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var ProductCreateController = /** @class */ (function () {
    //@ngInject
    function ProductCreateController($q, $scope, $element, $log, $hibachi, collectionConfigService, selectionService, rbkeyService) {
        var _this = this;
        this.$q = $q;
        this.$scope = $scope;
        this.$element = $element;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.collectionConfigService = collectionConfigService;
        this.selectionService = selectionService;
        this.rbkeyService = rbkeyService;
        //on select change get collection
        this.$scope.preprocessproduct_createCtrl.productTypeChanged = function (selectedOption) {
            _this.$scope.preprocessproduct_createCtrl.selectedOption = selectedOption;
            _this.$scope.preprocessproduct_createCtrl.getCollection();
            _this.selectionService.clearSelection('ListingDisplay');
        };
        this.$scope.productTypeIDPaths = {};
        this.$scope.preprocessproduct_createCtrl.getCollection = function () {
            var productTypeDeffered = _this.$q.defer();
            var productTypePromise = productTypeDeffered.promise;
            if (angular.isUndefined(_this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value])) {
                var productTypeCollectionConfig = _this.collectionConfigService.newCollectionConfig('ProductType');
                productTypeCollectionConfig.addDisplayProperty('productTypeID, productTypeIDPath');
                productTypeCollectionConfig.addFilter('productTypeID', _this.$scope.preprocessproduct_createCtrl.selectedOption.value, "=");
                productTypeCollectionConfig.getEntity().then(function (result) {
                    if (angular.isDefined(result.pageRecords[0])) {
                        _this.$scope.productTypeIDPaths[result.pageRecords[0].productTypeID] = result.pageRecords[0].productTypeIDPath;
                    }
                    productTypeDeffered.resolve();
                }, function (reason) {
                    productTypeDeffered.reject();
                    throw ("ProductCreateController was unable to retrieve the product type ID Path.");
                });
            }
            else {
                productTypeDeffered.resolve();
            }
            productTypePromise.then(function () {
                if (_this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value]) {
                    var collectionConfig = _this.collectionConfigService.newCollectionConfig('Option');
                    collectionConfig.setDisplayProperties('optionGroup.optionGroupName,optionName', undefined, { isVisible: true });
                    collectionConfig.setDisplayProperties('optionID', undefined, { isVisible: false });
                    //this.collectionConfig.addFilter('optionGroup.optionGroupID',$('input[name="currentOptionGroups"]').val(),'NOT IN')
                    collectionConfig.addFilter('optionGroup.globalFlag', 1, '=');
                    var productTypeIDArray = _this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value].split(",");
                    for (var j = 0; j < productTypeIDArray.length; j++) {
                        collectionConfig.addFilter('optionGroup.productTypes.productTypeID', productTypeIDArray[j], '=', 'OR');
                    }
                    collectionConfig.setOrderBy('optionGroup.sortOrder|ASC,sortOrder|ASC');
                    _this.$scope.preprocessproduct_createCtrl.collectionListingPromise = collectionConfig.getEntity();
                    _this.$scope.preprocessproduct_createCtrl.collectionListingPromise.then(function (data) {
                        _this.$scope.preprocessproduct_createCtrl.collection = data;
                        _this.$scope.preprocessproduct_createCtrl.collection.collectionConfig = collectionConfig;
                    });
                }
            }, function () {
                throw ("ProductCreateController was unable to resolve the product type.");
            });
        };
        var renewalMethodOptions = $("select[name='renewalMethod']")[0];
        this.$scope.preprocessproduct_createCtrl.renewalMethodOptions = [];
        angular.forEach(renewalMethodOptions, function (option) {
            var optionToAdd = {
                label: option.label,
                value: option.value
            };
            _this.$scope.preprocessproduct_createCtrl.renewalMethodOptions.push(optionToAdd);
        });
        this.$scope.preprocessproduct_createCtrl.renewalSkuChoice = this.$scope.preprocessproduct_createCtrl.renewalMethodOptions[1];
        var productTypeOptions = $("select[name='product.productType.productTypeID']")[0];
        this.$scope.preprocessproduct_createCtrl.options = [];
        angular.forEach(productTypeOptions, function (jQueryOption) {
            var option = {
                label: jQueryOption.label,
                value: jQueryOption.value
            };
            _this.$scope.preprocessproduct_createCtrl.options.push(option);
        });
        this.$scope.preprocessproduct_createCtrl.selectedOption = {};
        if (angular.isDefined(this.$scope.preprocessproduct_createCtrl.options[0]) && angular.isDefined(this.$scope.preprocessproduct_createCtrl.options[0].value)) {
            this.$scope.preprocessproduct_createCtrl.selectedOption.value = this.$scope.preprocessproduct_createCtrl.options[0].value;
            this.$scope.preprocessproduct_createCtrl.productTypeChanged(this.$scope.preprocessproduct_createCtrl.selectedOption);
        }
        else {
            this.$scope.preprocessproduct_createCtrl.selectedOption.value = "";
        }
        this.$scope.preprocessproduct_createCtrl.getCollection();
    }
    return ProductCreateController;
}());
exports.ProductCreateController = ProductCreateController;


/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(8);
//services
//controllers
var preprocessproduct_create_1 = __webpack_require__(512);
//filters
//directives
var swproductlistingpages_1 = __webpack_require__(510);
var swrelatedproducts_1 = __webpack_require__(511);
var productmodule = angular.module('hibachi.product', [core_module_1.coremodule.name]).config(function () {
})
    .constant('productPartialsPath', 'product/components/')
    //services
    //controllers
    .controller('preprocessproduct_create', preprocessproduct_create_1.ProductCreateController)
    //filters
    //directives
    .directive('swProductListingPages', swproductlistingpages_1.SWProductListingPages.Factory())
    .directive('swRelatedProducts', swrelatedproducts_1.SWRelatedProducts.Factory());
exports.productmodule = productmodule;


/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CollectionFilterItem = /** @class */ (function () {
    function CollectionFilterItem(name, type, displayPropertyIdentifier, propertyIdentifier, displayValue, value, comparisonOperator, logicalOperator) {
        this.name = name;
        this.type = type;
        this.displayPropertyIdentifier = displayPropertyIdentifier;
        this.propertyIdentifier = propertyIdentifier;
        this.displayValue = displayValue;
        this.value = value;
        this.comparisonOperator = comparisonOperator;
        this.logicalOperator = logicalOperator;
    }
    return CollectionFilterItem;
}());
var SWProductBundleCollectionFilterItemTypeaheadController = /** @class */ (function () {
    // @ngInject
    function SWProductBundleCollectionFilterItemTypeaheadController($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath) {
        var _this = this;
        this.$log = $log;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.productBundleService = productBundleService;
        this.metadataService = metadataService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.$hibachi = $hibachi;
        this.productBundlePartialsPath = productBundlePartialsPath;
        this.init = function () {
            _this.maxRecords = 10;
            _this.recordsCount = 0;
            _this.pageRecordsStart = 0;
            _this.pageRecordsEnd = 0;
            _this.recordsPerPage = 10;
            _this.showAll = false;
            _this.showAdvanced = false;
            _this.currentPage = 1;
            _this.pageShow = 10;
            _this.searchAllCollectionConfigs = [];
            if (angular.isUndefined(_this.filterPropertiesList)) {
                _this.filterPropertiesList = {};
                var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName('_sku');
                filterPropertiesPromise.then(function (value) {
                    _this.metadataService.setPropertiesList(value, '_sku');
                    _this.filterPropertiesList['_sku'] = _this.metadataService.getPropertiesListByBaseEntityAlias('_sku');
                    _this.metadataService.formatPropertiesList(_this.filterPropertiesList['_sku'], '_sku');
                });
            }
            _this.skuCollectionConfig = {
                baseEntityName: "Sku",
                baseEntityAlias: "_sku",
                collectionConfig: _this.productBundleGroup.data.skuCollectionConfig,
                collectionObject: 'Sku'
            };
            _this.searchOptions = {
                options: [
                    {
                        name: "All",
                        value: "All"
                    },
                    {
                        name: "Product Type",
                        value: "productType"
                    },
                    {
                        name: "Brand",
                        value: "brand"
                    },
                    {
                        name: "Products",
                        value: "product"
                    },
                    {
                        name: "Skus",
                        value: "sku"
                    }
                ],
                selected: {
                    name: "All",
                    value: "All"
                },
                setSelected: function (searchOption) {
                    _this.searchOptions.selected = searchOption;
                    _this.getFiltersByTerm(_this.productBundleGroupFilters.keyword, searchOption);
                }
            };
            _this.navigation = {
                value: 'Basic',
                setValue: function (value) {
                    _this.value = value;
                }
            };
            _this.filterTemplatePath = _this.productBundlePartialsPath + "productbundlefilter.html";
            _this.productBundleGroupFilters = {};
            _this.productBundleGroupFilters.value = [];
            if (angular.isUndefined(_this.productBundleGroup.data.skuCollectionConfig)) {
                _this.productBundleGroup.data.skuCollectionConfig = {};
                _this.productBundleGroup.data.skuCollectionConfig.filterGroups = [];
            }
            if (!angular.isDefined(_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0])) {
                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0] = {};
                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];
            }
            var options = {
                filterGroupsConfig: _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup,
                columnsConfig: _this.productBundleGroup.data.skuCollectionConfig.columns,
            };
            _this.getCollection();
        };
        this.openCloseAndRefresh = function () {
            _this.showAdvanced = !_this.showAdvanced;
            if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.length) {
                _this.getCollection();
            }
        };
        this.deleteEntity = function (type) {
            if (angular.isNumber(type)) {
                _this.removeProductBundleGroupFilter(type);
            }
            else {
                _this.removeProductBundleGroup({ index: _this.index });
                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];
            }
        };
        this.getCollection = function () {
            var options = {
                filterGroupsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.filterGroups),
                columnsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.columns),
                currentPage: 1,
                pageShow: 10
            };
            var collectionPromise = _this.$hibachi.getEntity('Sku', options);
            collectionPromise.then(function (response) {
                _this.collection = response;
            });
        };
        this.increaseCurrentCount = function () {
            if (angular.isDefined(_this.totalPages) && _this.totalPages != _this.currentPage) {
                _this.currentPage++;
            }
            else {
                _this.currentPage = 1;
            }
        };
        this.resetCurrentCount = function () {
            _this.currentPage = 1;
        };
        this.getFiltersByTerm = function (keyword, filterTerm) {
            //save search
            _this.keyword = keyword;
            _this.filterTerm = filterTerm;
            _this.loading = true;
            _this.showAll = true;
            var _loadingCount;
            if (_this.timeoutPromise) {
                _this.$timeout.cancel(_this.timeoutPromise);
            }
            _this.timeoutPromise = _this.$timeout(function () {
                if (filterTerm.value === 'All') {
                    _this.showAll = true;
                    _this.productBundleGroupFilters.value = [];
                    _loadingCount = _this.searchOptions.options.length - 1;
                    for (var i = 0; i < _this.searchOptions.options.length; i++) {
                        if (i > 0) {
                            var option = _this.searchOptions.options[i];
                            (function (keyword, option) {
                                if (_this.searchAllCollectionConfigs.length <= 4) {
                                    _this.searchAllCollectionConfigs.push(_this.collectionConfigService.newCollectionConfig(_this.searchOptions.options[i].value));
                                }
                                _this.searchAllCollectionConfigs[i - 1].setKeywords(keyword);
                                _this.searchAllCollectionConfigs[i - 1].setCurrentPage(_this.currentPage);
                                _this.searchAllCollectionConfigs[i - 1].setPageShow(_this.pageShow);
                                //searchAllCollectionConfig.setAllRecords(true);
                                _this.searchAllCollectionConfigs[i - 1].getEntity().then(function (value) {
                                    _this.recordsCount = value.recordsCount;
                                    _this.pageRecordsStart = value.pageRecordsStart;
                                    _this.pageRecordsEnd = value.pageRecordsEnd;
                                    _this.totalPages = value.totalPages;
                                    var formattedProductBundleGroupFilters = _this.productBundleService.formatProductBundleGroupFilters(value.pageRecords, option, _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup);
                                    for (var j in formattedProductBundleGroupFilters) {
                                        if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.indexOf(formattedProductBundleGroupFilters[j]) == -1) {
                                            _this.productBundleGroupFilters.value.push(formattedProductBundleGroupFilters[j]);
                                            _this.$log.debug(formattedProductBundleGroupFilters[j]);
                                        }
                                    }
                                    // Increment Down The Loading Count
                                    _loadingCount--;
                                    // If the loadingCount drops to 0, then we can update scope
                                    if (_loadingCount == 0) {
                                        //This sorts the array of objects by the objects' "type" property alphabetically
                                        _this.productBundleGroupFilters.value = _this.utilityService.arraySorter(_this.productBundleGroupFilters.value, ["type", "name"]);
                                        _this.$log.debug(_this.productBundleGroupFilters.value);
                                        if (_this.productBundleGroupFilters.value.length == 0) {
                                            _this.currentPage = 0;
                                        }
                                    }
                                    _this.loading = false;
                                });
                            })(keyword, option);
                        }
                    }
                }
                else {
                    _this.showAll = false;
                    if (angular.isUndefined(_this.searchCollectionConfig) || filterTerm.value != _this.searchCollectionConfig.baseEntityName) {
                        _this.searchCollectionConfig = _this.collectionConfigService.newCollectionConfig(filterTerm.value);
                    }
                    _this.searchCollectionConfig.setKeywords(keyword);
                    _this.searchCollectionConfig.setCurrentPage(_this.currentPage);
                    _this.searchCollectionConfig.setPageShow(_this.pageShow);
                    _this.searchCollectionConfig.getEntity().then(function (value) {
                        _this.recordsCount = value.recordsCount;
                        _this.pageRecordsStart = value.pageRecordsStart;
                        _this.pageRecordsEnd = value.pageRecordsEnd;
                        _this.totalPages = value.totalPages;
                        _this.productBundleGroupFilters.value = _this.productBundleService.formatProductBundleGroupFilters(value.pageRecords, filterTerm, _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup) || [];
                        _this.loading = false;
                    });
                }
            }, 500);
        };
        this.addFilterToProductBundle = function (filterItem, include, index) {
            var collectionFilterItem = new CollectionFilterItem(filterItem.name, filterItem.type, filterItem.type, filterItem.propertyIdentifier, filterItem[filterItem.entityType.charAt(0).toLowerCase() + filterItem.entityType.slice(1) + 'ID'], filterItem[filterItem.entityType.charAt(0).toLowerCase() + filterItem.entityType.slice(1) + 'ID']);
            if (include === false) {
                collectionFilterItem.comparisonOperator = '!=';
            }
            else {
                collectionFilterItem.comparisonOperator = '=';
            }
            if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.length > 0) {
                collectionFilterItem.logicalOperator = 'OR';
            }
            if (angular.isDefined(_this.searchCollectionConfig)) {
                _this.searchCollectionConfig.addFilter(_this.searchCollectionConfig.baseEntityName + "ID", collectionFilterItem.value, "!=");
            }
            if (_this.showAll) {
                switch (collectionFilterItem.type) {
                    case 'Product Type':
                        _this.searchAllCollectionConfigs[0].addFilter("productTypeID", collectionFilterItem.value, "!=");
                        break;
                    case 'Brand':
                        _this.searchAllCollectionConfigs[1].addFilter("brandID", collectionFilterItem.value, "!=");
                        break;
                    case 'Products':
                        _this.searchAllCollectionConfigs[2].addFilter("productID", collectionFilterItem.value, "!=");
                        break;
                    case 'Skus':
                        _this.searchAllCollectionConfigs[3].addFilter("skuID", collectionFilterItem.value, "!=");
                        break;
                }
            }
            _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.push(collectionFilterItem);
            _this.productBundleGroup.forms[_this.formName].skuCollectionConfig.$setDirty();
            //reload the list to correct pagination show all takes too long for this to be graceful
            if (!_this.showAll) {
                _this.getFiltersByTerm(_this.keyword, _this.filterTerm);
            }
            else {
                //Removes the filter item from the left hand search result
                _this.productBundleGroupFilters.value.splice(index, 1);
            }
        };
        this.removeProductBundleGroupFilter = function (index) {
            //Pushes item back into array
            _this.productBundleGroupFilters.value.push(_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup[index]);
            //Sorts Array
            _this.productBundleGroupFilters.value = _this.utilityService.arraySorter(_this.productBundleGroupFilters.value, ["type", "name"]);
            //Removes the filter item from the filtergroup
            var collectionFilterItem = _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.splice(index, 1)[0];
            if (angular.isDefined(_this.searchCollectionConfig)) {
                _this.searchCollectionConfig.removeFilter(_this.searchCollectionConfig.baseEntityAlias + '.' + _this.searchCollectionConfig.baseEntityName + "ID", collectionFilterItem.value, "!=");
            }
            if (_this.showAll) {
                switch (collectionFilterItem.type) {
                    case 'Product Type':
                        _this.searchAllCollectionConfigs[0].removeFilter("_productType.productTypeID", collectionFilterItem.value, "!=");
                        break;
                    case 'Brand':
                        _this.searchAllCollectionConfigs[1].removeFilter("_brand.brandID", collectionFilterItem.value, "!=");
                        break;
                    case 'Products':
                        _this.searchAllCollectionConfigs[2].removeFilter("_product.productID", collectionFilterItem.value, "!=");
                        break;
                    case 'Skus':
                        _this.searchAllCollectionConfigs[3].removeFilter("_sku.skuID", collectionFilterItem.value, "!=");
                        break;
                }
            }
            if (!_this.showAll) {
                _this.getFiltersByTerm(_this.keyword, _this.filterTerm);
            }
            else {
                _this.productBundleGroupFilters.value.splice(index, 0, collectionFilterItem);
            }
        };
        this.init();
    }
    return SWProductBundleCollectionFilterItemTypeaheadController;
}());
exports.SWProductBundleCollectionFilterItemTypeaheadController = SWProductBundleCollectionFilterItemTypeaheadController;
var SWProductBundleCollectionFilterItemTypeahead = /** @class */ (function () {
    // @ngInject
    function SWProductBundleCollectionFilterItemTypeahead($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) {
        this.$log = $log;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.productBundleService = productBundleService;
        this.metadataService = metadataService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.$hibachi = $hibachi;
        this.productBundlePartialsPath = productBundlePartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            productBundleGroup: "=",
            index: "=",
            formName: "@"
        };
        this.controller = SWProductBundleCollectionFilterItemTypeaheadController;
        this.controllerAs = "swProductBundleCollectionFilteritemTypeahead";
        this.link = function ($scope, element, attrs, ctrl) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlecollectionfilteritemtypeahead.html";
    }
    SWProductBundleCollectionFilterItemTypeahead.Factory = function () {
        var directive = function ($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) { return new SWProductBundleCollectionFilterItemTypeahead($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            "$log", "$timeout", "collectionConfigService", "productBundleService", "metadataService", "utilityService", "formService", "$hibachi", "productBundlePartialsPath",
            "slatwallPathBuilder"
        ];
        return directive;
    };
    return SWProductBundleCollectionFilterItemTypeahead;
}());
exports.SWProductBundleCollectionFilterItemTypeahead = SWProductBundleCollectionFilterItemTypeahead;


/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CollectionFilterItem = /** @class */ (function () {
    function CollectionFilterItem(name, type, displayPropertyIdentifier, propertyIdentifier, displayValue, value, comparisonOperator, logicalOperator) {
        this.name = name;
        this.type = type;
        this.displayPropertyIdentifier = displayPropertyIdentifier;
        this.propertyIdentifier = propertyIdentifier;
        this.displayValue = displayValue;
        this.value = value;
        this.comparisonOperator = comparisonOperator;
        this.logicalOperator = logicalOperator;
    }
    return CollectionFilterItem;
}());
var SWProductBundleGroupController = /** @class */ (function () {
    // @ngInject
    function SWProductBundleGroupController($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath) {
        var _this = this;
        this.$log = $log;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.productBundleService = productBundleService;
        this.metadataService = metadataService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.$hibachi = $hibachi;
        this.productBundlePartialsPath = productBundlePartialsPath;
        this.init = function () {
            _this.maxRecords = 10;
            _this.recordsCount = 0;
            _this.pageRecordsStart = 0;
            _this.pageRecordsEnd = 0;
            _this.recordsPerPage = 10;
            _this.showAll = false;
            _this.showAdvanced = false;
            _this.currentPage = 1;
            _this.pageShow = 10;
            _this.searchAllCollectionConfigs = [];
            if (angular.isUndefined(_this.filterPropertiesList)) {
                _this.filterPropertiesList = {};
                var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName('_sku');
                filterPropertiesPromise.then(function (value) {
                    _this.metadataService.setPropertiesList(value, '_sku');
                    _this.filterPropertiesList['_sku'] = _this.metadataService.getPropertiesListByBaseEntityAlias('_sku');
                    _this.metadataService.formatPropertiesList(_this.filterPropertiesList['_sku'], '_sku');
                });
            }
            _this.searchOptions = {
                options: [
                    {
                        name: "All",
                        value: "All"
                    },
                    {
                        name: "Product Type",
                        value: "productType"
                    },
                    {
                        name: "Brand",
                        value: "brand"
                    },
                    {
                        name: "Products",
                        value: "product"
                    },
                    {
                        name: "Skus",
                        value: "sku"
                    }
                ],
                selected: {
                    name: "All",
                    value: "All"
                },
                setSelected: function (searchOption) {
                    _this.searchOptions.selected = searchOption;
                }
            };
            _this.navigation = {
                value: 'Basic',
                setValue: function (value) {
                    _this.value = value;
                }
            };
            _this.filterTemplatePath = _this.productBundlePartialsPath + "productbundlefilter.html";
            _this.productBundleGroupFilters = {};
            _this.productBundleGroupFilters.value = [];
            if (angular.isUndefined(_this.productBundleGroup.data.skuCollectionConfig) || _this.productBundleGroup.data.skuCollectionConfig === null) {
                _this.productBundleGroup.data.skuCollectionConfig = _this.collectionConfigService.newCollectionConfig("Sku").getCollectionConfig();
            }
            var options = {
                filterGroupsConfig: _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup,
                columnsConfig: _this.productBundleGroup.data.skuCollectionConfig.columns,
            };
            _this.getCollection();
        };
        this.deleteEntity = function (type) {
            _this.removeProductBundleGroup({ index: _this.index });
            _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];
        };
        this.getCollection = function () {
            var options = {
                filterGroupsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.filterGroups),
                columnsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.columns),
                currentPage: 1,
                pageShow: 10
            };
            var collectionPromise = _this.$hibachi.getEntity('Sku', options);
            collectionPromise.then(function (response) {
                _this.collection = response;
            });
        };
        this.increaseCurrentCount = function () {
            if (angular.isDefined(_this.totalPages) && _this.totalPages != _this.currentPage) {
                _this.currentPage++;
            }
            else {
                _this.currentPage = 1;
            }
        };
        this.resetCurrentCount = function () {
            _this.currentPage = 1;
        };
        this.save = function () {
            var savePromise = _this.productBundleGroup.$$save();
            savePromise.then(function (response) {
                _this.productBundleGroup.data.$$toggleEdit();
                _this.refreshProductBundleGroup();
            }).catch(function (data) {
                //error handling handled by $$save
            });
        };
        this.saveAndAddBundleGroup = function () {
            var savePromise = _this.productBundleGroup.$$save();
            savePromise.then(function (response) {
                _this.productBundleGroup.data.$$toggleEdit();
                _this.addProductBundleGroup();
            }).catch(function (data) {
                //error handling handled by $$save
            });
        };
        this.init();
    }
    return SWProductBundleGroupController;
}());
var SWProductBundleGroup = /** @class */ (function () {
    // @ngInject
    function SWProductBundleGroup($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) {
        this.$log = $log;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.productBundleService = productBundleService;
        this.metadataService = metadataService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.$hibachi = $hibachi;
        this.productBundlePartialsPath = productBundlePartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            productBundleGroup: "=",
            productBundleGroups: "=",
            index: "=",
            addProductBundleGroup: "&",
            removeProductBundleGroup: "&",
            refreshProductBundleGroup: "&",
            formName: "@"
        };
        this.controller = SWProductBundleGroupController;
        this.controllerAs = "swProductBundleGroup";
        this.link = function ($scope, element, attrs, ctrl) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlegroup.html";
    }
    SWProductBundleGroup.Factory = function () {
        var directive = function ($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) { return new SWProductBundleGroup($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            "$log", "$timeout", "collectionConfigService", "productBundleService", "metadataService", "utilityService", "formService", "$hibachi", "productBundlePartialsPath",
            "slatwallPathBuilder"
        ];
        return directive;
    };
    return SWProductBundleGroup;
}());
exports.SWProductBundleGroup = SWProductBundleGroup;


/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWProductBundleGroupsController = /** @class */ (function () {
    //@ngInject
    function SWProductBundleGroupsController($scope, $element, $attrs, $log, productBundleService, $hibachi) {
        var _this = this;
        this.$scope = $scope;
        this.$element = $element;
        this.$attrs = $attrs;
        this.$log = $log;
        this.productBundleService = productBundleService;
        this.$hibachi = $hibachi;
        this.removeProductBundleGroup = function (index) {
            if (angular.isDefined(_this.productBundleGroups[index]) && _this.productBundleGroups[index].$$isPersisted()) {
                _this.productBundleGroups[index].$$delete().then(function (data) {
                    //no more logic to run
                });
            }
            _this.productBundleGroups.splice(index, 1);
        };
        this.addProductBundleGroup = function () {
            var productBundleGroup = _this.$hibachi.newProductBundleGroup();
            productBundleGroup.$$setProductBundleSku(_this.sku);
            productBundleGroup = _this.productBundleService.decorateProductBundleGroup(productBundleGroup);
        };
        this.refreshProductBundleGroup = function () {
            for (var pbg in _this.productBundleGroups) {
                if (_this.productBundleGroups[pbg]['forms'] != undefined || _this.productBundleGroups[pbg]['forms']["createProductBundle" + pbg] != undefined) {
                    //updates the min and max from the raw form values instead of making another http call.
                    if (_this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['maximumQuantity'] != undefined && _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['maximumQuantity']['$modelValue'] != undefined) {
                        if (_this.productBundleGroups["" + pbg]['data']['maximumQuantity'] !== _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['maximumQuantity']['$modelValue']) {
                            _this.productBundleGroups["" + pbg]['data']['maximumQuantity'] = _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['maximumQuantity']['$modelValue'];
                        }
                    }
                    if (_this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['minimumQuantity'] != undefined && _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['minimumQuantity']['$modelValue'] != undefined) {
                        if (_this.productBundleGroups["" + pbg]['data']['minimumQuantity'] !== _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['minimumQuantity']['$modelValue']) {
                            _this.productBundleGroups["" + pbg]['data']['minimumQuantity'] = _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['minimumQuantity']['$modelValue'];
                        }
                    }
                }
            }
        };
        $scope.editing = $scope.editing || true;
        angular.forEach(this.productBundleGroups, function (obj) {
            productBundleService.decorateProductBundleGroup(obj);
            obj.data.$$editing = false;
        });
    }
    return SWProductBundleGroupsController;
}());
exports.SWProductBundleGroupsController = SWProductBundleGroupsController;
var SWProductBundleGroups = /** @class */ (function () {
    function SWProductBundleGroups($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) {
        this.restrict = 'EA';
        this.scope = {
            sku: "=",
            productBundleGroups: "="
        };
        this.bindToController = {
            sku: "=",
            productBundleGroups: "="
        };
        this.controller = SWProductBundleGroupsController;
        this.controllerAs = "swProductBundleGroups";
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlegroups.html";
    }
    SWProductBundleGroups.Factory = function () {
        var directive = function ($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) { return new SWProductBundleGroups($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$log',
            '$hibachi',
            'metadataService',
            'productBundlePartialsPath',
            'productBundleService',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWProductBundleGroups;
}());
exports.SWProductBundleGroups = SWProductBundleGroups;


/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWProductBundleGroupType = /** @class */ (function () {
    function SWProductBundleGroupType($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) {
        return {
            restrict: 'A',
            templateUrl: slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlegrouptype.html",
            scope: {
                productBundleGroup: "="
            },
            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
                    $log.debug('productBundleGrouptype');
                    $log.debug($scope.productBundleGroup);
                    $scope.productBundleGroupTypes = {};
                    $scope.$$id = "productBundleGroupType";
                    $scope.productBundleGroupTypes.value = [];
                    $scope.productBundleGroupTypes.$$adding = false;
                    $scope.productBundleGroupTypeSaving = false;
                    $scope.productBundleGroupType = {};
                    $scope.productBundleGroupTypeCollection = collectionConfigService.newCollectionConfig(("Type"));
                    $scope.productBundleGroupTypeCollection.setAllRecords(true);
                    $scope.productBundleGroupTypeCollection.addFilter("parentType.systemCode", "productBundleGroupType", "=");
                    if (angular.isUndefined($scope.productBundleGroup.data.productBundleGroupType)) {
                        var productBundleGroupType = $hibachi.newType();
                        var parentType = $hibachi.newType();
                        parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';
                        productBundleGroupType.$$setParentType(parentType);
                        $scope.productBundleGroup.$$setProductBundleGroupType(productBundleGroupType);
                    }
                    /**
                     * Sets the state to adding and sets the initial data.
                     */
                    $scope.productBundleGroupTypes.setAdding = function () {
                        $scope.productBundleGroupTypes.$$adding = !$scope.productBundleGroupTypes.$$adding;
                        if (!$scope.productBundleGroupTypes.$$adding) {
                            var productBundleGroupType = $hibachi.newType();
                            var parentType = $hibachi.newType();
                            parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';
                            productBundleGroupType.$$setParentType(parentType);
                            $scope.productBundleGroup.data.productBundleGroupType.data.typeName = "";
                            productBundleGroupType.data.typeName = $scope.productBundleGroup.data.productBundleGroupType.data.typeName;
                            productBundleGroupType.data.typeDescription = '';
                            productBundleGroupType.data.typeNameCode = '';
                            angular.extend($scope.productBundleGroup.data.productBundleGroupType, productBundleGroupType);
                            //formService.getForm('form.addProductBundleGroupType').$setDirty();
                        }
                    };
                    $scope.showAddProductBundleGroupTypeBtn = false;
                    /**
                     * Handles looking up the keyword and populating the dropdown as a user types.
                     */
                    $scope.productBundleGroupTypes.getTypesByKeyword = function (keyword) {
                        $log.debug('getTypesByKeyword');
                        var filterGroupsConfig = '[' +
                            ' {  ' +
                            '"filterGroup":[  ' +
                            ' {  ' +
                            ' "propertyIdentifier":"_type.parentType.systemCode",' +
                            ' "comparisonOperator":"=",' +
                            ' "value":"productBundleGroupType",' +
                            ' "ormtype":"string",' +
                            ' "conditionDisplay":"Equals"' +
                            '},' +
                            '{' +
                            '"logicalOperator":"AND",' +
                            ' "propertyIdentifier":"_type.typeName",' +
                            ' "comparisonOperator":"like",' +
                            ' "ormtype":"string",' +
                            ' "value":"%' + keyword + '%"' +
                            '  }' +
                            ' ]' +
                            ' }' +
                            ']';
                        return $hibachi.getEntity('type', { filterGroupsConfig: filterGroupsConfig.trim() })
                            .then(function (value) {
                            $log.debug('typesByKeyword');
                            $log.debug(value);
                            $scope.productBundleGroupTypes.value = value.pageRecords;
                            var myLength = keyword.length;
                            if (myLength > 0) {
                                $scope.showAddProductBundleGroupTypeBtn = true;
                            }
                            else {
                                $scope.showAddProductBundleGroupTypeBtn = false;
                            }
                            return $scope.productBundleGroupTypes.value;
                        });
                    };
                    /**
                     * Handles user selection of the dropdown.
                     */
                    $scope.selectProductBundleGroupType = function (item) {
                        angular.extend($scope.productBundleGroup.data.productBundleGroupType.data, item);
                        var parentType = $hibachi.newType();
                        parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';
                        $scope.productBundleGroup.data.productBundleGroupType.$$setParentType(parentType);
                        $scope.showAddProductBundleGroupTypeBtn = false;
                    };
                    /**
                     * Closes the add screen
                     */
                    $scope.closeAddScreen = function () {
                        $scope.productBundleGroupTypes.$$adding = false;
                        $scope.showAddProductBundleGroupTypeBtn = false;
                    };
                    /**
                     * Clears the type name
                     */
                    $scope.clearTypeName = function () {
                        if (angular.isDefined($scope.productBundleGroup.data.productBundleGroupType)) {
                            $scope.productBundleGroup.data.productBundleGroupType.data.typeName = '';
                        }
                    };
                    /**
                     * Saves product bundle group type
                     */
                    $scope.saveProductBundleGroupType = function () {
                        $scope.productBundleGroupTypeSaving = true;
                        //Gets the promise from save                    
                        var promise = $scope.productBundleGroup.data.productBundleGroupType.$$save();
                        promise.then(function (response) {
                            //Calls close function
                            if (promise.$$state.status) {
                                $scope.productBundleGroupTypeSaving = false;
                                $scope.closeAddScreen();
                            }
                        }, function () {
                            $scope.productBundleGroupTypeSaving = false;
                        });
                    };
                    //Sets up clickOutside Directive call back arguments
                    $scope.clickOutsideArgs = {
                        callBackActions: [$scope.closeAddScreen]
                    };
                    /**
                     * Works with swclickoutside directive to close dialog
                     */
                    $scope.closeThis = function (clickOutsideArgs) {
                        //Check against the object state
                        if (!$scope.productBundleGroup.data.productBundleGroupType.$$isPersisted()) {
                            //Perform all callback actions
                            for (var callBackAction in clickOutsideArgs.callBackActions) {
                                clickOutsideArgs.callBackActions[callBackAction]();
                            }
                        }
                    };
                }]
        };
    }
    SWProductBundleGroupType.Factory = function () {
        var directive = function ($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) { return new SWProductBundleGroupType($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$log',
            '$hibachi',
            'formService',
            'collectionConfigService',
            'productBundlePartialsPath',
            'productBundleService',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWProductBundleGroupType;
}());
exports.SWProductBundleGroupType = SWProductBundleGroupType;


/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var CreateBundleController = /** @class */ (function () {
    //@ngInject
    function CreateBundleController($scope, $location, $log, $rootScope, $window, $hibachi, dialogService, alertService, productBundleService, formService, productBundlePartialsPath) {
        $scope.productBundlePartialsPath = productBundlePartialsPath;
        var getParameterByName = function (name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"), results = regex.exec(location.search);
            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        };
        $scope.$id = "create-bundle-controller";
        //if this view is part of the dialog section, call the inherited function
        if (angular.isDefined($scope.scrollToTopOfDialog)) {
            $scope.scrollToTopOfDialog();
        }
        var productID = getParameterByName('productID');
        var productBundleConstructor = function () {
            $log.debug($scope);
            if (angular.isDefined($scope.product)) {
                for (var form in $scope.product.forms) {
                    formService.resetForm($scope.product.forms[form]);
                }
                if (angular.isDefined($scope.product.data.skus[0])) {
                    for (var form in $scope.product.data.skus[0].forms) {
                        formService.resetForm($scope.product.data.skus[0].forms[form]);
                    }
                }
                if (angular.isDefined($scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup)) {
                    for (var form in $scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup.forms) {
                        formService.resetForm($scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup.forms[form]);
                    }
                }
            }
            $scope.product = $hibachi.newProduct();
            var brand = $hibachi.newBrand();
            var productType = $hibachi.newProductType();
            $scope.product.$$setBrand(brand);
            $scope.product.$$setProductType(productType);
            $scope.product.$$addSku();
            $scope.product.data.skus[0].data.productBundleGroups = [];
        };
        $scope.productBundleGroup;
        if (angular.isDefined(productID) && productID !== '') {
            var productPromise = $hibachi.getProduct({ id: productID });
            productPromise.promise.then(function () {
                $log.debug(productPromise.value);
                productPromise.value.$$getSkus().then(function () {
                    productPromise.value.data.skus[0].$$getProductBundleGroups().then(function () {
                        $scope.product = productPromise.value;
                        angular.forEach($scope.product.data.skus[0].data.productBundleGroups, function (productBundleGroup) {
                            productBundleGroup.$$getProductBundleGroupType();
                            productBundleService.decorateProductBundleGroup(productBundleGroup);
                            productBundleGroup.data.$$editing = false;
                        });
                    });
                });
            }, productBundleConstructor());
        }
        else {
            productBundleConstructor();
        }
    }
    return CreateBundleController;
}());
exports.CreateBundleController = CreateBundleController;


/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var core_module_1 = __webpack_require__(8);
//services
var productbundleservice_1 = __webpack_require__(520);
//controllers
var create_bundle_controller_1 = __webpack_require__(518);
//directives
var swproductbundlegrouptype_1 = __webpack_require__(517);
var swproductbundlegroups_1 = __webpack_require__(516);
var swproductbundlegroup_1 = __webpack_require__(515);
var swproductbundlecollectionfilteritemtypeahead_1 = __webpack_require__(514);
//filters
var productbundlemodule = angular.module('hibachi.productbundle', [core_module_1.coremodule.name]).config(function () {
})
    //constants
    .constant('productBundlePartialsPath', 'productbundle/components/')
    //services
    .service('productBundleService', productbundleservice_1.ProductBundleService)
    //controllers
    .controller('create-bundle-controller', create_bundle_controller_1.CreateBundleController)
    //directives
    .directive('swProductBundleGroupType', swproductbundlegrouptype_1.SWProductBundleGroupType.Factory())
    .directive('swProductBundleGroups', swproductbundlegroups_1.SWProductBundleGroups.Factory())
    .directive('swProductBundleGroup', swproductbundlegroup_1.SWProductBundleGroup.Factory())
    .directive('swProductBundleCollectionFilterItemTypeahead', swproductbundlecollectionfilteritemtypeahead_1.SWProductBundleCollectionFilterItemTypeahead.Factory());
exports.productbundlemodule = productbundlemodule;


/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var ProductBundleService = /** @class */ (function () {
    //ngInject
    function ProductBundleService($log, $hibachi, utilityService) {
        var _this = this;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.decorateProductBundleGroup = function (productBundleGroup) {
            productBundleGroup.data.$$editing = true;
            var prototype = {
                $$setMinimumQuantity: function (quantity) {
                    if (quantity < 0 || quantity === null) {
                        this.minimumQuantity = 0;
                    }
                    if (quantity > this.maximumQuantity) {
                        this.maximumQuantity = quantity;
                    }
                },
                $$setMaximumQuantity: function (quantity) {
                    if (quantity < 1 || quantity === null) {
                        this.maximumQuantity = 1;
                    }
                    if (this.maximumQuantity < this.minimumQuantity) {
                        this.minimumQuantity = this.maximumQuantity;
                    }
                },
                $$setActive: function (value) {
                    this.active = value;
                },
                $$toggleEdit: function () {
                    if (angular.isUndefined(this.$$editing) || this.$$editing === false) {
                        this.$$editing = true;
                    }
                    else {
                        this.$$editing = false;
                    }
                }
            };
            angular.extend(productBundleGroup.data, prototype);
        };
        this.formatProductBundleGroupFilters = function (productBundleGroupFilters, filterTerm) {
            _this.$log.debug('FORMATTING PRODUCT BUNDLE FILTERs');
            _this.$log.debug(productBundleGroupFilters);
            _this.$log.debug(filterTerm);
            if (filterTerm.value === 'sku') {
                for (var i in productBundleGroupFilters) {
                    productBundleGroupFilters[i].name = productBundleGroupFilters[i][filterTerm.value + 'Code'];
                    productBundleGroupFilters[i].type = filterTerm.name;
                    productBundleGroupFilters[i].entityType = filterTerm.value;
                    productBundleGroupFilters[i].propertyIdentifier = '_sku.skuID';
                }
            }
            else {
                for (var i in productBundleGroupFilters) {
                    productBundleGroupFilters[i].name = productBundleGroupFilters[i][filterTerm.value + 'Name'];
                    productBundleGroupFilters[i].type = filterTerm.name;
                    productBundleGroupFilters[i].entityType = filterTerm.value;
                    if (filterTerm.value === 'brand' || filterTerm.value === 'productType') {
                        productBundleGroupFilters[i].propertyIdentifier = '_sku.product.' + filterTerm.value + '.' + filterTerm.value + 'ID';
                    }
                    else {
                        productBundleGroupFilters[i].propertyIdentifier = '_sku.' + filterTerm.value + '.' + filterTerm.value + 'ID';
                    }
                }
            }
            _this.$log.debug(productBundleGroupFilters);
            return productBundleGroupFilters;
        };
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
    }
    return ProductBundleService;
}());
exports.ProductBundleService = ProductBundleService;


/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAddSkuPriceModalLauncherController = /** @class */ (function () {
    //@ngInject
    function SWAddSkuPriceModalLauncherController($hibachi, entityService, formService, listingService, observerService, skuPriceService, utilityService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.entityService = entityService;
        this.formService = formService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.skuPriceService = skuPriceService;
        this.utilityService = utilityService;
        this.baseName = "j-add-sku-item-";
        this.currencyCodeEditable = false;
        this.saveSuccess = true;
        this.updateCurrencyCodeSelector = function (args) {
            if (args != 'All') {
                _this.skuPrice.data.currencyCode = args;
                _this.currencyCodeEditable = false;
            }
            else {
                _this.currencyCodeEditable = true;
            }
            _this.observerService.notify("pullBindings");
        };
        this.initData = function () {
            //these are populated in the link function initially
            _this.skuPrice = _this.entityService.newEntity('SkuPrice');
            _this.skuPrice.$$setSku(_this.sku);
            if (angular.isUndefined(_this.disableAllFieldsButPrice)) {
                _this.disableAllFieldsButPrice = false;
            }
            if (angular.isUndefined(_this.defaultCurrencyOnly)) {
                _this.defaultCurrencyOnly = false;
            }
            if (angular.isDefined(_this.minQuantity) && !isNaN(parseInt(_this.minQuantity))) {
                _this.skuPrice.data.minQuantity = parseInt(_this.minQuantity);
            }
            if (angular.isDefined(_this.maxQuantity) && !isNaN(parseInt(_this.minQuantity))) {
                _this.skuPrice.data.maxQuantity = parseInt(_this.maxQuantity);
            }
            if (angular.isUndefined(_this.currencyCodeOptions) && angular.isDefined(_this.eligibleCurrencyCodeList)) {
                _this.currencyCodeOptions = _this.eligibleCurrencyCodeList.split(",");
            }
            if (_this.defaultCurrencyOnly) {
                _this.skuPrice.data.currencyCode = "USD"; //temporarily hardcoded
            }
            else if (angular.isDefined(_this.currencyCode)) {
                _this.skuPrice.data.currencyCode = _this.currencyCode;
            }
            else if (angular.isDefined(_this.currencyCodeOptions) && _this.currencyCodeOptions.length) {
                _this.skuPrice.data.currencyCode = _this.currencyCodeOptions[0];
            }
            _this.observerService.notify("pullBindings");
        };
        this.save = function () {
            _this.observerService.notify("updateBindings");
            var firstSkuPriceForSku = !_this.skuPriceService.hasSkuPrices(_this.sku.data.skuID);
            var savePromise = _this.skuPrice.$$save();
            savePromise.then(function (response) {
                _this.saveSuccess = true;
                _this.observerService.notify('skuPricesUpdate', { skuID: _this.sku.data.skuID, refresh: true });
                //temporarily overriding for USD need to get this setting accessable to client side
                if (angular.isDefined(_this.listingID) &&
                    _this.skuPrice.data.currencyCode == "USD") {
                    var pageRecords = _this.listingService.getListingPageRecords(_this.listingID);
                    for (var i = 0; i < pageRecords.length; i++) {
                        if (angular.isDefined(pageRecords[i].skuID) &&
                            pageRecords[i].skuID == _this.sku.data.skuID) {
                            var skuPageRecord = pageRecords[i];
                            var index = i + 1;
                            while (index < pageRecords.length && angular.isUndefined(pageRecords[index].skuID)) {
                                //if there is a place in the listing to insert the new sku price lets insert it
                                if ((pageRecords[index].minQuantity <= _this.skuPrice.data.minQuantity) &&
                                    (index + 1 < pageRecords.length && (pageRecords[index + 1].minQuantity >= _this.skuPrice.data.minQuantity ||
                                        angular.isDefined(pageRecords[index + 1].skuID))) || index + 1 == pageRecords.length) {
                                    _this.skuPrice.data.eligibleCurrencyCodeList = _this.currencyCodeOptions.join(",");
                                    //spoof the page record
                                    var skuPriceForListing = {};
                                    for (var key in _this.skuPrice.data) {
                                        skuPriceForListing[key] = _this.skuPrice.data[key];
                                    }
                                    skuPriceForListing["sku_skuID"] = _this.sku.skuID;
                                    skuPriceForListing["sku_skuCode"] = _this.sku.skuCode;
                                    skuPriceForListing["sku_skuDefinition"] = _this.sku.skuDefinition;
                                    pageRecords.splice(index + 1, 0, skuPriceForListing);
                                    break;
                                }
                                index++;
                            }
                        }
                    }
                }
            }, function (reason) {
                //error callback
                _this.saveSuccess = false;
            }).finally(function () {
                if (_this.saveSuccess) {
                    for (var key in _this.skuPrice.data) {
                        if (key != 'sku' && key != 'currencyCode') {
                            _this.skuPrice.data[key] = null;
                        }
                    }
                    _this.formService.resetForm(_this.formName);
                    _this.initData();
                    if (firstSkuPriceForSku) {
                        _this.listingService.getCollection(_this.listingID);
                    }
                    _this.listingService.notifyListingPageRecordsUpdate(_this.listingID);
                }
            });
            return savePromise;
        };
        this.uniqueName = this.baseName + this.utilityService.createID(16);
        this.formName = "addSkuPrice" + this.utilityService.createID(16);
        this.skuPrice = this.entityService.newEntity('SkuPrice');
    }
    return SWAddSkuPriceModalLauncherController;
}());
exports.SWAddSkuPriceModalLauncherController = SWAddSkuPriceModalLauncherController;
var SWAddSkuPriceModalLauncher = /** @class */ (function () {
    function SWAddSkuPriceModalLauncher($hibachi, entityService, observerService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.entityService = entityService;
        this.observerService = observerService;
        this.scopeService = scopeService;
        this.collectionConfigService = collectionConfigService;
        this.skuPartialsPath = skuPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.skuData = {};
        this.transclude = true;
        this.bindToController = {
            sku: "=?",
            pageRecord: "=?",
            minQuantity: "@?",
            maxQuantity: "@?",
            currencyCode: "@?",
            eligibleCurrencyCodeList: "@?",
            defaultCurrencyOnly: "=?",
            disableAllFieldsButPrice: "=?"
        };
        this.controller = SWAddSkuPriceModalLauncherController;
        this.controllerAs = "swAddSkuPriceModalLauncher";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive
                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
                    if (angular.isDefined(currentScope.pageRecord)) {
                        $scope.swAddSkuPriceModalLauncher.pageRecord = currentScope.pageRecord;
                        //sku record case
                        if (angular.isDefined(currentScope.pageRecord.skuID)) {
                            var skuData = {
                                skuID: currentScope.pageRecord.skuID,
                                skuCode: currentScope.pageRecord.skuCode,
                                skuDescription: currentScope.pageRecord.skuDescription,
                                eligibleCurrencyCodeList: currentScope.pageRecord.eligibleCurrencyCodeList,
                                imagePath: currentScope.pageRecord.imagePath
                            };
                            $scope.swAddSkuPriceModalLauncher.currencyCodeOptions = currentScope.pageRecord.eligibleCurrencyCodeList.split(",");
                            $scope.swAddSkuPriceModalLauncher.sku = _this.$hibachi.populateEntity('Sku', skuData);
                            $scope.swAddSkuPriceModalLauncher.skuPrice = _this.entityService.newEntity('SkuPrice');
                            $scope.swAddSkuPriceModalLauncher.skuPrice.$$setSku($scope.swAddSkuPriceModalLauncher.sku);
                        }
                    }
                    else {
                        throw ("swAddSkuPriceModalLauncher was unable to find the pageRecord that it needs!");
                    }
                    var listingScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
                    if (angular.isDefined(listingScope.swListingDisplay)) {
                        $scope.swAddSkuPriceModalLauncher.listingID = listingScope.swListingDisplay.tableID;
                        $scope.swAddSkuPriceModalLauncher.selectCurrencyCodeEventName = "currencyCodeSelect" + listingScope.swListingDisplay.baseEntityId;
                        _this.observerService.attach($scope.swAddSkuPriceModalLauncher.updateCurrencyCodeSelector, $scope.swAddSkuPriceModalLauncher.selectCurrencyCodeEventName);
                    }
                    else {
                        throw ("swAddSkuPriceModalLauncher couldn't find listing scope");
                    }
                    $scope.swAddSkuPriceModalLauncher.initData();
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "addskupricemodallauncher.html";
    }
    SWAddSkuPriceModalLauncher.Factory = function () {
        var directive = function ($hibachi, entityService, observerService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder) { return new SWAddSkuPriceModalLauncher($hibachi, entityService, observerService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'entityService',
            'observerService',
            'scopeService',
            'collectionConfigService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWAddSkuPriceModalLauncher;
}());
exports.SWAddSkuPriceModalLauncher = SWAddSkuPriceModalLauncher;


/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDefaultSkuRadioController = /** @class */ (function () {
    //@ngInject
    function SWDefaultSkuRadioController($hibachi, defaultSkuService) {
        this.$hibachi = $hibachi;
        this.defaultSkuService = defaultSkuService;
        if (angular.isDefined(this.listingDisplayId) && angular.isDefined(this.columnId)) {
            this.selectionId = this.listingDisplayId + this.columnId;
        }
        else if (angular.isDefined(this.listingDisplayId)) {
            this.selectionId = this.listingDisplayId;
        }
        else {
            throw ("You must provide the listingDisplayId to SWDefaultSkuRadioController");
        }
        defaultSkuService.attachObserver(this.selectionId, this.productProductId);
        if (angular.isUndefined(this.selectionFieldName)) {
            this.selectionFieldName = this.selectionId + 'selection';
        }
        if (angular.isUndefined(this.skuId) && angular.isUndefined(this.sku)) {
            throw ("You must provide a skuID to SWDefaultSkuRadioController");
        }
        this.isDefaultSku = (this.skuId == this.productDefaultSkuSkuId);
        if (angular.isUndefined(this.sku)) {
            var skuData = {
                skuID: this.skuId
            };
            this.sku = this.$hibachi.populateEntity('Sku', skuData);
        }
    }
    return SWDefaultSkuRadioController;
}());
exports.SWDefaultSkuRadioController = SWDefaultSkuRadioController;
var SWDefaultSkuRadio = /** @class */ (function () {
    function SWDefaultSkuRadio(skuPartialsPath, slatwallPathBuilder) {
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuId: "@",
            sku: "=?",
            productProductId: "@?",
            productDefaultSkuSkuId: "@?",
            productId: "@?",
            listingDisplayId: "@?",
            columnId: "@?"
        };
        this.controller = SWDefaultSkuRadioController;
        this.controllerAs = "swDefaultSkuRadio";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "defaultskuradio.html";
    }
    SWDefaultSkuRadio.Factory = function () {
        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWDefaultSkuRadio(skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWDefaultSkuRadio;
}());
exports.SWDefaultSkuRadio = SWDefaultSkuRadio;


/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDeleteSkuPriceModalLauncherController = /** @class */ (function () {
    //@ngInject
    function SWDeleteSkuPriceModalLauncherController($q, $hibachi, listingService, skuPriceService, utilityService) {
        var _this = this;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.listingService = listingService;
        this.skuPriceService = skuPriceService;
        this.utilityService = utilityService;
        this.baseName = "j-delete-sku-item-";
        this.delete = function () {
            var skuPricesToDelete = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuId, _this.skuPrice.data.minQuantity, _this.skuPrice.data.maxQuantity);
            var deletePromises = [];
            skuPricesToDelete.then(function (skuPrices) {
                for (var i = 0; i < skuPrices.length; i++) {
                    deletePromises.push(skuPrices[i].$$delete());
                }
            }, function (reason) {
                //error
            }).finally(function () {
                _this.$q.all(deletePromises).then(function (response) {
                    if (angular.isDefined(_this.listingID)) {
                        var pageRecords = _this.listingService.getListingPageRecords(_this.listingID);
                        for (var i = 0; i < pageRecords.length; i++) {
                            if (angular.isDefined(pageRecords[i].skuPriceID) &&
                                _this.skuPrice.data.skuPriceID == pageRecords[i].skuPriceID) {
                                pageRecords.splice(i, 1);
                                break;
                            }
                        }
                    }
                });
            });
            return _this.$q.all(deletePromises);
        };
        this.uniqueName = this.baseName + this.utilityService.createID(16);
    }
    return SWDeleteSkuPriceModalLauncherController;
}());
exports.SWDeleteSkuPriceModalLauncherController = SWDeleteSkuPriceModalLauncherController;
var SWDeleteSkuPriceModalLauncher = /** @class */ (function () {
    function SWDeleteSkuPriceModalLauncher($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.scopeService = scopeService;
        this.skuPartialsPath = skuPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            pageRecord: "=?"
        };
        this.controller = SWDeleteSkuPriceModalLauncherController;
        this.controllerAs = "swDeleteSkuPriceModalLauncher";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive
                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
                    if (angular.isDefined(currentScope.pageRecord)) {
                        $scope.swDeleteSkuPriceModalLauncher.pageRecord = currentScope.pageRecord;
                        if (angular.isDefined(currentScope.pageRecord.sku_skuID)) {
                            $scope.swDeleteSkuPriceModalLauncher.skuId = currentScope.pageRecord.sku_skuID;
                        }
                        if (angular.isDefined(currentScope.pageRecord.skuPriceID) && currentScope.pageRecord.skuPriceID.length) {
                            var skuPriceData = {
                                skuPriceID: currentScope.pageRecord.skuPriceID,
                                minQuantity: currentScope.pageRecord.minQuantity,
                                maxQuantity: currentScope.pageRecord.maxQuantity,
                                currencyCode: currentScope.pageRecord.currencyCode,
                                price: currentScope.pageRecord.price
                            };
                            $scope.swDeleteSkuPriceModalLauncher.skuPrice = _this.$hibachi.populateEntity('SkuPrice', skuPriceData);
                        }
                    }
                    else {
                        throw ("swDeleteSkuPriceModalLauncher was unable to find the pageRecord that it needs!");
                    }
                    var listingScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
                    if (angular.isDefined(listingScope.swListingDisplay)) {
                        $scope.swDeleteSkuPriceModalLauncher.listingID = listingScope.swListingDisplay.tableID;
                    }
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "deleteskupricemodallauncher.html";
    }
    SWDeleteSkuPriceModalLauncher.Factory = function () {
        var directive = function ($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWDeleteSkuPriceModalLauncher($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWDeleteSkuPriceModalLauncher;
}());
exports.SWDeleteSkuPriceModalLauncher = SWDeleteSkuPriceModalLauncher;


/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWImageDetailModalLauncherController = /** @class */ (function () {
    //@ngInject
    function SWImageDetailModalLauncherController(observerService, formService, fileService, collectionConfigService, utilityService, $hibachi, $http, $element) {
        var _this = this;
        this.observerService = observerService;
        this.formService = formService;
        this.fileService = fileService;
        this.collectionConfigService = collectionConfigService;
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.$http = $http;
        this.$element = $element;
        this.baseName = "j-image-detail";
        this.imageOptions = [];
        this.numberOfSkusWithImageFile = 0;
        this.fetchImageOptionData = function () {
            _this.imageOptionsAttachedToSku = _this.collectionConfigService.newCollectionConfig("Option");
            _this.imageOptionsAttachedToSku.addDisplayProperty('optionGroup.optionGroupName,optionName,optionCode,optionID');
            _this.imageOptionsAttachedToSku.addFilter('skus.skuID', _this.skuId, "=");
            _this.imageOptionsAttachedToSku.addFilter('optionGroup.imageGroupFlag', true, "=");
            _this.imageOptionsAttachedToSku.setAllRecords(true);
            _this.imageOptionsAttachedToSku.getEntity().then(function (data) {
                angular.forEach(data.records, function (value, key) {
                    _this.imageOptions.push(_this.$hibachi.populateEntity("Option", value));
                });
            }, function (reason) {
                throw ("Could not calculate affected skus in SWImageDetailModalLauncher because of: " + reason);
            });
            _this.otherSkusWithSameImageCollectionConfig = _this.collectionConfigService.newCollectionConfig("Sku");
            _this.otherSkusWithSameImageCollectionConfig.addFilter("imageFile", _this.imageFile, "=");
            _this.otherSkusWithSameImageCollectionConfig.setAllRecords(true);
            _this.otherSkusWithSameImageCollectionConfig.getEntity().then(function (data) {
                _this.skusAffectedCount = data.records.length;
            }, function (reason) {
                throw ("Could not calculate affected skus in SWImageDetailModalLauncher because of: " + reason);
            });
        };
        this.updateImage = function (rawImage) {
            console.log('update');
        };
        this.saveAction = function () {
            var data = new FormData();
            data.append('slatAction', "admin:entity.processProduct");
            data.append('processContext', "uploadDefaultImage");
            data.append('sRedirectAction', "admin:entity.detailProduct");
            data.append('preprocessDisplayedFlag', "1");
            data.append('ajaxRequest', "1");
            data.append('productID', _this.sku.data.product_productID);
            if (_this.customImageNameFlag) {
                data.append('imageFile', _this.imageFileName);
            }
            else {
                data.append('imageFile', _this.sku.data.imageFile);
            }
            var inputs = document.getElementsByTagName('input');
            var fileElement = $('input[type=file]')[0];
            data.append('uploadFile', fileElement.files[0]);
            var savePromise = _this.$http.post("/?s=1", data, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': undefined }
            }).then(function () {
                _this.sku.data.imagePath = _this.imageFileName.split('?')[0] + "?version=" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);
            });
            return savePromise;
        };
        this.cancelAction = function () {
            _this.observerService.notify(_this.imageFileUpdateEvent, _this.imagePath);
        };
        this.$element = $element;
        this.name = this.baseName + this.utilityService.createID(18);
        this.imagePath;
        fileService.imageExists(this.imagePath).then(function () {
            _this.imagePathToUse = _this.imagePath + "?version=" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);
        }, function () {
            _this.imagePathToUse = 'assets/images/image-placeholder.jpg';
        }).finally(function () {
            var skuData = {
                skuID: _this.skuId,
                skuCode: _this.skuCode,
                imageFileName: _this.imageFileName,
                imagePath: _this.imagePathToUse,
                imageFile: _this.imageFile
            };
            _this.sku = _this.$hibachi.populateEntity("Sku", skuData);
            _this.imageFileUpdateEvent = "file:" + _this.imagePath;
            _this.observerService.attach(_this.updateImage, _this.imageFileUpdateEvent, _this.skuId);
            _this.fetchImageOptionData();
        });
    }
    return SWImageDetailModalLauncherController;
}());
exports.SWImageDetailModalLauncherController = SWImageDetailModalLauncherController;
var SWImageDetailModalLauncher = /** @class */ (function () {
    function SWImageDetailModalLauncher(skuPartialsPath, slatwallPathBuilder) {
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuId: "@",
            skuCode: "@",
            imagePath: "@",
            imageFile: "@",
            imageFileName: "@"
        };
        this.controller = SWImageDetailModalLauncherController;
        this.controllerAs = "swImageDetailModalLauncher";
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "imagedetailmodallauncher.html";
    }
    SWImageDetailModalLauncher.Factory = function () {
        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWImageDetailModalLauncher(skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWImageDetailModalLauncher;
}());
exports.SWImageDetailModalLauncher = SWImageDetailModalLauncher;


/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWPricingManagerController = /** @class */ (function () {
    //@ngInject
    function SWPricingManagerController(collectionConfigService) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.productCollectionConfig = this.collectionConfigService.newCollectionConfig("Product");
        this.productCollectionConfig.addFilter("productID", this.productId, "=");
        this.productCollectionConfig.addDisplayProperty("productID,defaultSku.currencyCode");
        this.productCollectionConfig.getEntity().then(function (response) {
            _this.product = response.pageRecords[0];
        }, function (reason) {
        });
    }
    return SWPricingManagerController;
}());
exports.SWPricingManagerController = SWPricingManagerController;
var SWPricingManager = /** @class */ (function () {
    // @ngInject
    function SWPricingManager($hibachi, skuPartialsPath, slatwallPathBuilder) {
        this.$hibachi = $hibachi;
        this.skuPartialsPath = skuPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'EA';
        this.priority = 1000;
        this.scope = {};
        this.bindToController = {
            productId: "@",
            trackInventory: "=?"
        };
        this.controller = SWPricingManagerController;
        this.controllerAs = "swPricingManager";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "pricingmanager.html";
    }
    SWPricingManager.Factory = function () {
        var directive = function ($hibachi, skuPartialsPath, slatwallPathBuilder) { return new SWPricingManager($hibachi, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWPricingManager;
}());
exports.SWPricingManager = SWPricingManager;


/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuCodeEditController = /** @class */ (function () {
    //@ngInject
    function SWSkuCodeEditController(historyService, listingService, observerService, skuPriceService, utilityService, $hibachi, $filter, $timeout) {
        this.historyService = historyService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.skuPriceService = skuPriceService;
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.$filter = $filter;
        this.$timeout = $timeout;
        this.showSave = true;
        this.baseEntityName = "Product";
        console.log('skucodeedit');
        if (angular.isDefined(this.pageRecord)) {
            this.pageRecord.edited = false;
        }
        this.formName = this.utilityService.createID(32);
        if (angular.isUndefined(this.skuId) && angular.isDefined(this.bundledSkuSkuId)) {
            this.skuId = this.bundledSkuSkuId;
        }
        if (angular.isUndefined(this.price) && angular.isDefined(this.bundledSkuPrice)) {
            this.price = this.bundledSkuPrice;
        }
        if (angular.isDefined(this.sku)) {
            this.sku.data.price = this.currencyFilter(this.sku.data.price, this.currencyCode, 2, false);
        }
        if (angular.isDefined(this.skuPrice)) {
            this.skuPrice.data.price = this.currencyFilter(this.skuPrice.data.price, this.currencyCode, 2, false);
        }
        if (angular.isDefined(this.bundledSkuSkuCode)) {
            this.skuCode = this.bundledSkuSkuCode;
        }
        if (angular.isDefined(this.skuId) && angular.isUndefined(this.sku)) {
            var skuData = {
                skuID: this.skuId,
                skuCode: this.skuCode
            };
            this.sku = this.$hibachi.populateEntity("Sku", skuData);
        }
    }
    return SWSkuCodeEditController;
}());
exports.SWSkuCodeEditController = SWSkuCodeEditController;
var SWSkuCodeEdit = /** @class */ (function () {
    function SWSkuCodeEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.observerService = observerService;
        this.historyService = historyService;
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuId: "@?",
            skuPriceId: "@?",
            skuCode: "@?",
            price: "@?",
            baseEntityId: "@?",
            baseEntityName: "@?",
            bundledSkuSkuId: "@?",
            bundledSkuSkuCode: "@?",
            bundledSkuCurrencyCode: "@?",
            bundledSkuPrice: "@?",
            eligibleCurrencyCodeList: "@?",
            listingDisplayId: "@?",
            currencyCode: "@?",
            masterPriceObject: "=?",
            revertToValue: "=?",
            sku: "=?",
            skuPrice: "=?"
        };
        this.controller = SWSkuCodeEditController;
        this.controllerAs = "swSkuCodeEdit";
        this.link = function (scope, element, attrs, formController, transcludeFn) {
            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecord");
            if (angular.isDefined(currentScope["pageRecord"])) {
                scope.swSkuCodeEdit.pageRecord = currentScope["pageRecord"];
            }
            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecordKey");
            if (angular.isDefined(currentScope["pageRecordKey"])) {
                scope.swSkuCodeEdit.pageRecordIndex = currentScope["pageRecordKey"];
            }
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skucodeedit.html";
    }
    SWSkuCodeEdit.Factory = function () {
        var directive = function (observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuCodeEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'observerService',
            'historyService',
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuCodeEdit;
}());
exports.SWSkuCodeEdit = SWSkuCodeEdit;


/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuCurrencySelectorController = /** @class */ (function () {
    //@ngInject
    function SWSkuCurrencySelectorController(collectionConfigService, observerService, $hibachi) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.$hibachi = $hibachi;
        this.currencyCodes = [];
        this.baseEntityName = "Product";
        this.select = function (currencyCode) {
            _this.selectedCurrencyCode = currencyCode;
            _this.observerService.notifyAndRecord(_this.selectCurrencyCodeEventName, currencyCode);
        };
        //this should be an rbkey
        this.currencyCodes.push("All");
        if (angular.isDefined(this.baseEntityId)) {
            this.selectCurrencyCodeEventName = "currencyCodeSelect" + this.baseEntityId;
        }
        this.selectedCurrencyCode = "USD";
        this.observerService.notifyAndRecord(this.selectCurrencyCodeEventName, this.selectedCurrencyCode);
        if (angular.isDefined(this.baseEntityName) && angular.isDefined(this.baseEntityId)) {
            this.baseEntityCollectionConfig = this.collectionConfigService.newCollectionConfig(this.baseEntityName);
            this.baseEntityCollectionConfig.addDisplayProperty("eligibleCurrencyCodeList");
            this.baseEntityCollectionConfig.addFilter("productID", this.baseEntityId, "=");
            this.baseEntityCollectionConfig.getEntity().then(function (response) {
                _this.product = _this.$hibachi.populateEntity(_this.baseEntityName, response.pageRecords[0]);
                var tempCurrencyCodeArray = _this.product.data.eligibleCurrencyCodeList.split(",");
                for (var key in tempCurrencyCodeArray) {
                    _this.currencyCodes.push(tempCurrencyCodeArray[key]);
                }
            }, function (reason) {
                //error callback
            });
        }
    }
    return SWSkuCurrencySelectorController;
}());
exports.SWSkuCurrencySelectorController = SWSkuCurrencySelectorController;
var SWSkuCurrencySelector = /** @class */ (function () {
    function SWSkuCurrencySelector(scopeService, skuPartialsPath, slatwallPathBuilder) {
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            baseEntityName: "@?",
            baseEntityId: "@?"
        };
        this.controller = SWSkuCurrencySelectorController;
        this.controllerAs = "swSkuCurrencySelector";
        this.link = function (scope, element, attrs, formController, transcludeFn) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skucurrencyselector.html";
    }
    SWSkuCurrencySelector.Factory = function () {
        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuCurrencySelector(scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuCurrencySelector;
}());
exports.SWSkuCurrencySelector = SWSkuCurrencySelector;


/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuPriceEditController = /** @class */ (function () {
    //@ngInject
    function SWSkuPriceEditController(historyService, listingService, observerService, skuPriceService, utilityService, $hibachi, $filter, $timeout) {
        var _this = this;
        this.historyService = historyService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.skuPriceService = skuPriceService;
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.$filter = $filter;
        this.$timeout = $timeout;
        this.showSave = true;
        this.baseEntityName = "Product";
        this.updateDisplay = function (currencyCode) {
            if (angular.isDefined(currencyCode) && angular.isDefined(_this.currencyCode)) {
                _this.filterOnCurrencyCode = currencyCode;
                if (_this.currencyCode == _this.filterOnCurrencyCode || _this.filterOnCurrencyCode == "All") {
                    _this.showPriceEdit = true;
                }
                else {
                    _this.showPriceEdit = false;
                }
            }
        };
        this.switchTabContext = function () {
            _this.observerService.notify(_this.switchTabContextEventName, _this.tabToSwitchTo);
        };
        if (angular.isDefined(this.pageRecord)) {
            this.pageRecord.edited = false;
        }
        this.currencyFilter = this.$filter('swcurrency');
        this.formName = this.utilityService.createID(32);
        if (angular.isUndefined(this.showPriceEdit)) {
            this.showPriceEdit = true;
        }
        if (angular.isUndefined(this.skuId) && angular.isDefined(this.bundledSkuSkuId)) {
            this.skuId = this.bundledSkuSkuId;
        }
        if (angular.isDefined(this.bundledSkuCurrencyCode)) {
            this.currencyCode = this.bundledSkuCurrencyCode;
        }
        if (angular.isUndefined(this.currencyCode) && angular.isDefined(this.sku)) {
            this.currencyCode = this.sku.data.currencyCode;
        }
        if (angular.isUndefined(this.currencyCode) && angular.isDefined(this.skuPrice)) {
            this.currencyCode = this.skuPrice.data.currencyCode;
        }
        if (angular.isUndefined(this.price) && angular.isDefined(this.bundledSkuPrice)) {
            this.price = this.bundledSkuPrice;
        }
        if (angular.isDefined(this.sku)) {
            this.sku.data.price = this.currencyFilter(this.sku.data.price, this.currencyCode, 2, false);
        }
        if (angular.isDefined(this.skuPrice)) {
            this.skuPrice.data.price = this.currencyFilter(this.skuPrice.data.price, this.currencyCode, 2, false);
        }
        if (angular.isUndefined(this.skuId)
            && angular.isUndefined(this.sku)
            && angular.isUndefined(this.skuPriceId)
            && angular.isUndefined(this.skuPrice)) {
            throw ("You must provide either a skuID or a skuPriceID or a sku or a skuPrice to SWSkuPriceSingleEditController");
        }
        else {
            if (angular.isDefined(this.skuId) && angular.isUndefined(this.sku)) {
                var skuData = {
                    skuID: this.skuId,
                    skuCode: this.skuCode,
                    currencyCode: this.currencyCode,
                    price: this.currencyFilter(this.price, this.currencyCode, 2, false)
                };
                this.sku = this.$hibachi.populateEntity("Sku", skuData);
            }
            if (angular.isDefined(this.skuPriceId) && angular.isUndefined(this.skuPrice)) {
                var skuPriceData = {
                    skuPriceId: this.skuPriceId,
                    currencyCode: this.currencyCode,
                    minQuantity: this.minQuantity,
                    maxQuantity: this.maxQuantity,
                    price: this.currencyFilter(this.price, this.currencyCode, 2, false)
                };
                this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);
            }
        }
        if (angular.isDefined(this.masterPriceObject)) {
            if (angular.isDefined(this.masterPriceObject.data.sku)) {
                var sku = this.masterPriceObject.data.sku;
            }
            else {
                var sku = this.masterPriceObject;
            }
            this.revertToValue = this.currencyFilter(this.skuPriceService.getInferredSkuPrice(sku, this.masterPriceObject.data.price, this.currencyCode), this.currencyCode, 2, false);
        }
    }
    return SWSkuPriceEditController;
}());
exports.SWSkuPriceEditController = SWSkuPriceEditController;
var SWSkuPriceEdit = /** @class */ (function () {
    function SWSkuPriceEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.observerService = observerService;
        this.historyService = historyService;
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuId: "@?",
            skuPriceId: "@?",
            skuCode: "@?",
            price: "@?",
            baseEntityId: "@?",
            baseEntityName: "@?",
            bundledSkuSkuId: "@?",
            bundledSkuCurrencyCode: "@?",
            bundledSkuPrice: "@?",
            eligibleCurrencyCodeList: "@?",
            listingDisplayId: "@?",
            currencyCode: "@?",
            masterPriceObject: "=?",
            revertToValue: "=?",
            sku: "=?",
            skuPrice: "=?"
        };
        this.controller = SWSkuPriceEditController;
        this.controllerAs = "swSkuPriceEdit";
        this.link = function (scope, element, attrs, formController, transcludeFn) {
            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecord");
            if (angular.isDefined(currentScope["pageRecord"])) {
                scope.swSkuPriceEdit.pageRecord = currentScope["pageRecord"];
            }
            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecordKey");
            if (angular.isDefined(currentScope["pageRecordKey"])) {
                scope.swSkuPriceEdit.pageRecordIndex = currentScope["pageRecordKey"];
            }
            var skuPricesEditScope = _this.scopeService.getRootParentScope(scope, "swSkuPricesEdit");
            if (skuPricesEditScope != null) {
                scope.swSkuPriceEdit.baseEntityId = skuPricesEditScope["swSkuPricesEdit"].baseEntityId;
                scope.swSkuPriceEdit.baseEntityName = skuPricesEditScope["swSkuPricesEdit"].baseEntityName;
            }
            if (angular.isDefined(scope.swSkuPriceEdit.baseEntityId) && angular.isUndefined(scope.swSkuPriceEdit.skuId)) {
                scope.swSkuPriceEdit.selectCurrencyCodeEventName = "currencyCodeSelect" + scope.swSkuPriceEdit.baseEntityId;
                _this.observerService.attach(scope.swSkuPriceEdit.updateDisplay, scope.swSkuPriceEdit.selectCurrencyCodeEventName, scope.swSkuPriceEdit.formName);
                if (_this.historyService.hasHistory(scope.swSkuPriceEdit.selectCurrencyCodeEventName)) {
                    scope.swSkuPriceEdit.updateDisplay(_this.historyService.getHistory(scope.swSkuPriceEdit.selectCurrencyCodeEventName));
                }
            }
            var tabGroupScope = _this.scopeService.getRootParentScope(scope, "swTabGroup");
            var tabContentScope = _this.scopeService.getRootParentScope(scope, "swTabContent");
            if (tabContentScope != null) {
                if (angular.isDefined(tabGroupScope) && tabContentScope["swTabContent"].name == "Basic") {
                    scope.swSkuPriceEdit.switchTabContextEventName = tabGroupScope["swTabGroup"].switchTabEventName;
                    scope.swSkuPriceEdit.tabToSwitchTo = tabGroupScope["swTabGroup"].getTabByName("Pricing");
                    scope.swSkuPriceEdit.showSwitchTabContextButton = true;
                }
                else {
                    scope.swSkuPriceEdit.showSwitchTabContextButton = false;
                }
            }
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupriceedit.html";
    }
    SWSkuPriceEdit.Factory = function () {
        var directive = function (observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPriceEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'observerService',
            'historyService',
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuPriceEdit;
}());
exports.SWSkuPriceEdit = SWSkuPriceEdit;


/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuPriceQuantityEditController = /** @class */ (function () {
    //@ngInject
    function SWSkuPriceQuantityEditController($q, $hibachi, collectionConfigService, listingService, observerService, skuPriceService) {
        var _this = this;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.skuPriceService = skuPriceService;
        this.skuPrices = [];
        this.showSave = true;
        this.refreshSkuPrices = function () {
            _this.skuPriceService.loadSkuPricesForSku(_this.skuSkuId).finally(function () {
                _this.getSkuPrices();
            });
        };
        this.updateSkuPrices = function () {
            angular.forEach(_this.skuPrices, function (value, key) {
                if (key > 0) {
                    var formName = _this.columnPropertyIdentifier + value.data.skuPriceID;
                    value.forms[formName].$setDirty(true);
                    if (angular.isDefined(value.forms[formName][_this.columnPropertyIdentifier]) &&
                        angular.isFunction(value.forms[formName][_this.columnPropertyIdentifier].$setDirty)) {
                        value.forms[formName][_this.columnPropertyIdentifier].$setDirty(true);
                    }
                    value.data[_this.columnPropertyIdentifier] = _this.skuPrice.data[_this.columnPropertyIdentifier];
                }
            });
        };
        this.saveSkuPrices = function () {
            var savePromises = [];
            angular.forEach(_this.skuPrices, function (value, key) {
                if (key > 0) {
                    savePromises.push(value.$$save());
                }
            });
            _this.savePromise = _this.$q.all(savePromises);
            _this.savePromise.then(function (response) {
                //success
            }, function (reason) {
                //failure
            });
            return _this.savePromise;
        };
        this.getSkuPrices = function () {
            var promise = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuSkuId, _this.minQuantity, _this.maxQuantity);
            promise.then(function (data) {
                _this.skuPrices = data;
            });
            return promise;
        };
        if (angular.isDefined(this.pageRecord)) {
            this.pageRecord.edited = false;
        }
        if (angular.isDefined(this.skuSkuId) && angular.isUndefined(this.skuPrice)) {
            var skuPriceData = {
                skuPriceID: this.skuPriceId,
                minQuantity: parseInt(this.minQuantity),
                maxQuantity: parseInt(this.maxQuantity),
                currencyCode: this.currencyCode,
                price: this.price
            };
            this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);
            this.skuPriceService.setSkuPrices(this.skuSkuId, [this.skuPrice]);
            this.refreshSkuPrices();
            this.observerService.attach(this.refreshSkuPrices, "skuPricesUpdate");
        }
    }
    return SWSkuPriceQuantityEditController;
}());
exports.SWSkuPriceQuantityEditController = SWSkuPriceQuantityEditController;
var SWSkuPriceQuantityEdit = /** @class */ (function () {
    function SWSkuPriceQuantityEdit(scopeService, skuPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.scopeService = scopeService;
        this.skuPartialsPath = skuPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuPrice: "=?",
            skuPriceId: "@",
            currencyCode: "@",
            skuSkuId: "@",
            column: "=?",
            columnPropertyIdentifier: "@",
            minQuantity: "@",
            maxQuantity: "@",
            price: "@",
            showSave: "=?",
            listingDisplayId: "@?"
        };
        this.controller = SWSkuPriceQuantityEditController;
        this.controllerAs = "swSkuPriceQuantityEdit";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive
                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
                    if (angular.isDefined(currentScope["pageRecord"])) {
                        $scope.swSkuPriceQuantityEdit.pageRecord = currentScope["pageRecord"];
                    }
                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
                    if (angular.isDefined(currentScope["pageRecordKey"])) {
                        $scope.swSkuPriceQuantityEdit.pageRecordIndex = currentScope["pageRecordKey"];
                    }
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupricequantityedit.html";
    }
    SWSkuPriceQuantityEdit.Factory = function () {
        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPriceQuantityEdit(scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuPriceQuantityEdit;
}());
exports.SWSkuPriceQuantityEdit = SWSkuPriceQuantityEdit;


/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuPricesEditController = /** @class */ (function () {
    //@ngInject
    function SWSkuPricesEditController(observerService, collectionConfigService, utilityService, skuPriceService, $hibachi) {
        var _this = this;
        this.observerService = observerService;
        this.collectionConfigService = collectionConfigService;
        this.utilityService = utilityService;
        this.skuPriceService = skuPriceService;
        this.$hibachi = $hibachi;
        this.baseEntityName = "Product";
        this.refreshSkuPrices = function () {
            _this.skuPriceService.loadSkuPricesForSku(_this.skuId).finally(function () {
                _this.getSkuPrices();
            });
        };
        this.hasSkuPrices = function () {
            return _this.skuPriceService.hasSkuPrices(_this.skuId);
        };
        this.getSkuPrices = function () {
            if (angular.isDefined(_this.skuSkuId)) {
                _this.loadingPromise = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuId, _this.minQuantity, _this.maxQuantity, _this.eligibleCurrencyCodes);
            }
            else if (angular.isDefined(_this.skuId)) {
                _this.loadingPromise = _this.skuPriceService.getBaseSkuPricesForSku(_this.skuId, _this.eligibleCurrencyCodes);
            }
            _this.loadingPromise.then(function (data) {
                _this.skuPrices = data;
            }, function (reason) {
                throw ("swSkuPrices was unable to fetch skuPrices because: " + reason);
            });
            return _this.loadingPromise;
        };
        this.Id = this.utilityService.createID(32);
        if (angular.isDefined(this.skuEligibleCurrencyCodeList)) {
            this.eligibleCurrencyCodeList = this.skuEligibleCurrencyCodeList;
        }
        if (angular.isDefined(this.eligibleCurrencyCodeList)) {
            this.eligibleCurrencyCodes = this.eligibleCurrencyCodeList.split(",");
        }
        if (angular.isUndefined(this.skuPrices)) {
            this.skuPrices = [];
        }
        if (angular.isDefined(this.skuSkuId)) {
            this.skuId = this.skuSkuId;
        }
        else {
            //inflate the sku
            this.sku = this.$hibachi.populateEntity("Sku", { skuID: this.skuId, price: this.price });
        }
        if (angular.isDefined(this.skuPriceId)) {
            var skuPriceData = {
                skuPriceID: this.skuPriceId,
                minQuantity: this.minQuantity,
                maxQuantity: this.maxQuantity,
                currencyCode: this.currencyCode,
                price: this.price
            };
            this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);
        }
        if (angular.isDefined(this.skuSkuId) && angular.isDefined(this.skuPrice)) {
            this.masterPriceObject = this.skuPrice;
        }
        else if (angular.isDefined(this.sku)) {
            this.masterPriceObject = this.sku;
        }
        this.refreshSkuPrices();
        this.observerService.attach(this.refreshSkuPrices, "skuPricesUpdate");
    }
    return SWSkuPricesEditController;
}());
exports.SWSkuPricesEditController = SWSkuPricesEditController;
var SWSkuPricesEdit = /** @class */ (function () {
    function SWSkuPricesEdit(scopeService, skuPartialsPath, slatwallPathBuilder) {
        this.scopeService = scopeService;
        this.skuPartialsPath = skuPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuId: "@",
            skuSkuId: "@",
            skuPriceId: "@",
            minQuantity: "@",
            maxQuantity: "@",
            currencyCode: "@",
            price: "@",
            bundledSkuSkuId: "@",
            baseEntityName: "@?",
            baseEntityId: "@?",
            listingDisplayId: "@?",
            eligibleCurrencyCodeList: "@?",
            skuEligibleCurrencyCodeList: "@?",
            sku: "=?"
        };
        this.controller = SWSkuPricesEditController;
        this.controllerAs = "swSkuPricesEdit";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupricesedit.html";
    }
    SWSkuPricesEdit.Factory = function () {
        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPricesEdit(scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuPricesEdit;
}());
exports.SWSkuPricesEdit = SWSkuPricesEdit;


/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuStockAdjustmentModalLauncherController = /** @class */ (function () {
    //@ngInject
    function SWSkuStockAdjustmentModalLauncherController($http, $q, $hibachi, observerService, utilityService, collectionConfigService) {
        var _this = this;
        this.$http = $http;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.initData = function () {
            _this.selectedLocation = undefined;
            _this.stockAdjustmentType = undefined;
            var skudata = {
                skuID: _this.skuId,
                skuCode: _this.skuCode,
                skuDescription: _this.skuDescription,
                imagePath: _this.imagePath,
                calculatedQATS: _this.calculatedQats || 0,
                calculatedQOH: _this.calculatedQoh || 0,
            };
            _this.sku = _this.$hibachi.populateEntity("Sku", skudata);
            _this.sku.setNewQOH(_this.calculatedQoh || 0);
            _this.stockAdjustmentID = "";
            _this.stock = _this.$hibachi.newStock();
            _this.stockAdjustment = _this.$hibachi.newStockAdjustment();
            _this.stockAdjustmentItem = _this.$hibachi.newStockAdjustmentItem();
            _this.selectedLocation = _this.$hibachi.newLocation();
            _this.stockAdjustment.$$addStockAdjustmentItem(_this.stockAdjustmentItem);
            _this.stock.$$setSku(_this.sku);
            _this.stockAdjustmentStatusType = _this.$hibachi.populateEntity("Type", { typeID: "444df2e2f66ddfaf9c60caf5c76349a6" }); //new status type for stock adjusment
            _this.stockAdjustment.$$setStockAdjustmentStatusType(_this.stockAdjustmentStatusType);
            _this.stockAdjustmentItem.$$setSku(_this.sku);
            _this.newQuantity = _this.calculatedQoh || 0;
            _this.observerService.notify(_this.selectedLocationTypeaheadDataKey + 'clearSearch');
        };
        this.save = function () {
            if (_this.stockAdjustmentItem.data.quantity > 0) {
                _this.stockAdjustment.$$setStockAdjustmentType(_this.$hibachi.populateEntity("Type", { typeID: "444df2e60db81c12589c9b39346009f2" })); //manual in stock adjustment type
                _this.stockAdjustment.$$setToLocation(_this.selectedLocation);
                _this.stockAdjustmentItem.$$setToStock(_this.stock);
            }
            else {
                _this.stockAdjustment.$$setStockAdjustmentType(_this.$hibachi.populateEntity("Type", { typeID: "444df2e7dba550b7a24a03acbb37e717" })); //manual out stock adjustment type
                _this.stockAdjustment.$$setFromLocation(_this.selectedLocation);
                _this.stockAdjustmentItem.data.quantity = _this.stockAdjustmentItem.data.quantity * -1;
                _this.stockAdjustmentItem.$$setFromStock(_this.stock);
            }
            return _this.$q.all([_this.observerService.notify('updateBindings'), _this.stock.$$save()]).then().finally(function () {
                var stockAdjustmentSavePromise = _this.stockAdjustment.$$save();
                stockAdjustmentSavePromise.then(function (response) {
                    _this.sku.newQOH = _this.newQuantity;
                    _this.sku.data.newQOH = _this.newQuantity;
                    _this.sku.data.calculatedQOH = _this.newQuantity;
                    _this.stockAdjustmentID = response.stockAdjustmentID;
                    _this.observerService.notify('updateBindings');
                }).finally(function () {
                    _this.observerService.notify('updateBindings');
                    _this.$http({
                        method: "POST",
                        url: _this.$hibachi.getUrlWithActionPrefix() + "entity.processStockAdjustment&processContext=processAdjustment&stockAdjustmentID=" + _this.stockAdjustmentID
                    }).then(function (response) {
                        //don't need to do anything here
                        _this.swListingDisplay.getCollection();
                    });
                });
            });
        };
        this.addSelectedLocation = function (item) {
            if (angular.isDefined(item)) {
                _this.selectedLocation = _this.$hibachi.populateEntity('Location', item);
                _this.stock.$$setLocation(_this.selectedLocation);
                //get existing stockID if one exists
                _this.stockCollectionConfig = _this.collectionConfigService.newCollectionConfig('Stock');
                _this.stockCollectionConfig.addFilter('sku.skuID', _this.stock.sku.skuID);
                _this.stockCollectionConfig.addFilter('location.locationID', _this.selectedLocation.locationID);
                _this.stockCollectionConfig.setDistinct(true);
                _this.stockCollectionConfig.getEntity().then(function (res) {
                    if (res.pageRecords.length > 0) {
                        _this.stock.stockID = res.pageRecords[0].stockID;
                    }
                });
            }
            else {
                _this.selectedLocation = undefined;
            }
        };
        this.updateNewQuantity = function (args) {
            if (!isNaN(args.swInput.value)) {
                _this.newQuantity = args.swInput.value;
            }
            else {
                _this.sku.data.newQOH = 0;
            }
            _this.updateStockAdjustmentQuantity();
        };
        this.updateStockAdjustmentQuantity = function () {
            if (!isNaN(_this.newQuantity)) {
                _this.stockAdjustmentItem.data.quantity = _this.newQuantity - _this.sku.data.calculatedQOH;
            }
            else {
                _this.newQuantity = 0;
            }
        };
        this.selectedLocationTypeaheadDataKey = this.utilityService.createID(32);
        if (angular.isDefined(this.skuId)) {
            this.name = "skuStockAdjustment" + this.utilityService.createID(32);
        }
        else {
            throw ("SWSkuStockAdjustmentModalLauncherController was not provided with a sku id");
        }
        if (angular.isDefined(this.calculatedQats)) {
            this.calculatedQats = parseInt(this.calculatedQats);
        }
        if (angular.isDefined(this.calculatedQoh)) {
            this.calculatedQoh = parseInt(this.calculatedQoh);
        }
        this.initData();
        this.observerService.attach(this.updateNewQuantity, this.name + 'newQuantitychange');
    }
    return SWSkuStockAdjustmentModalLauncherController;
}());
exports.SWSkuStockAdjustmentModalLauncherController = SWSkuStockAdjustmentModalLauncherController;
var SWSkuStockAdjustmentModalLauncher = /** @class */ (function () {
    function SWSkuStockAdjustmentModalLauncher(skuPartialsPath, slatwallPathBuilder) {
        this.restrict = 'EA';
        this.scope = {};
        this.require = { swListingDisplay: '?^swListingDisplay' };
        this.bindToController = {
            skuId: "@",
            skuCode: "@",
            skuDescription: "@",
            imagePath: "@",
            calculatedQats: "=?",
            calculatedQoh: "=?"
        };
        this.controller = SWSkuStockAdjustmentModalLauncherController;
        this.controllerAs = "swSkuStockAdjustmentModalLauncher";
        this.link = function (scope, element, attrs) {
            scope.$watch('swStockAdjustmentModalLauncherController.calculatedQoh', function (newValue) {
                console.log('newvalue', newValue);
                scope.swSkuStockAdjustmentModalLauncher.newQuantity = newValue;
            });
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skustockadjustmentmodallauncher.html";
    }
    SWSkuStockAdjustmentModalLauncher.Factory = function () {
        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWSkuStockAdjustmentModalLauncher(skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuStockAdjustmentModalLauncher;
}());
exports.SWSkuStockAdjustmentModalLauncher = SWSkuStockAdjustmentModalLauncher;


/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuThumbnailController = /** @class */ (function () {
    //@ngInject
    function SWSkuThumbnailController(fileService, $hibachi, $http) {
        var _this = this;
        this.fileService = fileService;
        this.$hibachi = $hibachi;
        this.$http = $http;
        if (!angular.isDefined(this.skuData)) {
            throw ("You must provide a sku to the SWSkuThumbnailController");
        }
        fileService.imageExists(this.skuData.imagePath).then(function () {
            //Do nothing
        }, function () {
            _this.skuData.imagePath = '/assets/images/image-placeholder.jpg';
        }).finally(function () {
            if (angular.isDefined(_this.skuData.imagePath)) {
                _this.image = _this.skuData.imagePath;
            }
        });
    }
    return SWSkuThumbnailController;
}());
exports.SWSkuThumbnailController = SWSkuThumbnailController;
var SWSkuThumbnail = /** @class */ (function () {
    function SWSkuThumbnail(skuPartialsPath, slatwallPathBuilder) {
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuData: "=",
            imageOnly: "=?",
            imagePath: "@?"
        };
        this.controller = SWSkuThumbnailController;
        this.controllerAs = "swSkuThumbnail";
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skuthumbnail.html";
    }
    SWSkuThumbnail.Factory = function () {
        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWSkuThumbnail(skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuThumbnail;
}());
exports.SWSkuThumbnail = SWSkuThumbnail;


/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var DefaultSkuService = /** @class */ (function () {
    //@ngInject
    function DefaultSkuService($hibachi, observerService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.observerKeys = {};
        this.defaultSkuSelections = {};
        this.attachObserver = function (selectionID, productID) {
            if (angular.isUndefined(_this.observerKeys[selectionID])) {
                _this.observerKeys[selectionID] = { attached: true, productID: productID, hasBeenCalled: false };
                _this.observerService.attach(_this.decideToSaveSku, 'swSelectionToggleSelection' + selectionID);
            } //otherwise the event has been attached
        };
        this.decideToSaveSku = function (args) {
            if (_this.defaultSkuSelections[args.selectionid] == null) {
                _this.defaultSkuSelections[args.selectionid] = args.selection;
            }
            else if (_this.defaultSkuSelections[args.selectionid] != args.selection) {
                _this.defaultSkuSelections[args.selectionid] = args.selection;
                _this.saveDefaultSku(args);
            }
        };
        this.saveDefaultSku = function (args) {
            //we only want to call save on the second and subsequent times the event fires, because it will fire when it is initialized
            _this.$hibachi.getEntity("Product", _this.observerKeys[args.selectionid].productID).then(function (product) {
                var product = _this.$hibachi.populateEntity("Product", product);
                product.$$setDefaultSku(_this.$hibachi.populateEntity("Sku", { skuID: args.selection }));
                product.$$save().then(function () {
                    //there was success
                }, function () {
                    //there was a problem
                });
            }, function (reason) {
            });
        };
    }
    return DefaultSkuService;
}());
exports.DefaultSkuService = DefaultSkuService;


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SkuPriceService = /** @class */ (function () {
    //@ngInject
    function SkuPriceService($http, $q, $hibachi, entityService, cacheService, collectionConfigService, observerService, utilityService) {
        var _this = this;
        this.$http = $http;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.entityService = entityService;
        this.cacheService = cacheService;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.skuPrices = {};
        this.skuPriceCollectionConfigs = {};
        this.skuPriceGetEntityPromises = {};
        this.skuDictionary = {};
        this.skuPriceHasEntityDeferred = {};
        this.skuPriceHasEntityPromises = {};
        this.newSkuPrice = function () {
            return _this.entityService.newEntity('SkuPrice');
        };
        this.getRelatedSkuPriceCollectionConfig = function (skuID, currencyCode, minQuantity, maxQuantity) {
            var relatedSkuPriceCollectionConfig = _this.collectionConfigService.newCollectionConfig("SkuPrice");
            relatedSkuPriceCollectionConfig.addDisplayProperty("skuPriceID,sku.skuID,minQuantity,maxQuantity,currencyCode,price");
            relatedSkuPriceCollectionConfig.addFilter("minQuantity", minQuantity, "=");
            relatedSkuPriceCollectionConfig.addFilter("maxQuantity", maxQuantity, "=");
            relatedSkuPriceCollectionConfig.addFilter("currencyCode", currencyCode, "!=");
            relatedSkuPriceCollectionConfig.addFilter("sku.skuID", skuID, "=");
            relatedSkuPriceCollectionConfig.addOrderBy("currencyCode|asc");
            relatedSkuPriceCollectionConfig.setAllRecords(true);
            return relatedSkuPriceCollectionConfig;
        };
        //wrapper function to split up args
        this.updateSkuPrices = function (args) {
            _this.loadSkuPricesForSku(args.skuID, args.refresh);
        };
        this.loadSkuPricesForSku = function (skuID, refresh) {
            _this.skuPriceHasEntityDeferred[skuID] = _this.$q.defer();
            _this.skuPriceHasEntityPromises[skuID] = _this.skuPriceHasEntityDeferred[skuID].promise;
            if (angular.isUndefined(_this.skuPriceCollectionConfigs[skuID])) {
                _this.skuPriceCollectionConfigs[skuID] = _this.collectionConfigService.newCollectionConfig("SkuPrice");
                _this.skuPriceCollectionConfigs[skuID].addDisplayProperty("skuPriceID,minQuantity,maxQuantity,currencyCode,price,sku.skuID");
                _this.skuPriceCollectionConfigs[skuID].addFilter("sku.skuID", skuID, "=");
                _this.skuPriceCollectionConfigs[skuID].addOrderBy("currencyCode|asc");
                _this.skuPriceCollectionConfigs[skuID].setAllRecords(true);
            }
            if (angular.isUndefined(_this.skuPriceGetEntityPromises[skuID]) || refresh) {
                _this.skuPriceGetEntityPromises[skuID] = _this.skuPriceCollectionConfigs[skuID].getEntity();
                refresh = true;
            }
            if (refresh) {
                _this.skuPriceGetEntityPromises[skuID].then(function (response) {
                    angular.forEach(response.records, function (value, key) {
                        _this.setSkuPrices(skuID, [_this.$hibachi.populateEntity("SkuPrice", value)]);
                    });
                }, function (reason) {
                    _this.skuPriceHasEntityPromises[skuID].reject();
                    throw ("skupriceservice failed to get sku prices" + reason);
                }).finally(function () {
                    _this.skuPriceHasEntityPromises[skuID].resolve();
                });
            }
            return _this.skuPriceGetEntityPromises[skuID];
        };
        this.setSkuPrices = function (skuID, skuPrices) {
            if (angular.isDefined(_this.skuPrices[skuID])) {
                for (var i = 0; i < skuPrices.length; i++) {
                    if (_this.getKeyOfSkuPriceMatch(skuID, skuPrices[i]) != -1) {
                        _this.getSkuPrices(skuID)[_this.getKeyOfSkuPriceMatch(skuID, skuPrices[i])].data.price = skuPrices[i].data.price;
                        skuPrices.splice(i, 1);
                        i--;
                    }
                }
                _this.skuPrices[skuID] = _this.skuPrices[skuID].concat(skuPrices);
            }
            else {
                _this.skuPrices[skuID] = skuPrices;
            }
        };
        this.hasSkuPrices = function (skuID) {
            if (angular.isDefined(_this.skuPrices[skuID])) {
                return true;
            }
            return false;
        };
        this.getSkuPrices = function (skuID) {
            if (angular.isDefined(_this.skuPrices[skuID])) {
                return _this.skuPrices[skuID];
            }
        };
        this.loadCurrencies = function () {
            var loadCurrenciesDeferred = _this.$q.defer();
            var loadCurrenciesPromise = loadCurrenciesDeferred.promise;
            if (angular.isDefined(_this.currencies)) {
                loadCurrenciesDeferred.resolve(_this.currencies);
            }
            else {
                var currencyRatePromise = _this.$http({
                    method: "POST",
                    url: _this.$hibachi.getUrlWithActionPrefix() + "api:main.getcurrencyrates"
                });
                currencyRatePromise.then(function (response) {
                    _this.currencies = response.data;
                    loadCurrenciesDeferred.resolve(_this.currencies);
                }, function (reason) {
                    loadCurrenciesDeferred.reject(reason);
                });
            }
            return loadCurrenciesPromise;
        };
        //logic for inferred currency prices
        this.getInferredSkuPrice = function (sku, basePrice, currencyCode) {
            if (angular.isDefined(_this.currencies[currencyCode]) && sku.data.currencyCode != currencyCode) {
                var currencyData = _this.currencies[currencyCode];
                if (currencyData.CONVERTFROM == sku.data.currencyCode) {
                    return basePrice * (currencyData.CONVERSIONRATE);
                }
                else if (currencyData.CONVERTFROM == "EUR" && _this.currencies[sku.data.currencyCode].CONVERTFROM == "EUR") {
                    //Convert using euro
                    var tempPrice = basePrice * (currencyData.CONVERSIONRATE);
                    return tempPrice * (_this.currencies[sku.data.currencyCode].CONVERSIONRATE);
                }
                else {
                    return "N/A"; //will become NaN
                }
            }
            else if (sku.data.currencyCode == currencyCode) {
                return basePrice;
            }
            return "N/A"; //will become NaN
        };
        this.createInferredSkuPriceForCurrency = function (sku, skuPrice, currencyCode) {
            var nonPersistedSkuPrice = _this.entityService.newEntity('SkuPrice');
            nonPersistedSkuPrice.$$setSku(sku);
            nonPersistedSkuPrice.data.currencyCode = currencyCode;
            //if for some reason the price that came back was preformatted althought this really shouldn't be needed
            if (angular.isString(sku.data.price) && isNaN(parseFloat(sku.data.price.substr(0, 1)))) {
                //strip currency symbol
                sku.data.price = parseFloat(sku.data.price.substr(1, sku.data.price.length));
            }
            var basePrice = 0;
            if (angular.isDefined(skuPrice)) {
                basePrice = skuPrice.data.price;
            }
            else {
                basePrice = sku.data.price;
            }
            nonPersistedSkuPrice.data.price = _this.getInferredSkuPrice(sku, basePrice, currencyCode);
            if (angular.isDefined(skuPrice) && angular.isDefined(skuPrice.data.minQuantity) && !isNaN(skuPrice.data.minQuantity)) {
                nonPersistedSkuPrice.data.minQuantity = skuPrice.data.minQuantity;
            }
            if (angular.isDefined(skuPrice) && angular.isDefined(skuPrice.data.maxQuantity) && !isNaN(skuPrice.data.maxQuantity)) {
                nonPersistedSkuPrice.data.maxQuantity = skuPrice.data.maxQuantity;
            }
            nonPersistedSkuPrice.data.inferred = true;
            return nonPersistedSkuPrice;
        };
        this.skuPriceSetHasCurrencyCode = function (skuPriceSet, currencyCode) {
            for (var k = 0; k < skuPriceSet.length; k++) {
                if (currencyCode == skuPriceSet[k].data.currencyCode) {
                    return true;
                }
            }
            return false;
        };
        this.defaultCurrencySkuPriceForSet = function (skuPriceSet) {
            for (var i = 0; i < skuPriceSet.length; i++) {
                //temporarily hard coded
                if (skuPriceSet[i].data.currencyCode == "USD") {
                    return skuPriceSet[i];
                }
            }
        };
        this.getSku = function (skuID) {
            var deferred = _this.$q.defer();
            var promise = deferred.promise;
            if (skuID in _this.skuDictionary) {
                var sku = _this.skuDictionary[skuID];
                deferred.resolve(sku);
            }
            else {
                _this.$hibachi.getEntity("Sku", skuID).then(function (response) {
                    _this.skuDictionary[skuID] = _this.$hibachi.populateEntity("Sku", response);
                    deferred.resolve(_this.skuDictionary[skuID]);
                }, function (reason) {
                    deferred.reject(reason);
                });
            }
            return promise;
        };
        this.loadInferredSkuPricesForSkuPriceSet = function (skuID, skuPriceSet, eligibleCurrencyCodes) {
            var deferred = _this.$q.defer();
            var promise = deferred.promise;
            _this.loadCurrencies().then(function () {
                _this.getSku(skuID).then(function (sku) {
                    for (var j = 0; j < eligibleCurrencyCodes.length; j++) {
                        if ((sku.data.currencyCode != eligibleCurrencyCodes[j]) &&
                            (skuPriceSet.length > 0 && !_this.skuPriceSetHasCurrencyCode(skuPriceSet, eligibleCurrencyCodes[j])) ||
                            ((sku.data.currencyCode != eligibleCurrencyCodes[j]) && skuPriceSet.length == 0)) {
                            skuPriceSet.push(_this.createInferredSkuPriceForCurrency(sku, _this.defaultCurrencySkuPriceForSet(skuPriceSet), eligibleCurrencyCodes[j]));
                        }
                    }
                    skuPriceSet = _this.sortSkuPrices(skuPriceSet);
                }, function (reason) {
                }).finally(function () {
                    deferred.resolve(skuPriceSet);
                });
            });
            return promise;
        };
        this.getBaseSkuPricesForSku = function (skuID, eligibleCurrencyCodes) {
            var deferred = _this.$q.defer();
            var promise = deferred.promise;
            var skuPriceSet = [];
            if (angular.isDefined(_this.skuPriceHasEntityPromises[skuID])) {
                _this.skuPriceGetEntityPromises[skuID].then(function () {
                    var skuPrices = _this.getSkuPrices(skuID) || [];
                    for (var i = 0; i < skuPrices.length; i++) {
                        var skuPrice = skuPrices[i];
                        if (_this.isBaseSkuPrice(skuPrice.data)) {
                            skuPriceSet.push(skuPrice);
                        }
                    }
                }).finally(function () {
                    if (angular.isDefined(eligibleCurrencyCodes)) {
                        _this.loadInferredSkuPricesForSkuPriceSet(skuID, skuPriceSet, eligibleCurrencyCodes).then(function (data) {
                            deferred.resolve(_this.sortSkuPrices(data));
                        });
                    }
                    else {
                        deferred.resolve(_this.sortSkuPrices(skuPriceSet));
                    }
                });
            }
            return promise;
        };
        this.getSkuPricesForQuantityRange = function (skuID, minQuantity, maxQuantity, eligibleCurrencyCodes) {
            var deferred = _this.$q.defer();
            var promise = deferred.promise;
            var skuPriceSet = [];
            if (angular.isDefined(_this.skuPriceHasEntityPromises[skuID])) {
                _this.skuPriceGetEntityPromises[skuID].then(function () {
                    var skuPrices = _this.getSkuPrices(skuID);
                    for (var i = 0; i < skuPrices.length; i++) {
                        var skuPrice = skuPrices[i];
                        if (_this.isQuantityRangeSkuPrice(skuPrice.data, minQuantity, maxQuantity)) {
                            skuPriceSet.push(skuPrice);
                        }
                    }
                }).finally(function () {
                    if (angular.isDefined(eligibleCurrencyCodes)) {
                        _this.loadInferredSkuPricesForSkuPriceSet(skuID, skuPriceSet, eligibleCurrencyCodes).then(function (data) {
                            deferred.resolve(_this.sortSkuPrices(data));
                        });
                    }
                    else {
                        deferred.resolve(_this.sortSkuPrices(skuPriceSet));
                    }
                });
            }
            return promise;
        };
        this.getKeyOfSkuPriceMatch = function (skuID, skuPrice) {
            if (_this.hasSkuPrices(skuID)) {
                for (var i = 0; i < _this.getSkuPrices(skuID).length; i++) {
                    var savedSkuPriceData = _this.getSkuPrices(skuID)[i].data;
                    if (savedSkuPriceData.currencyCode == skuPrice.data.currencyCode &&
                        ((_this.isBaseSkuPrice(savedSkuPriceData) &&
                            _this.isBaseSkuPrice(savedSkuPriceData) == _this.isBaseSkuPrice(skuPrice.data)) || _this.isQuantityRangeSkuPrice(savedSkuPriceData, skuPrice.data.minQuantity, skuPrice.data.maxQuantity))) {
                        return i;
                    }
                }
            }
            return -1;
        };
        this.isBaseSkuPrice = function (skuPriceData) {
            return isNaN(parseInt(skuPriceData.minQuantity)) && isNaN(parseInt(skuPriceData.maxQuantity));
        };
        this.isQuantityRangeSkuPrice = function (skuPriceData, minQuantity, maxQuantity) {
            var minQuantityMatch = (parseInt(skuPriceData.minQuantity) == parseInt(minQuantity));
            var maxQuantityMatch = (parseInt(skuPriceData.maxQuantity) == parseInt(maxQuantity));
            return minQuantityMatch && maxQuantityMatch;
        };
        this.sortSkuPrices = function (skuPriceSet) {
            function compareSkuPrices(a, b) {
                //temporarily hardcoded to usd needs to be default sku value
                if (a.data.currencyCode == "USD")
                    return -1;
                if (a.data.currencyCode < b.data.currencyCode)
                    return -1;
                if (a.data.currencyCode > b.data.currencyCode)
                    return 1;
                return 0;
            }
            return skuPriceSet.sort(compareSkuPrices);
        };
        this.observerService.attach(this.updateSkuPrices, 'skuPricesUpdate');
    }
    return SkuPriceService;
}());
exports.SkuPriceService = SkuPriceService;


/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var core_module_1 = __webpack_require__(8);
//services
var defaultskuservice_1 = __webpack_require__(533);
var skupriceservice_1 = __webpack_require__(534);
//controllers
//directives
var swpricingmanager_1 = __webpack_require__(525);
var swimagedetailmodallauncher_1 = __webpack_require__(524);
var swaddskupricemodallauncher_1 = __webpack_require__(521);
var swdeleteskupricemodallauncher_1 = __webpack_require__(523);
var swskustockadjustmentmodallauncher_1 = __webpack_require__(531);
var swdefaultskuradio_1 = __webpack_require__(522);
var swskucurrencyselector_1 = __webpack_require__(527);
var swskupriceedit_1 = __webpack_require__(528);
var swskucodeedit_1 = __webpack_require__(526);
var swskupricesedit_1 = __webpack_require__(530);
var swskupricequantityedit_1 = __webpack_require__(529);
var swskuthumbnail_1 = __webpack_require__(532);
//filters
var skumodule = angular.module('hibachi.sku', [core_module_1.coremodule.name]).config(function () {
})
    //constants
    .constant('skuPartialsPath', 'sku/components/')
    //services
    .service('defaultSkuService', defaultskuservice_1.DefaultSkuService)
    .service('skuPriceService', skupriceservice_1.SkuPriceService)
    //controllers
    //directives
    .directive('swPricingManager', swpricingmanager_1.SWPricingManager.Factory())
    .directive('swImageDetailModalLauncher', swimagedetailmodallauncher_1.SWImageDetailModalLauncher.Factory())
    .directive('swAddSkuPriceModalLauncher', swaddskupricemodallauncher_1.SWAddSkuPriceModalLauncher.Factory())
    .directive('swDeleteSkuPriceModalLauncher', swdeleteskupricemodallauncher_1.SWDeleteSkuPriceModalLauncher.Factory())
    .directive('swSkuStockAdjustmentModalLauncher', swskustockadjustmentmodallauncher_1.SWSkuStockAdjustmentModalLauncher.Factory())
    .directive('swDefaultSkuRadio', swdefaultskuradio_1.SWDefaultSkuRadio.Factory())
    .directive('swSkuCurrencySelector', swskucurrencyselector_1.SWSkuCurrencySelector.Factory())
    .directive('swSkuPriceEdit', swskupriceedit_1.SWSkuPriceEdit.Factory())
    .directive('swSkuCodeEdit', swskucodeedit_1.SWSkuCodeEdit.Factory())
    .directive('swSkuPricesEdit', swskupricesedit_1.SWSkuPricesEdit.Factory())
    .directive('swSkuPriceQuantityEdit', swskupricequantityedit_1.SWSkuPriceQuantityEdit.Factory())
    .directive('swSkuThumbnail', swskuthumbnail_1.SWSkuThumbnail.Factory());
exports.skumodule = skumodule;


/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCurrencyFormatter = /** @class */ (function () {
    function SWCurrencyFormatter($filter, $timeout) {
        var _this = this;
        this.$filter = $filter;
        this.$timeout = $timeout;
        this.restrict = "A";
        this.require = "ngModel";
        this.scope = {
            ngModel: '=',
            currencyCode: '@?'
        };
        this.link = function ($scope, element, attrs, modelCtrl) {
            modelCtrl.$parsers.push(function (data) {
                var currencyFilter = _this.$filter('swcurrency');
                if (isNaN(data)) {
                    data = 0;
                    modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));
                    modelCtrl.$render();
                }
                else {
                    if (_this._timeoutPromise) {
                        _this.$timeout.cancel(_this._timeoutPromise);
                    }
                    _this._timeoutPromise = _this.$timeout(function () {
                        modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));
                        modelCtrl.$render();
                    }, 1500);
                }
                return modelCtrl.$viewValue;
            });
            modelCtrl.$formatters.push(function (data) {
                if (isNaN(data)) {
                    data = 0;
                }
                var currencyFilter = _this.$filter('swcurrency');
                modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));
                modelCtrl.$render();
                return modelCtrl.$viewValue;
            });
        };
    }
    SWCurrencyFormatter.Factory = function () {
        var directive = function ($filter, $timeout) { return new SWCurrencyFormatter($filter, $timeout); };
        directive.$inject = [
            '$filter',
            '$timeout'
        ];
        return directive;
    };
    return SWCurrencyFormatter;
}());
exports.SWCurrencyFormatter = SWCurrencyFormatter;


/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCurrency = /** @class */ (function () {
    function SWCurrency() {
    }
    //@ngInject
    SWCurrency.Factory = function ($sce, $log, $hibachi, $filter) {
        var data = null, serviceInvoked = false;
        function realFilter(value, decimalPlace, returnStringFlag) {
            if (returnStringFlag === void 0) { returnStringFlag = true; }
            // REAL FILTER LOGIC, DISREGARDING PROMISES
            if (!angular.isDefined(data)) {
                $log.debug("Please provide a valid currencyCode, swcurrency defaults to $");
                data = "$";
            }
            if (!value || value.toString().trim() == '') {
                value = 0;
            }
            if (angular.isDefined(value)) {
                if (angular.isDefined(decimalPlace)) {
                    value = $filter('number')(value.toString(), decimalPlace);
                }
                else {
                    value = $filter('number')(value.toString(), 2);
                }
            }
            if (returnStringFlag) {
                return data + value;
            }
            else {
                return value;
            }
        }
        var filterStub;
        filterStub = function (value, currencyCode, decimalPlace, returnStringFlag) {
            if (returnStringFlag === void 0) { returnStringFlag = true; }
            if (data === null && returnStringFlag) {
                if (!serviceInvoked) {
                    serviceInvoked = true;
                    $hibachi.getCurrencies().then(function (currencies) {
                        var result = currencies.data;
                        data = result[currencyCode];
                    });
                }
                return "-";
            }
            else
                return realFilter(value, decimalPlace, returnStringFlag);
        };
        filterStub.$stateful = true;
        return filterStub;
    };
    return SWCurrency;
}());
exports.SWCurrency = SWCurrency;


/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var SlatwallPathBuilder = /** @class */ (function () {
    //@ngInject
    function SlatwallPathBuilder() {
        var _this = this;
        this.setBaseURL = function (baseURL) {
            _this.baseURL = baseURL;
        };
        this.setBasePartialsPath = function (basePartialsPath) {
            _this.basePartialsPath = basePartialsPath;
        };
        this.buildPartialsPath = function (componentsPath) {
            if (angular.isDefined(_this.baseURL) && angular.isDefined(_this.basePartialsPath)) {
                return _this.baseURL + _this.basePartialsPath + componentsPath;
            }
            else {
                throw ('need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there');
            }
        };
    }
    return SlatwallPathBuilder;
}());
exports.SlatwallPathBuilder = SlatwallPathBuilder;


/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/slatwallTypescript.d.ts" />
var hibachi_module_1 = __webpack_require__(689);
var workflow_module_1 = __webpack_require__(176);
var entity_module_1 = __webpack_require__(174);
var content_module_1 = __webpack_require__(482);
var formbuilder_module_1 = __webpack_require__(484);
var giftcard_module_1 = __webpack_require__(496);
var optiongroup_module_1 = __webpack_require__(500);
var orderitem_module_1 = __webpack_require__(509);
var orderfulfillment_module_1 = __webpack_require__(502);
var fulfillmentbatchdetail_module_1 = __webpack_require__(486);
var product_module_1 = __webpack_require__(513);
var productbundle_module_1 = __webpack_require__(519);
var sku_module_1 = __webpack_require__(535);
//constant
var slatwallpathbuilder_1 = __webpack_require__(538);
//directives
var swcurrencyformatter_1 = __webpack_require__(536);
//filters
var swcurrency_1 = __webpack_require__(537);
var slatwalladminmodule = angular.module('slatwalladmin', [
    //custom modules
    hibachi_module_1.hibachimodule.name,
    entity_module_1.entitymodule.name,
    content_module_1.contentmodule.name,
    formbuilder_module_1.formbuildermodule.name,
    giftcard_module_1.giftcardmodule.name,
    optiongroup_module_1.optiongroupmodule.name,
    orderitem_module_1.orderitemmodule.name,
    orderfulfillment_module_1.orderfulfillmentmodule.name,
    fulfillmentbatchdetail_module_1.fulfillmentbatchdetailmodule.name,
    product_module_1.productmodule.name,
    productbundle_module_1.productbundlemodule.name,
    sku_module_1.skumodule.name,
    workflow_module_1.workflowmodule.name
])
    .constant("baseURL", $.slatwall.getConfig().baseURL)
    .constant('slatwallPathBuilder', new slatwallpathbuilder_1.SlatwallPathBuilder())
    .config(["$provide", '$logProvider', '$filterProvider', '$httpProvider', '$routeProvider', '$injector', '$locationProvider', 'datepickerConfig', 'datepickerPopupConfig', 'slatwallPathBuilder', 'appConfig',
    function ($provide, $logProvider, $filterProvider, $httpProvider, $routeProvider, $injector, $locationProvider, datepickerConfig, datepickerPopupConfig, slatwallPathBuilder, appConfig) {
        //configure partials path properties
        slatwallPathBuilder.setBaseURL($.slatwall.getConfig().baseURL);
        slatwallPathBuilder.setBasePartialsPath('/admin/client/src/');
        datepickerConfig.showWeeks = false;
        datepickerConfig.format = 'MMM dd, yyyy hh:mm a';
        datepickerPopupConfig.toggleWeeksText = null;
        // route provider configuration
    }])
    .run(['$rootScope', '$filter', '$anchorScroll', '$hibachi', 'dialogService', 'observerService', 'utilityService', 'slatwallPathBuilder', function ($rootScope, $filter, $anchorScroll, $hibachi, dialogService, observerService, utilityService, slatwallPathBuilder) {
        $anchorScroll.yOffset = 100;
        $rootScope.openPageDialog = function (partial) {
            dialogService.addPageDialog(partial);
        };
        $rootScope.closePageDialog = function (index) {
            dialogService.removePageDialog(index);
        };
        $rootScope.createID = utilityService.createID;
        $rootScope.slatwall = $rootScope.hibachiScope;
        $rootScope.slatwall.getProcessObject = $hibachi.newEntity;
    }])
    //services
    //directives
    .directive('swCurrencyFormatter', swcurrencyformatter_1.SWCurrencyFormatter.Factory())
    //controllers
    .controller('preprocessaccount_addaccountpayment', ['$scope', '$compile', function ($scope, $compile) {
        //Define the different payment types used here
        var paymentType = { aptCharge: "444df32dd2b0583d59a19f1b77869025", aptCredit: "444df32e9b448ea196c18c66e1454c46", aptAdjustment: "68e3fb57d8102b47acc0003906d16ddd" };
        $scope.totalAmountToApply = 0; //Default value to show on new form
        $scope.paymentTypeName = $.slatwall.rbKey('define.charge'); //Default payment type
        $scope.paymentTypeLock = true; //Used to lock down the order payment type dropdowns
        $scope.amount = 0;
        $scope.updatePaymentType = function () {
            //Change all order payment types here
            angular.forEach($scope.appliedOrderPayment, function (obj, key) {
                //Only change the payment type if the type isn't adjustment'
                if ($scope.paymentType != paymentType.aptAdjustment)
                    obj.paymentType = $scope.paymentType;
            });
            if ($scope.paymentType == paymentType.aptCharge) {
                $scope.paymentTypeName = $.slatwall.rbKey('define.charge');
                $scope.paymentTypeLock = true;
            }
            else if ($scope.paymentType == paymentType.aptCredit) {
                $scope.paymentTypeName = $.slatwall.rbKey('define.credit');
                $scope.paymentTypeLock = true;
            }
            else if ($scope.paymentType == paymentType.aptAdjustment) {
                $scope.paymentTypeLock = false;
                $scope.paymentTypeName = $.slatwall.rbKey('define.adjustment');
                $scope.amount = 0;
            }
            //Update the subtotal now that we changed the payment type
            $scope.updateSubTotal();
        };
        $scope.updateSubTotal = function () {
            $scope.totalAmountToApply = 0; //Reset the subtotal before we loop
            //Loop through all the amount fields and create a running subtotal
            angular.forEach($scope.appliedOrderPayment, function (obj, key) {
                //Don't count the field if its undefied or not a number
                if (obj.amount != undefined && !isNaN(obj.amount)) {
                    //Charge / adjustment condition for subtotal
                    if ($scope.paymentType == paymentType.aptCharge || $scope.paymentType == paymentType.aptAdjustment) {
                        if (obj.paymentType == paymentType.aptCharge)
                            $scope.totalAmountToApply += parseFloat(obj.amount);
                        else if (obj.paymentType == paymentType.aptCredit)
                            $scope.totalAmountToApply -= parseFloat(obj.amount);
                        //Credit condition for subtotal
                    }
                    else if ($scope.paymentType == paymentType.aptCredit) {
                        if (obj.paymentType == paymentType.aptCharge)
                            $scope.totalAmountToApply -= parseFloat(obj.amount);
                        else if (obj.paymentType == paymentType.aptCredit)
                            $scope.totalAmountToApply += parseFloat(obj.amount);
                    }
                }
            });
            //The amount not applied to an order
            $scope.amountUnapplied = (Math.round(($scope.amount - $scope.totalAmountToApply + $scope.amountUnassigned) * 100) / 100);
            $scope.accountBalanceChange = parseFloat($scope.amount);
            //Switch the account balance display amount to a negative if you are doing a charge
            if ($scope.paymentType == paymentType.aptCharge)
                $scope.accountBalanceChange = parseFloat(($scope.accountBalanceChange * -1).toString()); //If charge, change to neg since we are lowering account balance
            else if ($scope.paymentType == paymentType.aptAdjustment)
                $scope.accountBalanceChange += parseFloat($scope.amountUnapplied); //If adjustment, use the amount unapplied to determine the balance change
        };
    }])
    //filters
    .filter('swcurrency', ['$sce', '$log', '$hibachi', '$filter', swcurrency_1.SWCurrency.Factory]);
exports.slatwalladminmodule = slatwalladminmodule;
// ((): void => {
//     var app = angular.module('slatwalladmin', ['hibachi','ngSlatwall','ngSlatwallModel','ui.bootstrap','ngAnimate','ngRoute','ngSanitize','ngCkeditor']);
//     app.config(
//         ["$provide",'$logProvider','$filterProvider','$httpProvider','$routeProvider','$injector','$locationProvider','datepickerConfig', 'datepickerPopupConfig',
//         ($provide, $logProvider,$filterProvider,$httpProvider,$routeProvider,$injector,$locationProvider,datepickerConfig, datepickerPopupConfig) =>
//      {
//         datepickerConfig.showWeeks = false;
//         datepickerConfig.format = 'MMM dd, yyyy hh:mm a';
//             datepickerPopupConfig.toggleWeeksText = null;
//         if(slatwallAngular.hashbang){
//             $locationProvider.html5Mode( false ).hashPrefix('!');
//         }
//         //
//         $provide.constant("baseURL", $.slatwall.getConfig().baseURL);
//         var _partialsPath = $.slatwall.getConfig().baseURL + '/admin/client/partials/';
//         $provide.constant("partialsPath", _partialsPath);
//         $provide.constant("productBundlePartialsPath", _partialsPath+'productbundle/');
//         angular.forEach(slatwallAngular.constantPaths, function(constantPath,key){
//             var constantKey = constantPath.charAt(0).toLowerCase()+constantPath.slice(1)+'PartialsPath';
//             var constantPartialsPath = _partialsPath+constantPath.toLowerCase()+'/';
//             $provide.constant(constantKey, constantPartialsPath);
//         });
//         $logProvider.debugEnabled( $.slatwall.getConfig().debugFlag );
//         $filterProvider.register('likeFilter',function(){
//             return function(text){
//                 if(angular.isDefined(text) && angular.isString(text)){
//                     return text.replace(new RegExp('%', 'g'), '');
//                 }
//             };
//         });
//         $filterProvider.register('truncate',function(){
//             return function (input, chars, breakOnWord) {
//                 if (isNaN(chars)) return input;
//                 if (chars <= 0) return '';
//                 if (input && input.length > chars) {
//                     input = input.substring(0, chars);
//                     if (!breakOnWord) {
//                         var lastspace = input.lastIndexOf(' ');
//                         //get last space
//                         if (lastspace !== -1) {
//                             input = input.substr(0, lastspace);
//                         }
//                     }else{
//                         while(input.charAt(input.length-1) === ' '){
//                             input = input.substr(0, input.length -1);
//                         }
//                     }
//                     return input + '...';
//                 }
//                 return input;
//             };
//         });
//         $httpProvider.interceptors.push('slatwallInterceptor');
//         // route provider configuration
//         $routeProvider.when('/entity/:entityName/', {
//             template: function(params){
//                 var entityDirectiveExists = $injector.has('sw'+params.entityName+'ListDirective');
//                 if(entityDirectiveExists){
//                     return '<sw-'+params.entityName.toLowerCase()+'-list>';
//                 }else{
//                     return '<sw-list></sw-list>';
//                 }
//             },
//             controller: 'routerController'
//         }).when('/entity/:entityName/:entityID', {
//             template: function(params){
//                 var entityDirectiveExists = $injector.has('sw'+params.entityName+'DetailDirective');
//                 if(entityDirectiveExists){
//                     return '<sw-'+params.entityName.toLowerCase()+'-detail>';
//                 }else{
//                     return '<sw-detail></sw-detail>';
//                 }
//             },
//             controller: 'routerController',
//         }).otherwise({
//             //controller:'otherwiseController'
//             templateUrl: $.slatwall.getConfig().baseURL + '/admin/client/js/partials/otherwise.html',
//         });
//     }]).run(['$rootScope','$filter','$anchorScroll','$hibachi','dialogService','observerService','utilityService', ($rootScope,$filter,$anchorScroll,$hibachi,dialogService,observerService,utilityService) => {
//         $anchorScroll.yOffset = 100;
//         $rootScope.openPageDialog = function( partial ) {
//             dialogService.addPageDialog( partial );
//         };
//         $rootScope.closePageDialog = function( index ) {
//             dialogService.removePageDialog( index );
//         };
//         $rootScope.loadedResourceBundle = false;
//         $rootScope.loadedResourceBundle = $hibachi.hasResourceBundle();
//         $rootScope.buildUrl = $hibachi.buildUrl;
//         $rootScope.createID = utilityService.createID;
//         var rbListener = $rootScope.$watch('loadedResourceBundle',function(newValue,oldValue){
//             if(newValue !== oldValue){
//                 $rootScope.$broadcast('hasResourceBundle');
//                 rbListener();
//             }
//         });
//     }])
// })();


/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var AlertController = /** @class */ (function () {
    //@ngInject
    function AlertController($scope, alertService) {
        $scope.$id = "alertController";
        $scope.alerts = alertService.getAlerts();
    }
    return AlertController;
}());
exports.AlertController = AlertController;


/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//model
var Alert = /** @class */ (function () {
    function Alert(msg, type, fade, dismissable) {
        this.fade = false;
        this.dismissable = false;
        this.msg = msg;
        this.type = type;
        this.fade = fade;
        this.dismissable = dismissable;
    }
    return Alert;
}());
exports.Alert = Alert;


/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//import Alert = require('../model/alert');
var alert_1 = __webpack_require__(541);
var AlertService = /** @class */ (function () {
    function AlertService($timeout, alerts) {
        var _this = this;
        this.$timeout = $timeout;
        this.alerts = alerts;
        this.newAlert = function () {
            return new alert_1.Alert();
        };
        this.get = function () {
            return _this.alerts || [];
        };
        this.addAlert = function (alert) {
            _this.alerts.push(alert);
            _this.$timeout(function () {
                if (!alert.dismissable) {
                    _this.removeAlert(alert);
                }
            }, 3500);
        };
        this.addAlerts = function (alerts) {
            angular.forEach(alerts, function (alert) {
                _this.addAlert(alert);
            });
        };
        this.removeAlert = function (alert) {
            var index = _this.alerts.indexOf(alert, 0);
            if (index != undefined) {
                _this.alerts.splice(index, 1);
            }
        };
        this.getAlerts = function () {
            return _this.alerts;
        };
        this.formatMessagesToAlerts = function (messages) {
            var alerts = [];
            if (messages && messages.length) {
                for (var message in messages) {
                    var alert = new alert_1.Alert(messages[message].message, messages[message].messageType);
                    alerts.push(alert);
                    if (alert.type === 'success' || alert.type === 'error') {
                        _this.$timeout(function () {
                            alert.fade = true;
                        }, 3500);
                        alert.dismissable = false;
                    }
                    else {
                        alert.fade = false;
                        alert.dismissable = true;
                    }
                }
            }
            return alerts;
        };
        this.removeOldestAlert = function () {
            _this.alerts.splice(0, 1);
        };
        this.alerts = [];
    }
    AlertService.$inject = [
        '$timeout'
    ];
    return AlertService;
}());
exports.AlertService = AlertService;


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../typings/hibachiTypescript.d.ts' />
/// <reference path='../typings/tsd.d.ts' />
var core_module_1 = __webpack_require__(8);
var md5 = __webpack_require__(42);
//generic bootstrapper
var BaseBootStrapper = /** @class */ (function () {
    function BaseBootStrapper(myApplication) {
        var _this = this;
        this._resourceBundle = {};
        this.getInstantiationKey = function (baseURL) {
            return _this.$q(function (resolve, reject) {
                if (hibachiConfig.instantiationKey) {
                    resolve(hibachiConfig.instantiationKey);
                }
                else {
                    _this.$http.get(baseURL + '?' + hibachiConfig.action + '=api:main.getInstantiationKey').then(function (resp) { return resolve(resp.data.data.instantiationKey); });
                }
            });
        };
        this.getData = function (invalidCache) {
            var promises = {};
            for (var i in invalidCache) {
                var invalidCacheName = invalidCache[i];
                var functionName = invalidCacheName.charAt(0).toUpperCase() + invalidCacheName.slice(1);
                promises[invalidCacheName] = _this['get' + functionName + 'Data']();
            }
            return _this.$q.all(promises);
        };
        this.getAttributeCacheKeyData = function () {
            var urlString = "";
            if (!hibachiConfig) {
                hibachiConfig = {};
            }
            if (!hibachiConfig.baseURL) {
                hibachiConfig.baseURL = '';
            }
            urlString += hibachiConfig.baseURL;
            if (urlString.length && urlString.slice(-1) !== '/') {
                urlString += '/';
            }
            return _this.$http.get(urlString + '?' + hibachiConfig.action + '=api:main.getAttributeModel')
                .then(function (resp) {
                core_module_1.coremodule.constant('attributeMetaData', resp.data.data);
                //for safari private mode which has no localStorage
                try {
                    localStorage.setItem('attributeMetaData', JSON.stringify(resp.data.data));
                    localStorage.setItem('attributeChecksum', md5(JSON.stringify(resp.data.data)));
                }
                catch (e) { }
                _this.attributeMetaData = resp.data.data;
            });
        };
        this.getInstantiationKeyData = function () {
            if (!_this.instantiationKey) {
                var d = new Date();
                var n = d.getTime();
                _this.instantiationKey = n.toString();
            }
            var urlString = "";
            if (!hibachiConfig) {
                hibachiConfig = {};
            }
            if (!hibachiConfig.baseURL) {
                hibachiConfig.baseURL = '';
            }
            urlString += hibachiConfig.baseURL;
            if (hibachiConfig.baseURL.length && hibachiConfig.baseURL.charAt(hibachiConfig.baseURL.length - 1) != '/') {
                urlString += '/';
            }
            return _this.$http.get(urlString + '/custom/config/config.json?instantiationKey=' + _this.instantiationKey)
                .then(function (resp) {
                var appConfig = resp.data.data;
                if (hibachiConfig.baseURL.length) {
                    appConfig.baseURL = urlString;
                }
                core_module_1.coremodule.constant('appConfig', resp.data.data);
                try {
                    localStorage.setItem('appConfig', JSON.stringify(resp.data.data));
                }
                catch (e) { }
                _this.appConfig = appConfig;
                return _this.getResourceBundles();
            });
        };
        this.getResourceBundle = function (locale) {
            var deferred = _this.$q.defer();
            var locale = locale || _this.appConfig.rbLocale;
            if (_this._resourceBundle[locale]) {
                return _this._resourceBundle[locale];
            }
            var urlString = _this.appConfig.baseURL + '/custom/config/resourceBundles/' + locale + '.json?instantiationKey=' + _this.appConfig.instantiationKey;
            _this.$http({
                url: urlString,
                method: "GET"
            }).success(function (response, status, headersGetter) {
                _this._resourceBundle[locale] = response;
                deferred.resolve(response);
            }).error(function (response, status) {
                if (status === 404) {
                    _this._resourceBundle[locale] = {};
                    deferred.resolve(response);
                }
                else {
                    deferred.reject(response);
                }
            });
            return deferred.promise;
        };
        this.getResourceBundles = function () {
            var localeListArray = _this.appConfig.rbLocale.split('_');
            var rbPromise;
            var rbPromises = [];
            rbPromise = _this.getResourceBundle(_this.appConfig.rbLocale);
            rbPromises.push(rbPromise);
            if (localeListArray.length === 2) {
                rbPromise = _this.getResourceBundle(localeListArray[0]);
                rbPromises.push(rbPromise);
            }
            if (localeListArray[0] !== 'en') {
                //this.getResourceBundle('en_us');
                _this.getResourceBundle('en');
            }
            return _this.$q.all(rbPromises).then(function (data) {
                core_module_1.coremodule.constant('resourceBundles', _this._resourceBundle);
            }, function (error) {
                //can enter here due to 404
                core_module_1.coremodule.constant('resourceBundles', _this._resourceBundle);
            });
        };
        this.myApplication = myApplication;
        return angular.lazy(this.myApplication).resolve(['$http', '$q', function ($http, $q) {
                _this.$http = $http;
                _this.$q = $q;
                var baseURL = hibachiConfig.baseURL;
                if (!baseURL) {
                    baseURL = '';
                }
                if (baseURL.length && baseURL.slice(-1) !== '/') {
                    baseURL += '/';
                }
                return _this.getInstantiationKey(baseURL).then(function (instantiationKey) {
                    _this.instantiationKey = instantiationKey;
                    var invalidCache = [];
                    try {
                        var hashedData = localStorage.getItem('attributeChecksum');
                        if (hashedData !== null && hibachiConfig.attributeCacheKey === hashedData.toUpperCase()) {
                            core_module_1.coremodule.constant('attributeMetaData', JSON.parse(localStorage.getItem('attributeMetaData')));
                        }
                        else {
                            invalidCache.push('attributeCacheKey');
                        }
                    }
                    catch (e) {
                        invalidCache.push('attributeCacheKey');
                    }
                    try {
                        _this.appConfig = JSON.parse(localStorage.getItem('appConfig'));
                        if (hibachiConfig.instantiationKey === _this.appConfig.instantiationKey) {
                            core_module_1.coremodule.constant('appConfig', _this.appConfig);
                            return _this.getResourceBundles();
                        }
                        else {
                            invalidCache.push('instantiationKey');
                        }
                    }
                    catch (e) {
                        invalidCache.push('instantiationKey');
                    }
                    return _this.getData(invalidCache);
                });
            }]);
    }
    return BaseBootStrapper;
}());
exports.BaseBootStrapper = BaseBootStrapper;


/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var core_module_1 = __webpack_require__(8);
//services
//components
var swcardlayout_1 = __webpack_require__(548);
var swcardview_1 = __webpack_require__(551);
var swcardheader_1 = __webpack_require__(546);
var swcardbody_1 = __webpack_require__(545);
var swcardicon_1 = __webpack_require__(547);
var swcardprogressbar_1 = __webpack_require__(550);
var swcardlistitem_1 = __webpack_require__(549);
var cardmodule = angular.module('hibachi.card', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('cardPartialsPath', 'card/components/')
    //components
    .directive('swCardLayout', swcardlayout_1.SWCardLayout.Factory())
    .directive('swCardView', swcardview_1.SWCardView.Factory())
    .directive('swCardHeader', swcardheader_1.SWCardHeader.Factory())
    .directive('swCardBody', swcardbody_1.SWCardBody.Factory())
    .directive('swCardIcon', swcardicon_1.SWCardIcon.Factory())
    .directive('swCardProgressBar', swcardprogressbar_1.SWCardProgressBar.Factory())
    .directive('swCardListItem', swcardlistitem_1.SWCardListItem.Factory());
exports.cardmodule = cardmodule;


/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardBodyController = /** @class */ (function () {
    //@ngInject
    function SWCardBodyController($log) {
        this.$log = $log;
        this.$onInit = function () {
        };
    }
    return SWCardBodyController;
}());
exports.SWCardBodyController = SWCardBodyController;
var SWCardBody = /** @class */ (function () {
    //@ngInject
    function SWCardBody(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardBodyController;
        this.controllerAs = 'SwCardBodyController';
        this.scope = {};
        this.bindToController = {};
        this.transclude = true;
        this.require = "^SWCardView";
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardbody.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardBody.Factory = function () {
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardBody(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardBody;
}());
exports.SWCardBody = SWCardBody;


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardHeaderController = /** @class */ (function () {
    //@ngInject
    function SWCardHeaderController($log) {
        this.$log = $log;
        this.$onInit = function () {
        };
    }
    return SWCardHeaderController;
}());
exports.SWCardHeaderController = SWCardHeaderController;
var SWCardHeader = /** @class */ (function () {
    //@ngInject
    function SWCardHeader(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardHeaderController;
        this.controllerAs = 'SwCardHeaderController';
        this.scope = {};
        this.bindToController = {
            addBorder: '@?'
        };
        this.transclude = true;
        this.require = "^SWCardView";
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardheader.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardHeader.Factory = function () {
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardHeader(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardHeader;
}());
exports.SWCardHeader = SWCardHeader;


/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardIconController = /** @class */ (function () {
    //@ngInject
    function SWCardIconController($log) {
        this.$log = $log;
        this.iconMultiplier = "1x";
        this.$onInit = function () {
        };
    }
    return SWCardIconController;
}());
exports.SWCardIconController = SWCardIconController;
var SWCardIcon = /** @class */ (function () {
    //@ngInject
    function SWCardIcon(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardIconController;
        this.controllerAs = 'SwCardIconController';
        this.scope = {};
        this.bindToController = {
            iconName: "@?",
            iconMultiplier: "@?"
        };
        this.transclude = true;
        this.require = "^SWCardView";
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardicon.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardIcon.Factory = function () {
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardIcon(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardIcon;
}());
exports.SWCardIcon = SWCardIcon;


/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardLayoutController = /** @class */ (function () {
    //@ngInject
    function SWCardLayoutController($log) {
        this.$log = $log;
        this.$onInit = function () {
        };
        console.log("This card class", this.cardClass);
    }
    return SWCardLayoutController;
}());
exports.SWCardLayoutController = SWCardLayoutController;
var SWCardLayout = /** @class */ (function () {
    //@ngInject
    function SWCardLayout(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardLayoutController;
        this.controllerAs = 'SwCardLayoutController';
        this.scope = {};
        this.bindToController = {
            cardClass: "@?"
        };
        this.transclude = {
            cardView: '?swCardView',
        };
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardlayout.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardLayout.Factory = function () {
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardLayout(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardLayout;
}());
exports.SWCardLayout = SWCardLayout;


/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardListItemController = /** @class */ (function () {
    //@ngInject
    function SWCardListItemController($log) {
        this.$log = $log;
        this.strong = 'false';
        this.style = 'padding-top:5px;padding-bottom:5px';
        this.$onInit = function () { };
    }
    return SWCardListItemController;
}());
exports.SWCardListItemController = SWCardListItemController;
var SWCardListItem = /** @class */ (function () {
    //@ngInject
    function SWCardListItem(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardListItemController;
        this.controllerAs = 'SwCardListItemController';
        this.scope = {};
        this.bindToController = {
            title: "@?",
            value: "@?",
            strong: "@?",
            style: "@?"
        };
        this.transclude = true;
        this.require = "^SWCardView";
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardlistitem.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardListItem.Factory = function () {
        console.log("Getting new list item");
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardListItem(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardListItem;
}());
exports.SWCardListItem = SWCardListItem;


/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardProgressBarController = /** @class */ (function () {
    //@ngInject
    function SWCardProgressBarController($log) {
        this.$log = $log;
        this.valueMin = 0;
        this.valueMax = 100;
        this.valueNow = 0;
        this.$onInit = function () { };
    }
    return SWCardProgressBarController;
}());
exports.SWCardProgressBarController = SWCardProgressBarController;
var SWCardProgressBar = /** @class */ (function () {
    //@ngInject
    function SWCardProgressBar(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardProgressBarController;
        this.scope = {};
        this.controllerAs = 'SwCardProgressBarController';
        this.bindToController = {
            valueMin: "@?",
            valueMax: "@?",
            valueNow: "@?"
        };
        this.transclude = true;
        this.require = "^SWCardView";
        /**
         * This is a wrapper class for the card components that allow you to define the columns.
         */
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardprogressbar.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardProgressBar.Factory = function () {
        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardProgressBar(cardPartialsPath, hibachiPathBuilder); };
        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];
        return component;
    };
    return SWCardProgressBar;
}());
exports.SWCardProgressBar = SWCardProgressBar;


/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCardViewController = /** @class */ (function () {
    //@ngInject
    function SWCardViewController($log) {
        this.$log = $log;
        this.cardSize = 'md';
    }
    return SWCardViewController;
}());
exports.SWCardViewController = SWCardViewController;
var SWCardView = /** @class */ (function () {
    //@ngInject
    function SWCardView(cardPartialsPath, hibachiPathBuilder) {
        this.controller = SWCardViewController;
        this.scope = {};
        this.controllerAs = 'SwCardViewController';
        this.bindToController = {
            cardTitle: "@?",
            cardBody: "@?",
            cardSize: "@?" //sm, md, lg
        };
        this.transclude = {
            cardIcon: '?swCardIcon',
            cardHeader: '?swCardHeader',
            cardBody: '?swCardBody',
            listItem: '?swCardListItem',
            progressBar: '?swCardProgressBar'
        };
        this.templateUrl = "";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardview.html');
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWCardView.Factory = function () {
        var directive = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardView(cardPartialsPath, hibachiPathBuilder); };
        directive.$inject = ["cardPartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWCardView;
}());
exports.SWCardView = SWCardView;


/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAddFilterButtons = /** @class */ (function () {
    //@ngInject
    function SWAddFilterButtons(collectionService, collectionPartialsPath, hibachiPathBuilder) {
        return {
            require: '^swFilterGroups',
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "addfilterbuttons.html",
            scope: {
                itemInUse: "=",
                readOnly: "="
            },
            link: function (scope, element, attrs, filterGroupsController) {
                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();
                scope.addFilterItem = function () {
                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse);
                };
                scope.addFilterGroupItem = function () {
                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse, true);
                };
            }
        };
    }
    SWAddFilterButtons.Factory = function () {
        var directive = function (collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWAddFilterButtons(collectionService, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionService',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWAddFilterButtons;
}());
exports.SWAddFilterButtons = SWAddFilterButtons;


/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCollection = /** @class */ (function () {
    //@ngInject
    function SWCollection(hibachiPathBuilder, collectionPartialsPath) {
        return {
            restrict: 'A',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "collection.html",
            link: function (scope, $element, $attrs) {
                scope.tabsUniqueID = Math.floor(Math.random() * 999);
                scope.toggleCogOpen = $attrs.toggleoption;
                //Toggles open/close of filters and display options
                scope.toggleFiltersAndOptions = function () {
                    if (scope.toggleCogOpen === false) {
                        scope.toggleCogOpen = true;
                    }
                    else {
                        scope.toggleCogOpen = false;
                    }
                };
            }
        };
    }
    SWCollection.Factory = function () {
        var directive = function (hibachiPathBuilder, collectionPartialsPath) { return new SWCollection(hibachiPathBuilder, collectionPartialsPath); };
        directive.$inject = [
            'hibachiPathBuilder',
            'collectionPartialsPath'
        ];
        return directive;
    };
    return SWCollection;
}());
exports.SWCollection = SWCollection;


/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCollectionTable = /** @class */ (function () {
    //@ngInject
    function SWCollectionTable($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi, $filter, $injector) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "collectiontable.html",
            scope: {
                collection: "=",
                collectionConfig: "=",
                isRadio: "=?",
                //angularLink:true || false
                angularLinks: "=?"
            },
            link: function (scope, element, attrs) {
                if (angular.isUndefined(scope.angularLinks)) {
                    scope.angularLinks = false;
                }
                if (scope.collection.collectionObject) {
                    scope.collectionObject = $hibachi['new' + scope.collection.collectionObject]();
                }
                else if (scope.collectionConfig.baseEntityName) {
                    scope.collectionObject = scope.collectionConfig.baseEntityName;
                }
                var escapeRegExp = function (str) {
                    return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
                };
                scope.replaceAll = function (str, find, replace) {
                    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
                };
                /*
                 * Handles setting the key on the data.
                 * */
                angular.forEach(scope.collectionConfig.columns, function (column) {
                    $log.debug("Config Key : " + column);
                    column.key = column.propertyIdentifier.replace(/\./g, '_').replace(scope.collectionConfig.baseEntityAlias + '_', '');
                });
                scope.addSelection = function (selectionid, selection) {
                    selectionService.addSelection(selectionid, selection);
                };
                scope.getCellValue = function (pageRecord, column) {
                    var value = '';
                    if (angular.isDefined(column.aggregate)) {
                        value = pageRecord[column.aggregate.aggregateAlias];
                    }
                    else if (column.propertyIdentifier.replace(scope.collectionConfig.baseEntityAlias, '').charAt(0) == '.') {
                        value = pageRecord[column.propertyIdentifier.replace(scope.collectionConfig.baseEntityAlias + '.', '')];
                    }
                    else {
                        value = pageRecord[column.propertyIdentifier.replace(scope.collectionConfig.baseEntityAlias + '_', '').replace(/\./g, '_')];
                    }
                    var type = 'none';
                    if (angular.isDefined(column.type) && column.type != 'none') {
                        type = column.type;
                    }
                    if (type == 'none' && angular.isDefined(column.ormtype) && column.ormtype != 'none') {
                        type = column.ormtype;
                    }
                    if (type != 'none' && $injector.has(type + 'Filter')) {
                        return $filter(type)(value);
                    }
                    else {
                        return value;
                    }
                };
            }
        };
    }
    SWCollectionTable.Factory = function () {
        var directive = function ($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi, $filter, $injector) { return new SWCollectionTable($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi, $filter, $injector); };
        directive.$inject = [
            '$log',
            'hibachiPathBuilder',
            'collectionPartialsPath',
            'selectionService',
            '$hibachi',
            '$filter',
            '$injector'
        ];
        return directive;
    };
    return SWCollectionTable;
}());
exports.SWCollectionTable = SWCollectionTable;


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWColumnItem = /** @class */ (function () {
    //@ngInject
    function SWColumnItem($log, hibachiPathBuilder, collectionPartialsPath, observerService) {
        return {
            restrict: 'A',
            require: {
                swDisplayOptions: "?^swDisplayOptions",
                swListingControls: "?^swListingControls"
            },
            scope: {
                column: "=",
                columns: "=",
                columnIndex: "=",
                saveCollection: "&?",
                propertiesList: "<",
                orderBy: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "columnitem.html",
            link: function (scope, element, attrs, controller, observerService) {
                if (!scope.saveCollection && controller.swListingControls) {
                    scope.saveCollection = function () {
                        controller.swListingControls.collectionConfig.columns = scope.columns;
                        controller.swDisplayOptions.columns = scope.columns;
                        controller.swListingControls.saveCollection();
                    };
                }
                scope.editingDisplayTitle = false;
                scope.editDisplayTitle = function () {
                    if (angular.isUndefined(scope.column.displayTitle) || !scope.column.displayTitle.length) {
                        scope.column.displayTitle = scope.column.title;
                    }
                    scope.previousDisplayTitle = scope.column.displayTitle;
                    scope.editingDisplayTitle = true;
                };
                scope.saveDisplayTitle = function () {
                    scope.saveCollection();
                    scope.editingDisplayTitle = false;
                };
                scope.cancelDisplayTitle = function () {
                    scope.column.displayTitle = scope.previousDisplayTitle;
                    scope.editingDisplayTitle = false;
                };
                if (angular.isUndefined(scope.column.sorting)) {
                    scope.column.sorting = {
                        active: false,
                        sortOrder: 'asc',
                        priority: 0
                    };
                }
                scope.toggleVisible = function (column) {
                    if (angular.isUndefined(column.isVisible)) {
                        column.isVisible = false;
                    }
                    column.isVisible = !column.isVisible;
                    scope.saveCollection();
                };
                scope.toggleSearchable = function (column) {
                    if (angular.isUndefined(column.isSearchable)) {
                        column.isSearchable = false;
                    }
                    column.isSearchable = !column.isSearchable;
                    scope.saveCollection();
                };
                scope.toggleExportable = function (column) {
                    $log.debug('toggle exporable');
                    if (angular.isUndefined(column.isExportable)) {
                        column.isExportable = false;
                    }
                    column.isExportable = !column.isExportable;
                    scope.saveCollection();
                };
                var compareByPriority = function (a, b) {
                    if (a.sorting && b.sorting && angular.isDefined(a.sorting) && angular.isDefined(a.sorting.priority)) {
                        if (a.sorting.priority < b.sorting.priority) {
                            return -1;
                        }
                        if (a.sorting.priority > b.sorting.priority) {
                            return 1;
                        }
                    }
                    return 0;
                };
                var updateOrderBy = function () {
                    if (angular.isDefined(scope.columns)) {
                        var columnsCopy = angular.copy(scope.columns);
                        columnsCopy.sort(compareByPriority);
                        scope.orderBy = [];
                        angular.forEach(columnsCopy, function (column) {
                            if (angular.isDefined(column.sorting) && column.sorting.active === true) {
                                var orderBy = {
                                    propertyIdentifier: column.propertyIdentifier,
                                    direction: column.sorting.sortOrder
                                };
                                if (column.aggregate && column.aggregate.aggregateFunction) {
                                    var aggregateFunction = column.aggregate.aggregateFunction.toUpperCase();
                                    if (aggregateFunction == 'AVERAGE') {
                                        aggregateFunction = 'AVG';
                                    }
                                    orderBy.propertyIdentifier = aggregateFunction + '(' + column.propertyIdentifier + ')';
                                }
                                scope.orderBy.push(orderBy);
                            }
                        });
                    }
                };
                scope.toggleSortable = function (column) {
                    $log.debug('toggle sortable');
                    if (angular.isUndefined(column.sorting)) {
                        column.sorting = {
                            active: true,
                            sortOrder: 'asc',
                            priority: 0
                        };
                    }
                    if (column.sorting.active === true) {
                        if (column.sorting.sortOrder === 'asc') {
                            column.sorting.sortOrder = 'desc';
                        }
                        else {
                            removeSorting(column);
                            column.sorting.active = false;
                        }
                    }
                    else {
                        column.sorting.active = true;
                        column.sorting.sortOrder = 'asc';
                        column.sorting.priority = getActivelySorting().length;
                    }
                    updateOrderBy();
                    scope.saveCollection();
                };
                var removeSorting = function (column, saving) {
                    if (column.sorting.active === true) {
                        for (var i in scope.columns) {
                            if (scope.columns[i].sorting.active === true && scope.columns[i].sorting.priority > column.sorting.priority) {
                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority - 1;
                            }
                        }
                        column.sorting.priority = 0;
                    }
                    if (!saving) {
                        updateOrderBy();
                        scope.saveCollection();
                    }
                };
                scope.prioritize = function (column) {
                    if (column.sorting.priority === 1) {
                        var activelySorting = getActivelySorting();
                        for (var i in scope.columns) {
                            if (scope.columns[i].sorting.active === true) {
                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority - 1;
                            }
                        }
                        column.sorting.priority = activelySorting.length;
                    }
                    else {
                        for (var i in scope.columns) {
                            if (scope.columns[i].sorting.active === true && scope.columns[i].sorting.priority === column.sorting.priority - 1) {
                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority + 1;
                            }
                        }
                        column.sorting.priority -= 1;
                    }
                    updateOrderBy();
                    scope.saveCollection();
                };
                var getActivelySorting = function () {
                    var activelySorting = [];
                    for (var i in scope.columns) {
                        if (scope.columns[i].sorting.active === true) {
                            activelySorting.push(scope.columns[i]);
                        }
                    }
                    return activelySorting;
                };
                scope.removeColumn = function (columnIndex) {
                    if (scope.columns[columnIndex].isDeletable) {
                        removeSorting(scope.columns[columnIndex], true);
                        controller.swDisplayOptions.removeColumn(columnIndex);
                        updateOrderBy();
                        scope.saveCollection();
                    }
                };
            }
        };
    }
    SWColumnItem.Factory = function () {
        var directive = function ($log, hibachiPathBuilder, collectionPartialsPath, observerService) { return new SWColumnItem($log, hibachiPathBuilder, collectionPartialsPath, observerService); };
        directive.$inject = [
            '$log',
            'hibachiPathBuilder',
            'collectionPartialsPath',
            'observerService'
        ];
        return directive;
    };
    return SWColumnItem;
}());
exports.SWColumnItem = SWColumnItem;


/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWConditionCriteria = /** @class */ (function () {
    //@ngInject
    function SWConditionCriteria($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder) {
        /* Template info begin*/
        var getTemplate = function (selectedFilterProperty) {
            var template = '';
            var templatePath = '';
            if (angular.isUndefined(selectedFilterProperty.ormtype) && angular.isUndefined(selectedFilterProperty.fieldtype)) {
                templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteria.html";
            }
            else {
                var criteriaormtype = selectedFilterProperty.ormtype;
                var criteriafieldtype = selectedFilterProperty.fieldtype;
                /*TODO: convert all switches to object literals*/
                switch (criteriaormtype) {
                    case 'boolean':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriaboolean.html";
                        break;
                    case 'string':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriastring.html";
                        break;
                    case 'timestamp':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriadate.html";
                        break;
                    case 'big_decimal':
                    case 'integer':
                    case 'float':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criterianumber.html";
                        break;
                }
                switch (criteriafieldtype) {
                    case "many-to-one":
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriamanytoone.html";
                        break;
                    case "many-to-many":
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriamanytomany.html";
                        break;
                    case "one-to-many":
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriaonetomany.html";
                        break;
                }
            }
            var templateLoader = $http.get(templatePath, { cache: $templateCache });
            return templateLoader;
        };
        /* Template info end*/
        /* Options info begin */
        var getStringOptions = function (type) {
            var stringOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                stringOptions = [
                    {
                        display: "Equals",
                        comparisonOperator: "="
                    },
                    {
                        display: "Doesn't Equal",
                        comparisonOperator: "<>"
                    },
                    {
                        display: "Contains",
                        comparisonOperator: "like",
                        pattern: "%w%"
                    },
                    {
                        display: "Doesn't Contain",
                        comparisonOperator: "not like",
                        pattern: "%w%"
                    },
                    {
                        display: "Starts With",
                        comparisonOperator: "like",
                        pattern: "w%"
                    },
                    {
                        display: "Doesn't Start With",
                        comparisonOperator: "not like",
                        pattern: "w%"
                    },
                    {
                        display: "Ends With",
                        comparisonOperator: "like",
                        pattern: "%w"
                    },
                    {
                        display: "Doesn't End With",
                        comparisonOperator: "not like",
                        pattern: "%w"
                    },
                    {
                        display: "In List",
                        comparisonOperator: "in"
                    },
                    {
                        display: "Not In List",
                        comparisonOperator: "not in"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
                if (type === 'condition') {
                    stringOptions = [
                        {
                            display: "Equals",
                            comparisonOperator: "="
                        },
                        {
                            display: "In List",
                            comparisonOperator: "in"
                        },
                        {
                            display: "Defined",
                            comparisonOperator: "is not",
                            value: "null"
                        },
                        {
                            display: "Not Defined",
                            comparisonOperator: "is",
                            value: "null"
                        }
                    ];
                }
            }
            return stringOptions;
        };
        var getBooleanOptions = function (type) {
            var booleanOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type === 'filter' || type === 'condition') {
                booleanOptions = [
                    {
                        display: "True",
                        comparisonOperator: "=",
                        value: "True"
                    },
                    {
                        display: "False",
                        comparisonOperator: "=",
                        value: "False"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            return booleanOptions;
        };
        var getDateOptions = function (type) {
            var dateOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type === 'filter') {
                dateOptions = [
                    {
                        display: "Date",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'exactDate',
                        }
                    },
                    {
                        display: "In Range",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'range'
                        }
                    },
                    {
                        display: "Not In Range",
                        comparisonOperator: "not between",
                        dateInfo: {
                            type: 'range'
                        }
                    },
                    {
                        display: "Today",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'd',
                            measureCount: 0,
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "Yesterday",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'd',
                            measureCount: -1,
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Week",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'w',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Month",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'm',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Quarter",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'q',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Year",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'y',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "Last N Hour(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'h',
                            measureTypeDisplay: 'Hours'
                        }
                    },
                    {
                        display: "Last N Day(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'd',
                            measureTypeDisplay: 'Days'
                        }
                    },
                    {
                        display: "Last N Week(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'w',
                            measureTypeDisplay: 'Weeks'
                        }
                    },
                    {
                        display: "Last N Month(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'm',
                            measureTypeDisplay: 'Months'
                        }
                    },
                    {
                        display: "Last N Quarter(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'q',
                            measureTypeDisplay: 'Quarters'
                        }
                    },
                    {
                        display: "Last N Year(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'y',
                            measureTypeDisplay: 'Years'
                        }
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            if (type === 'condition') {
                dateOptions = [
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            return dateOptions;
        };
        var getNumberOptions = function (type) {
            var numberOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                numberOptions = [
                    {
                        display: "Equals",
                        comparisonOperator: "="
                    },
                    {
                        display: "Doesn't Equal",
                        comparisonOperator: "<>"
                    },
                    {
                        display: "In Range",
                        comparisonOperator: "between",
                        type: "range"
                    },
                    {
                        display: "Not In Range",
                        comparisonOperator: "not between",
                        type: "range"
                    },
                    {
                        display: "Greater Than",
                        comparisonOperator: ">"
                    },
                    {
                        display: "Greater Than Or Equal",
                        comparisonOperator: ">="
                    },
                    {
                        display: "Less Than",
                        comparisonOperator: "<"
                    },
                    {
                        display: "Less Than Or Equal",
                        comparisonOperator: "<="
                    },
                    {
                        display: "In List",
                        comparisonOperator: "in"
                    },
                    {
                        display: "Not In List",
                        comparisonOperator: "not in"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            if (type === 'condition') {
                numberOptions = [
                    {
                        display: "Equals",
                        comparisonOperator: "="
                    },
                    {
                        display: "Doesn't Equal",
                        comparisonOperator: "<>"
                    },
                    {
                        display: "Greater Than",
                        comparisonOperator: ">"
                    },
                    {
                        display: "Greater Than Or Equal",
                        comparisonOperator: ">="
                    },
                    {
                        display: "Less Than",
                        comparisonOperator: "<"
                    },
                    {
                        display: "Less Than Or Equal",
                        comparisonOperator: "<="
                    },
                    {
                        display: "In List",
                        comparisonOperator: "in"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            return numberOptions;
        };
        var getOneToManyOptions = function (type) {
            var oneToManyOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                oneToManyOptions = [
                    {
                        display: "All Exist In Collection",
                        comparisonOperator: "All"
                    },
                    {
                        display: "None Exist In Collection",
                        comparisonOperator: "None"
                    },
                    {
                        display: "Some Exist In Collection",
                        comparisonOperator: "One"
                    }
                ];
            }
            if (type === 'condition') {
                oneToManyOptions = [];
            }
            return oneToManyOptions;
        };
        var getManyToManyOptions = function (type) {
            var manyToManyOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                manyToManyOptions = [
                    {
                        display: "All Exist In Collection",
                        comparisonOperator: "All"
                    },
                    {
                        display: "None Exist In Collection",
                        comparisonOperator: "None"
                    },
                    {
                        display: "Some Exist In Collection",
                        comparisonOperator: "One"
                    },
                    {
                        display: "Empty",
                        comparisonOperator: "is",
                        value: "null"
                    },
                    {
                        display: "Not Empty",
                        comparisonOperator: "is not",
                        value: "null"
                    }
                ];
            }
            if (type === 'condition') {
                manyToManyOptions = [
                    {
                        display: "Empty",
                        comparisonOperator: "is",
                        value: "null"
                    },
                    {
                        display: "Not Empty",
                        comparisonOperator: "is not",
                        value: "null"
                    }
                ];
            }
            return manyToManyOptions;
        };
        var getManyToOneOptions = function (type) {
            var manyToOneOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                manyToOneOptions = {
                    drillEntity: {},
                    hasEntity: {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    notHasEntity: {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                };
            }
            return manyToOneOptions;
        };
        /* Options info end */
        var linker = function (scope, element, attrs) {
            /*show the user the value without % symbols as these are reserved*/
            scope.$watch('selectedFilterProperty.criteriaValue', function (criteriaValue) {
                if (angular.isDefined(criteriaValue)) {
                    scope.selectedFilterProperty.criteriaValue = $filter('likeFilter')(criteriaValue);
                }
            });
            scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                if (angular.isDefined(selectedFilterProperty)) {
                    $log.debug('watchSelectedFilterProperty');
                    $log.debug(scope.selectedFilterProperty);
                    /*prepopulate if we have a comparison operator and value*/
                    if (selectedFilterProperty === null) {
                        return;
                    }
                    if (angular.isDefined(selectedFilterProperty.ormtype)) {
                        switch (scope.selectedFilterProperty.ormtype) {
                            case "boolean":
                                scope.conditionOptions = getBooleanOptions();
                                break;
                            case "string":
                                scope.conditionOptions = getStringOptions();
                                scope.selectedConditionChanged = function (selectedFilterProperty) {
                                    //scope.selectedFilterProperty.criteriaValue = '';
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                        selectedFilterProperty.showCriteriaValue = false;
                                    }
                                    else {
                                        selectedFilterProperty.showCriteriaValue = true;
                                    }
                                };
                                break;
                            case "timestamp":
                                scope.conditionOptions = getDateOptions();
                                scope.today = function () {
                                    if (angular.isDefined(scope.selectedFilterProperty)) {
                                        scope.selectedFilterProperty.criteriaRangeStart = new Date().getTime();
                                        scope.selectedFilterProperty.criteriaRangeEnd = new Date().getTime();
                                    }
                                };
                                scope.clear = function () {
                                    scope.selectedFilterProperty.criteriaRangeStart = null;
                                    scope.selectedFilterProperty.criteriaRangeEnd = null;
                                };
                                scope.openCalendarStart = function ($event) {
                                    $event.preventDefault();
                                    $event.stopPropagation();
                                    scope.openedCalendarStart = true;
                                };
                                scope.openCalendarEnd = function ($event) {
                                    $event.preventDefault();
                                    $event.stopPropagation();
                                    scope.openedCalendarEnd = true;
                                };
                                scope.formats = [
                                    'dd-MMMM-yyyy',
                                    'yyyy/MM/dd',
                                    'dd.MM.yyyy',
                                    'shortDate'
                                ];
                                scope.format = scope.formats[1];
                                scope.selectedConditionChanged = function (selectedFilterProperty) {
                                    $log.debug('selectedConditionChanged Begin');
                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                                    //check whether condition is checking for null values in date
                                    if (angular.isDefined(selectedCondition.dateInfo)) {
                                        //is condition a calculation
                                        if (selectedCondition.dateInfo.type === 'calculation') {
                                            selectedCondition.showCriteriaStart = true;
                                            selectedCondition.showCriteriaEnd = true;
                                            selectedCondition.disableCriteriaStart = true;
                                            selectedCondition.disableCriteriaEnd = true;
                                            //if item is a calculation of an N number of measure display the measure and number input
                                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {
                                                $log.debug('Not toDate');
                                                selectedCondition.showNumberOf = true;
                                                selectedCondition.conditionDisplay = 'Number of ' + selectedCondition.dateInfo.measureTypeDisplay + ' :';
                                            }
                                            else {
                                                $log.debug('toDate');
                                                var today = Date.parse('today');
                                                var todayEOD = today.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = todayEOD;
                                                //get this Measure to date
                                                switch (selectedCondition.dateInfo.measureType) {
                                                    case 'd':
                                                        var dateBOD = Date.parse('today').add(selectedCondition.dateInfo.measureCount).days();
                                                        dateBOD.setHours(0, 0, 0, 0);
                                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();
                                                        break;
                                                    case 'w':
                                                        var firstDayOfWeek = Date.today().last().monday();
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();
                                                        break;
                                                    case 'm':
                                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();
                                                        break;
                                                    case 'q':
                                                        var month = Date.parse('today').toString('MM');
                                                        var year = Date.parse('today').toString('yyyy');
                                                        var quarterMonth = (Math.floor(month / 3) * 3);
                                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();
                                                        break;
                                                    case 'y':
                                                        var year = Date.parse('today').toString('yyyy');
                                                        var firstDayOfYear = new Date(year, 0, 1);
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();
                                                        break;
                                                }
                                            }
                                        }
                                        if (selectedCondition.dateInfo.type === 'range') {
                                            selectedCondition.showCriteriaStart = true;
                                            selectedCondition.showCriteriaEnd = true;
                                            selectedCondition.disableCriteriaStart = false;
                                            selectedCondition.disableCriteriaEnd = false;
                                            selectedCondition.showNumberOf = false;
                                        }
                                        if (selectedCondition.dateInfo.type === 'exactDate') {
                                            selectedCondition.showCriteriaEnd = false;
                                            selectedCondition.disableCriteriaStart = false;
                                            selectedCondition.disableCriteriaEnd = true;
                                            if (!selectedCondition.dateInfo.measureType) {
                                                selectedCondition.conditionDisplay = '';
                                                selectedCondition.showCriteriaStart = true;
                                                selectedCondition.showNumberOf = false;
                                                selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                                                selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                                            }
                                            else {
                                                selectedCondition.conditionDisplay = 'How many ' + selectedCondition.dateInfo.measureTypeDisplay + ' ago?';
                                                selectedCondition.showCriteriaStart = false;
                                                selectedCondition.showNumberOf = true;
                                            }
                                        }
                                    }
                                    else {
                                        selectedCondition.showCriteriaStart = false;
                                        selectedCondition.showCriteriaEnd = false;
                                        selectedCondition.showNumberOf = false;
                                        selectedCondition.conditionDisplay = '';
                                    }
                                    $log.debug('selectedConditionChanged End');
                                    $log.debug('selectedConditionChanged Result');
                                    $log.debug(selectedCondition);
                                    $log.debug(selectedFilterProperty);
                                };
                                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                                    if (selectedCondition.dateInfo.type === 'calculation') {
                                        var measureCount = selectedFilterProperty.criteriaNumberOf;
                                        switch (selectedCondition.dateInfo.measureType) {
                                            case 'h':
                                                var today = Date.parse('today');
                                                selectedFilterProperty.criteriaRangeEnd = today.getTime();
                                                var todayXHoursAgo = Date.parse('today').add(-(measureCount)).hours();
                                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();
                                                break;
                                            case 'd':
                                                var lastFullDay = Date.parse('today').add(-1).days();
                                                lastFullDay.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();
                                                var lastXDaysAgo = Date.parse('today').add(-(measureCount)).days();
                                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();
                                                break;
                                            case 'w':
                                                var lastFullWeekEnd = Date.today().last().sunday();
                                                lastFullWeekEnd.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();
                                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();
                                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();
                                                break;
                                            case 'm':
                                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();
                                                lastFullMonthEnd.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();
                                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();
                                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();
                                                break;
                                            case 'q':
                                                var currentQuarter = Math.floor((Date.parse('today').getMonth() / 3));
                                                var firstDayOfCurrentQuarter = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();
                                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();
                                                var lastXQuartersAgo = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                                lastXQuartersAgo.add(-(measureCount * 3)).months();
                                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();
                                                break;
                                            case 'y':
                                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();
                                                lastFullYearEnd.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();
                                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();
                                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();
                                                break;
                                        }
                                    }
                                    if (selectedCondition.dateInfo.type === 'exactDate') {
                                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);
                                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                                    }
                                    if (selectedCondition.dateInfo.type === 'range') {
                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
                                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                                        }
                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd)) {
                                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);
                                        }
                                    }
                                    $log.debug('criteriaRangeChanged');
                                    $log.debug(selectedCondition);
                                    $log.debug(selectedFilterProperty);
                                };
                                break;
                            case "big_decimal":
                            case "integer":
                            case "float":
                                scope.conditionOptions = getNumberOptions();
                                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                                };
                                scope.selectedConditionChanged = function (selectedFilterProperty) {
                                    selectedFilterProperty.showCriteriaValue = true;
                                    //check whether the type is a range
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.type)) {
                                        selectedFilterProperty.showCriteriaValue = false;
                                        selectedFilterProperty.selectedCriteriaType.showCriteriaStart = true;
                                        selectedFilterProperty.selectedCriteriaType.showCriteriaEnd = true;
                                    }
                                    //is null or is not null
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                        selectedFilterProperty.showCriteriaValue = false;
                                    }
                                };
                                break;
                        }
                    }
                    if (angular.isDefined(scope.selectedFilterProperty.fieldtype)) {
                        switch (scope.selectedFilterProperty.fieldtype) {
                            case "many-to-one":
                                scope.conditionOptions = getManyToOneOptions(scope.comparisonType);
                                $log.debug('many-to-one');
                                $log.debug(scope.selectedFilterProperty);
                                $log.debug(scope.filterPropertiesList);
                                if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
                                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.selectedFilterProperty.cfc);
                                    filterPropertiesPromise.then(function (value) {
                                        scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
                                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
                                    }, function (reason) {
                                    });
                                }
                                break;
                            case "many-to-many":
                            case "one-to-many":
                                scope.manyToManyOptions = getManyToManyOptions();
                                scope.oneToManyOptions = getOneToManyOptions();
                                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(selectedFilterProperty.cfc);
                                existingCollectionsPromise.then(function (value) {
                                    scope.collectionOptions = value.data;
                                    if (angular.isDefined(scope.workflowCondition.collectionID)) {
                                        for (var i in scope.collectionOptions) {
                                            if (scope.collectionOptions[i].collectionID === scope.workflowCondition.collectionID) {
                                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
                                            }
                                        }
                                        for (var i in scope.oneToManyOptions) {
                                            if (scope.oneToManyOptions[i].comparisonOperator === scope.workflowCondition.criteria) {
                                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];
                                            }
                                        }
                                    }
                                });
                                break;
                        }
                    }
                    $log.debug('workflowCondition');
                    $log.debug(scope.workflowCondition);
                    angular.forEach(scope.conditionOptions, function (conditionOption) {
                        if (conditionOption.display == scope.workflowCondition.conditionDisplay) {
                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                            scope.selectedFilterProperty.criteriaValue = scope.workflowCondition.value;
                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo)
                                && angular.isDefined(scope.workflowCondition.value)
                                && scope.workflowCondition.value.length) {
                                var dateRangeArray = scope.workflowCondition.value.split("-");
                                scope.selectedFilterProperty.criteriaRangeStart = new Date(parseInt(dateRangeArray[0]));
                                scope.selectedFilterProperty.criteriaRangeEnd = new Date(parseInt(dateRangeArray[1]));
                            }
                            if (angular.isDefined(scope.workflowCondition.criteriaNumberOf)) {
                                scope.selectedFilterProperty.criteriaNumberOf = scope.workflowCondition.criteriaNumberOf;
                            }
                            if (angular.isDefined(scope.selectedConditionChanged)) {
                                scope.selectedConditionChanged(scope.selectedFilterProperty);
                            }
                        }
                    });
                    $log.debug('templateLoader');
                    $log.debug(selectedFilterProperty);
                    var templateLoader = getTemplate(selectedFilterProperty);
                    var promise = templateLoader.success(function (html) {
                        element.html(html);
                        $compile(element.contents())(scope);
                    });
                }
            });
            scope.selectedCriteriaChanged = function (selectedCriteria) {
                $log.debug(selectedCriteria);
                //update breadcrumbs as array of filterpropertylist keys
                $log.debug(scope.selectedFilterProperty);
                var breadCrumb = {
                    entityAlias: scope.selectedFilterProperty.name,
                    cfc: scope.selectedFilterProperty.cfc,
                    propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier
                };
                scope.workflowCondition.breadCrumbs.push(breadCrumb);
                //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                //update criteria to display the condition of the new critera we have selected
            };
        };
        return {
            restrict: 'A',
            scope: {
                workflowCondition: "=",
                selectedFilterProperty: "=",
                filterPropertiesList: "=",
                selectedFilterPropertyChanged: "&"
            },
            link: linker
        };
    }
    SWConditionCriteria.Factory = function () {
        var directive = function ($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWConditionCriteria($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder); };
        directive.$inject = [
            '$http',
            '$compile',
            '$templateCache',
            '$log',
            '$hibachi',
            '$filter',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWConditionCriteria;
}());
exports.SWConditionCriteria = SWConditionCriteria;


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCriteria = /** @class */ (function () {
    function SWCriteria(collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                filterItem: "=",
                selectedFilterProperty: "=",
                filterPropertiesList: "=",
                selectedFilterPropertyChanged: "&",
                comparisonType: "=",
                collectionConfig: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteria.html',
            link: function (scope, element, attrs) {
            }
        };
    }
    SWCriteria.Factory = function () {
        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteria(collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteria;
}());
exports.SWCriteria = SWCriteria;


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaBoolean = /** @class */ (function () {
    function SWCriteriaBoolean(collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriaboolean.html',
            link: function (scope, element, attrs) {
                var getBooleanOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var booleanOptions = [];
                    if (type === 'filter') {
                        booleanOptions = [
                            {
                                display: "True",
                                comparisonOperator: "=",
                                value: "True"
                            },
                            {
                                display: "False",
                                comparisonOperator: "=",
                                value: "False"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        booleanOptions = [
                            {
                                display: "True",
                                comparisonOperator: "eq",
                                value: "True"
                            },
                            {
                                display: "False",
                                comparisonOperator: "eq",
                                value: "False"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return booleanOptions;
                };
                scope.conditionOptions = getBooleanOptions(scope.comparisonType);
                angular.forEach(scope.conditionOptions, function (conditionOption) {
                    if (conditionOption.display == scope.filterItem.conditionDisplay) {
                        scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                        scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                        if (angular.isDefined(scope.selectedConditionChanged)) {
                            scope.selectedConditionChanged(scope.selectedFilterProperty);
                        }
                    }
                });
            }
        };
    }
    SWCriteriaBoolean.Factory = function () {
        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaBoolean(collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaBoolean;
}());
exports.SWCriteriaBoolean = SWCriteriaBoolean;


/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaDate = /** @class */ (function () {
    function SWCriteriaDate($log, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriadate.html',
            link: function (scope, element, attrs) {
                var getDateOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var dateOptions = [];
                    if (type === 'filter') {
                        dateOptions = [
                            {
                                display: "Date",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                }
                            },
                            {
                                display: "In Range",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'range'
                                }
                            },
                            {
                                display: "Not In Range",
                                comparisonOperator: "not between",
                                dateInfo: {
                                    type: 'range'
                                }
                            },
                            {
                                display: "Today",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'd',
                                    measureCount: 0,
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "Yesterday",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'd',
                                    measureCount: -1,
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Week",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'w',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Month",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'm',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Quarter",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'q',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Year",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'y',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "Last N Hour(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'h',
                                    measureTypeDisplay: 'Hours'
                                }
                            },
                            {
                                display: "Last N Day(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'd',
                                    measureTypeDisplay: 'Days'
                                }
                            },
                            {
                                display: "Last N Week(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'w',
                                    measureTypeDisplay: 'Weeks'
                                }
                            },
                            {
                                display: "Last N Month(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'm',
                                    measureTypeDisplay: 'Months'
                                }
                            },
                            {
                                display: "Last N Quarter(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'q',
                                    measureTypeDisplay: 'Quarters'
                                }
                            },
                            {
                                display: "Last N Year(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'y',
                                    measureTypeDisplay: 'Years'
                                }
                            },
                            {
                                display: "Exact N Day(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'd',
                                    measureTypeDisplay: 'Days'
                                }
                            },
                            {
                                display: "Exact N Month(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'm',
                                    measureTypeDisplay: 'Months'
                                }
                            },
                            {
                                display: "Exact N Year(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'y',
                                    measureTypeDisplay: 'Years'
                                }
                            },
                            {
                                display: "Exact N Day(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'd',
                                    measureTypeDisplay: 'Days'
                                }
                            },
                            {
                                display: "Exact N Month(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'm',
                                    measureTypeDisplay: 'Months'
                                }
                            },
                            {
                                display: "Exact N Year(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'y',
                                    measureTypeDisplay: 'Years'
                                }
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        dateOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "eq"
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "neq"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return dateOptions;
                };
                scope.conditionOptions = getDateOptions(scope.comparisonType);
                scope.today = function () {
                    if (angular.isDefined(scope.selectedFilterProperty)) {
                        scope.selectedFilterProperty.criteriaRangeStart = new Date().getTime();
                        scope.selectedFilterProperty.criteriaRangeEnd = new Date().getTime();
                    }
                };
                scope.clear = function () {
                    scope.selectedFilterProperty.criteriaRangeStart = null;
                    scope.selectedFilterProperty.criteriaRangeEnd = null;
                };
                scope.openCalendarStart = function ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    scope.openedCalendarStart = true;
                };
                scope.openCalendarEnd = function ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    scope.openedCalendarEnd = true;
                };
                scope.formats = [
                    'dd-MMMM-yyyy',
                    'yyyy/MM/dd',
                    'dd.MM.yyyy',
                    'shortDate'
                ];
                scope.format = scope.formats[1];
                scope.selectedConditionChanged = function (selectedFilterProperty) {
                    $log.debug('selectedConditionChanged Begin');
                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                    //check whether condition is checking for null values in date
                    if (angular.isDefined(selectedCondition.dateInfo)) {
                        //is condition a calculation
                        if (selectedCondition.dateInfo.type === 'calculation') {
                            selectedCondition.showCriteriaStart = true;
                            selectedCondition.showCriteriaEnd = true;
                            selectedCondition.disableCriteriaStart = true;
                            selectedCondition.disableCriteriaEnd = true;
                            //if item is a calculation of an N number of measure display the measure and number input
                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {
                                $log.debug('Not toDate');
                                selectedCondition.showNumberOf = true;
                                selectedCondition.conditionDisplay = 'Number of ' + selectedCondition.dateInfo.measureTypeDisplay + ' :';
                            }
                            else {
                                $log.debug('toDate');
                                var today = Date.parse('today');
                                var todayEOD = today.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = todayEOD;
                                //get this Measure to date
                                switch (selectedCondition.dateInfo.measureType) {
                                    case 'd':
                                        var dateBOD = Date.parse('today').add(selectedCondition.dateInfo.measureCount).days();
                                        dateBOD.setHours(0, 0, 0, 0);
                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();
                                        break;
                                    case 'w':
                                        var firstDayOfWeek = Date.today().last().monday();
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();
                                        break;
                                    case 'm':
                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();
                                        break;
                                    case 'q':
                                        var month = Date.parse('today').toString('MM');
                                        var year = Date.parse('today').toString('yyyy');
                                        var quarterMonth = (Math.floor(month / 3) * 3);
                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();
                                        break;
                                    case 'y':
                                        var year = Date.parse('today').toString('yyyy');
                                        var firstDayOfYear = new Date(year, 0, 1);
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();
                                        break;
                                }
                            }
                        }
                        if (selectedCondition.dateInfo.type === 'range') {
                            selectedCondition.showCriteriaStart = true;
                            selectedCondition.showCriteriaEnd = true;
                            selectedCondition.disableCriteriaStart = false;
                            selectedCondition.disableCriteriaEnd = false;
                            selectedCondition.showNumberOf = false;
                        }
                        if (selectedCondition.dateInfo.type === 'exactDate') {
                            selectedCondition.showCriteriaStart = true;
                            selectedCondition.showCriteriaEnd = false;
                            selectedCondition.disableCriteriaStart = false;
                            selectedCondition.disableCriteriaEnd = true;
                            if (!selectedCondition.dateInfo.measureType) {
                                selectedCondition.conditionDisplay = '';
                                selectedCondition.showCriteriaStart = true;
                                selectedCondition.showNumberOf = false;
                                selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                                selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                            }
                            else {
                                selectedCondition.conditionDisplay = 'How many ' + selectedCondition.dateInfo.measureTypeDisplay + ' ago?';
                                selectedCondition.showCriteriaStart = false;
                                selectedCondition.showNumberOf = true;
                            }
                        }
                    }
                    else {
                        selectedCondition.showCriteriaStart = false;
                        selectedCondition.showCriteriaEnd = false;
                        selectedCondition.showNumberOf = false;
                        selectedCondition.conditionDisplay = '';
                    }
                    $log.debug('selectedConditionChanged End');
                    $log.debug('selectedConditionChanged Result');
                    $log.debug(selectedCondition);
                    $log.debug(selectedFilterProperty);
                };
                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                    $log.debug('criteriaRangeChanged');
                    $log.debug(selectedFilterProperty);
                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                    if (selectedCondition.dateInfo.type === 'calculation') {
                        var measureCount = selectedFilterProperty.criteriaNumberOf;
                        switch (selectedCondition.dateInfo.measureType) {
                            case 'h':
                                var today = Date.parse('today');
                                selectedFilterProperty.criteriaRangeEnd = today.getTime();
                                var todayXHoursAgo = Date.parse('today').add(-(measureCount)).hours();
                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();
                                break;
                            case 'd':
                                var lastFullDay = Date.parse('today').add(-1).days();
                                lastFullDay.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();
                                var lastXDaysAgo = Date.parse('today').add(-(measureCount)).days();
                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();
                                break;
                            case 'w':
                                var lastFullWeekEnd = Date.today().last().sunday();
                                lastFullWeekEnd.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();
                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();
                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();
                                break;
                            case 'm':
                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();
                                lastFullMonthEnd.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();
                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();
                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();
                                break;
                            case 'q':
                                var currentQuarter = Math.floor((Date.parse('today').getMonth() / 3));
                                var firstDayOfCurrentQuarter = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();
                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();
                                var lastXQuartersAgo = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                lastXQuartersAgo.add(-(measureCount * 3)).months();
                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();
                                break;
                            case 'y':
                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();
                                lastFullYearEnd.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();
                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();
                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();
                                break;
                        }
                    }
                    if (selectedCondition.dateInfo.type === 'exactDate' && angular.isDefined(selectedFilterProperty.criteriaRangeStart) && angular.isDefined(selectedFilterProperty.criteriaRangeStart.setHours)) {
                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);
                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                    }
                    if (selectedCondition.dateInfo.type === 'range') {
                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart) && angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                        }
                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd) && angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);
                        }
                    }
                    $log.debug('criteriaRangeChanged');
                    $log.debug(selectedCondition);
                    $log.debug(selectedFilterProperty);
                };
                if (angular.isUndefined(scope.filterItem.$$isNew) || scope.filterItem.$$isNew === false) {
                    angular.forEach(scope.conditionOptions, function (conditionOption) {
                        if (conditionOption.display == scope.filterItem.conditionDisplay) {
                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                            scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo)
                                && angular.isDefined(scope.filterItem.value)
                                && scope.filterItem.value.length) {
                                var dateRangeArray = scope.filterItem.value.split("-");
                                var rangeStart = new Date(parseInt(dateRangeArray[0])).toUTCString();
                                rangeStart = rangeStart.split(' ').slice(0, 5).join(' ');
                                var rangeEnd = new Date(parseInt(dateRangeArray[1])).toUTCString();
                                rangeEnd = rangeEnd.split(' ').slice(0, 5).join(' ');
                                scope.selectedFilterProperty.criteriaRangeStart = rangeStart;
                                scope.selectedFilterProperty.criteriaRangeEnd = rangeEnd;
                            }
                            if (angular.isDefined(scope.selectedConditionChanged)) {
                                scope.selectedConditionChanged(scope.selectedFilterProperty);
                            }
                        }
                    });
                }
                else {
                    scope.selectedFilterProperty.criteriaValue = '';
                    scope.selectedFilterProperty.criteriaRangeStart = '';
                    scope.selectedFilterProperty.criteriaRangeEnd = '';
                }
            }
        };
    }
    SWCriteriaDate.Factory = function () {
        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaDate($log, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaDate;
}());
exports.SWCriteriaDate = SWCriteriaDate;


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaManyToMany = /** @class */ (function () {
    function SWCriteriaManyToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriamanytomany.html',
            link: function (scope, element, attrs) {
                scope.data = {};
                scope.collectionOptionsOpen = false;
                scope.toggleCollectionOptions = function (flag) {
                    scope.collectionOptionsOpen = (!angular.isUndefined(flag)) ? flag : !scope.collectionOptionsOpen;
                };
                scope.selectCollection = function (collection) {
                    scope.toggleCollectionOptions();
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[2];
                };
                scope.cleanSelection = function () {
                    scope.toggleCollectionOptions(false);
                    scope.data.collectionName = "";
                    scope.selectedFilterProperty.selectedCollection = null;
                };
                var getManyToManyOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    $log.debug('type', type);
                    var manyToManyOptions = [];
                    if (type == 'filter') {
                        manyToManyOptions = [
                            {
                                display: "All Exist In Collection",
                                comparisonOperator: "All"
                            },
                            {
                                display: "None Exist In Collection",
                                comparisonOperator: "None"
                            },
                            {
                                display: "Some Exist In Collection",
                                comparisonOperator: "One"
                            },
                            {
                                display: "Empty",
                                comparisonOperator: "is",
                                value: "null"
                            },
                            {
                                display: "Not Empty",
                                comparisonOperator: "is not",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        manyToManyOptions = [];
                    }
                    return manyToManyOptions;
                };
                scope.manyToManyOptions = getManyToManyOptions(scope.comparisonType);
                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(scope.selectedFilterProperty.cfc);
                existingCollectionsPromise.then(function (value) {
                    scope.collectionOptions = value.data;
                    if (angular.isDefined(scope.filterItem.collectionID)) {
                        for (var i in scope.collectionOptions) {
                            if (scope.collectionOptions[i].collectionID === scope.filterItem.collectionID) {
                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
                            }
                        }
                        for (var i in scope.manyToManyOptions) {
                            if (scope.manyToManyOptions[i].comparisonOperator === scope.filterItem.criteria) {
                                scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[i];
                            }
                        }
                    }
                });
                function populateUI(collection) {
                    scope.collectionOptions.push(collection);
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[2];
                }
                observerService.attach(populateUI, 'addCollection', 'addCollection');
                scope.selectedCriteriaChanged = function (selectedCriteria) {
                    $log.debug(selectedCriteria);
                    //update breadcrumbs as array of filterpropertylist keys
                    $log.debug(scope.selectedFilterProperty);
                    var breadCrumb = {
                        entityAlias: scope.selectedFilterProperty.name,
                        cfc: scope.selectedFilterProperty.cfc,
                        propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                        rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
                    };
                    scope.filterItem.breadCrumbs.push(breadCrumb);
                    //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                    scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                    //update criteria to display the condition of the new critera we have selected
                };
                scope.addNewCollection = function () {
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: scope.selectedFilterProperty.cfc,
                        collectionName: scope.data.collectionName,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                    scope.cleanSelection();
                };
                scope.viewSelectedCollection = function () {
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: 'collection',
                        entityId: scope.selectedFilterProperty.selectedCollection.collectionID,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                };
            }
        };
    }
    SWCriteriaManyToMany.Factory = function () {
        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, dialogService, observerService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaManyToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionPartialsPath',
            'dialogService',
            'observerService',
            'hibachiPathBuilder',
            'rbkeyService',
        ];
        return directive;
    };
    return SWCriteriaManyToMany;
}());
exports.SWCriteriaManyToMany = SWCriteriaManyToMany;


/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaManyToOne = /** @class */ (function () {
    function SWCriteriaManyToOne($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriamanytoone.html',
            link: function (scope, element, attrs) {
                var getManyToOneOptions = function () {
                    var manyToOneOptions = {
                        drillEntity: {},
                        hasEntity: {
                            display: "Defined",
                            comparisonOperator: "is not",
                            value: "null"
                        },
                        notHasEntity: {
                            display: "Not Defined",
                            comparisonOperator: "is",
                            value: "null"
                        }
                    };
                    return manyToOneOptions;
                };
                scope.manyToOneOptions = getManyToOneOptions();
                scope.conditionOptions = getManyToOneOptions();
                $log.debug('many-to-one');
                $log.debug(scope.selectedFilterProperty);
                $log.debug(scope.filterPropertiesList);
                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                    if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
                        var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
                        filterPropertiesPromise.then(function (value) {
                            scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
                        }, function (reason) {
                        });
                    }
                    scope.selectedCriteriaChanged = function (selectedCriteria) {
                        $log.debug(selectedCriteria);
                        $log.debug('changed');
                        //update breadcrumbs as array of filterpropertylist keys
                        $log.debug(scope.selectedFilterProperty);
                        var breadCrumb = {
                            entityAlias: scope.selectedFilterProperty.name,
                            cfc: scope.selectedFilterProperty.cfc,
                            propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                            rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
                        };
                        $log.debug('breadcrumb');
                        $log.debug(breadCrumb);
                        $log.debug(scope.filterItem.breadCrumbs);
                        scope.filterItem.breadCrumbs.push(breadCrumb);
                        //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                        scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                        //update criteria to display the condition of the new critera we have selected
                        $log.debug(scope.selectedFilterProperty);
                    };
                });
            }
        };
    }
    SWCriteriaManyToOne.Factory = function () {
        var directive = function ($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaManyToOne($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder',
            'rbkeyService'
        ];
        return directive;
    };
    return SWCriteriaManyToOne;
}());
exports.SWCriteriaManyToOne = SWCriteriaManyToOne;
// 'use strict';
// angular.module('slatwalladmin')
// .directive('swCriteriaManyToOne', [
// 	'$log',
// 	'$hibachi',
// 	'$filter',
// 	'collectionPartialsPath',
// 	'collectionService',
// 	'metadataService',
// 	function(
// 		$log,
// 		$hibachi,
// 		$filter,
// 		collectionPartialsPath,
// 		collectionService,
// 		metadataService
// 	){
// 		return {
// 			restrict: 'E',
// 			templateUrl:collectionPartialsPath+'criteriamanytoone.html',
// 			link: function(scope, element, attrs){
// 				var getManyToOneOptions = function(){
// 			    	var manyToOneOptions = {
// 			            drillEntity:{},
// 						hasEntity:{
// 							display:"Defined",
// 							comparisonOperator:"is not",
// 							value:"null"
// 						},
// 						notHasEntity:{
// 							display:"Not Defined",
// 							comparisonOperator:"is",
// 							value:"null"
// 						}
// 			    	};
// 			    	return manyToOneOptions;
// 			    };
// 			    scope.manyToOneOptions = getManyToOneOptions();
// 			    scope.conditionOptions = getManyToOneOptions();
// 				$log.debug('many-to-one');
// 				$log.debug(scope.selectedFilterProperty);
// 				$log.debug(scope.filterPropertiesList);
// 				scope.$watch('selectedFilterProperty',function(selectedFilterProperty){
// 					if(angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])){
// 						var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
// 						filterPropertiesPromise.then(function(value){
// 							scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
// 							metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier],scope.selectedFilterProperty.propertyIdentifier);
// 						}, function(reason){
// 						});
// 					}
// 					scope.selectedCriteriaChanged = function(selectedCriteria){
// 						$log.debug(selectedCriteria);
// 						$log.debug('changed');
// 						//update breadcrumbs as array of filterpropertylist keys
// 						$log.debug(scope.selectedFilterProperty);
// 						var breadCrumb = {
// 								entityAlias:scope.selectedFilterProperty.name,
// 								cfc:scope.selectedFilterProperty.cfc,
// 								propertyIdentifier:scope.selectedFilterProperty.propertyIdentifier,
// 								rbKey:rbkeyService.getRBKey('entity.'+scope.selectedFilterProperty.cfc.replace('_',''))
// 						};
// 						$log.debug('breadcrumb');
// 						$log.debug(breadCrumb);
// 						$log.debug(scope.filterItem.breadCrumbs);
// 						scope.filterItem.breadCrumbs.push(breadCrumb);
// 						//populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
// 						scope.selectedFilterPropertyChanged({selectedFilterProperty:scope.selectedFilterProperty.selectedCriteriaType});
// 						//update criteria to display the condition of the new critera we have selected
// 						$log.debug(scope.selectedFilterProperty);
// 					};
// 				});
// 			}
// 		};
// 	}
// ]);


/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaNumber = /** @class */ (function () {
    function SWCriteriaNumber($log, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criterianumber.html',
            link: function (scope, element, attrs) {
                var getNumberOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var numberOptions = [];
                    if (type === 'filter') {
                        numberOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "="
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "<>"
                            },
                            {
                                display: "In Range",
                                comparisonOperator: "between",
                                type: "range"
                            },
                            {
                                display: "Not In Range",
                                comparisonOperator: "not between",
                                type: "range"
                            },
                            {
                                display: "Greater Than",
                                comparisonOperator: ">"
                            },
                            {
                                display: "Greater Than Or Equal",
                                comparisonOperator: ">="
                            },
                            {
                                display: "Less Than",
                                comparisonOperator: "<"
                            },
                            {
                                display: "Less Than Or Equal",
                                comparisonOperator: "<="
                            },
                            {
                                display: "In List",
                                comparisonOperator: "in"
                            },
                            {
                                display: "Not In List",
                                comparisonOperator: "not in"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        numberOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "eq"
                            },
                            {
                                display: "Greater Than",
                                comparisonOperator: "gt"
                            },
                            {
                                display: "Greater Than Or Equal",
                                comparisonOperator: "gte"
                            },
                            {
                                display: "Less Than",
                                comparisonOperator: "lt"
                            },
                            {
                                display: "Less Than Or Equal",
                                comparisonOperator: "lte"
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "neq"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return numberOptions;
                };
                scope.$watch('selectedFilterProperty.criteriaValue', function (criteriaValue) {
                    if (angular.isDefined(criteriaValue)) {
                        scope.selectedFilterProperty.criteriaValue = criteriaValue;
                        $log.debug(scope.selectedFilterProperty);
                    }
                });
                scope.conditionOptions = getNumberOptions(scope.comparisonType);
                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                };
                scope.selectedConditionChanged = function (selectedFilterProperty) {
                    selectedFilterProperty.showCriteriaValue = true;
                    //check whether the type is a range
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.type)) {
                        selectedFilterProperty.showCriteriaValue = false;
                        selectedFilterProperty.selectedCriteriaType.showCriteriaStart = true;
                        selectedFilterProperty.selectedCriteriaType.showCriteriaEnd = true;
                    }
                    //is null or is not null
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                        selectedFilterProperty.showCriteriaValue = false;
                    }
                };
                angular.forEach(scope.conditionOptions, function (conditionOption) {
                    $log.debug('populate');
                    if (conditionOption.display == scope.filterItem.conditionDisplay) {
                        scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                        $log.debug(scope.filterItem);
                        if (scope.filterItem.comparisonOperator === 'between' || scope.filterItem.comparisonOperator === 'not between') {
                            var criteriaRangeArray = scope.filterItem.value.split('-');
                            $log.debug(criteriaRangeArray);
                            scope.selectedFilterProperty.criteriaRangeStart = parseInt(criteriaRangeArray[0]);
                            scope.selectedFilterProperty.criteriaRangeEnd = parseInt(criteriaRangeArray[1]);
                        }
                        else {
                            scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                        }
                        if (angular.isDefined(scope.filterItem.criteriaNumberOf)) {
                            scope.selectedFilterProperty.criteriaNumberOf = scope.filterItem.criteriaNumberOf;
                        }
                        if (angular.isDefined(scope.selectedConditionChanged)) {
                            scope.selectedConditionChanged(scope.selectedFilterProperty);
                        }
                    }
                });
            }
        };
    }
    SWCriteriaNumber.Factory = function () {
        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaNumber($log, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaNumber;
}());
exports.SWCriteriaNumber = SWCriteriaNumber;


/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaOneToMany = /** @class */ (function () {
    function SWCriteriaOneToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriaonetomany.html',
            link: function (scope, element, attrs) {
                scope.data = {};
                scope.collectionOptionsOpen = false;
                scope.toggleCollectionOptions = function (flag) {
                    scope.collectionOptionsOpen = (!angular.isUndefined(flag)) ? flag : !scope.collectionOptionsOpen;
                };
                scope.selectCollection = function (collection) {
                    scope.toggleCollectionOptions();
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[2];
                };
                scope.cleanSelection = function () {
                    scope.toggleCollectionOptions(false);
                    scope.data.collectionName = "";
                    scope.selectedFilterProperty.selectedCollection = null;
                };
                var getOneToManyOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var oneToManyOptions = [];
                    if (type == 'filter') {
                        oneToManyOptions = [
                            {
                                display: "All Exist In Collection",
                                comparisonOperator: "All"
                            },
                            {
                                display: "None Exist In Collection",
                                comparisonOperator: "None"
                            },
                            {
                                display: "Some Exist In Collection",
                                comparisonOperator: "One"
                            }
                            /*,
                             {
                             display:"Empty",
                             comparisonOperator:"is",
                             value:"null"
                             },
                             {
                             display:"Not Empty",
                             comparisonOperator:"is not",
                             value:"null"
                             }*/
                        ];
                    }
                    else if (type === 'condition') {
                        oneToManyOptions = [];
                    }
                    return oneToManyOptions;
                };
                $log.debug('onetomany');
                $log.debug(scope.selectedFilterProperty);
                scope.oneToManyOptions = getOneToManyOptions(scope.comparisonType);
                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(scope.selectedFilterProperty.cfc);
                existingCollectionsPromise.then(function (value) {
                    scope.collectionOptions = value.data;
                    if (angular.isDefined(scope.filterItem.collectionID)) {
                        for (var i in scope.collectionOptions) {
                            if (scope.collectionOptions[i].collectionID === scope.filterItem.collectionID) {
                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
                            }
                        }
                        for (var i in scope.oneToManyOptions) {
                            if (scope.oneToManyOptions[i].comparisonOperator === scope.filterItem.criteria) {
                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];
                            }
                        }
                    }
                });
                function populateUI(collection) {
                    scope.collectionOptions.push(collection);
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[2];
                }
                observerService.attach(populateUI, 'addCollection', 'addCollection');
                scope.selectedCriteriaChanged = function (selectedCriteria) {
                    $log.debug(selectedCriteria);
                    //update breadcrumbs as array of filterpropertylist keys
                    $log.debug(scope.selectedFilterProperty);
                    var breadCrumb = {
                        entityAlias: scope.selectedFilterProperty.name,
                        cfc: scope.selectedFilterProperty.cfc,
                        propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                        rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', '')),
                        filterProperty: scope.selectedFilterProperty
                    };
                    scope.filterItem.breadCrumbs.push(breadCrumb);
                    $log.debug('criteriaChanged');
                    //$log.debug(selectedFilterPropertyChanged);
                    $log.debug(scope.selectedFilterProperty);
                    //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                    scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                    //update criteria to display the condition of the new critera we have selected
                };
                scope.addNewCollection = function () {
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: scope.selectedFilterProperty.cfc,
                        collectionName: scope.data.collectionName,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                    scope.cleanSelection();
                };
                scope.viewSelectedCollection = function () {
                    scope.toggleCollectionOptions();
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: 'collection',
                        entityId: scope.selectedFilterProperty.selectedCollection.collectionID,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                };
            }
        };
    }
    SWCriteriaOneToMany.Factory = function () {
        var directive = function ($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaOneToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionPartialsPath',
            'dialogService',
            'observerService',
            'hibachiPathBuilder',
            'rbkeyService'
        ];
        return directive;
    };
    return SWCriteriaOneToMany;
}());
exports.SWCriteriaOneToMany = SWCriteriaOneToMany;


/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaRelatedObject = /** @class */ (function () {
    function SWCriteriaRelatedObject($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriarelatedobject.html',
            link: function (scope, element, attrs) {
                var getRelatedObjectOptions = function () {
                    var relatedObjectOptions = {
                        drillEntity: null,
                        hasEntity: {
                            display: "Defined",
                            comparisonOperator: "is not",
                            value: "null"
                        },
                        notHasEntity: {
                            display: "Not Defined",
                            comparisonOperator: "is",
                            value: "null"
                        },
                        aggregate: {
                            aggregate: ""
                        }
                    };
                    return relatedObjectOptions;
                };
                scope.aggregate = {};
                scope.aggregate.selectedAggregate = '';
                scope.aggregateOptions = ['Average', 'Count', 'Sum', 'Min', 'Max'];
                scope.selectAggregate = function (aggregate) {
                    scope.selectedFilterProperty.selectedCriteriaType.aggregate = aggregate;
                };
                scope.relatedObjectOptions = getRelatedObjectOptions();
                scope.conditionOptions = getRelatedObjectOptions();
                $log.debug('many-to-one');
                $log.debug(scope.selectedFilterProperty);
                $log.debug(scope.filterPropertiesList);
                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                    if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
                        var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
                        filterPropertiesPromise.then(function (value) {
                            scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
                        }, function (reason) {
                        });
                    }
                    scope.selectedCriteriaChanged = function (selectedCriteria, selectedAggregate) {
                        var breadCrumb = {
                            entityAlias: scope.selectedFilterProperty.name,
                            cfc: scope.selectedFilterProperty.cfc,
                            propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                            rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
                        };
                        $log.debug('breadcrumb');
                        $log.debug(breadCrumb);
                        $log.debug(scope.filterItem.breadCrumbs);
                        scope.filterItem.breadCrumbs.push(breadCrumb);
                        if (selectedAggregate) {
                            scope.selectedFilterProperty.selectedCriteriaType.ormtype = 'integer';
                            scope.selectedFilterProperty.selectedCriteriaType.aggregate = selectedAggregate;
                        }
                        //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                        scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                        //update criteria to display the condition of the new critera we have selected
                        $log.debug(scope.selectedFilterProperty);
                    };
                });
            }
        };
    }
    SWCriteriaRelatedObject.Factory = function () {
        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaRelatedObject($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            '$filter',
            'collectionPartialsPath',
            'collectionService',
            'metadataService',
            'hibachiPathBuilder',
            'rbkeyService'
        ];
        return directive;
    };
    return SWCriteriaRelatedObject;
}());
exports.SWCriteriaRelatedObject = SWCriteriaRelatedObject;


/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaString = /** @class */ (function () {
    function SWCriteriaString(collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriastring.html',
            link: function (scope, element, attrs) {
                var getStringOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var stringOptions = [];
                    if (type === 'filter') {
                        stringOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "="
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "<>"
                            },
                            {
                                display: "Contains",
                                comparisonOperator: "like",
                                pattern: "%w%"
                            },
                            {
                                display: "Doesn't Contain",
                                comparisonOperator: "not like",
                                pattern: "%w%"
                            },
                            {
                                display: "Starts With",
                                comparisonOperator: "like",
                                pattern: "w%"
                            },
                            {
                                display: "Doesn't Start With",
                                comparisonOperator: "not like",
                                pattern: "w%"
                            },
                            {
                                display: "Ends With",
                                comparisonOperator: "like",
                                pattern: "%w"
                            },
                            {
                                display: "Doesn't End With",
                                comparisonOperator: "not like",
                                pattern: "%w"
                            },
                            {
                                display: "In List",
                                comparisonOperator: "in"
                            },
                            {
                                display: "Not In List",
                                comparisonOperator: "not in"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        stringOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "eq"
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "neq"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return stringOptions;
                };
                //initialize values
                scope.conditionOptions = getStringOptions(scope.comparisonType);
                scope.inListArray = [];
                if (angular.isDefined(scope.filterItem.value)) {
                    scope.inListArray = scope.filterItem.value.split(',');
                }
                scope.newListItem = '';
                //declare functions
                scope.addToValueInListFormat = function (inListItem) {
                    // Adds item into array
                    scope.inListArray.push(inListItem);
                    //set value field to the user generated list
                    scope.filterItem.value = scope.inListArray.toString();
                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, ', ');
                    scope.newListItem = '';
                };
                scope.removelistItem = function (argListIndex) {
                    scope.inListArray.splice(argListIndex, 1);
                    scope.filterItem.value = scope.inListArray.toString();
                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, ', ');
                };
                scope.clearField = function () {
                    scope.newListItem = '';
                };
                scope.selectedConditionChanged = function (selectedFilterProperty) {
                    //scope.selectedFilterProperty.criteriaValue = '';
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                        selectedFilterProperty.showCriteriaValue = false;
                    }
                    else {
                        if (selectedFilterProperty.selectedCriteriaType.comparisonOperator === 'in' || selectedFilterProperty.selectedCriteriaType.comparisonOperator === 'not in') {
                            selectedFilterProperty.showCriteriaValue = false;
                            scope.comparisonOperatorInAndNotInFlag = true;
                        }
                        else {
                            selectedFilterProperty.showCriteriaValue = true;
                        }
                    }
                };
                scope.$watch('filterItem.value', function (criteriaValue) {
                    //remove percents for like values
                    if (angular.isDefined(scope.filterItem) && angular.isDefined(scope.filterItem.value)) {
                        scope.filterItem.value = scope.filterItem.value.replace('%', '');
                    }
                });
                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                    if (angular.isDefined(selectedFilterProperty)) {
                        angular.forEach(scope.conditionOptions, function (conditionOption) {
                            if (conditionOption.display == scope.filterItem.conditionDisplay) {
                                scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                                scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                                if (angular.isDefined(scope.selectedConditionChanged)) {
                                    scope.selectedConditionChanged(scope.selectedFilterProperty);
                                }
                            }
                        });
                    }
                });
            }
        };
    }
    SWCriteriaString.Factory = function () {
        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaString(collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaString;
}());
exports.SWCriteriaString = SWCriteriaString;


/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDisplayItem = /** @class */ (function () {
    //@ngInject
    function SWDisplayItem($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) {
        return {
            require: '?^swDisplayOptions',
            restrict: 'A',
            scope: {
                selectedProperty: "=",
                propertiesList: "=",
                breadCrumbs: "=",
                selectedPropertyChanged: "&"
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayitem.html",
            link: function (scope, element, attrs, displayOptionsController) {
                scope.showDisplayItem = false;
                scope.selectedDisplayOptionChanged = function (selectedDisplayOption) {
                    var breadCrumb = {
                        entityAlias: scope.selectedProperty.name,
                        cfc: scope.selectedProperty.cfc,
                        propertyIdentifier: scope.selectedProperty.propertyIdentifier
                    };
                    scope.breadCrumbs.push(breadCrumb);
                    scope.selectedPropertyChanged({ selectedProperty: selectedDisplayOption });
                };
                scope.$watch('selectedProperty', function (selectedProperty) {
                    if (angular.isDefined(selectedProperty)) {
                        if (angular.isUndefined(scope.propertiesList[selectedProperty.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedProperty.cfc);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, selectedProperty.propertyIdentifier);
                                scope.propertiesList[selectedProperty.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(selectedProperty.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.propertiesList[selectedProperty.propertyIdentifier], selectedProperty.propertyIdentifier);
                            }, function (reason) {
                            });
                        }
                    }
                });
            }
        };
    }
    SWDisplayItem.Factory = function () {
        var directive = function ($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWDisplayItem($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDisplayItem;
}());
exports.SWDisplayItem = SWDisplayItem;


/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDisplayItemAggregate = /** @class */ (function () {
    //@ngInject
    function SWDisplayItemAggregate($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) {
        return {
            require: '^swDisplayOptions',
            restrict: 'A',
            scope: {
                selectedProperty: "=",
                propertiesList: "=",
                breadCrumbs: "=",
                selectedPropertyChanged: "&"
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayitemaggregate.html",
            link: function (scope, element, attrs, displayOptionsController) {
                scope.showDisplayItem = false;
                scope.aggregate = {};
                scope.aggregate.selectedAggregate = '';
                scope.aggregateOptions = [
                    { id: 'average', value: 'Average' },
                    { id: 'count', value: 'Count' },
                    { id: 'sum', value: 'Sum' },
                    { id: 'min', value: 'Min' },
                    { id: 'max', value: 'Max' }
                ];
                scope.selectAggregate = function (aggregate) {
                    if (aggregate == 'count') {
                        scope.selectedProperty.aggregate = aggregate;
                        scope.selectedPropertyChanged({ selectedProperty: scope.selectedProperty });
                    }
                    else {
                        scope.aggregate.currentObject = scope.selectedProperty.cfc;
                    }
                };
                scope.selectedDisplayOptionChanged = function (selectedDisplayOption) {
                    selectedDisplayOption.aggregate = scope.aggregate.selectedAggregate;
                    selectedDisplayOption.aggregateObject = scope.aggregate.currentObject;
                    scope.selectedPropertyChanged({ selectedProperty: selectedDisplayOption });
                };
                scope.$watch('selectedProperty', function (selectedProperty) {
                    if (angular.isDefined(selectedProperty)) {
                        if (angular.isUndefined(scope.propertiesList[selectedProperty.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedProperty.cfc);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, selectedProperty.propertyIdentifier);
                                scope.propertiesList[selectedProperty.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(selectedProperty.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.propertiesList[selectedProperty.propertyIdentifier], selectedProperty.propertyIdentifier);
                            }, function (reason) {
                            });
                        }
                        scope.showDisplayItem = true;
                    }
                });
            }
        };
    }
    SWDisplayItemAggregate.Factory = function () {
        var directive = function ($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWDisplayItemAggregate($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDisplayItemAggregate;
}());
exports.SWDisplayItemAggregate = SWDisplayItemAggregate;


/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDisplayOptions = /** @class */ (function () {
    //@ngInject
    function SWDisplayOptions($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService) {
        return {
            restrict: 'E',
            require: {
                swListingDisplay: "?^swListingDisplay",
                swListingControls: "?^swListingControls"
            },
            transclude: true,
            scope: {
                orderBy: "<",
                columns: '=',
                joins: "<",
                groupBys: "<",
                propertiesList: "<",
                saveCollection: "&?",
                baseEntityAlias: "<?",
                baseEntityName: "<?",
                listingName: "@?"
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayoptions.html",
            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
                    this.removeColumn = function (columnIndex) {
                        if ($scope.columns.length) {
                            $scope.columns.splice(columnIndex, 1);
                        }
                    };
                }],
            link: function (scope, element, $attrs, controllers, observerService) {
                scope.breadCrumbs = [{
                        entityAlias: scope.baseEntityAlias,
                        cfc: scope.baseEntityAlias,
                        propertyIdentifier: scope.baseEntityAlias
                    }];
                scope.getPropertiesList = function () {
                    return scope.propertiesList;
                };
                scope.addDisplayDialog = {
                    isOpen: false,
                    toggleDisplayDialog: function () {
                        scope.addDisplayDialog.isOpen = !scope.addDisplayDialog.isOpen;
                    }
                };
                var getTitleFromProperty = function (selectedProperty) {
                    var baseEntityCfcName = scope.baseEntityName.replace('Slatwall', '').charAt(0).toLowerCase() + scope.baseEntityName.replace('Slatwall', '').slice(1);
                    var propertyIdentifier = selectedProperty.propertyIdentifier;
                    var title = '';
                    var propertyIdentifierArray = propertyIdentifier.replace(/^_/, '').split(/[._]+/);
                    var currentEntity;
                    var currentEntityInstance;
                    var prefix = 'entity.';
                    if (selectedProperty.$$group == "attribute") {
                        return selectedProperty.displayPropertyIdentifier;
                    }
                    angular.forEach(propertyIdentifierArray, function (propertyIdentifierItem, key) {
                        //pass over the initial item
                        if (key !== 0) {
                            if (key === 1) {
                                currentEntityInstance = $hibachi['new' + scope.baseEntityName.replace('Slatwall', '')]();
                                currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];
                                title += rbkeyService.getRBKey(prefix + baseEntityCfcName + '.' + propertyIdentifierItem);
                            }
                            else {
                                var currentEntityInstance = $hibachi['new' + currentEntity.cfc.charAt(0).toUpperCase() + currentEntity.cfc.slice(1)]();
                                currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];
                                title += rbkeyService.getRBKey(prefix + currentEntityInstance.metaData.className + '.' + currentEntity.name);
                            }
                            if (key < propertyIdentifierArray.length - 1) {
                                title += ' | ';
                            }
                        }
                    });
                    return title;
                };
                scope.addColumn = function (closeDialog) {
                    var selectedProperty = scope.selectedProperty;
                    if (angular.isDefined(scope.selectedAggregate)) {
                        selectedProperty = scope.selectedAggregate;
                    }
                    if (selectedProperty.$$group === 'simple' || 'attribute' || 'compareCollections') {
                        $log.debug(scope.columns);
                        if (angular.isDefined(selectedProperty)) {
                            var column = {
                                title: getTitleFromProperty(selectedProperty),
                                propertyIdentifier: selectedProperty.propertyIdentifier,
                                isVisible: true,
                                isDeletable: true,
                                isSearchable: true,
                                isExportable: true
                            };
                            //only add attributeid if the selectedProperty is attributeid
                            if (angular.isDefined(selectedProperty.attributeID)) {
                                column['attributeID'] = selectedProperty.attributeID;
                                column['attributeSetObject'] = selectedProperty.attributeSetObject;
                            }
                            if (angular.isDefined(selectedProperty.ormtype)) {
                                column['ormtype'] = selectedProperty.ormtype;
                            }
                            if ((!column['type'] || column['type'] == 'none') && selectedProperty.hb_formattype) {
                                column['type'] = selectedProperty.hb_formattype;
                            }
                            else {
                                column['type'] = 'none';
                            }
                            if (angular.isDefined(selectedProperty.aggregate)) {
                                column['ormtype'] = 'string';
                                column['aggregate'] = {
                                    aggregateFunction: selectedProperty.aggregate.toUpperCase(),
                                    aggregateAlias: selectedProperty.propertyIdentifier.split(/[._]+/).pop() + selectedProperty.aggregate.charAt(0).toUpperCase() + selectedProperty.aggregate.slice(1)
                                };
                                column['title'] += ' ' + rbkeyService.getRBKey('define.' + column['aggregate']['aggregateFunction']);
                            }
                            scope.columns.push(column);
                            if ((selectedProperty.propertyIdentifier.match(/_/g) || []).length > 1) {
                                var PIlimit = selectedProperty.propertyIdentifier.length;
                                if (selectedProperty.propertyIdentifier.indexOf('.') != -1) {
                                    PIlimit = selectedProperty.propertyIdentifier.indexOf('.');
                                }
                                var propertyIdentifierJoins = selectedProperty.propertyIdentifier.substring(1, PIlimit);
                                var propertyIdentifierParts = propertyIdentifierJoins.split('_');
                                var current_collection = $hibachi.getEntityExample(scope.baseEntityName);
                                var _propertyIdentifier = '';
                                var joins = [];
                                if (angular.isDefined(scope.joins)) {
                                    joins = scope.joins;
                                }
                                for (var i = 1; i < propertyIdentifierParts.length; i++) {
                                    if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
                                        current_collection = $hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
                                        _propertyIdentifier += '_' + propertyIdentifierParts[i];
                                        var newJoin = {
                                            associationName: _propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1),
                                            alias: '_' + propertyIdentifierParts[0] + _propertyIdentifier
                                        };
                                        var joinFound = false;
                                        for (var j = 0; j < joins.length; j++) {
                                            if (joins[j].alias === newJoin.alias) {
                                                joinFound = true;
                                                break;
                                            }
                                        }
                                        if (!joinFound) {
                                            joins.push(newJoin);
                                        }
                                    }
                                }
                                scope.joins = joins;
                                if (angular.isUndefined(scope.groupBys) || scope.groupBys.split(',').length != scope.columns.length) {
                                    var groupbyArray = angular.isUndefined(scope.groupBys) ? [] : scope.groupBys.split(',');
                                    for (var col = 0; col < scope.columns.length; col++) {
                                        if ('attributeID' in scope.columns[col])
                                            continue;
                                        if (groupbyArray.indexOf(scope.columns[col].propertyIdentifier) == -1) {
                                            groupbyArray.push(scope.columns[col].propertyIdentifier);
                                        }
                                    }
                                    scope.groupBys = groupbyArray.join(',');
                                }
                            }
                            if (controllers.swListingControls) {
                                controllers.swListingControls.columnIsControllableMap[column.propertyIdentifier] = true;
                            }
                            scope.saveCollection();
                            if (angular.isDefined(closeDialog) && closeDialog === true) {
                                scope.addDisplayDialog.toggleDisplayDialog();
                                scope.selectBreadCrumb(0);
                            }
                        }
                    }
                };
                scope.selectBreadCrumb = function (breadCrumbIndex) {
                    //splice out array items above index
                    var removeCount = scope.breadCrumbs.length - 1 - breadCrumbIndex;
                    scope.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
                    scope.selectedPropertyChanged(null);
                };
                var unbindBaseEntityAlias = scope.$watch('baseEntityAlias', function (newValue, oldValue) {
                    if (newValue !== oldValue) {
                        scope.breadCrumbs = [{
                                entityAlias: scope.baseEntityAlias,
                                cfc: scope.baseEntityAlias,
                                propertyIdentifier: scope.baseEntityAlias
                            }];
                        unbindBaseEntityAlias();
                    }
                });
                scope.selectedPropertyChanged = function (selectedProperty, aggregate) {
                    // drill down or select field?
                    if (!aggregate) {
                        scope.selectedProperty = selectedProperty;
                        scope.selectedAggregate = undefined;
                    }
                    else {
                        scope.selectedAggregate = selectedProperty;
                    }
                };
                jQuery(function ($) {
                    var panelList = angular.element(element).children('ul');
                    panelList.sortable({
                        // Only make the .panel-heading child elements support dragging.
                        // Omit this to make then entire <li>...</li> draggable.
                        handle: '.s-pannel-name',
                        update: function (event, ui) {
                            var tempColumnsArray = [];
                            $('.s-pannel-name', panelList).each(function (index, elem) {
                                var newIndex = $(elem).attr('j-column-index');
                                var columnItem = scope.columns[newIndex];
                                tempColumnsArray.push(columnItem);
                            });
                            scope.columns = tempColumnsArray;
                            scope.saveCollection();
                        }
                    });
                });
                if (!scope.saveCollection && controllers.swListingControls) {
                    scope.saveCollection = function () {
                        controllers.swListingControls.collectionConfig.columns = scope.columns;
                        if (controllers.swListingDisplay) {
                            controllers.swListingDisplay.columns = scope.columns;
                        }
                        controllers.swListingControls.saveCollection();
                    };
                }
                if (controllers.swListingDisplay) {
                    scope.getCollection = controllers.swListingDisplay.getCollection;
                }
                /*var unbindBaseEntityAlaisWatchListener = scope.$watch('baseEntityAlias',function(){
                 $("select").selectBoxIt();
                 unbindBaseEntityAlaisWatchListener();
                 });*/
            }
        };
    }
    SWDisplayOptions.Factory = function () {
        var directive = function ($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService) { return new SWDisplayOptions($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'hibachiPathBuilder',
            'collectionPartialsPath',
            'rbkeyService'
        ];
        return directive;
    };
    return SWDisplayOptions;
}());
exports.SWDisplayOptions = SWDisplayOptions;


/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWEditFilterItem = /** @class */ (function () {
    function SWEditFilterItem($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService) {
        return {
            require: {
                swFilterGroups: '^swFilterGroups',
                swListingControls: '?^swListingControls'
            },
            restrict: 'E',
            scope: {
                collectionConfig: "=",
                filterItem: "=",
                filterPropertiesList: "=",
                saveCollection: "&?",
                removeFilterItem: "&",
                filterItemIndex: "=",
                comparisonType: "=",
                simple: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "editfilteritem.html",
            link: function (scope, element, attrs, filterGroupsController) {
                if (!scope.saveCollection && filterGroupsController.swListingControls) {
                    scope.saveCollection = function () {
                        filterGroupsController.swListingControls.collectionConfig = scope.collectionConfig;
                        filterGroupsController.swListingControls.saveCollection();
                    };
                }
                function daysBetween(first, second) {
                    // Copy date parts of the timestamps, discarding the time parts.
                    var one = new Date(first.getFullYear(), first.getMonth(), first.getDate());
                    var two = new Date(second.getFullYear(), second.getMonth(), second.getDate());
                    // Do the math.
                    var millisecondsPerDay = 1000 * 60 * 60 * 24;
                    var millisBetween = two.getTime() - one.getTime();
                    var days = millisBetween / millisecondsPerDay;
                    // Round down.
                    return Math.floor(days);
                }
                if (angular.isUndefined(scope.filterItem.breadCrumbs)) {
                    scope.filterItem.breadCrumbs = [];
                    if (scope.filterItem.propertyIdentifier === "") {
                        scope.filterItem.breadCrumbs = [
                            {
                                rbKey: rbkeyService.getRBKey('entity.' + scope.collectionConfig.baseEntityAlias.replace('_', '')),
                                entityAlias: scope.collectionConfig.baseEntityAlias,
                                cfc: scope.collectionConfig.baseEntityAlias,
                                propertyIdentifier: scope.collectionConfig.baseEntityAlias
                            }
                        ];
                    }
                    else {
                        var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
                        entityAliasArrayFromString.pop();
                        for (var i in entityAliasArrayFromString) {
                            var breadCrumb = {
                                rbKey: rbkeyService.getRBKey('entity.' + scope.collectionConfig.baseEntityAlias.replace('_', '')),
                                entityAlias: entityAliasArrayFromString[i],
                                cfc: entityAliasArrayFromString[i],
                                propertyIdentifier: entityAliasArrayFromString[i]
                            };
                            scope.filterItem.breadCrumbs.push(breadCrumb);
                        }
                    }
                }
                else {
                    angular.forEach(scope.filterItem.breadCrumbs, function (breadCrumb, key) {
                        if (angular.isUndefined(scope.filterPropertiesList[breadCrumb.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(breadCrumb.cfc);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, breadCrumb.propertyIdentifier);
                                scope.filterPropertiesList[breadCrumb.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(breadCrumb.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.filterPropertiesList[breadCrumb.propertyIdentifier], breadCrumb.propertyIdentifier);
                                var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
                                entityAliasArrayFromString.pop();
                                entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                                if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                    for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                        var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                        if (filterProperty.propertyIdentifier === scope.filterItem.propertyIdentifier) {
                                            //selectItem from drop down
                                            scope.selectedFilterProperty = filterProperty;
                                            //decorate with value and comparison Operator so we can use it in the Condition section
                                            scope.selectedFilterProperty.value = scope.filterItem.value;
                                            scope.selectedFilterProperty.comparisonOperator = scope.filterItem.comparisonOperator;
                                        }
                                    }
                                }
                            });
                        }
                        else {
                            var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
                            entityAliasArrayFromString.pop();
                            entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                            if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                    var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                    if (filterProperty.propertyIdentifier === scope.filterItem.propertyIdentifier) {
                                        //selectItem from drop down
                                        scope.selectedFilterProperty = filterProperty;
                                        //decorate with value and comparison Operator so we can use it in the Condition section
                                        scope.selectedFilterProperty.value = scope.filterItem.value;
                                        scope.selectedFilterProperty.comparisonOperator = scope.filterItem.comparisonOperator;
                                    }
                                }
                            }
                        }
                    });
                }
                if (angular.isUndefined(scope.filterItem.$$isClosed)) {
                    scope.filterItem.$$isClosed = true;
                }
                scope.filterGroupItem = filterGroupsController.swFilterGroups.getFilterGroupItem();
                scope.togglePrepareForFilterGroup = function () {
                    scope.filterItem.$$prepareForFilterGroup = !scope.filterItem.$$prepareForFilterGroup;
                };
                //public functions
                scope.selectBreadCrumb = function (breadCrumbIndex) {
                    //splice out array items above index
                    var removeCount = scope.filterItem.breadCrumbs.length - 1 - breadCrumbIndex;
                    scope.filterItem.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
                    $log.debug('selectBreadCrumb');
                    $log.debug(scope.selectedFilterProperty);
                    //scope.selectedFilterPropertyChanged(scope.filterItem.breadCrumbs[scope.filterItem.breadCrumbs.length -1].filterProperty);
                    scope.selectedFilterPropertyChanged(null);
                };
                scope.selectedFilterPropertyChanged = function (selectedFilterProperty) {
                    $log.debug('selectedFilterProperty');
                    $log.debug(selectedFilterProperty);
                    if (angular.isDefined(scope.selectedFilterProperty) && scope.selectedFilterProperty === null) {
                        scope.selectedFilterProperty = {};
                    }
                    if (angular.isDefined(scope.selectedFilterProperty) && angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType)) {
                        delete scope.selectedFilterProperty.selectedCriteriaType;
                    }
                    if (angular.isDefined(scope.filterItem.value)) {
                        delete scope.filterItem.value;
                    }
                    scope.selectedFilterProperty.showCriteriaValue = false;
                    scope.selectedFilterProperty = selectedFilterProperty;
                };
                scope.addFilterItem = function () {
                    collectionService.newFilterItem(filterGroupsController.swFilterGroups.getFilterGroupItem(), filterGroupsController.swFilterGroups.setItemInUse);
                    this.observerService.notify('collectionConfigUpdated', {
                        collectionConfig: collectionService
                    });
                };
                scope.cancelFilterItem = function () {
                    $log.debug('cancelFilterItem');
                    $log.debug(scope.filterItemIndex);
                    //scope.deselectItems(scope.filterGroupItem[filterItemIndex]);
                    scope.filterItem.setItemInUse(false);
                    scope.filterItem.$$isClosed = true;
                    for (var siblingIndex in scope.filterItem.$$siblingItems) {
                        scope.filterItem.$$siblingItems[siblingIndex].$$disabled = false;
                    }
                    if (scope.filterItem.$$isNew === true) {
                        observerService.notify('filterItemAction', { action: 'remove', filterItemIndex: scope.filterItemIndex });
                        scope.removeFilterItem({ filterItemIndex: scope.filterItemIndex });
                    }
                    else {
                        observerService.notify('filterItemAction', { action: 'close', filterItemIndex: scope.filterItemIndex });
                    }
                };
                scope.saveFilter = function (selectedFilterProperty, filterItem, callback) {
                    var _this = this;
                    $log.debug('saveFilter begin');
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType) && angular.equals({}, selectedFilterProperty.selectedCriteriaType)) {
                        return;
                    }
                    if ((selectedFilterProperty.propertyIdentifier.match(/_/g) || []).length > 1) {
                        var propertyIdentifierStart = (selectedFilterProperty.propertyIdentifier.charAt(0) == '_') ? 1 : 0;
                        var propertyIdentifierEnd = (selectedFilterProperty.propertyIdentifier.indexOf('.') == -1) ? selectedFilterProperty.propertyIdentifier.length : selectedFilterProperty.propertyIdentifier.indexOf('.');
                        var propertyIdentifierJoins = selectedFilterProperty.propertyIdentifier.substring(propertyIdentifierStart, propertyIdentifierEnd);
                        var propertyIdentifierParts = propertyIdentifierJoins.split('_');
                        var current_collection = $hibachi.getEntityExample(scope.collectionConfig.baseEntityName);
                        var _propertyIdentifier = '';
                        var joins = [];
                        if (angular.isDefined(scope.collectionConfig.joins)) {
                            joins = scope.collectionConfig.joins;
                        }
                        for (var i = 1; i < propertyIdentifierParts.length; i++) {
                            if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
                                current_collection = $hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
                                _propertyIdentifier += '_' + propertyIdentifierParts[i];
                                var newJoin = {
                                    associationName: _propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1),
                                    alias: '_' + propertyIdentifierParts[0] + _propertyIdentifier
                                };
                                var joinFound = false;
                                for (var j = 0; j < joins.length; j++) {
                                    if (joins[j].alias === newJoin.alias) {
                                        joinFound = true;
                                        break;
                                    }
                                }
                                if (!joinFound) {
                                    joins.push(newJoin);
                                }
                            }
                        }
                        scope.collectionConfig.joins = joins;
                        if (angular.isDefined(scope.collectionConfig.columns) && (angular.isUndefined(scope.collectionConfig.groupBys) || scope.collectionConfig.groupBys.split(',').length != scope.collectionConfig.columns.length)) {
                            var groupbyArray = angular.isUndefined(scope.collectionConfig.groupBys) ? [] : scope.collectionConfig.groupBys.split(',');
                            for (var column = 0; column < scope.collectionConfig.columns.length; column++) {
                                if (groupbyArray.indexOf(scope.collectionConfig.columns[column].propertyIdentifier) == -1) {
                                    groupbyArray.push(scope.collectionConfig.columns[column].propertyIdentifier);
                                }
                            }
                            scope.collectionConfig.groupBys = groupbyArray.join(',');
                        }
                    }
                    if (angular.isDefined(selectedFilterProperty) && angular.isDefined(selectedFilterProperty.selectedCriteriaType)) {
                        //populate filterItem with selectedFilterProperty values
                        filterItem.$$isNew = false;
                        filterItem.propertyIdentifier = selectedFilterProperty.propertyIdentifier;
                        filterItem.displayPropertyIdentifier = selectedFilterProperty.displayPropertyIdentifier;
                        switch (selectedFilterProperty.ormtype) {
                            case 'boolean':
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                filterItem.displayValue = filterItem.value;
                                break;
                            case 'string':
                                if (angular.isDefined(selectedFilterProperty.attributeID)) {
                                    filterItem.attributeID = selectedFilterProperty.attributeID;
                                    filterItem.attributeSetObject = selectedFilterProperty.attributeSetObject;
                                }
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //retrieving implied value or user input | ex. implied:prop is null, user input:prop = "Name"
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value.toString();
                                    //if has a pattern then we need to evaluate where to add % for like statement
                                }
                                else if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.pattern)) {
                                    filterItem.pattern = selectedFilterProperty.selectedCriteriaType.pattern;
                                }
                                filterItem.displayValue = filterItem.value;
                                break;
                            //TODO:simplify timestamp and big decimal to leverage reusable function for null, range, and value
                            case 'timestamp':
                                //retrieving implied value or user input | ex. implied:prop is null, user input:prop = "Name"
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //is it null or a range
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                    filterItem.displayValue = filterItem.value;
                                }
                                else {
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.dateInfo.type) && selectedFilterProperty.selectedCriteriaType.dateInfo.type === 'calculation') {
                                        var _daysBetween = daysBetween(new Date(selectedFilterProperty.criteriaRangeStart), new Date(selectedFilterProperty.criteriaRangeEnd));
                                        filterItem.value = _daysBetween;
                                        filterItem.displayValue = selectedFilterProperty.selectedCriteriaType.display;
                                        if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
                                            filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
                                        }
                                    }
                                    else if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.dateInfo.type) && selectedFilterProperty.selectedCriteriaType.dateInfo.type === 'exactDate') {
                                        if (angular.isUndefined(selectedFilterProperty.selectedCriteriaType.dateInfo.measureType)) {
                                            filterItem.value = selectedFilterProperty.criteriaRangeStart + '-' + selectedFilterProperty.criteriaRangeEnd;
                                            filterItem.displayValue = $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeStart), 'MM/dd/yyyy @ h:mma') + '-' + $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeEnd), 'MM/dd/yyyy @ h:mma');
                                        }
                                        else {
                                            filterItem.measureType = selectedFilterProperty.selectedCriteriaType.dateInfo.measureType;
                                            filterItem.measureCriteria = selectedFilterProperty.selectedCriteriaType.dateInfo.type;
                                            filterItem.criteriaNumberOf = "0";
                                            if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
                                                filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
                                            }
                                            filterItem.value = filterItem.criteriaNumberOf;
                                            filterItem.displayValue = filterItem.criteriaNumberOf;
                                            switch (filterItem.measureType) {
                                                case 'd':
                                                    filterItem.displayValue += ' Day';
                                                    break;
                                                case 'm':
                                                    filterItem.displayValue += ' Month';
                                                    break;
                                                case 'y':
                                                    filterItem.displayValue += ' Year';
                                                    break;
                                            }
                                            filterItem.displayValue += ((filterItem.criteriaNumberOf > 1) ? 's' : '') + ' Ago';
                                        }
                                    }
                                    else {
                                        var dateValueString = utilityService.removeTimeOffset(selectedFilterProperty.criteriaRangeStart) + '-' + utilityService.removeTimeOffset(selectedFilterProperty.criteriaRangeEnd);
                                        filterItem.value = dateValueString;
                                        var formattedDateValueString = $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeStart), 'MM/dd/yyyy @ h:mma') + '-' + $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeEnd), 'MM/dd/yyyy @ h:mma');
                                        filterItem.displayValue = formattedDateValueString;
                                        if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
                                            filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
                                        }
                                    }
                                }
                                break;
                            case 'big_decimal':
                            case 'integer':
                            case 'float':
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //is null, is not null
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                }
                                else {
                                    if (angular.isUndefined(selectedFilterProperty.selectedCriteriaType.type)) {
                                        filterItem.value = selectedFilterProperty.criteriaValue;
                                    }
                                    else {
                                        var decimalValueString = selectedFilterProperty.criteriaRangeStart + '-' + selectedFilterProperty.criteriaRangeEnd;
                                        filterItem.value = decimalValueString;
                                    }
                                }
                                if (angular.isDefined(selectedFilterProperty.aggregate)) {
                                    filterItem.aggregate = selectedFilterProperty.aggregate;
                                }
                                filterItem.displayValue = filterItem.value;
                                break;
                        }
                        switch (selectedFilterProperty.fieldtype) {
                            case 'one-to-many':
                            case 'many-to-many':
                            case 'many-to-one':
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //is null, is not null
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                }
                                filterItem.displayValue = filterItem.value;
                                break;
                            //case 'one-to-many':
                            //
                            //case 'many-to-many':
                            //    filterItem.collectionID = selectedFilterProperty.selectedCollection.collectionID;
                            //    filterItem.displayValue = selectedFilterProperty.selectedCollection.collectionName;
                            //    filterItem.criteria = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                            //
                            //    break;
                        }
                        if (angular.isUndefined(filterItem.displayValue)) {
                            filterItem.displayValue = filterItem.value;
                        }
                        if (angular.isDefined(selectedFilterProperty.ormtype)) {
                            filterItem.ormtype = selectedFilterProperty.ormtype;
                        }
                        if (angular.isDefined(selectedFilterProperty.fieldtype)) {
                            filterItem.fieldtype = selectedFilterProperty.fieldtype;
                        }
                        for (var siblingIndex in filterItem.$$siblingItems) {
                            filterItem.$$siblingItems[siblingIndex].$$disabled = false;
                        }
                        filterItem.conditionDisplay = selectedFilterProperty.selectedCriteriaType.display;
                        //if the add to New group checkbox has been checked then we need to transplant the filter item into a filter group
                        if (filterItem.$$prepareForFilterGroup === true) {
                            collectionService.transplantFilterItemIntoFilterGroup(filterGroupsController.swFilterGroups.getFilterGroupItem(), filterItem);
                        }
                        //persist Config and
                        scope.saveCollection();
                        $log.debug(selectedFilterProperty);
                        $log.debug(filterItem);
                        var timeoutpromise = $timeout(function () {
                            callback();
                        });
                        timeoutpromise.then(function () {
                            observerService.notify('filterItemAction', { action: 'add', filterItemIndex: scope.filterItemIndex, collectionConfig: _this.collectionConfig });
                        });
                        $log.debug('saveFilter end');
                    }
                };
            }
        };
    }
    SWEditFilterItem.Factory = function () {
        var directive = function ($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService) { return new SWEditFilterItem($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService); };
        directive.$inject = [
            '$log',
            '$filter',
            '$timeout',
            '$hibachi',
            'collectionPartialsPath',
            'collectionService',
            'metadataService',
            'hibachiPathBuilder',
            'rbkeyService',
            'observerService',
            'utilityService'
        ];
        return directive;
    };
    return SWEditFilterItem;
}());
exports.SWEditFilterItem = SWEditFilterItem;


/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFilterGroupItem = /** @class */ (function () {
    function SWFilterGroupItem($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            require: "^swFilterGroups",
            scope: {
                collectionConfig: "=",
                filterGroupItem: "=",
                siblingItems: "=",
                filterPropertiesList: "=",
                filterGroupItemIndex: "=",
                saveCollection: "&",
                comparisonType: "="
            },
            link: function (scope, element, attrs, filterGroupsController) {
                var Partial = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filtergroupitem.html";
                var templateLoader = $http.get(Partial, { cache: $templateCache });
                var promise = templateLoader.success(function (html) {
                    element.html(html);
                }).then(function (response) {
                    element.replaceWith($compile(element.html())(scope));
                });
                //for(item in filterGroupItem){}
                scope.filterGroupItem.setItemInUse = filterGroupsController.setItemInUse;
                scope.filterGroupItem.$$index = scope.filterGroupItemIndex;
                scope.removeFilterGroupItem = function () {
                    filterGroupsController.removeFilterGroupItem(scope.filterGroupItemIndex);
                };
                scope.filterGroupItem.removeFilterGroupItem = scope.removeFilterGroupItem;
                scope.filterGroupItem.$$disabled = false;
                if (angular.isUndefined(scope.filterGroupItem.$$isClosed)) {
                    scope.filterGroupItem.$$isClosed = true;
                }
                scope.filterGroupItem.$$siblingItems = scope.siblingItems;
                scope.selectFilterGroupItem = function (filterGroupItem) {
                    collectionService.selectFilterGroupItem(filterGroupItem);
                };
                scope.logicalOperatorChanged = function (logicalOperatorValue) {
                    $log.debug('logicalOperatorChanged');
                    $log.debug(logicalOperatorValue);
                    scope.filterGroupItem.logicalOperator = logicalOperatorValue;
                    filterGroupsController.saveCollection();
                };
            }
        };
    }
    SWFilterGroupItem.Factory = function () {
        var directive = function ($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterGroupItem($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$http',
            '$compile',
            '$templateCache',
            '$log',
            'collectionService',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFilterGroupItem;
}());
exports.SWFilterGroupItem = SWFilterGroupItem;


/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFilterGroups = /** @class */ (function () {
    function SWFilterGroups($log, collectionPartialsPath, hibachiPathBuilder, observerService) {
        return {
            restrict: 'EA',
            scope: {
                collectionConfig: "=?",
                filterGroupItem: "=?",
                filterPropertiesList: "=?",
                saveCollection: "&",
                filterGroup: "=?",
                comparisonType: "=?",
                simple: "=",
                readOnly: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filtergroups.html",
            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
                    //if the filter group comparisontype is not specified, then assume we are doing filters
                    if (!angular.isDefined($scope.comparisonType)) {
                        $scope.comparisonType = 'filter';
                    }
                    $scope.itemInUse = false;
                    $log.debug('collectionConfig');
                    $log.debug($scope.collectionConfig);
                    this.getFilterGroup = function () {
                        return $scope.filterGroup;
                    };
                    this.getFilterGroupItem = function () {
                        return $scope.filterGroupItem;
                    };
                    this.setItemInUse = function (booleanValue) {
                        $scope.itemInUse = booleanValue;
                    };
                    this.getItemInUse = function () {
                        return $scope.itemInUse;
                    };
                    this.saveCollection = function () {
                        $scope.saveCollection();
                    };
                    $scope.deselectItems = function (filterItem) {
                        for (var i in filterItem.$$siblingItems) {
                            filterItem.$$siblingItems[i].$$disabled = false;
                        }
                    };
                    this.removeFilterItem = function (filterItemIndex) {
                        if (angular.isDefined(filterItemIndex)) {
                            $scope.deselectItems($scope.filterGroupItem[filterItemIndex]);
                            $scope.filterGroupItem[filterItemIndex].setItemInUse(false);
                            //remove item
                            $log.debug('removeFilterItem');
                            $log.debug(filterItemIndex);
                            $scope.filterGroupItem.splice(filterItemIndex, 1);
                            //make sure first item has no logical operator if it exists
                            if ($scope.filterGroupItem.length) {
                                delete $scope.filterGroupItem[0].logicalOperator;
                            }
                            $log.debug('removeFilterItem');
                            $log.debug(filterItemIndex);
                            $scope.saveCollection();
                        }
                    };
                    this.removeFilterGroupItem = function (filterGroupItemIndex) {
                        //remove Item
                        $scope.deselectItems($scope.filterGroupItem[filterGroupItemIndex]);
                        $scope.filterGroupItem[filterGroupItemIndex].setItemInUse(false);
                        $scope.filterGroupItem.splice(filterGroupItemIndex, 1);
                        //make sure first item has no logical operator if it exists
                        if ($scope.filterGroupItem.length) {
                            delete $scope.filterGroupItem[0].logicalOperator;
                        }
                        $log.debug('removeFilterGroupItem');
                        $log.debug(filterGroupItemIndex);
                        $scope.saveCollection();
                    };
                }]
        };
    }
    SWFilterGroups.Factory = function () {
        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder, observerService) { return new SWFilterGroups($log, collectionPartialsPath, hibachiPathBuilder, observerService); };
        directive.$inject = [
            '$log',
            'collectionPartialsPath',
            'hibachiPathBuilder',
            'observerService'
        ];
        return directive;
    };
    return SWFilterGroups;
}());
exports.SWFilterGroups = SWFilterGroups;


/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFilterItem = /** @class */ (function () {
    function SWFilterItem($log, collectionService, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            require: '^swFilterGroups',
            scope: {
                collectionConfig: "=",
                filterItem: "=",
                siblingItems: "=",
                filterPropertiesList: "=",
                filterItemIndex: "=",
                saveCollection: "&",
                comparisonType: "=",
                simple: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filteritem.html",
            link: function (scope, element, attrs, filterGroupsController) {
                scope.baseEntityAlias = scope.collectionConfig.baseEntityAlias;
                if (angular.isUndefined(scope.filterItem.$$isClosed)) {
                    scope.filterItem.$$isClosed = true;
                }
                if (angular.isUndefined(scope.filterItem.$$disabled)) {
                    scope.filterItem.$$disabled = false;
                }
                if (angular.isUndefined(scope.filterItem.siblingItems)) {
                    scope.filterItem.$$siblingItems = scope.siblingItems;
                }
                scope.filterItem.setItemInUse = filterGroupsController.setItemInUse;
                scope.selectFilterItem = function (filterItem) {
                    collectionService.selectFilterItem(filterItem);
                };
                scope.removeFilterItem = function () {
                    filterGroupsController.removeFilterItem(scope.filterItemIndex, filterGroupsController.getFilterGroupItem());
                };
                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();
                scope.logicalOperatorChanged = function (logicalOperatorValue) {
                    $log.debug('logicalOperatorChanged');
                    $log.debug(logicalOperatorValue);
                    scope.filterItem.logicalOperator = logicalOperatorValue;
                    filterGroupsController.saveCollection();
                };
            }
        };
    }
    SWFilterItem.Factory = function () {
        var directive = function ($log, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterItem($log, collectionService, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'collectionService',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFilterItem;
}());
exports.SWFilterItem = SWFilterItem;


/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWRestrictionConfigController = /** @class */ (function () {
    //@ngInject
    function SWRestrictionConfigController($timeout, collectionConfigService, $hibachi, observerService) {
        var _this = this;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.$onDestroy = function () {
            _this.observerService.detachByEvent('saveCollection');
        };
        this.setCollectionConfig = function (payload) {
            _this.permissionRecordRestriction.data.collectionConfig = angular.toJson(payload.collectionConfig.getCollectionConfig());
            _this.permissionRecordRestriction.forms['permissionRecordRestrictionForm'].collectionConfig.$setViewValue(payload.collectionConfig.getCollectionConfig());
            _this.permissionRecordRestriction.forms['permissionRecordRestrictionForm'].$setDirty(true);
            _this.permissionRecordRestriction.$$save();
        };
        var permissionRecordRestrictionRequest = this.$hibachi.getPermissionRecordRestriction(this.permissionRecordRestrictionId);
        permissionRecordRestrictionRequest.promise.then(function () {
            var collectionConfig = _this.collectionConfigService.newCollectionConfig();
            _this.permissionRecordRestriction = permissionRecordRestrictionRequest.value;
            collectionConfig.loadJson(_this.permissionRecordRestriction.collectionConfig);
            _this.collectionConfig = collectionConfig;
        });
        observerService.attach(this.setCollectionConfig, 'saveCollection');
    }
    return SWRestrictionConfigController;
}());
var SWRestrictionConfig = /** @class */ (function () {
    //@ngInject
    function SWRestrictionConfig(hibachiPathBuilder, collectionPartialsPath) {
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            permissionRecordRestrictionId: "@?"
        };
        this.controller = SWRestrictionConfigController;
        this.controllerAs = "swRestrictionConfig";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'restrictionconfig.html';
    }
    SWRestrictionConfig.Factory = function () {
        var directive = function (hibachiPathBuilder, collectionPartialsPath) { return new SWRestrictionConfig(hibachiPathBuilder, collectionPartialsPath); };
        directive.$inject = ['hibachiPathBuilder', 'collectionPartialsPath'];
        return directive;
    };
    return SWRestrictionConfig;
}());
exports.SWRestrictionConfig = SWRestrictionConfig;


/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CollectionController = /** @class */ (function () {
    //@ngInject
    function CollectionController($scope, $attrs, $log, $timeout, $hibachi, collectionService, metadataService, selectionService, paginationService, collectionConfigService, appConfig, observerService) {
        $scope.saveCollection = function (collectionData) {
            var data = {
                collectionID: $attrs.collectionId,
                collectionConfig: collectionData.collectionConfig
            };
            var saveCollectionPromise = $hibachi.saveEntity('Collection', $attrs.collectionId, data, 'save');
            saveCollectionPromise.then(function (value) {
            }, function (reason) {
            });
        };
        observerService.attach($scope.saveCollection, 'swPaginationUpdate', $attrs.tableId);
    }
    return CollectionController;
}());
exports.CollectionController = CollectionController;
// 'use strict';
// angular.module('slatwalladmin')
// //using $location to get url params, this will probably change to using routes eventually
// .controller('collections', [
// 	'$scope',
// '$location',
// '$log',
// '$timeout',
// '$hibachi',
// 'collectionService',
// 'metadataService',
// 'selectionService',
// 'paginationService',
// 	function(
// 		$scope,
// $location,
// $log,
// $timeout,
// $hibachi,
// collectionService,
// metadataService,
// selectionService,
// paginationService
// 	){
//
// 	}
// ]);


/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var ConfirmationController = /** @class */ (function () {
    //@ngInject
    function ConfirmationController($scope, $log, $modalInstance) {
        $scope.deleteEntity = function (entity) {
            $log.debug("Deleting an entity.");
            $log.debug($scope.entity);
            this.close();
        };
        $scope.fireCallback = function (callbackFunction) {
            callbackFunction();
            this.close();
        };
        /**
        * Closes the modal window
        */
        $scope.close = function () {
            $modalInstance.close();
        };
        /**
        * Cancels the modal window
        */
        $scope.cancel = function () {
            $modalInstance.dismiss("cancel");
        };
    }
    return ConfirmationController;
}());
exports.ConfirmationController = ConfirmationController;


/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CreateCollection = /** @class */ (function () {
    //@ngInject
    function CreateCollection($scope, $log, $timeout, $hibachi, collectionService, metadataService, paginationService, dialogService, observerService, selectionService, collectionConfigService, rbkeyService, $window) {
        $window.scrollTo(0, 0);
        $scope.params = dialogService.getCurrentDialog().params;
        $scope.readOnly = angular.isDefined($scope.params.readOnly) && $scope.params.readOnly == true;
        $scope.myCollection = collectionConfigService.newCollectionConfig($scope.params.entityName);
        var hibachiConfig = $hibachi.getConfig();
        if ($scope.params.entityName == 'Type' && angular.isUndefined($scope.params.entityId) && angular.isDefined($scope.params.parentEntity)) {
            $scope.params.parentEntity = $scope.params.parentEntity.replace(new RegExp('^' + hibachiConfig.applicationKey, 'i'), '');
            var systemCode = $scope.params.parentEntity.charAt(0).toLowerCase() + $scope.params.parentEntity.slice(1) + 'Type';
            $scope.myCollection.addFilter('parentType.systemCode', systemCode);
        }
        $scope.keywords = '';
        $scope.paginator = paginationService.createPagination();
        //$scope.isRadio = true;
        $scope.hideEditView = true;
        //$scope.closeSaving = true;
        $scope.hasSelection = selectionService.getSelectionCount;
        $scope.idsSelected = selectionService.getSelections;
        $scope.unselectAll = function () {
            selectionService.clearSelections('collectionSelection');
            $scope.getCollection();
        };
        $scope.newCollection = $hibachi.newCollection();
        $scope.newCollection.data.collectionCode = $scope.params.entityName + "-" + new Date().valueOf();
        $scope.newCollection.data.collectionObject = $scope.params.entityName;
        if (angular.isDefined($scope.params.entityId)) {
            $scope.newCollection.data.collectionID = $scope.params.entityId;
            $timeout(function () {
                $scope.newCollection.forms['form.createCollection'].$setDirty();
            });
        }
        if (angular.isDefined($scope.params.collectionName)) {
            $scope.newCollection.data.collectionName = $scope.params.collectionName;
            $timeout(function () {
                $scope.newCollection.forms['form.createCollection'].$setDirty();
            });
        }
        $scope.saveCollection = function () {
            $scope.myCollection.loadJson($scope.collectionConfig);
            $scope.getCollection();
        };
        $scope.getCollection = function () {
            $scope.closeSaving = true;
            $scope.myCollection.setPageShow($scope.paginator.getPageShow());
            $scope.myCollection.setCurrentPage($scope.paginator.getCurrentPage());
            $scope.myCollection.setKeywords($scope.keywords);
            var collectionOptions;
            if (angular.isDefined($scope.params.entityId)) {
                collectionOptions = {
                    id: $scope.params.entityId,
                    currentPage: $scope.paginator.getCurrentPage(),
                    pageShow: $scope.paginator.getPageShow(),
                    keywords: $scope.keywords
                };
            }
            else {
                collectionOptions = $scope.myCollection.getOptions();
            }
            $log.debug($scope.myCollection.getOptions());
            var collectionListingPromise = $hibachi.getEntity($scope.myCollection.getEntityName(), collectionOptions);
            collectionListingPromise.then(function (value) {
                if (angular.isDefined($scope.params.entityId)) {
                    $scope.newCollection.data.collectionName = value.collectionName;
                }
                $scope.collection = value;
                $scope.collection.collectionObject = $scope.myCollection.baseEntityName;
                $scope.collectionInitial = angular.copy($scope.collection);
                $scope.paginator.setRecordsCount($scope.collection.recordsCount);
                $scope.paginator.setPageRecordsInfo($scope.collection);
                if (angular.isUndefined($scope.myCollection.columns)) {
                    var colConfig = angular.fromJson(value.collectionConfig);
                    colConfig.baseEntityName = colConfig.baseEntityName.replace(new RegExp('^' + hibachiConfig.applicationKey, 'i'), '');
                    $scope.myCollection.loadJson(colConfig);
                }
                if (angular.isUndefined($scope.collectionConfig)) {
                    var tempCollectionConfig = collectionConfigService.newCollectionConfig();
                    tempCollectionConfig.loadJson(value.collectionConfig);
                    $scope.collectionConfig = tempCollectionConfig.getCollectionConfig();
                }
                if (angular.isUndefined($scope.collectionConfig.filterGroups) || !$scope.collectionConfig.filterGroups.length) {
                    $scope.collectionConfig.filterGroups = [
                        {
                            filterGroup: []
                        }
                    ];
                }
                collectionService.setFilterCount(filterItemCounter());
                $scope.loadingCollection = false;
                $scope.closeSaving = false;
            }, function (reason) {
            });
            return collectionListingPromise;
        };
        $scope.paginator.collection = $scope.newCollection;
        $scope.paginator.getCollection = $scope.getCollection;
        var unbindCollectionObserver = $scope.$watch('collection', function (newValue, oldValue) {
            if (newValue !== oldValue) {
                if (angular.isUndefined($scope.filterPropertiesList)) {
                    $scope.filterPropertiesList = {};
                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName($scope.collectionConfig.baseEntityAlias);
                    filterPropertiesPromise.then(function (value) {
                        metadataService.setPropertiesList(value, $scope.collectionConfig.baseEntityAlias);
                        $scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias($scope.collectionConfig.baseEntityAlias);
                        metadataService.formatPropertiesList($scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias], $scope.collectionConfig.baseEntityAlias);
                    });
                }
                unbindCollectionObserver();
            }
        });
        var filterItemCounter = function (filterGroupArray) {
            var filterItemCount = 0;
            if (!angular.isDefined(filterGroupArray)) {
                filterGroupArray = $scope.collectionConfig.filterGroups[0].filterGroup;
            }
            //Start out loop
            for (var index in filterGroupArray) {
                //If filter isn't new then increment the count
                if (!filterGroupArray[index].$$isNew && !angular.isDefined(filterGroupArray[index].filterGroup)) {
                    filterItemCount++;
                    // If there are nested filter groups run introspectively
                }
                else if (angular.isDefined(filterGroupArray[index].filterGroup)) {
                    //Call function recursively
                    filterItemCount += filterItemCounter(filterGroupArray[index].filterGroup);
                    //Otherwise make like the foo fighters and "Break Out!"
                }
                else {
                    break;
                }
            }
            return filterItemCount;
        };
        $scope.getCollection();
        $scope.copyExistingCollection = function () {
            $scope.collection.collectionConfig = $scope.selectedExistingCollection;
        };
        $scope.setSelectedExistingCollection = function (selectedExistingCollection) {
            $scope.selectedExistingCollection = selectedExistingCollection;
        };
        $scope.setSelectedFilterProperty = function (selectedFilterProperty) {
            $scope.selectedFilterProperty = selectedFilterProperty;
        };
        $scope.loadingCollection = false;
        var searchPromise;
        $scope.searchCollection = function () {
            if (searchPromise) {
                $timeout.cancel(searchPromise);
            }
            searchPromise = $timeout(function () {
                //$log.debug('search with keywords');
                //$log.debug($scope.keywords);
                //Set current page here so that the pagination does not break when getting collection
                $scope.paginator.setCurrentPage(1);
                $scope.loadingCollection = true;
            }, 500);
        };
        $scope.filterCount = collectionService.getFilterCount;
        //
        $scope.hideExport = true;
        $scope.saveNewCollection = function ($index) {
            if ($scope.closeSaving)
                return;
            $scope.closeSaving = true;
            if (!angular.isUndefined(selectionService.getSelections('collectionSelection'))
                && (selectionService.getSelections('collectionSelection').length > 0)) {
                $scope.collectionConfig.filterGroups[0].filterGroup = [
                    {
                        "displayPropertyIdentifier": rbkeyService.getRBKey("entity." + $scope.myCollection.baseEntityName.toLowerCase() + "." + $scope.myCollection.collection.$$getIDName().toLowerCase()),
                        "propertyIdentifier": $scope.myCollection.baseEntityAlias + "." + $scope.myCollection.collection.$$getIDName(),
                        "comparisonOperator": "in",
                        "value": selectionService.getSelections('collectionSelection').join(),
                        "displayValue": selectionService.getSelections('collectionSelection').join(),
                        "ormtype": "string",
                        "fieldtype": "id",
                        "conditionDisplay": "In List"
                    }
                ];
            }
            $scope.newCollection.data.collectionConfig = $scope.collectionConfig;
            if ($scope.newCollection.data.collectionConfig.baseEntityName.lastIndexOf(hibachiConfig.applicationKey, 0) !== 0) {
                $scope.newCollection.data.collectionConfig.baseEntityName = hibachiConfig.applicationKey + $scope.newCollection.data.collectionConfig.baseEntityName;
            }
            $scope.newCollection.$$save().then(function () {
                observerService.notify('addCollection', $scope.newCollection.data);
                selectionService.clearSelection('collectionSelection');
                dialogService.removePageDialog($index);
                $scope.closeSaving = false;
            }, function () {
                $scope.closeSaving = false;
            });
        };
    }
    return CreateCollection;
}());
exports.CreateCollection = CreateCollection;


/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CollectionCreateController = /** @class */ (function () {
    //@ngInject
    function CollectionCreateController($scope, collectionConfigService) {
        var _this = this;
        this.$scope = $scope;
        this.collectionConfigService = collectionConfigService;
        this.$scope.entity_createcollectionCtrl = {};
        this.$scope.entity_createcollectionCtrl.baseCollections = [];
        this.collection = this.collectionConfigService.newCollectionConfig('Collection');
        this.collection.setDisplayProperties('collectionID,collectionName');
        this.getBaseCollections('Access');
        //on select change get collection
        this.$scope.entity_createcollectionCtrl.collectionObjectChanged = function () {
            _this.getBaseCollections(_this.$scope.entity_createcollectionCtrl.selectedOption);
        };
    }
    CollectionCreateController.prototype.getBaseCollections = function (baseCollectionObject) {
        var _this = this;
        this.collection.clearFilters();
        this.collection.addFilter('collectionObject', baseCollectionObject);
        this.collection.setPageShow(50);
        this.collection.getEntity().then(function (res) {
            _this.$scope.entity_createcollectionCtrl.baseCollections = res.pageRecords;
        });
    };
    return CollectionCreateController;
}());
exports.CollectionCreateController = CollectionCreateController;


/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var AggregateFilter = /** @class */ (function () {
    function AggregateFilter() {
    }
    //@ngInject
    AggregateFilter.Factory = function ($filter) {
        return function (property) {
            return property.filter(function (item) {
                if (item.fieldtype && item.fieldtype !== 'id') {
                    return false;
                }
                if (item.ormtype && ['big_decimal', 'double', 'float', 'integer'].indexOf(item.ormtype) < 0) {
                    return false;
                }
                return true;
            });
        };
    };
    return AggregateFilter;
}());
exports.AggregateFilter = AggregateFilter;


/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var Column = /** @class */ (function () {
    function Column(propertyIdentifier, title, isVisible, isDeletable, isSearchable, isExportable, persistent, ormtype, attributeID, attributeSetObject, type) {
        if (isVisible === void 0) { isVisible = true; }
        if (isDeletable === void 0) { isDeletable = true; }
        if (isSearchable === void 0) { isSearchable = true; }
        if (isExportable === void 0) { isExportable = true; }
        this.propertyIdentifier = propertyIdentifier;
        this.title = title;
        this.isVisible = isVisible;
        this.isDeletable = isDeletable;
        this.isSearchable = isSearchable;
        this.isExportable = isExportable;
        this.persistent = persistent;
        this.ormtype = ormtype;
        this.attributeID = attributeID;
        this.attributeSetObject = attributeSetObject;
        this.type = type;
    }
    return Column;
}());
exports.Column = Column;
var Filter = /** @class */ (function () {
    function Filter(propertyIdentifier, value, comparisonOperator, logicalOperator, displayPropertyIdentifier, displayValue, hidden, pattern) {
        if (hidden === void 0) { hidden = false; }
        this.propertyIdentifier = propertyIdentifier;
        this.value = value;
        this.comparisonOperator = comparisonOperator;
        this.logicalOperator = logicalOperator;
        this.displayPropertyIdentifier = displayPropertyIdentifier;
        this.displayValue = displayValue;
        this.hidden = hidden;
        this.pattern = pattern;
    }
    return Filter;
}());
exports.Filter = Filter;
var CollectionFilter = /** @class */ (function () {
    function CollectionFilter(propertyIdentifier, displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly) {
        if (readOnly === void 0) { readOnly = false; }
        this.propertyIdentifier = propertyIdentifier;
        this.displayPropertyIdentifier = displayPropertyIdentifier;
        this.displayValue = displayValue;
        this.collectionID = collectionID;
        this.criteria = criteria;
        this.fieldtype = fieldtype;
        this.readOnly = readOnly;
    }
    return CollectionFilter;
}());
exports.CollectionFilter = CollectionFilter;
var Join = /** @class */ (function () {
    function Join(associationName, alias) {
        this.associationName = associationName;
        this.alias = alias;
    }
    return Join;
}());
exports.Join = Join;
var OrderBy = /** @class */ (function () {
    function OrderBy(propertyIdentifier, direction) {
        this.propertyIdentifier = propertyIdentifier;
        this.direction = direction;
    }
    return OrderBy;
}());
exports.OrderBy = OrderBy;
var CollectionConfig = /** @class */ (function () {
    // @ngInject
    function CollectionConfig(rbkeyService, $hibachi, utilityService, observerService, baseEntityName, baseEntityAlias, columns, keywordColumns, filterGroups, keywordFilterGroups, joins, orderBy, groupBys, id, currentPage, pageShow, keywords, allRecords, dirtyRead, isDistinct) {
        if (keywordColumns === void 0) { keywordColumns = []; }
        if (filterGroups === void 0) { filterGroups = [{ filterGroup: [] }]; }
        if (keywordFilterGroups === void 0) { keywordFilterGroups = [{ filterGroup: [] }]; }
        if (currentPage === void 0) { currentPage = 1; }
        if (pageShow === void 0) { pageShow = 10; }
        if (keywords === void 0) { keywords = ''; }
        if (allRecords === void 0) { allRecords = false; }
        if (dirtyRead === void 0) { dirtyRead = false; }
        if (isDistinct === void 0) { isDistinct = false; }
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.baseEntityName = baseEntityName;
        this.baseEntityAlias = baseEntityAlias;
        this.columns = columns;
        this.keywordColumns = keywordColumns;
        this.filterGroups = filterGroups;
        this.keywordFilterGroups = keywordFilterGroups;
        this.joins = joins;
        this.orderBy = orderBy;
        this.groupBys = groupBys;
        this.id = id;
        this.currentPage = currentPage;
        this.pageShow = pageShow;
        this.keywords = keywords;
        this.allRecords = allRecords;
        this.dirtyRead = dirtyRead;
        this.isDistinct = isDistinct;
        this.clearFilterGroups = function () {
            _this.filterGroups = [{ filterGroup: [] }];
            _this.keywordFilterGroups = [{ filterGroup: [] }];
            return _this;
        };
        this.newCollectionConfig = function (baseEntityName, baseEntityAlias) {
            return new CollectionConfig(_this.rbkeyService, _this.$hibachi, _this.utilityService, _this.observerService, baseEntityName, baseEntityAlias);
        };
        this.loadJson = function (jsonCollection) {
            //if json then make a javascript object else use the javascript object
            //if coldfusion has double encoded the json keep calling fromJson until it becomes an object
            while (angular.isString(jsonCollection)) {
                jsonCollection = angular.fromJson(jsonCollection);
            }
            _this.baseEntityAlias = jsonCollection.baseEntityAlias;
            _this.baseEntityName = jsonCollection.baseEntityName;
            if (angular.isDefined(jsonCollection.filterGroups)) {
                _this.validateFilter(jsonCollection.filterGroups);
                _this.filterGroups = jsonCollection.filterGroups;
            }
            _this.columns = jsonCollection.columns;
            _this.joins = jsonCollection.joins;
            _this.keywords = jsonCollection.keywords;
            _this.orderBy = jsonCollection.orderBy;
            _this.groupBys = jsonCollection.groupBys;
            _this.pageShow = jsonCollection.pageShow;
            _this.allRecords = jsonCollection.allRecords;
            if (jsonCollection.dirtyRead) {
                _this.dirtyRead = jsonCollection.dirtyRead;
            }
            _this.isDistinct = jsonCollection.isDistinct;
            _this.currentPage = jsonCollection.currentPage || 1;
            _this.pageShow = jsonCollection.pageShow || 10;
            _this.keywords = jsonCollection.keywords;
            return _this;
        };
        this.clone = function () {
            return _this.newCollectionConfig(_this.baseEntityName, _this.baseEntityAlias).loadJson(JSON.parse(JSON.stringify(_this.getCollectionConfig())));
        };
        this.loadFilterGroups = function (filterGroupsConfig) {
            if (filterGroupsConfig === void 0) { filterGroupsConfig = [{ filterGroup: [] }]; }
            _this.filterGroups = filterGroupsConfig;
            return _this;
        };
        this.loadColumns = function (columns) {
            _this.columns = columns;
            return _this;
        };
        this.getCollectionConfig = function (validate) {
            if (validate === void 0) { validate = true; }
            if (validate) {
                _this.validateFilter(_this.filterGroups);
            }
            return {
                baseEntityAlias: _this.baseEntityAlias,
                baseEntityName: _this.baseEntityName,
                columns: _this.columns,
                keywordColumns: _this.keywordColumns,
                filterGroups: _this.filterGroups,
                joins: _this.joins,
                groupBys: _this.groupBys,
                currentPage: _this.currentPage,
                pageShow: _this.pageShow,
                keywords: _this.keywords,
                defaultColumns: (!_this.columns || !_this.columns.length),
                allRecords: _this.allRecords,
                dirtyRead: _this.dirtyRead,
                isDistinct: _this.isDistinct,
                orderBy: _this.orderBy
            };
        };
        this.getEntityName = function () {
            return _this.baseEntityName.charAt(0).toUpperCase() + _this.baseEntityName.slice(1);
        };
        this.getOptions = function () {
            _this.validateFilter(_this.filterGroups);
            var columns = _this.columns;
            if (_this.keywords && _this.keywords.length && _this.keywordFilterGroups[0].filterGroup.length > 0) {
                var filters = _this.keywordFilterGroups;
            }
            else {
                var filters = _this.filterGroups;
            }
            var options = {
                columnsConfig: angular.toJson(columns),
                filterGroupsConfig: angular.toJson(filters),
                joinsConfig: angular.toJson(_this.joins),
                orderByConfig: angular.toJson(_this.orderBy),
                groupBysConfig: angular.toJson(_this.groupBys),
                currentPage: _this.currentPage,
                pageShow: _this.pageShow,
                keywords: _this.keywords,
                defaultColumns: (!_this.columns || !_this.columns.length),
                allRecords: _this.allRecords,
                dirtyRead: _this.dirtyRead,
                isDistinct: _this.isDistinct
            };
            if (angular.isDefined(_this.id)) {
                options['id'] = _this.id;
            }
            return options;
        };
        this.debug = function () {
            return _this;
        };
        this.formatPropertyIdentifier = function (propertyIdentifier, addJoin) {
            if (addJoin === void 0) { addJoin = false; }
            //if already starts with alias, strip it out
            if (propertyIdentifier.lastIndexOf(_this.baseEntityAlias, 0) === 0) {
                propertyIdentifier = propertyIdentifier.slice(_this.baseEntityAlias.length + 1);
            }
            var _propertyIdentifier = _this.baseEntityAlias;
            if (addJoin === true) {
                _propertyIdentifier += _this.processJoin(propertyIdentifier);
            }
            else {
                _propertyIdentifier += '.' + propertyIdentifier;
            }
            return _propertyIdentifier;
        };
        this.processJoin = function (propertyIdentifier) {
            var _propertyIdentifier = '', propertyIdentifierParts = propertyIdentifier.split('.'), current_collection = _this.collection;
            for (var i = 0; i < propertyIdentifierParts.length; i++) {
                if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
                    current_collection = _this.$hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
                    _propertyIdentifier += '_' + propertyIdentifierParts[i];
                    _this.addJoin(new Join(_propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1), _this.baseEntityAlias + _propertyIdentifier));
                }
                else {
                    _propertyIdentifier += '.' + propertyIdentifierParts[i];
                }
            }
            return _propertyIdentifier;
        };
        this.addJoin = function (join) {
            if (!_this.joins) {
                _this.joins = [];
            }
            var joinFound = false;
            angular.forEach(_this.joins, function (configJoin) {
                if (configJoin.alias === join.alias) {
                    joinFound = true;
                }
            });
            if (!joinFound) {
                _this.joins.push(join);
            }
            return _this;
        };
        this.addAlias = function (propertyIdentifier) {
            var parts = propertyIdentifier.split('.');
            if (parts.length > 1 && parts[0] !== _this.baseEntityAlias) {
                return _this.baseEntityAlias + '.' + propertyIdentifier;
            }
            return propertyIdentifier;
        };
        this.addColumn = function (column, title, options) {
            if (title === void 0) { title = ''; }
            if (options === void 0) { options = {}; }
            if (!_this.columns || options.aggregate != null || _this.utilityService.ArrayFindByPropertyValue(_this.columns, 'propertyIdentifier', column) === -1) {
                var isVisible = true, isDeletable = true, isSearchable = true, isExportable = true, persistent, type = 'none', ormtype = 'string', lastProperty = column.split('.').pop(), isKeywordColumn = true, isOnlyKeywordColumn = false;
                var lastEntity = _this.$hibachi.getEntityExample(_this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, column));
                if (angular.isUndefined(lastEntity)) {
                    throw ("You have passed an incorrect entity name to a collection config");
                }
                if (angular.isUndefined(_this.columns)) {
                    _this.columns = [];
                }
                //hide id columns
                if (angular.isDefined(options['isVisible'])) {
                    isVisible = options['isVisible'];
                }
                if (angular.isUndefined(options.isVisible) &&
                    column.substring(column.length - 2) === "ID") {
                    isVisible = false;
                }
                if (angular.isDefined(options['isDeletable'])) {
                    isDeletable = options['isDeletable'];
                }
                if (angular.isDefined(options['isSearchable'])) {
                    isSearchable = options['isSearchable'];
                }
                if (angular.isDefined(options['isExportable'])) {
                    isExportable = options['isExportable'];
                }
                if (angular.isUndefined(options['isExportable']) && !isVisible) {
                    isExportable = false;
                }
                if (angular.isDefined(options['ormtype'])) {
                    ormtype = options['ormtype'];
                }
                else if (lastEntity.metaData[lastProperty] && lastEntity.metaData[lastProperty].ormtype) {
                    ormtype = lastEntity.metaData[lastProperty].ormtype;
                }
                if (angular.isDefined(options['type']) && options['type'] != 'none') {
                    type = options['type'];
                }
                else if (lastEntity.metaData[lastProperty] && lastEntity.metaData[lastProperty].hb_formattype) {
                    type = lastEntity.metaData[lastProperty].hb_formattype;
                }
                if (angular.isDefined(options['isKeywordColumn'])) {
                    isKeywordColumn = options['isKeywordColumn'];
                }
                if (angular.isDefined(options['isOnlyKeywordColumn'])) {
                    isOnlyKeywordColumn = options['isOnlyKeywordColumn'];
                }
                if (angular.isDefined(lastEntity.metaData[lastProperty])) {
                    persistent = lastEntity.metaData[lastProperty].persistent;
                }
                var columnObject = new Column(column, title, isVisible, isDeletable, isSearchable, isExportable, persistent, ormtype, options['attributeID'], options['attributeSetObject'], type);
                if (options['aggregate']) {
                    columnObject['aggregate'] = options['aggregate'],
                        columnObject['aggregateAlias'] = title;
                }
                //add any non-conventional options
                for (var key in options) {
                    if (!columnObject[key]) {
                        columnObject[key] = options[key];
                    }
                }
                if (!isOnlyKeywordColumn) {
                    _this.columns.push(columnObject);
                }
                if (isKeywordColumn) {
                    _this.keywordColumns.push(columnObject);
                }
            }
            return _this;
        };
        this.setDisplayProperties = function (propertyIdentifier, title, options) {
            if (title === void 0) { title = ''; }
            if (options === void 0) { options = {}; }
            _this.addDisplayProperty(propertyIdentifier, title, options);
            return _this;
        };
        this.addDisplayAggregate = function (propertyIdentifier, aggregateFunction, aggregateAlias, options) {
            if (angular.isUndefined(aggregateAlias)) {
                aggregateAlias = propertyIdentifier.replace(/\./g, '_') + aggregateFunction;
            }
            var column = {
                propertyIdentifier: _this.formatPropertyIdentifier(propertyIdentifier, true),
                title: _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, propertyIdentifier) + "." + _this.utilityService.listLast(propertyIdentifier)),
                aggregate: {
                    aggregateFunction: aggregateFunction,
                    aggregateAlias: aggregateAlias
                }
            };
            angular.extend(column, options);
            //Add columns
            _this.addColumn(column.propertyIdentifier, undefined, column);
            return _this;
        };
        this.addGroupBy = function (groupByAlias) {
            if (!_this.groupBys) {
                _this.groupBys = '';
            }
            _this.groupBys = _this.utilityService.listAppendUnique(_this.groupBys, groupByAlias);
            return _this;
        };
        this.addDisplayProperty = function (propertyIdentifier, title, options) {
            if (title === void 0) { title = ''; }
            if (options === void 0) { options = {}; }
            var _DividedColumns = propertyIdentifier.trim().split(',');
            var _DividedTitles = title.trim().split(',');
            var join = propertyIdentifier.split('.').length > 1;
            _DividedColumns.forEach(function (column, index) {
                column = column.trim();
                if (angular.isDefined(_DividedTitles[index]) && _DividedTitles[index].trim() != '') {
                    title = _DividedTitles[index].trim();
                }
                else {
                    title = _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, column) + "." + _this.utilityService.listLast(column, "."));
                }
                _this.addColumn(_this.formatPropertyIdentifier(column, join), title, options);
            });
            return _this;
        };
        this.addFilter = function (propertyIdentifier, value, comparisonOperator, logicalOperator, hidden, isKeywordFilter, isOnlyKeywordFilter) {
            if (comparisonOperator === void 0) { comparisonOperator = '='; }
            if (hidden === void 0) { hidden = false; }
            if (isKeywordFilter === void 0) { isKeywordFilter = true; }
            if (isOnlyKeywordFilter === void 0) { isOnlyKeywordFilter = false; }
            if (!_this.filterGroups[0].filterGroup.length) {
                logicalOperator = undefined;
            }
            if (propertyIdentifier.split('.').length > 1) {
                _this.processJoin(propertyIdentifier);
            }
            //create filter
            var filter = _this.createFilter(propertyIdentifier, value, comparisonOperator, logicalOperator, hidden);
            if (!isOnlyKeywordFilter) {
                _this.filterGroups[0].filterGroup.push(filter);
            }
            if (isKeywordFilter) {
                _this.keywordFilterGroups[0].filterGroup.push(filter);
            }
            _this.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.addLikeFilter = function (propertyIdentifier, value, pattern, logicalOperator, displayPropertyIdentifier, hidden) {
            if (pattern === void 0) { pattern = '%w%'; }
            if (hidden === void 0) { hidden = false; }
            //if filterGroups does not exists then set a default
            if (!_this.filterGroups) {
                _this.filterGroups = [{ filterGroup: [] }];
            }
            //if filterGroups is longer than 0 then we at least need to default the logical Operator to AND
            if (_this.filterGroups[0].filterGroup.length && !logicalOperator)
                logicalOperator = 'AND';
            var join = propertyIdentifier.split('.').length > 1;
            if (angular.isUndefined(displayPropertyIdentifier)) {
                displayPropertyIdentifier = _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, propertyIdentifier) + "." + _this.utilityService.listLast(propertyIdentifier));
            }
            //create filter group
            var filter = new Filter(_this.formatPropertyIdentifier(propertyIdentifier, join), value, 'like', logicalOperator, displayPropertyIdentifier, value, hidden, pattern);
            _this.filterGroups[0].filterGroup.push(filter);
            _this.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.createFilter = function (propertyIdentifier, value, comparisonOperator, logicalOperator, hidden) {
            if (comparisonOperator === void 0) { comparisonOperator = '='; }
            if (hidden === void 0) { hidden = false; }
            //if filterGroups does not exists then set a default
            if (!_this.filterGroups) {
                _this.filterGroups = [{ filterGroup: [] }];
            }
            //if filterGroups is longer than 0 then we at least need to default the logical Operator to AND
            if (_this.filterGroups[0].filterGroup.length && !logicalOperator)
                logicalOperator = 'AND';
            var join = propertyIdentifier.split('.').length > 1;
            //create filter group
            var filter = new Filter(_this.formatPropertyIdentifier(propertyIdentifier, join), value, comparisonOperator, logicalOperator, propertyIdentifier.split('.').pop(), value, hidden);
            return filter;
        };
        this.addFilterGroup = function (filterGroup) {
            var group = {
                filterGroup: [],
                logicalOperator: 'AND'
            };
            for (var i = 0; i < filterGroup.length; i++) {
                var filter = _this.createFilter(filterGroup[i].propertyIdentifier, filterGroup[i].comparisonValue, filterGroup[i].comparisonOperator, filterGroup[i].logicalOperator, filterGroup[i].hidden);
                group.filterGroup.push(filter);
            }
            _this.filterGroups[0].filterGroup.push(group);
            _this.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.removeFilter = function (propertyIdentifier, value, comparisonOperator) {
            if (comparisonOperator === void 0) { comparisonOperator = '='; }
            _this.removeFilterHelper(_this.filterGroups, propertyIdentifier, value, comparisonOperator);
            _this.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.removeFilterByDisplayPropertyIdentifier = function (displayPropertyIdentifier) {
            _this.removeFromFilterGroupsByPropertyIdentifier(_this.filterGroups, displayPropertyIdentifier);
            _this.removeFromFilterGroupsByPropertyIdentifier(_this.keywordFilterGroups, displayPropertyIdentifier);
        };
        this.removeFromFilterGroupsByPropertyIdentifier = function (filterGroups, displayPropertyIdentifier) {
            for (var j = 0; j < filterGroups.length; j++) {
                var filterGroup = filterGroups[j].filterGroup;
                for (var i = 0; i < filterGroup.length; i++) {
                    var filter = filterGroup[i];
                    if (filter.displayPropertyIdentifier == displayPropertyIdentifier) {
                        filterGroup.splice(i, 1);
                        i--;
                    }
                }
            }
        };
        this.removeFilterHelper = function (filter, propertyIdentifier, value, comparisonOperator, currentGroup) {
            if (angular.isUndefined(currentGroup)) {
                currentGroup = filter;
            }
            if (angular.isArray(filter)) {
                angular.forEach(filter, function (key) {
                    _this.removeFilterHelper(key, propertyIdentifier, value, comparisonOperator, filter);
                });
            }
            else if (angular.isArray(filter.filterGroup)) {
                _this.removeFilterHelper(filter.filterGroup, propertyIdentifier, value, comparisonOperator, filter.filterGroup);
            }
            else {
                if (filter.propertyIdentifier == propertyIdentifier && filter.value == value && filter.comparisonOperator == comparisonOperator) {
                    currentGroup.splice(currentGroup.indexOf(filter), 1);
                }
            }
        };
        this.addCollectionFilter = function (propertyIdentifier, displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly) {
            if (criteria === void 0) { criteria = 'One'; }
            if (readOnly === void 0) { readOnly = false; }
            _this.filterGroups[0].filterGroup.push(new CollectionFilter(_this.formatPropertyIdentifier(propertyIdentifier), displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly));
            _this.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        //orderByList in this form: "property|direction" concrete: "skuName|ASC"
        this.setOrderBy = function (orderByList) {
            var orderBys = orderByList.split(',');
            angular.forEach(orderBys, function (orderBy) {
                _this.addOrderBy(orderBy);
            });
            return _this;
        };
        this.clearOrderBy = function () {
            _this.orderBy = [];
        };
        this.addOrderBy = function (orderByString, formatPropertyIdentifier) {
            if (formatPropertyIdentifier === void 0) { formatPropertyIdentifier = true; }
            if (!_this.orderBy) {
                _this.orderBy = [];
            }
            var propertyIdentifier = _this.utilityService.listFirst(orderByString, '|');
            if (formatPropertyIdentifier) {
                propertyIdentifier = _this.formatPropertyIdentifier(propertyIdentifier);
            }
            var direction = _this.utilityService.listLast(orderByString, '|');
            var orderBy = {
                propertyIdentifier: propertyIdentifier,
                direction: direction
            };
            _this.orderBy.push(orderBy);
        };
        this.toggleOrderBy = function (formattedPropertyIdentifier, singleColumn) {
            if (singleColumn === void 0) { singleColumn = false; }
            if (!_this.orderBy) {
                _this.orderBy = [];
            }
            var found = false;
            for (var i = _this.orderBy.length - 1; i >= 0; i--) {
                if (_this.orderBy[i].propertyIdentifier == formattedPropertyIdentifier) {
                    found = true;
                    if (_this.orderBy[i].direction.toUpperCase() == "DESC") {
                        _this.orderBy[i].direction = "ASC";
                    }
                    else if (_this.orderBy[i].direction.toUpperCase() == "ASC") {
                        _this.orderBy.splice(i, 1);
                    }
                    break;
                }
            }
            var direction = 'desc';
            if (singleColumn) {
                _this.orderBy = [];
                for (var i = 0; i < _this.columns.length; i++) {
                    if (!_this.columns[i]["sorting"]) {
                        _this.columns[i]["sorting"] = {};
                    }
                    if (angular.isUndefined(_this.columns[i]["sorting"]["active"])) {
                        _this.columns[i]["sorting"]["active"] = false;
                    }
                    if (_this.columns[i]['propertyIdentifier'] == formattedPropertyIdentifier) {
                        _this.columns[i]["sorting"]["active"] = true;
                        _this.columns[i]["sorting"]["priority"] = 1;
                        if (!_this.columns[i]["sorting"]["sortOrder"] || _this.columns[i]["sorting"]["sortOrder"] === 'desc') {
                            _this.columns[i]["sorting"]["sortOrder"] = 'asc';
                            direction = 'asc';
                        }
                        else {
                            _this.columns[i]["sorting"]["sortOrder"] = 'desc';
                            direction = 'desc';
                        }
                    }
                    else if (_this.columns[i]["sorting"] && _this.columns[i]["sorting"]["active"]) {
                        _this.columns[i]["sorting"]["active"] = false;
                        _this.columns[i]["sorting"]["sortOrder"] = 'asc';
                    }
                }
            }
            _this.addOrderBy(formattedPropertyIdentifier + '|' + direction, false);
            _this.notify('swPaginationAction', { type: 'setCurrentPage', payload: 1 });
        };
        this.removeOrderBy = function (formattedPropertyIdentifier) {
            angular.forEach(_this.orderBy, function (orderBy, index) {
                if (orderBy.propertyIdentifier == formattedPropertyIdentifier) {
                    _this.orderBy.splice(index, 1);
                    return true;
                }
            });
            return false;
        };
        this.setCurrentPage = function (pageNumber) {
            _this.currentPage = pageNumber;
            return _this;
        };
        this.getCurrentPage = function () {
            return _this.currentPage;
        };
        this.setPageShow = function (NumberOfPages) {
            _this.pageShow = NumberOfPages;
            return _this;
        };
        this.getPageShow = function () {
            return _this.pageShow;
        };
        this.setAllRecords = function (allFlag) {
            if (allFlag === void 0) { allFlag = false; }
            _this.allRecords = allFlag;
            return _this;
        };
        this.setDistinct = function (flag) {
            if (flag === void 0) { flag = true; }
            _this.isDistinct = flag;
            return _this;
        };
        this.setDirtyRead = function (flag) {
            if (flag === void 0) { flag = false; }
            _this.dirtyRead = flag;
            return _this;
        };
        this.setKeywords = function (keyword) {
            _this.keywords = keyword;
            return _this;
        };
        this.setId = function (id) {
            _this.id = id;
            return _this;
        };
        this.setEventID = function (eventID) {
            _this.eventID = eventID;
            return _this;
        };
        this.hasFilters = function () {
            return (_this.filterGroups.length && _this.filterGroups[0].filterGroup.length);
        };
        this.hasColumns = function () {
            return _this.columns != null && _this.columns.length > 0;
        };
        this.clearFilters = function () {
            _this.filterGroups = [{ filterGroup: [] }];
            return _this;
        };
        this.getEntity = function (id) {
            if (angular.isDefined(id)) {
                _this.setId(id);
            }
            return _this.$hibachi.getEntity(_this.baseEntityName, _this.getOptions());
        };
        this.validateFilter = function (filter, currentGroup) {
            if (angular.isUndefined(currentGroup)) {
                currentGroup = filter;
            }
            if (angular.isArray(filter)) {
                angular.forEach(filter, function (key) {
                    _this.validateFilter(key, filter);
                });
            }
            else if (angular.isArray(filter.filterGroup)) {
                _this.validateFilter(filter.filterGroup, filter.filterGroup);
            }
            else {
                if ((!filter.comparisonOperator || !filter.comparisonOperator.length) && (!filter.propertyIdentifier || !filter.propertyIdentifier.length)) {
                    var index = currentGroup.indexOf(filter);
                    if (index > -1) {
                        _this.notify('filterItemAction', {
                            action: 'remove',
                            filterItemIndex: index
                        });
                        currentGroup.splice(index, 1);
                    }
                }
            }
        };
        this.getColumns = function () {
            if (!_this.columns) {
                _this.columns = [];
            }
            return _this.columns;
        };
        this.setColumns = function (columns) {
            _this.columns = columns;
            return _this;
        };
        this.$hibachi = $hibachi;
        this.rbkeyService = rbkeyService;
        if (angular.isDefined(this.baseEntityName)) {
            this.collection = this.$hibachi.getEntityExample(this.baseEntityName);
            if (angular.isUndefined(this.baseEntityAlias)) {
                this.baseEntityAlias = '_' + this.baseEntityName.toLowerCase();
            }
        }
    }
    Object.defineProperty(CollectionConfig.prototype, "collectionConfigString", {
        get: function () {
            return angular.toJson(this.getCollectionConfig(false));
        },
        enumerable: true,
        configurable: true
    });
    CollectionConfig.prototype.notify = function (name, data) {
        if (angular.isDefined(this.eventID)) {
            this.observerService.notifyById(name, this.eventID, data);
        }
        else {
            this.observerService.notify(name, data);
        }
    };
    return CollectionConfig;
}());
exports.CollectionConfig = CollectionConfig;


/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(15);
var CollectionService = /** @class */ (function (_super) {
    __extends(CollectionService, _super);
    //@ngInject
    function CollectionService($injector, $hibachi, utilityService, $filter, $log) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Collection') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.$filter = $filter;
        _this.$log = $log;
        _this.get = function () {
            return _this._pageDialogs || [];
        };
        //test
        _this.setFilterCount = function (count) {
            _this.$log.debug('incrementFilterCount');
            _this._filterCount = count;
        };
        _this.getFilterCount = function () {
            return _this._filterCount;
        };
        _this.getColumns = function () {
            return _this._collection.collectionConfig.columns;
        };
        _this.getFilterPropertiesList = function () {
            return _this._filterPropertiesList;
        };
        _this.getFilterPropertiesListByBaseEntityAlias = function (baseEntityAlias) {
            return _this._filterPropertiesList[baseEntityAlias];
        };
        _this.setFilterPropertiesList = function (value, key) {
            if (angular.isUndefined(_this._filterPropertiesList[key])) {
                _this._filterPropertiesList[key] = value;
            }
        };
        _this.stringifyJSON = function (jsonObject) {
            var jsonString = angular.toJson(jsonObject);
            return jsonString;
        };
        _this.removeFilterItem = function (filterItem, filterGroup) {
            filterGroup.pop(filterGroup.indexOf(filterItem));
        };
        _this.selectFilterItem = function (filterItem) {
            if (filterItem.$$isClosed) {
                for (var i in filterItem.$$siblingItems) {
                    filterItem.$$siblingItems[i].$$isClosed = true;
                    filterItem.$$siblingItems[i].$$disabled = true;
                }
                filterItem.$$isClosed = false;
                filterItem.$$disabled = false;
                filterItem.setItemInUse(true);
            }
            else {
                for (var i in filterItem.$$siblingItems) {
                    filterItem.$$siblingItems[i].$$disabled = false;
                }
                filterItem.$$isClosed = true;
                filterItem.setItemInUse(false);
            }
        };
        _this.selectFilterGroupItem = function (filterGroupItem) {
            if (filterGroupItem.$$isClosed) {
                for (var i in filterGroupItem.$$siblingItems) {
                    filterGroupItem.$$siblingItems[i].$$disabled = true;
                }
                filterGroupItem.$$isClosed = false;
                filterGroupItem.$$disabled = false;
            }
            else {
                for (var i in filterGroupItem.$$siblingItems) {
                    filterGroupItem.$$siblingItems[i].$$disabled = false;
                }
                filterGroupItem.$$isClosed = true;
            }
            filterGroupItem.setItemInUse(!filterGroupItem.$$isClosed);
        };
        _this.newFilterItem = function (filterItemGroup, setItemInUse, prepareForFilterGroup) {
            if (angular.isUndefined(prepareForFilterGroup)) {
                prepareForFilterGroup = false;
            }
            var filterItem = {
                displayPropertyIdentifier: "",
                propertyIdentifier: "",
                comparisonOperator: "",
                value: "",
                $$disabled: false,
                $$isClosed: true,
                $$isNew: true,
                $$siblingItems: filterItemGroup,
                setItemInUse: setItemInUse
            };
            if (filterItemGroup.length !== 0) {
                filterItem.logicalOperator = "AND";
            }
            if (prepareForFilterGroup === true) {
                filterItem.$$prepareForFilterGroup = true;
            }
            filterItemGroup.push(filterItem);
            _this.selectFilterItem(filterItem);
            return (filterItemGroup.length - 1);
        };
        _this.newFilterGroupItem = function (filterItemGroup, setItemInUse) {
            var filterGroupItem = {
                filterGroup: [],
                $$disabled: "false",
                $$isClosed: "true",
                $$siblingItems: filterItemGroup,
                $$isNew: "true",
                setItemInUse: setItemInUse
            };
            if (filterItemGroup.length !== 0) {
                filterGroupItem.logicalOperator = "AND";
            }
            filterItemGroup.push(filterGroupItem);
            _this.selectFilterGroupItem(filterGroupItem);
            _this.newFilterItem(filterGroupItem.filterGroup, setItemInUse, undefined);
        };
        _this.transplantFilterItemIntoFilterGroup = function (filterGroup, filterItem) {
            var filterGroupItem = {
                filterGroup: [],
                $$disabled: "false",
                $$isClosed: "true",
                $$isNew: "true"
            };
            if (angular.isDefined(filterItem.logicalOperator)) {
                filterGroupItem.logicalOperator = filterItem.logicalOperator;
                delete filterItem.logicalOperator;
            }
            filterGroupItem.setItemInUse = filterItem.setItemInUse;
            filterGroupItem.$$siblingItems = filterItem.$$siblingItems;
            filterItem.$$siblingItems = [];
            filterGroup.pop(filterGroup.indexOf(filterItem));
            filterItem.$$prepareForFilterGroup = false;
            filterGroupItem.filterGroup.push(filterItem);
            filterGroup.push(filterGroupItem);
        };
        _this.formatFilterPropertiesList = function (filterPropertiesList, propertyIdentifier) {
            _this.$log.debug('format Filter Properties List arguments 2');
            _this.$log.debug(filterPropertiesList);
            _this.$log.debug(propertyIdentifier);
            var simpleGroup = {
                $$group: 'simple',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(simpleGroup);
            var drillDownGroup = {
                $$group: 'drilldown',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(drillDownGroup);
            var compareCollections = {
                $$group: 'compareCollections',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(compareCollections);
            var attributeCollections = {
                $$group: 'attribute',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(attributeCollections);
            for (var i in filterPropertiesList.data) {
                if (angular.isDefined(filterPropertiesList.data[i].ormtype)) {
                    if (angular.isDefined(filterPropertiesList.data[i].attributeID)) {
                        filterPropertiesList.data[i].$$group = 'attribute';
                    }
                    else {
                        filterPropertiesList.data[i].$$group = 'simple';
                    }
                }
                if (angular.isDefined(filterPropertiesList.data[i].fieldtype)) {
                    if (filterPropertiesList.data[i].fieldtype === 'id') {
                        filterPropertiesList.data[i].$$group = 'simple';
                    }
                    if (filterPropertiesList.data[i].fieldtype === 'many-to-one') {
                        filterPropertiesList.data[i].$$group = 'drilldown';
                    }
                    if (filterPropertiesList.data[i].fieldtype === 'many-to-many' || filterPropertiesList.data[i].fieldtype === 'one-to-many') {
                        filterPropertiesList.data[i].$$group = 'compareCollections';
                    }
                }
                filterPropertiesList.data[i].propertyIdentifier = propertyIdentifier + '.' + filterPropertiesList.data[i].name;
            }
            filterPropertiesList.data = _this._orderBy(filterPropertiesList.data, ['-$$group', 'propertyIdentifier'], false);
        };
        _this.orderBy = function (propertiesList, predicate, reverse) {
            return _this._orderBy(propertiesList, predicate, reverse);
        };
        _this.$filter = $filter;
        _this.$log = $log;
        _this._collection = null;
        _this._collectionConfig = null;
        _this._filterPropertiesList = {};
        _this._filterCount = 0;
        _this._orderBy = $filter('orderBy');
        return _this;
    }
    return CollectionService;
}(baseentityservice_1.BaseEntityService));
exports.CollectionService = CollectionService;


/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWActionCallerController = /** @class */ (function () {
    //@ngInject
    function SWActionCallerController($scope, $element, $templateRequest, $compile, $timeout, corePartialsPath, utilityService, observerService, $hibachi, rbkeyService, hibachiPathBuilder) {
        var _this = this;
        this.$scope = $scope;
        this.$element = $element;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.$timeout = $timeout;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.$hibachi = $hibachi;
        this.rbkeyService = rbkeyService;
        this.$onInit = function () {
            //Check if is NOT a ngRouter
            if (angular.isUndefined(_this.isAngularRoute)) {
                _this.isAngularRoute = _this.utilityService.isAngularRoute();
            }
            if (!_this.isAngularRoute) {
                _this.actionUrl = _this.$hibachi.buildUrl(_this.action, _this.queryString);
            }
            else {
                _this.actionUrl = '#!/entity/' + _this.action + '/' + _this.queryString.split('=')[1];
            }
            //            this.class = this.utilityService.replaceAll(this.utilityService.replaceAll(this.getAction(),':',''),'.','') + ' ' + this.class;
            _this.type = _this.type || 'link';
            if (angular.isDefined(_this.titleRbKey)) {
                _this.title = _this.rbkeyService.getRBKey(_this.titleRbKey);
            }
            if (angular.isUndefined(_this.text)) {
                _this.text = _this.title;
            }
            if (_this.type == "button") {
                //handle submit.
                /** in order to attach the correct controller to local vm, we need a watch to bind */
                var unbindWatcher = _this.$scope.$watch(function () { return _this.formController; }, function (newValue, oldValue) {
                    if (newValue !== undefined) {
                        _this.formController = newValue;
                    }
                    unbindWatcher();
                });
            }
            //            this.actionItem = this.getActionItem();
            //            this.actionItemEntityName = this.getActionItemEntityName();
            //            this.text = this.getText();
            //            if(this.getDisabled()){
            //                this.getDisabledText();
            //            }else if(this.getConfirm()){
            //                this.getConfirmText();
            //            }
            //
            //            if(this.modalFullWidth && !this.getDisabled()){
            //                this.class = this.class + " modalload-fullwidth";
            //            }
            //
            //            if(this.modal && !this.getDisabled() && !this.modalFullWidth){
            //                this.class = this.class + " modalload";
            //            }
            /*need authentication lookup by api to disable
            <cfif not attributes.hibachiScope.authenticateAction(action=attributes.action)>
                <cfset attributes.class &= " disabled" />
            </cfif>
            */
            if (_this.eventListeners) {
                for (var key in _this.eventListeners) {
                    _this.observerService.attach(_this.eventListeners[key], key);
                }
            }
        };
        this.submit = function () {
            _this.$timeout(function () {
                if (!_this.form) {
                    _this.$scope.$root.slatwall.doAction(_this.action);
                }
                else if (_this.form.$valid) {
                    _this.formController.submit(_this.action);
                }
            });
        };
        this.getAction = function () {
            return _this.action || '';
        };
        this.getActionItem = function () {
            return _this.utilityService.listLast(_this.getAction(), '.');
        };
        this.getActionItemEntityName = function () {
            var firstFourLetters = _this.utilityService.left(_this.actionItem, 4);
            var firstSixLetters = _this.utilityService.left(_this.actionItem, 6);
            var minus4letters = _this.utilityService.right(_this.actionItem, 4);
            var minus6letters = _this.utilityService.right(_this.actionItem, 6);
            var actionItemEntityName = "";
            if (firstFourLetters === 'list' && _this.actionItem.length > 4) {
                actionItemEntityName = minus4letters;
            }
            else if (firstFourLetters === 'edit' && _this.actionItem.length > 4) {
                actionItemEntityName = minus4letters;
            }
            else if (firstFourLetters === 'save' && _this.actionItem.length > 4) {
                actionItemEntityName = minus4letters;
            }
            else if (firstSixLetters === 'create' && _this.actionItem.length > 6) {
                actionItemEntityName = minus6letters;
            }
            else if (firstSixLetters === 'detail' && _this.actionItem.length > 6) {
                actionItemEntityName = minus6letters;
            }
            else if (firstSixLetters === 'delete' && _this.actionItem.length > 6) {
                actionItemEntityName = minus6letters;
            }
            return actionItemEntityName;
        };
        this.getTitle = function () {
            //if title is undefined then use text
            if (angular.isUndefined(_this.title) || !_this.title.length) {
                _this.title = _this.getText();
            }
            return _this.title;
        };
        this.getTextByRBKeyByAction = function (actionItemType, plural) {
            if (plural === void 0) { plural = false; }
            var navRBKey = _this.rbkeyService.getRBKey('admin.define.' + actionItemType + '_nav');
            var entityRBKey = '';
            var replaceKey = '';
            if (plural) {
                entityRBKey = _this.rbkeyService.getRBKey('entity.' + _this.actionItemEntityName + '_plural');
                replaceKey = '${itemEntityNamePlural}';
            }
            else {
                entityRBKey = _this.rbkeyService.getRBKey('entity.' + _this.actionItemEntityName);
                replaceKey = '${itemEntityName}';
            }
            return _this.utilityService.replaceAll(navRBKey, replaceKey, entityRBKey);
        };
        this.getText = function () {
            //if we don't have text then make it up based on rbkeys
            if (angular.isUndefined(_this.text) || (angular.isDefined(_this.text) && !_this.text.length)) {
                _this.text = _this.rbkeyService.getRBKey(_this.utilityService.replaceAll(_this.getAction(), ":", ".") + '_nav');
                var minus8letters = _this.utilityService.right(_this.text, 8);
                //if rbkey is still missing. then can we infer it
                if (minus8letters === '_missing') {
                    var firstFourLetters = _this.utilityService.left(_this.actionItem, 4);
                    var firstSixLetters = _this.utilityService.left(_this.actionItem, 6);
                    var minus4letters = _this.utilityService.right(_this.actionItem, 4);
                    var minus6letters = _this.utilityService.right(_this.actionItem, 6);
                    if (firstFourLetters === 'list' && _this.actionItem.length > 4) {
                        _this.text = _this.getTextByRBKeyByAction('list', true);
                    }
                    else if (firstFourLetters === 'edit' && _this.actionItem.length > 4) {
                        _this.text = _this.getTextByRBKeyByAction('edit', false);
                    }
                    else if (firstFourLetters === 'save' && _this.actionItem.length > 4) {
                        _this.text = _this.getTextByRBKeyByAction('save', false);
                    }
                    else if (firstSixLetters === 'create' && _this.actionItem.length > 6) {
                        _this.text = _this.getTextByRBKeyByAction('create', false);
                    }
                    else if (firstSixLetters === 'detail' && _this.actionItem.length > 6) {
                        _this.text = _this.getTextByRBKeyByAction('detail', false);
                    }
                    else if (firstSixLetters === 'delete' && _this.actionItem.length > 6) {
                        _this.text = _this.getTextByRBKeyByAction('delete', false);
                    }
                }
                if (_this.utilityService.right(_this.text, 8)) {
                    _this.text = _this.rbkeyService.getRBKey(_this.utilityService.replaceAll(_this.getAction(), ":", "."));
                }
            }
            if (!_this.title || (_this.title && !_this.title.length)) {
                _this.title = _this.text;
            }
            return _this.text;
        };
        this.getDisabled = function () {
            //if item is disabled
            if (angular.isDefined(_this.disabled) && _this.disabled) {
                return true;
            }
            else {
                return false;
            }
        };
        this.getDisabledText = function () {
            if (_this.getDisabled()) {
                //and no disabled text specified
                if (angular.isUndefined(_this.disabledtext) || !_this.disabledtext.length) {
                    var disabledrbkey = _this.utilityService.replaceAll(_this.action, ':', '.') + '_disabled';
                    _this.disabledtext = _this.rbkeyService.getRBKey(disabledrbkey);
                }
                //add disabled class
                _this.class += " btn-disabled";
                _this.confirm = false;
                return _this.disabledtext;
            }
            return "";
        };
        this.getConfirm = function () {
            if (angular.isDefined(_this.confirm) && _this.confirm) {
                return true;
            }
            else {
                return false;
            }
        };
        this.getConfirmText = function () {
            if (_this.getConfirm()) {
                if (angular.isUndefined(_this.confirmtext) && _this.confirmtext.length) {
                    var confirmrbkey = _this.utilityService.replaceAll(_this.action, ':', '.') + '_confirm';
                    _this.confirmtext = _this.rbkeyService.getRBKey(confirmrbkey);
                    /*<cfif right(attributes.confirmtext, "8") eq "_missing">
                        <cfset attributes.confirmtext = replace(attributes.hibachiScope.rbKey("admin.define.delete_confirm"),'${itemEntityName}', attributes.hibachiScope.rbKey('entity.#actionItemEntityName#'), "all") />
                    </cfif>*/
                }
                _this.class += " alert-confirm";
                return _this.confirm;
            }
            return "";
        };
        this.$scope = $scope;
        this.$element = $element;
        this.$timeout = $timeout;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.rbkeyService = rbkeyService;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.$templateRequest(this.hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "actioncaller.html").then(function (html) {
            var template = angular.element(html);
            _this.$element.parent().append(template);
            $compile(template)($scope);
            //need to perform init after promise completes
            //this.init();
        });
    }
    return SWActionCallerController;
}());
exports.SWActionCallerController = SWActionCallerController;
var SWActionCaller = /** @class */ (function () {
    function SWActionCaller(partialsPath, utiltiyService, $hibachi) {
        this.partialsPath = partialsPath;
        this.utiltiyService = utiltiyService;
        this.$hibachi = $hibachi;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            action: "@",
            text: "@",
            type: "@",
            queryString: "@",
            title: "@?",
            titleRbKey: "@?",
            'class': "@",
            icon: "@",
            iconOnly: "=",
            name: "@",
            confirm: "=",
            confirmtext: "@",
            disabled: "=",
            disabledtext: "@",
            modal: "=",
            modalFullWidth: "=",
            id: "@",
            isAngularRoute: "=?",
            eventListeners: '=?'
        };
        this.require = { formController: "^?swForm", form: "^?form" };
        this.controller = SWActionCallerController;
        this.controllerAs = "swActionCaller";
        this.link = function (scope, element, attrs) {
            if (angular.isDefined(scope.swActionCaller.formController)) {
                scope.formController = scope.swActionCaller.formController;
            }
        };
    }
    SWActionCaller.Factory = function () {
        var directive = function (partialsPath, utiltiyService, $hibachi) { return new SWActionCaller(partialsPath, utiltiyService, $hibachi); };
        directive.$inject = [
            'partialsPath',
            'utilityService',
            '$hibachi'
        ];
        return directive;
    };
    return SWActionCaller;
}());
exports.SWActionCaller = SWActionCaller;


/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWActionCallerDropdownController = /** @class */ (function () {
    function SWActionCallerDropdownController() {
        this.title = this.title || '';
        this.icon = this.icon || 'plus';
        this.type = this.type || 'button';
        this.dropdownClass = this.dropdownClass || '';
        this.dropdownId = this.dropdownId || '';
        this.buttonClass = this.buttonClass || 'btn-primary';
    }
    return SWActionCallerDropdownController;
}());
exports.SWActionCallerDropdownController = SWActionCallerDropdownController;
var SWActionCallerDropdown = /** @class */ (function () {
    function SWActionCallerDropdown(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = true;
        this.bindToController = {
            title: "@",
            icon: "@",
            type: "=",
            dropdownClass: "@",
            dropdownId: "@",
            buttonClass: "@"
        };
        this.controller = SWActionCallerDropdownController;
        this.controllerAs = "swActionCallerDropdown";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'actioncallerdropdown.html';
    }
    SWActionCallerDropdown.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWActionCallerDropdown(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWActionCallerDropdown;
}());
exports.SWActionCallerDropdown = SWActionCallerDropdown;


/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWClickOutside = /** @class */ (function () {
    //@ngInject
    function SWClickOutside($document, $timeout, utilityService) {
        var _this = this;
        this.$document = $document;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.restrict = 'A';
        this.scope = {
            swClickOutside: '&'
        };
        this.link = function (scope, elem, attr) {
            _this.$document.on('click', function (e) {
                if (!e || !e.target)
                    return;
                //check if our element already hidden
                if (angular.element(elem).hasClass("ng-hide")) {
                    return;
                }
                if (e.target !== elem && elem && elem[0] && !_this.utilityService.isDescendantElement(elem[0], e.target)) {
                    _this.$timeout(function () {
                        scope.swClickOutside();
                    });
                }
            });
        };
        this.$document = $document;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
    }
    SWClickOutside.Factory = function () {
        var directive = function ($document, $timeout, utilityService) { return new SWClickOutside($document, $timeout, utilityService); };
        directive.$inject = [
            '$document', '$timeout', 'utilityService'
        ];
        return directive;
    };
    return SWClickOutside;
}());
exports.SWClickOutside = SWClickOutside;


/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionColumnController = /** @class */ (function () {
    function SWCollectionColumnController() {
    }
    return SWCollectionColumnController;
}());
exports.SWCollectionColumnController = SWCollectionColumnController;
var SWCollectionColumn = /** @class */ (function () {
    //@ngInject
    function SWCollectionColumn(scopeService, utilityService) {
        var _this = this;
        this.scopeService = scopeService;
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            fallbackPropertyIdentifiers: "@?",
            isVisible: "=?",
            isSearchable: "=?",
            isDeletable: "=?",
            isExportable: "=?",
            isKeywordColumn: "=?",
            isOnlyKeywordColumn: "=?",
            tdclass: "@?",
            hidden: "=?"
        };
        this.controller = SWCollectionColumn;
        this.controllerAs = "swCollectionColumn";
        this.template = "";
        this.link = function (scope, element, attrs) {
            if (angular.isUndefined(scope.swCollectionColumn.isKeywordColumn)) {
                scope.swCollectionColumn.isKeywordColumn = false;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isOnlyKeywordColumn)) {
                scope.swCollectionColumn.isOnlyKeywordColumn = scope.swCollectionColumn.isKeywordColumn;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isVisible)) {
                scope.swCollectionColumn.isVisible = true;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isSearchable)) {
                scope.swCollectionColumn.isSearchable = false;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isDeletable)) {
                scope.swCollectionColumn.isDeletable = false;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isExportable)) {
                scope.swCollectionColumn.isExportable = true;
            }
            var column = {
                propertyIdentifier: scope.swCollectionColumn.propertyIdentifier,
                fallbackPropertyIdentifiers: scope.swCollectionColumn.fallbackPropertyIdentifiers,
                isVisible: scope.swCollectionColumn.isVisible,
                isSearchable: scope.swCollectionColumn.isSearchable,
                isDeletable: scope.swCollectionColumn.isDeletable,
                isExportable: scope.swCollectionColumn.isExportable,
                hidden: scope.swCollectionColumn.hidden,
                tdclass: scope.swCollectionColumn.tdclass,
                isKeywordColumn: scope.swCollectionColumn.isKeywordColumn,
                isOnlyKeywordColumn: scope.swCollectionColumn.isOnlyKeywordColumn
            };
            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
            if (angular.isDefined(currentScope.swCollectionConfig)) {
                //push directly here because we've already built the column object
                currentScope.swCollectionConfig.columns.push(column);
                currentScope.swCollectionConfig.columnsDeferred.resolve();
            }
            else {
                throw ("Could not find swCollectionConfig in the parent scope from swcollectioncolumn");
            }
        };
    }
    SWCollectionColumn.Factory = function () {
        var directive = function (scopeService, utilityService) { return new SWCollectionColumn(scopeService, utilityService); };
        directive.$inject = [
            'scopeService',
            'utilityService'
        ];
        return directive;
    };
    return SWCollectionColumn;
}());
exports.SWCollectionColumn = SWCollectionColumn;


/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionConfigController = /** @class */ (function () {
    //@ngInject
    function SWCollectionConfigController($transclude, $q, collectionConfigService) {
        this.$transclude = $transclude;
        this.$q = $q;
        this.collectionConfigService = collectionConfigService;
        this.filters = [];
        this.columns = [];
        this.orderBys = [];
        this.keywordColumns = [];
        this.columnsDeferred = this.$q.defer();
        this.columnsPromise = this.columnsDeferred.promise;
        this.filtersDeferred = this.$q.defer();
        this.filtersPromise = this.filtersDeferred.promise;
        this.orderBysDeferred = this.$q.defer();
        this.orderBysPromise = this.columnsDeferred.promise;
    }
    return SWCollectionConfigController;
}());
exports.SWCollectionConfigController = SWCollectionConfigController;
var SWCollectionConfig = /** @class */ (function () {
    // @ngInject
    function SWCollectionConfig(collectionConfigService, listingService, scopeService, $q) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.scopeService = scopeService;
        this.$q = $q;
        this.restrict = 'EA';
        this.scope = true;
        this.transclude = {
            columns: "?swCollectionColumns",
            filters: "?swCollectionFilters",
            orderBys: "?swCollectionOrderBys"
        };
        this.bindToController = {
            allRecords: "=?",
            collectionConfigProperty: "@?",
            distinct: "=?",
            entityName: "@",
            filterFlag: "=?",
            inListingDisplay: "=?",
            multiCollectionConfigProperty: "@?",
            pageShow: "@?",
            parentDirectiveControllerAsName: "@?",
            parentDeferredProperty: "@?"
        };
        this.controller = SWCollectionConfigController;
        this.controllerAs = "swCollectionConfig";
        this.template = " \n        <div ng-transclude=\"columns\"></div>\n        <div ng-transclude=\"filters\"></div>\n        <div ng-transclude=\"orderBys\"></div>\n    ";
        this.link = function (scope, element, attrs) {
            //some automatic configuration for listing display
            if (angular.isUndefined(scope.swCollectionConfig.inListingDisplay)) {
                scope.swCollectionConfig.inListingDisplay = false;
            }
            if (scope.swCollectionConfig.inListingDisplay) {
                scope.swCollectionConfig.parentDirectiveControllerAsName = "swListingDisplay";
                scope.swCollectionConfig.parentDeferredProperty = "singleCollectionDeferred";
            }
            if (angular.isUndefined(scope.swCollectionConfig.entityName)) {
                throw ("You must provide an entityname to swCollectionConfig");
            }
            if (angular.isUndefined(scope.swCollectionConfig.parentDirectiveControllerAsName) && !scope.swCollectionConfig.inListingDisplay) {
                throw ("You must provide the parent directives Controller-As Name to swCollectionConfig");
            }
            if (angular.isUndefined(scope.swCollectionConfig.collectionConfigProperty)) {
                scope.swCollectionConfig.collectionConfigProperty = "collectionConfig";
            }
            if (angular.isUndefined(scope.swCollectionConfig.allRecords)) {
                scope.swCollectionConfig.allRecords = false;
            }
            if (angular.isUndefined(scope.swCollectionConfig.pageShow)) {
                scope.swCollectionConfig.pageShow = 10;
            }
            if (angular.isUndefined(scope.swCollectionConfig.distinct)) {
                scope.swCollectionConfig.distinct = false;
            }
            if (angular.isUndefined(scope.swCollectionConfig.filterFlag)) {
                scope.swCollectionConfig.filterFlag = true; //assume there are filters
            }
            var allCollectionConfigPromises = [];
            var currentScope = scope;
            //we want to wait for all sibling scopes before pushing the collection config
            while (angular.isDefined(currentScope)) {
                if (angular.isDefined(currentScope.swCollectionConfig)) {
                    allCollectionConfigPromises.push(currentScope.swCollectionConfig.columnsPromise);
                    if (scope.swCollectionConfig.filterFlag) {
                        allCollectionConfigPromises.push(currentScope.swCollectionConfig.filtersPromise);
                    }
                }
                currentScope = currentScope.$$nextSibling;
                if (currentScope == null) {
                    break;
                }
            }
            var newCollectionConfig = _this.collectionConfigService.newCollectionConfig(scope.swCollectionConfig.entityName);
            newCollectionConfig.setAllRecords(scope.swCollectionConfig.allRecords);
            newCollectionConfig.setDistinct(scope.swCollectionConfig.distinct);
            newCollectionConfig.setPageShow(scope.swCollectionConfig.pageShow);
            var currentScope = _this.scopeService.getRootParentScope(scope, scope.swCollectionConfig.parentDirectiveControllerAsName);
            if (currentScope[scope.swCollectionConfig.parentDirectiveControllerAsName]) {
                var parentDirective = currentScope[scope.swCollectionConfig.parentDirectiveControllerAsName];
            }
            else {
                throw ("swCollectionConfig was unable to find a parent scope");
            }
            scope.swCollectionConfig.columnsPromise.then(function () {
                angular.forEach(scope.swCollectionConfig.columns, function (column) {
                    newCollectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
                });
            });
            scope.swCollectionConfig.filtersPromise.then(function () {
                angular.forEach(scope.swCollectionConfig.filters, function (filter) {
                    newCollectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
                });
            });
            scope.swCollectionConfig.orderBysPromise.then(function () {
                angular.forEach(scope.swCollectionConfig.orderBys, function (orderBy) {
                    newCollectionConfig.addOrderBy(orderBy);
                });
            });
            _this.$q.all(allCollectionConfigPromises).then(function () {
                if (angular.isDefined(parentDirective)) {
                    if (angular.isDefined(scope.swCollectionConfig.multiCollectionConfigProperty)
                        && angular.isDefined(parentDirective[scope.swCollectionConfig.multiCollectionConfigProperty])) {
                        parentDirective[scope.swCollectionConfig.multiCollectionConfigProperty].push(newCollectionConfig);
                    }
                    else if (angular.isDefined(parentDirective[scope.swCollectionConfig.collectionConfigProperty])) {
                        parentDirective[scope.swCollectionConfig.collectionConfigProperty] = newCollectionConfig;
                    }
                    else {
                        throw ("swCollectionConfig could not locate a collection config property to bind it's collection to");
                    }
                    if (angular.isDefined(parentDirective[scope.swCollectionConfig.parentDeferredProperty])) {
                        parentDirective[scope.swCollectionConfig.parentDeferredProperty].resolve();
                    }
                    else {
                        //throw("SWCollectionConfig cannot resolve rule");
                    }
                }
            }, function (reason) {
                throw ("SWCollectionConfig is having some issues.");
            });
        };
    }
    SWCollectionConfig.Factory = function () {
        var directive = function (collectionConfigService, listingService, scopeService, $q) { return new SWCollectionConfig(collectionConfigService, listingService, scopeService, $q); };
        directive.$inject = [
            'collectionConfigService',
            'listingService',
            'scopeService',
            '$q'
        ];
        return directive;
    };
    return SWCollectionConfig;
}());
exports.SWCollectionConfig = SWCollectionConfig;


/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionFilterController = /** @class */ (function () {
    function SWCollectionFilterController() {
    }
    return SWCollectionFilterController;
}());
exports.SWCollectionFilterController = SWCollectionFilterController;
var SWCollectionFilter = /** @class */ (function () {
    //@ngInject
    function SWCollectionFilter(scopeService, utilityService) {
        var _this = this;
        this.scopeService = scopeService;
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            comparisonOperator: "@?",
            comparisonValue: "@?",
            logicalOperator: "@?",
            hidden: "@?"
        };
        this.controller = SWCollectionFilterController;
        this.controllerAs = "SWCollectionFilter";
        this.template = "";
        this.link = function (scope, element, attrs) {
            var filter = {
                propertyIdentifier: scope.SWCollectionFilter.propertyIdentifier,
                comparisonOperator: scope.SWCollectionFilter.comparisonOperator,
                comparisonValue: scope.SWCollectionFilter.comparisonValue,
                logicalOperator: scope.SWCollectionFilter.logicalOperator,
                hidden: scope.SWCollectionFilter.hidden
            };
            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
            if (angular.isDefined(currentScope.swCollectionConfig)) {
                currentScope.swCollectionConfig.filters.push(filter);
                currentScope.swCollectionConfig.filtersDeferred.resolve();
            }
            else {
                throw ("could not find swCollectionConfig in the parent scope from swcollectionfilter");
            }
        };
    }
    SWCollectionFilter.Factory = function () {
        var directive = function (scopeService, utilityService) { return new SWCollectionFilter(scopeService, utilityService); };
        directive.$inject = [
            'scopeService',
            'utilityService'
        ];
        return directive;
    };
    return SWCollectionFilter;
}());
exports.SWCollectionFilter = SWCollectionFilter;


/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionOrderByController = /** @class */ (function () {
    function SWCollectionOrderByController() {
    }
    return SWCollectionOrderByController;
}());
exports.SWCollectionOrderByController = SWCollectionOrderByController;
var SWCollectionOrderBy = /** @class */ (function () {
    //@ngInject
    function SWCollectionOrderBy(scopeService) {
        var _this = this;
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            orderBy: "@"
        };
        this.controller = SWCollectionOrderByController;
        this.controllerAs = "SWCollectionOrderBy";
        this.template = "";
        this.link = function (scope, element, attrs) {
            var orderBy = scope.SWCollectionOrderBy.orderBy;
            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
            if (angular.isDefined(currentScope.swCollectionConfig)) {
                currentScope.swCollectionConfig.orderBys.push(orderBy);
                currentScope.swCollectionConfig.orderBysDeferred.resolve();
            }
            else {
                throw ("could not find swCollectionConfig in the parent scope from swcollectionorderby");
            }
        };
    }
    SWCollectionOrderBy.Factory = function () {
        var directive = function (scopeService) { return new SWCollectionOrderBy(scopeService); };
        directive.$inject = [
            'scopeService'
        ];
        return directive;
    };
    return SWCollectionOrderBy;
}());
exports.SWCollectionOrderBy = SWCollectionOrderBy;


/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWColumnSorter = /** @class */ (function () {
    //@ngInject
    function SWColumnSorter(observerService, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'AE',
            scope: {
                column: "=",
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "columnsorter.html",
            link: function (scope, element, attrs) {
                var orderBy = {
                    "propertyIdentifier": scope.column.propertyIdentifier,
                };
                scope.sortAsc = function () {
                    orderBy.direction = 'Asc';
                    this.observerService.notify('sortByColumn', orderBy);
                };
                scope.sortDesc = function () {
                    orderBy.direction = 'Desc';
                    observerService.notify('sortByColumn', orderBy);
                };
            }
        };
    }
    SWColumnSorter.Factory = function () {
        var directive = function (observerService, corePartialsPath, hibachiPathBuilder) { return new SWColumnSorter(observerService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'observerService',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWColumnSorter;
}());
exports.SWColumnSorter = SWColumnSorter;


/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * <------------------------------------------------------------------------------------------------------------------------------------>
 *   This directive can be used to prompt the user with a confirmation dialog.
 *
 *   Example Usage 1:
 *   <a swconfirm
 *   						use-rb-key=true
 * 							yes-text="define.yes"
 * 							no-text="define.no"
 * 							confirm-text="define.confirm"
 * 							message-text="define.delete.message"
 * 							callback="someFunction()">
 *   </a>
 *   Alternate Version (No Rbkeys):
 *   <a swconfirm
 *   						use-rb-key=false
 * 							yes-text="Sure"
 * 							no-text="Not Sure!"
 * 							confirm-text="Sure"
 * 							message-text="Are you sure?"
 * 							callback="sure()">
 *   </a>
 *
 *   Note: Because the template is dynamic, the following keywords can not be used anywhere in the text for this modal as we interpolate
 *   those.
 *
 *   [yes] [no] [confirm] [message] [callback]
 *
 *   The above words in upper-case can be used - just not those words inside square brackets.
 *   Note: Your callback function on-confirm should return true;
 *<------------------------------------------------------------------------------------------------------------------------------------->
 */
Object.defineProperty(exports, "__esModule", { value: true });
var SWConfirm = /** @class */ (function () {
    //@ngInject
    function SWConfirm($log, $modal) {
        var buildConfirmationModal = function (simple, useRbKey, confirmText, messageText, noText, yesText) {
            /* Keys */
            var confirmKey = "[confirm]";
            var messageKey = "[message]";
            var noKey = "[no]";
            var yesKey = "[yes]";
            var swRbKey = "sw-rbkey=";
            /* Values */
            var confirmVal = "<confirm>";
            var messageVal = "<message>";
            var noVal = "<no>";
            var yesVal = "<yes>";
            /* Parse Tags */
            var startTag = "\"'";
            var endTag = "'\"";
            var startParen = "'";
            var endParen = "'";
            var empty = "";
            /* Modal String */
            var parsedKeyString = "";
            var finishedString = "";
            //Figure out which version of this tag we are using
            var templateString = "<div>" +
                "<div class='modal-header'><a class='close' data-dismiss='modal' ng-click='cancel()'>×</a><h3 [confirm]><confirm></h3></div>" +
                "<div class='modal-body' [message]>" + "<message>" + "</div>" +
                "<div class='modal-footer'>" +
                "<button class='btn btn-sm btn-default btn-inverse' ng-click='cancel()' [no]><no></button>" +
                "<button class='btn btn-sm btn-default btn-primary' ng-click='fireCallback(callback)' [yes]><yes></button></div></div></div>";
            /* Use RbKeys or Not? */
            if (useRbKey === "true") {
                $log.debug("Using RbKey? " + useRbKey);
                /* Then decorate the template with the keys. */
                confirmText = swRbKey + startTag + confirmText + endTag;
                messageText = swRbKey + startTag + messageText + endTag;
                yesText = swRbKey + startTag + yesText + endTag;
                noText = swRbKey + startTag + noText + endTag;
                parsedKeyString = templateString.replace(confirmKey, confirmText)
                    .replace(messageText, messageText)
                    .replace(noKey, noText)
                    .replace(yesKey, yesText);
                $log.debug(finishedString);
                finishedString = parsedKeyString.replace(confirmKey, empty)
                    .replace(messageVal, empty)
                    .replace(noVal, empty)
                    .replace(yesVal, empty);
                $log.debug(finishedString);
                return finishedString;
            }
            else {
                /* Then decorate the template without the keys. */
                $log.debug("Using RbKey? " + useRbKey);
                parsedKeyString = templateString.replace(confirmVal, confirmText)
                    .replace(messageVal, messageText)
                    .replace(noVal, noText)
                    .replace(yesVal, yesText);
                finishedString = parsedKeyString.replace(confirmKey, empty)
                    .replace(messageKey, empty)
                    .replace(noKey, empty)
                    .replace(yesKey, empty);
                $log.debug(finishedString);
                return finishedString;
            }
        };
        return {
            restrict: 'EA',
            scope: {
                callback: "&",
                entity: "="
            },
            link: function (scope, element, attr) {
                /* Grab the template and build the modal on click */
                $log.debug("Modal is: ");
                $log.debug($modal);
                element.bind('click', function () {
                    /* Default Values */
                    var useRbKey = attr.useRbKey || "false";
                    var simple = attr.simple || false;
                    var yesText = attr.yesText || "define.yes";
                    var noText = attr.noText || "define.no";
                    var confirmText = attr.confirmText || "define.delete";
                    var messageText = attr.messageText || "define.delete_message";
                    var templateString = buildConfirmationModal(simple, useRbKey, confirmText, messageText, noText, yesText);
                    var modalInstance = $modal.open({
                        template: templateString,
                        controller: 'confirmationController',
                        scope: scope
                    });
                    /**
                        * Handles the result - callback or dismissed
                        */
                    modalInstance.result.then(function (result) {
                        $log.debug("Result:" + result);
                        return true;
                    }, function () {
                        //There was an error
                    });
                }); //<--end bind
            }
        };
    }
    SWConfirm.Factory = function () {
        var directive = function ($log, $modal) { return new SWConfirm($log, $modal); };
        directive.$inject = ['$log', '$modal'];
        return directive;
    };
    return SWConfirm;
}());
exports.SWConfirm = SWConfirm;


/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDirective = /** @class */ (function () {
    //@ngInject
    function SWDirective($compile, utilityService) {
        return {
            restrict: 'AE',
            //replace:true,
            scope: {
                variables: "=",
                directiveTemplate: "="
            },
            controllerAs: "swDirective",
            link: function (scope, element, attrs) {
                var tempVariables = {};
                angular.forEach(scope.variables, function (value, key) {
                    if (key.toString().charAt(0) != "$" && value !== " ") {
                        tempVariables[utilityService.keyToAttributeString(key)] = value;
                    }
                });
                scope.variables = tempVariables;
                var template = '<' + scope.directiveTemplate + ' ';
                if (angular.isDefined(scope.variables)) {
                    angular.forEach(scope.variables, function (value, key) {
                        if (!angular.isString(value) && !angular.isNumber(value)) {
                            template += ' ' + key + '="swDirective.' + 'variables.' + key + '" ';
                        }
                        else {
                            template += ' ' + key + '="' + value + '" ';
                        }
                    });
                }
                template += '>';
                template += '</' + scope.directiveTemplate + '>';
                // Render the template.
                element.html($compile(template)(scope));
            }
        };
    }
    SWDirective.Factory = function () {
        var directive = function ($compile, utilityService) { return new SWDirective($compile, utilityService); };
        directive.$inject = [
            '$compile',
            'utilityService'
        ];
        return directive;
    };
    return SWDirective;
}());
exports.SWDirective = SWDirective;


/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWDraggableController = /** @class */ (function () {
    //@ngInject
    function SWDraggableController() {
        if (angular.isUndefined(this.draggable)) {
            this.draggable = false;
        }
    }
    return SWDraggableController;
}());
var SWDraggable = /** @class */ (function () {
    //@ngInject
    function SWDraggable(corePartialsPath, utilityService, draggableService, hibachiPathBuilder) {
        var _this = this;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.draggableService = draggableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            //all fields required
            draggable: "=",
            draggableRecord: "=",
            draggableKey: "="
        };
        this.controller = SWDraggableController;
        this.controllerAs = "swDraggable";
        this.link = function (scope, element, attrs) {
            scope.$watch('swDraggable.draggable', function (newValue, oldValue) {
                angular.element(element).attr("draggable", newValue);
                var id = angular.element(element).attr("id");
                if (!id) {
                    id = _this.utilityService.createID(32);
                }
                if (newValue) {
                    element.bind("dragstart", function (e) {
                        e = e.originalEvent || e;
                        e.stopPropagation();
                        if (!scope.swDraggable.draggable)
                            return false;
                        element.addClass("s-dragging");
                        scope.swDraggable.draggableRecord.draggableStartKey = scope.swDraggable.draggableKey;
                        e.dataTransfer.setData("application/json", angular.toJson(scope.swDraggable.draggableRecord));
                        e.dataTransfer.effectAllowed = "move";
                        e.dataTransfer.setDragImage(element[0], 0, 0);
                    });
                    element.bind("dragend", function (e) {
                        e = e.originalEvent || e;
                        e.stopPropagation();
                        element.removeClass("s-dragging");
                    });
                }
                else {
                    element.unbind("dragstart");
                    element.unbind("dragged");
                }
            });
        };
    }
    SWDraggable.Factory = function () {
        var directive = function (corePartialsPath, utilityService, draggableService, hibachiPathBuilder) { return new SWDraggable(corePartialsPath, utilityService, draggableService, hibachiPathBuilder); };
        directive.$inject = [
            'corePartialsPath',
            'utilityService',
            'draggableService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDraggable;
}());
exports.SWDraggable = SWDraggable;


/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWDraggableContainerController = /** @class */ (function () {
    //@ngInject
    function SWDraggableContainerController(draggableService) {
        this.draggableService = draggableService;
        if (angular.isUndefined(this.draggable)) {
            this.draggable = false;
        }
    }
    return SWDraggableContainerController;
}());
var SWDraggableContainer = /** @class */ (function () {
    //@ngInject
    function SWDraggableContainer($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder) {
        var _this = this;
        this.$timeout = $timeout;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.draggableService = draggableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            draggable: "=?",
            draggableRecords: "=?",
            dropEventName: "@?",
            listingId: "@?"
        };
        this.controller = SWDraggableContainerController;
        this.controllerAs = "swDraggableContainer";
        this.link = function (scope, element, attrs) {
            scope.$watch('swDraggableContainer.draggable', function (newValue, oldValue) {
                angular.element(element).attr("draggable", newValue);
                var placeholderElement = angular.element("<tr class='s-placeholder'><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td></td></tr>"); //temporarirly hardcoding tds so it will show up
                var id = angular.element(element).attr("id");
                if (!id) {
                    id = _this.utilityService.createID(32);
                }
                var listNode = element[0];
                var placeholderNode = placeholderElement[0];
                placeholderElement.remove();
                if (newValue) {
                    element.on('drop', function (e) {
                        e = e.originalEvent || e;
                        e.preventDefault();
                        if (!_this.draggableService.isDropAllowed(e))
                            return true;
                        var record = e.dataTransfer.getData("application/json") || e.dataTransfer.getData("text/plain");
                        var parsedRecord = JSON.parse(record);
                        var index = Array.prototype.indexOf.call(listNode.children, placeholderNode);
                        if (index < parsedRecord.draggableStartKey) {
                            parsedRecord.draggableStartKey++;
                        }
                        _this.$timeout(function () {
                            scope.swDraggableContainer.draggableRecords.splice(index, 0, parsedRecord);
                            scope.swDraggableContainer.draggableRecords.splice(parsedRecord.draggableStartKey, 1);
                        }, 0);
                        if (angular.isDefined(scope.swDraggableContainer.listingId)) {
                            _this.listingService.notifyListingPageRecordsUpdate(scope.swDraggableContainer.listingId);
                        }
                        else if (angular.isDefined(scope.swDraggableContainer.dropEventName)) {
                            _this.observerService.notify(scope.swDraggableContainer.dropEventName);
                        }
                        placeholderElement.remove();
                        e.stopPropagation();
                        return false;
                    });
                    element.on('dragenter', function (e) {
                        e = e.originalEvent || e;
                        if (!_this.draggableService.isDropAllowed(e))
                            return true;
                        e.preventDefault();
                    });
                    element.on('dragleave', function (e) {
                        e = e.originalEvent || e;
                        if (e.pageX != 0 || e.pageY != 0) {
                            return false;
                        }
                        return false;
                    });
                    element.on('dragover', function (e) {
                        e = e.originalEvent || e;
                        e.stopPropagation();
                        if (placeholderNode.parentNode != listNode) {
                            element.append(placeholderElement);
                        }
                        if (e.target !== listNode) {
                            var listItemNode = e.target;
                            while (listItemNode.parentNode !== listNode && listItemNode.parentNode) {
                                listItemNode = listItemNode.parentNode;
                            }
                            if (listItemNode.parentNode === listNode && listItemNode !== placeholderNode) {
                                if (_this.draggableService.isMouseInFirstHalf(e, listItemNode)) {
                                    listNode.insertBefore(placeholderNode, listItemNode);
                                }
                                else {
                                    listNode.insertBefore(placeholderNode, listItemNode.nextSibling);
                                }
                            }
                        }
                        element.addClass("s-dragged-over");
                        return false;
                    });
                }
            });
        };
    }
    SWDraggableContainer.Factory = function () {
        var directive = function ($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder) { return new SWDraggableContainer($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder); };
        directive.$inject = [
            '$timeout',
            'corePartialsPath',
            'utilityService',
            'listingService',
            'observerService',
            'draggableService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDraggableContainer;
}());
exports.SWDraggableContainer = SWDraggableContainer;


/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWEntityActionBarController = /** @class */ (function () {
    //@ngInject
    function SWEntityActionBarController(rbkeyService) {
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.init = function () {
            if (angular.isDefined(_this.pageTitleRbKey)) {
                _this.pageTitle = _this.rbkeyService.getRBKey(_this.pageTitleRbKey);
            }
        };
        this.init();
    }
    return SWEntityActionBarController;
}());
var SWEntityActionBar = /** @class */ (function () {
    //@ngInject
    function SWEntityActionBar(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = true;
        this.bindToController = {
            /*Core settings*/
            type: "@",
            object: "=",
            pageTitle: "@?",
            pageTitleRbKey: "@?",
            edit: "=",
            /*Action Callers (top buttons)*/
            showcancel: "=",
            showcreate: "=",
            showedit: "=",
            showdelete: "=",
            /*Basic Action Caller Overrides*/
            createModal: "=",
            createAction: "=",
            createQueryString: "=",
            backAction: "=",
            backQueryString: "=",
            cancelAction: "=",
            cancelQueryString: "=",
            deleteAction: "=",
            deleteQueryString: "=",
            /*Process Specific Values*/
            processAction: "=",
            processContext: "="
        };
        this.controller = SWEntityActionBarController;
        this.controllerAs = "swEntityActionBar";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'entityactionbar.html';
    }
    SWEntityActionBar.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWEntityActionBar(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWEntityActionBar;
}());
exports.SWEntityActionBar = SWEntityActionBar;
//	angular.module('slatwalladmin').directive('swEntityActionBar',['corePartialsPath',(corePartialsPath) => new SWEntityActionBar(corePartialsPath)]);


/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWEntityActionBarButtonGroupController = /** @class */ (function () {
    function SWEntityActionBarButtonGroupController() {
    }
    return SWEntityActionBarButtonGroupController;
}());
var SWEntityActionBarButtonGroup = /** @class */ (function () {
    //@ngInject
    function SWEntityActionBarButtonGroup(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = true;
        this.bindToController = {};
        this.controller = SWEntityActionBarButtonGroupController;
        this.controllerAs = "swEntityActionBarButtonGroup";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'entityactionbarbuttongroup.html';
    }
    SWEntityActionBarButtonGroup.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWEntityActionBarButtonGroup(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath',
            'hibachiPathBuilder'];
        return directive;
    };
    return SWEntityActionBarButtonGroup;
}());
exports.SWEntityActionBarButtonGroup = SWEntityActionBarButtonGroup;


/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWExpandableRecordController = /** @class */ (function () {
    //@ngInject
    function SWExpandableRecordController($timeout, $hibachi, utilityService, collectionConfigService, expandableService, listingService, observerService) {
        var _this = this;
        this.$timeout = $timeout;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.expandableService = expandableService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.childrenLoaded = false;
        this.childrenOpen = false;
        this.children = [];
        this.refreshChildren = function () {
            _this.getEntity();
        };
        this.setupChildCollectionConfig = function () {
            _this.childCollectionConfig = _this.collectionConfigService.newCollectionConfig(_this.entity.metaData.className);
            //set up parent
            var parentName = _this.entity.metaData.hb_parentPropertyName;
            var parentCFC = _this.entity.metaData[parentName].cfc;
            _this.parentIDName = _this.$hibachi.getEntityExample(parentCFC).$$getIDName();
            //set up child
            var childName = _this.entity.metaData.hb_childPropertyName;
            var childCFC = _this.entity.metaData[childName].cfc;
            var childIDName = _this.$hibachi.getEntityExample(childCFC).$$getIDName();
            _this.childCollectionConfig.clearFilterGroups();
            _this.childCollectionConfig.collection = _this.entity;
            _this.childCollectionConfig.addFilter(parentName + '.' + _this.parentIDName, _this.parentId);
            _this.childCollectionConfig.setAllRecords(true);
            angular.forEach(_this.collectionConfig.columns, function (column) {
                _this.childCollectionConfig.addColumn(column.propertyIdentifier, column.title, column);
            });
            angular.forEach(_this.collectionConfig.joins, function (join) {
                _this.childCollectionConfig.addJoin(join);
            });
            _this.childCollectionConfig.groupBys = _this.collectionConfig.groupBys;
        };
        this.getEntity = function () {
            _this.collectionPromise.then(function (data) {
                _this.collectionData = data;
                _this.collectionData.pageRecords = _this.collectionData.pageRecords || _this.collectionData.records;
                if (_this.collectionData.pageRecords.length) {
                    angular.forEach(_this.collectionData.pageRecords, function (pageRecord) {
                        _this.expandableService.addRecord(pageRecord[_this.parentIDName], true);
                        pageRecord.dataparentID = _this.recordID;
                        pageRecord.depth = _this.recordDepth || 0;
                        pageRecord.depth++;
                        //push the children into the listing display
                        _this.children.push(pageRecord);
                        _this.records.splice(_this.recordIndex + 1, 0, pageRecord);
                    });
                }
                _this.childrenLoaded = true;
            });
        };
        this.toggleChild = function () {
            _this.$timeout(function () {
                _this.childrenOpen = !_this.childrenOpen;
                _this.expandableService.updateState(_this.recordID, { isOpen: _this.childrenOpen });
                if (!_this.childrenLoaded) {
                    if (_this.childCollectionConfig == null) {
                        _this.setupChildCollectionConfig();
                    }
                    if (angular.isFunction(_this.childCollectionConfig.getEntity)) {
                        _this.collectionPromise = _this.childCollectionConfig.getEntity();
                    }
                    _this.getEntity();
                }
                angular.forEach(_this.children, function (child) {
                    child.dataIsVisible = _this.childrenOpen;
                    var entityPrimaryIDName = _this.entity.$$getIDName();
                    var idsToCheck = [];
                    idsToCheck.push(child[entityPrimaryIDName]);
                    _this.expandableService.updateState(child[entityPrimaryIDName], { isOpen: _this.childrenOpen });
                    //close all children of the child if we are closing
                    var childrenTraversed = false;
                    var recordLength = _this.records.length;
                    while (!childrenTraversed && idsToCheck.length > 0) {
                        var found = false;
                        var idToCheck = idsToCheck.pop();
                        for (var i = 0; i < recordLength; i++) {
                            var record = _this.records[i];
                            if (record['dataparentID'] == idToCheck) {
                                idsToCheck.push(record[entityPrimaryIDName]);
                                _this.expandableService.updateState(record[entityPrimaryIDName], { isOpen: _this.childrenOpen });
                                record.dataIsVisible = _this.childrenOpen;
                                found = true;
                            }
                        }
                        if (!found) {
                            childrenTraversed = true;
                        }
                    }
                });
            });
        };
        this.recordID = this.parentId; //this is what parent is initalized to in the listing display
        expandableService.addRecord(this.recordID);
        if (angular.isDefined(this.refreshChildrenEvent) && this.refreshChildrenEvent.length) {
            this.observerService.attach(this.refreshChildren, this.refreshChildrenEvent);
        }
    }
    return SWExpandableRecordController;
}());
var SWExpandableRecord = /** @class */ (function () {
    //@ngInject
    function SWExpandableRecord($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.$templateRequest = $templateRequest;
        this.$timeout = $timeout;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.expandableService = expandableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            recordValue: "=",
            link: "@",
            expandable: "=?",
            parentId: "=",
            entity: "=",
            collectionConfig: "=?",
            childCollectionConfig: "=?",
            refreshChildrenEvent: "=?",
            listingId: "@?",
            records: "=",
            pageRecord: "=",
            recordIndex: "=",
            recordDepth: "=",
            childCount: "=",
            autoOpen: "=",
            multiselectIdPaths: "=",
            expandableRules: "="
        };
        this.controller = SWExpandableRecordController;
        this.controllerAs = "swExpandableRecord";
        this.link = function (scope, element, attrs) {
            if (scope.swExpandableRecord.expandable && scope.swExpandableRecord.childCount) {
                if (scope.swExpandableRecord.recordValue) {
                    var id = scope.swExpandableRecord.records[scope.swExpandableRecord.recordIndex][scope.swExpandableRecord.entity.$$getIDName()];
                    if (scope.swExpandableRecord.multiselectIdPaths && scope.swExpandableRecord.multiselectIdPaths.length) {
                        var multiselectIdPathsArray = scope.swExpandableRecord.multiselectIdPaths.split(',');
                        if (!scope.swExpandableRecord.childrenLoaded) {
                            angular.forEach(multiselectIdPathsArray, function (multiselectIdPath) {
                                var position = _this.utilityService.listFind(multiselectIdPath, id, '/');
                                var multiSelectIDs = multiselectIdPath.split('/');
                                var multiselectPathLength = multiSelectIDs.length;
                                if (position !== -1 && position < multiselectPathLength - 1 && !_this.expandableService.getState(id, "isOpen")) {
                                    _this.expandableService.updateState(id, { isOpen: true });
                                    scope.swExpandableRecord.toggleChild();
                                }
                            });
                        }
                    }
                }
                _this.$templateRequest(_this.hibachiPathBuilder.buildPartialsPath(_this.corePartialsPath) + "expandablerecord.html").then(function (html) {
                    var template = angular.element(html);
                    //get autoopen reference to ensure only the root is autoopenable
                    var autoOpen = angular.copy(scope.swExpandableRecord.autoOpen);
                    scope.swExpandableRecord.autoOpen = false;
                    template = _this.$compile(template)(scope);
                    element.html(template);
                    element.on('click', scope.swExpandableRecord.toggleChild);
                    if (autoOpen) {
                        scope.swExpandableRecord.toggleChild();
                    }
                });
            }
        };
        this.$compile = $compile;
        this.$templateRequest = $templateRequest;
        this.corePartialsPath = corePartialsPath;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.expandableService = expandableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
    }
    SWExpandableRecord.Factory = function () {
        var directive = function ($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder) { return new SWExpandableRecord($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder); };
        directive.$inject = [
            '$compile',
            '$templateRequest',
            '$timeout',
            'corePartialsPath',
            'utilityService',
            'expandableService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWExpandableRecord;
}());
exports.SWExpandableRecord = SWExpandableRecord;


/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWExpiringSessionNotifierController = /** @class */ (function () {
    //@ngInject
    function SWExpiringSessionNotifierController($timeout, $http, $hibachi, localStorageService) {
        var _this = this;
        this.$timeout = $timeout;
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.localStorageService = localStorageService;
        this.startTimeout = function () {
            _this.$timeout(function () {
                console.warn("Session Is About To Expire, 3 Minutes Left");
                //regardless of user input as long as they respond 
                var answer = confirm(_this.confirmText);
                _this.$http.get(_this.$hibachi.buildUrl('api:main.login')).then(function (response) {
                    if (response.status === 200) {
                        _this.localStorageService.setItem('token', response.data.token);
                        _this.startTimeout();
                    }
                    else {
                        alert('Unable To Login');
                        location.reload();
                    }
                }, function (rejection) {
                    throw ('Login Failed');
                });
            }, 720000);
        };
        console.warn("Expiring Session Notifier Constructed.");
        if (angular.isUndefined(this.confirmText)) {
            this.confirmText = 'Are you still there? You are about to be logged out.';
        }
        this.startTimeout();
    }
    return SWExpiringSessionNotifierController;
}());
var SWExpiringSessionNotifier = /** @class */ (function () {
    //@ngInject
    function SWExpiringSessionNotifier(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = false;
        this.bindToController = {
            confirmText: '@?'
        };
        this.controller = SWExpiringSessionNotifierController;
        this.controllerAs = "swExpiringSessionNotifier";
        this.link = function (scope, element, attrs) {
        };
        this.template = '';
    }
    SWExpiringSessionNotifier.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWExpiringSessionNotifier(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWExpiringSessionNotifier;
}());
exports.SWExpiringSessionNotifier = SWExpiringSessionNotifier;


/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWExportAction = /** @class */ (function () {
    //@ngInject
    function SWExportAction($log, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'exportaction.html',
            scope: {},
            link: function (scope, element, attrs) {
            }
        };
    }
    SWExportAction.Factory = function () {
        var directive = function ($log, corePartialsPath, hibachiPathBuilder) { return new SWExportAction($log, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWExportAction;
}());
exports.SWExportAction = SWExportAction;


/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var md5 = __webpack_require__(42);
var SWGravatarController = /** @class */ (function () {
    // @ngInject
    function SWGravatarController() {
        this.gravatarURL = "http://www.gravatar.com/avatar/" + md5(this.emailAddress.toLowerCase().trim());
    }
    return SWGravatarController;
}());
exports.SWGravatarController = SWGravatarController;
var SWGravatar = /** @class */ (function () {
    function SWGravatar() {
        this.template = "<img src='{{swGravatar.gravatarURL}}' />";
        this.transclude = false;
        this.restrict = "E";
        this.scope = {};
        this.bindToController = {
            emailAddress: "@"
        };
        this.controller = SWGravatarController;
        this.controllerAs = "swGravatar";
        this.link = function (scope, element, attrs, controller, transclude) {
        };
    }
    SWGravatar.Factory = function () {
        var directive = function () { return new SWGravatar(); };
        directive.$inject = [];
        return directive;
    };
    SWGravatar.$inject = ["$hibachi", "$timeout", "collectionConfigService", "corePartialsPath",
        'hibachiPathBuilder'];
    return SWGravatar;
}());
exports.SWGravatar = SWGravatar;


/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWHref = /** @class */ (function () {
    function SWHref() {
        return {
            restrict: 'A',
            scope: {
                swHref: "@"
            },
            link: function (scope, element, attrs) {
                /*convert link to use hashbang*/
                var hrefValue = attrs.swHref;
                hrefValue = '?ng#!' + hrefValue;
                element.attr('href', hrefValue);
            }
        };
    }
    SWHref.Factory = function () {
        var directive = function () { return new SWHref(); };
        directive.$inject = [];
        return directive;
    };
    return SWHref;
}());
exports.SWHref = SWHref;


/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWLoading = /** @class */ (function () {
    function SWLoading($log, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            transclude: true,
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'loading.html',
            scope: {
                swLoading: '='
            },
            link: function (scope, attrs, element) {
            }
        };
    }
    SWLoading.Factory = function () {
        var directive = function ($log, corePartialsPath, hibachiPathBuilder) { return new SWLoading($log, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWLoading;
}());
exports.SWLoading = SWLoading;


/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWLoginController = /** @class */ (function () {
    //@ngInject
    function SWLoginController($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiScope) {
        var _this = this;
        this.$route = $route;
        this.$log = $log;
        this.$window = $window;
        this.corePartialsPath = corePartialsPath;
        this.$hibachi = $hibachi;
        this.dialogService = dialogService;
        this.hibachiScope = hibachiScope;
        this.login = function () {
            var loginPromise = _this.$hibachi.login(_this.account_login.data.emailAddress, _this.account_login.data.password);
            loginPromise.then(function (loginResponse) {
                if (loginResponse && loginResponse.data && loginResponse.data.token) {
                    _this.$window.localStorage.setItem('token', loginResponse.data.token);
                    _this.hibachiScope.loginDisplayed = false;
                    _this.$route.reload();
                    _this.dialogService.removeCurrentDialog();
                }
            }, function (rejection) {
            });
        };
        this.$hibachi = $hibachi;
        this.$window = $window;
        this.$route = $route;
        this.hibachiScope = hibachiScope;
        this.account_login = $hibachi.newEntity('Account_Login');
    }
    return SWLoginController;
}());
var SWLogin = /** @class */ (function () {
    //@ngInject
    function SWLogin($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder) {
        this.$route = $route;
        this.$log = $log;
        this.$window = $window;
        this.corePartialsPath = corePartialsPath;
        this.$hibachi = $hibachi;
        this.dialogService = dialogService;
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {};
        this.controller = SWLoginController;
        this.controllerAs = "SwLogin";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.corePartialsPath + '/login.html');
    }
    SWLogin.Factory = function () {
        var directive = function ($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder) { return new SWLogin($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder); };
        directive.$inject = [
            '$route',
            '$log',
            '$window',
            'corePartialsPath',
            '$hibachi',
            'dialogService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWLogin;
}());
exports.SWLogin = SWLogin;


/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWModalLauncherController = /** @class */ (function () {
    // @ngInject
    function SWModalLauncherController() {
        var _this = this;
        this.hasSaveAction = false;
        this.hasCancelAction = false;
        this.hasDeleteAction = false;
        this.launchModal = function () {
            //activate the necessary modal
            _this.showModal = true;
        };
        this.saveCallback = function () {
            //the passed save action must return a promise
            if (_this.hasSaveAction) {
                var savePromise = _this.saveAction()();
            }
            savePromise.then(function (response) {
                //if the action was sucessful
                $("#" + _this.modalName).modal('hide');
            }, function (reason) {
                //if the action failed
            });
        };
        this.deleteCallback = function () {
            //the passed save action must return a promise
            if (_this.hasDeleteAction) {
                var deletePromise = _this.saveAction()();
            }
            deletePromise.then(function (response) {
                //if the action was sucessful
                $("#" + _this.modalName).modal('hide');
            }, function (reason) {
                //if the action failed
            });
        };
        this.cancelCallback = function () {
            if (_this.hasCancelAction) {
                _this.cancelAction()();
            }
        };
        if (angular.isUndefined(this.showModal)) {
            this.showModal = false;
        }
        if (angular.isUndefined(this.saveActionText)) {
            this.saveActionText = "Save";
        }
        if (angular.isUndefined(this.cancelActionText)) {
            this.cancelActionText = "Cancel";
        }
    }
    return SWModalLauncherController;
}());
exports.SWModalLauncherController = SWModalLauncherController;
var SWModalLauncher = /** @class */ (function () {
    // @ngInject
    function SWModalLauncher($compile, corePartialsPath, hibachiPathBuilder) {
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.transclude = {
            button: '?swModalButton',
            staticButton: '?swModalStaticButton',
            content: '?swModalContent'
        };
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            showModal: "=?",
            modalName: "@",
            title: "@",
            saveAction: "&?",
            deleteAction: "&?",
            cancelAction: "&?",
            saveActionText: "@?",
            cancelActionText: "@?"
        };
        this.controller = SWModalLauncherController;
        this.controllerAs = "swModalLauncher";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    if (angular.isDefined(attrs.saveAction)) {
                        $scope.swModalLauncher.hasSaveAction = true;
                    }
                    if (angular.isDefined(attrs.deleteAction)) {
                        $scope.swModalLauncher.hasDeleteAction = true;
                    }
                    if (angular.isDefined(attrs.cancelAction)) {
                        $scope.swModalLauncher.hasCancelAction = true;
                    }
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "modallauncher.html";
    }
    SWModalLauncher.Factory = function () {
        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWModalLauncher($compile, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWModalLauncher;
}());
exports.SWModalLauncher = SWModalLauncher;


/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWModalWindowController = /** @class */ (function () {
    // @ngInject
    function SWModalWindowController() {
        if (angular.isUndefined(this.modalName)) {
            console.warn("You did not pass a modal title to SWModalWindowController");
            this.modalName = "";
        }
    }
    return SWModalWindowController;
}());
exports.SWModalWindowController = SWModalWindowController;
var SWModalWindow = /** @class */ (function () {
    // @ngInject
    function SWModalWindow($compile, corePartialsPath, hibachiPathBuilder) {
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.transclude = {
            modalBody: "?swModalBody"
        };
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            modalName: "@",
            title: "@",
            hasSaveAction: "=?",
            saveAction: "&?",
            hasDeleteAction: "=?",
            deleteAction: "&?",
            hasCancelAction: "=?",
            cancelAction: "&?",
            saveActionText: "@",
            cancelActionText: "@"
        };
        this.controller = SWModalWindowController;
        this.controllerAs = "swModalWindow";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "modalwindow.html";
    }
    SWModalWindow.Factory = function () {
        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWModalWindow($compile, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWModalWindow;
}());
exports.SWModalWindow = SWModalWindow;


/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWNumbersOnly = /** @class */ (function () {
    function SWNumbersOnly() {
        this.restrict = "A";
        this.require = "ngModel";
        this.scope = {
            ngModel: '=',
            minNumber: '=?',
            maxNumber: '=?'
        };
        this.link = function ($scope, element, attrs, modelCtrl) {
            modelCtrl.$parsers.unshift(function (inputValue) {
                var modelValue = modelCtrl.$modelValue;
                if (inputValue != "" && !isNaN(Number(inputValue))) {
                    if (angular.isDefined($scope.minNumber)) {
                        if (Number(inputValue) >= $scope.minNumber || !angular.isDefined($scope.minNumber)) {
                            modelCtrl.$setValidity("minNumber", true);
                        }
                        else if (angular.isDefined($scope.minNumber)) {
                            modelCtrl.$setValidity("minNumber", false);
                        }
                    }
                    if (angular.isDefined($scope.maxNumber)) {
                        if (Number(inputValue) <= $scope.maxNumber || !angular.isDefined($scope.maxNumber)) {
                            modelCtrl.$setValidity("maxNumber", true);
                        }
                        else if (angular.isDefined($scope.maxNumber)) {
                            modelCtrl.$setValidity("maxNumber", false);
                        }
                    }
                    if (modelCtrl.$valid) {
                        modelValue = Number(inputValue);
                    }
                    else {
                        modelValue = $scope.minNumber;
                    }
                }
                return modelValue;
            });
        };
    }
    SWNumbersOnly.Factory = function () {
        var directive = function () { return new SWNumbersOnly(); };
        directive.$inject = [];
        return directive;
    };
    return SWNumbersOnly;
}());
exports.SWNumbersOnly = SWNumbersOnly;


/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOptions = /** @class */ (function () {
    function SWOptions($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'AE',
            scope: {
                objectName: '@'
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "options.html",
            link: function (scope, element, attrs) {
                scope.swOptions = {};
                scope.swOptions.objectName = scope.objectName;
                //sets up drop down options via collections
                scope.getOptions = function () {
                    scope.swOptions.object = $hibachi['new' + scope.swOptions.objectName]();
                    var columnsConfig = [
                        {
                            "propertyIdentifier": scope.swOptions.objectName.charAt(0).toLowerCase() + scope.swOptions.objectName.slice(1) + 'Name'
                        },
                        {
                            "propertyIdentifier": scope.swOptions.object.$$getIDName()
                        }
                    ];
                    $hibachi.getEntity(scope.swOptions.objectName, { allRecords: true, columnsConfig: angular.toJson(columnsConfig) })
                        .then(function (value) {
                        scope.swOptions.options = value.records;
                        observerService.notify('optionsLoaded');
                    });
                };
                scope.getOptions();
                var selectOption = function (option) {
                    if (option) {
                        scope.swOptions.selectOption(option);
                    }
                    else {
                        scope.swOptions.selectOption(scope.swOptions.options[0]);
                    }
                };
                observerService.attach(selectOption, 'selectOption', 'selectOption');
                //use by ng-change to record changes
                scope.swOptions.selectOption = function (selectedOption) {
                    scope.swOptions.selectedOption = selectedOption;
                    observerService.notify('optionsChanged', selectedOption);
                };
            }
        };
    }
    SWOptions.Factory = function () {
        var directive = function ($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder) { return new SWOptions($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'observerService',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWOptions;
}());
exports.SWOptions = SWOptions;


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWOrderByControlsController = /** @class */ (function () {
    // @ngInject
    function SWOrderByControlsController(listingService, observerService, utilityService) {
        var _this = this;
        this.listingService = listingService;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.sortCode = "ASC";
        this.updateSortOrderProperty = function () {
            if (angular.isDefined(_this.selectedPropertyIdentifier)) {
                _this.propertyNotChosen = false;
            }
            else {
                _this.propertyNotChosen = true;
            }
            _this.updateOrderBy();
        };
        this.updateOrderBy = function () {
            if (angular.isDefined(_this.selectedPropertyIdentifier) && _this.selectedPropertyIdentifier.length > 0) {
                var propertyIdentifier = _this.selectedPropertyIdentifier;
            }
            switch (_this.sortCode) {
                case "ASC":
                    _this.disabled = false;
                    if (propertyIdentifier != null) {
                        if (angular.isDefined(_this.collectionConfig)) {
                            _this.collectionConfig.toggleOrderBy(propertyIdentifier, true); //single column mode true
                        }
                        if (_this.inListingDisplay) {
                            _this.listingService.setSingleColumnOrderBy(_this.listingId, propertyIdentifier, "ASC");
                        }
                    }
                    if (_this.inListingDisplay)
                        _this.listingService.setManualSort(_this.listingId, false);
                    break;
                case "DESC":
                    _this.disabled = false;
                    if (propertyIdentifier != null) {
                        if (angular.isDefined(_this.collectionConfig)) {
                            _this.collectionConfig.toggleOrderBy(propertyIdentifier, true); //single column mode true
                        }
                        if (_this.inListingDisplay) {
                            _this.listingService.setSingleColumnOrderBy(_this.listingId, propertyIdentifier, "DESC");
                        }
                        if (_this.inListingDisplay)
                            _this.listingService.setManualSort(_this.listingId, false);
                    }
                    break;
                case "MANUAL":
                    //flip listing
                    _this.disabled = true;
                    if (_this.inListingDisplay) {
                        //this.swListingDisplay.sortable = true;
                        _this.listingService.setManualSort(_this.listingId, true);
                    }
                    break;
            }
        };
        this.sortAscending = function () {
            _this.sortCode = 'ASC';
            _this.updateOrderBy();
        };
        this.sortDescending = function () {
            _this.sortCode = 'DESC';
            _this.updateOrderBy();
        };
        this.manualSort = function () {
            _this.sortCode = 'MANUAL';
            _this.updateOrderBy();
        };
        if (angular.isUndefined(this.edit)) {
            this.edit = true;
        }
        if (angular.isDefined(this.collectionConfig)) {
            this.columns = this.collectionConfig.columns;
        }
        if (angular.isDefined(this.initialSortDefaultDirection) && this.initialSortDefaultDirection.length > 0) {
            this.sortCode = this.initialSortDefaultDirection;
        }
        if (angular.isDefined(this.initialSortProperty) && this.initialSortProperty.length > 0) {
            this.selectedPropertyIdentifier = this.initialSortProperty;
        }
        this.id = this.utilityService.createID(32);
    }
    return SWOrderByControlsController;
}());
exports.SWOrderByControlsController = SWOrderByControlsController;
var SWOrderByControls = /** @class */ (function () {
    // @ngInject
    function SWOrderByControls($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.listingService = listingService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            collectionConfig: "=?",
            selectedOrderByColumn: "=?",
            inListingDisplay: "=?",
            toggleCollectionConfig: "=?",
            initialSortProperty: "@?",
            initialSortDefaultDirection: "@?",
            sortPropertyFieldName: "@?",
            sortDefaultDirectionFieldName: "@?",
            edit: "=?"
        };
        this.require = { swListingDisplay: '?^swListingDisplay' };
        this.controller = SWOrderByControlsController;
        this.controllerAs = "swOrderByControls";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    if ($scope.swOrderByControls.inListingDisplay &&
                        _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
                        var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
                        $scope.swOrderByControls.listingId = listingDisplayScope.tableID;
                        _this.listingService.attachToListingInitiated($scope.swOrderByControls.listingId, $scope.swOrderByControls.updateOrderBy);
                        if ($scope.swOrderByControls.collectionConfig == null &&
                            listingDisplayScope.collectionConfig != null) {
                            $scope.swOrderByControls.collectionConfig = listingDisplayScope.collectionConfig;
                        }
                    }
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "orderbycontrols.html";
    }
    SWOrderByControls.Factory = function () {
        var directive = function ($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder) { return new SWOrderByControls($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "scopeService", "listingService", "corePartialsPath",
            "hibachiPathBuilder"];
        return directive;
    };
    return SWOrderByControls;
}());
exports.SWOrderByControls = SWOrderByControls;


/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWProcessCallerController = /** @class */ (function () {
    //@ngInject
    function SWProcessCallerController(rbkeyService, $templateRequest, $compile, corePartialsPath, $scope, $element, $transclude, utilityService, hibachiPathBuilder) {
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.$scope = $scope;
        this.$element = $element;
        this.$transclude = $transclude;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.type = this.type || 'link';
        this.queryString = this.queryString || '';
        this.$scope = $scope;
        this.$element = $element;
        this.$transclude = this.$transclude;
        this.$templateRequest(hibachiPathBuilder.buildPartialsPath(this.corePartialsPath) + "processcaller.html").then(function (html) {
            var template = angular.element(html);
            _this.$element.parent().append(template);
            $compile(template)(_this.$scope);
        });
        if (angular.isDefined(this.titleRbKey)) {
            this.title = this.rbkeyService.getRBKey(this.titleRbKey);
        }
        if (angular.isUndefined(this.text)) {
            this.text = this.title;
        }
    }
    return SWProcessCallerController;
}());
var SWProcessCaller = /** @class */ (function () {
    function SWProcessCaller(corePartialsPath, utilityService) {
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            action: "@",
            entity: "@",
            processContext: "@",
            hideDisabled: "=",
            type: "@",
            queryString: "@",
            text: "@",
            title: "@?",
            titleRbKey: "@?",
            'class': "@",
            icon: "=",
            iconOnly: "=",
            submit: "=",
            confirm: "=",
            disabled: "=",
            disabledText: "@",
            modal: "="
        };
        this.controller = SWProcessCallerController;
        this.controllerAs = "swProcessCaller";
        this.link = function (scope, element, attrs) {
        };
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
    }
    SWProcessCaller.Factory = function () {
        var directive = function (corePartialsPath, utilityService) { return new SWProcessCaller(corePartialsPath, utilityService); };
        directive.$inject = [
            'corePartialsPath', 'utilityService'
        ];
        return directive;
    };
    SWProcessCaller.$inject = ['corePartialsPath', 'utilityService'];
    return SWProcessCaller;
}());
exports.SWProcessCaller = SWProcessCaller;


/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWRbKey = /** @class */ (function () {
    function SWRbKey($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService) {
        return {
            restrict: 'A',
            scope: {
                swRbkey: "="
            },
            link: function (scope, element, attrs) {
                var rbKeyValue = scope.swRbkey;
                var bindRBKey = function () {
                    if (angular.isDefined(rbKeyValue) && angular.isString(rbKeyValue)) {
                        element.text(rbkeyService.getRBKey(rbKeyValue));
                    }
                };
                bindRBKey();
            }
        };
    }
    SWRbKey.Factory = function () {
        var directive = function ($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService) { return new SWRbKey($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService); };
        directive.$inject = [
            '$hibachi',
            'observerService',
            'utilityService',
            '$rootScope',
            '$log',
            'rbkeyService'
        ];
        return directive;
    };
    return SWRbKey;
}());
exports.SWRbKey = SWRbKey;


/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWScrollTrigger = /** @class */ (function () {
    function SWScrollTrigger($rootScope, $window, $timeout) {
        return {
            link: function (scope, elem, attrs) {
                var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
                $window = angular.element($window);
                scrollDistance = 0;
                if (attrs.infiniteScrollDistance != null) {
                    scope
                        .$watch(attrs.infiniteScrollDistance, function (value) {
                        return scrollDistance = parseInt(value, 10);
                    });
                }
                scrollEnabled = true;
                checkWhenEnabled = false;
                if (attrs.infiniteScrollDisabled != null) {
                    scope
                        .$watch(attrs.infiniteScrollDisabled, function (value) {
                        scrollEnabled = !value;
                        if (scrollEnabled
                            && checkWhenEnabled) {
                            checkWhenEnabled = false;
                            return handler();
                        }
                    });
                }
                handler = function () {
                    var elementBottom, remaining, shouldScroll, windowBottom;
                    windowBottom = $window.height()
                        + $window.scrollTop();
                    elementBottom = elem.offset().top
                        + elem.height();
                    remaining = elementBottom
                        - windowBottom;
                    shouldScroll = remaining <= $window
                        .height()
                        * scrollDistance;
                    if (shouldScroll && scrollEnabled) {
                        if ($rootScope.$$phase) {
                            return scope
                                .$eval(attrs.infiniteScroll);
                        }
                        else {
                            return scope
                                .$apply(attrs.infiniteScroll);
                        }
                    }
                    else if (shouldScroll) {
                        return checkWhenEnabled = true;
                    }
                };
                $window.on('scroll', handler);
                scope.$on('$destroy', function () {
                    return $window.off('scroll', handler);
                });
                return $timeout((function () {
                    if (attrs.infiniteScrollImmediateCheck) {
                        if (scope
                            .$eval(attrs.infiniteScrollImmediateCheck)) {
                            return handler();
                        }
                    }
                    else {
                        return handler();
                    }
                }), 0);
            }
        };
    }
    SWScrollTrigger.Factory = function () {
        var directive = function ($rootScope, $window, $timeout) { return new SWScrollTrigger($rootScope, $window, $timeout); };
        directive.$inject = [
            '$rootScope',
            '$window',
            '$timeout'
        ];
        return directive;
    };
    return SWScrollTrigger;
}());
exports.SWScrollTrigger = SWScrollTrigger;


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSelectionController = /** @class */ (function () {
    //@ngInject
    function SWSelectionController(selectionService, observerService) {
        var _this = this;
        this.selectionService = selectionService;
        this.observerService = observerService;
        this.updateSelectValue = function (res) {
            if (_this.isRadio && (res.action == 'check')) {
                _this.toggleValue == _this.selection;
            }
            else if (res.action == 'clear') {
                _this.toggleValue = false;
            }
            else if (res.action == 'selectAll') {
                _this.toggleValue = true;
            }
            else if (res.selection == _this.selection) {
                _this.toggleValue = (res.action == 'check');
            }
        };
        this.toggleSelection = function (toggleValue, selectionid, selection) {
            if (_this.isRadio) {
                _this.selectionService.radioSelection(selectionid, selection);
                _this.toggleValue = selection;
            }
            else {
                if (toggleValue) {
                    _this.selectionService.addSelection(selectionid, selection);
                }
                else {
                    _this.selectionService.removeSelection(selectionid, selection);
                }
            }
        };
        if (angular.isUndefined(this.name)) {
            this.name = 'selection';
        }
        if (selectionService.isAllSelected(this.selectionid)) {
            this.toggleValue = !selectionService.hasSelection(this.selectionid, this.selection);
        }
        else {
            this.toggleValue = selectionService.hasSelection(this.selectionid, this.selection);
        }
        if (this.isRadio && this.toggleValue) {
            this.toggleValue = this.selection;
        }
        if (this.isRadio && this.toggleValue) {
            this.toggleValue = this.selection;
        }
        //attach observer so we know when a selection occurs
        observerService.attach(this.updateSelectValue, 'swSelectionToggleSelection' + this.selectionid);
        if (angular.isDefined(this.initSelected) && this.initSelected) {
            this.toggleValue = this.selection;
            this.toggleSelection(this.toggleValue, this.selectionid, this.selection);
        }
    }
    return SWSelectionController;
}());
var SWSelection = /** @class */ (function () {
    function SWSelection(collectionPartialsPath, hibachiPathBuilder) {
        this.collectionPartialsPath = collectionPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            selection: "=",
            selectionid: "@",
            id: "=",
            isRadio: "=",
            name: "@",
            disabled: "=",
            initSelected: "="
        };
        this.controller = SWSelectionController;
        this.controllerAs = 'swSelection';
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "selection.html";
    }
    SWSelection.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWSelection(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWSelection.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
    return SWSelection;
}());
exports.SWSelection = SWSelection;


/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSortable = /** @class */ (function () {
    function SWSortable(expression, compiledElement) {
        return function (linkElement) {
            var scope = this;
            linkElement.sortable({
                placeholder: "placeholder",
                opacity: 0.8,
                axis: "y",
                update: function (event, ui) {
                    // get model
                    var model = scope.$apply(expression);
                    // remember its length
                    var modelLength = model.length;
                    // rember html nodes
                    var items = [];
                    // loop through items in new order
                    linkElement.children().each(function (index) {
                        var item = $(this);
                        // get old item index
                        var oldIndex = parseInt(item.attr("sw:sortable-index"), 10);
                        // add item to the end of model
                        model.push(model[oldIndex]);
                        if (item.attr("sw:sortable-index")) {
                            // items in original order to restore dom
                            items[oldIndex] = item;
                            // and remove item from dom
                            item.detach();
                        }
                    });
                    model.splice(0, modelLength);
                    // restore original dom order, so angular does not get confused
                    linkElement.append.apply(linkElement, items);
                    // notify angular of the change
                    scope.$digest();
                }
            });
        };
    }
    SWSortable.Factory = function () {
        var directive = function (expression, compiledElement) { return new SWSortable(expression, compiledElement); };
        directive.$inject = ['expression', 'compiledElement'];
        return directive;
    };
    return SWSortable;
}());
exports.SWSortable = SWSortable;


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWTabContentController = /** @class */ (function () {
    // @ngInject
    function SWTabContentController($scope, $q, $transclude, $hibachi, $timeout, utilityService, rbkeyService, collectionConfigService) {
        this.$scope = $scope;
        this.$q = $q;
        this.$transclude = $transclude;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.collectionConfigService = collectionConfigService;
        if (angular.isUndefined(this.active)) {
            this.active = false;
        }
        if (angular.isUndefined(this.loaded)) {
            this.loaded = false;
        }
        if (angular.isUndefined(this.hide)) {
            this.hide = false;
        }
        if (angular.isUndefined(this.id)) {
            this.id = utilityService.createID(16);
        }
        if (angular.isUndefined(this.name)) {
            this.name = this.id;
        }
        //make a tab service? 
    }
    return SWTabContentController;
}());
exports.SWTabContentController = SWTabContentController;
var SWTabContent = /** @class */ (function () {
    // @ngInject
    function SWTabContent($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.observerService = observerService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            active: "=?",
            loaded: "=?",
            hide: "=?",
            name: "@?"
        };
        this.controller = SWTabContentController;
        this.controllerAs = "swTabContent";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                    var parentDirective = _this.scopeService.getRootParentScope($scope, "swTabGroup")["swTabGroup"];
                    if (angular.isDefined(parentDirective) && angular.isDefined(parentDirective.tabs)) {
                        parentDirective.tabs.push($scope.swTabContent);
                        _this.observerService.notify(parentDirective.initTabEventName);
                    }
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tabcontent.html";
    }
    SWTabContent.Factory = function () {
        var directive = function ($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder) { return new SWTabContent($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile",
            "scopeService",
            "observerService",
            "corePartialsPath",
            "hibachiPathBuilder"];
        return directive;
    };
    return SWTabContent;
}());
exports.SWTabContent = SWTabContent;


/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWTabGroupController = /** @class */ (function () {
    // @ngInject
    function SWTabGroupController(utilityService, rbkeyService, observerService) {
        var _this = this;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.observerService = observerService;
        this.hasActiveTab = false;
        this.initTab = function () {
            for (var i = 0; i < _this.tabs.length; i++) {
                if (!_this.tabs[i].hide) {
                    _this.tabs[i].active = true;
                    _this.tabs[i].loaded = true;
                    break;
                }
            }
        };
        this.switchTab = function (tabToActivate) {
            _this.observerService.notify(_this.switchTabGroupEventName);
            for (var i = 0; i < _this.tabs.length; i++) {
                _this.tabs[i].active = false;
            }
            tabToActivate.active = true;
            tabToActivate.loaded = true;
        };
        this.getTabByName = function (name) {
            for (var i = 0; i < _this.tabs.length; i++) {
                if (_this.tabs[i].name == name) {
                    return _this.tabs[i];
                }
            }
        };
        if (angular.isUndefined(this.tabs)) {
            this.tabs = [];
        }
        this.tabGroupID = "TG" + this.utilityService.createID(30);
        this.switchTabGroupEventName = "SwitchTabGroup" + this.tabGroupID;
        this.initTabEventName = "InitTabForTabGroup" + this.tabGroupID;
        this.observerService.attach(this.initTab, this.initTabEventName);
        if (angular.isUndefined(this.switchTabEventName)) {
            this.switchTabEventName = this.tabGroupID + "SwitchTabTo";
        }
        this.observerService.attach(this.switchTab, this.switchTabEventName);
    }
    return SWTabGroupController;
}());
exports.SWTabGroupController = SWTabGroupController;
var SWTabGroup = /** @class */ (function () {
    // @ngInject
    function SWTabGroup($compile, corePartialsPath, hibachiPathBuilder) {
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            switchTabEventName: "@?"
        };
        this.controller = SWTabGroupController;
        this.controllerAs = "swTabGroup";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) { },
                post: function ($scope, element, attrs) { }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tabgroup.html";
    }
    SWTabGroup.Factory = function () {
        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWTabGroup($compile, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWTabGroup;
}());
exports.SWTabGroup = SWTabGroup;


/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWTooltipController = /** @class */ (function () {
    // @ngInject
    function SWTooltipController(rbkeyService) {
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.showTooltip = false;
        this.show = function () {
            _this.showTooltip = true;
        };
        this.hide = function () {
            _this.showTooltip = false;
        };
        if (angular.isDefined(this.rbKey)) {
            this.text = rbkeyService.getRBKey(this.rbKey);
        }
        if (angular.isUndefined(this.position)) {
            this.position = "top";
        }
    }
    return SWTooltipController;
}());
exports.SWTooltipController = SWTooltipController;
var SWTooltip = /** @class */ (function () {
    // @ngInject
    function SWTooltip($document, corePartialsPath, hibachiPathBuilder) {
        this.$document = $document;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            rbKey: "@?",
            text: "@?",
            position: "@?",
            showTooltip: "=?"
        };
        this.controller = SWTooltipController;
        this.controllerAs = "swTooltip";
        this.link = function (scope, element, attrs, controller, transclude) {
            var tooltip = element.find(".tooltip");
            var elementPosition = element.position();
            var tooltipStyle = tooltip[0].style;
            if (attrs && attrs.position) {
                switch (attrs.position.toLowerCase()) {
                    case 'top':
                        tooltipStyle.top = "0px";
                        tooltipStyle.left = "0px";
                        break;
                    case 'bottom':
                        //where the element is rendered to begin with
                        break;
                    case 'left':
                        tooltipStyle.top = (elementPosition.top + element[0].offsetHeight - 5) + "px";
                        tooltipStyle.left = (-1 * (elementPosition.left + element[0].offsetLeft - 5)) + "px";
                        element.find(".tooltip-inner")[0].style.maxWidth = "none";
                        break;
                    default:
                        //right is the default
                        tooltipStyle.top = (elementPosition.top + element[0].offsetHeight - 5) + "px";
                        tooltipStyle.left = (elementPosition.left + element[0].offsetWidth - 5) + "px";
                }
            }
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tooltip.html";
    }
    SWTooltip.Factory = function () {
        var directive = function ($document, corePartialsPath, hibachiPathBuilder) { return new SWTooltip($document, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$document", "corePartialsPath", "hibachiPathBuilder"];
        return directive;
    };
    return SWTooltip;
}());
exports.SWTooltip = SWTooltip;


/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadInputFieldController = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadInputFieldController($scope, $transclude, collectionConfigService, typeaheadService, $rootScope, observerService) {
        var _this = this;
        this.$scope = $scope;
        this.$transclude = $transclude;
        this.collectionConfigService = collectionConfigService;
        this.typeaheadService = typeaheadService;
        this.$rootScope = $rootScope;
        this.observerService = observerService;
        this.columns = [];
        this.filters = [];
        this.addFunction = function (value) {
            _this.typeaheadService.typeaheadStore.dispatch({
                "type": "TYPEAHEAD_USER_SELECTION",
                "payload": {
                    name: _this.fieldName || "",
                    data: value[_this.propertyToSave] || ""
                }
            });
            _this.modelValue = value[_this.propertyToSave];
            if (_this.action) {
                var data = {};
                if (_this.variables) {
                    data = _this.variables();
                }
                data['value'] = _this.modelValue;
                _this.$root.slatwall.doAction(_this.action, data);
            }
        };
        this.$root = $rootScope;
        if (angular.isUndefined(this.typeaheadCollectionConfig)) {
            if (angular.isDefined(this.entityName)) {
                this.typeaheadCollectionConfig = collectionConfigService.newCollectionConfig(this.entityName);
            }
            else {
                throw ("You did not pass the correct collection config data to swTypeaheadInputField");
            }
        }
        if (angular.isUndefined(this.validateRequired)) {
            this.validateRequired = false;
        }
        //get the collection config
        this.$transclude($scope, function () { });
        if (angular.isUndefined(this.propertyToSave)) {
            throw ("You must select a property to save for the input field directive");
        }
        if (angular.isDefined(this.propertiesToLoad)) {
            this.typeaheadCollectionConfig.addDisplayProperty(this.propertiesToLoad);
        }
        angular.forEach(this.columns, function (column) {
            _this.typeaheadCollectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
        });
        angular.forEach(this.filters, function (filter) {
            _this.typeaheadCollectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
        });
        if (angular.isDefined(this.initialEntityId) && this.initialEntityId.length) {
            this.modelValue = this.initialEntityId;
        }
        if (this.eventListeners) {
            for (var key in this.eventListeners) {
                observerService.attach(this.eventListeners[key], key);
            }
        }
    }
    return SWTypeaheadInputFieldController;
}());
exports.SWTypeaheadInputFieldController = SWTypeaheadInputFieldController;
var SWTypeaheadInputField = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadInputField(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            fieldName: "@",
            entityName: "@",
            typeaheadCollectionConfig: "=?",
            propertiesToLoad: "@?",
            placeholderRbKey: "@?",
            propertyToShow: "@",
            propertyToSave: "@",
            initialEntityId: "@",
            allRecords: "=?",
            validateRequired: "=?",
            maxRecords: "@",
            action: "@",
            variables: '&?',
            eventListeners: '=?',
            placeholderText: '@?',
            searchEndpoint: '@?',
            titleText: '@?'
        };
        this.controller = SWTypeaheadInputFieldController;
        this.controllerAs = "swTypeaheadInputField";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadinputfield.html";
    }
    SWTypeaheadInputField.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadInputField(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["corePartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadInputField;
}());
exports.SWTypeaheadInputField = SWTypeaheadInputField;


/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadMultiselectController = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadMultiselectController($scope, $transclude, $hibachi, listingService, typeaheadService, utilityService, collectionConfigService) {
        var _this = this;
        this.$scope = $scope;
        this.$transclude = $transclude;
        this.$hibachi = $hibachi;
        this.listingService = listingService;
        this.typeaheadService = typeaheadService;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.addSelection = function (item) {
            _this.typeaheadService.addSelection(_this.typeaheadDataKey, item);
            if (_this.inListingDisplay) {
                _this.listingService.insertListingPageRecord(_this.listingId, item);
            }
        };
        this.removeSelection = function (index) {
            var itemRemoved = _this.typeaheadService.removeSelection(_this.typeaheadDataKey, index);
            if (_this.inListingDisplay) {
                _this.listingService.removeListingPageRecord(_this.listingId, itemRemoved);
            }
        };
        this.getSelections = function () {
            return _this.typeaheadService.getData(_this.typeaheadDataKey);
        };
        this.updateSelectionList = function () {
            _this.selectionList = _this.typeaheadService.updateSelectionList(_this.typeaheadDataKey);
        };
        if (angular.isUndefined(this.typeaheadDataKey)) {
            this.typeaheadDataKey = this.utilityService.createID(32);
        }
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
        if (angular.isUndefined(this.showSelections)) {
            this.showSelections = false;
        }
        if (angular.isUndefined(this.multiselectMode)) {
            this.multiselectMode = true;
        }
        if (angular.isUndefined(this.hasAddButtonFunction)) {
            this.hasAddButtonFunction = false;
        }
        if (angular.isUndefined(this.hasViewFunction)) {
            this.hasViewFunction = false;
        }
        if (angular.isDefined(this.selectedCollectionConfig)) {
            this.typeaheadService.initializeSelections(this.typeaheadDataKey, this.selectedCollectionConfig);
        }
        this.typeaheadService.attachTypeaheadSelectionUpdateEvent(this.typeaheadDataKey, this.updateSelectionList);
    }
    return SWTypeaheadMultiselectController;
}());
exports.SWTypeaheadMultiselectController = SWTypeaheadMultiselectController;
var SWTypeaheadMultiselect = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadMultiselect($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.typeaheadService = typeaheadService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            placeholderRbKey: "@",
            collectionConfig: "=?",
            selectedCollectionConfig: "=?",
            typeaheadDataKey: "@?",
            multiselectModeOn: "=?multiselectMode",
            showSelections: "=?",
            dataTarget: "=?",
            dataTargetIndex: "=?",
            addButtonFunction: "&?",
            viewFunction: "&?",
            inListingDisplay: "=?",
            listingId: "@?",
            propertyToCompare: "@?",
            fallbackPropertiesToCompare: "@?",
            rightContentPropertyIdentifier: "@?",
            selectionFieldName: "@?",
            disabled: "=?"
        };
        this.controller = SWTypeaheadMultiselectController;
        this.controllerAs = "swTypeaheadMultiselect";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    //because callbacks are defined even when they're not passed in, this needs to be communicated to the typeahead
                    if (angular.isDefined(attrs.addButtonFunction)) {
                        $scope.swTypeaheadMultiselect.hasAddButtonFunction = true;
                    }
                    else {
                        $scope.swTypeaheadMultiselect.hasAddButtonFunction = false;
                    }
                    if (angular.isDefined(attrs.viewFunction)) {
                        $scope.swTypeaheadMultiselect.viewFunction = true;
                    }
                    else {
                        $scope.swTypeaheadMultiselect.viewFunction = false;
                    }
                    if (angular.isUndefined($scope.swTypeaheadMultiselect.inListingDisplay)) {
                        $scope.swTypeaheadMultiselect.inListingDisplay = false;
                    }
                    if ($scope.swTypeaheadMultiselect.inListingDisplay && _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
                        var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
                        $scope.swTypeaheadMultiselect.listingId = listingDisplayScope.tableID;
                        listingDisplayScope.typeaheadDataKey = $scope.swTypeaheadMultiselect.typeaheadDataKey;
                    }
                },
                post: function ($scope, element, attrs) {
                    var target = element.find(".s-selected-list");
                    var selectedItemTemplate = angular.element('<div class="alert s-selected-item" ng-repeat="item in swTypeaheadMultiselect.getSelections() track by $index">');
                    var closeButton = angular.element('<button ng-click="swTypeaheadMultiselect.removeSelection($index)" type="button" class="close"><span>×</span><span class="sr-only" sw-rbkey="&apos;define.close&apos;"></span></button>');
                    selectedItemTemplate.append(closeButton);
                    selectedItemTemplate.append(_this.typeaheadService.stripTranscludedContent(transclude($scope, function () { })));
                    target.append(_this.$compile(selectedItemTemplate)($scope));
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadmultiselect.html";
    }
    SWTypeaheadMultiselect.Factory = function () {
        var directive = function ($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadMultiselect($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "scopeService", "typeaheadService", "corePartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadMultiselect;
}());
exports.SWTypeaheadMultiselect = SWTypeaheadMultiselect;


/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadRemoveSelectionController = /** @class */ (function () {
    function SWTypeaheadRemoveSelectionController($scope, listingService, scopeService, typeaheadService, utilityService) {
        var _this = this;
        this.$scope = $scope;
        this.listingService = listingService;
        this.scopeService = scopeService;
        this.typeaheadService = typeaheadService;
        this.utilityService = utilityService;
        this.updatePageRecord = function () {
            if (_this.scopeService.hasParentScope(_this.$scope, "pageRecord")) {
                var pageRecordScope = _this.scopeService.getRootParentScope(_this.$scope, "pageRecord")["pageRecord"];
                _this.pageRecord = pageRecordScope;
            }
        };
        this.removeSelection = function () {
            if (!_this.disabled) {
                _this.typeaheadService.removeSelection(_this.typeaheadDataKey, undefined, _this.pageRecord);
                _this.listingService.removeListingPageRecord(_this.listingId, _this.pageRecord);
            }
        };
        this.listingService.attachToListingPageRecordsUpdate(this.listingId, this.updatePageRecord, this.utilityService.createID(32));
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
    }
    return SWTypeaheadRemoveSelectionController;
}());
exports.SWTypeaheadRemoveSelectionController = SWTypeaheadRemoveSelectionController;
var SWTypeaheadRemoveSelection = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadRemoveSelection(scopeService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.scopeService = scopeService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            typeaheadDataKey: "@?",
            index: "@?",
            disabled: "=?"
        };
        this.controller = SWTypeaheadRemoveSelectionController;
        this.controllerAs = "swTypeaheadRemoveSelection";
        this.link = function (scope, element, attrs) {
            if (_this.scopeService.hasParentScope(scope, "swListingDisplay")) {
                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay")["swListingDisplay"];
                scope.swTypeaheadRemoveSelection.typeaheadDataKey = listingDisplayScope.typeaheadDataKey;
                scope.swTypeaheadRemoveSelection.listingId = listingDisplayScope.tableID;
            }
            if (_this.scopeService.hasParentScope(scope, "pageRecord")) {
                var pageRecordScope = _this.scopeService.getRootParentScope(scope, "pageRecord")["pageRecord"];
                scope.swTypeaheadRemoveSelection.pageRecord = pageRecordScope;
            }
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadremoveselection.html";
    }
    SWTypeaheadRemoveSelection.Factory = function () {
        var directive = function (scopeService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadRemoveSelection(scopeService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["scopeService", "corePartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadRemoveSelection;
}());
exports.SWTypeaheadRemoveSelection = SWTypeaheadRemoveSelection;


/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadSearchController = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadSearchController($scope, $q, $transclude, $hibachi, $timeout, utilityService, observerService, rbkeyService, collectionConfigService, typeaheadService, $http, requestService) {
        var _this = this;
        this.$scope = $scope;
        this.$q = $q;
        this.$transclude = $transclude;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.rbkeyService = rbkeyService;
        this.collectionConfigService = collectionConfigService;
        this.typeaheadService = typeaheadService;
        this.$http = $http;
        this.requestService = requestService;
        this.results = [];
        this.columns = [];
        this.filters = [];
        this.searchableColumns = [];
        this.initialSearchableColumnsState = [];
        this.searchableColumnSelection = 'All';
        this.fallbackPropertyArray = [];
        this.clearSearch = function () {
            _this.searchText = "";
            _this.hideSearch = true;
            if (angular.isDefined(_this.addFunction)) {
                _this.addFunction()(undefined);
            }
        };
        this.toggleDropdown = function () {
            _this.dropdownOpen = !_this.dropdownOpen;
        };
        this.toggleOptions = function () {
            if (_this.hideSearch && (!_this.searchText || !_this.searchText.length)) {
                _this.search(_this.searchText);
            }
            _this.hideSearch = !_this.hideSearch;
        };
        /**
         * The actionCreator function for searching.
         */
        this.rSearch = function (search) {
            /**
             * Fire off an action that a search is happening.
             * Example action function. The dispatch takes a function, that sends data in a payload
             * to the reducer.
             */
            _this.typeaheadService.typeaheadStore.dispatch({
                "type": "TYPEAHEAD_QUERY",
                "payload": {
                    "searchText": search
                }
            });
        };
        this.search = function (search) {
            if (search === void 0) { search = ""; }
            _this.rSearch(search);
            if (_this._timeoutPromise) {
                _this.$timeout.cancel(_this._timeoutPromise);
            }
            _this.collectionConfig.setKeywords(search);
            if (angular.isDefined(_this.filterGroupsConfig)) {
                //allows for filtering on search text
                var filterConfig = _this.filterGroupsConfig.replace("replaceWithSearchString", search);
                filterConfig = filterConfig.trim();
                _this.collectionConfig.loadFilterGroups(JSON.parse(filterConfig));
            }
            _this._timeoutPromise = _this.$timeout(function () {
                var promise;
                if (_this.searchEndpoint) {
                    promise = _this.requestService.newPublicRequest('/' + _this.searchEndpoint, {
                        search: search,
                        options: _this.collectionConfig.getOptions(),
                        entityName: _this.collectionConfig.baseEntityName
                    }, 'post', {
                        'Content-Type': 'application/json'
                    }).promise;
                }
                else {
                    promise = _this.collectionConfig.getEntity();
                }
                promise.then(function (response) {
                    _this.results = response.pageRecords || response.records;
                    _this.updateSelections();
                }).finally(function () {
                    _this.resultsDeferred.resolve();
                    _this.hideSearch = (_this.results.length == 0);
                });
            }, 500);
        };
        this.updateSelections = function () {
            _this.typeaheadService.updateSelections(_this.typeaheadDataKey);
        };
        this.updateSearchableProperties = function (column) {
            if (angular.isString(column) && column == 'all') {
                angular.copy(_this.initialSearchableColumnsState, _this.searchableColumns); //need to insure that these changes are actually on the collectionconfig
                _this.searchableColumnSelection = 'All';
            }
            else {
                angular.forEach(_this.searchableColumns, function (value, key) {
                    value.isSearchable = false;
                });
                column.isSearchable = true;
                _this.searchableColumnSelection = column.title;
            }
            //probably need to refetch the collection
        };
        this.addOrRemoveItem = function (item) {
            var remove = item.selected || false;
            if (!_this.hideSearch && !_this.multiselectMode) {
                _this.hideSearch = true;
            }
            if (!_this.multiselectMode) {
                if (angular.isDefined(_this.propertyToShow)) {
                    _this.searchText = item[_this.propertyToShow];
                }
                else if (angular.isDefined(_this.columns) &&
                    _this.columns.length &&
                    angular.isDefined(_this.columns[0].propertyIdentifier)) {
                    _this.searchText = item[_this.columns[0].propertyIdentifier];
                }
            }
            if (!remove && angular.isDefined(_this.addFunction)) {
                _this.addFunction()(item);
            }
            if (remove && angular.isDefined(_this.removeFunction)) {
                _this.removeFunction()(item.selectedIndex);
                item.selected = false;
                item.selectedIndex = undefined;
            }
            _this.updateSelections();
        };
        this.addButtonItem = function () {
            if (!_this.hideSearch) {
                _this.hideSearch = true;
            }
            if (angular.isDefined(_this.addButtonFunction)) {
                _this.addButtonFunction()(_this.searchText);
            }
        };
        this.viewButtonClick = function () {
            _this.viewFunction()();
        };
        this.closeThis = function (clickOutsideArgs) {
            _this.hideSearch = true;
            if (angular.isDefined(clickOutsideArgs)) {
                for (var callBackAction in clickOutsideArgs.callBackActions) {
                    clickOutsideArgs.callBackActions[callBackAction]();
                }
            }
        };
        this.getSelections = function () {
            return _this.typeaheadService.getData(_this.typeaheadDataKey);
        };
        this.dropdownOpen = false;
        this.requestService = requestService;
        //populates all needed variables
        this.$transclude($scope, function () { });
        this.resultsDeferred = $q.defer();
        this.resultsPromise = this.resultsDeferred.promise;
        if (angular.isUndefined(this.typeaheadDataKey)) {
            this.typeaheadDataKey = this.utilityService.createID(32);
        }
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
        if (angular.isUndefined(this.multiselectMode)) {
            this.multiselectMode = false;
        }
        if (angular.isUndefined(this.searchText) || this.searchText == null) {
            this.searchText = "";
        }
        else {
            this.search(this.searchText);
        }
        if (angular.isUndefined(this.validateRequired)) {
            this.validateRequired = false;
        }
        if (angular.isUndefined(this.hideSearch)) {
            this.hideSearch = true;
        }
        if (angular.isUndefined(this.collectionConfig)) {
            if (angular.isDefined(this.entity)) {
                this.collectionConfig = collectionConfigService.newCollectionConfig(this.entity);
            }
            else {
                throw ("You did not pass the correct collection config data to swTypeaheadSearch");
            }
        }
        if (angular.isDefined(this.collectionConfig)) {
            this.primaryIDPropertyName = $hibachi.getPrimaryIDPropertyNameByEntityName(this.collectionConfig.baseEntityName);
        }
        if (angular.isDefined(this.fallbackPropertiesToCompare) &&
            this.fallbackPropertiesToCompare.length) {
            this.fallbackPropertyArray = this.fallbackPropertiesToCompare.split(",");
        }
        if (angular.isDefined(this.placeholderRbKey)) {
            this.placeholderText = this.rbkeyService.getRBKey(this.placeholderRbKey);
        }
        else if (angular.isUndefined(this.placeholderText)) {
            this.placeholderText = this.rbkeyService.getRBKey('define.search');
        }
        //init timeoutPromise for link
        this._timeoutPromise = this.$timeout(function () { }, 500);
        if (angular.isDefined(this.propertiesToDisplay)) {
            this.collectionConfig.addDisplayProperty(this.propertiesToDisplay.split(","));
        }
        angular.forEach(this.columns, function (column) {
            _this.collectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
        });
        angular.forEach(this.filters, function (filter) {
            _this.collectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
        });
        if (angular.isUndefined(this.allRecords)) {
            this.allRecords = this.collectionConfig.allRecords;
        }
        this.collectionConfig.setAllRecords(this.allRecords);
        if (angular.isUndefined(this.maxRecords)) {
            this.maxRecords = 10;
        }
        this.collectionConfig.setPageShow(this.maxRecords);
        if (angular.isDefined(this.initialEntityId) && this.initialEntityId.length) {
            this.initialEntityCollectionConfig = collectionConfigService.newCollectionConfig(this.collectionConfig.baseEntityName);
            this.initialEntityCollectionConfig.loadColumns(this.collectionConfig.columns);
            var primaryIDProperty = $hibachi.getPrimaryIDPropertyNameByEntityName(this.initialEntityCollectionConfig.baseEntityName);
            this.initialEntityCollectionConfig.addFilter(primaryIDProperty, this.initialEntityId, "=");
            var promise = this.initialEntityCollectionConfig.getEntity();
            promise.then(function (response) {
                _this.results = response.pageRecords;
                if (_this.results.length) {
                    _this.addOrRemoveItem(_this.results[0]);
                }
            });
        }
        angular.forEach(this.collectionConfig.columns, function (value, key) {
            if (value.isSearchable) {
                _this.searchableColumns.push(value);
            }
        });
        //need to insure that these changes are actually on the collectionconfig
        angular.copy(this.searchableColumns, this.initialSearchableColumnsState);
        this.typeaheadService.setTypeaheadState(this.typeaheadDataKey, this);
        this.observerService.attach(this.clearSearch, this.typeaheadDataKey + 'clearSearch');
        this.$http = $http;
    }
    return SWTypeaheadSearchController;
}());
exports.SWTypeaheadSearchController = SWTypeaheadSearchController;
var SWTypeaheadSearch = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadSearch($compile, typeaheadService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.typeaheadService = typeaheadService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            collectionConfig: "=?",
            entity: "@?",
            properties: "@?",
            propertiesToDisplay: "@?",
            filterGroupsConfig: "@?",
            placeholderText: "@?",
            placeholderRbKey: "@?",
            propertyToCompare: "@?",
            fallbackPropertiesToCompare: "@?",
            searchText: "=?",
            results: "=?",
            addFunction: "&?",
            removeFunction: "&?",
            addButtonFunction: "&?",
            viewFunction: "&?",
            showAddButton: "=?",
            showViewButton: "=?",
            validateRequired: "=?",
            uniqueResults: "<?",
            clickOutsideArguments: "=?",
            propertyToShow: "=?",
            hideSearch: "=?",
            allRecords: "=?",
            maxRecords: "=?",
            disabled: "=?",
            initialEntityId: "@",
            multiselectMode: "=?",
            typeaheadDataKey: "@?",
            rightContentPropertyIdentifier: "@?",
            searchEndpoint: "@?",
            allResultsEndpoint: "@?",
            titleText: '@?',
            urlBase: '@?',
            urlProperty: '@?'
        };
        this.controller = SWTypeaheadSearchController;
        this.controllerAs = "swTypeaheadSearch";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    if (angular.isDefined(attrs.addButtonFunction) && angular.isUndefined(attrs.showAddButton)) {
                        $scope.swTypeaheadSearch.showAddButton = true;
                    }
                    else if (angular.isUndefined(attrs.showAddButton)) {
                        $scope.swTypeaheadSearch.showAddButton = false;
                    }
                    if (angular.isDefined(attrs.viewFunction) && angular.isUndefined(attrs.showViewButton)) {
                        $scope.swTypeaheadSearch.showViewButton = true;
                    }
                    else if (angular.isUndefined(attrs.showViewButton)) {
                        $scope.swTypeaheadSearch.showViewButton = false;
                    }
                },
                post: function ($scope, element, attrs) {
                    var target = element.find(".dropdown-menu");
                    var uniqueFilter = '';
                    if ($scope.swTypeaheadSearch.uniqueResults) {
                        uniqueFilter = " | unique:'" + _this.typeaheadService.getTypeaheadPrimaryIDPropertyName($scope.swTypeaheadSearch.typeaheadDataKey) + "'";
                    }
                    var listItemTemplateString = "\n                    <li ng-repeat=\"item in swTypeaheadSearch.results" + uniqueFilter + "\" class=\"dropdown-item\" ng-class=\"{'s-selected':item.selected}\"></li>\n                ";
                    var anchorTemplateString = "\n                    <a \n                ";
                    if (angular.isDefined($scope.swTypeaheadSearch.urlBase) &&
                        angular.isDefined($scope.swTypeaheadSearch.urlProperty)) {
                        anchorTemplateString += 'href="' + $scope.swTypeaheadSearch.urlBase + '{{item.' + $scope.swTypeaheadSearch.urlProperty + '}}">';
                    }
                    else {
                        anchorTemplateString += 'ng-click="swTypeaheadSearch.addOrRemoveItem(item)">';
                    }
                    if (angular.isDefined($scope.swTypeaheadSearch.rightContentPropertyIdentifier)) {
                        var rightContentTemplateString = "\n                        <span class=\"s-right-content\" ng-bind=\"item[swTypeaheadSearch.rightContentPropertyIdentifier]\"></span></a>\n                    ";
                    }
                    else {
                        var rightContentTemplateString = "</a>";
                    }
                    if (angular.isDefined($scope.swTypeaheadSearch.allResultsEndpoint)) {
                        var searchAllListItemTemplate = "\n                        <li class=\"dropdown-item see-all-results\" ng-if=\"swTypeaheadSearch.results.length == swTypeaheadSearch.maxRecords\"><a href=\"{{swTypeaheadSearch.allResultsEndpoint}}?keywords={{swTypeaheadSearch.searchText}}\">See All Results</a></li>\n                    ";
                    }
                    anchorTemplateString = anchorTemplateString + rightContentTemplateString;
                    var listItemTemplate = angular.element(listItemTemplateString);
                    var anchorTemplate = angular.element(anchorTemplateString);
                    anchorTemplate.append(_this.typeaheadService.stripTranscludedContent(transclude($scope, function () { })));
                    listItemTemplate.append(anchorTemplate);
                    $scope.swTypeaheadSearch.resultsPromise.then(function () {
                        target.append(_this.$compile(listItemTemplate)($scope));
                        if (searchAllListItemTemplate != null) {
                            target.append(_this.$compile(searchAllListItemTemplate)($scope));
                        }
                    });
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadsearch.html";
    }
    SWTypeaheadSearch.Factory = function () {
        var directive = function ($compile, typeaheadService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadSearch($compile, typeaheadService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "typeaheadService", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadSearch;
}());
exports.SWTypeaheadSearch = SWTypeaheadSearch;


/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadSearchLineItemController = /** @class */ (function () {
    function SWTypeaheadSearchLineItemController() {
    }
    return SWTypeaheadSearchLineItemController;
}());
exports.SWTypeaheadSearchLineItemController = SWTypeaheadSearchLineItemController;
var SWTypeaheadSearchLineItem = /** @class */ (function () {
    //@ngInject
    function SWTypeaheadSearchLineItem($compile) {
        this.$compile = $compile;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            isSearchable: "@?",
        };
        this.controller = SWTypeaheadSearchLineItemController;
        this.controllerAs = "swTypeaheadSearchLineItem";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function (scope, element, attrs) {
                    var innerHTML = element[0].innerHTML;
                    element[0].innerHTML = '';
                    var span = '<span ng-if="item.' + scope.swTypeaheadSearchLineItem.propertyIdentifier + '.toString().trim().length">' + ' ' + innerHTML + '</span> <span ng-bind="item.' + scope.swTypeaheadSearchLineItem.propertyIdentifier + '"></span>';
                    element.append(span);
                },
                post: function (scope, element, attrs) { }
            };
        };
    }
    SWTypeaheadSearchLineItem.Factory = function () {
        var directive = function ($compile) { return new SWTypeaheadSearchLineItem($compile); };
        directive.$inject = [
            '$compile'
        ];
        return directive;
    };
    return SWTypeaheadSearchLineItem;
}());
exports.SWTypeaheadSearchLineItem = SWTypeaheadSearchLineItem;


/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var GlobalSearchController = /** @class */ (function () {
    //@ngInject
    function GlobalSearchController($scope, $log, $window, $timeout, $hibachi, rbkeyService) {
        $scope.keywords = '';
        $scope.searchResultsOpen = false;
        $scope.sidebarClass = 'sidebar';
        $scope.loading = false; //Set loading wheel to false
        $scope.resultsFound = true; // Set the results Found to true because no search has been done yet
        $scope.searchResults = {
            'product': {
                'title': 'Products',
                'resultNameFilter': function (data) {
                    return data['productName'];
                },
                'results': [],
                'id': function (data) {
                    return data['productID'];
                }
            },
            'order': {
                'title': rbkeyService.getRBKey('entity.order_plural'),
                'resultNameFilter': function (data) {
                    return data['orderNumber'];
                },
                'results': [],
                'id': function (data) {
                    return data['orderID'];
                }
            },
            'brand': {
                'title': rbkeyService.getRBKey('entity.brand_plural'),
                'resultNameFilter': function (data) {
                    return data['brandName'];
                },
                'results': [],
                'id': function (data) {
                    return data['brandID'];
                }
            },
            'account': {
                'title': 'Accounts',
                'resultNameFilter': function (data) {
                    return data['firstName'] + ' ' + data['lastName'];
                },
                'results': [],
                'id': function (data) {
                    return data['accountID'];
                }
            },
            'vendor': {
                'title': 'Vendors',
                'resultNameFilter': function (data) {
                    return data['vendorName'];
                },
                'results': [],
                'id': function (data) {
                    return data['vendorID'];
                }
            }
        };
        var _timeoutPromise;
        var _loadingCount = 0;
        $scope.updateSearchResults = function () {
            $scope.loading = true;
            $scope.showResults();
            if (_timeoutPromise) {
                $timeout.cancel(_timeoutPromise);
            }
            _timeoutPromise = $timeout(function () {
                // If no keywords, then set everything back to their defaults
                if ($scope.keywords === '') {
                    $scope.hideResults();
                    // Otherwise performe the search
                }
                else {
                    $scope.showResults();
                    // Set the loadingCount to the number of AJAX Calls we are about to do
                    _loadingCount = Object.keys($scope.searchResults).length;
                    for (var entityName in $scope.searchResults) {
                        (function (entityName) {
                            var searchPromise = $hibachi.getEntity(entityName, { keywords: $scope.keywords, pageShow: 4, deferkey: 'global-search-' + entityName });
                            searchPromise.then(function (data) {
                                // Clear out the old Results
                                $scope.searchResults[entityName].results = [];
                                $scope.searchResults[entityName].title = rbkeyService.getRBKey('entity.' + entityName.toLowerCase() + '_plural');
                                // push in the new results
                                for (var i in data.pageRecords) {
                                    $scope.searchResults[entityName].results.push({
                                        'name': $scope.searchResults[entityName].resultNameFilter(data.pageRecords[i]),
                                        'link': $hibachi.buildUrl('entity.detail' + entityName) + '&' + entityName + 'ID=' + $scope.searchResults[entityName].id(data.pageRecords[i]),
                                    });
                                }
                                // Increment Down The Loading Count
                                _loadingCount--;
                                // If the loadingCount drops to 0, then we can update scope
                                if (_loadingCount == 0) {
                                    $scope.loading = false;
                                    var _foundResults = false;
                                    for (var _thisEntityName in $scope.searchResults) {
                                        if ($scope.searchResults[_thisEntityName].results.length) {
                                            _foundResults = true;
                                            break;
                                        }
                                    }
                                    $scope.resultsFound = _foundResults;
                                }
                            });
                        })(entityName);
                    }
                }
            }, 500);
        };
        $scope.showResults = function () {
            $scope.searchResultsOpen = true;
            $scope.sidebarClass = 'sidebar s-search-width';
            $window.onclick = function (event) {
                var _targetClassOfSearch = event.target.parentElement.offsetParent.classList.contains('sidebar');
                if (!_targetClassOfSearch) {
                    $scope.hideResults();
                    $scope.$apply();
                }
            };
        };
        $scope.hideResults = function () {
            $scope.searchResultsOpen = false;
            $scope.sidebarClass = 'sidebar';
            $scope.search.$setPristine();
            $scope.keywords = "";
            $window.onclick = null;
            $scope.loading = false;
            $scope.resultsFound = true;
            for (var entityName in $scope.searchResults) {
                $scope.searchResults[entityName].results = [];
            }
        };
    }
    return GlobalSearchController;
}());
exports.GlobalSearchController = GlobalSearchController;


/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var DateFilter = /** @class */ (function () {
    function DateFilter() {
    }
    //@ngInject
    DateFilter.Factory = function ($filter) {
        return function (date, dateString) {
            if (date.trim().length === 0) {
                return '';
            }
            return $filter('date')(new Date(date), dateString);
        };
    };
    return DateFilter;
}());
exports.DateFilter = DateFilter;


/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var EntityRBKey = /** @class */ (function () {
    function EntityRBKey() {
    }
    //@ngInject
    EntityRBKey.Factory = function (rbkeyService) {
        return function (text) {
            if (angular.isDefined(text) && angular.isString(text)) {
                text = text.replace('_', '').toLowerCase();
                text = rbkeyService.getRBKey('entity.' + text);
            }
            return text;
        };
    };
    return EntityRBKey;
}());
exports.EntityRBKey = EntityRBKey;


/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var PercentageFilter = /** @class */ (function () {
    function PercentageFilter() {
    }
    PercentageFilter.Factory = function () {
        return function (input, decimals, suffix) {
            decimals = angular.isNumber(decimals) ? decimals : 3;
            suffix = suffix || '%';
            if (isNaN(input)) {
                return '';
            }
            return Math.round(input * Math.pow(10, decimals + 2)) / Math.pow(10, decimals) + suffix;
        };
    };
    return PercentageFilter;
}());
exports.PercentageFilter = PercentageFilter;


/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTrim = /** @class */ (function () {
    function SWTrim() {
    }
    //@ngInject
    SWTrim.Factory = function (rbkeyService) {
        return function (text, max, wordwise, tail) {
            if (wordwise === void 0) { wordwise = true; }
            if (tail === void 0) { tail = "..."; }
            if (angular.isDefined(text) && angular.isString(text)) {
                if (!text)
                    return '';
                max = parseInt(max, 10);
                if (!max)
                    return text;
                if (text.length <= max)
                    return text;
                text = text.substr(0, max);
                if (wordwise) {
                    var lastSpace = text.lastIndexOf(' ');
                    if (lastSpace != -1) {
                        text = text.substr(0, lastSpace);
                    }
                }
                return text + tail;
            }
            return text;
        };
    };
    return SWTrim;
}());
exports.SWTrim = SWTrim;


/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWUnique = /** @class */ (function () {
    function SWUnique() {
    }
    //@ngInject
    SWUnique.Factory = function () {
        var filterStub;
        filterStub = function (items, filterOn) {
            if (filterOn === false) {
                return items;
            }
            if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
                var hashCheck = {}, newItems = [];
                var extractValueToCompare = function (item) {
                    if (angular.isDefined(item) && item[filterOn] != null) {
                        return item[filterOn];
                    }
                    return item;
                };
                angular.forEach(items, function (item) {
                    var isDuplicate = false;
                    for (var i = 0; i < newItems.length; i++) {
                        if (extractValueToCompare(newItems[i]) == extractValueToCompare(item)) {
                            isDuplicate = true;
                            break;
                        }
                    }
                    if (!isDuplicate) {
                        newItems.push(item);
                    }
                });
            }
            return newItems;
        };
        //filterStub.$stateful = true;
        return filterStub;
    };
    return SWUnique;
}());
exports.SWUnique = SWUnique;


/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(27);
var Account = /** @class */ (function (_super) {
    __extends(Account, _super);
    function Account($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.giftCards = [];
        _this.userIsLoggedIn = function () {
            if (_this.accountID !== '') {
                return true;
            }
            return false;
        };
        return _this;
    }
    return Account;
}(baseentity_1.BaseEntity));
exports.Account = Account;


/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(27);
var Address = /** @class */ (function (_super) {
    __extends(Address, _super);
    function Address($injector) {
        return _super.call(this, $injector) || this;
    }
    return Address;
}(baseentity_1.BaseEntity));
exports.Address = Address;


/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(27);
var Cart = /** @class */ (function (_super) {
    __extends(Cart, _super);
    //deprecated
    function Cart($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.orderRequirementsList = "";
        _this.orderPayments = [];
        _this.orderItems = [];
        _this.orderFulfillments = [];
        _this.hasShippingAddressAndMethod = function () {
            if (_this.orderRequirementsList.indexOf('fulfillment') == -1) {
                return true;
            }
            return false;
        };
        _this.orderRequiresAccount = function () {
            if (_this.orderRequirementsList.indexOf('account') != -1 || !_this.account.accountID) {
                return true;
            }
            return false;
        };
        _this.getOrderItemQuantitySum = function () {
            var totalQuantity = 0;
            if (angular.isDefined(_this.orderItems)) {
                for (var orderItem in _this.orderItems) {
                    totalQuantity = totalQuantity + _this.orderItems[orderItem].quantity;
                }
                return totalQuantity;
            }
            return totalQuantity;
        };
        return _this;
    }
    return Cart;
}(baseentity_1.BaseEntity));
exports.Cart = Cart;


/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var account_1 = __webpack_require__(626);
exports.Account = account_1.Account;
var address_1 = __webpack_require__(627);
exports.Address = address_1.Address;
var cart_1 = __webpack_require__(628);
exports.Cart = cart_1.Cart;
var orderitem_1 = __webpack_require__(630);
exports.OrderItem = orderitem_1.OrderItem;
var orderpayment_1 = __webpack_require__(631);
exports.OrderPayment = orderpayment_1.OrderPayment;
var sku_1 = __webpack_require__(632);
exports.Sku = sku_1.Sku;


/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var baseentity_1 = __webpack_require__(27);
var OrderItem = /** @class */ (function (_super) {
    __extends(OrderItem, _super);
    function OrderItem($injector) {
        return _super.call(this, $injector) || this;
    }
    return OrderItem;
}(baseentity_1.BaseEntity));
exports.OrderItem = OrderItem;


/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var OrderPayment = /** @class */ (function () {
    function OrderPayment() {
    }
    return OrderPayment;
}());
exports.OrderPayment = OrderPayment;


/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(27);
var Sku = /** @class */ (function (_super) {
    __extends(Sku, _super);
    function Sku($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.setNewQOH = function (value) {
            _this.newQOH = value;
        };
        _this.getNewQOH = function () {
            return _this.newQOH;
        };
        return _this;
    }
    return Sku;
}(baseentity_1.BaseEntity));
exports.Sku = Sku;


/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var basetransient_1 = __webpack_require__(60);
var BaseProcess = /** @class */ (function (_super) {
    __extends(BaseProcess, _super);
    function BaseProcess($injector) {
        return _super.call(this, $injector) || this;
    }
    return BaseProcess;
}(basetransient_1.BaseTransient));
exports.BaseProcess = BaseProcess;


/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseprocess_1 = __webpack_require__(633);
var Order_AddOrderPayment = /** @class */ (function (_super) {
    __extends(Order_AddOrderPayment, _super);
    function Order_AddOrderPayment($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.$injector = $injector;
        return _this;
    }
    return Order_AddOrderPayment;
}(baseprocess_1.BaseProcess));
exports.Order_AddOrderPayment = Order_AddOrderPayment;


/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var order_addorderpayment_1 = __webpack_require__(634);
exports.Order_AddOrderPayment = order_addorderpayment_1.Order_AddOrderPayment;


/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var request_1 = __webpack_require__(172);
var AdminRequest = /** @class */ (function (_super) {
    __extends(AdminRequest, _super);
    function AdminRequest(url, data, method, headers, $injector, observerService) {
        if (method === void 0) { method = "post"; }
        if (headers === void 0) { headers = { 'Content-Type': "application/json" }; }
        var _this = _super.call(this, url, data, method, headers, $injector) || this;
        _this.observerService = observerService;
        _this.observerService = observerService;
        _this.promise.then(function (result) {
            //identify that it is an object save
            if (url.indexOf('api:main.post') != -1 && data.entityName) {
                var eventNameBase = data.entityName + data.context.charAt(0).toUpperCase() + data.context.slice(0);
                if (result.errors) {
                    _this.observerService.notify(eventNameBase + 'Failure', result.data);
                }
                else {
                    _this.observerService.notify(eventNameBase + 'Success', result.data);
                }
            }
            _this.messages = result.messages;
        }).catch(function (response) {
        });
        return _this;
    }
    return AdminRequest;
}(request_1.Request));
exports.AdminRequest = AdminRequest;


/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var request_1 = __webpack_require__(172);
var PublicRequest = /** @class */ (function (_super) {
    __extends(PublicRequest, _super);
    function PublicRequest(url, data, method, headers, $injector, observerService) {
        if (headers === void 0) { headers = { 'Content-Type': "application/x-www-form-urlencoded" }; }
        var _this = _super.call(this, url, data, method, headers, $injector) || this;
        _this.observerService = observerService;
        _this.failureActions = [];
        _this.successfulActions = [];
        _this.messages = [];
        _this.hasSuccessfulAction = function () {
            return _this.successfulActions.length > 0;
        };
        _this.hasFailureAction = function () {
            return _this.failureActions.length > 0;
        };
        _this.observerService = observerService;
        _this.promise.then(function (result) {
            _this.successfulActions = result.successfulActions;
            for (var i in _this.successfulActions) {
                var successfulAction = _this.successfulActions[i];
                _this.observerService.notify(successfulAction.split('.')[1] + 'Success', result.data);
            }
            _this.failureActions = result.failureActions;
            for (var i in _this.failureActions) {
                var failureAction = _this.failureActions[i];
                _this.observerService.notify(failureAction.split('.')[1] + 'Failure', result.data);
            }
            _this.messages = result.messages;
        }).catch(function (response) {
        });
        return _this;
    }
    return PublicRequest;
}(request_1.Request));
exports.PublicRequest = PublicRequest;


/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(15);
var AccountService = /** @class */ (function (_super) {
    __extends(AccountService, _super);
    //@ngInject
    function AccountService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Account') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return AccountService;
}(baseentityservice_1.BaseEntityService));
exports.AccountService = AccountService;


/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var CacheService = /** @class */ (function () {
    //@ngInject
    function CacheService(localStorageService) {
        var _this = this;
        this.localStorageService = localStorageService;
        this.cacheData = {};
        this.saveCacheData = function () {
            _this.localStorageService.setItem("cacheData", _this.cacheData);
        };
        this.hasKey = function (key) {
            if (angular.isDefined(_this.cacheData[key])) {
                return true;
            }
            return false;
        };
        this.dateExpired = function (key) {
            if (_this.cacheData[key].expiresTime == "forever") {
                return false;
            }
            return _this.cacheData[key].expiresTime < Date.now();
        };
        this.put = function (key, dataPromise, dataTarget, expiresTime) {
            if (expiresTime === void 0) { expiresTime = "forever"; }
            _this.cacheData[key] = {};
            _this.cacheData[key].expiresTime = expiresTime;
            _this.cacheData[key].dataPromise = dataPromise;
            _this.cacheData[key].dataTarget = dataTarget;
            dataPromise.then(function (response) {
                _this.localStorageService.setItem(key, response[dataTarget]);
            }, function (reason) {
                delete _this.cacheData[key];
            });
            _this.saveCacheData();
            return dataPromise;
        };
        this.reload = function (key, expiresTime) {
            if (expiresTime === void 0) { expiresTime = "forever"; }
            _this.cacheData[key].expiresTime = expiresTime;
            _this.cacheData[key].dataPromise.then(function (response) {
                _this.localStorageService.setItem(key, response[_this.cacheData[key].dataTarget]);
            }, function (reason) {
                delete _this.cacheData[key];
            });
            _this.saveCacheData();
            return _this.cacheData[key].dataPromise;
        };
        this.fetch = function (key) {
            if (_this.hasKey(key) && !_this.dateExpired(key)) {
                if (_this.localStorageService.hasItem(key)) {
                    return _this.localStorageService.getItem(key);
                }
                _this.put(key, _this.cacheData[key].dataPromise, _this.cacheData[key].dataTarget, _this.cacheData[key].expiresTime).finally(function () {
                    return _this.localStorageService.getItem(key);
                });
            }
        };
        this.fetchOrReload = function (key, expiresTime) {
            if (angular.isDefined(_this.fetch(key))) {
                return _this.fetch(key);
            }
            else {
                _this.reload(key, expiresTime).then(function (response) {
                    return _this.fetch(key);
                }, function (reason) {
                    //throw
                });
            }
        };
        if (localStorageService.hasItem("cacheData")) {
            this.cacheData = localStorageService.getItem("cacheData");
        }
    }
    return CacheService;
}());
exports.CacheService = CacheService;


/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(15);
var CartService = /** @class */ (function (_super) {
    __extends(CartService, _super);
    //@ngInject
    //@ngInject
    function CartService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Order', 'Cart') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return CartService;
}(baseentityservice_1.BaseEntityService));
exports.CartService = CartService;


/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var DraggableService = /** @class */ (function () {
    //ngInject
    function DraggableService() {
        this.isDropAllowed = function (event) {
            //todo implement
            return true;
        };
        this.isMouseInFirstHalf = function (event, targetNode, relativeToParent, horizontal) {
            var mousePointer = horizontal ? (event.offsetX || event.layerX)
                : (event.offsetY || event.layerY);
            var targetSize = horizontal ? targetNode.offsetWidth : targetNode.offsetHeight;
            var targetPosition = horizontal ? targetNode.offsetLeft : targetNode.offsetTop;
            targetPosition = relativeToParent ? targetPosition : 0;
            return mousePointer < targetPosition + targetSize / 2;
        };
    }
    return DraggableService;
}());
exports.DraggableService = DraggableService;


/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var baseentityservice_1 = __webpack_require__(15);
var EntityService = /** @class */ (function (_super) {
    __extends(EntityService, _super);
    //@ngInject
    function EntityService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService) || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return EntityService;
}(baseentityservice_1.BaseEntityService));
exports.EntityService = EntityService;


/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var ExpandableService = /** @class */ (function () {
    //ngInject
    function ExpandableService() {
        var _this = this;
        this.recordStates = {};
        this.addRecord = function (recordID, state) {
            if (angular.isUndefined(state)) {
                state = { isLoaded: true };
            }
            _this.recordStates[recordID] = state;
        };
        this.updateState = function (recordID, state) {
            if (angular.isUndefined(_this.recordStates[recordID])) {
                _this.recordStates[recordID] = {};
            }
            for (var key in state) {
                _this.recordStates[recordID][key] = state[key];
            }
        };
        this.getState = function (recordID, key) {
            if (angular.isDefined(_this.recordStates[recordID]) && angular.isDefined(key)) {
                var dataToReturn = _this.recordStates[recordID][key];
            }
            else {
                var dataToReturn = _this.recordStates[recordID];
            }
            if (angular.isDefined(dataToReturn)) {
                return dataToReturn;
            }
            return false;
        };
    }
    return ExpandableService;
}());
exports.ExpandableService = ExpandableService;


/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FilterService = /** @class */ (function () {
    //ngInject
    function FilterService() {
        this.filterMatch = function (valueToCompareAgainst, comparisonOperator, comparisonValue) {
            switch (comparisonOperator) {
                case "!=":
                    if (valueToCompareAgainst != comparisonValue) {
                        return true;
                    }
                    break;
                case ">":
                    if (valueToCompareAgainst > comparisonValue) {
                        return true;
                    }
                    break;
                case ">=":
                    if (valueToCompareAgainst >= comparisonValue) {
                        return true;
                    }
                    break;
                case "<":
                    if (valueToCompareAgainst < comparisonValue) {
                        return true;
                    }
                    break;
                case "<=":
                    if (valueToCompareAgainst <= comparisonValue) {
                        return true;
                    }
                    break;
                case "is":
                    if (valueToCompareAgainst == comparisonValue) {
                        return true;
                    }
                    break;
                case "is not":
                    if (valueToCompareAgainst != comparisonValue) {
                        return true;
                    }
                    break;
                default:
                    //= case
                    if (valueToCompareAgainst == comparisonValue) {
                        return true;
                    }
                    break;
            }
            return false;
        };
    }
    return FilterService;
}());
exports.FilterService = FilterService;


/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var Form = /** @class */ (function () {
    //@ngInject
    function Form(name, object, editing) {
        this.$addControl = function (control) { };
        this.$removeControl = function (control) { };
        this.$setValidity = function (validationErrorKey, isValid, control) { };
        this.$setDirty = function () { };
        this.$setPristine = function () { };
        this.$commitViewValue = function () { };
        this.$rollbackViewValue = function () { };
        this.$setSubmitted = function () { };
        this.$setUntouched = function () { };
        this.name = name;
        this.object = object;
        this.editing = editing;
    }
    return Form;
}());
var FormService = /** @class */ (function () {
    function FormService($log) {
        var _this = this;
        this.$log = $log;
        this.setPristinePropertyValue = function (property, value) {
            _this._pristinePropertyValue[property] = value;
        };
        this.getPristinePropertyValue = function (property) {
            return _this._pristinePropertyValue[property];
        };
        this.setForm = function (form) {
            _this._forms[form.name] = form;
        };
        this.getForm = function (formName) {
            return _this._forms[formName];
        };
        this.getForms = function () {
            return _this._forms;
        };
        this.getFormsByObjectName = function (objectName) {
            var forms = [];
            for (var f in _this._forms) {
                if (angular.isDefined(_this._forms[f].$$swFormInfo.object) && _this._forms[f].$$swFormInfo.object.metaData.className === objectName) {
                    forms.push(_this._forms[f]);
                }
            }
            return forms;
        };
        this.createForm = function (name, object, editing) {
            var _form = new Form(name, object, editing);
            _this.setForm(_form);
            return _form;
        };
        this.resetForm = function (form) {
            _this.$log.debug('resetting form');
            _this.$log.debug(form);
            for (var key in form) {
                if (angular.isDefined(form[key])
                    && typeof form[key].$setViewValue == 'function'
                    && angular.isDefined(form[key].$viewValue)) {
                    _this.$log.debug(form[key]);
                    if (angular.isDefined(_this.getPristinePropertyValue(key))) {
                        form[key].$setViewValue(_this.getPristinePropertyValue(key));
                    }
                    else {
                        form[key].$setViewValue('');
                    }
                    form[key].$setUntouched(true);
                    form[key].$render();
                    _this.$log.debug(form[key]);
                }
            }
            form.$submitted = false;
            form.$setPristine();
            form.$setUntouched();
        };
        this.$log = $log;
        this._forms = {};
        this._pristinePropertyValue = {};
    }
    FormService.$inject = ['$log'];
    return FormService;
}());
exports.FormService = FormService;


/***/ }),
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var HibachiInterceptor = /** @class */ (function () {
    //@ngInject
    function HibachiInterceptor($location, $q, $log, $rootScope, $window, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder, observerService) {
        var _this = this;
        this.$location = $location;
        this.$q = $q;
        this.$log = $log;
        this.$rootScope = $rootScope;
        this.$window = $window;
        this.$injector = $injector;
        this.localStorageService = localStorageService;
        this.alertService = alertService;
        this.appConfig = appConfig;
        this.dialogService = dialogService;
        this.utilityService = utilityService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.observerService = observerService;
        this.urlParam = null;
        this.authHeader = 'Authorization';
        this.authPrefix = 'Bearer ';
        this.getJWTDataFromToken = function (str) {
            // Going backwards: from bytestream, to percent-encoding, to original string.
            str = str.split('.')[1];
            var decodedString = decodeURIComponent(_this.$window.atob(str).split('').map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));
            var jwtData = angular.fromJson(decodedString);
            var now = +new Date();
            var nowString = now.toString().substr(0, jwtData.exp.toString().length);
            now = +nowString;
            if (jwtData.issuer && jwtData.issuer == _this.$window.location.hostname && jwtData.exp > now) {
                if (!_this.$rootScope.slatwall.account) {
                    _this.$rootScope.slatwall.account = {};
                }
                _this.$rootScope.slatwall.account.accountID = jwtData.accountid;
            }
        };
        this.request = function (config) {
            _this.$log.debug('request');
            //bypass interceptor rules when checking template cache
            if (config.url.charAt(0) !== '/') {
                return config;
            }
            if (config.method == 'GET' && config.url.indexOf('.html') >= 0 && config.url.indexOf('/') >= 0) {
                //all partials are bound to instantiation key
                config.url = config.url + '?instantiationKey=' + _this.appConfig.instantiationKey;
                return config;
            }
            config.cache = true;
            config.headers = config.headers || {};
            if (_this.localStorageService.hasItem('token')) {
                config.headers['Auth-Token'] = 'Bearer ' + _this.localStorageService.getItem('token');
                _this.getJWTDataFromToken(_this.localStorageService.getItem('token'));
            }
            var queryParams = _this.utilityService.getQueryParamsFromUrl(config.url);
            if (config.method == 'GET' && (queryParams[_this.appConfig.action] && queryParams[_this.appConfig.action] === 'api:main.get')) {
                _this.$log.debug(config);
                config.method = 'POST';
                config.data = {};
                var data = {};
                if (angular.isDefined(config.params)) {
                    data = config.params;
                }
                var params = {};
                params.serializedJsonData = angular.toJson(data);
                params.context = "GET";
                config.data = $.param(params);
                delete config.params;
                config.headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
            return config;
        };
        this.requestError = function (rejection) {
            return _this.$q.reject(rejection);
        };
        this.response = function (response) {
            if (response.data.messages) {
                var alerts = _this.alertService.formatMessagesToAlerts(response.data.messages);
                _this.alertService.addAlerts(alerts);
            }
            if (response.data.hasOwnProperty('token')) {
                _this.localStorageService.setItem('token', response.data.token);
            }
            return response;
        };
        this.responseError = function (rejection) {
            if (angular.isDefined(rejection.status) && rejection.status !== 404 && rejection.status !== 403 && rejection.status !== 499) {
                if (rejection.data && rejection.data.messages) {
                    var alerts = _this.alertService.formatMessagesToAlerts(rejection.data.messages);
                    _this.alertService.addAlerts(alerts);
                }
                else {
                    var message = {
                        msg: 'there was error retrieving data',
                        type: 'error'
                    };
                    _this.alertService.addAlert(message);
                }
            }
            if (rejection.status === 403 || rejection.status == 401) {
                _this.observerService.notify('Unauthorized');
            }
            if (rejection.status === 499) {
                // handle the case where the user is not authenticated
                if (rejection.data && rejection.data.messages) {
                    //var deferred = $q.defer();
                    var $http = _this.$injector.get('$http');
                    if (rejection.data.messages[0].message === 'timeout') {
                        //open dialog
                        _this.dialogService.addPageDialog(_this.hibachiPathBuilder.buildPartialsPath('preprocesslogin'), {});
                    }
                    else if (rejection.data.messages[0].message === 'invalid_token') {
                        return $http.get(_this.baseUrl + '?' + _this.appConfig.action + '=api:main.login').then(function (loginResponse) {
                            if (loginResponse.status === 200) {
                                _this.localStorageService.setItem('token', loginResponse.data.token);
                                rejection.config.headers = rejection.config.headers || {};
                                rejection.config.headers['Auth-Token'] = 'Bearer ' + loginResponse.data.token;
                                _this.getJWTDataFromToken(loginResponse.data.token);
                                return $http(rejection.config).then(function (response) {
                                    return response;
                                });
                            }
                        }, function (rejection) {
                            return rejection;
                        });
                    }
                }
            }
            return rejection;
        };
        this.$location = $location;
        this.$q = $q;
        this.$log = $log;
        this.$rootScope = $rootScope;
        this.$window = $window;
        this.$injector = $injector;
        this.localStorageService = localStorageService;
        this.alertService = alertService;
        this.appConfig = appConfig;
        this.dialogService = dialogService;
        this.utilityService = utilityService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.baseUrl = appConfig.baseURL;
    }
    HibachiInterceptor.Factory = function () {
        var eventHandler = function ($location, $q, $log, $rootScope, $window, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder, observerService) { return new HibachiInterceptor($location, $q, $log, $rootScope, $window, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder, observerService); };
        eventHandler.$inject = [
            '$location',
            '$q',
            '$log',
            '$rootScope',
            '$window',
            '$injector',
            'localStorageService',
            'alertService',
            'appConfig',
            'dialogService',
            'utilityService',
            'hibachiPathBuilder',
            'observerService'
        ];
        return eventHandler;
    };
    return HibachiInterceptor;
}());
exports.HibachiInterceptor = HibachiInterceptor;


/***/ }),
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var HibachiPathBuilder = /** @class */ (function () {
    //@ngInject
    function HibachiPathBuilder() {
        var _this = this;
        this.setBaseURL = function (baseURL) {
            _this.baseURL = baseURL;
        };
        this.setBasePartialsPath = function (basePartialsPath) {
            _this.basePartialsPath = basePartialsPath;
        };
        this.setApiSubsystemName = function (apiSubsystemName) {
            _this.apiSubsystemName = apiSubsystemName;
        };
        this.buildPartialsPath = function (componentsPath) {
            if (angular.isDefined(_this.baseURL) && angular.isDefined(_this.basePartialsPath)) {
                return (_this.baseURL + _this.basePartialsPath + componentsPath).replace("//", "/");
            }
            else {
                throw ('need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there');
            }
        };
    }
    return HibachiPathBuilder;
}());
exports.HibachiPathBuilder = HibachiPathBuilder;


/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var HibachiScope = /** @class */ (function () {
    //@ngInject
    function HibachiScope(appConfig) {
        var _this = this;
        this.loginDisplayed = false;
        this.isValidToken = true;
        this.setToken = function (token) {
            _this.token = token;
            var stringArray = token.split('.');
            try {
                _this.jwtInfo = angular.fromJson(window.atob(stringArray[0]).trim());
                _this.session = angular.fromJson(window.atob(stringArray[1]).trim());
            }
            catch (err) {
                _this.isValidToken = false;
            }
        };
        this.config = appConfig;
    }
    return HibachiScope;
}());
exports.HibachiScope = HibachiScope;


/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
// interface ISlatwallRootScopeService extends ng.IRootScopeService{
//     loadedResourceBundle:boolean;
// 	loadingResourceBundle:boolean;
// } 
var HibachiService = /** @class */ (function () {
    //@ngInject
    function HibachiService($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbkeyService, appConfig, _config, _jsEntities, _jsEntityInstances) {
        var _this = this;
        this.$window = $window;
        this.$q = $q;
        this.$http = $http;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$rootScope = $rootScope;
        this.$location = $location;
        this.$anchorScroll = $anchorScroll;
        this.requestService = requestService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.rbkeyService = rbkeyService;
        this.appConfig = appConfig;
        this._config = _config;
        this._jsEntities = _jsEntities;
        this._jsEntityInstances = _jsEntityInstances;
        this._deferred = {};
        this._resourceBundle = {};
        this.usePublicRoutes = false;
        this.buildUrl = function (action, queryString) {
            //actionName example: slatAction. defined in FW1 and populated to config
            var actionName = _this.appConfig.action;
            var baseUrl = _this.appConfig.baseURL;
            queryString = queryString || '';
            if (angular.isDefined(queryString) && queryString.length) {
                if (queryString.indexOf('&') !== 0) {
                    queryString = '&' + queryString;
                }
            }
            return baseUrl + '?' + actionName + '=' + action + queryString;
        };
        this.getUrlWithActionPrefix = function () {
            return _this.appConfig.baseURL + '/index.cfm/?' + _this.appConfig.action + "=";
        };
        this.getJsEntities = function () {
            return _this._jsEntities;
        };
        this.setJsEntities = function (jsEntities) {
            _this._jsEntities = jsEntities;
        };
        this.getJsEntityInstances = function () {
            return _this._jsEntityInstances;
        };
        this.setJsEntityInstances = function (jsEntityInstances) {
            _this._jsEntityInstances = jsEntityInstances;
        };
        this.getEntityExample = function (entityName) {
            return _this._jsEntityInstances[entityName];
        };
        this.getEntityMetaData = function (entityName) {
            return _this._jsEntityInstances[entityName].metaData;
        };
        this.getPropertyByEntityNameAndPropertyName = function (entityName, propertyName) {
            return _this.getEntityMetaData(entityName)[propertyName];
        };
        this.getPrimaryIDPropertyNameByEntityName = function (entityName) {
            return _this.getEntityExample(entityName).$$getIDName();
        };
        this.getEntityHasPropertyByEntityName = function (entityName, propertyName) {
            return angular.isDefined(_this.getEntityMetaData(entityName)[propertyName]);
        };
        this.getBaseEntityAliasFromName = function (entityName) {
            return '_' + entityName;
        };
        this.getPropertyIsObjectByEntityNameAndPropertyIdentifier = function (entityName, propertyIdentifier) {
            var lastEntity = _this.getLastEntityNameInPropertyIdentifier(entityName, propertyIdentifier);
            var entityMetaData = _this.getEntityMetaData(lastEntity);
            return angular.isDefined(entityMetaData[_this.utilityService.listLast(propertyIdentifier, '.')].cfc);
        };
        this.getLastEntityNameInPropertyIdentifier = function (entityName, propertyIdentifier) {
            if (!entityName) {
                throw ('No entity name was supplied to getLastEntityNameInPropertyIdentifier in hibachi service.');
            }
            //strip alias if it exists and convert everything to be periods
            if (propertyIdentifier.charAt(0) === '_') {
                propertyIdentifier = _this.utilityService.listRest(propertyIdentifier.replace(/_/g, '.'), '.');
            }
            var propertyIdentifierArray = propertyIdentifier.split('.');
            if (propertyIdentifierArray[0] === entityName.toLowerCase()) {
                propertyIdentifierArray.shift();
            }
            if (propertyIdentifierArray.length > 1) {
                var propertiesStruct = _this.getEntityMetaData(entityName);
                var currentProperty = propertyIdentifierArray.shift();
                if (!propertiesStruct[currentProperty] ||
                    !propertiesStruct[currentProperty].cfc) {
                    throw ("The Property Identifier " + propertyIdentifier + " is invalid for the entity " + entityName);
                }
                var currentEntityName = propertiesStruct[currentProperty].cfc;
                var currentPropertyIdentifier = propertyIdentifierArray.join('.');
                return _this.getLastEntityNameInPropertyIdentifier(currentEntityName, currentPropertyIdentifier);
            }
            return entityName;
        };
        //helper method to inflate a new entity with data
        this.populateEntity = function (entityName, data) {
            var newEntity = _this.newEntity(entityName);
            angular.extend(newEntity.data, data);
            return newEntity;
        };
        //service method used to transform collection data to collection objects based on a collectionconfig
        this.populateCollection = function (collectionData, collectionConfig) {
            //create array to hold objects
            var entities = [];
            //loop over all collection data to create objects
            var hibachiService = _this;
            angular.forEach(collectionData, function (collectionItemData, key) {
                //create base Entity
                var entity = hibachiService['new' + collectionConfig.baseEntityName.replace(_this.appConfig.applicationKey, '')]();
                //populate entity with data based on the collectionConfig
                angular.forEach(collectionConfig.columns, function (column, key) {
                    //get objects base properties
                    var propertyIdentifier = column.propertyIdentifier.replace(collectionConfig.baseEntityAlias.toLowerCase(), '');
                    propertyIdentifier = _this.utilityService.replaceAll(propertyIdentifier, '_', '.');
                    if (propertyIdentifier.charAt(0) === '.') {
                        propertyIdentifier = propertyIdentifier.slice(1);
                    }
                    var propertyIdentifierArray = propertyIdentifier.split('.');
                    var propertyIdentifierKey = propertyIdentifier.replace(/\./g, '_');
                    var currentEntity = entity;
                    angular.forEach(propertyIdentifierArray, function (property, key) {
                        if (key === propertyIdentifierArray.length - 1) {
                            //if we are on the last item in the array
                            if (angular.isObject(collectionItemData[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype === 'many-to-one') {
                                var relatedEntity = hibachiService['new' + currentEntity.metaData[property].cfc]();
                                relatedEntity.$$init(collectionItemData[propertyIdentifierKey][0]);
                                currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
                            }
                            else if (angular.isArray(collectionItemData[propertyIdentifierKey]) && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {
                                angular.forEach(collectionItemData[propertyIdentifierKey], function (arrayItem, key) {
                                    var relatedEntity = hibachiService['new' + currentEntity.metaData[property].cfc]();
                                    relatedEntity.$$init(arrayItem);
                                    currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
                                });
                            }
                            else {
                                currentEntity.data[property] = collectionItemData[propertyIdentifierKey];
                            }
                        }
                        else {
                            var propertyMetaData = currentEntity.metaData[property];
                            if (angular.isUndefined(currentEntity.data[property])) {
                                if (propertyMetaData.fieldtype === 'one-to-many') {
                                    relatedEntity = [];
                                }
                                else {
                                    relatedEntity = hibachiService['new' + propertyMetaData.cfc]();
                                }
                            }
                            else {
                                relatedEntity = currentEntity.data[property];
                            }
                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);
                            currentEntity = relatedEntity;
                        }
                    });
                });
                entities.push(entity);
            });
            return entities;
        };
        /*basic entity getter where id is optional, returns a promise*/
        this.getDefer = function (deferKey) {
            return _this._deferred[deferKey];
        };
        this.cancelPromise = function (deferKey) {
            var deferred = _this.getDefer(deferKey);
            if (angular.isDefined(deferred)) {
                deferred.resolve({ messages: [{ messageType: 'error', message: 'User Cancelled' }] });
            }
        };
        this.newEntity = function (entityName) {
            if (entityName != undefined) {
                var entityServiceName = entityName.charAt(0).toLowerCase() + entityName.slice(1) + 'Service';
                if (angular.element(document.body).injector().has(entityServiceName)) {
                    var entityService = angular.element(document.body).injector().get(entityServiceName);
                    var functionObj = entityService['new' + entityName];
                    if (entityService['new' + entityName] != undefined && !!(functionObj && functionObj.constructor && functionObj.call && functionObj.apply)) {
                        return entityService['new' + entityName]();
                    }
                }
                return new _this._jsEntities[entityName];
            }
        };
        this.getEntityDefinition = function (entityName) {
            return _this._jsEntities[entityName];
        };
        /*basic entity getter where id is optional, returns a promise*/
        this.getEntity = function (entityName, options) {
            /*
            *
            * getEntity('Product', '12345-12345-12345-12345');
            * getEntity('Product', {keywords='Hello'});
            *
            */
            var apiSubsystemName = _this.appConfig.apiSubsystemName || "api";
            if (angular.isUndefined(options)) {
                options = {};
            }
            if (angular.isDefined(options.deferKey)) {
                _this.cancelPromise(options.deferKey);
            }
            var params = {};
            if (typeof options === 'string') {
                var urlString = _this.getUrlWithActionPrefix() + apiSubsystemName + ':' + 'main.get&entityName=' + entityName + '&entityID=' + options;
            }
            else {
                params['P:Current'] = options.currentPage || 1;
                params['P:Show'] = options.pageShow || 10;
                params.keywords = options.keywords || '';
                params.columnsConfig = options.columnsConfig || '';
                params.filterGroupsConfig = options.filterGroupsConfig || '';
                params.joinsConfig = options.joinsConfig || '';
                params.orderByConfig = options.orderByConfig || '';
                params.groupBysConfig = options.groupBysConfig || '';
                params.isDistinct = options.isDistinct || false;
                params.propertyIdentifiersList = options.propertyIdentifiersList || '';
                params.allRecords = options.allRecords || false;
                params.defaultColumns = options.defaultColumns || true;
                params.processContext = options.processContext || '';
                var urlString = _this.getUrlWithActionPrefix() + apiSubsystemName + ':' + 'main.get&entityName=' + entityName;
            }
            if (angular.isDefined(options.id)) {
                urlString += '&entityId=' + options.id;
            }
            var transformResponse = function (data) {
                if (angular.isString(data)) {
                    data = JSON.parse(data);
                }
                return data;
            };
            //check if we are using a service to transform the response
            if (angular.isDefined(options.transformResponse)) {
                transformResponse = function (data) {
                    var data = JSON.parse(data);
                    if (angular.isDefined(data.records)) {
                        data = options.transformResponse(data.records);
                    }
                    return data;
                };
            }
            var request = _this.requestService.newAdminRequest(urlString, params);
            if (options.deferKey) {
                _this._deferred[options.deferKey] = request;
            }
            return request.promise;
        };
        this.getResizedImageByProfileName = function (profileName, skuIDs) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getResizedImageByProfileName&context=getResizedImageByProfileName&profileName=' + profileName + '&skuIDs=' + skuIDs;
            var request = _this.requestService.newPublicRequest(urlString);
            return request.promise;
        };
        this.getEventOptions = function (entityName) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getEventOptionsByEntityName&entityName=' + entityName;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getProcessOptions = function (entityName) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getProcessMethodOptionsByEntityName&entityName=' + entityName;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.checkUniqueOrNullValue = function (object, property, value) {
            var objectName = object.metaData.className;
            var objectID = object.$$getID();
            return _this.$http.get(_this.getUrlWithActionPrefix() + 'api:main.getValidationPropertyStatus&object=' + objectName + '&objectID=' + objectID + '&propertyidentifier=' + property +
                '&value=' + escape(value)).then(function (results) {
                return results.data.uniqueStatus;
            });
        };
        this.checkUniqueValue = function (object, property, value) {
            var objectName = object.metaData.className;
            var objectID = object.$$getID();
            return _this.$http.get(_this.getUrlWithActionPrefix() + 'api:main.getValidationPropertyStatus&object=' + objectName + '&objectID=' + objectID + '&propertyidentifier=' + property +
                '&value=' + escape(value)).then(function (results) {
                return results.data.uniqueStatus;
            });
        };
        this.getPropertyDisplayData = function (entityName, options) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getPropertyDisplayData&entityName=' + entityName;
            var params = {};
            params.propertyIdentifiersList = options.propertyIdentifiersList || '';
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getPropertyDisplayOptions = function (entityName, options) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getPropertyDisplayOptions&entityName=' + entityName;
            var params = {};
            params.property = options.property || options.propertyIdentifier || '';
            if (angular.isDefined(options.argument1)) {
                params.argument1 = options.argument1;
            }
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getPropertyTitle = function (propertyName, metaData) {
            var propertyMetaData = metaData[propertyName];
            if (angular.isDefined(propertyMetaData['hb_rbkey'])) {
                return metaData.$$getRBKey(propertyMetaData['hb_rbkey']);
            }
            else if (angular.isUndefined(propertyMetaData['persistent'])) {
                if (angular.isDefined(propertyMetaData['fieldtype'])
                    && angular.isDefined(propertyMetaData['cfc'])
                    && ["one-to-many", "many-to-many"].indexOf(propertyMetaData.fieldtype) > -1) {
                    return metaData.$$getRBKey("entity." + metaData.className.toLowerCase() + "." + propertyName + ',entity.' + propertyMetaData.cfc + '_plural');
                }
                else if (angular.isDefined(propertyMetaData.fieldtype)
                    && angular.isDefined(propertyMetaData.cfc)
                    && ["many-to-one"].indexOf(propertyMetaData.fieldtype) > -1) {
                    return metaData.$$getRBKey("entity." + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc);
                }
                return metaData.$$getRBKey('entity.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
            }
            else if (metaData.isProcessObject) {
                if (angular.isDefined(propertyMetaData.fieldtype)
                    && angular.isDefined(propertyMetaData.cfc)
                    && ["one-to-many", "many-to-many"].indexOf(propertyMetaData.fieldtype) > -1) {
                    return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc.toLowerCase() + '_plural');
                }
                else if (angular.isDefined(propertyMetaData.fieldtype)
                    && angular.isDefined(propertyMetaData.cfc)) {
                    return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc.toLowerCase());
                }
                return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
            }
            return metaData.$$getRBKey('object.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
        };
        this.saveEntity = function (entityName, id, params, context) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.post';
            if (angular.isDefined(entityName)) {
                params.entityName = entityName;
            }
            if (angular.isDefined(id)) {
                params.entityID = id;
            }
            if (angular.isDefined(context)) {
                params.context = context;
            }
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getExistingCollectionsByBaseEntity = function (entityName) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getExistingCollectionsByBaseEntity&entityName=' + entityName;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getFilterPropertiesByBaseEntityName = function (entityName, includeNonPersistent) {
            if (includeNonPersistent === void 0) { includeNonPersistent = false; }
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getFilterPropertiesByBaseEntityName&EntityName=' + entityName + '&includeNonPersistent=' + includeNonPersistent;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.login = function (emailAddress, password) {
            var urlString = _this.appConfig.baseURL + '/index.cfm/api/auth/login';
            var params = {
                emailAddress: emailAddress,
                password: password
            };
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getResourceBundle = function (locale) {
            var locale = locale || _this.appConfig.rbLocale;
            if (_this._resourceBundle[locale]) {
                return _this._resourceBundle[locale];
            }
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getResourceBundle&instantiationKey=' + _this.appConfig.instantiationKey + '&locale=' + locale;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getCurrencies = function () {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getCurrencies&instantiationKey=' + _this.appConfig.instantiationKey;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getConfig = function () {
            return _this._config;
        };
        this.getConfigValue = function (key) {
            return _this._config[key];
        };
        this.setConfigValue = function (key, value) {
            _this._config[key] = value;
        };
        this.setConfig = function (config) {
            _this._config = config;
        };
        this.$window = $window;
        this.$q = $q;
        this.$http = $http;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$rootScope = $rootScope;
        this.$location = $location;
        this.$anchorScroll = $anchorScroll;
        this.requestService = requestService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.rbkeyService = rbkeyService;
        this.appConfig = appConfig;
        this._config = _config;
        this._jsEntities = _jsEntities;
        this._jsEntityInstances = _jsEntityInstances;
    }
    return HibachiService;
}());
exports.HibachiService = HibachiService;
var $Hibachi = /** @class */ (function () {
    //@ngInject
    function $Hibachi(appConfig) {
        var _this = this;
        this._config = {};
        this.angular = angular;
        this.setJsEntities = function (jsEntities) {
            _this._jsEntities = jsEntities;
        };
        this.getConfig = function () {
            return _this._config;
        };
        this.getConfigValue = function (key) {
            return _this._config[key];
        };
        this.setConfigValue = function (key, value) {
            _this._config[key] = value;
        };
        this.setConfig = function (config) {
            _this._config = config;
        };
        this._config = appConfig;
        this.$get.$inject = [
            '$window',
            '$q',
            '$http',
            '$timeout',
            '$log',
            '$rootScope',
            '$location',
            '$anchorScroll',
            'requestService',
            'utilityService',
            'formService',
            'rbkeyService',
            'appConfig'
        ];
    }
    $Hibachi.prototype.$get = function ($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbkeyService, appConfig) {
        return new HibachiService($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbkeyService, appConfig, this._config, this._jsEntities, this._jsEntityInstances);
    };
    return $Hibachi;
}());
exports.$Hibachi = $Hibachi;


/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var HibachiServiceDecorator = /** @class */ (function () {
    //@ngInject
    function HibachiServiceDecorator($delegate, $http, $timeout, $log, $rootScope, $location, $anchorScroll, $q, utilityService, formService, rbkeyService, appConfig, observerService, hibachiValidationService, attributeMetaData) {
        var _deferred = {};
        var _config = appConfig;
        var _jsEntities = {};
        var _jsEntityInstances = {};
        var entities = appConfig.modelConfig.entities, validations = appConfig.modelConfig.validations, defaultValues = appConfig.modelConfig.defaultValues;
        angular.forEach(entities, function (entity) {
            if (attributeMetaData && attributeMetaData[entity.className]) {
                var relatedAttributes = attributeMetaData[entity.className];
                for (var attributeSetCode in relatedAttributes) {
                    var attributeSet = relatedAttributes[attributeSetCode];
                    for (var attributeCode in attributeSet.attributes) {
                        var attribute = attributeSet.attributes[attributeCode];
                        attribute.attributeSet = attributeSet;
                        attribute.isAttribute = true;
                        $.extend(entity[attributeCode], attribute);
                    }
                }
            }
            $delegate['get' + entity.className] = function (options) {
                var entityInstance = $delegate.newEntity(entity.className);
                var entityDataPromise = $delegate.getEntity(entity.className, options);
                entityDataPromise.then(function (response) {
                    if (angular.isDefined(response.processData)) {
                        entityInstance.$$init(response.data);
                        var processObjectInstance = $delegate['new' + entity.className + '_' + options.processContext.charAt(0).toUpperCase() + options.processContext.slice(1)]();
                        processObjectInstance.$$init(response.processData);
                        processObjectInstance.data[entity.className.charAt(0).toLowerCase() + entity.className.slice(1)] = entityInstance;
                        entityInstance.processObject = processObjectInstance;
                    }
                    else {
                        if (entityInstance.populate) {
                            entityInstance.populate(response);
                        }
                        else {
                            entityInstance.$$init(response);
                        }
                    }
                });
                return {
                    promise: entityDataPromise,
                    value: entityInstance
                };
            };
            $delegate['new' + entity.className] = function () {
                //if we have the service then get the new instance from that
                var entityName = entity.className;
                var serviceName = entityName.charAt(0).toLowerCase() + entityName.slice(1) + 'Service';
                if (angular.element(document.body).injector().has(serviceName)) {
                    var entityService = angular.element(document.body).injector().get(serviceName);
                    if (entityService['new' + entity.className]) {
                        return entityService['new' + entity.className]();
                    }
                }
                return $delegate.newEntity(entity.className);
            };
            entity.isProcessObject = entity.className.indexOf('_') >= 0;
            _jsEntities[entity.className] = function () {
                this.validations = validations[entity.className];
                this.metaData = entity;
                this.metaData.className = entity.className;
                if (relatedAttributes) {
                    this.attributeMetaData = relatedAttributes;
                }
                if (entity.hb_parentPropertyName) {
                    this.metaData.hb_parentPropertyName = entity.hb_parentPropertyName;
                }
                if (entity.hb_childPropertyName) {
                    this.metaData.hb_childPropertyName = entity.hb_childPropertyName;
                }
                this.metaData.$$getRBKey = function (rbKey, replaceStringData) {
                    return rbkeyService.rbKey(rbKey, replaceStringData);
                };
                this.metaData.$$getPropertyTitle = function (propertyName) {
                    return _getPropertyTitle(propertyName, this);
                };
                this.metaData.$$getPropertyHint = function (propertyName) {
                    return _getPropertyHint(propertyName, this);
                };
                this.metaData.$$getManyToManyName = function (singularname) {
                    var metaData = this;
                    for (var i in metaData) {
                        if (metaData[i].singularname === singularname) {
                            return metaData[i].name;
                        }
                    }
                };
                this.metaData.$$getPropertyFieldType = function (propertyName) {
                    return _getPropertyFieldType(propertyName, this);
                };
                this.metaData.$$getPropertyFormatType = function (propertyName) {
                    if (this[propertyName])
                        return _getPropertyFormatType(propertyName, this);
                };
                this.metaData.$$getDetailTabs = function () {
                    var deferred = $q.defer();
                    var urlString = _config.baseURL + '/index.cfm/?' + appConfig.action + '=api:main.getDetailTabs&entityName=' + this.className;
                    var detailTabs = [];
                    $http.get(urlString)
                        .success(function (data) {
                        deferred.resolve(data);
                    }).error(function (reason) {
                        deferred.reject(reason);
                    });
                    return deferred.promise;
                };
                this.$$getFormattedValue = function (propertyName, formatType) {
                    return _getFormattedValue(propertyName, formatType, this);
                };
                this.data = {};
                this.modifiedData = {};
                var jsEntity = this;
                if (entity.isProcessObject) {
                    (function (entity) {
                        _jsEntities[entity.className].prototype = {
                            $$getID: function () {
                                return '';
                            },
                            $$getIDName: function () {
                                var IDNameString = '';
                                return IDNameString;
                            }
                        };
                    })(entity);
                }
                angular.forEach(entity, function (property) {
                    if (angular.isObject(property) && angular.isDefined(property.name)) {
                        if (defaultValues && defaultValues[entity.className] && defaultValues[entity.className][property.name] != null) {
                            jsEntity.data[property.name] = angular.copy(defaultValues[entity.className][property.name]);
                        }
                        else {
                            jsEntity.data[property.name] = undefined;
                        }
                    }
                });
            };
            _jsEntities[entity.className].prototype = {
                $$getPropertyByName: function (propertyName) {
                    return this['$$get' + propertyName.charAt(0).toUpperCase() + propertyName.slice(1)]();
                },
                $$isPersisted: function () {
                    return this.$$getID() !== '';
                },
                $$init: function (data) {
                    _init(this, data);
                },
                $$save: function () {
                    return _save(this);
                },
                $$delete: function () {
                    return _delete(this);
                },
                $$getValidationsByProperty: function (property) {
                    return _getValidationsByProperty(this, property);
                },
                $$getValidationByPropertyAndContext: function (property, context) {
                    return _getValidationByPropertyAndContext(this, property, context);
                },
                $$getTitleByPropertyIdentifier: function (propertyIdentifier) {
                    if (propertyIdentifier.split('.').length > 1) {
                        var listFirst = utilityService.listFirst(propertyIdentifier, '.');
                        var relatedEntityName = this.metaData[listFirst].cfc;
                        var exampleEntity = $delegate.newEntity(relatedEntityName);
                        return exampleEntity.$$getTitleByPropertyIdentifier(propertyIdentifier.replace(listFirst, ''));
                    }
                    return this.metaData.$$getPropertyTitle(propertyIdentifier);
                },
                $$getMetaData: function (propertyName) {
                    if (propertyName === undefined) {
                        return this.metaData;
                    }
                    else {
                        if (angular.isDefined(this.metaData[propertyName].name) && angular.isUndefined(this.metaData[propertyName].nameCapitalCase)) {
                            this.metaData[propertyName].nameCapitalCase = this.metaData[propertyName].name.charAt(0).toUpperCase() + this.metaData[propertyName].name.slice(1);
                        }
                        if (angular.isDefined(this.metaData[propertyName].cfc) && angular.isUndefined(this.metaData[propertyName].cfcProperCase)) {
                            this.metaData[propertyName].cfcProperCase = this.metaData[propertyName].cfc.charAt(0).toLowerCase() + this.metaData[propertyName].cfc.slice(1);
                        }
                        return this.metaData[propertyName];
                    }
                }
            };
            angular.forEach(relatedAttributes, function (attributeSet) {
                angular.forEach(attributeSet.attributes, function (attribute) {
                    if (attribute && attribute.attributeCode) {
                        Object.defineProperty(_jsEntities[entity.className].prototype, attribute.attributeCode, {
                            configurable: true,
                            enumerable: false,
                            get: function () {
                                if (attribute != null && this.data[attribute.attributeCode] == null) {
                                    return undefined;
                                }
                                return this.data[attribute.attributeCode];
                            },
                            set: function (value) {
                                this.data[attribute.attributeCode] = value;
                            }
                        });
                    }
                });
            });
            angular.forEach(entity, function (property) {
                if (angular.isObject(property) && angular.isDefined(property.name)) {
                    //if(angular.isUndefined(property.persistent)){
                    if (angular.isDefined(property.fieldtype)) {
                        if (['many-to-one'].indexOf(property.fieldtype) >= 0) {
                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                                var thisEntityInstance = this;
                                if (angular.isDefined(this['$$get' + this.$$getIDName().charAt(0).toUpperCase() + this.$$getIDName().slice(1)]())) {
                                    var options = {
                                        columnsConfig: angular.toJson([
                                            {
                                                "propertyIdentifier": "_" + this.metaData.className.toLowerCase() + "_" + property.name
                                            }
                                        ]),
                                        joinsConfig: angular.toJson([
                                            {
                                                "associationName": property.name,
                                                "alias": "_" + this.metaData.className.toLowerCase() + "_" + property.name
                                            }
                                        ]),
                                        filterGroupsConfig: angular.toJson([{
                                                "filterGroup": [
                                                    {
                                                        "propertyIdentifier": "_" + this.metaData.className.toLowerCase() + "." + this.$$getIDName(),
                                                        "comparisonOperator": "=",
                                                        "value": this.$$getID()
                                                    }
                                                ]
                                            }]),
                                        allRecords: true
                                    };
                                    var collectionPromise = $delegate.getEntity(entity.className, options);
                                    collectionPromise.then(function (response) {
                                        for (var i in response.records) {
                                            var entityInstance = $delegate.newEntity(thisEntityInstance.metaData[property.name].cfc);
                                            //Removed the array index here at the end of local.property.name.
                                            if (angular.isArray(response.records[i][property.name])) {
                                                entityInstance.$$init(response.records[i][property.name][0]);
                                            }
                                            else {
                                                entityInstance.$$init(response.records[i][property.name]); //Shouldn't have the array index'
                                            }
                                            thisEntityInstance['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)](entityInstance);
                                        }
                                    });
                                    return collectionPromise;
                                }
                                return null;
                            };
                            _jsEntities[entity.className].prototype['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function (entityInstance) {
                                var thisEntityInstance = this;
                                var metaData = this.metaData;
                                var manyToManyName = '';
                                //if entityInstance is not passed in, clear related object
                                if (angular.isUndefined(entityInstance)) {
                                    if (angular.isDefined(thisEntityInstance.data[property.name])) {
                                        delete thisEntityInstance.data[property.name];
                                    }
                                    if (!thisEntityInstance.parents) {
                                        return;
                                    }
                                    for (var i = 0; i <= thisEntityInstance.parents.length; i++) {
                                        if (angular.isDefined(thisEntityInstance.parents[i]) && thisEntityInstance.parents[i].name == property.name.charAt(0).toLowerCase() + property.name.slice(1)) {
                                            thisEntityInstance.parents.splice(i, 1);
                                        }
                                    }
                                    return;
                                }
                                if (property.name === 'parent' + this.metaData.className) {
                                    var childName = 'child' + this.metaData.className;
                                    manyToManyName = entityInstance.metaData.$$getManyToManyName(childName);
                                }
                                else if (entityInstance.metaData) {
                                    manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + metaData.className.slice(1));
                                }
                                // else{
                                //     manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + metaData.className.slice(1));
                                // }
                                if (angular.isUndefined(thisEntityInstance.parents)) {
                                    thisEntityInstance.parents = [];
                                }
                                thisEntityInstance.parents.push(thisEntityInstance.metaData[property.name]);
                                if (angular.isDefined(manyToManyName) && manyToManyName.length) {
                                    if (angular.isUndefined(entityInstance.children)) {
                                        entityInstance.children = [];
                                    }
                                    var child = entityInstance.metaData[manyToManyName];
                                    if (entityInstance.children.indexOf(child) === -1) {
                                        entityInstance.children.push(child);
                                    }
                                    if (angular.isUndefined(entityInstance.data[manyToManyName])) {
                                        entityInstance.data[manyToManyName] = [];
                                    }
                                    entityInstance.data[manyToManyName].push(thisEntityInstance);
                                }
                                thisEntityInstance.data[property.name] = entityInstance;
                            };
                            if (property.name !== 'data' && property.name !== 'validations') {
                                Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                    configurable: true,
                                    enumerable: false,
                                    get: function () {
                                        if (this.data[property.name] == null) {
                                            return undefined;
                                        }
                                        return this.data[property.name];
                                    },
                                    set: function (value) {
                                        this['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)](value);
                                    }
                                });
                            }
                        }
                        else if (['one-to-many', 'many-to-many'].indexOf(property.fieldtype) >= 0) {
                            if (!property.singularname) {
                                throw ('need to define a singularname for ' + property.fieldtype);
                            }
                            _jsEntities[entity.className].prototype['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)] = function (entityInstance) {
                                if (angular.isUndefined(entityInstance)) {
                                    var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
                                }
                                var metaData = this.metaData;
                                if (metaData[property.name].fieldtype === 'one-to-many') {
                                    entityInstance.data[metaData[property.name].fkcolumn.slice(0, -2)] = this;
                                }
                                else if (metaData[property.name].fieldtype === 'many-to-many') {
                                    var manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + this.metaData.className.slice(1));
                                    if (angular.isUndefined(entityInstance.data[manyToManyName])) {
                                        entityInstance.data[manyToManyName] = [];
                                    }
                                    entityInstance.data[manyToManyName].push(this);
                                }
                                if (angular.isDefined(metaData[property.name])) {
                                    if (angular.isDefined(entityInstance.metaData[metaData[property.name].fkcolumn.slice(0, -2)])) {
                                        if (angular.isUndefined(entityInstance.parents)) {
                                            entityInstance.parents = [];
                                        }
                                        entityInstance.parents.push(entityInstance.metaData[metaData[property.name].fkcolumn.slice(0, -2)]);
                                    }
                                    if (angular.isUndefined(this.children)) {
                                        this.children = [];
                                    }
                                    var child = metaData[property.name];
                                    if (this.children.indexOf(child) === -1) {
                                        this.children.push(child);
                                    }
                                }
                                if (angular.isUndefined(this.data[property.name])) {
                                    this.data[property.name] = [];
                                }
                                this.data[property.name].push(entityInstance);
                                return entityInstance;
                            };
                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                                var thisEntityInstance = this;
                                if (angular.isDefined(this['$$get' + this.$$getIDName().charAt(0).toUpperCase() + this.$$getIDName().slice(1)])) {
                                    var options = {
                                        filterGroupsConfig: angular.toJson([{
                                                "filterGroup": [
                                                    {
                                                        "propertyIdentifier": "_" + property.cfc.toLowerCase() + "." + property.fkcolumn.replace('ID', '') + "." + this.$$getIDName(),
                                                        "comparisonOperator": "=",
                                                        "value": this.$$getID()
                                                    }
                                                ]
                                            }]),
                                        allRecords: true
                                    };
                                    var collectionPromise = $delegate.getEntity(property.cfc, options);
                                    collectionPromise.then(function (response) {
                                        var entityInstances = [];
                                        for (var i in response.records) {
                                            var entityInstance = thisEntityInstance['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)]();
                                            entityInstance.$$init(response.records[i]);
                                            if (angular.isUndefined(thisEntityInstance[property.name])) {
                                                thisEntityInstance[property.name] = [];
                                            }
                                            entityInstances.push(entityInstance);
                                        }
                                        thisEntityInstance.data[property.name] = entityInstances;
                                    });
                                    return collectionPromise;
                                }
                            };
                            Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                configurable: true,
                                enumerable: false,
                                get: function () {
                                    if (this.data[property.name] == null) {
                                        return undefined;
                                    }
                                    return this.data[property.name];
                                },
                                set: function (value) {
                                    this.data[property.name] = [];
                                    if (angular.isArray(value)) {
                                        for (var i = 0; i < value.length; i++) {
                                            var item = value[i];
                                            var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
                                            entityInstance.$$init(item);
                                            this['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)](entityInstance);
                                        }
                                    }
                                    else {
                                        var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
                                        entityInstance.$$init(value);
                                        this['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)](entityInstance);
                                    }
                                }
                            });
                        }
                        else {
                            if (['id'].indexOf(property.fieldtype) >= 0) {
                                _jsEntities[entity.className].prototype['$$getID'] = function () {
                                    //this should retreive id from the metadata
                                    return this.data[this.$$getIDName()];
                                };
                                _jsEntities[entity.className].prototype['$$getIDName'] = function () {
                                    var IDNameString = property.name;
                                    return IDNameString;
                                };
                            }
                            if (property.name !== 'data' && property.name !== 'validations') {
                                Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                    configurable: true,
                                    enumerable: false,
                                    get: function () {
                                        if (this.data[property.name] == null) {
                                            return undefined;
                                        }
                                        return this.data[property.name];
                                    },
                                    set: function (value) {
                                        this.data[property.name] = value;
                                    }
                                });
                            }
                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                                return this.data[property.name];
                            };
                        }
                    }
                    else {
                        if (property.name !== 'data' && property.name !== 'validations') {
                            Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                configurable: true,
                                enumerable: false,
                                get: function () {
                                    if (this.data[property.name] == null) {
                                        return undefined;
                                    }
                                    return this.data[property.name];
                                },
                                set: function (value) {
                                    this.data[property.name] = value;
                                }
                            });
                        }
                        _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                            return this.data[property.name];
                        };
                    }
                    //}
                }
            });
        });
        $delegate.setJsEntities(_jsEntities);
        angular.forEach(_jsEntities, function (jsEntity) {
            var jsEntityInstance = new jsEntity;
            _jsEntityInstances[jsEntityInstance.metaData.className] = jsEntityInstance;
        });
        $delegate.setJsEntityInstances(_jsEntityInstances);
        var _init = function (entityInstance, data) {
            hibachiValidationService.init(entityInstance, data);
        };
        var _getPropertyTitle = function (propertyName, metaData) {
            return $delegate.getPropertyTitle(propertyName, metaData);
        };
        var _getPropertyHint = function (propertyName, metaData) {
            var propertyMetaData = metaData[propertyName];
            var keyValue = '';
            if (angular.isDefined(propertyMetaData['hb_rbkey'])) {
                keyValue = metaData.$$getRBKey(propertyMetaData['hb_rbkey'] + '_hint');
            }
            else if (angular.isUndefined(propertyMetaData['persistent']) || (angular.isDefined(propertyMetaData['persistent']) && propertyMetaData['persistent'] === true)) {
                keyValue = metaData.$$getRBKey('entity.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + '_hint');
            }
            else {
                keyValue = metaData.$$getRBKey('object.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
            }
            if (keyValue.slice(-8) !== '_missing') {
                return keyValue;
            }
            return '';
        };
        var _getPropertyFieldType = function (propertyName, metaData) {
            var propertyMetaData = metaData[propertyName];
            if (angular.isDefined(propertyMetaData['hb_formfieldtype'])) {
                return propertyMetaData['hb_formfieldtype'];
            }
            if (angular.isUndefined(propertyMetaData.fieldtype) || propertyMetaData.fieldtype === 'column') {
                var dataType = "";
                if (angular.isDefined(propertyMetaData.ormtype)) {
                    dataType = propertyMetaData.ormtype;
                }
                else if (angular.isDefined(propertyMetaData.type)) {
                    dataType = propertyMetaData.type;
                }
                if (["boolean", "yes_no", "true_false"].indexOf(dataType) > -1) {
                    return "yesno";
                }
                else if (["date", "timestamp"].indexOf(dataType) > -1) {
                    return "dateTime";
                }
                else if ("array" === dataType) {
                    return "select";
                }
                else if ("struct" === dataType) {
                    return "checkboxgroup";
                }
                else if (propertyName.indexOf('password') > -1) {
                    return "password";
                }
            }
            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'many-to-one') {
                return 'select';
            }
            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'one-to-many') {
                return 'There is no property field type for one-to-many relationship properties, which means that you cannot get a fieldtype for ' + propertyName;
            }
            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'many-to-many') {
                return "listingMultiselect";
            }
            return "text";
        };
        var _getPropertyFormatType = function (propertyName, metaData) {
            if (!propertyName || !metaData) {
                return 'none';
            }
            var propertyMetaData = metaData[propertyName];
            if (propertyMetaData['hb_formattype']) {
                return propertyMetaData['hb_formattype'];
            }
            else if (angular.isUndefined(propertyMetaData.fieldtype) || propertyMetaData.fieldtype === 'column') {
                var dataType = "";
                if (angular.isDefined(propertyMetaData.ormtype)) {
                    dataType = propertyMetaData.ormtype;
                }
                else if (angular.isDefined(propertyMetaData.type)) {
                    dataType = propertyMetaData.type;
                }
                if (["boolean", "yes_no", "true_false"].indexOf(dataType) > -1) {
                    return "yesno";
                }
                else if (["date", "timestamp"].indexOf(dataType) > -1) {
                    return "dateTime";
                }
                else if (["big_decimal"].indexOf(dataType) > -1 && propertyName.slice(-6) === 'weight') {
                    return "weight";
                }
                else if (["big_decimal"].indexOf(dataType) > -1) {
                    return "currency";
                }
            }
            return 'none';
        };
        var _isSimpleValue = function (value) {
            return !!(angular.isString(value) || angular.isNumber(value)
                || angular.isDate(value) || value === false || value === true);
        };
        var _getFormattedValue = function (propertyName, formatType, entityInstance) {
            var value = entityInstance.$$getPropertyByName(propertyName);
            if (angular.isUndefined(formatType)) {
                formatType = entityInstance.metaData.$$getPropertyFormatType(propertyName);
            }
            if (formatType === "custom") {
                //to be implemented
                //return entityInstance['$$get'+propertyName+Formatted]();
            }
            else if (formatType === "rbkey") {
                if (angular.isDefined(value)) {
                    return entityInstance.$$getRBKey('entity.' + entityInstance.metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + '.' + value);
                }
                else {
                    return '';
                }
            }
            if (angular.isUndefined(value)) {
                var propertyMeta = entityInstance.metaData[propertyName];
                if (angular.isDefined(propertyMeta['hb_nullRBKey'])) {
                    return entityInstance.$$getRbKey(propertyMeta['hb_nullRBKey']);
                }
                return "";
            }
            else if (_isSimpleValue(value)) {
                var formatDetails = {};
                if (angular.isDefined(entityInstance.data['currencyCode'])) {
                    formatDetails.currencyCode = entityInstance.$$getCurrencyCode();
                }
                return utilityService.formatValue(value, formatType, formatDetails, entityInstance);
            }
        };
        var _delete = function (entityInstance) {
            var entityName = entityInstance.metaData.className;
            var entityID = entityInstance.$$getID();
            var context = 'delete';
            return $delegate.saveEntity(entityName, entityID, {}, context);
        };
        var _setValueByPropertyPath = function (obj, path, value) {
            var a = path.split('.');
            var context = obj;
            var selector;
            var myregexp = /([a-zA-Z]+)(\[(\d)\])+/; // matches:  item[0]
            var match = null;
            for (var i = 0; i < a.length - 1; i += 1) {
                match = myregexp.exec(a[i]);
                if (match !== null)
                    context = context[match[1]][match[3]];
                else
                    context = context[a[i]];
            }
            // check for ending item[xx] syntax
            match = myregexp.exec([a[a.length - 1]]);
            if (match !== null)
                context[match[1]][match[3]] = value;
            else
                context[a[a.length - 1]] = value;
        };
        var _getValueByPropertyPath = function (obj, path) {
            var paths = path.split('.'), current = obj, i;
            for (i = 0; i < paths.length; ++i) {
                if (current[paths[i]] == undefined) {
                    return undefined;
                }
                else {
                    current = current[paths[i]];
                }
            }
            return current;
        };
        var _addReturnedIDs = function (returnedIDs, entityInstance) {
            for (var key in returnedIDs) {
                if (angular.isArray(returnedIDs[key])) {
                    var arrayItems = returnedIDs[key];
                    var entityInstanceArray = entityInstance.data[key];
                    for (var i in arrayItems) {
                        var arrayItem = arrayItems[i];
                        var entityInstanceArrayItem = entityInstance.data[key][i];
                        _addReturnedIDs(arrayItem, entityInstanceArrayItem);
                    }
                }
                else if (angular.isObject(returnedIDs[key])) {
                    for (var k in returnedIDs[key]) {
                        _addReturnedIDs(returnedIDs[key][k], entityInstance.data[key][k]);
                    }
                }
                else {
                    entityInstance.data[key] = returnedIDs[key];
                }
            }
        };
        var _save = function (entityInstance) {
            var deferred = $q.defer();
            $timeout(function () {
                //$log.debug('save begin');
                //$log.debug(entityInstance);
                var entityID = entityInstance.$$getID();
                var modifiedData = _getModifiedData(entityInstance);
                //$log.debug('modifiedData complete');
                //$log.debug(modifiedData);
                //timeoutPromise.valid = modifiedData.valid;
                if (modifiedData.valid) {
                    var params = {};
                    params.serializedJsonData = utilityService.toJson(modifiedData.value);
                    //if we have a process object then the context is different from the standard save
                    var entityName = '';
                    var context = 'save';
                    if (entityInstance.metaData.isProcessObject === 1) {
                        var processStruct = modifiedData.objectLevel.metaData.className.split('_');
                        entityName = processStruct[0];
                        context = processStruct[1];
                    }
                    else {
                        entityName = modifiedData.objectLevel.metaData.className;
                    }
                    var savePromise = $delegate.saveEntity(entityName, entityID, params, context);
                    savePromise.then(function (response) {
                        var returnedIDs = response.data;
                        if ((angular.isDefined(response.SUCCESS) && response.SUCCESS === true)
                            || (angular.isDefined(response.success) && response.success === true)) {
                            if ($location.url() == '/entity/' + entityName + '/create' && response.data[modifiedData.objectLevel.$$getIDName()]) {
                                $location.path('/entity/' + entityName + '/' + response.data[modifiedData.objectLevel.$$getIDName()], false);
                            }
                            _addReturnedIDs(returnedIDs, modifiedData.objectLevel);
                            deferred.resolve(returnedIDs);
                            observerService.notify('saveSuccess', returnedIDs);
                            observerService.notify('saveSuccess' + entityName, returnedIDs);
                        }
                        else {
                            deferred.reject(angular.isDefined(response.messages) ? response.messages : response);
                            observerService.notify('saveFailed', response);
                            observerService.notify('saveFailed' + entityName, response);
                        }
                    }, function (reason) {
                        deferred.reject(reason);
                        observerService.notify('saveFailed', reason);
                        observerService.notify('saveFailed' + entityName, reason);
                    });
                }
                else {
                    //select first, visible, and enabled input with a class of ng-invalid
                    var target = $('input.ng-invalid:first:visible:enabled');
                    if (angular.isDefined(target)) {
                        target.focus();
                        var targetID = target.attr('id');
                        $anchorScroll();
                    }
                    deferred.reject('Input is invalid.');
                    observerService.notify('validationFailed');
                    observerService.notify('validationFailed' + entityName);
                }
            });
            //return timeoutPromise;
            return deferred.promise;
            /*

            */
        };
        var _getModifiedData = function (entityInstance) {
            var modifiedData = {};
            modifiedData = getModifiedDataByInstance(entityInstance);
            return modifiedData;
        };
        var getObjectSaveLevel = function (entityInstance) {
            return hibachiValidationService.getObjectSaveLevel(entityInstance);
        };
        var validateObject = function (entityInstance) {
            return hibachiValidationService.validateObject;
        };
        var validateChildren = function (entityInstance) {
            return hibachiValidationService.validateChildren(entityInstance);
        };
        var processChild = function (entityInstance, entityInstanceParent) {
            return hibachiValidationService.processChild(entityInstance, entityInstanceParent);
        };
        var processParent = function (entityInstance) {
            return hibachiValidationService.processParent(entityInstance);
        };
        var processForm = function (form, entityInstance) {
            return hibachiValidationService.processForm(form, entityInstance);
        };
        var getDataFromParents = function (entityInstance, entityInstanceParents) {
            return hibachiValidationService.getDataFromParents(entityInstance, entityInstanceParents);
        };
        var getDataFromChildren = function (entityInstance) {
            return hibachiValidationService.getDataFromChildren(entityInstance);
        };
        var getModifiedDataByInstance = function (entityInstance) {
            return hibachiValidationService.getModifiedDataByInstance(entityInstance);
        };
        var _getValidationsByProperty = function (entityInstance, property) {
            return hibachiValidationService.getValidationsByProperty(entityInstance, property);
        };
        var _getValidationByPropertyAndContext = function (entityInstance, property, context) {
            return hibachiValidationService.getValidationByPropertyAndContext(entityInstance, property, context);
        };
        return $delegate;
    }
    return HibachiServiceDecorator;
}());
exports.HibachiServiceDecorator = HibachiServiceDecorator;


/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var HibachiValidationService = /** @class */ (function () {
    //@ngInject
    function HibachiValidationService($log) {
        var _this = this;
        this.$log = $log;
        this.getObjectSaveLevel = function (entityInstance) {
            var objectLevel = entityInstance;
            var entityID = entityInstance.$$getID();
            angular.forEach(entityInstance.parents, function (parentObject) {
                if (angular.isDefined(entityInstance.data[parentObject.name]) && entityInstance.data[parentObject.name].$$getID() === '' && (angular.isUndefined(entityID) || !entityID.trim().length)) {
                    var parentEntityInstance = entityInstance.data[parentObject.name];
                    var parentEntityID = parentEntityInstance.$$getID();
                    if (parentEntityID === '' && parentEntityInstance.forms) {
                        objectLevel = _this.getObjectSaveLevel(parentEntityInstance);
                    }
                }
            });
            return objectLevel;
        };
        this.getModifiedDataByInstance = function (entityInstance) {
            var modifiedData = {};
            var objectSaveLevel = _this.getObjectSaveLevel(entityInstance);
            _this.$log.debug('objectSaveLevel : ' + objectSaveLevel);
            var valueStruct = _this.validateObject(objectSaveLevel);
            _this.$log.debug('validateObject data');
            _this.$log.debug(valueStruct.value);
            modifiedData = {
                objectLevel: objectSaveLevel,
                value: valueStruct.value,
                valid: valueStruct.valid
            };
            return modifiedData;
        };
        this.getValidationByPropertyAndContext = function (entityInstance, property, context) {
            var validations = _this.getValidationsByProperty(entityInstance, property);
            for (var i in validations) {
                var contexts = validations[i].contexts.split(',');
                for (var j in contexts) {
                    if (contexts[j] === context) {
                        return validations[i];
                    }
                }
            }
        };
        this.getValidationsByProperty = function (entityInstance, property) {
            return entityInstance.validations.properties[property];
        };
        this.validateObject = function (entityInstance) {
            var modifiedData = {};
            var valid = true;
            var forms = entityInstance.forms;
            _this.$log.debug('process base level data');
            for (var f in forms) {
                var form = forms[f];
                form.$setSubmitted(); //Sets the form to submitted for the validation errors to pop up.
                if (form.$dirty && form.$valid) {
                    for (var key in form) {
                        _this.$log.debug('key:' + key);
                        if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
                            var inputField = form[key];
                            if (typeof inputField.$modelValue != 'undefined' && inputField.$modelValue !== '') {
                                inputField.$dirty = true;
                            }
                            if (angular.isDefined(inputField.$valid) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
                                if (angular.isDefined(entityInstance.metaData[key])
                                    && angular.isDefined(entityInstance.metaData[key].hb_formfieldtype)
                                    && entityInstance.metaData[key].hb_formfieldtype === 'json') {
                                    modifiedData[key] = angular.toJson(inputField.$modelValue);
                                }
                                else {
                                    modifiedData[key] = inputField.$modelValue;
                                }
                            }
                        }
                    }
                }
                else {
                    if (!form.$valid) {
                        valid = false;
                    }
                }
            }
            modifiedData[entityInstance.$$getIDName()] = entityInstance.$$getID();
            _this.$log.debug(modifiedData);
            _this.$log.debug('process parent data');
            if (angular.isDefined(entityInstance.parents)) {
                for (var p in entityInstance.parents) {
                    var parentObject = entityInstance.parents[p];
                    var parentInstance = entityInstance.data[parentObject.name];
                    if (angular.isUndefined(modifiedData[parentObject.name])) {
                        modifiedData[parentObject.name] = {};
                    }
                    var forms = parentInstance.forms;
                    for (var f in forms) {
                        var form = forms[f];
                        form.$setSubmitted();
                        if (form.$dirty && form.$valid) {
                            for (var key in form) {
                                if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
                                    var inputField = form[key];
                                    if (typeof inputField.$modelValue != 'undefined' && inputField.$modelValue !== '') {
                                        inputField.$dirty = true;
                                    }
                                    if (angular.isDefined(inputField) && angular.isDefined(inputField.$valid) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
                                        if (angular.isDefined(parentInstance.metaData[key])
                                            && angular.isDefined(parentInstance.metaData[key].hb_formfieldtype)
                                            && parentInstance.metaData[key].hb_formfieldtype === 'json') {
                                            modifiedData[parentObject.name][key] = angular.toJson(inputField.$modelValue);
                                        }
                                        else {
                                            modifiedData[parentObject.name][key] = inputField.$modelValue;
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if (!form.$valid) {
                                valid = false;
                            }
                        }
                    }
                    modifiedData[parentObject.name][parentInstance.$$getIDName()] = parentInstance.$$getID();
                }
            }
            _this.$log.debug(modifiedData);
            _this.$log.debug('begin child data');
            var childrenData = _this.validateChildren(entityInstance);
            _this.$log.debug('child Data');
            _this.$log.debug(childrenData);
            angular.extend(modifiedData, childrenData);
            return {
                valid: valid,
                value: modifiedData
            };
        };
        this.validateChildren = function (entityInstance) {
            var data = {};
            if (angular.isDefined(entityInstance.children) && entityInstance.children.length) {
                data = _this.getDataFromChildren(entityInstance);
            }
            return data;
        };
        this.init = function (entityInstance, data) {
            for (var key in data) {
                if (key.charAt(0) !== '$' && angular.isDefined(entityInstance.metaData[key])) {
                    var propertyMetaData = entityInstance.metaData[key];
                    if (angular.isDefined(propertyMetaData) && angular.isDefined(propertyMetaData.hb_formfieldtype) && propertyMetaData.hb_formfieldtype === 'json') {
                        if (data[key].trim() !== '') {
                            entityInstance.data[key] = angular.fromJson(data[key]);
                        }
                    }
                    else {
                        entityInstance.data[key] = data[key];
                    }
                }
            }
        };
        this.processForm = function (form, entityInstance) {
            _this.$log.debug('begin process form');
            var data = {};
            form.$setSubmitted();
            for (var key in form) {
                if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
                    var inputField = form[key];
                    if (inputField.$modelValue) {
                        inputField.$dirty = true;
                    }
                    if (angular.isDefined(inputField) && angular.isDefined(inputField) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
                        if (angular.isDefined(entityInstance.metaData[key]) && angular.isDefined(entityInstance.metaData[key].hb_formfieldtype) && entityInstance.metaData[key].hb_formfieldtype === 'json') {
                            data[key] = angular.toJson(inputField.$modelValue);
                        }
                        else {
                            data[key] = inputField.$modelValue;
                        }
                    }
                }
            }
            data[entityInstance.$$getIDName()] = entityInstance.$$getID();
            _this.$log.debug('process form data');
            _this.$log.debug(data);
            return data;
        };
        this.processParent = function (entityInstance) {
            var data = {};
            if (entityInstance.$$getID() !== '') {
                data[entityInstance.$$getIDName()] = entityInstance.$$getID();
            }
            _this.$log.debug('processParent');
            _this.$log.debug(entityInstance);
            var forms = entityInstance.forms;
            for (var f in forms) {
                var form = forms[f];
                data = angular.extend(data, _this.processForm(form, entityInstance));
            }
            return data;
        };
        this.processChild = function (entityInstance, entityInstanceParent) {
            var data = {};
            var forms = entityInstance.forms;
            for (var f in forms) {
                var form = forms[f];
                angular.extend(data, _this.processForm(form, entityInstance));
            }
            if (angular.isDefined(entityInstance.children) && entityInstance.children.length) {
                var childData = _this.getDataFromChildren(entityInstance);
                angular.extend(data, childData);
            }
            if (angular.isDefined(entityInstance.parents) && entityInstance.parents.length) {
                var parentData = _this.getDataFromParents(entityInstance, entityInstanceParent);
                angular.extend(data, parentData);
            }
            return data;
        };
        this.getDataFromParents = function (entityInstance, entityInstanceParent) {
            var data = {};
            for (var c in entityInstance.parents) {
                var parentMetaData = entityInstance.parents[c];
                if (angular.isDefined(parentMetaData)) {
                    var parent = entityInstance.data[parentMetaData.name];
                    if (angular.isObject(parent) && entityInstanceParent !== parent && parent.$$getID() !== '') {
                        if (angular.isUndefined(data[parentMetaData.name])) {
                            data[parentMetaData.name] = {};
                        }
                        var parentData = _this.processParent(parent);
                        _this.$log.debug('parentData:' + parentMetaData.name);
                        _this.$log.debug(parentData);
                        angular.extend(data[parentMetaData.name], parentData);
                    }
                    else {
                    }
                }
            }
            ;
            return data;
        };
        this.getDataFromChildren = function (entityInstance) {
            var data = {};
            _this.$log.debug('childrenFound');
            _this.$log.debug(entityInstance.children);
            for (var c in entityInstance.children) {
                var childMetaData = entityInstance.children[c];
                var children = entityInstance.data[childMetaData.name];
                _this.$log.debug(childMetaData);
                _this.$log.debug(children);
                if (angular.isArray(entityInstance.data[childMetaData.name])) {
                    if (angular.isUndefined(data[childMetaData.name])) {
                        data[childMetaData.name] = [];
                    }
                    angular.forEach(entityInstance.data[childMetaData.name], function (child, key) {
                        _this.$log.debug('process child array item');
                        var childData = _this.processChild(child, entityInstance);
                        _this.$log.debug('process child return');
                        _this.$log.debug(childData);
                        data[childMetaData.name].push(childData);
                    });
                }
                else {
                    if (angular.isUndefined(data[childMetaData.name])) {
                        data[childMetaData.name] = {};
                    }
                    var child = entityInstance.data[childMetaData.name];
                    _this.$log.debug('begin process child');
                    var childData = _this.processChild(child, entityInstance);
                    _this.$log.debug('process child return');
                    _this.$log.debug(childData);
                    angular.extend(data, childData);
                }
            }
            _this.$log.debug('returning child data');
            _this.$log.debug(data);
            return data;
        };
        this.$log = $log;
    }
    return HibachiValidationService;
}());
exports.HibachiValidationService = HibachiValidationService;


/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var HistoryService = /** @class */ (function () {
    //ngInject
    function HistoryService() {
        var _this = this;
        this.histories = {};
        this.recordHistory = function (key, data, overwrite) {
            if (overwrite === void 0) { overwrite = false; }
            if (angular.isUndefined(_this.histories[key]) || overwrite) {
                _this.histories[key] = [];
            }
            _this.histories[key].push(data);
        };
        this.hasHistory = function (key) {
            return angular.isDefined(_this.histories[key]);
        };
        this.getHistory = function (key) {
            if (angular.isDefined(_this.histories[key])) {
                return _this.histories[key];
            }
        };
        this.deleteHistory = function (key) {
            _this.histories[key] = [];
        };
    }
    return HistoryService;
}());
exports.HistoryService = HistoryService;


/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var LocalStorageService = /** @class */ (function () {
    //@ngInject
    function LocalStorageService($window) {
        var _this = this;
        this.$window = $window;
        this.hasItem = function (key) {
            //try catch to handle safari in private mode which does not allow localstorage
            try {
                return (_this.$window.localStorage.getItem(key)
                    && _this.$window.localStorage.getItem(key) !== null
                    && _this.$window.localStorage.getItem(key) !== "undefined");
            }
            catch (e) {
                return false;
            }
        };
        this.getItem = function (key) {
            var value = _this.$window.localStorage.getItem(key);
            if (value.charAt(0) === '{' || value.charAt(0) === '[') {
                value = angular.fromJson(value);
            }
            return value;
        };
        this.setItem = function (key, data) {
            //try catch to handle safari in private mode which does not allow localstorage
            try {
                if (angular.isObject(data) || angular.isArray(data)) {
                    data = angular.toJson(data);
                }
                _this.$window.localStorage.setItem(key, data);
            }
            catch (e) {
            }
        };
        this.$window = $window;
    }
    return LocalStorageService;
}());
exports.LocalStorageService = LocalStorageService;


/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var MetaDataService = /** @class */ (function () {
    //@ngInject
    function MetaDataService($filter, $log) {
        var _this = this;
        this.$filter = $filter;
        this.$log = $log;
        this.getPropertyHintByObjectAndPropertyIdentifier = function (object, propertyIdentifier) {
            var hint = "";
            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
                    hint = object.metaData && object.metaData[propertyIdentifier].attributeHint;
                }
                else {
                    hint = object.metaData.$$getPropertyHint(propertyIdentifier);
                }
            }
            return hint;
        };
        this.getPropertyTitle = function (object, propertyIdentifier) {
            var title = "";
            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
                    title = object.metaData && object.metaData[propertyIdentifier].attributeName;
                }
                else {
                    title = object.metaData.$$getPropertyTitle(propertyIdentifier);
                }
            }
            return title;
        };
        this.getPropertyFieldType = function (object, propertyIdentifier) {
            var fieldType = "";
            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
                    fieldType = object.metaData && object.metaData[propertyIdentifier].attributeInputType;
                }
                else {
                    fieldType = object.metaData.$$getPropertyFieldType(propertyIdentifier);
                }
            }
            return fieldType;
        };
        this.isAttributePropertyByEntityAndPropertyIdentifier = function (object, propertyIdentifier) {
            return object.metaData && object.metaData[propertyIdentifier] && object.metaData[propertyIdentifier].attributeCode == propertyIdentifier;
        };
        this.hasPropertyByEntityNameAndPropertyIdentifier = function (object, propertyIdentifier) {
            return object.metaData && object.metaData[propertyIdentifier];
        };
        this.getPropertiesList = function () {
            return _this._propertiesList;
        };
        this.getPropertiesListByBaseEntityAlias = function (baseEntityAlias) {
            return _this._propertiesList[baseEntityAlias];
        };
        this.setPropertiesList = function (value, key) {
            _this._propertiesList[key] = value;
        };
        this.formatPropertiesList = function (propertiesList, propertyIdentifier) {
            if (!propertiesList) {
                propertiesList = {};
            }
            if (!propertiesList.data) {
                propertiesList.data = [];
            }
            var simpleGroup = {
                $$group: 'simple',
            };
            propertiesList.data.push(simpleGroup);
            var drillDownGroup = {
                $$group: 'drilldown',
            };
            propertiesList.data.push(drillDownGroup);
            var compareCollections = {
                $$group: 'compareCollections',
            };
            propertiesList.data.push(compareCollections);
            var attributeCollections = {
                $$group: 'attribute',
            };
            propertiesList.data.push(attributeCollections);
            for (var i in propertiesList.data) {
                if (angular.isDefined(propertiesList.data[i].ormtype)) {
                    if (angular.isDefined(propertiesList.data[i].attributeID)) {
                        propertiesList.data[i].$$group = 'attribute';
                    }
                    else {
                        propertiesList.data[i].$$group = 'simple';
                    }
                }
                if (angular.isDefined(propertiesList.data[i].fieldtype)) {
                    if (propertiesList.data[i].fieldtype === 'id') {
                        propertiesList.data[i].$$group = 'simple';
                    }
                    if (propertiesList.data[i].fieldtype === 'many-to-one') {
                        propertiesList.data[i].$$group = 'drilldown';
                    }
                    if (propertiesList.data[i].fieldtype === 'many-to-many' || propertiesList.data[i].fieldtype === 'one-to-many') {
                        propertiesList.data[i].$$group = 'compareCollections';
                    }
                }
                var divider = '_';
                if (propertiesList.data[i].$$group == 'simple' || propertiesList.data[i].$$group == 'attribute') {
                    divider = '.';
                }
                propertiesList.data[i].propertyIdentifier = propertyIdentifier + divider + propertiesList.data[i].name;
            }
            //propertiesList.data = _orderBy(propertiesList.data,['displayPropertyIdentifier'],false);
            //--------------------------------Removes empty lines from dropdown.
            var temp = [];
            for (var i_1 = 0; i_1 <= propertiesList.data.length - 1; i_1++) {
                if (propertiesList.data[i_1].propertyIdentifier.indexOf(".undefined") != -1 || propertiesList.data[i_1].propertyIdentifier.indexOf("_undefined") != -1) {
                    _this.$log.debug("removing: " + propertiesList.data[i_1].displayPropertyIdentifier);
                    propertiesList.data[i_1].displayPropertyIdentifier = "hide";
                }
                else {
                    temp.push(propertiesList.data[i_1]);
                    _this.$log.debug(propertiesList.data[i_1]);
                }
            }
            temp.sort;
            propertiesList.data = temp;
            _this.$log.debug("----------------------PropertyList\n\n\n\n\n");
            propertiesList.data = _this._orderBy(propertiesList.data, ['propertyIdentifier'], false);
            //--------------------------------End remove empty lines.
        };
        this.orderBy = function (propertiesList, predicate, reverse) {
            return _this._orderBy(propertiesList, predicate, reverse);
        };
        this.$filter = $filter;
        this.$log = $log;
        this._propertiesList = {};
        this._orderBy = $filter('orderBy');
    }
    MetaDataService.$inject = [
        '$filter',
        '$log'
    ];
    return MetaDataService;
}());
exports.MetaDataService = MetaDataService;


/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * @ngdoc service
 * @name sdt.models:ObserverService
 * @description
 * # ObserverService
 * Manages all events inside the application
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseservice_1 = __webpack_require__(62);
var ObserverService = /** @class */ (function (_super) {
    __extends(ObserverService, _super);
    //@ngInject
    function ObserverService($timeout, historyService, utilityService) {
        var _this = 
        /**
         * @ngdoc property
         * @name ObserverService#observers
         * @propertyOf sdt.models:ObserverService
         * @description object to store all observers in
         * @returns {object} object
         */
        _super.call(this) || this;
        _this.$timeout = $timeout;
        _this.historyService = historyService;
        _this.utilityService = utilityService;
        /* Declare methods */
        /**
         * @ngdoc method
         * @name ObserverService#attach
         * @methodOf sdt.models:ObserverService
         * @param {function} callback the callback function to fire
         * @param {string} event name of the event
         * @param {string} id unique id for the object that is listening i.e. namespace
         * @description adds events listeners
         */
        _this.attach = function (callback, event, id) {
            if (!id) {
                id = _this.utilityService.createID();
            }
            event = event.toLowerCase();
            id = id.toLowerCase();
            if (!_this.observers[event]) {
                _this.observers[event] = {};
            }
            if (!_this.observers[event][id])
                _this.observers[event][id] = [];
            _this.observers[event][id].push(callback);
        };
        /**
         * @ngdoc method
         * @name ObserverService#detachById
         * @methodOf sdt.models:ObserverService
         * @param {string} id unique id for the object that is listening i.e. namespace
         * @description removes all events for a specific id from the observers object
         */
        _this.detachById = function (id) {
            id = id.toLowerCase();
            for (var event in _this.observers) {
                _this.detachByEventAndId(event, id);
            }
        };
        /**
         * @ngdoc method
         * @name ObserverService#detachById
         * @methodOf sdt.models:ObserverService
         * @param {string} event name of the event
         * @description removes removes all the event from the observer object
         */
        _this.detachByEvent = function (event) {
            event = event.toLowerCase();
            if (event in _this.observers) {
                delete _this.observers[event];
            }
        };
        /**
         * @ngdoc method
         * @name ObserverService#detachByEventAndId
         * @methodOf sdt.models:ObserverService
         * @param {string} event name of the event
         * @param {string} id unique id for the object that is listening i.e. namespace
         * @description removes removes all callbacks for an id in a specific event from the observer object
         */
        _this.detachByEventAndId = function (event, id) {
            event = event.toLowerCase();
            id = id.toLowerCase();
            if (event in _this.observers) {
                if (id in _this.observers[event]) {
                    delete _this.observers[event][id];
                }
            }
        };
        /**
         * @ngdoc method
         * @name ObserverService#notify
         * @methodOf sdt.models:ObserverService
         * @param {string} event name of the event
         * @param {string|object|Array|number} parameters pass whatever your listener is expecting
         * @description notifies all observers of a specific event
         */
        _this.notify = function (event, parameters) {
            console.warn(event, parameters);
            event = event.toLowerCase();
            return _this.$timeout(function () {
                for (var id in _this.observers[event]) {
                    for (var _i = 0, _a = _this.observers[event][id]; _i < _a.length; _i++) {
                        var callback = _a[_i];
                        callback(parameters);
                    }
                }
            });
        };
        /**
         * @ngdoc method
         * @name ObserverService#notifyById
         * @methodOf sdt.models:ObserverService
         * @param {string} event name of the event
         * @param {string} eventId unique id for the object that is listening i.e. namespace
         * @param {string|object|Array|number} parameters pass whatever your listener is expecting
         * @description notifies observers of a specific event by id
         */
        _this.notifyById = function (event, eventId, parameters) {
            console.warn(event, eventId, parameters);
            event = event.toLowerCase();
            eventId = eventId.toLowerCase();
            return _this.$timeout(function () {
                for (var id in _this.observers[event]) {
                    if (id != eventId)
                        continue;
                    angular.forEach(_this.observers[event][id], function (callback) {
                        callback(parameters);
                    });
                }
            });
        };
        _this.notifyAndRecord = function (event, parameters) {
            return _this.notify(event, parameters).then(function () {
                _this.historyService.recordHistory(event, parameters, true);
            });
        };
        _this.observers = {};
        return _this;
    }
    return ObserverService;
}(baseservice_1.BaseService));
exports.ObserverService = ObserverService;


/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(15);
var OrderPaymentService = /** @class */ (function (_super) {
    __extends(OrderPaymentService, _super);
    //@ngInject
    function OrderPaymentService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'OrderPayment') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return OrderPaymentService;
}(baseentityservice_1.BaseEntityService));
exports.OrderPaymentService = OrderPaymentService;


/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(15);
var OrderService = /** @class */ (function (_super) {
    __extends(OrderService, _super);
    //@ngInject
    function OrderService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Order') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.newOrder_AddOrderPayment = function () {
            return _this.newProcessObject('Order_AddOrderPayment');
        };
        return _this;
    }
    return OrderService;
}(baseentityservice_1.BaseEntityService));
exports.OrderService = OrderService;


/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var PublicService = /** @class */ (function () {
    ///index.cfm/api/scope/
    //@ngInject
    function PublicService($http, $q, $window, $location, $hibachi, $injector, requestService, accountService, cartService, orderService, observerService, appConfig, $timeout) {
        var _this = this;
        this.$http = $http;
        this.$q = $q;
        this.$window = $window;
        this.$location = $location;
        this.$hibachi = $hibachi;
        this.$injector = $injector;
        this.requestService = requestService;
        this.accountService = accountService;
        this.cartService = cartService;
        this.orderService = orderService;
        this.observerService = observerService;
        this.appConfig = appConfig;
        this.$timeout = $timeout;
        this.requests = {};
        this.errors = {};
        this.baseActionPath = "";
        this.months = [{ name: '01 - JAN', value: 1 }, { name: '02 - FEB', value: 2 }, { name: '03 - MAR', value: 3 }, { name: '04 - APR', value: 4 }, { name: '05 - MAY', value: 5 }, { name: '06 - JUN', value: 6 }, { name: '07 - JUL', value: 7 }, { name: '08 - AUG', value: 8 }, { name: '09 - SEP', value: 9 }, { name: '10 - OCT', value: 10 }, { name: '11 - NOV', value: 11 }, { name: '12 - DEC', value: 12 }];
        this.years = [];
        this.shippingAddress = "";
        this.accountAddressEditFormIndex = [];
        this.showStoreSelector = [];
        this.showEmailSelector = [];
        this.imagePath = {};
        this.successfulActions = [];
        this.failureActions = [];
        // public hasErrors = ()=>{
        //     return this.errors.length;
        // }
        /**
         * Helper methods for getting errors from the cart
         */
        this.getErrors = function () {
            _this.errors = {};
            for (var key in _this.requests) {
                var request = _this.requests[key];
                if (Object.keys(request.errors).length) {
                    _this.errors[key] = request.errors;
                }
            }
            return _this.errors;
        };
        /** grab the valid expiration years for credit cards  */
        this.getExpirationYears = function () {
            var baseDate = new Date();
            var today = baseDate.getFullYear();
            var start = today;
            for (var i = 0; i <= 15; i++) {
                _this.years.push({
                    name: start + i,
                    value: start + i,
                });
            }
        };
        /** accessors for account */
        this.getAccount = function (refresh) {
            if (refresh === void 0) { refresh = false; }
            var urlBase = _this.baseActionPath + 'getAccount/';
            if (!_this.accountDataPromise || refresh) {
                _this.accountDataPromise = _this.getData(urlBase, "account", "");
            }
            return _this.accountDataPromise;
        };
        /** accessors for cart */
        this.getCart = function (refresh) {
            if (refresh === void 0) { refresh = false; }
            var urlBase = _this.baseActionPath + 'getCart/';
            if (!_this.cartDataPromise || refresh) {
                _this.cartDataPromise = _this.getData(urlBase, "cart", "");
            }
            return _this.cartDataPromise;
        };
        /** accessors for countries */
        this.getCountries = function (refresh) {
            if (refresh === void 0) { refresh = false; }
            var urlBase = _this.baseActionPath + 'getCountries/';
            if (!_this.countryDataPromise || refresh) {
                _this.countryDataPromise = _this.getData(urlBase, "countries", "");
            }
            return _this.countryDataPromise;
        };
        /** accessors for states */
        this.getStates = function (countryCode, address, refresh) {
            if (refresh === void 0) { refresh = false; }
            if (address && address.data) {
                countryCode = address.data.countrycode || address.countrycode;
            }
            if (typeof address === 'boolean' && !angular.isDefined(refresh)) {
                refresh = address;
            }
            if (!angular.isDefined(countryCode))
                countryCode = "US";
            var urlBase = _this.baseActionPath + 'getStateCodeOptionsByCountryCode/';
            if (!_this.getRequestByAction('getStateCodeOptionsByCountryCode') || !_this.getRequestByAction('getStateCodeOptionsByCountryCode').loading || refresh) {
                _this.stateDataPromise = _this.getData(urlBase, "states", "?countryCode=" + countryCode);
                return _this.stateDataPromise;
            }
            return _this.stateDataPromise;
        };
        this.refreshAddressOptions = function (address) {
            _this.getStates(null, address);
            _this.getAddressOptions(null, address);
        };
        this.getStateByStateCode = function (stateCode) {
            if (!angular.isDefined(_this.states) || !angular.isDefined(_this.states.stateCodeOptions) || !angular.isDefined(stateCode)) {
                return;
            }
            for (var state in _this.states.stateCodeOptions) {
                if (_this.states.stateCodeOptions[state].value == stateCode) {
                    return _this.states.stateCodeOptions[state];
                }
            }
        };
        this.getCountryByCountryCode = function (countryCode) {
            if (!angular.isDefined(_this.countries) || !angular.isDefined(_this.countries.countryCodeOptions)) {
                return;
            }
            if (!countryCode) {
                countryCode = 'US';
            }
            for (var country in _this.countries.countryCodeOptions) {
                if (_this.countries.countryCodeOptions[country].value == countryCode) {
                    return _this.countries.countryCodeOptions[country];
                }
            }
        };
        /** accessors for states */
        this.getAddressOptions = function (countryCode, address, refresh) {
            if (refresh === void 0) { refresh = false; }
            if (address && address.data) {
                countryCode = address.data.countrycode || address.countrycode;
            }
            if (!angular.isDefined(countryCode))
                countryCode = "US";
            if (typeof address === 'boolean' && !angular.isDefined(refresh)) {
                refresh = address;
            }
            var urlBase = _this.baseActionPath + 'getAddressOptionsByCountryCode/';
            if (!_this.getRequestByAction('getAddressOptionsByCountryCode') || !_this.getRequestByAction('getAddressOptionsByCountryCode').loading || refresh) {
                _this.addressOptionData = _this.getData(urlBase, "addressOptions", "?countryCode=" + countryCode);
                return _this.addressOptionData;
            }
            return _this.addressOptionData;
        };
        /** accessors for states */
        this.getData = function (url, setter, param) {
            var urlBase = url + param;
            var request = _this.requestService.newPublicRequest(urlBase);
            request.promise.then(function (result) {
                //don't need account and cart for anything other than account and cart calls.
                if (setter.indexOf('account') == -1 || setter.indexOf('cart') == -1) {
                    if (result['account']) {
                        delete result['account'];
                    }
                    if (result['cart']) {
                        delete result['cart'];
                    }
                }
                if (setter == 'cart' || setter == 'account' && _this[setter] && _this[setter].populate) {
                    //cart and account return cart and account info flat
                    _this[setter].populate(result);
                }
                else {
                    //other functions reutrn cart,account and then data
                    if (setter == 'states') {
                        _this[setter] = {};
                        _this.$timeout(function () {
                            _this[setter] = (result);
                        });
                    }
                    else {
                        _this[setter] = (result);
                    }
                }
            }).catch(function (reason) {
            });
            _this.requests[request.getAction()] = request;
            return request.promise;
        };
        /** sets the current shipping address */
        this.setShippingAddress = function (shippingAddress) {
            _this.shippingAddress = shippingAddress;
        };
        /** sets the current shipping address */
        this.setBillingAddress = function (billingAddress) {
            _this.billingAddress = billingAddress;
        };
        /** sets the current billing address */
        this.selectBillingAddress = function (key) {
            if (_this.orderPaymentObject && _this.orderPaymentObject.forms) {
                var address = _this.account.accountAddresses[key].address;
                address.accountAddressID = _this.account.accountAddresses[key].accountAddressID;
                for (var property in address) {
                    for (var form in _this.orderPaymentObject['forms']) {
                        form = _this.orderPaymentObject['forms'][form];
                        if (form['newOrderPayment.billingAddress.' + property] != undefined) {
                            form['newOrderPayment.billingAddress.' + property].$setViewValue(address[property]);
                        }
                    }
                }
                _this.orderPaymentObject.newOrderPayment.billingAddress = address;
            }
        };
        /** this is the generic method used to call all server side actions.
        *  @param action {string} the name of the action (method) to call in the public service.
        *  @param data   {object} the params as key value pairs to pass in the post request.
        *  @return a deferred promise that resolves server response or error. also includes updated account and cart.
        */
        this.doAction = function (action, data, method) {
            //purge angular $ prefixed propertie
            //Prevent sending the same request multiple times in parallel
            if (_this.getRequestByAction(action) && _this.loadingThisRequest(action, data, false))
                return _this.$q.when();
            if (!action) {
                throw "Action is required exception";
            }
            var urlBase = _this.appConfig.baseURL;
            //check if the caller is defining a path to hit, otherwise use the public scope.
            if (action.indexOf(":") !== -1) {
                urlBase = urlBase + action; //any path
            }
            else {
                urlBase = _this.baseActionPath + action; //public path
            }
            if (data) {
                method = "post";
                data.returnJsonObjects = "cart,account";
            }
            else {
                urlBase += (urlBase.indexOf('?') == -1) ? '?' : '&';
                urlBase += "returnJsonObject=cart,account";
            }
            if (method == "post") {
                data.returnJsonObjects = "cart,account";
                //post
                var request_1 = _this.requestService.newPublicRequest(urlBase, data, method);
                request_1.promise.then(function (result) {
                    _this.processAction(result, request_1);
                }).catch(function (response) {
                });
                _this.requests[request_1.getAction()] = request_1;
                return request_1.promise;
            }
            else {
                //get
                var url = urlBase;
                var request_2 = _this.requestService.newPublicRequest(url, data, method);
                request_2.promise.then(function (result) {
                    _this.processAction(result, request_2);
                }).catch(function (reason) {
                });
                _this.requests[request_2.getAction()] = request_2;
                return request_2.promise;
            }
        };
        this.uploadFile = function (action, data) {
            _this.$timeout(function () {
                _this.uploadingFile = true;
            });
            var url = _this.appConfig.baseURL + action;
            var formData = new FormData();
            formData.append("fileName", data.fileName);
            formData.append("uploadFile", data.uploadFile);
            var xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.onload = function (result) {
                var response = JSON.parse(xhr.response);
                if (xhr.status === 200) {
                    _this.processAction(response, null);
                    _this.successfulActions = response.successfulActions;
                    _this.failureActions = response.failureActions;
                }
                _this.$timeout(function () {
                    _this.uploadingFile = false;
                });
            };
            xhr.send(formData);
        };
        this.processAction = function (response, request) {
            //Run any specific adjustments needed
            _this.runCheckoutAdjustments(response);
            //if the action that was called was successful, then success is true.
            if (request && request.hasSuccessfulAction()) {
                _this.successfulActions = [];
                for (var action in request.successfulActions) {
                    if (request.successfulActions[action].indexOf('public:cart.placeOrder') !== -1) {
                        _this.$window.location.href = _this.confirmationUrl;
                        return;
                    }
                    else if (request.successfulActions[action].indexOf('public:cart.finalizeCart') !== -1) {
                        _this.$window.location.href = _this.checkoutUrl;
                        return;
                    }
                    else if (request.successfulActions[action].indexOf('public:account.logout') !== -1) {
                        _this.account = _this.$hibachi.newAccount();
                    }
                    _this.successfulActions.push(request.successfulActions[action].split('.')[1]);
                }
            }
            if (request && request.hasFailureAction()) {
                _this.failureActions = [];
                for (var action in request.failureActions) {
                    _this.failureActions.push(request.failureActions[action].split('.')[1]);
                }
            }
            /** update the account and the cart */
            if (response.account) {
                _this.account.populate(response.account);
                _this.account.request = request;
            }
            if (response.cart) {
                _this.cart.populate(response.cart);
                _this.cart.request = request;
            }
            _this.errors = response.errors;
        };
        this.runCheckoutAdjustments = function (response) {
            _this.filterErrors(response);
            if (response.cart) {
                _this.removeInvalidOrderPayments(response.cart);
            }
        };
        this.getRequestByAction = function (action) {
            return _this.requests[action];
        };
        /**
         * Helper methods so that everything in account and cart can be accessed using getters.
         */
        this.userIsLoggedIn = function () {
            return _this.account.userIsLoggedIn();
        };
        this.getActivePaymentMethods = function () {
            var urlString = "/?" + _this.appConfig.action + "=admin:ajax.getActivePaymentMethods";
            var request = _this.requestService.newPublicRequest(urlString)
                .then(function (result) {
                if (angular.isDefined(result.data.paymentMethods)) {
                    _this.paymentMethods = result.data.paymentMethods;
                }
            });
            _this.requests[request.getAction()] = request;
        };
        this.filterErrors = function (response) {
            if (!response || !response.cart || !response.cart.errors)
                return;
            var cartErrors = response.cart.errors;
            if (cartErrors.addOrderPayment) {
                cartErrors.addOrderPayment = cartErrors.addOrderPayment.filter(function (error) { return error != 'billingAddress'; });
            }
        };
        /** Uses getRequestByAction() plus an identifier to distinguish between different functionality using the same route*/
        this.loadingThisRequest = function (action, conditions, strict) {
            var request = _this.getRequestByAction(action);
            if (!request || !request.loading)
                return false;
            for (var identifier in conditions) {
                if (!((conditions[identifier] === true && !strict) || request.data[identifier] == conditions[identifier])) {
                    return false;
                }
            }
            return true;
        };
        this.removeInvalidOrderPayments = function (cart) {
            cart.orderPayments = cart.orderPayments.filter(function (payment) { return !payment.hasErrors; });
        };
        /**
         * Given a payment method name, returns the id.
         */
        this.getPaymentMethodID = function (name) {
            for (var method in _this.paymentMethods) {
                if (_this.paymentMethods[method].paymentMethodName == name && _this.paymentMethods[method].activeFlag == "Yes ") {
                    return _this.paymentMethods[method].paymentMethodID;
                }
            }
        };
        /** Returns a boolean indicating whether or not the order has the named payment method.*/
        this.hasPaymentMethod = function (paymentMethodName) {
            for (var _i = 0, _a = _this.cart.orderPayments; _i < _a.length; _i++) {
                var payment = _a[_i];
                if (payment.paymentMethod.paymentMethodName === paymentMethodName)
                    return true;
            }
            return false;
        };
        this.hasCreditCardPaymentMethod = function () {
            return _this.hasPaymentMethod("Credit Card");
        };
        this.hasPaypalPaymentMethod = function () {
            return _this.hasPaymentMethod("PayPal Express");
        };
        this.hasGiftCardPaymentMethod = function () {
            return _this.hasPaymentMethod("Gift Card");
        };
        this.hasMoneyOrderPaymentMethod = function () {
            return _this.hasPaymentMethod("Money Order");
        };
        this.hasCashPaymentMethod = function () {
            return _this.hasPaymentMethod("Cash");
        };
        /** Returns a boolean indicating whether or not the order has the named fulfillment method.*/
        this.hasFulfillmentMethod = function (fulfillmentMethodName) {
            for (var _i = 0, _a = _this.cart.orderFulfillments; _i < _a.length; _i++) {
                var fulfillment = _a[_i];
                if (fulfillment.fulfillmentMethod.fulfillmentMethodName === fulfillmentMethodName)
                    return true;
            }
            return false;
        };
        this.hasShippingFulfillmentMethod = function () {
            return _this.hasFulfillmentMethod("Shipping");
        };
        this.hasEmailFulfillmentMethod = function () {
            return _this.hasFulfillmentMethod("Email");
        };
        this.hasPickupFulfillmentMethod = function () {
            return _this.hasFulfillmentMethod("Pickup");
        };
        this.getFulfillmentType = function (fulfillment) {
            return fulfillment.fulfillmentMethod.fulfillmentMethodType;
        };
        this.isShippingFulfillment = function (fulfillment) {
            return _this.getFulfillmentType(fulfillment) === 'shipping';
        };
        this.isEmailFulfillment = function (fulfillment) {
            return _this.getFulfillmentType(fulfillment) === 'email';
        };
        this.isPickupFulfillment = function (fulfillment) {
            return _this.getFulfillmentType(fulfillment) === 'pickup';
        };
        /** Returns true if the order fulfillment has a shipping address selected. */
        this.hasShippingAddress = function (fulfillmentIndex) {
            return (_this.cart.orderFulfillments[fulfillmentIndex] &&
                _this.isShippingFulfillment(_this.cart.orderFulfillments[fulfillmentIndex]) &&
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingAddress &&
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingAddress.addressID);
        };
        this.hasShippingMethodOptions = function (fulfillmentIndex) {
            var shippingMethodOptions = _this.cart.orderFulfillments[fulfillmentIndex].shippingMethodOptions;
            return shippingMethodOptions && shippingMethodOptions.length && (shippingMethodOptions.length > 1 || (shippingMethodOptions[0].value && shippingMethodOptions[0].value.length));
        };
        /** Returns true if the order fulfillment has a shipping address selected. */
        this.hasPickupLocation = function (fulfillmentIndex) {
            return (_this.cart.orderFulfillments[fulfillmentIndex] &&
                _this.isPickupFulfillment(_this.cart.orderFulfillments[fulfillmentIndex]) &&
                _this.cart.orderFulfillments[fulfillmentIndex].pickupLocation);
        };
        /** Returns true if the order requires a fulfillment */
        this.orderRequiresFulfillment = function () {
            return _this.cart.orderRequiresFulfillment();
        };
        /**
         *  Returns true if the order requires a account
         *  Either because the user is not logged in, or because they don't have one.
         *
         */
        this.orderRequiresAccount = function () {
            return _this.cart.orderRequiresAccount();
        };
        /** Returns true if the payment tab should be active */
        this.hasShippingAddressAndMethod = function () {
            return _this.cart.hasShippingAddressAndMethod();
        };
        /**
         * Returns true if the user has an account and is logged in.
         */
        this.hasAccount = function () {
            if (_this.account.accountID) {
                return true;
            }
            return false;
        };
        /** Redirects to the passed in URL
        */
        this.redirectExact = function (url) {
            _this.$window.location.href = url;
        };
        // /** Returns true if a property on an object is undefined or empty. */
        this.isUndefinedOrEmpty = function (object, property) {
            if (!angular.isDefined(object[property]) || object[property] == "") {
                return true;
            }
            return false;
        };
        /** A simple method to return the quantity sum of all orderitems in the cart. */
        this.getOrderItemQuantitySum = function () {
            var totalQuantity = 0;
            if (angular.isDefined(_this.cart)) {
                return _this.cart.getOrderItemQuantitySum();
            }
            return totalQuantity;
        };
        /** Returns the index of the state from the list of states */
        this.getSelectedStateIndexFromStateCode = function (stateCode, states) {
            for (var state in states) {
                if (states[state].value == stateCode) {
                    return state;
                }
            }
        };
        /**
         * Returns true if on a mobile device. This is important for placeholders.
         */
        this.isMobile = function () {
            if (_this.$window.innerWidth <= 800 && _this.$window.innerHeight <= 600) {
                return true;
            }
            return false;
        };
        /** returns true if the shipping method option passed in is the selected shipping method
        */
        this.isSelectedShippingMethod = function (option, fulfillmentIndex) {
            // DEPRECATED LOGIC
            if (typeof option === 'number' || typeof option === 'string') {
                var index = option, value = fulfillmentIndex;
                var orderFulfillment = void 0;
                for (var _i = 0, _a = _this.cart.orderFulfillments; _i < _a.length; _i++) {
                    var fulfillment = _a[_i];
                    if (_this.isShippingFulfillment(fulfillment)) {
                        orderFulfillment = fulfillment;
                    }
                }
                if (_this.cart.fulfillmentTotal &&
                    value == orderFulfillment.shippingMethod.shippingMethodID ||
                    orderFulfillment.shippingMethodOptions.length == 1) {
                    return true;
                }
                return false;
            }
            //NEW LOGIC
            return (_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod &&
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod.shippingMethodID == option.value) ||
                (_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethodOptions.length == 1);
        };
        /** Select a shipping method - temporarily changes the selected method on the front end while awaiting official change from server
        */
        this.selectShippingMethod = function (option, fulfillmentIndex) {
            var data = {
                'shippingMethodID': option.value,
                'fulfillmentID': _this.cart.orderFulfillments[fulfillmentIndex].orderFulfillmentID
            };
            _this.doAction('addShippingMethodUsingShippingMethodID', data);
            if (!_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod) {
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod = {};
            }
            _this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod.shippingMethodID = option.value;
        };
        /** Removes promotional code from order*/
        this.removePromoCode = function (code) {
            _this.doAction('removePromotionCode', { promotionCode: code });
        };
        //gets the calcuated total minus the applied gift cards.
        this.getTotalMinusGiftCards = function () {
            var total = _this.getAppliedGiftCardTotals();
            return _this.cart.calculatedTotal - total;
        };
        /** Format saved payment method info for display in list*/
        this.formatPaymentMethod = function (paymentMethod) {
            return (paymentMethod.accountPaymentMethodName || paymentMethod.nameOnCreditCard) + ' - ' + paymentMethod.creditCardType + ' *' + paymentMethod.creditCardLastFour + ' exp. ' + ('0' + paymentMethod.expirationMonth).slice(-2) + '/' + paymentMethod.expirationYear.toString().slice(-2);
        };
        this.getOrderItemSkuIDs = function (cart) {
            return cart.orderItems.map(function (item) {
                return item.sku.skuID;
            }).join(',');
        };
        this.getResizedImageByProfileName = function (profileName, skuIDs) {
            _this.loading = true;
            if (profileName == undefined) {
                profileName = "medium";
            }
            _this.doAction('getResizedImageByProfileName', { profileName: profileName, skuIds: skuIDs }).then(function (result) {
                if (!angular.isDefined(_this.imagePath)) {
                    _this.imagePath = {};
                }
                if (result.resizedImagePaths) {
                    for (var skuID in result.resizedImagePaths) {
                        _this.imagePath[skuID] = result.resizedImagePaths[skuID];
                    }
                }
            });
        };
        /** Returns the amount total of giftcards added to this order.*/
        this.getPaymentTotals = function () {
            //
            var total = 0;
            for (var index in _this.cart.orderPayments) {
                total = total + Number(_this.cart.orderPayments[index]['amount'].toFixed(2));
            }
            return total;
        };
        /** Gets the calcuated total minus the applied gift cards. */
        this.getTotalMinusPayments = function () {
            var total = _this.getPaymentTotals();
            return _this.cart.calculatedTotal - total;
        };
        /** Boolean indicating whether the total balance has been accounted for by order payments.*/
        this.paymentsEqualTotalBalance = function () {
            return _this.getTotalMinusPayments() == 0;
        };
        /**View logic - Opens review panel if no more payments are due.*/
        this.checkIfFinalPayment = function () {
            if ((_this.getRequestByAction('addOrderPayment') && _this.getRequestByAction('addOrderPayment').hasSuccessfulAction() ||
                _this.getRequestByAction('addGiftCardOrderPayment') && _this.getRequestByAction('addGiftCardOrderPayment').hasSuccessfulAction()) && _this.paymentsEqualTotalBalance()) {
                _this.edit = 'review';
            }
        };
        this.getAddressEntity = function (address) {
            var addressEntity = _this.$hibachi.newAddress();
            if (address) {
                for (var key in address) {
                    if (address.hasOwnProperty(key)) {
                        addressEntity[key] = address[key];
                    }
                }
            }
            return addressEntity;
        };
        this.resetRequests = function (request) {
            delete _this.requests[request];
        };
        /** Returns true if the addresses match. */
        this.addressesMatch = function (address1, address2) {
            if (angular.isDefined(address1) && angular.isDefined(address2)) {
                if ((address1.streetAddress == address2.streetAddress &&
                    address1.street2Address == address2.street2Address &&
                    address1.city == address2.city &&
                    address1.postalCode == address2.postalCode &&
                    address1.stateCode == address2.stateCode &&
                    address1.countrycode == address2.countrycode)) {
                    return true;
                }
            }
            return false;
        };
        /**
       *  Returns true when the fulfillment body should be showing
       *  Show if we don't need an account but do need a fulfillment
       *
       */
        this.showFulfillmentTabBody = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('fulfillment') != -1) && !_this.edit ||
                (_this.edit == 'fulfillment')) {
                return true;
            }
            return false;
        };
        /**
         *  Returns true when the fulfillment body should be showing
         *  Show if we don't need an account,fulfillment, and don't have a payment - or
         *  we have a payment but are editting the payment AND nothing else is being edited
         *
         */
        this.showPaymentTabBody = function () {
            if (!_this.hasAccount())
                return false;
            if (((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('payment') != -1) && !_this.edit) ||
                ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                    (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                    (_this.edit == 'payment'))) {
                return true;
            }
            return false;
        };
        /**
         *  Returns true if the review tab body should be showing.
         *  Show if we don't need an account,fulfillment,payment, but not if something else is being edited
         *
         */
        this.showReviewTabBody = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('payment') == -1) &&
                ((!_this.edit) || (_this.edit == 'review'))) {
                return true;
            }
            return false;
        };
        /** Returns true if the fulfillment tab should be active */
        this.fulfillmentTabIsActive = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.edit == 'fulfillment') ||
                (!_this.edit && ((_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID) &&
                    (_this.cart.orderRequirementsList.indexOf('fulfillment') != -1))) {
                return true;
            }
            return false;
        };
        /** Returns true if the payment tab should be active */
        this.paymentTabIsActive = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.edit == 'payment') ||
                (!_this.edit &&
                    (_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID &&
                    (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                    (_this.cart.orderRequirementsList.indexOf('payment') != -1))) {
                return true;
            }
            return false;
        };
        this.isCreatingAccount = function () {
            return !_this.hasAccount() && _this.showCreateAccount;
        };
        this.isSigningIn = function () {
            return !_this.hasAccount() && !_this.showCreateAccount;
        };
        this.loginError = function () {
            if (_this.account.processObjects && _this.account.processObjects.login && _this.account.processObjects.login.hasErrors) {
                return _this.account.processObjects.login.errors.emailAddress['0'];
            }
            ;
        };
        this.createAccountError = function () {
            if (_this.account.processObjects && _this.account.processObjects.create && _this.account.processObjects.create.hasErrors) {
                return _this.account.processObjects.create.errors;
            }
        };
        this.forgotPasswordNotSubmitted = function () {
            return !_this.account.processObjects || (!_this.account.hasErrors && !_this.account.processObjects.forgotPassword);
        };
        this.forgotPasswordSubmitted = function () {
            return _this.account.processObjects && _this.account.processObjects.forgotPassword;
        };
        this.forgotPasswordHasNoErrors = function () {
            return _this.account.processObjects && _this.account.processObjects.forgotPassword && !_this.account.processObjects.forgotPassword.hasErrors;
        };
        this.forgotPasswordError = function () {
            if (_this.forgotPasswordSubmitted() && !_this.forgotPasswordHasNoErrors()) {
                return _this.account.processObjects.forgotPassword.errors.emailAddress['0'];
            }
        };
        /** Consolidate response errors on cart.errors.runPlaceOrderTransaction*/
        this.placeOrderFailure = function () {
            var errors = [];
            for (var key in _this.cart.errors) {
                var errArray = _this.cart.errors[key];
                errors = errors.concat(errArray);
            }
            _this.cart.errors.runPlaceOrderTransaction = errors;
            _this.edit = '';
        };
        /** Returns errors from placeOrder request*/
        this.placeOrderError = function () {
            if (_this.cart.hasErrors && _this.cart.errors.runPlaceOrderTransaction) {
                return _this.cart.errors.runPlaceOrderTransaction;
            }
        };
        /** Returns errors from addOrderPayment request. */
        this.addOrderPaymentError = function () {
            if (_this.cart.errors.addOrderPayment)
                return _this.cart.errors.addOrderPayment;
            if (_this.cart.errors.runPlaceOrderTransaction)
                return _this.cart.errors.runPlaceOrderTransaction;
            return angular.isDefined(_this.errors) ? _this.errors['ADDORDERPAYMENT'] : false;
        };
        /** Returns errors from addBillingAddress request. */
        this.addBillingAddressError = function () {
            if (_this.loadingThisRequest('addOrderPayment', {}, false))
                return false;
            if (_this.errors && _this.errors.copied)
                return _this.addBillingAddressErrors;
            _this.addBillingAddressErrors = _this.cart.errors.addBillingAddress || (angular.isDefined(_this.errors) ? _this.errors['addBillingAddress'] : false);
            if (!_this.billingAddressEditFormIndex && _this.errors && _this.hasFailureAction('addBillingAddress')) {
                var addressProperties = _this.$hibachi.newAddress().data;
                for (var property in _this.errors) {
                    if (addressProperties.hasOwnProperty(property)) {
                        _this.addBillingAddressErrors = _this.addBillingAddressErrors || [];
                        _this.errors[property].forEach(function (error) {
                            _this.addBillingAddressErrors.push(error);
                        });
                    }
                }
                _this.errors.copied = 1;
            }
            return _this.addBillingAddressErrors;
        };
        /** Returns errors from addGiftCard request. */
        this.giftCardError = function () {
            if (_this.cart.processObjects &&
                _this.cart.processObjects.addOrderPayment &&
                _this.cart.processObjects.addOrderPayment.errors &&
                _this.cart.processObjects.addOrderPayment.errors.giftCardID) {
                return _this.cart.processObjects.addOrderPayment.errors.giftCardID[0];
            }
        };
        this.editAccountAddress = function (key, fulfillmentIndex) {
            _this.clearShippingAddressErrors();
            _this.accountAddressEditFormIndex[fulfillmentIndex] = key;
            _this.editingAccountAddress = _this.getAddressEntity(_this.account.accountAddresses[key].address);
            _this.editingAccountAddress.accountAddressName = _this.account.accountAddresses[key].accountAddressName;
            _this.editingAccountAddress.accountAddressID = _this.account.accountAddresses[key].accountAddressID;
        };
        this.editBillingAddress = function (key, formName) {
            _this.clearMessages();
            _this.billingAddressEditFormIndex = key;
            _this.selectedBillingAddress = null;
            if (formName) {
                _this[formName + 'BillingAddress'] = _this.getAddressEntity(_this.account.accountAddresses[key].address);
                _this[formName + 'BillingAddress'].accountAddressName = _this.account.accountAddresses[key].accountAddressName;
                _this[formName + 'BillingAddress'].accountAddressID = _this.account.accountAddresses[key].accountAddressID;
            }
            else {
                _this.billingAddress = _this.getAddressEntity(_this.account.accountAddresses[key].address);
                _this.billingAddress.accountAddressName = _this.account.accountAddresses[key].accountAddressName;
                _this.billingAddress.accountAddressID = _this.account.accountAddresses[key].accountAddressID;
            }
        };
        this.clearShippingAddressErrors = function () {
            _this.clearMessages();
            _this.shippingAddressErrors = undefined;
        };
        this.clearMessages = function () {
            _this.successfulActions = [];
            _this.failureActions = [];
        };
        /**Hides shipping address form, clears shipping address errors*/
        this.hideAccountAddressForm = function (fulfillmentIndex) {
            _this.accountAddressEditFormIndex[fulfillmentIndex] = undefined;
        };
        this.hideBillingAddressForm = function () {
            if (_this.billingAddressEditFormIndex != undefined) {
                var index = _this.billingAddressEditFormIndex;
                if (_this.billingAddressEditFormIndex == 'new') {
                    index = _this.account.accountAddresses.length - 1;
                }
                _this.selectBillingAddress(index);
            }
            _this.billingAddressEditFormIndex = undefined;
            _this.billingAddress = {};
        };
        this.editingDifferentAccountAddress = function (fulfillmentIndex) {
            for (var index = 0; index < _this.cart.orderFulfillments.length; index++) {
                if (index !== fulfillmentIndex && _this.accountAddressEditFormIndex[index] != undefined) {
                    return true;
                }
            }
        };
        this.showEditAccountAddressForm = function (fulfillmentIndex) {
            return _this.accountAddressEditFormIndex[fulfillmentIndex] != undefined && _this.accountAddressEditFormIndex[fulfillmentIndex] != 'new';
        };
        this.showNewAccountAddressForm = function (fulfillmentIndex) {
            return _this.accountAddressEditFormIndex[fulfillmentIndex] == 'new';
        };
        this.showNewBillingAddressForm = function () {
            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex == 'new';
        };
        this.showEditBillingAddressForm = function () {
            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex != undefined && _this.billingAddressEditFormIndex != 'new';
        };
        /** Adds errors from response to cart errors.*/
        this.addBillingErrorsToCartErrors = function () {
            var cartErrors = _this.cart.errors;
            if (cartErrors.addOrderPayment) {
                var deleteIndex = cartErrors.addOrderPayment.indexOf('billingAddress');
                if (deleteIndex > -1) {
                    cartErrors.addOrderPayment.splice(deleteIndex, 1);
                }
                if (cartErrors.addOrderPayment.length == 0) {
                    cartErrors.addOrderPayment = null;
                }
            }
            cartErrors.addBillingAddress = [];
            for (var key in _this.errors) {
                _this.cart.errors.addBillingAddress = _this.cart.errors.addBillingAddress.concat(_this.errors[key]);
            }
        };
        this.accountAddressIsSelectedShippingAddress = function (key, fulfillmentIndex) {
            if (_this.account &&
                _this.account.accountAddresses &&
                _this.cart.orderFulfillments[fulfillmentIndex].shippingAddress &&
                !_this.cart.orderFulfillments[fulfillmentIndex].shippingAddress.hasErrors) {
                return _this.addressesMatch(_this.account.accountAddresses[key].address, _this.cart.orderFulfillments[fulfillmentIndex].shippingAddress);
            }
            return false;
        };
        this.accountAddressIsSelectedBillingAddress = function (key) {
            if (_this.account &&
                _this.account.accountAddresses &&
                _this.orderPaymentObject &&
                _this.orderPaymentObject.newOrderPayment &&
                _this.orderPaymentObject.newOrderPayment.billingAddress) {
                return _this.account.accountAddresses[key].accountAddressID == _this.orderPaymentObject.newOrderPayment.billingAddress.accountAddressID;
            }
            return false;
        };
        /** Returns true if order requires email fulfillment and email address has been chosen.*/
        this.hasEmailFulfillmentAddress = function (fulfillmentIndex) {
            return Boolean(_this.cart.orderFulfillments[fulfillmentIndex].emailAddress);
        };
        this.getEligiblePaymentMethodsForPaymentMethodType = function (paymentMethodType) {
            return _this.cart.eligiblePaymentMethodDetails.filter(function (paymentMethod) {
                return paymentMethod.paymentMethod.paymentMethodType == paymentMethodType;
            });
        };
        this.getEligibleCreditCardPaymentMethods = function () {
            return _this.getEligiblePaymentMethodsForPaymentMethodType('creditCard');
        };
        this.getPickupLocation = function (fulfillmentIndex) {
            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])
                return;
            return _this.cart.data.orderFulfillments[fulfillmentIndex].pickupLocation;
        };
        this.getShippingAddress = function (fulfillmentIndex) {
            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])
                return;
            return _this.cart.data.orderFulfillments[fulfillmentIndex].data.shippingAddress;
        };
        this.getEmailFulfillmentAddress = function (fulfillmentIndex) {
            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])
                return;
            return _this.cart.data.orderFulfillments[fulfillmentIndex].emailAddress;
        };
        this.getPickupLocations = function () {
            var locations = [];
            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {
                if (_this.getFulfillmentType(fulfillment) == 'pickup' && fulfillment.pickupLocation && fulfillment.pickupLocation.locationID) {
                    fulfillment.pickupLocation.fulfillmentIndex = index;
                    locations.push(fulfillment.pickupLocation);
                }
            });
            return locations;
        };
        this.getShippingAddresses = function () {
            var addresses = [];
            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {
                if (_this.getFulfillmentType(fulfillment) == 'shipping' && fulfillment.data.shippingAddress && fulfillment.data.shippingAddress.addressID) {
                    fulfillment.data.shippingAddress.fulfillmentIndex = index;
                    addresses.push(fulfillment.data.shippingAddress);
                }
            });
            return addresses;
        };
        this.getEmailFulfillmentAddresses = function () {
            var addresses = [];
            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {
                if (_this.getFulfillmentType(fulfillment) == 'email' && fulfillment.emailAddress) {
                    fulfillment.fulfillmentIndex = index;
                    addresses.push(fulfillment);
                }
            });
            return addresses;
        };
        /** Returns true if any action in comma-delimited list exists in this.successfulActions */
        this.hasSuccessfulAction = function (actionList) {
            for (var _i = 0, _a = actionList.split(','); _i < _a.length; _i++) {
                var action = _a[_i];
                if (_this.successfulActions.indexOf(action) > -1) {
                    return true;
                }
            }
            return false;
        };
        /** Returns true if any action in comma-delimited list exists in this.failureActions */
        this.hasFailureAction = function (actionList) {
            for (var _i = 0, _a = actionList.split(','); _i < _a.length; _i++) {
                var action = _a[_i];
                if (_this.failureActions.indexOf(action) > -1) {
                    return true;
                }
            }
            return false;
        };
        this.shippingUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addShippingAddressUsingAccountAddress,addShippingAddress');
        };
        this.shippingMethodUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addShippingMethodUsingShippingMethodID');
        };
        this.updatedBillingAddress = function () {
            return _this.hasSuccessfulAction('updateAddress') && !_this.hasSuccessfulAction('addShippingAddress');
        };
        this.addedBillingAddress = function () {
            return _this.hasSuccessfulAction('addNewAccountAddress') && !_this.hasSuccessfulAction('addShippingAddressUsingAccountAddress');
        };
        this.addedShippingAddress = function () {
            return _this.hasSuccessfulAction('addNewAccountAddress') && _this.hasSuccessfulAction('addShippingAddressUsingAccountAddress');
        };
        this.emailFulfillmentUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addEmailFulfillmentAddress');
        };
        this.pickupLocationUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addEmailFulfillmentAddress');
        };
        /** Returns true if selected pickup location has no name.*/
        this.namelessPickupLocation = function (fulfillmentIndex) {
            if (!_this.getPickupLocation(fulfillmentIndex))
                return false;
            return _this.getPickupLocation(fulfillmentIndex).primaryAddress != undefined && _this.getPickupLocation(fulfillmentIndex).locationName == undefined;
        };
        /** Returns true if no pickup location has been selected.*/
        this.noPickupLocation = function (fulfillmentIndex) {
            if (!_this.getPickupLocation(fulfillmentIndex))
                return true;
            return _this.getPickupLocation(fulfillmentIndex).primaryAddress == undefined && _this.getPickupLocation(fulfillmentIndex).locationName == undefined;
        };
        this.disableContinueToPayment = function () {
            return _this.cart.orderRequirementsList.indexOf('fulfillment') != -1;
        };
        this.hasAccountPaymentMethods = function () {
            return _this.account && _this.account.accountPaymentMethods && _this.account.accountPaymentMethods.length;
        };
        this.showBillingAccountAddresses = function () {
            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex == undefined;
        };
        this.hasNoCardInfo = function () {
            return !_this.newCardInfo || !_this.newCardInfo.nameOnCreditCard || !_this.newCardInfo.cardNumber || !_this.newCardInfo.cvv;
        };
        this.isGiftCardPayment = function (payment) {
            return payment.giftCard && payment.giftCard.giftCardCode;
        };
        this.isPurchaseOrderPayment = function (payment) {
            return payment.purchaseOrderNumber;
        };
        //Not particularly robust, needs to be modified for each project
        this.isCheckOrMoneyOrderPayment = function (payment) {
            return payment.paymentMethod.paymentMethodName == "Check or Money Order";
        };
        this.orderHasNoPayments = function () {
            var activePayments = _this.cart.orderPayments.filter(function (payment) { return payment.amount != 0; });
            return !activePayments.length;
        };
        this.hasProductNameAndNoSkuName = function (orderItem) {
            return !orderItem.sku.skuName && orderItem.sku.product && orderItem.sku.product.productName;
        };
        this.cartHasNoItems = function () {
            return !_this.getRequestByAction('getCart').loading && _this.hasAccount() && _this.cart && _this.cart.orderItems && !_this.cart.orderItems.length && !_this.loading && !_this.orderPlaced;
        };
        this.hasAccountAndCartItems = function () {
            return _this.hasAccount() && !_this.cartHasNoItems();
        };
        this.hideStoreSelector = function (fulfillmentIndex) {
            _this.showStoreSelector[fulfillmentIndex] = false;
        };
        this.hideEmailSelector = function (fulfillmentIndex) {
            _this.showEmailSelector[fulfillmentIndex] = false;
        };
        this.incrementItemQuantity = function (orderItem, amount) {
            if (amount === void 0) { amount = 1; }
            orderItem.quantity += amount;
            if (orderItem.quantity < 0) {
                orderItem.quantity = 0;
            }
            _this.updateOrderItemQuantity(orderItem);
        };
        this.updateOrderItemQuantity = function (event) {
            event.swForm.submit();
        };
        this.getOrderAttributeValues = function (allowedAttributeSets) {
            var attributeValues = {};
            var orderAttributeModel = JSON.parse(localStorage.attributeMetaData)["Order"];
            for (var attributeSetCode in orderAttributeModel) {
                var attributeSet = orderAttributeModel[attributeSetCode];
                if (allowedAttributeSets.indexOf(attributeSetCode) !== -1) {
                    for (var attributeCode in attributeSet.attributes) {
                        var attribute = attributeSet.attributes[attributeCode];
                        attributeValues[attribute.attributeCode] = {
                            attributeCode: attribute.attributeCode,
                            attributeName: attribute.attributeName,
                            attributeValue: _this.cart[attribute.attributeCode],
                            inputType: attribute.attributeInputType,
                            requiredFlag: attribute.requiredFlag
                        };
                    }
                }
            }
            return attributeValues;
        };
        this.binder = function (self, fn) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            return fn.bind.apply(fn, [self].concat(args));
        };
        /*********************************************************************************/
        /*******************                                    **************************/
        /*******************         DEPRECATED METHODS         **************************/
        /*******************                                    **************************/
        /*********************************************************************************/
        /** DEPRECATED
        */
        this.getSelectedShippingIndex = function (index, value) {
            for (var i = 0; i <= this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions.length; i++) {
                if (this.cart.fulfillmentTotal == this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions[i].totalCharge) {
                    return i;
                }
            }
        };
        /** simple validation just to ensure data is present and accounted for.
        */
        this.validateNewOrderPayment = function (newOrderPayment) {
            var newOrderPaymentErrors = {};
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.streetAddress')) {
                newOrderPaymentErrors['streetAddress'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.countrycode')) {
                newOrderPaymentErrors['countrycode'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.statecode')) {
                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.locality')) {
                    newOrderPaymentErrors['statecode'] = 'Required *';
                }
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.city')) {
                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.city')) {
                    newOrderPaymentErrors['city'] = 'Required *';
                }
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.locality')) {
                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.statecode')) {
                    newOrderPaymentErrors['locality'] = 'Required *';
                }
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.postalcode')) {
                newOrderPaymentErrors['postalCode'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.nameOnCreditCard')) {
                newOrderPaymentErrors['nameOnCreditCard'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.expirationMonth')) {
                newOrderPaymentErrors['streetAddress'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.expirationYear')) {
                newOrderPaymentErrors['expirationYear'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.creditCardNumber')) {
                newOrderPaymentErrors['creditCardNumber'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.securityCode')) {
                newOrderPaymentErrors['securityCode'] = 'Required *';
            }
            if (Object.keys(newOrderPaymentErrors).length) {
                //this.cart.orderPayments.hasErrors = true;
                //this.cart.orderPayments.errors = newOrderPaymentErrors;
            }
        };
        /** Allows an easy way to calling the service addOrderPayment.
        */
        this.addOrderPayment = function (formdata) {
            //reset the form errors.
            //Grab all the data
            var billingAddress = _this.newBillingAddress;
            var expirationMonth = formdata.month;
            var expirationYear = formdata.year;
            var country = formdata.country;
            var state = formdata.state;
            var accountFirst = _this.account.firstName;
            var accountLast = _this.account.lastName;
            var data = {};
            var processObject = _this.orderService.newOrder_AddOrderPayment();
            data = {
                'newOrderPayment.billingAddress.addressID': '',
                'newOrderPayment.billingAddress.streetAddress': billingAddress.streetAddress,
                'newOrderPayment.billingAddress.street2Address': billingAddress.street2Address,
                'newOrderPayment.nameOnCreditCard': billingAddress.nameOnCreditCard,
                'newOrderPayment.billingAddress.name': billingAddress.nameOnCreditCard,
                'newOrderPayment.expirationMonth': expirationMonth,
                'newOrderPayment.expirationYear': expirationYear,
                'newOrderPayment.billingAddress.countrycode': country || billingAddress.countrycode,
                'newOrderPayment.billingAddress.city': '' + billingAddress.city,
                'newOrderPayment.billingAddress.statecode': state || billingAddress.statecode,
                'newOrderPayment.billingAddress.locality': billingAddress.locality || '',
                'newOrderPayment.billingAddress.postalcode': billingAddress.postalcode,
                'newOrderPayment.securityCode': billingAddress.cvv,
                'newOrderPayment.creditCardNumber': billingAddress.cardNumber,
                'newOrderPayment.saveShippingAsBilling': (_this.saveShippingAsBilling == true),
            };
            //processObject.populate(data);
            //Make sure we have required fields for a newOrderPayment.
            _this.validateNewOrderPayment(data);
            if (_this.cart.orderPayments.hasErrors && Object.keys(_this.cart.orderPayments.errors).length) {
                return -1;
            }
            //Post the new order payment and set errors as needed.
            _this.doAction('addOrderPayment', data, 'post').then(function (result) {
                var serverData = result;
                if (serverData.cart.hasErrors || angular.isDefined(_this.cart.orderPayments[_this.cart.orderPayments.length - 1]['errors']) && !_this.cart.orderPayments[_this.cart.orderPayments.length - 1]['errors'].hasErrors) {
                    _this.cart.hasErrors = true;
                    _this.readyToPlaceOrder = true;
                    _this.edit = '';
                }
                else {
                    _this.editPayment = false;
                    _this.readyToPlaceOrder = true;
                    _this.edit = '';
                }
            });
        };
        /** Allows an easy way to calling the service addOrderPayment.
        */
        this.addGiftCardOrderPayments = function (redeemGiftCardToAccount) {
            //reset the form errors.
            _this.cart.hasErrors = false;
            _this.cart.orderPayments.errors = {};
            _this.cart.orderPayments.hasErrors = false;
            //Grab all the data
            var giftCards = _this.account.giftCards;
            var data = {};
            data = {
                'newOrderPayment.paymentMethod.paymentMethodID': '50d8cd61009931554764385482347f3a',
                'newOrderPayment.redeemGiftCardToAccount': redeemGiftCardToAccount,
            };
            //add the amounts from the gift cards
            for (var card in giftCards) {
                if (giftCards[card].applied == true) {
                    data['newOrderPayment.giftCardNumber'] = giftCards[card].giftCardCode;
                    if (giftCards[card].calculatedTotal < _this.cart.calculatedTotal) {
                        data['newOrderPayment.amount'] = giftCards[card].calculatedBalanceAmount; //will use once we have amount implemented.
                    }
                    else {
                        data['newOrderPayment.amount'] = _this.cart.calculatedTotal; //this is so it doesn't throw the 100% error
                    }
                    data['copyFromType'] = "";
                    //Post the new order payment and set errors as needed.
                    _this.$q.all([_this.doAction('addOrderPayment', data, 'post')]).then(function (result) {
                        var serverData;
                        if (angular.isDefined(result['0'])) {
                            serverData = result['0'].data;
                        }
                        if (serverData.cart.hasErrors || angular.isDefined(this.cart.orderPayments[this.cart.orderPayments.length - 1]['errors']) && !this.cart.orderPayments['' + (this.cart.orderPayments.length - 1)]['errors'].hasErrors) {
                            this.cart.hasErrors = true;
                            this.readyToPlaceOrder = true;
                            this.edit = '';
                        }
                        else {
                        }
                    });
                }
            }
        };
        /** Allows an easy way to calling the service addOrderPayment.
        */
        this.addOrderPaymentAndPlaceOrder = function (formdata) {
            //reset the form errors.
            _this.orderPlaced = false;
            //Grab all the data
            var billingAddress = _this.newBillingAddress;
            var expirationMonth = formdata.month;
            var expirationYear = formdata.year;
            var country = formdata.country;
            var state = formdata.state;
            var accountFirst = _this.account.firstName;
            var accountLast = _this.account.lastName;
            var data = {};
            data = {
                'orderid': _this.cart.orderID,
                'newOrderPayment.billingAddress.streetAddress': billingAddress.streetAddress,
                'newOrderPayment.billingAddress.street2Address': billingAddress.street2Address,
                'newOrderPayment.nameOnCreditCard': billingAddress.nameOnCard || accountFirst + ' ' + accountLast,
                'newOrderPayment.expirationMonth': expirationMonth,
                'newOrderPayment.expirationYear': expirationYear,
                'newOrderPayment.billingAddress.countrycode': country || billingAddress.countrycode,
                'newOrderPayment.billingAddress.city': '' + billingAddress.city,
                'newOrderPayment.billingAddress.statecode': state || billingAddress.statecode,
                'newOrderPayment.billingAddress.locality': billingAddress.locality || '',
                'newOrderPayment.billingAddress.postalcode': billingAddress.postalcode,
                'newOrderPayment.securityCode': billingAddress.cvv,
                'newOrderPayment.creditCardNumber': billingAddress.cardNumber,
                'newOrderPayment.saveShippingAsBilling': (_this.saveShippingAsBilling == true),
            };
            //Make sure we have required fields for a newOrderPayment.
            //this.validateNewOrderPayment( data );
            if (_this.cart.orderPayments.hasErrors && Object.keys(_this.cart.orderPayments.errors).length) {
                return -1;
            }
            //Post the new order payment and set errors as needed.
            _this.$q.all([_this.doAction('addOrderPayment,placeOrder', data, 'post')]).then(function (result) {
                var serverData;
                if (angular.isDefined(result['0'])) {
                    serverData = result['0'].data;
                }
                else {
                } //|| angular.isDefined(serverData.cart.orderPayments[serverData.cart.orderPayments.length-1]['errors']) && slatwall.cart.orderPayments[''+slatwall.cart.orderPayments.length-1]['errors'].hasErrors
                if (serverData.cart.hasErrors || (angular.isDefined(serverData.failureActions) && serverData.failureActions.length && serverData.failureActions[0] == "public:cart.addOrderPayment")) {
                    if (serverData.failureActions.length) {
                        for (var action in serverData.failureActions) {
                            //
                        }
                    }
                    this.edit = '';
                    return true;
                }
                else if (serverData.successfulActions.length) {
                    //
                    this.cart.hasErrors = false;
                    this.editPayment = false;
                    this.edit = '';
                    for (var action in serverData.successfulActions) {
                        //
                        if (serverData.successfulActions[action].indexOf("placeOrder") != -1) {
                            //if there are no errors then redirect.
                            this.orderPlaced = true;
                            this.redirectExact('/order-confirmation/');
                        }
                    }
                }
                else {
                    this.edit = '';
                }
            });
        };
        //Applies a giftcard from the user account onto the payment.
        this.applyGiftCard = function (giftCardCode) {
            _this.finding = true;
            //find the code already on the account.
            var found = false;
            for (var giftCard in _this.account.giftCards) {
                if (_this.account.giftCards[giftCard].balanceAmount == 0) {
                    _this.account.giftCards[giftCard]['error'] = "The balance is $0.00 for this card.";
                    found = false;
                }
                if (_this.account.giftCards[giftCard].giftCardCode == giftCardCode) {
                    _this.account.giftCards[giftCard].applied = true;
                    found = true;
                }
            }
            if (found) {
                _this.finding = false;
                _this.addGiftCardOrderPayments(false);
            }
            else {
                _this.finding = false;
                _this.addGiftCardOrderPayments(true);
            }
        };
        //returns the amount total of giftcards added to this account.
        this.getAppliedGiftCardTotals = function () {
            //
            var total = 0;
            for (var payment in _this.cart.orderPayments) {
                if (_this.cart.orderPayments[payment].giftCardNumber != "") {
                    total = total + parseInt(_this.cart.orderPayments[payment]['amount']);
                }
            }
            return total;
        };
        this.orderService = orderService;
        this.cartService = cartService;
        this.accountService = accountService;
        this.requestService = requestService;
        this.appConfig = appConfig;
        this.baseActionPath = this.appConfig.baseURL + "/index.cfm/api/scope/"; //default path
        this.confirmationUrl = "/order-confirmation";
        this.checkoutUrl = "/checkout";
        this.$http = $http;
        this.$location = $location;
        this.$q = $q;
        this.$injector = $injector;
        this.getExpirationYears();
        this.$window = $window;
        this.$hibachi = $hibachi;
        this.cart = this.cartService.newCart();
        this.account = this.accountService.newAccount();
        this.observerService = observerService;
        this.$timeout = $timeout;
    }
    PublicService.prototype.getOrderFulfillmentItemList = function (fulfillmentIndex) {
        return this.cart.orderFulfillments[fulfillmentIndex].orderFulfillmentItems.map(function (item) { return item.sku.skuName ? item.sku.skuName : item.sku.product.productName; }).join(', ');
    };
    //Use with bind, assigning 'this' as the temporary order item
    //a.k.a. slatwall.bind(tempOrderItem,slatwall.copyOrderItem,originalOrderItem);
    //gets you tempOrderItem.orderItem == originalOrderItem;
    PublicService.prototype.copyOrderItem = function (orderItem) {
        this.orderItem = { orderItemID: orderItem.orderItemID,
            quantity: orderItem.quantity };
        return this;
    };
    return PublicService;
}());
exports.PublicService = PublicService;


/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var RbKeyService = /** @class */ (function () {
    //@ngInject
    function RbKeyService($http, $q, appConfig, resourceBundles) {
        var _this = this;
        this.$http = $http;
        this.$q = $q;
        this.appConfig = appConfig;
        this.resourceBundles = resourceBundles;
        this._resourceBundle = {};
        this._resourceBundleLastModified = '';
        this._loadingResourceBundle = false;
        this._loadedResourceBundle = false;
        this.getRBLoaded = function () {
            return _this._loadedResourceBundle;
        };
        this.rbKey = function (key, replaceStringData) {
            ////$log.debug('rbkey');
            ////$log.debug(key);
            ////$log.debug(this.getConfig().rbLocale);
            var keyValue = _this.getRBKey(key, _this.appConfig.rbLocale);
            ////$log.debug(keyValue);
            return keyValue;
        };
        this.getRBKey = function (key, locale, checkedKeys, originalKey) {
            ////$log.debug('getRBKey');
            ////$log.debug('loading:'+this._loadingResourceBundle);
            ////$log.debug('loaded'+this._loadedResourceBundle);
            if (_this.resourceBundles) {
                key = key.toLowerCase();
                checkedKeys = checkedKeys || "";
                locale = locale || 'en_us';
                ////$log.debug('locale');
                ////$log.debug(locale);
                var keyListArray = key.split(',');
                ////$log.debug('keylistAray');
                ////$log.debug(keyListArray);
                if (keyListArray.length > 1) {
                    var keyValue = "";
                    for (var i = 0; i < keyListArray.length; i++) {
                        keyValue = _this.getRBKey(keyListArray[i], locale, keyValue);
                        //$log.debug('keyvalue:'+keyValue);
                        if (keyValue.slice(-8) != "_missing") {
                            break;
                        }
                    }
                    return keyValue;
                }
                var bundle = _this.resourceBundles[locale];
                if (angular.isDefined(bundle[key])) {
                    //$log.debug('rbkeyfound:'+bundle[key]);
                    return bundle[key];
                }
                var checkedKeysListArray = checkedKeys.split(',');
                checkedKeysListArray.push(key + '_' + locale + '_missing');
                checkedKeys = checkedKeysListArray.join(",");
                if (angular.isUndefined(originalKey)) {
                    originalKey = key;
                }
                //$log.debug('originalKey:'+key);
                //$log.debug(checkedKeysListArray);
                var localeListArray = locale.split('_');
                //$log.debug(localeListArray);
                if (localeListArray.length === 2) {
                    bundle = _this.resourceBundles[localeListArray[0]];
                    if (angular.isDefined(bundle[key])) {
                        //$log.debug('rbkey found:'+bundle[key]);
                        return bundle[key];
                    }
                    checkedKeysListArray.push(key + '_' + localeListArray[0] + '_missing');
                    checkedKeys = checkedKeysListArray.join(",");
                }
                var keyDotListArray = key.split('.');
                if (keyDotListArray.length >= 3
                    && keyDotListArray[keyDotListArray.length - 2] === 'define') {
                    var newKey = key.replace(keyDotListArray[keyDotListArray.length - 3] + '.define', 'define');
                    //$log.debug('newkey1:'+newKey);
                    return _this.getRBKey(newKey, locale, checkedKeys, originalKey);
                }
                else if (keyDotListArray.length >= 2 && keyDotListArray[keyDotListArray.length - 2] !== 'define') {
                    var newKey = key.replace(keyDotListArray[keyDotListArray.length - 2] + '.', 'define.');
                    //$log.debug('newkey:'+newKey);
                    return _this.getRBKey(newKey, locale, checkedKeys, originalKey);
                }
                //$log.debug(localeListArray);
                if (localeListArray[0] !== "en") {
                    return _this.getRBKey(originalKey, 'en', checkedKeys);
                }
                return checkedKeys;
            }
            return '';
        };
        this.$q = $q;
        this.$http = $http;
        this.appConfig = appConfig;
        this.resourceBundles = resourceBundles;
    }
    return RbKeyService;
}());
exports.RbKeyService = RbKeyService;


/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var adminrequest_1 = __webpack_require__(636);
var publicrequest_1 = __webpack_require__(637);
var RequestService = /** @class */ (function () {
    //@ngInject
    function RequestService($injector, observerService) {
        var _this = this;
        this.$injector = $injector;
        this.observerService = observerService;
        this.newAdminRequest = function (url, data, method, headers, $injector, observerService) {
            if (method === void 0) { method = "post"; }
            if (headers === void 0) { headers = { 'Content-Type': "application/json" }; }
            if ($injector === void 0) { $injector = _this.$injector; }
            if (observerService === void 0) { observerService = _this.observerService; }
            return new adminrequest_1.AdminRequest(url, data, method, headers, $injector, observerService);
        };
        this.newPublicRequest = function (url, data, method, headers, $injector, observerService) {
            if (method === void 0) { method = "post"; }
            if (headers === void 0) { headers = { 'Content-Type': "application/x-www-form-urlencoded" }; }
            if ($injector === void 0) { $injector = _this.$injector; }
            if (observerService === void 0) { observerService = _this.observerService; }
            return new publicrequest_1.PublicRequest(url, data, method, headers, $injector, observerService);
        };
        this.$injector = $injector;
        this.observerService = observerService;
    }
    return RequestService;
}());
exports.RequestService = RequestService;


/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ScopeService = /** @class */ (function () {
    //ngInject
    function ScopeService() {
        var _this = this;
        this.getRootParentScope = function (scope, targetScopeName) {
            var currentScope = scope;
            while (currentScope != null && angular.isUndefined(currentScope[targetScopeName])) {
                if (angular.isDefined(currentScope.$parent)) {
                    currentScope = currentScope.$parent;
                }
                else {
                    break;
                }
            }
            if (currentScope != null && angular.isDefined(currentScope[targetScopeName])) {
                return currentScope;
            }
        };
        this.hasParentScope = function (scope, targetScopeName) {
            if (_this.getRootParentScope(scope, targetScopeName) != null) {
                return true;
            }
            return false;
        };
    }
    return ScopeService;
}());
exports.ScopeService = ScopeService;


/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseservice_1 = __webpack_require__(62);
var SelectionService = /** @class */ (function (_super) {
    __extends(SelectionService, _super);
    //@ngInject
    function SelectionService(observerService) {
        var _this = _super.call(this) || this;
        _this.observerService = observerService;
        _this._selection = {};
        /* add current selectionid to main selection object*/
        _this.createSelections = function (selectionid) {
            _this._selection[selectionid] = {
                allSelected: false,
                ids: []
            };
        };
        _this.radioSelection = function (selectionid, selection) {
            _this.createSelections(selectionid);
            _this._selection[selectionid].ids.push(selection);
            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
        };
        _this.addSelection = function (selectionid, selection) {
            /*if allSelected flag is true addSelection will remove selection*/
            if (_this.isAllSelected(selectionid)) {
                var index = _this._selection[selectionid].ids.indexOf(selection);
                if (index > -1) {
                    _this._selection[selectionid].ids.splice(index, 1);
                    _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
                }
            }
            else if (!_this.hasSelection(selectionid, selection)) {
                _this._selection[selectionid].ids.push(selection);
                _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
            }
            console.info(_this._selection[selectionid]);
        };
        _this.setSelection = function (selectionid, selections) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                _this.createSelections(selectionid);
            }
            _this._selection[selectionid].ids = selections;
        };
        _this.removeSelection = function (selectionid, selection) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                return;
            }
            if (!_this.isAllSelected(selectionid)) {
                var index = _this._selection[selectionid].ids.indexOf(selection);
                if (index > -1) {
                    _this._selection[selectionid].ids.splice(index, 1);
                    _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'uncheck', selectionid: selectionid, selection: selection });
                }
                /*if allSelected flag is true removeSelection will add selection*/
            }
            else if (!_this.hasSelection(selectionid, selection)) {
                _this._selection[selectionid].ids.push(selection);
                _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'uncheck', selectionid: selectionid, selection: selection });
            }
            console.info(_this._selection[selectionid]);
        };
        _this.hasSelection = function (selectionid, selection) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                return false;
            }
            return _this._selection[selectionid].ids.indexOf(selection) > -1;
        };
        _this.getSelections = function (selectionid) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                _this.createSelections(selectionid);
            }
            return _this._selection[selectionid].ids;
        };
        _this.getSelectionCount = function (selectionid) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                _this.createSelections(selectionid);
            }
            return _this._selection[selectionid].ids.length;
        };
        _this.clearSelection = function (selectionid) {
            _this.createSelections(selectionid);
            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'clear' });
            console.info(_this._selection[selectionid]);
        };
        _this.selectAll = function (selectionid) {
            _this._selection[selectionid] = {
                allSelected: true,
                ids: []
            };
            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'selectAll' });
            console.info(_this._selection[selectionid]);
        };
        _this.isAllSelected = function (selectionid) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                _this.createSelections(selectionid);
            }
            return _this._selection[selectionid].allSelected;
        };
        return _this;
    }
    return SelectionService;
}(baseservice_1.BaseService));
exports.SelectionService = SelectionService;


/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(15);
var SkuService = /** @class */ (function (_super) {
    __extends(SkuService, _super);
    //@ngInject
    function SkuService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Sku') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return SkuService;
}(baseentityservice_1.BaseEntityService));
exports.SkuService = SkuService;


/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../../../../../node_modules/typescript/lib/lib.es6.d.ts" />
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var TypeaheadStore = __webpack_require__(61);
var TypeaheadService = /** @class */ (function () {
    //@ngInject
    function TypeaheadService($timeout, observerService) {
        var _this = this;
        this.$timeout = $timeout;
        this.observerService = observerService;
        this.typeaheadData = {};
        this.typeaheadPromises = {};
        //The state of the store
        this.typeaheadStates = {};
        this.state = {
            typeaheadInstances: this.typeaheadStates
        };
        /**
         * The reducer is responsible for modifying the state of the state object into a new state.
         */
        this.typeaheadStateReducer = function (state, action) {
            switch (action.type) {
                case 'TYPEAHEAD_QUERY':
                    //modify the state.
                    return __assign({}, state, { action: action });
                case 'TYPEAHEAD_USER_SELECTION':
                    //passthrough - no state change. anyone subscribed can handle this.
                    return __assign({}, state, { action: action });
                default:
                    return state;
            }
        };
        this.getTypeaheadSelectionUpdateEvent = function (key) {
            return "typeaheadSelectionUpdated" + key;
        };
        this.attachTypeaheadSelectionUpdateEvent = function (key, callback) {
            _this.observerService.attach(callback, _this.getTypeaheadSelectionUpdateEvent(key));
        };
        this.notifyTypeaheadSelectionUpdateEvent = function (key, data) {
            _this.observerService.notify(_this.getTypeaheadSelectionUpdateEvent(key), data);
        };
        this.setTypeaheadState = function (key, state) {
            _this.typeaheadStates[key] = state;
        };
        this.getTypeaheadState = function (key) {
            return _this.typeaheadStates[key];
        };
        this.getTypeaheadPrimaryIDPropertyName = function (key) {
            return _this.getTypeaheadState(key).primaryIDPropertyName;
        };
        this.getIndexOfSelection = function (key, data) {
            for (var j = 0; j < _this.getData(key).length; j++) {
                if (angular.isDefined(data[_this.getTypeaheadPrimaryIDPropertyName(key)]) &&
                    data[_this.getTypeaheadPrimaryIDPropertyName(key)] == _this.getData(key)[j][_this.getTypeaheadPrimaryIDPropertyName(key)]) {
                    return j;
                }
                else if (_this.checkAgainstFallbackProperties(key, _this.getData(key)[j], data)) {
                    return j;
                }
            }
            return -1;
        };
        this.addSelection = function (key, data) {
            if (angular.isUndefined(_this.typeaheadData[key])) {
                _this.typeaheadData[key] = [];
            }
            _this.typeaheadData[key].push(data);
            _this.notifyTypeaheadSelectionUpdateEvent(key, data);
        };
        this.removeSelection = function (key, index, data) {
            if (angular.isUndefined(index) &&
                angular.isDefined(data)) {
                index = _this.getIndexOfSelection(key, data);
            }
            if (angular.isDefined(index) &&
                angular.isDefined(_this.typeaheadData[key]) &&
                index != -1) {
                _this.updateSelections(key);
                var removedItem = _this.typeaheadData[key].splice(index, 1)[0]; //this will always be an array of 1 element
                _this.notifyTypeaheadSelectionUpdateEvent(key, removedItem);
                return removedItem;
            }
        };
        this.initializeSelections = function (key, selectedCollectionConfig) {
            selectedCollectionConfig.setAllRecords(true);
            _this.typeaheadPromises[key] = selectedCollectionConfig.getEntity();
            _this.typeaheadPromises[key].then(function (data) {
                for (var j = 0; j < data.records.length; j++) {
                    _this.addSelection(key, data.records[j]);
                }
            }, function (reason) {
                throw ("typeaheadservice had trouble intializing selections for " + key + " because " + reason);
            });
        };
        this.updateSelections = function (key) {
            if (angular.isDefined(_this.getData(key)) && _this.getData(key).length) {
                for (var j = 0; j < _this.getTypeaheadState(key).results.length; j++) {
                    for (var i = 0; i < _this.getData(key).length; i++) {
                        if (_this.getData(key)[i][_this.getTypeaheadPrimaryIDPropertyName(key)] == _this.getTypeaheadState(key).results[j][_this.getTypeaheadPrimaryIDPropertyName(key)]) {
                            _this.markResultSelected(_this.getTypeaheadState(key).results[j], i);
                            break;
                        }
                        var found = _this.checkAgainstFallbackProperties(key, _this.getData(key)[i], _this.getTypeaheadState(key).results[j], i);
                        if (found) {
                            break;
                        }
                    }
                }
            }
        };
        this.markResultSelected = function (result, index) {
            result.selected = true;
            result.selectedIndex = index;
        };
        this.checkAgainstFallbackProperties = function (key, selection, result, selectionIndex) {
            var resultPrimaryID = result[_this.getTypeaheadPrimaryIDPropertyName(key)];
            //is there a singular property to compare against
            if (angular.isDefined(_this.getTypeaheadState(key).propertyToCompare) &&
                _this.getTypeaheadState(key).propertyToCompare.length) {
                if (angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare]) &&
                    selection[_this.getTypeaheadState(key).propertyToCompare] == resultPrimaryID) {
                    if (angular.isDefined(selectionIndex)) {
                        _this.markResultSelected(result, selectionIndex);
                    }
                    return true;
                }
                if (angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare]) &&
                    angular.isDefined(result[_this.getTypeaheadState(key).propertyToCompare]) &&
                    selection[_this.getTypeaheadState(key).propertyToCompare] == result[_this.getTypeaheadState(key).propertyToCompare]) {
                    if (angular.isDefined(selectionIndex)) {
                        _this.markResultSelected(result, selectionIndex);
                    }
                    return true;
                }
            }
            //check the defined fallback properties to see if theres a match
            if (_this.getTypeaheadState(key).fallbackPropertyArray.length > 0) {
                for (var j = 0; j < _this.getTypeaheadState(key).fallbackPropertyArray.length; j++) {
                    var property = _this.getTypeaheadState(key).fallbackPropertyArray[j];
                    if (angular.isDefined(selection[property])) {
                        if (selection[property] == resultPrimaryID) {
                            if (angular.isDefined(selectionIndex)) {
                                _this.markResultSelected(result, selectionIndex);
                            }
                            return true;
                        }
                        if (angular.isDefined(result[property]) &&
                            selection[property] == result[property]) {
                            if (angular.isDefined(selectionIndex)) {
                                _this.markResultSelected(result, selectionIndex);
                            }
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        this.updateSelectionList = function (key) {
            var selectionIDArray = [];
            if (angular.isDefined(_this.getData(key))) {
                for (var j = 0; j < _this.getData(key).length; j++) {
                    var selection = _this.getData(key)[j];
                    var primaryID = selection[_this.getTypeaheadPrimaryIDPropertyName(key)];
                    if (angular.isDefined(primaryID)) {
                        selectionIDArray.push(primaryID);
                    }
                    else if (angular.isDefined(_this.getTypeaheadState(key).propertyToCompare) &&
                        angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare])) {
                        selectionIDArray.push(selection[_this.getTypeaheadState(key).propertyToCompare]);
                    }
                    else if (angular.isDefined(_this.getTypeaheadState(key).fallbackPropertyArray)) {
                        var fallbackPropertyArray = _this.getTypeaheadState(key).fallbackPropertyArray;
                        for (var i = 0; i < fallbackPropertyArray.length; i++) {
                            var fallbackProperty = fallbackPropertyArray[i];
                            if (angular.isDefined(selection[fallbackProperty])) {
                                selectionIDArray.push(selection[fallbackProperty]);
                                break;
                            }
                        }
                    }
                }
            }
            return selectionIDArray.join(",");
        };
        this.getData = function (key) {
            if (key in _this.typeaheadPromises) {
                //wait until it's been intialized
                _this.typeaheadPromises[key].then().finally(function () {
                    return _this.typeaheadData[key] || [];
                });
                delete _this.typeaheadPromises[key];
            }
            else {
                return _this.typeaheadData[key] || [];
            }
        };
        //strips out dangerous directives that cause infinite compile errors 
        // - this probably belongs in a different service but is used for typeahead only at the moment
        this.stripTranscludedContent = function (transcludedContent) {
            for (var i = 0; i < transcludedContent.length; i++) {
                if (angular.isDefined(transcludedContent[i].localName) &&
                    transcludedContent[i].localName == 'ng-transclude') {
                    transcludedContent = transcludedContent.children();
                }
            }
            //prevent collection config from being recompiled
            for (var i = 0; i < transcludedContent.length; i++) {
                if (angular.isDefined(transcludedContent[i].localName) &&
                    transcludedContent[i].localName == 'sw-collection-config') {
                    transcludedContent.splice(i, 1);
                }
            }
            return transcludedContent;
        };
        this.typeaheadStore = new TypeaheadStore.IStore(this.state, this.typeaheadStateReducer); //.combineLatest(this.loggerEpic)
    }
    return TypeaheadService;
}());
exports.TypeaheadService = TypeaheadService;


/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var baseservice_1 = __webpack_require__(62);
var UtilityService = /** @class */ (function (_super) {
    __extends(UtilityService, _super);
    //@ngInject
    function UtilityService($parse) {
        var _this = _super.call(this) || this;
        _this.$parse = $parse;
        _this.structKeyExists = function (struct, key) {
            return key in struct;
        };
        _this.keyToAttributeString = function (key) {
            var attributeString = "data-";
            for (var i = 0; i < key.length; i++) {
                if (key.charAt(i) == "_") {
                    attributeString += "-";
                }
                else if (_this.isUpperCase(key.charAt(i))) {
                    //special case for ID and Acronyms because it doesn't follow naming conventions
                    if (i + 1 <= key.length && _this.isUpperCase(key.charAt(i + 1))) {
                        if (key.charAt(i) + key.charAt(i + 1) == "ID") {
                            attributeString += "-id";
                            i++; //skip ahead
                        }
                        else if (_this.isUpperCase(key.charAt(i + 1))) {
                            attributeString += "-";
                            //this handles acronyms IE QATS 
                            while (i + 1 <= key.length && _this.isUpperCase(key.charAt(i + 1))) {
                                attributeString += key.charAt(i).toLowerCase();
                                i++;
                            }
                        }
                    }
                    else {
                        attributeString += "-" + key.charAt(i).toLowerCase();
                    }
                }
                else {
                    attributeString += key.charAt(i);
                }
            }
            return attributeString;
        };
        _this.isUpperCase = function (character) {
            return character == character.toUpperCase();
        };
        _this.isLowerCase = function (character) {
            return character == character.toLowerCase();
        };
        _this.snakeToCapitalCase = function (s) {
            return s.charAt(0).toUpperCase() + s.replace(/(\-\w)/g, function (m) { return m[1].toUpperCase(); }).slice(1);
        };
        _this.camelCaseToSnakeCase = function (s) {
            return s.replace(/([A-Z])/g, function ($1) { return "-" + $1.toLowerCase(); });
        };
        _this.replaceStringWithProperties = function (stringItem, context) {
            var properties = _this.getPropertiesFromString(stringItem);
            if (!properties)
                return;
            var data = [];
            angular.forEach(properties, function (property) {
                if (property.indexOf('.') != -1) {
                    property = property.replace('.', '_');
                }
                var parseFunction = _this.$parse(property);
                data.push(parseFunction(context));
            });
            return _this.replacePropertiesWithData(stringItem, data);
        };
        //used to do inheritance at runtime
        _this.extend = function (ChildClass, ParentClass) {
            ChildClass.prototype = new ParentClass();
            ChildClass.prototype.constructor = ChildClass;
        };
        _this.getQueryParamsFromUrl = function (url) {
            // This function is anonymous, is executed immediately and
            // the return value is assigned to QueryString!
            var query_string = {};
            if (url && url.split) {
                var spliturl = url.split('?');
                if (spliturl.length) {
                    url = spliturl[1];
                    if (url && url.split) {
                        var vars = url.split("&");
                        if (vars && vars.length) {
                            for (var i = 0; i < vars.length; i++) {
                                var pair = vars[i].split("=");
                                // If first entry with this name
                                if (typeof query_string[pair[0]] === "undefined") {
                                    query_string[pair[0]] = pair[1];
                                    // If second entry with this name
                                }
                                else if (typeof query_string[pair[0]] === "string") {
                                    var arr = [query_string[pair[0]], pair[1]];
                                    query_string[pair[0]] = arr;
                                    // If third or later entry with this name
                                }
                                else {
                                    query_string[pair[0]].push(pair[1]);
                                }
                            }
                        }
                    }
                }
            }
            return query_string;
        };
        _this.isAngularRoute = function () {
            return /[\?&]ng#!/.test(window.location.href);
        };
        _this.ArrayFindByPropertyValue = function (arr, property, value) {
            var currentIndex = -1;
            arr.forEach(function (arrItem, index) {
                if (arrItem[property] && arrItem[property] === value) {
                    currentIndex = index;
                }
            });
            return currentIndex;
        };
        _this.listLast = function (list, delimiter) {
            if (list === void 0) { list = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var listArray = list.split(delimiter);
            return listArray[listArray.length - 1];
        };
        _this.listRest = function (list, delimiter) {
            if (list === void 0) { list = ''; }
            if (delimiter === void 0) { delimiter = ","; }
            var listArray = list.split(delimiter);
            if (listArray.length) {
                listArray.splice(0, 1);
            }
            return listArray.join(delimiter);
        };
        _this.listFirst = function (list, delimiter) {
            if (list === void 0) { list = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var listArray = list.split(delimiter);
            return listArray[0];
        };
        _this.listPrepend = function (list, substring, delimiter) {
            if (list === void 0) { list = ''; }
            if (substring === void 0) { substring = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var listArray = list.split(delimiter);
            if (listArray.length) {
                return substring + delimiter + list;
            }
            else {
                return substring;
            }
        };
        _this.listAppend = function (list, substring, delimiter) {
            if (list === void 0) { list = ''; }
            if (substring === void 0) { substring = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var listArray = list.split(delimiter);
            if (list.trim() != '' && listArray.length) {
                return list + delimiter + substring;
            }
            else {
                return substring;
            }
        };
        _this.listAppendUnique = function (list, substring, delimiter) {
            if (list === void 0) { list = ''; }
            if (substring === void 0) { substring = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var listArray = list.split(delimiter);
            if (list.trim() != '' && listArray.length && listArray.indexOf(substring) == -1) {
                return list + delimiter + substring;
            }
            else {
                return substring;
            }
        };
        /**
         * Removes a substring from a string.
         * str: The original string.
         * subStr: The string to remove.
         * returns the modified string.
         */
        _this.listRemove = function (str, substring) {
            if (str.indexOf(substring) != -1) {
                //remove it cause its no longer selected.
                str = str.replace(substring, "");
                str = str.replace(",,", "");
                if (str == ",") {
                    str = "";
                }
                if (str.substring(0, 1) == ',') {
                    str = str.substring(1);
                }
                str = str.substring(0, str.length - 1);
            }
            return str;
        };
        _this.formatValue = function (value, formatType, formatDetails, entityInstance) {
            if (angular.isUndefined(formatDetails)) {
                formatDetails = {};
            }
            var typeList = ["currency", "date", "datetime", "pixels", "percentage", "second", "time", "truefalse", "url", "weight", "yesno"];
            if (typeList.indexOf(formatType)) {
                _this['format_' + formatType](value, formatDetails, entityInstance);
            }
            return value;
        };
        _this.format_currency = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
        };
        _this.format_date = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
        };
        _this.format_datetime = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
        };
        _this.format_pixels = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
        };
        _this.format_yesno = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
            if (Boolean(value) === true) {
                return entityInstance.metaData.$$getRBKey("define.yes");
            }
            else if (value === false || value.trim() === 'No' || value.trim === 'NO' || value.trim() === '0') {
                return entityInstance.metaData.$$getRBKey("define.no");
            }
        };
        _this.left = function (stringItem, count) {
            return stringItem.substring(0, count);
        };
        _this.right = function (stringItem, count) {
            return stringItem.substring(stringItem.length - count, stringItem.length);
        };
        //this.utilityService.mid(propertyIdentifier,1,propertyIdentifier.lastIndexOf('.'));
        _this.mid = function (stringItem, start, count) {
            var end = start + count;
            return stringItem.substring(start, end);
        };
        _this.getPropertiesFromString = function (stringItem) {
            if (!stringItem)
                return;
            var capture = false;
            var property = '';
            var results = [];
            for (var i = 0; i < stringItem.length; i++) {
                if (!capture && stringItem.substr(i, 2) == "${") {
                    property = '';
                    capture = true;
                    i = i + 1; //skip the ${
                }
                else if (capture && stringItem[i] != '}') {
                    property = property.concat(stringItem[i]);
                }
                else if (capture) {
                    results.push(property);
                    capture = false;
                }
            }
            return results;
        };
        _this.replacePropertiesWithData = function (stringItem, data) {
            var results = _this.getPropertiesFromString(stringItem);
            for (var i = 0; i < results.length; i++) {
                stringItem = stringItem.replace('${' + results[i] + '}', data[i]);
            }
            return stringItem;
        };
        _this.replaceAll = function (stringItem, find, replace) {
            return stringItem.replace(new RegExp(_this.escapeRegExp(find), 'g'), replace);
        };
        _this.escapeRegExp = function (stringItem) {
            return stringItem.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
        };
        _this.createID = function (count) {
            var count = count || 26;
            var text = "";
            var firstPossibleCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
            var nextPossibleCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            var currentPossibleCharacters = "";
            for (var i = 0; i < count; i++) {
                if (i === 0) {
                    currentPossibleCharacters = firstPossibleCharacters;
                }
                else {
                    currentPossibleCharacters = nextPossibleCharacters;
                }
                text += currentPossibleCharacters.charAt(Math.floor(Math.random() * currentPossibleCharacters.length));
            }
            return text;
        };
        //list functions
        _this.arrayToList = function (array, delimiter) {
            if (delimiter != null) {
                return array.join(delimiter);
            }
            else {
                return array.join();
            }
        };
        _this.getPropertyValue = function (object, propertyIdentifier) {
            var keys = propertyIdentifier.split('.'), obj = object, keyPart;
            while ((keyPart = keys.shift()) && keys.length) {
                obj = obj[keyPart];
            }
            return obj[keyPart];
        };
        _this.setPropertyValue = function (object, propertyIdentifier, value) {
            var keys = propertyIdentifier.split('.'), obj = object, keyPart;
            while ((keyPart = keys.shift()) && keys.length) {
                if (!obj[keyPart]) {
                    obj[keyPart] = {};
                }
                obj = obj[keyPart];
            }
            obj[keyPart] = value;
        };
        _this.nvpToObject = function (NVPData) {
            var object = {};
            for (var key in NVPData) {
                var value = NVPData[key];
                var propertyIdentitifer = key.replace(/\_/g, '.');
                _this.setPropertyValue(object, propertyIdentitifer, value);
            }
            return object;
        };
        _this.isDescendantElement = function (parent, child) {
            var node = child.parentNode;
            while (node != null) {
                if (node == parent) {
                    return true;
                }
                node = node.parentNode;
            }
            return false;
        };
        //utility service toJson avoids circular references
        _this.toJson = function (obj) {
            var seen = [];
            return JSON.stringify(obj, function (key, val) {
                if (val != null && typeof val == "object") {
                    if (seen.indexOf(val) >= 0) {
                        return;
                    }
                    seen.push(val);
                }
                return val;
            });
        };
        _this.listFind = function (list, value, delimiter) {
            if (list === void 0) { list = ''; }
            if (value === void 0) { value = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var splitString = list.split(delimiter);
            var stringFound = -1;
            for (var i = 0; i < splitString.length; i++) {
                var stringPart = splitString[i];
                if (stringPart === value) {
                    stringFound = i;
                }
            }
            return stringFound;
        };
        _this.listLen = function (list, delimiter) {
            if (list === void 0) { list = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var splitString = list.split(delimiter);
            return splitString.length;
        };
        //This will enable you to sort by two separate keys in the order they are passed in
        _this.arraySorter = function (array, keysToSortBy) {
            var arrayOfTypes = [], returnArray = [], firstKey = keysToSortBy[0];
            if (angular.isDefined(keysToSortBy[1])) {
                var secondKey = keysToSortBy[1];
            }
            for (var itemIndex in array) {
                if (!(arrayOfTypes.indexOf(array[itemIndex][firstKey]) > -1)) {
                    arrayOfTypes.push(array[itemIndex][firstKey]);
                }
            }
            arrayOfTypes.sort(function (a, b) {
                if (a < b) {
                    return -1;
                }
                else if (a > b) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (var typeIndex in arrayOfTypes) {
                var tempArray = [];
                for (var itemIndex in array) {
                    if (array[itemIndex][firstKey] == arrayOfTypes[typeIndex]) {
                        tempArray.push(array[itemIndex]);
                    }
                }
                if (keysToSortBy[1] != null) {
                    tempArray.sort(function (a, b) {
                        if (a[secondKey] < b[secondKey]) {
                            return -1;
                        }
                        else if (a[secondKey] > b[secondKey]) {
                            return 1;
                        }
                        else {
                            return 0;
                        }
                    });
                }
                for (var finalIndex in tempArray) {
                    returnArray.push(tempArray[finalIndex]);
                }
            }
            return returnArray;
        };
        _this.minutesOfDay = function (m) {
            return m.getMinutes() + m.getHours() * 60;
        };
        _this.removeTimeOffset = function (timestampStr) {
            var date = new Date(timestampStr);
            var correctDate = new Date();
            correctDate.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());
            return correctDate.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
        };
        return _this;
    }
    return UtilityService;
}(baseservice_1.BaseService));
exports.UtilityService = UtilityService;


/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var PageDialogController = /** @class */ (function () {
    //@ngInject
    function PageDialogController($scope, $location, $anchorScroll, dialogService) {
        $scope.$id = 'pageDialogController';
        //get url param to retrieve collection listing
        $scope.pageDialogs = dialogService.getPageDialogs();
        $scope.scrollToTopOfDialog = function () {
            $location.hash('/#topOfPageDialog');
            $anchorScroll();
        };
        $scope.pageDialogStyle = { "z-index": 3000 };
    }
    return PageDialogController;
}());
exports.PageDialogController = PageDialogController;


/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DialogService = /** @class */ (function () {
    function DialogService(hibachiPathBuilder) {
        var _this = this;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.get = function () {
            return _this._pageDialogs || [];
        };
        this.addPageDialog = function (name, params) {
            var newDialog = {
                'path': name + '.html',
                'params': params
            };
            _this._pageDialogs.push(newDialog);
        };
        this.removePageDialog = function (index) {
            _this._pageDialogs.splice(index, 1);
        };
        this.getPageDialogs = function () {
            return _this._pageDialogs;
        };
        this.removeCurrentDialog = function () {
            _this._pageDialogs.splice(_this._pageDialogs.length - 1, 1);
        };
        this.getCurrentDialog = function () {
            return _this._pageDialogs[_this._pageDialogs.length - 1];
        };
        this._pageDialogs = [];
        this.hibachiPathBuilder = hibachiPathBuilder;
    }
    DialogService.$inject = [
        'hibachiPathBuilder'
    ];
    return DialogService;
}());
exports.DialogService = DialogService;


/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDetail = /** @class */ (function () {
    function SWDetail($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + '/detail.html',
            link: function (scope, element, attr) {
                scope.$id = "slatwallDetailController";
                $log.debug('slatwallDetailController');
                /*Sets the view dirty on save*/
                scope.setDirty = function (entity) {
                    angular.forEach(entity.forms, function (form) {
                        form.$setSubmitted();
                    });
                };
                var setupMetaData = function () {
                    scope[scope.entityName.toLowerCase()] = scope.entity;
                    scope.entity.metaData.$$getDetailTabs().then(function (value) {
                        scope.detailTabs = value.data;
                        $log.debug('detailtabs');
                        $log.debug(scope.detailTabs);
                    });
                };
                var propertyCasedEntityName = scope.entityName.charAt(0).toUpperCase() + scope.entityName.slice(1);
                scope.tabPartialPath = hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath);
                scope.getEntity = function () {
                    if (scope.entityID === 'create') {
                        scope.createMode = true;
                        scope.entity = $hibachi['new' + propertyCasedEntityName]();
                        setupMetaData();
                    }
                    else {
                        scope.createMode = false;
                        var entityPromise = $hibachi['get' + propertyCasedEntityName]({ id: scope.entityID });
                        entityPromise.promise.then(function () {
                            scope.entity = entityPromise.value;
                            setupMetaData();
                        });
                    }
                };
                scope.getEntity();
                scope.deleteEntity = function () {
                    var deletePromise = scope.entity.$$delete();
                    deletePromise.then(function () {
                        $location.path('/entity/' + propertyCasedEntityName + '/');
                    });
                };
                scope.allTabsOpen = false;
            }
        };
    }
    SWDetail.Factory = function () {
        var directive = function ($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) { return new SWDetail($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$location',
            '$log',
            '$hibachi',
            'coreEntityPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDetail;
}());
exports.SWDetail = SWDetail;


/***/ }),
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDetailTabs = /** @class */ (function () {
    function SWDetailTabs(coreEntityPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + 'detailtabs.html',
            link: function (scope, element, attr) {
            }
        };
    }
    SWDetailTabs.Factory = function () {
        var directive = function (coreEntityPartialsPath, hibachiPathBuilder) { return new SWDetailTabs(coreEntityPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreEntityPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDetailTabs;
}());
exports.SWDetailTabs = SWDetailTabs;


/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWList = /** @class */ (function () {
    function SWList($log, coreEntityPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + '/list.html',
            link: function (scope, element, attr) {
                $log.debug('slatwallList init');
                //scope.getCollection = function(){
                //
                //	var pageShow = 50;
                //	if(scope.pageShow !== 'Auto'){
                //		pageShow = scope.pageShow;
                //	}
                //	scope.entityName = scope.entityName.charAt(0).toUpperCase()+scope.entityName.slice(1);
                //	var collectionListingPromise = $hibachi.getEntity(scope.entityName, {currentPage:scope.currentPage, pageShow:pageShow, keywords:scope.keywords});
                //	collectionListingPromise.then(function(value){
                //		scope.collection = value;
                //		scope.collectionConfig = angular.fromJson(scope.collection.collectionConfig);
                //	});
                //};
                //scope.getCollection();
            }
        };
    }
    SWList.Factory = function () {
        var directive = function ($log, coreEntityPartialsPath, hibachiPathBuilder) { return new SWList($log, coreEntityPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'coreEntityPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWList;
}());
exports.SWList = SWList;


/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var OtherWiseController = /** @class */ (function () {
    //@ngInject
    function OtherWiseController($scope) {
        $scope.$id = "otherwiseController";
    }
    return OtherWiseController;
}());
exports.OtherWiseController = OtherWiseController;


/***/ }),
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var RouterController = /** @class */ (function () {
    //@ngInject
    function RouterController($scope, $routeParams, $location, $log, utilityService) {
        $scope.$id = "routerController";
        $scope.partialRoute = '';
        $log.debug($routeParams);
        $log.debug($location);
        var path = $location.path();
        $scope.controllerType = path.split('/')[1];
        var type;
        if ($scope.controllerType === 'entity') {
            //remove all dashes
            $scope.entityName = utilityService.snakeToCapitalCase($routeParams.entityName);
            if (angular.isDefined($routeParams.entityID)) {
                $scope.entityID = $routeParams.entityID || '';
            }
        }
    }
    return RouterController;
}());
exports.RouterController = RouterController;


/***/ }),
/* 673 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAddressFormController = /** @class */ (function () {
    //@ngInject
    function SWAddressFormController($scope, $log, observerService, $rootScope) {
        var _this = this;
        this.$scope = $scope;
        this.$log = $log;
        this.observerService = observerService;
        this.$rootScope = $rootScope;
        this.showAddressBookSelect = false;
        this.showCountrySelect = true;
        this.showSubmitButton = true;
        this.showCloseButton = true;
        this.param = "?slataction=";
        this.showAlerts = "true";
        this.getAction = function () {
            if (!angular.isDefined(_this.action)) {
                _this.action = "addAddress";
            }
            if (_this.action.indexOf(":") != -1 && _this.action.indexOf(_this.param) == -1) {
                _this.action = _this.param + _this.action;
            }
            return _this.action;
        };
        this.hasField = function (field) {
            if (_this.fieldList.indexOf(field) != -1) {
                return true;
            }
            return false;
        };
        this.submitKeyCheck = function (event) {
            if (event.form.$name == _this.addressName &&
                event.event.keyCode == 13) {
                event.swForm.submit(event.swForm.action);
            }
        };
        //if exists, just name it slatwall.
        if (angular.isDefined(this.slatwallScope)) {
            this.slatwall = this.slatwallScope;
        }
        if (this.fieldList == undefined) {
            this.fieldList = "countryCode,name,company,streetAddress,street2Address,locality,city,stateCode,postalCode";
        }
        if (this.showAddressBookSelect == undefined) {
            this.showAddressBookSelect = false;
        }
        if (this.showCountrySelect == undefined) {
            this.showCountrySelect = true;
        }
        if (this.action == undefined) {
            this.showSubmitButton = false;
        }
        if ($rootScope.slatwall && !$scope.slatwall) {
            $scope.slatwall = $rootScope.slatwall;
        }
        var addressName = this.addressName;
        if (this.address) {
            this.address.getData = function () {
                var formData = _this.address || {};
                var form = _this.address.forms[addressName];
                for (var key_1 in form) {
                    var val = form[key_1];
                    if (typeof val === 'object' && val.hasOwnProperty('$modelValue')) {
                        if (val.$modelValue) {
                            val = val.$modelValue;
                        }
                        else if (val.$viewValue) {
                            val = val.$viewValue;
                        }
                        else {
                            val = "";
                        }
                        if (angular.isString(val)) {
                            formData[key_1] = val;
                        }
                        if (val.$modelValue) {
                            formData[key_1] = val.$modelValue;
                        }
                        else if (val.$viewValue) {
                            formData[key_1] = val.$viewValue;
                        }
                    }
                }
                return formData || "";
            };
        }
        if (!this.eventListeners) {
            this.eventListeners = {};
        }
        if (this.submitOnEnter) {
            this.eventListeners.keyup = this.submitKeyCheck;
        }
        if (this.eventListeners) {
            for (var key in this.eventListeners) {
                observerService.attach(this.eventListeners[key], key);
            }
        }
    }
    return SWAddressFormController;
}());
exports.SWAddressFormController = SWAddressFormController;
var SWAddressForm = /** @class */ (function () {
    // @ngInject
    function SWAddressForm(coreFormPartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.transclude = true;
        this.controller = SWAddressFormController;
        this.controllerAs = 'SwAddressForm';
        this.bindToController = {
            action: '@',
            actionText: '@',
            context: '@',
            customPartial: '@',
            slatwallScope: '=',
            address: "=",
            id: "@?",
            fieldNamePrefix: "@",
            fieldList: "@",
            fieldClass: "@",
            fulfillmentIndex: "@",
            tabIndex: "@",
            addressName: "@",
            showAddressBookSelect: "@",
            showCountrySelect: "@",
            showSubmitButton: "@",
            showCloseButton: "@",
            showAlerts: "@",
            eventListeners: "=?",
            submitOnEnter: "@",
            stateOptions: "=?"
        };
        this.scope = {};
        this.templateUrl = function (elem, attrs) {
            if (attrs.customPartial) {
                if (attrs.customPartial === "true") {
                    return hibachiConfig.customPartialsPath + "addressform.html";
                }
                else {
                    return hibachiConfig.customPartialsPath + attrs.customPartial;
                }
            }
            else {
                return _this.hibachiPathBuilder.buildPartialsPath(_this.coreFormPartialsPath) + "addressform.html";
            }
        };
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWAddressForm.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWAddressForm(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWAddressForm;
}());
exports.SWAddressForm = SWAddressForm;


/***/ }),
/* 674 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWErrorDisplayController = /** @class */ (function () {
    //@ngInject
    function SWErrorDisplayController($injector) {
        this.$injector = $injector;
        this.$injector = $injector;
    }
    SWErrorDisplayController.prototype.$onInit = function () {
        /**
         if a css error class was passed to propertyDisplay, attach to form
         which will apply it to the dynamically generateddiv that contains
         the error message
        **/
        if (this.swfPropertyDisplay && this.swfPropertyDisplay.errorClass) {
            this.swForm.errorClass = this.swfPropertyDisplay.errorClass;
        }
        var bindToControllerProps = this.$injector.get('swErrorDisplayDirective')[0].bindToController;
        for (var i in bindToControllerProps) {
            if (!this[i] && i !== 'name') {
                if (!this[i] && this.swPropertyDisplay && this.swPropertyDisplay[i]) {
                    this[i] = this.swPropertyDisplay[i];
                }
                else if (!this[i] && this.swfPropertyDisplay && this.swfPropertyDisplay[i]) {
                    this[i] = this.swfPropertyDisplay[i];
                }
                else if (!this[i] && this.swForm && this.swForm[i]) {
                    this[i] = this.swForm[i];
                }
            }
        }
        this.property = this.property || this.propertyIdentifier;
        this.propertyIdentifier = this.propertyIdentifier || this.property;
        if (!this.name && this.property) {
            this.name = this.property;
        }
    };
    return SWErrorDisplayController;
}());
exports.SWErrorDisplayController = SWErrorDisplayController;
var SWErrorDisplay = /** @class */ (function () {
    // @ngInject
    function SWErrorDisplay(coreFormPartialsPath, hibachiPathBuilder) {
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.require = {
            swForm: "^?swForm",
            form: "^?form",
            swPropertyDisplay: "^?swPropertyDisplay",
            swfPropertyDisplay: "^?swfPropertyDisplay"
        };
        this.restrict = "E";
        this.controller = SWErrorDisplayController;
        this.controllerAs = "swErrorDisplay";
        this.scope = {};
        this.bindToController = {
            form: "=?",
            name: "@?",
            property: "@?",
            propertyIdentifier: "@?",
            errorClass: "@?"
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "errordisplay.html";
    }
    SWErrorDisplay.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWErrorDisplay(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWErrorDisplay;
}());
exports.SWErrorDisplay = SWErrorDisplay;


/***/ }),
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/**
* Form Controller handles the logic for this directive.
*/
var SWFFormController = /** @class */ (function () {
    // @ngInject
    function SWFFormController($rootScope, $scope, $timeout, $hibachi, $element, validationService, hibachiValidationService) {
        var _this = this;
        this.$rootScope = $rootScope;
        this.$scope = $scope;
        this.$timeout = $timeout;
        this.$hibachi = $hibachi;
        this.$element = $element;
        this.validationService = validationService;
        this.hibachiValidationService = hibachiValidationService;
        this.$onInit = function () {
        };
        this.submitForm = function () {
            //example of entityName Account_Login
            if (_this.form.$valid) {
                _this.$rootScope.slatwall.doAction(_this.method, _this.ngModel.$modelValue).then(function (result) {
                    if (!result)
                        return;
                    if (result.successfulActions.length) {
                        //if we have an array of actions and they're all complete, or if we have just one successful action
                        if (_this.sRedirectUrl) {
                            _this.$rootScope.slatwall.redirectExact(_this.sRedirectUrl);
                        }
                    }
                    if (result.errors) {
                        if (_this.fRedirectUrl) {
                            _this.$rootScope.slatwall.redirectExact(_this.fRedirectUrl);
                        }
                    }
                });
            }
            else {
                _this.form.$setSubmitted(true);
            }
        };
    }
    return SWFFormController;
}());
exports.SWFFormController = SWFFormController;
var SWFForm = /** @class */ (function () {
    // @ngInject
    function SWFForm() {
        this.require = {
            form: '?^form',
            ngModel: '?^ngModel'
        };
        this.priority = 1000;
        this.restrict = "A";
        //needs to have false scope to not interfere with form controller
        this.scope = true;
        /**
         * Binds all of our variables to the controller so we can access using this
         */
        this.bindToController = {
            method: "@?",
            sRedirectUrl: "@?",
            fRedirectUrl: "@?",
        };
        this.controller = SWFFormController;
        this.controllerAs = "swfForm";
        /**
            * Sets the context of this form
            */
        this.link = function (scope, element, attrs, formController) {
        };
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWFForm.Factory = function () {
        var directive = function () { return new SWFForm(); };
        directive.$inject = [];
        return directive;
    };
    return SWFForm;
}());
exports.SWFForm = SWFForm;


/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**********************************************************************************************
 **********************************************************************************************
 **********************************************************************************************
 **		___________________________________________
 ** 	Form Field - type have the following options (This is for the frontend so it can be modified):
 **
 **		checkbox			|	As a single checkbox this doesn't require any options, but it will create a hidden field for you so that the key gets submitted even when not checked.  The value of the checkbox will be 1
 **		checkboxgroup		|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		file				|	No value can be passed in
 **		multiselect			|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		password			|	No Value can be passed in
 **		radiogroup			|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		select      		|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		text				|	Simple Text Field
 **		textarea			|	Simple Textarea
 **		yesno				|	This is used by booleans and flags to create a radio group of Yes and No
 **		submit				|	submit button to post these properties back to the server.
 **		------------------------------------------------------------------------------------------------------
 **
 **		attr.valueObject" type="any" default="" />
 **		attr.valueObjectProperty" type="string" default="" />
 **
 **		General Settings that end up getting applied to the value object
 **		attr.type" type="string" default="text"
 **		attr.name" type="string" default=""
 **		attr.class" type="string" default=""
 **		attr.value" type="any" default=""
 **		attr.valueOptions" type="array" default="#arrayNew(1)#"		<!--- Used for select, checkbox group, multiselect --->
 **		attr.fieldAttributes" type="string" default=""
 **
 *********************************************************************************************
 *********************************************************************************************
 *********************************************************************************************
 */
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/**
    * Property Display Controller handles the logic for this directive.
    */
var SWFFormFieldController = /** @class */ (function () {
    //@ngInject
    function SWFFormFieldController($scope, $element, $compile, utilityService) {
        this.$scope = $scope;
        this.$element = $element;
        this.$compile = $compile;
        this.utilityService = utilityService;
        this.utilityService = utilityService;
        this.$scope = $scope;
        this.$element = $element;
        this.$compile = $compile;
    }
    /**
        * Handles the logic for the frontend version of the property display.
        */
    SWFFormFieldController.$inject = ['$scope', '$element', '$compile', 'utilityService'];
    return SWFFormFieldController;
}());
/**
    * This class handles configuring formFields for use in process forms on the front end.
    */
var SWFFormField = /** @class */ (function () {
    function SWFFormField(coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = "E";
        this.require = { swfPropertyDisplayCtrl: "^?swfPropertyDisplay", form: "^?form" };
        this.controller = SWFFormFieldController;
        this.controllerAs = "swfFormField";
        this.scope = {};
        this.bindToController = {
            propertyDisplay: "=?",
            propertyIdentifier: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            type: "@?"
        };
        this.link = function (scope, element, attrs, formController, transcludeFn) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'swfformfield.html';
    }
    /**
        * Handles injecting the partials path into this class
        */
    SWFFormField.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFFormField(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFFormField;
}());
exports.SWFFormField = SWFFormField;


/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/**
* Form Controller handles the logic for this directive.
*/
var SWFormController = /** @class */ (function () {
    /**
     * This controller handles most of the logic for the swFormDirective when more complicated self inspection is needed.
     */
    // @ngInject
    function SWFormController($scope, $element, $hibachi, $http, $timeout, observerService, $rootScope, entityService, utilityService) {
        var _this = this;
        this.$scope = $scope;
        this.$element = $element;
        this.$hibachi = $hibachi;
        this.$http = $http;
        this.$timeout = $timeout;
        this.observerService = observerService;
        this.$rootScope = $rootScope;
        this.entityService = entityService;
        this.utilityService = utilityService;
        this.eventsObj = [];
        this.formData = {};
        this.parseObjectErrors = true;
        this.completedActions = 0;
        this.$onInit = function () {
            if (_this.object && _this.parseObjectErrors) {
                _this.$timeout(function () {
                    _this.parseErrors(_this.object.errors);
                });
            }
        };
        this.isObject = function () {
            return (angular.isObject(_this.object));
        };
        this.submitKeyCheck = function (event) {
            if (event.form.$name == _this.name &&
                event.event.keyCode == 13) {
                _this.submit(event.swForm.action);
            }
        };
        /** create the generic submit function */
        this.submit = function (actions) {
            _this.actions = actions || _this.action;
            console.log('actions!', _this.actions);
            _this.clearErrors();
            _this.formData = _this.getFormData() || "";
            _this.doActions(_this.actions);
        };
        //array or comma delimited
        this.doActions = function (actions) {
            if (angular.isArray(actions)) {
                _this.completedActions = 0;
                for (var _i = 0, _a = actions; _i < _a.length; _i++) {
                    var action = _a[_i];
                    _this.doAction(action);
                }
            }
            else if (angular.isString(actions)) {
                _this.doAction(actions);
            }
            else {
                throw ("Unknown type of action exception");
            }
        };
        // /** iterates through the factory submitting data */
        this.doAction = function (action) {
            if (!action) {
                throw "Action not defined on form";
            }
            _this.formData = _this.formData || {};
            //
            var request = _this.$rootScope.hibachiScope.doAction(action, _this.formData)
                .then(function (result) {
                if (!result)
                    return;
                if (result.successfulActions.length) {
                    _this.completedActions++;
                }
                if ((angular.isArray(_this.actions) && _this.completedActions === _this.actions.length)
                    ||
                        (!angular.isArray(_this.actions)) && result.successfulActions.length) {
                    //if we have an array of actions and they're all complete, or if we have just one successful action
                    if (_this.sRedirectUrl) {
                        _this.$rootScope.slatwall.redirectExact(_this.sRedirectUrl);
                    }
                }
                _this.object.forms[_this.name].$setSubmitted(true);
                if (result.errors) {
                    _this.parseErrors(result.errors);
                    if (_this.fRedirectUrl) {
                        _this.$rootScope.slatwall.redirectExact(_this.fRedirectUrl);
                    }
                }
            });
        };
        /****
             * Handle parsing through the server errors and injecting the error text for that field
            * If the form only has a submit, then simply call that function and set errors.
            ***/
        this.parseErrors = function (errors) {
            if (angular.isDefined(errors) && errors) {
                angular.forEach(errors, function (val, key) {
                    var primaryElement = _this.$element.find("[error-for='" + key + "']");
                    _this.$timeout(function () {
                        /**
                        if an error class has been attached to this form
                        by its children propertydisplay or errorDisplay, use it.
                        Otherwise, just add a generic 'error' class
                        to the error message **/
                        var errorClass = _this.errorClass ? _this.errorClass : "error";
                        errors[key].forEach(function (error) {
                            primaryElement.append("<div class='" + errorClass + "' name='" + key + "Error'>" + error + "</div>");
                        });
                    }, 0);
                }, _this);
            }
        };
        /** find and clear all errors on form */
        this.clearErrors = function () {
            /** clear all form errors on submit. */
            _this.$timeout(function () {
                var errorElements = _this.$element.find("[error-for]");
                errorElements.empty();
            }, 0);
        };
        this.eventsHandler = function (params) {
            //this will call any form specific functions such as hide,show,refresh,update or whatever else you later add
            for (var e in params.events) {
                if (angular.isDefined(params.events[e].value) && params.events[e].value == _this.name.toLowerCase()) {
                    if (params.events[e].name && _this[params.events[e].name]) {
                        _this[params.events[e].name](params.events[e].value);
                    }
                }
            }
        };
        /** hides this directive on event */
        this.hide = function (param) {
            if (_this.name.toLowerCase() == param) {
                _this.$element.hide();
            }
        };
        /** shows this directive on event */
        this.show = function (param) {
            if (_this.name.toLowerCase() == param) {
                _this.$element.show();
            }
        };
        /** refreshes this directive on event */
        this.refresh = function (params) {
            //stub
        };
        /** updates this directive on event */
        this.update = function (params) {
            //stub
        };
        /** clears this directive on event */
        this.clear = function (params) {
            var iterable = _this.formCtrl;
            angular.forEach(iterable, function (val, key) {
                if (typeof val === 'object' && val.hasOwnProperty('$modelValue')) {
                    if (_this.object.forms[_this.name][key].$viewValue) {
                        _this.object.forms[_this.name][key].$setViewValue("");
                        _this.object.forms[_this.name][key].$render();
                    }
                }
                else {
                    val = "";
                }
            });
        };
        /** returns all the data from the form by iterating the form elements */
        this.getFormData = function () {
            var iterable = _this.formCtrl;
            angular.forEach(iterable, function (val, key) {
                if (typeof val === 'object' && val.hasOwnProperty('$modelValue')) {
                    if (_this.object.forms[_this.name][key].$modelValue != undefined) {
                        val = _this.object.forms[_this.name][key].$modelValue;
                    }
                    else if (_this.object.forms[_this.name][key].$viewValue != undefined) {
                        val = _this.object.forms[_this.name][key].$viewValue;
                    }
                    else if (_this.object.forms[_this.name][key].$dirty) {
                        val = "";
                    }
                    /** Check for form elements that have a name that doesn't start with $ */
                    if (angular.isString(val) || angular.isNumber(val) || typeof val == 'boolean') {
                        _this.formData[key] = val;
                    }
                    if (val.$modelValue != undefined) {
                        _this.formData[key] = val.$modelValue;
                    }
                    else if (val.$viewValue != undefined) {
                        _this.formData[key] = val.$viewValue;
                    }
                }
                else {
                }
            });
            return _this.formData || "";
        };
        /** only use if the developer has specified these features with isProcessForm */
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        if (angular.isUndefined(this.isDirty)) {
            this.isDirty = false;
        }
        //object can be either an instance or a string that will become an instance
        if (angular.isString(this.object)) {
            var objectNameArray = this.object.split('_');
            this.entityName = objectNameArray[0];
            //if the object name array has two parts then we can infer that it is a process object
            if (objectNameArray.length > 1) {
                this.context = this.context || objectNameArray[1];
                this.isProcessForm = true;
            }
            else {
                this.context = this.context || 'save';
                this.isProcessForm = false;
            }
            //convert the string to an object
            this.$timeout(function () {
                _this.object = _this.$hibachi['new' + _this.object]();
            });
        }
        else {
            if (this.object && this.object.metaData) {
                this.isProcessForm = this.object.metaData.isProcessObject;
                this.entityName = this.object.metaData.className.split('_')[0];
                if (this.isProcessForm) {
                    this.context = this.context || this.object.metaData.className.split('_')[1];
                }
                else {
                    this.context = this.context || 'save';
                }
            }
        }
        //
        this.context = this.context || this.name;
        if (this.isProcessForm) {
            /** Cart is an alias for an Order */
            if (this.entityName == "Order") {
                this.entityName = "Cart";
            }
            ;
        }
        if (this.submitOnEnter) {
            this.eventListeners = this.eventListeners || {};
            this.eventListeners.keyup = this.submitKeyCheck;
        }
        if (this.eventListeners) {
            for (var key in this.eventListeners) {
                this.observerService.attach(this.eventListeners[key], key);
            }
        }
    }
    return SWFormController;
}());
exports.SWFormController = SWFormController;
var SWForm = /** @class */ (function () {
    // @ngInject
    function SWForm(coreFormPartialsPath, hibachiPathBuilder) {
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.templateUrl = "";
        this.transclude = true;
        this.restrict = "E";
        this.controller = SWFormController;
        this.controllerAs = "swForm";
        this.scope = {};
        /**
         * Binds all of our variables to the controller so we can access using this
         */
        this.bindToController = {
            name: "@?",
            context: "@?",
            entityName: "@?",
            hiddenFields: "=?",
            action: "@?",
            actions: "@?",
            formClass: "@?",
            formData: "=?",
            errorClass: '@?',
            object: "=?",
            onSuccess: "@?",
            onError: "@?",
            hideUntil: "@?",
            isDirty: "=?",
            inputAttributes: "@?",
            eventListeners: "=?",
            eventAnnouncers: "@",
            submitOnEnter: "@",
            parseObjectErrors: "@?",
            sRedirectUrl: "@?",
            fRedirectUrl: "@?"
        };
        /**
            * Sets the context of this form
            */
        this.link = function (scope, element, attrs, controller) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "form.html";
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWForm.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWForm(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWForm;
}());
exports.SWForm = SWForm;


/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormFieldController = /** @class */ (function () {
    //@ngInject
    function SWFormFieldController($injector, $scope, $timeout, $log, $hibachi, observerService, utilityService) {
        var _this = this;
        this.$injector = $injector;
        this.$scope = $scope;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.formFieldChanged = function (option) {
            if (_this.fieldType === 'yesno') {
                _this.object.data[_this.propertyIdentifier] = option.value;
                _this.form[_this.propertyIdentifier].$dirty = true;
                _this.form['selected' + _this.object.metaData.className + _this.propertyIdentifier + _this.selectedRadioFormName].$dirty = false;
            }
            else if (_this.fieldType == 'checkbox') {
                _this.object.data[_this.propertyIdentifier] = option.value;
                _this.form[_this.propertyIdentifier].$dirty = true;
            }
            else if (_this.fieldType === 'select') {
                _this.$log.debug('formfieldchanged');
                _this.$log.debug(option);
                if (_this.selectType === 'object' && typeof _this.object.data[_this.propertyIdentifier].$$getIDName == "function") {
                    _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = option.value;
                    if (angular.isDefined(_this.form[_this.object.data[_this.propertyIdentifier].$$getIDName()])) {
                        _this.form[_this.object.data[_this.propertyIdentifier].$$getIDName()].$dirty = true;
                    }
                }
                else if (_this.selectType === 'string' && option && option.value != null) {
                    _this.object.data[_this.propertyIdentifier] = option.value;
                    _this.form[_this.propertyIdentifier].$dirty = true;
                }
                _this.observerService.notify(_this.object.metaData.className + _this.propertyIdentifier.charAt(0).toUpperCase() + _this.propertyIdentifier.slice(1) + 'OnChange', option);
            }
            else {
                _this.object.data[_this.propertyIdentifier] = option.value;
                _this.form[_this.propertyIdentifier].$dirty = true;
                _this.form['selected' + _this.object.metaData.className + _this.propertyIdentifier + _this.selectedRadioFormName].$dirty = false;
            }
        };
        this.$onInit = function () {
            var bindToControllerProps = _this.$injector.get('swFormFieldDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i]) {
                    if (!_this[i] && _this.swPropertyDisplay && _this.swPropertyDisplay[i]) {
                        _this[i] = _this.swPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swfPropertyDisplay && _this.swfPropertyDisplay[i]) {
                        _this[i] = _this.swfPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swForm && _this.swForm[i]) {
                        _this[i] = _this.swForm[i];
                    }
                }
            }
            var tempObject = [];
            if (typeof (_this.optionValues) == "string") {
                var temp = _this.optionValues.split(',');
                for (var _i = 0, temp_1 = temp; _i < temp_1.length; _i++) {
                    var value = temp_1[_i];
                    tempObject.push({
                        "name": value,
                        "value": value
                    });
                }
                _this.optionValues = tempObject;
            }
            _this.edit = _this.edit || true;
            _this.fieldType = _this.fieldType || "text";
            if (_this.fieldType === 'yesno') {
                _this.yesnoStrategy();
            }
            if (_this.fieldType === 'select') {
                _this.selectStrategy();
            }
            if (_this.eventListeners) {
                for (var key in _this.eventListeners) {
                    _this.observerService.attach(_this.eventListeners[key], key);
                }
            }
        };
        this.selectStrategy = function () {
            //this is specific to the admin because it implies loading of options via api
            if (angular.isDefined(_this.object.metaData) && angular.isDefined(_this.object.metaData[_this.propertyIdentifier]) && angular.isDefined(_this.object.metaData[_this.propertyIdentifier].fieldtype)) {
                _this.selectType = 'object';
                _this.$log.debug('selectType:object');
            }
            else {
                _this.selectType = 'string';
                _this.$log.debug('selectType:string');
            }
            _this.getOptions();
        };
        this.getOptions = function () {
            if (angular.isUndefined(_this.options)) {
                if (!_this.optionsArguments || !_this.optionsArguments.hasOwnProperty('propertyIdentifier')) {
                    _this.optionsArguments = {
                        'propertyIdentifier': _this.propertyIdentifier
                    };
                }
                var optionsPromise = _this.$hibachi.getPropertyDisplayOptions(_this.object.metaData.className, _this.optionsArguments);
                optionsPromise.then(function (value) {
                    _this.options = value.data;
                    if (_this.selectType === 'object') {
                        if (angular.isUndefined(_this.object.data[_this.propertyIdentifier])) {
                            _this.object.data[_this.propertyIdentifier] = _this.$hibachi['new' + _this.object.metaData[_this.propertyIdentifier].cfc]();
                        }
                        if (_this.object.data[_this.propertyIdentifier].$$getID() === '') {
                            _this.$log.debug('no ID');
                            _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());
                            _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];
                            _this.object.data[_this.propertyIdentifier] = _this.$hibachi['new' + _this.object.metaData[_this.propertyIdentifier].cfc]();
                            _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = _this.options[0].value;
                        }
                        else {
                            var found = false;
                            for (var i in _this.options) {
                                if (angular.isObject(_this.options[i].value)) {
                                    _this.$log.debug('isObject');
                                    _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());
                                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {
                                        _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];
                                        _this.object.data[_this.propertyIdentifier] = _this.options[i].value;
                                        found = true;
                                        break;
                                    }
                                }
                                else {
                                    _this.$log.debug('notisObject');
                                    _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());
                                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier].$$getID()) {
                                        _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];
                                        _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = _this.options[i].value;
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found) {
                                    _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];
                                }
                            }
                        }
                    }
                    else if (_this.selectType === 'string') {
                        if (_this.object.data[_this.propertyIdentifier] !== null) {
                            for (var i in _this.options) {
                                if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {
                                    _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];
                                    _this.object.data[_this.propertyIdentifier] = _this.options[i].value;
                                }
                            }
                        }
                        else {
                            _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];
                            _this.object.data[_this.propertyIdentifier] = _this.options[0].value;
                        }
                    }
                });
            }
        };
        this.yesnoStrategy = function () {
            //format value
            _this.selectedRadioFormName = _this.utilityService.createID(26);
            _this.object.data[_this.propertyIdentifier] = (_this.object.data[_this.propertyIdentifier]
                && _this.object.data[_this.propertyIdentifier].length
                && _this.object.data[_this.propertyIdentifier].toLowerCase().trim() === 'yes') || _this.object.data[_this.propertyIdentifier] == 1 ? 1 : 0;
            _this.options = [
                {
                    name: 'Yes',
                    value: 1
                },
                {
                    name: 'No',
                    value: 0
                }
            ];
            if (angular.isDefined(_this.object.data[_this.propertyIdentifier])) {
                for (var i in _this.options) {
                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {
                        _this.selected = _this.options[i];
                        _this.object.data[_this.propertyIdentifier] = _this.options[i].value;
                    }
                }
            }
            else {
                _this.selected = _this.options[0];
                _this.object.data[_this.propertyIdentifier] = _this.options[0].value;
            }
            _this.$timeout(function () {
                _this.form[_this.propertyIdentifier].$dirty = _this.isDirty;
            });
        };
        this.$injector = $injector;
        this.$scope = $scope;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.utilityService = utilityService;
    }
    return SWFormFieldController;
}());
exports.SWFormFieldController = SWFormFieldController;
var SWFormField = /** @class */ (function () {
    //@ngInject
    function SWFormField($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = "EA";
        this.require = {
            swfPropertyDisplay: "^?swfPropertyDisplay",
            swPropertyDisplay: "^?swPropertyDisplay",
            form: "^?form",
            swForm: '^?swForm'
        };
        this.controller = SWFormFieldController;
        this.controllerAs = "swFormField";
        this.scope = {};
        this.bindToController = {
            propertyIdentifier: "@?", property: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            fieldType: "@?", type: "@?",
            option: "=?",
            valueObject: "=?",
            object: "=?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            optionValues: "=?",
            edit: "=?",
            title: "@?",
            value: "=?",
            errorText: "@?",
            inListingDisplay: "=?",
            inputAttributes: "@?",
            options: "=?",
            optionsArguments: "=?",
            eagerLoadOptions: "=?",
            rawFileTarget: "@?",
            binaryFileTarget: "@?",
            isDirty: "=?",
            onChange: "=?",
            editable: "=?",
            eventListeners: "=?",
            context: "@?",
            eventAnnouncers: "@"
        };
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'formfield.html';
    }
    SWFormField.Factory = function () {
        var directive = function ($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormField($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$templateCache',
            '$window',
            '$hibachi',
            'formService',
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormField;
}());
exports.SWFormField = SWFormField;


/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFormFieldFileController = /** @class */ (function () {
    //@ngInject
    function SWFormFieldFileController(formService) {
        this.formService = formService;
        if (this.propertyDisplay.isDirty == undefined)
            this.propertyDisplay.isDirty = false;
        this.propertyDisplay.form.$dirty = this.propertyDisplay.isDirty;
        //this.formService.setPristinePropertyValue(this.propertyDisplay.property,this.propertyDisplay.object.data[this.propertyDisplay.property]);
    }
    return SWFormFieldFileController;
}());
var SWFormFieldFile = /** @class */ (function () {
    function SWFormFieldFile(coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = 'E';
        this.require = "^form";
        this.controller = SWFormFieldFileController;
        this.controllerAs = "swFormFieldFile";
        this.scope = true;
        this.bindToController = {
            propertyDisplay: "="
        };
        //@ngInject
        this.link = function (scope, element, attr, formController) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + "file.html";
    }
    SWFormFieldFile.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldFile(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormFieldFile;
}());
exports.SWFormFieldFile = SWFormFieldFile;


/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormFieldJsonController = /** @class */ (function () {
    //@ngInject
    function SWFormFieldJsonController(formService) {
        this.propertyDisplay.form.$dirty = this.propertyDisplay.isDirty;
    }
    return SWFormFieldJsonController;
}());
var SWFormFieldJson = /** @class */ (function () {
    function SWFormFieldJson(coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = 'E';
        this.require = "^form";
        this.scope = true;
        this.controller = SWFormFieldJsonController;
        this.bindToController = {
            propertyDisplay: "=?"
        };
        this.controllerAs = "ctrl";
        this.templateUrl = "";
        this.link = function (scope, element, attrs, formController) { };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + "json.html";
    }
    SWFormFieldJson.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldJson(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormFieldJson;
}());
exports.SWFormFieldJson = SWFormFieldJson;


/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormFieldSearchSelect = /** @class */ (function () {
    function SWFormFieldSearchSelect($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder) {
        return {
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'search-select.html',
            require: "^form",
            restrict: 'E',
            scope: {
                propertyDisplay: "="
            },
            link: function (scope, element, attr, formController) {
                //set up selectionOptions
                scope.selectionOptions = {
                    value: [],
                    $$adding: false
                };
                //match in matches track by
                //function to set state of adding new item
                scope.setAdding = function (isAdding) {
                    scope.isAdding = isAdding;
                    scope.showAddBtn = false;
                };
                scope.selectedOption = {};
                scope.showAddBtn = false;
                var propertyMetaData = scope.propertyDisplay.object.$$getMetaData(scope.propertyDisplay.property);
                //create basic
                var object = $hibachi.newEntity(propertyMetaData.cfc);
                //				scope.propertyDisplay.template = '';
                //				//check for a template
                //				//rules are tiered: check if an override is specified at scope.template, check if the cfc name .html exists, use
                //				var templatePath = coreFormPartialsPath + 'formfields/searchselecttemplates/';
                //				if(angular.isUndefined(scope.propertyDisplay.template)){
                //					var templatePromise = $http.get(templatePath+propertyMetaData.cfcProperCase+'.html',function(){
                //						$log.debug('template');
                //						scope.propertyDisplay.template = templatePath+propertyMetaData.cfcProperCase+'.html';
                //					},function(){
                //						scope.propertyDisplay.template = templatePath+'index.html';
                //						$log.debug('template');
                //						$log.debug(scope.propertyDisplay.template);
                //					});
                //				}
                //set up query function for finding related object
                scope.cfcProperCase = propertyMetaData.cfcProperCase;
                scope.selectionOptions.getOptionsByKeyword = function (keyword) {
                    var filterGroupsConfig = '[' +
                        ' {  ' +
                        '"filterGroup":[  ' +
                        '{' +
                        ' "propertyIdentifier":"_' + scope.cfcProperCase.toLowerCase() + '.' + scope.cfcProperCase + 'Name",' +
                        ' "comparisonOperator":"like",' +
                        ' "ormtype":"string",' +
                        ' "value":"%' + keyword + '%"' +
                        '  }' +
                        ' ]' +
                        ' }' +
                        ']';
                    return $hibachi.getEntity(propertyMetaData.cfc, { filterGroupsConfig: filterGroupsConfig.trim() })
                        .then(function (value) {
                        $log.debug('typesByKeyword');
                        $log.debug(value);
                        scope.selectionOptions.value = value.pageRecords;
                        var myLength = keyword.length;
                        if (myLength > 0) {
                            scope.showAddBtn = true;
                        }
                        else {
                            scope.showAddBtn = false;
                        }
                        return scope.selectionOptions.value;
                    });
                };
                var propertyPromise = scope.propertyDisplay.object['$$get' + propertyMetaData.nameCapitalCase]();
                propertyPromise.then(function (data) {
                });
                //set up behavior when selecting an item
                scope.selectItem = function ($item, $model, $label) {
                    scope.$item = $item;
                    scope.$model = $model;
                    scope.$label = $label;
                    scope.showAddBtn = false; //turns off the add btn on select
                    //angular.extend(inflatedObject.data,$item);
                    object.$$init($item);
                    $log.debug('select item');
                    $log.debug(object);
                    scope.propertyDisplay.object['$$set' + propertyMetaData.nameCapitalCase](object);
                };
                //				if(angular.isUndefined(scope.propertyDipslay.object[scope.propertyDisplay.property])){
                //					$log.debug('getmeta');
                //					$log.debug(scope.propertyDisplay.object.metaData[scope.propertyDisplay.property]);
                //
                //					//scope.propertyDipslay.object['$$get'+]
                //				}
                //
                //				scope.propertyDisplay.object.data[scope.propertyDisplay.property].$dirty = true;
            }
        };
    }
    SWFormFieldSearchSelect.Factory = function () {
        var directive = function ($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldSearchSelect($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormFieldSearchSelect;
}());
exports.SWFormFieldSearchSelect = SWFormFieldSearchSelect;


/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormRegistrar = /** @class */ (function () {
    //@ngInject
    function SWFormRegistrar(formService) {
        return {
            restrict: 'E',
            require: ["^form", "^swForm"],
            scope: {
                object: "=?",
                context: "@?",
                name: "@?",
                isDirty: "=?"
            },
            link: function (scope, element, attrs, formController, transclude) {
                /*add form info at the form level*/
                scope.$watch(function () { return formController[0]; }, function () {
                    formController[1].formCtrl = formController[0];
                });
                formController[0].$$swFormInfo = {
                    object: scope.object,
                    context: scope.context || 'save',
                    name: scope.name
                };
                var makeRandomID = function makeid(count) {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                    for (var i = 0; i < count; i++)
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    return text;
                };
                if (scope.isDirty) {
                    formController[0].autoDirty = true;
                }
                scope.form = formController[0];
                /*register form with service*/
                formController[0].name = scope.name;
                formController[0].$setDirty();
                formService.setForm(formController[0]);
                /*register form at object level*/
                if (!angular.isDefined(scope.object.forms)) {
                    scope.object.forms = {};
                }
                scope.object.forms[scope.name] = formController[0];
            }
        };
    }
    SWFormRegistrar.Factory = function () {
        var directive = function (formService) { return new SWFormRegistrar(formService); };
        directive.$inject = [
            'formService'
        ];
        return directive;
    };
    return SWFormRegistrar;
}());
exports.SWFormRegistrar = SWFormRegistrar;
// 	angular.module('slatwalladmin').directive('swFormRegistrar',[ 'formService', 'partialsPath', (formService, partialsPath) => new swFormRegistrar(formService, partialsPath)]);
// }


/***/ }),
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWFormSubscriberController = /** @class */ (function () {
    //@ngInject
    function SWFormSubscriberController($log, $compile, $hibachi, utilityService, rbkeyService, $injector) {
        var _this = this;
        this.$log = $log;
        this.$compile = $compile;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.$injector = $injector;
        this.$onInit = function () {
            var bindToControllerProps = _this.$injector.get('swFormSubscriberDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i]) {
                    if (!_this[i] && _this.swForm && _this.swForm[i]) {
                        _this[i] = _this.swForm[i];
                    }
                }
            }
            _this.property = _this.property || _this.propertyIdentifier;
            _this.propertyIdentifier = _this.propertyIdentifier || _this.property;
            _this.type = _this.type || _this.fieldType;
            _this.fieldType = _this.fieldType || _this.type;
            _this.edit = _this.edit || _this.editing;
            _this.editing = _this.editing || _this.edit;
            _this.editing = _this.editing || true;
            _this.fieldType = _this.fieldType || "text";
            _this.inputAttributes = _this.inputAttributes || "";
        };
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.rbkeyService = rbkeyService;
        this.$log = $log;
        this.$injector = $injector;
    }
    return SWFormSubscriberController;
}());
var SWFormSubscriber = /** @class */ (function () {
    //ngInject
    function SWFormSubscriber() {
        this.restrict = "A";
        this.require = {
            swForm: "?^swForm",
            form: "?^form"
        };
        this.scope = {};
        this.bindToController = {
            propertyIdentifier: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            option: "=?",
            valueObject: "=?",
            object: "=?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            optionValues: "=?",
            edit: "=?",
            title: "@?",
            value: "=?",
            errorText: "@?",
            fieldType: "@?",
            property: "@?",
            inputAttributes: "@?",
            type: "@?",
            editing: "=?"
        };
        this.controller = SWFormSubscriberController;
        this.controllerAs = "SWFormSubscriber";
        this.link = function (scope, element, attr) {
        };
    }
    SWFormSubscriber.Factory = function () {
        var directive = function () { return new SWFormSubscriber(); };
        directive.$inject = [];
        return directive;
    };
    return SWFormSubscriber;
}());
exports.SWFormSubscriber = SWFormSubscriber;


/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var swpropertydisplay_1 = __webpack_require__(175);
var SWFPropertyDisplayController = /** @class */ (function (_super) {
    __extends(SWFPropertyDisplayController, _super);
    //@ngInject
    function SWFPropertyDisplayController($filter, utilityService, $injector, metadataService, observerService) {
        var _this = _super.call(this, $filter, utilityService, $injector, metadataService, observerService) || this;
        _this.$filter = $filter;
        _this.utilityService = utilityService;
        _this.$injector = $injector;
        _this.metadataService = metadataService;
        _this.observerService = observerService;
        _this.edit = true;
        return _this;
    }
    return SWFPropertyDisplayController;
}(swpropertydisplay_1.SWPropertyDisplayController));
exports.SWFPropertyDisplayController = SWFPropertyDisplayController;
var SWFPropertyDisplay = /** @class */ (function (_super) {
    __extends(SWFPropertyDisplay, _super);
    //@ngInject
    function SWFPropertyDisplay($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) {
        var _this = _super.call(this, $compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) || this;
        _this.$compile = $compile;
        _this.scopeService = scopeService;
        _this.coreFormPartialsPath = coreFormPartialsPath;
        _this.hibachiPathBuilder = hibachiPathBuilder;
        _this.swpropertyPartialPath = swpropertyPartialPath;
        _this.controller = SWFPropertyDisplayController;
        _this.controllerAs = "swfPropertyDisplay";
        _this.scope = {};
        _this.link = function (scope, element, attrs) {
        };
        return _this;
    }
    return SWFPropertyDisplay;
}(swpropertydisplay_1.SWPropertyDisplay));
exports.SWFPropertyDisplay = SWFPropertyDisplay;


/***/ }),
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWInputController = /** @class */ (function () {
    //@ngInject
    function SWInputController($scope, $log, $hibachi, $injector, listingService, utilityService, rbkeyService, observerService, metadataService) {
        var _this = this;
        this.$scope = $scope;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.$injector = $injector;
        this.listingService = listingService;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.observerService = observerService;
        this.metadataService = metadataService;
        this.eventAnnouncers = "";
        this.onSuccess = function () {
            _this.utilityService.setPropertyValue(_this.swForm.object, _this.propertyIdentifier, _this.value);
            if (_this.swPropertyDisplay) {
                _this.utilityService.setPropertyValue(_this.swPropertyDisplay.object, _this.propertyIdentifier, _this.value);
            }
            if (_this.swfPropertyDisplay) {
                _this.utilityService.setPropertyValue(_this.swfPropertyDisplay.object, _this.propertyIdentifier, _this.value);
                _this.swfPropertyDisplay.edit = false;
            }
            _this.utilityService.setPropertyValue(_this.swFormField.object, _this.propertyIdentifier, _this.value);
        };
        this.getValidationDirectives = function () {
            var spaceDelimitedList = '';
            var name = _this.propertyIdentifier;
            var form = _this.form;
            _this.$log.debug("Name is:" + name + " and form is: " + form);
            if (_this.metadataService.isAttributePropertyByEntityAndPropertyIdentifier(_this.object, _this.propertyIdentifier)) {
                _this.object.validations.properties[name] = [];
                if ((_this.object.metaData[_this.propertyIdentifier].requiredFlag && _this.object.metaData[_this.propertyIdentifier].requiredFlag == true) || typeof _this.object.metaData[_this.propertyIdentifier].requiredFlag === 'string' && _this.object.metaData[_this.propertyIdentifier].requiredFlag.trim().toLowerCase() == "yes") {
                    _this.object.validations.properties[name].push({
                        contexts: "save",
                        required: true
                    });
                }
                if (_this.object.metaData[_this.propertyIdentifier].validationRegex) {
                    _this.object.validations.properties[name].push({
                        contexts: "save", regex: _this.object.metaData[_this.propertyIdentifier].validationRegex
                    });
                }
            }
            if (angular.isUndefined(_this.object.validations)
                || angular.isUndefined(_this.object.validations.properties)
                || angular.isUndefined(_this.object.validations.properties[_this.propertyIdentifier])) {
                return '';
            }
            var validations = _this.object.validations.properties[_this.propertyIdentifier];
            _this.$log.debug("Validations: ", validations);
            _this.$log.debug(_this.form);
            var validationsForContext = [];
            //get the form context and the form name.
            var formContext = _this.swForm.context;
            var formName = _this.swForm.name;
            _this.$log.debug("Form context is: ");
            _this.$log.debug(formContext);
            _this.$log.debug("Form Name: ");
            _this.$log.debug(formName);
            //get the validations for the current element.
            var propertyValidations = _this.object.validations.properties[name];
            //check if the contexts match.
            if (angular.isObject(propertyValidations)) {
                //if this is a procesobject validation then the context is implied
                if (angular.isUndefined(propertyValidations[0].contexts) && _this.object.metaData.isProcessObject) {
                    propertyValidations[0].contexts = _this.object.metaData.className.split('_')[1];
                }
                if (propertyValidations[0].contexts.indexOf(formContext) > -1) {
                    _this.$log.debug("Matched");
                    for (var prop in propertyValidations[0]) {
                        if (prop != "contexts" && prop !== "conditions") {
                            spaceDelimitedList += (" swvalidation" + prop.toLowerCase() + "='" + propertyValidations[0][prop] + "'");
                        }
                    }
                }
                _this.$log.debug(spaceDelimitedList);
            }
            //loop over validations that are required and create the space delimited list
            _this.$log.debug(validations);
            //get all validations related to the form context;
            _this.$log.debug(form);
            angular.forEach(validations, function (validation, key) {
                if (validation.contexts && _this.utilityService.listFind(validation.contexts.toLowerCase(), _this.swForm.context.toLowerCase()) !== -1) {
                    _this.$log.debug("Validations for context");
                    _this.$log.debug(validation);
                    validationsForContext.push(validation);
                }
            });
            return spaceDelimitedList;
        };
        this.clear = function () {
            if (_this.reverted) {
                _this.reverted = false;
                _this.showRevert = true;
            }
            _this.edited = false;
            _this.value = _this.initialValue;
            if (_this.inListingDisplay && _this.rowSaveEnabled) {
                _this.listingService.markUnedited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID);
            }
        };
        this.revert = function () {
            _this.showRevert = false;
            _this.reverted = true;
            _this.value = _this.revertToValue;
            _this.onEvent({}, "change");
        };
        this.onEvent = function (event, eventName) {
            var customEventName = _this.swForm.name + _this.name + eventName;
            var formEventName = _this.swForm.name + eventName;
            var data = {
                event: event,
                eventName: eventName,
                form: _this.form,
                swForm: _this.swForm,
                swInput: _this,
                inputElement: $('input').first()[0]
            };
            _this.observerService.notify(customEventName, data);
            _this.observerService.notify(formEventName, data);
            _this.observerService.notify(eventName, data);
        };
        this.getTemplate = function () {
            var template = '';
            var validations = '';
            var currencyTitle = '';
            var currencyFormatter = '';
            var style = "";
            if (!_this.class) {
                _this.class = "form-control";
            }
            if (!_this.noValidate) {
                validations = _this.getValidationDirectives();
            }
            if (_this.object && _this.object.metaData && _this.object.metaData.$$getPropertyFormatType(_this.propertyIdentifier) != undefined && _this.object.metaData.$$getPropertyFormatType(_this.propertyIdentifier) == "currency") {
                currencyFormatter = 'sw-currency-formatter ';
                if (angular.isDefined(_this.object.data.currencyCode)) {
                    currencyFormatter = currencyFormatter + 'data-currency-code="' + _this.object.data.currencyCode + '" ';
                    currencyTitle = '<span class="s-title">' + _this.object.data.currencyCode + '</span>';
                }
            }
            var appConfig = _this.$hibachi.getConfig();
            var placeholder = '';
            if (_this.object.metaData && _this.object.metaData[_this.propertyIdentifier] && _this.object.metaData[_this.propertyIdentifier].hb_nullrbkey) {
                placeholder = _this.rbkeyService.getRBKey(_this.object.metaData[_this.propertyIdentifier].hb_nullrbkey);
            }
            if (_this.fieldType.toLowerCase() === 'json') {
                style = style += 'display:none';
            }
            var acceptedFieldTypes = ['email', 'text', 'password', 'number', 'time', 'date', 'datetime', 'json', 'file'];
            if (acceptedFieldTypes.indexOf(_this.fieldType.toLowerCase()) >= 0) {
                var inputType = _this.fieldType.toLowerCase();
                if (_this.fieldType === 'time' || _this.fieldType === 'number') {
                    inputType = "text";
                }
                template = currencyTitle + '<input type="' + inputType + '" class="' + _this.class + '" ' +
                    'ng-model="swInput.value" ' +
                    'ng-disabled="swInput.editable === false" ' +
                    'ng-show="swInput.edit" ' +
                    "ng-class=\"{'form-control':swInput.inListingDisplay, 'input-xs':swInput.inListingDisplay}\"" +
                    'name="' + _this.propertyIdentifier + '" ' +
                    'placeholder="' + placeholder + '" ' +
                    validations + currencyFormatter +
                    'id="swinput' + _this.swForm.name + _this.name + '" ' +
                    'style="' + style + '"' +
                    _this.inputAttributes +
                    _this.eventAnnouncerTemplate;
            }
            var dateFieldTypes = ['date', 'datetime', 'time'];
            if (dateFieldTypes.indexOf(_this.fieldType.toLowerCase()) >= 0) {
                template = template + 'datetime-picker ';
            }
            if (_this.fieldType === 'time') {
                template = template + 'data-time-only="true" date-format="' + appConfig.timeFormat.replace('tt', 'a') + '" ng-blur="swInput.pushBindings()"';
            }
            if (_this.fieldType === 'date') {
                template = template + 'data-date-only="true" future-only date-format="' + appConfig.dateFormat + '" ';
            }
            if (template.length) {
                template = template + ' />';
            }
            var actionButtons = "\n\t\t\t<a class=\"s-remove-change\"\n\t\t\t\tdata-ng-click=\"swPropertyDisplay.clear()\"\n\t\t\t\tdata-ng-if=\"swInput.edited && swInput.edit\">\n\t\t\t\t\t<i class=\"fa fa-remove\"></i>\n\t\t\t</a>\n\n\t\t\t<!-- Revert Button -->\n\t\t\t<button class=\"btn btn-xs btn-default s-revert-btn\"\n\t\t\t\t\tdata-ng-show=\"swInput.showRevert\"\n\t\t\t\t\tdata-ng-click=\"swInput.revert()\"\n\t\t\t\t\tdata-toggle=\"popover\"\n\t\t\t\t\tdata-trigger=\"hover\"\n\t\t\t\t\tdata-content=\"{{swInput.revertText}}\"\n\t\t\t\t\tdata-original-title=\"\"\n\t\t\t\t\ttitle=\"\">\n\t\t\t\t<i class=\"fa fa-refresh\"></i>\n\t\t\t</button>\n\t\t";
            return template + actionButtons;
        };
        this.pullBindings = function () {
            var bindToControllerProps = _this.$injector.get('swInputDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i]) {
                    if (!_this[i] && _this.swFormField && _this.swFormField[i]) {
                        _this[i] = _this.swFormField[i];
                    }
                    else if (!_this[i] && _this.swPropertyDisplay && _this.swPropertyDisplay[i]) {
                        _this[i] = _this.swPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swfPropertyDisplay && _this.swfPropertyDisplay[i]) {
                        _this[i] = _this.swfPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swForm && _this.swForm[i]) {
                        _this[i] = _this.swForm[i];
                    }
                }
            }
            _this.edit = _this.edit || true;
            _this.fieldType = _this.fieldType || "text";
            _this.inputAttributes = _this.inputAttributes || "";
            _this.inputAttributes = _this.utilityService.replaceAll(_this.inputAttributes, "'", '"');
            _this.value = _this.utilityService.getPropertyValue(_this.object, _this.propertyIdentifier);
        };
        this.pushBindings = function () {
            _this.observerService.notify('updateBindings').then(function () { });
        };
        this.$onInit = function () {
            _this.pullBindings();
            _this.eventAnnouncersArray = _this.eventAnnouncers.split(',');
            _this.eventAnnouncerTemplate = "";
            for (var i in _this.eventAnnouncersArray) {
                var eventName = _this.eventAnnouncersArray[i];
                if (eventName.length) {
                    _this.eventAnnouncerTemplate += " ng-" + eventName + "=\"swInput.onEvent($event,'" + eventName + "')\"";
                }
            }
            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
                _this.eventNameForObjectSuccess = _this.object.metaData.className.split('_')[0] + _this.context.charAt(0).toUpperCase() + _this.context.slice(1) + 'Success';
            }
            else {
                _this.eventNameForObjectSuccess = _this.context.charAt(0).toUpperCase() + _this.context.slice(1) + 'Success';
            }
            var eventNameForObjectSuccessID = _this.eventNameForObjectSuccess + _this.propertyIdentifier;
            var eventNameForUpdateBindings = 'updateBindings';
            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
                var eventNameForUpdateBindingsID = _this.object.metaData.className.split('_')[0] + _this.propertyIdentifier + 'updateBindings';
            }
            else {
                var eventNameForUpdateBindingsID = _this.propertyIdentifier + 'updateBindings';
            }
            var eventNameForPullBindings = 'pullBindings';
            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
                var eventNameForPullBindingsID = _this.object.metaData.className.split('_')[0] + _this.propertyIdentifier + 'pullBindings';
            }
            else {
                var eventNameForPullBindingsID = _this.propertyIdentifier + 'pullBindings';
            }
            //attach a successObserver
            if (_this.object) {
                //update bindings on save success
                _this.observerService.attach(_this.onSuccess, _this.eventNameForObjectSuccess, eventNameForObjectSuccessID);
                //update bindings manually
                _this.observerService.attach(_this.onSuccess, eventNameForUpdateBindings, eventNameForUpdateBindingsID);
                //pull bindings from higher binding level manually
                _this.observerService.attach(_this.pullBindings, eventNameForPullBindings, eventNameForPullBindingsID);
            }
            _this.$scope.$on("$destroy", function () {
                _this.observerService.detachById(eventNameForUpdateBindings);
                _this.observerService.detachById(eventNameForUpdateBindingsID);
            });
        };
    }
    return SWInputController;
}());
var SWInput = /** @class */ (function () {
    //ngInject
    function SWInput($compile, $timeout, $parse, fileService) {
        var _this = this;
        this.$compile = $compile;
        this.$timeout = $timeout;
        this.$parse = $parse;
        this.fileService = fileService;
        this.restrict = "E";
        this.require = {
            swForm: "?^swForm",
            form: "?^form",
            swFormField: "?^swFormField",
            swPropertyDisplay: "?^swPropertyDisplay",
            swfPropertyDisplay: "?^swfPropertyDisplay"
        };
        this.scope = {};
        this.bindToController = {
            propertyIdentifier: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            option: "=?",
            valueObject: "=?",
            object: "=?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            inListingDisplay: "=?",
            listingID: "=?",
            pageRecordIndex: "=?",
            propertyDisplayID: "=?",
            initialValue: "=?",
            optionValues: "=?",
            edit: "=?",
            title: "@?",
            value: "=?",
            errorText: "@?",
            fieldType: "@?",
            property: "@?",
            binaryFileTarget: "@?",
            rawFileTarget: "@?",
            reverted: "=?",
            revertToValue: "=?",
            showRevert: "=?",
            inputAttributes: "@?",
            type: "@?",
            eventAnnouncers: "@?",
            context: "@?"
        };
        this.controller = SWInputController;
        this.controllerAs = "swInput";
        this.link = function (scope, element, attr) {
            if (scope.swInput.type === 'file') {
                if (angular.isUndefined(scope.swInput.object.data[scope.swInput.rawFileTarget])) {
                    scope.swInput.object[scope.swInput.rawFileTarget] = "";
                    scope.swInput.object.data[scope.swInput.rawFileTarget] = "";
                }
                var model = _this.$parse("swInput.object.data[swInput.rawFileTarget]");
                var modelSetter = model.assign;
                element.bind("change", function (e) {
                    var fileToUpload = (e.srcElement || e.target).files[0];
                    scope.$apply(function () {
                        modelSetter(scope, fileToUpload);
                    }, function () {
                        throw ("swinput couldn't apply the file to scope");
                    });
                    _this.$timeout(function () {
                        _this.fileService.uploadFile(fileToUpload, scope.swInput.object, scope.swInput.binaryFileTarget)
                            .then(function (result) {
                            scope.swInput.object[scope.swInput.property] = fileToUpload;
                            scope.swInput.onEvent(e, "change");
                        }, function () {
                            //error	notify user
                        });
                    });
                });
            }
            //renders the template and compiles it
            element.html(scope.swInput.getTemplate());
            _this.$compile(element.contents())(scope);
        };
    }
    SWInput.Factory = function () {
        var directive = function ($compile, $timeout, $parse, fileService) { return new SWInput($compile, $timeout, $parse, fileService); };
        directive.$inject = [
            '$compile',
            '$timeout',
            '$parse',
            'fileService'
        ];
        return directive;
    };
    return SWInput;
}());
exports.SWInput = SWInput;


/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//module
var core_module_1 = __webpack_require__(8);
//services
var fileservice_1 = __webpack_require__(687);
//directives
//  components
//form
var swinput_1 = __webpack_require__(685);
var swfformfield_1 = __webpack_require__(676);
var swform_1 = __webpack_require__(677);
var swfform_1 = __webpack_require__(675);
var swformfield_1 = __webpack_require__(678);
var swformfieldfile_1 = __webpack_require__(679);
var swformfieldjson_1 = __webpack_require__(680);
var swformfieldsearchselect_1 = __webpack_require__(681);
var swformregistrar_1 = __webpack_require__(682);
var swerrordisplay_1 = __webpack_require__(674);
var swaddressform_1 = __webpack_require__(673);
var swpropertydisplay_1 = __webpack_require__(175);
var swfpropertydisplay_1 = __webpack_require__(684);
var swformsubscriber_1 = __webpack_require__(683);
var formmodule = angular.module('hibachi.form', ['angularjs-datetime-picker', core_module_1.coremodule.name]).config(function () {
})
    .constant('coreFormPartialsPath', 'form/components/')
    .service('fileService', fileservice_1.FileService)
    //directives
    .directive('swInput', swinput_1.SWInput.Factory())
    .directive('swfFormField', swfformfield_1.SWFFormField.Factory())
    .directive('swForm', swform_1.SWForm.Factory())
    .directive('swfForm', swfform_1.SWFForm.Factory())
    .directive('swFormField', swformfield_1.SWFormField.Factory())
    .directive('swFormFieldFile', swformfieldfile_1.SWFormFieldFile.Factory())
    .directive('swFormFieldJson', swformfieldjson_1.SWFormFieldJson.Factory())
    .directive('swFormFieldSearchSelect', swformfieldsearchselect_1.SWFormFieldSearchSelect.Factory())
    .directive('swFormRegistrar', swformregistrar_1.SWFormRegistrar.Factory())
    .directive('swfPropertyDisplay', swfpropertydisplay_1.SWFPropertyDisplay.Factory(swfpropertydisplay_1.SWFPropertyDisplay, "swfpropertydisplay.html"))
    .directive('swPropertyDisplay', swpropertydisplay_1.SWPropertyDisplay.Factory(swpropertydisplay_1.SWPropertyDisplay, "propertydisplay.html"))
    .directive('swErrorDisplay', swerrordisplay_1.SWErrorDisplay.Factory())
    .directive('swAddressForm', swaddressform_1.SWAddressForm.Factory())
    .directive('swFormSubscriber', swformsubscriber_1.SWFormSubscriber.Factory());
exports.formmodule = formmodule;


/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FileService = /** @class */ (function () {
    //@ngInject
    function FileService($q, observerService) {
        var _this = this;
        this.$q = $q;
        this.observerService = observerService;
        this.fileStates = {};
        this.imageExists = function (src) {
            var deferred = _this.$q.defer();
            var image = new Image();
            image.onerror = function () {
                deferred.reject();
            };
            image.onload = function () {
                deferred.resolve();
            };
            image.src = src;
            return deferred.promise;
        };
        this.uploadFile = function (file, object, property) {
            var deferred = _this.$q.defer();
            var promise = deferred.promise;
            var fileReader = new FileReader();
            fileReader.readAsDataURL(file);
            fileReader.onload = function (result) {
                object.data[property] = fileReader.result;
                deferred.resolve(fileReader.result);
            };
            fileReader.onerror = function (result) {
                deferred.reject();
                throw ("fileservice couldn't read the file");
            };
            return promise;
        };
    }
    return FileService;
}());
exports.FileService = FileService;


/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSaveAndFinishController = /** @class */ (function () {
    //@ngInject
    function SWSaveAndFinishController($hibachi, dialogService, alertService, rbkeyService, $log) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.dialogService = dialogService;
        this.alertService = alertService;
        this.rbkeyService = rbkeyService;
        this.$log = $log;
        this.saving = false;
        this.initialSetup = function () {
            if (!angular.isDefined(_this.finish)) {
                _this.openNewDialog = false;
            }
            else {
                _this.openNewDialog = (_this.finish.toLowerCase() == 'true') ? false : true;
            }
            if (_this.openNewDialog) {
                _this.rbKey = 'admin.define.saveandnew';
            }
            else {
                _this.rbKey = 'admin.define.saveandfinish';
            }
        };
        this.save = function () {
            _this.saving = true;
            var savePromise = _this.entity.$$save();
            savePromise.then(function (data) {
                _this.dialogService.removeCurrentDialog();
                if (_this.openNewDialog && angular.isDefined(_this.partial)) {
                    _this.dialogService.addPageDialog(_this.partial);
                }
                else {
                    if (angular.isDefined(_this.redirectUrl)) {
                        window.location.href = _this.redirectUrl;
                    }
                    else if (angular.isDefined(_this.redirectAction)) {
                        if (angular.isUndefined(_this.redirectQueryString)) {
                            _this.redirectQueryString = "";
                        }
                        window.location.href = _this.$hibachi.buildUrl(_this.redirectAction, _this.redirectQueryString);
                    }
                    else {
                        _this.$log.debug("You did not specify a redirect for swSaveAndFinish");
                    }
                }
            }).catch(function (data) {
                if (angular.isDefined(_this.customErrorRbkey)) {
                    data = _this.rbkeyService.getRBKey(_this.customErrorRbkey);
                }
                if (angular.isString(data)) {
                    var alert = _this.alertService.newAlert();
                    alert.msg = data;
                    alert.type = "error";
                    alert.fade = true;
                    _this.alertService.addAlert(alert);
                }
                else {
                    _this.alertService.addAlerts(data);
                }
            }).finally(function () {
                _this.saving = false;
            });
        };
        if (!angular.isFunction(this.entity.$$save)) {
            throw ("Your entity does not have the $$save function.");
        }
        this.initialSetup();
    }
    return SWSaveAndFinishController;
}());
exports.SWSaveAndFinishController = SWSaveAndFinishController;
var SWSaveAndFinish = /** @class */ (function () {
    //@ngInject
    function SWSaveAndFinish(hibachiPartialsPath, hibachiPathBuilder) {
        this.hibachiPartialsPath = hibachiPartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.controller = SWSaveAndFinishController;
        this.controllerAs = "swSaveAndFinish";
        this.bindToController = {
            entity: "=",
            redirectUrl: "@?",
            redirectAction: "@?",
            redirectQueryString: "@?",
            finish: "@?",
            partial: "@?",
            customErrorRbkey: "@?"
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(hibachiPartialsPath) + "saveandfinish.html";
    }
    SWSaveAndFinish.Factory = function () {
        var directive = function (hibachiPartialsPath, hibachiPathBuilder) { return new SWSaveAndFinish(hibachiPartialsPath, hibachiPathBuilder); };
        directive.$inject = ["hibachiPartialsPath", "hibachiPathBuilder"];
        return directive;
    };
    return SWSaveAndFinish;
}());
exports.SWSaveAndFinish = SWSaveAndFinish;


/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//import alertmodule = require('./alert/alert.module');
var alert_module_1 = __webpack_require__(169);
var card_module_1 = __webpack_require__(544);
var collection_module_1 = __webpack_require__(170);
var listing_module_1 = __webpack_require__(704);
var dialog_module_1 = __webpack_require__(173);
var entity_module_1 = __webpack_require__(174);
var pagination_module_1 = __webpack_require__(707);
var form_module_1 = __webpack_require__(686);
var validation_module_1 = __webpack_require__(725);
var workflow_module_1 = __webpack_require__(176);
//directives
var swsaveandfinish_1 = __webpack_require__(688);
var hibachimodule = angular.module('hibachi', [
    alert_module_1.alertmodule.name,
    card_module_1.cardmodule.name,
    collection_module_1.collectionmodule.name,
    entity_module_1.entitymodule.name,
    dialog_module_1.dialogmodule.name,
    listing_module_1.listingmodule.name,
    pagination_module_1.paginationmodule.name,
    form_module_1.formmodule.name,
    validation_module_1.validationmodule.name,
    workflow_module_1.workflowmodule.name
]).config([function () {
    }])
    .run(['$rootScope', 'publicService', '$hibachi', 'localStorageService', function ($rootScope, publicService, $hibachi, localStorageService) {
        $rootScope.hibachiScope = publicService;
        $rootScope.hasAccount = publicService.hasAccount;
        if ($hibachi.newAccount) {
            $rootScope.hibachiScope.getAccount();
        }
        if ($hibachi.newOrder) {
            $rootScope.hibachiScope.getCart();
        }
        if ($hibachi.newCountry) {
            $rootScope.hibachiScope.getCountries();
        }
        if ($hibachi.newState) {
            $rootScope.hibachiScope.getStates();
        }
        if ($hibachi.newState) {
            $rootScope.hibachiScope.getAddressOptions();
        }
        if (localStorageService.hasItem('selectedPersonalCollection')) {
            $rootScope.hibachiScope.selectedPersonalCollection = angular.fromJson(localStorageService.getItem('selectedPersonalCollection'));
        }
    }])
    .constant('hibachiPartialsPath', 'hibachi/components/')
    .directive('swSaveAndFinish', swsaveandfinish_1.SWSaveAndFinish.Factory());
exports.hibachimodule = hibachimodule;


/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingAggregateController = /** @class */ (function () {
    function SWListingAggregateController() {
        var _this = this;
        this.init = function () {
            _this.editable = _this.editable || false;
        };
        this.init();
    }
    return SWListingAggregateController;
}());
var SWListingAggregate = /** @class */ (function () {
    function SWListingAggregate() {
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            aggregateFunction: "@",
            aggregateAlias: "@?"
        };
        this.controller = SWListingAggregateController;
        this.controllerAs = "swListingAggregate";
        this.link = function (scope, element, attrs) {
            var aggregate = {
                propertyIdentifier: scope.swListingAggregate.propertyIdentifier,
                aggregateFunction: scope.swListingAggregate.aggregateFunction,
                aggregateAlias: scope.swListingAggregate.aggregateAlias,
            };
            scope.$parent.swListingDisplay.aggregates.push(aggregate);
        };
    }
    SWListingAggregate.Factory = function () {
        var directive = function () { return new SWListingAggregate(); };
        directive.$inject = [];
        return directive;
    };
    return SWListingAggregate;
}());
exports.SWListingAggregate = SWListingAggregate;


/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingColorFilterController = /** @class */ (function () {
    function SWListingColorFilterController() {
        this.init = function () {
        };
        this.init();
    }
    return SWListingColorFilterController;
}());
var SWListingColorFilter = /** @class */ (function () {
    function SWListingColorFilter(utilityService) {
        var _this = this;
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyToCompare: "@",
            comparisonOperator: "@",
            comparisonValue: "@",
            comparisonProperty: "@",
            colorClass: "@",
            color: "@"
        };
        this.controller = SWListingColorFilterController;
        this.controllerAs = "swListingColorFilter";
        this.link = function (scope, element, attrs) {
            var colorFilter = {
                propertyToCompare: scope.swListingColorFilter.propertyToCompare,
                comparisonOperator: scope.swListingColorFilter.comparisonOperator,
                comparisonValue: scope.swListingColorFilter.comparisonValue,
                comparisonProperty: scope.swListingColorFilter.comparisonProperty,
                colorClass: scope.swListingColorFilter.colorClass,
                color: scope.swListingColorFilter.color
            };
            if (_this.utilityService.ArrayFindByPropertyValue(scope.$parent.swListingDisplay.colorFilters, 'propertyToCompare', colorFilter.propertyToCompare) === -1) {
                scope.$parent.swListingDisplay.colorFilters.push(colorFilter);
            }
        };
    }
    SWListingColorFilter.Factory = function () {
        var directive = function (utilityService) { return new SWListingColorFilter(utilityService); };
        directive.$inject = [
            'utilityService'
        ];
        return directive;
    };
    return SWListingColorFilter;
}());
exports.SWListingColorFilter = SWListingColorFilter;


/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingColumnController = /** @class */ (function () {
    //@ngInject
    function SWListingColumnController($injector, utilityService, listingService, rbkeyService) {
        var _this = this;
        this.$injector = $injector;
        this.utilityService = utilityService;
        this.listingService = listingService;
        this.rbkeyService = rbkeyService;
        this.hasCellView = false;
        this.hasHeaderView = false;
        this.$onInit = function () {
            if (angular.isUndefined(_this.isVisible)) {
                _this.isVisible = true;
            }
            if (angular.isUndefined(_this.isExportable)) {
                _this.isExportable = true;
            }
            if (angular.isUndefined(_this.isDeletable)) {
                _this.isDeletable = true;
            }
            if (angular.isUndefined(_this.search)) {
                _this.search = true;
            }
            _this.editable = _this.editable || false;
            //did a cellView get suggested, if so does it exist
            if (_this.cellView) {
                if (_this.$injector.has(_this.cellView + 'Directive')) {
                    _this.hasCellView = true;
                }
                else {
                    throw (_this.cellView + ' is not an existing directive');
                }
            }
            if (_this.headerView) {
                if (_this.$injector.has(_this.headerView + 'Directive')) {
                    _this.hasHeaderView = true;
                }
                else {
                    throw (_this.headerView + ' is not an existing directive');
                }
            }
            _this.column = {
                columnID: "C" + _this.utilityService.createID(31),
                propertyIdentifier: _this.propertyIdentifier,
                fallbackPropertyIdentifiers: _this.fallbackPropertyIdentifiers,
                processObjectProperty: _this.processObjectProperty,
                title: _this.title,
                tdclass: _this.tdclass,
                search: _this.search,
                sort: _this.sort,
                filter: _this.filter,
                range: _this.range,
                editable: _this.editable,
                buttonGroup: _this.buttonGroup,
                hasCellView: _this.hasCellView,
                hasHeaderView: _this.hasHeaderView,
                isVisible: _this.isVisible,
                isDeletable: _this.isDeletable,
                isSearchable: _this.search,
                isExportable: _this.isExportable,
                action: _this.action,
                queryString: _this.queryString,
                persistent: _this.persistent
            };
            if (_this.hasCellView) {
                _this.column.cellView = _this.cellView;
            }
            if (_this.hasHeaderView) {
                _this.column.headerView = _this.utilityService.camelCaseToSnakeCase(_this.headerView);
            }
            //aggregate logic
            if (_this.aggregate) {
                _this.column.aggregate = _this.aggregate;
                _this.column.aggregate.propertyIdentifier = _this.propertyIdentifier;
            }
        };
        this.$injector = $injector;
        this.utilityService = utilityService;
        this.listingService = listingService;
        this.rbkeyService = rbkeyService;
    }
    return SWListingColumnController;
}());
var SWListingColumn = /** @class */ (function () {
    //@ngInject
    function SWListingColumn(listingService) {
        var _this = this;
        this.listingService = listingService;
        this.restrict = 'EA';
        this.scope = true;
        this.require = { swListingDisplay: "?^swListingDisplay" };
        this.bindToController = {
            propertyIdentifier: "@",
            processObjectProperty: "@?",
            //defined as aggregate = {aggregateFunction:'COUNT',aggregateAlias:'aliasstring'}
            aggregate: "=?",
            title: "@?",
            tdclass: "@?",
            search: "=?",
            sort: "=?",
            filter: "=?",
            isVisible: "=?",
            isDeletable: "=?",
            isExportable: "=?",
            range: "=?",
            editable: "=?",
            buttonGroup: "=?",
            cellView: "@?",
            headerView: "@?",
            fallbackPropertyIdentifiers: "@?",
            action: "@?",
            queryString: "@?"
        };
        this.controller = SWListingColumnController;
        this.controllerAs = "swListingColumn";
        this.link = function (scope, elem, attr, listingService) {
            if (angular.isDefined(scope.swListingDisplay)
                && scope.swListingDisplay.tableID
                && scope.swListingDisplay.tableID.length) {
                var listingDisplayID = scope.swListingDisplay.tableID;
                if (scope.swListingDisplay.usePersonalCollection != true
                    && scope.swListingDisplay.columns) {
                    _this.listingService.addColumn(listingDisplayID, scope.swListingColumn.column);
                    _this.listingService.setupColumn(listingDisplayID, scope.swListingColumn.column);
                }
            }
            else if (angular.isDefined(scope.swListingColumn.swListingDisplay)
                && scope.swListingColumn.swListingDisplay.tableID
                && scope.swListingColumn.swListingDisplay.tableID.length
                && scope.swListingColumn.swListingDisplay.usePersonalCollection != true
                && scope.swListingColumn.swListingDisplay.columns) {
                var listingDisplayID = scope.swListingColumn.swListingDisplay.tableID;
                _this.listingService.addColumn(listingDisplayID, scope.swListingColumn.column);
            }
            else {
                throw ("listing display scope not available to sw-listing-column or there is no table id");
            }
        };
    }
    SWListingColumn.Factory = function () {
        var directive = function (listingService) { return new SWListingColumn(listingService); };
        directive.$inject = [
            'listingService'
        ];
        return directive;
    };
    return SWListingColumn;
}());
exports.SWListingColumn = SWListingColumn;


/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingControlsController = /** @class */ (function () {
    //@ngInject
    function SWListingControlsController($hibachi, metadataService, collectionService, listingService, observerService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.metadataService = metadataService;
        this.collectionService = collectionService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.displayOptionsClosed = true;
        this.filtersClosed = true;
        this.personalCollectionsClosed = true;
        this.columnIsControllableMap = {};
        this.filterActions = function (res) {
            if (res.action == 'add' || res.action == 'remove') {
                _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });
            }
            _this.filtersClosed = true;
        };
        this.getSelectedSearchColumnName = function () {
            return (angular.isUndefined(_this.selectedSearchColumn)) ? 'All' : _this.selectedSearchColumn.title;
        };
        this.canDisplayColumn = function (column) {
            if (!_this.listingColumns || !_this.listingColumns.length) {
                return true;
            }
            if (angular.isDefined(_this.columnIsControllableMap[column.propertyIdentifier])) {
                return _this.columnIsControllableMap[column.propertyIdentifier];
            }
            for (var i = 0; i < _this.listingColumns.length; i++) {
                if (column.propertyIdentifier == _this.listingColumns[i].propertyIdentifier) {
                    _this.columnIsControllableMap[column.propertyIdentifier] = true;
                }
            }
            if (!_this.columnIsControllableMap[column.propertyIdentifier]) {
                _this.columnIsControllableMap[column.propertyIdentifier] = false;
            }
            return _this.columnIsControllableMap[column.propertyIdentifier];
        };
        this.addSearchFilter = function () {
            if (angular.isUndefined(_this.selectedSearchColumn) || !_this.searchText)
                return;
            var keywords = _this.searchText.split(" ");
            for (var i = 0; i < keywords.length; i++) {
                _this.collectionConfig.addLikeFilter(_this.selectedSearchColumn.propertyIdentifier, keywords[i], '%w%', undefined, _this.selectedSearchColumn.title);
            }
            _this.searchText = '';
            _this.collectionConfig.setKeywords(_this.searchText);
            _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });
        };
        this.toggleDisplayOptions = function (closeButton) {
            if (closeButton === void 0) { closeButton = false; }
            if (closeButton) {
                _this.displayOptionsClosed = true;
            }
            else {
                _this.displayOptionsClosed = !_this.displayOptionsClosed;
            }
        };
        this.setItemInUse = function (booleanValue) {
            _this.itemInUse = booleanValue;
        };
        this.removeFilter = function (array, index, reloadCollection) {
            if (reloadCollection === void 0) { reloadCollection = true; }
            array.splice(index, 1);
            if (reloadCollection) {
                _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });
            }
        };
        this.toggleFilters = function () {
            if (_this.filtersClosed) {
                if (_this.simple) {
                    _this.newFilterPosition = _this.collectionService.newFilterItem(_this.collectionConfig.filterGroups[0].filterGroup, _this.setItemInUse);
                }
            }
            _this.filtersClosed = !_this.filtersClosed;
        };
        this.togglePersonalCollections = function () {
            _this.personalCollectionsClosed = !_this.personalCollectionsClosed;
        };
        this.selectFilterItem = function (filterItem) {
            _this.filtersClosed = false;
            _this.collectionService.selectFilterItem(filterItem);
        };
        this.saveCollection = function (collectionConfig) {
            if (collectionConfig) {
                _this.collectionConfig = collectionConfig;
            }
            _this.swListingDisplay.collectionConfig = _this.collectionConfig;
            _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });
        };
        this.exportCollection = function () {
            _this.swListingDisplay.exportCurrentList();
        };
        this.printCollection = function (printTemplateID) {
            _this.swListingDisplay.printCurrentList(printTemplateID);
        };
        if (angular.isUndefined(this.showPrintOptions)) {
            this.showPrintOptions = false;
        }
        if (angular.isUndefined(this.showExport)) {
            this.showExport = true;
        }
        if (angular.isUndefined(this.showToggleSearch)) {
            this.showToggleSearch = true;
        }
        if (angular.isUndefined(this.showToggleFilters)) {
            this.showToggleFilters = true;
        }
        if (angular.isUndefined(this.showToggleDisplayOptions)) {
            this.showToggleDisplayOptions = true;
        }
        if (angular.isUndefined(this.showFilters)) {
            this.showFilters = false;
        }
        this.backupColumnsConfig = this.collectionConfig.getColumns();
        if (angular.isDefined(this.tableId)) {
            this.listingColumns = this.listingService.getListingColumns(this.tableId);
        }
        if (angular.isUndefined(this.simple)) {
            this.simple = true;
        }
        this.filterPropertiesList = {};
        $hibachi.getFilterPropertiesByBaseEntityName(this.collectionConfig.baseEntityAlias).then(function (value) {
            metadataService.setPropertiesList(value, _this.collectionConfig.baseEntityAlias);
            _this.filterPropertiesList[_this.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias(_this.collectionConfig.baseEntityAlias);
            metadataService.formatPropertiesList(_this.filterPropertiesList[_this.collectionConfig.baseEntityAlias], _this.collectionConfig.baseEntityAlias);
        });
        this.observerService.attach(this.filterActions, 'filterItemAction');
    }
    return SWListingControlsController;
}());
var SWListingControls = /** @class */ (function () {
    function SWListingControls(collectionPartialsPath, hibachiPathBuilder) {
        this.collectionPartialsPath = collectionPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'E';
        this.scope = {};
        this.require = { swListingDisplay: '?^swListingDisplay' };
        this.bindToController = {
            collectionConfig: "=",
            tableId: "=?",
            getCollection: "&",
            showExport: "=?",
            showFilters: "=?",
            showPrintOptions: "=?",
            showToggleSearch: "=?",
            showToggleFilters: "=?",
            showToggleDisplayOptions: "=?",
            displayOptionsClosed: "=?",
            simple: "=?"
        };
        this.controller = SWListingControlsController;
        this.controllerAs = 'swListingControls';
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "listingcontrols.html";
    }
    SWListingControls.Factory = function () {
        var directive = function (listingPartialPath, hibachiPathBuilder) { return new SWListingControls(listingPartialPath, hibachiPathBuilder); };
        directive.$inject = ['listingPartialPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWListingControls.$inject = ['listingPartialPath', 'hibachiPathBuilder'];
    return SWListingControls;
}());
exports.SWListingControls = SWListingControls;


/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/* SwListingDisableRule
 * defines a filter, by which to determine what rows will be disabled
 */
var SWListingDisableRuleController = /** @class */ (function () {
    //@ngInject
    function SWListingDisableRuleController($q) {
        this.$q = $q;
    }
    return SWListingDisableRuleController;
}());
var SWListingDisableRule = /** @class */ (function () {
    function SWListingDisableRule(scopeService, $q) {
        var _this = this;
        this.scopeService = scopeService;
        this.$q = $q;
        this.restrict = 'EA';
        this.scope = true;
        this.template = "\n        \n    ";
        this.bindToController = {
            filterPropertyIdentifier: "@",
            filterComparisonOperator: "@",
            filterComparisonValue: "@"
        };
        this.controller = SWListingDisableRuleController;
        this.controllerAs = "swListingDisableRule";
        this.link = function (scope, element, attrs) {
            var rule = {
                filterPropertyIdentifier: scope.swListingDisableRule.filterPropertyIdentifier,
                filterComparisonOperator: scope.swListingDisableRule.filterComparisonOperator,
                filterComparisonValue: scope.swListingDisableRule.filterComparisonValue
            };
            var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");
            if (angular.isDefined(listingDisplayScope.swListingDisplay)) {
                listingDisplayScope = listingDisplayScope.swListingDisplay;
            }
            else {
                throw ("listing display scope not available to sw-listing-disable-rule");
            }
            listingDisplayScope.disableRules.push(rule);
        };
    }
    SWListingDisableRule.Factory = function () {
        var directive = function (scopeService, $q) { return new SWListingDisableRule(scopeService, $q); };
        directive.$inject = [
            'scopeService',
            '$q'
        ];
        return directive;
    };
    return SWListingDisableRule;
}());
exports.SWListingDisableRule = SWListingDisableRule;


/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingDisplayController = /** @class */ (function () {
    //@ngInject
    function SWListingDisplayController($scope, $rootScope, $transclude, $timeout, $q, $hibachi, utilityService, collectionConfigService, listingService, paginationService, selectionService, observerService, rbkeyService, localStorageService) {
        var _this = this;
        this.$scope = $scope;
        this.$rootScope = $rootScope;
        this.$transclude = $transclude;
        this.$timeout = $timeout;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.paginationService = paginationService;
        this.selectionService = selectionService;
        this.observerService = observerService;
        this.rbkeyService = rbkeyService;
        this.localStorageService = localStorageService;
        /* local state variables */
        this.actions = [];
        this.allpropertyidentifiers = "";
        this.allprocessobjectproperties = "false";
        this.aggregates = [];
        this.buttonGroup = [];
        this.childCollectionConfigs = {};
        this.collectionConfigs = [];
        this.collectionObjects = [];
        this.colorFilters = [];
        this.columns = [];
        this.disableRules = [];
        this.expandableRules = [];
        this.exampleEntity = "";
        this.filters = [];
        this.filterGroups = [];
        this.hideRules = [];
        this.multiselectable = false;
        this.orderBys = [];
        this.orderByStates = {};
        this.orderByIndices = {};
        this.pageRecordsWithManualSortOrder = {};
        this.searching = false;
        this.selectable = false;
        this.showSearchFilters = false;
        this.sortable = false;
        this.processCollection = function () {
            _this.initializeState();
            if (angular.isDefined(_this.collectionPromise)) {
                _this.hasCollectionPromise = true;
                _this.multipleCollectionDeffered.reject();
            }
            if (_this.collectionConfig != null) {
                _this.multipleCollectionDeffered.reject();
            }
            _this.listingService.setListingState(_this.tableID, _this);
            //this is performed after the listing state is set above to populate columns and multiple collectionConfigs if present
            _this.$transclude(_this.$scope, function () { });
            _this.hasCollectionPromise = angular.isDefined(_this.collectionPromise);
            if (_this.multiSlot) {
                _this.singleCollectionPromise.then(function () {
                    _this.multipleCollectionDeffered.reject();
                });
                _this.multipleCollectionPromise.then(function () {
                    //now do the intial setup
                    _this.listingService.setupInMultiCollectionConfigMode(_this.tableID);
                }).catch(function () {
                    //do the initial setup for single collection mode
                    _this.listingService.setupInSingleCollectionConfigMode(_this.tableID, _this.$scope);
                }).finally(function () {
                    if (angular.isUndefined(_this.getCollection)) {
                        _this.getCollection = _this.listingService.setupDefaultGetCollection(_this.tableID);
                    }
                    _this.paginator.getCollection = _this.getCollection;
                    _this.observerService.attach(_this.getCollectionObserver, 'getCollection', _this.tableID);
                });
            }
            else if (_this.multiSlot == false) {
                if (_this.columns && _this.columns.length) {
                    _this.collectionConfig.columns = _this.columns;
                }
                _this.setupCollectionPromise();
            }
            if (!_this.collectionObject && (_this.collectionConfig && _this.collectionConfig.baseEntityName)) {
                _this.collectionObject = _this.collectionConfig.baseEntityName;
            }
            if (_this.collectionObject) {
                _this.exampleEntity = _this.$hibachi.getEntityExample(_this.collectionObject);
            }
            _this.observerService.attach(_this.getCollectionByPagination, 'swPaginationAction', _this.tableID);
        };
        this.getCollectionByPagination = function (state) {
            if (state.type) {
                switch (state.type) {
                    case 'setCurrentPage':
                        _this.collectionConfig.currentPage = state.payload;
                        break;
                    case 'nextPage':
                        _this.collectionConfig.currentPage = state.payload;
                        break;
                    case 'prevPage':
                        _this.collectionConfig.currentPage = state.payload;
                        break;
                    case 'setPageShow':
                        _this.collectionConfig.currentPage = 1;
                        _this.collectionConfig.setPageShow(state.payload);
                        break;
                }
                _this.getCollection = _this.collectionConfig.getEntity().then(function (data) {
                    _this.collectionData = data;
                    _this.observerService.notifyById('swPaginationUpdate', _this.tableID, _this.collectionData);
                });
            }
        };
        this.setupCollectionPromise = function () {
            if (angular.isUndefined(_this.getCollection)) {
                _this.getCollection = _this.listingService.setupDefaultGetCollection(_this.tableID);
            }
            _this.paginator.getCollection = _this.getCollection;
            var getCollectionEventID = _this.tableID;
            //this.observerService.attach(this.getCollectionObserver,'getCollection',getCollectionEventID);
            _this.listingService.getCollection(_this.tableID);
        };
        this.getCollectionObserver = function (param) {
            _this.collectionConfig.loadJson(param.collectionConfig);
            _this.collectionData = undefined;
            _this.$timeout(function () {
                _this.getCollection();
            });
        };
        this.initializeState = function () {
            if (_this.name != null) {
                _this.tableID = _this.name;
            }
            else {
                _this.tableID = 'LD' + _this.utilityService.createID();
            }
            if (angular.isUndefined(_this.collectionConfig)) {
                //make it available to swCollectionConfig
                _this.collectionConfig = null;
            }
            if (angular.isUndefined(_this.multiSlot)) {
                _this.multiSlot = false;
            }
            if (angular.isDefined(_this.administrativeCount)) {
                _this.administrativeCount = parseInt(_this.administrativeCount);
            }
            else {
                _this.administrativeCount = 0;
            }
            if (_this.recordDetailAction && _this.recordDetailAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('detail');
            }
            if (_this.recordEditAction && _this.recordEditAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('edit');
            }
            if (_this.recordDeleteAction && _this.recordDeleteAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('delete');
            }
            if (_this.recordAddAction && _this.recordAddAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('add');
            }
            if (_this.collectionConfig != null &&
                angular.isDefined(_this.collection) &&
                angular.isDefined(_this.collection.collectionConfig)) {
                _this.collectionConfig = _this.collection.collectionConfig;
            }
            if (angular.isUndefined(_this.collectionObject) &&
                angular.isDefined(_this.collection) &&
                angular.isDefined(_this.collection.collectionObject)) {
                _this.collectionObject = _this.collection.collectionObject;
            }
            //set defaults if value is not specifies
            _this.processObjectProperties = _this.processObjectProperties || '';
            _this.recordProcessButtonDisplayFlag = _this.recordProcessButtonDisplayFlag || true;
            _this.norecordstext = _this.rbkeyService.getRBKey('entity.' + _this.collectionObject + '.norecords');
            if (angular.isUndefined(_this.defaultSelectEvent)) {
                _this.defaultSelectEvent = 'swSelectionToggleSelection' + _this.tableID;
            }
            if (angular.isUndefined(_this.isAngularRoute)) {
                _this.isAngularRoute = true;
            }
            if (angular.isUndefined(_this.customListingControls)) {
                _this.customListingControls = false;
            }
            if (angular.isUndefined(_this.hasSearch)) {
                _this.hasSearch = true;
                _this.showSearch = true;
            }
            if (angular.isUndefined(_this.showOrderBy)) {
                _this.showOrderBy = true;
            }
            if (angular.isUndefined(_this.showPrintOptions)) {
                _this.showPrintOptions = false;
            }
            if (angular.isUndefined(_this.showToggleDisplayOptions)) {
                _this.showToggleDisplayOptions = true;
            }
            if (angular.isUndefined(_this.expandable)) {
                _this.expandable = false;
            }
            //setup export action
            if (angular.isUndefined(_this.exportAction)) {
                _this.exportAction = _this.$hibachi.buildUrl('main.collectionExport') + '&collectionExportID=';
            }
            //setup print action
            if (angular.isDefined(_this.printAction)) {
                _this.printAction = _this.$hibachi.buildUrl('main.collectionPrint') + '&collectionExportID=';
            }
            //setup email action
            if (angular.isDefined(_this.emailAction)) {
                _this.emailAction = _this.$hibachi.buildUrl('main.collectionEmail') + '&collectionExportID=';
            }
            _this.paginator = _this.paginationService.createPagination(_this.tableID);
            _this.hasCollectionPromise = false;
            if (angular.isUndefined(_this.getChildCount)) {
                _this.getChildCount = false;
            }
            //Setup table class
            _this.tableclass = _this.tableclass || '';
            _this.tableclass = _this.utilityService.listPrepend(_this.tableclass, 'table table-bordered table-hover', ' ');
            if (_this.collectionConfig) {
                _this.collectionConfig.setEventID(_this.tableID);
            }
            if (angular.isDefined(_this.sortableFieldName)) {
                _this.sortableFieldName = "sorting" + _this.tableID;
            }
        };
        this.getListingPageRecordsUpdateEventString = function () {
            return _this.listingService.getListingPageRecordsUpdateEventString(_this.tableID);
        };
        this.getKeyOfMatchedHideRule = function (pageRecord) {
            return _this.listingService.getKeyOfMatchedHideRule(_this.tableID, pageRecord);
        };
        this.getPageRecordMatchesHideRule = function (pageRecord) {
            return _this.listingService.getPageRecordMatchesHideRule(_this.tableID, pageRecord);
        };
        this.getPageRecordValueByColumn = function (pageRecord, column) {
            return _this.listingService.getPageRecordValueByColumn(pageRecord, column);
        };
        this.getKeyOfMatchedDisableRule = function (pageRecord) {
            return _this.listingService.getKeyOfMatchedExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordMatchesDisableRule = function (pageRecord) {
            return _this.listingService.getPageRecordMatchesDisableRule(_this.tableID, pageRecord);
        };
        this.getKeyOfMatchedExpandableRule = function (pageRecord) {
            return _this.listingService.getKeyOfMatchedExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordMatchesExpandableRule = function (pageRecord) {
            return _this.listingService.getPageRecordMatchesExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordChildCollectionConfigForExpandableRule = function (pageRecord) {
            return _this.listingService.getPageRecordChildCollectionConfigForExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordRefreshChildrenEvent = function (pageRecord) {
            if (_this.listingService.hasPageRecordRefreshChildrenEvent(_this.tableID, pageRecord)) {
                return _this.listingService.getPageRecordRefreshChildrenEvent(_this.tableID, pageRecord);
            }
            else {
                return "";
            }
        };
        this.getExampleEntityForExpandableRecord = function (pageRecord) {
            return _this.listingService.getExampleEntityForExpandableRecord(_this.tableID, pageRecord);
        };
        this.getNGClassObjectForPageRecordRow = function (pageRecord) {
            return _this.listingService.getNGClassObjectForPageRecordRow(_this.tableID, pageRecord);
        };
        this.getNGClassObjectForPageRecordCell = function (pageRecord, column) {
            var classObjectString = "{";
            return classObjectString + "}";
        };
        this.getColorFilterConditionString = function (colorFilter, pageRecord) {
            return _this.listingService.getColorFilterConditionString(colorFilter, pageRecord);
        };
        this.hasSingleCollectionConfig = function () {
            return _this.collectionConfig && _this.collectionConfigs.length == 0;
        };
        this.toggleOrderBy = function (column) {
            _this.listingService.toggleOrderBy(_this.tableID, column);
        };
        this.showCalculation = function (show) {
            if (show === void 0) { show = "total"; }
            // Hide all other calculations
            $(".sw-" + (show == "total" ? "average" : "total")).hide();
            // Show all of the chosen calculations
            $(".sw-" + show).show();
        };
        this.hasNumerical = function () {
            // Iterate over columns, find out if we have any numericals and return
            if (!Array.isArray(_this.columns) || _this.columns.length == 0) {
                return false;
            }
            return _this.columns.reduce(function (totalNumericalCols, col) {
                return totalNumericalCols + (col.ormtype && 'big_decimal,integer,float,double'.indexOf(col.ormtype) >= 0) ? 1 : 0;
            });
        };
        this.columnOrderByIndex = function (column) {
            return _this.listingService.columnOrderByIndex(_this.tableID, column);
        };
        this.updateMultiselectValues = function (res) {
            _this.multiselectValues = _this.selectionService.getSelections(_this.tableID);
            if (_this.selectionService.isAllSelected(_this.tableID)) {
                _this.multiselectCount = _this.collectionData.recordsCount - _this.selectionService.getSelectionCount(_this.tableID);
            }
            else {
                _this.multiselectCount = _this.selectionService.getSelectionCount(_this.tableID);
            }
            switch (res.action) {
                case 'uncheck':
                    _this.isCurrentPageRecordsSelected = false;
                    break;
                case 'selectAll':
                    _this.allSelected = true;
                    _this.isCurrentPageRecordsSelected = false;
                    break;
                case 'clear':
                    _this.allSelected = false;
                    _this.isCurrentPageRecordsSelected = false;
                    break;
            }
            //dispatch the update to the store.
            _this.listingService.listingDisplayStore.dispatch({
                type: "CURRENT_PAGE_RECORDS_SELECTED",
                payload: { listingID: _this.tableID, selectionCount: _this.multiselectCount, values: _this.multiselectValues }
            });
        };
        this.getPageRecordKey = function (propertyIdentifier) {
            return _this.listingService.getPageRecordKey(propertyIdentifier);
        };
        this.getAdminAttributesByType = function (type) {
            var recordActionName = 'record' + type.toUpperCase() + 'Action';
            var recordActionPropertyName = recordActionName + 'Property';
            var recordActionQueryStringName = recordActionName + 'QueryString';
            var recordActionModalName = recordActionName + 'Modal';
            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'action="' + _this[recordActionName] + '"', " ");
            if (_this[recordActionPropertyName] && _this[recordActionPropertyName].length) {
                _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'actionproperty="' + _this[recordActionPropertyName] + '"', " ");
            }
            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'querystring="' + _this[recordActionQueryStringName] + '"', " ");
            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'modal="' + _this[recordActionModalName] + '"', " ");
        };
        this.getExportAction = function () {
            return _this.exportAction + _this.collectionID;
        };
        this.getPrintAction = function () {
            return _this.printAction + _this.collectionID;
        };
        this.getEmailAction = function () {
            return _this.emailAction + _this.collectionID;
        };
        this.exportCurrentList = function (selection) {
            if (selection === void 0) { selection = false; }
            if (_this.collectionConfigs.length == 0) {
                var exportCollectionConfig = angular.copy(_this.collectionConfig.getCollectionConfig());
                if (selection && !angular.isUndefined(_this.selectionService.getSelections(_this.tableID))
                    && (_this.selectionService.getSelections(_this.tableID).length > 0)) {
                    exportCollectionConfig.filterGroups[0].filterGroup = [
                        {
                            "displayPropertyIdentifier": _this.rbkeyService.getRBKey("entity." + exportCollectionConfig.baseEntityName.toLowerCase() + "." + _this.exampleEntity.$$getIDName().toLowerCase()),
                            "propertyIdentifier": exportCollectionConfig.baseEntityAlias + "." + _this.exampleEntity.$$getIDName(),
                            "comparisonOperator": (_this.allSelected) ? "not in" : "in",
                            "value": _this.selectionService.getSelections(_this.tableID).join(),
                            "displayValue": _this.selectionService.getSelections(_this.tableID).join(),
                            "ormtype": "string",
                            "fieldtype": "id",
                            "conditionDisplay": "In List"
                        }
                    ];
                }
            }
            else {
                //multiCollectionConfig logic
            }
            $('body').append('<form action="/?' + _this.$hibachi.getConfigValue('action') + '=main.collectionConfigExport" method="post" id="formExport"></form>');
            $('#formExport')
                .append("<input type='hidden' name='collectionConfig' value='" + angular.toJson(exportCollectionConfig) + "' />")
                .submit()
                .remove();
        };
        this.printCurrentList = function (printTemplateID) {
            var exportCollectionConfig = angular.copy(_this.collectionConfig.getCollectionConfig());
            $('body').append('<form action="?s=1" method="post" id="formPrint"></form>');
            $('#formPrint')
                .append("<input type='hidden' name='" + _this.$hibachi.getConfigValue('action') + "' value='entity.processPrint' />")
                .append("<input type='hidden' name='redirectAction' value='admin:entity.list" + _this.baseEntityName.toLowerCase() + "' />")
                .append("<input type='hidden' name='processContext' value='addToQueue' />")
                .append("<input type='hidden' name='printID' value='' />")
                .append("<input type='hidden' name='printTemplateID' value='" + printTemplateID + "' />")
                .append("<input type='hidden' name='collectionConfig' value='" + angular.toJson(exportCollectionConfig) + "' />");
            $('#formPrint')
                .submit()
                .remove();
        };
        this.paginationPageChange = function (res) {
            _this.isCurrentPageRecordsSelected = false;
        };
        this.selectCurrentPageRecords = function () {
            _this.listingService.selectCurrentPageRecords(_this.tableID);
        };
        //these are no longer going to work
        this.clearSelection = function () {
            _this.selectionService.clearSelection(_this.tableID);
        };
        this.selectAll = function () {
            _this.selectionService.selectAll(_this.tableID);
        };
        //Invariant - We must have some way to instantiate. Everything can't be optional. --commented out due to breaking sku listing on product detail page
        // if (!(this.collectionConfig) && !this.collectionConfigs.length && !this.collection){
        //     return;
        // }
        if (angular.isUndefined(this.usingPersonalCollection)) {
            this.usingPersonalCollection = false;
        }
        if (angular.isUndefined(this.showExport)) {
            this.showExport = true;
        }
        //promises to determine which set of logic will run
        this.multipleCollectionDeffered = $q.defer();
        this.multipleCollectionPromise = this.multipleCollectionDeffered.promise;
        this.singleCollectionDeferred = $q.defer();
        this.singleCollectionPromise = this.singleCollectionDeferred.promise;
        if (angular.isDefined(this.collection) && angular.isString(this.collection)) {
            //not sure why we have two properties for this
            this.baseEntityName = this.collection;
            this.collectionObject = this.collection;
            this.collectionConfig = this.collectionConfigService.newCollectionConfig(this.collectionObject);
            this.$timeout(function () {
                _this.collection = _this.collectionConfig;
                _this.columns = _this.collectionConfig.columns;
            });
            this.multipleCollectionDeffered.reject();
        }
        if (this.usingPersonalCollection && this.localStorageService.hasItem('selectedPersonalCollection') && this.localStorageService.getItem('selectedPersonalCollection')[this.baseEntityName.toLowerCase()] && (angular.isUndefined(this.personalCollectionIdentifier) || (angular.isDefined(this.localStorageService.getItem('selectedPersonalCollection')[this.baseEntityName.toLowerCase()]['collectionDescription']) && this.localStorageService.getItem('selectedPersonalCollection')[this.baseEntityName.toLowerCase()]['collectionDescription'] == this.personalCollectionIdentifier))) {
            var personalCollection = this.collectionConfigService.newCollectionConfig('Collection');
            personalCollection.setDisplayProperties('collectionConfig');
            personalCollection.addFilter('collectionID', this.localStorageService.getItem('selectedPersonalCollection')[this.baseEntityName.toLowerCase()].collectionID);
            // personalCollection.addFilter('collectionDescription',this.personalCollectionIdentifier);
            var originalMultiSlotValue = angular.copy(this.multiSlot);
            this.multiSlot = false;
            personalCollection.getEntity().then(function (data) {
                if (data.pageRecords.length) {
                    _this.collectionConfig = _this.collectionConfigService.newCollectionConfig().loadJson(data.pageRecords[0].collectionConfig);
                    console.log('collectionConfig', _this.collectionConfig);
                    _this.collectionObject = _this.baseEntityName;
                    _this.$timeout(function () {
                        _this.collection = _this.collectionConfig;
                        _this.columns = _this.collectionConfig.columns;
                    });
                }
                else {
                    _this.multiSlot = originalMultiSlotValue;
                }
                _this.processCollection();
            });
        }
        else {
            $rootScope.hibachiScope.selectedPersonalCollection = undefined;
            this.processCollection();
        }
    }
    return SWListingDisplayController;
}());
var SWListingDisplay = /** @class */ (function () {
    //@ngInject
    function SWListingDisplay(listingPartialPath, hibachiPathBuilder) {
        this.listingPartialPath = listingPartialPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = {
            addAction: "?swListingAddAction",
            detailAction: "?swListingDetailAction",
            deleteAction: "?swListingDeleteAction",
            editAction: "?swListingEditAction",
            saveAction: "?swListingSaveAction",
            columns: "?swListingColumns",
            collectionConfigs: "?swCollectionConfigs",
            disableRules: "?swDisabledRowRules",
            expandableRules: "?swExpandableRowRules",
            customListingControls: "?swCustomListingControls"
        };
        this.bindToController = {
            usingPersonalCollection: "<?",
            personalCollectionIdentifier: '@?',
            isRadio: "<?",
            angularLinks: "<?",
            isAngularRoute: "<?",
            name: "@?",
            /*required*/
            collection: "<?",
            collectionConfig: "<?",
            getCollection: "&?",
            collectionPromise: "<?",
            edit: "<?",
            /*Optional*/
            title: "<?",
            childPropertyName: "@?",
            baseEntity: "<?",
            baseEntityName: "@?",
            baseEntityId: "@?",
            /*Admin Actions*/
            actions: "<?",
            administrativeCount: "@?",
            recordEditAction: "@?",
            recordEditActionProperty: "@?",
            recordEditQueryString: "@?",
            recordEditModal: "<?",
            recordEditDisabled: "<?",
            recordDetailAction: "@?",
            recordDetailActionProperty: "@?",
            recordDetailActionIdProperty: "@?",
            recordDetailActionIdKey: "@?",
            recordDetailQueryString: "@?",
            recordDetailModal: "<?",
            recordDeleteAction: "@?",
            recordDeleteActionProperty: "@?",
            recordDeleteQueryString: "@?",
            recordAddAction: "@?",
            recordAddActionProperty: "@?",
            recordAddQueryString: "@?",
            recordAddModal: "<?",
            recordAddDisabled: "<?",
            recordProcessesConfig: "<?",
            /* record processes config is an array of actions. Example:
            [
            {
                recordProcessAction:"@",
                recordProcessActionProperty:"@",
                recordProcessQueryString:"@",
                recordProcessContext:"@",
                recordProcessEntity:"=",
                recordProcessEntityData:"=",
                recordProcessUpdateTableID:"=",
                recordProcessButtonDisplayFlag:"=",
            }
            ]
            */
            /*Hierachy Expandable*/
            parentPropertyName: "@?",
            //booleans
            expandable: "<?",
            expandableOpenRoot: "<?",
            /*Searching*/
            searchText: "<?",
            /*Sorting*/
            sortable: "<?",
            sortableFieldName: "@?",
            sortProperty: "@?",
            sortContextIDColumn: "@?",
            sortContextIDValue: "@?",
            /*Single Select*/
            selectFiledName: "@?",
            selectValue: "@?",
            selectTitle: "@?",
            /*Multiselect*/
            multiselectFieldName: "@?",
            multiselectPropertyIdentifier: "@?",
            multiselectIdPaths: "@?",
            multiselectValues: "@?",
            /*Helper / Additional / Custom*/
            tableattributes: "@?",
            tableclass: "@?",
            typeaheadDataKey: "@?",
            adminattributes: "@?",
            /* Settings */
            showheader: "<?",
            showExport: "<?",
            showOrderBy: "<?",
            showTopPagination: "<?",
            showToggleDisplayOptions: "<?",
            showSearch: "<?",
            showSearchFilters: "<?",
            showSimpleListingControls: "<?",
            showPrintOptions: "<?",
            /* Basic Action Caller Overrides*/
            createModal: "<?",
            createAction: "@?",
            createQueryString: "@?",
            exportAction: "@?",
            getChildCount: "<?",
            hasSearch: "<?",
            hasActionBar: "<?",
            multiSlot: "=?",
            customListingControls: "<?"
        };
        this.controller = SWListingDisplayController;
        this.controllerAs = "swListingDisplay";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs, transclude) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.listingPartialPath = listingPartialPath;
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.listingPartialPath) + 'listingdisplay.html';
    }
    SWListingDisplay.Factory = function () {
        var directive = function (listingPartialPath, hibachiPathBuilder) { return new SWListingDisplay(listingPartialPath, hibachiPathBuilder); };
        directive.$inject = [
            'listingPartialPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWListingDisplay;
}());
exports.SWListingDisplay = SWListingDisplay;


/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingDisplayCellController = /** @class */ (function () {
    //@ngInject
    function SWListingDisplayCellController(listingPartialPath, hibachiPathBuilder, listingService, utilityService, $scope) {
        var _this = this;
        this.listingPartialPath = listingPartialPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.listingService = listingService;
        this.utilityService = utilityService;
        this.$scope = $scope;
        this.expandable = false;
        this.getDirectiveTemplate = function () {
            var templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycell.html';
            if (_this.expandable || (_this.swListingDisplay.expandable && _this.column.tdclass && _this.column.tdclass === 'primary')) {
                templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplayselectablecellexpandable.html';
            }
            if (!_this.swListingDisplay.expandable || !_this.column.tdclass || _this.column.tdclass !== 'primary') {
                if (_this.column.ormtype === 'timestamp') {
                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycelldate.html';
                }
                else if (_this.column.type === 'currency') {
                    if (_this.column.aggregate) {
                        _this.value = _this.pageRecord[_this.swListingDisplay.getPageRecordKey(_this.column.aggregate.aggregateAlias)];
                    }
                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycellcurrency.html';
                }
                else if (_this.column.aggregate) {
                    _this.value = _this.pageRecord[_this.swListingDisplay.getPageRecordKey(_this.column.aggregate.aggregateAlias)];
                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycellaggregate.html';
                }
            }
            return templateUrl;
        };
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.listingPartialPath = listingPartialPath;
        this.$scope = $scope;
        if (!this.value && this.pageRecord && this.column) {
            this.value = this.listingService.getPageRecordValueByColumn(this.pageRecord, this.column);
        }
        this.popover = this.utilityService.replaceStringWithProperties(this.column.tooltip, this.pageRecord);
        this.hasActionCaller = false;
        if (this.column.action && this.column.queryString) {
            this.hasActionCaller = true;
            this.actionCaller = {
                action: this.column.action
            };
            if (this.column.queryString) {
                this.actionCaller.queryString = this.utilityService.replaceStringWithProperties(this.column.queryString, this.pageRecord);
            }
        }
        if (this.cellView) {
            console.log("Cellview?", this.cellView);
            var htmlCellView = this.utilityService.camelCaseToSnakeCase(this.cellView);
            this.template = htmlCellView;
            //convert the page records into attrs
            this.templateVariables = this.pageRecord;
            if (angular.isDefined(this.column.columnID)) {
                this.templateVariables["column"] = this.column.columnID;
            }
            if (angular.isDefined(this.swListingDisplay.baseEntityName) && angular.isDefined(this.swListingDisplay.baseEntityId)) {
                this.templateVariables["baseEntityId"] = this.swListingDisplay.baseEntityId;
                this.templateVariables["baseEntityName"] = this.swListingDisplay.baseEntityName;
            }
            if (angular.isDefined(this.column.propertyIdentifier)) {
                this.templateVariables["columnPropertyIdentifier"] = this.column.propertyIdentifier;
            }
            this.templateVariables["listingDisplayID"] = this.swListingDisplay.tableID;
        }
        else if (!this.hasActionCaller) {
            this.templateUrl = this.getDirectiveTemplate();
        }
    }
    return SWListingDisplayCellController;
}());
var SWListingDisplayCell = /** @class */ (function () {
    //@ngInject
    function SWListingDisplayCell() {
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            swListingDisplay: "=?",
            column: "=?",
            pageRecord: "=?",
            value: "=?",
            cellView: "@?",
            expandableRules: "=?"
        };
        this.controller = SWListingDisplayCellController;
        this.controllerAs = "swListingDisplayCell";
        this.template = "\n        <div ng-if=\"swListingDisplayCell.template\" sw-directive data-variables=\"swListingDisplayCell.templateVariables\" data-directive-template=\"swListingDisplayCell.template\"></div>\n        <div ng-if=\"swListingDisplayCell.templateUrl\" ng-include src=\"swListingDisplayCell.templateUrl\"></div>\n        <sw-action-caller ng-if=\"swListingDisplayCell.hasActionCaller\"\n                    data-action=\"{{swListingDisplayCell.actionCaller.action}}\"\n                    data-query-string=\"{{swListingDisplayCell.actionCaller.queryString}}\"\n                    data-text=\"{{swListingDisplayCell.value}}\"\n                    data-tooltip-text=\"{{swListingDisplayCell.popover}}\"\n                    data-is-angular-route=\"false\"\n\n        >\n        </sw-action-caller>\n    ";
    }
    SWListingDisplayCell.Factory = function () {
        var directive = function () { return new SWListingDisplayCell(); };
        directive.$inject = [];
        return directive;
    };
    return SWListingDisplayCell;
}());
exports.SWListingDisplayCell = SWListingDisplayCell;


/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/* SWListingExpandableRule
 * defines a filter, by which to determine what will be expanded
 * supplies the collection config and any other necessary rules for what will be loaded and displayed
 */
var SWListingExpandableRuleController = /** @class */ (function () {
    //@ngInject
    function SWListingExpandableRuleController($q) {
        this.$q = $q;
        this.hasChildrenCollectionConfigDeferred = $q.defer();
        this.hasChildrenCollectionConfigPromise = this.hasChildrenCollectionConfigDeferred.promise;
        //why did I need this? 
        this.childrenCollectionConfig = null;
    }
    return SWListingExpandableRuleController;
}());
var SWListingExpandableRule = /** @class */ (function () {
    function SWListingExpandableRule(scopeService, $q) {
        var _this = this;
        this.scopeService = scopeService;
        this.$q = $q;
        this.restrict = 'EA';
        this.scope = true;
        this.transclude = {
            collectionConfig: "?swConfig"
        };
        this.template = "\n        <div ng-transclude=\"collectionConfig\"></div> \n    ";
        this.bindToController = {
            childrenCollectionConfig: "=?",
            filterPropertyIdentifier: "@",
            filterComparisonOperator: "@",
            filterComparisonValue: "@",
            refreshChildrenEvent: "@?"
        };
        this.controller = SWListingExpandableRuleController;
        this.controllerAs = "swListingExpandableRule";
        this.link = function (scope, element, attrs) {
            scope.swListingExpandableRule.hasChildrenCollectionConfigPromise.then(function () {
                var rule = {
                    filterPropertyIdentifier: scope.swListingExpandableRule.filterPropertyIdentifier,
                    filterComparisonOperator: scope.swListingExpandableRule.filterComparisonOperator,
                    filterComparisonValue: scope.swListingExpandableRule.filterComparisonValue,
                    childrenCollectionConfig: scope.swListingExpandableRule.childrenCollectionConfig,
                    refreshChildrenEvent: scope.swListingExpandableRule.refreshChildrenEvent
                };
                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");
                if (angular.isDefined(listingDisplayScope.swListingDisplay)) {
                    listingDisplayScope = listingDisplayScope.swListingDisplay;
                }
                else {
                    throw ("listing display scope not available to sw-listing-expandable-rule");
                }
                listingDisplayScope.expandableRules.push(rule);
            });
        };
    }
    SWListingExpandableRule.Factory = function () {
        var directive = function (scopeService, $q) { return new SWListingExpandableRule(scopeService, $q); };
        directive.$inject = [
            'scopeService',
            '$q'
        ];
        return directive;
    };
    return SWListingExpandableRule;
}());
exports.SWListingExpandableRule = SWListingExpandableRule;


/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingFilterController = /** @class */ (function () {
    function SWListingFilterController() {
        this.init = function () {
        };
        this.init();
    }
    return SWListingFilterController;
}());
var SWListingFilter = /** @class */ (function () {
    function SWListingFilter() {
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            comparisonOperator: "@",
            comparisonValue: "@",
            logicalOperator: "@",
            hidden: "@?"
        };
        this.controller = SWListingFilterController;
        this.controllerAs = "swListingFilter";
        this.link = function (scope, element, attrs) {
            var filter = {
                propertyIdentifier: scope.swListingFilter.propertyIdentifier,
                comparisonOperator: scope.swListingFilter.comparisonOperator,
                comparisonValue: scope.swListingFilter.comparisonValue,
                logicalOperator: scope.swListingFilter.logicalOperator,
                hidden: false
            };
            if (angular.isDefined(scope.swListingFilter.hidden)) {
                filter['hidden'] = scope.swListingFilter.hidden;
            }
            if (angular.isDefined(scope.$parent.swListingFilterGroup)) {
                scope.$parent.swListingFilterGroup.filters.push(filter);
            }
            else {
                scope.$parent.swListingDisplay.filters.push(filter);
            }
        };
    }
    SWListingFilter.Factory = function () {
        var directive = function () { return new SWListingFilter(); };
        directive.$inject = [];
        return directive;
    };
    return SWListingFilter;
}());
exports.SWListingFilter = SWListingFilter;


/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingFilterGroupController = /** @class */ (function () {
    function SWListingFilterGroupController($scope, $transclude) {
        this.$scope = $scope;
        this.$transclude = $transclude;
        this.filters = [];
        $transclude($scope, function () { });
        $scope.$parent.swListingDisplay.filterGroups.push(this.filters);
    }
    return SWListingFilterGroupController;
}());
var SWListingFilterGroup = /** @class */ (function () {
    function SWListingFilterGroup() {
        this.restrict = 'EA';
        this.transclude = true;
        this.scope = true;
        this.bindToController = {};
        this.controller = SWListingFilterGroupController;
        this.controllerAs = "swListingFilterGroup";
    }
    SWListingFilterGroup.Factory = function () {
        var directive = function () { return new SWListingFilterGroup(); };
        directive.$inject = [];
        return directive;
    };
    SWListingFilterGroup.$inject = [];
    return SWListingFilterGroup;
}());
exports.SWListingFilterGroup = SWListingFilterGroup;


/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingGlobalSearchController = /** @class */ (function () {
    //@ngInject
    function SWListingGlobalSearchController($timeout) {
        var _this = this;
        this.$timeout = $timeout;
        this.init = function () {
            _this.searching = false;
        };
        this.search = function () {
            _this.searching = true;
            if (_this._timeoutPromise) {
                _this.$timeout.cancel(_this._timeoutPromise);
            }
            _this._timeoutPromise = _this.$timeout(function () {
                _this.getCollection();
            }, 500);
        };
        this.init();
    }
    return SWListingGlobalSearchController;
}());
var SWListingGlobalSearch = /** @class */ (function () {
    //@ngInject
    function SWListingGlobalSearch(utilityService, listingPartialPath, hibachiPathBuilder) {
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            searching: "=",
            searchText: "=",
            getCollection: "="
        };
        this.controller = SWListingGlobalSearchController;
        this.controllerAs = "swListingGlobalSearch";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(listingPartialPath) + "listingglobalsearch.html";
    }
    SWListingGlobalSearch.Factory = function () {
        var directive = function (utilityService, listingPartialPath, hibachiPathBuilder) { return new SWListingGlobalSearch(utilityService, listingPartialPath, hibachiPathBuilder); };
        directive.$inject = ['utilityService', 'listingPartialPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWListingGlobalSearch;
}());
exports.SWListingGlobalSearch = SWListingGlobalSearch;


/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingOrderByController = /** @class */ (function () {
    //@ngInject
    function SWListingOrderByController() {
        this.init = function () {
        };
        this.init();
    }
    return SWListingOrderByController;
}());
var SWListingOrderBy = /** @class */ (function () {
    //@ngInject
    function SWListingOrderBy(utilityService) {
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            orderBy: "@",
        };
        this.controller = SWListingOrderByController;
        this.controllerAs = "swListingOrderBy";
        this.link = function (scope, element, attrs) {
            var orderBy = {
                orderBy: scope.swListingOrderBy.orderBy,
            };
            scope.$parent.swListingDisplay.orderBys.push(orderBy);
        };
    }
    SWListingOrderBy.Factory = function () {
        var directive = function (utilityService) { return new SWListingOrderBy(utilityService); };
        directive.$inject = [
            'utilityService'
        ];
        return directive;
    };
    return SWListingOrderBy;
}());
exports.SWListingOrderBy = SWListingOrderBy;


/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingRowSaveController = /** @class */ (function () {
    //@ngInject
    function SWListingRowSaveController(listingService) {
        var _this = this;
        this.listingService = listingService;
        this.save = function () {
            _this.listingService.markSaved(_this.listingID, _this.pageRecordIndex);
        };
    }
    return SWListingRowSaveController;
}());
var SWListingRowSave = /** @class */ (function () {
    function SWListingRowSave(hibachiPathBuilder, listingPartialPath, utilityService, scopeService) {
        var _this = this;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.listingPartialPath = listingPartialPath;
        this.utilityService = utilityService;
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {};
        this.controller = SWListingRowSaveController;
        this.controllerAs = "swListingRowSave";
        this.link = function ($scope, element, attrs) {
            var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
            if (angular.isDefined(currentScope["pageRecord"])) {
                $scope.swListingRowSave.pageRecord = currentScope["pageRecord"];
            }
            var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
            if (angular.isDefined(currentScope["pageRecordKey"])) {
                $scope.swListingRowSave.pageRecordIndex = currentScope["pageRecordKey"];
            }
            var currentScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
            if (angular.isDefined(currentScope["swListingDisplay"])) {
                $scope.swListingRowSave.listingID = currentScope["swListingDisplay"].tableID;
            }
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.listingPartialPath) + 'listingrowsave.html';
    }
    SWListingRowSave.Factory = function () {
        var directive = function (hibachiPathBuilder, listingPartialPath, utilityService, scopeService) { return new SWListingRowSave(hibachiPathBuilder, listingPartialPath, utilityService, scopeService); };
        directive.$inject = [
            'hibachiPathBuilder',
            'listingPartialPath',
            'utilityService',
            'scopeService'
        ];
        return directive;
    };
    SWListingRowSave.$inject = ['utilityService'];
    return SWListingRowSave;
}());
exports.SWListingRowSave = SWListingRowSave;


/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingSearchController = /** @class */ (function () {
    //@ngInject
    function SWListingSearchController($rootScope, $hibachi, metadataService, listingService, collectionService, observerService, localStorageService) {
        var _this = this;
        this.$rootScope = $rootScope;
        this.$hibachi = $hibachi;
        this.metadataService = metadataService;
        this.listingService = listingService;
        this.collectionService = collectionService;
        this.observerService = observerService;
        this.localStorageService = localStorageService;
        this.displayOptionsClosed = true;
        this.filtersClosed = true;
        this.hasPersonalCollections = false;
        this.collectionNameSaveIsOpen = false;
        this.$onInit = function () {
            if (angular.isDefined(_this.swListingDisplay.personalCollectionIdentifier)) {
                _this.personalCollectionIdentifier = _this.swListingDisplay.personalCollectionIdentifier;
            }
            //snapshot searchable options in the beginning
            _this.searchableOptions = angular.copy(_this.swListingDisplay.collectionConfig.columns);
            _this.selectedSearchColumn = { title: 'All' };
            _this.configureSearchableColumns(_this.selectedSearchColumn);
            if (_this.swListingControls.showPrintOptions) {
                //load the options
                //this will prevent icon from flashing on action bar
                _this.swListingControls.showPrintOptions = false;
                var printTemplateOptionsCollection = _this.collectionConfig.newCollectionConfig('PrintTemplate');
                printTemplateOptionsCollection.addFilter('printTemplateObject', _this.swListingDisplay.collectionConfig.baseEntityName);
                printTemplateOptionsCollection.setAllRecords(true);
                printTemplateOptionsCollection.getEntity().then(function (response) {
                    _this.printTemplateOptions = response.records;
                    if (_this.printTemplateOptions.length !== 0) {
                        _this.swListingControls.showPrintOptions = true;
                    }
                }, function (reason) {
                    throw ("swListingSearch couldn't load printTemplateOptions because: " + reason);
                });
            }
        };
        this.selectSearchColumn = function (column) {
            _this.selectedSearchColumn = column;
            _this.configureSearchableColumns(column);
            if (_this.searchText) {
                _this.search();
            }
        };
        this.selectPersonalCollection = function (personalCollection) {
            if (!_this.localStorageService.hasItem('selectedPersonalCollection')) {
                _this.localStorageService.setItem('selectedPersonalCollection', '{}');
            }
            var selectedPersonalCollection = angular.fromJson(_this.localStorageService.getItem('selectedPersonalCollection'));
            if (personalCollection) {
                selectedPersonalCollection[personalCollection.collectionObject.toLowerCase()] = personalCollection;
                _this.localStorageService.setItem('selectedPersonalCollection', angular.toJson(selectedPersonalCollection));
            }
            else {
                delete selectedPersonalCollection[_this.swListingDisplay.baseEntityName.toLowerCase()];
                console.log(selectedPersonalCollection);
                _this.localStorageService.setItem('selectedPersonalCollection', angular.toJson(selectedPersonalCollection));
            }
            window.location.reload();
        };
        this.savePersonalCollection = function (collectionName) {
            if (_this.localStorageService.hasItem('selectedPersonalCollection') && _this.localStorageService.getItem('selectedPersonalCollection')[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()] && (angular.isUndefined(_this.personalCollectionIdentifier) || (angular.isDefined(_this.localStorageService.getItem('selectedPersonalCollection')[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()]['collectionDescription']) && _this.localStorageService.getItem('selectedPersonalCollection')[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()]['collectionDescription'] == _this.personalCollectionIdentifier))) {
                var selectedPersonalCollection = angular.fromJson(_this.localStorageService.getItem('selectedPersonalCollection'));
                if (selectedPersonalCollection[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()]) {
                    _this.$hibachi.saveEntity('Collection', selectedPersonalCollection[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()].collectionID, {
                        'accountOwner.accountID': _this.$rootScope.slatwall.account.accountID,
                        'collectionConfig': _this.swListingDisplay.collectionConfig.collectionConfigString
                    }, 'save').then(function (data) {
                    });
                    return;
                }
            }
            else if (collectionName) {
                var serializedJSONData = {
                    'collectionConfig': _this.swListingDisplay.collectionConfig.collectionConfigString,
                    'collectionName': collectionName,
                    'collectionDescription': _this.personalCollectionIdentifier,
                    'collectionObject': _this.swListingDisplay.collectionConfig.baseEntityName,
                    'accountOwner': {
                        'accountID': _this.$rootScope.slatwall.account.accountID
                    }
                };
                _this.$hibachi.saveEntity('Collection', "", {
                    'serializedJSONData': angular.toJson(serializedJSONData),
                    'propertyIdentifiersList': 'collectionID,collectionName,collectionObject,collectionDescription'
                }, 'save').then(function (data) {
                    if (!_this.localStorageService.hasItem('selectedPersonalCollection')) {
                        _this.localStorageService.setItem('selectedPersonalCollection', '{}');
                    }
                    var selectedPersonalCollection = angular.fromJson(_this.localStorageService.getItem('selectedPersonalCollection'));
                    selectedPersonalCollection[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()] = {
                        collectionID: data.data.collectionID,
                        collectionObject: data.data.collectionObject,
                        collectionName: data.data.collectionName,
                        collectionDescription: data.data.collectionDescription
                    };
                    _this.localStorageService.setItem('selectedPersonalCollection', angular.toJson(selectedPersonalCollection));
                    _this.$rootScope.slatwall.selectedPersonalCollection = selectedPersonalCollection;
                    _this.collectionNameSaveIsOpen = false;
                    _this.hasPersonalCollections = false;
                });
                return;
            }
            _this.collectionNameSaveIsOpen = true;
        };
        this.getPersonalCollections = function () {
            if (!_this.hasPersonalCollections) {
                var personalCollectionList = _this.collectionConfig.newCollectionConfig('Collection');
                personalCollectionList.setDisplayProperties('collectionID,collectionName,collectionObject,collectionDescription');
                personalCollectionList.addFilter('accountOwner.accountID', _this.$rootScope.slatwall.account.accountID);
                personalCollectionList.addFilter('collectionObject', _this.swListingDisplay.baseEntityName);
                if (angular.isDefined(_this.personalCollectionIdentifier)) {
                    personalCollectionList.addFilter('collectionDescription', _this.personalCollectionIdentifier);
                }
                personalCollectionList.setAllRecords(true);
                personalCollectionList.getEntity().then(function (data) {
                    _this.personalCollections = data.records;
                });
            }
            _this.hasPersonalCollections = true;
        };
        this.clearPersonalCollection = function () {
            _this.selectPersonalCollection();
        };
        this.search = function () {
            if (_this.searchText.length > 0) {
                _this.listingService.setExpandable(_this.listingId, false);
            }
            else {
                _this.listingService.setExpandable(_this.listingId, true);
            }
            _this.collectionConfig.setKeywords(_this.searchText);
            _this.swListingDisplay.collectionConfig = _this.collectionConfig;
            _this.observerService.notifyById('swPaginationAction', _this.listingId, { type: 'setCurrentPage', payload: 1 });
        };
        this.configureSearchableColumns = function (column) {
            var searchableColumn = "";
            if (column.propertyIdentifier) {
                searchableColumn = column.propertyIdentifier;
                //default to All columns
            }
            for (var i = 0; i < _this.swListingDisplay.collectionConfig.columns.length; i++) {
                if (searchableColumn.length) {
                    if (searchableColumn === _this.swListingDisplay.collectionConfig.columns[i].propertyIdentifier) {
                        _this.swListingDisplay.collectionConfig.columns[i].isSearchable = true;
                    }
                    else {
                        _this.swListingDisplay.collectionConfig.columns[i].isSearchable = false;
                    }
                }
                else {
                    _this.swListingDisplay.collectionConfig.columns[i].isSearchable = true;
                }
            }
        };
    }
    return SWListingSearchController;
}());
var SWListingSearch = /** @class */ (function () {
    //@ngInject
    function SWListingSearch(scopeService, collectionPartialsPath, hibachiPathBuilder) {
        this.scopeService = scopeService;
        this.collectionPartialsPath = collectionPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.require = { swListingDisplay: "?^swListingDisplay", swListingControls: '?^swListingControls' };
        this.bindToController = {
            collectionConfig: "<?",
            paginator: "=?",
            listingId: "@?",
            showToggleSearch: "=?"
        };
        this.controller = SWListingSearchController;
        this.controllerAs = 'swListingSearch';
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "listingsearch.html";
    }
    SWListingSearch.Factory = function () {
        var directive = function (scopeService, listingPartialPath, hibachiPathBuilder) { return new SWListingSearch(scopeService, listingPartialPath, hibachiPathBuilder); };
        directive.$inject = ['scopeService', 'listingPartialPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWListingSearch;
}());
exports.SWListingSearch = SWListingSearch;


/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var collection_module_1 = __webpack_require__(170);
//services
var listingservice_1 = __webpack_require__(705);
//directives
var swlistingdisplay_1 = __webpack_require__(695);
var swlistingdisplaycell_1 = __webpack_require__(696);
var swlistingcontrols_1 = __webpack_require__(693);
var swlistingaggregate_1 = __webpack_require__(690);
var swlistingcolorfilter_1 = __webpack_require__(691);
var swlistingcolumn_1 = __webpack_require__(692);
var swlistingdisablerule_1 = __webpack_require__(694);
var swlistingexpandablerule_1 = __webpack_require__(697);
var swlistingfilter_1 = __webpack_require__(698);
var swlistingfiltergroup_1 = __webpack_require__(699);
var swlistingorderby_1 = __webpack_require__(701);
var swlistingrowsave_1 = __webpack_require__(702);
var swlistingsearch_1 = __webpack_require__(703);
var swlistingglobalsearch_1 = __webpack_require__(700);
var listingmodule = angular.module('hibachi.listing', [collection_module_1.collectionmodule.name])
    .run([function () {
    }])
    //services
    .service('listingService', listingservice_1.ListingService)
    //directives
    .directive('swListingDisplay', swlistingdisplay_1.SWListingDisplay.Factory())
    .directive('swListingControls', swlistingcontrols_1.SWListingControls.Factory())
    .directive('swListingAggregate', swlistingaggregate_1.SWListingAggregate.Factory())
    .directive('swListingColorFilter', swlistingcolorfilter_1.SWListingColorFilter.Factory())
    .directive('swListingColumn', swlistingcolumn_1.SWListingColumn.Factory())
    .directive('swListingDisableRule', swlistingdisablerule_1.SWListingDisableRule.Factory())
    .directive('swListingExpandableRule', swlistingexpandablerule_1.SWListingExpandableRule.Factory())
    .directive('swListingDisplayCell', swlistingdisplaycell_1.SWListingDisplayCell.Factory())
    .directive('swListingFilter', swlistingfilter_1.SWListingFilter.Factory())
    .directive('swListingFilterGroup', swlistingfiltergroup_1.SWListingFilterGroup.Factory())
    .directive('swListingOrderBy', swlistingorderby_1.SWListingOrderBy.Factory())
    .directive('swListingRowSave', swlistingrowsave_1.SWListingRowSave.Factory())
    .directive('swListingSearch', swlistingsearch_1.SWListingSearch.Factory())
    .directive('swListingGlobalSearch', swlistingglobalsearch_1.SWListingGlobalSearch.Factory())
    //constants
    .constant('listingPartialPath', 'listing/components/');
exports.listingmodule = listingmodule;


/***/ }),
/* 705 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Store = __webpack_require__(61);
var ListingService = /** @class */ (function () {
    //@ngInject
    function ListingService($timeout, $q, collectionConfigService, filterService, historyService, observerService, rbkeyService, selectionService, utilityService, $hibachi) {
        var _this = this;
        this.$timeout = $timeout;
        this.$q = $q;
        this.collectionConfigService = collectionConfigService;
        this.filterService = filterService;
        this.historyService = historyService;
        this.observerService = observerService;
        this.rbkeyService = rbkeyService;
        this.selectionService = selectionService;
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.listingDisplays = {};
        this.state = {};
        /**
         * The reducer is responsible for modifying the state of the state object into a new state for listeners.
         */
        this.listingDisplayStateReducer = function (state, action) {
            switch (action.type) {
                case 'LISTING_PAGE_RECORDS_UPDATE':
                    return __assign({}, state, { action: action });
                case 'CURRENT_PAGE_RECORDS_SELECTED':
                    return __assign({}, state, { action: action });
                case 'ADD_SELECTION':
                    return __assign({}, state, { action: action });
                default:
                    return state;
            }
        };
        //Event Functions
        this.getListingPageRecordsUpdateEventString = function (listingID) {
            return listingID + "pageRecordsUpdated";
        };
        this.getListingOrderByChangedEventString = function (listingID) {
            return listingID + "orderByChanged";
        };
        this.getListingInitiatedEventString = function (listingID) {
            return listingID + "initiated";
        };
        this.notifyListingPageRecordsUpdate = function (listingID) {
            //This is how we would dispatch so that controllers can get the updated state.
            _this.listingDisplayStore.dispatch({
                type: "LISTING_PAGE_RECORDS_UPDATE",
                payload: { listingID: listingID, listingPageRecordsUpdateEventString: _this.getListingPageRecordsUpdateEventString(listingID) }
            });
            _this.observerService.notify(_this.getListingPageRecordsUpdateEventString(listingID), listingID);
        };
        this.attachToListingPageRecordsUpdate = function (listingID, callback, id) {
            _this.observerService.attach(callback, _this.getListingPageRecordsUpdateEventString(listingID), id);
        };
        this.attachToOrderByChangedUpdate = function (listingID, callback, id) {
            _this.observerService.attach(callback, _this.getListingOrderByChangedEventString(listingID), id);
        };
        this.attachToListingInitiated = function (listingID, callback) {
            _this.observerService.attach(callback, _this.getListingInitiatedEventString(listingID));
            if (_this.historyService.hasHistory(_this.getListingInitiatedEventString(listingID))) {
                callback();
            }
        };
        //End Event Functions
        //core getters and setters
        this.setListingState = function (listingID, state) {
            _this.listingDisplays[listingID] = state;
            _this.observerService.notifyAndRecord(_this.getListingInitiatedEventString(listingID));
        };
        this.getListing = function (listingID) {
            return _this.listingDisplays[listingID];
        };
        this.getListingColumns = function (listingID) {
            return _this.getListing(listingID).columns || _this.getListingCollectionConfigColumns(listingID);
        };
        this.getListingCollectionConfigColumns = function (listingID) {
            if (_this.getListing(listingID).collectionConfig != null) {
                return _this.getListing(listingID).collectionConfig.columns;
            }
        };
        this.getListingExampleEntity = function (listingID) {
            if (_this.getListing(listingID).exampleEntity != null) {
                return _this.getListing(listingID).exampleEntity;
            }
            else {
                _this.setupExampleEntity(listingID);
            }
        };
        this.getListingCollectionConfigColumnIndexByPropertyIdentifier = function (listingID, propertyIdentifier) {
            var columns = _this.getListingCollectionConfigColumns(listingID);
            return _this.utilityService.ArrayFindByPropertyValue(columns, 'propertyIdentifier', propertyIdentifier);
        };
        this.getListingColumnIndexByPropertyIdentifier = function (listingID, propertyIdentifier) {
            var columns = _this.getListingColumns(listingID);
            return _this.utilityService.ArrayFindByPropertyValue(columns, 'propertyIdentifier', propertyIdentifier);
        };
        this.getListingBaseEntityName = function (listingID) {
            var baseEntityName = _this.getListing(listingID).baseEntityName || _this.getListing(listingID).collectionObject;
            if (baseEntityName == null && _this.getListing(listingID).collectionConfig != null) {
                baseEntityName = _this.getListing(listingID).collectionConfig.baseEntityName;
            }
            if (baseEntityName == null && _this.getListing(listingID).collectionData != null) {
                baseEntityName = _this.getListing(listingID).collectionData.collectionObject;
            }
            return baseEntityName;
        };
        this.getListingBaseEntityPrimaryIDPropertyName = function (listingID) {
            if (_this.getListingExampleEntity(listingID) != null) {
                return _this.getListingExampleEntity(listingID).$$getIDName();
            }
        };
        this.getListingPrimaryEntityName = function (listingID) {
            return _this.getListing(listingID).baseEntityName ||
                _this.getListing(listingID).collectionObject ||
                _this.getListing(listingID).collectionConfig.baseEntityName;
        };
        this.getListingEntityPrimaryIDPropertyName = function (listingID) {
            return _this.$hibachi.getPrimaryIDPropertyNameByEntityName(_this.getListingPrimaryEntityName(listingID));
        };
        this.getListingPageRecords = function (listingID) {
            if (angular.isDefined(_this.getListing(listingID)) &&
                angular.isDefined(_this.getListing(listingID).collectionData) &&
                angular.isDefined(_this.getListing(listingID).collectionData.pageRecords)) {
                return _this.getListing(listingID).collectionData.pageRecords;
            }
        };
        this.getCollection = function (listingID) {
            return _this.getListing(listingID).getCollection();
        };
        this.getPageRecordsWithManualSortOrder = function (listingID) {
            if (angular.isDefined(_this.getListing(listingID)) && _this.getListingPageRecords(listingID) != null) {
                var pageRecords = _this.getListingPageRecords(listingID);
                var primaryIDPropertyName = _this.getListingEntityPrimaryIDPropertyName(listingID);
                var primaryIDWithBaseAlias = _this.getListing(listingID).collectionConfig.baseEntityAlias + '.' + primaryIDPropertyName;
                var pageRecordsWithManualSortOrder = {};
                _this.$timeout(function () {
                    for (var j = 0; j < pageRecords.length; j++) {
                        var pageRecord = pageRecords[j];
                        var primaryID = pageRecords[j][primaryIDPropertyName];
                        var sortOrder = j + 1;
                        var primaryIDColumnIndex = _this.getListingCollectionConfigColumnIndexByPropertyIdentifier(listingID, primaryIDWithBaseAlias);
                        if (angular.isDefined(primaryID)) {
                            pageRecordsWithManualSortOrder[primaryID] = sortOrder;
                        }
                        else if (primaryIDColumnIndex !== -1) {
                            var column = _this.getListingCollectionConfigColumns(listingID)[primaryIDColumnIndex];
                            if (angular.isDefined(column.fallbackPropertyIdentifiers)) {
                                var fallbackPropertyArray = column.fallbackPropertyIdentifiers.split(",");
                                for (var i = 0; i < fallbackPropertyArray.length; i++) {
                                    if (angular.isDefined(pageRecord[fallbackPropertyArray[i]])) {
                                        pageRecordsWithManualSortOrder[pageRecord[fallbackPropertyArray[i]]] = sortOrder;
                                    }
                                }
                            }
                        }
                    }
                    _this.getListing(listingID).pageRecordsWithManualSortOrder = angular.toJson(pageRecordsWithManualSortOrder);
                    return _this.getListing(listingID).pageRecordsWithManualSortOrders;
                }, 0);
            }
            else {
                return angular.toJson({});
            }
        };
        //Begin Listing Page Record Functions
        this.getListingPageRecordIndexByPageRecord = function (listingID, pageRecordToCompare) {
            var pageRecords = _this.getListingPageRecords(listingID);
            var primaryIDPropertyName = _this.getListingEntityPrimaryIDPropertyName(listingID);
            for (var j = 0; j < pageRecords.length; j++) {
                var pageRecord = pageRecords[j];
                if (pageRecord[primaryIDPropertyName] == pageRecordToCompare[primaryIDPropertyName]) {
                    return j;
                }
            }
            return -1;
        };
        this.insertListingPageRecord = function (listingID, pageRecord) {
            pageRecord.newFlag = true;
            if (angular.isDefined(_this.getListingPageRecords(listingID))) {
                _this.notifyListingPageRecordsUpdate(listingID);
                _this.getListingPageRecords(listingID).unshift(pageRecord); //insert at beginning be default
            }
        };
        this.removeListingPageRecord = function (listingID, pageRecord) {
            var pageRecords = _this.getListingPageRecords(listingID);
            if (_this.getListingPageRecordIndexByPageRecord(listingID, pageRecord) != -1) {
                _this.notifyListingPageRecordsUpdate(listingID);
                return pageRecords.splice(_this.getListingPageRecordIndexByPageRecord(listingID, pageRecord), 1)[0]; //this will always be an array of one element
            }
        };
        this.getPageRecordKey = function (propertyIdentifier) {
            if (propertyIdentifier) {
                var propertyIdentifierWithoutAlias = '';
                if (propertyIdentifier.indexOf('_') === 0) {
                    var underscoreCount = (propertyIdentifier.match(new RegExp("_", "g") || [])).length;
                    if (underscoreCount > 1) {
                        var properSubStr = propertyIdentifier.substring(1);
                        propertyIdentifierWithoutAlias = properSubStr.substring(properSubStr.indexOf('_') + 1, properSubStr.length);
                    }
                    else {
                        propertyIdentifierWithoutAlias = propertyIdentifier.substring(propertyIdentifier.indexOf('.') + 1);
                    }
                }
                else {
                    propertyIdentifierWithoutAlias = propertyIdentifier;
                }
                return _this.utilityService.replaceAll(propertyIdentifierWithoutAlias, '.', '_');
            }
            return '';
        };
        this.getPageRecordValueByColumn = function (pageRecord, column) {
            var pageRecordValue = pageRecord[_this.getPageRecordKey(column.propertyIdentifier)] || "";
            //try to find the property again if we need to...
            if (pageRecordValue == "") {
                for (var property in pageRecord) {
                    if (property.indexOf(_this.getPageRecordKey(column.propertyIdentifier).trim()) != -1) {
                        //use this record
                        pageRecordValue = pageRecord[property];
                    }
                }
            }
            //last change to find the value
            if ((angular.isUndefined(pageRecordValue) ||
                (angular.isString(pageRecordValue) && pageRecordValue.trim().length == 0)) &&
                angular.isDefined(column.fallbackPropertyIdentifiers)) {
                var fallbackPropertyArray = column.fallbackPropertyIdentifiers.replace('.', '_').split(",");
                for (var i = 0; i < fallbackPropertyArray.length; i++) {
                    if (angular.isDefined(pageRecord[_this.getPageRecordKey(fallbackPropertyArray[i])])) {
                        pageRecordValue = pageRecord[_this.getPageRecordKey(fallbackPropertyArray[i])];
                        break;
                    }
                }
            }
            return pageRecordValue;
        };
        this.selectCurrentPageRecords = function (listingID) {
            if (!_this.getListing(listingID).collectionData.pageRecords)
                return;
            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {
                if (_this.getListing(listingID).isCurrentPageRecordsSelected == true) {
                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
                }
                else {
                    _this.selectionService.removeSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
                }
            }
        };
        /** returns the index of the item in the listing pageRecord by checking propertyName == recordID */
        this.getSelectedBy = function (listingID, propertyName, value) {
            if (!listingID || !propertyName || !value) {
                return -1;
            }
            ;
            return _this.getListing(listingID).collectionData.pageRecords.findIndex(function (record) { return record[propertyName] == value; });
        };
        /** returns the index of the item in the listing pageRecord by checking propertyName == recordID */
        this.getAllSelected = function (listingID) {
            if (!listingID)
                return -1;
            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {
                _this.selectionService.getSelections(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
            }
        };
        this.clearAllSelections = function (listingID) {
            if (!listingID)
                return -1;
            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {
                _this.selectionService.removeSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
            }
        };
        this.getNGClassObjectForPageRecordRow = function (listingID, pageRecord) {
            var classObjectString = "{";
            angular.forEach(_this.getListing(listingID).colorFilters, function (colorFilter, index) {
                classObjectString = classObjectString.concat("'" + colorFilter.colorClass + "':" + _this.getColorFilterConditionString(colorFilter, pageRecord));
                classObjectString = classObjectString.concat(",");
            });
            classObjectString = classObjectString.concat(" 's-child':" + _this.getPageRecordIsChild(listingID, pageRecord));
            var newFlag = false;
            if (pageRecord && pageRecord.newFlag != null && typeof pageRecord.newFlag === 'string' && pageRecord.newFlag.trim() !== '') {
                newFlag = pageRecord.newFlag;
            }
            classObjectString = classObjectString.concat(",'s-selected-row':" + newFlag);
            classObjectString = classObjectString.concat(",'s-disabled':" + _this.getPageRecordMatchesDisableRule(listingID, pageRecord));
            classObjectString = classObjectString.concat(",'s-edited':pageRecord.edited");
            return classObjectString + "}";
        };
        this.getPageRecordIsChild = function (listingID, pageRecord) {
            var isChild = false;
            //todo implement
            return isChild;
        };
        //End Listing Page Record Functions
        //Row Save Functionality
        this.determineRowEdited = function (pageRecords, pageRecordIndex) {
            var fieldCount = 0;
            for (var key in pageRecords[pageRecordIndex].editedFields) {
                fieldCount++;
                if (fieldCount > 1) {
                    pageRecords[pageRecordIndex].edited = true;
                    return true;
                }
            }
            pageRecords[pageRecordIndex].edited = false;
            return false;
        };
        this.markUnedited = function (listingID, pageRecordIndex, propertyDisplayID) {
            var pageRecords = _this.getListingPageRecords(listingID);
            if (angular.isDefined(pageRecords[pageRecordIndex].editedFields[propertyDisplayID])) {
                delete pageRecords[pageRecordIndex].editedFields[propertyDisplayID];
            }
            return _this.determineRowEdited(pageRecords, pageRecordIndex);
        };
        this.markEdited = function (listingID, pageRecordIndex, propertyDisplayID, saveCallback) {
            var pageRecords = _this.getListingPageRecords(listingID);
            if (angular.isUndefined(pageRecords[pageRecordIndex].editedFields) && !angular.isObject(pageRecords[pageRecordIndex].editedFields)) {
                pageRecords[pageRecordIndex].editedFields = {};
            }
            pageRecords[pageRecordIndex].editedFields[propertyDisplayID] = saveCallback;
            return _this.determineRowEdited(pageRecords, pageRecordIndex);
        };
        this.markSaved = function (listingID, pageRecordIndex) {
            var pageRecords = _this.getListingPageRecords(listingID);
            var savePromises = [];
            for (var key in pageRecords[pageRecordIndex].editedFields) {
                if (angular.isFunction(pageRecords[pageRecordIndex].editedFields[key])) {
                    savePromises.push(pageRecords[pageRecordIndex].editedFields[key]());
                }
            }
            _this.$q.all(savePromises).then(function () {
                delete pageRecords[pageRecordIndex].editedFields;
                pageRecords[pageRecordIndex].edited = false;
            });
        };
        //End Row Save Functionality
        //Setup Functions
        this.setupInSingleCollectionConfigMode = function (listingID, listingDisplayScope) {
            if (_this.getListing(listingID).collectionObject != null &&
                _this.getListing(listingID).collectionConfig != null) {
                _this.getListing(listingID).collectionObject = _this.getListing(listingID).collectionConfig.baseEntityName;
            }
            _this.initCollectionConfigData(listingID, _this.getListing(listingID).collectionConfig);
            _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);
            listingDisplayScope.$watch('swListingDisplay.collectionPromise', function (newValue, oldValue) {
                if (newValue) {
                    _this.$q.when(_this.getListing(listingID).collectionPromise).then(function (data) {
                        _this.getListing(listingID).collectionData = data;
                        _this.setupDefaultCollectionInfo(listingID);
                        if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {
                            _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);
                        }
                        else {
                            _this.getListing(listingID).collectionConfig.loadJson(data.collectionConfig);
                        }
                        _this.notifyListingPageRecordsUpdate(listingID);
                        _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords ||
                            _this.getListing(listingID).collectionData.records;
                        _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
                        _this.getListing(listingID).searching = false;
                        _this.getListing(listingID).columnCount = _this.getListing(listingID).columns.length + 1;
                        if (_this.getListing(listingID).selectable || _this.getListing(listingID).multiselectable || _this.getListing(listingID).sortable) {
                            _this.getListing(listingID).columnCount++;
                        }
                    });
                }
            });
        };
        this.setupInMultiCollectionConfigMode = function (listingID) {
            angular.forEach(_this.getListing(listingID).collectionConfigs, function (value, key) {
                _this.getListing(listingID).collectionObjects[key] = value.baseEntityName;
            });
        };
        this.setupDefaultCollectionInfo = function (listingID) {
            if (_this.getListing(listingID).hasCollectionPromise
                && angular.isDefined(_this.getListing(listingID).collection)
                && _this.getListing(listingID).collectionConfig == null) {
                _this.getListing(listingID).collectionObject = _this.getListing(listingID).collection.collectionObject;
                _this.getListing(listingID).collectionConfig = _this.collectionConfigService.newCollectionConfig(_this.getListing(listingID).collectionObject);
                _this.getListing(listingID).collectionConfig.loadJson(_this.getListing(listingID).collection.collectionConfig);
            }
            if (_this.getListing(listingID).multiSlot == false) {
                _this.$timeout(function () {
                    _this.getListing(listingID).collectionConfig.loadJson(_this.getListing(listingID).collectionData.collectionConfig);
                    _this.getListing(listingID).columns = _this.getListing(listingID).collectionConfig.columns;
                });
            }
            if (_this.getListing(listingID).paginator != null
                && _this.getListing(listingID).collectionConfig != null) {
                _this.getListing(listingID).collectionConfig.setPageShow(_this.getListing(listingID).paginator.getPageShow());
                _this.getListing(listingID).collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.getCurrentPage());
            }
        };
        this.addColumn = function (listingID, column) {
            if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.baseEntityAlias != null) {
                column.propertyIdentifier = _this.getListing(listingID).collectionConfig.baseEntityAlias + "." + column.propertyIdentifier;
            }
            else if (_this.getListingBaseEntityName(listingID) != null) {
                column.propertyIdentifier = '_' + _this.getListingBaseEntityName(listingID).toLowerCase() + '.' + column.propertyIdentifier;
            }
            if (_this.getListingColumnIndexByPropertyIdentifier(listingID, column.propertyIdentifier) === -1) {
                if (column.aggregate) {
                    _this.getListing(listingID).aggregates.push(column.aggregate);
                }
                else {
                    _this.getListing(listingID).columns.push(column);
                }
            }
        };
        this.setupColumns = function (listingID, collectionConfig, collectionObject) {
            //assumes no alias formatting
            if (_this.getListing(listingID).columns.length == 0 &&
                collectionConfig != null) {
                if (collectionConfig.columns == null) {
                    collectionConfig.getEntity().then(function () {
                        for (var j = 0; j < collectionConfig.columns.length; j++) {
                            var column = collectionConfig.columns[j];
                            if (column.isVisible) {
                                _this.getListing(listingID).columns.push(column);
                            }
                        }
                    }, function () {
                        throw ("listing display couldn't initiate no columns");
                    });
                }
                else {
                    for (var j = 0; j < collectionConfig.columns.length; j++) {
                        var column = collectionConfig.columns[j];
                        if (column.isVisible) {
                            _this.getListing(listingID).columns.push(column);
                        }
                    }
                }
            }
            for (var i = 0; i < _this.getListing(listingID).columns.length; i++) {
                var column = _this.getListing(listingID).columns[i];
                _this.setupColumn(listingID, column, collectionConfig, collectionObject);
            }
        };
        this.setupColumn = function (listingID, column, collectionConfig, collectionObject) {
            if (_this.getListing(listingID).collectionConfig != null && !column.hasCellView) {
                _this.getListing(listingID).collectionConfig.addColumn(column.propertyIdentifier, undefined, column);
            }
            if (!collectionConfig && _this.getListing(listingID).collectionConfig != null) {
                collectionConfig = _this.getListing(listingID).collectionConfig != null;
            }
            var baseEntityName = _this.getListingBaseEntityName(listingID);
            if (!collectionObject) {
                collectionObject = baseEntityName;
            }
            //if we have entity information we can make some inferences about the column
            if (baseEntityName != null) {
                var lastEntity = _this.$hibachi.getLastEntityNameInPropertyIdentifier(baseEntityName, column.propertyIdentifier);
                if (angular.isUndefined(column.title)) {
                    column.title = _this.rbkeyService.getRBKey('entity.' + lastEntity.toLowerCase() + '.' + _this.utilityService.listLast(column.propertyIdentifier, '.'));
                }
                if (angular.isUndefined(column.isVisible)) {
                    column.isVisible = true;
                }
                var metadata = _this.$hibachi.getPropertyByEntityNameAndPropertyName(lastEntity, _this.utilityService.listLast(column.propertyIdentifier, '.'));
                if (metadata && angular.isDefined(metadata.persistent)) {
                    column.persistent = metadata.persistent;
                }
                if (metadata && angular.isDefined(metadata.ormtype)) {
                    column.ormtype = metadata.ormtype;
                }
                if (angular.isUndefined(column.type) || column.type == 'none') {
                    if (angular.isDefined(metadata) && angular.isDefined(metadata.hb_formattype)) {
                        column.type = metadata.hb_formattype;
                    }
                    else {
                        column.type = "none";
                    }
                }
                if (column.propertyIdentifier) {
                    _this.getListing(listingID).allpropertyidentifiers = _this.utilityService.listAppend(_this.getListing(listingID).allpropertyidentifiers, column.propertyIdentifier);
                }
                else if (column.processObjectProperty) {
                    column.searchable = false;
                    column.sort = false;
                    _this.getListing(listingID).allprocessobjectproperties = _this.utilityService.listAppend(_this.getListing(listingID).allprocessobjectproperties, column.processObjectProperty);
                }
                if (column.tdclass) {
                    var tdclassArray = column.tdclass.split(' ');
                    if (tdclassArray.indexOf("primary") >= 0 && _this.getListing(listingID).expandable) {
                        _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-expandsortproperty=' + column.propertyIdentifier, " ");
                        column.sort = false;
                    }
                }
            }
            if (angular.isDefined(column.tooltip)) {
                var parsedProperties = _this.utilityService.getPropertiesFromString(column.tooltip);
                if (parsedProperties && parsedProperties.length) {
                    collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
                }
            }
            else {
                column.tooltip = '';
            }
            if (angular.isDefined(column.queryString)) {
                var parsedProperties = _this.utilityService.getPropertiesFromString(column.queryString);
                if (parsedProperties && parsedProperties.length) {
                    collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
                }
            }
            //if the passed in collection has columns perform some formatting
            if (_this.getListing(listingID).hasCollectionPromise) {
                var lastEntity = _this.$hibachi.getLastEntityNameInPropertyIdentifier(collectionObject, _this.utilityService.listRest(column.propertyIdentifier, '.'));
                column.title = column.title || _this.rbkeyService.getRBKey('entity.' + lastEntity.toLowerCase() + '.' + _this.utilityService.listLast(column.propertyIdentifier, '.'));
                if (angular.isUndefined(column.isVisible)) {
                    column.isVisible = true;
                }
            }
            _this.columnOrderBy(listingID, column);
        };
        this.initCollectionConfigData = function (listingID, collectionConfig) {
            //kick off other essential setup
            _this.setupSelect(listingID);
            _this.setupMultiselect(listingID);
            _this.setupExampleEntity(listingID);
            if (collectionConfig != null) {
                angular.forEach(_this.getListing(listingID).filterGroups, function (filterGroup) {
                    collectionConfig.addFilterGroup(filterGroup);
                });
                angular.forEach(_this.getListing(listingID).filters, function (filter) {
                    collectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
                });
                angular.forEach(_this.getListing(listingID).orderBys, function (orderBy) {
                    collectionConfig.addOrderBy(orderBy.orderBy);
                });
                angular.forEach(_this.getListing(listingID).aggregates, function (aggregate) {
                    collectionConfig.addDisplayAggregate(aggregate.propertyIdentifier, aggregate.aggregateFunction, aggregate.aggregateAlias);
                });
                //make sure we have necessary properties to make the actions
                angular.forEach(_this.getListing(listingID).actions, function (action) {
                    if (angular.isDefined(action.queryString)) {
                        var parsedProperties = _this.utilityService.getPropertiesFromString(action.queryString);
                        if (parsedProperties && parsedProperties.length) {
                            collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
                        }
                    }
                });
                //also make sure we have necessary color filter properties
                angular.forEach(_this.getListing(listingID).colorFilters, function (colorFilter) {
                    if (angular.isDefined(colorFilter.propertyToCompare)) {
                        collectionConfig.addDisplayProperty(colorFilter.propertyToCompare, "", { isVisible: false });
                    }
                });
                if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {
                    collectionConfig.addDisplayProperty(_this.getListingExampleEntity(listingID).$$getIDName(), undefined, { isVisible: false });
                }
                collectionConfig.setPageShow(_this.getListing(listingID).paginator.pageShow);
                collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.currentPage);
                if (_this.getListing(listingID).multiselectable && (!_this.getListing(listingID).columns || !_this.getListing(listingID).columns.length)) {
                    //check if it has an active flag and if so then add the active flag
                    if (_this.getListing(listingID).exampleEntity.metaData.activeProperty && !_this.getListing(listingID).hasCollectionPromise) {
                        collectionConfig.addFilter('activeFlag', 1, '=', undefined, true);
                    }
                }
                _this.setupHierarchicalExpandable(listingID, collectionConfig);
            }
            _this.setupSortable(listingID);
            _this.updateColumnAndAdministrativeCount(listingID);
        };
        this.setupSortable = function (listingID) {
            _this.attachToListingPageRecordsUpdate(listingID, _this.getPageRecordsWithManualSortOrder, _this.utilityService.createID(32));
        };
        this.setupSelect = function (listingID) {
            if (_this.getListing(listingID).selectFieldName && _this.getListing(listingID).selectFieldName.length) {
                _this.getListing(listingID).selectable = true;
                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-select', ' ');
                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-selectfield="' + _this.getListing(listingID).selectFieldName + '"', ' ');
            }
        };
        this.setupMultiselect = function (listingID) {
            if (_this.getListing(listingID).multiselectFieldName && _this.getListing(listingID).multiselectFieldName.length) {
                _this.getListing(listingID).multiselectable = true;
                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-multiselect', ' ');
                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-multiselectpropertyidentifier="' + _this.getListing(listingID).multiselectPropertyIdentifier + '"', ' ');
                //attach observer so we know when a selection occurs
                _this.getListing(listingID).observerService.attach(_this.getListing(listingID).updateMultiselectValues, _this.getListing(listingID).defaultSelectEvent, _this.getListing(listingID).collectionObject);
                //attach observer so we know when a pagination change occurs
                _this.getListing(listingID).observerService.attach(_this.getListing(listingID).paginationPageChange, 'swPaginationAction');
            }
            if (_this.getListing(listingID).multiselectValues && _this.getListing(listingID).multiselectValues.length) {
                //select all owned ids
                var multiSelectValuesArray = _this.getListing(listingID).multiselectValues.split(',');
                angular.forEach(multiSelectValuesArray, function (value) {
                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, value);
                });
            }
            if (_this.getListing(listingID).multiselectIdPaths && _this.getListing(listingID).multiselectIdPaths.length) {
                angular.forEach(_this.getListing(listingID).multiselectIdPaths.split(','), function (value) {
                    var id = _this.getListing(listingID).utilityService.listLast(value, '/');
                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, id);
                });
            }
        };
        this.setupExampleEntity = function (listingID) {
            _this.getListing(listingID).exampleEntity = _this.$hibachi.getEntityExample(_this.getListingBaseEntityName(listingID));
            if (_this.getListing(listingID).exampleEntity != null) {
                //Look for Hierarchy in example entity
                if (!_this.getListing(listingID).parentPropertyName || (_this.getListing(listingID).parentPropertyName && !_this.getListing(listingID).parentPropertyName.length)) {
                    if (_this.getListing(listingID).exampleEntity.metaData.hb_parentPropertyName) {
                        _this.getListing(listingID).parentPropertyName = _this.getListing(listingID).exampleEntity.metaData.hb_parentPropertyName;
                    }
                }
                if (!_this.getListing(listingID).childPropertyName || (_this.getListing(listingID).childPropertyName && !_this.getListing(listingID).childPropertyName.length)) {
                    if (_this.getListing(listingID).exampleEntity.metaData.hb_childPropertyName) {
                        _this.getListing(listingID).childPropertyName = _this.getListing(listingID).exampleEntity.metaData.hb_childPropertyName;
                    }
                }
            }
        };
        this.setupHierarchicalExpandable = function (listingID, collectionConfig) {
            //Setup Hierachy Expandable
            if (_this.getListing(listingID).parentPropertyName && _this.getListing(listingID).parentPropertyName.length && _this.getListing(listingID).expandable != false) {
                if (angular.isUndefined(_this.getListing(listingID).expandable)) {
                    _this.getListing(listingID).expandable = true;
                }
                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-expandable', ' ');
                //add parent property root filter
                if (!_this.getListing(listingID).hasCollectionPromise) {
                    collectionConfig.addFilter(_this.getListing(listingID).parentPropertyName + '.' + _this.getListing(listingID).exampleEntity.$$getIDName(), 'NULL', 'IS', undefined, true, false, false);
                }
                //this.collectionConfig.addDisplayProperty(this.exampleEntity.$$getIDName()+'Path',undefined,{isVisible:false});
                //add children column
                if (_this.getListing(listingID).childPropertyName && _this.getListing(listingID).childPropertyName.length) {
                    if (_this.getListing(listingID).getChildCount || !_this.getListing(listingID).hasCollectionPromise) {
                        collectionConfig.addDisplayAggregate(_this.getListing(listingID).childPropertyName, 'COUNT', _this.getListing(listingID).childPropertyName + 'Count', { isVisible: false, isSearchable: false });
                    }
                }
                _this.getListing(listingID).allpropertyidentifiers = _this.utilityService.listAppend(_this.getListing(listingID).allpropertyidentifiers, _this.getListing(listingID).exampleEntity.$$getIDName() + 'Path');
                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-parentidproperty=' + _this.getListing(listingID).parentPropertyName + '.' + _this.getListing(listingID).exampleEntity.$$getIDName(), ' ');
            }
        };
        this.updateColumnAndAdministrativeCount = function (listingID) {
            //Setup a variable for the number of columns so that the none can have a proper colspan
            _this.getListing(listingID).columnCount = (_this.getListing(listingID).columns) ? _this.getListing(listingID).columns.length : 0;
            if (_this.getListing(listingID).selectable) {
                _this.getListing(listingID).columnCount++;
            }
            if (_this.getListing(listingID).multiselectable) {
                _this.getListing(listingID).columnCount++;
            }
            if (_this.getListing(listingID).sortable) {
                _this.getListing(listingID).columnCount++;
            }
            if (_this.getListing(listingID).administrativeCount) {
                _this.getListing(listingID).administrativeCount++;
            }
        };
        this.setupDefaultGetCollection = function (listingID) {
            if (_this.getListing(listingID).collectionConfigs.length == 0) {
                _this.getListing(listingID).collectionPromise = _this.getListing(listingID).collectionConfig.getEntity();
                return function () {
                    _this.getListing(listingID).collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.getCurrentPage());
                    _this.getListing(listingID).collectionConfig.setPageShow(_this.getListing(listingID).paginator.getPageShow());
                    if (_this.getListing(listingID).multiSlot) {
                        _this.getListing(listingID).collectionConfig.getEntity().then(function (data) {
                            _this.getListing(listingID).collectionData = data;
                            _this.setupDefaultCollectionInfo(listingID);
                            _this.getListing(listingID).collectionData.pageRecords = data.pageRecords || data.records;
                            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
                        }, function (reason) {
                            throw ("Listing Service encounter a problem when trying to get collection. Reason: " + reason);
                        });
                    }
                    else {
                        _this.getListing(listingID).collectionPromise.then(function (data) {
                            _this.getListing(listingID).collectionData = data;
                            _this.setupDefaultCollectionInfo(listingID);
                            _this.getListing(listingID).collectionData.pageRecords = data.pageRecords || data.records;
                            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
                        }, function (reason) {
                            throw ("Listing Service encounter a problem when trying to get collection. Reason: " + reason);
                        });
                    }
                };
            }
            else {
                return function () {
                    _this.getListing(listingID).collectionData = {};
                    _this.getListing(listingID).collectionData.pageRecords = [];
                    var allGetEntityPromises = [];
                    angular.forEach(_this.getListing(listingID).collectionConfigs, function (collectionConfig, key) {
                        allGetEntityPromises.push(collectionConfig.getEntity());
                    });
                    if (allGetEntityPromises.length) {
                        _this.$q.all(allGetEntityPromises).then(function (results) {
                            angular.forEach(results, function (result, key) {
                                _this.getListing(listingID).listingService.setupColumns(listingID, _this.getListing(listingID).collectionConfigs[key], _this.getListing(listingID).collectionObjects[key]);
                                _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords.concat(result.records);
                            });
                        }, function (reason) {
                            throw ("listing service had trouble getting collection data because: " + reason);
                        });
                    }
                };
            }
        };
        //End Setup Functions
        //Order By Functions
        //for multi order by
        this.columnOrderBy = function (listingID, column) {
            var isfound = false;
            if (_this.getListing(listingID).collectionConfigs != null) {
                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
                    if (column.propertyIdentifier == orderBy.propertyIdentifier) {
                        isfound = true;
                        _this.getListing(listingID).orderByStates[column.propertyIdentifier] = orderBy.direction;
                    }
                });
            }
            if (!isfound) {
                _this.getListing(listingID).orderByStates[column.propertyIdentifier] = '';
            }
            return _this.getListing(listingID).orderByStates[column.propertyIdentifier];
        };
        //for multi order by
        this.columnOrderByIndex = function (listingID, column) {
            var isfound = false;
            if (column.sorting && column.sorting.active && column.sorting.sortOrder) {
                return column.sorting.sortOrder.toUpperCase();
            }
            if (_this.getListing(listingID).collectionConfig != null) {
                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
                    if (column.propertyIdentifier == orderBy.propertyIdentifier) {
                        isfound = true;
                        _this.getListing(listingID).orderByIndices[column.propertyIdentifier] = index + 1;
                    }
                });
            }
            if (!isfound) {
                _this.getListing(listingID).orderByIndices[column.propertyIdentifier] = '';
            }
            return _this.getListing(listingID).orderByIndices[column.propertyIdentifier];
        };
        //for single column order by
        this.setSingleColumnOrderBy = function (listingID, propertyIdentifier, direction, notify) {
            if (notify === void 0) { notify = true; }
            if (direction.toUpperCase() === "ASC") {
                var oppositeDirection = "DESC";
            }
            else {
                var oppositeDirection = "ASC";
            }
            if (_this.getListing(listingID).collectionConfig != null) {
                var found = false;
                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
                    if (propertyIdentifier == orderBy.propertyIdentifier) {
                        orderBy.direction = direction;
                        found = true;
                    }
                    else {
                        orderBy.direction = oppositeDirection;
                    }
                });
                if (!found) {
                    _this.getListing(listingID).collectionConfig.addOrderBy(propertyIdentifier + "|" + direction);
                }
                if (notify) {
                    _this.observerService.notify(_this.getListingOrderByChangedEventString(listingID));
                }
                _this.getCollection(listingID);
            }
        };
        //for manual sort
        this.setManualSort = function (listingID, toggle) {
            _this.getListing(listingID).sortable = toggle;
            if (toggle) {
                _this.setSingleColumnOrderBy(listingID, "sortOrder", "ASC");
            }
        };
        //for single column order by
        this.toggleOrderBy = function (listingID, column) {
            if (_this.getListing(listingID).hasSingleCollectionConfig()) {
                _this.getListing(listingID).collectionConfig.toggleOrderBy(column.propertyIdentifier, true);
            }
        };
        //End Order By Functions
        this.getColorFilterConditionString = function (colorFilter, pageRecord) {
            if (angular.isDefined(colorFilter.comparisonProperty)) {
                return pageRecord[colorFilter.propertyToCompare.replace('.', '_')] + colorFilter.comparisonOperator + pageRecord[colorFilter.comparisonProperty.replace('.', '_')];
            }
            else {
                return pageRecord[colorFilter.propertyToCompare.replace('.', '_')] + colorFilter.comparisonOperator + colorFilter.comparisonValue;
            }
        };
        //Disable Row Functions
        this.getKeyOfMatchedDisableRule = function (listingID, pageRecord) {
            var disableRuleMatchedKey = -1;
            if (angular.isDefined(_this.getListing(listingID).disableRules)) {
                angular.forEach(_this.getListing(listingID).disableRules, function (rule, key) {
                    if (angular.isDefined(pageRecord[rule.filterPropertyIdentifier])) {
                        if (angular.isString(pageRecord[rule.filterPropertyIdentifier])) {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier].trim();
                        }
                        else {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier];
                        }
                        if (rule.filterComparisonValue == "null") {
                            rule.filterComparisonValue = "";
                        }
                        if (_this.filterService.filterMatch(pageRecordValue, rule.filterComparisonOperator, rule.filterComparisonValue)) {
                            disableRuleMatchedKey = key;
                        }
                        if (disableRuleMatchedKey != -1) {
                            return disableRuleMatchedKey;
                        }
                    }
                });
            }
            return disableRuleMatchedKey;
        };
        this.getPageRecordMatchesDisableRule = function (listingID, pageRecord) {
            return _this.getKeyOfMatchedDisableRule(listingID, pageRecord) != -1;
        };
        //End disable rule functions
        //Expandable Functions
        this.setExpandable = function (listingID, value) {
            if (angular.isDefined(_this.getListing(listingID))) {
                _this.getListing(listingID).expandable = value;
            }
        };
        this.getKeyOfMatchedExpandableRule = function (listingID, pageRecord) {
            var expandableRuleMatchedKey = -1;
            if (angular.isDefined(_this.getListing(listingID)) &&
                angular.isDefined(_this.getListing(listingID).expandableRules)) {
                angular.forEach(_this.getListing(listingID).expandableRules, function (rule, key) {
                    if (angular.isDefined(pageRecord[rule.filterPropertyIdentifier])) {
                        if (angular.isString(pageRecord[rule.filterPropertyIdentifier])) {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier].trim();
                        }
                        else {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier];
                        }
                        if (_this.filterService.filterMatch(pageRecordValue, rule.filterComparisonOperator, rule.filterComparisonValue)) {
                            expandableRuleMatchedKey = key;
                        }
                        if (expandableRuleMatchedKey != -1) {
                            return expandableRuleMatchedKey;
                        }
                    }
                });
            }
            return expandableRuleMatchedKey;
        };
        this.getExampleEntityForExpandableRecord = function (listingID, pageRecord) {
            var childCollectionConfig = _this.getListing(listingID).getPageRecordChildCollectionConfigForExpandableRule(pageRecord);
            if (angular.isDefined(childCollectionConfig)) {
                return _this.$hibachi.getEntityExample(_this.getListing(listingID).getPageRecordChildCollectionConfigForExpandableRule(pageRecord).baseEntityName);
            }
            return _this.getListing(listingID).exampleEntity;
        };
        this.getPageRecordMatchesExpandableRule = function (listingID, pageRecord) {
            return _this.getKeyOfMatchedExpandableRule(listingID, pageRecord) != -1;
        };
        this.hasPageRecordRefreshChildrenEvent = function (listingID, pageRecord) {
            return _this.getPageRecordRefreshChildrenEvent(listingID, pageRecord) != null;
        };
        this.getPageRecordRefreshChildrenEvent = function (listingID, pageRecord) {
            var keyOfExpandableRuleMet = _this.getKeyOfMatchedExpandableRule(listingID, pageRecord);
            if (keyOfExpandableRuleMet != -1) {
                return _this.getListing(listingID).expandableRules[keyOfExpandableRuleMet].refreshChildrenEvent;
            }
        };
        this.getPageRecordChildCollectionConfigForExpandableRule = function (listingID, pageRecord) {
            var keyOfExpandableRuleMet = _this.getKeyOfMatchedExpandableRule(listingID, pageRecord);
            if (_this.getListing(listingID) != null &&
                angular.isFunction(_this.getListing(listingID).exampleEntity.$$getIDName) &&
                angular.isDefined(pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]) &&
                angular.isDefined(_this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]])) {
                return _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]];
            }
            if (keyOfExpandableRuleMet != -1) {
                var childCollectionConfig = _this.getListing(listingID).expandableRules[keyOfExpandableRuleMet].childrenCollectionConfig.clone();
                angular.forEach(childCollectionConfig.filterGroups[0], function (filterGroup, key) {
                    angular.forEach(filterGroup, function (filter, key) {
                        if (angular.isString(filter.value)
                            && filter.value.length
                            && filter.value.charAt(0) == '$') {
                            filter.value = _this.utilityService.replaceStringWithProperties(filter.value, pageRecord);
                        }
                    });
                });
                _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]] = childCollectionConfig;
                return _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]];
            }
        };
        //Setup a store so that controllers can listing for state changes and fire action requests.
        //To create a store, we instantiate it using the object that holds the state variables,
        //and the reducer. We can also add a middleware to the end if you need.
        this.listingDisplayStore = new Store.IStore(this.state, this.listingDisplayStateReducer);
    }
    return ListingService;
}());
exports.ListingService = ListingService;


/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//import pagination = require('../services/paginationservice');
//var PaginationService = pagination.PaginationService;
//'use strict';
var SWPaginationBarController = /** @class */ (function () {
    //@ngInject
    function SWPaginationBarController(paginationService) {
        this.paginationService = paginationService;
        if (angular.isUndefined(this.paginator)) {
            this.paginator = paginationService.createPagination();
        }
    }
    return SWPaginationBarController;
}());
exports.SWPaginationBarController = SWPaginationBarController;
var SWPaginationBar = /** @class */ (function () {
    //@ngInject
    function SWPaginationBar(hibachiPathBuilder, partialsPath) {
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            paginator: "=?"
        };
        this.controller = SWPaginationBarController;
        this.controllerAs = "swPaginationBar";
        this.link = function (scope, element, attrs) { };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(partialsPath) + 'paginationbar.html';
    }
    SWPaginationBar.Factory = function () {
        var directive = function (hibachiPathBuilder, partialsPath) { return new SWPaginationBar(hibachiPathBuilder, partialsPath); };
        directive.$inject = ['hibachiPathBuilder', 'partialsPath'];
        return directive;
    };
    return SWPaginationBar;
}());
exports.SWPaginationBar = SWPaginationBar;


/***/ }),
/* 707 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
//services
var paginationservice_1 = __webpack_require__(708);
var swpaginationbar_1 = __webpack_require__(706);
var core_module_1 = __webpack_require__(8);
var paginationmodule = angular.module('hibachi.pagination', [core_module_1.coremodule.name])
    // .config(['$provide','baseURL',($provide,baseURL)=>{
    // 	$provide.constant('paginationPartials', baseURL+basePartialsPath+'pagination/components/');
    // }])
    .run([function () {
    }])
    //services
    .service('paginationService', paginationservice_1.PaginationService)
    .directive('swPaginationBar', swpaginationbar_1.SWPaginationBar.Factory())
    //constants
    .constant('partialsPath', 'pagination/components/');
exports.paginationmodule = paginationmodule;


/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../../../typings/hibachiTypescript.d.ts" />
/*collection service is used to maintain the state of the ui*/
Object.defineProperty(exports, "__esModule", { value: true });
var Pagination = /** @class */ (function () {
    //@ngInject
    function Pagination(observerService, uuid) {
        var _this = this;
        this.observerService = observerService;
        this.uuid = uuid;
        this.pageShow = 10;
        this.currentPage = 1;
        this.pageStart = 0;
        this.pageEnd = 0;
        this.recordsCount = 0;
        this.totalPages = 0;
        this.pageShowOptions = [
            { display: 10, value: 10 },
            { display: 20, value: 20 },
            { display: 50, value: 50 },
            { display: 250, value: 250 },
            { display: "Auto", value: "Auto" }
        ];
        this.autoScrollPage = 1;
        this.autoScrollDisabled = false;
        this.notifyById = true;
        this.getSelectedPageShowOption = function () {
            return _this.selectedPageShowOption;
        };
        this.pageShowOptionChanged = function (pageShowOption) {
            _this.setPageShow(pageShowOption.value);
            _this.currentPage = 1;
            _this.notify('swPaginationAction', { type: 'setPageShow', payload: _this.getPageShow() });
        };
        this.getTotalPages = function () {
            return _this.totalPages;
        };
        this.setTotalPages = function (totalPages) {
            _this.totalPages = totalPages;
        };
        this.getPageStart = function () {
            return _this.pageStart;
        };
        this.setPageStart = function (pageStart) {
            _this.pageStart = pageStart;
        };
        this.getPageEnd = function () {
            return _this.pageEnd;
        };
        this.setPageEnd = function (pageEnd) {
            _this.pageEnd = pageEnd;
        };
        this.getRecordsCount = function () {
            return _this.recordsCount;
        };
        this.setRecordsCount = function (recordsCount) {
            _this.recordsCount = recordsCount;
        };
        this.getPageShowOptions = function () {
            return _this.pageShowOptions;
        };
        this.setPageShowOptions = function (pageShowOptions) {
            _this.pageShowOptions = pageShowOptions;
        };
        this.getPageShow = function () {
            return _this.pageShow;
        };
        this.setPageShow = function (pageShow) {
            _this.pageShow = pageShow;
        };
        this.getCurrentPage = function () {
            return _this.currentPage;
        };
        this.setCurrentPage = function (currentPage) {
            _this.currentPage = currentPage;
            //this.observerService.notifyById('swPaginationAction', this.uuid,{action:'pageChange', currentPage});
            _this.notify('swPaginationAction', { type: 'setCurrentPage', payload: _this.getCurrentPage() });
        };
        this.previousPage = function () {
            if (_this.getCurrentPage() == 1)
                return;
            _this.setCurrentPage(_this.getCurrentPage() - 1);
        };
        this.nextPage = function () {
            if (_this.getCurrentPage() < _this.getTotalPages()) {
                _this.setCurrentPage(_this.getCurrentPage() + 1);
                _this.notify('swPaginationAction', { type: 'nextPage', payload: _this.getCurrentPage() });
            }
        };
        this.hasPrevious = function () {
            return (_this.getPageStart() <= 1);
        };
        this.hasNext = function () {
            return (_this.getPageEnd() === _this.getRecordsCount());
        };
        this.showPreviousJump = function () {
            return (angular.isDefined(_this.getCurrentPage()) && _this.getCurrentPage() > 3);
        };
        this.showNextJump = function () {
            return !!(_this.getCurrentPage() < _this.getTotalPages() - 3 && _this.getTotalPages() > 6);
        };
        this.previousJump = function () {
            _this.setCurrentPage(_this.currentPage - 3);
        };
        this.nextJump = function () {
            _this.setCurrentPage(_this.getCurrentPage() + 3);
        };
        this.showPageNumber = function (pageNumber) {
            if (_this.getCurrentPage() >= _this.getTotalPages() - 3) {
                if (pageNumber > _this.getTotalPages() - 6) {
                    return true;
                }
            }
            if (_this.getCurrentPage() <= 3) {
                if (pageNumber < 6) {
                    return true;
                }
            }
            else {
                var bottomRange = _this.getCurrentPage() - 2;
                var topRange = _this.getCurrentPage() + 2;
                if (pageNumber > bottomRange && pageNumber < topRange) {
                    return true;
                }
            }
            return false;
        };
        this.setPageRecordsInfo = function (collection) {
            _this.setRecordsCount(collection.recordsCount);
            if (_this.getRecordsCount() === 0) {
                _this.setPageStart(0);
            }
            else {
                _this.setPageStart(collection.pageRecordsStart);
            }
            _this.setPageEnd(collection.pageRecordsEnd);
            _this.setTotalPages(collection.totalPages);
            _this.totalPagesArray = [];
            if (angular.isUndefined(_this.getCurrentPage()) || _this.getCurrentPage() < 5) {
                var start = 1;
                var end = (_this.getTotalPages() <= 10) ? _this.getTotalPages() + 1 : 10;
            }
            else {
                var start = (!_this.showNextJump()) ? _this.getTotalPages() - 4 : _this.getCurrentPage() - 3;
                var end = (_this.showNextJump()) ? _this.getCurrentPage() + 5 : _this.getTotalPages() + 1;
            }
            for (var i = start; i < end; i++) {
                _this.totalPagesArray.push(i);
            }
        };
        this.uuid = uuid;
        this.selectedPageShowOption = this.pageShowOptions[0];
        this.observerService.attach(this.setPageRecordsInfo, 'swPaginationUpdate', this.uuid);
    }
    Pagination.prototype.notify = function (event, parameters) {
        if (this.notifyById === true) {
            this.observerService.notifyById(event, this.uuid, parameters);
        }
        else {
            this.observerService.notify(event, parameters);
        }
    };
    return Pagination;
}());
exports.Pagination = Pagination;
var PaginationService = /** @class */ (function () {
    //@ngInject
    function PaginationService(utilityService, observerService) {
        var _this = this;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.paginations = {};
        this.createPagination = function (id) {
            var uuid = _this.utilityService.createID(10);
            if (angular.isDefined(id)) {
                uuid = id;
            }
            _this.paginations[uuid] = new Pagination(_this.observerService, uuid);
            return _this.paginations[uuid];
        };
        this.getPagination = function (uuid) {
            if (!uuid)
                return;
            return _this.paginations[uuid];
        };
    }
    return PaginationService;
}());
exports.PaginationService = PaginationService;


/***/ }),
/* 709 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * This validate directive will look at the current element, figure out the context (save, edit, delete) and
 * validate based on that context as defined in the validation properties object.
 */
// 'use strict';
// angular.module('slatwalladmin').directive('swValidate',
Object.defineProperty(exports, "__esModule", { value: true });
// [ '$log','$hibachi', function($log, $hibachi) {
var SWValidate = /** @class */ (function () {
    function SWValidate($log, $hibachi) {
        return {
            restrict: "A",
            require: '^ngModel',
            link: function (scope, elem, attr, ngModel) {
                //Define our contexts and validation property enums.
                var ContextsEnum = {
                    SAVE: { name: "save", value: 0 },
                    DELETE: { name: "delete", value: 1 },
                    EDIT: { name: "edit", value: 2 }
                };
                var ValidationPropertiesEnum = {
                    REGEX: { name: "regex", value: 0 },
                    MIN_VALUE: { name: "minValue", value: 1 },
                    MAX_VALUE: { name: "maxValue", value: 2 },
                    EQ: { name: "eq", value: 3 },
                    NEQ: { name: "neq", value: 4 },
                    UNIQUE: { name: "unique", value: 5 },
                    LTE: { name: "lte", value: 6 },
                    GTE: { name: "gte", value: 7 },
                    MIN_LENGTH: { name: "minLength", value: 8 },
                    MAX_LENGTH: { name: "maxLength", value: 9 },
                    DATA_TYPE: { name: "dataType", value: 10 },
                    REQUIRED: { name: "required", value: 11 }
                };
                scope.validationPropertiesEnum = ValidationPropertiesEnum;
                scope.contextsEnum = ContextsEnum;
                var myCurrentContext = scope.contextsEnum.SAVE; //We are only checking the save context right now.
                var contextNamesArray = getNamesFromObject(ContextsEnum); //Convert for higher order functions.
                var validationPropertiesArray = getNamesFromObject(ValidationPropertiesEnum); //Convert for higher order functions.
                var validationObject = scope.propertyDisplay.object.validations.properties; //Get the scope validation object.
                var errors = scope.propertyDisplay.errors;
                var errorMessages = [];
                var failFlag = 0;
                /**
                * Iterates over the validation object looking for the current elements validations, maps that to a validation function list
                * and calls those validate functions. When a validation fails, an error is set, the elements border turns red.
                */
                function validate(name, context, elementValue) {
                    var validationResults = {};
                    validationResults = { "name": "name", "context": "context", "required": "required", "error": "none", "errorkey": "none" };
                    for (var key in validationObject) {
                        // Look for the current attribute in the
                        // validation parameters.
                        if (key === name || key === name + "Flag") {
                            // Now that we have found the current
                            // validation parameters, iterate
                            // through them looking for
                            // the required parameters that match
                            // the current page context (save,
                            // delete, etc.)
                            for (var inner in validationObject[key]) {
                                var required = validationObject[key][inner].required || "false"; // Get
                                // the
                                // required
                                // value
                                var context = validationObject[key][inner].contexts || "none"; // Get
                                // the
                                // element
                                // context
                                //Setup the validation results object to pass back to caller.
                                validationResults = { "name": key, "context": context, "required": required, "error": "none", "errorkey": "none" };
                                var elementValidationArr = map(checkHasValidationType, validationPropertiesArray, validationObject[key][inner]);
                                //Iterate over the array and call the validate function if it has that property.
                                for (var i = 0; i < elementValidationArr.length; i++) {
                                    if (elementValidationArr[i] == true) {
                                        if (validationPropertiesArray[i] === "regex" && elementValue !== "") { //If element is zero, need to check required 
                                            //Get the regex string to match and send to validation function.
                                            var re = validationObject[key][inner].regex;
                                            var result = validate_RegExp(elementValue, re); //true if pattern match, fail otherwise.
                                            if (result != true) {
                                                errorMessages
                                                    .push("Invalid input");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["REGEX"].name;
                                                validationResults.fail = true;
                                            }
                                            else {
                                                errorMessages
                                                    .push("Valid input");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["REGEX"].name;
                                                validationResults.fail = false;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "minValue") {
                                            var validationMinValue = validationObject[key][inner].minValue;
                                            $log.debug(validationMinValue);
                                            var result = validate_MinValue(elementValue, validationMinValue);
                                            $log.debug("e>v" + result + " :" + elementValue, ":" + validationMinValue);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Minimum value is: "
                                                    + validationMinValue);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_VALUE"].name;
                                                validationResults.fail = true;
                                            }
                                            else {
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_VALUE"].name;
                                                validationResults.fail = false;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "maxValue") {
                                            var validationMaxValue = validationObject[key][inner].maxValue;
                                            var result = validate_MaxValue(elementValue, validationMaxValue);
                                            $log.debug("Max Value result is: " + result);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Maximum value is: "
                                                    + validationMaxValue);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MAX_VALUE"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "minLength") {
                                            var validationMinLength = validationObject[key][inner].minLength;
                                            var result = validate_MinLength(elementValue, validationMinLength);
                                            $log.debug("Min Length result is: " + result);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Minimum length must be: "
                                                    + validationMinLength);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_LENGTH"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "maxLength") {
                                            var validationMaxLength = validationObject[key][inner].maxLength;
                                            var result = validate_MaxLength(elementValue, validationMaxLength);
                                            $log.debug("Max Length result is: " + result);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Maximum length is: "
                                                    + validationMaxLength);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MAX_LENGTH"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "eq") {
                                            var validationEq = validationObject[key][inner].eq;
                                            var result = validate_Eq(elementValue, validationEq);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must equal "
                                                    + validationEq);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["EQ"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "neq") {
                                            var validationNeq = validationObject[key][inner].neq;
                                            var result = validate_Neq(elementValue, validationNeq);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must not equal: "
                                                    + validationNeq);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["NEQ"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "lte") {
                                            var validationLte = validationObject[key][inner].lte;
                                            var result = validate_Lte(elementValue, validationLte);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must be less than "
                                                    + validationLte);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["LTE"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "gte") {
                                            var validationGte = validationObject[key][inner].gte;
                                            var result = validate_Gte(elementValue, validationGte);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must be greater than: "
                                                    + validationGte);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["GTE"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "required") {
                                            var validationRequire = validationObject[key][inner].require;
                                            var result = validate_Required(elementValue, validationRequire);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Required");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = ValidationPropertiesEnum["REQUIRED"].name;
                                                validationResults.fail = true;
                                            }
                                            else {
                                                errorMessages
                                                    .push("Required");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = ValidationPropertiesEnum["REQUIRED"].name;
                                                validationResults.fail = false;
                                            }
                                            return validationResults;
                                        }
                                    }
                                }
                            }
                        }
                    } //<---end validate.			
                }
                /**
                * Function to map if we need a validation on this element.
                */
                function checkHasValidationType(validationProp, validationType) {
                    if (validationProp[validationType] != undefined) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                /**
                * Iterates over the properties object finding which types of validation are needed.
                */
                function map(func, array, obj) {
                    var result = [];
                    forEach(array, function (element) {
                        result.push(func(obj, element));
                    });
                    return result;
                }
                /**
                * Array iteration helper.
                */
                function forEach(array, action) {
                    for (var i = 0; i < array.length; i++)
                        action(array[i]);
                }
                /**
                * Helper function to read all the names in our enums into an array that the higher order functions can use.
                */
                function getNamesFromObject(obj) {
                    var result = [];
                    for (var i in obj) {
                        var name = obj[i].name || "stub";
                        result.push(name);
                    }
                    return result;
                }
                /**
                * Tests the value for a RegExp match given by the pattern string.
                * Validates true if pattern match, false otherwise.
                */
                function validate_RegExp(value, pattern) {
                    var regex = new RegExp(pattern);
                    if (regex.test(value)) {
                        return true;
                    }
                    return false;
                }
                /**
                * Validates true if userValue >= minValue (inclusive)
                */
                function validate_MinValue(userValue, minValue) {
                    return (userValue >= minValue);
                }
                /**
                * Validates true if userValue <= maxValue (inclusive)
                */
                function validate_MaxValue(userValue, maxValue) {
                    return (userValue <= maxValue) ? true : false;
                }
                /**
                * Validates true if length of the userValue >= minLength (inclusive)
                */
                function validate_MinLength(userValue, minLength) {
                    return (userValue.length >= minLength) ? true : false;
                }
                /**
                * Validates true if length of the userValue <= maxLength (inclusive)
                */
                function validate_MaxLength(userValue, maxLength) {
                    return (userValue.length <= maxLength) ? true : false;
                }
                /**
                * Validates true if the userValue == eqValue
                */
                function validate_Eq(userValue, eqValue) {
                    return (userValue == eqValue) ? true : false;
                }
                /**
                * Validates true if the userValue != neqValue
                */
                function validate_Neq(userValue, neqValue) {
                    return (userValue != neqValue) ? true : false;
                }
                /**
                * Validates true if the userValue < decisionValue (exclusive)
                */
                function validate_Lte(userValue, decisionValue) {
                    return (userValue < decisionValue) ? true : false;
                }
                /**
                * Validates true if the userValue > decisionValue (exclusive)
                */
                function validate_Gte(userValue, decisionValue) {
                    return (userValue > decisionValue) ? true : false;
                }
                /**
                * Validates true if the userValue === property
                */
                function validate_EqProperty(userValue, property) {
                    return (userValue === property) ? true : false;
                }
                /**
                * Validates true if the given value is !NaN (Negate, Not a Number).
                */
                function validate_IsNumeric(value) {
                    return !isNaN(value) ? true : false;
                }
                /**
                * Validates true if the given userValue is empty and the field is required.
                */
                function validate_Required(property, userValue) {
                    return (userValue == "" && property == true) ? true : false;
                }
                /**
                * Handles the 'eager' validation on every key press.
                */
                ngModel.$parsers.unshift(function (value) {
                    var name = elem.context.name; //Get the element name for the validate function.
                    var currentValue = elem.val(); //Get the current element value to check validations against.
                    var val = validate(name, myCurrentContext, currentValue) || {};
                    //Check if field is required.				
                    $log.debug(scope);
                    $log.debug(val);
                    ngModel.$setValidity(val.errorkey, !val.fail);
                    return true;
                }); //<---end $parsers
                /**
                * This handles 'lazy' validation on blur.
                */
                elem.bind('blur', function (e) {
                });
            }
        };
    }
    SWValidate.Factory = function () {
        var directive = function ($log, $hibachi) { return new SWValidate($log, $hibachi); };
        directive.$inject = ['$log', '$hibachi'];
        return directive;
    };
    return SWValidate;
}());
exports.SWValidate = SWValidate;


/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationDataType = /** @class */ (function () {
    //@ngInject
    function SWValidationDataType(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                var isValidFunction = function (modelValue) {
                    return validationService.validateDataType(modelValue, attributes.swvalidationdatatype);
                };
                ngModel.$validators.swvalidationdatatype = isValidFunction;
                ngModel.$validators['swvalidation' + attributes.swvalidationdatatype] = isValidFunction;
            }
        };
    }
    SWValidationDataType.Factory = function () {
        var directive = function (validationService) { return new SWValidationDataType(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationDataType;
}());
exports.SWValidationDataType = SWValidationDataType;


/***/ }),
/* 711 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationEq = /** @class */ (function () {
    //@ngInject
    function SWValidationEq(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationeq =
                    function (modelValue, viewValue) {
                        return validationService.validateEq(modelValue, attributes.swvalidationeq);
                    }; //<--end function
            } //<--end link
        };
    }
    SWValidationEq.Factory = function () {
        var directive = function (validationService) { return new SWValidationEq(validationService); };
        directive.$inject = [
            'validationService'
        ];
        return directive;
    };
    return SWValidationEq;
}());
exports.SWValidationEq = SWValidationEq;


/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationGte = /** @class */ (function () {
    function SWValidationGte(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationGte =
                    function (modelValue, viewValue) {
                        return validationService.validateGte(modelValue, attributes.swvalidationGte);
                    }; //<--end function
            } //<--end link
        };
    }
    SWValidationGte.Factory = function () {
        var directive = function (validationService) { return new SWValidationGte(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationGte;
}());
exports.SWValidationGte = SWValidationGte;


/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationLte = /** @class */ (function () {
    function SWValidationLte(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationlte =
                    function (modelValue, viewValue) {
                        return validationService.validateLte(modelValue, attributes.swvalidationlte);
                    };
            }
        };
    }
    SWValidationLte.Factory = function () {
        var directive = function (validationService) { return new SWValidationLte(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationLte;
}());
exports.SWValidationLte = SWValidationLte;


/***/ }),
/* 714 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMaxLength = /** @class */ (function () {
    function SWValidationMaxLength(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationmaxlength =
                    function (modelValue, viewValue) {
                        var length = 0;
                        if (viewValue && viewValue.length) {
                            length = viewValue.length;
                        }
                        return validationService.validateMaxLength(length || 0, attributes.swvalidationmaxlength);
                    };
            }
        };
    }
    SWValidationMaxLength.Factory = function () {
        var directive = function (validationService) { return new SWValidationMaxLength(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationMaxLength;
}());
exports.SWValidationMaxLength = SWValidationMaxLength;


/***/ }),
/* 715 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMaxValue = /** @class */ (function () {
    function SWValidationMaxValue(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationmaxvalue =
                    function (modelValue, viewValue) {
                        if (viewValue == null) {
                            return true;
                        }
                        validationService.validateMaxValue(viewValue, attributes.swvalidationmaxvalue);
                    };
            }
        };
    }
    SWValidationMaxValue.Factory = function () {
        var directive = function (validationService) { return new SWValidationMaxValue(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationMaxValue;
}());
exports.SWValidationMaxValue = SWValidationMaxValue;


/***/ }),
/* 716 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMinLength = /** @class */ (function () {
    function SWValidationMinLength($log, validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationminlength =
                    function (modelValue, viewValue) {
                        var length = 0;
                        if (viewValue && viewValue.length) {
                            length = viewValue.length;
                        }
                        return validationService.validateMinLength(length || 0, attributes.swvalidationminlength);
                    };
            }
        };
    }
    SWValidationMinLength.Factory = function () {
        var directive = function ($log, validationService) { return new SWValidationMinLength($log, validationService); };
        directive.$inject = ['$log', 'validationService'];
        return directive;
    };
    return SWValidationMinLength;
}());
exports.SWValidationMinLength = SWValidationMinLength;


/***/ }),
/* 717 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMinValue = /** @class */ (function () {
    function SWValidationMinValue(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationminvalue =
                    function (modelValue, viewValue) {
                        if (viewValue == null) {
                            return true;
                        }
                        return validationService.validateMinValue(viewValue, attributes.swvalidationminvalue);
                    };
            }
        };
    }
    SWValidationMinValue.Factory = function () {
        var directive = function (validationService) { return new SWValidationMinValue(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationMinValue;
}());
exports.SWValidationMinValue = SWValidationMinValue;


/***/ }),
/* 718 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationNeq = /** @class */ (function () {
    function SWValidationNeq(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationneq =
                    function (modelValue) {
                        return validationService.validateNeq(modelValue, attributes.swvalidationneq);
                    };
            }
        };
    }
    SWValidationNeq.Factory = function () {
        var directive = function (validationService) { return new SWValidationNeq(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationNeq;
}());
exports.SWValidationNeq = SWValidationNeq;


/***/ }),
/* 719 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationNumeric = /** @class */ (function () {
    function SWValidationNumeric(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationnumeric =
                    function (modelValue, viewValue) {
                        return validationService.validateNumeric(viewValue);
                    };
            }
        };
    }
    SWValidationNumeric.Factory = function () {
        var directive = function (validationService) { return new SWValidationNumeric(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationNumeric;
}());
exports.SWValidationNumeric = SWValidationNumeric;


/***/ }),
/* 720 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationRegex = /** @class */ (function () {
    function SWValidationRegex(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationregex =
                    function (modelValue) {
                        //Returns true if this user value (model value) does match the pattern
                        return validationService.validateRegex(modelValue, attributes.swvalidationregex);
                    };
            }
        };
    }
    SWValidationRegex.Factory = function () {
        var directive = function (validationService) { return new SWValidationRegex(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationRegex;
}());
exports.SWValidationRegex = SWValidationRegex;


/***/ }),
/* 721 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationRequired = /** @class */ (function () {
    //@ngInject
    function SWValidationRequired(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationrequired =
                    function (modelValue, viewValue) {
                        var value = modelValue || viewValue;
                        if (attributes.swvalidationrequired === "true") {
                            return validationService.validateRequired(value);
                        }
                        else {
                            return true;
                        }
                    };
            }
        };
    }
    SWValidationRequired.Factory = function () {
        var directive = function (validationService) { return new SWValidationRequired(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationRequired;
}());
exports.SWValidationRequired = SWValidationRequired;


/***/ }),
/* 722 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationUnique = /** @class */ (function () {
    //@ngInject
    function SWValidationUnique($http, $q, $hibachi, $log, validationService) {
        return {
            restrict: "A",
            require: ["ngModel", "^?swFormField"],
            link: function (scope, element, attributes, controllers) {
                var ngModel = controllers[0];
                ngModel.$asyncValidators.swvalidationunique = function (modelValue, viewValue) {
                    var currentValue = modelValue || viewValue;
                    var property = controllers[1].property;
                    return validationService.validateUnique(currentValue, controllers[1].object, property);
                };
            }
        };
    }
    SWValidationUnique.Factory = function () {
        var directive = function ($http, $q, $hibachi, $log, validationService) { return new SWValidationUnique($http, $q, $hibachi, $log, validationService); };
        directive.$inject = ['$http', '$q', '$hibachi', '$log', 'validationService'];
        return directive;
    };
    return SWValidationUnique;
}());
exports.SWValidationUnique = SWValidationUnique;


/***/ }),
/* 723 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationUniqueOrNull = /** @class */ (function () {
    //@ngInject
    function SWValidationUniqueOrNull($http, $q, $hibachi, $log, validationService) {
        return {
            restrict: "A",
            require: "ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$asyncValidators.swvalidationuniqueornull = function (modelValue, viewValue) {
                    var currentValue = modelValue || viewValue;
                    if (scope && scope.propertyDisplay && scope.propertyDisplay.property) {
                        var property = scope.propertyDisplay.property;
                        return validationService.validateUniqueOrNull(currentValue, scope.propertyDisplay.object, property);
                    }
                    else {
                        return $q.resolve(); //nothing to validate yet.
                    }
                };
            }
        };
    }
    SWValidationUniqueOrNull.Factory = function () {
        var directive = function ($http, $q, $hibachi, $log, validationService) { return new SWValidationUniqueOrNull($http, $q, $hibachi, $log, validationService); };
        directive.$inject = ['$http', '$q', '$hibachi', '$log', 'validationService'];
        return directive;
    };
    return SWValidationUniqueOrNull;
}());
exports.SWValidationUniqueOrNull = SWValidationUniqueOrNull;


/***/ }),
/* 724 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
Object.defineProperty(exports, "__esModule", { value: true });
var ValidationService = /** @class */ (function () {
    //@ngInject
    function ValidationService($hibachi, $q) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.$q = $q;
        this.MY_EMAIL_REGEXP = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        this.validateUnique = function (value, object, property) {
            var deferred = _this.$q.defer();
            //First time the asyncValidators function is loaded the
            //key won't be set  so ensure that we have
            //key and propertyName before checking with the server
            if (object && property) {
                _this.$hibachi.checkUniqueValue(object, property, value)
                    .then(function (unique) {
                    if (unique) {
                        deferred.resolve(); //It's unique
                    }
                    else {
                        deferred.reject(); //Add unique to $errors
                    }
                });
            }
            else {
                deferred.resolve(); //Ensure promise is resolved if we hit this
            }
            return deferred.promise;
        };
        this.validateUniqueOrNull = function (value, object, property) {
            var deferred = _this.$q.defer();
            //First time the asyncValidators function is loaded the
            //key won't be set  so ensure that we have
            //key and propertyName before checking with the server
            if (object && property) {
                _this.$hibachi.checkUniqueOrNullValue(object, property, value)
                    .then(function (unique) {
                    if (unique) {
                        deferred.resolve(); //It's unique
                    }
                    else {
                        deferred.reject(); //Add unique to $errors
                    }
                });
            }
            else {
                deferred.resolve(); //Ensure promise is resolved if we hit this
            }
            return deferred.promise;
        };
        this.validateEmail = function (value) {
            return _this.validateDataType(value, 'email');
        };
        this.validateDataType = function (value, type) {
            if (value == null) {
                return true;
            } //let required validate this
            if (angular.isString(value) && type === "string") {
                return true;
            }
            if (angular.isNumber(parseInt(value)) && type === "numeric") {
                return true;
            }
            if (angular.isArray(value) && type === "array") {
                return true;
            }
            if (angular.isDate(value) && type === "date") {
                return true;
            }
            if (angular.isObject(value) && type === "object") {
                return true;
            }
            if (type === 'email') {
                return _this.MY_EMAIL_REGEXP.test(value);
            }
            if (angular.isUndefined(value && type === "undefined")) {
                return true;
            }
            return false;
        };
        this.validateEq = function (value, expectedValue) {
            return (value === expectedValue);
        };
        this.validateNeq = function (value, expectedValue) {
            return (value !== expectedValue);
        };
        this.validateGte = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            if (angular.isString(value)) {
                value = parseInt(value);
            }
            if (angular.isString(comparisonValue)) {
                comparisonValue = parseInt(comparisonValue);
            }
            return (value >= comparisonValue);
        };
        this.validateLte = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            if (angular.isString(value)) {
                value = parseInt(value);
            }
            if (angular.isString(comparisonValue)) {
                comparisonValue = parseInt(comparisonValue);
            }
            return (value <= comparisonValue);
        };
        this.validateMaxLength = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateLte(value, comparisonValue);
        };
        this.validateMaxValue = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateLte(value, comparisonValue);
        };
        this.validateMinLength = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateGte(value, comparisonValue);
        };
        this.validateMinValue = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateGte(value, comparisonValue);
        };
        this.validateNumeric = function (value) {
            return !isNaN(value);
        };
        this.validateRegex = function (value, pattern) {
            var regex = new RegExp(pattern);
            return regex.test(value);
        };
        this.validateRequired = function (value) {
            if (value) {
                return true;
            }
            else {
                return false;
            }
        };
        this.$hibachi = $hibachi;
        this.$q = $q;
    }
    return ValidationService;
}());
exports.ValidationService = ValidationService;


/***/ }),
/* 725 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
//components
var swvalidate_1 = __webpack_require__(709);
var swvalidationminlength_1 = __webpack_require__(716);
var swvalidationdatatype_1 = __webpack_require__(710);
var swvalidationeq_1 = __webpack_require__(711);
var swvalidationgte_1 = __webpack_require__(712);
var swvalidationlte_1 = __webpack_require__(713);
var swvalidationmaxlength_1 = __webpack_require__(714);
var swvalidationmaxvalue_1 = __webpack_require__(715);
var swvalidationminvalue_1 = __webpack_require__(717);
var swvalidationneq_1 = __webpack_require__(718);
var swvalidationnumeric_1 = __webpack_require__(719);
var swvalidationregex_1 = __webpack_require__(720);
var swvalidationrequired_1 = __webpack_require__(721);
var swvalidationunique_1 = __webpack_require__(722);
var swvalidationuniqueornull_1 = __webpack_require__(723);
//services
var validationservice_1 = __webpack_require__(724);
var core_module_1 = __webpack_require__(8);
var validationmodule = angular.module('hibachi.validation', [core_module_1.coremodule.name])
    .run([function () {
    }])
    //directives
    .directive('swValidate', swvalidate_1.SWValidate.Factory())
    .directive('swvalidationminlength', swvalidationminlength_1.SWValidationMinLength.Factory())
    .directive('swvalidationdatatype', swvalidationdatatype_1.SWValidationDataType.Factory())
    .directive('swvalidationeq', swvalidationeq_1.SWValidationEq.Factory())
    .directive("swvalidationgte", swvalidationgte_1.SWValidationGte.Factory())
    .directive("swvalidationlte", swvalidationlte_1.SWValidationLte.Factory())
    .directive('swvalidationmaxlength', swvalidationmaxlength_1.SWValidationMaxLength.Factory())
    .directive("swvalidationmaxvalue", swvalidationmaxvalue_1.SWValidationMaxValue.Factory())
    .directive("swvalidationminvalue", swvalidationminvalue_1.SWValidationMinValue.Factory())
    .directive("swvalidationneq", swvalidationneq_1.SWValidationNeq.Factory())
    .directive("swvalidationnumeric", swvalidationnumeric_1.SWValidationNumeric.Factory())
    .directive("swvalidationregex", swvalidationregex_1.SWValidationRegex.Factory())
    .directive("swvalidationrequired", swvalidationrequired_1.SWValidationRequired.Factory())
    .directive("swvalidationunique", swvalidationunique_1.SWValidationUnique.Factory())
    .directive("swvalidationuniqueornull", swvalidationuniqueornull_1.SWValidationUniqueOrNull.Factory())
    //services
    .service("validationService", validationservice_1.ValidationService);
exports.validationmodule = validationmodule;


/***/ }),
/* 726 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAdminCreateSuperUser = /** @class */ (function () {
    function SWAdminCreateSuperUser($hibachi, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "admincreatesuperuser.html",
            link: function (scope, element, attrs) {
                scope.Account_SetupInitialAdmin = $hibachi.newAccount_SetupInitialAdmin();
            }
        };
    }
    SWAdminCreateSuperUser.Factory = function () {
        var directive = function ($hibachi, workflowPartialsPath, hibachiPathBuilder) { return new SWAdminCreateSuperUser($hibachi, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWAdminCreateSuperUser;
}());
exports.SWAdminCreateSuperUser = SWAdminCreateSuperUser;


/***/ }),
/* 727 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSchedulePreviewController = /** @class */ (function () {
    function SWSchedulePreviewController() {
    }
    return SWSchedulePreviewController;
}());
var SWSchedulePreview = /** @class */ (function () {
    function SWSchedulePreview(workflowPartialsPath, hibachiPathBuilder) {
        this.workflowPartialsPath = workflowPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'AE';
        this.scope = {};
        this.bindToController = {
            schedule: "="
        };
        this.controller = SWSchedulePreviewController;
        this.controllerAs = "swSchedulePreview";
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath) + "schedulepreview.html";
    }
    SWSchedulePreview.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWSchedulePreview(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWSchedulePreview.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
    return SWSchedulePreview;
}());
exports.SWSchedulePreview = SWSchedulePreview;


/***/ }),
/* 728 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowBasic = /** @class */ (function () {
    function SWWorkflowBasic(workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowbasic.html",
            link: function (scope, element, attrs) {
            }
        };
    }
    SWWorkflowBasic.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowBasic(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowBasic;
}());
exports.SWWorkflowBasic = SWWorkflowBasic;


/***/ }),
/* 729 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowCondition = /** @class */ (function () {
    function SWWorkflowCondition($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                workflowCondition: "=",
                workflowConditionIndex: "=",
                workflow: "=",
                filterPropertiesList: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowcondition.html",
            link: function (scope, element, attrs) {
                $log.debug('workflowCondition init');
                $log.debug(scope);
                scope.selectBreadCrumb = function (breadCrumbIndex) {
                    //splice out array items above index
                    var removeCount = scope.filterItem.breadCrumbs.length - 1 - breadCrumbIndex;
                    scope.filterItem.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
                    scope.selectedFilterPropertyChanged(null);
                };
                scope.selectedFilterPropertyChanged = function (selectedFilterProperty) {
                    $log.debug('selectedFilterProperty');
                    $log.debug(selectedFilterProperty);
                    scope.selectedFilterProperty = selectedFilterProperty;
                };
                if (angular.isUndefined(scope.workflowCondition.breadCrumbs)) {
                    scope.workflowCondition.breadCrumbs = [];
                    if (scope.workflowCondition.propertyIdentifier === "") {
                        scope.workflowCondition.breadCrumbs = [
                            {
                                entityAlias: scope.workflow.data.workflowObject,
                                cfc: scope.workflow.data.workflowObject,
                                propertyIdentifier: scope.workflow.data.workflowObject
                            }
                        ];
                    }
                    else {
                        var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
                        entityAliasArrayFromString.pop();
                        for (var i in entityAliasArrayFromString) {
                            var breadCrumb = {
                                entityAlias: entityAliasArrayFromString[i],
                                cfc: entityAliasArrayFromString[i],
                                propertyIdentifier: entityAliasArrayFromString[i]
                            };
                            scope.workflowCondition.breadCrumbs.push(breadCrumb);
                        }
                    }
                }
                else {
                    angular.forEach(scope.workflowCondition.breadCrumbs, function (breadCrumb, key) {
                        if (angular.isUndefined(scope.filterPropertiesList[breadCrumb.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(breadCrumb.cfc, true);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, breadCrumb.propertyIdentifier);
                                scope.filterPropertiesList[breadCrumb.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(breadCrumb.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.filterPropertiesList[breadCrumb.propertyIdentifier], breadCrumb.propertyIdentifier);
                                var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
                                entityAliasArrayFromString.pop();
                                entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                                if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                    for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                        var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                        if (filterProperty.propertyIdentifier === scope.workflowCondition.propertyIdentifier) {
                                            //selectItem from drop down
                                            scope.selectedFilterProperty = filterProperty;
                                            //decorate with value and comparison Operator so we can use it in the Condition section
                                            scope.selectedFilterProperty.value = scope.workflowCondition.value;
                                            scope.selectedFilterProperty.comparisonOperator = scope.workflowCondition.comparisonOperator;
                                        }
                                    }
                                }
                            });
                        }
                        else {
                            var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
                            entityAliasArrayFromString.pop();
                            entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                            if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                    var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                    if (filterProperty.propertyIdentifier === scope.workflowCondition.propertyIdentifier) {
                                        //selectItem from drop down
                                        scope.selectedFilterProperty = filterProperty;
                                        //decorate with value and comparison Operator so we can use it in the Condition section
                                        scope.selectedFilterProperty.value = scope.workflowCondition.value;
                                        scope.selectedFilterProperty.comparisonOperator = scope.workflowCondition.comparisonOperator;
                                    }
                                }
                            }
                        }
                    });
                }
            }
        };
    }
    SWWorkflowCondition.Factory = function () {
        var directive = function ($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowCondition($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'metadataService',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowCondition;
}());
exports.SWWorkflowCondition = SWWorkflowCondition;


/***/ }),
/* 730 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowConditionGroupItem = /** @class */ (function () {
    function SWWorkflowConditionGroupItem(workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowconditiongroupitem.html",
            link: function (scope, element, attrs) {
            }
        };
    }
    SWWorkflowConditionGroupItem.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowConditionGroupItem(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowConditionGroupItem;
}());
exports.SWWorkflowConditionGroupItem = SWWorkflowConditionGroupItem;


/***/ }),
/* 731 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowConditionGroups = /** @class */ (function () {
    function SWWorkflowConditionGroups($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                workflowConditionGroupItem: "=",
                workflowConditionGroup: "=",
                workflow: "=",
                filterPropertiesList: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowconditiongroups.html",
            link: function (scope, element, attrs) {
                $log.debug('workflowconditiongroups init');
                scope.addWorkflowCondition = function () {
                    $log.debug('addWorkflowCondition');
                    var workflowCondition = workflowConditionService.newWorkflowCondition();
                    workflowConditionService.addWorkflowCondition(scope.workflowConditionGroupItem, workflowCondition);
                };
                scope.addWorkflowGroupItem = function () {
                    $log.debug('addWorkflowGrouptItem');
                    var workflowConditionGroupItem = workflowConditionService.newWorkflowConditionGroupItem();
                    workflowConditionService.addWorkflowConditionGroupItem(scope.workflowConditionItem, workflowConditionGroupItem);
                };
            }
        };
    }
    SWWorkflowConditionGroups.Factory = function () {
        var directive = function ($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowConditionGroups($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'workflowConditionService',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowConditionGroups;
}());
exports.SWWorkflowConditionGroups = SWWorkflowConditionGroups;


/***/ }),
/* 732 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTask = /** @class */ (function () {
    function SWWorkflowTask(workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                workflowTask: "=",
                workflowTasks: "=",
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtask.html",
            link: function (scope, element, attrs) {
                scope.removeWorkflowTask = function (workflowTask) {
                    var deletePromise = workflowTask.$$delete();
                    deletePromise.then(function () {
                        if (workflowTask === scope.workflowTasks.selectedTask) {
                            delete scope.workflowTasks.selectedTask;
                        }
                        scope.workflowTasks.splice(workflowTask.$$index, 1);
                        for (var i in scope.workflowTasks) {
                            scope.workflowTasks[i].$$index = i;
                        }
                    });
                };
            }
        };
    }
    SWWorkflowTask.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTask(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowTask;
}());
exports.SWWorkflowTask = SWWorkflowTask;


/***/ }),
/* 733 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWWorkflowTaskActionsController = /** @class */ (function () {
    //@ngInject
    function SWWorkflowTaskActionsController($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder, collectionConfigService, observerService) {
        var _this = this;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.metadataService = metadataService;
        this.workflowPartialsPath = workflowPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.$log.debug('Workflow Task Actions Init');
        this.$log.debug(this.workflowTask);
        this.openActions = false;
        this.observerService.attach(function (item) {
            if (angular.isDefined(_this.emailTemplateCollectionConfig)) {
                _this.emailTemplateCollectionConfig.clearFilters();
                _this.emailTemplateCollectionConfig.addFilter("emailTemplateObject", item.value);
            }
            if (angular.isDefined(_this.printTemplateCollectionConfig)) {
                _this.printTemplateCollectionConfig.clearFilters();
                _this.printTemplateCollectionConfig.addFilter("printTemplateObject", item.value);
            }
        }, 'WorkflowWorkflowObjectOnChange');
        /**
         * Returns the correct object based on the selected object type.
         */
        var getObjectByActionType = function (workflowTaskAction) {
            if (workflowTaskAction.data.actionType === 'email') {
                workflowTaskAction.$$getEmailTemplate();
            }
            else if (workflowTaskAction.data.actionType === 'print') {
                workflowTaskAction.$$getPrintTemplate();
            }
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Returns workflow task action, and saves them to the scope variable workflowtaskactions
         * --------------------------------------------------------------------------------------------------------
         */
        this.getWorkflowTaskActions = function () {
            /***
             Note:
             This conditional is checking whether or not we need to be retrieving to
             items all over again. If we already have them, we won't make another
             trip to the database.

             ***/
            if (angular.isUndefined(_this.workflowTask.data.workflowTaskActions)) {
                var workflowTaskPromise = _this.workflowTask.$$getWorkflowTaskActions();
                workflowTaskPromise.then(function () {
                    _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
                    angular.forEach(_this.workflowTaskActions, function (workflowTaskAction) {
                        getObjectByActionType(workflowTaskAction);
                    });
                    _this.$log.debug(_this.workflowTaskActions);
                });
            }
            else {
                _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
            }
            if (angular.isUndefined(_this.workflowTask.data.workflowTaskActions)) {
                _this.workflowTask.data.workflowTaskActions = [];
                _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
            }
        };
        this.getWorkflowTaskActions(); //Call get
        /**
         * --------------------------------------------------------------------------------------------------------
         * Saves the workflow task actions by calling the objects $$save method.
         * @param taskAction
         * --------------------------------------------------------------------------------------------------------
         */
        this.saveWorkflowTaskAction = function (taskAction, context) {
            _this.$log.debug("Context: " + context);
            _this.$log.debug("saving task action and parent task");
            _this.$log.debug(taskAction);
            var savePromise = _this.workflowTaskActions.selectedTaskAction.$$save();
            savePromise.then(function () {
                var taSavePromise = taskAction.$$save;
                //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished
                if (context == 'add') {
                    _this.$log.debug("Save and New");
                    _this.addWorkflowTaskAction(taskAction);
                    _this.finished = false;
                }
                else if (context == "finish") {
                    _this.finished = true;
                }
                //Auto save the workflow now that the task action is saved.
                _this.workflowTask.data.workflow.$$save();
            }, function (err) {
                angular.element('a[href="/##j-basic-2"]').click();
                console.warn(err);
            });
        }; //<--end save
        /**
         * Sets the editing state to show/hide the edit screen.
         */
        this.setHidden = function (task) {
            if (!angular.isObject(task)) {
                task = {};
            }
            if (angular.isUndefined(task.hidden)) {
                task.hidden = false;
            }
            else {
                _this.$log.debug("setHidden()", "Setting Hide Value To " + !task.hidden);
                task.hidden = !task.hidden;
            }
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Adds workflow action items by calling the workflowTask objects $$addWorkflowTaskAction() method
         * and sets the result to scope.
         * @param taskAction
         * --------------------------------------------------------------------------------------------------------
         */
        this.addWorkflowTaskAction = function (taskAction) {
            var workflowTaskAction = _this.workflowTask.$$addWorkflowTaskAction();
            _this.selectWorkflowTaskAction(workflowTaskAction);
            _this.$log.debug(_this.workflow);
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Selects a new task action and populates the task action properties.
         * --------------------------------------------------------------------------------------------------------
         */
        this.selectWorkflowTaskAction = function (workflowTaskAction) {
            _this.$log.debug("Selecting new task action for editing: ");
            _this.$log.debug(workflowTaskAction);
            _this.finished = false;
            _this.workflowTaskActions.selectedTaskAction = undefined;
            var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName(_this.workflowTask.data.workflow.data.workflowObject, true);
            filterPropertiesPromise.then(function (value) {
                _this.filterPropertiesList = {
                    baseEntityName: _this.workflowTask.data.workflow.data.workflowObject,
                    baseEntityAlias: "_" + _this.workflowTask.data.workflow.data.workflowObject
                };
                _this.metadataService.setPropertiesList(value, _this.workflowTask.data.workflow.data.workflowObject);
                _this.filterPropertiesList[_this.workflowTask.data.workflow.data.workflowObject] = _this.metadataService.getPropertiesListByBaseEntityAlias(_this.workflowTask.data.workflow.data.workflowObject);
                _this.metadataService.formatPropertiesList(_this.filterPropertiesList[_this.workflowTask.data.workflow.data.workflowObject], _this.workflowTask.data.workflow.data.workflowObject);
                _this.workflowTaskActions.selectedTaskAction = workflowTaskAction;
                _this.emailTemplateSelected = (_this.workflowTaskActions.selectedTaskAction.data.emailTemplate) ? _this.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateName : '';
                _this.emailTemplateCollectionConfig = _this.collectionConfigService.newCollectionConfig("EmailTemplate");
                _this.emailTemplateCollectionConfig.setDisplayProperties("emailTemplateID,emailTemplateName");
                _this.emailTemplateCollectionConfig.addFilter("emailTemplateObject", _this.workflowTask.data.workflow.data.workflowObject);
                _this.printTemplateSelected = (_this.workflowTaskActions.selectedTaskAction.data.printTemplate) ? _this.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateName : '';
                _this.printTemplateCollectionConfig = _this.collectionConfigService.newCollectionConfig("PrintTemplate");
                _this.printTemplateCollectionConfig.setDisplayProperties("printTemplateID,printTemplateName");
                _this.printTemplateCollectionConfig.addFilter("printTemplateObject", _this.workflowTask.data.workflow.data.workflowObject);
            });
        };
        /**
         * Overrides the confirm directive method deleteEntity. This is needed for the modal popup.
         */
        this.deleteEntity = function (entity) {
            _this.removeWorkflowTaskAction(entity);
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Removes a workflow task action by calling the selected tasks $$delete method
         * and reindexes the list.
         * --------------------------------------------------------------------------------------------------------
         */
        this.removeWorkflowTaskAction = function (workflowTaskAction) {
            var deletePromise = workflowTaskAction.$$delete();
            deletePromise.then(function () {
                if (workflowTaskAction === _this.workflowTaskActions.selectedTaskAction) {
                    delete _this.workflowTaskActions.selectedTaskAction;
                }
                _this.$log.debug("removeWorkflowTaskAction");
                _this.$log.debug(workflowTaskAction);
                _this.workflowTaskActions.splice(workflowTaskAction.$$actionIndex, 1);
                for (var i in _this.workflowTaskActions) {
                    _this.workflowTaskActions[i].$$actionIndex = i;
                }
            });
        };
        this.searchProcess = {
            name: ''
        };
        /**
         * Watches for changes in the proccess
         */
        this.showProcessOptions = false;
        this.processOptions = [];
        //this.$scope.$watch('swWorkflowTaskActions.searchProcess.name', (newValue, oldValue)=>{
        //    if(newValue !== oldValue){
        //        this.getProcessOptions(this.workflowTask.data.workflow.data.workflowObject);
        //    }
        //});
        /**
         * Retrieves the proccess options for a workflow trigger action.
         */
        this.getProcessOptions = function (objectName) {
            if (!_this.processOptions.length) {
                var proccessOptionsPromise = _this.$hibachi.getProcessOptions(objectName);
                proccessOptionsPromise.then(function (value) {
                    _this.processOptions = value.data;
                });
            }
            _this.showProcessOptions = true;
        };
        /**
         * Changes the selected process option value.
         */
        this.selectProcess = function (processOption) {
            _this.workflowTaskActions.selectedTaskAction.data.processMethod = processOption.value;
            _this.searchProcess.name = processOption.value;
            _this.workflowTaskActions.selectedTaskAction.forms.selectedTaskAction.$setDirty();
            //this.searchProcess = processOption.name;
            _this.showProcessOptions = false;
        };
        this.selectEmailTemplate = function (item) {
            if (angular.isDefined(_this.workflowTaskActions.selectedTaskAction.data.emailTemplate)) {
                _this.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateID = item.emailTemplateID;
            }
            else {
                var templateEmail = _this.$hibachi.newEmailTemplate();
                templateEmail.data.emailTemplateID = item.emailTemplateID;
                _this.workflowTaskActions.selectedTaskAction.$$setEmailTemplate(templateEmail);
            }
        };
        this.selectPrintTemplate = function (item) {
            if (angular.isDefined(_this.workflowTaskActions.selectedTaskAction.data.printTemplate)) {
                _this.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateID = item.printTemplateID;
            }
            else {
                var templatePrint = _this.$hibachi.newPrintTemplate();
                templatePrint.data.printTemplateID = item.printTemplateID;
                _this.workflowTaskActions.selectedTaskAction.$$setPrintTemplate(templatePrint);
            }
        };
    }
    return SWWorkflowTaskActionsController;
}());
var SWWorkflowTaskActions = /** @class */ (function () {
    function SWWorkflowTaskActions(workflowPartialsPath, hibachiPathBuilder) {
        this.workflowPartialsPath = workflowPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'AE';
        this.scope = {};
        this.bindToController = {
            workflowTask: "="
        };
        this.controller = SWWorkflowTaskActionsController;
        this.controllerAs = "swWorkflowTaskActions";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath) + "workflowtaskactions.html";
    }
    SWWorkflowTaskActions.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTaskActions(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWWorkflowTaskActions.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
    return SWWorkflowTaskActions;
}());
exports.SWWorkflowTaskActions = SWWorkflowTaskActions;


/***/ }),
/* 734 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * Handles adding, editing, and deleting Workflows Tasks.
 */
var SWWorkflowTasks = /** @class */ (function () {
    function SWWorkflowTasks($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtasks.html",
            link: function (scope, element, attrs) {
                scope.workflowPartialsPath = hibachiPathBuilder.buildPartialsPath(workflowPartialsPath);
                scope.propertiesList = {};
                function logger(context, message) {
                    $log.debug("SwWorkflowTasks :" + context + " : " + message);
                }
                /**
                 * Sets workflowTasks on the scope by populating with $$getWorkflowTasks()
                 */
                scope.getWorkflowTasks = function () {
                    logger("getWorkflowTasks", "Retrieving items");
                    logger("getWorkflowTasks", "Workflow Tasks");
                    $log.debug(scope.workflowTasks);
                    if (!scope.workflow.$$isPersisted()) {
                        scope.workflow.data.workflowTasks = [];
                        scope.workflowTasks = scope.workflow.data.workflowTasks;
                        return;
                    }
                    /***
                       Note:
                       This conditional is checking whether or not we need to be retrieving to
                       items all over again. If we already have them, we won't make another
                       trip to the database.

                     ***/
                    if (angular.isUndefined(scope.workflow.data.workflowTasks)) {
                        var workflowTasksPromise = scope.workflow.$$getWorkflowTasks();
                        workflowTasksPromise.then(function () {
                            scope.workflowTasks = scope.workflow.data.workflowTasks;
                        });
                    }
                    else {
                        logger("getWorkflowTasks", "Retrieving cached Items");
                        scope.workflowTasks = scope.workflow.data.workflowTasks;
                    }
                    if (angular.isUndefined(scope.workflow.data.workflowTasks)) {
                        //Reset the workflowTasks.
                        logger("getWorkflowTasks", "workflowTasks is undefined.");
                        scope.workflow.data.workflowTasks = [];
                        scope.workflowTasks = scope.workflow.data.workflowTasks;
                    }
                };
                scope.getWorkflowTasks(); //call tasks
                /**
                 * Sets the editing state to show/hide the edit screen.
                 */
                scope.setHidden = function (task) {
                    if (!angular.isObject(task) || angular.isUndefined(task.hidden)) {
                        task.hidden = false;
                    }
                    else {
                        logger("setHidden()", "Setting Hide Value To " + !task.hidden);
                        task.hidden = !task.hidden;
                    }
                };
                /**
                 * Add a workflow task and logs the result.
                 */
                scope.addWorkflowTask = function () {
                    var newWorkflowTask = scope.workflow.$$addWorkflowTask();
                    logger("var newWorkflowTask", newWorkflowTask);
                    scope.selectWorkflowTask(newWorkflowTask);
                };
                /**
                  * Watches the select for changes.
                  */
                scope.$watch('workflowTasks.selectedTask.data.workflow.data.workflowObject', function (newValue, oldValue) {
                    logger("scope.$watch", "Change Detected " + newValue + " from " + oldValue);
                    if ((newValue !== oldValue && angular.isDefined(scope.workflowTasks.selectedTask))) {
                        logger("scope.$watch", "Change to " + newValue);
                        scope.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityAlias = '_' + newValue.charAt(0).toLowerCase() + newValue.slice(1);
                        scope.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityName = newValue;
                    }
                });
                /**
                   * --------------------------------------------------------------------------------------------------------
                   * Saves the workflow task by calling the objects $$save method. In addition to calling save here,
                   * we also refresh the data by calling getWorkflowTasks followed by calling the global entity.$$save.
                   * @param task
                   * --------------------------------------------------------------------------------------------------------
                   */
                scope.saveWorkflowTask = function (task, context) {
                    //scope.workflowTasks.selectedTask.$$setWorkflow(scope.workflow);
                    scope.workflowTasks.selectedTask.$$save().then(function (res) {
                        scope.done = true;
                        delete scope.workflowTasks.selectedTask;
                        if (context === 'add') {
                            scope.addWorkflowTask();
                            scope.finished = true;
                        }
                        else if (context == "finish") {
                            scope.finished = false;
                        }
                        //refresh the task information.
                        delete scope.workflow.data.workflowTasks;
                        scope.getWorkflowTasks();
                        //Save the workflow entity automatically.
                        scope.workflow.$$save();
                    }, function (err) {
                    });
                }; //<--end save*/
                /**
                 * Select a workflow task.
                 */
                scope.selectWorkflowTask = function (workflowTask) {
                    scope.done = false;
                    $log.debug(workflowTask);
                    scope.finished = false;
                    scope.workflowTasks.selectedTask = undefined;
                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.workflow.data.workflowObject, true);
                    filterPropertiesPromise.then(function (value) {
                        scope.filterPropertiesList = {
                            baseEntityName: scope.workflow.data.workflowObject,
                            baseEntityAlias: "_" + scope.workflow.data.workflowObject
                        };
                        metadataService.setPropertiesList(value, scope.workflow.data.workflowObject);
                        scope.filterPropertiesList[scope.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflow.data.workflowObject);
                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflow.data.workflowObject], scope.workflow.data.workflowObject);
                        scope.workflowTasks.selectedTask = workflowTask;
                    });
                };
                /* Does a delete of the property using delete */
                scope.softRemoveTask = function (workflowTask) {
                    if (workflowTask === scope.workflowTasks.selectedTask) {
                        delete scope.workflowTasks.selectedTask;
                    }
                    scope.removeIndexFromTasks(workflowTask.$$index);
                    scope.reindexTaskList();
                };
                /* Does an API call delete using $$delete */
                scope.hardRemoveTask = function (workflowTask) {
                    var deletePromise = workflowTask.$$delete();
                    deletePromise.then(function () {
                        if (workflowTask === scope.workflowTasks.selectedTask) {
                            delete scope.workflowTasks.selectedTask;
                        }
                        scope.removeIndexFromTasks(workflowTask.$$index);
                        scope.reindexTaskList();
                    });
                };
                /*Override the delete entity in the confirmation controller*/
                scope.deleteEntity = function (entity) {
                    scope.hardRemoveTask(entity);
                };
                /* Re-indexes the task list */
                scope.reindexTaskList = function () {
                    for (var i in scope.workflowTasks) {
                        logger("ReIndexing the list", i);
                        scope.workflowTasks[i].$$index = i;
                    }
                };
                /* Removes the tasks index from the tasks array */
                scope.removeIndexFromTasks = function (index) {
                    logger("RemoveIndexFromTasks", index);
                    scope.workflowTasks.splice(index, 1);
                };
            }
        };
    }
    SWWorkflowTasks.Factory = function () {
        var directive = function ($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTasks($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'metadataService',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowTasks;
}());
exports.SWWorkflowTasks = SWWorkflowTasks;


/***/ }),
/* 735 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTrigger = /** @class */ (function () {
    function SWWorkflowTrigger($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService) {
        return {
            restrict: 'A',
            replace: true,
            scope: {
                workflowTrigger: "=",
                workflowTriggers: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtrigger.html",
            link: function (scope, element, attrs) {
                /**
                 * Selects the current workflow trigger.
                 */
                scope.selectWorkflowTrigger = function (workflowTrigger) {
                    scope.done = false;
                    scope.finished = false;
                    scope.workflowTriggers.selectedTrigger = undefined;
                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.workflowTrigger.data.workflow.data.workflowObject, true);
                    filterPropertiesPromise.then(function (value) {
                        scope.filterPropertiesList = {
                            baseEntityName: scope.workflowTrigger.data.workflow.data.workflowObject,
                            baseEntityAlias: "_" + scope.workflowTrigger.data.workflow.data.workflowObject
                        };
                        metadataService.setPropertiesList(value, scope.workflowTrigger.data.workflow.data.workflowObject);
                        scope.filterPropertiesList[scope.workflowTrigger.data.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflowTrigger.data.workflow.data.workflowObject);
                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflowTrigger.data.workflow.data.workflowObject], scope.workflowTrigger.data.workflow.data.workflowObject);
                        scope.workflowTriggers.selectedTrigger = workflowTrigger;
                    });
                };
                scope.executingTrigger = false;
                scope.executeWorkflowTrigger = function (workflowTrigger) {
                    if (scope.executingTrigger)
                        return;
                    if (!workflowTrigger.data.workflow.data.workflowTasks || !workflowTrigger.data.workflow.data.workflowTasks.length) {
                        var alert = alertService.newAlert();
                        alert.msg = "You don't have any Task yet!";
                        alert.type = "error";
                        alert.fade = true;
                        alertService.addAlert(alert);
                        return;
                    }
                    scope.executingTrigger = true;
                    var appConfig = $hibachi.getConfig();
                    var urlString = appConfig.baseURL + '/index.cfm/?' + appConfig.action + '=api:workflow.executeScheduleWorkflowTrigger&workflowTriggerID=' + workflowTrigger.data.workflowTriggerID + '&x=' + utilityService.createID();
                    $http.get(urlString).finally(function () {
                        scope.executingTrigger = false;
                        var alert = alertService.newAlert();
                        alert.msg = "Task Triggered Successfully. Check History for Status";
                        alert.type = "success";
                        alert.fade = true;
                        alertService.addAlert(alert);
                    });
                };
                /**
                 * Overrides the delete function for the confirmation modal. Delegates to the normal delete method.
                 */
                scope.deleteEntity = function (entity, index) {
                    scope.deleteTrigger(entity, index);
                };
                /**
                 * Hard deletes a workflow trigger
                 */
                scope.deleteTrigger = function (workflowTrigger, index) {
                    var deleteTriggerPromise = $hibachi.saveEntity('WorkflowTrigger', workflowTrigger.data.workflowTriggerID, {}, 'Delete');
                    deleteTriggerPromise.then(function (value) {
                        scope.workflowTriggers.splice(index, 1);
                    });
                };
            }
        };
    }
    SWWorkflowTrigger.Factory = function () {
        var directive = function ($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService) { return new SWWorkflowTrigger($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'alertService',
            'metadataService',
            'workflowPartialsPath',
            'hibachiPathBuilder',
            'utilityService'
        ];
        return directive;
    };
    return SWWorkflowTrigger;
}());
exports.SWWorkflowTrigger = SWWorkflowTrigger;


/***/ }),
/* 736 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTriggerHistory = /** @class */ (function () {
    function SWWorkflowTriggerHistory(workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService) {
        return {
            restrict: 'A',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtriggerhistory.html",
            link: function (scope, element, attrs) {
                $rootScope.workflowID = scope.workflow.data.workflowID;
                //Build the history collection.
                scope.workflowTriggerHistoryCollection = collectionConfigService.newCollectionConfig("WorkflowTriggerHistory");
                scope.workflowTriggerHistoryCollection.addFilter("workflowTrigger.workflow.workflowID", $rootScope.workflowID, "=");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("workflowTrigger.triggerType");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("response");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("endTime");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("startTime");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("successFlag");
            }
        };
    }
    SWWorkflowTriggerHistory.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService) { return new SWWorkflowTriggerHistory(workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder',
            '$rootScope',
            'collectionConfigService'
        ];
        return directive;
    };
    return SWWorkflowTriggerHistory;
}());
exports.SWWorkflowTriggerHistory = SWWorkflowTriggerHistory;


/***/ }),
/* 737 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTriggers = /** @class */ (function () {
    function SWWorkflowTriggers($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService) {
        return {
            restrict: 'E',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtriggers.html",
            link: function (scope, element, attrs, formController) {
                scope.schedule = {};
                scope.$watch('workflowTriggers.selectedTrigger', function (newValue, oldValue) {
                    if (newValue !== undefined && newValue !== oldValue) {
                        if (newValue.data.triggerType == 'Schedule') {
                            if (angular.isDefined(newValue.data.schedule)) {
                                scope.schedule.selectedName = newValue.data.schedule.data.scheduleName;
                                scope.selectSchedule(newValue.data.schedule.data);
                            }
                            if (angular.isDefined(newValue.data.scheduleCollection)) {
                                scope.selectedCollection = newValue.data.scheduleCollection.data.collectionName;
                            }
                        }
                        else {
                            scope.searchEvent.name = scope.workflowTriggers.selectedTrigger.triggerEventTitle;
                        }
                    }
                });
                scope.collectionCollectionConfig = collectionConfigService.newCollectionConfig("Collection");
                scope.collectionCollectionConfig.setDisplayProperties("collectionID,collectionName");
                scope.collectionCollectionConfig.addFilter("collectionObject", scope.workflow.data.workflowObject);
                observerService.attach(function (item) {
                    scope.collectionCollectionConfig.clearFilters();
                    scope.collectionCollectionConfig.addFilter("collectionObject", item.value);
                    scope.eventOptions = [];
                }, 'WorkflowWorkflowObjectOnChange');
                scope.scheduleCollectionConfig = collectionConfigService.newCollectionConfig("Schedule");
                scope.scheduleCollectionConfig.setDisplayProperties("scheduleID,scheduleName,daysOfMonthToRun,daysOfWeekToRun,recuringType,frequencyStartTime,frequencyEndTime,frequencyInterval");
                scope.daysOfweek = [];
                scope.daysOfMonth = [];
                scope.$id = 'swWorkflowTriggers';
                /**
                 * Retrieves the workflow triggers.
                 */
                scope.getWorkflowTriggers = function () {
                    /***
                       Note:
                       This conditional is checking whether or not we need to be retrieving to
                       items all over again. If we already have them, we won't make another
                       trip to the database.

                    ***/
                    if (!scope.workflow.$$isPersisted()) {
                        scope.workflow.data.workflowTriggers = [];
                        scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                        return;
                    }
                    if (angular.isUndefined(scope.workflow.data.workflowTriggers)) {
                        var workflowTriggersPromise = scope.workflow.$$getWorkflowTriggers();
                        workflowTriggersPromise.then(function () {
                            scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                            /* resets the workflow trigger */
                            if (angular.isUndefined(scope.workflow.data.workflowTriggers)) {
                                scope.workflow.data.workflowTriggers = [];
                                scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                            }
                            angular.forEach(scope.workflowTriggers, function (workflowTrigger, key) {
                                if (workflowTrigger.data.triggerType === 'Schedule') {
                                    workflowTrigger.$$getSchedule();
                                    workflowTrigger.$$getScheduleCollection();
                                } //<---end if
                            }); //<---end forEach
                        }); //<---end workflow triggers promise
                    }
                    else {
                        //Use the cached versions.
                        scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                    } //<---end else
                };
                scope.getWorkflowTriggers(); //call triggers
                scope.showCollections = false;
                scope.collections = [];
                scope.searchEvent = {
                    name: ''
                };
                /**
                 * Watches for changes in the event
                 */
                scope.showEventOptions = false;
                scope.eventOptions = [];
                /**
                 * Retrieves the event options for a workflow trigger item.
                 */
                scope.getEventOptions = function (objectName) {
                    if (!scope.eventOptions.length) {
                        var eventOptionsPromise = $hibachi.getEventOptions(objectName);
                        eventOptionsPromise.then(function (value) {
                            scope.eventOptions = value.data;
                        });
                    }
                    scope.showEventOptions = !scope.showEventOptions;
                };
                /**
                 * Saves the workflow triggers then cascade a save to the workflow object as well.
                 */
                scope.saveWorkflowTrigger = function (context) {
                    if (!scope.workflowTriggers.selectedTrigger.$$isPersisted()) {
                        scope.workflowTriggers.selectedTrigger.$$setWorkflow(scope.workflow);
                    }
                    var saveWorkflowTriggerPromise = scope.workflowTriggers.selectedTrigger.$$save();
                    saveWorkflowTriggerPromise.then(function () {
                        scope.showEventOptions = true;
                        scope.searchEvent = {
                            name: ''
                        };
                        scope.schedule.selectedName = '';
                        scope.schedulePreview = {};
                        //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished
                        if (context == 'add') {
                            scope.addWorkflowTrigger();
                        }
                        else if (context == "finish") {
                            scope.workflowTriggers.selectedTrigger = undefined;
                        }
                        //auto saves the workflow as well.
                        scope.workflow.$$save();
                    });
                };
                scope.closeTrigger = function () {
                    if (!scope.workflowTriggers.selectedTrigger.$$isPersisted()) {
                        scope.workflowTriggers.selectedTrigger.$$setWorkflow();
                    }
                    scope.workflowTriggers.selectedTrigger = undefined;
                };
                /**
                 * Changes the selected trigger value.
                 */
                scope.selectEvent = function (eventOption) {
                    //Needs to clear old and set new.
                    scope.workflowTriggers.selectedTrigger.data.triggerEventTitle = eventOption.name;
                    scope.workflowTriggers.selectedTrigger.data.triggerEvent = eventOption.value;
                    if (eventOption.entityName == scope.workflow.data.workflowObject) {
                        scope.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier = '';
                    }
                    else {
                        scope.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier = eventOption.entityName;
                    }
                    scope.searchEvent.name = eventOption.name;
                    scope.showEventOptions = false;
                    observerService.notifyById('pullBindings', 'WorkflowTriggertriggerEventpullBindings').then(function () {
                    });
                    observerService.notifyById('pullBindings', 'WorkflowTriggertriggerEventTitlepullBindings').then(function () {
                    });
                };
                /**
                 * Selects a new collection.
                 */
                scope.selectCollection = function (collection) {
                    scope.workflowTriggers.selectedTrigger.data.scheduleCollection = collection;
                    scope.showCollections = false;
                };
                /**
                 * Removes a workflow trigger
                 */
                scope.removeWorkflowTrigger = function (workflowTrigger) {
                    if (workflowTrigger === scope.workflowTriggers.selectedTrigger) {
                        delete scope.workflowTriggers.selectedTrigger;
                    }
                    scope.workflowTriggers.splice(workflowTrigger.$$index, 1);
                };
                scope.setAsEvent = function (workflowTrigger) {
                    if (!workflowTrigger.$$isPersisted()) {
                        workflowTrigger.data.saveTriggerHistoryFlag = 0;
                    }
                    //add event,  clear schedule
                };
                scope.setAsSchedule = function (workflowTrigger) {
                    if (!workflowTrigger.$$isPersisted()) {
                        workflowTrigger.data.saveTriggerHistoryFlag = 1;
                    }
                };
                /**
                 * Adds a workflow trigger.
                 */
                scope.addWorkflowTrigger = function () {
                    var newWorkflowTrigger = $hibachi.newWorkflowTrigger();
                    scope.workflowTriggers.selectedTrigger = newWorkflowTrigger;
                };
                scope.addNewSchedule = function () {
                    scope.createSchedule = true;
                    scope.scheduleEntity = $hibachi.newSchedule();
                };
                scope.saveSchedule = function () {
                    if (scope.scheduleEntity.data.recuringType == 'weekly') {
                        scope.scheduleEntity.data.daysOfWeekToRun = scope.daysOfweek.filter(Number).join();
                    }
                    else if (scope.scheduleEntity.data.recuringType == 'monthly') {
                        scope.scheduleEntity.data.daysOfMonthToRun = scope.daysOfMonth.filter(Number).join();
                    }
                    scope.scheduleEntity.$$save().then(function (res) {
                        scope.schedule.selectedName = angular.copy(scope.scheduleEntity.data.scheduleName);
                        scope.selectSchedule(angular.copy(scope.scheduleEntity.data));
                        formService.resetForm(scope.scheduleEntity.forms['scheduleForm']);
                        scope.createSchedule = false;
                    }, function () {
                    });
                };
                scope.selectCollection = function (item) {
                    if (item === undefined) {
                        scope.workflowTriggers.selectedTrigger.$$setScheduleCollection();
                        return;
                    }
                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.scheduleCollection)) {
                        scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID = item.collectionID;
                        scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionName = item.collectionName;
                    }
                    else {
                        var _collection = $hibachi.newCollection();
                        _collection.data.collectionID = item.collectionID;
                        _collection.data.collectionName = item.collectionName;
                        scope.workflowTriggers.selectedTrigger.$$setScheduleCollection(_collection);
                    }
                };
                scope.viewCollection = function () {
                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.scheduleCollection)) {
                        dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                            entityName: 'Collection',
                            entityId: scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID,
                            readOnly: true
                        });
                    }
                };
                scope.selectSchedule = function (item) {
                    if (item === undefined) {
                        scope.schedulePreview = {};
                        scope.workflowTriggers.selectedTrigger.$$setSchedule();
                        return;
                    }
                    scope.schedulePreview = scheduleService.buildSchedulePreview(item, 6);
                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.schedule)) {
                        scope.workflowTriggers.selectedTrigger.data.schedule.data.scheduleID = item.scheduleID;
                        scope.workflowTriggers.selectedTrigger.data.schedule.data.scheduleName = item.scheduleName;
                    }
                    else {
                        var _schedule = $hibachi.newSchedule();
                        _schedule.data.scheduleID = item.scheduleID;
                        _schedule.data.scheduleName = item.scheduleName;
                        scope.workflowTriggers.selectedTrigger.$$setSchedule(_schedule);
                    }
                };
            }
        };
    }
    SWWorkflowTriggers.Factory = function () {
        var directive = function ($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService) { return new SWWorkflowTriggers($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService); };
        directive.$inject = [
            '$hibachi',
            'workflowPartialsPath',
            'formService',
            'observerService',
            'hibachiPathBuilder',
            'collectionConfigService',
            'scheduleService',
            'dialogService'
        ];
        return directive;
    };
    return SWWorkflowTriggers;
}());
exports.SWWorkflowTriggers = SWWorkflowTriggers;


/***/ }),
/* 738 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var baseentityservice_1 = __webpack_require__(15);
var ScheduleService = /** @class */ (function (_super) {
    __extends(ScheduleService, _super);
    //@ngInject
    function ScheduleService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Schedule') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.schedulePreview = {};
        _this.clearSchedulePreview = function () {
            _this.schedulePreview = {};
        };
        _this.addSchedulePreviewItem = function (cdate, longMonthName) {
            if (longMonthName === void 0) { longMonthName = true; }
            var weekday = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            var monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
            var currentDate = (cdate.getMonth() + 1) + '-' + cdate.getDate() + '-' + cdate.getFullYear();
            if (_this.schedulePreview[currentDate] === undefined) {
                _this.schedulePreview[currentDate] = {
                    day: cdate.getDate(),
                    month: (longMonthName) ? month[cdate.getMonth()] : monthShort[cdate.getMonth()],
                    year: cdate.getFullYear(),
                    weekday: weekday[cdate.getDay()],
                    times: []
                };
            }
            _this.schedulePreview[currentDate].times.push(cdate.toLocaleTimeString());
        };
        _this.buildSchedulePreview = function (scheduleObject, totalOfPreviews) {
            if (totalOfPreviews === void 0) { totalOfPreviews = 10; }
            _this.clearSchedulePreview();
            var startTime = new Date(Date.parse(scheduleObject.frequencyStartTime));
            var endTime = (scheduleObject.frequencyEndTime.trim()) ? new Date(Date.parse(scheduleObject.frequencyEndTime)) : false;
            var now = new Date();
            var startPoint = new Date();
            startPoint.setHours(startTime.getHours());
            startPoint.setMinutes(startTime.getMinutes());
            startPoint.setSeconds(startTime.getSeconds());
            var daysToRun = [];
            if (scheduleObject.recuringType == 'weekly') {
                daysToRun = scheduleObject.daysOfWeekToRun.toString().split(',');
                if (!daysToRun.length || scheduleObject.daysOfWeekToRun.toString().trim() == '') {
                    return _this.schedulePreview;
                }
            }
            if (scheduleObject.recuringType == 'monthly') {
                daysToRun = scheduleObject.daysOfMonthToRun.toString().split(',');
                if (!daysToRun.length || !scheduleObject.daysOfWeekToRun || scheduleObject.daysOfWeekToRun.toString().trim() == '') {
                    return _this.schedulePreview;
                }
            }
            var datesAdded = 0;
            for (var i = 0;; i++) {
                if (datesAdded >= totalOfPreviews || i >= 500)
                    break;
                var timeToadd = (scheduleObject.frequencyInterval && scheduleObject.frequencyInterval.toString().trim()) ? (scheduleObject.frequencyInterval * i) * 60000 : i * 24 * 60 * 60 * 1000;
                var currentDatetime = new Date(startPoint.getTime() + timeToadd);
                if (currentDatetime < now)
                    continue;
                if (scheduleObject.recuringType == 'weekly') {
                    if (daysToRun.indexOf((currentDatetime.getDay() + 1).toString()) == -1)
                        continue;
                }
                else if (scheduleObject.recuringType == 'monthly') {
                    if (daysToRun.indexOf(currentDatetime.getDate().toString()) == -1)
                        continue;
                }
                if (!endTime) {
                    _this.addSchedulePreviewItem(currentDatetime);
                    datesAdded++;
                }
                else {
                    if (_this.utilityService.minutesOfDay(startTime) <= _this.utilityService.minutesOfDay(currentDatetime)
                        && _this.utilityService.minutesOfDay(endTime) >= _this.utilityService.minutesOfDay(currentDatetime)) {
                        _this.addSchedulePreviewItem(currentDatetime);
                        datesAdded++;
                    }
                }
            }
            return _this.schedulePreview;
        };
        return _this;
    }
    return ScheduleService;
}(baseentityservice_1.BaseEntityService));
exports.ScheduleService = ScheduleService;


/***/ }),
/* 739 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var WorkflowCondition = /** @class */ (function () {
    function WorkflowCondition() {
        this.propertyIdentifer = "";
        this.comparisonOperator = "";
        this.value = "";
        this.displayPropertyIdentifier = "";
        this.$$disabled = false;
        this.$$isClosed = true;
        this.$$isNew = true;
    }
    return WorkflowCondition;
}());
exports.WorkflowCondition = WorkflowCondition;
var WorkflowConditionGroupItem = /** @class */ (function () {
    function WorkflowConditionGroupItem() {
        this.workflowConditionGroup = [];
    }
    return WorkflowConditionGroupItem;
}());
exports.WorkflowConditionGroupItem = WorkflowConditionGroupItem;
var WorkflowConditionService = /** @class */ (function () {
    function WorkflowConditionService($log, $hibachi, alertService) {
        var _this = this;
        this.$log = $log;
        this.newWorkflowCondition = function () {
            return new WorkflowCondition;
        };
        this.addWorkflowCondition = function (groupItem, condition) {
            _this.$log.debug('addWorkflowCondition');
            _this.$log.debug(groupItem);
            _this.$log.debug(condition);
            if (groupItem.length >= 1) {
                condition.logicalOperator = 'AND';
            }
            groupItem.push(condition);
        };
        this.newWorkflowConditionGroupItem = function () {
            return new WorkflowConditionGroupItem;
        };
        this.addWorkflowConditionGroupItem = function (group, groupItem) {
            group.push(groupItem);
        };
    }
    WorkflowConditionService.$inject = ["$log", "$hibachi", "alertService"];
    return WorkflowConditionService;
}());
exports.WorkflowConditionService = WorkflowConditionService;


/***/ }),
/* 740 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(177);


/***/ })
/******/ ]);
=======
!function(e){function t(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var i={};return t.m=e,t.c=i,t.p="",t(0)}([function(e,t,i){i(29),i(8),i(21),i(22),i(25),i(24),i(26),i(23),i(27),i(30),i(28),i(20),i(19),e.exports=i(31)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(187),r=i(188),a=i(180),o=i(199),s=i(179),l=i(181),c=i(182),u=i(206),d=i(203),p=i(196),f=i(198),h=i(197),g=i(186),m=i(185),y=i(184),v=i(195),b=i(200),$=i(205),w=i(190),C=i(193),S=i(194),P=i(191),D=i(189),k=i(201),I=i(202),O=i(204),T=i(192),A=i(183),_=i(161),E=i(164),x=i(163),F=i(165),M=i(166),j=i(162),L=i(123),B=i(159),R=i(156),N=i(157),U=i(160),G=i(158),V=i(127),W=i(128),q=i(129),H=i(126),z=i(124),K=i(130),Q=i(131),Y=i(133),J=i(134),Z=i(135),X=i(136),ee=i(137),te=i(139),ie=i(142),ne=i(143),re=i(144),ae=i(145),oe=i(141),se=i(150),le=i(154),ce=i(153),ue=i(155),de=i(149),pe=i(146),fe=i(151),he=i(125),ge=i(132),me=i(138),ye=i(140),ve=i(148),be=i(152),$e=i(147),we=i(9),Ce=i(13),Se=angular.module("hibachi.core",["ngAnimate","ngRoute","ngSanitize","ui.bootstrap",we.alertmodule.name,Ce.dialogmodule.name]).config(["$compileProvider","$httpProvider","$logProvider","$filterProvider","$provide","hibachiPathBuilder","appConfig",function(e,t,i,n,r,a,o){a.setBaseURL(o.baseURL),a.setBasePartialsPath("/org/Hibachi/client/src/"),o.debugFlag||(o.debugFlag=!1),i.debugEnabled(o.debugFlag),n.register("likeFilter",function(){return function(e){if(angular.isDefined(e)&&angular.isString(e))return e.replace(new RegExp("%","g"),"")}}),n.register("truncate",function(){return function(e,t,i){if(isNaN(t))return e;if(t<=0)return"";if(e&&e.length>t){if(e=e.substring(0,t),i)for(;" "===e.charAt(e.length-1);)e=e.substr(0,e.length-1);else{var n=e.lastIndexOf(" ");n!==-1&&(e=e.substr(0,n))}return e+"..."}return e}}),n.register("pretruncate",function(){return function(e,t,i){if(isNaN(t))return e;if(t<=0)return"";if(e&&e.length>t){if(e=e.slice("-"+t),i)for(;" "===e.charAt(e.length-1);)e=e.substr(0,e.length-1);else{var n=e.lastIndexOf(" ");n!==-1&&(e=e.substr(0,n))}return"..."+e}return e}}),a.setBaseURL(o.baseURL),a.setBasePartialsPath("/org/Hibachi/client/src/"),t.interceptors.push("hibachiInterceptor")}]).run(["$rootScope","$hibachi","$route","$location",function(e,t,i,n){e.buildUrl=t.buildUrl;var r=n.path;n.path=function(t,a){if(a===!1)var o=i.current,s=e.$on("$locationChangeSuccess",function(){i.current=o,s()});return r.apply(n,[t])}}]).constant("hibachiPathBuilder",new r.HibachiPathBuilder).constant("corePartialsPath","core/components/").service("cacheService",a.CacheService).service("publicService",o.PublicService).service("utilityService",u.UtilityService).service("selectionService",d.SelectionService).service("observerService",p.ObserverService).service("draggableService",c.DraggableService).service("expandableService",y.ExpandableService).service("filterService",m.FilterService).service("formService",g.FormService).service("historyService",C.HistoryService).service("metadataService",v.MetaDataService).service("rbkeyService",b.RbKeyService).service("typeaheadService",$.TypeaheadService).provider("$hibachi",w.$Hibachi).decorator("$hibachi",P.HibachiServiceDecorator).service("hibachiInterceptor",n.HibachiInterceptor.Factory()).service("hibachiScope",D.HibachiScope).service("scopeService",I.ScopeService).service("skuService",O.SkuService).service("localStorageService",S.LocalStorageService).service("requestService",k.RequestService).service("accountService",s.AccountService).service("orderService",f.OrderService).service("orderPaymentService",h.OrderPaymentService).service("cartService",l.CartService).service("hibachiValidationService",T.HibachiValidationService).service("entityService",A.EntityService).controller("globalSearch",_.GlobalSearchController).filter("dateFilter",["$filter",j.DateFilter.Factory]).filter("percentage",[E.PercentageFilter.Factory]).filter("trim",[F.SWTrim.Factory]).filter("entityRBKey",["rbkeyService",x.EntityRBKey.Factory]).filter("swdate",["$filter",j.DateFilter.Factory]).filter("unique",[M.SWUnique.Factory]).directive("swCollectionConfig",V.SWCollectionConfig.Factory()).directive("swCollectionColumn",H.SWCollectionColumn.Factory()).directive("swCollectionFilter",W.SWCollectionFilter.Factory()).directive("swCollectionOrderBy",q.SWCollectionOrderBy.Factory()).directive("swTypeaheadSearch",B.SWTypeaheadSearch.Factory()).directive("swTypeaheadInputField",R.SWTypeaheadInputField.Factory()).directive("swTypeaheadMultiselect",N.SWTypeaheadMultiselect.Factory()).directive("swTypeaheadSearchLineItem",U.SWTypeaheadSearchLineItem.Factory()).directive("swTypeaheadRemoveSelection",G.SWTypeaheadRemoveSelection.Factory()).directive("swActionCaller",L.SWActionCaller.Factory()).directive("swActionCallerDropdown",z.SWActionCallerDropdown.Factory()).directive("swColumnSorter",K.SWColumnSorter.Factory()).directive("swConfirm",Q.SWConfirm.Factory()).directive("swEntityActionBar",Z.SWEntityActionBar.Factory()).directive("swEntityActionBarButtonGroup",X.SWEntityActionBarButtonGroup.Factory()).directive("swExpandableRecord",ee.SWExpandableRecord.Factory()).directive("swGravatar",te.SWGravatar.Factory()).directive("swDraggable",Y.SWDraggable.Factory()).directive("swDraggableContainer",J.SWDraggableContainer.Factory()).directive("swLogin",ie.SWLogin.Factory()).directive("swModalLauncher",ne.SWModalLauncher.Factory()).directive("swModalWindow",re.SWModalWindow.Factory()).directive("swNumbersOnly",ae.SWNumbersOnly.Factory()).directive("swLoading",oe.SWLoading.Factory()).directive("swScrollTrigger",se.SWScrollTrigger.Factory()).directive("swRbkey",de.SWRbKey.Factory()).directive("swOptions",pe.SWOptions.Factory()).directive("swSelection",fe.SWSelection.Factory()).directive("swTabGroup",le.SWTabGroup.Factory()).directive("swTabContent",ce.SWTabContent.Factory()).directive("swTooltip",ue.SWTooltip.Factory()).directive("swClickOutside",he.SWClickOutside.Factory()).directive("swDirective",ge.SWDirective.Factory()).directive("swExportAction",me.SWExportAction.Factory()).directive("swHref",ye.SWHref.Factory()).directive("swProcessCaller",ve.SWProcessCaller.Factory()).directive("sw:sortable",be.SWSortable.Factory()).directive("swOrderByControls",$e.SWOrderByControls.Factory());t.coremodule=Se},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(11),a=i(170),o=i(176),s=function(e){function t(t,i,n,r,s){var l=e.call(this,t)||this;return l.$injector=t,l.$hibachi=i,l.utilityService=n,l.baseObjectName=r,l.objectName=s,l.newEntity=function(e,t){return t||(t=e),l.newObject("Entity",e,t)},l.newProcessObject=function(e,t){return t||(t=e),l.newObject("Process",e,t)},l.newObject=function(e,t,i){i||(i=t);var n=l.$hibachi.getEntityDefinition(t);if(n){var r={};if("Entity"===e?r=a:"Process"===e&&(r=o),r[i]){l.utilityService.extend(r[i],n);var s=new r[i](l.$injector)}else var s=new n;return s}return{}},l.utilityService=n,l.$hibachi=i,l.$injector=t,l.objectName||(l.objectName=l.baseObjectName),l["new"+l.objectName]=function(){return l.newEntity(l.baseObjectName,l.objectName)},l}return n(t,e),t.$inject=["$injector","$hibachi","utilityService","baseObjectName","objectName"],t}(r.BaseObject);t.BaseEntityService=s},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(5),a=function(e){function t(t){return e.call(this,t)||this}return n(t,e),t}(r.BaseTransient);t.BaseEntity=a},function(e,t,i){!function(){var t=i(17),n=i(7).utf8,r=i(18),a=i(7).bin,o=function(e,i){e.constructor==String?e=i&&"binary"===i.encoding?a.stringToBytes(e):n.stringToBytes(e):r(e)?e=Array.prototype.slice.call(e,0):Array.isArray(e)||(e=e.toString());for(var s=t.bytesToWords(e),l=8*e.length,c=1732584193,u=-271733879,d=-1732584194,p=271733878,f=0;f<s.length;f++)s[f]=16711935&(s[f]<<8|s[f]>>>24)|4278255360&(s[f]<<24|s[f]>>>8);s[l>>>5]|=128<<l%32,s[(l+64>>>9<<4)+14]=l;for(var h=o._ff,g=o._gg,m=o._hh,y=o._ii,f=0;f<s.length;f+=16){var v=c,b=u,$=d,w=p;c=h(c,u,d,p,s[f+0],7,-680876936),p=h(p,c,u,d,s[f+1],12,-389564586),d=h(d,p,c,u,s[f+2],17,606105819),u=h(u,d,p,c,s[f+3],22,-1044525330),c=h(c,u,d,p,s[f+4],7,-176418897),p=h(p,c,u,d,s[f+5],12,1200080426),d=h(d,p,c,u,s[f+6],17,-1473231341),u=h(u,d,p,c,s[f+7],22,-45705983),c=h(c,u,d,p,s[f+8],7,1770035416),p=h(p,c,u,d,s[f+9],12,-1958414417),d=h(d,p,c,u,s[f+10],17,-42063),u=h(u,d,p,c,s[f+11],22,-1990404162),c=h(c,u,d,p,s[f+12],7,1804603682),p=h(p,c,u,d,s[f+13],12,-40341101),d=h(d,p,c,u,s[f+14],17,-1502002290),u=h(u,d,p,c,s[f+15],22,1236535329),c=g(c,u,d,p,s[f+1],5,-165796510),p=g(p,c,u,d,s[f+6],9,-1069501632),d=g(d,p,c,u,s[f+11],14,643717713),u=g(u,d,p,c,s[f+0],20,-373897302),c=g(c,u,d,p,s[f+5],5,-701558691),p=g(p,c,u,d,s[f+10],9,38016083),d=g(d,p,c,u,s[f+15],14,-660478335),u=g(u,d,p,c,s[f+4],20,-405537848),c=g(c,u,d,p,s[f+9],5,568446438),p=g(p,c,u,d,s[f+14],9,-1019803690),d=g(d,p,c,u,s[f+3],14,-187363961),u=g(u,d,p,c,s[f+8],20,1163531501),c=g(c,u,d,p,s[f+13],5,-1444681467),p=g(p,c,u,d,s[f+2],9,-51403784),d=g(d,p,c,u,s[f+7],14,1735328473),u=g(u,d,p,c,s[f+12],20,-1926607734),c=m(c,u,d,p,s[f+5],4,-378558),p=m(p,c,u,d,s[f+8],11,-2022574463),d=m(d,p,c,u,s[f+11],16,1839030562),u=m(u,d,p,c,s[f+14],23,-35309556),c=m(c,u,d,p,s[f+1],4,-1530992060),p=m(p,c,u,d,s[f+4],11,1272893353),d=m(d,p,c,u,s[f+7],16,-155497632),u=m(u,d,p,c,s[f+10],23,-1094730640),c=m(c,u,d,p,s[f+13],4,681279174),p=m(p,c,u,d,s[f+0],11,-358537222),d=m(d,p,c,u,s[f+3],16,-722521979),u=m(u,d,p,c,s[f+6],23,76029189),c=m(c,u,d,p,s[f+9],4,-640364487),p=m(p,c,u,d,s[f+12],11,-421815835),d=m(d,p,c,u,s[f+15],16,530742520),u=m(u,d,p,c,s[f+2],23,-995338651),c=y(c,u,d,p,s[f+0],6,-198630844),p=y(p,c,u,d,s[f+7],10,1126891415),d=y(d,p,c,u,s[f+14],15,-1416354905),u=y(u,d,p,c,s[f+5],21,-57434055),c=y(c,u,d,p,s[f+12],6,1700485571),p=y(p,c,u,d,s[f+3],10,-1894986606),d=y(d,p,c,u,s[f+10],15,-1051523),u=y(u,d,p,c,s[f+1],21,-2054922799),c=y(c,u,d,p,s[f+8],6,1873313359),p=y(p,c,u,d,s[f+15],10,-30611744),d=y(d,p,c,u,s[f+6],15,-1560198380),u=y(u,d,p,c,s[f+13],21,1309151649),c=y(c,u,d,p,s[f+4],6,-145523070),p=y(p,c,u,d,s[f+11],10,-1120210379),d=y(d,p,c,u,s[f+2],15,718787259),u=y(u,d,p,c,s[f+9],21,-343485551),c=c+v>>>0,u=u+b>>>0,d=d+$>>>0,p=p+w>>>0}return t.endian([c,u,d,p])};o._ff=function(e,t,i,n,r,a,o){var s=e+(t&i|~t&n)+(r>>>0)+o;return(s<<a|s>>>32-a)+t},o._gg=function(e,t,i,n,r,a,o){var s=e+(t&n|i&~n)+(r>>>0)+o;return(s<<a|s>>>32-a)+t},o._hh=function(e,t,i,n,r,a,o){var s=e+(t^i^n)+(r>>>0)+o;return(s<<a|s>>>32-a)+t},o._ii=function(e,t,i,n,r,a,o){var s=e+(i^(t|~n))+(r>>>0)+o;return(s<<a|s>>>32-a)+t},o._blocksize=16,o._digestsize=16,e.exports=function(e,i){if(void 0===e||null===e)throw new Error("Illegal argument "+e);var n=t.wordsToBytes(o(e,i));return i&&i.asBytes?n:i&&i.asString?a.bytesToString(n):t.bytesToHex(n)}}()},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(11),a=function(e){function t(t){var i=e.call(this,t)||this;return i.errors={},i.messages={},i.populate=function(e){var t=e;e.data&&(t=e.data),t=i.utilityService.nvpToObject(t);var n=function(){var e=r.replace(i.className.toLowerCase()+".",""),n=e.split("."),a=e.replace(/\./g,"_"),o=i;angular.forEach(n,function(e,s){if(o.metaData[e])if(s===n.length-1)if(angular.isObject(t[r])&&o.metaData[e].fieldtype&&"many-to-one"===o.metaData[e].fieldtype){var l=i.entityService.newEntity(o.metaData[e].cfc);l.populate?(l.populate(t[r]),o["$$set"+o.metaData[e].name.charAt(0).toUpperCase()+o.metaData[e].name.slice(1)](l)):(l.$$init(t[r]),o["$$set"+o.metaData[e].name.charAt(0).toUpperCase()+o.metaData[e].name.slice(1)](l))}else angular.isArray(t[a])&&o.metaData[e].fieldtype&&"one-to-many"===o.metaData[e].fieldtype?(o[e]=[],angular.forEach(t[r],function(t,n){var r=i.entityService.newEntity(o.metaData[e].cfc);if(r.populate){r.populate(t);var a=!1;for(var s in o[e])if(o[e][s].$$getID().length>0&&o[e][s].$$getID()===r.$$getID()){a=!0;break}a||o["$$add"+o.metaData[e].singularname.charAt(0).toUpperCase()+o.metaData[e].singularname.slice(1)](r)}else r.$$init(t),o["$$add"+o.metaData[e].singularname.charAt(0).toUpperCase()+o.metaData[e].singularname.slice(1)](r)})):o[e]=t[r];else{var c=o.metaData[e];l=angular.isUndefined(o.data[e])||o.data[e]&&null===o.data[e]?"one-to-many"===c.fieldtype?[]:i.$hibachi["new"+c.cfc]():o.data[e],o["$$set"+c.name.charAt(0).toUpperCase()+c.name.slice(1)](l),o=l}else i[r]=t[r]})};for(var r in t)n();e.errors&&(i.errors=e.errors,i.messages=e.messages)},i.addError=function(e,t){i.errors[e]||(i.errors[e]=[]),angular.isArray(t)?i.addErrorsByArray(e,t):angular.isObject(t)?i.addErrorsByObject(e,t):i.errors[e].push(t)},i.addErrorsByArray=function(e,t){for(var n=0;n<t.length;n++){var r=t[n];i.errors[e].push(r)}},i.addErrorsByObject=function(e,t){i.errors[e]||(i.errors[e]=[]);for(var n in t)for(var r=0;r<t[n].length;r++){var a=t[r];i.errors[e].push(a)}},i.addErrors=function(e){for(var t in e){i.errors[t]||(i.errors[t]=[]);for(var n in e[t])i.errors[t].push(n)}},i.getError=function(e){return i.getErrorByErrorName(e)},i.getErrorByErrorName=function(e){return i.errors[e]},i.hasError=function(e){return i.hasErrorByErrorName(e)},i.hasErrorByErrorName=function(e){return angular.isDefined(i.errors[e])},i.hasErrors=function(){return Object.keys(i.errors).length},i.hasSuccessfulAction=function(e){},i.$hibachi=i.getService("$hibachi"),i.hibachiValidationService=i.getService("hibachiValidationService"),i.utilityService=i.getService("utilityService"),i.entityService=i.getService("entityService"),i}return n(t,e),t}(r.BaseObject);t.BaseTransient=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e}();t.BaseService=i},function(e,t){var i={utf8:{stringToBytes:function(e){return i.bin.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(i.bin.bytesToString(e)))}},bin:{stringToBytes:function(e){for(var t=[],i=0;i<e.length;i++)t.push(255&e.charCodeAt(i));return t},bytesToString:function(e){for(var t=[],i=0;i<e.length;i++)t.push(String.fromCharCode(e[i]));return t.join("")}}};e.exports=i},function(e,t){!function(e){"use strict";function t(e){return function(){var t,i=arguments[0];for(t="["+(e?e+":":"")+i+"] http://errors.angularjs.org/1.5.5/"+(e?e+"/":"")+i,i=1;i<arguments.length;i++){t=t+(1==i?"?":"&")+"p"+(i-1)+"=";var n,r=encodeURIComponent;n=arguments[i],n="function"==typeof n?n.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof n?"undefined":"string"!=typeof n?JSON.stringify(n):n,t+=r(n)}return Error(t)}}function i(e){if(null==e||D(e))return!1;if(an(e)||$(e)||Vi&&e instanceof Vi)return!0;var t="length"in Object(e)&&e.length;return w(t)&&(0<=t&&(t-1 in e||e instanceof Array)||"function"==typeof e.item)}function n(e,t,r){var a,o;if(e)if(S(e))for(a in e)"prototype"==a||"length"==a||"name"==a||e.hasOwnProperty&&!e.hasOwnProperty(a)||t.call(r,e[a],a,e);else if(an(e)||i(e)){var s="object"!=typeof e;for(a=0,o=e.length;a<o;a++)(s||a in e)&&t.call(r,e[a],a,e)}else if(e.forEach&&e.forEach!==n)e.forEach(t,r,e);else if(b(e))for(a in e)t.call(r,e[a],a,e);else if("function"==typeof e.hasOwnProperty)for(a in e)e.hasOwnProperty(a)&&t.call(r,e[a],a,e);else for(a in e)zi.call(e,a)&&t.call(r,e[a],a,e);return e}function r(e,t,i){for(var n=Object.keys(e).sort(),r=0;r<n.length;r++)t.call(i,e[n[r]],n[r]);return n}function a(e){return function(t,i){e(i,t)}}function o(){return++rn}function s(e,t,i){for(var n=e.$$hashKey,r=0,a=t.length;r<a;++r){var o=t[r];if(v(o)||S(o))for(var l=Object.keys(o),c=0,u=l.length;c<u;c++){var d=l[c],p=o[d];i&&v(p)?C(p)?e[d]=new Date(p.valueOf()):P(p)?e[d]=new RegExp(p):p.nodeName?e[d]=p.cloneNode(!0):T(p)?e[d]=p.clone():(v(e[d])||(e[d]=an(p)?[]:{}),s(e[d],[p],!0)):e[d]=p}}return n?e.$$hashKey=n:delete e.$$hashKey,e}function l(e){return s(e,Yi.call(arguments,1),!1)}function c(e){return s(e,Yi.call(arguments,1),!0)}function u(e){return parseInt(e,10)}function d(e,t){return l(Object.create(e),t)}function p(){}function f(e){return e}function h(e){return function(){return e}}function g(e){return S(e.toString)&&e.toString!==Xi}function m(e){return"undefined"==typeof e}function y(e){return"undefined"!=typeof e}function v(e){return null!==e&&"object"==typeof e}function b(e){return null!==e&&"object"==typeof e&&!en(e)}function $(e){return"string"==typeof e}function w(e){return"number"==typeof e}function C(e){return"[object Date]"===Xi.call(e)}function S(e){return"function"==typeof e}function P(e){return"[object RegExp]"===Xi.call(e)}function D(e){return e&&e.window===e}function k(e){return e&&e.$evalAsync&&e.$watch}function I(e){return"boolean"==typeof e}function O(e){return e&&w(e.length)&&on.test(Xi.call(e))}function T(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function A(e){var t={};e=e.split(",");var i;for(i=0;i<e.length;i++)t[e[i]]=!0;return t}function _(e){return Ki(e.nodeName||e[0]&&e[0].nodeName)}function E(e,t){var i=e.indexOf(t);return 0<=i&&e.splice(i,1),i}function x(e,t){function i(e,t){var i,n=t.$$hashKey;if(an(e)){i=0;for(var a=e.length;i<a;i++)t.push(r(e[i]))}else if(b(e))for(i in e)t[i]=r(e[i]);else if(e&&"function"==typeof e.hasOwnProperty)for(i in e)e.hasOwnProperty(i)&&(t[i]=r(e[i]));else for(i in e)zi.call(e,i)&&(t[i]=r(e[i]));return n?t.$$hashKey=n:delete t.$$hashKey,t}function r(e){if(!v(e))return e;var t=o.indexOf(e);if(-1!==t)return s[t];if(D(e)||k(e))throw tn("cpws");var t=!1,n=a(e);return void 0===n&&(n=an(e)?[]:Object.create(en(e)),t=!0),o.push(e),s.push(n),t?i(e,n):n}function a(e){switch(Xi.call(e)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new e.constructor(r(e.buffer));case"[object ArrayBuffer]":if(!e.slice){var t=new ArrayBuffer(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}return e.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new e.constructor(e.valueOf());case"[object RegExp]":return t=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),t.lastIndex=e.lastIndex,t;case"[object Blob]":return new e.constructor([e],{type:e.type})}if(S(e.cloneNode))return e.cloneNode(!0)}var o=[],s=[];if(t){if(O(t)||"[object ArrayBuffer]"===Xi.call(t))throw tn("cpta");if(e===t)throw tn("cpi");return an(t)?t.length=0:n(t,function(e,i){"$$hashKey"!==i&&delete t[i]}),o.push(e),s.push(t),i(e,t)}return r(e)}function F(e,t){if(an(e)){t=t||[];for(var i=0,n=e.length;i<n;i++)t[i]=e[i]}else if(v(e))for(i in t=t||{},e)"$"===i.charAt(0)&&"$"===i.charAt(1)||(t[i]=e[i]);return t||e}function M(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var i,n=typeof e;if(n==typeof t&&"object"==n){if(!an(e)){if(C(e))return!!C(t)&&M(e.getTime(),t.getTime());if(P(e))return!!P(t)&&e.toString()==t.toString();if(k(e)||k(t)||D(e)||D(t)||an(t)||C(t)||P(t))return!1;n=se();for(i in e)if("$"!==i.charAt(0)&&!S(e[i])){if(!M(e[i],t[i]))return!1;n[i]=!0}for(i in t)if(!(i in n)&&"$"!==i.charAt(0)&&y(t[i])&&!S(t[i]))return!1;return!0}if(!an(t))return!1;if((n=e.length)==t.length){for(i=0;i<n;i++)if(!M(e[i],t[i]))return!1;return!0}}return!1}function j(e,t,i){return e.concat(Yi.call(t,i))}function L(e,t){var i=2<arguments.length?Yi.call(arguments,2):[];return!S(t)||t instanceof RegExp?t:i.length?function(){return arguments.length?t.apply(e,j(i,arguments,0)):t.apply(e,i)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function B(t,i){var n=i;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?n=void 0:D(i)?n="$WINDOW":i&&e.document===i?n="$DOCUMENT":k(i)&&(n="$SCOPE"),n}function R(e,t){if(!m(e))return w(t)||(t=t?2:null),JSON.stringify(e,B,t)}function N(e){return $(e)?JSON.parse(e):e}function U(e,t){e=e.replace(dn,"");var i=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(i)?t:i}function G(e,t,i){i=i?-1:1;var n=e.getTimezoneOffset();return t=U(t,n),i*=t-n,e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+i),e}function V(e){e=Vi(e).clone();try{e.empty()}catch(e){}var t=Vi("<div>").append(e).html();try{return e[0].nodeType===gn?Ki(t):t.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Ki(t)})}catch(e){return Ki(t)}}function W(e){try{return decodeURIComponent(e)}catch(e){}}function q(e){var t={};return n((e||"").split("&"),function(e){var i,n,r;e&&(n=e=e.replace(/\+/g,"%20"),i=e.indexOf("="),-1!==i&&(n=e.substring(0,i),r=e.substring(i+1)),n=W(n),y(n)&&(r=!y(r)||W(r),zi.call(t,n)?an(t[n])?t[n].push(r):t[n]=[t[n],r]:t[n]=r))}),t}function H(e){var t=[];return n(e,function(e,i){an(e)?n(e,function(e){t.push(K(i,!0)+(!0===e?"":"="+K(e,!0)))}):t.push(K(i,!0)+(!0===e?"":"="+K(e,!0)))}),t.length?t.join("&"):""}function z(e){return K(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function K(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function Q(e,t){var i,n,r=pn.length;for(n=0;n<r;++n)if(i=pn[n]+t,$(i=e.getAttribute(i)))return i;return null}function Y(e,t){var i,r,a={};n(pn,function(t){t+="app",!i&&e.hasAttribute&&e.hasAttribute(t)&&(i=e,r=e.getAttribute(t))}),n(pn,function(t){t+="app";var n;!i&&(n=e.querySelector("["+t.replace(":","\\:")+"]"))&&(i=n,r=n.getAttribute(t))}),i&&(a.strictDi=null!==Q(i,"strict-di"),t(i,r?[r]:[],a))}function J(t,i,r){v(r)||(r={}),r=l({strictDi:!1},r);var a=function(){if(t=Vi(t),t.injector()){var n=t[0]===e.document?"document":V(t);throw tn("btstrpd",n.replace(/</,"&lt;").replace(/>/,"&gt;"))}return i=i||[],i.unshift(["$provide",function(e){e.value("$rootElement",t)}]),r.debugInfoEnabled&&i.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),i.unshift("ng"),n=Re(i,r.strictDi),n.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,i,n){e.$apply(function(){t.data("$injector",n),i(t)(e)})}]),n},o=/^NG_ENABLE_DEBUG_INFO!/,s=/^NG_DEFER_BOOTSTRAP!/;return e&&o.test(e.name)&&(r.debugInfoEnabled=!0,e.name=e.name.replace(o,"")),e&&!s.test(e.name)?a():(e.name=e.name.replace(s,""),nn.resumeBootstrap=function(e){return n(e,function(e){i.push(e)}),a()},void(S(nn.resumeDeferredBootstrap)&&nn.resumeDeferredBootstrap()))}function Z(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function X(e){if(e=nn.element(e).injector(),!e)throw tn("test");return e.get("$$testability")}function ee(e,t){return t=t||"_",e.replace(fn,function(e,i){return(i?t:"")+e.toLowerCase()})}function te(){var t;if(!hn){var i=un();(Wi=m(i)?e.jQuery:i?e[i]:void 0)&&Wi.fn.on?(Vi=Wi,l(Wi.fn,{scope:Tn.scope,isolateScope:Tn.isolateScope,controller:Tn.controller,injector:Tn.injector,inheritedData:Tn.inheritedData}),t=Wi.cleanData,Wi.cleanData=function(e){for(var i,n,r=0;null!=(n=e[r]);r++)(i=Wi._data(n,"events"))&&i.$destroy&&Wi(n).triggerHandler("$destroy");t(e)}):Vi=he,nn.element=Vi,hn=!0}}function ie(e,t,i){if(!e)throw tn("areq",t||"?",i||"required");return e}function ne(e,t,i){return i&&an(e)&&(e=e[e.length-1]),ie(S(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function re(e,t){if("hasOwnProperty"===e)throw tn("badname",t)}function ae(e,t,i){if(!t)return e;t=t.split(".");for(var n,r=e,a=t.length,o=0;o<a;o++)n=t[o],e&&(e=(r=e)[n]);return!i&&S(e)?L(r,e):e}function oe(e){for(var t,i=e[0],n=e[e.length-1],r=1;i!==n&&(i=i.nextSibling);r++)(t||e[r]!==i)&&(t||(t=Vi(Yi.call(e,0,r))),t.push(i));return t||e}function se(){return Object.create(null)}function le(e){function i(e,t,i){return e[t]||(e[t]=i())}var n=t("$injector"),r=t("ng");return e=i(e,"angular",Object),e.$$minErr=e.$$minErr||t,i(e,"module",function(){var e={};return function(t,a,o){if("hasOwnProperty"===t)throw r("badname","module");return a&&e.hasOwnProperty(t)&&(e[t]=null),i(e,t,function(){function e(e,t,i,n){return n||(n=r),function(){return n[i||"push"]([e,t,arguments]),u}}function i(e,i){return function(n,a){return a&&S(a)&&(a.$$moduleName=t),r.push([e,i,arguments]),u}}if(!a)throw n("nomod",t);var r=[],s=[],l=[],c=e("$injector","invoke","push",s),u={_invokeQueue:r,_configBlocks:s,_runBlocks:l,requires:a,name:t,provider:i("$provide","provider"),factory:i("$provide","factory"),service:i("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:i("$provide","decorator"),animation:i("$animateProvider","register"),filter:i("$filterProvider","register"),controller:i("$controllerProvider","register"),directive:i("$compileProvider","directive"),component:i("$compileProvider","component"),config:c,run:function(e){return l.push(e),this}};return o&&c(o),u})}})}function ce(i){l(i,{bootstrap:J,copy:x,extend:l,merge:c,equals:M,element:Vi,forEach:n,injector:Re,noop:p,bind:L,toJson:R,fromJson:N,identity:f,isUndefined:m,isDefined:y,isString:$,isFunction:S,isObject:v,isNumber:w,isElement:T,isArray:an,version:mn,isDate:C,lowercase:Ki,uppercase:Qi,callbacks:{counter:0},getTestability:X,$$minErr:t,$$csp:cn,reloadWithDebugInfo:Z}),(qi=le(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:Jt}),e.provider("$compile",Ke).directive({a:Fr,input:Jr,textarea:Jr,form:Br,script:Na,select:Va,style:qa,option:Wa,ngBind:ea,ngBindHtml:ia,ngBindTemplate:ta,ngClass:ra,ngClassEven:oa,ngClassOdd:aa,ngCloak:sa,ngController:la,ngForm:Rr,ngHide:xa,ngIf:da,ngInclude:pa,ngInit:ha,ngNonBindable:ka,ngPluralize:Aa,ngRepeat:_a,ngShow:Ea,ngStyle:Fa,ngSwitch:Ma,ngSwitchWhen:ja,ngSwitchDefault:La,ngOptions:Ta,ngTransclude:Ra,ngModel:Sa,ngList:ga,ngChange:na,pattern:za,ngPattern:za,required:Ha,ngRequired:Ha,minlength:Qa,ngMinlength:Qa,maxlength:Ka,ngMaxlength:Ka,ngValue:Xr,ngModelOptions:Da}).directive({ngInclude:fa}).directive(Mr).directive(ca),e.provider({$anchorScroll:Ne,$animate:Vn,$animateCss:Hn,$$animateJs:Un,$$animateQueue:Gn,$$AnimateRunner:qn,$$animateAsyncRun:Wn,$browser:qe,$cacheFactory:He,$controller:et,$document:tt,$exceptionHandler:it,$filter:di,$$forceReflow:Zn,$interpolate:ht,$interval:gt,$http:ut,$httpParamSerializer:rt,$httpParamSerializerJQLike:at,$httpBackend:pt,$xhrFactory:dt,$location:It,$log:Ot,$parse:qt,$rootScope:Yt,$q:Ht,$$q:zt,$sce:ti,$sceDelegate:ei,$sniffer:ii,$templateCache:ze,$templateRequest:ni,$$testability:ri,$timeout:ai,$window:li,$$rAF:Qt,$$jqLite:Fe,$$HashMap:xn,$$cookieReader:ui})}])}function ue(e){return e.replace(bn,function(e,t,i,n){return n?i.toUpperCase():i}).replace($n,"Moz$1")}function de(e){return e=e.nodeType,1===e||!e||9===e}function pe(e,t){var i,r,a=t.createDocumentFragment(),o=[];if(Pn.test(e)){for(i=i||a.appendChild(t.createElement("div")),r=(Dn.exec(e)||["",""])[1].toLowerCase(),r=In[r]||In._default,i.innerHTML=r[1]+e.replace(kn,"<$1></$2>")+r[2],r=r[0];r--;)i=i.lastChild;o=j(o,i.childNodes),i=a.firstChild,i.textContent=""}else o.push(t.createTextNode(e));return a.textContent="",a.innerHTML="",n(o,function(e){a.appendChild(e)}),a}function fe(e,t){var i=e.parentNode;i&&i.replaceChild(t,e),t.appendChild(e)}function he(t){if(t instanceof he)return t;var i;if($(t)&&(t=sn(t),i=!0),!(this instanceof he)){if(i&&"<"!=t.charAt(0))throw Cn("nosel");return new he(t)}if(i){i=e.document;var n;t=(n=Sn.exec(t))?[i.createElement(n[1])]:(n=pe(t,i))?n.childNodes:[]}Pe(this,t)}function ge(e){return e.cloneNode(!0)}function me(e,t){if(t||ve(e),e.querySelectorAll)for(var i=e.querySelectorAll("*"),n=0,r=i.length;n<r;n++)ve(i[n])}function ye(e,t,i,r){if(y(r))throw Cn("offargs");var a=(r=be(e))&&r.events,o=r&&r.handle;if(o)if(t){var s=function(t){var n=a[t];y(i)&&E(n||[],i),y(i)&&n&&0<n.length||(e.removeEventListener(t,o,!1),delete a[t])};n(t.split(" "),function(e){s(e),wn[e]&&s(wn[e])})}else for(t in a)"$destroy"!==t&&e.removeEventListener(t,o,!1),delete a[t]}function ve(e,t){var i=e.ng339,n=i&&yn[i];n&&(t?delete n.data[t]:(n.handle&&(n.events.$destroy&&n.handle({},"$destroy"),ye(e)),delete yn[i],e.ng339=void 0))}function be(e,t){var i=e.ng339,i=i&&yn[i];return t&&!i&&(e.ng339=i=++vn,i=yn[i]={events:{},data:{},handle:void 0}),i}function $e(e,t,i){if(de(e)){var n=y(i),r=!n&&t&&!v(t),a=!t;if(e=(e=be(e,!r))&&e.data,n)e[t]=i;else{if(a)return e;if(r)return e&&e[t];l(e,t)}}}function we(e,t){return!!e.getAttribute&&-1<(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")}function Ce(e,t){t&&e.setAttribute&&n(t.split(" "),function(t){e.setAttribute("class",sn((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+sn(t)+" "," ")))})}function Se(e,t){if(t&&e.setAttribute){var i=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");n(t.split(" "),function(e){e=sn(e),-1===i.indexOf(" "+e+" ")&&(i+=e+" ")}),e.setAttribute("class",sn(i))}}function Pe(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var i=t.length;if("number"==typeof i&&t.window!==t){if(i)for(var n=0;n<i;n++)e[e.length++]=t[n]}else e[e.length++]=t}}function De(e,t){return ke(e,"$"+(t||"ngController")+"Controller")}function ke(e,t,i){for(9==e.nodeType&&(e=e.documentElement),t=an(t)?t:[t];e;){for(var n=0,r=t.length;n<r;n++)if(y(i=Vi.data(e,t[n])))return i;e=e.parentNode||11===e.nodeType&&e.host}}function Ie(e){for(me(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Oe(e,t){t||me(e);var i=e.parentNode;i&&i.removeChild(e)}function Te(t,i){i=i||e,"complete"===i.document.readyState?i.setTimeout(t):Vi(i).on("load",t)}function Ae(e,t){var i=An[t.toLowerCase()];return i&&_n[_(e)]&&i}function _e(e,t){var i=function(i,n){i.isDefaultPrevented=function(){return i.defaultPrevented};var r=t[n||i.type],a=r?r.length:0;if(a){if(m(i.immediatePropagationStopped)){var o=i.stopImmediatePropagation;i.stopImmediatePropagation=function(){i.immediatePropagationStopped=!0,i.stopPropagation&&i.stopPropagation(),o&&o.call(i)}}i.isImmediatePropagationStopped=function(){return!0===i.immediatePropagationStopped};var s=r.specialHandlerWrapper||Ee;1<a&&(r=F(r));for(var l=0;l<a;l++)i.isImmediatePropagationStopped()||s(e,i,r[l])}};return i.elem=e,i}function Ee(e,t,i){i.call(e,t)}function xe(e,t,i){var n=t.relatedTarget;n&&(n===e||On.call(e,n))||i.call(e,t)}function Fe(){this.$get=function(){return l(he,{hasClass:function(e,t){return e.attr&&(e=e[0]),we(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Se(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Ce(e,t)}})}}function Me(e,t){var i=e&&e.$$hashKey;return i?("function"==typeof i&&(i=e.$$hashKey()),i):(i=typeof e,i="function"==i||"object"==i&&null!==e?e.$$hashKey=i+":"+(t||o)():i+":"+e)}function je(e,t){if(t){var i=0;this.nextUid=function(){return++i}}n(e,this.put,this)}function Le(e){return e=Function.prototype.toString.call(e).replace(Bn,""),e.match(Fn)||e.match(Mn)}function Be(e){return(e=Le(e))?"function("+(e[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Re(e,t){function i(e){return function(t,i){return v(t)?void n(t,a(e)):e(t,i)}}function r(e,t){if(re(e,"service"),(S(t)||an(t))&&(t=g.instantiate(t)),!t.$get)throw Rn("pget",e);
return f[e+"Provider"]=t}function o(e,t){return function(){var i=w.invoke(t,this);if(m(i))throw Rn("undef",e);return i}}function s(e,t,i){return r(e,{$get:!1!==i?o(e,t):t})}function l(e){ie(m(e)||an(e),"modulesToLoad","not an array");var t,i=[];return n(e,function(e){function n(e){var t,i;for(t=0,i=e.length;t<i;t++){var n=e[t],r=g.get(n[0]);r[n[1]].apply(r,n[2])}}if(!p.get(e)){p.put(e,!0);try{$(e)?(t=qi(e),i=i.concat(l(t.requires)).concat(t._runBlocks),n(t._invokeQueue),n(t._configBlocks)):S(e)?i.push(g.invoke(e)):an(e)?i.push(g.invoke(e)):ne(e,"module")}catch(t){throw an(e)&&(e=e[e.length-1]),t.message&&t.stack&&-1==t.stack.indexOf(t.message)&&(t=t.message+"\n"+t.stack),Rn("modulerr",e,t.stack||t.message||t)}}}),i}function c(e,i){function n(t,n){if(e.hasOwnProperty(t)){if(e[t]===u)throw Rn("cdep",t+" <- "+d.join(" <- "));return e[t]}try{return d.unshift(t),e[t]=u,e[t]=i(t,n)}catch(i){throw e[t]===u&&delete e[t],i}finally{d.shift()}}function r(e,i,r){var a=[];e=Re.$$annotate(e,t,r);for(var o=0,s=e.length;o<s;o++){var l=e[o];if("string"!=typeof l)throw Rn("itkn",l);a.push(i&&i.hasOwnProperty(l)?i[l]:n(l,r))}return a}return{invoke:function(e,t,i,n){return"string"==typeof i&&(n=i,i=null),i=r(e,i,n),an(e)&&(e=e[e.length-1]),n=!(11>=Gi)&&("function"==typeof e&&/^(?:class\s|constructor\()/.test(Function.prototype.toString.call(e))),n?(i.unshift(null),new(Function.prototype.bind.apply(e,i))):e.apply(t,i)},instantiate:function(e,t,i){var n=an(e)?e[e.length-1]:e;return e=r(e,t,i),e.unshift(null),new(Function.prototype.bind.apply(n,e))},get:n,annotate:Re.$$annotate,has:function(t){return f.hasOwnProperty(t+"Provider")||e.hasOwnProperty(t)}}}t=!0===t;var u={},d=[],p=new je([],!0),f={$provide:{provider:i(r),factory:i(s),service:i(function(e,t){return s(e,["$injector",function(e){return e.instantiate(t)}])}),value:i(function(e,t){return s(e,h(t),!1)}),constant:i(function(e,t){re(e,"constant"),f[e]=t,y[e]=t}),decorator:function(e,t){var i=g.get(e+"Provider"),n=i.$get;i.$get=function(){var e=w.invoke(n,i);return w.invoke(t,null,{$delegate:e})}}}},g=f.$injector=c(f,function(e,t){throw nn.isString(t)&&d.push(t),Rn("unpr",d.join(" <- "))}),y={},b=c(y,function(e,t){var i=g.get(e+"Provider",t);return w.invoke(i.$get,i,void 0,e)}),w=b;f.$injectorProvider={$get:h(b)};var C=l(e),w=b.get("$injector");return w.strictDi=t,n(C,function(e){e&&w.invoke(e)}),w}function Ne(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,i,n){function r(e){var t=null;return Array.prototype.some.call(e,function(e){if("a"===_(e))return t=e,!0}),t}function a(e){if(e){e.scrollIntoView();var i;i=o.yOffset,S(i)?i=i():T(i)?(i=i[0],i="fixed"!==t.getComputedStyle(i).position?0:i.getBoundingClientRect().bottom):w(i)||(i=0),i&&(e=e.getBoundingClientRect().top,t.scrollBy(0,e-i))}else t.scrollTo(0,0)}function o(e){e=$(e)?e:i.hash();var t;e?(t=s.getElementById(e))?a(t):(t=r(s.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var s=t.document;return e&&n.$watch(function(){return i.hash()},function(e,t){e===t&&""===e||Te(function(){n.$evalAsync(o)})}),o}]}function Ue(e,t){return e||t?e?t?(an(e)&&(e=e.join(" ")),an(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function Ge(e){$(e)&&(e=e.split(" "));var t=se();return n(e,function(e){e.length&&(t[e]=!0)}),t}function Ve(e){return v(e)?e:{}}function We(e,t,i,r){function a(e){try{e.apply(null,Yi.call(arguments,1))}finally{if(y--,0===y)for(;v.length;)try{v.pop()()}catch(e){i.error(e)}}}function o(){S=null,s(),l()}function s(){b=P(),b=m(b)?null:b,M(b,I)&&(b=I),I=b}function l(){w===c.url()&&$===b||(w=c.url(),$=b,n(D,function(e){e(c.url(),b)}))}var c=this,u=e.location,d=e.history,f=e.setTimeout,h=e.clearTimeout,g={};c.isMock=!1;var y=0,v=[];c.$$completeOutstandingRequest=a,c.$$incOutstandingRequestCount=function(){y++},c.notifyWhenNoOutstandingRequests=function(e){0===y?e():v.push(e)};var b,$,w=u.href,C=t.find("base"),S=null,P=r.history?function(){try{return d.state}catch(e){}}:p;s(),$=b,c.url=function(t,i,n){if(m(n)&&(n=null),u!==e.location&&(u=e.location),d!==e.history&&(d=e.history),t){var a=$===n;if(w===t&&(!r.history||a))return c;var o=w&&$t(w)===$t(t);return w=t,$=n,!r.history||o&&a?(o&&!S||(S=t),i?u.replace(t):o?(i=u,n=t.indexOf("#"),n=-1===n?"":t.substr(n),i.hash=n):u.href=t,u.href!==t&&(S=t)):(d[i?"replaceState":"pushState"](n,"",t),s(),$=b),c}return S||u.href.replace(/%27/g,"'")},c.state=function(){return b};var D=[],k=!1,I=null;c.onUrlChange=function(t){return k||(r.history&&Vi(e).on("popstate",o),Vi(e).on("hashchange",o),k=!0),D.push(t),t},c.$$applicationDestroyed=function(){Vi(e).off("hashchange popstate",o)},c.$$checkUrlChange=l,c.baseHref=function(){var e=C.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},c.defer=function(e,t){var i;return y++,i=f(function(){delete g[i],a(e)},t||0),g[i]=!0,i},c.defer.cancel=function(e){return!!g[e]&&(delete g[e],h(e),a(p),!0)}}function qe(){this.$get=["$window","$log","$sniffer","$document",function(e,t,i,n){return new We(e,n,t,i)}]}function He(){this.$get=function(){function e(e,n){function r(e){e!=p&&(f?f==e&&(f=e.n):f=e,a(e.n,e.p),a(e,p),p=e,p.n=null)}function a(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in i)throw t("$cacheFactory")("iid",e);var o=0,s=l({},n,{id:e}),c=se(),u=n&&n.capacity||Number.MAX_VALUE,d=se(),p=null,f=null;return i[e]={put:function(e,t){if(!m(t)){if(u<Number.MAX_VALUE){var i=d[e]||(d[e]={key:e});r(i)}return e in c||o++,c[e]=t,o>u&&this.remove(f.key),t}},get:function(e){if(u<Number.MAX_VALUE){var t=d[e];if(!t)return;r(t)}return c[e]},remove:function(e){if(u<Number.MAX_VALUE){var t=d[e];if(!t)return;t==p&&(p=t.p),t==f&&(f=t.n),a(t.n,t.p),delete d[e]}e in c&&(delete c[e],o--)},removeAll:function(){c=se(),o=0,d=se(),p=f=null},destroy:function(){d=s=c=null,delete i[e]},info:function(){return l({},s,{size:o})}}}var i={};return e.info=function(){var e={};return n(i,function(t,i){e[i]=t.info()}),e},e.get=function(e){return i[e]},e}}function ze(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function Ke(t,i){function r(e,t,i){var r=/^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/,a=se();return n(e,function(e,n){if(e in C)a[n]=C[e];else{var o=e.match(r);if(!o)throw zn("iscp",t,n,e,i?"controller bindings definition":"isolate scope definition");a[n]={mode:o[1][0],collection:"*"===o[2],optional:"?"===o[3],attrName:o[4]||n},o[4]&&(C[e]=a[n])}}),a}function o(e){var t=e.charAt(0);if(!t||t!==Ki(t))throw zn("baddir",e);if(e!==e.trim())throw zn("baddir",e)}var s={},c=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,u=/(([\w\-]+)(?:\:([^;]+))?;?)/,g=A("ngSrc,ngSrcset,src,srcset"),b=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,w=/^(on[a-z]+|formaction)$/,C=se();this.directive=function e(i,r){return re(i,"directive"),$(i)?(o(i),ie(r,"directiveFactory"),s.hasOwnProperty(i)||(s[i]=[],t.factory(i+"Directive",["$injector","$exceptionHandler",function(e,t){var r=[];return n(s[i],function(n,a){try{var o=e.invoke(n);S(o)?o={compile:h(o)}:!o.compile&&o.link&&(o.compile=h(o.link)),o.priority=o.priority||0,o.index=a,o.name=o.name||i,o.require=o.require||o.controller&&o.name,o.restrict=o.restrict||"EA",o.$$moduleName=n.$$moduleName,r.push(o)}catch(e){t(e)}}),r}])),s[i].push(r)):n(i,a(e)),this},this.component=function(e,t){function i(e){function i(t){return S(t)||an(t)?function(i,n){return e.invoke(t,this,{$element:i,$attrs:n})}:t}var a=t.template||t.templateUrl?t.template:"",o={controller:r,controllerAs:Xe(t.controller)||t.controllerAs||"$ctrl",template:i(a),templateUrl:i(t.templateUrl),transclude:t.transclude,scope:{},bindToController:t.bindings||{},restrict:"E",require:t.require};return n(t,function(e,t){"$"===t.charAt(0)&&(o[t]=e)}),o}var r=t.controller||function(){};return n(t,function(e,t){"$"===t.charAt(0)&&(i[t]=e,S(r)&&(r[t]=e))}),i.$inject=["$injector"],this.directive(e,i)},this.aHrefSanitizationWhitelist=function(e){return y(e)?(i.aHrefSanitizationWhitelist(e),this):i.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return y(e)?(i.imgSrcSanitizationWhitelist(e),this):i.imgSrcSanitizationWhitelist()};var P=!0;this.debugInfoEnabled=function(e){return y(e)?(P=e,this):P};var D=10;this.onChangesTtl=function(e){return arguments.length?(D=e,this):D},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(t,i,a,o,h,y,C,O,T,A){function x(){try{if(!--ve)throw he=void 0,zn("infchng",D);C.$apply(function(){for(var e=0,t=he.length;e<t;++e)he[e]();he=void 0})}finally{ve++}}function F(e,t){if(t){var i,n,r,a=Object.keys(t);for(i=0,n=a.length;i<n;i++)r=a[i],this[r]=t[r]}else this.$attr={};this.$$element=e}function j(e,t,i){ye.innerHTML="<span "+t+">",t=ye.firstChild.attributes;var n=t[0];t.removeNamedItem(n.name),n.value=i,e.attributes.setNamedItem(n)}function L(e,t){try{e.addClass(t)}catch(e){}}function B(t,i,n,r,a){t instanceof Vi||(t=Vi(t));for(var o=/\S+/,s=0,l=t.length;s<l;s++){var c=t[s];c.nodeType===gn&&c.nodeValue.match(o)&&fe(c,t[s]=e.document.createElement("span"))}var u=R(t,i,t,n,r,a);B.$$addScopeClass(t);var d=null;return function(e,i,n){ie(e,"scope"),a&&a.needsNewScope&&(e=e.$parent.$new()),n=n||{};var r=n.parentBoundTranscludeFn,o=n.transcludeControllers;if(n=n.futureParentElement,r&&r.$$boundTransclude&&(r=r.$$boundTransclude),d||(d=(n=n&&n[0])&&"foreignobject"!==_(n)&&Xi.call(n).match(/SVG/)?"svg":"html"),n="html"!==d?Vi(ae(d,Vi("<div>").append(t).html())):i?Tn.clone.call(t):t,o)for(var s in o)n.data("$"+s+"Controller",o[s].instance);return B.$$addScopeInfo(n,e),i&&i(n,e),u&&u(e,n,n,r),n}}function R(e,t,i,n,r,a){function o(e,i,n,r){var a,o,s,l,c,u,f;if(d)for(f=Array(i.length),l=0;l<p.length;l+=3)a=p[l],f[a]=i[a];else f=i;for(l=0,c=p.length;l<c;)o=f[p[l++]],i=p[l++],a=p[l++],i?(i.scope?(s=e.$new(),B.$$addScopeInfo(Vi(o),s)):s=e,u=i.transcludeOnThisElement?N(e,i.transclude,r):!i.templateOnThisElement&&r?r:!r&&t?N(e,t):null,i(a,s,o,n,u)):a&&a(e,o.childNodes,void 0,r)}for(var s,l,c,u,d,p=[],f=0;f<e.length;f++)s=new F,l=U(e[f],[],s,0===f?n:void 0,r),(a=l.length?H(l,e[f],s,t,i,null,[],[],a):null)&&a.scope&&B.$$addScopeClass(s.$$element),s=a&&a.terminal||!(c=e[f].childNodes)||!c.length?null:R(c,a?(a.transcludeOnThisElement||!a.templateOnThisElement)&&a.transclude:t),(a||s)&&(p.push(f,a,s),u=!0,d=d||a),a=null;return u?o:null}function N(e,t,i){function n(n,r,a,o,s){return n||(n=e.$new(!1,s),n.$$transcluded=!0),t(n,r,{parentBoundTranscludeFn:i,transcludeControllers:a,futureParentElement:o})}var r,a=n.$$slots=se();for(r in t.$$slots)a[r]=t.$$slots[r]?N(e,t.$$slots[r],i):null;return n}function U(e,t,i,n,r){var a,o=i.$attr;switch(e.nodeType){case 1:Y(t,Ye(_(e)),"E",n,r);for(var s,l,d,p=e.attributes,f=0,h=p&&p.length;f<h;f++){var g=!1,m=!1;s=p[f],a=s.name,l=sn(s.value),s=Ye(a),(d=Ce.test(s))&&(a=a.replace(Qn,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()})),(s=s.match(Se))&&J(s[1])&&(g=a,m=a.substr(0,a.length-5)+"end",a=a.substr(0,a.length-6)),s=Ye(a.toLowerCase()),o[s]=a,!d&&i.hasOwnProperty(s)||(i[s]=l,Ae(e,s)&&(i[s]=!0)),le(e,t,l,s,d),Y(t,s,"A",n,r,g,m)}if(e=e.className,v(e)&&(e=e.animVal),$(e)&&""!==e)for(;a=u.exec(e);)s=Ye(a[2]),Y(t,s,"C",n,r)&&(i[s]=sn(a[3])),e=e.substr(a.index+a[0].length);break;case gn:if(11===Gi)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===gn;)e.nodeValue+=e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);re(t,e.nodeValue);break;case 8:try{(a=c.exec(e.nodeValue))&&(s=Ye(a[1]),Y(t,s,"M",n,r)&&(i[s]=sn(a[2])))}catch(e){}}return t.sort(te),t}function G(e,t,i){var n=[],r=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw zn("uterdir",t,i);1==e.nodeType&&(e.hasAttribute(t)&&r++,e.hasAttribute(i)&&r--),n.push(e),e=e.nextSibling}while(0<r)}else n.push(e);return Vi(n)}function W(e,t,i){return function(n,r,a,o,s){return r=G(r[0],t,i),e(n,r,a,o,s)}}function q(e,t,i,n,r,a){var o;return e?B(t,i,n,r,a):function(){return o||(o=B(t,i,n,r,a),t=i=a=null),o.apply(this,arguments)}}function H(e,t,i,r,o,s,c,u,d){function p(e,t,i,n){e&&(i&&(e=W(e,i,n)),e.require=h.require,e.directiveName=g,(D===h||h.$$isolateScope)&&(e=ue(e,{isolateScope:!0})),c.push(e)),t&&(i&&(t=W(t,i,n)),t.require=h.require,t.directiveName=g,(D===h||h.$$isolateScope)&&(t=ue(t,{isolateScope:!0})),u.push(t))}function f(e,r,a,o,s){function d(e,t,i,n){var r;if(k(e)||(n=i,i=t,t=e,e=void 0),E&&(r=b),i||(i=E?w.parent():w),!n)return s(e,t,r,i,A);var a=s.$$slots[n];if(a)return a(e,t,r,i,A);if(m(a))throw zn("noslot",n,V(w))}var p,f,h,g,y,b,$,w;t===a?(o=i,w=i.$$element):(w=Vi(a),o=new F(w,i)),y=r,D?g=r.$new(!0):C&&(y=r.$parent),s&&($=d,$.$$boundTransclude=s,$.isSlotFilled=function(e){return!!s.$$slots[e]}),P&&(b=K(w,o,$,P,g,r,D)),D&&(B.$$addScopeInfo(w,g,!0,!(I&&(I===D||I===D.$$originalDirective))),B.$$addScopeClass(w,!0),g.$$isolateBindings=D.$$isolateBindings,f=pe(r,o,g,g.$$isolateBindings,D),f.removeWatches&&g.$on("$destroy",f.removeWatches));for(p in b){f=P[p],h=b[p];var O=f.$$bindings.bindToController;h.bindingInfo=h.identifier&&O?pe(y,o,h.instance,O,f):{};var T=h();T!==h.instance&&(h.instance=T,w.data("$"+f.name+"Controller",T),h.bindingInfo.removeWatches&&h.bindingInfo.removeWatches(),h.bindingInfo=pe(y,o,h.instance,O,f))}for(n(P,function(e,t){var i=e.require;e.bindToController&&!an(i)&&v(i)&&l(b[t].instance,z(t,i,w,b))}),n(b,function(e){var t=e.instance;S(t.$onChanges)&&t.$onChanges(e.bindingInfo.initialChanges),S(t.$onInit)&&t.$onInit(),S(t.$onDestroy)&&y.$on("$destroy",function(){t.$onDestroy()})}),p=0,f=c.length;p<f;p++)h=c[p],de(h,h.isolateScope?g:r,w,o,h.require&&z(h.directiveName,h.require,w,b),$);var A=r;for(D&&(D.template||null===D.templateUrl)&&(A=g),e&&e(A,a.childNodes,void 0,s),p=u.length-1;0<=p;p--)h=u[p],de(h,h.isolateScope?g:r,w,o,h.require&&z(h.directiveName,h.require,w,b),$);n(b,function(e){e=e.instance,S(e.$postLink)&&e.$postLink()})}d=d||{};for(var h,g,y,b,$,w=-Number.MAX_VALUE,C=d.newScopeDirective,P=d.controllerDirectives,D=d.newIsolateScopeDirective,I=d.templateDirective,O=d.nonTlbTranscludeDirective,T=!1,A=!1,E=d.hasElementTranscludeDirective,x=i.$$element=Vi(t),M=r,j=!1,L=!1,R=0,N=e.length;R<N;R++){h=e[R];var H=h.$$start,Y=h.$$end;if(H&&(x=G(t,H,Y)),y=void 0,w>h.priority)break;if(($=h.scope)&&(h.templateUrl||(v($)?(ne("new/isolated scope",D||C,h,x),D=h):ne("new/isolated scope",D,h,x)),C=C||h),g=h.name,!j&&(h.replace&&(h.templateUrl||h.template)||h.transclude&&!h.$$tlb)){for($=R+1;j=e[$++];)if(j.transclude&&!j.$$tlb||j.replace&&(j.templateUrl||j.template)){L=!0;break}j=!0}if(!h.templateUrl&&h.controller&&($=h.controller,P=P||se(),ne("'"+g+"' controller",P[g],h,x),P[g]=h),$=h.transclude)if(T=!0,h.$$tlb||(ne("transclusion",O,h,x),O=h),"element"==$)E=!0,w=h.priority,y=x,x=i.$$element=Vi(B.$$createComment(g,i[g])),t=x[0],ce(o,Yi.call(y,0),t),y[0].$$parentNode=y[0].parentNode,M=q(L,y,r,w,s&&s.name,{nonTlbTranscludeDirective:O});else{var J=se();if(y=Vi(ge(t)).contents(),v($)){y=[];var ee=se(),te=se();n($,function(e,t){var i="?"===e.charAt(0);e=i?e.substring(1):e,ee[e]=t,J[t]=null,te[t]=i}),n(x.contents(),function(e){var t=ee[Ye(_(e))];t?(te[t]=!0,J[t]=J[t]||[],J[t].push(e)):y.push(e)}),n(te,function(e,t){if(!e)throw zn("reqslot",t)});for(var ie in J)J[ie]&&(J[ie]=q(L,J[ie],r))}x.empty(),M=q(L,y,r,void 0,void 0,{needsNewScope:h.$$isolateScope||h.$$newScope}),M.$$slots=J}if(h.template)if(A=!0,ne("template",I,h,x),I=h,$=S(h.template)?h.template(x,i):h.template,$=we($),h.replace){if(s=h,y=Pn.test($)?Ze(ae(h.templateNamespace,sn($))):[],t=y[0],1!=y.length||1!==t.nodeType)throw zn("tplrt",g,"");ce(o,x,t),N={$attr:{}},$=U(t,[],N);var re=e.splice(R+1,e.length-(R+1));(D||C)&&Q($,D,C),e=e.concat($).concat(re),Z(i,N),N=e.length}else x.html($);if(h.templateUrl)A=!0,ne("template",I,h,x),I=h,h.replace&&(s=h),f=X(e.splice(R,e.length-R),x,i,o,T&&M,c,u,{controllerDirectives:P,newScopeDirective:C!==h&&C,newIsolateScopeDirective:D,templateDirective:I,nonTlbTranscludeDirective:O}),N=e.length;else if(h.compile)try{b=h.compile(x,i,M),S(b)?p(null,b,H,Y):b&&p(b.pre,b.post,H,Y)}catch(e){a(e,V(x))}h.terminal&&(f.terminal=!0,w=Math.max(w,h.priority))}return f.scope=C&&!0===C.scope,f.transcludeOnThisElement=T,f.templateOnThisElement=A,f.transclude=M,d.hasElementTranscludeDirective=E,f}function z(e,t,i,r){var a;if($(t)){var o=t.match(b);t=t.substring(o[0].length);var s=o[1]||o[3],o="?"===o[2];if("^^"===s?i=i.parent():a=(a=r&&r[t])&&a.instance,!a){var l="$"+t+"Controller";a=s?i.inheritedData(l):i.data(l)}if(!a&&!o)throw zn("ctreq",t,e)}else if(an(t))for(a=[],s=0,o=t.length;s<o;s++)a[s]=z(e,t[s],i,r);else v(t)&&(a={},n(t,function(t,n){a[n]=z(e,t,i,r)}));return a||null}function K(e,t,i,n,r,a,o){var s,l=se();for(s in n){var c=n[s],u={$scope:c===o||c.$$isolateScope?r:a,$element:e,$attrs:t,$transclude:i},d=c.controller;"@"==d&&(d=t[c.name]),u=y(d,u,!0,c.controllerAs),l[c.name]=u,e.data("$"+c.name+"Controller",u.instance)}return l}function Q(e,t,i){for(var n=0,r=e.length;n<r;n++)e[n]=d(e[n],{$$isolateScope:t,$$newScope:i})}function Y(e,i,n,o,l,c,u){if(i===l)return null;if(l=null,s.hasOwnProperty(i)){var p;i=t.get(i+"Directive");for(var f=0,h=i.length;f<h;f++)try{if(p=i[f],(m(o)||o>p.priority)&&-1!=p.restrict.indexOf(n)){if(c&&(p=d(p,{$$start:c,$$end:u})),!p.$$bindings){var g=p,y=p,b=p.name,$={isolateScope:null,bindToController:null};if(v(y.scope)&&(!0===y.bindToController?($.bindToController=r(y.scope,b,!0),$.isolateScope={}):$.isolateScope=r(y.scope,b,!1)),v(y.bindToController)&&($.bindToController=r(y.bindToController,b,!0)),v($.bindToController)){var w=y.controller,C=y.controllerAs;if(!w)throw zn("noctrl",b);if(!Xe(w,C))throw zn("noident",b)}var S=g.$$bindings=$;v(S.isolateScope)&&(p.$$isolateBindings=S.isolateScope)}e.push(p),l=p}}catch(e){a(e)}}return l}function J(e){if(s.hasOwnProperty(e))for(var i=t.get(e+"Directive"),n=0,r=i.length;n<r;n++)if(e=i[n],e.multiElement)return!0;return!1}function Z(e,t){var i=t.$attr,r=e.$attr,a=e.$$element;n(e,function(n,r){"$"!=r.charAt(0)&&(t[r]&&t[r]!==n&&(n+=("style"===r?";":" ")+t[r]),e.$set(r,n,!0,i[r]))}),n(t,function(t,n){"class"==n?(L(a,t),e.class=(e.class?e.class+" ":"")+t):"style"==n?(a.attr("style",a.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==n.charAt(0)||e.hasOwnProperty(n)||(e[n]=t,r[n]=i[n])})}function X(e,t,i,r,a,s,l,c){var u,p,f=[],h=t[0],g=e.shift(),m=d(g,{templateUrl:null,transclude:null,replace:null,$$originalDirective:g}),y=S(g.templateUrl)?g.templateUrl(t,i):g.templateUrl,b=g.templateNamespace;return t.empty(),o(y).then(function(o){var d,$;if(o=we(o),g.replace){if(o=Pn.test(o)?Ze(ae(b,sn(o))):[],d=o[0],1!=o.length||1!==d.nodeType)throw zn("tplrt",g.name,y);o={$attr:{}},ce(r,t,d);var w=U(d,[],o);v(g.scope)&&Q(w,!0),e=w.concat(e),Z(i,o)}else d=h,t.html(o);for(e.unshift(m),u=H(e,d,i,a,t,g,s,l,c),n(r,function(e,i){e==d&&(r[i]=t[0])}),p=R(t[0].childNodes,a);f.length;){o=f.shift(),$=f.shift();var C=f.shift(),S=f.shift(),w=t[0];if(!o.$$destroyed){if($!==h){var P=$.className;c.hasElementTranscludeDirective&&g.replace||(w=ge(d)),ce(C,Vi($),w),L(Vi(w),P)}$=u.transcludeOnThisElement?N(o,u.transclude,S):S,u(p,o,w,r,$)}}f=null}),function(e,t,i,n,r){e=r,t.$$destroyed||(f?f.push(t,i,n,e):(u.transcludeOnThisElement&&(e=N(t,u.transclude,r)),u(p,t,i,n,e)))}}function te(e,t){var i=t.priority-e.priority;return 0!==i?i:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function ne(e,t,i,n){function r(e){return e?" (module: "+e+")":""}if(t)throw zn("multidir",t.name,r(t.$$moduleName),i.name,r(i.$$moduleName),e,V(n))}function re(e,t){var n=i(t,!0);n&&e.push({priority:0,compile:function(e){e=e.parent();var t=!!e.length;return t&&B.$$addBindingClass(e),function(e,i){var r=i.parent();t||B.$$addBindingClass(r),B.$$addBindingInfo(r,n.expressions),e.$watch(n,function(e){i[0].nodeValue=e})}}})}function ae(t,i){switch(t=Ki(t||"html")){case"svg":case"math":var n=e.document.createElement("div");return n.innerHTML="<"+t+">"+i+"</"+t+">",n.childNodes[0].childNodes;default:return i}}function oe(e,t){if("srcdoc"==t)return O.HTML;var i=_(e);return"xlinkHref"==t||"form"==i&&"action"==t||"img"!=i&&("src"==t||"ngSrc"==t)?O.RESOURCE_URL:void 0}function le(e,t,n,r,a){var o=oe(e,r);a=g[r]||a;var s=i(n,!0,o,a);if(s){if("multiple"===r&&"select"===_(e))throw zn("selmulti",V(e));t.push({priority:100,compile:function(){return{pre:function(e,t,l){if(t=l.$$observers||(l.$$observers=se()),w.test(r))throw zn("nodomevents");var c=l[r];c!==n&&(s=c&&i(c,!0,o,a),n=c),s&&(l[r]=s(e),(t[r]||(t[r]=[])).$$inter=!0,(l.$$observers&&l.$$observers[r].$$scope||e).$watch(s,function(e,t){"class"===r&&e!=t?l.$updateClass(e,t):l.$set(r,e)}))}}}})}}function ce(t,i,n){var r,a,o=i[0],s=i.length,l=o.parentNode;if(t)for(r=0,a=t.length;r<a;r++)if(t[r]==o){t[r++]=n,a=r+s-1;for(var c=t.length;r<c;r++,a++)a<c?t[r]=t[a]:delete t[r];t.length-=s-1,t.context===o&&(t.context=n);break}for(l&&l.replaceChild(n,o),t=e.document.createDocumentFragment(),r=0;r<s;r++)t.appendChild(i[r]);for(Vi.hasData(o)&&(Vi.data(n,Vi.data(o)),Vi(o).off("$destroy")),Vi.cleanData(t.querySelectorAll("*")),r=1;r<s;r++)delete i[r];i[0]=n,i.length=1}function ue(e,t){return l(function(){return e.apply(null,arguments)},e,t)}function de(e,t,i,n,r,o){try{e(t,i,n,r,o)}catch(e){a(e,V(i))}}function pe(e,t,r,a,o){function s(t,i,n){S(r.$onChanges)&&i!==n&&(he||(e.$$postDigest(x),he=[]),c||(c={},he.push(l)),c[t]&&(n=c[t].previousValue),c[t]=new Qe(n,i))}function l(){r.$onChanges(c),c=void 0}var c,u=[],d={};return n(a,function(n,a){var l,c,f,g,m=n.attrName,y=n.optional;switch(n.mode){case"@":y||zi.call(t,m)||(r[a]=t[m]=void 0),t.$observe(m,function(e){($(e)||I(e))&&(s(a,e,r[a]),r[a]=e)}),t.$$observers[m].$$scope=e,l=t[m],$(l)?r[a]=i(l)(e):I(l)&&(r[a]=l),d[a]=new Qe(Kn,r[a]);break;case"=":if(!zi.call(t,m)){if(y)break;t[m]=void 0}if(y&&!t[m])break;c=h(t[m]),g=c.literal?M:function(e,t){return e===t||e!==e&&t!==t},f=c.assign||function(){throw l=r[a]=c(e),zn("nonassign",t[m],m,o.name)},l=r[a]=c(e),y=function(t){return g(t,r[a])||(g(t,l)?f(e,t=r[a]):r[a]=t),l=t},y.$stateful=!0,y=n.collection?e.$watchCollection(t[m],y):e.$watch(h(t[m],y),null,c.literal),u.push(y);break;case"<":if(!zi.call(t,m)){if(y)break;t[m]=void 0}if(y&&!t[m])break;c=h(t[m]),r[a]=c(e),d[a]=new Qe(Kn,r[a]),y=e.$watch(c,function(e,t){e===t&&(t=r[a]),s(a,e,t),r[a]=e},c.literal),u.push(y);break;case"&":if(c=t.hasOwnProperty(m)?h(t[m]):p,c===p&&y)break;r[a]=function(t){return c(e,t)}}}),{initialChanges:d,removeWatches:u.length&&function(){for(var e=0,t=u.length;e<t;++e)u[e]()}}}var he,me=/^\w/,ye=e.document.createElement("div"),ve=D;F.prototype={$normalize:Ye,$addClass:function(e){e&&0<e.length&&T.addClass(this.$$element,e)},$removeClass:function(e){e&&0<e.length&&T.removeClass(this.$$element,e)},$updateClass:function(e,t){var i=Je(e,t);i&&i.length&&T.addClass(this.$$element,i),(i=Je(t,e))&&i.length&&T.removeClass(this.$$element,i)},$set:function(e,t,i,r){var o=Ae(this.$$element[0],e),s=En[e],l=e;if(o?(this.$$element.prop(e,t),r=o):s&&(this[s]=t,l=s),this[e]=t,r?this.$attr[e]=r:(r=this.$attr[e])||(this.$attr[e]=r=ee(e,"-")),o=_(this.$$element),"a"===o&&("href"===e||"xlinkHref"===e)||"img"===o&&"src"===e)this[e]=t=A(t,"src"===e);else if("img"===o&&"srcset"===e){for(var o="",s=sn(t),c=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,c=/\s/.test(s)?c:/(,)/,s=s.split(c),c=Math.floor(s.length/2),u=0;u<c;u++)var d=2*u,o=o+A(sn(s[d]),!0),o=o+(" "+sn(s[d+1]));s=sn(s[2*u]).split(/\s/),o+=A(sn(s[0]),!0),2===s.length&&(o+=" "+sn(s[1])),this[e]=t=o}!1!==i&&(null===t||m(t)?this.$$element.removeAttr(r):me.test(r)?this.$$element.attr(r,t):j(this.$$element[0],r,t)),(e=this.$$observers)&&n(e[l],function(e){try{e(t)}catch(e){a(e)}})},$observe:function(e,t){var i=this,n=i.$$observers||(i.$$observers=se()),r=n[e]||(n[e]=[]);return r.push(t),C.$evalAsync(function(){r.$$inter||!i.hasOwnProperty(e)||m(i[e])||t(i[e])}),function(){E(r,t)}}};var be=i.startSymbol(),$e=i.endSymbol(),we="{{"==be&&"}}"==$e?f:function(e){return e.replace(/\{\{/g,be).replace(/}}/g,$e)},Ce=/^ngAttr[A-Z]/,Se=/^(.+)Start$/;return B.$$addBindingInfo=P?function(e,t){var i=e.data("$binding")||[];an(t)?i=i.concat(t):i.push(t),e.data("$binding",i)}:p,B.$$addBindingClass=P?function(e){L(e,"ng-binding")}:p,B.$$addScopeInfo=P?function(e,t,i,n){e.data(i?n?"$isolateScopeNoTemplate":"$isolateScope":"$scope",t)}:p,B.$$addScopeClass=P?function(e,t){L(e,t?"ng-isolate-scope":"ng-scope")}:p,B.$$createComment=function(t,i){var n="";return P&&(n=" "+(t||"")+": "+(i||"")+" "),e.document.createComment(n)},B}]}function Qe(e,t){this.previousValue=e,this.currentValue=t}function Ye(e){return ue(e.replace(Qn,""))}function Je(e,t){var i="",n=e.split(/\s+/),r=t.split(/\s+/),a=0;e:for(;a<n.length;a++){for(var o=n[a],s=0;s<r.length;s++)if(o==r[s])continue e;i+=(0<i.length?" ":"")+o}return i}function Ze(e){e=Vi(e);var t=e.length;if(1>=t)return e;for(;t--;)8===e[t].nodeType&&Ji.call(e,t,1);return e}function Xe(e,t){if(t&&$(t))return t;if($(e)){var i=Jn.exec(e);if(i)return i[3]}}function et(){var e={},i=!1;this.has=function(t){return e.hasOwnProperty(t)},this.register=function(t,i){re(t,"controller"),v(t)?l(e,t):e[t]=i},this.allowGlobals=function(){i=!0},this.$get=["$injector","$window",function(n,r){function a(e,i,n,r){if(!e||!v(e.$scope))throw t("$controller")("noscp",r,i);e.$scope[i]=n}return function(t,o,s,c){var u,d,p;if(s=!0===s,c&&$(c)&&(p=c),$(t)){if(c=t.match(Jn),!c)throw Yn("ctrlfmt",t);d=c[1],p=p||c[3],t=e.hasOwnProperty(d)?e[d]:ae(o.$scope,d,!0)||(i?ae(r,d,!0):void 0),ne(t,d,!0)}return s?(s=(an(t)?t[t.length-1]:t).prototype,u=Object.create(s||null),p&&a(o,p,u,d||t.name),l(function(){var e=n.invoke(t,u,o,d);return e!==u&&(v(e)||S(e))&&(u=e,p&&a(o,p,u,d||t.name)),u},{instance:u,identifier:p})):(u=n.instantiate(t,o,d),p&&a(o,p,u,d||t.name),u)}}]}function tt(){this.$get=["$window",function(e){return Vi(e.document)}]}function it(){this.$get=["$log",function(e){return function(t,i){e.error.apply(e,arguments)}}]}function nt(e){return v(e)?C(e)?e.toISOString():R(e):e}function rt(){this.$get=function(){return function(e){if(!e)return"";var t=[];return r(e,function(e,i){null===e||m(e)||(an(e)?n(e,function(e){t.push(K(i)+"="+K(nt(e)))}):t.push(K(i)+"="+K(nt(e))))}),t.join("&")}}}function at(){this.$get=function(){return function(e){function t(e,a,o){null===e||m(e)||(an(e)?n(e,function(e,i){t(e,a+"["+(v(e)?i:"")+"]")}):v(e)&&!C(e)?r(e,function(e,i){t(e,a+(o?"":"[")+i+(o?"":"]"))}):i.push(K(a)+"="+K(nt(e))))}if(!e)return"";var i=[];return t(e,"",!0),i.join("&")}}}function ot(e,t){if($(e)){var i=e.replace(nr,"").trim();if(i){var n=t("Content-Type");(n=n&&0===n.indexOf(Xn))||(n=(n=i.match(tr))&&ir[n[0]].test(i)),n&&(e=N(i))}}return e}function st(e){var t,i=se();return $(e)?n(e.split("\n"),function(e){t=e.indexOf(":");var n=Ki(sn(e.substr(0,t)));e=sn(e.substr(t+1)),n&&(i[n]=i[n]?i[n]+", "+e:e)}):v(e)&&n(e,function(e,t){var n=Ki(t),r=sn(e);n&&(i[n]=i[n]?i[n]+", "+r:r)}),i}function lt(e){var t;return function(i){return t||(t=st(e)),i?(i=t[Ki(i)],void 0===i&&(i=null),i):t}}function ct(e,t,i,r){return S(r)?r(e,t,i):(n(r,function(n){e=n(e,t,i)}),e)}function ut(){var e=this.defaults={transformResponse:[ot],transformRequest:[function(e){return v(e)&&"[object File]"!==Xi.call(e)&&"[object Blob]"!==Xi.call(e)&&"[object FormData]"!==Xi.call(e)?R(e):e}],headers:{common:{Accept:"application/json, text/plain, */*"},post:F(er),put:F(er),patch:F(er)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},i=!1;this.useApplyAsync=function(e){return y(e)?(i=!!e,this):i};var r=!0;this.useLegacyPromiseExtensions=function(e){return y(e)?(r=!!e,this):r};var a=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(o,s,c,u,d,p){function f(i){function a(e){var t=l({},e);return t.data=ct(e.data,e.headers,e.status,s.transformResponse),e=e.status,200<=e&&300>e?t:d.reject(t)}function o(e,t){var i,r={};return n(e,function(e,n){S(e)?(i=e(t),null!=i&&(r[n]=i)):r[n]=e}),r}if(!v(i))throw t("$http")("badreq",i);if(!$(i.url))throw t("$http")("badreq",i.url);var s=l({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},i);s.headers=function(t){var i,n,r,a=e.headers,s=l({},t.headers),a=l({},a.common,a[Ki(t.method)]);e:for(i in a){n=Ki(i);for(r in s)if(Ki(r)===n)continue e;s[i]=a[i]}return o(s,F(t))}(i),s.method=Qi(s.method),s.paramSerializer=$(s.paramSerializer)?p.get(s.paramSerializer):s.paramSerializer;var c=[function(t){var i=t.headers,r=ct(t.data,lt(i),void 0,t.transformRequest);return m(r)&&n(i,function(e,t){"content-type"===Ki(t)&&delete i[t]}),m(t.withCredentials)&&!m(e.withCredentials)&&(t.withCredentials=e.withCredentials),h(t,r).then(a,a)},void 0],u=d.when(s);for(n(w,function(e){(e.request||e.requestError)&&c.unshift(e.request,e.requestError),(e.response||e.responseError)&&c.push(e.response,e.responseError)});c.length;){i=c.shift();var f=c.shift(),u=u.then(i,f)}return r?(u.success=function(e){return ne(e,"fn"),u.then(function(t){e(t.data,t.status,t.headers,s)}),u},u.error=function(e){return ne(e,"fn"),u.then(null,function(t){e(t.data,t.status,t.headers,s)}),u}):(u.success=ar("success"),u.error=ar("error")),u}function h(t,r){function a(e){if(e){var t={};return n(e,function(e,n){t[n]=function(t){function n(){e(t)}i?u.$applyAsync(n):u.$$phase?n():u.$apply(n)}}),t}}function l(e,t,n,r){function a(){c(t,e,n,r)}$&&(200<=e&&300>e?$.put(k,[e,t,st(n),r]):$.remove(k)),i?u.$applyAsync(a):(a(),u.$$phase||u.$apply())}function c(e,i,n,r){i=-1<=i?i:0,(200<=i&&300>i?C.resolve:C.reject)({data:e,status:i,headers:lt(n),config:t,statusText:r})}function p(e){c(e.data,e.status,F(e.headers()),e.statusText)}function h(){var e=f.pendingRequests.indexOf(t);-1!==e&&f.pendingRequests.splice(e,1)}var $,w,C=d.defer(),P=C.promise,D=t.headers,k=g(t.url,t.paramSerializer(t.params));return f.pendingRequests.push(t),P.then(h,h),!t.cache&&!e.cache||!1===t.cache||"GET"!==t.method&&"JSONP"!==t.method||($=v(t.cache)?t.cache:v(e.cache)?e.cache:b),$&&(w=$.get(k),y(w)?w&&S(w.then)?w.then(p,p):an(w)?c(w[1],w[0],F(w[2]),w[3]):c(w,200,{},"OK"):$.put(k,P)),m(w)&&((w=si(t.url)?s()[t.xsrfCookieName||e.xsrfCookieName]:void 0)&&(D[t.xsrfHeaderName||e.xsrfHeaderName]=w),o(t.method,k,r,l,D,t.timeout,t.withCredentials,t.responseType,a(t.eventHandlers),a(t.uploadEventHandlers))),P}function g(e,t){return 0<t.length&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var b=c("$http");e.paramSerializer=$(e.paramSerializer)?p.get(e.paramSerializer):e.paramSerializer;var w=[];return n(a,function(e){w.unshift($(e)?p.get(e):p.invoke(e))}),f.pendingRequests=[],function(e){n(arguments,function(e){f[e]=function(t,i){return f(l({},i||{},{method:e,url:t}))}})}("get","delete","head","jsonp"),function(e){n(arguments,function(e){f[e]=function(t,i,n){return f(l({},n||{},{method:e,url:t,data:i}))}})}("post","put","patch"),f.defaults=e,f}]}function dt(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function pt(){this.$get=["$browser","$window","$document","$xhrFactory",function(e,t,i,n){return ft(e,n,e.defer,t.angular.callbacks,i[0])}]}function ft(e,t,i,r,a){function o(e,t,i){var n=a.createElement("script"),o=null;return n.type="text/javascript",n.src=e,n.async=!0,o=function(e){n.removeEventListener("load",o,!1),n.removeEventListener("error",o,!1),a.body.removeChild(n),n=null;var s=-1,l="unknown";e&&("load"!==e.type||r[t].called||(e={type:"error"}),l=e.type,s="error"===e.type?404:200),i&&i(s,l)},n.addEventListener("load",o,!1),n.addEventListener("error",o,!1),a.body.appendChild(n),o}return function(a,s,l,c,u,d,f,h,g,v){function b(){C&&C(),P&&P.abort()}function $(t,n,r,a,o){y(D)&&i.cancel(D),C=P=null,t(n,r,a,o),e.$$completeOutstandingRequest(p)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"==Ki(a)){var w="_"+(r.counter++).toString(36);r[w]=function(e){r[w].data=e,r[w].called=!0};var C=o(s.replace("JSON_CALLBACK","angular.callbacks."+w),w,function(e,t){$(c,e,r[w].data,"",t),r[w]=p})}else{var P=t(a,s);if(P.open(a,s,!0),n(u,function(e,t){y(e)&&P.setRequestHeader(t,e)}),P.onload=function(){
var e=P.statusText||"",t="response"in P?P.response:P.responseText,i=1223===P.status?204:P.status;0===i&&(i=t?200:"file"==oi(s).protocol?404:0),$(c,i,t,P.getAllResponseHeaders(),e)},a=function(){$(c,-1,null,null,"")},P.onerror=a,P.onabort=a,n(g,function(e,t){P.addEventListener(t,e)}),n(v,function(e,t){P.upload.addEventListener(t,e)}),f&&(P.withCredentials=!0),h)try{P.responseType=h}catch(e){if("json"!==h)throw e}P.send(m(l)?null:l)}if(0<d)var D=i(b,d);else d&&S(d.then)&&d.then(b)}}function ht(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(i,n,r){function a(e){return"\\\\\\"+e}function o(i){return i.replace(p,e).replace(f,t)}function s(e,t,i,n){var r;return r=e.$watch(function(e){return r(),n(e)},t,i)}function c(a,c,p,f){function g(e){try{var t=e;e=p?r.getTrusted(p,t):r.valueOf(t);var i;if(f&&!y(e))i=e;else if(null==e)i="";else{switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=R(e)}i=e}return i}catch(e){n(or.interr(a,e))}}if(!a.length||-1===a.indexOf(e)){var v;return c||(c=o(a),v=h(c),v.exp=a,v.expressions=[],v.$$watchDelegate=s),v}f=!!f;var b,$,w=0,C=[],P=[];v=a.length;for(var D=[],k=[];w<v;){if(-1==(b=a.indexOf(e,w))||-1==($=a.indexOf(t,b+u))){w!==v&&D.push(o(a.substring(w)));break}w!==b&&D.push(o(a.substring(w,b))),w=a.substring(b+u,$),C.push(w),P.push(i(w,g)),w=$+d,k.push(D.length),D.push("")}if(p&&1<D.length&&or.throwNoconcat(a),!c||C.length){var I=function(e){for(var t=0,i=C.length;t<i;t++){if(f&&m(e[t]))return;D[k[t]]=e[t]}return D.join("")};return l(function(e){var t=0,i=C.length,r=Array(i);try{for(;t<i;t++)r[t]=P[t](e);return I(r)}catch(e){n(or.interr(a,e))}},{exp:a,expressions:C,$$watchDelegate:function(e,t){var i;return e.$watchGroup(P,function(n,r){var a=I(n);S(t)&&t.call(this,a,n!==r?i:a,e),i=a})}})}}var u=e.length,d=t.length,p=new RegExp(e.replace(/./g,a),"g"),f=new RegExp(t.replace(/./g,a),"g");return c.startSymbol=function(){return e},c.endSymbol=function(){return t},c}]}function gt(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(e,t,i,n,r){function a(a,s,l,c){function u(){d?a.apply(null,p):a(g)}var d=4<arguments.length,p=d?Yi.call(arguments,4):[],f=t.setInterval,h=t.clearInterval,g=0,m=y(c)&&!c,v=(m?n:i).defer(),b=v.promise;return l=y(l)?l:0,b.$$intervalId=f(function(){m?r.defer(u):e.$evalAsync(u),v.notify(g++),0<l&&g>=l&&(v.resolve(g),h(b.$$intervalId),delete o[b.$$intervalId]),m||e.$apply()},s),o[b.$$intervalId]=v,b}var o={};return a.cancel=function(e){return!!(e&&e.$$intervalId in o)&&(o[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete o[e.$$intervalId],!0)},a}]}function mt(e){e=e.split("/");for(var t=e.length;t--;)e[t]=z(e[t]);return e.join("/")}function yt(e,t){var i=oi(e);t.$$protocol=i.protocol,t.$$host=i.hostname,t.$$port=u(i.port)||lr[i.protocol]||null}function vt(e,t){var i="/"!==e.charAt(0);i&&(e="/"+e);var n=oi(e);t.$$path=decodeURIComponent(i&&"/"===n.pathname.charAt(0)?n.pathname.substring(1):n.pathname),t.$$search=q(n.search),t.$$hash=decodeURIComponent(n.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function bt(e,t){if(0===t.indexOf(e))return t.substr(e.length)}function $t(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function wt(e){return e.replace(/(#.+)|#$/,"$1")}function Ct(e,t,i){this.$$html5=!0,i=i||"",yt(e,this),this.$$parse=function(e){var i=bt(t,e);if(!$(i))throw cr("ipthprfx",e,t);vt(i,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=H(this.$$search),i=this.$$hash?"#"+z(this.$$hash):"";this.$$url=mt(this.$$path)+(e?"?"+e:"")+i,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(n,r){if(r&&"#"===r[0])return this.hash(r.slice(1)),!0;var a,o;return y(a=bt(e,n))?(o=a,o=y(a=bt(i,a))?t+(bt("/",a)||a):e+o):y(a=bt(t,n))?o=t+a:t==n+"/"&&(o=t),o&&this.$$parse(o),!!o}}function St(e,t,i){yt(e,this),this.$$parse=function(n){var r,a=bt(e,n)||bt(t,n);m(a)||"#"!==a.charAt(0)?this.$$html5?r=a:(r="",m(a)&&(e=n,this.replace())):(r=bt(i,a),m(r)&&(r=a)),vt(r,this),n=this.$$path;var a=e,o=/^\/[A-Z]:(\/.*)/;0===r.indexOf(a)&&(r=r.replace(a,"")),o.exec(r)||(n=(r=o.exec(n))?r[1]:n),this.$$path=n,this.$$compose()},this.$$compose=function(){var t=H(this.$$search),n=this.$$hash?"#"+z(this.$$hash):"";this.$$url=mt(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+(this.$$url?i+this.$$url:"")},this.$$parseLinkUrl=function(t,i){return $t(e)==$t(t)&&(this.$$parse(t),!0)}}function Pt(e,t,i){this.$$html5=!0,St.apply(this,arguments),this.$$parseLinkUrl=function(n,r){if(r&&"#"===r[0])return this.hash(r.slice(1)),!0;var a,o;return e==$t(n)?a=n:(o=bt(t,n))?a=e+i+o:t===n+"/"&&(a=t),a&&this.$$parse(a),!!a},this.$$compose=function(){var t=H(this.$$search),n=this.$$hash?"#"+z(this.$$hash):"";this.$$url=mt(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+i+this.$$url}}function Dt(e){return function(){return this[e]}}function kt(e,t){return function(i){return m(i)?this[e]:(this[e]=t(i),this.$$compose(),this)}}function It(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return y(t)?(e=t,this):e},this.html5Mode=function(e){return I(e)?(t.enabled=e,this):v(e)?(I(e.enabled)&&(t.enabled=e.enabled),I(e.requireBase)&&(t.requireBase=e.requireBase),I(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(i,n,r,a,o){function s(e,t,i){var r=c.url(),a=c.$$state;try{n.url(e,t,i),c.$$state=n.state()}catch(e){throw c.url(r),c.$$state=a,e}}function l(e,t){i.$broadcast("$locationChangeSuccess",c.absUrl(),e,c.$$state,t)}var c,u;u=n.baseHref();var d,p=n.url();if(t.enabled){if(!u&&t.requireBase)throw cr("nobase");d=p.substring(0,p.indexOf("/",p.indexOf("//")+2))+(u||"/"),u=r.history?Ct:Pt}else d=$t(p),u=St;var f=d.substr(0,$t(d).lastIndexOf("/")+1);c=new u(d,f,"#"+e),c.$$parseLinkUrl(p,p),c.$$state=n.state();var h=/^\s*(javascript|mailto):/i;a.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var r=Vi(e.target);"a"!==_(r[0]);)if(r[0]===a[0]||!(r=r.parent())[0])return;var s=r.prop("href"),l=r.attr("href")||r.attr("xlink:href");v(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=oi(s.animVal).href),h.test(s)||!s||r.attr("target")||e.isDefaultPrevented()||!c.$$parseLinkUrl(s,l)||(e.preventDefault(),c.absUrl()!=n.url()&&(i.$apply(),o.angular["ff-684208-preventDefault"]=!0))}}),wt(c.absUrl())!=wt(p)&&n.url(c.absUrl(),!0);var g=!0;return n.onUrlChange(function(e,t){m(bt(f,e))?o.location.href=e:(i.$evalAsync(function(){var n,r=c.absUrl(),a=c.$$state;e=wt(e),c.$$parse(e),c.$$state=t,n=i.$broadcast("$locationChangeStart",e,r,t,a).defaultPrevented,c.absUrl()===e&&(n?(c.$$parse(r),c.$$state=a,s(r,!1,a)):(g=!1,l(r,a)))}),i.$$phase||i.$digest())}),i.$watch(function(){var e=wt(n.url()),t=wt(c.absUrl()),a=n.state(),o=c.$$replace,u=e!==t||c.$$html5&&r.history&&a!==c.$$state;(g||u)&&(g=!1,i.$evalAsync(function(){var t=c.absUrl(),n=i.$broadcast("$locationChangeStart",t,e,c.$$state,a).defaultPrevented;c.absUrl()===t&&(n?(c.$$parse(e),c.$$state=a):(u&&s(t,o,a===c.$$state?null:c.$$state),l(e,a)))})),c.$$replace=!1}),c}]}function Ot(){var e=!0,t=this;this.debugEnabled=function(t){return y(t)?(e=t,this):e},this.$get=["$window",function(i){function r(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function a(e){var t=i.console||{},a=t[e]||t.log||p;e=!1;try{e=!!a.apply}catch(e){}return e?function(){var e=[];return n(arguments,function(t){e.push(r(t))}),a.apply(t,e)}:function(e,t){a(e,null==t?"":t)}}return{log:a("log"),info:a("info"),warn:a("warn"),error:a("error"),debug:function(){var i=a("debug");return function(){e&&i.apply(t,arguments)}}()}}]}function Tt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw dr("isecfld",t);return e}function At(e){return e+""}function _t(e,t){if(e){if(e.constructor===e)throw dr("isecfn",t);if(e.window===e)throw dr("isecwindow",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw dr("isecdom",t);if(e===Object)throw dr("isecobj",t)}return e}function Et(e,t){if(e){if(e.constructor===e)throw dr("isecfn",t);if(e===pr||e===fr||e===hr)throw dr("isecff",t)}}function xt(e,t){if(e&&(e===(0).constructor||e===(!1).constructor||e==="".constructor||e==={}.constructor||e===[].constructor||e===Function.constructor))throw dr("isecaf",t)}function Ft(e,t){return"undefined"!=typeof e?e:t}function Mt(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function jt(e,t){var i,r;switch(e.type){case vr.Program:i=!0,n(e.body,function(e){jt(e.expression,t),i=i&&e.expression.constant}),e.constant=i;break;case vr.Literal:e.constant=!0,e.toWatch=[];break;case vr.UnaryExpression:jt(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case vr.BinaryExpression:jt(e.left,t),jt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case vr.LogicalExpression:jt(e.left,t),jt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case vr.ConditionalExpression:jt(e.test,t),jt(e.alternate,t),jt(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case vr.Identifier:e.constant=!1,e.toWatch=[e];break;case vr.MemberExpression:jt(e.object,t),e.computed&&jt(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case vr.CallExpression:i=!!e.filter&&!t(e.callee.name).$stateful,r=[],n(e.arguments,function(e){jt(e,t),i=i&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=i,e.toWatch=e.filter&&!t(e.callee.name).$stateful?r:[e];break;case vr.AssignmentExpression:jt(e.left,t),jt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case vr.ArrayExpression:i=!0,r=[],n(e.elements,function(e){jt(e,t),i=i&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=i,e.toWatch=r;break;case vr.ObjectExpression:i=!0,r=[],n(e.properties,function(e){jt(e.value,t),i=i&&e.value.constant,e.value.constant||r.push.apply(r,e.value.toWatch)}),e.constant=i,e.toWatch=r;break;case vr.ThisExpression:e.constant=!1,e.toWatch=[];break;case vr.LocalsExpression:e.constant=!1,e.toWatch=[]}}function Lt(e){if(1==e.length){e=e[0].expression;var t=e.toWatch;return 1!==t.length?t:t[0]!==e?t:void 0}}function Bt(e){return e.type===vr.Identifier||e.type===vr.MemberExpression}function Rt(e){if(1===e.body.length&&Bt(e.body[0].expression))return{type:vr.AssignmentExpression,left:e.body[0].expression,right:{type:vr.NGValueParameter},operator:"="}}function Nt(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===vr.Literal||e.body[0].expression.type===vr.ArrayExpression||e.body[0].expression.type===vr.ObjectExpression)}function Ut(e,t){this.astBuilder=e,this.$filter=t}function Gt(e,t){this.astBuilder=e,this.$filter=t}function Vt(e){return"constructor"==e}function Wt(e){return S(e.valueOf)?e.valueOf():$r.call(e)}function qt(){var e,t,i=se(),r=se(),a={true:!0,false:!1,null:null,undefined:void 0};this.addLiteral=function(e,t){a[e]=t},this.setIdentifierFns=function(i,n){return e=i,t=n,this},this.$get=["$filter",function(o){function s(e,t,n){var a,s,c;switch(n=n||$,typeof e){case"string":c=e=e.trim();var m=n?r:i;if(a=m[c],!a){":"===e.charAt(0)&&":"===e.charAt(1)&&(s=!0,e=e.substring(2)),a=n?b:v;var y=new yr(a);a=new br(y,o,a).parse(e),a.constant?a.$$watchDelegate=h:s?a.$$watchDelegate=a.literal?f:d:a.inputs&&(a.$$watchDelegate=u),n&&(a=l(a)),m[c]=a}return g(a,t);case"function":return g(e,t);default:return g(p,t)}}function l(e){function t(t,i,n,r){var a=$;$=!0;try{return e(t,i,n,r)}finally{$=a}}if(!e)return e;t.$$watchDelegate=e.$$watchDelegate,t.assign=l(e.assign),t.constant=e.constant,t.literal=e.literal;for(var i=0;e.inputs&&i<e.inputs.length;++i)e.inputs[i]=l(e.inputs[i]);return t.inputs=e.inputs,t}function c(e,t){return null==e||null==t?e===t:("object"!=typeof e||(e=Wt(e),"object"!=typeof e))&&(e===t||e!==e&&t!==t)}function u(e,t,i,n,r){var a,o=n.inputs;if(1===o.length){var s=c,o=o[0];return e.$watch(function(e){var t=o(e);return c(t,s)||(a=n(e,void 0,void 0,[t]),s=t&&Wt(t)),a},t,i,r)}for(var l=[],u=[],d=0,p=o.length;d<p;d++)l[d]=c,u[d]=null;return e.$watch(function(e){for(var t=!1,i=0,r=o.length;i<r;i++){var s=o[i](e);(t||(t=!c(s,l[i])))&&(u[i]=s,l[i]=s&&Wt(s))}return t&&(a=n(e,void 0,void 0,u)),a},t,i,r)}function d(e,t,i,n){var r,a;return r=e.$watch(function(e){return n(e)},function(e,i,n){a=e,S(t)&&t.apply(this,arguments),y(e)&&n.$$postDigest(function(){y(a)&&r()})},i)}function f(e,t,i,r){function a(e){var t=!0;return n(e,function(e){y(e)||(t=!1)}),t}var o,s;return o=e.$watch(function(e){return r(e)},function(e,i,n){s=e,S(t)&&t.call(this,e,i,n),a(e)&&n.$$postDigest(function(){a(s)&&o()})},i)}function h(e,t,i,n){var r;return r=e.$watch(function(e){return r(),n(e)},t,i)}function g(e,t){if(!t)return e;var i=e.$$watchDelegate,n=!1,i=i!==f&&i!==d?function(i,r,a,o){return a=n&&o?o[0]:e(i,r,a,o),t(a,i,r)}:function(i,n,r,a){return r=e(i,n,r,a),i=t(r,i,n),y(r)?i:r};return e.$$watchDelegate&&e.$$watchDelegate!==u?i.$$watchDelegate=e.$$watchDelegate:t.$stateful||(i.$$watchDelegate=u,n=!e.inputs,i.inputs=e.inputs?e.inputs:[e]),i}var m=cn().noUnsafeEval,v={csp:m,expensiveChecks:!1,literals:x(a),isIdentifierStart:S(e)&&e,isIdentifierContinue:S(t)&&t},b={csp:m,expensiveChecks:!0,literals:x(a),isIdentifierStart:S(e)&&e,isIdentifierContinue:S(t)&&t},$=!1;return s.$$runningExpensiveChecks=function(){return $},s}]}function Ht(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return Kt(function(t){e.$evalAsync(t)},t)}]}function zt(){this.$get=["$browser","$exceptionHandler",function(e,t){return Kt(function(t){e.defer(t)},t)}]}function Kt(e,i){function r(){this.$$state={status:0}}function a(e,t){return function(i){t.call(e,i)}}function o(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){var e,n,r;r=t.pending,t.processScheduled=!1,t.pending=void 0;for(var a=0,o=r.length;a<o;++a){n=r[a][0],e=r[a][t.status];try{S(e)?n.resolve(e(t.value)):1===t.status?n.resolve(t.value):n.reject(t.value)}catch(e){n.reject(e),i(e)}}}))}function s(){this.promise=new r}var c=t("$q",TypeError);l(r.prototype,{then:function(e,t,i){if(m(e)&&m(t)&&m(i))return this;var n=new s;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([n,e,t,i]),0<this.$$state.status&&o(this.$$state),n.promise},catch:function(e){return this.then(null,e)},finally:function(e,t){return this.then(function(t){return d(t,!0,e)},function(t){return d(t,!1,e)},t)}}),l(s.prototype,{resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(c("qcycle",e)):this.$$resolve(e))},$$resolve:function(e){function t(e){l||(l=!0,s.$$resolve(e))}function n(e){l||(l=!0,s.$$reject(e))}var r,s=this,l=!1;try{(v(e)||S(e))&&(r=e&&e.then),S(r)?(this.promise.$$state.status=-1,r.call(e,t,n,a(this,this.notify))):(this.promise.$$state.value=e,this.promise.$$state.status=1,o(this.promise.$$state))}catch(e){n(e),i(e)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,o(this.promise.$$state)},notify:function(t){var n=this.promise.$$state.pending;0>=this.promise.$$state.status&&n&&n.length&&e(function(){for(var e,r,a=0,o=n.length;a<o;a++){r=n[a][0],e=n[a][3];try{r.notify(S(e)?e(t):t)}catch(e){i(e)}}})}});var u=function(e,t){var i=new s;return t?i.resolve(e):i.reject(e),i.promise},d=function(e,t,i){var n=null;try{S(i)&&(n=i())}catch(e){return u(e,!1)}return n&&S(n.then)?n.then(function(){return u(e,t)},function(e){return u(e,!1)}):u(e,t)},p=function(e,t,i,n){var r=new s;return r.resolve(e),r.promise.then(t,i,n)},f=function(e){if(!S(e))throw c("norslvr",e);var t=new s;return e(function(e){t.resolve(e)},function(e){t.reject(e)}),t.promise};return f.prototype=r.prototype,f.defer=function(){var e=new s;return e.resolve=a(e,e.resolve),e.reject=a(e,e.reject),e.notify=a(e,e.notify),e},f.reject=function(e){var t=new s;return t.reject(e),t.promise},f.when=p,f.resolve=p,f.all=function(e){var t=new s,i=0,r=an(e)?[]:{};return n(e,function(e,n){i++,p(e).then(function(e){r.hasOwnProperty(n)||(r[n]=e,--i||t.resolve(r))},function(e){r.hasOwnProperty(n)||t.reject(e)})}),0===i&&t.resolve(r),t.promise},f}function Qt(){this.$get=["$window","$timeout",function(e,t){var i=e.requestAnimationFrame||e.webkitRequestAnimationFrame,n=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,r=!!i,a=r?function(e){var t=i(e);return function(){n(t)}}:function(e){var i=t(e,16.66,!1);return function(){t.cancel(i)}};return a.supported=r,a}]}function Yt(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=++rn,this.$$ChildScope=null}return t.prototype=e,t}var r=10,a=t("$rootScope"),o=null,s=null;this.digestTtl=function(e){return arguments.length&&(r=e),r},this.$get=["$exceptionHandler","$parse","$browser",function(t,l,c){function u(e){e.currentScope.$$destroyed=!0}function d(e){9===Gi&&(e.$$childHead&&d(e.$$childHead),e.$$nextSibling&&d(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function f(){this.$id=++rn,this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function h(e){if(C.$$phase)throw a("inprog",C.$$phase);C.$$phase=e}function g(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function y(e,t,i){do e.$$listenerCount[i]-=t,0===e.$$listenerCount[i]&&delete e.$$listenerCount[i];while(e=e.$parent)}function b(){}function $(){for(;k.length;)try{k.shift()()}catch(e){t(e)}s=null}function w(){null===s&&(s=c.defer(function(){C.$apply($)}))}f.prototype={constructor:f,$new:function(t,i){var n;return i=i||this,t?(n=new f,n.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),n=new this.$$ChildScope),n.$parent=i,n.$$prevSibling=i.$$childTail,i.$$childHead?(i.$$childTail.$$nextSibling=n,i.$$childTail=n):i.$$childHead=i.$$childTail=n,(t||i!=this)&&n.$on("$destroy",u),n},$watch:function(e,t,i,n){var r=l(e);if(r.$$watchDelegate)return r.$$watchDelegate(this,t,i,r,e);var a=this,s=a.$$watchers,c={fn:t,last:b,get:r,exp:n||e,eq:!!i};return o=null,S(t)||(c.fn=p),s||(s=a.$$watchers=[]),s.unshift(c),g(this,1),function(){0<=E(s,c)&&g(a,-1),o=null}},$watchGroup:function(e,t){function i(){l=!1,c?(c=!1,t(a,a,s)):t(a,r,s)}var r=Array(e.length),a=Array(e.length),o=[],s=this,l=!1,c=!0;if(!e.length){var u=!0;return s.$evalAsync(function(){u&&t(a,a,s)}),function(){u=!1}}return 1===e.length?this.$watch(e[0],function(e,i,n){a[0]=e,r[0]=i,t(a,e===i?a:r,n)}):(n(e,function(e,t){var n=s.$watch(e,function(e,n){a[t]=e,r[t]=n,l||(l=!0,s.$evalAsync(i))});o.push(n)}),function(){for(;o.length;)o.shift()()})},$watchCollection:function(e,t){function n(e){r=e;var t,n,o,s;if(!m(r)){if(v(r))if(i(r))for(a!==p&&(a=p,g=a.length=0,u++),e=r.length,g!==e&&(u++,a.length=g=e),t=0;t<e;t++)s=a[t],o=r[t],n=s!==s&&o!==o,n||s===o||(u++,a[t]=o);else{a!==f&&(a=f={},g=0,u++),e=0;for(t in r)zi.call(r,t)&&(e++,o=r[t],s=a[t],t in a?(n=s!==s&&o!==o,n||s===o||(u++,a[t]=o)):(g++,a[t]=o,u++));if(g>e)for(t in u++,a)zi.call(r,t)||(g--,delete a[t])}else a!==r&&(a=r,u++);return u}}n.$stateful=!0;var r,a,o,s=this,c=1<t.length,u=0,d=l(e,n),p=[],f={},h=!0,g=0;return this.$watch(d,function(){if(h?(h=!1,t(r,r,s)):t(r,o,s),c)if(v(r))if(i(r)){o=Array(r.length);for(var e=0;e<r.length;e++)o[e]=r[e]}else for(e in o={},r)zi.call(r,e)&&(o[e]=r[e]);else o=r})},$digest:function(){var e,i,n,l,u,d,p,f,g,m,y,v=r,w=[];h("$digest"),c.$$checkUrlChange(),this===C&&null!==s&&(c.defer.cancel(s),$()),o=null;do{for(f=!1,g=this;P.length;){try{y=P.shift(),y.scope.$eval(y.expression,y.locals)}catch(e){t(e)}o=null}e:do{if(d=g.$$watchers)for(p=d.length;p--;)try{if(e=d[p])if(u=e.get,(i=u(g))===(n=e.last)||(e.eq?M(i,n):"number"==typeof i&&"number"==typeof n&&isNaN(i)&&isNaN(n))){if(e===o){f=!1;break e}}else f=!0,o=e,e.last=e.eq?x(i,null):i,l=e.fn,l(i,n===b?i:n,g),5>v&&(m=4-v,w[m]||(w[m]=[]),w[m].push({msg:S(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:i,oldVal:n}))}catch(e){t(e)}if(!(d=g.$$watchersCount&&g.$$childHead||g!==this&&g.$$nextSibling))for(;g!==this&&!(d=g.$$nextSibling);)g=g.$parent}while(g=d);if((f||P.length)&&!v--)throw C.$$phase=null,a("infdig",r,w)}while(f||P.length);for(C.$$phase=null;D.length;)try{D.shift()()}catch(e){t(e)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===C&&c.$$applicationDestroyed(),g(this,-this.$$watchersCount);for(var t in this.$$listenerCount)y(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=p,this.$on=this.$watch=this.$watchGroup=function(){return p},this.$$listeners={},this.$$nextSibling=null,d(this)}},$eval:function(e,t){return l(e)(this,t)},$evalAsync:function(e,t){C.$$phase||P.length||c.defer(function(){P.length&&C.$digest()}),P.push({scope:this,expression:l(e),locals:t})},$$postDigest:function(e){D.push(e)},$apply:function(e){try{h("$apply");try{return this.$eval(e)}finally{C.$$phase=null}}catch(e){t(e)}finally{try{C.$digest()}catch(e){throw t(e),e}}},$applyAsync:function(e){function t(){i.$eval(e)}var i=this;e&&k.push(t),e=l(e),w()},$on:function(e,t){var i=this.$$listeners[e];i||(this.$$listeners[e]=i=[]),i.push(t);var n=this;do n.$$listenerCount[e]||(n.$$listenerCount[e]=0),n.$$listenerCount[e]++;while(n=n.$parent);var r=this;return function(){var n=i.indexOf(t);-1!==n&&(i[n]=null,y(r,1,e))}},$emit:function(e,i){var n,r,a,o=[],s=this,l=!1,c={name:e,targetScope:s,stopPropagation:function(){l=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},u=j([c],arguments,1);do{for(n=s.$$listeners[e]||o,c.currentScope=s,r=0,a=n.length;r<a;r++)if(n[r])try{n[r].apply(null,u)}catch(e){t(e)}else n.splice(r,1),r--,a--;if(l)return c.currentScope=null,c;s=s.$parent}while(s);return c.currentScope=null,c},$broadcast:function(e,i){var n=this,r=this,a={name:e,targetScope:this,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[e])return a;for(var o,s,l=j([a],arguments,1);n=r;){for(a.currentScope=n,r=n.$$listeners[e]||[],o=0,s=r.length;o<s;o++)if(r[o])try{r[o].apply(null,l)}catch(e){t(e)}else r.splice(o,1),o--,s--;if(!(r=n.$$listenerCount[e]&&n.$$childHead||n!==this&&n.$$nextSibling))for(;n!==this&&!(r=n.$$nextSibling);)n=n.$parent}return a.currentScope=null,a}};var C=new f,P=C.$$asyncQueue=[],D=C.$$postDigestQueue=[],k=C.$$applyAsyncQueue=[];return C}]}function Jt(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return y(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return y(e)?(t=e,this):t},this.$get=function(){return function(i,n){var r,a=n?t:e;return r=oi(i).href,""===r||r.match(a)?i:"unsafe:"+r}}}function Zt(e){if("self"===e)return e;if($(e)){if(-1<e.indexOf("***"))throw wr("iwcard",e);return e=ln(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(P(e))return new RegExp("^"+e.source+"$");throw wr("imatcher")}function Xt(e){var t=[];return y(e)&&n(e,function(e){t.push(Zt(e))}),t}function ei(){this.SCE_CONTEXTS=Cr;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=Xt(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=Xt(e)),t},this.$get=["$injector",function(i){function n(e,t){return"self"===e?si(t):!!e.exec(t.href)}function r(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}var a=function(e){throw wr("unsafe")};i.has("$sanitize")&&(a=i.get("$sanitize"));var o=r(),s={};return s[Cr.HTML]=r(o),s[Cr.CSS]=r(o),s[Cr.URL]=r(o),s[Cr.JS]=r(o),s[Cr.RESOURCE_URL]=r(s[Cr.URL]),{trustAs:function(e,t){var i=s.hasOwnProperty(e)?s[e]:null;if(!i)throw wr("icontext",e,t);if(null===t||m(t)||""===t)return t;if("string"!=typeof t)throw wr("itype",e);return new i(t)},getTrusted:function(i,r){if(null===r||m(r)||""===r)return r;var o=s.hasOwnProperty(i)?s[i]:null;if(o&&r instanceof o)return r.$$unwrapTrustedValue();if(i===Cr.RESOURCE_URL){var l,c,o=oi(r.toString()),u=!1;for(l=0,c=e.length;l<c;l++)if(n(e[l],o)){u=!0;break}if(u)for(l=0,c=t.length;l<c;l++)if(n(t[l],o)){u=!1;break}if(u)return r;throw wr("insecurl",r.toString())}if(i===Cr.HTML)return a(r);throw wr("unsafe")},valueOf:function(e){return e instanceof o?e.$$unwrapTrustedValue():e}}}]}function ti(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,i){if(e&&8>Gi)throw wr("iequirks");var r=F(Cr);r.isEnabled=function(){return e},r.trustAs=i.trustAs,r.getTrusted=i.getTrusted,r.valueOf=i.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=f),r.parseAs=function(e,i){var n=t(i);return n.literal&&n.constant?n:t(i,function(t){return r.getTrusted(e,t)})};var a=r.parseAs,o=r.getTrusted,s=r.trustAs;return n(Cr,function(e,t){var i=Ki(t);r[ue("parse_as_"+i)]=function(t){return a(e,t)},r[ue("get_trusted_"+i)]=function(t){return o(e,t)},r[ue("trust_as_"+i)]=function(t){return s(e,t)}}),r}]}function ii(){this.$get=["$window","$document",function(e,t){var i,n={},r=!(e.chrome&&e.chrome.app&&e.chrome.app.runtime)&&e.history&&e.history.pushState,a=u((/android (\d+)/.exec(Ki((e.navigator||{}).userAgent))||[])[1]),o=/Boxee/i.test((e.navigator||{}).userAgent),s=t[0]||{},l=/^(Moz|webkit|ms)(?=[A-Z])/,c=s.body&&s.body.style,d=!1,p=!1;if(c){for(var f in c)if(d=l.exec(f)){i=d[0],i=i.substr(0,1).toUpperCase()+i.substr(1);break}i||(i="WebkitOpacity"in c&&"webkit"),d=!!("transition"in c||i+"Transition"in c),p=!!("animation"in c||i+"Animation"in c),!a||d&&p||(d=$(c.webkitTransition),p=$(c.webkitAnimation))}return{history:!(!r||4>a||o),hasEvent:function(e){if("input"===e&&11>=Gi)return!1;if(m(n[e])){var t=s.createElement("div");n[e]="on"+e in t}return n[e]},csp:cn(),vendorPrefix:i,transitions:d,animations:p,android:a}}]}function ni(){var e;this.httpOptions=function(t){return t?(e=t,this):e},this.$get=["$templateCache","$http","$q","$sce",function(t,i,n,r){function a(o,s){a.totalPendingRequests++,$(o)&&t.get(o)||(o=r.getTrustedResourceUrl(o));var c=i.defaults&&i.defaults.transformResponse;return an(c)?c=c.filter(function(e){return e!==ot}):c===ot&&(c=null),i.get(o,l({cache:t,transformResponse:c},e)).finally(function(){a.totalPendingRequests--}).then(function(e){return t.put(o,e.data),e.data},function(e){if(!s)throw Sr("tpload",o,e.status,e.statusText);return n.reject(e)})}return a.totalPendingRequests=0,a}]}function ri(){this.$get=["$rootScope","$browser","$location",function(e,t,i){return{findBindings:function(e,t,i){e=e.getElementsByClassName("ng-binding");var r=[];return n(e,function(e){var a=nn.element(e).data("$binding");a&&n(a,function(n){i?new RegExp("(^|\\s)"+ln(t)+"(\\s|\\||$)").test(n)&&r.push(e):-1!=n.indexOf(t)&&r.push(e)})}),r},findModels:function(e,t,i){for(var n=["ng-","data-ng-","ng\\:"],r=0;r<n.length;++r){var a=e.querySelectorAll("["+n[r]+"model"+(i?"=":"*=")+'"'+t+'"]');if(a.length)return a}},getLocation:function(){return i.url()},setLocation:function(t){t!==i.url()&&(i.url(t),e.$digest())},whenStable:function(e){t.notifyWhenNoOutstandingRequests(e)}}}]}function ai(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,i,n,r){function a(a,s,l){S(a)||(l=s,s=a,a=p);var c,u=Yi.call(arguments,3),d=y(l)&&!l,f=(d?n:i).defer(),h=f.promise;return c=t.defer(function(){try{f.resolve(a.apply(null,u))}catch(e){f.reject(e),r(e)}finally{delete o[h.$$timeoutId]}d||e.$apply()},s),h.$$timeoutId=c,o[c]=f,h}var o={};return a.cancel=function(e){return!!(e&&e.$$timeoutId in o)&&(o[e.$$timeoutId].reject("canceled"),delete o[e.$$timeoutId],t.defer.cancel(e.$$timeoutId))},a}]}function oi(e){return Gi&&(Pr.setAttribute("href",e),e=Pr.href),Pr.setAttribute("href",e),{href:Pr.href,protocol:Pr.protocol?Pr.protocol.replace(/:$/,""):"",host:Pr.host,search:Pr.search?Pr.search.replace(/^\?/,""):"",hash:Pr.hash?Pr.hash.replace(/^#/,""):"",hostname:Pr.hostname,port:Pr.port,pathname:"/"===Pr.pathname.charAt(0)?Pr.pathname:"/"+Pr.pathname}}function si(e){return e=$(e)?oi(e):e,e.protocol===Dr.protocol&&e.host===Dr.host}function li(){this.$get=h(e)}function ci(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var i=e[0]||{},n={},r="";return function(){var e,a,o,s,l;if(e=i.cookie||"",e!==r)for(r=e,e=r.split("; "),n={},o=0;o<e.length;o++)a=e[o],s=a.indexOf("="),0<s&&(l=t(a.substring(0,s)),m(n[l])&&(n[l]=t(a.substring(s+1))));return n}}function ui(){this.$get=ci}function di(e){function t(i,r){if(v(i)){var a={};return n(i,function(e,i){a[i]=t(i,e)}),a}return e.factory(i+"Filter",r)}this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+"Filter")}}],t("currency",mi),t("date",Ii),t("filter",pi),t("json",Oi),t("limitTo",Ti),t("lowercase",Er),t("number",yi),t("orderBy",Ai),t("uppercase",xr)}function pi(){return function(e,n,r){if(!i(e)){if(null==e)return e;throw t("filter")("notarray",e)}var a;switch(gi(n)){case"function":break;case"boolean":case"null":case"number":case"string":a=!0;case"object":n=fi(n,r,a);break;default:return e}return Array.prototype.filter.call(e,n)}}function fi(e,t,i){var n=v(e)&&"$"in e;return!0===t?t=M:S(t)||(t=function(e,t){return!m(e)&&(null===e||null===t?e===t:!(v(t)||v(e)&&!g(e))&&(e=Ki(""+e),t=Ki(""+t),-1!==e.indexOf(t)))}),function(r){return n&&!v(r)?hi(r,e.$,t,!1):hi(r,e,t,i)}}function hi(e,t,i,n,r){var a=gi(e),o=gi(t);if("string"===o&&"!"===t.charAt(0))return!hi(e,t.substring(1),i,n);if(an(e))return e.some(function(e){return hi(e,t,i,n)});switch(a){case"object":var s;if(n){for(s in e)if("$"!==s.charAt(0)&&hi(e[s],t,i,!0))return!0;return!r&&hi(e,t,i,!1)}if("object"===o){for(s in t)if(r=t[s],!S(r)&&!m(r)&&(a="$"===s,!hi(a?e:e[s],r,i,a,a)))return!1;return!0}return i(e,t);case"function":return!1;default:return i(e,t)}}function gi(e){return null===e?"null":typeof e}function mi(e){var t=e.NUMBER_FORMATS;return function(e,i,n){return m(i)&&(i=t.CURRENCY_SYM),m(n)&&(n=t.PATTERNS[1].maxFrac),null==e?e:$i(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,n).replace(/\u00A4/g,i)}}function yi(e){var t=e.NUMBER_FORMATS;return function(e,i){return null==e?e:$i(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,i)}}function vi(e){var t,i,n,r,a,o=0;for(-1<(i=e.indexOf(Ir))&&(e=e.replace(Ir,"")),0<(n=e.search(/e/i))?(0>i&&(i=n),i+=+e.slice(n+1),e=e.substring(0,n)):0>i&&(i=e.length),n=0;e.charAt(n)==Or;n++);if(n==(a=e.length))t=[0],i=1;else{for(a--;e.charAt(a)==Or;)a--;for(i-=n,t=[],r=0;n<=a;n++,r++)t[r]=+e.charAt(n)}return i>kr&&(t=t.splice(0,kr-1),o=i-1,i=1),{d:t,e:o,i:i}}function bi(e,t,i,n){var r=e.d,a=r.length-e.i;if(t=m(t)?Math.min(Math.max(i,a),n):+t,i=t+e.i,n=r[i],0<i){r.splice(Math.max(e.i,i));for(var o=i;o<r.length;o++)r[o]=0}else for(a=Math.max(0,a),e.i=1,r.length=Math.max(1,i=t+1),r[0]=0,o=1;o<i;o++)r[o]=0;if(5<=n)if(0>i-1){for(n=0;n>i;n--)r.unshift(0),e.i++;r.unshift(1),e.i++}else r[i-1]++;
for(;a<Math.max(0,t);a++)r.push(0);(t=r.reduceRight(function(e,t,i,n){return t+=e,n[i]=t%10,Math.floor(t/10)},0))&&(r.unshift(t),e.i++)}function $i(e,t,i,n,r){if(!$(e)&&!w(e)||isNaN(e))return"";var a=!isFinite(e),o=!1,s=Math.abs(e)+"",l="";if(a)l="∞";else{for(o=vi(s),bi(o,r,t.minFrac,t.maxFrac),l=o.d,s=o.i,r=o.e,a=[],o=l.reduce(function(e,t){return e&&!t},!0);0>s;)l.unshift(0),s++;for(0<s?a=l.splice(s):(a=l,l=[0]),s=[],l.length>=t.lgSize&&s.unshift(l.splice(-t.lgSize).join(""));l.length>t.gSize;)s.unshift(l.splice(-t.gSize).join(""));l.length&&s.unshift(l.join("")),l=s.join(i),a.length&&(l+=n+a.join("")),r&&(l+="e+"+r)}return 0>e&&!o?t.negPre+l+t.negSuf:t.posPre+l+t.posSuf}function wi(e,t,i,n){var r="";for((0>e||n&&0>=e)&&(n?e=-e+1:(e=-e,r="-")),e=""+e;e.length<t;)e=Or+e;return i&&(e=e.substr(e.length-t)),r+e}function Ci(e,t,i,n,r){return i=i||0,function(a){return a=a["get"+e](),(0<i||a>-i)&&(a+=i),0===a&&-12==i&&(a=12),wi(a,t,n,r)}}function Si(e,t,i){return function(n,r){var a=n["get"+e](),o=Qi((i?"STANDALONE":"")+(t?"SHORT":"")+e);return r[o][a]}}function Pi(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function Di(e){return function(t){var i=Pi(t.getFullYear());return t=+new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))-+i,t=1+Math.round(t/6048e5),wi(t,e)}}function ki(e,t){return 0>=e.getFullYear()?t.ERAS[0]:t.ERAS[1]}function Ii(e){function t(e){var t;if(t=e.match(i)){e=new Date(0);var n=0,r=0,a=t[8]?e.setUTCFullYear:e.setFullYear,o=t[8]?e.setUTCHours:e.setHours;t[9]&&(n=u(t[9]+t[10]),r=u(t[9]+t[11])),a.call(e,u(t[1]),u(t[2])-1,u(t[3])),n=u(t[4]||0)-n,r=u(t[5]||0)-r,a=u(t[6]||0),t=Math.round(1e3*parseFloat("0."+(t[7]||0))),o.call(e,n,r,a,t)}return e}var i=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(i,r,a){var o,s,l="",c=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,$(i)&&(i=_r.test(i)?u(i):t(i)),w(i)&&(i=new Date(i)),!C(i)||!isFinite(i.getTime()))return i;for(;r;)(s=Ar.exec(r))?(c=j(c,s,1),r=c.pop()):(c.push(r),r=null);var d=i.getTimezoneOffset();return a&&(d=U(a,d),i=G(i,a,!0)),n(c,function(t){o=Tr[t],l+=o?o(i,e.DATETIME_FORMATS,d):"''"===t?"'":t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),l}}function Oi(){return function(e,t){return m(t)&&(t=2),R(e,t)}}function Ti(){return function(e,t,i){return t=1/0===Math.abs(Number(t))?Number(t):u(t),isNaN(t)?e:(w(e)&&(e=e.toString()),an(e)||$(e)?(i=!i||isNaN(i)?0:u(i),i=0>i?Math.max(0,e.length+i):i,0<=t?e.slice(i,i+t):0===i?e.slice(t,e.length):e.slice(Math.max(0,i+t),i)):e)}}function Ai(e){function n(t,i){return i=i?-1:1,t.map(function(t){var n=1,r=f;if(S(t))r=t;else if($(t)&&("+"!=t.charAt(0)&&"-"!=t.charAt(0)||(n="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(r=e(t),r.constant)))var a=r(),r=function(e){return e[a]};return{get:r,descending:n*i}})}function r(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}return function(e,a,o){if(null==e)return e;if(!i(e))throw t("orderBy")("notarray",e);an(a)||(a=[a]),0===a.length&&(a=["+"]);var s=n(a,o);return s.push({get:function(){return{}},descending:o?-1:1}),e=Array.prototype.map.call(e,function(e,t){return{value:e,predicateValues:s.map(function(i){var n=i.get(e);return i=typeof n,null===n?(i="string",n="null"):"string"===i?n=n.toLowerCase():"object"===i&&("function"==typeof n.valueOf&&(n=n.valueOf(),r(n))||g(n)&&(n=n.toString(),r(n))||(n=t)),{value:n,type:i}})}}),e.sort(function(e,t){for(var i=0,n=0,r=s.length;n<r;++n){var i=e.predicateValues[n],a=t.predicateValues[n],o=0;if(i.type===a.type?i.value!==a.value&&(o=i.value<a.value?-1:1):o=i.type<a.type?-1:1,i=o*s[n].descending)break}return i}),e=e.map(function(e){return e.value})}}function _i(e){return S(e)&&(e={link:e}),e.restrict=e.restrict||"AC",h(e)}function Ei(e,t,i,r,a){var o=this,s=[];o.$error={},o.$$success={},o.$pending=void 0,o.$name=a(t.name||t.ngForm||"")(i),o.$dirty=!1,o.$pristine=!0,o.$valid=!0,o.$invalid=!1,o.$submitted=!1,o.$$parentForm=jr,o.$rollbackViewValue=function(){n(s,function(e){e.$rollbackViewValue()})},o.$commitViewValue=function(){n(s,function(e){e.$commitViewValue()})},o.$addControl=function(e){re(e.$name,"input"),s.push(e),e.$name&&(o[e.$name]=e),e.$$parentForm=o},o.$$renameControl=function(e,t){var i=e.$name;o[i]===e&&delete o[i],o[t]=e,e.$name=t},o.$removeControl=function(e){e.$name&&o[e.$name]===e&&delete o[e.$name],n(o.$pending,function(t,i){o.$setValidity(i,null,e)}),n(o.$error,function(t,i){o.$setValidity(i,null,e)}),n(o.$$success,function(t,i){o.$setValidity(i,null,e)}),E(s,e),e.$$parentForm=jr},Ni({ctrl:this,$element:e,set:function(e,t,i){var n=e[t];n?-1===n.indexOf(i)&&n.push(i):e[t]=[i]},unset:function(e,t,i){var n=e[t];n&&(E(n,i),0===n.length&&delete e[t])},$animate:r}),o.$setDirty=function(){r.removeClass(e,va),r.addClass(e,ba),o.$dirty=!0,o.$pristine=!1,o.$$parentForm.$setDirty()},o.$setPristine=function(){r.setClass(e,va,ba+" ng-submitted"),o.$dirty=!1,o.$pristine=!0,o.$submitted=!1,n(s,function(e){e.$setPristine()})},o.$setUntouched=function(){n(s,function(e){e.$setUntouched()})},o.$setSubmitted=function(){r.addClass(e,"ng-submitted"),o.$submitted=!0,o.$$parentForm.$setSubmitted()}}function xi(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function Fi(e,t,i,n,r,a){var o=Ki(t[0].type);if(!r.android){var s=!1;t.on("compositionstart",function(){s=!0}),t.on("compositionend",function(){s=!1,c()})}var l,c=function(e){if(l&&(a.defer.cancel(l),l=null),!s){var r=t.val();e=e&&e.type,"password"===o||i.ngTrim&&"false"===i.ngTrim||(r=sn(r)),(n.$viewValue!==r||""===r&&n.$$hasNativeValidators)&&n.$setViewValue(r,e)}};if(r.hasEvent("input"))t.on("input",c);else{var u=function(e,t,i){l||(l=a.defer(function(){l=null,t&&t.value===i||c(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||15<t&&19>t||37<=t&&40>=t||u(e,this,this.value)}),r.hasEvent("paste")&&t.on("paste cut",u)}t.on("change",c),Qr[o]&&n.$$hasNativeValidators&&o===i.type&&t.on("keydown wheel mousedown",function(e){if(!l){var t=this.validity,i=t.badInput,n=t.typeMismatch;l=a.defer(function(){l=null,t.badInput===i&&t.typeMismatch===n||c(e)})}}),n.$render=function(){var e=n.$isEmpty(n.$viewValue)?"":n.$viewValue;t.val()!==e&&t.val(e)}}function Mi(e,t){return function(i,r){var a,o;if(C(i))return i;if($(i)){if('"'==i.charAt(0)&&'"'==i.charAt(i.length-1)&&(i=i.substring(1,i.length-1)),Nr.test(i))return new Date(i);if(e.lastIndex=0,a=e.exec(i))return a.shift(),o=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},n(a,function(e,i){i<t.length&&(o[t[i]]=+e)}),new Date(o.yyyy,o.MM-1,o.dd,o.HH,o.mm,o.ss||0,1e3*o.sss||0)}return NaN}}function ji(e,t,i,n){return function(r,a,o,s,l,c,u){function d(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function p(e){return y(e)&&!C(e)?i(e)||void 0:e}Li(r,a,o,s),Fi(r,a,o,s,l,c);var f,h=s&&s.$options&&s.$options.timezone;if(s.$$parserName=e,s.$parsers.push(function(e){return s.$isEmpty(e)?null:t.test(e)?(e=i(e,f),h&&(e=G(e,h)),e):void 0}),s.$formatters.push(function(e){if(e&&!C(e))throw wa("datefmt",e);return d(e)?((f=e)&&h&&(f=G(f,h,!0)),u("date")(e,n,h)):(f=null,"")}),y(o.min)||o.ngMin){var g;s.$validators.min=function(e){return!d(e)||m(g)||i(e)>=g},o.$observe("min",function(e){g=p(e),s.$validate()})}if(y(o.max)||o.ngMax){var v;s.$validators.max=function(e){return!d(e)||m(v)||i(e)<=v},o.$observe("max",function(e){v=p(e),s.$validate()})}}}function Li(e,t,i,n){(n.$$hasNativeValidators=v(t[0].validity))&&n.$parsers.push(function(e){var i=t.prop("validity")||{};return i.badInput||i.typeMismatch?void 0:e})}function Bi(e,t,i,n,r){if(y(n)){if(e=e(n),!e.constant)throw wa("constexpr",i,n);return e(t)}return r}function Ri(e,t){return e="ngClass"+e,["$animate",function(i){function r(e,t){var i=[],n=0;e:for(;n<e.length;n++){for(var r=e[n],a=0;a<t.length;a++)if(r==t[a])continue e;i.push(r)}return i}function a(e){var t=[];return an(e)?(n(e,function(e){t=t.concat(a(e))}),t):$(e)?e.split(" "):v(e)?(n(e,function(e,i){e&&(t=t.concat(i.split(" ")))}),t):e}return{restrict:"AC",link:function(o,s,l){function c(e){e=u(e,1),l.$addClass(e)}function u(e,t){var i=s.data("$classCounts")||se(),r=[];return n(e,function(e){(0<t||i[e])&&(i[e]=(i[e]||0)+t,i[e]===+(0<t)&&r.push(e))}),s.data("$classCounts",i),r.join(" ")}function d(e,t){var n=r(t,e),a=r(e,t),n=u(n,1),a=u(a,-1);n&&n.length&&i.addClass(s,n),a&&a.length&&i.removeClass(s,a)}function p(e){if(!0===t||o.$index%2===t){var i=a(e||[]);if(f){if(!M(e,f)){var n=a(f);d(n,i)}}else c(i)}f=an(e)?e.map(function(e){return F(e)}):F(e)}var f;o.$watch(l[e],p,!0),l.$observe("class",function(t){p(o.$eval(l[e]))}),"ngClass"!==e&&o.$watch("$index",function(i,n){var r=1&i;if(r!==(1&n)){var s=a(o.$eval(l[e]));r===t?c(s):(r=u(s,-1),l.$removeClass(r))}})}}}]}function Ni(e){function t(e,t){t&&!a[e]?(l.addClass(r,e),a[e]=!0):!t&&a[e]&&(l.removeClass(r,e),a[e]=!1)}function i(e,i){e=e?"-"+ee(e,"-"):"",t(ma+e,!0===i),t(ya+e,!1===i)}var n=e.ctrl,r=e.$element,a={},o=e.set,s=e.unset,l=e.$animate;a[ya]=!(a[ma]=r.hasClass(ma)),n.$setValidity=function(e,r,a){m(r)?(n.$pending||(n.$pending={}),o(n.$pending,e,a)):(n.$pending&&s(n.$pending,e,a),Ui(n.$pending)&&(n.$pending=void 0)),I(r)?r?(s(n.$error,e,a),o(n.$$success,e,a)):(o(n.$error,e,a),s(n.$$success,e,a)):(s(n.$error,e,a),s(n.$$success,e,a)),n.$pending?(t($a,!0),n.$valid=n.$invalid=void 0,i("",null)):(t($a,!1),n.$valid=Ui(n.$error),n.$invalid=!n.$valid,i("",n.$valid)),r=n.$pending&&n.$pending[e]?void 0:!n.$error[e]&&(!!n.$$success[e]||null),i(e,r),n.$$parentForm.$setValidity(e,r,n)}}function Ui(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}var Gi,Vi,Wi,qi,Hi=/^\/(.+)\/([a-z]*)$/,zi=Object.prototype.hasOwnProperty,Ki=function(e){return $(e)?e.toLowerCase():e},Qi=function(e){return $(e)?e.toUpperCase():e},Yi=[].slice,Ji=[].splice,Zi=[].push,Xi=Object.prototype.toString,en=Object.getPrototypeOf,tn=t("ng"),nn=e.angular||(e.angular={}),rn=0;Gi=e.document.documentMode,p.$inject=[],f.$inject=[];var an=Array.isArray,on=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,sn=function(e){return $(e)?e.trim():e},ln=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},cn=function(){if(!y(cn.rules)){var t=e.document.querySelector("[ng-csp]")||e.document.querySelector("[data-ng-csp]");if(t){var i=t.getAttribute("ng-csp")||t.getAttribute("data-ng-csp");cn.rules={noUnsafeEval:!i||-1!==i.indexOf("no-unsafe-eval"),noInlineStyle:!i||-1!==i.indexOf("no-inline-style")}}else{t=cn;try{new Function(""),i=!1}catch(e){i=!0}t.rules={noUnsafeEval:i,noInlineStyle:!1}}}return cn.rules},un=function(){if(y(un.name_))return un.name_;var t,i,n,r,a=pn.length;for(i=0;i<a;++i)if(n=pn[i],t=e.document.querySelector("["+n.replace(":","\\:")+"jq]")){r=t.getAttribute(n+"jq");break}return un.name_=r},dn=/:/g,pn=["ng-","data-ng-","ng:","x-ng-"],fn=/[A-Z]/g,hn=!1,gn=3,mn={full:"1.5.5",major:1,minor:5,dot:5,codeName:"material-conspiration"};he.expando="ng339";var yn=he.cache={},vn=1;he._data=function(e){return this.cache[e[this.expando]]||{}};var bn=/([\:\-\_]+(.))/g,$n=/^moz([A-Z])/,wn={mouseleave:"mouseout",mouseenter:"mouseover"},Cn=t("jqLite"),Sn=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Pn=/<|&#?\w+;/,Dn=/<([\w:-]+)/,kn=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,In={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};In.optgroup=In.option,In.tbody=In.tfoot=In.colgroup=In.caption=In.thead,In.th=In.td;var On=e.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},Tn=he.prototype={ready:function(t){function i(){n||(n=!0,t())}var n=!1;"complete"===e.document.readyState?e.setTimeout(i):(this.on("DOMContentLoaded",i),he(e).on("load",i))},toString:function(){var e=[];return n(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Vi(0<=e?this[e]:this[this.length+e])},length:0,push:Zi,sort:[].sort,splice:[].splice},An={};n("multiple selected checked disabled readOnly required open".split(" "),function(e){An[Ki(e)]=e});var _n={};n("input select option textarea button form details".split(" "),function(e){_n[e]=!0});var En={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};n({data:$e,removeData:ve,hasData:function(e){for(var t in yn[e.ng339])return!0;return!1},cleanData:function(e){for(var t=0,i=e.length;t<i;t++)ve(e[t])}},function(e,t){he[t]=e}),n({data:$e,inheritedData:ke,scope:function(e){return Vi.data(e,"$scope")||ke(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Vi.data(e,"$isolateScope")||Vi.data(e,"$isolateScopeNoTemplate")},controller:De,injector:function(e){return ke(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:we,css:function(e,t,i){return t=ue(t),y(i)?void(e.style[t]=i):e.style[t]},attr:function(e,t,i){var n=e.nodeType;if(n!==gn&&2!==n&&8!==n)if(n=Ki(t),An[n]){if(!y(i))return e[t]||(e.attributes.getNamedItem(t)||p).specified?n:void 0;i?(e[t]=!0,e.setAttribute(t,n)):(e[t]=!1,e.removeAttribute(n))}else if(y(i))e.setAttribute(t,i);else if(e.getAttribute)return e=e.getAttribute(t,2),null===e?void 0:e},prop:function(e,t,i){return y(i)?void(e[t]=i):e[t]},text:function(){function e(e,t){if(m(t)){var i=e.nodeType;return 1===i||i===gn?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(m(t)){if(e.multiple&&"select"===_(e)){var i=[];return n(e.options,function(e){e.selected&&i.push(e.value||e.text)}),0===i.length?null:i}return e.value}e.value=t},html:function(e,t){return m(t)?e.innerHTML:(me(e,!0),void(e.innerHTML=t))},empty:Ie},function(e,t){he.prototype[t]=function(t,i){var n,r,a=this.length;if(e!==Ie&&m(2==e.length&&e!==we&&e!==De?t:i)){if(v(t)){for(n=0;n<a;n++)if(e===$e)e(this[n],t);else for(r in t)e(this[n],r,t[r]);return this}for(n=e.$dv,a=m(n)?Math.min(a,1):a,r=0;r<a;r++){var o=e(this[r],t,i);n=n?n+o:o}return n}for(n=0;n<a;n++)e(this[n],t,i);return this}}),n({removeData:ve,on:function(e,t,i,n){if(y(n))throw Cn("onargs");if(de(e)){n=be(e,!0);var r=n.events,a=n.handle;a||(a=n.handle=_e(e,r)),n=0<=t.indexOf(" ")?t.split(" "):[t];for(var o=n.length,s=function(t,n,o){var s=r[t];s||(s=r[t]=[],s.specialHandlerWrapper=n,"$destroy"===t||o||e.addEventListener(t,a,!1)),s.push(i)};o--;)t=n[o],wn[t]?(s(wn[t],xe),s(t,void 0,!0)):s(t)}},off:ye,one:function(e,t,i){e=Vi(e),e.on(t,function n(){e.off(t,i),e.off(t,n)}),e.on(t,i)},replaceWith:function(e,t){var i,r=e.parentNode;me(e),n(new he(t),function(t){i?r.insertBefore(t,i.nextSibling):r.replaceChild(t,e),i=t})},children:function(e){var t=[];return n(e.childNodes,function(e){1===e.nodeType&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var i=e.nodeType;if(1===i||11===i){t=new he(t);for(var i=0,n=t.length;i<n;i++)e.appendChild(t[i])}},prepend:function(e,t){if(1===e.nodeType){var i=e.firstChild;n(new he(t),function(t){e.insertBefore(t,i)})}},wrap:function(e,t){fe(e,Vi(t).eq(0).clone()[0])},remove:Oe,detach:function(e){Oe(e,!0)},after:function(e,t){var i=e,n=e.parentNode;t=new he(t);for(var r=0,a=t.length;r<a;r++){var o=t[r];n.insertBefore(o,i.nextSibling),i=o}},addClass:Se,removeClass:Ce,toggleClass:function(e,t,i){t&&n(t.split(" "),function(t){var n=i;m(n)&&(n=!we(e,t)),(n?Se:Ce)(e,t)})},parent:function(e){return(e=e.parentNode)&&11!==e.nodeType?e:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:ge,triggerHandler:function(e,t,i){var r,a,o=t.type||t,s=be(e);(s=(s=s&&s.events)&&s[o])&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:p,type:o,target:e},t.type&&(r=l(r,t)),t=F(s),a=i?[r].concat(i):[r],n(t,function(t){r.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){he.prototype[t]=function(t,i,n){for(var r,a=0,o=this.length;a<o;a++)m(r)?(r=e(this[a],t,i,n),y(r)&&(r=Vi(r))):Pe(r,e(this[a],t,i,n));return y(r)?r:this},he.prototype.bind=he.prototype.on,he.prototype.unbind=he.prototype.off}),je.prototype={put:function(e,t){this[Me(e,this.nextUid)]=t},get:function(e){return this[Me(e,this.nextUid)]},remove:function(e){var t=this[e=Me(e,this.nextUid)];return delete this[e],t}};var xn=[function(){this.$get=[function(){return je}]}],Fn=/^([^\(]+?)=>/,Mn=/^[^\(]*\(\s*([^\)]*)\)/m,jn=/,/,Ln=/^\s*(_?)(\S+?)\1\s*$/,Bn=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Rn=t("$injector");Re.$$annotate=function(e,t,i){var r;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw $(i)&&i||(i=e.name||Be(e)),Rn("strictdi",i);t=Le(e),n(t[1].split(jn),function(e){e.replace(Ln,function(e,t,i){r.push(i)})})}e.$inject=r}}else an(e)?(t=e.length-1,ne(e[t],"fn"),r=e.slice(0,t)):ne(e,"fn",!0);return r};var Nn=t("$animate"),Un=function(){this.$get=p},Gn=function(){var e=new je,t=[];this.$get=["$$AnimateRunner","$rootScope",function(i,r){function a(e,t,i){var r=!1;return t&&(t=$(t)?t.split(" "):an(t)?t:[],n(t,function(t){t&&(r=!0,e[t]=i)})),r}function o(){n(t,function(t){var i=e.get(t);if(i){var r=Ge(t.attr("class")),a="",o="";n(i,function(e,t){e!==!!r[t]&&(e?a+=(a.length?" ":"")+t:o+=(o.length?" ":"")+t)}),n(t,function(e){a&&Se(e,a),o&&Ce(e,o)}),e.remove(t)}}),t.length=0}return{enabled:p,on:p,off:p,pin:p,push:function(n,s,l,c){return c&&c(),l=l||{},l.from&&n.css(l.from),l.to&&n.css(l.to),(l.addClass||l.removeClass)&&(s=l.addClass,c=l.removeClass,l=e.get(n)||{},s=a(l,s,!0),c=a(l,c,!1),(s||c)&&(e.put(n,l),t.push(n),1===t.length&&r.$$postDigest(o))),n=new i,n.complete(),n}}}]},Vn=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(i,n){if(i&&"."!==i.charAt(0))throw Nn("notcsel",i);var r=i+"-animation";t.$$registeredAnimations[i.substr(1)]=r,e.factory(r,n)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null)&&/(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString()))throw Nn("nongcls","ng-animate");return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,i){if(i){var n;e:{for(n=0;n<i.length;n++){var r=i[n];if(1===r.nodeType){n=r;break e}}n=void 0}!n||n.parentNode||n.previousElementSibling||(i=null)}i?i.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(i,n,r,a){return n=n&&Vi(n),r=r&&Vi(r),n=n||r.parent(),t(i,n,r),e.push(i,"enter",Ve(a))},move:function(i,n,r,a){return n=n&&Vi(n),r=r&&Vi(r),n=n||r.parent(),t(i,n,r),e.push(i,"move",Ve(a))},leave:function(t,i){return e.push(t,"leave",Ve(i),function(){t.remove()})},addClass:function(t,i,n){return n=Ve(n),n.addClass=Ue(n.addclass,i),e.push(t,"addClass",n)},removeClass:function(t,i,n){return n=Ve(n),n.removeClass=Ue(n.removeClass,i),e.push(t,"removeClass",n)},setClass:function(t,i,n,r){return r=Ve(r),r.addClass=Ue(r.addClass,i),r.removeClass=Ue(r.removeClass,n),e.push(t,"setClass",r)},animate:function(t,i,n,r,a){return a=Ve(a),a.from=a.from?l(a.from,i):i,a.to=a.to?l(a.to,n):n,a.tempClasses=Ue(a.tempClasses,r||"ng-inline-animate"),e.push(t,"animate",a)}}}]}],Wn=function(){this.$get=["$$rAF",function(e){function t(t){i.push(t),1<i.length||e(function(){for(var e=0;e<i.length;e++)i[e]();i=[]})}var i=[];return function(){var e=!1;return t(function(){e=!0}),function(i){e?i():t(i)}}}]},qn=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(e,t,i,r,a){function o(e){this.setHost(e);var t=i();this._doneCallbacks=[],this._tick=function(e){var i=r[0];i&&i.hidden?a(e,0,!1):t(e)},this._state=0}return o.chain=function(e,t){function i(){n===e.length?t(!0):e[n](function(e){!1===e?t(!1):(n++,i())})}var n=0;i()},o.all=function(e,t){function i(i){a=a&&i,++r===e.length&&t(a)}var r=0,a=!0;n(e,function(e){e.done(i)})},o.prototype={setHost:function(e){this.host=e||{}},done:function(e){2===this._state?e():this._doneCallbacks.push(e)},progress:p,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,i){t.done(function(t){!1===t?i():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},catch:function(e){return this.getPromise().catch(e)},finally:function(e){return this.getPromise().finally(e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;0===t._state&&(t._state=1,t._tick(function(){t._resolve(e)}))},_resolve:function(e){2!==this._state&&(n(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=2)}},o}]},Hn=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,i){return function(t,n){function r(){return e(function(){a.addClass&&(t.addClass(a.addClass),a.addClass=null),a.removeClass&&(t.removeClass(a.removeClass),a.removeClass=null),a.to&&(t.css(a.to),a.to=null),o||s.complete(),o=!0}),s}var a=n||{};a.$$prepared||(a=x(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(t.css(a.from),a.from=null);var o,s=new i;return{start:r,end:r}}}]},zn=t("$compile"),Kn=new function(){};Ke.$inject=["$provide","$$sanitizeUriProvider"],Qe.prototype.isFirstChange=function(){return this.previousValue===Kn};var Qn=/^((?:x|data)[\:\-_])/i,Yn=t("$controller"),Jn=/^(\S+)(\s+as\s+([\w$]+))?$/,Zn=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof Vi&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},Xn="application/json",er={"Content-Type":Xn+";charset=utf-8"},tr=/^\[|^\{(?!\{)/,ir={"[":/]$/,"{":/}$/},nr=/^\)\]\}',?\n/,rr=t("$http"),ar=function(e){return function(){throw rr("legacy",e)}},or=nn.$interpolateMinErr=t("$interpolate");or.throwNoconcat=function(e){throw or("noconcat",e)},or.interr=function(e,t){return or("interr",e,t.toString())};var sr=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,lr={http:80,https:443,ftp:21},cr=t("$location"),ur={$$html5:!1,$$replace:!1,absUrl:Dt("$$absUrl"),url:function(e){if(m(e))return this.$$url;var t=sr.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Dt("$$protocol"),host:Dt("$$host"),port:Dt("$$port"),path:kt("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if($(e)||w(e))e=e.toString(),this.$$search=q(e);else{if(!v(e))throw cr("isrcharg");e=x(e,{}),n(e,function(t,i){null==t&&delete e[i]}),this.$$search=e}break;default:m(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:kt("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};n([Pt,St,Ct],function(e){e.prototype=Object.create(ur),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Ct||!this.$$html5)throw cr("nostate");return this.$$state=m(t)?null:t,this}});var dr=t("$parse"),pr=Function.prototype.call,fr=Function.prototype.apply,hr=Function.prototype.bind,gr=se();n("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){gr[e]=!0});var mr={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},yr=function(e){this.options=e};yr.prototype={constructor:yr,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;)if(e=this.text.charAt(this.index),'"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var t=e+this.peek(),i=t+this.peek(2),n=gr[t],r=gr[i];gr[e]||n||r?(e=r?i:n?t:e,this.tokens.push({index:this.index,text:e,operator:!0}),this.index+=e.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){return e=e||1,this.index+e<this.text.length&&this.text.charAt(this.index+e)},isNumber:function(e){return"0"<=e&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"\t"===e||"\n"===e||"\v"===e||" "===e},isIdentifierStart:function(e){return this.options.isIdentifierStart?this.options.isIdentifierStart(e,this.codePointAt(e)):this.isValidIdentifierStart(e)},isValidIdentifierStart:function(e){return"a"<=e&&"z">=e||"A"<=e&&"Z">=e||"_"===e||"$"===e},isIdentifierContinue:function(e){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(e,this.codePointAt(e)):this.isValidIdentifierContinue(e)},isValidIdentifierContinue:function(e,t){return this.isValidIdentifierStart(e,t)||this.isNumber(e)},codePointAt:function(e){return 1===e.length?e.charCodeAt(0):(e.charCodeAt(0)<<10)+e.charCodeAt(1)-56613888},peekMultichar:function(){var e=this.text.charAt(this.index),t=this.peek();if(!t)return e;var i=e.charCodeAt(0),n=t.charCodeAt(0);return 55296<=i&&56319>=i&&56320<=n&&57343>=n?e+t:e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,i){throw i=i||this.index,t=y(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,i)+"]":" "+i,dr("lexerr",e,t,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var i=Ki(this.text.charAt(this.index));if("."==i||this.isNumber(i))e+=i;else{var n=this.peek();if("e"==i&&this.isExpOperator(n))e+=i;else if(this.isExpOperator(i)&&n&&this.isNumber(n)&&"e"==e.charAt(e.length-1))e+=i;else{if(!this.isExpOperator(i)||n&&this.isNumber(n)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){var e=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var t=this.peekMultichar();if(!this.isIdentifierContinue(t))break;this.index+=t.length}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var i="",n=e,r=!1;this.index<this.text.length;){var a=this.text.charAt(this.index),n=n+a;if(r)"u"===a?(r=this.text.substring(this.index+1,this.index+5),r.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+r+"]"),this.index+=4,i+=String.fromCharCode(parseInt(r,16))):i+=mr[a]||a,r=!1;else if("\\"===a)r=!0;else{if(a===e)return this.index++,void this.tokens.push({index:t,text:n,constant:!0,value:i});i+=a}this.index++}this.throwError("Unterminated quote",t)}};var vr=function(e,t){this.lexer=e,this.options=t};vr.Program="Program",vr.ExpressionStatement="ExpressionStatement",vr.AssignmentExpression="AssignmentExpression",vr.ConditionalExpression="ConditionalExpression",vr.LogicalExpression="LogicalExpression",vr.BinaryExpression="BinaryExpression",vr.UnaryExpression="UnaryExpression",vr.CallExpression="CallExpression",vr.MemberExpression="MemberExpression",vr.Identifier="Identifier",vr.Literal="Literal",vr.ArrayExpression="ArrayExpression",vr.Property="Property",vr.ObjectExpression="ObjectExpression",vr.ThisExpression="ThisExpression",vr.LocalsExpression="LocalsExpression",vr.NGValueParameter="NGValueParameter",vr.prototype={ast:function(e){return this.text=e,this.tokens=this.lexer.lex(e),e=this.program(),0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var e=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:vr.Program,body:e}},expressionStatement:function(){return{type:vr.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e=this.expression();this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:vr.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,i=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:vr.ConditionalExpression,test:i,alternate:e,consequent:t}):i},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:vr.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:vr.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:vr.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:vr.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:vr.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:vr.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:vr.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?e=x(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?e={type:vr.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:vr.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:vr.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:vr.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){e=[e];for(var t={type:vr.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return t},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.expression());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:vr.Identifier,name:e.text}},constant:function(){return{type:vr.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:vr.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:vr.Property,kind:"init"},this.peek().constant?e.key=this.constant():this.peek().identifier?e.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),e.value=this.expression(),t.push(e)}while(this.expect(","));return this.consume("}"),{type:vr.ObjectExpression,properties:t}},throwError:function(e,t){throw dr("syntax",t.text,e,t.index+1,this.text,this.text.substring(t.index));
},consume:function(e){if(0===this.tokens.length)throw dr("ueoe",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw dr("ueoe",this.text);return this.tokens[0]},peek:function(e,t,i,n){return this.peekAhead(0,e,t,i,n)},peekAhead:function(e,t,i,n,r){if(this.tokens.length>e){e=this.tokens[e];var a=e.text;if(a===t||a===i||a===n||a===r||!(t||i||n||r))return e}return!1},expect:function(e,t,i,n){return!!(e=this.peek(e,t,i,n))&&(this.tokens.shift(),e)},selfReferential:{this:{type:vr.ThisExpression},$locals:{type:vr.LocalsExpression}}},Ut.prototype={compile:function(e,t){var i=this,r=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},jt(r,i.$filter);var a,o="";return this.stage="assign",(a=Rt(r))&&(this.state.computing="assign",o=this.nextId(),this.recurse(a,o),this.return_(o),o="fn.assign="+this.generateFunction("assign","s,v,l")),a=Lt(r.body),i.stage="inputs",n(a,function(e,t){var n="fn"+t;i.state[n]={vars:[],body:[],own:{}},i.state.computing=n;var r=i.nextId();i.recurse(e,r),i.return_(r),i.state.inputs.push(n),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(r),o='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+o+this.watchFns()+"return fn;",o=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",o)(this.$filter,Tt,_t,Et,At,xt,Ft,Mt,e),this.state=this.stage=void 0,o.literal=Nt(r),o.constant=r.constant,o},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,i=this;return n(t,function(t){e.push("var "+t+"="+i.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return n(this.state.filters,function(i,n){e.push(i+"=$filter("+t.escape(n)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,i,r,a,o){var s,l,c,u,d=this;if(r=r||p,!o&&y(e.watchId))t=t||this.nextId(),this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,i,r,a,!0));else switch(e.type){case vr.Program:n(e.body,function(t,i){d.recurse(t.expression,void 0,void 0,function(e){l=e}),i!==e.body.length-1?d.current().body.push(l,";"):d.return_(l)});break;case vr.Literal:u=this.escape(e.value),this.assign(t,u),r(u);break;case vr.UnaryExpression:this.recurse(e.argument,void 0,void 0,function(e){l=e}),u=e.operator+"("+this.ifDefined(l,0)+")",this.assign(t,u),r(u);break;case vr.BinaryExpression:this.recurse(e.left,void 0,void 0,function(e){s=e}),this.recurse(e.right,void 0,void 0,function(e){l=e}),u="+"===e.operator?this.plus(s,l):"-"===e.operator?this.ifDefined(s,0)+e.operator+this.ifDefined(l,0):"("+s+")"+e.operator+"("+l+")",this.assign(t,u),r(u);break;case vr.LogicalExpression:t=t||this.nextId(),d.recurse(e.left,t),d.if_("&&"===e.operator?t:d.not(t),d.lazyRecurse(e.right,t)),r(t);break;case vr.ConditionalExpression:t=t||this.nextId(),d.recurse(e.test,t),d.if_(t,d.lazyRecurse(e.alternate,t),d.lazyRecurse(e.consequent,t)),r(t);break;case vr.Identifier:t=t||this.nextId(),i&&(i.context="inputs"===d.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),i.computed=!1,i.name=e.name),Tt(e.name),d.if_("inputs"===d.stage||d.not(d.getHasOwnProperty("l",e.name)),function(){d.if_("inputs"===d.stage||"s",function(){a&&1!==a&&d.if_(d.not(d.nonComputedMember("s",e.name)),d.lazyAssign(d.nonComputedMember("s",e.name),"{}")),d.assign(t,d.nonComputedMember("s",e.name))})},t&&d.lazyAssign(t,d.nonComputedMember("l",e.name))),(d.state.expensiveChecks||Vt(e.name))&&d.addEnsureSafeObject(t),r(t);break;case vr.MemberExpression:s=i&&(i.context=this.nextId())||this.nextId(),t=t||this.nextId(),d.recurse(e.object,s,void 0,function(){d.if_(d.notNull(s),function(){a&&1!==a&&d.addEnsureSafeAssignContext(s),e.computed?(l=d.nextId(),d.recurse(e.property,l),d.getStringValue(l),d.addEnsureSafeMemberName(l),a&&1!==a&&d.if_(d.not(d.computedMember(s,l)),d.lazyAssign(d.computedMember(s,l),"{}")),u=d.ensureSafeObject(d.computedMember(s,l)),d.assign(t,u),i&&(i.computed=!0,i.name=l)):(Tt(e.property.name),a&&1!==a&&d.if_(d.not(d.nonComputedMember(s,e.property.name)),d.lazyAssign(d.nonComputedMember(s,e.property.name),"{}")),u=d.nonComputedMember(s,e.property.name),(d.state.expensiveChecks||Vt(e.property.name))&&(u=d.ensureSafeObject(u)),d.assign(t,u),i&&(i.computed=!1,i.name=e.property.name))},function(){d.assign(t,"undefined")}),r(t)},!!a);break;case vr.CallExpression:t=t||this.nextId(),e.filter?(l=d.filter(e.callee.name),c=[],n(e.arguments,function(e){var t=d.nextId();d.recurse(e,t),c.push(t)}),u=l+"("+c.join(",")+")",d.assign(t,u),r(t)):(l=d.nextId(),s={},c=[],d.recurse(e.callee,l,s,function(){d.if_(d.notNull(l),function(){d.addEnsureSafeFunction(l),n(e.arguments,function(e){d.recurse(e,d.nextId(),void 0,function(e){c.push(d.ensureSafeObject(e))})}),s.name?(d.state.expensiveChecks||d.addEnsureSafeObject(s.context),u=d.member(s.context,s.name,s.computed)+"("+c.join(",")+")"):u=l+"("+c.join(",")+")",u=d.ensureSafeObject(u),d.assign(t,u)},function(){d.assign(t,"undefined")}),r(t)}));break;case vr.AssignmentExpression:if(l=this.nextId(),s={},!Bt(e.left))throw dr("lval");this.recurse(e.left,void 0,s,function(){d.if_(d.notNull(s.context),function(){d.recurse(e.right,l),d.addEnsureSafeObject(d.member(s.context,s.name,s.computed)),d.addEnsureSafeAssignContext(s.context),u=d.member(s.context,s.name,s.computed)+e.operator+l,d.assign(t,u),r(t||u)})},1);break;case vr.ArrayExpression:c=[],n(e.elements,function(e){d.recurse(e,d.nextId(),void 0,function(e){c.push(e)})}),u="["+c.join(",")+"]",this.assign(t,u),r(u);break;case vr.ObjectExpression:c=[],n(e.properties,function(e){d.recurse(e.value,d.nextId(),void 0,function(t){c.push(d.escape(e.key.type===vr.Identifier?e.key.name:""+e.key.value)+":"+t)})}),u="{"+c.join(",")+"}",this.assign(t,u),r(u);break;case vr.ThisExpression:this.assign(t,"s"),r("s");break;case vr.LocalsExpression:this.assign(t,"l"),r("l");break;case vr.NGValueParameter:this.assign(t,"v"),r("v")}},getHasOwnProperty:function(e,t){var i=e+"."+t,n=this.current().own;return n.hasOwnProperty(i)||(n[i]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),n[i]},assign:function(e,t){if(e)return this.current().body.push(e,"=",t,";"),e},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,i){if(!0===e)t();else{var n=this.current().body;n.push("if(",e,"){"),t(),n.push("}"),i&&(n.push("else{"),i(),n.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){var i=/[^$_a-zA-Z0-9]/g;return/[$_a-zA-Z][$_a-zA-Z0-9]*/.test(t)?e+"."+t:e+'["'+t.replace(i,this.stringEscapeFn)+'"]'},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,i){return i?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},addEnsureSafeAssignContext:function(e){this.current().body.push(this.ensureSafeAssignContext(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},getStringValue:function(e){this.assign(e,"getStringValue("+e+")")},ensureSafeAssignContext:function(e){return"ensureSafeAssignContext("+e+",text)"},lazyRecurse:function(e,t,i,n,r,a){var o=this;return function(){o.recurse(e,t,i,n,r,a)}},lazyAssign:function(e,t){var i=this;return function(){i.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if($(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(w(e))return e.toString();if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw dr("esc")},nextId:function(e,t){var i="v"+this.state.nextId++;return e||this.current().vars.push(i+(t?"="+t:"")),i},current:function(){return this.state[this.state.computing]}},Gt.prototype={compile:function(e,t){var i=this,r=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,jt(r,i.$filter);var a,o;(a=Rt(r))&&(o=this.recurse(a)),a=Lt(r.body);var s;a&&(s=[],n(a,function(e,t){var n=i.recurse(e);e.input=n,s.push(n),e.watchId=t}));var l=[];return n(r.body,function(e){l.push(i.recurse(e.expression))}),a=0===r.body.length?p:1===r.body.length?l[0]:function(e,t){var i;return n(l,function(n){i=n(e,t)}),i},o&&(a.assign=function(e,t,i){return o(e,i,t)}),s&&(a.inputs=s),a.literal=Nt(r),a.constant=r.constant,a},recurse:function(e,t,i){var r,a,o,s=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case vr.Literal:return this.value(e.value,t);case vr.UnaryExpression:return a=this.recurse(e.argument),this["unary"+e.operator](a,t);case vr.BinaryExpression:return r=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](r,a,t);case vr.LogicalExpression:return r=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](r,a,t);case vr.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case vr.Identifier:return Tt(e.name,s.expression),s.identifier(e.name,s.expensiveChecks||Vt(e.name),t,i,s.expression);case vr.MemberExpression:return r=this.recurse(e.object,!1,!!i),e.computed||(Tt(e.property.name,s.expression),a=e.property.name),e.computed&&(a=this.recurse(e.property)),e.computed?this.computedMember(r,a,t,i,s.expression):this.nonComputedMember(r,a,s.expensiveChecks,t,i,s.expression);case vr.CallExpression:return o=[],n(e.arguments,function(e){o.push(s.recurse(e))}),e.filter&&(a=this.$filter(e.callee.name)),e.filter||(a=this.recurse(e.callee,!0)),e.filter?function(e,i,n,r){for(var s=[],l=0;l<o.length;++l)s.push(o[l](e,i,n,r));return e=a.apply(void 0,s,r),t?{context:void 0,name:void 0,value:e}:e}:function(e,i,n,r){var l,c=a(e,i,n,r);if(null!=c.value){_t(c.context,s.expression),Et(c.value,s.expression),l=[];for(var u=0;u<o.length;++u)l.push(_t(o[u](e,i,n,r),s.expression));l=_t(c.value.apply(c.context,l),s.expression)}return t?{value:l}:l};case vr.AssignmentExpression:return r=this.recurse(e.left,!0,1),a=this.recurse(e.right),function(e,i,n,o){var l=r(e,i,n,o);return e=a(e,i,n,o),_t(l.value,s.expression),xt(l.context),l.context[l.name]=e,t?{value:e}:e};case vr.ArrayExpression:return o=[],n(e.elements,function(e){o.push(s.recurse(e))}),function(e,i,n,r){for(var a=[],s=0;s<o.length;++s)a.push(o[s](e,i,n,r));return t?{value:a}:a};case vr.ObjectExpression:return o=[],n(e.properties,function(e){o.push({key:e.key.type===vr.Identifier?e.key.name:""+e.key.value,value:s.recurse(e.value)})}),function(e,i,n,r){for(var a={},s=0;s<o.length;++s)a[o[s].key]=o[s].value(e,i,n,r);return t?{value:a}:a};case vr.ThisExpression:return function(e){return t?{value:e}:e};case vr.LocalsExpression:return function(e,i){return t?{value:i}:i};case vr.NGValueParameter:return function(e,i,n){return t?{value:n}:n}}},"unary+":function(e,t){return function(i,n,r,a){return i=e(i,n,r,a),i=y(i)?+i:0,t?{value:i}:i}},"unary-":function(e,t){return function(i,n,r,a){return i=e(i,n,r,a),i=y(i)?-i:0,t?{value:i}:i}},"unary!":function(e,t){return function(i,n,r,a){return i=!e(i,n,r,a),t?{value:i}:i}},"binary+":function(e,t,i){return function(n,r,a,o){var s=e(n,r,a,o);return n=t(n,r,a,o),s=Mt(s,n),i?{value:s}:s}},"binary-":function(e,t,i){return function(n,r,a,o){var s=e(n,r,a,o);return n=t(n,r,a,o),s=(y(s)?s:0)-(y(n)?n:0),i?{value:s}:s}},"binary*":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)*t(n,r,a,o),i?{value:n}:n}},"binary/":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)/t(n,r,a,o),i?{value:n}:n}},"binary%":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)%t(n,r,a,o),i?{value:n}:n}},"binary===":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)===t(n,r,a,o),i?{value:n}:n}},"binary!==":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)!==t(n,r,a,o),i?{value:n}:n}},"binary==":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)==t(n,r,a,o),i?{value:n}:n}},"binary!=":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)!=t(n,r,a,o),i?{value:n}:n}},"binary<":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)<t(n,r,a,o),i?{value:n}:n}},"binary>":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)>t(n,r,a,o),i?{value:n}:n}},"binary<=":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)<=t(n,r,a,o),i?{value:n}:n}},"binary>=":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)>=t(n,r,a,o),i?{value:n}:n}},"binary&&":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)&&t(n,r,a,o),i?{value:n}:n}},"binary||":function(e,t,i){return function(n,r,a,o){return n=e(n,r,a,o)||t(n,r,a,o),i?{value:n}:n}},"ternary?:":function(e,t,i,n){return function(r,a,o,s){return r=e(r,a,o,s)?t(r,a,o,s):i(r,a,o,s),n?{value:r}:r}},value:function(e,t){return function(){return t?{context:void 0,name:void 0,value:e}:e}},identifier:function(e,t,i,n,r){return function(a,o,s,l){return a=o&&e in o?o:a,n&&1!==n&&a&&!a[e]&&(a[e]={}),o=a?a[e]:void 0,t&&_t(o,r),i?{context:a,name:e,value:o}:o}},computedMember:function(e,t,i,n,r){return function(a,o,s,l){var c,u,d=e(a,o,s,l);return null!=d&&(c=t(a,o,s,l),c+="",Tt(c,r),n&&1!==n&&(xt(d),d&&!d[c]&&(d[c]={})),u=d[c],_t(u,r)),i?{context:d,name:c,value:u}:u}},nonComputedMember:function(e,t,i,n,r,a){return function(o,s,l,c){return o=e(o,s,l,c),r&&1!==r&&(xt(o),o&&!o[t]&&(o[t]={})),s=null!=o?o[t]:void 0,(i||Vt(t))&&_t(s,a),n?{context:o,name:t,value:s}:s}},inputs:function(e,t){return function(i,n,r,a){return a?a[t]:e(i,n,r)}}};var br=function(e,t,i){this.lexer=e,this.$filter=t,this.options=i,this.ast=new vr(e,i),this.astCompiler=i.csp?new Gt(this.ast,t):new Ut(this.ast,t)};br.prototype={constructor:br,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var $r=Object.prototype.valueOf,wr=t("$sce"),Cr={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Sr=t("$compile"),Pr=e.document.createElement("a"),Dr=oi(e.location.href);ci.$inject=["$document"],di.$inject=["$provide"];var kr=22,Ir=".",Or="0";mi.$inject=["$locale"],yi.$inject=["$locale"];var Tr={yyyy:Ci("FullYear",4,0,!1,!0),yy:Ci("FullYear",2,0,!0,!0),y:Ci("FullYear",1,0,!1,!0),MMMM:Si("Month"),MMM:Si("Month",!0),MM:Ci("Month",2,1),M:Ci("Month",1,1),LLLL:Si("Month",!1,!0),dd:Ci("Date",2),d:Ci("Date",1),HH:Ci("Hours",2),H:Ci("Hours",1),hh:Ci("Hours",2,-12),h:Ci("Hours",1,-12),mm:Ci("Minutes",2),m:Ci("Minutes",1),ss:Ci("Seconds",2),s:Ci("Seconds",1),sss:Ci("Milliseconds",3),EEEE:Si("Day"),EEE:Si("Day",!0),a:function(e,t){return 12>e.getHours()?t.AMPMS[0]:t.AMPMS[1]},Z:function(e,t,i){return e=-1*i,e=(0<=e?"+":"")+(wi(Math[0<e?"floor":"ceil"](e/60),2)+wi(Math.abs(e%60),2))},ww:Di(2),w:Di(1),G:ki,GG:ki,GGG:ki,GGGG:function(e,t){return 0>=e.getFullYear()?t.ERANAMES[0]:t.ERANAMES[1]}},Ar=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,_r=/^\-?\d+$/;Ii.$inject=["$locale"];var Er=h(Ki),xr=h(Qi);Ai.$inject=["$parse"];var Fr=h({restrict:"E",compile:function(e,t){if(!t.href&&!t.xlinkHref)return function(e,t){if("a"===t[0].nodeName.toLowerCase()){var i="[object SVGAnimatedString]"===Xi.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(i)||e.preventDefault()})}}}}),Mr={};n(An,function(e,t){function i(e,i,r){e.$watch(r[n],function(e){r.$set(t,!!e)})}if("multiple"!=e){var n=Ye("ng-"+t),r=i;"checked"===e&&(r=function(e,t,r){r.ngModel!==r[n]&&i(e,t,r)}),Mr[n]=function(){return{restrict:"A",priority:100,link:r}}}}),n(En,function(e,t){Mr[t]=function(){return{priority:100,link:function(e,i,n){return"ngPattern"===t&&"/"==n.ngPattern.charAt(0)&&(i=n.ngPattern.match(Hi))?void n.$set("ngPattern",new RegExp(i[1],i[2])):void e.$watch(n[t],function(e){n.$set(t,e)})}}}}),n(["src","srcset","href"],function(e){var t=Ye("ng-"+e);Mr[t]=function(){return{priority:99,link:function(i,n,r){var a=e,o=e;"href"===e&&"[object SVGAnimatedString]"===Xi.call(n.prop("href"))&&(o="xlinkHref",r.$attr[o]="xlink:href",a=null),r.$observe(t,function(t){t?(r.$set(o,t),Gi&&a&&n.prop(a,r[o])):"href"===e&&r.$set(o,null)})}}}});var jr={$addControl:p,$$renameControl:function(e,t){e.$name=t},$removeControl:p,$setValidity:p,$setDirty:p,$setPristine:p,$setSubmitted:p};Ei.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Lr=function(e){return["$timeout","$parse",function(t,i){function n(e){return""===e?i('this[""]').assign:i(e).assign||p}return{name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:Ei,compile:function(i,r){i.addClass(va).addClass(ma);var a=r.name?"name":!(!e||!r.ngForm)&&"ngForm";return{pre:function(e,i,r,o){var s=o[0];if(!("action"in r)){var c=function(t){e.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),t.preventDefault()};i[0].addEventListener("submit",c,!1),i.on("$destroy",function(){t(function(){i[0].removeEventListener("submit",c,!1)},0,!1)})}(o[1]||s.$$parentForm).$addControl(s);var u=a?n(s.$name):p;a&&(u(e,s),r.$observe(a,function(t){s.$name!==t&&(u(e,void 0),s.$$parentForm.$$renameControl(s,t),(u=n(s.$name))(e,s))})),i.on("$destroy",function(){s.$$parentForm.$removeControl(s),u(e,void 0),l(s,jr)})}}}}}]},Br=Lr(),Rr=Lr(!0),Nr=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,Ur=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Gr=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Vr=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Wr=/^(\d{4,})-(\d{2})-(\d{2})$/,qr=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Hr=/^(\d{4,})-W(\d\d)$/,zr=/^(\d{4,})-(\d\d)$/,Kr=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Qr=se();n(["date","datetime-local","month","time","week"],function(e){Qr[e]=!0});var Yr={text:function(e,t,i,n,r,a){Fi(e,t,i,n,r,a),xi(n)},date:ji("date",Wr,Mi(Wr,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":ji("datetimelocal",qr,Mi(qr,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:ji("time",Kr,Mi(Kr,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:ji("week",Hr,function(e,t){if(C(e))return e;if($(e)){Hr.lastIndex=0;var i=Hr.exec(e);if(i){var n=+i[1],r=+i[2],a=i=0,o=0,s=0,l=Pi(n),r=7*(r-1);return t&&(i=t.getHours(),a=t.getMinutes(),o=t.getSeconds(),s=t.getMilliseconds()),new Date(n,0,l.getDate()+r,i,a,o,s)}}return NaN},"yyyy-Www"),month:ji("month",zr,Mi(zr,["yyyy","MM"]),"yyyy-MM"),number:function(e,t,i,n,r,a){if(Li(e,t,i,n),Fi(e,t,i,n,r,a),n.$$parserName="number",n.$parsers.push(function(e){return n.$isEmpty(e)?null:Vr.test(e)?parseFloat(e):void 0}),n.$formatters.push(function(e){if(!n.$isEmpty(e)){if(!w(e))throw wa("numfmt",e);e=e.toString()}return e}),y(i.min)||i.ngMin){var o;n.$validators.min=function(e){return n.$isEmpty(e)||m(o)||e>=o},i.$observe("min",function(e){y(e)&&!w(e)&&(e=parseFloat(e,10)),o=w(e)&&!isNaN(e)?e:void 0,n.$validate()})}if(y(i.max)||i.ngMax){var s;n.$validators.max=function(e){return n.$isEmpty(e)||m(s)||e<=s},i.$observe("max",function(e){y(e)&&!w(e)&&(e=parseFloat(e,10)),s=w(e)&&!isNaN(e)?e:void 0,n.$validate()})}},url:function(e,t,i,n,r,a){Fi(e,t,i,n,r,a),xi(n),n.$$parserName="url",n.$validators.url=function(e,t){var i=e||t;return n.$isEmpty(i)||Ur.test(i)}},email:function(e,t,i,n,r,a){Fi(e,t,i,n,r,a),xi(n),n.$$parserName="email",n.$validators.email=function(e,t){var i=e||t;return n.$isEmpty(i)||Gr.test(i)}},radio:function(e,t,i,n){m(i.name)&&t.attr("name",++rn),t.on("click",function(e){t[0].checked&&n.$setViewValue(i.value,e&&e.type)}),n.$render=function(){t[0].checked=i.value==n.$viewValue},i.$observe("value",n.$render)},checkbox:function(e,t,i,n,r,a,o,s){var l=Bi(s,e,"ngTrueValue",i.ngTrueValue,!0),c=Bi(s,e,"ngFalseValue",i.ngFalseValue,!1);t.on("click",function(e){n.$setViewValue(t[0].checked,e&&e.type)}),n.$render=function(){t[0].checked=n.$viewValue},n.$isEmpty=function(e){return!1===e},n.$formatters.push(function(e){return M(e,l)}),n.$parsers.push(function(e){return e?l:c})},hidden:p,button:p,submit:p,reset:p,file:p},Jr=["$browser","$sniffer","$filter","$parse",function(e,t,i,n){return{restrict:"E",require:["?ngModel"],link:{pre:function(r,a,o,s){s[0]&&(Yr[Ki(o.type)]||Yr.text)(r,a,o,s[0],t,e,i,n)}}}}],Zr=/^(true|false|\d+)$/,Xr=function(){return{restrict:"A",priority:100,compile:function(e,t){return Zr.test(t.ngValue)?function(e,t,i){i.$set("value",e.$eval(i.ngValue))}:function(e,t,i){e.$watch(i.ngValue,function(e){i.$set("value",e)})}}}},ea=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,i,n){e.$$addBindingInfo(i,n.ngBind),i=i[0],t.$watch(n.ngBind,function(e){i.textContent=m(e)?"":e})}}}}],ta=["$interpolate","$compile",function(e,t){return{compile:function(i){return t.$$addBindingClass(i),function(i,n,r){i=e(n.attr(r.$attr.ngBindTemplate)),t.$$addBindingInfo(n,i.expressions),n=n[0],r.$observe("ngBindTemplate",function(e){n.textContent=m(e)?"":e})}}}}],ia=["$sce","$parse","$compile",function(e,t,i){return{restrict:"A",compile:function(n,r){var a=t(r.ngBindHtml),o=t(r.ngBindHtml,function(e){return(e||"").toString()});return i.$$addBindingClass(n),function(t,n,r){i.$$addBindingInfo(n,r.ngBindHtml),t.$watch(o,function(){n.html(e.getTrustedHtml(a(t))||"")})}}}}],na=h({restrict:"A",require:"ngModel",link:function(e,t,i,n){n.$viewChangeListeners.push(function(){e.$eval(i.ngChange)})}}),ra=Ri("",!0),aa=Ri("Odd",0),oa=Ri("Even",1),sa=_i({compile:function(e,t){t.$set("ngCloak",void 0),e.removeClass("ng-cloak")}}),la=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],ca={},ua={blur:!0,focus:!0};n("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=Ye("ng-"+e);ca[t]=["$parse","$rootScope",function(i,n){return{restrict:"A",compile:function(r,a){var o=i(a[t],null,!0);return function(t,i){i.on(e,function(i){var r=function(){o(t,{$event:i})};ua[e]&&n.$$phase?t.$evalAsync(r):t.$apply(r)})}}}}]});var da=["$animate","$compile",function(e,t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(i,n,r,a,o){var s,l,c;i.$watch(r.ngIf,function(i){i?l||o(function(i,a){l=a,i[i.length++]=t.$$createComment("end ngIf",r.ngIf),s={clone:i},e.enter(i,n.parent(),n)}):(c&&(c.remove(),c=null),l&&(l.$destroy(),l=null),s&&(c=oe(s.clone),e.leave(c).then(function(){c=null}),s=null))})}}}],pa=["$templateRequest","$anchorScroll","$animate",function(e,t,i){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:nn.noop,compile:function(n,r){var a=r.ngInclude||r.src,o=r.onload||"",s=r.autoscroll;return function(n,r,l,c,u){var d,p,f,h=0,g=function(){p&&(p.remove(),p=null),d&&(d.$destroy(),d=null),f&&(i.leave(f).then(function(){p=null}),p=f,f=null)};n.$watch(a,function(a){var l=function(){!y(s)||s&&!n.$eval(s)||t()},p=++h;a?(e(a,!0).then(function(e){if(!n.$$destroyed&&p===h){var t=n.$new();c.template=e,e=u(t,function(e){g(),i.enter(e,null,r).then(l)}),d=t,f=e,d.$emit("$includeContentLoaded",a),n.$eval(o)}},function(){n.$$destroyed||p!==h||(g(),n.$emit("$includeContentError",a))}),n.$emit("$includeContentRequested",a)):(g(),c.template=null)})}}}}],fa=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(i,n,r,a){Xi.call(n[0]).match(/SVG/)?(n.empty(),t(pe(a.template,e.document).childNodes)(i,function(e){n.append(e)},{futureParentElement:n})):(n.html(a.template),t(n.contents())(i))}}}],ha=_i({priority:450,compile:function(){return{pre:function(e,t,i){e.$eval(i.ngInit)}}}}),ga=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,i,r){var a=t.attr(i.$attr.ngList)||", ",o="false"!==i.ngTrim,s=o?sn(a):a;r.$parsers.push(function(e){if(!m(e)){var t=[];return e&&n(e.split(s),function(e){e&&t.push(o?sn(e):e)}),t}}),r.$formatters.push(function(e){if(an(e))return e.join(a)}),r.$isEmpty=function(e){return!e||!e.length}}}},ma="ng-valid",ya="ng-invalid",va="ng-pristine",ba="ng-dirty",$a="ng-pending",wa=t("ngModel"),Ca=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,i,r,a,o,s,l,c,u){this.$modelValue=this.$viewValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=u(i.name||"",!1)(e),this.$$parentForm=jr;var d,f=a(i.ngModel),h=f.assign,g=f,v=h,b=null,$=this;this.$$setOptions=function(e){if(($.$options=e)&&e.getterSetter){var t=a(i.ngModel+"()"),n=a(i.ngModel+"($$$p)");g=function(e){var i=f(e);return S(i)&&(i=t(e)),i},v=function(e,t){S(f(e))?n(e,{$$$p:t}):h(e,t)}}else if(!f.assign)throw wa("nonassign",i.ngModel,V(r))},this.$render=p,this.$isEmpty=function(e){return m(e)||""===e||null===e||e!==e},this.$$updateEmptyClasses=function(e){$.$isEmpty(e)?(o.removeClass(r,"ng-not-empty"),o.addClass(r,"ng-empty")):(o.removeClass(r,"ng-empty"),o.addClass(r,"ng-not-empty"))};var C=0;Ni({ctrl:this,$element:r,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},$animate:o}),this.$setPristine=function(){$.$dirty=!1,$.$pristine=!0,o.removeClass(r,ba),o.addClass(r,va)},this.$setDirty=function(){$.$dirty=!0,$.$pristine=!1,o.removeClass(r,va),o.addClass(r,ba),$.$$parentForm.$setDirty()},this.$setUntouched=function(){$.$touched=!1,$.$untouched=!0,o.setClass(r,"ng-untouched","ng-touched")},this.$setTouched=function(){$.$touched=!0,$.$untouched=!1,o.setClass(r,"ng-touched","ng-untouched")},this.$rollbackViewValue=function(){s.cancel(b),$.$viewValue=$.$$lastCommittedViewValue,$.$render()},this.$validate=function(){if(!w($.$modelValue)||!isNaN($.$modelValue)){var e=$.$$rawModelValue,t=$.$valid,i=$.$modelValue,n=$.$options&&$.$options.allowInvalid;$.$$runValidators(e,$.$$lastCommittedViewValue,function(r){n||t===r||($.$modelValue=r?e:void 0,$.$modelValue!==i&&$.$$writeModelToScope())})}},this.$$runValidators=function(e,t,i){function r(){var i=!0;return n($.$validators,function(n,r){var a=n(e,t);i=i&&a,o(r,a)}),!!i||(n($.$asyncValidators,function(e,t){o(t,null)}),!1)}function a(){var i=[],r=!0;n($.$asyncValidators,function(n,a){var s=n(e,t);if(!s||!S(s.then))throw wa("nopromise",s);o(a,void 0),i.push(s.then(function(){o(a,!0)},function(){r=!1,o(a,!1)}))}),i.length?c.all(i).then(function(){s(r)},p):s(!0)}function o(e,t){l===C&&$.$setValidity(e,t)}function s(e){l===C&&i(e)}C++;var l=C;(function(){var e=$.$$parserName||"parse";return m(d)?(o(e,null),!0):(d||(n($.$validators,function(e,t){o(t,null)}),n($.$asyncValidators,function(e,t){o(t,null)})),o(e,d),d)})()&&r()?a():s(!1)},this.$commitViewValue=function(){var e=$.$viewValue;s.cancel(b),($.$$lastCommittedViewValue!==e||""===e&&$.$$hasNativeValidators)&&($.$$updateEmptyClasses(e),$.$$lastCommittedViewValue=e,$.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){var t=$.$$lastCommittedViewValue;if(d=!m(t)||void 0)for(var i=0;i<$.$parsers.length;i++)if(t=$.$parsers[i](t),m(t)){d=!1;break}w($.$modelValue)&&isNaN($.$modelValue)&&($.$modelValue=g(e));var n=$.$modelValue,r=$.$options&&$.$options.allowInvalid;$.$$rawModelValue=t,r&&($.$modelValue=t,$.$modelValue!==n&&$.$$writeModelToScope()),$.$$runValidators(t,$.$$lastCommittedViewValue,function(e){r||($.$modelValue=e?t:void 0,$.$modelValue!==n&&$.$$writeModelToScope())})},this.$$writeModelToScope=function(){v(e,$.$modelValue),n($.$viewChangeListeners,function(e){try{e()}catch(e){t(e)}})},this.$setViewValue=function(e,t){$.$viewValue=e,$.$options&&!$.$options.updateOnDefault||$.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var i=0,n=$.$options;n&&y(n.debounce)&&(n=n.debounce,w(n)?i=n:w(n[t])?i=n[t]:w(n.default)&&(i=n.default)),s.cancel(b),i?b=s(function(){$.$commitViewValue()},i):l.$$phase?$.$commitViewValue():e.$apply(function(){$.$commitViewValue()})},e.$watch(function(){var t=g(e);if(t!==$.$modelValue&&($.$modelValue===$.$modelValue||t===t)){$.$modelValue=$.$$rawModelValue=t,d=void 0;for(var i=$.$formatters,n=i.length,r=t;n--;)r=i[n](r);$.$viewValue!==r&&($.$$updateEmptyClasses(r),$.$viewValue=$.$$lastCommittedViewValue=r,$.$render(),$.$$runValidators(t,r,p))}return t})}],Sa=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Ca,priority:1,compile:function(t){return t.addClass(va).addClass("ng-untouched").addClass(ma),{pre:function(e,t,i,n){var r=n[0];t=n[1]||r.$$parentForm,r.$$setOptions(n[2]&&n[2].$options),t.$addControl(r),i.$observe("name",function(e){r.$name!==e&&r.$$parentForm.$$renameControl(r,e)}),e.$on("$destroy",function(){r.$$parentForm.$removeControl(r)})},post:function(t,i,n,r){var a=r[0];a.$options&&a.$options.updateOn&&i.on(a.$options.updateOn,function(e){a.$$debounceViewValueCommit(e&&e.type)}),i.on("blur",function(){a.$touched||(e.$$phase?t.$evalAsync(a.$setTouched):t.$apply(a.$setTouched))})}}}}}],Pa=/(\s+|^)default(\s+|$)/,Da=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var i=this;this.$options=x(e.$eval(t.ngModelOptions)),y(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=sn(this.$options.updateOn.replace(Pa,function(){return i.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},ka=_i({terminal:!0,priority:1e3}),Ia=t("ngOptions"),Oa=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Ta=["$compile","$document","$parse",function(t,r,a){function o(e,t,n){function r(e,t,i,n,r){this.selectValue=e,this.viewValue=t,this.label=i,this.group=n,this.disabled=r}function o(e){var t;if(!c&&i(e))t=e;else{t=[];for(var n in e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n)}return t}var s=e.match(Oa);if(!s)throw Ia("iexp",e,V(t));var l=s[5]||s[7],c=s[6];e=/ as /.test(s[0])&&s[1];var u=s[9];t=a(s[2]?s[1]:l);var d=e&&a(e)||t,p=u&&a(u),f=u?function(e,t){return p(n,t)}:function(e){return Me(e)},h=function(e,t){return f(e,$(e,t))},g=a(s[2]||s[1]),m=a(s[3]||""),y=a(s[4]||""),v=a(s[8]),b={},$=c?function(e,t){return b[c]=t,b[l]=e,b}:function(e){return b[l]=e,b};return{trackBy:u,getTrackByValue:h,getWatchables:a(v,function(e){var t=[];e=e||[];for(var i=o(e),r=i.length,a=0;a<r;a++){var l=e===i?a:i[a],c=e[l],l=$(c,l),c=f(c,l);t.push(c),(s[2]||s[1])&&(c=g(n,l),t.push(c)),s[4]&&(l=y(n,l),t.push(l))}return t}),getOptions:function(){for(var e=[],t={},i=v(n)||[],a=o(i),s=a.length,l=0;l<s;l++){var c=i===a?l:a[l],p=$(i[c],c),b=d(n,p),c=f(b,p),w=g(n,p),C=m(n,p),p=y(n,p),b=new r(c,b,w,C,p);e.push(b),t[c]=b}return{items:e,selectValueMap:t,
getOptionFromViewValue:function(e){return t[h(e)]},getViewValueFromOption:function(e){return u?nn.copy(e.viewValue):e.viewValue}}}}}var s=e.document.createElement("option"),l=e.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(e,t,i,n){n[0].registerOption=p},post:function(e,i,a,c){function u(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),e.value!==t.value&&(t.value=e.selectValue)}function d(){var e=w&&f.readValue();if(w)for(var t=w.items.length-1;0<=t;t--){var n=w.items[t];Oe(n.group?n.element.parentNode:n.element)}w=C.getOptions();var r={};b&&i.prepend(p),w.items.forEach(function(e){var t;if(y(e.group)){t=r[e.group],t||(t=l.cloneNode(!1),S.appendChild(t),t.label=e.group,r[e.group]=t);var i=s.cloneNode(!1)}else t=S,i=s.cloneNode(!1);t.appendChild(i),u(e,i)}),i[0].appendChild(S),h.$render(),h.$isEmpty(e)||(t=f.readValue(),(C.trackBy||g?M(e,t):e===t)||(h.$setViewValue(t),h.$render()))}var p,f=c[0],h=c[1],g=a.multiple;c=0;for(var m=i.children(),v=m.length;c<v;c++)if(""===m[c].value){p=m.eq(c);break}var b=!!p,$=Vi(s.cloneNode(!1));$.val("?");var w,C=o(a.ngOptions,i,e),S=r[0].createDocumentFragment();g?(h.$isEmpty=function(e){return!e||0===e.length},f.writeValue=function(e){w.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){(e=w.getOptionFromViewValue(e))&&(e.element.selected=!0)})},f.readValue=function(){var e=i.val()||[],t=[];return n(e,function(e){(e=w.selectValueMap[e])&&!e.disabled&&t.push(w.getViewValueFromOption(e))}),t},C.trackBy&&e.$watchCollection(function(){if(an(h.$viewValue))return h.$viewValue.map(function(e){return C.getTrackByValue(e)})},function(){h.$render()})):(f.writeValue=function(e){var t=w.getOptionFromViewValue(e);t?(i[0].value!==t.selectValue&&($.remove(),b||p.remove(),i[0].value=t.selectValue,t.element.selected=!0),t.element.setAttribute("selected","selected")):null===e||b?($.remove(),b||i.prepend(p),i.val(""),p.prop("selected",!0),p.attr("selected",!0)):(b||p.remove(),i.prepend($),i.val("?"),$.prop("selected",!0),$.attr("selected",!0))},f.readValue=function(){var e=w.selectValueMap[i.val()];return e&&!e.disabled?(b||p.remove(),$.remove(),w.getViewValueFromOption(e)):null},C.trackBy&&e.$watch(function(){return C.getTrackByValue(h.$viewValue)},function(){h.$render()})),b?(p.remove(),t(p)(e),p.removeClass("ng-scope")):p=Vi(s.cloneNode(!1)),i.empty(),d(),e.$watchCollection(C.getWatchables,d)}}}}],Aa=["$locale","$interpolate","$log",function(e,t,i){var r=/{}/g,a=/^when(Minus)?(.+)$/;return{link:function(o,s,l){function c(e){s.text(e||"")}var u,d=l.count,f=l.$attr.when&&s.attr(l.$attr.when),h=l.offset||0,g=o.$eval(f)||{},y={},v=t.startSymbol(),b=t.endSymbol(),$=v+d+"-"+h+b,C=nn.noop;n(l,function(e,t){var i=a.exec(t);i&&(i=(i[1]?"-":"")+Ki(i[2]),g[i]=s.attr(l.$attr[t]))}),n(g,function(e,i){y[i]=t(e.replace(r,$))}),o.$watch(d,function(t){var n=parseFloat(t),r=isNaN(n);r||n in g||(n=e.pluralCat(n-h)),n===u||r&&w(u)&&isNaN(u)||(C(),r=y[n],m(r)?(null!=t&&i.debug("ngPluralize: no rule defined for '"+n+"' in "+f),C=p,c()):C=o.$watch(r,c),u=n)})}}}],_a=["$parse","$animate","$compile",function(e,r,a){var o=t("ngRepeat"),s=function(e,t,i,n,r,a,o){e[i]=n,r&&(e[r]=a),e.$index=t,e.$first=0===t,e.$last=t===o-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(t,l){var c=l.ngRepeat,u=a.$$createComment("end ngRepeat",c),d=c.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!d)throw o("iexp",c);var p=d[1],f=d[2],h=d[3],g=d[4],d=p.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);if(!d)throw o("iidexp",p);var m=d[3]||d[1],y=d[2];if(h&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(h)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(h)))throw o("badident",h);var v,b,$,w,C={$id:Me};return g?v=e(g):($=function(e,t){return Me(t)},w=function(e){return e}),function(e,t,a,l,d){v&&(b=function(t,i,n){return y&&(C[y]=t),C[m]=i,C.$index=n,v(e,C)});var p=se();e.$watchCollection(f,function(a){var l,f,g,v,C,S,P,D,k,I,O=t[0],T=se();if(h&&(e[h]=a),i(a))D=a,f=b||$;else for(I in f=b||w,D=[],a)zi.call(a,I)&&"$"!==I.charAt(0)&&D.push(I);for(v=D.length,I=Array(v),l=0;l<v;l++)if(C=a===D?l:D[l],S=a[C],P=f(C,S,l),p[P])k=p[P],delete p[P],T[P]=k,I[l]=k;else{if(T[P])throw n(I,function(e){e&&e.scope&&(p[e.id]=e)}),o("dupes",c,P,S);I[l]={id:P,scope:void 0,clone:void 0},T[P]=!0}for(g in p){if(k=p[g],P=oe(k.clone),r.leave(P),P[0].parentNode)for(l=0,f=P.length;l<f;l++)P[l].$$NG_REMOVED=!0;k.scope.$destroy()}for(l=0;l<v;l++)if(C=a===D?l:D[l],S=a[C],k=I[l],k.scope){g=O;do g=g.nextSibling;while(g&&g.$$NG_REMOVED);k.clone[0]!=g&&r.move(oe(k.clone),null,O),O=k.clone[k.clone.length-1],s(k.scope,l,m,S,y,C,v)}else d(function(e,t){k.scope=t;var i=u.cloneNode(!1);e[e.length++]=i,r.enter(e,null,O),O=i,k.clone=e,T[k.id]=k,s(k.scope,l,m,S,y,C,v)});p=T})}}}}],Ea=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,i,n){t.$watch(n.ngShow,function(t){e[t?"removeClass":"addClass"](i,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],xa=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,i,n){t.$watch(n.ngHide,function(t){e[t?"addClass":"removeClass"](i,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Fa=_i(function(e,t,i){e.$watch(i.ngStyle,function(e,i){i&&e!==i&&n(i,function(e,i){t.css(i,"")}),e&&t.css(e)},!0)}),Ma=["$animate","$compile",function(e,t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(i,r,a,o){var s=[],l=[],c=[],u=[],d=function(e,t){return function(){e.splice(t,1)}};i.$watch(a.ngSwitch||a.on,function(i){var r,a;for(r=0,a=c.length;r<a;++r)e.cancel(c[r]);for(r=c.length=0,a=u.length;r<a;++r){var p=oe(l[r].clone);u[r].$destroy(),(c[r]=e.leave(p)).then(d(c,r))}l.length=0,u.length=0,(s=o.cases["!"+i]||o.cases["?"])&&n(s,function(i){i.transclude(function(n,r){u.push(r);var a=i.element;n[n.length++]=t.$$createComment("end ngSwitchWhen"),l.push({clone:n}),e.enter(n,a.parent(),a)})})})}}}],ja=_i({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,i,n,r){n.cases["!"+i.ngSwitchWhen]=n.cases["!"+i.ngSwitchWhen]||[],n.cases["!"+i.ngSwitchWhen].push({transclude:r,element:t})}}),La=_i({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,i,n,r){n.cases["?"]=n.cases["?"]||[],n.cases["?"].push({transclude:r,element:t})}}),Ba=t("ngTransclude"),Ra=_i({restrict:"EAC",link:function(e,t,i,n,r){if(i.ngTransclude===i.$attr.ngTransclude&&(i.ngTransclude=""),!r)throw Ba("orphan",V(t));r(function(e){e.length&&(t.empty(),t.append(e))},null,i.ngTransclude||i.ngTranscludeSlot)}}),Na=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,i){"text/ng-template"==i.type&&e.put(i.id,t[0].text)}}}],Ua={$setViewValue:p,$render:p},Ga=["$element","$scope",function(t,i){var n=this,r=new je;n.ngModelCtrl=Ua,n.unknownOption=Vi(e.document.createElement("option")),n.renderUnknownOption=function(e){e="? "+Me(e)+" ?",n.unknownOption.val(e),t.prepend(n.unknownOption),t.val(e)},i.$on("$destroy",function(){n.renderUnknownOption=p}),n.removeUnknownOption=function(){n.unknownOption.parent()&&n.unknownOption.remove()},n.readValue=function(){return n.removeUnknownOption(),t.val()},n.writeValue=function(e){n.hasOption(e)?(n.removeUnknownOption(),t.val(e),""===e&&n.emptyOption.prop("selected",!0)):null==e&&n.emptyOption?(n.removeUnknownOption(),t.val("")):n.renderUnknownOption(e)},n.addOption=function(e,t){if(8!==t[0].nodeType){re(e,'"option value"'),""===e&&(n.emptyOption=t);var i=r.get(e)||0;r.put(e,i+1),n.ngModelCtrl.$render(),t[0].hasAttribute("selected")&&(t[0].selected=!0)}},n.removeOption=function(e){var t=r.get(e);t&&(1===t?(r.remove(e),""===e&&(n.emptyOption=void 0)):r.put(e,t-1))},n.hasOption=function(e){return!!r.get(e)},n.registerOption=function(e,t,i,r,a){if(r){var o;i.$observe("value",function(e){y(o)&&n.removeOption(o),o=e,n.addOption(e,t)})}else a?e.$watch(a,function(e,r){i.$set("value",e),r!==e&&n.removeOption(r),n.addOption(e,t)}):n.addOption(i.value,t);t.on("$destroy",function(){n.removeOption(i.value),n.ngModelCtrl.$render()})}}],Va=function(){return{restrict:"E",require:["select","?ngModel"],controller:Ga,priority:1,link:{pre:function(e,t,i,r){var a=r[1];if(a){var o=r[0];if(o.ngModelCtrl=a,t.on("change",function(){e.$apply(function(){a.$setViewValue(o.readValue())})}),i.multiple){o.readValue=function(){var e=[];return n(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},o.writeValue=function(e){var i=new je(e);n(t.find("option"),function(e){e.selected=y(i.get(e.value))})};var s,l=NaN;e.$watch(function(){l!==a.$viewValue||M(s,a.$viewValue)||(s=F(a.$viewValue),a.$render()),l=a.$viewValue}),a.$isEmpty=function(e){return!e||0===e.length}}}},post:function(e,t,i,n){var r=n[1];if(r){var a=n[0];r.$render=function(){a.writeValue(r.$viewValue)}}}}}},Wa=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,i){if(y(i.value))var n=e(i.value,!0);else{var r=e(t.text(),!0);r||i.$set("value",t.text())}return function(e,t,i){var a=t.parent();(a=a.data("$selectController")||a.parent().data("$selectController"))&&a.registerOption(e,t,i,n,r)}}}}],qa=h({restrict:"E",terminal:!1}),Ha=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,i,n){n&&(i.required=!0,n.$validators.required=function(e,t){return!i.required||!n.$isEmpty(t)},i.$observe("required",function(){n.$validate()}))}}},za=function(){return{restrict:"A",require:"?ngModel",link:function(e,i,n,r){if(r){var a,o=n.ngPattern||n.pattern;n.$observe("pattern",function(e){if($(e)&&0<e.length&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw t("ngPattern")("noregexp",o,e,V(i));a=e||void 0,r.$validate()}),r.$validators.pattern=function(e,t){return r.$isEmpty(t)||m(a)||a.test(t)}}}}},Ka=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,i,n){if(n){var r=-1;i.$observe("maxlength",function(e){e=u(e),r=isNaN(e)?-1:e,n.$validate()}),n.$validators.maxlength=function(e,t){return 0>r||n.$isEmpty(t)||t.length<=r}}}}},Qa=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,i,n){if(n){var r=0;i.$observe("minlength",function(e){r=u(e)||0,n.$validate()}),n.$validators.minlength=function(e,t){return n.$isEmpty(t)||t.length>=r}}}}};e.angular.bootstrap?e.console&&console.log("WARNING: Tried to load angular more than once."):(te(),ce(nn),nn.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:"January February March April May June July August September October November December".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),STANDALONEMONTH:"January February March April May June July August September October November December".split(" "),WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a",short:"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(e,i){var n=0|e,r=i;return void 0===r&&(r=Math.min(t(e),3)),Math.pow(10,r),1==n&&0==r?"one":"other"}})}]),Vi(e.document).ready(function(){Y(e.document,J)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>')},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(91),r=i(93),a=angular.module("hibachi.alert",[]).controller("alertController",n.AlertController).service("alertService",r.AlertService);t.alertmodule=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(121),a=i(122),o=i(116),s=i(118),l=i(117),c=i(119),u=i(96),d=i(95),p=i(111),f=i(109),h=i(110),g=i(97),m=i(98),y=i(99),v=i(100),b=i(101),$=i(102),w=i(103),C=i(104),S=i(105),P=i(106),D=i(107),k=i(108),I=i(112),O=i(114),T=i(115),A=i(113),_=i(120),E=angular.module("hibachi.collection",[n.coremodule.name]).config([function(){}]).run([function(){}]).constant("collectionPartialsPath","collection/components/").controller("collections",o.CollectionController).controller("confirmationController",l.ConfirmationController).controller("createCollection",s.CreateCollection).controller("entity_createcollection",c.CollectionCreateController).factory("collectionConfigService",["rbkeyService","$hibachi","utilityService","observerService",function(e,t,i,n){return new r.CollectionConfig(e,t,i,n)}]).service("collectionService",a.CollectionService).directive("swCollection",u.SWCollection.Factory()).directive("swAddFilterButtons",d.SWAddFilterButtons.Factory()).directive("swDisplayOptions",p.SWDisplayOptions.Factory()).directive("swDisplayItem",f.SWDisplayItem.Factory()).directive("swDisplayItemAggregate",h.SWDisplayItemAggregate.Factory()).directive("swCollectionTable",g.SWCollectionTable.Factory()).directive("swColumnItem",m.SWColumnItem.Factory()).directive("swConditionCriteria",y.SWConditionCriteria.Factory()).directive("swCriteria",v.SWCriteria.Factory()).directive("swCriteriaBoolean",b.SWCriteriaBoolean.Factory()).directive("swCriteriaDate",$.SWCriteriaDate.Factory()).directive("swCriteriaManyToMany",w.SWCriteriaManyToMany.Factory()).directive("swCriteriaManyToOne",C.SWCriteriaManyToOne.Factory()).directive("swCriteriaNumber",S.SWCriteriaNumber.Factory()).directive("swCriteriaOneToMany",P.SWCriteriaOneToMany.Factory()).directive("swCriteriaRelatedObject",D.SWCriteriaRelatedObject.Factory()).directive("swCriteriaString",k.SWCriteriaString.Factory()).directive("swEditFilterItem",I.SWEditFilterItem.Factory()).directive("swFilterGroups",O.SWFilterGroups.Factory()).directive("swFilterItem",T.SWFilterItem.Factory()).directive("swFilterGroupItem",A.SWFilterGroupItem.Factory()).filter("aggregateFilter",["$filter",_.AggregateFilter.Factory]);t.collectionmodule=E},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i(8);var n=function(){function e(e){var t=this;this.getService=function(e){if(t.$injector.has(e))return t.$injector.get(e)},this.getHibachiScope=function(){return t.getService("publicService")},this.getAppConfig=function(){return t.getService("appConfig")},this.$injector=e;var i=this.constructor.toString();this.className=i.match(/\w+/g)[1]}return e.$inject=["$injector"],e}();t.BaseObject=n},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(5),a=function(e){function t(t,i,n,r,a){var o=e.call(this,a)||this;o.loading=!0,o.errors={},o.processResponse=function(e){o.loading=!1,e.errors&&(o.errors=e.errors),e.messages&&(o.messages=e.messages)},o.getAction=function(){var e=o.getAppConfig(),t=e.action,i=o.utilityService.getQueryParamsFromUrl(o.url);return i[t]?i[t]:o.data&&o.data[t]?o.data[t]:o.url.indexOf("api/scope/")>0?o.extractPublicAction(o.url):void 0},o.extractPublicAction=function(e){var t=/\api\/scope\/(.*?)(?=\/|\?|$)/,i=t.exec(e);return i[1]},o.processSuccess=function(e){o.processResponse(e)},o.processError=function(e){o.processResponse(e)},o.toFormParams=function(e){return e?$.param(e):""},o.serializeData=function(e){if(!angular.isObject(e))return null==e?"":e.toString();var t=[];for(var i in e)if(e.hasOwnProperty(i)){var n=e[i];t.push(encodeURIComponent(i)+"="+encodeURIComponent(null==n?"":n))}var r=t.join("&").replace(/%20/g,"+");return r},o.headers=r,o.$q=o.getService("$q"),o.$http=o.getService("$http"),o.$window=o.getService("$window"),o.url=t,o.data=i,o.method=n,o.utilityService=o.getService("utilityService"),n||(n=void 0==i?"get":"post");var s=o.$q.defer();if("post"==n){"application/json"!==o.headers["Content-Type"]&&(i=o.toFormParams(i));o.$http({url:t,data:i,headers:o.headers,method:"post"}).success(function(e){o.processSuccess(e),s.resolve(e)}).error(function(e){o.processError(e),s.reject(e)});o.promise=s.promise}else o.$http({url:t,method:"get"}).success(function(e){o.processSuccess(e),s.resolve(e)}).error(function(e){o.processError(e),s.reject(e)}),o.promise=s.promise;return o}return n(t,e),t}(r.BaseTransient);t.Request=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(208),r=i(207),a=angular.module("hibachi.dialog",[]).config(function(){}).service("dialogService",n.DialogService).controller("pageDialog",r.PageDialogController).constant("dialogPartials","dialog/components/");t.dialogmodule=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(212),r=i(213),a=i(210),o=i(209),s=i(211),l=i(1),c=angular.module("hibachi.entity",["ngRoute",l.coremodule.name]).config(["$routeProvider","$injector","$locationProvider","appConfig",function(e,t,i,n){var r={};window.location.href.replace(/[?&]+([^=&]+)#([^\/]*)/gi,function(e,t,i){r[t]=i});r.ng&&i.html5Mode(!1).hashPrefix("!");var a=function(e){return e.charAt(0).toUpperCase()+e.replace(/(\-\w)/g,function(e){return e[1].toUpperCase()}).slice(1)};e.when("/entity/:entityName/",{template:function(e){var i=t.has("sw"+a(e.entityName)+"ListDirective");return i?"<sw-"+e.entityName.toLowerCase()+"-list></sw-"+e.entityName.toLowerCase()+"-list>":"<sw-list></sw-list>"},controller:"routerController"}).when("/entity/:entityName/:entityID",{template:function(e){var i=t.has("sw"+a(e.entityName)+"DetailDirective");return i?"<sw-"+e.entityName.toLowerCase()+"-detail></sw-"+e.entityName.toLowerCase()+"-detail>":"<sw-detail></sw-detail>"},controller:"routerController"})}]).constant("coreEntityPartialsPath","entity/components/").controller("otherwiseController",n.OtherWiseController).controller("routerController",r.RouterController).directive("swDetail",o.SWDetail.Factory()).directive("swDetailTabs",a.SWDetailTabs.Factory()).directive("swList",s.SWList.Factory());t.entitymodule=c},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a){var o=this;this.$filter=e,this.utilityService=t,this.$injector=i,this.metadataService=n,this.observerService=r,this.listingService=a,this.saved=!1,this.optionValues=[],this.$onInit=function(){var e=o.$injector.get("swPropertyDisplayDirective")[0].bindToController;for(var t in e)!o[t]&&o.swForm&&o.swForm[t]&&(o[t]=o.swForm[t]);if(o.errors={},o.edited=!1,o.edit=o.edit||o.editing,o.editing=o.editing||o.edit,o.errorName=o.errorName||o.name,o.initialValue=o.object[o.property],o.propertyDisplayID=o.utilityService.createID(32),angular.isUndefined(o.showSave)&&(o.showSave=!0),angular.isUndefined(o.inListingDisplay)&&(o.inListingDisplay=!1),angular.isUndefined(o.rowSaveEnabled)&&(o.rowSaveEnabled=o.inListingDisplay),angular.isDefined(o.revertToValue)&&angular.isUndefined(o.showRevert)&&(o.showRevert=!0),angular.isDefined(o.revertToValue)&&angular.isUndefined(o.revertText)&&(o.revertText=o.revertToValue),angular.isUndefined(o.showRevert)&&(o.showRevert=!1),angular.isUndefined(o.rawFileTarget)&&(o.rawFileTarget=o.property),angular.isUndefined(o.editing)&&(o.editing=!1),angular.isUndefined(o.editable)&&(o.editable=!0),angular.isUndefined(o.isHidden)&&(o.isHidden=!1),angular.isUndefined(o.noValidate)&&(o.noValidate=!1),angular.isUndefined(o.inModal)&&(o.inModal=!1),angular.isUndefined(o.optionsArguments)&&(o.optionsArguments={}),"hidden"!==o.fieldType&&angular.isUndefined(o.inListingDisplay)||angular.isDefined(o.inListingDisplay)&&!o.inListingDisplay?o.showLabel=!0:o.showLabel=!1,angular.isDefined(o.pageRecord)&&angular.isUndefined(o.pageRecord.edited)&&(o.pageRecord.edited=!1),o.applyFilter=function(e,t){try{return o.$filter(t)(e)}catch(t){return e}},angular.isUndefined(o.fieldType)&&o.object&&o.object.metaData&&(o.fieldType=o.metadataService.getPropertyFieldType(o.object,o.propertyIdentifier)),angular.isUndefined(o.title)&&o.object&&o.object.metaData&&(o.labelText=o.metadataService.getPropertyTitle(o.object,o.propertyIdentifier)),o.labelText=o.labelText||o.title,o.title=o.title||o.labelText,o.fieldType=o.fieldType||"text",o.class=o.class||"form-control",o.fieldAttributes=o.fieldAttributes||"",o.label=o.label||"true",o.labelText=o.labelText||"",o.labelClass=o.labelClass||"",o.name=o.name||"unnamed",o.value=o.value||o.initialValue,o.object=o.object||o.swForm.object,o.options&&angular.isString(o.options)){var i=[];i=o.options.toString().split(","),angular.forEach(i,function(e){var t={name:"",value:""};t.name=e,t.value=e,o.optionValues.push(t)})}"yesno"==o.fieldType&&o.value&&angular.isString(o.value)&&o.selected==o.value,angular.isUndefined(o.hint)&&o.object&&o.object.metaData&&(o.hint=o.metadataService.getPropertyHintByObjectAndPropertyIdentifier(o.object,o.propertyIdentifier)),(o.hasOnChangeCallback||o.inListingDisplay||o.onChangeEvent)&&angular.isDefined(o.swForm)&&angular.isDefined(o.name)&&(o.swInputOnChangeEvent=o.swForm.name+o.name+"change",o.observerService.attach(o.onChange,o.swInputOnChangeEvent))},this.onChange=function(e){o.edited=!0,o.saved&&(o.saved=!1),o.hasOnChangeCallback&&o.onChangeCallback(e),o.inListingDisplay&&o.rowSaveEnabled&&o.listingService.markEdited(o.listingID,o.pageRecordIndex,o.propertyDisplayID,o.save),angular.isDefined(o.onChangeEvent)&&o.observerService.notify(o.onChangeEvent,e)},this.clear=function(){o.reverted&&(o.reverted=!1,o.showRevert=!0),o.edited=!1,o.object.data[o.property]=o.initialValue,o.inListingDisplay&&o.rowSaveEnabled&&o.listingService.markUnedited(o.listingID,o.pageRecordIndex,o.propertyDisplayID)},this.revert=function(){o.showRevert=!1,o.reverted=!0,o.object.data[o.property]=o.revertToValue,o.onChange()},this.save=function(){o.edited=!1,o.saved=!0,o.inModal?o.hasModalCallback&&o.modalCallback():o.object.$$save().then(function(e){o.hasSaveCallback&&o.saveCallback(e)},function(e){o.edited=!0,o.saved=!1})}}return e.$inject=["$filter","utilityService","$injector","metadataService","observerService","listingService"],e}();t.SWPropertyDisplayController=i;var n=function(){function e(e,t,n,r,a){var o=this;this.$compile=e,this.scopeService=t,this.coreFormPartialsPath=n,this.hibachiPathBuilder=r,this.swpropertyPartialPath=a,this.require={swForm:"?^swForm",form:"?^form"},this.restrict="AE",this.scope={},this.bindToController={name:"@?",errorName:"@?",class:"@?",edit:"@?",valueObject:"=?",valueObjectProperty:"=?",propertyIdentifier:"@?",valueOptions:"=?",fieldAttributes:"@?",label:"@?",labelText:"@?",labelClass:"@?",errorText:"@?",errorClass:"@?",formTemplate:"@?",eventAnnouncers:"@",hideErrors:"=?",value:"@?",property:"@?",object:"=?",editable:"=?",editing:"=?",isHidden:"=?",title:"=?",hint:"@?",options:"=?",optionsArguments:"=?",eagerLoadOptions:"=?",isDirty:"=?",onChangeCallback:"&?onChange",onChangeEvent:"@?",saveCallback:"&?",fieldType:"@?",rawFileTarget:"@?",binaryFileTarget:"@?",noValidate:"=?",inListingDisplay:"=?",inModal:"=?",modalCallback:"&?",hasModalCallback:"=?",rowSaveEnabled:"=?",revertToValue:"=?",revertText:"@?",showRevert:"=?",showSave:"=?",placeholderText:"@",placeholderRbKey:"@",inputAttributes:"@?",optionValues:"=?",eventListeners:"=?",context:"@?"},this.controller=i,this.controllerAs="swPropertyDisplay",this.templateUrlPath="propertydisplay.html",this.link=function(e,t,i,n){if(e.frmController=n,e.swfPropertyDisplay=e.swPropertyDisplay,angular.isDefined(i.onChange)?e.swPropertyDisplay.hasOnChangeCallback=!0:e.swPropertyDisplay.hasOnChangeCallback=!1,angular.isDefined(i.saveCallback)?e.swPropertyDisplay.hasSaveCallback=!0:e.swPropertyDisplay.hasSaveCallback=!1,angular.isDefined(e.swPropertyDisplay.inListingDisplay)&&e.swPropertyDisplay.inListingDisplay){var r=o.scopeService.getRootParentScope(e,"pageRecord");angular.isDefined(r.pageRecord)&&(e.swPropertyDisplay.pageRecord=r.pageRecord);var r=o.scopeService.getRootParentScope(e,"pageRecordKey");angular.isDefined(r.pageRecordKey)&&(e.swPropertyDisplay.pageRecordIndex=r.pageRecordKey);var r=o.scopeService.getRootParentScope(e,"swListingDisplay");angular.isDefined(r.swListingDisplay)&&(e.swPropertyDisplay.listingID=r.swListingDisplay.tableID)}if(angular.isDefined(e.swPropertyDisplay.inModal)&&e.swPropertyDisplay.inModal){var a=o.scopeService.getRootParentScope(e,"swModalLauncher");e.swPropertyDisplay.modalName=a.swModalLauncher.modalName,angular.isFunction(a.swModalLauncher.launchModal)&&(e.swPropertyDisplay.modalCallback=a.swModalLauncher.launchModal,e.swPropertyDisplay.hasModalCallback=!0)}},this.templateUrl=this.hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath)+a}return e.Factory=function(e,t){var i=function(i,n,r,a){return new e(i,n,r,a,t)};return i.$inject=["$compile","scopeService","coreFormPartialsPath","hibachiPathBuilder"],i},e.$inject=["coreFormPartialsPath","hibachiPathBuilder"],e}();t.SWPropertyDisplay=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(279),r=i(278),a=i(266),o=i(268),s=i(269),l=i(270),c=i(271),u=i(272),d=i(273),p=i(274),f=i(275),h=i(277),g=i(276),m=i(267),y=angular.module("hibachi.workflow",["hibachi.collection"]).config(function(){}).constant("workflowPartialsPath","workflow/components/").service("workflowConditionService",n.WorkflowConditionService).service("scheduleService",r.ScheduleService).directive("swAdminCreateSuperUser",a.SWAdminCreateSuperUser.Factory()).directive("swWorkflowBasic",o.SWWorkflowBasic.Factory()).directive("swWorkflowCondition",s.SWWorkflowCondition.Factory()).directive("swWorkflowConditionGroupItem",l.SWWorkflowConditionGroupItem.Factory()).directive("swWorkflowConditionGroups",c.SWWorkflowConditionGroups.Factory()).directive("swWorkflowTask",u.SWWorkflowTask.Factory()).directive("swWorkflowTaskActions",d.SWWorkflowTaskActions.Factory()).directive("swWorkflowTasks",p.SWWorkflowTasks.Factory()).directive("swWorkflowTrigger",f.SWWorkflowTrigger.Factory()).directive("swWorkflowTriggers",h.SWWorkflowTriggers.Factory()).directive("swWorkflowTriggerHistory",g.SWWorkflowTriggerHistory.Factory()).directive("swSchedulePreview",m.SWSchedulePreview.Factory());t.workflowmodule=y},function(e,t){!function(){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i={rotl:function(e,t){return e<<t|e>>>32-t},rotr:function(e,t){return e<<32-t|e>>>t},endian:function(e){if(e.constructor==Number)return 16711935&i.rotl(e,8)|4278255360&i.rotl(e,24);for(var t=0;t<e.length;t++)e[t]=i.endian(e[t]);return e},randomBytes:function(e){for(var t=[];e>0;e--)t.push(Math.floor(256*Math.random()));return t},bytesToWords:function(e){for(var t=[],i=0,n=0;i<e.length;i++,n+=8)t[n>>>5]|=e[i]<<24-n%32;return t},wordsToBytes:function(e){for(var t=[],i=0;i<32*e.length;i+=8)t.push(e[i>>>5]>>>24-i%32&255);return t},bytesToHex:function(e){for(var t=[],i=0;i<e.length;i++)t.push((e[i]>>>4).toString(16)),t.push((15&e[i]).toString(16));return t.join("")},hexToBytes:function(e){for(var t=[],i=0;i<e.length;i+=2)t.push(parseInt(e.substr(i,2),16));return t},bytesToBase64:function(e){for(var i=[],n=0;n<e.length;n+=3)for(var r=e[n]<<16|e[n+1]<<8|e[n+2],a=0;a<4;a++)8*n+6*a<=8*e.length?i.push(t.charAt(r>>>6*(3-a)&63)):i.push("=");return i.join("")},base64ToBytes:function(e){e=e.replace(/[^A-Z0-9+\/]/gi,"");for(var i=[],n=0,r=0;n<e.length;r=++n%4)0!=r&&i.push((t.indexOf(e.charAt(n-1))&Math.pow(2,-2*r+8)-1)<<2*r|t.indexOf(e.charAt(n))>>>6-2*r);return i}};e.exports=i}()},function(e,t){function i(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function n(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&i(e.slice(0,0))}/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */
e.exports=function(e){return null!=e&&(i(e)||n(e)||!!e._isBuffer)}},function(e,t){!function(e){e.fn.typeWatch=function(t){function i(t,i){var n=e(t.el).val();(n.length>=r.captureLength&&n.toUpperCase()!=t.text||i&&n.length>=r.captureLength)&&(t.text=n.toUpperCase(),t.cb(n))}function n(t){if("TEXT"==t.type.toUpperCase()||"TEXTAREA"==t.nodeName.toUpperCase()){var n={timer:null,text:e(t).val().toUpperCase(),cb:r.callback,el:t,wait:r.wait};r.highlight&&e(t).focus(function(){this.select()});var a=function(e){var t=n.wait,r=!1;13==e.keyCode&&"TEXT"==this.type.toUpperCase()&&(t=1,r=!0);var a=function(){i(n,r)};clearTimeout(n.timer),n.timer=setTimeout(a,t)};e(t).keydown(a)}}var r=e.extend({wait:750,callback:function(){},highlight:!0,captureLength:2},t);return this.each(function(e){n(this)})}}(jQuery)},function(module,exports){!function($){if($.ui.timepicker=$.ui.timepicker||{},!$.ui.timepicker.version){$.extend($.ui,{timepicker:{version:"1.3.1"}});var Timepicker=function(){this.regional=[],this.regional[""]={currentText:"Now",closeText:"Done",amNames:["AM","A"],pmNames:["PM","P"],timeFormat:"HH:mm",timeSuffix:"",timeOnlyTitle:"Choose Time",timeText:"Time",hourText:"Hour",minuteText:"Minute",secondText:"Second",millisecText:"Millisecond",microsecText:"Microsecond",timezoneText:"Time Zone",isRTL:!1},this._defaults={showButtonPanel:!0,timeOnly:!1,showHour:null,showMinute:null,showSecond:null,showMillisec:null,showMicrosec:null,showTimezone:null,showTime:!0,stepHour:1,stepMinute:1,stepSecond:1,stepMillisec:1,stepMicrosec:1,hour:0,minute:0,second:0,millisec:0,microsec:0,timezone:null,hourMin:0,minuteMin:0,secondMin:0,millisecMin:0,microsecMin:0,hourMax:23,minuteMax:59,secondMax:59,millisecMax:999,microsecMax:999,minDateTime:null,maxDateTime:null,onSelect:null,hourGrid:0,minuteGrid:0,secondGrid:0,millisecGrid:0,microsecGrid:0,alwaysSetTime:!0,separator:" ",altFieldTimeOnly:!0,altTimeFormat:null,altSeparator:null,altTimeSuffix:null,pickerTimeFormat:null,pickerTimeSuffix:null,showTimepicker:!0,timezoneList:null,addSliderAccess:!1,sliderAccessArgs:null,controlType:"slider",defaultValue:null,parse:"strict"},$.extend(this._defaults,this.regional[""])};$.extend(Timepicker.prototype,{$input:null,$altInput:null,$timeObj:null,inst:null,hour_slider:null,minute_slider:null,second_slider:null,millisec_slider:null,microsec_slider:null,timezone_select:null,hour:0,minute:0,second:0,millisec:0,microsec:0,timezone:null,hourMinOriginal:null,minuteMinOriginal:null,secondMinOriginal:null,millisecMinOriginal:null,microsecMinOriginal:null,hourMaxOriginal:null,minuteMaxOriginal:null,secondMaxOriginal:null,millisecMaxOriginal:null,microsecMaxOriginal:null,ampm:"",formattedDate:"",formattedTime:"",formattedDateTime:"",timezoneList:null,units:["hour","minute","second","millisec","microsec"],support:{},control:null,setDefaults:function(e){return extendRemove(this._defaults,e||{}),this},_newInst:function($input,opts){var tp_inst=new Timepicker,inlineSettings={},fns={},overrides,i;for(var attrName in this._defaults)if(this._defaults.hasOwnProperty(attrName)){var attrValue=$input.attr("time:"+attrName);if(attrValue)try{inlineSettings[attrName]=eval(attrValue)}catch(e){inlineSettings[attrName]=attrValue}}overrides={beforeShow:function(e,t){if($.isFunction(tp_inst._defaults.evnts.beforeShow))return tp_inst._defaults.evnts.beforeShow.call($input[0],e,t,tp_inst)},onChangeMonthYear:function(e,t,i){tp_inst._updateDateTime(i),$.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)&&tp_inst._defaults.evnts.onChangeMonthYear.call($input[0],e,t,i,tp_inst)},onClose:function(e,t){tp_inst.timeDefined===!0&&""!==$input.val()&&tp_inst._updateDateTime(t),$.isFunction(tp_inst._defaults.evnts.onClose)&&tp_inst._defaults.evnts.onClose.call($input[0],e,t,tp_inst)}};for(i in overrides)overrides.hasOwnProperty(i)&&(fns[i]=opts[i]||null);tp_inst._defaults=$.extend({},this._defaults,inlineSettings,opts,overrides,{evnts:fns,timepicker:tp_inst}),tp_inst.amNames=$.map(tp_inst._defaults.amNames,function(e){return e.toUpperCase()}),tp_inst.pmNames=$.map(tp_inst._defaults.pmNames,function(e){return e.toUpperCase()}),tp_inst.support=detectSupport(tp_inst._defaults.timeFormat+(tp_inst._defaults.pickerTimeFormat?tp_inst._defaults.pickerTimeFormat:"")+(tp_inst._defaults.altTimeFormat?tp_inst._defaults.altTimeFormat:"")),"string"==typeof tp_inst._defaults.controlType?("slider"==tp_inst._defaults.controlType&&"undefined"==typeof jQuery.ui.slider&&(tp_inst._defaults.controlType="select"),tp_inst.control=tp_inst._controls[tp_inst._defaults.controlType]):tp_inst.control=tp_inst._defaults.controlType;var timezoneList=[-720,-660,-600,-570,-540,-480,-420,-360,-300,-270,-240,-210,-180,-120,-60,0,60,120,180,210,240,270,300,330,345,360,390,420,480,525,540,570,600,630,660,690,720,765,780,840];null!==tp_inst._defaults.timezoneList&&(timezoneList=tp_inst._defaults.timezoneList);var tzl=timezoneList.length,tzi=0,tzv=null;if(tzl>0&&"object"!=typeof timezoneList[0])for(;tzi<tzl;tzi++)tzv=timezoneList[tzi],timezoneList[tzi]={value:tzv,label:$.timepicker.timezoneOffsetString(tzv,tp_inst.support.iso8601)};return tp_inst._defaults.timezoneList=timezoneList,tp_inst.timezone=null!==tp_inst._defaults.timezone?$.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone):(new Date).getTimezoneOffset()*-1,tp_inst.hour=tp_inst._defaults.hour<tp_inst._defaults.hourMin?tp_inst._defaults.hourMin:tp_inst._defaults.hour>tp_inst._defaults.hourMax?tp_inst._defaults.hourMax:tp_inst._defaults.hour,tp_inst.minute=tp_inst._defaults.minute<tp_inst._defaults.minuteMin?tp_inst._defaults.minuteMin:tp_inst._defaults.minute>tp_inst._defaults.minuteMax?tp_inst._defaults.minuteMax:tp_inst._defaults.minute,tp_inst.second=tp_inst._defaults.second<tp_inst._defaults.secondMin?tp_inst._defaults.secondMin:tp_inst._defaults.second>tp_inst._defaults.secondMax?tp_inst._defaults.secondMax:tp_inst._defaults.second,tp_inst.millisec=tp_inst._defaults.millisec<tp_inst._defaults.millisecMin?tp_inst._defaults.millisecMin:tp_inst._defaults.millisec>tp_inst._defaults.millisecMax?tp_inst._defaults.millisecMax:tp_inst._defaults.millisec,tp_inst.microsec=tp_inst._defaults.microsec<tp_inst._defaults.microsecMin?tp_inst._defaults.microsecMin:tp_inst._defaults.microsec>tp_inst._defaults.microsecMax?tp_inst._defaults.microsecMax:tp_inst._defaults.microsec,tp_inst.ampm="",tp_inst.$input=$input,tp_inst._defaults.altField&&(tp_inst.$altInput=$(tp_inst._defaults.altField).css({cursor:"pointer"}).focus(function(){$input.trigger("focus")})),0!==tp_inst._defaults.minDate&&0!==tp_inst._defaults.minDateTime||(tp_inst._defaults.minDate=new Date),0!==tp_inst._defaults.maxDate&&0!==tp_inst._defaults.maxDateTime||(tp_inst._defaults.maxDate=new Date),void 0!==tp_inst._defaults.minDate&&tp_inst._defaults.minDate instanceof Date&&(tp_inst._defaults.minDateTime=new Date(tp_inst._defaults.minDate.getTime())),void 0!==tp_inst._defaults.minDateTime&&tp_inst._defaults.minDateTime instanceof Date&&(tp_inst._defaults.minDate=new Date(tp_inst._defaults.minDateTime.getTime())),void 0!==tp_inst._defaults.maxDate&&tp_inst._defaults.maxDate instanceof Date&&(tp_inst._defaults.maxDateTime=new Date(tp_inst._defaults.maxDate.getTime())),void 0!==tp_inst._defaults.maxDateTime&&tp_inst._defaults.maxDateTime instanceof Date&&(tp_inst._defaults.maxDate=new Date(tp_inst._defaults.maxDateTime.getTime())),tp_inst.$input.bind("focus",function(){tp_inst._onFocus()}),tp_inst},_addTimePicker:function(e){var t=this.$altInput&&this._defaults.altFieldTimeOnly?this.$input.val()+" "+this.$altInput.val():this.$input.val();this.timeDefined=this._parseTime(t),this._limitMinMaxDateTime(e,!1),this._injectTimePicker()},_parseTime:function(e,t){if(this.inst||(this.inst=$.datepicker._getInst(this.$input[0])),t||!this._defaults.timeOnly){var i=$.datepicker._get(this.inst,"dateFormat");try{var n=parseDateTimeInternal(i,this._defaults.timeFormat,e,$.datepicker._getFormatConfig(this.inst),this._defaults);if(!n.timeObj)return!1;$.extend(this,n.timeObj)}catch(t){return $.timepicker.log("Error parsing the date/time string: "+t+"\ndate/time string = "+e+"\ntimeFormat = "+this._defaults.timeFormat+"\ndateFormat = "+i),!1}return!0}var r=$.datepicker.parseTime(this._defaults.timeFormat,e,this._defaults);return!!r&&($.extend(this,r),!0)},_injectTimePicker:function(){var e=this.inst.dpDiv,t=this.inst.settings,i=this,n="",r="",a=null,o={},s={},l=null,c=0,u=0;if(0===e.find("div.ui-timepicker-div").length&&t.showTimepicker){var d=' style="display:none;"',p='<div class="ui-timepicker-div'+(t.isRTL?" ui-timepicker-rtl":"")+'"><dl><dt class="ui_tpicker_time_label"'+(t.showTime?"":d)+">"+t.timeText+'</dt><dd class="ui_tpicker_time"'+(t.showTime?"":d)+"></dd>";for(c=0,u=this.units.length;c<u;c++){if(n=this.units[c],r=n.substr(0,1).toUpperCase()+n.substr(1),a=null!==t["show"+r]?t["show"+r]:this.support[n],o[n]=parseInt(t[n+"Max"]-(t[n+"Max"]-t[n+"Min"])%t["step"+r],10),s[n]=0,p+='<dt class="ui_tpicker_'+n+'_label"'+(a?"":d)+">"+t[n+"Text"]+'</dt><dd class="ui_tpicker_'+n+'"><div class="ui_tpicker_'+n+'_slider"'+(a?"":d)+"></div>",a&&t[n+"Grid"]>0){if(p+='<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>',"hour"==n)for(var f=t[n+"Min"];f<=o[n];f+=parseInt(t[n+"Grid"],10)){s[n]++;var h=$.datepicker.formatTime(this.support.ampm?"hht":"HH",{hour:f},t);p+='<td data-for="'+n+'">'+h+"</td>"}else for(var g=t[n+"Min"];g<=o[n];g+=parseInt(t[n+"Grid"],10))s[n]++,p+='<td data-for="'+n+'">'+(g<10?"0":"")+g+"</td>";p+="</tr></table></div>"}p+="</dd>"}var m=null!==t.showTimezone?t.showTimezone:this.support.timezone;p+='<dt class="ui_tpicker_timezone_label"'+(m?"":d)+">"+t.timezoneText+"</dt>",p+='<dd class="ui_tpicker_timezone" '+(m?"":d)+"></dd>",p+="</dl></div>";var y=$(p);for(t.timeOnly===!0&&(y.prepend('<div class="ui-widget-header ui-helper-clearfix ui-corner-all"><div class="ui-datepicker-title">'+t.timeOnlyTitle+"</div></div>"),e.find(".ui-datepicker-header, .ui-datepicker-calendar").hide()),c=0,u=i.units.length;c<u;c++)n=i.units[c],r=n.substr(0,1).toUpperCase()+n.substr(1),a=null!==t["show"+r]?t["show"+r]:this.support[n],i[n+"_slider"]=i.control.create(i,y.find(".ui_tpicker_"+n+"_slider"),n,i[n],t[n+"Min"],o[n],t["step"+r]),a&&t[n+"Grid"]>0&&(l=100*s[n]*t[n+"Grid"]/(o[n]-t[n+"Min"]),y.find(".ui_tpicker_"+n+" table").css({width:l+"%",marginLeft:t.isRTL?"0":l/(-2*s[n])+"%",marginRight:t.isRTL?l/(-2*s[n])+"%":"0",borderCollapse:"collapse"}).find("td").click(function(e){var t=$(this),r=t.html(),a=parseInt(r.replace(/[^0-9]/g),10),o=r.replace(/[^apm]/gi),s=t.data("for");"hour"==s&&(o.indexOf("p")!==-1&&a<12?a+=12:o.indexOf("a")!==-1&&12===a&&(a=0)),i.control.value(i,i[s+"_slider"],n,a),i._onTimeChange(),i._onSelectHandler()}).css({cursor:"pointer",width:100/s[n]+"%",textAlign:"center",overflow:"hidden"}));if(this.timezone_select=y.find(".ui_tpicker_timezone").append("<select></select>").find("select"),$.fn.append.apply(this.timezone_select,$.map(t.timezoneList,function(e,t){return $("<option />").val("object"==typeof e?e.value:e).text("object"==typeof e?e.label:e)})),"undefined"!=typeof this.timezone&&null!==this.timezone&&""!==this.timezone){var v=new Date(this.inst.selectedYear,this.inst.selectedMonth,this.inst.selectedDay,12).getTimezoneOffset()*-1;v==this.timezone?selectLocalTimezone(i):this.timezone_select.val(this.timezone)}else"undefined"!=typeof this.hour&&null!==this.hour&&""!==this.hour?this.timezone_select.val(t.timezone):selectLocalTimezone(i);this.timezone_select.change(function(){i._onTimeChange(),i._onSelectHandler()});var b=e.find(".ui-datepicker-buttonpane");if(b.length?b.before(y):e.append(y),this.$timeObj=y.find(".ui_tpicker_time"),null!==this.inst){var w=this.timeDefined;this._onTimeChange(),this.timeDefined=w}if(this._defaults.addSliderAccess){var C=this._defaults.sliderAccessArgs,S=this._defaults.isRTL;C.isRTL=S,setTimeout(function(){if(0===y.find(".ui-slider-access").length){y.find(".ui-slider:visible").sliderAccess(C);var e=y.find(".ui-slider-access:eq(0)").outerWidth(!0);e&&y.find("table:visible").each(function(){var t=$(this),i=t.outerWidth(),n=t.css(S?"marginRight":"marginLeft").toString().replace("%",""),r=i-e,a=n*r/i+"%",o={width:r,marginRight:0,marginLeft:0};o[S?"marginRight":"marginLeft"]=a,t.css(o)})}},10)}i._limitMinMaxDateTime(this.inst,!0)}},_limitMinMaxDateTime:function(e,t){var i=this._defaults,n=new Date(e.selectedYear,e.selectedMonth,e.selectedDay);if(this._defaults.showTimepicker){if(null!==$.datepicker._get(e,"minDateTime")&&void 0!==$.datepicker._get(e,"minDateTime")&&n){var r=$.datepicker._get(e,"minDateTime"),a=new Date(r.getFullYear(),r.getMonth(),r.getDate(),0,0,0,0);null!==this.hourMinOriginal&&null!==this.minuteMinOriginal&&null!==this.secondMinOriginal&&null!==this.millisecMinOriginal&&null!==this.microsecMinOriginal||(this.hourMinOriginal=i.hourMin,this.minuteMinOriginal=i.minuteMin,this.secondMinOriginal=i.secondMin,this.millisecMinOriginal=i.millisecMin,this.microsecMinOriginal=i.microsecMin),e.settings.timeOnly||a.getTime()==n.getTime()?(this._defaults.hourMin=r.getHours(),this.hour<=this._defaults.hourMin?(this.hour=this._defaults.hourMin,this._defaults.minuteMin=r.getMinutes(),this.minute<=this._defaults.minuteMin?(this.minute=this._defaults.minuteMin,this._defaults.secondMin=r.getSeconds(),this.second<=this._defaults.secondMin?(this.second=this._defaults.secondMin,this._defaults.millisecMin=r.getMilliseconds(),this.millisec<=this._defaults.millisecMin?(this.millisec=this._defaults.millisecMin,this._defaults.microsecMin=r.getMicroseconds()):(this.microsec<this._defaults.microsecMin&&(this.microsec=this._defaults.microsecMin),this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.secondMin=this.secondMinOriginal,this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.minuteMin=this.minuteMinOriginal,this._defaults.secondMin=this.secondMinOriginal,this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)):(this._defaults.hourMin=this.hourMinOriginal,this._defaults.minuteMin=this.minuteMinOriginal,this._defaults.secondMin=this.secondMinOriginal,this._defaults.millisecMin=this.millisecMinOriginal,this._defaults.microsecMin=this.microsecMinOriginal)}if(null!==$.datepicker._get(e,"maxDateTime")&&void 0!==$.datepicker._get(e,"maxDateTime")&&n){var o=$.datepicker._get(e,"maxDateTime"),s=new Date(o.getFullYear(),o.getMonth(),o.getDate(),0,0,0,0);null!==this.hourMaxOriginal&&null!==this.minuteMaxOriginal&&null!==this.secondMaxOriginal&&null!==this.millisecMaxOriginal||(this.hourMaxOriginal=i.hourMax,this.minuteMaxOriginal=i.minuteMax,this.secondMaxOriginal=i.secondMax,this.millisecMaxOriginal=i.millisecMax,this.microsecMaxOriginal=i.microsecMax),e.settings.timeOnly||s.getTime()==n.getTime()?(this._defaults.hourMax=o.getHours(),this.hour>=this._defaults.hourMax?(this.hour=this._defaults.hourMax,this._defaults.minuteMax=o.getMinutes(),this.minute>=this._defaults.minuteMax?(this.minute=this._defaults.minuteMax,this._defaults.secondMax=o.getSeconds(),this.second>=this._defaults.secondMax?(this.second=this._defaults.secondMax,this._defaults.millisecMax=o.getMilliseconds(),this.millisec>=this._defaults.millisecMax?(this.millisec=this._defaults.millisecMax,this._defaults.microsecMax=o.getMicroseconds()):(this.microsec>this._defaults.microsecMax&&(this.microsec=this._defaults.microsecMax),this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.secondMax=this.secondMaxOriginal,this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.minuteMax=this.minuteMaxOriginal,this._defaults.secondMax=this.secondMaxOriginal,this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)):(this._defaults.hourMax=this.hourMaxOriginal,this._defaults.minuteMax=this.minuteMaxOriginal,this._defaults.secondMax=this.secondMaxOriginal,this._defaults.millisecMax=this.millisecMaxOriginal,this._defaults.microsecMax=this.microsecMaxOriginal)}if(void 0!==t&&t===!0){var l=parseInt(this._defaults.hourMax-(this._defaults.hourMax-this._defaults.hourMin)%this._defaults.stepHour,10),c=parseInt(this._defaults.minuteMax-(this._defaults.minuteMax-this._defaults.minuteMin)%this._defaults.stepMinute,10),u=parseInt(this._defaults.secondMax-(this._defaults.secondMax-this._defaults.secondMin)%this._defaults.stepSecond,10),d=parseInt(this._defaults.millisecMax-(this._defaults.millisecMax-this._defaults.millisecMin)%this._defaults.stepMillisec,10);microsecMax=parseInt(this._defaults.microsecMax-(this._defaults.microsecMax-this._defaults.microsecMin)%this._defaults.stepMicrosec,10),this.hour_slider&&(this.control.options(this,this.hour_slider,"hour",{min:this._defaults.hourMin,max:l}),this.control.value(this,this.hour_slider,"hour",this.hour-this.hour%this._defaults.stepHour)),this.minute_slider&&(this.control.options(this,this.minute_slider,"minute",{min:this._defaults.minuteMin,max:c}),this.control.value(this,this.minute_slider,"minute",this.minute-this.minute%this._defaults.stepMinute)),this.second_slider&&(this.control.options(this,this.second_slider,"second",{min:this._defaults.secondMin,max:u}),this.control.value(this,this.second_slider,"second",this.second-this.second%this._defaults.stepSecond)),this.millisec_slider&&(this.control.options(this,this.millisec_slider,"millisec",{min:this._defaults.millisecMin,max:d}),this.control.value(this,this.millisec_slider,"millisec",this.millisec-this.millisec%this._defaults.stepMillisec)),this.microsec_slider&&(this.control.options(this,this.microsec_slider,"microsec",{min:this._defaults.microsecMin,max:microsecMax}),this.control.value(this,this.microsec_slider,"microsec",this.microsec-this.microsec%this._defaults.stepMicrosec))}}},_onTimeChange:function(){var e=!!this.hour_slider&&this.control.value(this,this.hour_slider,"hour"),t=!!this.minute_slider&&this.control.value(this,this.minute_slider,"minute"),i=!!this.second_slider&&this.control.value(this,this.second_slider,"second"),n=!!this.millisec_slider&&this.control.value(this,this.millisec_slider,"millisec"),r=!!this.microsec_slider&&this.control.value(this,this.microsec_slider,"microsec"),a=!!this.timezone_select&&this.timezone_select.val(),o=this._defaults,s=o.pickerTimeFormat||o.timeFormat,l=o.pickerTimeSuffix||o.timeSuffix;"object"==typeof e&&(e=!1),"object"==typeof t&&(t=!1),"object"==typeof i&&(i=!1),"object"==typeof n&&(n=!1),"object"==typeof r&&(r=!1),"object"==typeof a&&(a=!1),e!==!1&&(e=parseInt(e,10)),t!==!1&&(t=parseInt(t,10)),i!==!1&&(i=parseInt(i,10)),n!==!1&&(n=parseInt(n,10)),r!==!1&&(r=parseInt(r,10));var c=o[e<12?"amNames":"pmNames"][0],u=e!=this.hour||t!=this.minute||i!=this.second||n!=this.millisec||r!=this.microsec||this.ampm.length>0&&e<12!=($.inArray(this.ampm.toUpperCase(),this.amNames)!==-1)||null!==this.timezone&&a!=this.timezone;u&&(e!==!1&&(this.hour=e),t!==!1&&(this.minute=t),i!==!1&&(this.second=i),n!==!1&&(this.millisec=n),r!==!1&&(this.microsec=r),a!==!1&&(this.timezone=a),this.inst||(this.inst=$.datepicker._getInst(this.$input[0])),this._limitMinMaxDateTime(this.inst,!0)),this.support.ampm&&(this.ampm=c),this.formattedTime=$.datepicker.formatTime(o.timeFormat,this,o),this.$timeObj&&(s===o.timeFormat?this.$timeObj.text(this.formattedTime+l):this.$timeObj.text($.datepicker.formatTime(s,this,o)+l)),this.timeDefined=!0,u&&this._updateDateTime()},_onSelectHandler:function(){var e=this._defaults.onSelect||this.inst.settings.onSelect,t=this.$input?this.$input[0]:null;e&&t&&e.apply(t,[this.formattedDateTime,this])},_updateDateTime:function(e){e=this.inst||e;var t=$.datepicker._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay)),i=$.datepicker._get(e,"dateFormat"),n=$.datepicker._getFormatConfig(e),r=null!==t&&this.timeDefined;this.formattedDate=$.datepicker.formatDate(i,null===t?new Date:t,n);var a=this.formattedDate;if(""===e.lastVal&&(e.currentYear=e.selectedYear,e.currentMonth=e.selectedMonth,e.currentDay=e.selectedDay),this._defaults.timeOnly===!0?a=this.formattedTime:this._defaults.timeOnly!==!0&&(this._defaults.alwaysSetTime||r)&&(a+=this._defaults.separator+this.formattedTime+this._defaults.timeSuffix),this.formattedDateTime=a,this._defaults.showTimepicker)if(this.$altInput&&this._defaults.timeOnly===!1&&this._defaults.altFieldTimeOnly===!0)this.$altInput.val(this.formattedTime),this.$input.val(this.formattedDate);else if(this.$altInput){this.$input.val(a);var o="",s=this._defaults.altSeparator?this._defaults.altSeparator:this._defaults.separator,l=this._defaults.altTimeSuffix?this._defaults.altTimeSuffix:this._defaults.timeSuffix;this._defaults.timeOnly||(o=this._defaults.altFormat?$.datepicker.formatDate(this._defaults.altFormat,null===t?new Date:t,n):this.formattedDate,o&&(o+=s)),o+=this._defaults.altTimeFormat?$.datepicker.formatTime(this._defaults.altTimeFormat,this,this._defaults)+l:this.formattedTime+l,this.$altInput.val(o)}else this.$input.val(a);else this.$input.val(this.formattedDate);this.$input.trigger("change")},_onFocus:function(){if(!this.$input.val()&&this._defaults.defaultValue){this.$input.val(this._defaults.defaultValue);var e=$.datepicker._getInst(this.$input.get(0)),t=$.datepicker._get(e,"timepicker");if(t&&t._defaults.timeOnly&&e.input.val()!=e.lastVal)try{$.datepicker._updateDatepicker(e)}catch(e){$.timepicker.log(e)}}},_controls:{slider:{create:function(e,t,i,n,r,a,o){var s=e._defaults.isRTL;return t.prop("slide",null).slider({orientation:"horizontal",value:s?n*-1:n,min:s?a*-1:r,max:s?r*-1:a,step:o,slide:function(t,n){e.control.value(e,$(this),i,s?n.value*-1:n.value),e._onTimeChange()},stop:function(t,i){e._onSelectHandler()}})},options:function(e,t,i,n,r){if(e._defaults.isRTL){if("string"==typeof n)return"min"==n||"max"==n?void 0!==r?t.slider(n,r*-1):Math.abs(t.slider(n)):t.slider(n);var a=n.min,o=n.max;return n.min=n.max=null,void 0!==a&&(n.max=a*-1),void 0!==o&&(n.min=o*-1),t.slider(n)}return"string"==typeof n&&void 0!==r?t.slider(n,r):t.slider(n)},value:function(e,t,i,n){return e._defaults.isRTL?void 0!==n?t.slider("value",n*-1):Math.abs(t.slider("value")):void 0!==n?t.slider("value",n):t.slider("value")}},select:{create:function(e,t,i,n,r,a,o){for(var s='<select class="ui-timepicker-select" data-unit="'+i+'" data-min="'+r+'" data-max="'+a+'" data-step="'+o+'">',l=e._defaults.pickerTimeFormat||e._defaults.timeFormat,c=r;c<=a;c+=o)s+='<option value="'+c+'"'+(c==n?" selected":"")+">",s+="hour"==i?$.datepicker.formatTime($.trim(l.replace(/[^ht ]/gi,"")),{hour:c},e._defaults):"millisec"==i||"microsec"==i||c>=10?c:"0"+c.toString(),s+="</option>";return s+="</select>",t.children("select").remove(),$(s).appendTo(t).change(function(t){e._onTimeChange(),e._onSelectHandler()}),t},options:function(e,t,i,n,r){var a={},o=t.children("select");if("string"==typeof n){if(void 0===r)return o.data(n);a[n]=r}else a=n;return e.control.create(e,t,o.data("unit"),o.val(),a.min||o.data("min"),a.max||o.data("max"),a.step||o.data("step"))},value:function(e,t,i,n){var r=t.children("select");return void 0!==n?r.val(n):r.val()}}}}),$.fn.extend({timepicker:function(e){e=e||{};var t=Array.prototype.slice.call(arguments);return"object"==typeof e&&(t[0]=$.extend(e,{timeOnly:!0})),$(this).each(function(){$.fn.datetimepicker.apply($(this),t)})},datetimepicker:function(e){e=e||{};var t=arguments;return"string"==typeof e?"getDate"==e?$.fn.datepicker.apply($(this[0]),t):this.each(function(){var e=$(this);e.datepicker.apply(e,t)}):this.each(function(){var t=$(this);t.datepicker($.timepicker._newInst(t,e)._defaults)})}}),$.datepicker.parseDateTime=function(e,t,i,n,r){var a=parseDateTimeInternal(e,t,i,n,r);if(a.timeObj){var o=a.timeObj;a.date.setHours(o.hour,o.minute,o.second,o.millisec),a.date.setMicroseconds(o.microsec)}return a.date},$.datepicker.parseTime=function(e,t,i){var n=extendRemove(extendRemove({},$.timepicker._defaults),i||{}),r=(e.replace(/\'.*?\'/g,"").indexOf("Z")!==-1,function(e,t,i){var n,r=function(e,t){var i=[];return e&&$.merge(i,e),t&&$.merge(i,t),i=$.map(i,function(e){return e.replace(/[.*+?|()\[\]{}\\]/g,"\\$&")}),"("+i.join("|")+")?"},a=function(e){var t=e.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),i={h:-1,m:-1,s:-1,l:-1,c:-1,t:-1,z:-1};if(t)for(var n=0;n<t.length;n++)i[t[n].toString().charAt(0)]==-1&&(i[t[n].toString().charAt(0)]=n+1);return i},o="^"+e.toString().replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g,function(e){var t=e.length;switch(e.charAt(0).toLowerCase()){case"h":return 1===t?"(\\d?\\d)":"(\\d{"+t+"})";case"m":return 1===t?"(\\d?\\d)":"(\\d{"+t+"})";case"s":return 1===t?"(\\d?\\d)":"(\\d{"+t+"})";case"l":return"(\\d?\\d?\\d)";case"c":return"(\\d?\\d?\\d)";case"z":return"(z|[-+]\\d\\d:?\\d\\d|\\S+)?";case"t":return r(i.amNames,i.pmNames);default:return"("+e.replace(/\'/g,"").replace(/(\.|\$|\^|\\|\/|\(|\)|\[|\]|\?|\+|\*)/g,function(e){return"\\"+e})+")?"}}).replace(/\s/g,"\\s?")+i.timeSuffix+"$",s=a(e),l="";n=t.match(new RegExp(o,"i"));var c={hour:0,minute:0,second:0,millisec:0,microsec:0};return!!n&&(s.t!==-1&&(void 0===n[s.t]||0===n[s.t].length?(l="",c.ampm=""):(l=$.inArray(n[s.t].toUpperCase(),i.amNames)!==-1?"AM":"PM",c.ampm=i["AM"==l?"amNames":"pmNames"][0])),s.h!==-1&&("AM"==l&&"12"==n[s.h]?c.hour=0:"PM"==l&&"12"!=n[s.h]?c.hour=parseInt(n[s.h],10)+12:c.hour=Number(n[s.h])),s.m!==-1&&(c.minute=Number(n[s.m])),s.s!==-1&&(c.second=Number(n[s.s])),s.l!==-1&&(c.millisec=Number(n[s.l])),s.c!==-1&&(c.microsec=Number(n[s.c])),s.z!==-1&&void 0!==n[s.z]&&(c.timezone=$.timepicker.timezoneOffsetNumber(n[s.z])),c)}),a=function(e,t,i){try{var n=new Date("2012-01-01 "+t);if(isNaN(n.getTime())&&(n=new Date("2012-01-01T"+t),isNaN(n.getTime())&&(n=new Date("01/01/2012 "+t),isNaN(n.getTime()))))throw"Unable to parse time with native Date: "+t;return{hour:n.getHours(),minute:n.getMinutes(),second:n.getSeconds(),millisec:n.getMilliseconds(),microsec:n.getMicroseconds(),timezone:n.getTimezoneOffset()*-1}}catch(n){try{return r(e,t,i)}catch(i){$.timepicker.log("Unable to parse \ntimeString: "+t+"\ntimeFormat: "+e)}}return!1};return"function"==typeof n.parse?n.parse(e,t,n):"loose"===n.parse?a(e,t,n):r(e,t,n)},$.datepicker.formatTime=function(e,t,i){i=i||{},i=$.extend({},$.timepicker._defaults,i),t=$.extend({hour:0,minute:0,second:0,millisec:0,timezone:0},t);var n=e,r=i.amNames[0],a=parseInt(t.hour,10);return a>11&&(r=i.pmNames[0]),n=n.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|('.*?'|".*?"))/g,function(e){switch(e){case"HH":return("0"+a).slice(-2);case"H":return a;case"hh":return("0"+convert24to12(a)).slice(-2);case"h":return convert24to12(a);case"mm":return("0"+t.minute).slice(-2);case"m":return t.minute;case"ss":return("0"+t.second).slice(-2);case"s":return t.second;case"l":return("00"+t.millisec).slice(-3);case"c":return("00"+t.microsec).slice(-3);case"z":return $.timepicker.timezoneOffsetString(null===t.timezone?i.timezone:t.timezone,!1);case"Z":return $.timepicker.timezoneOffsetString(null===t.timezone?i.timezone:t.timezone,!0);case"T":return r.charAt(0).toUpperCase();case"TT":return r.toUpperCase();case"t":return r.charAt(0).toLowerCase();case"tt":return r.toLowerCase();default:return e.replace(/\'/g,"")||"'"}}),n=$.trim(n)},$.datepicker._base_selectDate=$.datepicker._selectDate,$.datepicker._selectDate=function(e,t){var i=this._getInst($(e)[0]),n=this._get(i,"timepicker");n?(n._limitMinMaxDateTime(i,!0),i.inline=i.stay_open=!0,this._base_selectDate(e,t),i.inline=i.stay_open=!1,this._notifyChange(i),this._updateDatepicker(i)):this._base_selectDate(e,t)},$.datepicker._base_updateDatepicker=$.datepicker._updateDatepicker,$.datepicker._updateDatepicker=function(e){var t=e.input[0];if(!($.datepicker._curInst&&$.datepicker._curInst!=e&&$.datepicker._datepickerShowing&&$.datepicker._lastInput!=t||"boolean"==typeof e.stay_open&&e.stay_open!==!1)){this._base_updateDatepicker(e);var i=this._get(e,"timepicker");i&&i._addTimePicker(e)}},$.datepicker._base_doKeyPress=$.datepicker._doKeyPress,$.datepicker._doKeyPress=function(e){var t=$.datepicker._getInst(e.target),i=$.datepicker._get(t,"timepicker");if(i&&$.datepicker._get(t,"constrainInput")){var n=i.support.ampm,r=null!==i._defaults.showTimezone?i._defaults.showTimezone:i.support.timezone,a=$.datepicker._possibleChars($.datepicker._get(t,"dateFormat")),o=i._defaults.timeFormat.toString().replace(/[hms]/g,"").replace(/TT/g,n?"APM":"").replace(/Tt/g,n?"AaPpMm":"").replace(/tT/g,n?"AaPpMm":"").replace(/T/g,n?"AP":"").replace(/tt/g,n?"apm":"").replace(/t/g,n?"ap":"")+" "+i._defaults.separator+i._defaults.timeSuffix+(r?i._defaults.timezoneList.join(""):"")+i._defaults.amNames.join("")+i._defaults.pmNames.join("")+a,s=String.fromCharCode(void 0===e.charCode?e.keyCode:e.charCode);return e.ctrlKey||s<" "||!a||o.indexOf(s)>-1}return $.datepicker._base_doKeyPress(e)},$.datepicker._base_updateAlternate=$.datepicker._updateAlternate,$.datepicker._updateAlternate=function(e){var t=this._get(e,"timepicker");if(t){var i=t._defaults.altField;if(i){var n=(t._defaults.altFormat||t._defaults.dateFormat,this._getDate(e)),r=$.datepicker._getFormatConfig(e),a="",o=t._defaults.altSeparator?t._defaults.altSeparator:t._defaults.separator,s=t._defaults.altTimeSuffix?t._defaults.altTimeSuffix:t._defaults.timeSuffix,l=null!==t._defaults.altTimeFormat?t._defaults.altTimeFormat:t._defaults.timeFormat;a+=$.datepicker.formatTime(l,t,t._defaults)+s,t._defaults.timeOnly||t._defaults.altFieldTimeOnly||null===n||(a=t._defaults.altFormat?$.datepicker.formatDate(t._defaults.altFormat,n,r)+o+a:t.formattedDate+o+a),$(i).val(a)}}else $.datepicker._base_updateAlternate(e)},$.datepicker._base_doKeyUp=$.datepicker._doKeyUp,$.datepicker._doKeyUp=function(e){var t=$.datepicker._getInst(e.target),i=$.datepicker._get(t,"timepicker");if(i&&i._defaults.timeOnly&&t.input.val()!=t.lastVal)try{$.datepicker._updateDatepicker(t)}catch(e){$.timepicker.log(e)}return $.datepicker._base_doKeyUp(e)},$.datepicker._base_gotoToday=$.datepicker._gotoToday,$.datepicker._gotoToday=function(e){var t=this._getInst($(e)[0]),i=t.dpDiv;this._base_gotoToday(e);var n=this._get(t,"timepicker");selectLocalTimezone(n);var r=new Date;this._setTime(t,r),$(".ui-datepicker-today",i).click()},$.datepicker._disableTimepickerDatepicker=function(e){var t=this._getInst(e);if(t){var i=this._get(t,"timepicker");$(e).datepicker("getDate"),i&&(i._defaults.showTimepicker=!1,i._updateDateTime(t))}},$.datepicker._enableTimepickerDatepicker=function(e){var t=this._getInst(e);if(t){var i=this._get(t,"timepicker");$(e).datepicker("getDate"),i&&(i._defaults.showTimepicker=!0,i._addTimePicker(t),i._updateDateTime(t))}},$.datepicker._setTime=function(e,t){var i=this._get(e,"timepicker");if(i){var n=i._defaults;i.hour=t?t.getHours():n.hour,i.minute=t?t.getMinutes():n.minute,i.second=t?t.getSeconds():n.second,i.millisec=t?t.getMilliseconds():n.millisec,i.microsec=t?t.getMicroseconds():n.microsec,i._limitMinMaxDateTime(e,!0),i._onTimeChange(),i._updateDateTime(e)}},$.datepicker._setTimeDatepicker=function(e,t,i){var n=this._getInst(e);if(n){var r=this._get(n,"timepicker");if(r){this._setDateFromField(n);var a;t&&("string"==typeof t?(r._parseTime(t,i),a=new Date,a.setHours(r.hour,r.minute,r.second,r.millisec),a.setMicroseconds(r.microsec)):(a=new Date(t.getTime()),a.setMicroseconds(t.getMicroseconds())),"Invalid Date"==a.toString()&&(a=void 0),this._setTime(n,a))}}},$.datepicker._base_setDateDatepicker=$.datepicker._setDateDatepicker,$.datepicker._setDateDatepicker=function(e,t){var i=this._getInst(e);if(i){"string"==typeof t&&(t=new Date(t),t.getTime()||$.timepicker.log("Error creating Date object from string."));var n,r=this._get(i,"timepicker");t instanceof Date?(n=new Date(t.getTime()),n.setMicroseconds(t.getMicroseconds())):n=t,
r&&(r.support.timezone||null!==r._defaults.timezone||(r.timezone=n.getTimezoneOffset()*-1),t=$.timepicker.timezoneAdjust(t,r.timezone),n=$.timepicker.timezoneAdjust(n,r.timezone)),this._updateDatepicker(i),this._base_setDateDatepicker.apply(this,arguments),this._setTimeDatepicker(e,n,!0)}},$.datepicker._base_getDateDatepicker=$.datepicker._getDateDatepicker,$.datepicker._getDateDatepicker=function(e,t){var i=this._getInst(e);if(i){var n=this._get(i,"timepicker");if(n){void 0===i.lastVal&&this._setDateFromField(i,t);var r=this._getDate(i);return r&&n._parseTime($(e).val(),n.timeOnly)&&(r.setHours(n.hour,n.minute,n.second,n.millisec),r.setMicroseconds(n.microsec),null!=n.timezone&&(n.support.timezone||null!==n._defaults.timezone||(n.timezone=r.getTimezoneOffset()*-1),r=$.timepicker.timezoneAdjust(r,n.timezone))),r}return this._base_getDateDatepicker(e,t)}},$.datepicker._base_parseDate=$.datepicker.parseDate,$.datepicker.parseDate=function(e,t,i){var n;try{n=this._base_parseDate(e,t,i)}catch(r){if(!(r.indexOf(":")>=0))throw r;n=this._base_parseDate(e,t.substring(0,t.length-(r.length-r.indexOf(":")-2)),i),$.timepicker.log("Error parsing the date string: "+r+"\ndate string = "+t+"\ndate format = "+e)}return n},$.datepicker._base_formatDate=$.datepicker._formatDate,$.datepicker._formatDate=function(e,t,i,n){var r=this._get(e,"timepicker");return r?(r._updateDateTime(e),r.$input.val()):this._base_formatDate(e)},$.datepicker._base_optionDatepicker=$.datepicker._optionDatepicker,$.datepicker._optionDatepicker=function(e,t,i){var n,r=this._getInst(e);if(!r)return null;var a=this._get(r,"timepicker");if(a){var o,s=null,l=null,c=null,u=a._defaults.evnts,d={};if("string"==typeof t){if("minDate"===t||"minDateTime"===t)s=i;else if("maxDate"===t||"maxDateTime"===t)l=i;else if("onSelect"===t)c=i;else if(u.hasOwnProperty(t)){if("undefined"==typeof i)return u[t];d[t]=i,n={}}}else if("object"==typeof t){t.minDate?s=t.minDate:t.minDateTime?s=t.minDateTime:t.maxDate?l=t.maxDate:t.maxDateTime&&(l=t.maxDateTime);for(o in u)u.hasOwnProperty(o)&&t[o]&&(d[o]=t[o])}for(o in d)d.hasOwnProperty(o)&&(u[o]=d[o],n||(n=$.extend({},t)),delete n[o]);if(n&&isEmptyObject(n))return;s?(s=0===s?new Date:new Date(s),a._defaults.minDate=s,a._defaults.minDateTime=s):l?(l=0===l?new Date:new Date(l),a._defaults.maxDate=l,a._defaults.maxDateTime=l):c&&(a._defaults.onSelect=c)}return void 0===i?this._base_optionDatepicker.call($.datepicker,e,t):this._base_optionDatepicker.call($.datepicker,e,n||t,i)};var isEmptyObject=function(e){var t;for(t in e)if(e.hasOwnProperty(e))return!1;return!0},extendRemove=function(e,t){$.extend(e,t);for(var i in t)null!==t[i]&&void 0!==t[i]||(e[i]=t[i]);return e},detectSupport=function(e){var t=e.replace(/\'.*?\'/g,"").toLowerCase(),i=function(e,t){return e.indexOf(t)!==-1};return{hour:i(t,"h"),minute:i(t,"m"),second:i(t,"s"),millisec:i(t,"l"),microsec:i(t,"c"),timezone:i(t,"z"),ampm:i(t,"t")&&i(e,"h"),iso8601:i(e,"Z")}},convert24to12=function(e){return e>12&&(e-=12),0===e&&(e=12),String(e)},splitDateTime=function(e,t,i,n){try{var r=n&&n.separator?n.separator:$.timepicker._defaults.separator,a=n&&n.timeFormat?n.timeFormat:$.timepicker._defaults.timeFormat,o=a.split(r),s=o.length,l=t.split(r),c=l.length;if(c>1)return[l.splice(0,c-s).join(r),l.splice(0,s).join(r)]}catch(i){if($.timepicker.log("Could not split the date from the time. Please check the following datetimepicker options\nthrown error: "+i+"\ndateTimeString"+t+"\ndateFormat = "+e+"\nseparator = "+n.separator+"\ntimeFormat = "+n.timeFormat),i.indexOf(":")>=0){var u=t.length-(i.length-i.indexOf(":")-2);t.substring(u);return[$.trim(t.substring(0,u)),$.trim(t.substring(u))]}throw i}return[t,""]},parseDateTimeInternal=function(e,t,i,n,r){var a,o=splitDateTime(e,i,n,r);if(a=$.datepicker._base_parseDate(e,o[0],n),""!==o[1]){var s=o[1],l=$.datepicker.parseTime(t,s,r);if(null===l)throw"Wrong time format";return{date:a,timeObj:l}}return{date:a}},selectLocalTimezone=function(e,t){if(e&&e.timezone_select){var i="undefined"!=typeof t?t:new Date;e.timezone_select.val(i.getTimezoneOffset()*-1)}};$.timepicker=new Timepicker,$.timepicker.timezoneOffsetString=function(e,t){if(isNaN(e)||e>840)return e;var i=e,n=i%60,r=(i-n)/60,a=t?":":"",o=(i>=0?"+":"-")+("0"+(101*r).toString()).slice(-2)+a+("0"+(101*n).toString()).slice(-2);return"+00:00"==o?"Z":o},$.timepicker.timezoneOffsetNumber=function(e){return e=e.toString().replace(":",""),"Z"===e.toUpperCase()?0:/^(\-|\+)\d{4}$/.test(e)?("-"==e.substr(0,1)?-1:1)*(60*parseInt(e.substr(1,2),10)+parseInt(e.substr(3,2),10)):e},$.timepicker.timezoneAdjust=function(e,t){var i=$.timepicker.timezoneOffsetNumber(t);return isNaN(i)||e.setMinutes(1*e.getMinutes()+(e.getTimezoneOffset()*-1-1*i)),e},$.timepicker.timeRange=function(e,t,i){return $.timepicker.handleRange("timepicker",e,t,i)},$.timepicker.datetimeRange=function(e,t,i){$.timepicker.handleRange("datetimepicker",e,t,i)},$.timepicker.dateRange=function(e,t,i){$.timepicker.handleRange("datepicker",e,t,i)},$.timepicker.handleRange=function(e,t,i,n){function r(r,a){var o=t[e]("getDate"),s=i[e]("getDate"),l=r[e]("getDate");if(null!==o){var c=new Date(o.getTime()),u=new Date(o.getTime());c.setMilliseconds(c.getMilliseconds()+n.minInterval),u.setMilliseconds(u.getMilliseconds()+n.maxInterval),n.minInterval>0&&c>s?i[e]("setDate",c):n.maxInterval>0&&u<s?i[e]("setDate",u):o>s&&a[e]("setDate",l)}}function a(t,i,r){if(t.val()){var a=t[e].call(t,"getDate");null!==a&&n.minInterval>0&&("minDate"==r&&a.setMilliseconds(a.getMilliseconds()+n.minInterval),"maxDate"==r&&a.setMilliseconds(a.getMilliseconds()-n.minInterval)),a.getTime&&i[e].call(i,"option",r,a)}}return n=$.extend({},{minInterval:0,maxInterval:0,start:{},end:{}},n),$.fn[e].call(t,$.extend({onClose:function(e,t){r($(this),i)},onSelect:function(e){a($(this),i,"minDate")}},n,n.start)),$.fn[e].call(i,$.extend({onClose:function(e,i){r($(this),t)},onSelect:function(e){a($(this),t,"maxDate")}},n,n.end)),r(t,i),a(t,i,"minDate"),a(i,t,"maxDate"),$([t.get(0),i.get(0)])},$.timepicker.log=function(e){window.console},Date.prototype.getMicroseconds||(Date.prototype.microseconds=0,Date.prototype.getMicroseconds=function(){return this.microseconds},Date.prototype.setMicroseconds=function(e){return this.setMilliseconds(this.getMilliseconds()+Math.floor(e/1e3)),this.microseconds=e%1e3,this}),$.timepicker.version="1.3.1"}}(jQuery)},function(e,t){!function(e){"use strict";function t(t){return t?e.isArray(t)?t:[t]:[]}function i(t,i){i=e.element(i),t.unshift(["$provide",function(e){e.value("$rootElement",i)}])}function n(n,r){var a=["ng"].concat(t(n));return r&&i(a,r),e.injector(a)}function r(t){e.element(document).ready(function(){try{e.isArray(t)?e.bootstrap(document,t):e.bootstrap(document,[t])}catch(t){e.bootstrap(document,["ui.bootstrap"])}})}e.lazy=function(t,i){var a=n(i),o=a.get("$q"),s=[],l=e.noop,c=e.noop,u=e.noop;return{resolve:function(e){return e=o.when(a.instantiate(e)),s.push(e),this},bootstrap:function(){return c(),o.all(s).then(function(){r(t)},l).finally(u)},loading:function(e){return c=e,this},done:function(e){return u=e,this},error:function(e){return l=e,this}}}}(angular)},function(e,t){angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.transition",[]).factory("$transition",["$q","$timeout","$rootScope",function(e,t,i){function n(e){for(var t in e)if(void 0!==a.style[t])return e[t]}var r=function(n,a,o){o=o||{};var s=e.defer(),l=r[o.animation?"animationEndEventName":"transitionEndEventName"],c=function(){i.$apply(function(){n.unbind(l,c),s.resolve(n)})};return l&&n.bind(l,c),t(function(){angular.isString(a)?n.addClass(a):angular.isFunction(a)?a(n):angular.isObject(a)&&n.css(a),l||s.resolve(n)}),s.promise.cancel=function(){l&&n.unbind(l,c),s.reject("Transition cancelled")},s.promise},a=document.createElement("trans"),o={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},s={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return r.transitionEndEventName=n(o),r.animationEndEventName=n(s),r}]),angular.module("ui.bootstrap.collapse",["ui.bootstrap.transition"]).directive("collapse",["$transition",function(e){return{link:function(t,i,n){function r(t){function n(){c===r&&(c=void 0)}var r=e(i,t);return c&&c.cancel(),c=r,r.then(n,n),r}function a(){u?(u=!1,o()):(i.removeClass("collapse").addClass("collapsing"),r({height:i[0].scrollHeight+"px"}).then(o))}function o(){i.removeClass("collapsing"),i.addClass("collapse in"),i.css({height:"auto"})}function s(){u?(u=!1,l(),i.css({height:0})):(i.css({height:i[0].scrollHeight+"px"}),i[0].offsetWidth,i.removeClass("collapse in").addClass("collapsing"),r({height:0}).then(l))}function l(){i.removeClass("collapsing"),i.addClass("collapse")}var c,u=!0;t.$watch(n.collapse,function(e){e?s():a()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(e,t,i){this.groups=[],this.closeOthers=function(n){var r=angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):i.closeOthers;r&&angular.forEach(this.groups,function(e){e!==n&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",transclude:!0,replace:!1,templateUrl:"template/accordion/accordion.html"}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/accordion/accordion-group.html",scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,i,n){n.addGroup(e),e.$watch("isOpen",function(t){t&&n.closeOthers(e)}),e.toggleOpen=function(){e.isDisabled||(e.isOpen=!e.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(e,t,i,n,r){n.setHeading(r(e,function(){}))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(e,t,i,n){e.$watch(function(){return n[i.accordionTransclude]},function(e){e&&(t.html(""),t.append(e))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(e,t){e.closeable="close"in t}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",templateUrl:"template/alert/alert.html",transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.bindHtml",[]).directive("bindHtmlUnsafe",function(){return function(e,t,i){t.addClass("ng-binding").data("$binding",i.bindHtmlUnsafe),e.$watch(i.bindHtmlUnsafe,function(e){t.html(e||"")})}}),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",link:function(e,t,i,n){var r=n[0],a=n[1];a.$render=function(){t.toggleClass(r.activeClass,angular.equals(a.$modelValue,e.$eval(i.btnRadio)))},t.bind(r.toggleEvent,function(){var n=t.hasClass(r.activeClass);(!n||angular.isDefined(i.uncheckable))&&e.$apply(function(){a.$setViewValue(n?null:e.$eval(i.btnRadio)),a.$render()})})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",link:function(e,t,i,n){function r(){return o(i.btnCheckboxTrue,!0)}function a(){return o(i.btnCheckboxFalse,!1)}function o(t,i){var n=e.$eval(t);return angular.isDefined(n)?n:i}var s=n[0],l=n[1];l.$render=function(){t.toggleClass(s.activeClass,angular.equals(l.$modelValue,r()))},t.bind(s.toggleEvent,function(){e.$apply(function(){l.$setViewValue(t.hasClass(s.activeClass)?a():r()),l.$render()})})}}}),angular.module("ui.bootstrap.carousel",["ui.bootstrap.transition"]).controller("CarouselController",["$scope","$timeout","$transition",function(e,t,i){function n(){r();var i=+e.interval;!isNaN(i)&&i>=0&&(o=t(a,i))}function r(){o&&(t.cancel(o),o=null)}function a(){s?(e.next(),n()):e.pause()}var o,s,l=this,c=l.slides=e.slides=[],u=-1;l.currentSlide=null;var d=!1;l.select=e.select=function(r,a){function o(){d||(l.currentSlide&&angular.isString(a)&&!e.noTransition&&r.$element?(r.$element.addClass(a),r.$element[0].offsetWidth,angular.forEach(c,function(e){angular.extend(e,{direction:"",entering:!1,leaving:!1,active:!1})}),angular.extend(r,{direction:a,active:!0,entering:!0}),angular.extend(l.currentSlide||{},{direction:a,leaving:!0}),e.$currentTransition=i(r.$element,{}),function(t,i){e.$currentTransition.then(function(){s(t,i)},function(){s(t,i)})}(r,l.currentSlide)):s(r,l.currentSlide),l.currentSlide=r,u=p,n())}function s(t,i){angular.extend(t,{direction:"",active:!0,leaving:!1,entering:!1}),angular.extend(i||{},{direction:"",active:!1,leaving:!1,entering:!1}),e.$currentTransition=null}var p=c.indexOf(r);void 0===a&&(a=p>u?"next":"prev"),r&&r!==l.currentSlide&&(e.$currentTransition?(e.$currentTransition.cancel(),t(o)):o())},e.$on("$destroy",function(){d=!0}),l.indexOfSlide=function(e){return c.indexOf(e)},e.next=function(){var t=(u+1)%c.length;return e.$currentTransition?void 0:l.select(c[t],"next")},e.prev=function(){var t=0>u-1?c.length-1:u-1;return e.$currentTransition?void 0:l.select(c[t],"prev")},e.isActive=function(e){return l.currentSlide===e},e.$watch("interval",n),e.$on("$destroy",r),e.play=function(){s||(s=!0,n())},e.pause=function(){e.noPause||(s=!1,r())},l.addSlide=function(t,i){t.$element=i,c.push(t),1===c.length||t.active?(l.select(c[c.length-1]),1==c.length&&e.play()):t.active=!1},l.removeSlide=function(e){var t=c.indexOf(e);c.splice(t,1),c.length>0&&e.active?l.select(t>=c.length?c[t-1]:c[t]):u>t&&u--}}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",require:"carousel",templateUrl:"template/carousel/carousel.html",scope:{interval:"=",noTransition:"=",noPause:"="}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/carousel/slide.html",scope:{active:"=?"},link:function(e,t,i,n){n.addSlide(e,t),e.$on("$destroy",function(){n.removeSlide(e)}),e.$watch("active",function(t){t&&n.select(e)})}}}),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$locale","orderByFilter",function(e,t){function i(e){var i=[],n=e.split("");return angular.forEach(r,function(t,r){var a=e.indexOf(r);if(a>-1){e=e.split(""),n[a]="("+t.regex+")",e[a]="$";for(var o=a+1,s=a+r.length;s>o;o++)n[o]="",e[o]="$";e=e.join(""),i.push({index:a,apply:t.apply})}}),{regex:new RegExp("^"+n.join("")+"$"),map:t(i,"index")}}function n(e,t,i){return 1===t&&i>28?29===i&&(e%4===0&&e%100!==0||e%400===0):3!==t&&5!==t&&8!==t&&10!==t||31>i}this.parsers={};var r={yyyy:{regex:"\\d{4}",apply:function(e){this.year=+e}},yy:{regex:"\\d{2}",apply:function(e){this.year=+e+2e3}},y:{regex:"\\d{1,4}",apply:function(e){this.year=+e}},MMMM:{regex:e.DATETIME_FORMATS.MONTH.join("|"),apply:function(t){this.month=e.DATETIME_FORMATS.MONTH.indexOf(t)}},MMM:{regex:e.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(t){this.month=e.DATETIME_FORMATS.SHORTMONTH.indexOf(t)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1}},M:{regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},EEEE:{regex:e.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:e.DATETIME_FORMATS.SHORTDAY.join("|")}};this.parse=function(t,r){if(!angular.isString(t)||!r)return t;r=e.DATETIME_FORMATS[r]||r,this.parsers[r]||(this.parsers[r]=i(r));var a=this.parsers[r],o=a.regex,s=a.map,l=t.match(o);if(l&&l.length){for(var c,u={year:1900,month:0,date:1,hours:0},d=1,p=l.length;p>d;d++){var f=s[d-1];f.apply&&f.apply.call(u,l[d])}return n(u.year,u.month,u.date)&&(c=new Date(u.year,u.month,u.date,u.hours)),c}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(e,t){function i(e,i){return e.currentStyle?e.currentStyle[i]:t.getComputedStyle?t.getComputedStyle(e)[i]:e.style[i]}function n(e){return"static"===(i(e,"position")||"static")}var r=function(t){for(var i=e[0],r=t.offsetParent||i;r&&r!==i&&n(r);)r=r.offsetParent;return r||i};return{position:function(t){var i=this.offset(t),n={top:0,left:0},a=r(t[0]);a!=e[0]&&(n=this.offset(angular.element(a)),n.top+=a.clientTop-a.scrollTop,n.left+=a.clientLeft-a.scrollLeft);var o=t[0].getBoundingClientRect();return{width:o.width||t.prop("offsetWidth"),height:o.height||t.prop("offsetHeight"),top:i.top-n.top,left:i.left-n.left}},offset:function(i){var n=i[0].getBoundingClientRect();return{width:n.width||i.prop("offsetWidth"),height:n.height||i.prop("offsetHeight"),top:n.top+(t.pageYOffset||e[0].documentElement.scrollTop),left:n.left+(t.pageXOffset||e[0].documentElement.scrollLeft)}},positionElements:function(e,t,i,n){var r,a,o,s,l=i.split("-"),c=l[0],u=l[1]||"center";r=n?this.offset(e):this.position(e),a=t.prop("offsetWidth"),o=t.prop("offsetHeight");var d={center:function(){return r.left+r.width/2-a/2},left:function(){return r.left},right:function(){return r.left+r.width}},p={center:function(){return r.top+r.height/2-o/2},top:function(){return r.top},bottom:function(){return r.top+r.height}};switch(c){case"right":s={top:p[u](),left:d[c]()};break;case"left":s={top:p[u](),left:r.left-a};break;case"bottom":s={top:p[c](),left:d[u]()};break;default:s={top:r.top-o,left:d[u]()}}return s}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$timeout","$log","dateFilter","datepickerConfig",function(e,t,i,n,r,a,o,s){var l=this,c={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","minMode","maxMode","showWeeks","startingDay","yearRange"],function(i,r){l[i]=angular.isDefined(t[i])?8>r?n(t[i])(e.$parent):e.$parent.$eval(t[i]):s[i]}),angular.forEach(["minDate","maxDate"],function(n){t[n]?e.$parent.$watch(i(t[n]),function(e){l[n]=e?new Date(e):null,l.refreshView()}):l[n]=s[n]?new Date(s[n]):null}),e.datepickerMode=e.datepickerMode||s.datepickerMode,e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),this.activeDate=angular.isDefined(t.initDate)?e.$parent.$eval(t.initDate):new Date,e.isActive=function(t){return 0===l.compare(t.date,l.activeDate)&&(e.activeDateId=t.uid,!0)},this.init=function(e){c=e,c.$render=function(){l.render()}},this.render=function(){if(c.$modelValue){var e=new Date(c.$modelValue),t=!isNaN(e);t?this.activeDate=e:a.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'),c.$setValidity("date",t)}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var e=c.$modelValue?new Date(c.$modelValue):null;c.$setValidity("date-disabled",!e||this.element&&!this.isDisabled(e))}},this.createDateObject=function(e,t){var i=c.$modelValue?new Date(c.$modelValue):null;return{date:e,label:o(e,t),selected:i&&0===this.compare(e,i),disabled:this.isDisabled(e),current:0===this.compare(e,new Date)}},this.isDisabled=function(i){return this.minDate&&this.compare(i,this.minDate)<0||this.maxDate&&this.compare(i,this.maxDate)>0||t.dateDisabled&&e.dateDisabled({date:i,mode:e.datepickerMode})},this.split=function(e,t){for(var i=[];e.length>0;)i.push(e.splice(0,t));return i},e.select=function(t){if(e.datepickerMode===l.minMode){var i=c.$modelValue?new Date(c.$modelValue):new Date(0,0,0,0,0,0,0);i.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),c.$setViewValue(i),c.$render()}else l.activeDate=t,e.datepickerMode=l.modes[l.modes.indexOf(e.datepickerMode)-1]},e.move=function(e){var t=l.activeDate.getFullYear()+e*(l.step.years||0),i=l.activeDate.getMonth()+e*(l.step.months||0);l.activeDate.setFullYear(t,i,1),l.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===l.maxMode&&1===t||e.datepickerMode===l.minMode&&-1===t||(e.datepickerMode=l.modes[l.modes.indexOf(e.datepickerMode)+t])},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var u=function(){r(function(){l.element[0].focus()},0,!1)};e.$on("datepicker.focus",u),e.keydown=function(t){var i=e.keys[t.which];if(i&&!t.shiftKey&&!t.altKey)if(t.preventDefault(),t.stopPropagation(),"enter"===i||"space"===i){if(l.isDisabled(l.activeDate))return;e.select(l.activeDate),u()}else!t.ctrlKey||"up"!==i&&"down"!==i?(l.handleKeyDown(i,t),l.refreshView()):(e.toggleMode("up"===i?1:-1),u())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/datepicker.html",scope:{datepickerMode:"=?",dateDisabled:"&"},require:["datepicker","?^ngModel"],controller:"DatepickerController",link:function(e,t,i,n){var r=n[0],a=n[1];a&&r.init(a)}}}).directive("daypicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(t,i,n,r){function a(e,t){return 1!==t||e%4!==0||e%100===0&&e%400!==0?l[t]:29}function o(e,t){var i=new Array(t),n=new Date(e),r=0;for(n.setHours(12);t>r;)i[r++]=new Date(n),n.setDate(n.getDate()+1);return i}function s(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var i=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((i-t)/864e5)/7)+1}t.showWeeks=r.showWeeks,r.step={months:1},r.element=i;var l=[31,28,31,30,31,30,31,31,30,31,30,31];r._refreshView=function(){var i=r.activeDate.getFullYear(),n=r.activeDate.getMonth(),a=new Date(i,n,1),l=r.startingDay-a.getDay(),c=l>0?7-l:-l,u=new Date(a);c>0&&u.setDate(-c+1);for(var d=o(u,42),p=0;42>p;p++)d[p]=angular.extend(r.createDateObject(d[p],r.formatDay),{secondary:d[p].getMonth()!==n,uid:t.uniqueId+"-"+p});t.labels=new Array(7);for(var f=0;7>f;f++)t.labels[f]={abbr:e(d[f].date,r.formatDayHeader),full:e(d[f].date,"EEEE")};if(t.title=e(r.activeDate,r.formatDayTitle),t.rows=r.split(d,7),t.showWeeks){t.weekNumbers=[];for(var h=s(t.rows[0][0].date),g=t.rows.length;t.weekNumbers.push(h++)<g;);}},r.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},r.handleKeyDown=function(e){var t=r.activeDate.getDate();if("left"===e)t-=1;else if("up"===e)t-=7;else if("right"===e)t+=1;else if("down"===e)t+=7;else if("pageup"===e||"pagedown"===e){var i=r.activeDate.getMonth()+("pageup"===e?-1:1);r.activeDate.setMonth(i,1),t=Math.min(a(r.activeDate.getFullYear(),r.activeDate.getMonth()),t)}else"home"===e?t=1:"end"===e&&(t=a(r.activeDate.getFullYear(),r.activeDate.getMonth()));r.activeDate.setDate(t)},r.refreshView()}}}]).directive("monthpicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(t,i,n,r){r.step={years:1},r.element=i,r._refreshView=function(){for(var i=new Array(12),n=r.activeDate.getFullYear(),a=0;12>a;a++)i[a]=angular.extend(r.createDateObject(new Date(n,a,1),r.formatMonth),{uid:t.uniqueId+"-"+a});t.title=e(r.activeDate,r.formatMonthTitle),t.rows=r.split(i,3)},r.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth())-new Date(t.getFullYear(),t.getMonth())},r.handleKeyDown=function(e){var t=r.activeDate.getMonth();if("left"===e)t-=1;else if("up"===e)t-=3;else if("right"===e)t+=1;else if("down"===e)t+=3;else if("pageup"===e||"pagedown"===e){var i=r.activeDate.getFullYear()+("pageup"===e?-1:1);r.activeDate.setFullYear(i)}else"home"===e?t=0:"end"===e&&(t=11);r.activeDate.setMonth(t)},r.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(e,t,i,n){function r(e){return parseInt((e-1)/a,10)*a+1}var a=n.yearRange;n.step={years:a},n.element=t,n._refreshView=function(){for(var t=new Array(a),i=0,o=r(n.activeDate.getFullYear());a>i;i++)t[i]=angular.extend(n.createDateObject(new Date(o+i,0,1),n.formatYear),{uid:e.uniqueId+"-"+i});e.title=[t[0].label,t[a-1].label].join(" - "),e.rows=n.split(t,5)},n.compare=function(e,t){return e.getFullYear()-t.getFullYear()},n.handleKeyDown=function(e){var t=n.activeDate.getFullYear();"left"===e?t-=1:"up"===e?t-=5:"right"===e?t+=1:"down"===e?t+=5:"pageup"===e||"pagedown"===e?t+=("pageup"===e?-1:1)*n.step.years:"home"===e?t=r(n.activeDate.getFullYear()):"end"===e&&(t=r(n.activeDate.getFullYear())+a-1),n.activeDate.setFullYear(t)},n.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0}).directive("datepickerPopup",["$compile","$parse","$document","$position","dateFilter","dateParser","datepickerPopupConfig",function(e,t,i,n,r,a,o){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&"},link:function(s,l,c,u){function d(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}function p(e){if(e){if(angular.isDate(e)&&!isNaN(e))return u.$setValidity("date",!0),e;if(angular.isString(e)){var t=a.parse(e,f)||new Date(e);return isNaN(t)?void u.$setValidity("date",!1):(u.$setValidity("date",!0),t)}return void u.$setValidity("date",!1)}return u.$setValidity("date",!0),null}var f,h=angular.isDefined(c.closeOnDateSelection)?s.$parent.$eval(c.closeOnDateSelection):o.closeOnDateSelection,g=angular.isDefined(c.datepickerAppendToBody)?s.$parent.$eval(c.datepickerAppendToBody):o.appendToBody;s.showButtonBar=angular.isDefined(c.showButtonBar)?s.$parent.$eval(c.showButtonBar):o.showButtonBar,s.getText=function(e){return s[e+"Text"]||o[e+"Text"]},c.$observe("datepickerPopup",function(e){f=e||o.datepickerPopup,u.$render()});var m=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");m.attr({"ng-model":"date","ng-change":"dateSelection()"});var y=angular.element(m.children()[0]);c.datepickerOptions&&angular.forEach(s.$parent.$eval(c.datepickerOptions),function(e,t){y.attr(d(t),e)}),s.watchData={},angular.forEach(["minDate","maxDate","datepickerMode"],function(e){if(c[e]){var i=t(c[e]);if(s.$parent.$watch(i,function(t){s.watchData[e]=t}),y.attr(d(e),"watchData."+e),"datepickerMode"===e){var n=i.assign;s.$watch("watchData."+e,function(e,t){e!==t&&n(s.$parent,e)})}}}),c.dateDisabled&&y.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),u.$parsers.unshift(p),s.dateSelection=function(e){angular.isDefined(e)&&(s.date=e),u.$setViewValue(s.date),u.$render(),h&&(s.isOpen=!1,l[0].focus())},l.bind("input change keyup",function(){s.$apply(function(){s.date=u.$modelValue})}),u.$render=function(){var e=u.$viewValue?r(u.$viewValue,f):"";l.val(e),s.date=p(u.$modelValue)};var v=function(e){s.isOpen&&e.target!==l[0]&&s.$apply(function(){s.isOpen=!1})},b=function(e){s.keydown(e)};l.bind("keydown",b),s.keydown=function(e){27===e.which?(e.preventDefault(),e.stopPropagation(),s.close()):40!==e.which||s.isOpen||(s.isOpen=!0)},s.$watch("isOpen",function(e){e?(s.$broadcast("datepicker.focus"),s.position=g?n.offset(l):n.position(l),s.position.top=s.position.top+l.prop("offsetHeight"),i.bind("click",v)):i.unbind("click",v)}),s.select=function(e){if("today"===e){var t=new Date;angular.isDate(u.$modelValue)?(e=new Date(u.$modelValue),e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate())):e=new Date(t.setHours(0,0,0,0))}s.dateSelection(e)},s.close=function(){s.isOpen=!1,l[0].focus()};var $=e(m)(s);m.remove(),g?i.find("body").append($):l.after($),s.$on("$destroy",function(){$.remove(),l.unbind("keydown",b),i.unbind("click",v)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:"template/datepicker/popup.html",link:function(e,t){t.bind("click",function(e){e.preventDefault(),e.stopPropagation()})}}}),angular.module("ui.bootstrap.dropdown",[]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document",function(e){var t=null;this.open=function(r){t||(e.bind("click",i),e.bind("keydown",n)),t&&t!==r&&(t.isOpen=!1),t=r},this.close=function(r){t===r&&(t=null,e.unbind("click",i),e.unbind("keydown",n))};var i=function(e){var i=t.getToggleElement();e&&i&&i[0].contains(e.target)||t.$apply(function(){t.isOpen=!1})},n=function(e){27===e.which&&(t.focusToggleElement(),i())}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate",function(e,t,i,n,r,a){var o,s=this,l=e.$new(),c=n.openClass,u=angular.noop,d=t.onToggle?i(t.onToggle):angular.noop;this.init=function(n){s.$element=n,t.isOpen&&(o=i(t.isOpen),u=o.assign,e.$watch(o,function(e){l.isOpen=!!e}))},this.toggle=function(e){return l.isOpen=arguments.length?!!e:!l.isOpen},this.isOpen=function(){return l.isOpen},l.getToggleElement=function(){return s.toggleElement},l.focusToggleElement=function(){s.toggleElement&&s.toggleElement[0].focus()},l.$watch("isOpen",function(t,i){a[t?"addClass":"removeClass"](s.$element,c),t?(l.focusToggleElement(),r.open(l)):r.close(l),u(e,t),angular.isDefined(t)&&t!==i&&d(e,{open:!!t})}),e.$on("$locationChangeSuccess",function(){l.isOpen=!1}),e.$on("$destroy",function(){l.$destroy()})}]).directive("dropdown",function(){return{restrict:"CA",controller:"DropdownController",link:function(e,t,i,n){n.init(t)}}}).directive("dropdownToggle",function(){return{restrict:"CA",require:"?^dropdown",link:function(e,t,i,n){if(n){n.toggleElement=t;var r=function(r){r.preventDefault(),t.hasClass("disabled")||i.disabled||e.$apply(function(){n.toggle()})};t.bind("click",r),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(n.isOpen,function(e){
t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.unbind("click",r)})}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.transition"]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,i){e.push({key:t,value:i})},get:function(t){for(var i=0;i<e.length;i++)if(t==e[i].key)return e[i]},keys:function(){for(var t=[],i=0;i<e.length;i++)t.push(e[i].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var i=-1,n=0;n<e.length;n++)if(t==e[n].key){i=n;break}return e.splice(i,1)[0]},removeTop:function(){return e.splice(e.length-1,1)[0]},length:function(){return e.length}}}}}).directive("modalBackdrop",["$timeout",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",link:function(t,i,n){t.backdropClass=n.backdropClass||"",t.animate=!1,e(function(){t.animate=!0})}}}]).directive("modalWindow",["$modalStack","$timeout",function(e,t){return{restrict:"EA",scope:{index:"@",animate:"="},replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"template/modal/window.html"},link:function(i,n,r){n.addClass(r.windowClass||""),i.size=r.size,t(function(){i.animate=!0,n[0].querySelectorAll("[autofocus]").length||n[0].focus()}),i.close=function(t){var i=e.getTop();i&&i.value.backdrop&&"static"!=i.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(i.key,"backdrop click"))}}}}]).directive("modalTransclude",function(){return{link:function(e,t,i,n,r){r(e.$parent,function(e){t.empty(),t.append(e)})}}}).factory("$modalStack",["$transition","$timeout","$document","$compile","$rootScope","$$stackedMap",function(e,t,i,n,r,a){function o(){for(var e=-1,t=f.keys(),i=0;i<t.length;i++)f.get(t[i]).value.backdrop&&(e=i);return e}function s(e){var t=i.find("body").eq(0),n=f.get(e).value;f.remove(e),c(n.modalDomEl,n.modalScope,300,function(){n.modalScope.$destroy(),t.toggleClass(p,f.length()>0),l()})}function l(){if(u&&-1==o()){var e=d;c(u,d,150,function(){e.$destroy(),e=null}),u=void 0,d=void 0}}function c(i,n,r,a){function o(){o.done||(o.done=!0,i.remove(),a&&a())}n.animate=!1;var s=e.transitionEndEventName;if(s){var l=t(o,r);i.bind(s,function(){t.cancel(l),o(),n.$apply()})}else t(o)}var u,d,p="modal-open",f=a.createNew(),h={};return r.$watch(o,function(e){d&&(d.index=e)}),i.bind("keydown",function(e){var t;27===e.which&&(t=f.top(),t&&t.value.keyboard&&(e.preventDefault(),r.$apply(function(){h.dismiss(t.key,"escape key press")})))}),h.open=function(e,t){f.add(e,{deferred:t.deferred,modalScope:t.scope,backdrop:t.backdrop,keyboard:t.keyboard});var a=i.find("body").eq(0),s=o();if(s>=0&&!u){d=r.$new(!0),d.index=s;var l=angular.element("<div modal-backdrop></div>");l.attr("backdrop-class",t.backdropClass),u=n(l)(d),a.append(u)}var c=angular.element("<div modal-window></div>");c.attr({"template-url":t.windowTemplateUrl,"window-class":t.windowClass,size:t.size,index:f.length()-1,animate:"animate"}).html(t.content);var h=n(c)(t.scope);f.top().value.modalDomEl=h,a.append(h),a.addClass(p)},h.close=function(e,t){var i=f.get(e);i&&(i.value.deferred.resolve(t),s(e))},h.dismiss=function(e,t){var i=f.get(e);i&&(i.value.deferred.reject(t),s(e))},h.dismissAll=function(e){for(var t=this.getTop();t;)this.dismiss(t.key,e),t=this.getTop()},h.getTop=function(){return f.top()},h}]).provider("$modal",function(){var e={options:{backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$http","$templateCache","$controller","$modalStack",function(t,i,n,r,a,o,s){function l(e){return e.template?n.when(e.template):r.get(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl,{cache:a}).then(function(e){return e.data})}function c(e){var i=[];return angular.forEach(e,function(e){(angular.isFunction(e)||angular.isArray(e))&&i.push(n.when(t.invoke(e)))}),i}var u={};return u.open=function(t){var r=n.defer(),a=n.defer(),u={result:r.promise,opened:a.promise,close:function(e){s.close(u,e)},dismiss:function(e){s.dismiss(u,e)}};if(t=angular.extend({},e.options,t),t.resolve=t.resolve||{},!t.template&&!t.templateUrl)throw new Error("One of template or templateUrl options is required.");var d=n.all([l(t)].concat(c(t.resolve)));return d.then(function(e){var n=(t.scope||i).$new();n.$close=u.close,n.$dismiss=u.dismiss;var a,l={},c=1;t.controller&&(l.$scope=n,l.$modalInstance=u,angular.forEach(t.resolve,function(t,i){l[i]=e[c++]}),a=o(t.controller,l),t.controllerAs&&(n[t.controllerAs]=a)),s.open(u,{scope:n,deferred:r,content:e[0],backdrop:t.backdrop,keyboard:t.keyboard,backdropClass:t.backdropClass,windowClass:t.windowClass,windowTemplateUrl:t.windowTemplateUrl,size:t.size})},function(e){r.reject(e)}),d.then(function(){a.resolve(!0)},function(){a.reject(!1)}),u},u}]};return e}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(e,t,i){var n=this,r={$setViewValue:angular.noop},a=t.numPages?i(t.numPages).assign:angular.noop;this.init=function(a,o){r=a,this.config=o,r.$render=function(){n.render()},t.itemsPerPage?e.$parent.$watch(i(t.itemsPerPage),function(t){n.itemsPerPage=parseInt(t,10),e.totalPages=n.calculateTotalPages()}):this.itemsPerPage=o.itemsPerPage},this.calculateTotalPages=function(){var t=this.itemsPerPage<1?1:Math.ceil(e.totalItems/this.itemsPerPage);return Math.max(t||0,1)},this.render=function(){e.page=parseInt(r.$viewValue,10)||1},e.selectPage=function(t){e.page!==t&&t>0&&t<=e.totalPages&&(r.$setViewValue(t),r.$render())},e.getText=function(t){return e[t+"Text"]||n.config[t+"Text"]},e.noPrevious=function(){return 1===e.page},e.noNext=function(){return e.page===e.totalPages},e.$watch("totalItems",function(){e.totalPages=n.calculateTotalPages()}),e.$watch("totalPages",function(t){a(e.$parent,t),e.page>t?e.selectPage(t):r.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(e,t){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(i,n,r,a){function o(e,t,i){return{number:e,text:t,active:i}}function s(e,t){var i=[],n=1,r=t,a=angular.isDefined(u)&&t>u;a&&(d?(n=Math.max(e-Math.floor(u/2),1),r=n+u-1,r>t&&(r=t,n=r-u+1)):(n=(Math.ceil(e/u)-1)*u+1,r=Math.min(n+u-1,t)));for(var s=n;r>=s;s++){var l=o(s,s,s===e);i.push(l)}if(a&&!d){if(n>1){var c=o(n-1,"...",!1);i.unshift(c)}if(t>r){var p=o(r+1,"...",!1);i.push(p)}}return i}var l=a[0],c=a[1];if(c){var u=angular.isDefined(r.maxSize)?i.$parent.$eval(r.maxSize):t.maxSize,d=angular.isDefined(r.rotate)?i.$parent.$eval(r.rotate):t.rotate;i.boundaryLinks=angular.isDefined(r.boundaryLinks)?i.$parent.$eval(r.boundaryLinks):t.boundaryLinks,i.directionLinks=angular.isDefined(r.directionLinks)?i.$parent.$eval(r.directionLinks):t.directionLinks,l.init(c,t),r.maxSize&&i.$parent.$watch(e(r.maxSize),function(e){u=parseInt(e,10),l.render()});var p=l.render;l.render=function(){p(),i.page>0&&i.page<=i.totalPages&&(i.pages=s(i.page,i.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"Â« Previous",nextText:"Next Â»",align:!0}).directive("pager",["pagerConfig",function(e){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(t,i,n,r){var a=r[0],o=r[1];o&&(t.align=angular.isDefined(n.align)?t.$parent.$eval(n.align):e.align,a.init(o,e))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function e(e){var t=/[A-Z]/g,i="-";return e.replace(t,function(e,t){return(t?i:"")+e.toLowerCase()})}var t={placement:"top",animation:!0,popupDelay:0},i={mouseenter:"mouseleave",click:"click",focus:"blur"},n={};this.options=function(e){angular.extend(n,e)},this.setTriggers=function(e){angular.extend(i,e)},this.$get=["$window","$compile","$timeout","$parse","$document","$position","$interpolate",function(r,a,o,s,l,c,u){return function(r,d,p){function f(e){var t=e||h.trigger||p,n=i[t]||t;return{show:t,hide:n}}var h=angular.extend({},t,n),g=e(r),m=u.startSymbol(),y=u.endSymbol(),v="<div "+g+'-popup title="'+m+"tt_title"+y+'" content="'+m+"tt_content"+y+'" placement="'+m+"tt_placement"+y+'" animation="tt_animation" is-open="tt_isOpen"></div>';return{restrict:"EA",scope:!0,compile:function(){var e=a(v);return function(t,i,n){function a(){t.tt_isOpen?p():u()}function u(){(!P||t.$eval(n[d+"Enable"]))&&(t.tt_popupDelay?w||(w=o(g,t.tt_popupDelay,!1),w.then(function(e){e()})):g()())}function p(){t.$apply(function(){m()})}function g(){return w=null,$&&(o.cancel($),$=null),t.tt_content?(y(),b.css({top:0,left:0,display:"block"}),C?l.find("body").append(b):i.after(b),D(),t.tt_isOpen=!0,t.$digest(),D):angular.noop}function m(){t.tt_isOpen=!1,o.cancel(w),w=null,t.tt_animation?$||($=o(v,500)):v()}function y(){b&&v(),b=e(t,function(){}),t.$digest()}function v(){$=null,b&&(b.remove(),b=null)}var b,$,w,C=!!angular.isDefined(h.appendToBody)&&h.appendToBody,S=f(void 0),P=angular.isDefined(n[d+"Enable"]),D=function(){var e=c.positionElements(i,b,t.tt_placement,C);e.top+="px",e.left+="px",b.css(e)};t.tt_isOpen=!1,n.$observe(r,function(e){t.tt_content=e,!e&&t.tt_isOpen&&m()}),n.$observe(d+"Title",function(e){t.tt_title=e}),n.$observe(d+"Placement",function(e){t.tt_placement=angular.isDefined(e)?e:h.placement}),n.$observe(d+"PopupDelay",function(e){var i=parseInt(e,10);t.tt_popupDelay=isNaN(i)?h.popupDelay:i});var k=function(){i.unbind(S.show,u),i.unbind(S.hide,p)};n.$observe(d+"Trigger",function(e){k(),S=f(e),S.show===S.hide?i.bind(S.show,a):(i.bind(S.show,u),i.bind(S.hide,p))});var I=t.$eval(n[d+"Animation"]);t.tt_animation=angular.isDefined(I)?!!I:h.animation,n.$observe(d+"AppendToBody",function(e){C=angular.isDefined(e)?s(e)(t):C}),C&&t.$on("$locationChangeSuccess",function(){t.tt_isOpen&&m()}),t.$on("$destroy",function(){o.cancel($),o.cancel(w),k(),v()})}}}}}]}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(e){return e("tooltip","tooltip","mouseenter")}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).directive("tooltipHtmlUnsafe",["$tooltip",function(e){return e("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(e){return e("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(e,t,i){var n=this,r=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):i.animate;this.bars=[],e.max=angular.isDefined(t.max)?e.$parent.$eval(t.max):i.max,this.addBar=function(t,i){r||i.css({transition:"none"}),this.bars.push(t),t.$watch("value",function(i){t.percent=+(100*i/e.max).toFixed(2)}),t.$on("$destroy",function(){i=null,n.removeBar(t)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(e,t,i,n){n.addBar(e,t)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(e,t,i,n){n.addBar(e,angular.element(t.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null}).controller("RatingController",["$scope","$attrs","ratingConfig",function(e,t,i){var n={$setViewValue:angular.noop};this.init=function(r){n=r,n.$render=this.render,this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):i.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):i.stateOff;var a=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):i.max);e.range=this.buildTemplateObjects(a)},this.buildTemplateObjects=function(e){for(var t=0,i=e.length;i>t;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff},e[t]);return e},e.rate=function(t){!e.readonly&&t>=0&&t<=e.range.length&&(n.$setViewValue(t),n.$render())},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=n.$viewValue,e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=n.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(e,t,i,n){var r=n[0],a=n[1];a&&r.init(a)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(e){var t=this,i=t.tabs=e.tabs=[];t.select=function(e){angular.forEach(i,function(t){t.active&&t!==e&&(t.active=!1,t.onDeselect())}),e.active=!0,e.onSelect()},t.addTab=function(e){i.push(e),1===i.length?e.active=!0:e.active&&t.select(e)},t.removeTab=function(e){var n=i.indexOf(e);if(e.active&&i.length>1){var r=n==i.length-1?n-1:n+1;t.select(i[r])}i.splice(n,1)}}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(e,t,i){e.vertical=!!angular.isDefined(i.vertical)&&e.$parent.$eval(i.vertical),e.justified=!!angular.isDefined(i.justified)&&e.$parent.$eval(i.justified)}}}).directive("tab",["$parse",function(e){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},compile:function(t,i,n){return function(t,i,r,a){t.$watch("active",function(e){e&&a.select(t)}),t.disabled=!1,r.disabled&&t.$parent.$watch(e(r.disabled),function(e){t.disabled=!!e}),t.select=function(){t.disabled||(t.active=!0)},a.addTab(t),t.$on("$destroy",function(){a.removeTab(t)}),t.$transcludeFn=n}}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}]).directive("tabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("tab-heading")||e.hasAttribute("data-tab-heading")||"tab-heading"===e.tagName.toLowerCase()||"data-tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(t,i,n){var r=t.$eval(n.tabContentTransclude);r.$transcludeFn(r.$parent,function(t){angular.forEach(t,function(t){e(t)?r.headingElement=t:i.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(e,t,i,n,r,a){function o(){var t=parseInt(e.hours,10),i=e.showMeridian?t>0&&13>t:t>=0&&24>t;return i?(e.showMeridian&&(12===t&&(t=0),e.meridian===g[1]&&(t+=12)),t):void 0}function s(){var t=parseInt(e.minutes,10);return t>=0&&60>t?t:void 0}function l(e){return angular.isDefined(e)&&e.toString().length<2?"0"+e:e}function c(e){u(),h.$setViewValue(new Date(f)),d(e)}function u(){h.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1}function d(t){var i=f.getHours(),n=f.getMinutes();e.showMeridian&&(i=0===i||12===i?12:i%12),e.hours="h"===t?i:l(i),e.minutes="m"===t?n:l(n),e.meridian=f.getHours()<12?g[0]:g[1]}function p(e){var t=new Date(f.getTime()+6e4*e);f.setHours(t.getHours(),t.getMinutes()),c()}var f=new Date,h={$setViewValue:angular.noop},g=angular.isDefined(t.meridians)?e.$parent.$eval(t.meridians):a.meridians||r.DATETIME_FORMATS.AMPMS;this.init=function(i,n){h=i,h.$render=this.render;var r=n.eq(0),o=n.eq(1),s=angular.isDefined(t.mousewheel)?e.$parent.$eval(t.mousewheel):a.mousewheel;s&&this.setupMousewheelEvents(r,o),e.readonlyInput=angular.isDefined(t.readonlyInput)?e.$parent.$eval(t.readonlyInput):a.readonlyInput,this.setupInputEvents(r,o)};var m=a.hourStep;t.hourStep&&e.$parent.$watch(i(t.hourStep),function(e){m=parseInt(e,10)});var y=a.minuteStep;t.minuteStep&&e.$parent.$watch(i(t.minuteStep),function(e){y=parseInt(e,10)}),e.showMeridian=a.showMeridian,t.showMeridian&&e.$parent.$watch(i(t.showMeridian),function(t){if(e.showMeridian=!!t,h.$error.time){var i=o(),n=s();angular.isDefined(i)&&angular.isDefined(n)&&(f.setHours(i),c())}else d()}),this.setupMousewheelEvents=function(t,i){var n=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.bind("mousewheel wheel",function(t){e.$apply(n(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),i.bind("mousewheel wheel",function(t){e.$apply(n(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()})},this.setupInputEvents=function(t,i){if(e.readonlyInput)return e.updateHours=angular.noop,void(e.updateMinutes=angular.noop);var n=function(t,i){h.$setViewValue(null),h.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t),angular.isDefined(i)&&(e.invalidMinutes=i)};e.updateHours=function(){var e=o();angular.isDefined(e)?(f.setHours(e),c("h")):n(!0)},t.bind("blur",function(){!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=l(e.hours)})}),e.updateMinutes=function(){var e=s();angular.isDefined(e)?(f.setMinutes(e),c("m")):n(void 0,!0)},i.bind("blur",function(){!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=l(e.minutes)})})},this.render=function(){var e=h.$modelValue?new Date(h.$modelValue):null;isNaN(e)?(h.$setValidity("time",!1),n.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(e&&(f=e),u(),d())},e.incrementHours=function(){p(60*m)},e.decrementHours=function(){p(60*-m)},e.incrementMinutes=function(){p(y)},e.decrementMinutes=function(){p(-y)},e.toggleMeridian=function(){p(720*(f.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(e,t,i,n){var r=n[0],a=n[1];a&&r.init(a,t.find("input"))}}}),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(i){var n=i.match(t);if(!n)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+i+'".');return{itemName:n[3],source:e(n[4]),viewMapper:e(n[2]||n[1]),modelMapper:e(n[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$position","typeaheadParser",function(e,t,i,n,r,a,o){var s=[9,13,27,38,40];return{require:"ngModel",link:function(l,c,u,d){var p,f=l.$eval(u.typeaheadMinLength)||1,h=l.$eval(u.typeaheadWaitMs)||0,g=l.$eval(u.typeaheadEditable)!==!1,m=t(u.typeaheadLoading).assign||angular.noop,y=t(u.typeaheadOnSelect),v=u.typeaheadInputFormatter?t(u.typeaheadInputFormatter):void 0,b=!!u.typeaheadAppendToBody&&l.$eval(u.typeaheadAppendToBody),$=t(u.ngModel).assign,w=o.parse(u.typeahead),C=l.$new();l.$on("$destroy",function(){C.$destroy()});var S="typeahead-"+C.$id+"-"+Math.floor(1e4*Math.random());c.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":S});var P=angular.element("<div typeahead-popup></div>");P.attr({id:S,matches:"matches",active:"activeIdx",select:"select(activeIdx)",query:"query",position:"position"}),angular.isDefined(u.typeaheadTemplateUrl)&&P.attr("template-url",u.typeaheadTemplateUrl);var D=function(){C.matches=[],C.activeIdx=-1,c.attr("aria-expanded",!1)},k=function(e){return S+"-option-"+e};C.$watch("activeIdx",function(e){0>e?c.removeAttr("aria-activedescendant"):c.attr("aria-activedescendant",k(e))});var I=function(e){var t={$viewValue:e};m(l,!0),i.when(w.source(l,t)).then(function(i){var n=e===d.$viewValue;if(n&&p)if(i.length>0){C.activeIdx=0,C.matches.length=0;for(var r=0;r<i.length;r++)t[w.itemName]=i[r],C.matches.push({id:k(r),label:w.viewMapper(C,t),model:i[r]});C.query=e,C.position=b?a.offset(c):a.position(c),C.position.top=C.position.top+c.prop("offsetHeight"),c.attr("aria-expanded",!0)}else D();n&&m(l,!1)},function(){D(),m(l,!1)})};D(),C.query=void 0;var O,T=function(e){O=n(function(){I(e)},h)},A=function(){O&&n.cancel(O)};d.$parsers.unshift(function(e){return p=!0,e&&e.length>=f?h>0?(A(),T(e)):I(e):(m(l,!1),A(),D()),g?e:e?void d.$setValidity("editable",!1):(d.$setValidity("editable",!0),e)}),d.$formatters.push(function(e){var t,i,n={};return v?(n.$model=e,v(l,n)):(n[w.itemName]=e,t=w.viewMapper(l,n),n[w.itemName]=void 0,i=w.viewMapper(l,n),t!==i?t:e)}),C.select=function(e){var t,i,r={};r[w.itemName]=i=C.matches[e].model,t=w.modelMapper(l,r),$(l,t),d.$setValidity("editable",!0),y(l,{$item:i,$model:t,$label:w.viewMapper(l,r)}),D(),n(function(){c[0].focus()},0,!1)},c.bind("keydown",function(e){0!==C.matches.length&&-1!==s.indexOf(e.which)&&(e.preventDefault(),40===e.which?(C.activeIdx=(C.activeIdx+1)%C.matches.length,C.$digest()):38===e.which?(C.activeIdx=(C.activeIdx?C.activeIdx:C.matches.length)-1,C.$digest()):13===e.which||9===e.which?C.$apply(function(){C.select(C.activeIdx)}):27===e.which&&(e.stopPropagation(),D(),C.$digest()))}),c.bind("blur",function(){p=!1});var _=function(e){c[0]!==e.target&&(D(),C.$digest())};r.bind("click",_),l.$on("$destroy",function(){r.unbind("click",_)});var E=e(P)(C);b?r.find("body").append(E):c.after(E)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(e,t,i){e.templateUrl=i.templateUrl,e.isOpen=function(){return e.matches.length>0},e.isActive=function(t){return e.active==t},e.selectActive=function(t){e.active=t},e.selectMatch=function(t){e.select({activeIdx:t})}}}}).directive("typeaheadMatch",["$http","$templateCache","$compile","$parse",function(e,t,i,n){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(r,a,o){var s=n(o.templateUrl)(r.$parent)||"template/typeahead/typeahead-match.html";e.get(s,{cache:t}).success(function(e){a.replaceWith(i(e.trim())(r))})}}}]).filter("typeaheadHighlight",function(){function e(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(t,i){return i?(""+t).replace(new RegExp(e(i),"gi"),"<strong>$&</strong>"):t}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion-group.html",'<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n\t  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissable\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("template/carousel/slide.html","<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n")}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)">\n\t<li ng-transclude></li>\n\t<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n\t\t<span class="btn-group">\n\t\t\t<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n\t\t\t<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n\t\t</span>\n\t\t<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n\t</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(e){
e.put("template/modal/backdrop.html",'<div class="modal-backdrop fade {{ backdropClass }}"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(e){e.put("template/modal/window.html",'<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="{\'modal-sm\': size == \'sm\', \'modal-lg\': size == \'lg\'}"><div class="modal-content" modal-transclude></div></div>\n</div>')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover.html",'<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("template/timepicker/timepicker.html",'<table>\n\t<tbody>\n\t\t<tr class="text-center">\n\t\t\t<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n\t\t\t<td>&nbsp;</td>\n\t\t\t<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n\t\t\t<td ng-show="showMeridian"></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n\t\t\t\t<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n\t\t\t</td>\n\t\t\t<td>:</td>\n\t\t\t<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n\t\t\t\t<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n\t\t\t</td>\n\t\t\t<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n\t\t</tr>\n\t\t<tr class="text-center">\n\t\t\t<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n\t\t\t<td>&nbsp;</td>\n\t\t\t<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n\t\t\t<td ng-show="showMeridian"></td>\n\t\t</tr>\n\t</tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-match.html",'<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}])},function(e,t){!function(e,t){"use strict";function i(e,t,i){if(!e)throw Q("areq",t||"?",i||"required");return e}function n(e,t){return e||t?e?t?(B(e)&&(e=e.join(" ")),B(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function r(e){var t={};return e&&(e.to||e.from)&&(t.to=e.to,t.from=e.from),t}function a(e,t,i){var n="";return e=B(e)?e:e&&R(e)&&e.length?e.split(/\s+/):[],L(e,function(e,r){e&&0<e.length&&(n+=0<r?" ":"",n+=i?t+e:e+t)}),n}function o(e){if(e instanceof j)switch(e.length){case 0:return[];case 1:if(1===e[0].nodeType)return e;break;default:return j(s(e))}if(1===e.nodeType)return j(e)}function s(e){if(!e[0])return e;for(var t=0;t<e.length;t++){var i=e[t];if(1==i.nodeType)return i}}function l(e,t,i){L(t,function(t){e.addClass(t,i)})}function c(e,t,i){L(t,function(t){e.removeClass(t,i)})}function u(e){return function(t,i){i.addClass&&(l(e,t,i.addClass),i.addClass=null),i.removeClass&&(c(e,t,i.removeClass),i.removeClass=null)}}function d(e){if(e=e||{},!e.$$prepared){var t=e.domOperation||x;e.domOperation=function(){e.$$domOperationFired=!0,t(),t=x},e.$$prepared=!0}return e}function p(e,t){f(e,t),h(e,t)}function f(e,t){t.from&&(e.css(t.from),t.from=null)}function h(e,t){t.to&&(e.css(t.to),t.to=null)}function g(e,t,i){var n=t.options||{};i=i.options||{};var r=(n.addClass||"")+" "+(i.addClass||""),a=(n.removeClass||"")+" "+(i.removeClass||"");return e=m(e.attr("class"),r,a),i.preparationClasses&&(n.preparationClasses=C(i.preparationClasses,n.preparationClasses),delete i.preparationClasses),r=n.domOperation!==x?n.domOperation:null,M(n,i),r&&(n.domOperation=r),n.addClass=e.addClass?e.addClass:null,n.removeClass=e.removeClass?e.removeClass:null,t.addClass=n.addClass,t.removeClass=n.removeClass,n}function m(e,t,i){function n(e){R(e)&&(e=e.split(" "));var t={};return L(e,function(e){e.length&&(t[e]=!0)}),t}var r={};e=n(e),t=n(t),L(t,function(e,t){r[t]=1}),i=n(i),L(i,function(e,t){r[t]=1===r[t]?null:-1});var a={addClass:"",removeClass:""};return L(r,function(t,i){var n,r;1===t?(n="addClass",r=!e[i]):-1===t&&(n="removeClass",r=e[i]),r&&(a[n].length&&(a[n]+=" "),a[n]+=i)}),a}function y(e){return e instanceof t.element?e[0]:e}function v(e,t,i){var n="";t&&(n=a(t,"ng-",!0)),i.addClass&&(n=C(n,a(i.addClass,"-add"))),i.removeClass&&(n=C(n,a(i.removeClass,"-remove"))),n.length&&(i.preparationClasses=n,e.addClass(n))}function b(e,t){var i=t?"-"+t+"s":"";return w(e,[z,i]),[z,i]}function $(e,t){var i=t?"paused":"",n=_+"PlayState";return w(e,[n,i]),[n,i]}function w(e,t){e.style[t[0]]=t[1]}function C(e,t){return e?t?e+" "+t:e:t}function S(e,t,i){var n=Object.create(null),r=e.getComputedStyle(t)||{};return L(i,function(e,t){var i=r[e];if(i){var a=i.charAt(0);("-"===a||"+"===a||0<=a)&&(i=P(i)),0===i&&(i=null),n[t]=i}}),n}function P(e){var t=0;return e=e.split(/\s*,\s*/),L(e,function(e){"s"==e.charAt(e.length-1)&&(e=e.substring(0,e.length-1)),e=parseFloat(e)||0,t=t?Math.max(e,t):e}),t}function D(e){return 0===e||null!=e}function k(e,t){var i=T,n=e+"s";return t?i+="Duration":n+=" linear all",[i,n]}function I(){var e=Object.create(null);return{flush:function(){e=Object.create(null)},count:function(t){return(t=e[t])?t.total:0},get:function(t){return(t=e[t])&&t.value},put:function(t,i){e[t]?e[t].total++:e[t]={total:1,value:i}}}}function O(e,t,i){L(i,function(i){e[i]=G(e[i])?e[i]:t.style.getPropertyValue(i)})}var T,A,_,E,x=t.noop,F=t.copy,M=t.extend,j=t.element,L=t.forEach,B=t.isArray,R=t.isString,N=t.isObject,U=t.isUndefined,G=t.isDefined,V=t.isFunction,W=t.isElement;U(e.ontransitionend)&&G(e.onwebkittransitionend)?(T="WebkitTransition",A="webkitTransitionEnd transitionend"):(T="transition",A="transitionend"),U(e.onanimationend)&&G(e.onwebkitanimationend)?(_="WebkitAnimation",E="webkitAnimationEnd animationend"):(_="animation",E="animationend");var q=_+"Delay",H=_+"Duration",z=T+"Delay",K=T+"Duration",Q=t.$$minErr("ng"),Y={transitionDuration:K,transitionDelay:z,transitionProperty:T+"Property",animationDuration:H,animationDelay:q,animationIterationCount:_+"IterationCount"},J={transitionDuration:K,transitionDelay:z,animationDuration:H,animationDelay:q};t.module("ngAnimate",[]).directive("ngAnimateSwap",["$animate","$rootScope",function(e,t){return{restrict:"A",transclude:"element",terminal:!0,priority:600,link:function(t,i,n,r,a){var o,s;t.$watchCollection(n.ngAnimateSwap||n.for,function(n){o&&e.leave(o),s&&(s.$destroy(),s=null),(n||0===n)&&(s=t.$new(),a(s,function(t){o=t,e.enter(t,null,i)}))})}}}]).directive("ngAnimateChildren",["$interpolate",function(e){return{link:function(i,n,r){function a(e){n.data("$$ngAnimateChildren","on"===e||"true"===e)}var o=r.ngAnimateChildren;t.isString(o)&&0===o.length?n.data("$$ngAnimateChildren",!0):(a(e(o)(i)),r.$observe("ngAnimateChildren",a))}}}]).factory("$$rAFScheduler",["$$rAF",function(e){function t(e){n=n.concat(e),i()}function i(){if(n.length){for(var t=n.shift(),a=0;a<t.length;a++)t[a]();r||e(function(){r||i()})}}var n,r;return n=t.queue=[],t.waitUntilQuiet=function(t){r&&r(),r=e(function(){r=null,t(),i()})},t}]).provider("$$animateQueue",["$animateProvider",function(n){function r(e){if(!e)return null;e=e.split(" ");var t=Object.create(null);return L(e,function(e){t[e]=!0}),t}function a(e,t){if(e&&t){var i=r(t);return e.split(" ").some(function(e){return i[e]})}}function l(e,t,i,n){return f[e].some(function(e){return e(t,i,n)})}function c(e,t){var i=0<(e.addClass||"").length,n=0<(e.removeClass||"").length;return t?i&&n:i||n}var f=this.rules={skip:[],cancel:[],join:[]};f.join.push(function(e,t,i){return!t.structural&&c(t)}),f.skip.push(function(e,t,i){return!t.structural&&!c(t)}),f.skip.push(function(e,t,i){return"leave"==i.event&&t.structural}),f.skip.push(function(e,t,i){return i.structural&&2===i.state&&!t.structural}),f.cancel.push(function(e,t,i){return i.structural&&t.structural}),f.cancel.push(function(e,t,i){return 2===i.state&&t.structural}),f.cancel.push(function(e,t,i){if(i.structural)return!1;e=t.addClass,t=t.removeClass;var n=i.addClass;return i=i.removeClass,!(U(e)&&U(t)||U(n)&&U(i))&&(a(e,i)||a(t,n))}),this.$get=["$$rAF","$rootScope","$rootElement","$document","$$HashMap","$$animation","$$AnimateRunner","$templateRequest","$$jqLite","$$forceReflow",function(r,a,f,h,m,b,$,w,C,S){function P(){var e=!1;return function(t){e?t():a.$$postDigest(function(){e=!0,t()})}}function D(e,t,i){var n=y(t),r=y(e),a=[];return(e=z[i])&&L(e,function(e){J.call(e.node,n)?a.push(e.callback):"leave"===i&&J.call(e.node,r)&&a.push(e.callback)}),a}function k(e,t,i){var n=s(t);return e.filter(function(e){return!(e.node===n&&(!i||e.callback===i))})}function I(e,t,i){function n(t,i,n,a){C(function(){var t=D(f,e,i);t.length?r(function(){L(t,function(t){t(e,n,a)}),"close"!==n||e[0].parentNode||Z.off(e)}):"close"!==n||e[0].parentNode||Z.off(e)}),t.progress(i,n,a)}function s(t){var i=e,n=m;n.preparationClasses&&(i.removeClass(n.preparationClasses),n.preparationClasses=null),n.activeClasses&&(i.removeClass(n.activeClasses),n.activeClasses=null),Y(e,m),p(e,m),m.domOperation(),w.complete(!t)}var u,f,m=F(i);(e=o(e))&&(u=y(e),f=e.parent());var m=d(m),w=new $,C=P();if(B(m.addClass)&&(m.addClass=m.addClass.join(" ")),m.addClass&&!R(m.addClass)&&(m.addClass=null),B(m.removeClass)&&(m.removeClass=m.removeClass.join(" ")),m.removeClass&&!R(m.removeClass)&&(m.removeClass=null),m.from&&!N(m.from)&&(m.from=null),m.to&&!N(m.to)&&(m.to=null),!u)return s(),w;if(i=[u.className,m.addClass,m.removeClass].join(" "),!Q(i))return s(),w;var S=0<=["enter","move","leave"].indexOf(t),k=h[0].hidden,I=!q||k||V.get(u);i=!I&&x.get(u)||{};var A=!!i.state;if(I||A&&1==i.state||(I=!_(e,f,t)),I)return k&&n(w,t,"start"),s(),k&&n(w,t,"close"),w;if(S&&O(e),k={structural:S,element:e,event:t,addClass:m.addClass,removeClass:m.removeClass,close:s,options:m,runner:w},A){if(l("skip",e,k,i))return 2===i.state?(s(),w):(g(e,i,k),i.runner);if(l("cancel",e,k,i))if(2===i.state)i.runner.end();else{if(!i.structural)return g(e,i,k),i.runner;i.close()}else if(l("join",e,k,i)){if(2!==i.state)return v(e,S?t:null,m),t=k.event=i.event,m=g(e,i,k),i.runner;g(e,k,{})}}else g(e,k,{});if((A=k.structural)||(A="animate"===k.event&&0<Object.keys(k.options.to||{}).length||c(k)),!A)return s(),T(e),w;var M=(i.counter||0)+1;return k.counter=M,E(e,1,k),a.$$postDigest(function(){var i=x.get(u),r=!i,i=i||{},a=0<(e.parent()||[]).length&&("animate"===i.event||i.structural||c(i));r||i.counter!==M||!a?(r&&(Y(e,m),p(e,m)),(r||S&&i.event!==t)&&(m.domOperation(),w.end()),a||T(e)):(t=!i.structural&&c(i,!0)?"setClass":i.event,E(e,2),i=b(e,t,i.options),w.setHost(i),n(w,t,"start",{}),i.done(function(i){s(!i),(i=x.get(u))&&i.counter===M&&T(y(e)),n(w,t,"close",{})}))}),w}function O(e){e=y(e).querySelectorAll("[data-ng-animate]"),L(e,function(e){var t=parseInt(e.getAttribute("data-ng-animate")),i=x.get(e);if(i)switch(t){case 2:i.runner.end();case 1:x.remove(e)}})}function T(e){e=y(e),e.removeAttribute("data-ng-animate"),x.remove(e)}function A(e,t){return y(e)===y(t)}function _(e,t,i){i=j(h[0].body);var n,r=A(e,i)||"HTML"===e[0].nodeName,a=A(e,f),o=!1,s=V.get(y(e));for((e=j.data(e[0],"$ngAnimatePin"))&&(t=e),t=y(t);t&&(a||(a=A(t,f)),1===t.nodeType);){if(e=x.get(t)||{},!o){var l=V.get(t);if(!0===l&&!1!==s){s=!0;break}!1===l&&(s=!1),o=e.structural}if((U(n)||!0===n)&&(e=j.data(t,"$$ngAnimateChildren"),G(e)&&(n=e)),o&&!1===n)break;if(r||(r=A(t,i)),r&&a)break;t=a||!(e=j.data(t,"$ngAnimatePin"))?t.parentNode:y(e)}return(!o||n)&&!0!==s&&a&&r}function E(e,t,i){i=i||{},i.state=t,e=y(e),e.setAttribute("data-ng-animate",t),i=(t=x.get(e))?M(t,i):i,x.put(e,i)}var x=new m,V=new m,q=null,H=a.$watch(function(){return 0===w.totalPendingRequests},function(e){e&&(H(),a.$$postDigest(function(){a.$$postDigest(function(){null===q&&(q=!0)})}))}),z={},K=n.classNameFilter(),Q=K?function(e){return K.test(e)}:function(){return!0},Y=u(C),J=e.Node.prototype.contains||function(e){return this===e||!!(16&this.compareDocumentPosition(e))},Z={on:function(e,t,i){var n=s(t);z[e]=z[e]||[],z[e].push({node:n,callback:i}),j(t).on("$destroy",function(){x.get(n)||Z.off(e,t,i)})},off:function(e,i,n){if(1!==arguments.length||t.isString(arguments[0])){var r=z[e];r&&(z[e]=1===arguments.length?null:k(r,i,n))}else for(r in i=arguments[0],z)z[r]=k(z[r],i)},pin:function(e,t){i(W(e),"element","not an element"),i(W(t),"parentElement","not an element"),e.data("$ngAnimatePin",t)},push:function(e,t,i,n){return i=i||{},i.domOperation=n,I(e,t,i)},enabled:function(e,t){var i=arguments.length;if(0===i)t=!!q;else if(W(e)){var n=y(e),r=V.get(n);1===i?t=!r:V.put(n,!t)}else t=q=!!e;return t}};return Z}]}]).provider("$$animation",["$animateProvider",function(e){function t(e){return e.data("$$animationRunner")}var i=this.drivers=[];this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$HashMap","$$rAFScheduler",function(e,r,a,o,s,l){function c(e){function t(e){if(e.processed)return e;e.processed=!0;var i=e.domNode,a=i.parentNode;r.put(i,e);for(var o;a;){if(o=r.get(a)){o.processed||(o=t(o));break}a=a.parentNode}return(o||n).children.push(e),e}var i,n={children:[]},r=new s;for(i=0;i<e.length;i++){var a=e[i];r.put(a.domNode,e[i]={domNode:a.domNode,fn:a.fn,children:[]})}for(i=0;i<e.length;i++)t(e[i]);return function(e){var t,i=[],n=[];for(t=0;t<e.children.length;t++)n.push(e.children[t]);e=n.length;var r=0,a=[];for(t=0;t<n.length;t++){var o=n[t];0>=e&&(e=r,r=0,i.push(a),a=[]),a.push(o.fn),o.children.forEach(function(e){r++,n.push(e)}),e--}return a.length&&i.push(a),i}(n)}var f=[],h=u(e);return function(s,u,g){function m(e){e=e.hasAttribute("ng-animate-ref")?[e]:e.querySelectorAll("[ng-animate-ref]");var t=[];return L(e,function(e){var i=e.getAttribute("ng-animate-ref");i&&i.length&&t.push(e)}),t}function v(e){var t=[],i={};L(e,function(e,n){var r=y(e.element),a=0<=["enter","move"].indexOf(e.event),r=e.structural?m(r):[];if(r.length){var o=a?"to":"from";L(r,function(e){var t=e.getAttribute("ng-animate-ref");i[t]=i[t]||{},i[t][o]={animationID:n,element:j(e)}})}else t.push(e)});var n={},r={};return L(i,function(i,a){var o=i.from,s=i.to;if(o&&s){var l=e[o.animationID],c=e[s.animationID],u=o.animationID.toString();if(!r[u]){var d=r[u]={structural:!0,beforeStart:function(){l.beforeStart(),c.beforeStart()},close:function(){l.close(),c.close()},classes:b(l.classes,c.classes),from:l,to:c,anchors:[]};d.classes.length?t.push(d):(t.push(l),t.push(c))}r[u].anchors.push({out:o.element,in:s.element})}else o=o?o.animationID:s.animationID,s=o.toString(),n[s]||(n[s]=!0,t.push(e[o]))}),t}function b(e,t){e=e.split(" "),t=t.split(" ");for(var i=[],n=0;n<e.length;n++){var r=e[n];if("ng-"!==r.substring(0,3))for(var a=0;a<t.length;a++)if(r===t[a]){i.push(r);break}}return i.join(" ")}function $(e){for(var t=i.length-1;0<=t;t--){var n=i[t];if(a.has(n)&&(n=a.get(n)(e)))return n}}function w(e,i){e.from&&e.to?(t(e.from.element).setHost(i),t(e.to.element).setHost(i)):t(e.element).setHost(i)}function C(){var e=t(s);!e||"leave"===u&&g.$$domOperationFired||e.end()}function S(t){s.off("$destroy",C),s.removeData("$$animationRunner"),h(s,g),p(s,g),g.domOperation(),I&&e.removeClass(s,I),s.removeClass("ng-animate"),D.complete(!t)}g=d(g);var P=0<=["enter","move","leave"].indexOf(u),D=new o({end:function(){S()},cancel:function(){S(!0)}});if(!i.length)return S(),D;s.data("$$animationRunner",D);var k=n(s.attr("class"),n(g.addClass,g.removeClass)),I=g.tempClasses;I&&(k+=" "+I,g.tempClasses=null);var O;return P&&(O="ng-"+u+"-prepare",e.addClass(s,O)),f.push({element:s,classes:k,event:u,structural:P,options:g,beforeStart:function(){s.addClass("ng-animate"),I&&e.addClass(s,I),O&&(e.removeClass(s,O),O=null)},close:S}),s.on("$destroy",C),1<f.length?D:(r.$$postDigest(function(){var e=[];L(f,function(i){t(i.element)?e.push(i):i.close()}),f.length=0;var i=v(e),n=[];L(i,function(e){n.push({domNode:y(e.from?e.from.element:e.element),fn:function(){e.beforeStart();var i,n=e.close;if(t(e.anchors?e.from.element||e.to.element:e.element)){var r=$(e);r&&(i=r.start)}i?(i=i(),i.done(function(e){n(!e)}),w(e,i)):n()}})}),l(c(n))}),D)}}]}]).provider("$animateCss",["$animateProvider",function(e){var t=I(),i=I();this.$get=["$window","$$jqLite","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue",function(e,n,o,s,l,c,g,m){function v(e,t){var i=e.parentNode;return(i.$$ngAnimateParentKey||(i.$$ngAnimateParentKey=++j))+"-"+e.getAttribute("class")+"-"+t}function C(r,o,s,l){var c;return 0<t.count(s)&&(c=i.get(s),c||(o=a(o,"-stagger"),n.addClass(r,o),c=S(e,r,l),c.animationDuration=Math.max(c.animationDuration,0),c.transitionDuration=Math.max(c.transitionDuration,0),n.removeClass(r,o),i.put(s,c))),c||{}}function P(e){R.push(e),g.waitUntilQuiet(function(){t.flush(),i.flush();for(var e=l(),n=0;n<R.length;n++)R[n](e);R.length=0})}function I(i,n,r){return n=t.get(r),n||(n=S(e,i,Y),"infinite"===n.animationIterationCount&&(n.animationIterationCount=1)),t.put(r,n),i=n,r=i.animationDelay,n=i.transitionDelay,i.maxDelay=r&&n?Math.max(r,n):r||n,i.maxDuration=Math.max(i.animationDuration*i.animationIterationCount,i.transitionDuration),i}var M=u(n),j=0,R=[];return function(e,i){function l(){g()}function u(){g(!0)}function g(t){if(!(W||Q&&K)){W=!0,K=!1,U.$$skipPreparationClasses||n.removeClass(e,de),n.removeClass(e,fe),$(V,!1),b(V,!1),L(re,function(e){V.style[e[0]]=""}),M(e,U),p(e,U),Object.keys(G).length&&L(G,function(e,t){e?V.style.setProperty(t,e):V.style.removeProperty(t)}),U.onDone&&U.onDone(),se&&se.length&&e.off(se.join(" "),R);var i=e.data("$$animateCss");i&&(s.cancel(i[0].timer),e.removeData("$$animateCss")),Y&&Y.complete(!t)}}function S(e){be.blockTransition&&b(V,e),be.blockKeyframeAnimation&&$(V,!!e)}function j(){return Y=new o({end:l,cancel:u}),P(x),g(),{$$willAnimate:!1,start:function(){return Y},end:l}}function R(e){e.stopPropagation();var t=e.originalEvent||e;e=t.$manualTimeStamp||Date.now(),t=parseFloat(t.elapsedTime.toFixed(3)),Math.max(e-ne,0)>=ee&&t>=te&&(Q=!0,g())}function N(){function t(){if(!W){if(S(!1),L(re,function(e){V.style[e[0]]=e[1]}),M(e,U),n.addClass(e,fe),be.recalculateTimingStyles){if(pe=V.className+" "+de,he=v(V,pe),ye=I(V,pe,he),ve=ye.maxDelay,X=Math.max(ve,0),te=ye.maxDuration,0===te)return void g();be.hasTransitions=0<ye.transitionDuration,be.hasAnimations=0<ye.animationDuration}if(be.applyAnimationDelay&&(ve="boolean"!=typeof U.delay&&D(U.delay)?parseFloat(U.delay):ve,X=Math.max(ve,0),ye.animationDelay=ve,$e=[q,ve+"s"],re.push($e),V.style[$e[0]]=$e[1]),ee=1e3*X,ie=1e3*te,U.easing){var t,r=U.easing;be.hasTransitions&&(t=T+"TimingFunction",re.push([t,r]),V.style[t]=r),be.hasAnimations&&(t=_+"TimingFunction",re.push([t,r]),V.style[t]=r)}ye.transitionDuration&&se.push(A),ye.animationDuration&&se.push(E),ne=Date.now();var a=ee+1.5*ie;t=ne+a;var r=e.data("$$animateCss")||[],o=!0;if(r.length){var l=r[0];(o=t>l.expectedEndTime)?s.cancel(l.timer):r.push(g)}o&&(a=s(i,a,!1),r[0]={timer:a,expectedEndTime:t},r.push(g),e.data("$$animateCss",r)),se.length&&e.on(se.join(" "),R),U.to&&(U.cleanupStyles&&O(G,V,Object.keys(U.to)),h(e,U))}}function i(){var t=e.data("$$animateCss");if(t){for(var i=1;i<t.length;i++)t[i]();e.removeData("$$animateCss")}}if(!W)if(V.parentNode){var r=function(e){if(Q)K&&e&&(K=!1,g());else if(K=!e,ye.animationDuration)if(e=$(V,K),K)re.push(e);else{var t=re,i=t.indexOf(e);0<=e&&t.splice(i,1)}},a=0<me&&(ye.transitionDuration&&0===ge.transitionDuration||ye.animationDuration&&0===ge.animationDuration)&&Math.max(ge.animationDelay,ge.transitionDelay);a?s(t,Math.floor(a*me*1e3),!1):t(),Z.resume=function(){r(!0)},Z.pause=function(){r(!1)}}else g()}var U=i||{};U.$$prepared||(U=d(F(U)));var G={},V=y(e);if(!V||!V.parentNode||!m.enabled())return j();var W,K,Q,Y,Z,X,ee,te,ie,ne,re=[],ae=e.attr("class"),oe=r(U),se=[];if(0===U.duration||!c.animations&&!c.transitions)return j();var le=U.event&&B(U.event)?U.event.join(" "):U.event,ce="",ue="";le&&U.structural?ce=a(le,"ng-",!0):le&&(ce=le),U.addClass&&(ue+=a(U.addClass,"-add")),U.removeClass&&(ue.length&&(ue+=" "),ue+=a(U.removeClass,"-remove")),U.applyClassesEarly&&ue.length&&M(e,U);var de=[ce,ue].join(" ").trim(),pe=ae+" "+de,fe=a(de,"-active"),ae=oe.to&&0<Object.keys(oe.to).length;if(!(0<(U.keyframeStyle||"").length||ae||de))return j();var he,ge;0<U.stagger?(oe=parseFloat(U.stagger),ge={transitionDelay:oe,animationDelay:oe,transitionDuration:0,animationDuration:0}):(he=v(V,pe),ge=C(V,de,he,J)),U.$$skipPreparationClasses||n.addClass(e,de),U.transitionStyle&&(oe=[T,U.transitionStyle],w(V,oe),re.push(oe)),0<=U.duration&&(oe=0<V.style[T].length,oe=k(U.duration,oe),w(V,oe),re.push(oe)),U.keyframeStyle&&(oe=[_,U.keyframeStyle],w(V,oe),re.push(oe));var me=ge?0<=U.staggerIndex?U.staggerIndex:t.count(he):0;(le=0===me)&&!U.skipBlocking&&b(V,9999);var ye=I(V,pe,he),ve=ye.maxDelay;X=Math.max(ve,0),te=ye.maxDuration;var be={};if(be.hasTransitions=0<ye.transitionDuration,be.hasAnimations=0<ye.animationDuration,be.hasTransitionAll=be.hasTransitions&&"all"==ye.transitionProperty,be.applyTransitionDuration=ae&&(be.hasTransitions&&!be.hasTransitionAll||be.hasAnimations&&!be.hasTransitions),be.applyAnimationDuration=U.duration&&be.hasAnimations,be.applyTransitionDelay=D(U.delay)&&(be.applyTransitionDuration||be.hasTransitions),be.applyAnimationDelay=D(U.delay)&&be.hasAnimations,be.recalculateTimingStyles=0<ue.length,(be.applyTransitionDuration||be.applyAnimationDuration)&&(te=U.duration?parseFloat(U.duration):te,be.applyTransitionDuration&&(be.hasTransitions=!0,ye.transitionDuration=te,oe=0<V.style[T+"Property"].length,re.push(k(te,oe))),be.applyAnimationDuration&&(be.hasAnimations=!0,ye.animationDuration=te,re.push([H,te+"s"]))),0===te&&!be.recalculateTimingStyles)return j();if(null!=U.delay){var $e;"boolean"!=typeof U.delay&&($e=parseFloat(U.delay),X=Math.max($e,0)),be.applyTransitionDelay&&re.push([z,$e+"s"]),be.applyAnimationDelay&&re.push([q,$e+"s"])}return null==U.duration&&0<ye.transitionDuration&&(be.recalculateTimingStyles=be.recalculateTimingStyles||le),ee=1e3*X,ie=1e3*te,U.skipBlocking||(be.blockTransition=0<ye.transitionDuration,be.blockKeyframeAnimation=0<ye.animationDuration&&0<ge.animationDelay&&0===ge.animationDuration),U.from&&(U.cleanupStyles&&O(G,V,Object.keys(U.from)),f(e,U)),be.blockTransition||be.blockKeyframeAnimation?S(te):U.skipBlocking||b(V,!1),{$$willAnimate:!0,end:l,start:function(){if(!W)return Z={end:l,cancel:u,resume:null,pause:null},Y=new o(Z),P(N),Y}}}}]}]).provider("$$animateCssDriver",["$$animationProvider",function(e){e.drivers.push("$$animateCssDriver"),this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$sniffer","$$jqLite","$document",function(e,t,i,n,r,a,o){function s(e){return e.replace(/\bng-\S+\b/g,"")}function l(e,t){return R(e)&&(e=e.split(" ")),R(t)&&(t=t.split(" ")),e.filter(function(e){return-1===t.indexOf(e)}).join(" ")}function c(t,n,r){function a(e){var t={},i=y(e).getBoundingClientRect();return L(["width","height","top","left"],function(e){var n=i[e];switch(e){case"top":n+=f.scrollTop;break;case"left":n+=f.scrollLeft}t[e]=Math.floor(n)+"px"}),t}function o(){var t=s(r.attr("class")||""),i=l(t,d),t=l(d,t),i=e(u,{to:a(r),addClass:"ng-anchor-in "+i,removeClass:"ng-anchor-out "+t,delay:!0});return i.$$willAnimate?i:null}function c(){u.remove(),n.removeClass("ng-animate-shim"),r.removeClass("ng-animate-shim")}var u=j(y(n).cloneNode(!0)),d=s(u.attr("class")||"");n.addClass("ng-animate-shim"),r.addClass("ng-animate-shim"),u.addClass("ng-anchor"),h.append(u);var p;if(t=function(){var t=e(u,{addClass:"ng-anchor-out",delay:!0,from:a(n)});return t.$$willAnimate?t:null}(),!t&&(p=o(),!p))return c();var g=t||p;return{start:function(){function e(){n&&n.end()}var t,n=g.start();return n.done(function(){return n=null,!p&&(p=o())?(n=p.start(),n.done(function(){n=null,c(),t.complete()}),n):(c(),void t.complete())}),t=new i({end:e,cancel:e})}}}function d(e,t,n,r){var a=p(e,x),o=p(t,x),s=[];if(L(r,function(e){(e=c(n,e.out,e.in))&&s.push(e)}),a||o||0!==s.length)return{start:function(){function e(){L(t,function(e){e.end()})}var t=[];a&&t.push(a.start()),o&&t.push(o.start()),L(s,function(e){t.push(e.start())});var n=new i({end:e,cancel:e});return i.all(t,function(e){n.complete(e)}),n}}}function p(t){var i=t.element,n=t.options||{};return t.structural&&(n.event=t.event,n.structural=!0,n.applyClassesEarly=!0,"leave"===t.event&&(n.onDone=n.domOperation)),n.preparationClasses&&(n.event=C(n.event,n.preparationClasses)),t=e(i,n),t.$$willAnimate?t:null}if(!r.animations&&!r.transitions)return x;var f=o[0].body;t=y(n);var h=j(t.parentNode&&11===t.parentNode.nodeType||f.contains(t)?t:f);return u(a),function(e){return e.from&&e.to?d(e.from,e.to,e.classes,e.anchors):p(e)}}]}]).provider("$$animateJs",["$animateProvider",function(e){this.$get=["$injector","$$AnimateRunner","$$jqLite",function(t,i,n){function r(i){i=B(i)?i:i.split(" ");for(var n=[],r={},a=0;a<i.length;a++){var o=i[a],s=e.$$registeredAnimations[o];s&&!r[o]&&(n.push(t.get(s)),r[o]=!0)}return n}var a=u(n);return function(e,t,n,o){function s(){o.domOperation(),a(e,o)}function l(e,t,n,r,a){switch(n){case"animate":t=[t,r.from,r.to,a];break;case"setClass":t=[t,m,y,a];break;case"addClass":t=[t,m,a];break;case"removeClass":t=[t,y,a];break;default:t=[t,a]}if(t.push(r),e=e.apply(e,t))if(V(e.start)&&(e=e.start()),e instanceof i)e.done(a);else if(V(e))return e;return x}function c(e,t,n,r,a){var o=[];return L(r,function(r){var s=r[a];s&&o.push(function(){var r,a,o=!1,c=function(e){o||(o=!0,(a||x)(e),r.complete(!e))};return r=new i({end:function(){c()},cancel:function(){c(!0)}}),a=l(s,e,t,n,function(e){c(!1===e)}),r})}),o}function u(e,t,n,r,a){var o=c(e,t,n,r,a);if(0===o.length){var s,l;"beforeSetClass"===a?(s=c(e,"removeClass",n,r,"beforeRemoveClass"),l=c(e,"addClass",n,r,"beforeAddClass")):"setClass"===a&&(s=c(e,"removeClass",n,r,"removeClass"),l=c(e,"addClass",n,r,"addClass")),s&&(o=o.concat(s)),l&&(o=o.concat(l))}if(0!==o.length)return function(e){var t=[];return o.length&&L(o,function(e){t.push(e())}),t.length?i.all(t,e):e(),function(e){L(t,function(t){e?t.cancel():t.end()})}}}var f=!1;3===arguments.length&&N(n)&&(o=n,n=null),o=d(o),n||(n=e.attr("class")||"",o.addClass&&(n+=" "+o.addClass),o.removeClass&&(n+=" "+o.removeClass));
var h,g,m=o.addClass,y=o.removeClass,v=r(n);if(v.length){var b,$;"leave"==t?($="leave",b="afterLeave"):($="before"+t.charAt(0).toUpperCase()+t.substr(1),b=t),"enter"!==t&&"move"!==t&&(h=u(e,t,o,v,$)),g=u(e,t,o,v,b)}if(h||g){var w;return{$$willAnimate:!0,end:function(){return w?w.end():(f=!0,s(),p(e,o),w=new i,w.complete(!0)),w},start:function(){function t(t){f=!0,s(),p(e,o),w.complete(t)}if(w)return w;w=new i;var n,r=[];return h&&r.push(function(e){n=h(e)}),r.length?r.push(function(e){s(),e(!0)}):s(),g&&r.push(function(e){n=g(e)}),w.setHost({end:function(){f||((n||x)(void 0),t(void 0))},cancel:function(){f||((n||x)(!0),t(!0))}}),i.chain(r,t),w}}}}}]}]).provider("$$animateJsDriver",["$$animationProvider",function(e){e.drivers.push("$$animateJsDriver"),this.$get=["$$animateJs","$$AnimateRunner",function(e,t){function i(t){return e(t.element,t.event,t.classes,t.options)}return function(e){if(!e.from||!e.to)return i(e);var n=i(e.from),r=i(e.to);return n||r?{start:function(){function e(){return function(){L(i,function(e){e.end()})}}var i=[];n&&i.push(n.start()),r&&i.push(r.start()),t.all(i,function(e){a.complete(e)});var a=new t({end:e(),cancel:e()});return a}}:void 0}}]}])}(window,window.angular)},function(e,t){!function(e,t){"use strict";function i(e,i,n){var r=n.baseHref(),a=e[0];return function(e,n,o){var s,l;o=o||{},l=o.expires,s=t.isDefined(o.path)?o.path:r,t.isUndefined(n)&&(l="Thu, 01 Jan 1970 00:00:00 GMT",n=""),t.isString(l)&&(l=new Date(l)),n=encodeURIComponent(e)+"="+encodeURIComponent(n),n=n+(s?";path="+s:"")+(o.domain?";domain="+o.domain:""),n+=l?";expires="+l.toUTCString():"",n+=o.secure?";secure":"",o=n.length+1,4096<o&&i.warn("Cookie '"+e+"' possibly not set or overflowed because it was too large ("+o+" > 4096 bytes)!"),a.cookie=n}}t.module("ngCookies",["ng"]).provider("$cookies",[function(){var e=this.defaults={};this.$get=["$$cookieReader","$$cookieWriter",function(i,n){return{get:function(e){return i()[e]},getObject:function(e){return(e=this.get(e))?t.fromJson(e):e},getAll:function(){return i()},put:function(i,r,a){n(i,r,a?t.extend({},e,a):e)},putObject:function(e,i,n){this.put(e,t.toJson(i),n)},remove:function(i,r){n(i,void 0,r?t.extend({},e,r):e)}}}]}]),t.module("ngCookies").factory("$cookieStore",["$cookies",function(e){return{get:function(t){return e.getObject(t)},put:function(t,i){e.putObject(t,i)},remove:function(t){e.remove(t)}}}]),i.$inject=["$document","$log","$browser"],t.module("ngCookies").provider("$$cookieWriter",function(){this.$get=i})}(window,window.angular)},function(e,t){!function(e,t){"use strict";function i(e,i){i=i||{},t.forEach(i,function(e,t){delete i[t]});for(var n in e)!e.hasOwnProperty(n)||"$"===n.charAt(0)&&"$"===n.charAt(1)||(i[n]=e[n]);return i}var n=t.$$minErr("$resource"),r=/^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;t.module("ngResource",["ng"]).provider("$resource",function(){var e=/^https?:\/\/[^\/]*/,a=this;this.defaults={stripTrailingSlashes:!0,actions:{get:{method:"GET"},save:{method:"POST"},query:{method:"GET",isArray:!0},remove:{method:"DELETE"},delete:{method:"DELETE"}}},this.$get=["$http","$log","$q","$timeout",function(o,s,l,c){function u(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,t?"%20":"+")}function d(e,t){this.template=e,this.defaults=g({},a.defaults,t),this.urlParams={}}function p(e,u,v,b){function $(e,i){var a={};return i=g({},u,i),h(i,function(i,o){y(i)&&(i=i());var s;if(i&&i.charAt&&"@"==i.charAt(0)){s=e;var l=i.substr(1);if(null==l||""===l||"hasOwnProperty"===l||!r.test("."+l))throw n("badmember",l);for(var l=l.split("."),c=0,u=l.length;c<u&&t.isDefined(s);c++){var d=l[c];s=null!==s?s[d]:void 0}}else s=i;a[o]=s}),a}function w(e){return e.resource}function C(e){i(e||{},this)}var S=new d(e,b);return v=g({},a.defaults.actions,v),C.prototype.toJSON=function(){var e=g({},this);return delete e.$promise,delete e.$resolved,e},h(v,function(e,r){var u=/^(POST|PUT|PATCH)$/i.test(e.method),d=e.timeout,p=t.isDefined(e.cancellable)?e.cancellable:b&&t.isDefined(b.cancellable)?b.cancellable:a.defaults.cancellable;d&&!t.isNumber(d)&&(s.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option."),delete e.timeout,d=null),C[r]=function(a,s,v,b){var P,D,k,I={};switch(arguments.length){case 4:k=b,D=v;case 3:case 2:if(!y(s)){I=a,P=s,D=v;break}if(y(a)){D=a,k=s;break}D=s,k=v;case 1:y(a)?D=a:u?P=a:I=a;break;case 0:break;default:throw n("badargs",arguments.length)}var O,T,A=this instanceof C,_=A?P:e.isArray?[]:new C(P),E={},x=e.interceptor&&e.interceptor.response||w,F=e.interceptor&&e.interceptor.responseError||void 0;return h(e,function(e,t){switch(t){default:E[t]=m(e);case"params":case"isArray":case"interceptor":case"cancellable":}}),!A&&p&&(O=l.defer(),E.timeout=O.promise,d&&(T=c(O.resolve,d))),u&&(E.data=P),S.setUrlParams(E,g({},$(P,e.params||{}),I),e.url),I=o(E).then(function(a){var o=a.data;if(o){if(t.isArray(o)!==!!e.isArray)throw n("badcfg",r,e.isArray?"array":"object",t.isArray(o)?"array":"object",E.method,E.url);if(e.isArray)_.length=0,h(o,function(e){"object"==typeof e?_.push(new C(e)):_.push(e)});else{var s=_.$promise;i(o,_),_.$promise=s}}return a.resource=_,a},function(e){return(k||f)(e),l.reject(e)}),I.finally(function(){_.$resolved=!0,!A&&p&&(_.$cancelRequest=t.noop,c.cancel(T),O=T=E.timeout=null)}),I=I.then(function(e){var t=x(e);return(D||f)(t,e.headers),t},F),A?I:(_.$promise=I,_.$resolved=!1,p&&(_.$cancelRequest=O.resolve),_)},C.prototype["$"+r]=function(e,t,i){return y(e)&&(i=t,t=e,e={}),e=C[r].call(this,e,this,t,i),e.$promise||e}}),C.bind=function(t){return p(e,g({},u,t),v)},C}var f=t.noop,h=t.forEach,g=t.extend,m=t.copy,y=t.isFunction;return d.prototype={setUrlParams:function(i,r,a){var o,s,l=this,c=a||l.template,d="",p=l.urlParams={};h(c.split(/\W/),function(e){if("hasOwnProperty"===e)throw n("badname");!/^\d+$/.test(e)&&e&&new RegExp("(^|[^\\\\]):"+e+"(\\W|$)").test(c)&&(p[e]={isQueryParamValue:new RegExp("\\?.*=:"+e+"(?:\\W|$)").test(c)})}),c=c.replace(/\\:/g,":"),c=c.replace(e,function(e){return d=e,""}),r=r||{},h(l.urlParams,function(e,i){o=r.hasOwnProperty(i)?r[i]:l.defaults[i],t.isDefined(o)&&null!==o?(s=e.isQueryParamValue?u(o,!0):u(o,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+"),c=c.replace(new RegExp(":"+i+"(\\W|$)","g"),function(e,t){return s+t})):c=c.replace(new RegExp("(/?):"+i+"(\\W|$)","g"),function(e,t,i){return"/"==i.charAt(0)?i:t+i})}),l.defaults.stripTrailingSlashes&&(c=c.replace(/\/+$/,"")||"/"),c=c.replace(/\/\.(?=\w+($|\?))/,"."),i.url=d+c.replace(/\/\\\./,"/."),h(r,function(e,t){l.urlParams[t]||(i.params=i.params||{},i.params[t]=e)})}},p}]})}(window,window.angular)},function(e,t){!function(e,t){"use strict";function i(e,i,n){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(r,a,o,s,l){function c(){f&&(n.cancel(f),f=null),d&&(d.$destroy(),d=null),p&&(f=n.leave(p),f.then(function(){f=null}),p=null)}function u(){var o=e.current&&e.current.locals;if(t.isDefined(o&&o.$template)){var o=r.$new(),s=e.current;p=l(o,function(e){n.enter(e,null,p||a).then(function(){!t.isDefined(h)||h&&!r.$eval(h)||i()}),c()}),d=s.scope=o,d.$emit("$viewContentLoaded"),d.$eval(g)}else c()}var d,p,f,h=o.autoscroll,g=o.onload||"";r.$on("$routeChangeSuccess",u),u()}}}function n(e,t,i){return{restrict:"ECA",priority:-400,link:function(n,r){var a=i.current,o=a.locals;r.html(o.$template);var s=e(r.contents());if(a.controller){o.$scope=n;var l=t(a.controller,o);a.controllerAs&&(n[a.controllerAs]=l),r.data("$ngControllerController",l),r.children().data("$ngControllerController",l)}n[a.resolveAs||"$resolve"]=o,s(n)}}}var r=t.module("ngRoute",["ng"]).provider("$route",function(){function e(e,i){return t.extend(Object.create(e),i)}function i(e,t){var i=t.caseInsensitiveMatch,n={originalPath:e,regexp:e},r=n.keys=[];return e=e.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)(\*\?|[\?\*])?/g,function(e,t,i,n){return e="?"===n||"*?"===n?"?":null,n="*"===n||"*?"===n?"*":null,r.push({name:i,optional:!!e}),t=t||"",""+(e?"":t)+"(?:"+(e?t:"")+(n&&"(.+?)"||"([^/]+)")+(e||"")+")"+(e||"")}).replace(/([\/$\*])/g,"\\$1"),n.regexp=new RegExp("^"+e+"$",i?"i":""),n}var n={};this.when=function(e,r){var a=t.copy(r);if(t.isUndefined(a.reloadOnSearch)&&(a.reloadOnSearch=!0),t.isUndefined(a.caseInsensitiveMatch)&&(a.caseInsensitiveMatch=this.caseInsensitiveMatch),n[e]=t.extend(a,e&&i(e,a)),e){var o="/"==e[e.length-1]?e.substr(0,e.length-1):e+"/";n[o]=t.extend({redirectTo:e},i(o,a))}return this},this.caseInsensitiveMatch=!1,this.otherwise=function(e){return"string"==typeof e&&(e={redirectTo:e}),this.when(null,e),this},this.$get=["$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce",function(i,r,o,s,l,c,u){function d(e){var n=v.current;(m=(g=f())&&n&&g.$$route===n.$$route&&t.equals(g.pathParams,n.pathParams)&&!g.reloadOnSearch&&!y)||!n&&!g||i.$broadcast("$routeChangeStart",g,n).defaultPrevented&&e&&e.preventDefault()}function p(){var e=v.current,n=g;m?(e.params=n.params,t.copy(e.params,o),i.$broadcast("$routeUpdate",e)):(n||e)&&(y=!1,(v.current=n)&&n.redirectTo&&(t.isString(n.redirectTo)?r.path(h(n.redirectTo,n.params)).search(n.params).replace():r.url(n.redirectTo(n.pathParams,r.path(),r.search())).replace()),s.when(n).then(function(){if(n){var e,i,r=t.extend({},n.resolve);return t.forEach(r,function(e,i){r[i]=t.isString(e)?l.get(e):l.invoke(e,null,null,i)}),t.isDefined(e=n.template)?t.isFunction(e)&&(e=e(n.params)):t.isDefined(i=n.templateUrl)&&(t.isFunction(i)&&(i=i(n.params)),t.isDefined(i)&&(n.loadedTemplateUrl=u.valueOf(i),e=c(i))),t.isDefined(e)&&(r.$template=e),s.all(r)}}).then(function(r){n==v.current&&(n&&(n.locals=r,t.copy(n.params,o)),i.$broadcast("$routeChangeSuccess",n,e))},function(t){n==v.current&&i.$broadcast("$routeChangeError",n,e,t)}))}function f(){var i,a;return t.forEach(n,function(n,o){var s;if(s=!a){var l=r.path();s=n.keys;var c={};if(n.regexp)if(l=n.regexp.exec(l)){for(var u=1,d=l.length;u<d;++u){var p=s[u-1],f=l[u];p&&f&&(c[p.name]=f)}s=c}else s=null;else s=null;s=i=s}s&&(a=e(n,{params:t.extend({},r.search(),i),pathParams:i}),a.$$route=n)}),a||n[null]&&e(n[null],{params:{},pathParams:{}})}function h(e,i){var n=[];return t.forEach((e||"").split(":"),function(e,t){if(0===t)n.push(e);else{var r=e.match(/(\w+)(?:[?*])?(.*)/),a=r[1];n.push(i[a]),n.push(r[2]||""),delete i[a]}}),n.join("")}var g,m,y=!1,v={routes:n,reload:function(){y=!0;var e={defaultPrevented:!1,preventDefault:function(){this.defaultPrevented=!0,y=!1}};i.$evalAsync(function(){d(e),e.defaultPrevented||p()})},updateParams:function(e){if(!this.current||!this.current.$$route)throw a("norout");e=t.extend({},this.current.params,e),r.path(h(this.current.$$route.originalPath,e)),r.search(e)}};return i.$on("$locationChangeStart",d),i.$on("$locationChangeSuccess",p),v}]}),a=t.$$minErr("ngRoute");r.provider("$routeParams",function(){this.$get=function(){return{}}}),r.directive("ngView",i),r.directive("ngView",n),i.$inject=["$route","$anchorScroll","$animate"],n.$inject=["$compile","$controller","$route"]}(window,window.angular)},function(e,t){!function(e,t){"use strict";function i(e){var i=[];return s(i,t.noop).chars(e),i.join("")}function n(e,i){var n,r={},a=e.split(",");for(n=0;n<a.length;n++)r[i?t.lowercase(a[n]):a[n]]=!0;return r}function r(t,i){null===t||void 0===t?t="":"string"!=typeof t&&(t=""+t),c.innerHTML=t;var n=5;do{if(0===n)throw u("uinput");n--,e.document.documentMode&&l(c),t=c.innerHTML,c.innerHTML=t}while(t!==c.innerHTML);for(n=c.firstChild;n;){switch(n.nodeType){case 1:i.start(n.nodeName.toLowerCase(),a(n.attributes));break;case 3:i.chars(n.textContent)}var r;if(!(r=n.firstChild)&&(1==n.nodeType&&i.end(n.nodeName.toLowerCase()),r=n.nextSibling,!r))for(;null==r&&(n=n.parentNode,n!==c);)r=n.nextSibling,1==n.nodeType&&i.end(n.nodeName.toLowerCase());n=r}for(;n=c.firstChild;)c.removeChild(n)}function a(e){for(var t={},i=0,n=e.length;i<n;i++){var r=e[i];t[r.name]=r.value}return t}function o(e){return e.replace(/&/g,"&amp;").replace(d,function(e){var t=e.charCodeAt(0);return e=e.charCodeAt(1),"&#"+(1024*(t-55296)+(e-56320)+65536)+";"}).replace(p,function(e){return"&#"+e.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function s(e,i){var n=!1,r=t.bind(e,e.push);return{start:function(e,a){e=t.lowercase(e),!n&&v[e]&&(n=e),n||!0!==b[e]||(r("<"),r(e),t.forEach(a,function(n,a){var s=t.lowercase(a),l="img"===e&&"src"===s||"background"===s;!0!==w[s]||!0===$[s]&&!i(n,l)||(r(" "),r(a),r('="'),r(o(n)),r('"'))}),r(">"))},end:function(e){e=t.lowercase(e),n||!0!==b[e]||!0===f[e]||(r("</"),r(e),r(">")),e==n&&(n=!1)},chars:function(e){n||r(o(e))}}}function l(t){if(t.nodeType===e.Node.ELEMENT_NODE)for(var i=t.attributes,n=0,r=i.length;n<r;n++){var a=i[n],o=a.name.toLowerCase();"xmlns:ns1"!==o&&0!==o.indexOf("ns1:")||(t.removeAttributeNode(a),n--,r--)}(i=t.firstChild)&&l(i),(i=t.nextSibling)&&l(i)}var c,u=t.$$minErr("$sanitize"),d=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,p=/([^\#-~ |!])/g,f=n("area,br,col,hr,img,wbr"),h=n("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),g=n("rp,rt"),m=t.extend({},g,h),h=t.extend({},h,n("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul")),g=t.extend({},g,n("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),y=n("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan"),v=n("script,style"),b=t.extend({},f,h,g,m),$=n("background,cite,href,longdesc,src,xlink:href"),m=n("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),g=n("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",!0),w=t.extend({},$,g,m);!function(e){if(!e.document||!e.document.implementation)throw u("noinert");e=e.document.implementation.createHTMLDocument("inert");var t=(e.documentElement||e.getDocumentElement()).getElementsByTagName("body");1===t.length?c=t[0]:(t=e.createElement("html"),c=e.createElement("body"),t.appendChild(c),e.appendChild(t))}(e),t.module("ngSanitize",[]).provider("$sanitize",function(){var e=!1;this.$get=["$$sanitizeUri",function(i){return e&&t.extend(b,y),function(e){var t=[];return r(e,s(t,function(e,t){return!/^unsafe:/.test(i(e,t))})),t.join("")}}],this.enableSvg=function(i){return t.isDefined(i)?(e=i,this):e}}),t.module("ngSanitize").filter("linky",["$sanitize",function(e){var n=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,r=/^mailto:/i,a=t.$$minErr("linky"),o=t.isString;return function(s,l,c){function u(e){e&&g.push(i(e))}function d(e,i){var n;if(g.push("<a "),t.isFunction(c)&&(c=c(e)),t.isObject(c))for(n in c)g.push(n+'="'+c[n]+'" ');else c={};!t.isDefined(l)||"target"in c||g.push('target="',l,'" '),g.push('href="',e.replace(/"/g,"&quot;"),'">'),u(i),g.push("</a>")}if(null==s||""===s)return s;if(!o(s))throw a("notstring",s);for(var p,f,h=s,g=[];s=h.match(n);)p=s[0],s[2]||s[4]||(p=(s[3]?"http://":"mailto:")+p),f=s.index,u(h.substr(0,f)),d(p,s[0].replace(r,"")),h=h.substring(f+s[0].length);return u(h),e(g.join(""))}}])}(window,window.angular)},function(e,t){!function(){"use strict";angular.module("angularjs-datetime-picker",[]);var e=function(e){"string"==typeof e&&(e=new Date(e));var t=new Date(e.getFullYear(),0,1),i=new Date(e.getFullYear(),6,1),n=Math.max(t.getTimezoneOffset(),i.getTimezoneOffset()),r=e.getTimezoneOffset()<n,a=r?n-60:n,o=a>=0?"-":"+";return o+("0"+a/60).slice(-2)+":"+("0"+a%60).slice(-2)},t=function(e,t,i){var n=i("DatetimePickerCtrl");return{open:function(e){n.openDatetimePicker(e)},close:function(){n.closeDatetimePicker()}}};t.$inject=["$compile","$document","$controller"],angular.module("angularjs-datetime-picker").factory("DatetimePicker",t);var i=function(e,t){var i,n=this,r=function(e){e&&e.remove(),t[0].body.removeEventListener("click",n.closeDatetimePicker)};this.openDatetimePicker=function(n){this.closeDatetimePicker();var r=angular.element("<div datetime-picker-popup ng-cloak></div>");n.dateFormat&&r.attr("date-format",n.dateFormat),n.ngModel&&r.attr("ng-model",n.ngModel),n.year&&r.attr("year",parseInt(n.year)),n.month&&r.attr("month",parseInt(n.month)),n.day&&r.attr("day",parseInt(n.day)),n.hour&&r.attr("hour",parseInt(n.hour)),n.minute&&r.attr("minute",parseInt(n.minute)),n.dateOnly&&r.attr("date-only","true"),n.timeOnly&&r.attr("time-only","true"),"false"===n.closeOnSelect&&r.attr("close-on-select","false");var a=n.triggerEl;n.scope=n.scope||angular.element(a).scope(),i=e(r)(n.scope)[0],i.triggerEl=n.triggerEl,t[0].body.appendChild(i);var o=a.getBoundingClientRect();n.scope.$apply();var s=i.getBoundingClientRect();i.style.position="absolute",o.width>s.width?i.style.left=o.left+o.width-s.width+window.scrollX+"px":i.style.left=o.left+window.scrollX+"px",o.top<300||window.innerHeight-o.bottom>300?i.style.top=o.bottom+window.scrollY+"px":i.style.top=o.top-s.height+window.scrollY+"px",t[0].body.addEventListener("click",this.closeDatetimePicker)},this.closeDatetimePicker=function(e){var i=e&&e.target,n=t[0].querySelector("div[datetime-picker-popup]");e&&i?i.hasAttribute("datetime-picker")||n&&n.contains(i)||r(n):r(n)}};i.$inject=["$compile","$document"],angular.module("angularjs-datetime-picker").controller("DatetimePickerCtrl",i);var n=['<div class="angularjs-datetime-picker">','  <div class="adp-month">','    <button type="button" class="adp-prev" ng-click="addMonth(-1)">&laquo;</button>','    <span title="{{months[mv.month].fullName}}">{{months[mv.month].shortName}}</span> {{mv.year}}','    <button type="button" class="adp-next" ng-click="addMonth(1)">&raquo;</button>',"  </div>",'  <div class="adp-days" ng-click="setDate($event)">','    <div class="adp-day-of-week" ng-repeat="dayOfWeek in ::daysOfWeek" title="{{dayOfWeek.fullName}}">{{::dayOfWeek.firstLetter}}</div>','    <div class="adp-day" ng-show="mv.leadingDays.length < 7" ng-repeat="day in mv.leadingDays">{{::day}}</div>','    <div class="adp-day selectable" ng-repeat="day in mv.days" ',"      today=\"{{today}}\" d2=\"{{mv.year + '-' + (mv.month + 1) + '-' + day}}\"",'      ng-class="{',"        selected: (day == selectedDay),","        today: (today == (mv.year + '-' + (mv.month + 1) + '-' + day)),","        weekend: (mv.leadingDays.length + day)%7 == 1 || (mv.leadingDays.length + day)%7 == 0",'      }">',"      {{::day}}","    </div>",'    <div class="adp-day" ng-show="mv.trailingDays.length < 7" ng-repeat="day in mv.trailingDays">{{::day}}</div>',"  </div>",'  <div class="adp-days" id="adp-time"> ','    <label class="timeLabel">Time:</label> <span class="timeValue">{{("0"+inputHour).slice(-2)}} : {{("0"+inputMinute).slice(-2)}}</span><br/>','    <label class="hourLabel">Hour:</label> <input class="hourInput" type="range" min="0" max="23" ng-model="inputHour" ng-change="updateNgModel()" />','    <label class="minutesLabel">Min:</label> <input class="minutesInput" type="range" min="0" max="59" ng-model="inputMinute"  ng-change="updateNgModel()"/> ',"  </div> ","</div>"].join("\n"),r=function(t,i){var r,a,o,s,l=function(){r=[],a=[],o=[],s=0;for(var e=1;e<=31;e++)r.push(e);for(var e=0;e<12;e++)a.push({fullName:t.DATETIME_FORMATS.MONTH[e],shortName:t.DATETIME_FORMATS.SHORTMONTH[e]});for(var e=0;e<7;e++){var i=t.DATETIME_FORMATS.DAY[(e+s)%7];o.push({fullName:i,firstLetter:i.substr(0,1)})}s=0},c=function(e,t){t>11?e++:t<0&&e--,t=(t+12)%12;var i=new Date(e,t,1),n=new Date(e,t+1,0),a=new Date(e,t,0),o=n.getDate(),l=a.getDate(),c=i.getDay(),u=(c-s+7)%7||7,d=r.slice(0,42-(u+o));return d.length>7&&(d=d.slice(0,d.length-7)),{year:e,month:t,days:r.slice(0,o),leadingDays:r.slice(-u-(31-l),l),trailingDays:d}},u=function(t,n,r,s){l();var u=r.dateFormat||"short";t.months=a,t.daysOfWeek=o,t.inputHour,t.inputMinute,t.dateOnly===!0&&(n[0].querySelector("#adp-time").style.display="none"),t.timeOnly===!0&&(n[0].querySelector(".adp-month").style.display="none",n[0].querySelector(".adp-days").style.display="none"),t.$applyAsync(function(){if(s.triggerEl=angular.element(n[0].triggerEl),r.ngModel){var a=""+s.triggerEl.scope().$eval(r.ngModel);if(a){a.match(/[0-9]{2}:/)||(a+=" 00:00:00"),a=a.replace(/([0-9]{2}-[0-9]{2})-([0-9]{4})/,"$2-$1"),a=a.replace(/([\/-][0-9]{2,4})\ ([0-9]{2}\:[0-9]{2}\:)/,"$1T$2"),a=a.replace(/EDT|EST|CDT|CST|MDT|PDT|PST|UT|GMT/g,""),a=a.replace(/\s*\(\)\s*/,""),a=a.replace(/[\-\+][0-9]{2}:?[0-9]{2}$/,""),a+=e(a);var o=new Date(a);t.selectedDate=new Date(o.getFullYear(),o.getMonth(),o.getDate(),o.getHours(),o.getMinutes(),o.getSeconds())}}if(!t.selectedDate||isNaN(t.selectedDate.getTime())){var l=new Date,u=t.year||l.getFullYear(),d=t.month?t.month-1:l.getMonth(),p=t.day||l.getDate(),f=t.hour||l.getHours(),h=t.minute||l.getMinutes();t.selectedDate=new Date(u,d,p,f,h,0)}t.inputHour=t.selectedDate.getHours(),t.inputMinute=t.selectedDate.getMinutes(),t.mv=c(t.selectedDate.getFullYear(),t.selectedDate.getMonth()),t.today=i(new Date,"yyyy-M-d"),t.mv.year==t.selectedDate.getFullYear()&&t.mv.month==t.selectedDate.getMonth()?t.selectedDay=t.selectedDate.getDate():t.selectedDay=null}),t.addMonth=function(e){t.mv=c(t.mv.year,t.mv.month+e)},t.setDate=function(e){var i=angular.element(e.target)[0];i.className.indexOf("selectable")!==-1&&(t.updateNgModel(parseInt(i.innerHTML)),t.closeOnSelect!==!1&&s.closeDatetimePicker())},t.updateNgModel=function(e){if(e=e?e:t.selectedDate.getDate(),t.selectedDate=new Date(t.mv.year,t.mv.month,e,t.inputHour,t.inputMinute,0),t.selectedDay=t.selectedDate.getDate(),r.ngModel){var n,a=s.triggerEl.scope();n=a.$eval(r.ngModel)&&"Date"===a.$eval(r.ngModel).constructor.name?new Date(i(t.selectedDate,u)):i(t.selectedDate,u),a.$eval(r.ngModel+"= date",{date:n})}},t.$on("$destroy",s.closeDatetimePicker)};return{restrict:"A",template:n,controller:"DatetimePickerCtrl",replace:!0,scope:{year:"=",month:"=",day:"=",hour:"=",minute:"=",dateOnly:"=",timeOnly:"=",closeOnSelect:"="},link:u}};r.$inject=["$locale","dateFilter"],angular.module("angularjs-datetime-picker").directive("datetimePickerPopup",r);var a=function(e,t){return{require:"ngModel",link:function(e,i,n,r){e.$watch(n.ngModel,function(e){if(e&&""!=e){var t=new Date(e);r.$setValidity("date",!!t);var i=new Date;n.hasOwnProperty("futureOnly")&&r.$setValidity("future-only",!(t<i))}}),i[0].addEventListener("click",function(){t.open({triggerEl:i[0],dateFormat:n.dateFormat,ngModel:n.ngModel,year:n.year,month:n.month,day:n.day,hour:n.hour,minute:n.minute,dateOnly:n.dateOnly,timeOnly:n.timeOnly,futureOnly:n.futureOnly,closeOnSelect:n.closeOnSelect})})}}};a.$inject=["$parse","DatetimePicker"],angular.module("angularjs-datetime-picker").directive("datetimePicker",a)}()},function(e,t){Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|after|from)/i,subtract:/^(\-|before|ago)/i,yesterday:/^yesterday/i,today:/^t(oday)?/i,tomorrow:/^tomorrow/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^min(ute)?s?/i,hour:/^h(ou)?rs?/i,week:/^w(ee)?k/i,month:/^m(o(nth)?s?)?/i,day:/^d(ays?)?/i,year:/^y((ea)?rs?)?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a|p)/i},abbreviatedTimeZoneStandard:{GMT:"-000",EST:"-0400",CST:"-0500",MST:"-0600",PST:"-0700"},abbreviatedTimeZoneDST:{GMT:"-000",EDT:"-0500",CDT:"-0600",MDT:"-0700",PDT:"-0800"}},Date.getMonthNumberFromName=function(e){for(var t=Date.CultureInfo.monthNames,i=Date.CultureInfo.abbreviatedMonthNames,n=e.toLowerCase(),r=0;r<t.length;r++)if(t[r].toLowerCase()==n||i[r].toLowerCase()==n)return r;return-1},Date.getDayNumberFromName=function(e){for(var t=Date.CultureInfo.dayNames,i=Date.CultureInfo.abbreviatedDayNames,n=(Date.CultureInfo.shortestDayNames,e.toLowerCase()),r=0;r<t.length;r++)if(t[r].toLowerCase()==n||i[r].toLowerCase()==n)return r;return-1},Date.isLeapYear=function(e){return e%4===0&&e%100!==0||e%400===0},Date.getDaysInMonth=function(e,t){return[31,Date.isLeapYear(e)?29:28,31,30,31,30,31,31,30,31,30,31][t]},Date.getTimezoneOffset=function(e,t){return t?Date.CultureInfo.abbreviatedTimeZoneDST[e.toUpperCase()]:Date.CultureInfo.abbreviatedTimeZoneStandard[e.toUpperCase()]},Date.getTimezoneAbbreviation=function(e,t){var i,n=t?Date.CultureInfo.abbreviatedTimeZoneDST:Date.CultureInfo.abbreviatedTimeZoneStandard;for(i in n)if(n[i]===e)return i;return null},Date.prototype.clone=function(){return new Date(this.getTime())},Date.prototype.compareTo=function(e){if(isNaN(this))throw new Error(this);if(e instanceof Date&&!isNaN(e))return this>e?1:e>this?-1:0;throw new TypeError(e)},Date.prototype.equals=function(e){return 0===this.compareTo(e)},Date.prototype.between=function(e,t){var i=this.getTime();return i>=e.getTime()&&i<=t.getTime()},Date.prototype.addMilliseconds=function(e){return this.setMilliseconds(this.getMilliseconds()+e),this},Date.prototype.addSeconds=function(e){return this.addMilliseconds(1e3*e)},Date.prototype.addMinutes=function(e){return this.addMilliseconds(6e4*e)},Date.prototype.addHours=function(e){return this.addMilliseconds(36e5*e)},Date.prototype.addDays=function(e){return this.addMilliseconds(864e5*e)},Date.prototype.addWeeks=function(e){return this.addMilliseconds(6048e5*e)},Date.prototype.addMonths=function(e){var t=this.getDate();return this.setDate(1),this.setMonth(this.getMonth()+e),this.setDate(Math.min(t,this.getDaysInMonth())),this},Date.prototype.addYears=function(e){return this.addMonths(12*e)},Date.prototype.add=function(e){if("number"==typeof e)return this._orient=e,this;var t=e;return(t.millisecond||t.milliseconds)&&this.addMilliseconds(t.millisecond||t.milliseconds),(t.second||t.seconds)&&this.addSeconds(t.second||t.seconds),(t.minute||t.minutes)&&this.addMinutes(t.minute||t.minutes),(t.hour||t.hours)&&this.addHours(t.hour||t.hours),(t.month||t.months)&&this.addMonths(t.month||t.months),(t.year||t.years)&&this.addYears(t.year||t.years),(t.day||t.days)&&this.addDays(t.day||t.days),this},Date._validate=function(e,t,i,n){if("number"!=typeof e)throw new TypeError(e+" is not a Number.");if(t>e||e>i)throw new RangeError(e+" is not a valid value for "+n+".");return!0},Date.validateMillisecond=function(e){return Date._validate(e,0,999,"milliseconds")},Date.validateSecond=function(e){return Date._validate(e,0,59,"seconds")},Date.validateMinute=function(e){return Date._validate(e,0,59,"minutes")},Date.validateHour=function(e){return Date._validate(e,0,23,"hours")},Date.validateDay=function(e,t,i){return Date._validate(e,1,Date.getDaysInMonth(t,i),"days")},Date.validateMonth=function(e){return Date._validate(e,0,11,"months")},Date.validateYear=function(e){return Date._validate(e,1,9999,"seconds")},Date.prototype.set=function(e){var t=e;return t.millisecond||0===t.millisecond||(t.millisecond=-1),t.second||0===t.second||(t.second=-1),t.minute||0===t.minute||(t.minute=-1),t.hour||0===t.hour||(t.hour=-1),t.day||0===t.day||(t.day=-1),t.month||0===t.month||(t.month=-1),t.year||0===t.year||(t.year=-1),-1!=t.millisecond&&Date.validateMillisecond(t.millisecond)&&this.addMilliseconds(t.millisecond-this.getMilliseconds()),-1!=t.second&&Date.validateSecond(t.second)&&this.addSeconds(t.second-this.getSeconds()),-1!=t.minute&&Date.validateMinute(t.minute)&&this.addMinutes(t.minute-this.getMinutes()),-1!=t.hour&&Date.validateHour(t.hour)&&this.addHours(t.hour-this.getHours()),-1!==t.month&&Date.validateMonth(t.month)&&this.addMonths(t.month-this.getMonth()),-1!=t.year&&Date.validateYear(t.year)&&this.addYears(t.year-this.getFullYear()),-1!=t.day&&Date.validateDay(t.day,this.getFullYear(),this.getMonth())&&this.addDays(t.day-this.getDate()),t.timezone&&this.setTimezone(t.timezone),t.timezoneOffset&&this.setTimezoneOffset(t.timezoneOffset),this},Date.prototype.clearTime=function(){return this.setHours(0),this.setMinutes(0),this.setSeconds(0),this.setMilliseconds(0),this},Date.prototype.isLeapYear=function(){var e=this.getFullYear();return e%4===0&&e%100!==0||e%400===0},Date.prototype.isWeekday=function(){return!(this.is().sat()||this.is().sun())},Date.prototype.getDaysInMonth=function(){return Date.getDaysInMonth(this.getFullYear(),this.getMonth())},Date.prototype.moveToFirstDayOfMonth=function(){return this.set({day:1})},Date.prototype.moveToLastDayOfMonth=function(){return this.set({day:this.getDaysInMonth()})},Date.prototype.moveToDayOfWeek=function(e,t){var i=(e-this.getDay()+7*(t||1))%7;return this.addDays(0===i?i+=7*(t||1):i)},Date.prototype.moveToMonth=function(e,t){var i=(e-this.getMonth()+12*(t||1))%12;return this.addMonths(0===i?i+=12*(t||1):i)},Date.prototype.getDayOfYear=function(){return Math.floor((this-new Date(this.getFullYear(),0,1))/864e5)},Date.prototype.getWeekOfYear=function(e){var t=this.getFullYear(),i=this.getMonth(),n=this.getDate(),r=e||Date.CultureInfo.firstDayOfWeek,a=8-new Date(t,0,1).getDay();
8==a&&(a=1);var o=(Date.UTC(t,i,n,0,0,0)-Date.UTC(t,0,1,0,0,0))/864e5+1,s=Math.floor((o-a+7)/7);if(s===r){t--;var l=8-new Date(t,0,1).getDay();s=2==l||8==l?53:52}return s},Date.prototype.isDST=function(){return console.log("isDST"),"D"==this.toString().match(/(E|C|M|P)(S|D)T/)[2]},Date.prototype.getTimezone=function(){return Date.getTimezoneAbbreviation(this.getUTCOffset,this.isDST())},Date.prototype.setTimezoneOffset=function(e){var t=this.getTimezoneOffset(),i=-6*Number(e)/10;return this.addMinutes(i-t),this},Date.prototype.setTimezone=function(e){return this.setTimezoneOffset(Date.getTimezoneOffset(e))},Date.prototype.getUTCOffset=function(){var e,t=-10*this.getTimezoneOffset()/6;return 0>t?(e=(t-1e4).toString(),e[0]+e.substr(2)):(e=(t+1e4).toString(),"+"+e.substr(1))},Date.prototype.getDayName=function(e){return e?Date.CultureInfo.abbreviatedDayNames[this.getDay()]:Date.CultureInfo.dayNames[this.getDay()]},Date.prototype.getMonthName=function(e){return e?Date.CultureInfo.abbreviatedMonthNames[this.getMonth()]:Date.CultureInfo.monthNames[this.getMonth()]},Date.prototype._toString=Date.prototype.toString,Date.prototype.toString=function(e){var t=this,i=function(e){return 1==e.toString().length?"0"+e:e};return e?e.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(e){switch(e){case"hh":return i(t.getHours()<13?t.getHours():t.getHours()-12);case"h":return t.getHours()<13?t.getHours():t.getHours()-12;case"HH":return i(t.getHours());case"H":return t.getHours();case"mm":return i(t.getMinutes());case"m":return t.getMinutes();case"ss":return i(t.getSeconds());case"s":return t.getSeconds();case"yyyy":return t.getFullYear();case"yy":return t.getFullYear().toString().substring(2,4);case"dddd":return t.getDayName();case"ddd":return t.getDayName(!0);case"dd":return i(t.getDate());case"d":return t.getDate().toString();case"MMMM":return t.getMonthName();case"MMM":return t.getMonthName(!0);case"MM":return i(t.getMonth()+1);case"M":return t.getMonth()+1;case"t":return t.getHours()<12?Date.CultureInfo.amDesignator.substring(0,1):Date.CultureInfo.pmDesignator.substring(0,1);case"tt":return t.getHours()<12?Date.CultureInfo.amDesignator:Date.CultureInfo.pmDesignator;case"zzz":case"zz":case"z":return""}}):this._toString()},Date.now=function(){return new Date},Date.today=function(){return Date.now().clearTime()},Date.prototype._orient=1,Date.prototype.next=function(){return this._orient=1,this},Date.prototype.last=Date.prototype.prev=Date.prototype.previous=function(){return this._orient=-1,this},Date.prototype._is=!1,Date.prototype.is=function(){return this._is=!0,this},Number.prototype._dateElement="day",Number.prototype.fromNow=function(){var e={};return e[this._dateElement]=this,Date.now().add(e)},Number.prototype.ago=function(){var e={};return e[this._dateElement]=-1*this,Date.now().add(e)},function(){for(var e,t=Date.prototype,i=Number.prototype,n="sunday monday tuesday wednesday thursday friday saturday".split(/\s/),r="january february march april may june july august september october november december".split(/\s/),a="Millisecond Second Minute Hour Day Week Month Year".split(/\s/),o=function(e){return function(){return this._is?(this._is=!1,this.getDay()==e):this.moveToDayOfWeek(e,this._orient)}},s=0;s<n.length;s++)t[n[s]]=t[n[s].substring(0,3)]=o(s);for(var l=function(e){return function(){return this._is?(this._is=!1,this.getMonth()===e):this.moveToMonth(e,this._orient)}},c=0;c<r.length;c++)t[r[c]]=t[r[c].substring(0,3)]=l(c);for(var u=function(e){return function(){return"s"!=e.substring(e.length-1)&&(e+="s"),this["add"+e](this._orient)}},d=function(e){return function(){return this._dateElement=e,this}},p=0;p<a.length;p++)e=a[p].toLowerCase(),t[e]=t[e+"s"]=u(a[p]),i[e]=i[e+"s"]=d(e)}(),Date.prototype.toJSONString=function(){return this.toString("yyyy-MM-ddThh:mm:ssZ")},Date.prototype.toShortDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern)},Date.prototype.toLongDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.longDatePattern)},Date.prototype.toShortTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern)},Date.prototype.toLongTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.longTimePattern)},Date.prototype.getOrdinal=function(){switch(this.getDate()){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th"}},function(){Date.Parsing={Exception:function(e){this.message="Parse error at '"+e.substring(0,10)+" ...'"}};for(var e=Date.Parsing,t=e.Operators={rtoken:function(t){return function(i){var n=i.match(t);if(n)return[n[0],i.substring(n[0].length)];throw new e.Exception(i)}},token:function(){return function(e){return t.rtoken(new RegExp("^s*"+e+"s*"))(e)}},stoken:function(e){return t.rtoken(new RegExp("^"+e))},until:function(e){return function(t){for(var i=[],n=null;t.length;){try{n=e.call(this,t)}catch(e){i.push(n[0]),t=n[1];continue}break}return[i,t]}},many:function(e){return function(t){for(var i=[],n=null;t.length;){try{n=e.call(this,t)}catch(e){return[i,t]}i.push(n[0]),t=n[1]}return[i,t]}},optional:function(e){return function(t){var i=null;try{i=e.call(this,t)}catch(e){return[null,t]}return[i[0],i[1]]}},not:function(t){return function(i){try{t.call(this,i)}catch(e){return[null,i]}throw new e.Exception(i)}},ignore:function(e){return e?function(t){var i=null;return i=e.call(this,t),[null,i[1]]}:null},product:function(){for(var e=arguments[0],i=Array.prototype.slice.call(arguments,1),n=[],r=0;r<e.length;r++)n.push(t.each(e[r],i));return n},cache:function(t){var i={},n=null;return function(r){try{n=i[r]=i[r]||t.call(this,r)}catch(e){n=i[r]=e}if(n instanceof e.Exception)throw n;return n}},any:function(){var t=arguments;return function(i){for(var n=null,r=0;r<t.length;r++)if(null!=t[r]){try{n=t[r].call(this,i)}catch(e){n=null}if(n)return n}throw new e.Exception(i)}},each:function(){var t=arguments;return function(i){for(var n=[],r=null,a=0;a<t.length;a++)if(null!=t[a]){try{r=t[a].call(this,i)}catch(t){throw new e.Exception(i)}n.push(r[0]),i=r[1]}return[n,i]}},all:function(){var e=arguments,t=t;return t.each(t.optional(e))},sequence:function(i,n,r){return n=n||t.rtoken(/^\s*/),r=r||null,1==i.length?i[0]:function(t){for(var a=null,o=null,s=[],l=0;l<i.length;l++){try{a=i[l].call(this,t)}catch(e){break}s.push(a[0]);try{o=n.call(this,a[1])}catch(e){o=null;break}t=o[1]}if(!a)throw new e.Exception(t);if(o)throw new e.Exception(o[1]);if(r)try{a=r.call(this,a[1])}catch(t){throw new e.Exception(a[1])}return[s,a?a[1]:t]}},between:function(e,i,n){n=n||e;var a=t.each(t.ignore(e),i,t.ignore(n));return function(e){var t=a.call(this,e);return[[t[0][0],r[0][2]],t[1]]}},list:function(e,i,n){return i=i||t.rtoken(/^\s*/),n=n||null,e instanceof Array?t.each(t.product(e.slice(0,-1),t.ignore(i)),e.slice(-1),t.ignore(n)):t.each(t.many(t.each(e,t.ignore(i))),px,t.ignore(n))},set:function(i,n,r){return n=n||t.rtoken(/^\s*/),r=r||null,function(a){for(var o=null,s=null,l=null,c=null,u=[[],a],d=!1,p=0;p<i.length;p++){l=null,s=null,o=null,d=1==i.length;try{o=i[p].call(this,a)}catch(e){continue}if(c=[[o[0]],o[1]],o[1].length>0&&!d)try{l=n.call(this,o[1])}catch(e){d=!0}else d=!0;if(d||0!==l[1].length||(d=!0),!d){for(var f=[],h=0;h<i.length;h++)p!=h&&f.push(i[h]);s=t.set(f,n).call(this,l[1]),s[0].length>0&&(c[0]=c[0].concat(s[0]),c[1]=s[1])}if(c[1].length<u[1].length&&(u=c),0===u[1].length)break}if(0===u[0].length)return u;if(r){try{l=r.call(this,u[1])}catch(t){throw new e.Exception(u[1])}u[1]=l[1]}return u}},forward:function(e,t){return function(i){return e[t].call(this,i)}},replace:function(e,t){return function(i){var n=e.call(this,i);return[t,n[1]]}},process:function(e,t){return function(i){var n=e.call(this,i);return[t.call(this,n[0]),n[1]]}},min:function(t,i){return function(n){var r=i.call(this,n);if(r[0].length<t)throw new e.Exception(n);return r}}},i=function(e){return function(){var t=null,i=[];if(arguments.length>1?t=Array.prototype.slice.call(arguments):arguments[0]instanceof Array&&(t=arguments[0]),!t)return e.apply(null,arguments);for(var n=0,r=t.shift();n<r.length;n++)return t.unshift(r[n]),i.push(e.apply(null,t)),t.shift(),i}},n="optional not ignore cache".split(/\s/),a=0;a<n.length;a++)t[n[a]]=i(t[n[a]]);for(var o=function(e){return function(){return arguments[0]instanceof Array?e.apply(null,arguments[0]):e.apply(null,arguments)}},s="each any all".split(/\s/),l=0;l<s.length;l++)t[s[l]]=o(t[s[l]])}(),function(){var e=function(t){for(var i=[],n=0;n<t.length;n++)t[n]instanceof Array?i=i.concat(e(t[n])):t[n]&&i.push(t[n]);return i};Date.Grammar={},Date.Translator={hour:function(e){return function(){this.hour=Number(e)}},minute:function(e){return function(){this.minute=Number(e)}},second:function(e){return function(){this.second=Number(e)}},meridian:function(e){return function(){this.meridian=e.slice(0,1).toLowerCase()}},timezone:function(e){return function(){var t=e.replace(/[^\d\+\-]/g,"");t.length?this.timezoneOffset=Number(t):this.timezone=e.toLowerCase()}},day:function(e){var t=e[0];return function(){this.day=Number(t.match(/\d+/)[0])}},month:function(e){return function(){this.month=3==e.length?Date.getMonthNumberFromName(e):Number(e)-1}},year:function(e){return function(){var t=Number(e);this.year=e.length>2?t:t+(t+2e3<Date.CultureInfo.twoDigitYearMax?2e3:1900)}},rday:function(e){return function(){switch(e){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0,this.now=!0}}},finishExact:function(e){e=e instanceof Array?e:[e];var t=new Date;this.year=t.getFullYear(),this.month=t.getMonth(),this.day=1,this.hour=0,this.minute=0,this.second=0;for(var i=0;i<e.length;i++)e[i]&&e[i].call(this);if(this.hour="p"==this.meridian&&this.hour<13?this.hour+12:this.hour,this.day>Date.getDaysInMonth(this.year,this.month))throw new RangeError(this.day+" is not a valid value for days.");var n=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);return this.timezone?n.set({timezone:this.timezone}):this.timezoneOffset&&n.set({timezoneOffset:this.timezoneOffset}),n},finish:function(t){if(t=t instanceof Array?e(t):[t],0===t.length)return null;for(var i=0;i<t.length;i++)"function"==typeof t[i]&&t[i].call(this);if(this.now)return new Date;var n=Date.today(),r=!(null==this.days&&!this.orient&&!this.operator);if(r){var a,o,s;return s="past"==this.orient||"subtract"==this.operator?-1:1,this.weekday&&(this.unit="day",a=Date.getDayNumberFromName(this.weekday)-n.getDay(),o=7,this.days=a?(a+s*o)%o:s*o),this.month&&(this.unit="month",a=this.month-n.getMonth(),o=12,this.months=a?(a+s*o)%o:s*o,this.month=null),this.unit||(this.unit="day"),(null==this[this.unit+"s"]||null!=this.operator)&&(this.value||(this.value=1),"week"==this.unit&&(this.unit="day",this.value=7*this.value),this[this.unit+"s"]=this.value*s),n.add(this)}return this.meridian&&this.hour&&(this.hour=this.hour<13&&"p"==this.meridian?this.hour+12:this.hour),this.weekday&&!this.day&&(this.day=n.addDays(Date.getDayNumberFromName(this.weekday)-n.getDay()).getDate()),this.month&&!this.day&&(this.day=1),n.set(this)}};var t,i=Date.Parsing.Operators,n=Date.Grammar,r=Date.Translator;n.datePartDelimiter=i.rtoken(/^([\s\-\.\,\/\x27]+)/),n.timePartDelimiter=i.stoken(":"),n.whiteSpace=i.rtoken(/^\s*/),n.generalDelimiter=i.rtoken(/^(([\s\,]|at|on)+)/);var a={};n.ctoken=function(e){var t=a[e];if(!t){for(var n=Date.CultureInfo.regexPatterns,r=e.split(/\s+/),o=[],s=0;s<r.length;s++)o.push(i.replace(i.rtoken(n[r[s]]),r[s]));t=a[e]=i.any.apply(null,o)}return t},n.ctoken2=function(e){return i.rtoken(Date.CultureInfo.regexPatterns[e])},n.h=i.cache(i.process(i.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),r.hour)),n.hh=i.cache(i.process(i.rtoken(/^(0[0-9]|1[0-2])/),r.hour)),n.H=i.cache(i.process(i.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),r.hour)),n.HH=i.cache(i.process(i.rtoken(/^([0-1][0-9]|2[0-3])/),r.hour)),n.m=i.cache(i.process(i.rtoken(/^([0-5][0-9]|[0-9])/),r.minute)),n.mm=i.cache(i.process(i.rtoken(/^[0-5][0-9]/),r.minute)),n.s=i.cache(i.process(i.rtoken(/^([0-5][0-9]|[0-9])/),r.second)),n.ss=i.cache(i.process(i.rtoken(/^[0-5][0-9]/),r.second)),n.hms=i.cache(i.sequence([n.H,n.mm,n.ss],n.timePartDelimiter)),n.t=i.cache(i.process(n.ctoken2("shortMeridian"),r.meridian)),n.tt=i.cache(i.process(n.ctoken2("longMeridian"),r.meridian)),n.z=i.cache(i.process(i.rtoken(/^(\+|\-)?\s*\d\d\d\d?/),r.timezone)),n.zz=i.cache(i.process(i.rtoken(/^(\+|\-)\s*\d\d\d\d/),r.timezone)),n.zzz=i.cache(i.process(n.ctoken2("timezone"),r.timezone)),n.timeSuffix=i.each(i.ignore(n.whiteSpace),i.set([n.tt,n.zzz])),n.time=i.each(i.optional(i.ignore(i.stoken("T"))),n.hms,n.timeSuffix),n.d=i.cache(i.process(i.each(i.rtoken(/^([0-2]\d|3[0-1]|\d)/),i.optional(n.ctoken2("ordinalSuffix"))),r.day)),n.dd=i.cache(i.process(i.each(i.rtoken(/^([0-2]\d|3[0-1])/),i.optional(n.ctoken2("ordinalSuffix"))),r.day)),n.ddd=n.dddd=i.cache(i.process(n.ctoken("sun mon tue wed thu fri sat"),function(e){return function(){this.weekday=e}})),n.M=i.cache(i.process(i.rtoken(/^(1[0-2]|0\d|\d)/),r.month)),n.MM=i.cache(i.process(i.rtoken(/^(1[0-2]|0\d)/),r.month)),n.MMM=n.MMMM=i.cache(i.process(n.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),r.month)),n.y=i.cache(i.process(i.rtoken(/^(\d\d?)/),r.year)),n.yy=i.cache(i.process(i.rtoken(/^(\d\d)/),r.year)),n.yyy=i.cache(i.process(i.rtoken(/^(\d\d?\d?\d?)/),r.year)),n.yyyy=i.cache(i.process(i.rtoken(/^(\d\d\d\d)/),r.year)),t=function(){return i.each(i.any.apply(null,arguments),i.not(n.ctoken2("timeContext")))},n.day=t(n.d,n.dd),n.month=t(n.M,n.MMM),n.year=t(n.yyyy,n.yy),n.orientation=i.process(n.ctoken("past future"),function(e){return function(){this.orient=e}}),n.operator=i.process(n.ctoken("add subtract"),function(e){return function(){this.operator=e}}),n.rday=i.process(n.ctoken("yesterday tomorrow today now"),r.rday),n.unit=i.process(n.ctoken("minute hour day week month year"),function(e){return function(){this.unit=e}}),n.value=i.process(i.rtoken(/^\d\d?(st|nd|rd|th)?/),function(e){return function(){this.value=e.replace(/\D/g,"")}}),n.expression=i.set([n.rday,n.operator,n.value,n.unit,n.orientation,n.ddd,n.MMM]),t=function(){return i.set(arguments,n.datePartDelimiter)},n.mdy=t(n.ddd,n.month,n.day,n.year),n.ymd=t(n.ddd,n.year,n.month,n.day),n.dmy=t(n.ddd,n.day,n.month,n.year),n.date=function(e){return(n[Date.CultureInfo.dateElementOrder]||n.mdy).call(this,e)},n.format=i.process(i.many(i.any(i.process(i.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(e){if(n[e])return n[e];throw Date.Parsing.Exception(e)}),i.process(i.rtoken(/^[^dMyhHmstz]+/),function(e){return i.ignore(i.stoken(e))}))),function(e){return i.process(i.each.apply(null,e),r.finishExact)});var o={},s=function(e){return o[e]=o[e]||n.format(e)[0]};n.formats=function(e){if(e instanceof Array){for(var t=[],n=0;n<e.length;n++)t.push(s(e[n]));return i.any.apply(null,t)}return s(e)},n._formats=n.formats(["yyyy-MM-ddTHH:mm:ss","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","d"]),n._start=i.process(i.set([n.date,n.time,n.expression],n.generalDelimiter,n.whiteSpace),r.finish),n.start=function(e){try{var t=n._formats.call({},e);if(0===t[1].length)return t}catch(e){}return n._start.call({},e)}}(),Date._parse=Date.parse,Date.parse=function(e){var t=null;if(!e)return null;try{t=Date.Grammar.start.call({},e)}catch(e){return null}return 0===t[1].length?t[0]:null},Date.getParseFunction=function(e){var t=Date.Grammar.formats(e);return function(e){var i=null;try{i=t.call({},e)}catch(e){return null}return 0===i[1].length?i[0]:null}},Date.parseExact=function(e,t){return Date.getParseFunction(t)(e)}},function(e,t){!function(e,t,i,n){function r(t,i){this.element=e(t),this.settings=e.extend({},o,i),this._defaults=o,this._name=a,this.init()}var a="metisMenu",o={toggle:!0,doubleTapToGo:!1};r.prototype={init:function(){var t=this.element,n=this.settings.toggle,r=this;this.isIE()<=9?(t.find("li.active").has("ul").children("ul").collapse("show"),t.find("li").not(".active").has("ul").children("ul").collapse("hide")):(t.find("li.active").has("ul").children("ul").addClass("collapse in"),t.find("li").not(".active").has("ul").children("ul").addClass("collapse")),r.settings.doubleTapToGo&&t.find("li.active").has("ul").children("a").addClass("doubleTapToGo"),t.find("li").has("ul").children("a").on("click."+a,function(t){return t.preventDefault(),r.settings.doubleTapToGo&&r.doubleTapToGo(e(this))&&"#"!==e(this).attr("href")&&""!==e(this).attr("href")?(t.stopPropagation(),void(i.location=e(this).attr("href"))):(e(this).parent("li").toggleClass("active").children("ul").collapse("toggle"),void(n&&(e(this).parent("li").siblings().removeClass("active").children("ul.in").collapse("hide"),e(this).find(".fa-angle-left").toggleClass("s-rotate"))))})},isIE:function(){for(var e,t=3,n=i.createElement("div"),r=n.getElementsByTagName("i");n.innerHTML="<!--[if gt IE "+ ++t+"]><i></i><![endif]-->",r[0];)return t>4?t:e},doubleTapToGo:function(e){var t=this.element;return e.hasClass("doubleTapToGo")?(e.removeClass("doubleTapToGo"),!0):e.parent().children("ul").length?(t.find(".doubleTapToGo").removeClass("doubleTapToGo"),e.addClass("doubleTapToGo"),!1):void 0},remove:function(){this.element.off("."+a),this.element.removeData(a)}},e.fn[a]=function(t){return this.each(function(){var i=e(this);i.data(a)&&i.data(a).remove(),i.data(a,new r(this,t))}),this}}(jQuery,window,document)},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),r=i(94),a=i(90),o=function(e){function t(){var t=this,i=t=e.call(this,a.slatwalladminmodule.name)||this;return i.bootstrap(),t}return n(t,e),t}(r.BaseBootStrapper);e.exports=new o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){this.collectionConfigService=e,this.utilityService=t,this.collectionConfig=e.newCollectionConfig("Product"),this.collectionConfig.addDisplayProperty("productID,productName,productCode,productDescription,activeFlag,publishedFlag,productType.productTypeNamePath,productType.productTypeName,defaultSku.price"),this.alreadySelectedProductsCollectionConfig=e.newCollectionConfig("ProductListingPage"),this.alreadySelectedProductsCollectionConfig.addDisplayProperty("productListingPageID,sortOrder,product.productID,product.productName,product.productCode,product.productDescription,product.activeFlag,product.publishedFlag"),this.alreadySelectedProductsCollectionConfig.addFilter("content.contentID",this.contentId,"="),this.typeaheadDataKey=t.createID(32)}return e.$inject=["collectionConfigService","utilityService"],e}();t.SWAssignedProductsController=i;var n=function(){function e(e,t,n,r,a){this.$http=e,this.$hibachi=t,this.paginationService=n,this.contentPartialsPath=r,this.slatwallPathBuilder=a,this.restrict="EA",this.scope={},this.bindToController={contentId:"@?",edit:"=?",productSortProperty:"@?",productSortDefaultDirection:"@?"},this.controller=i,this.controllerAs="swAssignedProducts",this.link=function(e,t,i){},this.templateUrl=a.buildPartialsPath(r)+"/assignedproducts.html"}return e.$inject=["$http","$hibachi","paginationService","contentPartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$http","$hibachi","paginationService","contentPartialsPath","slatwallPathBuilder"],t},e}();t.SWAssignedProducts=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a){return{restrict:"EA",templateUrl:a.buildPartialsPath(r)+"contentbasic.html",link:function(n,r,a){if(n.content.$$isPersisted())n.content.$$getSite(),n.content.$$getParentContent(),n.content.$$getContentTemplateType();else{if(angular.isDefined(t.siteID)){var o,s={id:t.siteID};o=i.getSite(s),o.promise.then(function(){var e=o.value;n.content.$$setSite(e)})}else{var l=i.newSite();n.content.$$setSite(l)}var c;if(angular.isDefined(t.parentContentID)){var u,s={id:t.parentContentID};u=i.getContent(s),u.promise.then(function(){var t=u.value;n.content.$$setParentContent(t),e.debug("contenttest"),e.debug(n.content)})}else{var c=i.newContent();n.content.$$setParentContent(c)}var d=i.newType();n.content.$$setContentTemplateType(d)}}}}return e.Factory=function(){var t=function(t,i,n,r,a,o){return new e(t,i,n,r,a,o)};return t.$inject=["$log","$routeParams","$hibachi","formService","contentPartialsPath","slatwallPathBuilder"],t},e}();t.SWContentBasic=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){return{restrict:"EA",scope:{content:"="},templateUrl:o.buildPartialsPath(a)+"contenteditor.html",link:function(e,t,i){e.editorOptions=CKEDITOR.editorConfig,e.onContentChange=function(){var e=r.getForm("contentEditor");e.contentBody.$setDirty()}}}}return e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$log","$location","$http","$hibachi","formService","contentPartialsPath","slatwallPathBuilder"],t},e}();t.SWContentEditor=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s){var l=this;this.$scope=e,this.$log=t,this.$timeout=i,this.$hibachi=n,this.paginationService=r,this.observerService=a,this.collectionConfigService=o,this.localStorageService=s,this.openRoot=!0,this.$log.debug("slatwallcontentList init");var c=50;"Auto"!==this.pageShow&&(c=this.pageShow),this.pageShowOptions=[{display:10,value:10},{display:20,value:20},{display:50,value:50},{display:250,value:250}],this.loadingCollection=!1,this.localStorageService.hasItem("selectedSiteOption")&&(this.selectedSite=this.localStorageService.getItem("selectedSiteOption")),this.orderBy;this.getCollection=function(e){l.collectionConfig=o.newCollectionConfig("Content");var t=[{propertyIdentifier:"_content.contentID",isVisible:!1,ormtype:"id",isSearchable:!0},{propertyIdentifier:"_content.urlTitlePath",isVisible:!1,isSearchable:!0},{propertyIdentifier:"_content.allowPurchaseFlag",isVisible:!0,ormtype:"boolean",isSearchable:!1},{propertyIdentifier:"_content.productListingPageFlag",isVisible:!0,ormtype:"boolean",isSearchable:!1},{propertyIdentifier:"_content.activeFlag",isVisible:!0,ormtype:"boolean",isSearchable:!1}],i={currentPage:"1",pageShow:"1",keywords:l.keywords},n={};if(e&&""!==l.keywords){l.collectionConfig.setKeywords(l.keywords),l.isSearching=!0;var r=[{filterGroup:[{propertyIdentifier:"excludeFromSearch",comparisonOperator:"!=",value:!0}]}];n={propertyIdentifier:"_content.title",isVisible:!1,ormtype:"string",isSearchable:!0},t.unshift(n);var a={propertyIdentifier:"_content.titlePath",isVisible:!0,ormtype:"string",isSearchable:!1};t.unshift(a)}else{l.isSearching=!1;var r=[{filterGroup:[{propertyIdentifier:"parentContent",comparisonOperator:"is",value:"null"}]}];n={propertyIdentifier:"_content.title",isVisible:!0,ormtype:"string",isSearchable:!0,tdclass:"primary"},t.unshift(n)}if(l.selectedSite&&l.selectedSite.siteID){var s={logicalOperator:"AND",propertyIdentifier:"site.siteID",comparisonOperator:"=",value:l.selectedSite.siteID};r[0].filterGroup.push(s)}if(angular.isDefined(l.orderBy)){var c=[];c.push(l.orderBy),i.orderByConfig=angular.toJson(c)}return angular.forEach(t,function(e){l.collectionConfig.addColumn(e.propertyIdentifier,e.title,e)}),l.collectionConfig.addDisplayAggregate("childContents","COUNT","childContentsCount",{isVisible:!1,isSearchable:!1,title:"test"}),l.collectionConfig.addDisplayProperty("site.siteID",void 0,{isVisible:!1,ormtype:"id",isSearchable:!1}),l.collectionConfig.addDisplayProperty("site.domainNames",void 0,{isVisible:!1,isSearchable:!0}),angular.forEach(r[0].filterGroup,function(e){l.collectionConfig.addFilter(e.propertyIdentifier,e.value,e.comparisonOperator,e.logicalOperator)}),l.collectionListingPromise=l.collectionConfig.getEntity(),l.collectionListingPromise.then(function(e){l.$timeout(function(){l.collection=e,l.collection.collectionConfig=l.collectionConfig,l.firstLoad=!0,l.loadingCollection=!1})}),l.collectionListingPromise},this.loadingCollection=!1,this.searchCollection=function(){t.debug("search with keywords"),t.debug(l.keywords),$(".childNode").remove(),l.loadingCollection=!0;var e=l.getCollection(!0);e.then(function(){l.collection.collectionConfig=l.collectionConfig,l.loadingCollection=!1})};var u=function(e){l.localStorageService.setItem("selectedSiteOption",e),l.selectedSite=l.localStorageService.getItem("selectedSiteOption"),l.openRoot=!0,l.getCollection()};this.observerService.attach(u,"optionsChanged","siteOptions");var d=function(e){l.orderBy=e,l.getCollection()};this.observerService.attach(d,"sortByColumn","siteSorting");var p=function(){var e;l.selectedSite&&(e=l.selectedSite),l.observerService.notify("selectOption",e)};this.observerService.attach(p,"optionsLoaded","siteOptionsLoaded")}return e.$inject=["$scope","$log","$timeout","$hibachi","paginationService","observerService","collectionConfigService","localStorageService"],e}(),n=function(){function e(e,t,n){this.restrict="E",this.controller=i,this.controllerAs="swContentList",this.link=function(e,t,i,n,r){e.$on("$destroy",function(){this.observerService.detachByEvent("optionsChanged"),this.observerService.detachByEvent("sortByColumn")})},this.observerService=t,this.templateUrl=n.buildPartialsPath(e)+"contentlist.html"}return e.$inject=["contentPartialsPath","observerService","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["contentPartialsPath","observerService","slatwallPathBuilder"],t},e}();t.SWContentList=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){return{restrict:"A",scope:{contentData:"=",loadChildren:"="},templateUrl:r.buildPartialsPath(n)+"contentnode.html",link:function(e,n,r){angular.isUndefined(e.depth)&&(e.depth=0),angular.isDefined(e.$parent.depth)&&(e.depth=e.$parent.depth+1);var a=[{propertyIdentifier:"_content.contentID",isVisible:!1,isSearchable:!1},{propertyIdentifier:"_content.title",isVisible:!0,isSearchable:!0},{propertyIdentifier:"_content.urlTitlePath",isVisible:!0,isSearchable:!0},{propertyIdentifier:"_content.site.siteID",isVisible:!1,isSearchable:!1},{propertyIdentifier:"_content.site.siteName",isVisible:!0,isSearchable:!0},{propertyIdentifier:"_content.site.domainNames",isVisible:!0,isSearchable:!0},{propertyIdentifier:"_content.allowPurchaseFlag",isVisible:!0,isSearchable:!0},{propertyIdentifier:"_content.productListingPageFlag",isVisible:!0,isSearchable:!0},{propertyIdentifier:"_content.activeFlag",isVisible:!0,isSearchable:!0}],o=[{propertyIdentifier:"_content.sortOrder",direction:"DESC"}];e.toggleChildContent=function(t){angular.isUndefined(e.childOpen)||e.childOpen===!1?(e.childOpen=!0,e.childrenLoaded||e.getChildContent(t)):e.childOpen=!1},e.getChildContent=function(r){var s=[{filterGroup:[{propertyIdentifier:"_content.parentContent.contentID",comparisonOperator:"=",value:r.contentID}]}],l=i.getEntity("Content",{columnsConfig:angular.toJson(a),filterGroupsConfig:angular.toJson(s),orderByConfig:angular.toJson(o),allRecords:!0});l.then(function(i){r.children=i.records;var a=0;angular.forEach(r.children,function(i){i.site_domainNames=i.site_domainNames.split(",")[0],e["child"+a]=i,n.after(t('<tr class="childNode" style="margin-left:{{depth*15||0}}px" ng-if="childOpen"  sw-content-node data-content-data="child'+a+'"></tr>')(e)),a++}),e.childrenLoaded=!0})},e.childrenLoaded=!1,!angular.isDefined(e.loadChildren)||e.loadChildren!==!0||e.contentData.titlePath&&e.contentData.titlePath.trim().length||e.toggleChildContent(e.contentData)}}}return e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$log","$compile","$hibachi","contentPartialsPath","slatwallPathBuilder"],t},e}();t.SWContentNode=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){var a=this;this.collectionConfigService=e,this.listingService=t,this.localStorageService=i,this.typeaheadService=n,this.utilityService=r,this.selectSite=function(){switch(a.collectionConfigToFilter.removeFilterByDisplayPropertyIdentifier(a.simpleFilterPropertyIdentifier),a.selectedSite){case"all":break;case"default":a.updateDefaultSiteID(),a.defaultEstablished&&a.collectionConfigToFilter.addFilter(a.filterPropertyIdentifier,a.defaultSiteID,"=");break;case void 0:break;default:a.localStorageService.setItem("defaultSiteID",a.selectedSite),a.collectionConfigToFilter.addFilter(a.filterPropertyIdentifier,a.selectedSite,"=")}a.withTypeahead&&null!=a.typeaheadDataKey&&a.typeaheadService.getData(a.typeaheadDataKey),a.inListingDisplay&&null!=a.listingID&&a.listingService.getCollection(a.listingID)},this.updateDefaultSiteID=function(){a.localStorageService.hasItem("defaultSiteID")?(a.defaultEstablished=!0,a.defaultSiteID=a.localStorageService.getItem("defaultSiteID")):a.defaultEstablished=!1},angular.isUndefined(this.disabled)&&(this.disabled=!1),angular.isUndefined(this.simpleFilterPropertyIdentifier)&&(this.simpleFilterPropertyIdentifier="siteID"),this.sitesCollectionConfig=e.newCollectionConfig("Site"),this.sitesCollectionConfig.addDisplayProperty("siteID, siteName, siteCode"),this.sitesCollectionConfig.setAllRecords(!0),this.sitesCollectionConfig.getEntity().then(function(e){a.sites=e.records,a.sites[0]&&(a.selectedSite=a.sites[0].siteID)},function(e){throw"SWProductListingPages had trouble fetching sites because of "+e}).finally(function(){a.selectSite()})}return e.$inject=["collectionConfigService","listingService","localStorageService","typeaheadService","utilityService"],e}();t.SWSiteSelectorController=i;var n=function(){function e(e,t,n,r,a,o){var s=this;this.$http=e,this.$hibachi=t,this.listingService=n,this.scopeService=r,this.contentPartialsPath=a,this.slatwallPathBuilder=o,this.restrict="EA",this.scope={},this.bindToController={inListingDisplay:"=?",filterPropertyIdentifier:"@?",collectionConfigToFilter:"=?",withTypeahead:"=?",typeaheadDataKey:"@?",disabled:"=?"},this.controller=i,this.controllerAs="swSiteSelector",this.link=function(e,t,i){if(null==e.swSiteSelector.withTypeahead&&(e.swSiteSelector.withTypeahead=!1),null==e.swSiteSelector.inListingDisplay&&(e.swSiteSelector.inListingDisplay=!e.swSiteSelector.withTypeahead),1==e.swSiteSelector.inListingDisplay&&s.scopeService.hasParentScope(e,"swListingDisplay")){var n=s.scopeService.getRootParentScope(e,"swListingDisplay").swListingDisplay;e.swSiteSelector.listingID=n.tableID,null!=n.collectionConfig&&(e.swSiteSelector.collectionConfigToFilter=n.collectionConfig),s.listingService.attachToListingInitiated(e.swSiteSelector.listingID,e.swSiteSelector.selectSite)}else e.swSiteSelector.selectSite()},this.templateUrl=o.buildPartialsPath(a)+"/siteselector.html"}return e.$inject=["$http","$hibachi","listingService","scopeService","contentPartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o){return new e(t,i,n,r,a,o)};return t.$inject=["$http","$hibachi","listingService","scopeService","contentPartialsPath","slatwallPathBuilder"],t},e}();t.SWSiteSelector=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(33),a=i(34),o=i(35),s=i(36),l=i(32),c=i(37),u=angular.module("hibachi.content",[n.coremodule.name]).config(function(){}).constant("contentPartialsPath","content/components/").directive("swContentBasic",r.SWContentBasic.Factory()).directive("swContentEditor",a.SWContentEditor.Factory()).directive("swContentList",o.SWContentList.Factory()).directive("swContentNode",s.SWContentNode.Factory()).directive("swAssignedProducts",l.SWAssignedProducts.Factory()).directive("swSiteSelector",c.SWSiteSelector.Factory());
t.contentmodule=u},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){var a=this;this.$filter=e,this.$http=t,this.$hibachi=i,this.paginationService=n,this.requestService=r,this.init=function(){if(angular.isUndefined(a.formId))throw"Form ID is required for swFormResponseListing";a.paginator=a.paginationService.createPagination(),a.paginator.getCollection=a.updateFormResponses,a.updateFormResponses()},this.export=function(){var e=a.requestService.newAdminRequest(a.$hibachi.getUrlWithActionPrefix()+"api:main.exportformresponses&formID="+a.formId,{},"GET");e.promise.then(function(e){var t=angular.element("<a/>");t.attr({href:"data:attachment/csv;charset=utf-8,"+encodeURI(e),target:"_blank",download:"formresponses"+a.formId+".csv"})[0].click()})},this.updateFormResponses=function(){var e=a.$hibachi.getUrlWithActionPrefix()+"api:main.getformresponses&formID="+a.formId,t={};t.currentPage=a.paginator.currentPage||1,t.pageShow=a.paginator.pageShow||10;var i=a.$http({method:"GET",url:e,params:t});i.then(function(e){a.columns=e.data.columnRecords,a.pageRecords=e.data.pageRecords,a.paginator.recordsCount=e.data.recordsCount,a.paginator.totalPages=e.data.totalPages,a.paginator.pageStart=e.data.pageRecordsStart,a.paginator.pageEnd=e.data.pageRecordsEnd;for(var t=0;t<a.pageRecords.length;t++)angular.isDefined(a.pageRecords[t].createdDateTime)&&(a.pageRecords[t].createdDateTime=a.dateFilter(a.pageRecords[t].createdDateTime,"MMM dd, yyyy - hh:mm a"))},function(e){throw"There was a problem collecting the form responses"})},this.dateFilter=e("dateFilter"),this.init()}return e.$inject=["$filter","$http","$hibachi","paginationService","requestService"],e}();t.SWFormResponseListingController=i;var n=function(){function e(e,t,n,r,a){this.$http=e,this.$hibachi=t,this.paginationService=n,this.formBuilderPartialsPath=r,this.slatwallPathBuilder=a,this.restrict="EA",this.scope={},this.bindToController={formId:"@"},this.controller=i,this.controllerAs="swFormResponseListing",this.link=function(e,t,i){},this.templateUrl=a.buildPartialsPath(r)+"/formresponselisting.html"}return e.$inject=["$http","$hibachi","paginationService","formBuilderPartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$http","$hibachi","paginationService","formBuilderPartialsPath","slatwallPathBuilder"],t},e}();t.SWFormResponseListing=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(39),a=angular.module("formbuilder",[n.coremodule.name]).config([function(){}]).run([function(){}]).constant("formBuilderPartialsPath","formbuilder/components/").directive("swFormResponseListing",r.SWFormResponseListing.Factory());t.formbuildermodule=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(51),r=function(){function e(e,t,i,r){var a=this;this.$hibachi=e,this.collectionConfigService=t,this.entityService=i,this.observerService=r,this.unassignedCountArray=[],this.addGiftRecipientFromAccountList=function(e){var t=new n.GiftRecipient;t.firstName=e.firstName,t.lastName=e.lastName,t.emailAddress=e.primaryEmailAddress_emailAddress,t.account=!0,a.orderItemGiftRecipients.push(t),a.searchText=""},this.getUnassignedCountArray=function(){if(a.getUnassignedCount()<a.unassignedCountArray.length&&a.unassignedCountArray.splice(a.getUnassignedCount(),a.unassignedCountArray.length),a.getUnassignedCount()>a.unassignedCountArray.length)for(var e=a.unassignedCountArray.length+1;e<=a.getUnassignedCount();e++)a.unassignedCountArray.push({name:e,value:e});return a.unassignedCountArray},this.getAssignedCount=function(){return a.assignedCount=0,angular.forEach(a.orderItemGiftRecipients,function(e){a.assignedCount+=e.quantity}),a.assignedCount},this.getUnassignedCount=function(){return a.unassignedCount=a.quantity,angular.forEach(a.orderItemGiftRecipients,function(e){a.unassignedCount-=e.quantity}),a.unassignedCount},this.addGiftRecipient=function(){a.currentGiftRecipient.forms.createRecipient.$valid?a.observerService.notify("updateBindings").then(function(){a.showInvalidAddFormMessage=!0,a.adding=!1;var e=new n.GiftRecipient;angular.extend(e,a.currentGiftRecipient.data),a.orderItemGiftRecipients.push(e),a.searchText="",a.currentGiftRecipient=a.entityService.newEntity("OrderItemGiftRecipient")}):a.showInvalidAddFormMessage=!0},this.cancelAddRecipient=function(){a.adding=!1,a.currentGiftRecipient.reset(),a.searchText="",a.showInvalidAddFormMessage=!1},this.startFormWithName=function(e){void 0===e&&(e=a.searchText),a.adding=!a.adding,a.adding&&(a.currentGiftRecipient.forms.createRecipient.$setUntouched(),a.currentGiftRecipient.forms.createRecipient.$setPristine(),""!=e&&(a.currentGiftRecipient.firstName=e,a.searchText=""))},this.getTotalQuantity=function(){var e=0;return angular.forEach(a.orderItemGiftRecipients,function(t){e+=t.quantity}),e},this.getMessageCharactersLeft=function(){return a.currentGiftRecipient.giftMessage&&null!=a.currentGiftRecipient.giftMessage?250-a.currentGiftRecipient.giftMessage.length:250},angular.isUndefined(this.adding)&&(this.adding=!1),angular.isUndefined(this.assignedCount)&&(this.assignedCount=0),angular.isUndefined(this.searchText)&&(this.searchText="");this.currentGiftRecipient=this.entityService.newEntity("OrderItemGiftRecipient"),angular.isUndefined(this.orderItemGiftRecipients)&&(this.orderItemGiftRecipients=[]),angular.isUndefined(this.showInvalidAddFormMessage)&&(this.showInvalidAddFormMessage=!1),this.typeaheadCollectionConfig=t.newCollectionConfig("Account"),this.typeaheadCollectionConfig.addDisplayProperty("accountID,firstName,lastName,primaryEmailAddress.emailAddress"),this.typeaheadCollectionConfig.addFilter("primaryEmailAddress","null","is not")}return e.$inject=["$hibachi","collectionConfigService","entityService","observerService"],e}();t.SWAddOrderItemRecipientController=r;var a=function(){function e(e,t,i){this.$hibachi=e,this.giftCardPartialsPath=t,this.slatwallPathBuilder=i,this.require="^form",this.restrict="EA",this.transclude=!0,this.scope={},this.bindToController={quantity:"=?",orderItemGiftRecipients:"=?",adding:"=?",searchText:"=?",currentgiftRecipient:"=?",showInvalidAddFormMessage:"=?",showInvalidRowMessage:"=?",tableForm:"=?",recipientAddForm:"=?"},this.controller=r,this.controllerAs="addGiftRecipientControl",this.link=function(e,t,i){},this.templateUrl=i.buildPartialsPath(t)+"/addorderitemgiftrecipient.html"}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$hibachi","giftCardPartialsPath","slatwallPathBuilder"],t},e.$inject=["$hibachi"],e}();t.SWAddOrderItemGiftRecipient=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.collectionConfigService=e,this.init=function(){t.initialBalance=0;var e=0,i=0,n=t.collectionConfigService.newCollectionConfig("GiftCardTransaction");n.setDisplayProperties("giftCardTransactionID, creditAmount, debitAmount, giftCard.giftCardID"),n.addFilter("giftCard.giftCardID",t.giftCard.giftCardID),n.setAllRecords(!0),n.setOrderBy("createdDateTime|DESC");var r=n.getEntity();r.then(function(n){t.transactions=n.records;var r=t.transactions.length-1;t.initialBalance=t.transactions[r].creditAmount,angular.forEach(t.transactions,function(t,n){angular.isString(t.debitAmount)||(e+=t.debitAmount),angular.isString(t.creditAmount)||(i+=t.creditAmount)}),t.currentBalance=i-e,t.balancePercentage=parseInt((t.currentBalance/t.initialBalance*100).toString())})},this.init()}return e.$inject=["collectionConfigService"],e}();t.SWGiftCardBalanceController=i;var n=function(){function e(e,t,n){this.collectionConfigService=e,this.giftCardPartialsPath=t,this.slatwallPathBuilder=n,this.scope={},this.bindToController={giftCard:"=?",transactions:"=?",initialBalance:"=?",currentBalance:"=?",balancePercentage:"=?"},this.controller=i,this.controllerAs="swGiftCardBalance",this.link=function(e,t,i){},this.templateUrl=n.buildPartialsPath(t)+"/balance.html",this.restrict="EA"}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["collectionConfigService","giftCardPartialsPath","slatwallPathBuilder"],t},e}();t.SWGiftCardBalance=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.collectionConfigService=e,this.init=function(){var e=t.collectionConfigService.newCollectionConfig("GiftCard");e.setDisplayProperties("giftCardID, giftCardCode, currencyCode, giftCardPin, expirationDate, ownerFirstName, ownerLastName, ownerEmailAddress, activeFlag, balanceAmount,  originalOrderItem.sku.product.productName, originalOrderItem.sku.product.productID, originalOrderItem.order.orderID, originalOrderItem.orderItemID, orderItemGiftRecipient.firstName, orderItemGiftRecipient.lastName, orderItemGiftRecipient.emailAddress, orderItemGiftRecipient.giftMessage, ownerAccount.accountID, ownerAccount.firstName, ownerAccount.lastName"),e.addFilter("giftCardID",t.giftCardId),e.setAllRecords(!0),e.getEntity().then(function(e){t.giftCard=e.records[0]})},this.init()}return e.$inject=["collectionConfigService"],e}();t.SWGiftCardDetailController=i;var n=function(){function e(e,t,n){this.collectionConfigService=e,this.giftCardPartialsPath=t,this.slatwallPathBuilder=n,this.scope={},this.bindToController={giftCardId:"@",giftCard:"=?"},this.controller=i,this.controllerAs="swGiftCardDetail",this.link=function(e,t,i){},this.templateUrl=n.buildPartialsPath(t)+"/basic.html",this.restrict="E"}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["collectionConfigService","giftCardPartialsPath","slatwallPathBuilder"],t},e}();t.SWGiftCardDetail=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.collectionConfigService=e,this.$hibachi=t;var n=0,r=this.collectionConfigService.newCollectionConfig("GiftCardTransaction");r.setDisplayProperties("giftCardTransactionID, creditAmount, debitAmount, createdDateTime, giftCard.giftCardID, orderPayment.order.orderID, orderPayment.order.orderNumber, orderPayment.order.orderOpenDateTime","id,credit,debit,created,giftcardID,ordernumber,orderdatetime"),r.addFilter("giftCard.giftCardID",this.giftCard.giftCardID),r.setAllRecords(!0),r.setOrderBy("createdDateTime|DESC");var a=this.collectionConfigService.newCollectionConfig("EmailBounce");a.setDisplayProperties("emailBounceID, rejectedEmailTo, rejectedEmailSendTime, relatedObject, relatedObjectID"),a.addFilter("relatedObjectID",this.giftCard.giftCardID),a.setAllRecords(!0),a.setOrderBy("rejectedEmailSendTime|DESC");var o=this.collectionConfigService.newCollectionConfig("Email");o.setDisplayProperties("emailID, emailTo, relatedObject, relatedObjectID, createdDateTime"),o.addFilter("relatedObjectID",this.giftCard.giftCardID),o.setAllRecords(!0),o.setOrderBy("createdDateTime|DESC"),o.getEntity().then(function(e){i.emails=e.records,a.getEntity().then(function(e){i.bouncedEmails=e.records,r.getEntity().then(function(e){i.transactions=e.records;for(var r=i.transactions.length-1,a=i.transactions[r].creditAmount,o=a,s=r;s>=0;s--){var l=i.transactions[s];"string"!=typeof l.debitAmount?(l.debit=!0,n+=l.debitAmount):"string"!=typeof l.creditAmount&&(s!=r&&(o+=l.creditAmount),l.debit=!1),l.detailOrderLink=t.buildUrl("admin:entity.detailOrder","orderID="+l.orderPayment_order_orderID);var c=o-n;if(l.balance=c,s==r){var u={activated:!0,debit:!1,activeAt:l.orderPayment_order_orderOpenDateTime,balance:a};i.transactions.splice(s,0,u),angular.isDefined(i.bouncedEmails)&&angular.forEach(i.bouncedEmails,function(e,t){e.bouncedEmail=!0,e.balance=a,i.transactions.splice(s,0,e)}),angular.isDefined(i.emails)&&angular.forEach(i.emails,function(e){e.emailSent=!0,e.debit=!1,e.sentAt=e.createdDateTime,e.balance=a,i.transactions.splice(s,0,e)})}}})})});var s=this.collectionConfigService.newCollectionConfig("Order");s.setDisplayProperties("orderID,orderNumber,orderOpenDateTime,account.firstName,account.lastName,account.accountID,account.primaryEmailAddress.emailAddress"),s.addFilter("orderID",this.giftCard.originalOrderItem_order_orderID),s.setAllRecords(!0),s.getEntity().then(function(e){i.order=e.records[0]})}return e.$inject=["collectionConfigService","$hibachi"],e}();t.SWGiftCardHistoryController=i;var n=function(){function e(e,t,n){this.collectionConfigService=e,this.giftCardPartialsPath=t,this.slatwallPathBuilder=n,this.scope={},this.bindToController={giftCard:"=?",transactions:"=?",bouncedEmails:"=?",order:"=?"},this.controller=i,this.controllerAs="swGiftCardHistory",this.link=function(e,t,i){},this.templateUrl=n.buildPartialsPath(t)+"/history.html",this.restrict="EA"}return e.$inject=["collectionConfigService","giftCardPartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["collectionConfigService","giftCardPartialsPath","slatwallPathBuilder"],t},e}();t.SWGiftCardHistory=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.collectionConfigService=e,this.init=function(){var e=t.collectionConfigService.newCollectionConfig("Order");e.setDisplayProperties("orderID, orderNumber, orderOpenDateTime, account.firstName, account.lastName"),e.addFilter("orderID",t.giftCard.originalOrderItem_order_orderID),e.setAllRecords(!0),e.getEntity().then(function(e){t.order=e.records[0]})},this.init()}return e.$inject=["collectionConfigService"],e}();t.SWGiftCardOrderInfoController=i;var n=function(){function e(e,t,n){this.collectionConfigService=e,this.giftCardPartialsPath=t,this.slatwallPathBuilder=n,this.scope={},this.bindToController={giftCard:"=?",order:"=?"},this.controller=i,this.controllerAs="swGiftCardOrderInfo",this.link=function(e,t,i){},this.templateUrl=n.buildPartialsPath(t)+"/orderinfo.html",this.restrict="EA"}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["collectionConfigService","giftCardPartialsPath","slatwallPathBuilder"],t},e.$inject=["collectionConfigService","partialsPath"],e}();t.SWGiftCardOrderInfo=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e}();t.SWGiftCardOverviewController=i;var n=function(){function e(e,t){this.giftCardPartialsPath=e,this.slatwallPathBuilder=t,this.scope={},this.bindToController={giftCard:"=?"},this.controller=i,this.controllerAs="swGiftCardOverview",this.templateUrl=t.buildPartialsPath(e)+"/overview.html",this.restrict="EA"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["giftCardPartialsPath","slatwallPathBuilder"],t},e}();t.SWGiftCardOverview=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.$hibachi=e,angular.isDefined(this.giftCard.ownerAccount_accountID)&&(this.detailAccountLink=e.buildUrl("admin:entity.detailaccount","accountID="+this.giftCard.ownerAccount_accountID))}return e.$inject=["$hibachi"],e}();t.SWGiftCardRecipientInfoController=i;var n=function(){function e(e,t){this.giftCardPartialsPath=e,this.slatwallPathBuilder=t,this.scope={},this.bindToController={giftCard:"=?"},this.controller=i,this.controllerAs="swGiftCardRecipientInfo",this.templateUrl=t.buildPartialsPath(e)+"/recipientinfo.html",this.restrict="EA"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["giftCardPartialsPath","slatwallPathBuilder"],t},e}();t.SWGiftCardRecipientInfo=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){var e=this;this.edit=function(t){angular.forEach(e.recipients,function(e){e.editing=!1}),t.editing||(t.editing=!0)},this.delete=function(t){e.recipients.splice(e.recipients.indexOf(t),1)},this.saveGiftRecipient=function(t){e.tableForm.$valid?(e.showInvalidRecipientMessage=!1,t.editing=!1):e.showInvalidRecipientMessage=!0},this.getQuantity=function(){return isNaN(e.quantity)?0:e.quantity},this.getUnassignedCount=function(){var t=e.getQuantity();return angular.forEach(e.recipients,function(e){t-=e.quantity}),t},this.getMessageCharactersLeft=function(){return angular.isDefined(e.recipient.giftMessage)&&null!=e.recipient.giftMessage?250-e.recipient.giftMessage.length:250},this.getUnassignedCountArray=function(){for(var t=new Array,i=1;i<=e.recipient.quantity+e.getUnassignedCount();i++)t.push(i);return t}}return e}();t.SWOrderItemGiftRecipientRowController=i;var n=function(){function e(e,t){var n=this;this.giftCardPartialsPath=e,this.slatwallPathBuilder=t,this.restrict="AE",this.scope={recipient:"=",recipients:"=",quantity:"=",showInvalidRecipientMessage:"=",tableForm:"=?",index:"="},this.bindToController={recipient:"=",recipients:"=",quantity:"=",showInvalidRecipientMessage:"=",tableForm:"=?",index:"="},this.controller=i,this.controllerAs="giftRecipientRowControl",this.init=function(){n.templateUrl=n.slatwallPathBuilder.buildPartialsPath(n.giftCardPartialsPath)+"/orderitemgiftrecipientrow.html"},this.init()}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["giftCardPartialsPath","slatwallPathBuilder"],t},e}();t.SWOrderItemGiftRecipientRow=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.$scope=e,this.$hibachi=t,this.getUnassignedCountArray=function(){for(var e=new Array,t=1;t<=i.getUnassignedCount();t++)e.push(t);return e},this.getAssignedCount=function(){var e=0;return angular.forEach(i.orderItemGiftRecipients,function(t){e+=t.quantity}),e},this.getUnassignedCount=function(){var e=i.quantity;return angular.forEach(i.orderItemGiftRecipients,function(t){e-=t.quantity}),e},this.orderItemGiftRecipients=e.orderItemGiftRecipients=[],e.collection={},this.adding=!1,this.searchText=""}return e.$inject=["$scope","$hibachi"],e}();t.OrderItemGiftRecipientControl=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(49),a=i(41),o=i(42),s=i(43),l=i(44),c=i(46),u=i(45),d=i(47),p=i(48),f=angular.module("giftcard",[n.coremodule.name]).config([function(){}]).run([function(){}]).constant("giftCardPartialsPath","giftcard/components/").controller("preprocessorderitem_addorderitemgiftrecipient",r.OrderItemGiftRecipientControl).directive("swAddOrderItemGiftRecipient",a.SWAddOrderItemGiftRecipient.Factory()).directive("swGiftCardBalance",o.SWGiftCardBalance.Factory()).directive("swGiftCardOverview",c.SWGiftCardOverview.Factory()).directive("swGiftCardDetail",s.SWGiftCardDetail.Factory()).directive("swGiftCardHistory",l.SWGiftCardHistory.Factory()).directive("swGiftCardRecipientInfo",d.SWGiftCardRecipientInfo.Factory()).directive("swGiftCardOrderInfo",u.SWGiftCardOrderInfo.Factory()).directive("swOrderItemGiftRecipientRow",p.SWOrderItemGiftRecipientRow.Factory());t.giftcardmodule=f},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){var s=this;this.reset=function(){s.firstName=null,s.lastName=null,s.emailAddress=null,s.account=null,s.editing=!1,s.quantity=1},this.quantity=1,this.editing=!1,this.account=!1}return e}();t.GiftRecipient=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(4),r=function(){function e(e,t,i){var n=this;this.optionID=e,this.optionGroupID=t,this.match=i,this.toString=function(){return n.optionID}}return e}();t.optionWithGroup=r;var a=function(){function e(e,t,i,a,o){var s=this;this.$hibachi=e,this.$timeout=t,this.collectionConfigService=i,this.observerService=a,this.utilityService=o,this.getOptionList=function(){return s.selection.sort(),s.utilityService.arrayToList(s.selection)},this.validateOptions=function(e){s.addToSelection(e[0],e[1].optionGroupId),s.hasCompleteSelection()&&s.validateSelection()},this.validateSelection=function(){var e=s.getOptionList(),t=s.collectionConfigService.newCollectionConfig("Sku");t.addDisplayProperty("calculatedOptionsHash"),t.addFilter("product.productID",s.productId),t.addFilter("skuID",s.skuId,"!="),t.addFilter("calculatedOptionsHash",n(e)),t.setAllRecords(!0),t.getEntity().then(function(e){e.records&&0==e.records.length?(s.selectedOptionList=s.getOptionList(),s.showValidFlag=!0,s.showInvalidFlag=!1):(s.showValidFlag=!1,s.showInvalidFlag=!0)})},this.hasCompleteSelection=function(){var e=!0;return angular.forEach(s.selection,function(t){0===t.optionID.length&&(e=!1)}),e},this.addToSelection=function(e,t){return angular.forEach(s.selection,function(i){if(i.optionGroupID===t)return i.optionID=e,!0}),!1},this.optionGroupIds=this.optionGroups.split(","),this.optionGroupIds.sort(),this.selection=[],this.showValidFlag=!1,this.showInvalidFlag=!1;for(var l=0;l<this.optionGroupIds.length;l++)this.selection.push(new r("",this.optionGroupIds[l],!1));this.optionCollectionConfig=i.newCollectionConfig("Option"),this.optionCollectionConfig.setDisplayProperties("optionID,optionGroup.optionGroupID"),this.optionCollectionConfig.addFilter("skus.skuID",this.skuId),this.optionCollectionConfig.setAllRecords(!0),this.optionCollectionConfig.getEntity().then(function(e){if(s.savedOptions={},e.records)for(var t in e.records){var i=e.records[t];s.savedOptions[i.optionGroup_optionGroupID]=i.optionID,s.addToSelection(i.optionID,i.optionGroup_optionGroupID)}}),this.observerService.attach(this.validateOptions,"validateOptions")}return e.$inject=["$hibachi","$timeout","collectionConfigService","observerService","utilityService"],e}();t.SWAddOptionGroupController=a;var o=function(){function e(e,t,i,n,r,o){this.$hibachi=e,this.$timeout=t,this.collectionConfigService=i,this.observerService=n,this.optionGroupPartialsPath=r,this.restrict="EA",this.scope={},this.bindToController={productId:"@",skuId:"@",optionGroups:"="},this.controller=a,this.controllerAs="swAddOptionGroup",this.link=function(e,t,i){},this.templateUrl=o.buildPartialsPath(r)+"addoptiongroup.html"}return e.$inject=["$hibachi","$timeout","collectionConfigService","observerService","optionGroupPartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o){return new e(t,i,n,r,a,o)};return t.$inject=["$hibachi","$timeout","collectionConfigService","observerService","optionGroupPartialsPath","slatwallPathBuilder"],t},e}();t.SWAddOptionGroup=o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){var r=this;this.$hibachi=e,this.$timeout=t,this.collectionConfigService=i,this.observerService=n,this.validateChoice=function(){r.observerService.notify("validateOptions",[r.selectedOption,r.optionGroup])},this.optionCollectionConfig=i.newCollectionConfig("Option"),this.optionCollectionConfig.setDisplayProperties("optionID, optionName, optionGroup.optionGroupID,optionGroup.optionGroupName"),this.optionCollectionConfig.addFilter("optionGroup.optionGroupID",this.optionGroupId),this.optionCollectionConfig.setOrderBy("sortOrder|ASC"),this.optionCollectionConfig.setAllRecords(!0),this.optionCollectionConfig.getEntity().then(function(e){r.options=e.records,r.options.length&&(r.optionGroup={optionGroupId:r.options[0].optionGroup_optionGroupID,optionGroupName:r.options[0].optionGroup_optionGroupName},r.selectedOption=r.savedOptions[r.optionGroup.optionGroupId])})}return e.$inject=["$hibachi","$timeout","collectionConfigService","observerService"],e}();t.SWOptionsForOptionGroupController=i;var n=function(){function e(e,t,n,r,a,o){this.$hibachi=e,this.$timeout=t,this.collectionConfigService=n,this.observerService=r,this.optionGroupPartialsPath=a,this.restrict="EA",this.scope={},this.bindToController={optionGroupId:"@",savedOptions:"="},this.controller=i,this.controllerAs="swOptionsForOptionGroup",this.link=function(e,t,i){},this.templateUrl=o.buildPartialsPath(a)+"optionsforoptiongroup.html"}return e.$inject=["$hibachi","$timeout","collectionConfigService","observerService","optionGroupPartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o){return new e(t,i,n,r,a,o)};return t.$inject=["$hibachi","$timeout","collectionConfigService","observerService","optionGroupPartialsPath","slatwallPathBuilder"],t},e}();t.SWOptionsForOptionGroup=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(52),a=i(53),o=angular.module("optiongroup",[n.coremodule.name]).config([function(){}]).run([function(){}]).constant("optionGroupPartialsPath","optiongroup/components/").directive("swAddOptionGroup",r.SWAddOptionGroup.Factory()).directive("swOptionsForOptionGroup",a.SWOptionsForOptionGroup.Factory());t.optiongroupmodule=o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){return{restrict:"A",scope:{orderItem:"=",orderId:"@",childOrderItems:"=",attributes:"="},templateUrl:o.buildPartialsPath(a)+"childorderitem.html",link:function(e,t,i){var n=[{isDeletable:!1,isExportable:!0,propertyIdentifier:"_orderitem.orderItemID",ormtype:"id",isVisible:!0,isSearchable:!0,title:"Order Item ID"},{title:"Order Item Type",propertyIdentifier:"_orderitem.orderItemType",isVisible:!0,isDeletable:!0},{title:"Order Item Price",propertyIdentifier:"_orderitem.price",isVisible:!0,isDeletable:!0},{title:"Sku Name",propertyIdentifier:"_orderitem.sku.skuName",isVisible:!0,isDeletable:!0},{title:"Sku Price",propertyIdentifier:"_orderitem.skuPrice",isVisible:!0,isDeletable:!0},{title:"Sku ID",propertyIdentifier:"_orderitem.sku.skuID",isVisible:!0,isDeletable:!0},{title:"SKU Code",propertyIdentifier:"_orderitem.sku.skuCode",isVisible:!0,isDeletable:!0},{title:"Product ID",propertyIdentifier:"_orderitem.sku.product.productID",isVisible:!0,isDeletable:!0},{title:"Product Name",propertyIdentifier:"_orderitem.sku.product.productName",isVisible:!0,isDeletable:!0},{title:"Product Description",propertyIdentifier:"_orderitem.sku.product.productDescription",isVisible:!0,isDeletable:!0},{title:"Image File Name",propertyIdentifier:"_orderitem.sku.imageFile",isVisible:!0,isDeletable:!0},{propertyIdentifier:"_orderitem.sku.skuPrice",ormtype:"string"},{title:"Product Type",propertyIdentifier:"_orderitem.sku.product.productType",isVisible:!0,isDeletable:!0},{propertyIdentifier:"_orderitem.sku.baseProductType",persistent:!1},{title:"Qty.",propertyIdentifier:"_orderitem.quantity",isVisible:!0,isDeletable:!0},{title:"Fulfillment Method Name",propertyIdentifier:"_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName",isVisible:!0,isDeletable:!0},{title:"Fulfillment ID",propertyIdentifier:"_orderitem.orderFulfillment.orderFulfillmentID",isVisible:!0,isDeletable:!0},{title:"Fulfillment Method Type",propertyIdentifier:"_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType",isVisible:!0,isDeletable:!0},{propertyIdentifier:"_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",isVisible:!0,isDeletable:!0},{title:"Street Address",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.streetAddress",isVisible:!0,isDeletable:!0},{title:"Street Address 2",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.street2Address",isVisible:!0,isDeletable:!0},{title:"Postal Code",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.postalCode",isVisible:!0,isDeletable:!0},{title:"City",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.city",isVisible:!0,isDeletable:!0},{title:"State",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.stateCode",isVisible:!0,isDeletable:!0},{title:"Country",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.countryCode",isVisible:!0,isDeletable:!0},{title:"Total",propertyIdentifier:"_orderitem.itemTotal",persistent:!1},{title:"Discount Amount",propertyIdentifier:"_orderitem.discountAmount",persistent:!1},{propertyIdentifier:"_orderitem.extendedPrice",persistent:!1},{propertyIdentifier:"_orderitem.productBundleGroup.amount"},{title:"Product Bundle Group",propertyIdentifier:"_orderitem.productBundleGroup.productBundleGroupID",isVisible:!0,isDeletable:!0},{propertyIdentifier:"_orderitem.productBundleGroup.amountType"},{propertyIdentifier:"_orderitem.productBundleGroupPrice",persistent:!1},{propertyIdentifier:"_orderitem.productBundlePrice",persistent:!1}];angular.forEach(e.attributes,function(e){var t={propertyIdentifier:"_orderitem."+e.attributeCode,attributeID:e.attributeID,attributeSetObject:"orderItem"};n.push(t)});var a=[{filterGroup:[{propertyIdentifier:"_orderitem.parentOrderItem.orderItemID",comparisonOperator:"=",value:e.orderItem.$$getID()}]}],o={columnsConfig:angular.toJson(n),filterGroupsConfig:angular.toJson(a),allRecords:!0};e.hideChildren=function(t){angular.forEach(e.childOrderItems,function(t){console.dir(t),t.hide=!t.hide,e.orderItem.clicked=!e.orderItem.clicked})},e.getChildOrderItems=function(t){if(t.clicked=!0,!e.orderItem.childItemsRetrieved){e.orderItem.childItemsRetrieved=!0;var i=r.getEntity("orderItem",o);i.then(function(i){var a={};a.columns=n,a.baseEntityName="SlatwallOrderItem",a.baseEntityAlias="_orderitem";var o=r.populateCollection(i.records,a);angular.forEach(o,function(i){i.hide=!1,i.depth=t.depth+1,i.data.parentOrderItem=t,i.data.parentOrderItemQuantity=e.orderItem.data.quantity/e.orderItem.data.parentOrderItemQuantity,e.childOrderItems.splice(e.childOrderItems.indexOf(t)+1,0,i),i.data.productBundleGroupPercentage=1,"skuPricePercentageIncrease"===i.data.productBundleGroup.data.amountType?i.data.productBundleGroupPercentage=1+i.data.productBundleGroup.data.amount/100:"skuPricePercentageDecrease"===i.data.productBundleGroup.data.amountType&&(i.data.productBundleGroupPercentage=1-i.data.productBundleGroup.data.amount/100)})})}}}}}return e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$log","$http","$compile","$templateCache","$hibachi","orderItemPartialsPath","slatwallPathBuilder"],t},e}();t.SWChildOrderItem=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){return{restrict:"E",scope:{orderFulfillment:"="},templateUrl:i.buildPartialsPath(t)+"orderfulfillment-shippinglabel.html",link:function(t,i,n){e.debug("\n\n<---ORDER FULFILLMENT STAMP--->\n\n"),e.debug(t.orderFulfillment),e.debug(t.orderFulfillment.data.fulfillmentMethodType)}}}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$log","orderItemPartialsPath","slatwallPathBuilder"],t},e}();t.SWOiShippingLabelStamp=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){return{restrict:"A",scope:{orderItem:"=",orderId:"@",attributes:"=",paginator:"=?"},templateUrl:o.buildPartialsPath(a)+"orderitem.html",link:function(t,i,n){e.debug("order item init"),e.debug(t.orderItem),t.orderItem.clicked=!1,t.orderItem.details=[],t.orderItem.events=[],t.orderItem.queuePosition,t.orderItem.onWaitlist=!1,t.orderItem.isPending=!1,t.orderItem.isRegistered=!1;if("event"===t.orderItem.data.sku.data.product.data.productType.data.systemCode){var a=t.orderItem.$$getEventRegistrations();a.then(function(){angular.forEach(t.orderItem.data.eventRegistrations,function(i){e.debug(i);var n=i.$$getEventRegistrationStatusType();n.then(function(i){e.debug(i),angular.forEach(i.records,function(i){e.debug("Records"),e.debug(i.eventRegistrationStatusType),angular.forEach(i.eventRegistrationStatusType,function(i){if(angular.isDefined(i.systemCode)&&null!==i.systemCode&&"erstWaitlisted"===i.systemCode){t.orderItem.onWaitlist=!0,e.debug("Found + "+i.systemCode);var n=o(t.orderItem);t.orderItem.queuePosition=n}else angular.isDefined(i.systemCode)&&null!==i.systemCode&&"erstRegistered"===i.systemCode?(t.orderItem.isRegistered=!0,e.debug("Found + "+i.systemCode)):angular.isDefined(i.systemCode)&&null!==i.systemCode&&"erstPendingApproval"===i.systemCode?(t.orderItem.isPending=!0,
e.debug("Found + "+i.systemCode)):e.error("Couldn't resolve a status type for: "+i.systemCode)})})})})})}var o=function(i){e.debug("Retrieving position in Queue: ");var n=[{propertyIdentifier:"_eventregistration.waitlistQueuePositionStruct",isVisible:!0,persistent:!1,title:"Event Registrations"}],a=[{filterGroup:[{propertyIdentifier:"_eventregistration.orderItem.orderItemID",comparisonOperator:"=",value:i.$$getID()}]}],o={columnsConfig:angular.toJson(n),filterGroupsConfig:angular.toJson(a),allRecords:!0},s=r.getEntity("EventRegistration",o);e.debug(s),s.then(function(i){angular.forEach(i.records,function(i){if(e.debug("Position: "+i.waitlistQueuePositionStruct),i.waitlistQueuePositionStruct!==-1)return t.orderItem.queuePosition=i.waitlistQueuePositionStruct,i.waitlistQueuePositionStruct})})},s=[{isDeletable:!1,isExportable:!0,propertyIdentifier:"_orderitem.orderItemID",ormtype:"id",isVisible:!0,isSearchable:!0,title:"Order Item ID"},{title:"Order Item Type",propertyIdentifier:"_orderitem.orderItemType",isVisible:!0,isDeletable:!0},{title:"Order Item Price",propertyIdentifier:"_orderitem.price",isVisible:!0,isDeletable:!0},{title:"Sku Name",propertyIdentifier:"_orderitem.sku.skuName",isVisible:!0,isDeletable:!0},{title:"Sku Price",propertyIdentifier:"_orderitem.skuPrice",isVisible:!0,isDeletable:!0},{title:"Sku ID",propertyIdentifier:"_orderitem.sku.skuID",isVisible:!0,isDeletable:!0},{title:"SKU Code",propertyIdentifier:"_orderitem.sku.skuCode",isVisible:!0,isDeletable:!0},{title:"Product Bundle Group",propertyIdentifier:"_orderitem.productBundleGroup.productBundleGroupID",isVisible:!0,isDeletable:!0},{title:"Product ID",propertyIdentifier:"_orderitem.sku.product.productID",isVisible:!0,isDeletable:!0},{title:"Product Name",propertyIdentifier:"_orderitem.sku.product.productName",isVisible:!0,isDeletable:!0},{title:"Product Type",propertyIdentifier:"_orderitem.sku.product.productType",isVisible:!0,isDeletable:!0},{title:"Product Description",propertyIdentifier:"_orderitem.sku.product.productDescription",isVisible:!0,isDeletable:!0},{propertyIdentifier:"_orderitem.sku.baseProductType",persistent:!1},{title:"Event Start Date",propertyIdentifier:"_orderitem.sku.eventStartDateTime",isVisible:!0,isDeletable:!0},{title:"Product Description",propertyIdentifier:"_orderitem.sku.options",isVisible:!0,isDeletable:!0},{propertyIdentifier:"_orderitem.skuPrice",ormtype:"string"},{title:"Image File Name",propertyIdentifier:"_orderitem.sku.imageFile",isVisible:!0,isDeletable:!0},{title:"Qty.",propertyIdentifier:"_orderitem.quantity",isVisible:!0,isDeletable:!0},{title:"Order Return ID",propertyIdentifier:"_orderitem.orderReturn.orderReturnID",isVisible:!0,isDeletable:!0},{title:"Return Street Address",propertyIdentifier:"_orderitem.orderReturn.returnLocation.primaryAddress.address.streetAddress",isVisible:!0,isDeletable:!0},{title:"Return Street Address 2",propertyIdentifier:"_orderitem.orderReturn.returnLocation.primaryAddress.address.street2Address",isVisible:!0,isDeletable:!0},{title:"Return City",propertyIdentifier:"_orderitem.orderReturn.returnLocation.primaryAddress.address.city",isVisible:!0,isDeletable:!0},{title:"Return State",propertyIdentifier:"_orderitem.orderReturn.returnLocation.primaryAddress.address.stateCode",isVisible:!0,isDeletable:!0},{title:"Return Postal Code",propertyIdentifier:"_orderitem.orderReturn.returnLocation.primaryAddress.address.postalCode",isVisible:!0,isDeletable:!0},{title:"Fulfillment Method Name",propertyIdentifier:"_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName",isVisible:!0,isDeletable:!0},{title:"Fulfillment ID",propertyIdentifier:"_orderitem.orderFulfillment.orderFulfillmentID",isVisible:!0,isDeletable:!0},{title:"Fulfillment Method Type",propertyIdentifier:"_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType",isVisible:!0,isDeletable:!0},{propertyIdentifier:"_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",isVisible:!0,isDeletable:!0},{title:"Street Address",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.streetAddress",isVisible:!0,isDeletable:!0},{title:"Street Address 2",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.street2Address",isVisible:!0,isDeletable:!0},{title:"Postal Code",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.postalCode",isVisible:!0,isDeletable:!0},{title:"City",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.city",isVisible:!0,isDeletable:!0},{title:"State",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.stateCode",isVisible:!0,isDeletable:!0},{title:"Country",propertyIdentifier:"_orderitem.orderFulfillment.shippingAddress.countryCode",isVisible:!0,isDeletable:!0},{propertyIdentifier:"_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",isVisible:!0,isDeletable:!0},{title:"Total",propertyIdentifier:"_orderitem.itemTotal",persistent:!1},{title:"Discount Amount",propertyIdentifier:"_orderitem.discountAmount",persistent:!1},{title:"Tax Amount",propertyIdentifier:"_orderitem.taxAmount",persistent:!1},{propertyIdentifier:"_orderitem.extendedPrice",persistent:!1},{propertyIdentifier:"_orderitem.productBundleGroup.amount",ormtype:"big_decimal"},{propertyIdentifier:"_orderitem.productBundleGroup.amountType",ormtype:"string"},{propertyIdentifier:"_orderitem.productBundleGroupPrice",persistent:!1},{propertyIdentifier:"_orderitem.productBundlePrice",persistent:!1}];angular.forEach(t.attributes,function(e){var t={propertyIdentifier:"_orderitem."+e.attributeCode,attributeID:e.attributeID,attributeSetObject:"orderItem"};s.push(t)});var l=[{filterGroup:[{propertyIdentifier:"_orderitem.parentOrderItem.orderItemID",comparisonOperator:"=",value:t.orderItem.$$getID()}]}],c={columnsConfig:angular.toJson(s),filterGroupsConfig:angular.toJson(l),allRecords:!0};t.childOrderItems=[],t.orderItem.depth=1,t.hideChildren=function(i){angular.forEach(t.childOrderItems,function(i){e.debug("hideing"),i.hide=!i.hide,t.orderItem.clicked=!t.orderItem.clicked})},t.deleteEntity=function(){e.debug("Deleting"),e.debug(t.orderItem);var i=t.orderItem.$$delete();i.then(function(e){e.errors&&Object.keys(e.errors).length||delete t.orderItem,t.paginator.getCollection()})},t.getChildOrderItems=function(){if(t.orderItem.childItemsRetrieved)angular.forEach(t.childOrderItems,function(e){e.hide=!e.hide,t.orderItem.clicked=!t.orderItem.clicked});else{t.orderItem.clicked=!t.orderItem.clicked,t.orderItem.hide=!t.orderItem.hide,t.orderItem.childItemsRetrieved=!0;var e=r.getEntity("orderItem",c);e.then(function(e){var i={};i.columns=s,i.baseEntityName="SlatwallOrderItem",i.baseEntityAlias="_orderitem";var n=r.populateCollection(e.records,i);angular.forEach(n,function(e){e.depth=t.orderItem.depth+1,t.childOrderItems.push(e),e.data.productBundleGroupPercentage=1,"skuPricePercentageIncrease"===e.data.productBundleGroup.data.amountType?e.data.productBundleGroupPercentage=1+e.data.productBundleGroup.data.amount/100:"skuPricePercentageDecrease"===e.data.productBundleGroup.data.amountType&&(e.data.productBundleGroupPercentage=1-e.data.productBundleGroup.data.amount/100)})})}}}}}return e.$inject=["$log","$compile","$http","$templateCache","$hibachi","orderItemPartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$log","$compile","$http","$templateCache","$hibachi","orderItemPartialsPath","slatwallPathBuilder"],t},e}();t.SWOrderItem=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){return{restrict:"A",scope:{systemCode:"=",orderItemId:"=",skuId:"=",orderItem:"="},templateUrl:r.buildPartialsPath(n)+"orderitem-detaillabel.html",link:function(t,n,r){t.details=[],t.orderItem.detailsName=[];e.debug("Detail stamp"),e.debug(t.systemCode),e.debug(t.orderItemId),e.debug(t.skuId),e.debug(t.orderItem);var a=function(e){for(var t=0;t<=e.data.sku.data.options.length-1;t++){var n=i.newCollectionConfig("Option");n.addDisplayProperty("optionID,optionName, optionGroup.optionGroupName"),n.addFilter("optionID",e.data.sku.data.options[t].optionID,"="),n.getEntity().then(function(t){angular.isDefined(t.pageRecords[0])&&(e.detailsName.push(t.pageRecords[0].optionGroup_optionGroupName),e.details.push(t.pageRecords[0].optionName))},function(e){throw"SWOrderItemDetailStamp had trouble retrieving the option group for option"})}},o=function(e){var t=e.data.sku.data.subscriptionTerm.data.subscriptionTermName||"";e.detailsName.push("Subscription Term:"),e.details.push(t);for(var i=0;i<=e.data.sku.data.subscriptionBenefits.length-1;i++){var n=e.data.sku.data.subscriptionBenefits[i].subscriptionBenefitName||"";e.detailsName.push("Subscription Benefit:"),e.details.push(n)}},s=function(e){e.detailsName.push("Event Date: "),e.details.push(e.data.sku.data.eventStartDateTime);for(var t=0;t<=e.data.sku.data.locations.length-1;t++)e.detailsName.push("Location: "),e.details.push(e.data.sku.data.locations[t].locationName)};if(angular.isUndefined(t.orderItem.details)&&(t.orderItem.details=[]),angular.isDefined(t.orderItem.details))switch(t.systemCode){case"merchandise":a(t.orderItem);break;case"subscription":o(t.orderItem);break;case"event":s(t.orderItem)}}}}return e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$log","$hibachi","collectionConfigService","orderItemPartialsPath","slatwallPathBuilder"],t},e}();t.SWOrderItemDetailStamp=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c){return{restrict:"E",scope:{orderId:"@"},templateUrl:s.buildPartialsPath(o)+"orderitems.html",link:function(i,a,o){i.keywords="",i.loadingCollection=!1;var s;i.searchCollection=function(){s&&t.cancel(s),s=t(function(){e.debug("search with keywords"),e.debug(i.keywords),i.paginator.setCurrentPage(1),i.loadingCollection=!0,i.getCollection()},500)},e.debug("Init Order Item"),e.debug(i.orderId),i.getCollection=function(){"Auto"===i.pageShow&&(i.pageShow=50);var t=r.newCollectionConfig("OrderItem");t.setDisplayProperties("orderItemID,currencyCode,sku.skuName\n                         ,price,skuPrice,sku.skuID,sku.skuCode,productBundleGroup.productBundleGroupID\n\t\t\t\t\t\t ,sku.product.productID\n \t\t\t\t\t\t ,sku.product.productName,sku.product.productDescription\n\t\t\t\t\t\t ,sku.eventStartDateTime\n \t\t\t\t\t\t ,quantity\n\t\t\t\t\t\t ,orderFulfillment.fulfillmentMethod.fulfillmentMethodName\n\t\t\t\t\t\t ,orderFulfillment.orderFulfillmentID\n \t\t\t\t\t\t ,orderFulfillment.shippingAddress.streetAddress\n     \t\t\t\t\t ,orderFulfillment.shippingAddress.street2Address\n\t\t\t\t\t\t ,orderFulfillment.shippingAddress.postalCode\n\t\t\t\t\t\t ,orderFulfillment.shippingAddress.city,orderFulfillment.shippingAddress.stateCode\n \t\t\t\t\t\t ,orderFulfillment.shippingAddress.countryCode\n                         ,orderItemType.systemCode\n\t\t\t\t\t\t ,orderFulfillment.fulfillmentMethod.fulfillmentMethodType\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.streetAddress\n\t\t\t\t\t\t ,orderFulfillment.pickupLocation.primaryAddress.address.street2Address\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.city\n\t\t\t\t\t\t ,orderFulfillment.pickupLocation.primaryAddress.address.stateCode\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.postalCode\n\t\t\t\t\t\t ,orderReturn.orderReturnID\n \t\t\t\t\t\t ,orderReturn.returnLocation.primaryAddress.address.streetAddress\n\t\t\t\t\t\t ,orderReturn.returnLocation.primaryAddress.address.street2Address\n                         ,orderReturn.returnLocation.primaryAddress.address.city\n\t\t\t\t\t\t ,orderReturn.returnLocation.primaryAddress.address.stateCode\n                         ,orderReturn.returnLocation.primaryAddress.address.postalCode\n\t\t\t\t\t\t ,itemTotal,discountAmount,taxAmount,extendedPrice,productBundlePrice,sku.baseProductType\n                         ,sku.subscriptionBenefits\n\t\t\t\t\t\t ,sku.product.productType.systemCode\n\t\t\t\t\t\t ,sku.options\n\t\t\t\t\t\t ,sku.locations\n \t\t\t\t\t\t ,sku.subscriptionTerm.subscriptionTermName\n \t\t\t\t\t\t ,sku.imageFile\n                         ,stock.location.locationName").addFilter("order.orderID",i.orderId).addFilter("parentOrderItem","null","IS").setKeywords(i.keywords).setPageShow(i.paginator.getPageShow()).setCurrentPage(i.paginator.getCurrentPage()),angular.forEach(i.attributes,function(e){var i={propertyIdentifier:"_orderitem."+e.attributeCode,attributeID:e.attributeID,attributeSetObject:"orderItem"};t.columns.push(i)});var a=t.getEntity();a.then(function(r){i.collection=r;i.orderItems=n.populateCollection(r.pageRecords,t);for(var a in i.orderItems)e.debug("OrderItem Product Type"),e.debug(i.orderItems);i.paginator.setPageRecordsInfo(i.collection),i.loadingCollection=!1},function(e){i.orderItems=[]})};var u=r.newCollectionConfig("Attribute");u.setDisplayProperties("attributeID,attributeCode,attributeName").addFilter("displayOnOrderDetailFlag",!0).addFilter("activeFlag",!0).setAllRecords(!0);var d=u.getEntity();d.then(function(e){i.attributes=[],angular.forEach(e.records,function(e){i.attributes.push(e)}),i.getCollection()}),i.paginator=l.createPagination(),i.paginator.collection=i.collection,i.paginator.getCollection=i.getCollection,$(document).on("listingDisplayUpdate",{},function(e,t,n){i.orderItems=void 0,i.getCollection()}),c.attach(i.getCollection,"swPaginationAction")}}}return e.$inject=["$log","$timeout","$location","$hibachi","collectionConfigService","formService","orderItemPartialsPath","slatwallPathBuilder","paginationService","observerService"],e.Factory=function(){var t=function(t,i,n,r,a,o,s,l,c,u){return new e(t,i,n,r,a,o,s,l,c,u)};return t.$inject=["$log","$timeout","$location","$hibachi","collectionConfigService","formService","orderItemPartialsPath","slatwallPathBuilder","paginationService","observerService"],t},e}();t.SWOrderItems=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a){return{restrict:"E",scope:{orderItem:"="},templateUrl:a.buildPartialsPath(r)+"orderitem-image.html",link:function(e,i,r){var a=r.profilename,o=e.orderItem.data.sku.data.skuID;n.getResizedImageByProfileName(a,o).then(function(i){t.debug(i.resizedImagePaths[0]),e.orderItem.imagePath=i.resizedImagePaths[0]})}}}return e.Factory=function(){var t=function(t,i,n,r,a,o){return new e(t,i,n,r,a,o)};return t.$inject=["$http","$log","$q","$hibachi","orderItemPartialsPath","slatwallPathBuilder"],t},e}();t.SWResizedImage=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(55),a=i(57),o=i(56),s=i(58),l=i(59),c=i(60),u=angular.module("hibachi.orderitem",[n.coremodule.name]).run([function(){}]).directive("swChildOrderItem",r.SWChildOrderItem.Factory()).directive("swOrderItem",a.SWOrderItem.Factory()).directive("swoishippinglabelstamp",o.SWOiShippingLabelStamp.Factory()).directive("swOrderItemDetailStamp",s.SWOrderItemDetailStamp.Factory()).directive("swOrderItems",l.SWOrderItems.Factory()).directive("swresizedimage",c.SWResizedImage.Factory()).constant("orderItemPartialsPath","orderitem/components/");t.orderitemmodule=u},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){this.collectionConfigService=e,this.listingService=t,this.utilityService=i,this.collectionConfig=e.newCollectionConfig("Content"),this.collectionConfig.addDisplayProperty("contentID, title, activeFlag, site.siteName, titlePath"),this.typeaheadDataKey=i.createID(32),this.alreadySelectedContentCollectionConfig=e.newCollectionConfig("ProductListingPage"),this.alreadySelectedContentCollectionConfig.addDisplayProperty("productListingPageID, product.productID, content.contentID, content.title, content.site.siteName, content.activeFlag"),this.alreadySelectedContentCollectionConfig.addFilter("product.productID",this.productId,"=")}return e.$inject=["collectionConfigService","listingService","utilityService"],e}();t.SWProductListingPagesController=i;var n=function(){function e(e,t,n,r,a){this.$http=e,this.$hibachi=t,this.paginationService=n,this.productPartialsPath=r,this.slatwallPathBuilder=a,this.restrict="EA",this.scope={},this.bindToController={edit:"=?",selectedListingPageIdPaths:"@?",productId:"@?"},this.controller=i,this.controllerAs="swProductListingPages",this.link=function(e,t,i){},this.templateUrl=a.buildPartialsPath(r)+"/productlistingpages.html"}return e.$inject=["$http","$hibachi","paginationService","productPartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$http","$hibachi","paginationService","productPartialsPath","slatwallPathBuilder"],t},e}();t.SWProductListingPages=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s){var l=this;this.$q=e,this.$scope=t,this.$element=i,this.$log=n,this.$hibachi=r,this.collectionConfigService=a,this.selectionService=o,this.rbkeyService=s,this.$scope.preprocessproduct_createCtrl.productTypeChanged=function(e){l.$scope.preprocessproduct_createCtrl.selectedOption=e,l.$scope.preprocessproduct_createCtrl.getCollection(),l.selectionService.clearSelection("ListingDisplay")},this.$scope.productTypeIDPaths={},this.$scope.preprocessproduct_createCtrl.getCollection=function(){var e=l.$q.defer(),t=e.promise;if(angular.isUndefined(l.$scope.productTypeIDPaths[l.$scope.preprocessproduct_createCtrl.selectedOption.value])){var i=l.collectionConfigService.newCollectionConfig("ProductType");i.addDisplayProperty("productTypeID, productTypeIDPath"),i.addFilter("productTypeID",l.$scope.preprocessproduct_createCtrl.selectedOption.value,"="),i.getEntity().then(function(t){angular.isDefined(t.pageRecords[0])&&(l.$scope.productTypeIDPaths[t.pageRecords[0].productTypeID]=t.pageRecords[0].productTypeIDPath),e.resolve()},function(t){throw e.reject(),"ProductCreateController was unable to retrieve the product type ID Path."})}else e.resolve();t.then(function(){if(l.$scope.productTypeIDPaths[l.$scope.preprocessproduct_createCtrl.selectedOption.value]){var e=l.collectionConfigService.newCollectionConfig("Option");e.setDisplayProperties("optionGroup.optionGroupName,optionName",void 0,{isVisible:!0}),e.setDisplayProperties("optionID",void 0,{isVisible:!1}),e.addFilter("optionGroup.globalFlag",1,"=");for(var t=l.$scope.productTypeIDPaths[l.$scope.preprocessproduct_createCtrl.selectedOption.value].split(","),i=0;i<t.length;i++)e.addFilter("optionGroup.productTypes.productTypeID",t[i],"=","OR");e.setOrderBy("optionGroup.sortOrder|ASC,sortOrder|ASC"),l.$scope.preprocessproduct_createCtrl.collectionListingPromise=e.getEntity(),l.$scope.preprocessproduct_createCtrl.collectionListingPromise.then(function(t){l.$scope.preprocessproduct_createCtrl.collection=t,l.$scope.preprocessproduct_createCtrl.collection.collectionConfig=e})}},function(){throw"ProductCreateController was unable to resolve the product type."})};var c=$("select[name='renewalMethod']")[0];this.$scope.preprocessproduct_createCtrl.renewalMethodOptions=[],angular.forEach(c,function(e){var t={label:e.label,value:e.value};l.$scope.preprocessproduct_createCtrl.renewalMethodOptions.push(t)}),this.$scope.preprocessproduct_createCtrl.renewalSkuChoice=this.$scope.preprocessproduct_createCtrl.renewalMethodOptions[1];var u=$("select[name='product.productType.productTypeID']")[0];this.$scope.preprocessproduct_createCtrl.options=[],angular.forEach(u,function(e){var t={label:e.label,value:e.value};l.$scope.preprocessproduct_createCtrl.options.push(t)}),this.$scope.preprocessproduct_createCtrl.selectedOption={},angular.isDefined(this.$scope.preprocessproduct_createCtrl.options[0])&&angular.isDefined(this.$scope.preprocessproduct_createCtrl.options[0].value)?(this.$scope.preprocessproduct_createCtrl.selectedOption.value=this.$scope.preprocessproduct_createCtrl.options[0].value,this.$scope.preprocessproduct_createCtrl.productTypeChanged(this.$scope.preprocessproduct_createCtrl.selectedOption)):this.$scope.preprocessproduct_createCtrl.selectedOption.value="",this.$scope.preprocessproduct_createCtrl.getCollection()}return e.$inject=["$q","$scope","$element","$log","$hibachi","collectionConfigService","selectionService","rbkeyService"],e}();t.ProductCreateController=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(63),a=i(62),o=angular.module("hibachi.product",[n.coremodule.name]).config(function(){}).constant("productPartialsPath","product/components/").controller("preprocessproduct_create",r.ProductCreateController).directive("swProductListingPages",a.SWProductListingPages.Factory());t.productmodule=o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s){this.name=e,this.type=t,this.displayPropertyIdentifier=i,this.propertyIdentifier=n,this.displayValue=r,this.value=a,this.comparisonOperator=o,this.logicalOperator=s}return e}(),n=function(){function e(e,t,n,r,a,o,s,l,c){var u=this;this.$log=e,this.$timeout=t,this.collectionConfigService=n,this.productBundleService=r,this.metadataService=a,this.utilityService=o,this.formService=s,this.$hibachi=l,this.productBundlePartialsPath=c,this.init=function(){if(u.maxRecords=10,u.recordsCount=0,u.pageRecordsStart=0,u.pageRecordsEnd=0,u.recordsPerPage=10,u.showAll=!1,u.showAdvanced=!1,u.currentPage=1,u.pageShow=10,u.searchAllCollectionConfigs=[],angular.isUndefined(u.filterPropertiesList)){u.filterPropertiesList={};var e=u.$hibachi.getFilterPropertiesByBaseEntityName("_sku");e.then(function(e){u.metadataService.setPropertiesList(e,"_sku"),u.filterPropertiesList._sku=u.metadataService.getPropertiesListByBaseEntityAlias("_sku"),u.metadataService.formatPropertiesList(u.filterPropertiesList._sku,"_sku")})}u.skuCollectionConfig={baseEntityName:"Sku",baseEntityAlias:"_sku",collectionConfig:u.productBundleGroup.data.skuCollectionConfig,collectionObject:"Sku"},u.searchOptions={options:[{name:"All",value:"All"},{name:"Product Type",value:"productType"},{name:"Brand",value:"brand"},{name:"Products",value:"product"},{name:"Skus",value:"sku"}],selected:{name:"All",value:"All"},setSelected:function(e){u.searchOptions.selected=e,u.getFiltersByTerm(u.productBundleGroupFilters.keyword,e)}},u.navigation={value:"Basic",setValue:function(e){u.value=e}},u.filterTemplatePath=u.productBundlePartialsPath+"productbundlefilter.html",u.productBundleGroupFilters={},u.productBundleGroupFilters.value=[],angular.isUndefined(u.productBundleGroup.data.skuCollectionConfig)&&(u.productBundleGroup.data.skuCollectionConfig={},u.productBundleGroup.data.skuCollectionConfig.filterGroups=[]),angular.isDefined(u.productBundleGroup.data.skuCollectionConfig.filterGroups[0])||(u.productBundleGroup.data.skuCollectionConfig.filterGroups[0]={},u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup=[]);({filterGroupsConfig:u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup,columnsConfig:u.productBundleGroup.data.skuCollectionConfig.columns});u.getCollection()},this.openCloseAndRefresh=function(){u.showAdvanced=!u.showAdvanced,u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.length&&u.getCollection()},this.deleteEntity=function(e){angular.isNumber(e)?u.removeProductBundleGroupFilter(e):(u.removeProductBundleGroup({index:u.index}),u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup=[])},this.getCollection=function(){var e={filterGroupsConfig:angular.toJson(u.productBundleGroup.data.skuCollectionConfig.filterGroups),columnsConfig:angular.toJson(u.productBundleGroup.data.skuCollectionConfig.columns),currentPage:1,pageShow:10},t=u.$hibachi.getEntity("Sku",e);t.then(function(e){u.collection=e})},this.increaseCurrentCount=function(){angular.isDefined(u.totalPages)&&u.totalPages!=u.currentPage?u.currentPage++:u.currentPage=1},this.resetCurrentCount=function(){u.currentPage=1},this.getFiltersByTerm=function(e,t){u.keyword=e,u.filterTerm=t,u.loading=!0,u.showAll=!0;var i;u.timeoutPromise&&u.$timeout.cancel(u.timeoutPromise),u.timeoutPromise=u.$timeout(function(){if("All"===t.value){u.showAll=!0,u.productBundleGroupFilters.value=[],i=u.searchOptions.options.length-1;for(var n=0;n<u.searchOptions.options.length;n++)if(n>0){var r=u.searchOptions.options[n];!function(e,t){u.searchAllCollectionConfigs.length<=4&&u.searchAllCollectionConfigs.push(u.collectionConfigService.newCollectionConfig(u.searchOptions.options[n].value)),u.searchAllCollectionConfigs[n-1].setKeywords(e),u.searchAllCollectionConfigs[n-1].setCurrentPage(u.currentPage),u.searchAllCollectionConfigs[n-1].setPageShow(u.pageShow),u.searchAllCollectionConfigs[n-1].getEntity().then(function(e){u.recordsCount=e.recordsCount,u.pageRecordsStart=e.pageRecordsStart,u.pageRecordsEnd=e.pageRecordsEnd,u.totalPages=e.totalPages;var n=u.productBundleService.formatProductBundleGroupFilters(e.pageRecords,t,u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup);for(var r in n)u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.indexOf(n[r])==-1&&(u.productBundleGroupFilters.value.push(n[r]),u.$log.debug(n[r]));i--,0==i&&(u.productBundleGroupFilters.value=u.utilityService.arraySorter(u.productBundleGroupFilters.value,["type","name"]),u.$log.debug(u.productBundleGroupFilters.value),0==u.productBundleGroupFilters.value.length&&(u.currentPage=0)),u.loading=!1})}(e,r)}}else u.showAll=!1,(angular.isUndefined(u.searchCollectionConfig)||t.value!=u.searchCollectionConfig.baseEntityName)&&(u.searchCollectionConfig=u.collectionConfigService.newCollectionConfig(t.value)),u.searchCollectionConfig.setKeywords(e),u.searchCollectionConfig.setCurrentPage(u.currentPage),u.searchCollectionConfig.setPageShow(u.pageShow),u.searchCollectionConfig.getEntity().then(function(e){u.recordsCount=e.recordsCount,u.pageRecordsStart=e.pageRecordsStart,u.pageRecordsEnd=e.pageRecordsEnd,u.totalPages=e.totalPages,u.productBundleGroupFilters.value=u.productBundleService.formatProductBundleGroupFilters(e.pageRecords,t,u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup)||[],u.loading=!1})},500)},this.addFilterToProductBundle=function(e,t,n){var r=new i(e.name,e.type,e.type,e.propertyIdentifier,e[e.entityType.charAt(0).toLowerCase()+e.entityType.slice(1)+"ID"],e[e.entityType.charAt(0).toLowerCase()+e.entityType.slice(1)+"ID"]);if(t===!1?r.comparisonOperator="!=":r.comparisonOperator="=",u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.length>0&&(r.logicalOperator="OR"),angular.isDefined(u.searchCollectionConfig)&&u.searchCollectionConfig.addFilter(u.searchCollectionConfig.baseEntityName+"ID",r.value,"!="),u.showAll)switch(r.type){case"Product Type":u.searchAllCollectionConfigs[0].addFilter("productTypeID",r.value,"!=");break;case"Brand":u.searchAllCollectionConfigs[1].addFilter("brandID",r.value,"!=");break;case"Products":u.searchAllCollectionConfigs[2].addFilter("productID",r.value,"!=");break;case"Skus":u.searchAllCollectionConfigs[3].addFilter("skuID",r.value,"!=")}u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.push(r),u.productBundleGroup.forms[u.formName].skuCollectionConfig.$setDirty(),u.showAll?u.productBundleGroupFilters.value.splice(n,1):u.getFiltersByTerm(u.keyword,u.filterTerm)},this.removeProductBundleGroupFilter=function(e){u.productBundleGroupFilters.value.push(u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup[e]),u.productBundleGroupFilters.value=u.utilityService.arraySorter(u.productBundleGroupFilters.value,["type","name"]);var t=u.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.splice(e,1)[0];if(angular.isDefined(u.searchCollectionConfig)&&u.searchCollectionConfig.removeFilter(u.searchCollectionConfig.baseEntityAlias+"."+u.searchCollectionConfig.baseEntityName+"ID",t.value,"!="),u.showAll)switch(t.type){case"Product Type":u.searchAllCollectionConfigs[0].removeFilter("_productType.productTypeID",t.value,"!=");break;case"Brand":u.searchAllCollectionConfigs[1].removeFilter("_brand.brandID",t.value,"!=");break;case"Products":u.searchAllCollectionConfigs[2].removeFilter("_product.productID",t.value,"!=");break;case"Skus":u.searchAllCollectionConfigs[3].removeFilter("_sku.skuID",t.value,"!=")}u.showAll?u.productBundleGroupFilters.value.splice(e,0,t):u.getFiltersByTerm(u.keyword,u.filterTerm)},this.init()}return e.$inject=["$log","$timeout","collectionConfigService","productBundleService","metadataService","utilityService","formService","$hibachi","productBundlePartialsPath"],e}();t.SWProductBundleCollectionFilterItemTypeaheadController=n;var r=function(){function e(e,t,i,r,a,o,s,l,c,u){this.$log=e,this.$timeout=t,this.collectionConfigService=i,this.productBundleService=r,this.metadataService=a,this.utilityService=o,this.formService=s,this.$hibachi=l,this.productBundlePartialsPath=c,this.restrict="EA",this.scope={},this.bindToController={productBundleGroup:"=",index:"=",formName:"@"},this.controller=n,this.controllerAs="swProductBundleCollectionFilteritemTypeahead",this.link=function(e,t,i,n){},this.templateUrl=u.buildPartialsPath(c)+"productbundlecollectionfilteritemtypeahead.html"}return e.$inject=["$log","$timeout","collectionConfigService","productBundleService","metadataService","utilityService","formService","$hibachi","productBundlePartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o,s,l,c,u){return new e(t,i,n,r,a,o,s,l,c,u)};return t.$inject=["$log","$timeout","collectionConfigService","productBundleService","metadataService","utilityService","formService","$hibachi","productBundlePartialsPath","slatwallPathBuilder"],t},e}();t.SWProductBundleCollectionFilterItemTypeahead=r},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=(function(){function e(e,t,i,n,r,a,o,s){this.name=e,this.type=t,this.displayPropertyIdentifier=i,this.propertyIdentifier=n,this.displayValue=r,this.value=a,this.comparisonOperator=o,this.logicalOperator=s}return e}(),function(){function e(e,t,i,n,r,a,o,s,l){var c=this;this.$log=e,this.$timeout=t,this.collectionConfigService=i,this.productBundleService=n,this.metadataService=r,this.utilityService=a,this.formService=o,this.$hibachi=s,this.productBundlePartialsPath=l,this.init=function(){if(c.maxRecords=10,c.recordsCount=0,c.pageRecordsStart=0,c.pageRecordsEnd=0,c.recordsPerPage=10,c.showAll=!1,c.showAdvanced=!1,c.currentPage=1,c.pageShow=10,c.searchAllCollectionConfigs=[],angular.isUndefined(c.filterPropertiesList)){c.filterPropertiesList={};var e=c.$hibachi.getFilterPropertiesByBaseEntityName("_sku");e.then(function(e){c.metadataService.setPropertiesList(e,"_sku"),c.filterPropertiesList._sku=c.metadataService.getPropertiesListByBaseEntityAlias("_sku"),c.metadataService.formatPropertiesList(c.filterPropertiesList._sku,"_sku")})}c.searchOptions={options:[{name:"All",value:"All"},{name:"Product Type",value:"productType"},{name:"Brand",value:"brand"},{name:"Products",value:"product"},{name:"Skus",value:"sku"}],selected:{name:"All",value:"All"},setSelected:function(e){c.searchOptions.selected=e}},c.navigation={value:"Basic",setValue:function(e){c.value=e}},c.filterTemplatePath=c.productBundlePartialsPath+"productbundlefilter.html",c.productBundleGroupFilters={},c.productBundleGroupFilters.value=[],(angular.isUndefined(c.productBundleGroup.data.skuCollectionConfig)||null===c.productBundleGroup.data.skuCollectionConfig)&&(c.productBundleGroup.data.skuCollectionConfig=c.collectionConfigService.newCollectionConfig("Sku").getCollectionConfig());({filterGroupsConfig:c.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup,columnsConfig:c.productBundleGroup.data.skuCollectionConfig.columns
});c.getCollection()},this.deleteEntity=function(e){c.removeProductBundleGroup({index:c.index}),c.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup=[]},this.getCollection=function(){var e={filterGroupsConfig:angular.toJson(c.productBundleGroup.data.skuCollectionConfig.filterGroups),columnsConfig:angular.toJson(c.productBundleGroup.data.skuCollectionConfig.columns),currentPage:1,pageShow:10},t=c.$hibachi.getEntity("Sku",e);t.then(function(e){c.collection=e})},this.increaseCurrentCount=function(){angular.isDefined(c.totalPages)&&c.totalPages!=c.currentPage?c.currentPage++:c.currentPage=1},this.resetCurrentCount=function(){c.currentPage=1},this.save=function(){var e=c.productBundleGroup.$$save();e.then(function(e){c.productBundleGroup.data.$$toggleEdit(),c.refreshProductBundleGroup()}).catch(function(e){})},this.saveAndAddBundleGroup=function(){var e=c.productBundleGroup.$$save();e.then(function(e){c.productBundleGroup.data.$$toggleEdit(),c.addProductBundleGroup()}).catch(function(e){})},this.init()}return e.$inject=["$log","$timeout","collectionConfigService","productBundleService","metadataService","utilityService","formService","$hibachi","productBundlePartialsPath"],e}()),n=function(){function e(e,t,n,r,a,o,s,l,c,u){this.$log=e,this.$timeout=t,this.collectionConfigService=n,this.productBundleService=r,this.metadataService=a,this.utilityService=o,this.formService=s,this.$hibachi=l,this.productBundlePartialsPath=c,this.restrict="EA",this.scope={},this.bindToController={productBundleGroup:"=",productBundleGroups:"=",index:"=",addProductBundleGroup:"&",removeProductBundleGroup:"&",refreshProductBundleGroup:"&",formName:"@"},this.controller=i,this.controllerAs="swProductBundleGroup",this.link=function(e,t,i,n){},this.templateUrl=u.buildPartialsPath(c)+"productbundlegroup.html"}return e.$inject=["$log","$timeout","collectionConfigService","productBundleService","metadataService","utilityService","formService","$hibachi","productBundlePartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o,s,l,c,u){return new e(t,i,n,r,a,o,s,l,c,u)};return t.$inject=["$log","$timeout","collectionConfigService","productBundleService","metadataService","utilityService","formService","$hibachi","productBundlePartialsPath","slatwallPathBuilder"],t},e}();t.SWProductBundleGroup=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a){var o=this;this.$scope=e,this.$element=t,this.$attrs=i,this.$log=n,this.productBundleService=r,this.$hibachi=a,this.removeProductBundleGroup=function(e){angular.isDefined(o.productBundleGroups[e])&&o.productBundleGroups[e].$$isPersisted()&&o.productBundleGroups[e].$$delete().then(function(e){}),o.productBundleGroups.splice(e,1)},this.addProductBundleGroup=function(){var e=o.$hibachi.newProductBundleGroup();e.$$setProductBundleSku(o.sku),e=o.productBundleService.decorateProductBundleGroup(e)},this.refreshProductBundleGroup=function(){for(var e in o.productBundleGroups)void 0==o.productBundleGroups[e].forms&&void 0==o.productBundleGroups[e].forms["createProductBundle"+e]||(void 0!=o.productBundleGroups[e].forms["form.createProductBundle"+e].maximumQuantity&&void 0!=o.productBundleGroups[e].forms["form.createProductBundle"+e].maximumQuantity.$modelValue&&o.productBundleGroups[""+e].data.maximumQuantity!==o.productBundleGroups[e].forms["form.createProductBundle"+e].maximumQuantity.$modelValue&&(o.productBundleGroups[""+e].data.maximumQuantity=o.productBundleGroups[e].forms["form.createProductBundle"+e].maximumQuantity.$modelValue),void 0!=o.productBundleGroups[e].forms["form.createProductBundle"+e].minimumQuantity&&void 0!=o.productBundleGroups[e].forms["form.createProductBundle"+e].minimumQuantity.$modelValue&&o.productBundleGroups[""+e].data.minimumQuantity!==o.productBundleGroups[e].forms["form.createProductBundle"+e].minimumQuantity.$modelValue&&(o.productBundleGroups[""+e].data.minimumQuantity=o.productBundleGroups[e].forms["form.createProductBundle"+e].minimumQuantity.$modelValue))},e.editing=e.editing||!0,angular.forEach(this.productBundleGroups,function(e){r.decorateProductBundleGroup(e),e.data.$$editing=!1})}return e.$inject=["$scope","$element","$attrs","$log","productBundleService","$hibachi"],e}();t.SWProductBundleGroupsController=i;var n=function(){function e(e,t,n,r,a,o,s){this.restrict="EA",this.scope={sku:"=",productBundleGroups:"="},this.bindToController={sku:"=",productBundleGroups:"="},this.controller=i,this.controllerAs="swProductBundleGroups",this.templateUrl=s.buildPartialsPath(a)+"productbundlegroups.html"}return e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$http","$log","$hibachi","metadataService","productBundlePartialsPath","productBundleService","slatwallPathBuilder"],t},e}();t.SWProductBundleGroups=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s){return{restrict:"A",templateUrl:s.buildPartialsPath(a)+"productbundlegrouptype.html",scope:{productBundleGroup:"="},controller:["$scope","$element","$attrs",function(e,n,a){if(t.debug("productBundleGrouptype"),t.debug(e.productBundleGroup),e.productBundleGroupTypes={},e.$$id="productBundleGroupType",e.productBundleGroupTypes.value=[],e.productBundleGroupTypes.$$adding=!1,e.productBundleGroupTypeSaving=!1,e.productBundleGroupType={},e.productBundleGroupTypeCollection=r.newCollectionConfig("Type"),e.productBundleGroupTypeCollection.setAllRecords(!0),e.productBundleGroupTypeCollection.addFilter("parentType.systemCode","productBundleGroupType","="),angular.isUndefined(e.productBundleGroup.data.productBundleGroupType)){var o=i.newType(),s=i.newType();s.data.typeID="154dcdd2f3fd4b5ab5498e93470957b8",o.$$setParentType(s),e.productBundleGroup.$$setProductBundleGroupType(o)}e.productBundleGroupTypes.setAdding=function(){if(e.productBundleGroupTypes.$$adding=!e.productBundleGroupTypes.$$adding,!e.productBundleGroupTypes.$$adding){var t=i.newType(),n=i.newType();n.data.typeID="154dcdd2f3fd4b5ab5498e93470957b8",t.$$setParentType(n),e.productBundleGroup.data.productBundleGroupType.data.typeName="",t.data.typeName=e.productBundleGroup.data.productBundleGroupType.data.typeName,t.data.typeDescription="",t.data.typeNameCode="",angular.extend(e.productBundleGroup.data.productBundleGroupType,t)}},e.showAddProductBundleGroupTypeBtn=!1,e.productBundleGroupTypes.getTypesByKeyword=function(n){t.debug("getTypesByKeyword");var r='[ {  "filterGroup":[   {   "propertyIdentifier":"_type.parentType.systemCode", "comparisonOperator":"=", "value":"productBundleGroupType", "ormtype":"string", "conditionDisplay":"Equals"},{"logicalOperator":"AND", "propertyIdentifier":"_type.typeName", "comparisonOperator":"like", "ormtype":"string", "value":"%'+n+'%"  } ] }]';return i.getEntity("type",{filterGroupsConfig:r.trim()}).then(function(i){t.debug("typesByKeyword"),t.debug(i),e.productBundleGroupTypes.value=i.pageRecords;var r=n.length;return r>0?e.showAddProductBundleGroupTypeBtn=!0:e.showAddProductBundleGroupTypeBtn=!1,e.productBundleGroupTypes.value})},e.selectProductBundleGroupType=function(t){angular.extend(e.productBundleGroup.data.productBundleGroupType.data,t);var n=i.newType();n.data.typeID="154dcdd2f3fd4b5ab5498e93470957b8",e.productBundleGroup.data.productBundleGroupType.$$setParentType(n),e.showAddProductBundleGroupTypeBtn=!1},e.closeAddScreen=function(){e.productBundleGroupTypes.$$adding=!1,e.showAddProductBundleGroupTypeBtn=!1},e.clearTypeName=function(){angular.isDefined(e.productBundleGroup.data.productBundleGroupType)&&(e.productBundleGroup.data.productBundleGroupType.data.typeName="")},e.saveProductBundleGroupType=function(){e.productBundleGroupTypeSaving=!0;var t=e.productBundleGroup.data.productBundleGroupType.$$save();t.then(function(i){t.$$state.status&&(e.productBundleGroupTypeSaving=!1,e.closeAddScreen())},function(){e.productBundleGroupTypeSaving=!1})},e.clickOutsideArgs={callBackActions:[e.closeAddScreen]},e.closeThis=function(t){if(!e.productBundleGroup.data.productBundleGroupType.$$isPersisted())for(var i in t.callBackActions)t.callBackActions[i]()}}]}}return e.Factory=function(){var t=function(t,i,n,r,a,o,s,l){return new e(t,i,n,r,a,o,s,l)};return t.$inject=["$http","$log","$hibachi","formService","collectionConfigService","productBundlePartialsPath","productBundleService","slatwallPathBuilder"],t},e}();t.SWProductBundleGroupType=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c,u){e.productBundlePartialsPath=u;var d=function(e){e=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var t=new RegExp("[\\?&]"+e+"=([^&#]*)"),i=t.exec(location.search);return null===i?"":decodeURIComponent(i[1].replace(/\+/g," "))};e.$id="create-bundle-controller",angular.isDefined(e.scrollToTopOfDialog)&&e.scrollToTopOfDialog();var p=d("productID"),f=function(){if(i.debug(e),angular.isDefined(e.product)){for(var t in e.product.forms)c.resetForm(e.product.forms[t]);if(angular.isDefined(e.product.data.skus[0]))for(var t in e.product.data.skus[0].forms)c.resetForm(e.product.data.skus[0].forms[t]);if(angular.isDefined(e.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup))for(var t in e.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup.forms)c.resetForm(e.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup.forms[t])}e.product=a.newProduct();var n=a.newBrand(),r=a.newProductType();e.product.$$setBrand(n),e.product.$$setProductType(r),e.product.$$addSku(),e.product.data.skus[0].data.productBundleGroups=[]};if(e.productBundleGroup,angular.isDefined(p)&&""!==p){var h=a.getProduct({id:p});h.promise.then(function(){i.debug(h.value),h.value.$$getSkus().then(function(){h.value.data.skus[0].$$getProductBundleGroups().then(function(){e.product=h.value,angular.forEach(e.product.data.skus[0].data.productBundleGroups,function(e){e.$$getProductBundleGroupType(),l.decorateProductBundleGroup(e),e.data.$$editing=!1})})})},f())}else f()}return e.$inject=["$scope","$location","$log","$rootScope","$window","$hibachi","dialogService","alertService","productBundleService","formService","productBundlePartialsPath"],e}();t.CreateBundleController=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(71),a=i(69),o=i(68),s=i(67),l=i(66),c=i(65),u=angular.module("hibachi.productbundle",[n.coremodule.name]).config(function(){}).constant("productBundlePartialsPath","productbundle/components/").service("productBundleService",r.ProductBundleService).controller("create-bundle-controller",a.CreateBundleController).directive("swProductBundleGroupType",o.SWProductBundleGroupType.Factory()).directive("swProductBundleGroups",s.SWProductBundleGroups.Factory()).directive("swProductBundleGroup",l.SWProductBundleGroup.Factory()).directive("swProductBundleCollectionFilterItemTypeahead",c.SWProductBundleCollectionFilterItemTypeahead.Factory());t.productbundlemodule=u},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){var n=this;this.$log=e,this.$hibachi=t,this.utilityService=i,this.decorateProductBundleGroup=function(e){e.data.$$editing=!0;var t={$$setMinimumQuantity:function(e){(e<0||null===e)&&(this.minimumQuantity=0),e>this.maximumQuantity&&(this.maximumQuantity=e)},$$setMaximumQuantity:function(e){(e<1||null===e)&&(this.maximumQuantity=1),this.maximumQuantity<this.minimumQuantity&&(this.minimumQuantity=this.maximumQuantity)},$$setActive:function(e){this.active=e},$$toggleEdit:function(){angular.isUndefined(this.$$editing)||this.$$editing===!1?this.$$editing=!0:this.$$editing=!1}};angular.extend(e.data,t)},this.formatProductBundleGroupFilters=function(e,t){if(n.$log.debug("FORMATTING PRODUCT BUNDLE FILTERs"),n.$log.debug(e),n.$log.debug(t),"sku"===t.value)for(var i in e)e[i].name=e[i][t.value+"Code"],e[i].type=t.name,e[i].entityType=t.value,e[i].propertyIdentifier="_sku.skuID";else for(var i in e)e[i].name=e[i][t.value+"Name"],e[i].type=t.name,e[i].entityType=t.value,"brand"===t.value||"productType"===t.value?e[i].propertyIdentifier="_sku.product."+t.value+"."+t.value+"ID":e[i].propertyIdentifier="_sku."+t.value+"."+t.value+"ID";return n.$log.debug(e),e},this.$log=e,this.$hibachi=t,this.utilityService=i}return e}();t.ProductBundleService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){var s=this;this.$hibachi=e,this.entityService=t,this.formService=i,this.listingService=n,this.observerService=r,this.skuPriceService=a,this.utilityService=o,this.baseName="j-add-sku-item-",this.saveSuccess=!0,this.initData=function(){s.skuPrice=s.entityService.newEntity("SkuPrice"),s.skuPrice.$$setSku(s.sku),angular.isUndefined(s.disableAllFieldsButPrice)&&(s.disableAllFieldsButPrice=!1),angular.isUndefined(s.defaultCurrencyOnly)&&(s.defaultCurrencyOnly=!1),angular.isDefined(s.minQuantity)&&!isNaN(parseInt(s.minQuantity))&&(s.skuPrice.data.minQuantity=parseInt(s.minQuantity)),angular.isDefined(s.maxQuantity)&&!isNaN(parseInt(s.minQuantity))&&(s.skuPrice.data.maxQuantity=parseInt(s.maxQuantity)),angular.isUndefined(s.currencyCodeOptions)&&angular.isDefined(s.eligibleCurrencyCodeList)&&(s.currencyCodeOptions=s.eligibleCurrencyCodeList.split(",")),s.defaultCurrencyOnly?s.skuPrice.data.currencyCode="USD":angular.isDefined(s.currencyCode)?s.skuPrice.data.currencyCode=s.currencyCode:angular.isDefined(s.currencyCodeOptions)&&s.currencyCodeOptions.length&&(s.skuPrice.data.currencyCode=s.currencyCodeOptions[0]),s.observerService.notify("pullBindings")},this.save=function(){s.observerService.notify("updateBindings");var e=!s.skuPriceService.hasSkuPrices(s.sku.data.skuID),t=s.skuPrice.$$save();return t.then(function(e){if(s.saveSuccess=!0,s.observerService.notify("skuPricesUpdate",{skuID:s.sku.data.skuID,refresh:!0}),angular.isDefined(s.listingID)&&"USD"==s.skuPrice.data.currencyCode)for(var t=s.listingService.getListingPageRecords(s.listingID),i=0;i<t.length;i++)if(angular.isDefined(t[i].skuID)&&t[i].skuID==s.sku.data.skuID)for(var n=(t[i],i+1);n<t.length&&angular.isUndefined(t[n].skuID);){if(t[n].minQuantity<=s.skuPrice.data.minQuantity&&n+1<t.length&&(t[n+1].minQuantity>=s.skuPrice.data.minQuantity||angular.isDefined(t[n+1].skuID))||n+1==t.length){s.skuPrice.data.eligibleCurrencyCodeList=s.currencyCodeOptions.join(",");var r={};for(var a in s.skuPrice.data)r[a]=s.skuPrice.data[a];r.sku_skuID=s.sku.skuID,r.sku_skuCode=s.sku.skuCode,r.sku_skuDefinition=s.sku.skuDefinition,t.splice(n+1,0,r);break}n++}},function(e){s.saveSuccess=!1}).finally(function(){if(s.saveSuccess){for(var t in s.skuPrice.data)s.skuPrice.data[t]=null;s.initData(),e&&s.listingService.getCollection(s.listingID),s.listingService.notifyListingPageRecordsUpdate(s.listingID)}}),t},this.uniqueName=this.baseName+this.utilityService.createID(16),this.formName="addSkuPrice"+this.utilityService.createID(16),this.skuPrice=this.entityService.newEntity("SkuPrice")}return e.$inject=["$hibachi","entityService","formService","listingService","observerService","skuPriceService","utilityService"],e}();t.SWAddSkuPriceModalLauncherController=i;var n=function(){function e(e,t,n,r,a,o){var s=this;this.$hibachi=e,this.entityService=t,this.scopeService=n,this.collectionConfigService=r,this.skuPartialsPath=a,this.slatwallPathBuilder=o,this.restrict="EA",this.scope={},this.transclude=!0,this.bindToController={sku:"=?",pageRecord:"=?",minQuantity:"@?",maxQuantity:"@?",currencyCode:"@?",eligibleCurrencyCodeList:"@?",defaultCurrencyOnly:"=?",disableAllFieldsButPrice:"=?"},this.controller=i,this.controllerAs="swAddSkuPriceModalLauncher",this.compile=function(e,t){return{pre:function(e,t,i){var n=s.scopeService.getRootParentScope(e,"pageRecord");if(!angular.isDefined(n.pageRecord))throw"swAddSkuPriceModalLauncher was unable to find the pageRecord that it needs!";if(e.swAddSkuPriceModalLauncher.pageRecord=n.pageRecord,angular.isDefined(n.pageRecord.skuID)){var r={skuID:n.pageRecord.skuID,skuCode:n.pageRecord.skuCode,skuDescription:n.pageRecord.skuDescription,eligibleCurrencyCodeList:n.pageRecord.eligibleCurrencyCodeList};e.swAddSkuPriceModalLauncher.currencyCodeOptions=n.pageRecord.eligibleCurrencyCodeList.split(","),e.swAddSkuPriceModalLauncher.sku=s.$hibachi.populateEntity("Sku",r),e.swAddSkuPriceModalLauncher.skuPrice=s.entityService.newEntity("SkuPrice"),e.swAddSkuPriceModalLauncher.skuPrice.$$setSku(e.swAddSkuPriceModalLauncher.sku)}var a=s.scopeService.getRootParentScope(e,"swListingDisplay");angular.isDefined(a.swListingDisplay)&&(e.swAddSkuPriceModalLauncher.listingID=a.swListingDisplay.tableID),e.swAddSkuPriceModalLauncher.initData()},post:function(e,t,i){}}},this.templateUrl=o.buildPartialsPath(a)+"addskupricemodallauncher.html"}return e.Factory=function(){var t=function(t,i,n,r,a,o){return new e(t,i,n,r,a,o)};return t.$inject=["$hibachi","entityService","scopeService","collectionConfigService","skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWAddSkuPriceModalLauncher=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){if(this.$hibachi=e,this.defaultSkuService=t,angular.isDefined(this.listingDisplayId)&&angular.isDefined(this.columnId))this.selectionId=this.listingDisplayId+this.columnId;else{if(!angular.isDefined(this.listingDisplayId))throw"You must provide the listingDisplayId to SWDefaultSkuRadioController";this.selectionId=this.listingDisplayId}if(t.attachObserver(this.selectionId,this.productProductId),angular.isUndefined(this.selectionFieldName)&&(this.selectionFieldName=this.selectionId+"selection"),angular.isUndefined(this.skuId)&&angular.isUndefined(this.sku))throw"You must provide a skuID to SWDefaultSkuRadioController";if(this.isDefaultSku=this.skuId==this.productDefaultSkuSkuId,angular.isUndefined(this.sku)){var i={skuID:this.skuId};this.sku=this.$hibachi.populateEntity("Sku",i)}}return e.$inject=["$hibachi","defaultSkuService"],e}();t.SWDefaultSkuRadioController=i;var n=function(){function e(e,t){this.restrict="EA",this.scope={},this.bindToController={skuId:"@",sku:"=?",productProductId:"@?",productDefaultSkuSkuId:"@?",productId:"@?",listingDisplayId:"@?",columnId:"@?"},this.controller=i,this.controllerAs="swDefaultSkuRadio",this.compile=function(e,t){return{pre:function(e,t,i){},post:function(e,t,i){}}},this.templateUrl=t.buildPartialsPath(e)+"defaultskuradio.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWDefaultSkuRadio=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){var a=this;this.$q=e,this.$hibachi=t,this.listingService=i,this.skuPriceService=n,this.utilityService=r,this.baseName="j-delete-sku-item-",this.delete=function(){var e=a.skuPriceService.getSkuPricesForQuantityRange(a.skuId,a.skuPrice.data.minQuantity,a.skuPrice.data.maxQuantity),t=[];return e.then(function(e){for(var i=0;i<e.length;i++)t.push(e[i].$$delete())},function(e){}).finally(function(){a.$q.all(t).then(function(e){if(angular.isDefined(a.listingID))for(var t=a.listingService.getListingPageRecords(a.listingID),i=0;i<t.length;i++)if(angular.isDefined(t[i].skuPriceID)&&a.skuPrice.data.skuPriceID==t[i].skuPriceID){t.splice(i,1);break}})}),a.$q.all(t)},this.uniqueName=this.baseName+this.utilityService.createID(16)}return e.$inject=["$q","$hibachi","listingService","skuPriceService","utilityService"],e}();t.SWDeleteSkuPriceModalLauncherController=i;var n=function(){function e(e,t,n,r){var a=this;this.$hibachi=e,this.scopeService=t,this.skuPartialsPath=n,this.slatwallPathBuilder=r,this.restrict="EA",this.scope={},this.bindToController={pageRecord:"=?"},this.controller=i,this.controllerAs="swDeleteSkuPriceModalLauncher",this.compile=function(e,t){return{pre:function(e,t,i){var n=a.scopeService.getRootParentScope(e,"pageRecord");if(!angular.isDefined(n.pageRecord))throw"swDeleteSkuPriceModalLauncher was unable to find the pageRecord that it needs!";if(e.swDeleteSkuPriceModalLauncher.pageRecord=n.pageRecord,angular.isDefined(n.pageRecord.sku_skuID)&&(e.swDeleteSkuPriceModalLauncher.skuId=n.pageRecord.sku_skuID),angular.isDefined(n.pageRecord.skuPriceID)&&n.pageRecord.skuPriceID.length){var r={skuPriceID:n.pageRecord.skuPriceID,minQuantity:n.pageRecord.minQuantity,maxQuantity:n.pageRecord.maxQuantity,currencyCode:n.pageRecord.currencyCode,price:n.pageRecord.price};e.swDeleteSkuPriceModalLauncher.skuPrice=a.$hibachi.populateEntity("SkuPrice",r)}var o=a.scopeService.getRootParentScope(e,"swListingDisplay");angular.isDefined(o.swListingDisplay)&&(e.swDeleteSkuPriceModalLauncher.listingID=o.swListingDisplay.tableID)},post:function(e,t,i){}}},this.templateUrl=r.buildPartialsPath(n)+"deleteskupricemodallauncher.html"}return e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["$hibachi","scopeService","skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWDeleteSkuPriceModalLauncher=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){var s=this;this.observerService=e,this.formService=t,this.fileService=i,this.collectionConfigService=n,this.utilityService=r,this.$hibachi=a,this.$http=o,this.baseName="j-image-detail",this.imageOptions=[],this.numberOfSkusWithImageFile=0,this.fetchImageOptionData=function(){s.imageOptionsAttachedToSku=s.collectionConfigService.newCollectionConfig("Option"),s.imageOptionsAttachedToSku.addDisplayProperty("optionGroup.optionGroupName,optionName,optionCode,optionID"),s.imageOptionsAttachedToSku.addFilter("skus.skuID",s.skuId,"="),s.imageOptionsAttachedToSku.addFilter("optionGroup.imageGroupFlag",!0,"="),s.imageOptionsAttachedToSku.setAllRecords(!0),s.imageOptionsAttachedToSku.getEntity().then(function(e){angular.forEach(e.records,function(e,t){s.imageOptions.push(s.$hibachi.populateEntity("Option",e))})},function(e){throw"Could not calculate affected skus in SWImageDetailModalLauncher because of: "+e}),s.otherSkusWithSameImageCollectionConfig=s.collectionConfigService.newCollectionConfig("Sku"),s.otherSkusWithSameImageCollectionConfig.addFilter("imageFile",s.imageFile,"="),s.otherSkusWithSameImageCollectionConfig.setAllRecords(!0),s.otherSkusWithSameImageCollectionConfig.getEntity().then(function(e){s.skusAffectedCount=e.records.length},function(e){throw"Could not calculate affected skus in SWImageDetailModalLauncher because of: "+e})},this.updateImage=function(e){},this.saveAction=function(){var e=new FormData;e.append("slatAction","admin:entity.processProduct"),e.append("processContext","uploadDefaultImage"),e.append("sRedirectAction","admin:entity.detailProduct"),e.append("preprocessDisplayedFlag","1"),e.append("ajaxRequest","1"),e.append("productID",s.sku.data.product_productID),s.customImageNameFlag?e.append("imageFile",s.imageFileName):e.append("imageFile",s.sku.data.imageFile),e.append("uploadFile",s.sku.data.uploadFile);var t=s.$http.post("/?s=1",e,{transformRequest:angular.identity,headers:{"Content-Type":void 0}});return t},this.cancelAction=function(){s.observerService.notify(s.imageFileUpdateEvent,s.imagePath)},this.name=this.baseName+this.utilityService.createID(18),i.imageExists(this.imagePath).then(function(){s.imagePathToUse=s.imagePath},function(){s.imagePathToUse="/assets/images/image-placeholder.jpg"}).finally(function(){var e={skuID:s.skuId,skuCode:s.skuCode,imageFileName:s.imageFileName,imagePath:s.imagePathToUse,imageFile:s.imageFile};s.sku=s.$hibachi.populateEntity("Sku",e),s.imageFileUpdateEvent="file:"+s.imagePath,s.observerService.attach(s.updateImage,s.imageFileUpdateEvent,s.skuId),s.fetchImageOptionData()})}return e.$inject=["observerService","formService","fileService","collectionConfigService","utilityService","$hibachi","$http"],e}();t.SWImageDetailModalLauncherController=i;var n=function(){function e(e,t){this.restrict="EA",this.scope={},this.bindToController={skuId:"@",skuCode:"@",imagePath:"@",imageFile:"@",imageFileName:"@"},this.controller=i,this.controllerAs="swImageDetailModalLauncher",this.templateUrl=t.buildPartialsPath(e)+"imagedetailmodallauncher.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWImageDetailModalLauncher=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.collectionConfigService=e,this.productCollectionConfig=this.collectionConfigService.newCollectionConfig("Product"),this.productCollectionConfig.addFilter("productID",this.productId,"="),this.productCollectionConfig.addDisplayProperty("productID,defaultSku.currencyCode"),this.productCollectionConfig.getEntity().then(function(e){t.product=e.pageRecords[0]},function(e){})}return e.$inject=["collectionConfigService"],e}();t.SWPricingManagerController=i;var n=function(){function e(e,t,n){this.$hibachi=e,this.skuPartialsPath=t,this.slatwallPathBuilder=n,this.restrict="EA",this.priority=1e3,this.scope={},this.bindToController={productId:"@",trackInventory:"=?"},this.controller=i,this.controllerAs="swPricingManager",this.compile=function(e,t){return{pre:function(e,t,i){},post:function(e,t,i){}}},this.templateUrl=n.buildPartialsPath(t)+"pricingmanager.html"}return e.$inject=["$hibachi","skuPartialsPath","slatwallPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$hibachi","skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWPricingManager=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s){if(this.historyService=e,this.listingService=t,this.observerService=i,this.skuPriceService=n,this.utilityService=r,this.$hibachi=a,this.$filter=o,this.$timeout=s,this.showSave=!0,this.baseEntityName="Product",angular.isDefined(this.pageRecord)&&(this.pageRecord.edited=!1),this.formName=this.utilityService.createID(32),angular.isUndefined(this.skuId)&&angular.isDefined(this.bundledSkuSkuId)&&(this.skuId=this.bundledSkuSkuId),angular.isUndefined(this.price)&&angular.isDefined(this.bundledSkuPrice)&&(this.price=this.bundledSkuPrice),angular.isDefined(this.sku)&&(this.sku.data.price=this.currencyFilter(this.sku.data.price,this.currencyCode,2,!1)),angular.isDefined(this.skuPrice)&&(this.skuPrice.data.price=this.currencyFilter(this.skuPrice.data.price,this.currencyCode,2,!1)),angular.isDefined(this.bundledSkuSkuCode)&&(this.skuCode=this.bundledSkuSkuCode),angular.isDefined(this.skuId)&&angular.isUndefined(this.sku)){var l={skuID:this.skuId,skuCode:this.skuCode};this.sku=this.$hibachi.populateEntity("Sku",l)}}return e.$inject=["historyService","listingService","observerService","skuPriceService","utilityService","$hibachi","$filter","$timeout"],e}();t.SWSkuCodeEditController=i;var n=function(){function e(e,t,n,r,a){var o=this;this.observerService=e,this.historyService=t,this.scopeService=n,this.restrict="EA",this.scope={},this.bindToController={skuId:"@?",skuPriceId:"@?",skuCode:"@?",price:"@?",baseEntityId:"@?",baseEntityName:"@?",bundledSkuSkuId:"@?",bundledSkuSkuCode:"@?",bundledSkuCurrencyCode:"@?",bundledSkuPrice:"@?",eligibleCurrencyCodeList:"@?",listingDisplayId:"@?",currencyCode:"@?",masterPriceObject:"=?",revertToValue:"=?",sku:"=?",skuPrice:"=?"},this.controller=i,this.controllerAs="swSkuCodeEdit",this.link=function(e,t,i,n,r){var a=o.scopeService.getRootParentScope(e,"pageRecord");angular.isDefined(a.pageRecord)&&(e.swSkuCodeEdit.pageRecord=a.pageRecord);var a=o.scopeService.getRootParentScope(e,"pageRecordKey");angular.isDefined(a.pageRecordKey)&&(e.swSkuCodeEdit.pageRecordIndex=a.pageRecordKey)},this.templateUrl=a.buildPartialsPath(r)+"skucodeedit.html"}return e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["observerService","historyService","scopeService","skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWSkuCodeEdit=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){var n=this;this.collectionConfigService=e,this.observerService=t,this.$hibachi=i,this.currencyCodes=[],this.baseEntityName="Product",this.select=function(e){n.selectedCurrencyCode=e,n.observerService.notifyAndRecord(n.selectCurrencyCodeEventName,e)},this.currencyCodes.push("All"),angular.isDefined(this.baseEntityId)&&(this.selectCurrencyCodeEventName="currencyCodeSelect"+this.baseEntityId),this.selectedCurrencyCode="USD",this.observerService.notifyAndRecord(this.selectCurrencyCodeEventName,this.selectedCurrencyCode),angular.isDefined(this.baseEntityName)&&angular.isDefined(this.baseEntityId)&&(this.baseEntityCollectionConfig=this.collectionConfigService.newCollectionConfig(this.baseEntityName),this.baseEntityCollectionConfig.addDisplayProperty("eligibleCurrencyCodeList"),this.baseEntityCollectionConfig.addFilter("productID",this.baseEntityId,"="),this.baseEntityCollectionConfig.getEntity().then(function(e){n.product=n.$hibachi.populateEntity(n.baseEntityName,e.pageRecords[0]);var t=n.product.data.eligibleCurrencyCodeList.split(",");for(var i in t)n.currencyCodes.push(t[i])},function(e){}))}return e.$inject=["collectionConfigService","observerService","$hibachi"],e}();t.SWSkuCurrencySelectorController=i;var n=function(){function e(e,t,n){this.scopeService=e,this.restrict="EA",this.scope={},this.bindToController={baseEntityName:"@?",baseEntityId:"@?"},this.controller=i,this.controllerAs="swSkuCurrencySelector",this.link=function(e,t,i,n,r){},this.templateUrl=n.buildPartialsPath(t)+"skucurrencyselector.html"}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["scopeService","skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWSkuCurrencySelector=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s){var l=this;if(this.historyService=e,this.listingService=t,this.observerService=i,this.skuPriceService=n,this.utilityService=r,this.$hibachi=a,this.$filter=o,this.$timeout=s,this.showSave=!0,this.baseEntityName="Product",this.updateDisplay=function(e){angular.isDefined(e)&&angular.isDefined(l.currencyCode)&&(l.filterOnCurrencyCode=e,l.currencyCode==l.filterOnCurrencyCode||"All"==l.filterOnCurrencyCode?l.showPriceEdit=!0:l.showPriceEdit=!1)},this.switchTabContext=function(){l.observerService.notify(l.switchTabContextEventName,l.tabToSwitchTo)},angular.isDefined(this.pageRecord)&&(this.pageRecord.edited=!1),this.currencyFilter=this.$filter("swcurrency"),this.formName=this.utilityService.createID(32),angular.isUndefined(this.showPriceEdit)&&(this.showPriceEdit=!0),angular.isUndefined(this.skuId)&&angular.isDefined(this.bundledSkuSkuId)&&(this.skuId=this.bundledSkuSkuId),angular.isDefined(this.bundledSkuCurrencyCode)&&(this.currencyCode=this.bundledSkuCurrencyCode),angular.isUndefined(this.currencyCode)&&angular.isDefined(this.sku)&&(this.currencyCode=this.sku.data.currencyCode),angular.isUndefined(this.currencyCode)&&angular.isDefined(this.skuPrice)&&(this.currencyCode=this.skuPrice.data.currencyCode),angular.isUndefined(this.price)&&angular.isDefined(this.bundledSkuPrice)&&(this.price=this.bundledSkuPrice),angular.isDefined(this.sku)&&(this.sku.data.price=this.currencyFilter(this.sku.data.price,this.currencyCode,2,!1)),angular.isDefined(this.skuPrice)&&(this.skuPrice.data.price=this.currencyFilter(this.skuPrice.data.price,this.currencyCode,2,!1)),angular.isUndefined(this.skuId)&&angular.isUndefined(this.sku)&&angular.isUndefined(this.skuPriceId)&&angular.isUndefined(this.skuPrice))throw"You must provide either a skuID or a skuPriceID or a sku or a skuPrice to SWSkuPriceSingleEditController";if(angular.isDefined(this.skuId)&&angular.isUndefined(this.sku)){var c={skuID:this.skuId,
skuCode:this.skuCode,currencyCode:this.currencyCode,price:this.currencyFilter(this.price,this.currencyCode,2,!1)};this.sku=this.$hibachi.populateEntity("Sku",c)}if(angular.isDefined(this.skuPriceId)&&angular.isUndefined(this.skuPrice)){var u={skuPriceId:this.skuPriceId,currencyCode:this.currencyCode,minQuantity:this.minQuantity,maxQuantity:this.maxQuantity,price:this.currencyFilter(this.price,this.currencyCode,2,!1)};this.skuPrice=this.$hibachi.populateEntity("SkuPrice",u)}if(angular.isDefined(this.masterPriceObject)){if(angular.isDefined(this.masterPriceObject.data.sku))var d=this.masterPriceObject.data.sku;else var d=this.masterPriceObject;this.revertToValue=this.currencyFilter(this.skuPriceService.getInferredSkuPrice(d,this.masterPriceObject.data.price,this.currencyCode),this.currencyCode,2,!1)}}return e.$inject=["historyService","listingService","observerService","skuPriceService","utilityService","$hibachi","$filter","$timeout"],e}();t.SWSkuPriceEditController=i;var n=function(){function e(e,t,n,r,a){var o=this;this.observerService=e,this.historyService=t,this.scopeService=n,this.restrict="EA",this.scope={},this.bindToController={skuId:"@?",skuPriceId:"@?",skuCode:"@?",price:"@?",baseEntityId:"@?",baseEntityName:"@?",bundledSkuSkuId:"@?",bundledSkuCurrencyCode:"@?",bundledSkuPrice:"@?",eligibleCurrencyCodeList:"@?",listingDisplayId:"@?",currencyCode:"@?",masterPriceObject:"=?",revertToValue:"=?",sku:"=?",skuPrice:"=?"},this.controller=i,this.controllerAs="swSkuPriceEdit",this.link=function(e,t,i,n,r){var a=o.scopeService.getRootParentScope(e,"pageRecord");angular.isDefined(a.pageRecord)&&(e.swSkuPriceEdit.pageRecord=a.pageRecord);var a=o.scopeService.getRootParentScope(e,"pageRecordKey");angular.isDefined(a.pageRecordKey)&&(e.swSkuPriceEdit.pageRecordIndex=a.pageRecordKey);var s=o.scopeService.getRootParentScope(e,"swSkuPricesEdit");null!=s&&(e.swSkuPriceEdit.baseEntityId=s.swSkuPricesEdit.baseEntityId,e.swSkuPriceEdit.baseEntityName=s.swSkuPricesEdit.baseEntityName),angular.isDefined(e.swSkuPriceEdit.baseEntityId)&&angular.isUndefined(e.swSkuPriceEdit.skuId)&&(e.swSkuPriceEdit.selectCurrencyCodeEventName="currencyCodeSelect"+e.swSkuPriceEdit.baseEntityId,o.observerService.attach(e.swSkuPriceEdit.updateDisplay,e.swSkuPriceEdit.selectCurrencyCodeEventName,e.swSkuPriceEdit.formName),o.historyService.hasHistory(e.swSkuPriceEdit.selectCurrencyCodeEventName)&&e.swSkuPriceEdit.updateDisplay(o.historyService.getHistory(e.swSkuPriceEdit.selectCurrencyCodeEventName)));var l=o.scopeService.getRootParentScope(e,"swTabGroup"),c=o.scopeService.getRootParentScope(e,"swTabContent");null!=c&&(angular.isDefined(l)&&"Basic"==c.swTabContent.name?(e.swSkuPriceEdit.switchTabContextEventName=l.swTabGroup.switchTabEventName,e.swSkuPriceEdit.tabToSwitchTo=l.swTabGroup.getTabByName("Pricing"),e.swSkuPriceEdit.showSwitchTabContextButton=!0):e.swSkuPriceEdit.showSwitchTabContextButton=!1)},this.templateUrl=a.buildPartialsPath(r)+"skupriceedit.html"}return e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["observerService","historyService","scopeService","skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWSkuPriceEdit=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a){var o=this;if(this.$q=e,this.$hibachi=t,this.collectionConfigService=i,this.listingService=n,this.observerService=r,this.skuPriceService=a,this.skuPrices=[],this.showSave=!0,this.refreshSkuPrices=function(){o.skuPriceService.loadSkuPricesForSku(o.skuSkuId).finally(function(){o.getSkuPrices()})},this.updateSkuPrices=function(){angular.forEach(o.skuPrices,function(e,t){if(t>0){var i=o.columnPropertyIdentifier+e.data.skuPriceID;e.forms[i].$setDirty(!0),angular.isDefined(e.forms[i][o.columnPropertyIdentifier])&&angular.isFunction(e.forms[i][o.columnPropertyIdentifier].$setDirty)&&e.forms[i][o.columnPropertyIdentifier].$setDirty(!0),e.data[o.columnPropertyIdentifier]=o.skuPrice.data[o.columnPropertyIdentifier]}})},this.saveSkuPrices=function(){var e=[];return angular.forEach(o.skuPrices,function(t,i){i>0&&e.push(t.$$save())}),o.savePromise=o.$q.all(e),o.savePromise.then(function(e){},function(e){}),o.savePromise},this.getSkuPrices=function(){var e=o.skuPriceService.getSkuPricesForQuantityRange(o.skuSkuId,o.minQuantity,o.maxQuantity);return e.then(function(e){o.skuPrices=e}),e},angular.isDefined(this.pageRecord)&&(this.pageRecord.edited=!1),angular.isDefined(this.skuSkuId)&&angular.isUndefined(this.skuPrice)){var s={skuPriceID:this.skuPriceId,minQuantity:parseInt(this.minQuantity),maxQuantity:parseInt(this.maxQuantity),currencyCode:this.currencyCode,price:this.price};this.skuPrice=this.$hibachi.populateEntity("SkuPrice",s),this.skuPriceService.setSkuPrices(this.skuSkuId,[this.skuPrice]),this.refreshSkuPrices(),this.observerService.attach(this.refreshSkuPrices,"skuPricesUpdate")}}return e.$inject=["$q","$hibachi","collectionConfigService","listingService","observerService","skuPriceService"],e}();t.SWSkuPriceQuantityEditController=i;var n=function(){function e(e,t,n){var r=this;this.scopeService=e,this.skuPartialsPath=t,this.slatwallPathBuilder=n,this.restrict="EA",this.scope={},this.bindToController={skuPrice:"=?",skuPriceId:"@",currencyCode:"@",skuSkuId:"@",column:"=?",columnPropertyIdentifier:"@",minQuantity:"@",maxQuantity:"@",price:"@",showSave:"=?",listingDisplayId:"@?"},this.controller=i,this.controllerAs="swSkuPriceQuantityEdit",this.compile=function(e,t){return{pre:function(e,t,i){var n=r.scopeService.getRootParentScope(e,"pageRecord");angular.isDefined(n.pageRecord)&&(e.swSkuPriceQuantityEdit.pageRecord=n.pageRecord);var n=r.scopeService.getRootParentScope(e,"pageRecordKey");angular.isDefined(n.pageRecordKey)&&(e.swSkuPriceQuantityEdit.pageRecordIndex=n.pageRecordKey)},post:function(e,t,i){}}},this.templateUrl=n.buildPartialsPath(t)+"skupricequantityedit.html"}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["scopeService","skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWSkuPriceQuantityEdit=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){var a=this;if(this.observerService=e,this.collectionConfigService=t,this.utilityService=i,this.skuPriceService=n,this.$hibachi=r,this.baseEntityName="Product",this.refreshSkuPrices=function(){a.skuPriceService.loadSkuPricesForSku(a.skuId).finally(function(){a.getSkuPrices()})},this.hasSkuPrices=function(){return a.skuPriceService.hasSkuPrices(a.skuId)},this.getSkuPrices=function(){return angular.isDefined(a.skuSkuId)?a.loadingPromise=a.skuPriceService.getSkuPricesForQuantityRange(a.skuId,a.minQuantity,a.maxQuantity,a.eligibleCurrencyCodes):angular.isDefined(a.skuId)&&(a.loadingPromise=a.skuPriceService.getBaseSkuPricesForSku(a.skuId,a.eligibleCurrencyCodes)),a.loadingPromise.then(function(e){a.skuPrices=e},function(e){throw"swSkuPrices was unable to fetch skuPrices because: "+e}),a.loadingPromise},this.Id=this.utilityService.createID(32),angular.isDefined(this.skuEligibleCurrencyCodeList)&&(this.eligibleCurrencyCodeList=this.skuEligibleCurrencyCodeList),angular.isDefined(this.eligibleCurrencyCodeList)&&(this.eligibleCurrencyCodes=this.eligibleCurrencyCodeList.split(",")),angular.isUndefined(this.skuPrices)&&(this.skuPrices=[]),angular.isDefined(this.skuSkuId)?this.skuId=this.skuSkuId:this.sku=this.$hibachi.populateEntity("Sku",{skuID:this.skuId,price:this.price}),angular.isDefined(this.skuPriceId)){var o={skuPriceID:this.skuPriceId,minQuantity:this.minQuantity,maxQuantity:this.maxQuantity,currencyCode:this.currencyCode,price:this.price};this.skuPrice=this.$hibachi.populateEntity("SkuPrice",o)}angular.isDefined(this.skuSkuId)&&angular.isDefined(this.skuPrice)?this.masterPriceObject=this.skuPrice:angular.isDefined(this.sku)&&(this.masterPriceObject=this.sku),this.refreshSkuPrices(),this.observerService.attach(this.refreshSkuPrices,"skuPricesUpdate")}return e.$inject=["observerService","collectionConfigService","utilityService","skuPriceService","$hibachi"],e}();t.SWSkuPricesEditController=i;var n=function(){function e(e,t,n){this.scopeService=e,this.skuPartialsPath=t,this.slatwallPathBuilder=n,this.restrict="EA",this.scope={},this.bindToController={skuId:"@",skuSkuId:"@",skuPriceId:"@",minQuantity:"@",maxQuantity:"@",currencyCode:"@",price:"@",bundledSkuSkuId:"@",baseEntityName:"@?",baseEntityId:"@?",listingDisplayId:"@?",eligibleCurrencyCodeList:"@?",skuEligibleCurrencyCodeList:"@?",sku:"=?"},this.controller=i,this.controllerAs="swSkuPricesEdit",this.compile=function(e,t){return{pre:function(e,t,i){},post:function(e,t,i){}}},this.templateUrl=n.buildPartialsPath(t)+"skupricesedit.html"}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["scopeService","skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWSkuPricesEdit=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a){var o=this;if(this.$http=e,this.$q=t,this.$hibachi=i,this.observerService=n,this.utilityService=r,this.collectionConfigService=a,this.initData=function(){o.selectedLocation=void 0,o.stockAdjustmentType=void 0;var e={skuID:o.skuId,skuCode:o.skuCode,skuDescription:o.skuDescription,imagePath:o.imagePath,calculatedQATS:o.calculatedQats||0,calculatedQOH:o.calculatedQoh||0};o.sku=o.$hibachi.populateEntity("Sku",e),o.sku.setNewQOH(o.calculatedQoh||0),o.stockAdjustmentID="",o.stock=o.$hibachi.newStock(),o.stockAdjustment=o.$hibachi.newStockAdjustment(),o.stockAdjustmentItem=o.$hibachi.newStockAdjustmentItem(),o.selectedLocation=o.$hibachi.newLocation(),o.stockAdjustment.$$addStockAdjustmentItem(o.stockAdjustmentItem),o.stock.$$setSku(o.sku),o.stockAdjustmentStatusType=o.$hibachi.populateEntity("Type",{typeID:"444df2e2f66ddfaf9c60caf5c76349a6"}),o.stockAdjustment.$$setStockAdjustmentStatusType(o.stockAdjustmentStatusType),o.stockAdjustmentItem.$$setSku(o.sku),o.newQuantity=o.calculatedQoh||0,o.observerService.notify(o.selectedLocationTypeaheadDataKey+"clearSearch")},this.save=function(){return o.stockAdjustmentItem.data.quantity>0?(o.stockAdjustment.$$setStockAdjustmentType(o.$hibachi.populateEntity("Type",{typeID:"444df2e60db81c12589c9b39346009f2"})),o.stockAdjustment.$$setToLocation(o.selectedLocation),o.stockAdjustmentItem.$$setToStock(o.stock)):(o.stockAdjustment.$$setStockAdjustmentType(o.$hibachi.populateEntity("Type",{typeID:"444df2e7dba550b7a24a03acbb37e717"})),o.stockAdjustment.$$setFromLocation(o.selectedLocation),o.stockAdjustmentItem.data.quantity=o.stockAdjustmentItem.data.quantity*-1,o.stockAdjustmentItem.$$setFromStock(o.stock)),o.$q.all([o.observerService.notify("updateBindings"),o.stock.$$save()]).then().finally(function(){var e=o.stockAdjustment.$$save();e.then(function(e){o.sku.newQOH=o.newQuantity,o.sku.data.newQOH=o.newQuantity,o.sku.data.calculatedQOH=o.newQuantity,o.stockAdjustmentID=e.stockAdjustmentID,o.observerService.notify("updateBindings")}).finally(function(){o.observerService.notify("updateBindings"),o.$http({method:"POST",url:o.$hibachi.getUrlWithActionPrefix()+"entity.processStockAdjustment&processContext=processAdjustment&stockAdjustmentID="+o.stockAdjustmentID}).then(function(e){o.swListingDisplay.getCollection()})})})},this.addSelectedLocation=function(e){angular.isDefined(e)?(o.selectedLocation=o.$hibachi.populateEntity("Location",e),o.stock.$$setLocation(o.selectedLocation),o.stockCollectionConfig=o.collectionConfigService.newCollectionConfig("Stock"),o.stockCollectionConfig.addFilter("sku.skuID",o.stock.sku.skuID),o.stockCollectionConfig.addFilter("location.locationID",o.selectedLocation.locationID),o.stockCollectionConfig.setDistinct(!0),o.stockCollectionConfig.getEntity().then(function(e){e.pageRecords.length>0&&(o.stock.stockID=e.pageRecords[0].stockID)})):o.selectedLocation=void 0},this.updateNewQuantity=function(e){isNaN(e.swInput.value)?o.sku.data.newQOH=0:o.newQuantity=e.swInput.value,o.updateStockAdjustmentQuantity()},this.updateStockAdjustmentQuantity=function(){isNaN(o.newQuantity)?o.newQuantity=0:o.stockAdjustmentItem.data.quantity=o.newQuantity-o.sku.data.calculatedQOH},this.selectedLocationTypeaheadDataKey=this.utilityService.createID(32),!angular.isDefined(this.skuId))throw"SWSkuStockAdjustmentModalLauncherController was not provided with a sku id";this.name="skuStockAdjustment"+this.utilityService.createID(32),angular.isDefined(this.calculatedQats)&&(this.calculatedQats=parseInt(this.calculatedQats)),angular.isDefined(this.calculatedQoh)&&(this.calculatedQoh=parseInt(this.calculatedQoh)),this.initData(),this.observerService.attach(this.updateNewQuantity,this.name+"newQuantitychange")}return e.$inject=["$http","$q","$hibachi","observerService","utilityService","collectionConfigService"],e}();t.SWSkuStockAdjustmentModalLauncherController=i;var n=function(){function e(e,t){this.restrict="EA",this.scope={},this.require={swListingDisplay:"?^swListingDisplay"},this.bindToController={skuId:"@",skuCode:"@",skuDescription:"@",imagePath:"@",calculatedQats:"=?",calculatedQoh:"=?"},this.controller=i,this.controllerAs="swSkuStockAdjustmentModalLauncher",this.link=function(e,t,i){e.$watch("swStockAdjustmentModalLauncherController.calculatedQoh",function(t){e.swSkuStockAdjustmentModalLauncher.newQuantity=t})},this.templateUrl=t.buildPartialsPath(e)+"skustockadjustmentmodallauncher.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWSkuStockAdjustmentModalLauncher=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){if(!angular.isDefined(this.skuData))throw"You must provide a sku to the SWSkuThumbnailController";angular.isDefined(this.skuData.imagePath)&&(this.image=this.skuData.imagePath)}return e}();t.SWSkuThumbnailController=i;var n=function(){function e(e,t){this.restrict="EA",this.scope={},this.bindToController={skuData:"=",imageOnly:"=?",imagePath:"@?"},this.controller=i,this.controllerAs="swSkuThumbnail",this.templateUrl=t.buildPartialsPath(e)+"skuthumbnail.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["skuPartialsPath","slatwallPathBuilder"],t},e}();t.SWSkuThumbnail=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.$hibachi=e,this.observerService=t,this.observerKeys={},this.defaultSkuSelections={},this.attachObserver=function(e,t){angular.isUndefined(i.observerKeys[e])&&(i.observerKeys[e]={attached:!0,productID:t,hasBeenCalled:!1},i.observerService.attach(i.decideToSaveSku,"swSelectionToggleSelection"+e))},this.decideToSaveSku=function(e){null==i.defaultSkuSelections[e.selectionid]?i.defaultSkuSelections[e.selectionid]=e.selection:i.defaultSkuSelections[e.selectionid]!=e.selection&&(i.defaultSkuSelections[e.selectionid]=e.selection,i.saveDefaultSku(e))},this.saveDefaultSku=function(e){i.$hibachi.getEntity("Product",i.observerKeys[e.selectionid].productID).then(function(t){var t=i.$hibachi.populateEntity("Product",t);t.$$setDefaultSku(i.$hibachi.populateEntity("Sku",{skuID:e.selection})),t.$$save().then(function(){},function(){})},function(e){})}}return e.$inject=["$hibachi","observerService"],e}();t.DefaultSkuService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s){var l=this;this.$http=e,this.$q=t,this.$hibachi=i,this.entityService=n,this.cacheService=r,this.collectionConfigService=a,this.observerService=o,this.utilityService=s,this.skuPrices={},this.skuPriceCollectionConfigs={},this.skuPriceGetEntityPromises={},this.skuDictionary={},this.skuPriceHasEntityDeferred={},this.skuPriceHasEntityPromises={},this.newSkuPrice=function(){return l.entityService.newEntity("SkuPrice")},this.getRelatedSkuPriceCollectionConfig=function(e,t,i,n){var r=l.collectionConfigService.newCollectionConfig("SkuPrice");return r.addDisplayProperty("skuPriceID,sku.skuID,minQuantity,maxQuantity,currencyCode,price"),r.addFilter("minQuantity",i,"="),r.addFilter("maxQuantity",n,"="),r.addFilter("currencyCode",t,"!="),r.addFilter("sku.skuID",e,"="),r.addOrderBy("currencyCode|asc"),r.setAllRecords(!0),r},this.updateSkuPrices=function(e){l.loadSkuPricesForSku(e.skuID,e.refresh)},this.loadSkuPricesForSku=function(e,t){return l.skuPriceHasEntityDeferred[e]=l.$q.defer(),l.skuPriceHasEntityPromises[e]=l.skuPriceHasEntityDeferred[e].promise,angular.isUndefined(l.skuPriceCollectionConfigs[e])&&(l.skuPriceCollectionConfigs[e]=l.collectionConfigService.newCollectionConfig("SkuPrice"),l.skuPriceCollectionConfigs[e].addDisplayProperty("skuPriceID,minQuantity,maxQuantity,currencyCode,price,sku.skuID"),l.skuPriceCollectionConfigs[e].addFilter("sku.skuID",e,"="),l.skuPriceCollectionConfigs[e].addOrderBy("currencyCode|asc"),l.skuPriceCollectionConfigs[e].setAllRecords(!0)),(angular.isUndefined(l.skuPriceGetEntityPromises[e])||t)&&(l.skuPriceGetEntityPromises[e]=l.skuPriceCollectionConfigs[e].getEntity(),t=!0),t&&l.skuPriceGetEntityPromises[e].then(function(t){angular.forEach(t.records,function(t,i){l.setSkuPrices(e,[l.$hibachi.populateEntity("SkuPrice",t)])})},function(t){throw l.skuPriceHasEntityPromises[e].reject(),"skupriceservice failed to get sku prices"+t}).finally(function(){l.skuPriceHasEntityPromises[e].resolve()}),l.skuPriceGetEntityPromises[e]},this.setSkuPrices=function(e,t){if(angular.isDefined(l.skuPrices[e])){for(var i=0;i<t.length;i++)l.getKeyOfSkuPriceMatch(e,t[i])!=-1&&(l.getSkuPrices(e)[l.getKeyOfSkuPriceMatch(e,t[i])].data.price=t[i].data.price,t.splice(i,1),i--);l.skuPrices[e]=l.skuPrices[e].concat(t)}else l.skuPrices[e]=t},this.hasSkuPrices=function(e){return!!angular.isDefined(l.skuPrices[e])},this.getSkuPrices=function(e){if(angular.isDefined(l.skuPrices[e]))return l.skuPrices[e]},this.loadCurrencies=function(){var e=l.$q.defer(),t=e.promise;if(angular.isDefined(l.currencies))e.resolve(l.currencies);else{var i=l.$http({method:"POST",url:l.$hibachi.getUrlWithActionPrefix()+"api:main.getcurrencyrates"});i.then(function(t){l.currencies=t.data,e.resolve(l.currencies)},function(t){e.reject(t)})}return t},this.getInferredSkuPrice=function(e,t,i){if(angular.isDefined(l.currencies[i])&&e.data.currencyCode!=i){var n=l.currencies[i];if(n.CONVERTFROM==e.data.currencyCode)return t*(1/n.CONVERSIONRATE);if("EUR"==n.CONVERTFROM&&"EUR"==l.currencies[e.data.currencyCode].CONVERTFROM){var r=t*(1/n.CONVERSIONRATE);return r*(1/l.currencies[e.data.currencyCode].CONVERSIONRATE)}return"N/A"}return e.data.currencyCode==i?t:"N/A"},this.createInferredSkuPriceForCurrency=function(e,t,i){var n=l.entityService.newEntity("SkuPrice");n.$$setSku(e),n.data.currencyCode=i,angular.isString(e.data.price)&&isNaN(parseFloat(e.data.price.substr(0,1)))&&(e.data.price=parseFloat(e.data.price.substr(1,e.data.price.length)));var r=0;return r=angular.isDefined(t)?t.data.price:e.data.price,n.data.price=l.getInferredSkuPrice(e,r,i),angular.isDefined(t)&&angular.isDefined(t.data.minQuantity)&&!isNaN(t.data.minQuantity)&&(n.data.minQuantity=t.data.minQuantity),angular.isDefined(t)&&angular.isDefined(t.data.maxQuantity)&&!isNaN(t.data.maxQuantity)&&(n.data.maxQuantity=t.data.maxQuantity),n.data.inferred=!0,n},this.skuPriceSetHasCurrencyCode=function(e,t){for(var i=0;i<e.length;i++)if(t==e[i].data.currencyCode)return!0;return!1},this.defaultCurrencySkuPriceForSet=function(e){for(var t=0;t<e.length;t++)if("USD"==e[t].data.currencyCode)return e[t]},this.getSku=function(e){var t=l.$q.defer(),i=t.promise;if(e in l.skuDictionary){var n=l.skuDictionary[e];t.resolve(n)}else l.$hibachi.getEntity("Sku",e).then(function(i){l.skuDictionary[e]=l.$hibachi.populateEntity("Sku",i),t.resolve(l.skuDictionary[e])},function(e){t.reject(e)});return i},this.loadInferredSkuPricesForSkuPriceSet=function(e,t,i){var n=l.$q.defer(),r=n.promise;return l.loadCurrencies().then(function(){l.getSku(e).then(function(e){for(var n=0;n<i.length;n++)(e.data.currencyCode!=i[n]&&t.length>0&&!l.skuPriceSetHasCurrencyCode(t,i[n])||e.data.currencyCode!=i[n]&&0==t.length)&&t.push(l.createInferredSkuPriceForCurrency(e,l.defaultCurrencySkuPriceForSet(t),i[n]));t=l.sortSkuPrices(t)},function(e){}).finally(function(){n.resolve(t)})}),r},this.getBaseSkuPricesForSku=function(e,t){var i=l.$q.defer(),n=i.promise,r=[];return angular.isDefined(l.skuPriceHasEntityPromises[e])&&l.skuPriceGetEntityPromises[e].then(function(){for(var t=l.getSkuPrices(e)||[],i=0;i<t.length;i++){var n=t[i];l.isBaseSkuPrice(n.data)&&r.push(n)}}).finally(function(){angular.isDefined(t)?l.loadInferredSkuPricesForSkuPriceSet(e,r,t).then(function(e){i.resolve(l.sortSkuPrices(e))}):i.resolve(l.sortSkuPrices(r))}),n},this.getSkuPricesForQuantityRange=function(e,t,i,n){var r=l.$q.defer(),a=r.promise,o=[];return angular.isDefined(l.skuPriceHasEntityPromises[e])&&l.skuPriceGetEntityPromises[e].then(function(){for(var n=l.getSkuPrices(e),r=0;r<n.length;r++){var a=n[r];l.isQuantityRangeSkuPrice(a.data,t,i)&&o.push(a)}}).finally(function(){angular.isDefined(n)?l.loadInferredSkuPricesForSkuPriceSet(e,o,n).then(function(e){r.resolve(l.sortSkuPrices(e))}):r.resolve(l.sortSkuPrices(o))}),a},this.getKeyOfSkuPriceMatch=function(e,t){if(l.hasSkuPrices(e))for(var i=0;i<l.getSkuPrices(e).length;i++){var n=l.getSkuPrices(e)[i].data;if(n.currencyCode==t.data.currencyCode&&(l.isBaseSkuPrice(n)&&l.isBaseSkuPrice(n)==l.isBaseSkuPrice(t.data)||l.isQuantityRangeSkuPrice(n,t.data.minQuantity,t.data.maxQuantity)))return i}return-1},this.isBaseSkuPrice=function(e){return isNaN(parseInt(e.minQuantity))&&isNaN(parseInt(e.maxQuantity))},this.isQuantityRangeSkuPrice=function(e,t,i){var n=parseInt(e.minQuantity)==parseInt(t),r=parseInt(e.maxQuantity)==parseInt(i);return n&&r},this.sortSkuPrices=function(e){function t(e,t){return"USD"==e.data.currencyCode?-1:e.data.currencyCode<t.data.currencyCode?-1:e.data.currencyCode>t.data.currencyCode?1:0}return e.sort(t)},this.observerService.attach(this.updateSkuPrices,"skuPricesUpdate")}return e.$inject=["$http","$q","$hibachi","entityService","cacheService","collectionConfigService","observerService","utilityService"],e}();t.SkuPriceService=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(84),a=i(85),o=i(76),s=i(75),l=i(72),c=i(74),u=i(82),d=i(73),p=i(78),f=i(79),h=i(77),g=i(81),m=i(80),y=i(83),v=angular.module("hibachi.sku",[n.coremodule.name]).config(function(){}).constant("skuPartialsPath","sku/components/").service("defaultSkuService",r.DefaultSkuService).service("skuPriceService",a.SkuPriceService).directive("swPricingManager",o.SWPricingManager.Factory()).directive("swImageDetailModalLauncher",s.SWImageDetailModalLauncher.Factory()).directive("swAddSkuPriceModalLauncher",l.SWAddSkuPriceModalLauncher.Factory()).directive("swDeleteSkuPriceModalLauncher",c.SWDeleteSkuPriceModalLauncher.Factory()).directive("swSkuStockAdjustmentModalLauncher",u.SWSkuStockAdjustmentModalLauncher.Factory()).directive("swDefaultSkuRadio",d.SWDefaultSkuRadio.Factory()).directive("swSkuCurrencySelector",p.SWSkuCurrencySelector.Factory()).directive("swSkuPriceEdit",f.SWSkuPriceEdit.Factory()).directive("swSkuCodeEdit",h.SWSkuCodeEdit.Factory()).directive("swSkuPricesEdit",g.SWSkuPricesEdit.Factory()).directive("swSkuPriceQuantityEdit",m.SWSkuPriceQuantityEdit.Factory()).directive("swSkuThumbnail",y.SWSkuThumbnail.Factory());t.skumodule=v},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.$filter=e,this.$timeout=t,this.restrict="A",this.require="ngModel",this.scope={ngModel:"=",currencyCode:"@?"},this.link=function(e,t,n,r){r.$parsers.push(function(t){var n=i.$filter("swcurrency");return isNaN(t)?(t=0,r.$setViewValue(n(t,e.currencyCode,2,!1)),r.$render()):(i._timeoutPromise&&i.$timeout.cancel(i._timeoutPromise),i._timeoutPromise=i.$timeout(function(){r.$setViewValue(n(t,e.currencyCode,2,!1)),r.$render()},1500)),r.$viewValue}),r.$formatters.push(function(t){isNaN(t)&&(t=0);var n=i.$filter("swcurrency");return r.$setViewValue(n(t,e.currencyCode,2,!1)),r.$render(),r.$viewValue})}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["$filter","$timeout"],t},e}();t.SWCurrencyFormatter=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.Factory=function(e,t,i){function n(e,i,n){return void 0===n&&(n=!0),angular.isDefined(a)||(t.debug("Please provide a valid currencyCode, swcurrency defaults to $"),a="$"),angular.isDefined(e)&&(e=angular.isDefined(i)?parseFloat(e.toString()).toFixed(i):parseFloat(e.toString()).toFixed(2)),n?a+e:e}var r,a=null,o=!1;return r=function(e,t,r,s){return void 0===s&&(s=!0),null===a&&s?(o||(o=!0,i.getCurrencies().then(function(e){var i=e.data;a=i[t]})),"-"):n(e,r,s)},r.$stateful=!0,r},e.Factory.$inject=["$sce","$log","$hibachi"],e}();t.SWCurrency=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){var e=this;this.setBaseURL=function(t){e.baseURL=t},this.setBasePartialsPath=function(t){e.basePartialsPath=t},this.buildPartialsPath=function(t){if(angular.isDefined(e.baseURL)&&angular.isDefined(e.basePartialsPath))return e.baseURL+e.basePartialsPath+t;throw"need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there"}}return e}();t.SlatwallPathBuilder=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(229),r=i(16),a=i(14),o=i(38),s=i(40),l=i(50),c=i(54),u=i(61),d=i(64),p=i(70),f=i(86),h=i(89),g=i(87),m=i(88),y=angular.module("slatwalladmin",[n.hibachimodule.name,a.entitymodule.name,o.contentmodule.name,s.formbuildermodule.name,l.giftcardmodule.name,c.optiongroupmodule.name,u.orderitemmodule.name,d.productmodule.name,p.productbundlemodule.name,f.skumodule.name,r.workflowmodule.name]).constant("baseURL",$.slatwall.getConfig().baseURL).constant("slatwallPathBuilder",new h.SlatwallPathBuilder).config(["$provide","$logProvider","$filterProvider","$httpProvider","$routeProvider","$injector","$locationProvider","datepickerConfig","datepickerPopupConfig","slatwallPathBuilder","appConfig",function(e,t,i,n,r,a,o,s,l,c,u){c.setBaseURL($.slatwall.getConfig().baseURL),c.setBasePartialsPath("/admin/client/src/"),s.showWeeks=!1,s.format="MMM dd, yyyy hh:mm a",l.toggleWeeksText=null}]).run(["$rootScope","$filter","$anchorScroll","$hibachi","dialogService","observerService","utilityService","slatwallPathBuilder",function(e,t,i,n,r,a,o,s){i.yOffset=100,e.openPageDialog=function(e){r.addPageDialog(e)},e.closePageDialog=function(e){r.removePageDialog(e)},e.createID=o.createID,e.slatwall=e.hibachiScope,e.slatwall.getProcessObject=n.newEntity}]).directive("swCurrencyFormatter",g.SWCurrencyFormatter.Factory()).controller("preprocessaccount_addaccountpayment",["$scope","$compile",function(e,t){var i={aptCharge:"444df32dd2b0583d59a19f1b77869025",aptCredit:"444df32e9b448ea196c18c66e1454c46",aptAdjustment:"68e3fb57d8102b47acc0003906d16ddd"};e.totalAmountToApply=0,e.paymentTypeName=$.slatwall.rbKey("define.charge"),e.paymentTypeLock=!0,e.amount=0,e.updatePaymentType=function(){angular.forEach(e.appliedOrderPayment,function(t,n){e.paymentType!=i.aptAdjustment&&(t.paymentType=e.paymentType)}),e.paymentType==i.aptCharge?(e.paymentTypeName=$.slatwall.rbKey("define.charge"),e.paymentTypeLock=!0):e.paymentType==i.aptCredit?(e.paymentTypeName=$.slatwall.rbKey("define.credit"),e.paymentTypeLock=!0):e.paymentType==i.aptAdjustment&&(e.paymentTypeLock=!1,e.paymentTypeName=$.slatwall.rbKey("define.adjustment"),e.amount=0),e.updateSubTotal()},e.updateSubTotal=function(){e.totalAmountToApply=0,angular.forEach(e.appliedOrderPayment,function(t,n){void 0==t.amount||isNaN(t.amount)||(e.paymentType==i.aptCharge||e.paymentType==i.aptAdjustment?t.paymentType==i.aptCharge?e.totalAmountToApply+=parseFloat(t.amount):t.paymentType==i.aptCredit&&(e.totalAmountToApply-=parseFloat(t.amount)):e.paymentType==i.aptCredit&&(t.paymentType==i.aptCharge?e.totalAmountToApply-=parseFloat(t.amount):t.paymentType==i.aptCredit&&(e.totalAmountToApply+=parseFloat(t.amount))))}),e.amountUnapplied=Math.round(100*(e.amount-e.totalAmountToApply+e.amountUnassigned))/100,e.accountBalanceChange=parseFloat(e.amount),e.paymentType==i.aptCharge?e.accountBalanceChange=parseFloat((e.accountBalanceChange*-1).toString()):e.paymentType==i.aptAdjustment&&(e.accountBalanceChange+=parseFloat(e.amountUnapplied))}}]).filter("swcurrency",["$sce","$log","$hibachi",m.SWCurrency.Factory]);t.slatwalladminmodule=y},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){e.$id="alertController",e.alerts=t.getAlerts()}return e.$inject=["$scope","alertService"],e}();t.AlertController=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){this.fade=!1,this.dismissable=!1,this.msg=e,this.type=t,this.fade=i,this.dismissable=n}return e}();t.Alert=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(92),r=function(){function e(e,t){var i=this;this.$timeout=e,this.alerts=t,this.newAlert=function(){return new n.Alert},this.get=function(){return i.alerts||[]},this.addAlert=function(e){i.alerts.push(e),i.$timeout(function(){i.removeAlert(e)},3500)},this.addAlerts=function(e){angular.forEach(e,function(e){i.addAlert(e)})},this.removeAlert=function(e){var t=i.alerts.indexOf(e,0);void 0!=t&&i.alerts.splice(t,1)},this.getAlerts=function(){return i.alerts},this.formatMessagesToAlerts=function(e){var t=[];if(e&&e.length)for(var r in e){var a=new n.Alert(e[r].message,e[r].messageType);t.push(a),"success"===a.type||"error"===a.type?(i.$timeout(function(){a.fade=!0},3500),a.dismissable=!1):(a.fade=!1,a.dismissable=!0)}return t},this.removeOldestAlert=function(){i.alerts.splice(0,1)},this.alerts=[]}return e.$inject=["$timeout"],e}();t.AlertService=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(4),a=function(){function e(e){var t=this;return this._resourceBundle={},this.getData=function(e){var i={};for(var n in e){var r=e[n],a=r.charAt(0).toUpperCase()+r.slice(1);i[r]=t["get"+a+"Data"]()}return t.$q.all(i).then(function(e){})},this.getAttributeCacheKeyData=function(){var e="";return hibachiConfig||(hibachiConfig={}),hibachiConfig.baseURL||(hibachiConfig.baseURL=""),e+=hibachiConfig.baseURL,e.length&&"/"!==e.slice(-1)&&(e+="/"),t.$http.get(e+"?"+hibachiConfig.action+"=api:main.getAttributeModel").then(function(e){n.coremodule.constant("attributeMetaData",e.data.data);try{localStorage.setItem("attributeMetaData",JSON.stringify(e.data.data))}catch(e){}t.attributeMetaData=e.data.data},function(e){})},this.getInstantiationKeyData=function(){if(!t.instantiationKey){var e=new Date,i=e.getTime();t.instantiationKey=i.toString()}var r="";return hibachiConfig||(hibachiConfig={}),hibachiConfig.baseURL||(hibachiConfig.baseURL=""),r+=hibachiConfig.baseURL,hibachiConfig.baseURL.length&&"/"!=hibachiConfig.baseURL.charAt(hibachiConfig.baseURL.length-1)&&(r+="/"),t.$http.get(r+"/custom/config/config.json?instantiationKey="+t.instantiationKey).then(function(e){var i=e.data.data;return hibachiConfig.baseURL.length&&(i.baseURL=r),n.coremodule.constant("appConfig",e.data.data),t.appConfig=i,t.getResourceBundles()},function(e){})},this.getResourceBundle=function(e){var i=t.$q.defer(),e=e||t.appConfig.rbLocale;if(t._resourceBundle[e])return t._resourceBundle[e];var n=t.appConfig.baseURL+"/custom/config/resourceBundles/"+e+".json?instantiationKey="+t.appConfig.instantiationKey;return t.$http({url:n,method:"GET"}).success(function(n,r,a){t._resourceBundle[e]=n,i.resolve(n)}).error(function(n,r){404===r?(t._resourceBundle[e]={},i.resolve(n)):i.reject(n)}),i.promise;
},this.getResourceBundles=function(){var e,i=t.appConfig.rbLocale.split("_"),r=i,a=[];e=t.getResourceBundle(t.appConfig.rbLocale),a.push(e),2===r.length&&(e=t.getResourceBundle(r[0]),a.push(e)),"en"!==r[0]&&(t.getResourceBundle("en_us"),t.getResourceBundle("en"));var o=t.$q.all(a).then(function(e){n.coremodule.constant("resourceBundles",t._resourceBundle)},function(e){n.coremodule.constant("resourceBundles",t._resourceBundle)});return o},this.myApplication=e,angular.lazy(this.myApplication).resolve(["$http","$q","$timeout",function(e,i,a){t.$http=e,t.$q=i;var o=hibachiConfig.baseURL;return o||(o=""),o.length&&"/"!==o.slice(-1)&&(o+="/"),e.get(o+"?"+hibachiConfig.action+"=api:main.getInstantiationKey").then(function(e){t.instantiationKey=e.data.data.instantiationKey;var i=[];try{var a=r(localStorage.getItem("attributeMetaData"));e.data.data.attributeCacheKey===a.toUpperCase()?n.coremodule.constant("attributeMetaData",JSON.parse(localStorage.getItem("attributeMetaData"))):i.push("attributeCacheKey")}catch(e){i.push("attributeCacheKey")}return i.push("instantiationKey"),t.getData(i)})}]).loading(function(){}).error(function(){}).done(function(){})}return e}();t.BaseBootStrapper=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){return{require:"^swFilterGroups",restrict:"E",templateUrl:i.buildPartialsPath(t)+"addfilterbuttons.html",scope:{itemInUse:"=",readOnly:"="},link:function(t,i,n,r){t.filterGroupItem=r.getFilterGroupItem(),t.addFilterItem=function(){e.newFilterItem(r.getFilterGroupItem(),r.setItemInUse)},t.addFilterGroupItem=function(){e.newFilterItem(r.getFilterGroupItem(),r.setItemInUse,!0)}}}}return e.$inject=["collectionService","collectionPartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["collectionService","collectionPartialsPath","hibachiPathBuilder"],t},e}();t.SWAddFilterButtons=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return{restrict:"A",templateUrl:e.buildPartialsPath(t)+"collection.html",link:function(e,t,i){e.tabsUniqueID=Math.floor(999*Math.random()),e.toggleCogOpen=i.toggleoption,e.toggleFiltersAndOptions=function(){e.toggleCogOpen===!1?e.toggleCogOpen=!0:e.toggleCogOpen=!1}}}}return e.$inject=["hibachiPathBuilder","collectionPartialsPath"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["hibachiPathBuilder","collectionPartialsPath"],t},e}();t.SWCollection=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){return{restrict:"E",templateUrl:t.buildPartialsPath(i)+"collectiontable.html",scope:{collection:"=",collectionConfig:"=",isRadio:"=?",angularLinks:"=?"},link:function(t,i,a){angular.isUndefined(t.angularLinks)&&(t.angularLinks=!1),t.collection.collectionObject?t.collectionObject=r["new"+t.collection.collectionObject]():t.collectionConfig.baseEntityName&&(t.collectionObject=t.collectionConfig.baseEntityName);var o=function(e){return e.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")};t.replaceAll=function(e,t,i){return e.replace(new RegExp(o(t),"g"),i)},angular.forEach(t.collectionConfig.columns,function(i){e.debug("Config Key : "+i),i.key=i.propertyIdentifier.replace(/\./g,"_").replace(t.collectionConfig.baseEntityAlias+"_","")}),t.addSelection=function(e,t){n.addSelection(e,t)}}}}return e.$inject=["$log","hibachiPathBuilder","collectionPartialsPath","selectionService","$hibachi"],e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$log","hibachiPathBuilder","collectionPartialsPath","selectionService","$hibachi"],t},e}();t.SWCollectionTable=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){return{restrict:"A",require:{swDisplayOptions:"?^swDisplayOptions",swListingControls:"?^swListingControls"},scope:{column:"=",columns:"=",columnIndex:"=",saveCollection:"&?",propertiesList:"<",orderBy:"="},templateUrl:t.buildPartialsPath(i)+"columnitem.html",link:function(t,i,n,r,a){!t.saveCollection&&r.swListingControls&&(t.saveCollection=function(){r.swListingControls.collectionConfig.columns=t.columns,r.swDisplayOptions.columns=t.columns,r.swListingControls.saveCollection()}),t.editingDisplayTitle=!1,t.editDisplayTitle=function(){!angular.isUndefined(t.column.displayTitle)&&t.column.displayTitle.length||(t.column.displayTitle=t.column.title),t.previousDisplayTitle=t.column.displayTitle,t.editingDisplayTitle=!0},t.saveDisplayTitle=function(){t.saveCollection(),t.editingDisplayTitle=!1},t.cancelDisplayTitle=function(){t.column.displayTitle=t.previousDisplayTitle,t.editingDisplayTitle=!1},angular.isUndefined(t.column.sorting)&&(t.column.sorting={active:!1,sortOrder:"asc",priority:0}),t.toggleVisible=function(e){angular.isUndefined(e.isVisible)&&(e.isVisible=!1),e.isVisible=!e.isVisible,t.saveCollection()},t.toggleSearchable=function(e){angular.isUndefined(e.isSearchable)&&(e.isSearchable=!1),e.isSearchable=!e.isSearchable,t.saveCollection()},t.toggleExportable=function(i){e.debug("toggle exporable"),angular.isUndefined(i.isExportable)&&(i.isExportable=!1),i.isExportable=!i.isExportable,t.saveCollection()};var o=function(e,t){if(e.sorting&&t.sorting&&angular.isDefined(e.sorting)&&angular.isDefined(e.sorting.priority)){if(e.sorting.priority<t.sorting.priority)return-1;if(e.sorting.priority>t.sorting.priority)return 1}return 0},s=function(){if(angular.isDefined(t.columns)){var e=angular.copy(t.columns);e.sort(o),t.orderBy=[],angular.forEach(e,function(e){if(angular.isDefined(e.sorting)&&e.sorting.active===!0){var i={propertyIdentifier:e.propertyIdentifier,direction:e.sorting.sortOrder};if(e.aggregate&&e.aggregate.aggregateFunction){var n=e.aggregate.aggregateFunction.toUpperCase();"AVERAGE"==n&&(n="AVG"),i.propertyIdentifier=n+"("+e.propertyIdentifier+")"}t.orderBy.push(i)}})}};t.toggleSortable=function(i){e.debug("toggle sortable"),angular.isUndefined(i.sorting)&&(i.sorting={active:!0,sortOrder:"asc",priority:0}),i.sorting.active===!0?"asc"===i.sorting.sortOrder?i.sorting.sortOrder="desc":(l(i),i.sorting.active=!1):(i.sorting.active=!0,i.sorting.sortOrder="asc",i.sorting.priority=c().length),s(),t.saveCollection()};var l=function(e,i){if(e.sorting.active===!0){for(var n in t.columns)t.columns[n].sorting.active===!0&&t.columns[n].sorting.priority>e.sorting.priority&&(t.columns[n].sorting.priority=t.columns[n].sorting.priority-1);e.sorting.priority=0}i||(s(),t.saveCollection())};t.prioritize=function(e){if(1===e.sorting.priority){var i=c();for(var n in t.columns)t.columns[n].sorting.active===!0&&(t.columns[n].sorting.priority=t.columns[n].sorting.priority-1);e.sorting.priority=i.length}else{for(var n in t.columns)t.columns[n].sorting.active===!0&&t.columns[n].sorting.priority===e.sorting.priority-1&&(t.columns[n].sorting.priority=t.columns[n].sorting.priority+1);e.sorting.priority-=1}s(),t.saveCollection()};var c=function(){var e=[];for(var i in t.columns)t.columns[i].sorting.active===!0&&e.push(t.columns[i]);return e};t.removeColumn=function(e){t.columns[e].isDeletable&&(l(t.columns[e],!0),r.swDisplayOptions.removeColumn(e),s(),t.saveCollection())}}}}return e.$inject=["$log","hibachiPathBuilder","collectionPartialsPath","observerService"],e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["$log","hibachiPathBuilder","collectionPartialsPath","observerService"],t},e}();t.SWColumnItem=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l){var c=function(t){var n="";if(angular.isUndefined(t.ormtype)&&angular.isUndefined(t.fieldtype))n=l.buildPartialsPath(o)+"criteria.html";else{var r=t.ormtype,a=t.fieldtype;switch(r){case"boolean":n=l.buildPartialsPath(o)+"criteriaboolean.html";break;case"string":n=l.buildPartialsPath(o)+"criteriastring.html";break;case"timestamp":n=l.buildPartialsPath(o)+"criteriadate.html";break;case"big_decimal":case"integer":case"float":n=l.buildPartialsPath(o)+"criterianumber.html"}switch(a){case"many-to-one":n=l.buildPartialsPath(o)+"criteriamanytoone.html";break;case"many-to-many":n=l.buildPartialsPath(o)+"criteriamanytomany.html";break;case"one-to-many":n=l.buildPartialsPath(o)+"criteriaonetomany.html"}}var s=e.get(n,{cache:i});return s},u=function(e){var t=[];return angular.isUndefined(e)&&(e="filter"),"filter"==e&&(t=[{display:"Equals",comparisonOperator:"="},{display:"Doesn't Equal",comparisonOperator:"<>"},{display:"Contains",comparisonOperator:"like",pattern:"%w%"},{display:"Doesn't Contain",comparisonOperator:"not like",pattern:"%w%"},{display:"Starts With",comparisonOperator:"like",pattern:"w%"},{display:"Doesn't Start With",comparisonOperator:"not like",pattern:"w%"},{display:"Ends With",comparisonOperator:"like",pattern:"%w"},{display:"Doesn't End With",comparisonOperator:"not like",pattern:"%w"},{display:"In List",comparisonOperator:"in"},{display:"Not In List",comparisonOperator:"not in"},{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}],"condition"===e&&(t=[{display:"Equals",comparisonOperator:"="},{display:"In List",comparisonOperator:"in"},{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}])),t},d=function(e){var t=[];return angular.isUndefined(e)&&(e="filter"),"filter"!==e&&"condition"!==e||(t=[{display:"True",comparisonOperator:"=",value:"True"},{display:"False",comparisonOperator:"=",value:"False"},{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}]),t},p=function(e){var t=[];return angular.isUndefined(e)&&(e="filter"),"filter"===e&&(t=[{display:"Date",comparisonOperator:"between",dateInfo:{type:"exactDate"}},{display:"In Range",comparisonOperator:"between",dateInfo:{type:"range"}},{display:"Not In Range",comparisonOperator:"not between",dateInfo:{type:"range"}},{display:"Today",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"d",measureCount:0,behavior:"toDate"}},{display:"Yesterday",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"d",measureCount:-1,behavior:"toDate"}},{display:"This Week",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"w",behavior:"toDate"}},{display:"This Month",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"m",behavior:"toDate"}},{display:"This Quarter",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"q",behavior:"toDate"}},{display:"This Year",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"y",behavior:"toDate"}},{display:"Last N Hour(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"h",measureTypeDisplay:"Hours"}},{display:"Last N Day(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"d",measureTypeDisplay:"Days"}},{display:"Last N Week(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"w",measureTypeDisplay:"Weeks"}},{display:"Last N Month(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"m",measureTypeDisplay:"Months"}},{display:"Last N Quarter(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"q",measureTypeDisplay:"Quarters"}},{display:"Last N Year(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"y",measureTypeDisplay:"Years"}},{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}]),"condition"===e&&(t=[{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}]),t},f=function(e){var t=[];return angular.isUndefined(e)&&(e="filter"),"filter"==e&&(t=[{display:"Equals",comparisonOperator:"="},{display:"Doesn't Equal",comparisonOperator:"<>"},{display:"In Range",comparisonOperator:"between",type:"range"},{display:"Not In Range",comparisonOperator:"not between",type:"range"},{display:"Greater Than",comparisonOperator:">"},{display:"Greater Than Or Equal",comparisonOperator:">="},{display:"Less Than",comparisonOperator:"<"},{display:"Less Than Or Equal",comparisonOperator:"<="},{display:"In List",comparisonOperator:"in"},{display:"Not In List",comparisonOperator:"not in"},{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}]),"condition"===e&&(t=[{display:"Equals",comparisonOperator:"="},{display:"Doesn't Equal",comparisonOperator:"<>"},{display:"Greater Than",comparisonOperator:">"},{display:"Greater Than Or Equal",comparisonOperator:">="},{display:"Less Than",comparisonOperator:"<"},{display:"Less Than Or Equal",comparisonOperator:"<="},{display:"In List",comparisonOperator:"in"},{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}]),t},h=function(e){var t=[];return angular.isUndefined(e)&&(e="filter"),"filter"==e&&(t=[{display:"All Exist In Collection",comparisonOperator:"All"},{display:"None Exist In Collection",comparisonOperator:"None"},{display:"Some Exist In Collection",comparisonOperator:"One"}]),"condition"===e&&(t=[]),t},g=function(e){var t=[];return angular.isUndefined(e)&&(e="filter"),"filter"==e&&(t=[{display:"All Exist In Collection",comparisonOperator:"All"},{display:"None Exist In Collection",comparisonOperator:"None"},{display:"Some Exist In Collection",comparisonOperator:"One"},{display:"Empty",comparisonOperator:"is",value:"null"},{display:"Not Empty",comparisonOperator:"is not",value:"null"}]),"condition"===e&&(t=[{display:"Empty",comparisonOperator:"is",value:"null"},{display:"Not Empty",comparisonOperator:"is not",value:"null"}]),t},m=function(e){var t=[];return angular.isUndefined(e)&&(e="filter"),"filter"==e&&(t={drillEntity:{},hasEntity:{display:"Defined",comparisonOperator:"is not",value:"null"},notHasEntity:{display:"Not Defined",comparisonOperator:"is",value:"null"}}),t},y=function(e,i,o){e.$watch("selectedFilterProperty.criteriaValue",function(t){angular.isDefined(t)&&(e.selectedFilterProperty.criteriaValue=a("likeFilter")(t))}),e.$watch("selectedFilterProperty",function(a){if(angular.isDefined(a)){if(n.debug("watchSelectedFilterProperty"),n.debug(e.selectedFilterProperty),null===a)return;if(angular.isDefined(a.ormtype))switch(e.selectedFilterProperty.ormtype){case"boolean":e.conditionOptions=d();break;case"string":e.conditionOptions=u(),e.selectedConditionChanged=function(e){angular.isDefined(e.selectedCriteriaType.value)?e.showCriteriaValue=!1:e.showCriteriaValue=!0};break;case"timestamp":e.conditionOptions=p(),e.today=function(){angular.isDefined(e.selectedFilterProperty)&&(e.selectedFilterProperty.criteriaRangeStart=(new Date).getTime(),e.selectedFilterProperty.criteriaRangeEnd=(new Date).getTime())},e.clear=function(){e.selectedFilterProperty.criteriaRangeStart=null,e.selectedFilterProperty.criteriaRangeEnd=null},e.openCalendarStart=function(t){t.preventDefault(),t.stopPropagation(),e.openedCalendarStart=!0},e.openCalendarEnd=function(t){t.preventDefault(),t.stopPropagation(),e.openedCalendarEnd=!0},e.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],e.format=e.formats[1],e.selectedConditionChanged=function(e){n.debug("selectedConditionChanged Begin");var t=e.selectedCriteriaType;if(angular.isDefined(t.dateInfo)){if("calculation"===t.dateInfo.type)if(t.showCriteriaStart=!0,t.showCriteriaEnd=!0,t.disableCriteriaStart=!0,t.disableCriteriaEnd=!0,angular.isUndefined(t.dateInfo.behavior))n.debug("Not toDate"),t.showNumberOf=!0,t.conditionDisplay="Number of "+t.dateInfo.measureTypeDisplay+" :";else{n.debug("toDate");var i=Date.parse("today"),r=i.setHours(23,59,59,999);switch(e.criteriaRangeEnd=r,t.dateInfo.measureType){case"d":var a=Date.parse("today").add(t.dateInfo.measureCount).days();a.setHours(0,0,0,0),e.criteriaRangeStart=a.getTime();break;case"w":var o=Date.today().last().monday();e.criteriaRangeStart=o.getTime();break;case"m":var s=Date.today().moveToFirstDayOfMonth();e.criteriaRangeStart=s.getTime();break;case"q":var l=Date.parse("today").toString("MM"),c=Date.parse("today").toString("yyyy"),u=3*Math.floor(l/3),d=new Date(c,u,1);e.criteriaRangeStart=d.getTime();break;case"y":var c=Date.parse("today").toString("yyyy"),p=new Date(c,0,1);e.criteriaRangeStart=p.getTime()}}"range"===t.dateInfo.type&&(t.showCriteriaStart=!0,t.showCriteriaEnd=!0,t.disableCriteriaStart=!1,t.disableCriteriaEnd=!1,t.showNumberOf=!1),"exactDate"===t.dateInfo.type&&(t.showCriteriaEnd=!1,t.disableCriteriaStart=!1,t.disableCriteriaEnd=!0,t.dateInfo.measureType?(t.conditionDisplay="How many "+t.dateInfo.measureTypeDisplay+" ago?",t.showCriteriaStart=!1,t.showNumberOf=!0):(t.conditionDisplay="",t.showCriteriaStart=!0,t.showNumberOf=!1,e.criteriaRangeStart=new Date(e.criteriaRangeStart).setHours(0,0,0,0),e.criteriaRangeEnd=new Date(e.criteriaRangeStart).setHours(23,59,59,999)))}else t.showCriteriaStart=!1,t.showCriteriaEnd=!1,t.showNumberOf=!1,t.conditionDisplay="";n.debug("selectedConditionChanged End"),n.debug("selectedConditionChanged Result"),n.debug(t),n.debug(e)},e.criteriaRangeChanged=function(e){var t=e.selectedCriteriaType;if("calculation"===t.dateInfo.type){var i=e.criteriaNumberOf;switch(t.dateInfo.measureType){case"h":var r=Date.parse("today");e.criteriaRangeEnd=r.getTime();var a=Date.parse("today").add(-i).hours();e.criteriaRangeStart=a.getTime();break;case"d":var o=Date.parse("today").add(-1).days();o.setHours(23,59,59,999),e.criteriaRangeEnd=o.getTime();var s=Date.parse("today").add(-i).days();e.criteriaRangeStart=s.getTime();break;case"w":var l=Date.today().last().sunday();l.setHours(23,59,59,999),e.criteriaRangeEnd=l.getTime();var c=Date.today().last().sunday().add(-i).weeks();e.criteriaRangeStart=c.getTime();break;case"m":var u=Date.today().add(-1).months().moveToLastDayOfMonth();u.setHours(23,59,59,999),e.criteriaRangeEnd=u.getTime();var d=Date.today().add(-1).months().moveToLastDayOfMonth().add(-i).months();e.criteriaRangeStart=d.getTime();break;case"q":var p=Math.floor(Date.parse("today").getMonth()/3),f=new Date(Date.parse("today").getFullYear(),3*p,1),h=f.add(-1).days();h.setHours(23,59,59,999),e.criteriaRangeEnd=h.getTime();var g=new Date(Date.parse("today").getFullYear(),3*p,1);g.add(-(3*i)).months(),e.criteriaRangeStart=g.getTime();break;case"y":var m=new Date((new Date).getFullYear(),11,31).add(-1).years();m.setHours(23,59,59,999),e.criteriaRangeEnd=m.getTime();var y=new Date((new Date).getFullYear(),11,31).add(-i-1).years();e.criteriaRangeStart=y.getTime()}}"exactDate"===t.dateInfo.type&&(e.criteriaRangeStart=e.criteriaRangeStart.setHours(0,0,0,0),e.criteriaRangeEnd=new Date(e.criteriaRangeStart).setHours(23,59,59,999)),"range"===t.dateInfo.type&&(angular.isDefined(e.criteriaRangeStart)&&(e.criteriaRangeStart=new Date(e.criteriaRangeStart).setHours(0,0,0,0)),angular.isDefined(e.criteriaRangeEnd)&&(e.criteriaRangeEnd=new Date(e.criteriaRangeEnd).setHours(23,59,59,999))),n.debug("criteriaRangeChanged"),n.debug(t),n.debug(e)};break;case"big_decimal":case"integer":case"float":e.conditionOptions=f(),e.criteriaRangeChanged=function(e){e.selectedCriteriaType},e.selectedConditionChanged=function(e){e.showCriteriaValue=!0,angular.isDefined(e.selectedCriteriaType.type)&&(e.showCriteriaValue=!1,e.selectedCriteriaType.showCriteriaStart=!0,e.selectedCriteriaType.showCriteriaEnd=!0),angular.isDefined(e.selectedCriteriaType.value)&&(e.showCriteriaValue=!1)}}if(angular.isDefined(e.selectedFilterProperty.fieldtype))switch(e.selectedFilterProperty.fieldtype){case"many-to-one":if(e.conditionOptions=m(e.comparisonType),n.debug("many-to-one"),n.debug(e.selectedFilterProperty),n.debug(e.filterPropertiesList),angular.isUndefined(e.filterPropertiesList[e.selectedFilterProperty.propertyIdentifier])){var o=r.getFilterPropertiesByBaseEntityName(e.selectedFilterProperty.cfc);o.then(function(t){e.filterPropertiesList[e.selectedFilterProperty.propertyIdentifier]=t,s.formatPropertiesList(e.filterPropertiesList[e.selectedFilterProperty.propertyIdentifier],e.selectedFilterProperty.propertyIdentifier)},function(e){})}break;case"many-to-many":case"one-to-many":e.manyToManyOptions=g(),e.oneToManyOptions=h();var l=r.getExistingCollectionsByBaseEntity(a.cfc);l.then(function(t){if(e.collectionOptions=t.data,angular.isDefined(e.workflowCondition.collectionID)){for(var i in e.collectionOptions)e.collectionOptions[i].collectionID===e.workflowCondition.collectionID&&(e.selectedFilterProperty.selectedCollection=e.collectionOptions[i]);for(var i in e.oneToManyOptions)e.oneToManyOptions[i].comparisonOperator===e.workflowCondition.criteria&&(e.selectedFilterProperty.selectedCriteriaType=e.oneToManyOptions[i])}})}n.debug("workflowCondition"),n.debug(e.workflowCondition),angular.forEach(e.conditionOptions,function(t){if(t.display==e.workflowCondition.conditionDisplay){if(e.selectedFilterProperty.selectedCriteriaType=t,e.selectedFilterProperty.criteriaValue=e.workflowCondition.value,angular.isDefined(e.selectedFilterProperty.selectedCriteriaType.dateInfo)&&angular.isDefined(e.workflowCondition.value)&&e.workflowCondition.value.length){var i=e.workflowCondition.value.split("-");e.selectedFilterProperty.criteriaRangeStart=new Date(parseInt(i[0])),e.selectedFilterProperty.criteriaRangeEnd=new Date(parseInt(i[1]))}angular.isDefined(e.workflowCondition.criteriaNumberOf)&&(e.selectedFilterProperty.criteriaNumberOf=e.workflowCondition.criteriaNumberOf),angular.isDefined(e.selectedConditionChanged)&&e.selectedConditionChanged(e.selectedFilterProperty)}}),n.debug("templateLoader"),n.debug(a);var y=c(a);y.success(function(n){i.html(n),t(i.contents())(e)})}}),e.selectedCriteriaChanged=function(t){n.debug(t),n.debug(e.selectedFilterProperty);var i={entityAlias:e.selectedFilterProperty.name,cfc:e.selectedFilterProperty.cfc,propertyIdentifier:e.selectedFilterProperty.propertyIdentifier};e.workflowCondition.breadCrumbs.push(i),e.selectedFilterPropertyChanged({selectedFilterProperty:e.selectedFilterProperty.selectedCriteriaType})}};return{restrict:"A",scope:{workflowCondition:"=",selectedFilterProperty:"=",filterPropertiesList:"=",selectedFilterPropertyChanged:"&"},link:y}}return e.$inject=["$http","$compile","$templateCache","$log","$hibachi","$filter","collectionPartialsPath","metadataService","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o,s,l,c){return new e(t,i,n,r,a,o,s,l,c)};return t.$inject=["$http","$compile","$templateCache","$log","$hibachi","$filter","collectionPartialsPath","metadataService","hibachiPathBuilder"],t},e}();t.SWConditionCriteria=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return{restrict:"E",scope:{filterItem:"=",selectedFilterProperty:"=",filterPropertiesList:"=",selectedFilterPropertyChanged:"&",comparisonType:"=",collectionConfig:"="},templateUrl:t.buildPartialsPath(e)+"criteria.html",link:function(e,t,i){}}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["collectionPartialsPath","hibachiPathBuilder"],t},e}();t.SWCriteria=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return{restrict:"E",templateUrl:t.buildPartialsPath(e)+"criteriaboolean.html",link:function(e,t,i){var n=function(e){angular.isUndefined(e)&&(e="filter");var t=[];return"filter"===e?t=[{display:"True",comparisonOperator:"=",value:"True"},{display:"False",comparisonOperator:"=",value:"False"},{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}]:"condition"===e&&(t=[{display:"True",comparisonOperator:"eq",value:"True"},{display:"False",comparisonOperator:"eq",value:"False"},{display:"Defined",comparisonOperator:"null",value:"False"},{display:"Not Defined",comparisonOperator:"null",value:"True"}]),t};e.conditionOptions=n(e.comparisonType),angular.forEach(e.conditionOptions,function(t){t.display==e.filterItem.conditionDisplay&&(e.selectedFilterProperty.selectedCriteriaType=t,e.selectedFilterProperty.criteriaValue=e.filterItem.value,angular.isDefined(e.selectedConditionChanged)&&e.selectedConditionChanged(e.selectedFilterProperty))})}}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["collectionPartialsPath","hibachiPathBuilder"],t},e}();t.SWCriteriaBoolean=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){return{restrict:"E",templateUrl:i.buildPartialsPath(t)+"criteriadate.html",link:function(t,i,n){var r=function(e){angular.isUndefined(e)&&(e="filter");var t=[];return"filter"===e?t=[{display:"Date",comparisonOperator:"between",dateInfo:{type:"exactDate"}},{display:"In Range",comparisonOperator:"between",dateInfo:{type:"range"}},{display:"Not In Range",comparisonOperator:"not between",dateInfo:{type:"range"}},{display:"Today",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"d",measureCount:0,behavior:"toDate"}},{display:"Yesterday",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"d",measureCount:-1,behavior:"toDate"}},{display:"This Week",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"w",behavior:"toDate"}},{display:"This Month",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"m",behavior:"toDate"}},{display:"This Quarter",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"q",behavior:"toDate"}},{display:"This Year",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"y",behavior:"toDate"}},{display:"Last N Hour(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"h",measureTypeDisplay:"Hours"}},{display:"Last N Day(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"d",measureTypeDisplay:"Days"}},{display:"Last N Week(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"w",measureTypeDisplay:"Weeks"}},{display:"Last N Month(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"m",measureTypeDisplay:"Months"}},{display:"Last N Quarter(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"q",measureTypeDisplay:"Quarters"}},{display:"Last N Year(s)",comparisonOperator:"between",dateInfo:{type:"calculation",measureType:"y",measureTypeDisplay:"Years"}},{display:"Exact N Day(s) Ago",comparisonOperator:"between",dateInfo:{type:"exactDate",measureType:"d",measureTypeDisplay:"Days"}},{display:"Exact N Month(s) Ago",comparisonOperator:"between",dateInfo:{type:"exactDate",measureType:"m",measureTypeDisplay:"Months"}},{display:"Exact N Year(s) Ago",comparisonOperator:"between",dateInfo:{type:"exactDate",measureType:"y",measureTypeDisplay:"Years"}},{display:"Exact N Day(s) Ago",comparisonOperator:"between",dateInfo:{type:"exactDate",measureType:"d",measureTypeDisplay:"Days"}},{display:"Exact N Month(s) Ago",comparisonOperator:"between",dateInfo:{type:"exactDate",measureType:"m",measureTypeDisplay:"Months"}},{display:"Exact N Year(s) Ago",comparisonOperator:"between",dateInfo:{type:"exactDate",measureType:"y",measureTypeDisplay:"Years"}},{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}]:"condition"===e&&(t=[{display:"Equals",comparisonOperator:"eq"},{display:"Doesn't Equal",comparisonOperator:"neq"},{display:"Defined",comparisonOperator:"null",value:"False"},{display:"Not Defined",comparisonOperator:"null",value:"True"}]),t};t.conditionOptions=r(t.comparisonType),t.today=function(){angular.isDefined(t.selectedFilterProperty)&&(t.selectedFilterProperty.criteriaRangeStart=(new Date).getTime(),t.selectedFilterProperty.criteriaRangeEnd=(new Date).getTime())},t.clear=function(){t.selectedFilterProperty.criteriaRangeStart=null,t.selectedFilterProperty.criteriaRangeEnd=null},t.openCalendarStart=function(e){e.preventDefault(),e.stopPropagation(),t.openedCalendarStart=!0},t.openCalendarEnd=function(e){e.preventDefault(),e.stopPropagation(),t.openedCalendarEnd=!0},t.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],t.format=t.formats[1],t.selectedConditionChanged=function(t){e.debug("selectedConditionChanged Begin");var i=t.selectedCriteriaType;if(angular.isDefined(i.dateInfo)){if("calculation"===i.dateInfo.type)if(i.showCriteriaStart=!0,i.showCriteriaEnd=!0,i.disableCriteriaStart=!0,i.disableCriteriaEnd=!0,angular.isUndefined(i.dateInfo.behavior))e.debug("Not toDate"),i.showNumberOf=!0,i.conditionDisplay="Number of "+i.dateInfo.measureTypeDisplay+" :";else{e.debug("toDate");var n=Date.parse("today"),r=n.setHours(23,59,59,999);switch(t.criteriaRangeEnd=r,i.dateInfo.measureType){case"d":var a=Date.parse("today").add(i.dateInfo.measureCount).days();a.setHours(0,0,0,0),t.criteriaRangeStart=a.getTime();break;case"w":var o=Date.today().last().monday();t.criteriaRangeStart=o.getTime();break;case"m":var s=Date.today().moveToFirstDayOfMonth();t.criteriaRangeStart=s.getTime();break;case"q":var l=Date.parse("today").toString("MM"),c=Date.parse("today").toString("yyyy"),u=3*Math.floor(l/3),d=new Date(c,u,1);t.criteriaRangeStart=d.getTime();break;case"y":var c=Date.parse("today").toString("yyyy"),p=new Date(c,0,1);t.criteriaRangeStart=p.getTime()}}"range"===i.dateInfo.type&&(i.showCriteriaStart=!0,i.showCriteriaEnd=!0,i.disableCriteriaStart=!1,i.disableCriteriaEnd=!1,i.showNumberOf=!1),"exactDate"===i.dateInfo.type&&(i.showCriteriaStart=!0,i.showCriteriaEnd=!1,i.disableCriteriaStart=!1,i.disableCriteriaEnd=!0,i.dateInfo.measureType?(i.conditionDisplay="How many "+i.dateInfo.measureTypeDisplay+" ago?",i.showCriteriaStart=!1,i.showNumberOf=!0):(i.conditionDisplay="",i.showCriteriaStart=!0,i.showNumberOf=!1,t.criteriaRangeStart=new Date(t.criteriaRangeStart).setHours(0,0,0,0),t.criteriaRangeEnd=new Date(t.criteriaRangeStart).setHours(23,59,59,999)))}else i.showCriteriaStart=!1,i.showCriteriaEnd=!1,i.showNumberOf=!1,i.conditionDisplay="";e.debug("selectedConditionChanged End"),e.debug("selectedConditionChanged Result"),e.debug(i),e.debug(t)},t.criteriaRangeChanged=function(t){e.debug("criteriaRangeChanged"),e.debug(t);var i=t.selectedCriteriaType;if("calculation"===i.dateInfo.type){var n=t.criteriaNumberOf;switch(i.dateInfo.measureType){case"h":var r=Date.parse("today");t.criteriaRangeEnd=r.getTime();var a=Date.parse("today").add(-n).hours();t.criteriaRangeStart=a.getTime();break;case"d":var o=Date.parse("today").add(-1).days();o.setHours(23,59,59,999),t.criteriaRangeEnd=o.getTime();var s=Date.parse("today").add(-n).days();t.criteriaRangeStart=s.getTime();break;case"w":var l=Date.today().last().sunday();l.setHours(23,59,59,999),t.criteriaRangeEnd=l.getTime();var c=Date.today().last().sunday().add(-n).weeks();t.criteriaRangeStart=c.getTime();break;case"m":var u=Date.today().add(-1).months().moveToLastDayOfMonth();u.setHours(23,59,59,999),t.criteriaRangeEnd=u.getTime();var d=Date.today().add(-1).months().moveToLastDayOfMonth().add(-n).months();t.criteriaRangeStart=d.getTime();break;case"q":var p=Math.floor(Date.parse("today").getMonth()/3),f=new Date(Date.parse("today").getFullYear(),3*p,1),h=f.add(-1).days();h.setHours(23,59,59,999),t.criteriaRangeEnd=h.getTime();var g=new Date(Date.parse("today").getFullYear(),3*p,1);g.add(-(3*n)).months(),t.criteriaRangeStart=g.getTime();break;case"y":var m=new Date((new Date).getFullYear(),11,31).add(-1).years();m.setHours(23,59,59,999),t.criteriaRangeEnd=m.getTime();var y=new Date((new Date).getFullYear(),11,31).add(-n-1).years();t.criteriaRangeStart=y.getTime()}}"exactDate"===i.dateInfo.type&&angular.isDefined(t.criteriaRangeStart)&&angular.isDefined(t.criteriaRangeStart.setHours)&&(t.criteriaRangeStart=t.criteriaRangeStart.setHours(0,0,0,0),
t.criteriaRangeEnd=new Date(t.criteriaRangeStart).setHours(23,59,59,999)),"range"===i.dateInfo.type&&(angular.isDefined(t.criteriaRangeStart)&&angular.isDefined(t.criteriaRangeStart)&&(t.criteriaRangeStart=new Date(t.criteriaRangeStart).setHours(0,0,0,0)),angular.isDefined(t.criteriaRangeEnd)&&angular.isDefined(t.criteriaRangeStart)&&(t.criteriaRangeEnd=new Date(t.criteriaRangeEnd).setHours(23,59,59,999))),e.debug("criteriaRangeChanged"),e.debug(i),e.debug(t)},angular.isUndefined(t.filterItem.$$isNew)||t.filterItem.$$isNew===!1?angular.forEach(t.conditionOptions,function(e){if(e.display==t.filterItem.conditionDisplay){if(t.selectedFilterProperty.selectedCriteriaType=e,t.selectedFilterProperty.criteriaValue=t.filterItem.value,angular.isDefined(t.selectedFilterProperty.selectedCriteriaType.dateInfo)&&angular.isDefined(t.filterItem.value)&&t.filterItem.value.length){var i=t.filterItem.value.split("-"),n=new Date(parseInt(i[0])).toUTCString();n=n.split(" ").slice(0,5).join(" ");var r=new Date(parseInt(i[1])).toUTCString();r=r.split(" ").slice(0,5).join(" "),t.selectedFilterProperty.criteriaRangeStart=n,t.selectedFilterProperty.criteriaRangeEnd=r}angular.isDefined(t.selectedConditionChanged)&&t.selectedConditionChanged(t.selectedFilterProperty)}}):(t.selectedFilterProperty.criteriaValue="",t.selectedFilterProperty.criteriaRangeStart="",t.selectedFilterProperty.criteriaRangeEnd="")}}}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$log","collectionPartialsPath","hibachiPathBuilder"],t},e}();t.SWCriteriaDate=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){return{restrict:"E",templateUrl:a.buildPartialsPath(i)+"criteriamanytomany.html",link:function(i,a,s){function l(e){i.collectionOptions.push(e),i.selectedFilterProperty.selectedCollection=e,i.selectedFilterProperty.selectedCriteriaType=i.manyToManyOptions[2]}i.data={},i.collectionOptionsOpen=!1,i.toggleCollectionOptions=function(e){i.collectionOptionsOpen=angular.isUndefined(e)?!i.collectionOptionsOpen:e},i.selectCollection=function(e){i.toggleCollectionOptions(),i.selectedFilterProperty.selectedCollection=e,i.selectedFilterProperty.selectedCriteriaType=i.manyToManyOptions[2]},i.cleanSelection=function(){i.toggleCollectionOptions(!1),i.data.collectionName="",i.selectedFilterProperty.selectedCollection=null};var c=function(t){angular.isUndefined(t)&&(t="filter"),e.debug("type",t);var i=[];return"filter"==t?i=[{display:"All Exist In Collection",comparisonOperator:"All"},{display:"None Exist In Collection",comparisonOperator:"None"},{display:"Some Exist In Collection",comparisonOperator:"One"},{display:"Empty",comparisonOperator:"is",value:"null"},{display:"Not Empty",comparisonOperator:"is not",value:"null"}]:"condition"===t&&(i=[]),i};i.manyToManyOptions=c(i.comparisonType);var u=t.getExistingCollectionsByBaseEntity(i.selectedFilterProperty.cfc);u.then(function(e){if(i.collectionOptions=e.data,angular.isDefined(i.filterItem.collectionID)){for(var t in i.collectionOptions)i.collectionOptions[t].collectionID===i.filterItem.collectionID&&(i.selectedFilterProperty.selectedCollection=i.collectionOptions[t]);for(var t in i.manyToManyOptions)i.manyToManyOptions[t].comparisonOperator===i.filterItem.criteria&&(i.selectedFilterProperty.selectedCriteriaType=i.manyToManyOptions[t])}}),r.attach(l,"addCollection","addCollection"),i.selectedCriteriaChanged=function(t){e.debug(t),e.debug(i.selectedFilterProperty);var n={entityAlias:i.selectedFilterProperty.name,cfc:i.selectedFilterProperty.cfc,propertyIdentifier:i.selectedFilterProperty.propertyIdentifier,rbKey:o.getRBKey("entity."+i.selectedFilterProperty.cfc.replace("_",""))};i.filterItem.breadCrumbs.push(n),i.selectedFilterPropertyChanged({selectedFilterProperty:i.selectedFilterProperty.selectedCriteriaType})},i.addNewCollection=function(){n.addPageDialog("org/Hibachi/client/src/collection/components/criteriacreatecollection",{entityName:i.selectedFilterProperty.cfc,collectionName:i.data.collectionName,parentEntity:i.collectionConfig.baseEntityName}),i.cleanSelection()},i.viewSelectedCollection=function(){n.addPageDialog("org/Hibachi/client/src/collection/components/criteriacreatecollection",{entityName:"collection",entityId:i.selectedFilterProperty.selectedCollection.collectionID,parentEntity:i.collectionConfig.baseEntityName})}}}}return e.Factory=function(){var t=function(t,i,n,r,a,o,s,l,c,u){return new e(t,i,r,s,l,c,u)};return t.$inject=["$log","$hibachi","collectionPartialsPath","dialogService","observerService","hibachiPathBuilder","rbkeyService"],t},e}();t.SWCriteriaManyToMany=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a){return{restrict:"E",templateUrl:r.buildPartialsPath(i)+"criteriamanytoone.html",link:function(i,r,o){var s=function(){var e={drillEntity:{},hasEntity:{display:"Defined",comparisonOperator:"is not",value:"null"},notHasEntity:{display:"Not Defined",comparisonOperator:"is",value:"null"}};return e};i.manyToOneOptions=s(),i.conditionOptions=s(),e.debug("many-to-one"),e.debug(i.selectedFilterProperty),e.debug(i.filterPropertiesList),i.$watch("selectedFilterProperty",function(r){if(angular.isUndefined(i.filterPropertiesList[i.selectedFilterProperty.propertyIdentifier])){var o=t.getFilterPropertiesByBaseEntityName(r.cfc);o.then(function(e){i.filterPropertiesList[i.selectedFilterProperty.propertyIdentifier]=e,n.formatPropertiesList(i.filterPropertiesList[i.selectedFilterProperty.propertyIdentifier],i.selectedFilterProperty.propertyIdentifier)},function(e){})}i.selectedCriteriaChanged=function(t){e.debug(t),e.debug("changed"),e.debug(i.selectedFilterProperty);var n={entityAlias:i.selectedFilterProperty.name,cfc:i.selectedFilterProperty.cfc,propertyIdentifier:i.selectedFilterProperty.propertyIdentifier,rbKey:a.getRBKey("entity."+i.selectedFilterProperty.cfc.replace("_",""))};e.debug("breadcrumb"),e.debug(n),e.debug(i.filterItem.breadCrumbs),i.filterItem.breadCrumbs.push(n),i.selectedFilterPropertyChanged({selectedFilterProperty:i.selectedFilterProperty.selectedCriteriaType}),e.debug(i.selectedFilterProperty)}})}}}return e.Factory=function(){var t=function(t,i,n,r,a,o){return new e(t,i,n,r,a,o)};return t.$inject=["$log","$hibachi","collectionPartialsPath","metadataService","hibachiPathBuilder","rbkeyService"],t},e}();t.SWCriteriaManyToOne=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){return{restrict:"E",templateUrl:i.buildPartialsPath(t)+"criterianumber.html",link:function(t,i,n){var r=function(e){angular.isUndefined(e)&&(e="filter");var t=[];return"filter"===e?t=[{display:"Equals",comparisonOperator:"="},{display:"Doesn't Equal",comparisonOperator:"<>"},{display:"In Range",comparisonOperator:"between",type:"range"},{display:"Not In Range",comparisonOperator:"not between",type:"range"},{display:"Greater Than",comparisonOperator:">"},{display:"Greater Than Or Equal",comparisonOperator:">="},{display:"Less Than",comparisonOperator:"<"},{display:"Less Than Or Equal",comparisonOperator:"<="},{display:"In List",comparisonOperator:"in"},{display:"Not In List",comparisonOperator:"not in"},{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}]:"condition"===e&&(t=[{display:"Equals",comparisonOperator:"eq"},{display:"Greater Than",comparisonOperator:"gt"},{display:"Greater Than Or Equal",comparisonOperator:"gte"},{display:"Less Than",comparisonOperator:"lt"},{display:"Less Than Or Equal",comparisonOperator:"lte"},{display:"Doesn't Equal",comparisonOperator:"neq"},{display:"Defined",comparisonOperator:"null",value:"False"},{display:"Not Defined",comparisonOperator:"null",value:"True"}]),t};t.$watch("selectedFilterProperty.criteriaValue",function(i){angular.isDefined(i)&&(t.selectedFilterProperty.criteriaValue=i,e.debug(t.selectedFilterProperty))}),t.conditionOptions=r(t.comparisonType),t.criteriaRangeChanged=function(e){e.selectedCriteriaType},t.selectedConditionChanged=function(e){e.showCriteriaValue=!0,angular.isDefined(e.selectedCriteriaType.type)&&(e.showCriteriaValue=!1,e.selectedCriteriaType.showCriteriaStart=!0,e.selectedCriteriaType.showCriteriaEnd=!0),angular.isDefined(e.selectedCriteriaType.value)&&(e.showCriteriaValue=!1)},angular.forEach(t.conditionOptions,function(i){if(e.debug("populate"),i.display==t.filterItem.conditionDisplay){if(t.selectedFilterProperty.selectedCriteriaType=i,e.debug(t.filterItem),"between"===t.filterItem.comparisonOperator||"not between"===t.filterItem.comparisonOperator){var n=t.filterItem.value.split("-");e.debug(n),t.selectedFilterProperty.criteriaRangeStart=parseInt(n[0]),t.selectedFilterProperty.criteriaRangeEnd=parseInt(n[1])}else t.selectedFilterProperty.criteriaValue=t.filterItem.value;angular.isDefined(t.filterItem.criteriaNumberOf)&&(t.selectedFilterProperty.criteriaNumberOf=t.filterItem.criteriaNumberOf),angular.isDefined(t.selectedConditionChanged)&&t.selectedConditionChanged(t.selectedFilterProperty)}})}}}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$log","collectionPartialsPath","hibachiPathBuilder"],t},e}();t.SWCriteriaNumber=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){return{restrict:"E",templateUrl:a.buildPartialsPath(i)+"criteriaonetomany.html",link:function(i,a,s){function l(e){i.collectionOptions.push(e),i.selectedFilterProperty.selectedCollection=e,i.selectedFilterProperty.selectedCriteriaType=i.oneToManyOptions[2]}i.data={},i.collectionOptionsOpen=!1,i.toggleCollectionOptions=function(e){i.collectionOptionsOpen=angular.isUndefined(e)?!i.collectionOptionsOpen:e},i.selectCollection=function(e){i.toggleCollectionOptions(),i.selectedFilterProperty.selectedCollection=e,i.selectedFilterProperty.selectedCriteriaType=i.oneToManyOptions[2]},i.cleanSelection=function(){i.toggleCollectionOptions(!1),i.data.collectionName="",i.selectedFilterProperty.selectedCollection=null};var c=function(e){angular.isUndefined(e)&&(e="filter");var t=[];return"filter"==e?t=[{display:"All Exist In Collection",comparisonOperator:"All"},{display:"None Exist In Collection",comparisonOperator:"None"},{display:"Some Exist In Collection",comparisonOperator:"One"}]:"condition"===e&&(t=[]),t};e.debug("onetomany"),e.debug(i.selectedFilterProperty),i.oneToManyOptions=c(i.comparisonType);var u=t.getExistingCollectionsByBaseEntity(i.selectedFilterProperty.cfc);u.then(function(e){if(i.collectionOptions=e.data,angular.isDefined(i.filterItem.collectionID)){for(var t in i.collectionOptions)i.collectionOptions[t].collectionID===i.filterItem.collectionID&&(i.selectedFilterProperty.selectedCollection=i.collectionOptions[t]);for(var t in i.oneToManyOptions)i.oneToManyOptions[t].comparisonOperator===i.filterItem.criteria&&(i.selectedFilterProperty.selectedCriteriaType=i.oneToManyOptions[t])}}),r.attach(l,"addCollection","addCollection"),i.selectedCriteriaChanged=function(t){e.debug(t),e.debug(i.selectedFilterProperty);var n={entityAlias:i.selectedFilterProperty.name,cfc:i.selectedFilterProperty.cfc,propertyIdentifier:i.selectedFilterProperty.propertyIdentifier,rbKey:o.getRBKey("entity."+i.selectedFilterProperty.cfc.replace("_","")),filterProperty:i.selectedFilterProperty};i.filterItem.breadCrumbs.push(n),e.debug("criteriaChanged"),e.debug(i.selectedFilterProperty),i.selectedFilterPropertyChanged({selectedFilterProperty:i.selectedFilterProperty.selectedCriteriaType})},i.addNewCollection=function(){n.addPageDialog("org/Hibachi/client/src/collection/components/criteriacreatecollection",{entityName:i.selectedFilterProperty.cfc,collectionName:i.data.collectionName,parentEntity:i.collectionConfig.baseEntityName}),i.cleanSelection()},i.viewSelectedCollection=function(){i.toggleCollectionOptions(),n.addPageDialog("org/Hibachi/client/src/collection/components/criteriacreatecollection",{entityName:"collection",entityId:i.selectedFilterProperty.selectedCollection.collectionID,parentEntity:i.collectionConfig.baseEntityName})}}}}return e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$log","$hibachi","collectionPartialsPath","dialogService","observerService","hibachiPathBuilder","rbkeyService"],t},e}();t.SWCriteriaOneToMany=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s){return{restrict:"E",templateUrl:o.buildPartialsPath(n)+"criteriarelatedobject.html",link:function(i,n,r){var o=function(){var e={drillEntity:null,hasEntity:{display:"Defined",comparisonOperator:"is not",value:"null"},notHasEntity:{display:"Not Defined",comparisonOperator:"is",value:"null"},aggregate:{aggregate:""}};return e};i.aggegate={},i.aggegate.selectedAggregate="",i.aggregateOptions=["Average","Count","Sum"],i.selectAggregate=function(e){i.selectedFilterProperty.selectedCriteriaType.aggregate=e},i.relatedObjectOptions=o(),i.conditionOptions=o(),e.debug("many-to-one"),e.debug(i.selectedFilterProperty),e.debug(i.filterPropertiesList),i.$watch("selectedFilterProperty",function(n){if(angular.isUndefined(i.filterPropertiesList[i.selectedFilterProperty.propertyIdentifier])){var r=t.getFilterPropertiesByBaseEntityName(n.cfc);r.then(function(e){i.filterPropertiesList[i.selectedFilterProperty.propertyIdentifier]=e,a.formatPropertiesList(i.filterPropertiesList[i.selectedFilterProperty.propertyIdentifier],i.selectedFilterProperty.propertyIdentifier)},function(e){})}i.selectedCriteriaChanged=function(t,n){var r={entityAlias:i.selectedFilterProperty.name,cfc:i.selectedFilterProperty.cfc,propertyIdentifier:i.selectedFilterProperty.propertyIdentifier,rbKey:s.getRBKey("entity."+i.selectedFilterProperty.cfc.replace("_",""))};e.debug("breadcrumb"),e.debug(r),e.debug(i.filterItem.breadCrumbs),i.filterItem.breadCrumbs.push(r),n&&(i.selectedFilterProperty.selectedCriteriaType.ormtype="integer",i.selectedFilterProperty.selectedCriteriaType.aggregate=n),i.selectedFilterPropertyChanged({selectedFilterProperty:i.selectedFilterProperty.selectedCriteriaType}),e.debug(i.selectedFilterProperty)}})}}}return e.Factory=function(){var t=function(t,i,n,r,a,o,s,l){return new e(t,i,n,r,a,o,s,l)};return t.$inject=["$log","$hibachi","$filter","collectionPartialsPath","collectionService","metadataService","hibachiPathBuilder","rbkeyService"],t},e}();t.SWCriteriaRelatedObject=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return{restrict:"E",templateUrl:t.buildPartialsPath(e)+"criteriastring.html",link:function(e,t,i){var n=function(e){angular.isUndefined(e)&&(e="filter");var t=[];return"filter"===e?t=[{display:"Equals",comparisonOperator:"="},{display:"Doesn't Equal",comparisonOperator:"<>"},{display:"Contains",comparisonOperator:"like",pattern:"%w%"},{display:"Doesn't Contain",comparisonOperator:"not like",pattern:"%w%"},{display:"Starts With",comparisonOperator:"like",pattern:"w%"},{display:"Doesn't Start With",comparisonOperator:"not like",pattern:"w%"},{display:"Ends With",comparisonOperator:"like",pattern:"%w"},{display:"Doesn't End With",comparisonOperator:"not like",pattern:"%w"},{display:"In List",comparisonOperator:"in"},{display:"Not In List",comparisonOperator:"not in"},{display:"Defined",comparisonOperator:"is not",value:"null"},{display:"Not Defined",comparisonOperator:"is",value:"null"}]:"condition"===e&&(t=[{display:"Equals",comparisonOperator:"eq"},{display:"Doesn't Equal",comparisonOperator:"neq"},{display:"Defined",comparisonOperator:"null",value:"False"},{display:"Not Defined",comparisonOperator:"null",value:"True"}]),t};e.conditionOptions=n(e.comparisonType),e.inListArray=[],angular.isDefined(e.filterItem.value)&&(e.inListArray=e.filterItem.value.split(",")),e.newListItem="",e.addToValueInListFormat=function(t){e.inListArray.push(t),e.filterItem.value=e.inListArray.toString(),e.filterItem.displayValue=e.inListArray.toString().replace(/,/g,", "),e.newListItem=""},e.removelistItem=function(t){e.inListArray.splice(t,1),e.filterItem.value=e.inListArray.toString(),e.filterItem.displayValue=e.inListArray.toString().replace(/,/g,", ")},e.clearField=function(){e.newListItem=""},e.selectedConditionChanged=function(t){angular.isDefined(t.selectedCriteriaType.value)?t.showCriteriaValue=!1:"in"===t.selectedCriteriaType.comparisonOperator||"not in"===t.selectedCriteriaType.comparisonOperator?(t.showCriteriaValue=!1,e.comparisonOperatorInAndNotInFlag=!0):t.showCriteriaValue=!0},e.$watch("filterItem.value",function(t){angular.isDefined(e.filterItem)&&angular.isDefined(e.filterItem.value)&&(e.filterItem.value=e.filterItem.value.replace("%",""))}),e.$watch("selectedFilterProperty",function(t){angular.isDefined(t)&&angular.forEach(e.conditionOptions,function(t){t.display==e.filterItem.conditionDisplay&&(e.selectedFilterProperty.selectedCriteriaType=t,e.selectedFilterProperty.criteriaValue=e.filterItem.value,angular.isDefined(e.selectedConditionChanged)&&e.selectedConditionChanged(e.selectedFilterProperty))})})}}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["collectionPartialsPath","hibachiPathBuilder"],t},e}();t.SWCriteriaString=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){return{require:"?^swDisplayOptions",restrict:"A",scope:{selectedProperty:"=",propertiesList:"=",breadCrumbs:"=",selectedPropertyChanged:"&"},templateUrl:n.buildPartialsPath(t)+"displayitem.html",link:function(t,n,r,a){t.showDisplayItem=!1,t.selectedDisplayOptionChanged=function(e){var i={entityAlias:t.selectedProperty.name,cfc:t.selectedProperty.cfc,propertyIdentifier:t.selectedProperty.propertyIdentifier};t.breadCrumbs.push(i),t.selectedPropertyChanged({selectedProperty:e})},t.$watch("selectedProperty",function(n){if(angular.isDefined(n)&&angular.isUndefined(t.propertiesList[n.propertyIdentifier])){var r=e.getFilterPropertiesByBaseEntityName(n.cfc);r.then(function(e){i.setPropertiesList(e,n.propertyIdentifier),t.propertiesList[n.propertyIdentifier]=i.getPropertiesListByBaseEntityAlias(n.propertyIdentifier),i.formatPropertiesList(t.propertiesList[n.propertyIdentifier],n.propertyIdentifier)},function(e){})}})}}}return e.$inject=["$hibachi","collectionPartialsPath","metadataService","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["$hibachi","collectionPartialsPath","metadataService","hibachiPathBuilder"],t},e}();t.SWDisplayItem=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){return{require:"^swDisplayOptions",restrict:"A",scope:{selectedProperty:"=",propertiesList:"=",breadCrumbs:"=",selectedPropertyChanged:"&"},templateUrl:n.buildPartialsPath(t)+"displayitemaggregate.html",link:function(t,n,r,a){t.showDisplayItem=!1,t.aggegate={},t.aggegate.selectedAggregate="",t.aggregateOptions=[{id:"average",value:"Average"},{id:"count",value:"Count"},{id:"sum",value:"Sum"}],t.selectAggregate=function(e){"count"==e?(t.selectedProperty.aggregate=e,t.selectedPropertyChanged({selectedProperty:t.selectedProperty})):t.aggegate.currentObject=t.selectedProperty.cfc},t.selectedDisplayOptionChanged=function(e){e.aggregate=t.aggegate.selectedAggregate,e.aggregateObject=t.aggegate.currentObject,t.selectedPropertyChanged({selectedProperty:e})},t.$watch("selectedProperty",function(n){if(angular.isDefined(n)){if(angular.isUndefined(t.propertiesList[n.propertyIdentifier])){var r=e.getFilterPropertiesByBaseEntityName(n.cfc);r.then(function(e){i.setPropertiesList(e,n.propertyIdentifier),t.propertiesList[n.propertyIdentifier]=i.getPropertiesListByBaseEntityAlias(n.propertyIdentifier),i.formatPropertiesList(t.propertiesList[n.propertyIdentifier],n.propertyIdentifier)},function(e){})}t.showDisplayItem=!0}})}}}return e.$inject=["$hibachi","collectionPartialsPath","metadataService","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["$hibachi","collectionPartialsPath","metadataService","hibachiPathBuilder"],t},e}();t.SWDisplayItemAggregate=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){return{restrict:"E",require:{swListingDisplay:"?^swListingDisplay",swListingControls:"?^swListingControls"},transclude:!0,scope:{orderBy:"<",columns:"<",joins:"<",groupBys:"<",propertiesList:"<",saveCollection:"&?",baseEntityAlias:"<?",baseEntityName:"<?",listingName:"@?"},templateUrl:i.buildPartialsPath(n)+"displayoptions.html",controller:["$scope","$element","$attrs",function(e,t,i){this.removeColumn=function(t){e.columns.length&&e.columns.splice(t,1)}}],link:function(i,n,a,o,s){i.breadCrumbs=[{entityAlias:i.baseEntityAlias,cfc:i.baseEntityAlias,propertyIdentifier:i.baseEntityAlias}],i.getPropertiesList=function(){return i.propertiesList},i.addDisplayDialog={isOpen:!1,toggleDisplayDialog:function(){i.addDisplayDialog.isOpen=!i.addDisplayDialog.isOpen}};var l=function(e){var n,a=i.baseEntityName.replace("Slatwall","").charAt(0).toLowerCase()+i.baseEntityName.replace("Slatwall","").slice(1),o=e.propertyIdentifier,s="",l=o.replace(/^_/,"").split(/[._]+/),c="entity.";return"attribute"==e.$$group?e.displayPropertyIdentifier:(angular.forEach(l,function(e,o){if(0!==o){if(1===o)u=t["new"+i.baseEntityName.replace("Slatwall","")](),n=u.metaData[l[o]],s+=r.getRBKey(c+a+"."+e);else{var u=t["new"+n.cfc.charAt(0).toUpperCase()+n.cfc.slice(1)]();n=u.metaData[l[o]],s+=r.getRBKey(c+u.metaData.className+"."+n.name)}o<l.length-1&&(s+=" | ")}}),s)};i.addColumn=function(n){var a=i.selectedProperty;if(angular.isDefined(i.selectedAggregate)&&(a=i.selectedAggregate),"simple"===a.$$group,e.debug(i.columns),angular.isDefined(a)){var s={title:l(a),propertyIdentifier:a.propertyIdentifier,isVisible:!0,isDeletable:!0,isSearchable:!0,isExportable:!0};if(angular.isDefined(a.attributeID)&&(s.attributeID=a.attributeID,s.attributeSetObject=a.attributeSetObject),angular.isDefined(a.ormtype)&&(s.ormtype=a.ormtype),a.hb_formattype?s.type=a.hb_formattype:s.type="none",angular.isDefined(a.aggregate)&&(s.ormtype="string",s.aggregate={aggregateFunction:a.aggregate.toUpperCase(),aggregateAlias:a.propertyIdentifier.split(/[._]+/).pop()+a.aggregate.charAt(0).toUpperCase()+a.aggregate.slice(1)},s.title+=" "+r.getRBKey("define."+s.aggregate.aggregateFunction)),i.columns.push(s),(a.propertyIdentifier.match(/_/g)||[]).length>1){var c=a.propertyIdentifier.length;a.propertyIdentifier.indexOf(".")!=-1&&(c=a.propertyIdentifier.indexOf("."));var u=a.propertyIdentifier.substring(1,c),d=u.split("_"),p=t.getEntityExample(i.baseEntityName),f="",h=[];angular.isDefined(i.joins)&&(h=i.joins);for(var g=1;g<d.length;g++)if(angular.isDefined(p.metaData[d[g]])&&"cfc"in p.metaData[d[g]]){p=t.getEntityExample(p.metaData[d[g]].cfc),f+="_"+d[g];for(var m={associationName:f.replace(/_([^_]+)$/,".$1").substring(1),alias:"_"+d[0]+f},y=!1,v=0;v<h.length;v++)if(h[v].alias===m.alias){y=!0;break}y||h.push(m)}if(i.joins=h,angular.isUndefined(i.groupBys)||i.groupBys.split(",").length!=i.columns.length){for(var b=angular.isUndefined(i.groupBys)?[]:i.groupBys.split(","),$=0;$<i.columns.length;$++)"attributeID"in i.columns[$]||b.indexOf(i.columns[$].propertyIdentifier)==-1&&b.push(i.columns[$].propertyIdentifier);i.groupBys=b.join(",")}}o.swListingControls&&(o.swListingControls.columnIsControllableMap[s.propertyIdentifier]=!0),i.saveCollection(),angular.isDefined(n)&&n===!0&&(i.addDisplayDialog.toggleDisplayDialog(),i.selectBreadCrumb(0))}},i.selectBreadCrumb=function(e){var t=i.breadCrumbs.length-1-e;i.breadCrumbs.splice(e+1,t),i.selectedPropertyChanged(null)};var c=i.$watch("baseEntityAlias",function(e,t){e!==t&&(i.breadCrumbs=[{entityAlias:i.baseEntityAlias,cfc:i.baseEntityAlias,propertyIdentifier:i.baseEntityAlias}],c())});i.selectedPropertyChanged=function(e,t){t?i.selectedAggregate=e:(i.selectedProperty=e,i.selectedAggregate=void 0)},jQuery(function(e){var t=angular.element(n).children("ul");t.sortable({handle:".s-pannel-name",update:function(n,r){var a=[];e(".s-pannel-name",t).each(function(t,n){var r=e(n).attr("j-column-index"),o=i.columns[r];a.push(o)}),i.columns=a,i.saveCollection()}})}),!i.saveCollection&&o.swListingControls&&(i.saveCollection=function(){o.swListingControls.collectionConfig.columns=i.columns,o.swListingDisplay&&(o.swListingDisplay.columns=i.columns),o.swListingControls.saveCollection()}),o.swListingDisplay&&(i.getCollection=o.swListingDisplay.getCollection)}}}return e.$inject=["$log","$hibachi","hibachiPathBuilder","collectionPartialsPath","rbkeyService"],e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$log","$hibachi","hibachiPathBuilder","collectionPartialsPath","rbkeyService"],t},e}();t.SWDisplayOptions=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c,u){return{require:{swFilterGroups:"^swFilterGroups",swListingControls:"?^swListingControls"},restrict:"E",scope:{collectionConfig:"=",filterItem:"=",filterPropertiesList:"=",saveCollection:"&?",removeFilterItem:"&",filterItemIndex:"=",comparisonType:"=",simple:"="},templateUrl:s.buildPartialsPath(r)+"editfilteritem.html",link:function(r,s,d,p){function f(e,t){var i=new Date(e.getFullYear(),e.getMonth(),e.getDate()),n=new Date(t.getFullYear(),t.getMonth(),t.getDate()),r=864e5,a=n.getTime()-i.getTime(),o=a/r;return Math.floor(o)}if(!r.saveCollection&&p.swListingControls&&(r.saveCollection=function(){p.swListingControls.collectionConfig=r.collectionConfig,p.swListingControls.saveCollection()}),angular.isUndefined(r.filterItem.breadCrumbs))if(r.filterItem.breadCrumbs=[],""===r.filterItem.propertyIdentifier)r.filterItem.breadCrumbs=[{rbKey:l.getRBKey("entity."+r.collectionConfig.baseEntityAlias.replace("_","")),entityAlias:r.collectionConfig.baseEntityAlias,cfc:r.collectionConfig.baseEntityAlias,propertyIdentifier:r.collectionConfig.baseEntityAlias}];else{var h=r.filterItem.propertyIdentifier.split(".");h.pop();for(var g in h){var m={rbKey:l.getRBKey("entity."+r.collectionConfig.baseEntityAlias.replace("_","")),entityAlias:h[g],cfc:h[g],propertyIdentifier:h[g]};r.filterItem.breadCrumbs.push(m)}}else angular.forEach(r.filterItem.breadCrumbs,function(e,t){if(angular.isUndefined(r.filterPropertiesList[e.propertyIdentifier])){var i=n.getFilterPropertiesByBaseEntityName(e.cfc);i.then(function(t){o.setPropertiesList(t,e.propertyIdentifier),r.filterPropertiesList[e.propertyIdentifier]=o.getPropertiesListByBaseEntityAlias(e.propertyIdentifier),o.formatPropertiesList(r.filterPropertiesList[e.propertyIdentifier],e.propertyIdentifier);var i=r.filterItem.propertyIdentifier.split(".");if(i.pop(),i=i.join(".").trim(),angular.isDefined(r.filterPropertiesList[i]))for(var n in r.filterPropertiesList[i].data){var a=r.filterPropertiesList[i].data[n];a.propertyIdentifier===r.filterItem.propertyIdentifier&&(r.selectedFilterProperty=a,r.selectedFilterProperty.value=r.filterItem.value,r.selectedFilterProperty.comparisonOperator=r.filterItem.comparisonOperator)}})}else{var a=r.filterItem.propertyIdentifier.split(".");if(a.pop(),a=a.join(".").trim(),angular.isDefined(r.filterPropertiesList[a]))for(var s in r.filterPropertiesList[a].data){var l=r.filterPropertiesList[a].data[s];l.propertyIdentifier===r.filterItem.propertyIdentifier&&(r.selectedFilterProperty=l,r.selectedFilterProperty.value=r.filterItem.value,r.selectedFilterProperty.comparisonOperator=r.filterItem.comparisonOperator)}}});angular.isUndefined(r.filterItem.$$isClosed)&&(r.filterItem.$$isClosed=!0),r.filterGroupItem=p.swFilterGroups.getFilterGroupItem(),r.togglePrepareForFilterGroup=function(){r.filterItem.$$prepareForFilterGroup=!r.filterItem.$$prepareForFilterGroup},r.selectBreadCrumb=function(t){var i=r.filterItem.breadCrumbs.length-1-t;r.filterItem.breadCrumbs.splice(t+1,i),e.debug("selectBreadCrumb"),e.debug(r.selectedFilterProperty),r.selectedFilterPropertyChanged(null)},r.selectedFilterPropertyChanged=function(t){e.debug("selectedFilterProperty"),e.debug(t),angular.isDefined(r.selectedFilterProperty)&&null===r.selectedFilterProperty&&(r.selectedFilterProperty={}),angular.isDefined(r.selectedFilterProperty)&&angular.isDefined(r.selectedFilterProperty.selectedCriteriaType)&&delete r.selectedFilterProperty.selectedCriteriaType,angular.isDefined(r.filterItem.value)&&delete r.filterItem.value,r.selectedFilterProperty.showCriteriaValue=!1,r.selectedFilterProperty=t},r.addFilterItem=function(){a.newFilterItem(p.swFilterGroups.getFilterGroupItem(),p.swFilterGroups.setItemInUse),this.observerService.notify("collectionConfigUpdated",{collectionConfig:a})},r.cancelFilterItem=function(){e.debug("cancelFilterItem"),e.debug(r.filterItemIndex),r.filterItem.setItemInUse(!1),r.filterItem.$$isClosed=!0;for(var t in r.filterItem.$$siblingItems)r.filterItem.$$siblingItems[t].$$disabled=!1;r.filterItem.$$isNew===!0?(c.notify("filterItemAction",{action:"remove",filterItemIndex:r.filterItemIndex}),r.removeFilterItem({filterItemIndex:r.filterItemIndex})):c.notify("filterItemAction",{action:"close",filterItemIndex:r.filterItemIndex})},r.saveFilter=function(o,s,l){var d=this;if(e.debug("saveFilter begin"),!angular.isDefined(o.selectedCriteriaType)||!angular.equals({},o.selectedCriteriaType)){if((o.propertyIdentifier.match(/_/g)||[]).length>1){var h="_"==o.propertyIdentifier.charAt(0)?1:0,g=o.propertyIdentifier.indexOf(".")==-1?o.propertyIdentifier.length:o.propertyIdentifier.indexOf("."),m=o.propertyIdentifier.substring(h,g),y=m.split("_"),v=n.getEntityExample(r.collectionConfig.baseEntityName),b="",$=[];angular.isDefined(r.collectionConfig.joins)&&($=r.collectionConfig.joins);for(var w=1;w<y.length;w++)if(angular.isDefined(v.metaData[y[w]])&&"cfc"in v.metaData[y[w]]){v=n.getEntityExample(v.metaData[y[w]].cfc),b+="_"+y[w];for(var C={associationName:b.replace(/_([^_]+)$/,".$1").substring(1),alias:"_"+y[0]+b},S=!1,P=0;P<$.length;P++)if($[P].alias===C.alias){S=!0;break}S||$.push(C)}if(r.collectionConfig.joins=$,angular.isDefined(r.collectionConfig.columns)&&(angular.isUndefined(r.collectionConfig.groupBys)||r.collectionConfig.groupBys.split(",").length!=r.collectionConfig.columns.length)){for(var D=angular.isUndefined(r.collectionConfig.groupBys)?[]:r.collectionConfig.groupBys.split(","),k=0;k<r.collectionConfig.columns.length;k++)D.indexOf(r.collectionConfig.columns[k].propertyIdentifier)==-1&&D.push(r.collectionConfig.columns[k].propertyIdentifier);r.collectionConfig.groupBys=D.join(",")}}if(angular.isDefined(o)&&angular.isDefined(o.selectedCriteriaType)){switch(s.$$isNew=!1,s.propertyIdentifier=o.propertyIdentifier,s.displayPropertyIdentifier=o.displayPropertyIdentifier,o.ormtype){case"boolean":s.comparisonOperator=o.selectedCriteriaType.comparisonOperator,s.value=o.selectedCriteriaType.value,s.displayValue=s.value;break;case"string":angular.isDefined(o.attributeID)&&(s.attributeID=o.attributeID,s.attributeSetObject=o.attributeSetObject),s.comparisonOperator=o.selectedCriteriaType.comparisonOperator,angular.isDefined(o.selectedCriteriaType.value)?s.value=o.selectedCriteriaType.value.toString():angular.isDefined(o.selectedCriteriaType.pattern)&&(s.pattern=o.selectedCriteriaType.pattern),s.displayValue=s.value;break;case"timestamp":if(s.comparisonOperator=o.selectedCriteriaType.comparisonOperator,angular.isDefined(o.selectedCriteriaType.value))s.value=o.selectedCriteriaType.value,s.displayValue=s.value;else if(angular.isDefined(o.selectedCriteriaType.dateInfo.type)&&"calculation"===o.selectedCriteriaType.dateInfo.type){var I=f(new Date(o.criteriaRangeStart),new Date(o.criteriaRangeEnd));s.value=I,s.displayValue=o.selectedCriteriaType.display,angular.isDefined(o.criteriaNumberOf)&&(s.criteriaNumberOf=o.criteriaNumberOf)}else if(angular.isDefined(o.selectedCriteriaType.dateInfo.type)&&"exactDate"===o.selectedCriteriaType.dateInfo.type)if(angular.isUndefined(o.selectedCriteriaType.dateInfo.measureType))s.value=o.criteriaRangeStart+"-"+o.criteriaRangeEnd,
s.displayValue=t("date")(angular.copy(o.criteriaRangeStart),"MM/dd/yyyy @ h:mma")+"-"+t("date")(angular.copy(o.criteriaRangeEnd),"MM/dd/yyyy @ h:mma");else{switch(s.measureType=o.selectedCriteriaType.dateInfo.measureType,s.measureCriteria=o.selectedCriteriaType.dateInfo.type,s.criteriaNumberOf="0",angular.isDefined(o.criteriaNumberOf)&&(s.criteriaNumberOf=o.criteriaNumberOf),s.value=s.criteriaNumberOf,s.displayValue=s.criteriaNumberOf,s.measureType){case"d":s.displayValue+=" Day";break;case"m":s.displayValue+=" Month";break;case"y":s.displayValue+=" Year"}s.displayValue+=(s.criteriaNumberOf>1?"s":"")+" Ago"}else{var O=u.removeTimeOffset(o.criteriaRangeStart)+"-"+u.removeTimeOffset(o.criteriaRangeEnd);s.value=O;var T=t("date")(angular.copy(o.criteriaRangeStart),"MM/dd/yyyy @ h:mma")+"-"+t("date")(angular.copy(o.criteriaRangeEnd),"MM/dd/yyyy @ h:mma");s.displayValue=T,angular.isDefined(o.criteriaNumberOf)&&(s.criteriaNumberOf=o.criteriaNumberOf)}break;case"big_decimal":case"integer":case"float":if(s.comparisonOperator=o.selectedCriteriaType.comparisonOperator,angular.isDefined(o.selectedCriteriaType.value))s.value=o.selectedCriteriaType.value;else if(angular.isUndefined(o.selectedCriteriaType.type))s.value=o.criteriaValue;else{var A=o.criteriaRangeStart+"-"+o.criteriaRangeEnd;s.value=A}angular.isDefined(o.aggregate)&&(s.aggregate=o.aggregate),s.displayValue=s.value}switch(o.fieldtype){case"one-to-many":case"many-to-many":case"many-to-one":s.comparisonOperator=o.selectedCriteriaType.comparisonOperator,angular.isDefined(o.selectedCriteriaType.value)&&(s.value=o.selectedCriteriaType.value),s.displayValue=s.value}angular.isUndefined(s.displayValue)&&(s.displayValue=s.value),angular.isDefined(o.ormtype)&&(s.ormtype=o.ormtype),angular.isDefined(o.fieldtype)&&(s.fieldtype=o.fieldtype);for(var _ in s.$$siblingItems)s.$$siblingItems[_].$$disabled=!1;s.conditionDisplay=o.selectedCriteriaType.display,s.$$prepareForFilterGroup===!0&&a.transplantFilterItemIntoFilterGroup(p.swFilterGroups.getFilterGroupItem(),s),r.saveCollection(),e.debug(o),e.debug(s);var E=i(function(){l()});E.then(function(){c.notify("filterItemAction",{action:"add",filterItemIndex:r.filterItemIndex,collectionConfig:d.collectionConfig})}),e.debug("saveFilter end")}}}}}}return e.Factory=function(){var t=function(t,i,n,r,a,o,s,l,c,u,d){return new e(t,i,n,r,a,o,s,l,c,u,d)};return t.$inject=["$log","$filter","$timeout","$hibachi","collectionPartialsPath","collectionService","metadataService","hibachiPathBuilder","rbkeyService","observerService","utilityService"],t},e}();t.SWEditFilterItem=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){return{restrict:"A",require:"^swFilterGroups",scope:{collectionConfig:"=",filterGroupItem:"=",siblingItems:"=",filterPropertiesList:"=",filterGroupItemIndex:"=",saveCollection:"&",comparisonType:"="},link:function(s,l,c,u){var d=o.buildPartialsPath(a)+"filtergroupitem.html",p=e.get(d,{cache:i});p.success(function(e){l.html(e)}).then(function(e){l.replaceWith(t(l.html())(s))});s.filterGroupItem.setItemInUse=u.setItemInUse,s.filterGroupItem.$$index=s.filterGroupItemIndex,s.removeFilterGroupItem=function(){u.removeFilterGroupItem(s.filterGroupItemIndex)},s.filterGroupItem.removeFilterGroupItem=s.removeFilterGroupItem,s.filterGroupItem.$$disabled=!1,angular.isUndefined(s.filterGroupItem.$$isClosed)&&(s.filterGroupItem.$$isClosed=!0),s.filterGroupItem.$$siblingItems=s.siblingItems,s.selectFilterGroupItem=function(e){r.selectFilterGroupItem(e)},s.logicalOperatorChanged=function(e){n.debug("logicalOperatorChanged"),n.debug(e),s.filterGroupItem.logicalOperator=e,u.saveCollection()}}}}return e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$http","$compile","$templateCache","$log","collectionService","collectionPartialsPath","hibachiPathBuilder"],t},e}();t.SWFilterGroupItem=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){return{restrict:"EA",scope:{collectionConfig:"=?",filterGroupItem:"=?",filterPropertiesList:"=?",saveCollection:"&",filterGroup:"=?",comparisonType:"=?",simple:"=",readOnly:"="},templateUrl:i.buildPartialsPath(t)+"filtergroups.html",controller:["$scope","$element","$attrs",function(t,i,n){angular.isDefined(t.comparisonType)||(t.comparisonType="filter"),t.itemInUse=!1,e.debug("collectionConfig"),e.debug(t.collectionConfig),this.getFilterGroup=function(){return t.filterGroup},this.getFilterGroupItem=function(){return t.filterGroupItem},this.setItemInUse=function(e){t.itemInUse=e},this.getItemInUse=function(){return t.itemInUse},this.saveCollection=function(){t.saveCollection()},t.deselectItems=function(e){for(var t in e.$$siblingItems)e.$$siblingItems[t].$$disabled=!1},this.removeFilterItem=function(i){angular.isDefined(i)&&(t.deselectItems(t.filterGroupItem[i]),t.filterGroupItem[i].setItemInUse(!1),e.debug("removeFilterItem"),e.debug(i),t.filterGroupItem.splice(i,1),t.filterGroupItem.length&&delete t.filterGroupItem[0].logicalOperator,e.debug("removeFilterItem"),e.debug(i),t.saveCollection())},this.removeFilterGroupItem=function(i){t.deselectItems(t.filterGroupItem[i]),t.filterGroupItem[i].setItemInUse(!1),t.filterGroupItem.splice(i,1),t.filterGroupItem.length&&delete t.filterGroupItem[0].logicalOperator,e.debug("removeFilterGroupItem"),e.debug(i),t.saveCollection()}}]}}return e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["$log","collectionPartialsPath","hibachiPathBuilder","observerService"],t},e}();t.SWFilterGroups=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){return{restrict:"A",require:"^swFilterGroups",scope:{collectionConfig:"=",filterItem:"=",siblingItems:"=",filterPropertiesList:"=",filterItemIndex:"=",saveCollection:"&",comparisonType:"=",simple:"="},templateUrl:n.buildPartialsPath(i)+"filteritem.html",link:function(i,n,r,a){i.baseEntityAlias=i.collectionConfig.baseEntityAlias,angular.isUndefined(i.filterItem.$$isClosed)&&(i.filterItem.$$isClosed=!0),angular.isUndefined(i.filterItem.$$disabled)&&(i.filterItem.$$disabled=!1),angular.isUndefined(i.filterItem.siblingItems)&&(i.filterItem.$$siblingItems=i.siblingItems),i.filterItem.setItemInUse=a.setItemInUse,i.selectFilterItem=function(e){t.selectFilterItem(e)},i.removeFilterItem=function(){a.removeFilterItem(i.filterItemIndex,a.getFilterGroupItem())},i.filterGroupItem=a.getFilterGroupItem(),i.logicalOperatorChanged=function(t){e.debug("logicalOperatorChanged"),e.debug(t),i.filterItem.logicalOperator=t,a.saveCollection()}}}}return e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["$log","collectionService","collectionPartialsPath","hibachiPathBuilder"],t},e}();t.SWFilterItem=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c,u){e.$id="collectionsController";var d=function(){for(var e={},t=window.location.search.substring(1),i=t.split("&"),n=0;n<i.length;n++){var r=i[n].split("=");if("undefined"==typeof e[r[0]])e[r[0]]=r[1];else if("string"==typeof e[r[0]]){var a=[e[r[0]],r[1]];e[r[0]]=a}else e[r[0]].push(r[1])}return e}();e.collectionID=d.collectionID,e.entityName||(e.entityName="collection"),e.entityID&&(e.collectionID=e.entityID),e.propertyName||(e.propertyName="collectionConfig"),e.paginator=s.createPagination(),e.appendToCollection=function(){if("Auto"===e.paginator.getPageShow()&&(t.debug("AppendToCollection"),e.autoScrollPage<e.collection.totalPages)){e.autoScrollDisabled=!0,e.autoScrollPage++;var i=n.getEntity(e.entityName,{id:e.collectionID,currentPage:e.paginator.autoScrollPage,pageShow:50});i.then(function(t){e.collection.pageRecords=e.collection.pageRecords.concat(t.pageRecords),e.autoScrollDisabled=!1},function(e){})}},e.keywords="",e.loadingCollection=!1;var p;e.searchCollection=function(){p&&i.cancel(p),p=i(function(){t.debug("search with keywords"),t.debug(e.keywords),e.paginator.setCurrentPage(1),e.loadingCollection=!0},500)},e.getCollection=function(t){return e.getCollectionPromise&&i.cancel(e.getCollectionPromise),e.getCollectionPromise=i(function(){var t=n.getEntity("collection",{id:e.collectionID,currentPage:e.paginator.getCurrentPage(),pageShow:e.paginator.getPageShow(),keywords:e.keywords});t.then(function(t){if(e.collection=t,e.paginator.setPageRecordsInfo(e.collection),e.collectionInitial=angular.copy(e.collection),angular.isUndefined(e.collectionConfig)){var i=l.newCollectionConfig();i.loadJson(e.propertyName),e.collectionConfig=i.getCollectionConfig()}angular.isUndefined(e.collectionConfig.filterGroups)&&(e.collectionConfig.filterGroups=[{filterGroup:[]}]),r.setFilterCount(h()),e.loadingCollection=!1},function(e){})},1e3),e.getCollectionPromise},e.paginator.getCollection=e.getCollection,e.getCollection(),u.attach(e.getCollection,"swPaginationAction");var f=e.$watch("collection",function(t,i){if(t!==i){if(angular.isUndefined(e.filterPropertiesList)){e.filterPropertiesList={};var r=n.getFilterPropertiesByBaseEntityName(e.collectionConfig.baseEntityAlias);r.then(function(t){a.setPropertiesList(t,e.collectionConfig.baseEntityAlias),e.filterPropertiesList[e.collectionConfig.baseEntityAlias]=a.getPropertiesListByBaseEntityAlias(e.collectionConfig.baseEntityAlias),a.formatPropertiesList(e.filterPropertiesList[e.collectionConfig.baseEntityAlias],e.collectionConfig.baseEntityAlias)})}f()}});e.setCollectionForm=function(t){e.collectionForm=t},e.collectionDetails={isOpen:!1,openCollectionDetails:function(){e.collectionDetails.isOpen=!0}},e.errorMessage={};var h=function(t){var i=0;angular.isDefined(t)||(t=e.collectionConfig.filterGroups[0].filterGroup);for(var n in t)if(t[n].$$isNew||angular.isDefined(t[n].filterGroup)){if(!angular.isDefined(t[n].filterGroup))break;i+=h(t[n].filterGroup)}else i++;return i};e.saveCollection=function(){e.saveCollectionPromise&&i.cancel(e.saveCollectionPromise),e.saveCollectionPromise=i(function(){var i=e.entityName,a=e.collection;if(g(e.collectionForm)){if(angular.isDefined(e.collectionConfig)&&angular.isDefined(e.collectionConfig.groupBys)&&e.collectionConfig.groupBys.split(",").length!=e.collectionConfig.columns.length){for(var o=e.collectionConfig.groupBys.split(","),s=0;s<e.collectionConfig.columns.length;s++)o.indexOf(e.collectionConfig.columns[s].propertyIdentifier)==-1&&o.push(e.collectionConfig.columns[s].propertyIdentifier);e.collectionConfig.groupBys=o.join(",")}var l=r.stringifyJSON(e.collectionConfig);t.debug(l);var c=angular.copy(a);c.collectionConfig=l,delete c.pageRecords;var u=n.saveEntity(i,a.collectionID,c,"save");u.then(function(t){e.errorMessage={},e.paginator.setCurrentPage(1),e.collectionDetails.isOpen=!1},function(t){angular.forEach(t.errors,function(t,i){e.collectionForm[i].$invalid=!0,e.errorMessage[i]=t[0]})})}r.setFilterCount(h())},1e3)};var g=function(i){t.debug("validateForm");var n=!0;for(var r in i)if("$"!=r[0]){if(i[r].$invalid){n=!1;for(var a in i[r].$error)"required"==a&&(e.errorMessage[r]="This field is required")}i[r].$pristine&&(angular.isUndefined(i[r].$viewValue)?i[r].$setViewValue(""):i[r].$setViewValue(i[r].$viewValue))}return n};e.copyExistingCollection=function(){e.collection.collectionConfig=e.selectedExistingCollection},e.setSelectedExistingCollection=function(t){e.selectedExistingCollection=t},e.setSelectedFilterProperty=function(t){e.selectedFilterProperty=t},e.filterCount=r.getFilterCount,e.exportCollection=function(){var t="/?"+c.action+"=main.collectionExport&collectionExportID="+e.collectionID+"&downloadReport=1",i={ids:o.getSelections("collectionSelection"),keywords:e.keywords},n="downloadCollection";$("body").append('<form action="'+t+'" method="post" target="'+n+'" id="postToIframe"></form>'),$.each(i,function(e,t){$("#postToIframe").append('<input type="hidden" name="'+e+'" value="'+t+'" />')}),$("#postToIframe").submit().remove()}}return e.$inject=["$scope","$log","$timeout","$hibachi","collectionService","metadataService","selectionService","paginationService","collectionConfigService","appConfig","observerService"],e}();t.CollectionController=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){e.deleteEntity=function(i){t.debug("Deleting an entity."),t.debug(e.entity),this.close()},e.fireCallback=function(e){e(),this.close()},e.close=function(){i.close()},e.cancel=function(){i.dismiss("cancel")}}return e.$inject=["$scope","$log","$modalInstance"],e}();t.ConfirmationController=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c,u,d,p){p.scrollTo(0,0),e.params=s.getCurrentDialog().params,e.readOnly=angular.isDefined(e.params.readOnly)&&1==e.params.readOnly,e.myCollection=u.newCollectionConfig(e.params.entityName);var f=n.getConfig();if("Type"==e.params.entityName&&angular.isUndefined(e.params.entityId)&&angular.isDefined(e.params.parentEntity)){e.params.parentEntity=e.params.parentEntity.replace(new RegExp("^"+f.applicationKey,"i"),"");var h=e.params.parentEntity.charAt(0).toLowerCase()+e.params.parentEntity.slice(1)+"Type";e.myCollection.addFilter("parentType.systemCode",h)}e.keywords="",e.paginator=o.createPagination(),e.hideEditView=!0,e.hasSelection=c.getSelectionCount,e.idsSelected=c.getSelections,e.unselectAll=function(){c.clearSelections("collectionSelection"),e.getCollection()},e.newCollection=n.newCollection(),e.newCollection.data.collectionCode=e.params.entityName+"-"+(new Date).valueOf(),e.newCollection.data.collectionObject=e.params.entityName,angular.isDefined(e.params.entityId)&&(e.newCollection.data.collectionID=e.params.entityId,i(function(){e.newCollection.forms["form.createCollection"].$setDirty()})),angular.isDefined(e.params.collectionName)&&(e.newCollection.data.collectionName=e.params.collectionName,i(function(){e.newCollection.forms["form.createCollection"].$setDirty()})),e.saveCollection=function(){e.myCollection.loadJson(e.collectionConfig),e.getCollection()},e.getCollection=function(){e.closeSaving=!0,e.myCollection.setPageShow(e.paginator.getPageShow()),e.myCollection.setCurrentPage(e.paginator.getCurrentPage()),e.myCollection.setKeywords(e.keywords);var i;i=angular.isDefined(e.params.entityId)?{id:e.params.entityId,currentPage:e.paginator.getCurrentPage(),pageShow:e.paginator.getPageShow(),keywords:e.keywords}:e.myCollection.getOptions(),t.debug(e.myCollection.getOptions());var a=n.getEntity(e.myCollection.getEntityName(),i);return a.then(function(t){if(angular.isDefined(e.params.entityId)&&(e.newCollection.data.collectionName=t.collectionName),e.collection=t,e.collection.collectionObject=e.myCollection.baseEntityName,e.collectionInitial=angular.copy(e.collection),e.paginator.setRecordsCount(e.collection.recordsCount),e.paginator.setPageRecordsInfo(e.collection),angular.isUndefined(e.myCollection.columns)){var i=angular.fromJson(t.collectionConfig);i.baseEntityName=i.baseEntityName.replace(new RegExp("^"+f.applicationKey,"i"),""),e.myCollection.loadJson(i)}if(angular.isUndefined(e.collectionConfig)){var n=u.newCollectionConfig();n.loadJson(t.collectionConfig),e.collectionConfig=n.getCollectionConfig()}!angular.isUndefined(e.collectionConfig.filterGroups)&&e.collectionConfig.filterGroups.length||(e.collectionConfig.filterGroups=[{filterGroup:[]}]),r.setFilterCount(m()),e.loadingCollection=!1,e.closeSaving=!1},function(e){}),a},e.paginator.collection=e.newCollection,e.paginator.getCollection=e.getCollection;var g=e.$watch("collection",function(t,i){if(t!==i){if(angular.isUndefined(e.filterPropertiesList)){e.filterPropertiesList={};var r=n.getFilterPropertiesByBaseEntityName(e.collectionConfig.baseEntityAlias);r.then(function(t){a.setPropertiesList(t,e.collectionConfig.baseEntityAlias),e.filterPropertiesList[e.collectionConfig.baseEntityAlias]=a.getPropertiesListByBaseEntityAlias(e.collectionConfig.baseEntityAlias),a.formatPropertiesList(e.filterPropertiesList[e.collectionConfig.baseEntityAlias],e.collectionConfig.baseEntityAlias)})}g()}}),m=function(t){var i=0;angular.isDefined(t)||(t=e.collectionConfig.filterGroups[0].filterGroup);for(var n in t)if(t[n].$$isNew||angular.isDefined(t[n].filterGroup)){if(!angular.isDefined(t[n].filterGroup))break;i+=m(t[n].filterGroup)}else i++;return i};e.getCollection(),e.copyExistingCollection=function(){e.collection.collectionConfig=e.selectedExistingCollection},e.setSelectedExistingCollection=function(t){e.selectedExistingCollection=t},e.setSelectedFilterProperty=function(t){e.selectedFilterProperty=t},e.loadingCollection=!1;var y;e.searchCollection=function(){y&&i.cancel(y),y=i(function(){e.paginator.setCurrentPage(1),e.loadingCollection=!0},500)},e.filterCount=r.getFilterCount,e.hideExport=!0,e.saveNewCollection=function(t){e.closeSaving||(e.closeSaving=!0,!angular.isUndefined(c.getSelections("collectionSelection"))&&c.getSelections("collectionSelection").length>0&&(e.collectionConfig.filterGroups[0].filterGroup=[{displayPropertyIdentifier:d.getRBKey("entity."+e.myCollection.baseEntityName.toLowerCase()+"."+e.myCollection.collection.$$getIDName().toLowerCase()),propertyIdentifier:e.myCollection.baseEntityAlias+"."+e.myCollection.collection.$$getIDName(),comparisonOperator:"in",value:c.getSelections("collectionSelection").join(),displayValue:c.getSelections("collectionSelection").join(),ormtype:"string",fieldtype:"id",conditionDisplay:"In List"}]),e.newCollection.data.collectionConfig=e.collectionConfig,0!==e.newCollection.data.collectionConfig.baseEntityName.lastIndexOf(f.applicationKey,0)&&(e.newCollection.data.collectionConfig.baseEntityName=f.applicationKey+e.newCollection.data.collectionConfig.baseEntityName),e.newCollection.$$save().then(function(){l.notify("addCollection",e.newCollection.data),c.clearSelection("collectionSelection"),s.removePageDialog(t),e.closeSaving=!1},function(){e.closeSaving=!1}))}}return e.$inject=["$scope","$log","$timeout","$hibachi","collectionService","metadataService","paginationService","dialogService","observerService","selectionService","collectionConfigService","rbkeyService","$window"],e}();t.CreateCollection=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.$scope=e,this.collectionConfigService=t,this.$scope.entity_createcollectionCtrl={},this.$scope.entity_createcollectionCtrl.baseCollections=[],this.collection=this.collectionConfigService.newCollectionConfig("Collection"),this.collection.setDisplayProperties("collectionID,collectionName"),this.getBaseCollections("Access"),this.$scope.entity_createcollectionCtrl.collectionObjectChanged=function(){i.getBaseCollections(i.$scope.entity_createcollectionCtrl.selectedOption)}}return e.$inject=["$scope","collectionConfigService"],e.prototype.getBaseCollections=function(e){var t=this;this.collection.clearFilters(),this.collection.addFilter("collectionObject",e),this.collection.setPageShow(50),this.collection.getEntity().then(function(e){t.$scope.entity_createcollectionCtrl.baseCollections=e.pageRecords})},e}();t.CollectionCreateController=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.Factory=function(e){return function(e){return e.filter(function(e){return(!e.fieldtype||"id"===e.fieldtype)&&!(e.ormtype&&["big_decimal","double","float","integer"].indexOf(e.ormtype)<0)})}},e.Factory.$inject=["$filter"],e}();t.AggregateFilter=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c){void 0===i&&(i=!0),void 0===n&&(n=!0),void 0===r&&(r=!0),void 0===a&&(a=!0),this.propertyIdentifier=e,this.title=t,this.isVisible=i,this.isDeletable=n,this.isSearchable=r,this.isExportable=a,this.persistent=o,this.ormtype=s,this.attributeID=l,this.attributeSetObject=c}return e}();t.Column=i;var n=function(){function e(e,t,i,n,r,a,o,s){void 0===o&&(o=!1),this.propertyIdentifier=e,this.value=t,this.comparisonOperator=i,this.logicalOperator=n,this.displayPropertyIdentifier=r,this.displayValue=a,this.hidden=o,this.pattern=s}return e}();t.Filter=n;var r=function(){function e(e,t,i,n,r,a,o){void 0===o&&(o=!1),this.propertyIdentifier=e,this.displayPropertyIdentifier=t,this.displayValue=i,this.collectionID=n,this.criteria=r,this.fieldtype=a,this.readOnly=o}return e}();t.CollectionFilter=r;var a=function(){function e(e,t){this.associationName=e,this.alias=t}return e}();t.Join=a;var o=function(){function e(e,t){this.propertyIdentifier=e,this.direction=t}return e}();t.OrderBy=o;var s=function(){function e(t,o,s,l,c,u,d,p,f,h,g,m,y,v,b,$,w,C,S,P){void 0===p&&(p=[]),void 0===f&&(f=[{filterGroup:[]}]),void 0===h&&(h=[{filterGroup:[]}]),void 0===b&&(b=1),void 0===$&&($=10),void 0===w&&(w=""),void 0===C&&(C=!1),void 0===S&&(S=!1),void 0===P&&(P=!1);var D=this;this.rbkeyService=t,this.$hibachi=o,this.utilityService=s,this.observerService=l,this.baseEntityName=c,this.baseEntityAlias=u,this.columns=d,this.keywordColumns=p,this.filterGroups=f,this.keywordFilterGroups=h,this.joins=g,this.orderBy=m,this.groupBys=y,this.id=v,this.currentPage=b,this.pageShow=$,this.keywords=w,this.allRecords=C,this.dirtyRead=S,this.isDistinct=P,this.clearFilterGroups=function(){return D.filterGroups=[{filterGroup:[]}],D.keywordFilterGroups=[{filterGroup:[]}],D},this.newCollectionConfig=function(t,i){return new e(D.rbkeyService,D.$hibachi,D.utilityService,D.observerService,t,i)},this.loadJson=function(e){for(;angular.isString(e);)e=angular.fromJson(e);return D.baseEntityAlias=e.baseEntityAlias,D.baseEntityName=e.baseEntityName,angular.isDefined(e.filterGroups)&&(D.validateFilter(e.filterGroups),D.filterGroups=e.filterGroups),D.columns=e.columns,D.joins=e.joins,D.keywords=e.keywords,D.orderBy=e.orderBy,D.groupBys=e.groupBys,D.pageShow=e.pageShow,D.allRecords=e.allRecords,e.dirtyRead&&(D.dirtyRead=e.dirtyRead),D.isDistinct=e.isDistinct,D.currentPage=e.currentPage||1,D.pageShow=e.pageShow||10,D.keywords=e.keywords,D},this.clone=function(){return D.newCollectionConfig(D.baseEntityName,D.baseEntityAlias).loadJson(JSON.parse(JSON.stringify(D.getCollectionConfig())))},this.loadFilterGroups=function(e){return void 0===e&&(e=[{filterGroup:[]}]),D.filterGroups=e,D},this.loadColumns=function(e){return D.columns=e,D},this.getCollectionConfig=function(e){return void 0===e&&(e=!0),e&&D.validateFilter(D.filterGroups),{baseEntityAlias:D.baseEntityAlias,baseEntityName:D.baseEntityName,columns:D.columns,keywordColumns:D.keywordColumns,filterGroups:D.filterGroups,joins:D.joins,groupBys:D.groupBys,currentPage:D.currentPage,pageShow:D.pageShow,keywords:D.keywords,defaultColumns:!D.columns||!D.columns.length,allRecords:D.allRecords,dirtyRead:D.dirtyRead,isDistinct:D.isDistinct,orderBy:D.orderBy}},this.getEntityName=function(){return D.baseEntityName.charAt(0).toUpperCase()+D.baseEntityName.slice(1)},this.getOptions=function(){D.validateFilter(D.filterGroups);var e=D.columns;if(D.keywords&&D.keywords.length&&D.keywordFilterGroups[0].filterGroup.length>0)var t=D.keywordFilterGroups;else var t=D.filterGroups;var i={columnsConfig:angular.toJson(e),filterGroupsConfig:angular.toJson(t),joinsConfig:angular.toJson(D.joins),orderByConfig:angular.toJson(D.orderBy),groupBysConfig:angular.toJson(D.groupBys),currentPage:D.currentPage,pageShow:D.pageShow,keywords:D.keywords,defaultColumns:!D.columns||!D.columns.length,allRecords:D.allRecords,dirtyRead:D.dirtyRead,isDistinct:D.isDistinct};return angular.isDefined(D.id)&&(i.id=D.id),i},this.debug=function(){return D},this.formatPropertyIdentifier=function(e,t){void 0===t&&(t=!1),0===e.lastIndexOf(D.baseEntityAlias,0)&&(e=e.slice(D.baseEntityAlias.length+1));var i=D.baseEntityAlias;return i+=t===!0?D.processJoin(e):"."+e},this.processJoin=function(e){for(var t="",i=e.split("."),n=D.collection,r=0;r<i.length;r++)angular.isDefined(n.metaData[i[r]])&&"cfc"in n.metaData[i[r]]?(n=D.$hibachi.getEntityExample(n.metaData[i[r]].cfc),t+="_"+i[r],D.addJoin(new a(t.replace(/_([^_]+)$/,".$1").substring(1),D.baseEntityAlias+t))):t+="."+i[r];return t},this.addJoin=function(e){D.joins||(D.joins=[]);var t=!1;return angular.forEach(D.joins,function(i){i.alias===e.alias&&(t=!0)}),t||D.joins.push(e),D},this.addAlias=function(e){var t=e.split(".");return t.length>1&&t[0]!==D.baseEntityAlias?D.baseEntityAlias+"."+e:e},this.addColumn=function(e,t,n){if(void 0===t&&(t=""),void 0===n&&(n={}),!D.columns||null!=n.aggregate||D.utilityService.ArrayFindByPropertyValue(D.columns,"propertyIdentifier",e)===-1){var r,a=!0,o=!0,s=!0,l=!0,c="string",u=e.split(".").pop(),d=!0,p=!1,f=D.$hibachi.getEntityExample(D.$hibachi.getLastEntityNameInPropertyIdentifier(D.baseEntityName,e));if(angular.isUndefined(f))throw"You have passed an incorrect entity name to a collection config";angular.isUndefined(D.columns)&&(D.columns=[]),angular.isDefined(n.isVisible)&&(a=n.isVisible),angular.isUndefined(n.isVisible)&&"ID"===e.substring(e.length-2)&&(a=!1),angular.isDefined(n.isDeletable)&&(o=n.isDeletable),angular.isDefined(n.isSearchable)&&(s=n.isSearchable),angular.isDefined(n.isExportable)&&(l=n.isExportable),angular.isUndefined(n.isExportable)&&!a&&(l=!1),angular.isDefined(n.ormtype)?c=n.ormtype:f.metaData[u]&&f.metaData[u].ormtype&&(c=f.metaData[u].ormtype),angular.isDefined(n.isKeywordColumn)&&(d=n.isKeywordColumn),angular.isDefined(n.isOnlyKeywordColumn)&&(p=n.isOnlyKeywordColumn),angular.isDefined(f.metaData[u])&&(r=f.metaData[u].persistent);var h=new i(e,t,a,o,s,l,r,c,n.attributeID,n.attributeSetObject);n.aggregate&&(h.aggregate=n.aggregate,h.aggregateAlias=t);for(var g in n)h[g]||(h[g]=n[g]);p||D.columns.push(h),d&&D.keywordColumns.push(h)}return D},this.setDisplayProperties=function(e,t,i){return void 0===t&&(t=""),void 0===i&&(i={}),D.addDisplayProperty(e,t,i),D},this.addDisplayAggregate=function(e,t,i,n){angular.isUndefined(i)&&(i=e.replace(/\./g,"_")+t);var r={propertyIdentifier:D.formatPropertyIdentifier(e,!0),title:D.rbkeyService.getRBKey("entity."+D.$hibachi.getLastEntityNameInPropertyIdentifier(D.baseEntityName,e)+"."+D.utilityService.listLast(e)),aggregate:{aggregateFunction:t,aggregateAlias:i}};return angular.extend(r,n),D.addColumn(r.propertyIdentifier,void 0,r),D},this.addGroupBy=function(e){return D.groupBys||(D.groupBys=""),D.groupBys=D.utilityService.listAppendUnique(D.groupBys,e),D},this.addDisplayProperty=function(e,t,i){void 0===t&&(t=""),void 0===i&&(i={});var n=e.trim().split(","),r=t.trim().split(","),a=e.split(".").length>1;return n.forEach(function(e,n){e=e.trim(),t=angular.isDefined(r[n])&&""!=r[n].trim()?r[n].trim():D.rbkeyService.getRBKey("entity."+D.$hibachi.getLastEntityNameInPropertyIdentifier(D.baseEntityName,e)+"."+D.utilityService.listLast(e,".")),D.addColumn(D.formatPropertyIdentifier(e,a),t,i)}),D},this.addFilter=function(e,t,i,n,r,a,o){void 0===i&&(i="="),void 0===r&&(r=!1),void 0===a&&(a=!0),void 0===o&&(o=!1),D.filterGroups[0].filterGroup.length||(n=void 0),e.split(".").length>1&&D.processJoin(e);var s=D.createFilter(e,t,i,n,r);return o||D.filterGroups[0].filterGroup.push(s),a&&D.keywordFilterGroups[0].filterGroup.push(s),D.observerService.notify("collectionConfigUpdated",{collectionConfig:D}),D},this.addLikeFilter=function(e,t,i,r,a,o){void 0===i&&(i="%w%"),void 0===o&&(o=!1),D.filterGroups||(D.filterGroups=[{filterGroup:[]}]),D.filterGroups[0].filterGroup.length&&!r&&(r="AND");var s=e.split(".").length>1;angular.isUndefined(a)&&(a=D.rbkeyService.getRBKey("entity."+D.$hibachi.getLastEntityNameInPropertyIdentifier(D.baseEntityName,e)+"."+D.utilityService.listLast(e)));var l=new n(D.formatPropertyIdentifier(e,s),t,"like",r,a,t,o,i);return D.filterGroups[0].filterGroup.push(l),D.observerService.notify("collectionConfigUpdated",{collectionConfig:D}),D},this.createFilter=function(e,t,i,r,a){void 0===i&&(i="="),void 0===a&&(a=!1),D.filterGroups||(D.filterGroups=[{filterGroup:[]}]),D.filterGroups[0].filterGroup.length&&!r&&(r="AND");var o=e.split(".").length>1,s=new n(D.formatPropertyIdentifier(e,o),t,i,r,e.split(".").pop(),t,a);return s},this.addFilterGroup=function(e){for(var t={filterGroup:[],logicalOperator:"AND"},i=0;i<e.length;i++){var n=D.createFilter(e[i].propertyIdentifier,e[i].comparisonValue,e[i].comparisonOperator,e[i].logicalOperator,e[i].hidden);t.filterGroup.push(n)}return D.filterGroups[0].filterGroup.push(t),D.observerService.notify("collectionConfigUpdated",{collectionConfig:D}),D},this.removeFilter=function(e,t,i){return void 0===i&&(i="="),D.removeFilterHelper(D.filterGroups,e,t,i),D.observerService.notify("collectionConfigUpdated",{collectionConfig:D}),D},this.removeFilterByDisplayPropertyIdentifier=function(e){D.removeFromFilterGroupsByPropertyIdentifier(D.filterGroups,e),D.removeFromFilterGroupsByPropertyIdentifier(D.keywordFilterGroups,e)},this.removeFromFilterGroupsByPropertyIdentifier=function(e,t){for(var i=0;i<e.length;i++)for(var n=e[i].filterGroup,r=0;r<n.length;r++){var a=n[r];a.displayPropertyIdentifier==t&&(n.splice(r,1),r--)}},this.removeFilterHelper=function(e,t,i,n,r){angular.isUndefined(r)&&(r=e),angular.isArray(e)?angular.forEach(e,function(r){D.removeFilterHelper(r,t,i,n,e)}):angular.isArray(e.filterGroup)?D.removeFilterHelper(e.filterGroup,t,i,n,e.filterGroup):e.propertyIdentifier==t&&e.value==i&&e.comparisonOperator==n&&r.splice(r.indexOf(e),1)},this.addCollectionFilter=function(e,t,i,n,a,o,s){return void 0===a&&(a="One"),void 0===s&&(s=!1),D.filterGroups[0].filterGroup.push(new r(D.formatPropertyIdentifier(e),t,i,n,a,o,s)),D.observerService.notify("collectionConfigUpdated",{collectionConfig:D}),D},this.setOrderBy=function(e){var t=e.split(",");return angular.forEach(t,function(e){D.addOrderBy(e)}),D},this.clearOrderBy=function(){D.orderBy=[]},this.addOrderBy=function(e,t){void 0===t&&(t=!0),D.orderBy||(D.orderBy=[]);var i=D.utilityService.listFirst(e,"|");t&&(i=D.formatPropertyIdentifier(i));var n=D.utilityService.listLast(e,"|"),r={propertyIdentifier:i,direction:n};D.orderBy.push(r)},this.toggleOrderBy=function(e,t){void 0===t&&(t=!1),D.orderBy||(D.orderBy=[]);for(var i=!1,n=D.orderBy.length-1;n>=0;n--)if(D.orderBy[n].propertyIdentifier==e){i=!0,"DESC"==D.orderBy[n].direction.toUpperCase()?D.orderBy[n].direction="ASC":"ASC"==D.orderBy[n].direction.toUpperCase()&&D.orderBy.splice(n,1);break}if(!i){if(t){D.orderBy=[];for(var n=0;n<D.columns.length;n++)D.columns[n].sorting&&D.columns[n].sorting.active&&(D.columns[n].sorting.active=!1,D.columns[n].sorting.sortOrder="asc")}D.addOrderBy(e+"|DESC",!1)}},this.removeOrderBy=function(e){return angular.forEach(D.orderBy,function(t,i){if(t.propertyIdentifier==e)return D.orderBy.splice(i,1),!0}),!1},this.setCurrentPage=function(e){return D.currentPage=e,D},this.getCurrentPage=function(){return D.currentPage},this.setPageShow=function(e){return D.pageShow=e,D},this.getPageShow=function(){return D.pageShow},this.setAllRecords=function(e){return void 0===e&&(e=!1),D.allRecords=e,D},this.setDistinct=function(e){return void 0===e&&(e=!0),D.isDistinct=e,D},this.setDirtyRead=function(e){return void 0===e&&(e=!1),D.dirtyRead=e,D},this.setKeywords=function(e){return D.keywords=e,D},this.setId=function(e){return D.id=e,D},this.hasFilters=function(){return D.filterGroups.length&&D.filterGroups[0].filterGroup.length},this.hasColumns=function(){return null!=D.columns&&D.columns.length>0},this.clearFilters=function(){return D.filterGroups=[{filterGroup:[]}],D},this.getEntity=function(e){return angular.isDefined(e)&&D.setId(e),D.$hibachi.getEntity(D.baseEntityName,D.getOptions())},this.validateFilter=function(e,t){if(angular.isUndefined(t)&&(t=e),angular.isArray(e))angular.forEach(e,function(t){D.validateFilter(t,e)});else if(angular.isArray(e.filterGroup))D.validateFilter(e.filterGroup,e.filterGroup);else if(!(e.comparisonOperator&&e.comparisonOperator.length||e.propertyIdentifier&&e.propertyIdentifier.length)){var i=t.indexOf(e);i>-1&&(D.observerService.notify("filterItemAction",{
action:"remove",filterItemIndex:i}),t.splice(i,1))}},this.getColumns=function(){return D.columns||(D.columns=[]),D.columns},this.setColumns=function(e){return D.columns=e,D},this.$hibachi=o,this.rbkeyService=t,angular.isDefined(this.baseEntityName)&&(this.collection=this.$hibachi.getEntityExample(this.baseEntityName),angular.isUndefined(this.baseEntityAlias)&&(this.baseEntityAlias="_"+this.baseEntityName.toLowerCase()))}return e.$inject=["rbkeyService","$hibachi","utilityService","observerService","baseEntityName","baseEntityAlias","columns","keywordColumns","filterGroups","keywordFilterGroups","joins","orderBy","groupBys","id","currentPage","pageShow","keywords","allRecords","dirtyRead","isDistinct"],Object.defineProperty(e.prototype,"collectionConfigString",{get:function(){return angular.toJson(this.getCollectionConfig(!1))},enumerable:!0,configurable:!0}),e}();t.CollectionConfig=s},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(2),a=function(e){function t(t,i,n,r,a){var o=e.call(this,t,i,n,"Collection")||this;return o.$injector=t,o.$hibachi=i,o.utilityService=n,o.$filter=r,o.$log=a,o.get=function(){return o._pageDialogs||[]},o.setFilterCount=function(e){o.$log.debug("incrementFilterCount"),o._filterCount=e},o.getFilterCount=function(){return o._filterCount},o.getColumns=function(){return o._collection.collectionConfig.columns},o.getFilterPropertiesList=function(){return o._filterPropertiesList},o.getFilterPropertiesListByBaseEntityAlias=function(e){return o._filterPropertiesList[e]},o.setFilterPropertiesList=function(e,t){angular.isUndefined(o._filterPropertiesList[t])&&(o._filterPropertiesList[t]=e)},o.stringifyJSON=function(e){var t=angular.toJson(e);return t},o.removeFilterItem=function(e,t){t.pop(t.indexOf(e))},o.selectFilterItem=function(e){if(e.$$isClosed){for(var t in e.$$siblingItems)e.$$siblingItems[t].$$isClosed=!0,e.$$siblingItems[t].$$disabled=!0;e.$$isClosed=!1,e.$$disabled=!1,e.setItemInUse(!0)}else{for(var t in e.$$siblingItems)e.$$siblingItems[t].$$disabled=!1;e.$$isClosed=!0,e.setItemInUse(!1)}},o.selectFilterGroupItem=function(e){if(e.$$isClosed){for(var t in e.$$siblingItems)e.$$siblingItems[t].$$disabled=!0;e.$$isClosed=!1,e.$$disabled=!1}else{for(var t in e.$$siblingItems)e.$$siblingItems[t].$$disabled=!1;e.$$isClosed=!0}e.setItemInUse(!e.$$isClosed)},o.newFilterItem=function(e,t,i){angular.isUndefined(i)&&(i=!1);var n={displayPropertyIdentifier:"",propertyIdentifier:"",comparisonOperator:"",value:"",$$disabled:!1,$$isClosed:!0,$$isNew:!0,$$siblingItems:e,setItemInUse:t};return 0!==e.length&&(n.logicalOperator="AND"),i===!0&&(n.$$prepareForFilterGroup=!0),e.push(n),o.selectFilterItem(n),e.length-1},o.newFilterGroupItem=function(e,t){var i={filterGroup:[],$$disabled:"false",$$isClosed:"true",$$siblingItems:e,$$isNew:"true",setItemInUse:t};0!==e.length&&(i.logicalOperator="AND"),e.push(i),o.selectFilterGroupItem(i),o.newFilterItem(i.filterGroup,t,void 0)},o.transplantFilterItemIntoFilterGroup=function(e,t){var i={filterGroup:[],$$disabled:"false",$$isClosed:"true",$$isNew:"true"};angular.isDefined(t.logicalOperator)&&(i.logicalOperator=t.logicalOperator,delete t.logicalOperator),i.setItemInUse=t.setItemInUse,i.$$siblingItems=t.$$siblingItems,t.$$siblingItems=[],e.pop(e.indexOf(t)),t.$$prepareForFilterGroup=!1,i.filterGroup.push(t),e.push(i)},o.formatFilterPropertiesList=function(e,t){o.$log.debug("format Filter Properties List arguments 2"),o.$log.debug(e),o.$log.debug(t);var i={$$group:"simple",displayPropertyIdentifier:"-----------------"};e.data.push(i);var n={$$group:"drilldown",displayPropertyIdentifier:"-----------------"};e.data.push(n);var r={$$group:"compareCollections",displayPropertyIdentifier:"-----------------"};e.data.push(r);var a={$$group:"attribute",displayPropertyIdentifier:"-----------------"};e.data.push(a);for(var s in e.data)angular.isDefined(e.data[s].ormtype)&&(angular.isDefined(e.data[s].attributeID)?e.data[s].$$group="attribute":e.data[s].$$group="simple"),angular.isDefined(e.data[s].fieldtype)&&("id"===e.data[s].fieldtype&&(e.data[s].$$group="simple"),"many-to-one"===e.data[s].fieldtype&&(e.data[s].$$group="drilldown"),"many-to-many"!==e.data[s].fieldtype&&"one-to-many"!==e.data[s].fieldtype||(e.data[s].$$group="compareCollections")),e.data[s].propertyIdentifier=t+"."+e.data[s].name;e.data=o._orderBy(e.data,["-$$group","propertyIdentifier"],!1)},o.orderBy=function(e,t,i){return o._orderBy(e,t,i)},o.$filter=r,o.$log=a,o._collection=null,o._collectionConfig=null,o._filterPropertiesList={},o._filterCount=0,o._orderBy=r("orderBy"),o}return n(t,e),t.$inject=["$injector","$hibachi","utilityService","$filter","$log"],t}(r.BaseEntityService);t.CollectionService=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c,u){var d=this;this.$scope=e,this.$element=t,this.$templateRequest=i,this.$compile=n,this.$timeout=r,this.corePartialsPath=a,this.utilityService=o,this.observerService=s,this.$hibachi=l,this.rbkeyService=c,this.$onInit=function(){if(angular.isUndefined(d.isAngularRoute)&&(d.isAngularRoute=d.utilityService.isAngularRoute()),d.isAngularRoute?d.actionUrl="#!/entity/"+d.action+"/"+d.queryString.split("=")[1]:d.actionUrl=d.$hibachi.buildUrl(d.action,d.queryString),d.type=d.type||"link",angular.isDefined(d.titleRbKey)&&(d.title=d.rbkeyService.getRBKey(d.titleRbKey)),angular.isUndefined(d.text)&&(d.text=d.title),"button"==d.type)var e=d.$scope.$watch(function(){return d.formController},function(t,i){void 0!==t&&(d.formController=t),e()});if(d.eventListeners)for(var t in d.eventListeners)d.observerService.attach(d.eventListeners[t],t)},this.submit=function(){d.$timeout(function(){d.form?d.form.$valid&&d.formController.submit(d.action):d.$scope.$root.slatwall.doAction(d.action)})},this.getAction=function(){return d.action||""},this.getActionItem=function(){return d.utilityService.listLast(d.getAction(),".")},this.getActionItemEntityName=function(){var e=d.utilityService.left(d.actionItem,4),t=d.utilityService.left(d.actionItem,6),i=d.utilityService.right(d.actionItem,4),n=d.utilityService.right(d.actionItem,6),r="";return"list"===e&&d.actionItem.length>4?r=i:"edit"===e&&d.actionItem.length>4?r=i:"save"===e&&d.actionItem.length>4?r=i:"create"===t&&d.actionItem.length>6?r=n:"detail"===t&&d.actionItem.length>6?r=n:"delete"===t&&d.actionItem.length>6&&(r=n),r},this.getTitle=function(){return!angular.isUndefined(d.title)&&d.title.length||(d.title=d.getText()),d.title},this.getTextByRBKeyByAction=function(e,t){void 0===t&&(t=!1);var i=d.rbkeyService.getRBKey("admin.define."+e+"_nav"),n="",r="";return t?(n=d.rbkeyService.getRBKey("entity."+d.actionItemEntityName+"_plural"),r="${itemEntityNamePlural}"):(n=d.rbkeyService.getRBKey("entity."+d.actionItemEntityName),r="${itemEntityName}"),d.utilityService.replaceAll(i,r,n)},this.getText=function(){if(angular.isUndefined(d.text)||angular.isDefined(d.text)&&!d.text.length){d.text=d.rbkeyService.getRBKey(d.utilityService.replaceAll(d.getAction(),":",".")+"_nav");var e=d.utilityService.right(d.text,8);if("_missing"===e){var t=d.utilityService.left(d.actionItem,4),i=d.utilityService.left(d.actionItem,6);d.utilityService.right(d.actionItem,4),d.utilityService.right(d.actionItem,6);"list"===t&&d.actionItem.length>4?d.text=d.getTextByRBKeyByAction("list",!0):"edit"===t&&d.actionItem.length>4?d.text=d.getTextByRBKeyByAction("edit",!1):"save"===t&&d.actionItem.length>4?d.text=d.getTextByRBKeyByAction("save",!1):"create"===i&&d.actionItem.length>6?d.text=d.getTextByRBKeyByAction("create",!1):"detail"===i&&d.actionItem.length>6?d.text=d.getTextByRBKeyByAction("detail",!1):"delete"===i&&d.actionItem.length>6&&(d.text=d.getTextByRBKeyByAction("delete",!1))}d.utilityService.right(d.text,8)&&(d.text=d.rbkeyService.getRBKey(d.utilityService.replaceAll(d.getAction(),":",".")))}return(!d.title||d.title&&!d.title.length)&&(d.title=d.text),d.text},this.getDisabled=function(){return!(!angular.isDefined(d.disabled)||!d.disabled)},this.getDisabledText=function(){if(d.getDisabled()){if(angular.isUndefined(d.disabledtext)||!d.disabledtext.length){var e=d.utilityService.replaceAll(d.action,":",".")+"_disabled";d.disabledtext=d.rbkeyService.getRBKey(e)}return d.class+=" btn-disabled",d.confirm=!1,d.disabledtext}return""},this.getConfirm=function(){return!(!angular.isDefined(d.confirm)||!d.confirm)},this.getConfirmText=function(){if(d.getConfirm()){if(angular.isUndefined(d.confirmtext)&&d.confirmtext.length){var e=d.utilityService.replaceAll(d.action,":",".")+"_confirm";d.confirmtext=d.rbkeyService.getRBKey(e)}return d.class+=" alert-confirm",d.confirm}return""},this.$scope=e,this.$element=t,this.$timeout=r,this.$templateRequest=i,this.$compile=n,this.rbkeyService=c,this.$hibachi=l,this.utilityService=o,this.hibachiPathBuilder=u,this.$templateRequest(this.hibachiPathBuilder.buildPartialsPath(a)+"actioncaller.html").then(function(t){var i=angular.element(t);d.$element.parent().append(i),n(i)(e)})}return e.$inject=["$scope","$element","$templateRequest","$compile","$timeout","corePartialsPath","utilityService","observerService","$hibachi","rbkeyService","hibachiPathBuilder"],e}();t.SWActionCallerController=i;var n=function(){function e(e,t,n){this.partialsPath=e,this.utiltiyService=t,this.$hibachi=n,this.restrict="EA",this.scope={},this.bindToController={action:"@",text:"@",type:"@",queryString:"@",title:"@?",titleRbKey:"@?",class:"@",icon:"@",iconOnly:"=",name:"@",confirm:"=",confirmtext:"@",disabled:"=",disabledtext:"@",modal:"=",modalFullWidth:"=",id:"@",isAngularRoute:"=?",eventListeners:"=?"},this.require={formController:"^?swForm",form:"^?form"},this.controller=i,this.controllerAs="swActionCaller",this.link=function(e,t,i){angular.isDefined(e.swActionCaller.formController)&&(e.formController=e.swActionCaller.formController)}}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["partialsPath","utilityService","$hibachi"],t},e}();t.SWActionCaller=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.title=this.title||"",this.icon=this.icon||"plus",this.type=this.type||"button",this.dropdownClass=this.dropdownClass||"",this.dropdownId=this.dropdownId||"",this.buttonClass=this.buttonClass||"btn-primary"}return e}();t.SWActionCallerDropdownController=i;var n=function(){function e(e,t){this.corePartialsPath=e,this.restrict="E",this.scope={},this.transclude=!0,this.bindToController={title:"@",icon:"@",type:"=",dropdownClass:"@",dropdownId:"@",buttonClass:"@"},this.controller=i,this.controllerAs="swActionCallerDropdown",this.link=function(e,t,i){},this.templateUrl=t.buildPartialsPath(e)+"actioncallerdropdown.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["corePartialsPath","hibachiPathBuilder"],t},e}();t.SWActionCallerDropdown=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){var n=this;this.$document=e,this.$timeout=t,this.utilityService=i,this.restrict="A",this.scope={swClickOutside:"&"},this.link=function(e,t,i){n.$document.on("click",function(i){i&&i.target&&(angular.element(t).hasClass("ng-hide")||i.target!==t&&t&&t[0]&&!n.utilityService.isDescendantElement(t[0],i.target)&&n.$timeout(function(){e.swClickOutside()}))})},this.$document=e,this.$timeout=t,this.utilityService=i}return e.$inject=["$document","$timeout","utilityService"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$document","$timeout","utilityService"],t},e}();t.SWClickOutside=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e}();t.SWCollectionColumnController=i;var n=function(){function e(t,i){var n=this;this.scopeService=t,this.utilityService=i,this.restrict="EA",this.scope=!0,this.bindToController={propertyIdentifier:"@",fallbackPropertyIdentifiers:"@?",isVisible:"=?",isSearchable:"=?",isDeletable:"=?",isExportable:"=?",isKeywordColumn:"=?",isOnlyKeywordColumn:"=?",tdclass:"@?",hidden:"=?"},this.controller=e,this.controllerAs="swCollectionColumn",this.template="",this.link=function(e,t,i){angular.isUndefined(e.swCollectionColumn.isKeywordColumn)&&(e.swCollectionColumn.isKeywordColumn=!1),angular.isUndefined(e.swCollectionColumn.isOnlyKeywordColumn)&&(e.swCollectionColumn.isOnlyKeywordColumn=e.swCollectionColumn.isKeywordColumn),angular.isUndefined(e.swCollectionColumn.isVisible)&&(e.swCollectionColumn.isVisible=!0),angular.isUndefined(e.swCollectionColumn.isSearchable)&&(e.swCollectionColumn.isSearchable=!1),angular.isUndefined(e.swCollectionColumn.isDeletable)&&(e.swCollectionColumn.isDeletable=!1),angular.isUndefined(e.swCollectionColumn.isExportable)&&(e.swCollectionColumn.isExportable=!0);var r={propertyIdentifier:e.swCollectionColumn.propertyIdentifier,fallbackPropertyIdentifiers:e.swCollectionColumn.fallbackPropertyIdentifiers,isVisible:e.swCollectionColumn.isVisible,isSearchable:e.swCollectionColumn.isSearchable,isDeletable:e.swCollectionColumn.isDeletable,isExportable:e.swCollectionColumn.isExportable,hidden:e.swCollectionColumn.hidden,tdclass:e.swCollectionColumn.tdclass,isKeywordColumn:e.swCollectionColumn.isKeywordColumn,isOnlyKeywordColumn:e.swCollectionColumn.isOnlyKeywordColumn},a=n.scopeService.getRootParentScope(e,"swCollectionConfig");if(!angular.isDefined(a.swCollectionConfig))throw"Could not find swCollectionConfig in the parent scope from swcollectioncolumn";a.swCollectionConfig.columns.push(r),a.swCollectionConfig.columnsDeferred.resolve()}}return e.$inject=["scopeService","utilityService"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["scopeService","utilityService"],t},e}();t.SWCollectionColumn=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){this.$transclude=e,this.$q=t,this.collectionConfigService=i,this.filters=[],this.columns=[],this.orderBys=[],this.keywordColumns=[],this.columnsDeferred=this.$q.defer(),this.columnsPromise=this.columnsDeferred.promise,this.filtersDeferred=this.$q.defer(),this.filtersPromise=this.filtersDeferred.promise,this.orderBysDeferred=this.$q.defer(),this.orderBysPromise=this.columnsDeferred.promise}return e.$inject=["$transclude","$q","collectionConfigService"],e}();t.SWCollectionConfigController=i;var n=function(){function e(e,t,n,r){var a=this;this.collectionConfigService=e,this.listingService=t,this.scopeService=n,this.$q=r,this.restrict="EA",this.scope=!0,this.transclude={columns:"?swCollectionColumns",filters:"?swCollectionFilters",orderBys:"?swCollectionOrderBys"},this.bindToController={allRecords:"=?",collectionConfigProperty:"@?",distinct:"=?",entityName:"@",filterFlag:"=?",inListingDisplay:"=?",multiCollectionConfigProperty:"@?",pageShow:"@?",parentDirectiveControllerAsName:"@?",parentDeferredProperty:"@?"},this.controller=i,this.controllerAs="swCollectionConfig",this.template=' \n        <div ng-transclude="columns"></div>\n        <div ng-transclude="filters"></div>\n        <div ng-transclude="orderBys"></div>\n    ',this.link=function(e,t,i){if(angular.isUndefined(e.swCollectionConfig.inListingDisplay)&&(e.swCollectionConfig.inListingDisplay=!1),e.swCollectionConfig.inListingDisplay&&(e.swCollectionConfig.parentDirectiveControllerAsName="swListingDisplay",e.swCollectionConfig.parentDeferredProperty="singleCollectionDeferred"),angular.isUndefined(e.swCollectionConfig.entityName))throw"You must provide an entityname to swCollectionConfig";if(angular.isUndefined(e.swCollectionConfig.parentDirectiveControllerAsName)&&!e.swCollectionConfig.inListingDisplay)throw"You must provide the parent directives Controller-As Name to swCollectionConfig";angular.isUndefined(e.swCollectionConfig.collectionConfigProperty)&&(e.swCollectionConfig.collectionConfigProperty="collectionConfig"),angular.isUndefined(e.swCollectionConfig.allRecords)&&(e.swCollectionConfig.allRecords=!1),angular.isUndefined(e.swCollectionConfig.pageShow)&&(e.swCollectionConfig.pageShow=10),angular.isUndefined(e.swCollectionConfig.distinct)&&(e.swCollectionConfig.distinct=!1),angular.isUndefined(e.swCollectionConfig.filterFlag)&&(e.swCollectionConfig.filterFlag=!0);for(var n=[],r=e;angular.isDefined(r)&&(angular.isDefined(r.swCollectionConfig)&&(n.push(r.swCollectionConfig.columnsPromise),e.swCollectionConfig.filterFlag&&n.push(r.swCollectionConfig.filtersPromise)),r=r.$$nextSibling,null!=r););var o=a.collectionConfigService.newCollectionConfig(e.swCollectionConfig.entityName);o.setAllRecords(e.swCollectionConfig.allRecords),o.setDistinct(e.swCollectionConfig.distinct),o.setPageShow(e.swCollectionConfig.pageShow);var r=a.scopeService.getRootParentScope(e,e.swCollectionConfig.parentDirectiveControllerAsName);if(!r[e.swCollectionConfig.parentDirectiveControllerAsName])throw"swCollectionConfig was unable to find a parent scope";var s=r[e.swCollectionConfig.parentDirectiveControllerAsName];e.swCollectionConfig.columnsPromise.then(function(){angular.forEach(e.swCollectionConfig.columns,function(e){o.addDisplayProperty(e.propertyIdentifier,"",e)})}),e.swCollectionConfig.filtersPromise.then(function(){angular.forEach(e.swCollectionConfig.filters,function(e){o.addFilter(e.propertyIdentifier,e.comparisonValue,e.comparisonOperator,e.logicalOperator,e.hidden)})}),e.swCollectionConfig.orderBysPromise.then(function(){angular.forEach(e.swCollectionConfig.orderBys,function(e){o.addOrderBy(e)})}),a.$q.all(n).then(function(){if(angular.isDefined(s)){if(angular.isDefined(e.swCollectionConfig.multiCollectionConfigProperty)&&angular.isDefined(s[e.swCollectionConfig.multiCollectionConfigProperty]))s[e.swCollectionConfig.multiCollectionConfigProperty].push(o);else{if(!angular.isDefined(s[e.swCollectionConfig.collectionConfigProperty]))throw"swCollectionConfig could not locate a collection config property to bind it's collection to";s[e.swCollectionConfig.collectionConfigProperty]=o}angular.isDefined(s[e.swCollectionConfig.parentDeferredProperty])&&s[e.swCollectionConfig.parentDeferredProperty].resolve()}},function(e){throw"SWCollectionConfig is having some issues."})}}return e.$inject=["collectionConfigService","listingService","scopeService","$q"],e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["collectionConfigService","listingService","scopeService","$q"],t},e}();t.SWCollectionConfig=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e}();t.SWCollectionFilterController=i;var n=function(){function e(e,t){var n=this;this.scopeService=e,this.utilityService=t,this.restrict="EA",this.scope=!0,this.bindToController={propertyIdentifier:"@",comparisonOperator:"@?",comparisonValue:"@?",logicalOperator:"@?",hidden:"@?"},this.controller=i,this.controllerAs="SWCollectionFilter",this.template="",this.link=function(e,t,i){var r={propertyIdentifier:e.SWCollectionFilter.propertyIdentifier,comparisonOperator:e.SWCollectionFilter.comparisonOperator,comparisonValue:e.SWCollectionFilter.comparisonValue,logicalOperator:e.SWCollectionFilter.logicalOperator,hidden:e.SWCollectionFilter.hidden},a=n.scopeService.getRootParentScope(e,"swCollectionConfig");if(!angular.isDefined(a.swCollectionConfig))throw"could not find swCollectionConfig in the parent scope from swcollectionfilter";a.swCollectionConfig.filters.push(r),a.swCollectionConfig.filtersDeferred.resolve()}}return e.$inject=["scopeService","utilityService"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["scopeService","utilityService"],t},e}();t.SWCollectionFilter=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e}();t.SWCollectionOrderByController=i;var n=function(){function e(e){var t=this;this.scopeService=e,this.restrict="EA",this.scope=!0,this.bindToController={orderBy:"@"},this.controller=i,this.controllerAs="SWCollectionOrderBy",this.template="",this.link=function(e,i,n){var r=e.SWCollectionOrderBy.orderBy,a=t.scopeService.getRootParentScope(e,"swCollectionConfig");if(!angular.isDefined(a.swCollectionConfig))throw"could not find swCollectionConfig in the parent scope from swcollectionorderby";a.swCollectionConfig.orderBys.push(r),a.swCollectionConfig.orderBysDeferred.resolve()}}return e.$inject=["scopeService"],e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["scopeService"],t},e}();t.SWCollectionOrderBy=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){return{restrict:"AE",scope:{column:"="},templateUrl:i.buildPartialsPath(t)+"columnsorter.html",link:function(t,i,n){var r={propertyIdentifier:t.column.propertyIdentifier};t.sortAsc=function(){r.direction="Asc",this.observerService.notify("sortByColumn",r)},t.sortDesc=function(){r.direction="Desc",e.notify("sortByColumn",r)}}}}return e.$inject=["observerService","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["observerService","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWColumnSorter=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=function(t,i,n,r,a,o){var s="[confirm]",l="[message]",c="[no]",u="[yes]",d="sw-rbkey=",p="<confirm>",f="<message>",h="<no>",g="<yes>",m="\"'",y="'\"",v="",b="",$="",w="<div><div class='modal-header'><a class='close' data-dismiss='modal' ng-click='cancel()'>×</a><h3 [confirm]><confirm></h3></div><div class='modal-body' [message]><message></div><div class='modal-footer'><button class='btn btn-sm btn-default btn-inverse' ng-click='cancel()' [no]><no></button><button class='btn btn-sm btn-default btn-primary' ng-click='fireCallback(callback)' [yes]><yes></button></div></div></div>";return"true"===i?(e.debug("Using RbKey? "+i),n=d+m+n+y,r=d+m+r+y,o=d+m+o+y,a=d+m+a+y,b=w.replace(s,n).replace(r,r).replace(c,a).replace(u,o),e.debug($),$=b.replace(s,v).replace(f,v).replace(h,v).replace(g,v),e.debug($),$):(e.debug("Using RbKey? "+i),b=w.replace(p,n).replace(f,r).replace(h,a).replace(g,o),$=b.replace(s,v).replace(l,v).replace(c,v).replace(u,v),e.debug($),$)};return{restrict:"EA",scope:{callback:"&",entity:"="},link:function(n,r,a){e.debug("Modal is: "),e.debug(t),r.bind("click",function(){var r=a.useRbKey||"false",o=a.simple||!1,s=a.yesText||"define.yes",l=a.noText||"define.no",c=a.confirmText||"define.delete",u=a.messageText||"define.delete_message",d=i(o,r,c,u,l,s),p=t.open({template:d,controller:"confirmationController",scope:n});p.result.then(function(t){return e.debug("Result:"+t),!0},function(){})})}}}return e.$inject=["$log","$modal"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["$log","$modal"],t},e}();t.SWConfirm=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return{restrict:"AE",scope:{variables:"=",directiveTemplate:"="},controllerAs:"swDirective",link:function(i,n,r){var a={};angular.forEach(i.variables,function(e,i){"$"!=i.toString().charAt(0)&&" "!==e&&(a[t.keyToAttributeString(i)]=e)}),i.variables=a;var o="<"+i.directiveTemplate+" ";angular.isDefined(i.variables)&&angular.forEach(i.variables,function(e,t){o+=angular.isString(e)||angular.isNumber(e)?" "+t+'="'+e+'" ':" "+t+'="swDirective.variables.'+t+'" '}),o+=">",o+="</"+i.directiveTemplate+">",n.html(e(o)(i))}}}return e.$inject=["$compile","utilityService"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["$compile","utilityService"],t},e}();t.SWDirective=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){angular.isUndefined(this.draggable)&&(this.draggable=!1)}return e}(),n=function(){function e(e,t,n,r){var a=this;this.corePartialsPath=e,this.utilityService=t,this.draggableService=n,this.hibachiPathBuilder=r,this.restrict="EA",this.scope={},this.bindToController={draggable:"=",draggableRecord:"=",draggableKey:"="},this.controller=i,this.controllerAs="swDraggable",this.link=function(e,t,i){angular.element(t).attr("draggable","true");var n=angular.element(t).attr("id");n||(n=a.utilityService.createID(32)),t.bind("dragstart",function(i){return i=i.originalEvent||i,i.stopPropagation(),!!e.swDraggable.draggable&&(t.addClass("s-dragging"),e.swDraggable.draggableRecord.draggableStartKey=e.swDraggable.draggableKey,i.dataTransfer.setData("application/json",angular.toJson(e.swDraggable.draggableRecord)),i.dataTransfer.effectAllowed="move",void i.dataTransfer.setDragImage(t[0],0,0))}),t.bind("dragend",function(e){e=e.originalEvent||e,e.stopPropagation(),t.removeClass("s-dragging")})}}return e.$inject=["corePartialsPath","utilityService","draggableService","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["corePartialsPath","utilityService","draggableService","hibachiPathBuilder"],t},e}();t.SWDraggable=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.draggableService=e,angular.isUndefined(this.draggable)&&(this.draggable=!1)}return e.$inject=["draggableService"],e}(),n=function(){function e(e,t,n,r,a,o,s){var l=this;this.$timeout=e,this.corePartialsPath=t,this.utilityService=n,this.listingService=r,this.observerService=a,this.draggableService=o,this.hibachiPathBuilder=s,this.restrict="EA",this.scope={},this.bindToController={draggable:"=?",draggableRecords:"=?",dropEventName:"@?",listingId:"@?"},this.controller=i,this.controllerAs="swDraggableContainer",this.link=function(e,t,i){angular.element(t).attr("draggable","true");var n=angular.element("<tr class='s-placeholder'><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td></td></tr>"),r=angular.element(t).attr("id");r||(r=l.utilityService.createID(32));var a=t[0],o=n[0];n.remove(),t.on("drop",function(t){if(t=t.originalEvent||t,t.preventDefault(),!l.draggableService.isDropAllowed(t))return!0;var i=t.dataTransfer.getData("application/json")||t.dataTransfer.getData("text/plain"),r=JSON.parse(i),s=Array.prototype.indexOf.call(a.children,o);return s<r.draggableStartKey&&r.draggableStartKey++,l.$timeout(function(){e.swDraggableContainer.draggableRecords.splice(s,0,r),e.swDraggableContainer.draggableRecords.splice(r.draggableStartKey,1)},0),angular.isDefined(e.swDraggableContainer.listingId)?l.listingService.notifyListingPageRecordsUpdate(e.swDraggableContainer.listingId):angular.isDefined(e.swDraggableContainer.dropEventName)&&l.observerService.notify(e.swDraggableContainer.dropEventName),n.remove(),t.stopPropagation(),!1}),t.on("dragenter",function(e){return e=e.originalEvent||e,!l.draggableService.isDropAllowed(e)||void e.preventDefault()}),t.on("dragleave",function(e){return e=e.originalEvent||e,0!=e.pageX||0!=e.pageY,!1}),t.on("dragover",function(e){if(e=e.originalEvent||e,e.stopPropagation(),o.parentNode!=a&&t.append(n),e.target!==a){for(var i=e.target;i.parentNode!==a&&i.parentNode;)i=i.parentNode;i.parentNode===a&&i!==o&&(l.draggableService.isMouseInFirstHalf(e,i)?a.insertBefore(o,i):a.insertBefore(o,i.nextSibling))}return t.addClass("s-dragged-over"),!1})}}return e.$inject=["$timeout","corePartialsPath","utilityService","listingService","observerService","draggableService","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$timeout","corePartialsPath","utilityService","listingService","observerService","draggableService","hibachiPathBuilder"],t},e}();t.SWDraggableContainer=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.rbkeyService=e,this.init=function(){angular.isDefined(t.pageTitleRbKey)&&(t.pageTitle=t.rbkeyService.getRBKey(t.pageTitleRbKey))},this.init()}return e.$inject=["rbkeyService"],e}(),n=function(){function e(e,t){this.corePartialsPath=e,this.restrict="E",this.scope={},this.transclude=!0,this.bindToController={type:"@",object:"=",pageTitle:"@?",pageTitleRbKey:"@?",edit:"=",showcancel:"=",showcreate:"=",showedit:"=",showdelete:"=",createModal:"=",createAction:"=",createQueryString:"=",backAction:"=",backQueryString:"=",cancelAction:"=",cancelQueryString:"=",deleteAction:"=",deleteQueryString:"=",processAction:"=",processContext:"="},this.controller=i,this.controllerAs="swEntityActionBar",this.link=function(e,t,i){},this.templateUrl=t.buildPartialsPath(e)+"entityactionbar.html"}return e.$inject=["corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["corePartialsPath","hibachiPathBuilder"],t},e}();t.SWEntityActionBar=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e}(),n=function(){function e(e,t){this.corePartialsPath=e,this.restrict="E",this.scope={},this.transclude=!0,this.bindToController={},this.controller=i,this.controllerAs="swEntityActionBarButtonGroup",this.link=function(e,t,i){},this.templateUrl=t.buildPartialsPath(e)+"entityactionbarbuttongroup.html"}return e.$inject=["corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["corePartialsPath","hibachiPathBuilder"],t},e}();t.SWEntityActionBarButtonGroup=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){var s=this;this.$timeout=e,this.$hibachi=t,this.utilityService=i,this.collectionConfigService=n,this.expandableService=r,this.listingService=a,this.observerService=o,this.childrenLoaded=!1,this.childrenOpen=!1,this.children=[],this.refreshChildren=function(){s.getEntity()},this.setupChildCollectionConfig=function(){s.childCollectionConfig=s.collectionConfigService.newCollectionConfig(s.entity.metaData.className);var e=s.entity.metaData.hb_parentPropertyName,t=s.entity.metaData[e].cfc;s.parentIDName=s.$hibachi.getEntityExample(t).$$getIDName();var i=s.entity.metaData.hb_childPropertyName,n=s.entity.metaData[i].cfc;s.$hibachi.getEntityExample(n).$$getIDName();s.childCollectionConfig.clearFilterGroups(),s.childCollectionConfig.collection=s.entity,s.childCollectionConfig.addFilter(e+"."+s.parentIDName,s.parentId),s.childCollectionConfig.setAllRecords(!0),angular.forEach(s.collectionConfig.columns,function(e){s.childCollectionConfig.addColumn(e.propertyIdentifier,e.title,e)}),angular.forEach(s.collectionConfig.joins,function(e){s.childCollectionConfig.addJoin(e)}),s.childCollectionConfig.groupBys=s.collectionConfig.groupBys},this.getEntity=function(){s.collectionPromise.then(function(e){s.collectionData=e,s.collectionData.pageRecords=s.collectionData.pageRecords||s.collectionData.records,s.collectionData.pageRecords.length&&angular.forEach(s.collectionData.pageRecords,function(e){s.expandableService.addRecord(e[s.parentIDName],!0),e.dataparentID=s.recordID,e.depth=s.recordDepth||0,e.depth++,s.children.push(e),s.records.splice(s.recordIndex+1,0,e)}),s.childrenLoaded=!0})},this.toggleChild=function(){s.$timeout(function(){s.childrenOpen=!s.childrenOpen,s.expandableService.updateState(s.recordID,{isOpen:s.childrenOpen}),s.childrenLoaded||(null==s.childCollectionConfig&&s.setupChildCollectionConfig(),angular.isFunction(s.childCollectionConfig.getEntity)&&(s.collectionPromise=s.childCollectionConfig.getEntity()),s.getEntity()),angular.forEach(s.children,function(e){e.dataIsVisible=s.childrenOpen;
var t=s.entity.$$getIDName(),i=[];i.push(e[t]),s.expandableService.updateState(e[t],{isOpen:s.childrenOpen});for(var n=!1,r=s.records.length;!n&&i.length>0;){for(var a=!1,o=i.pop(),l=0;l<r;l++){var c=s.records[l];c.dataparentID==o&&(i.push(c[t]),s.expandableService.updateState(c[t],{isOpen:s.childrenOpen}),c.dataIsVisible=s.childrenOpen,a=!0)}a||(n=!0)}})})},this.recordID=this.parentId,r.addRecord(this.recordID),angular.isDefined(this.refreshChildrenEvent)&&this.refreshChildrenEvent.length&&this.observerService.attach(this.refreshChildren,this.refreshChildrenEvent)}return e.$inject=["$timeout","$hibachi","utilityService","collectionConfigService","expandableService","listingService","observerService"],e}(),n=function(){function e(e,t,n,r,a,o,s){var l=this;this.$compile=e,this.$templateRequest=t,this.$timeout=n,this.corePartialsPath=r,this.utilityService=a,this.expandableService=o,this.hibachiPathBuilder=s,this.restrict="EA",this.scope={},this.bindToController={recordValue:"=",link:"@",expandable:"=?",parentId:"=",entity:"=",collectionConfig:"=?",childCollectionConfig:"=?",refreshChildrenEvent:"=?",listingId:"@?",records:"=",pageRecord:"=",recordIndex:"=",recordDepth:"=",childCount:"=",autoOpen:"=",multiselectIdPaths:"=",expandableRules:"="},this.controller=i,this.controllerAs="swExpandableRecord",this.link=function(e,t,i){if(e.swExpandableRecord.expandable&&e.swExpandableRecord.childCount){if(e.swExpandableRecord.recordValue){var n=e.swExpandableRecord.records[e.swExpandableRecord.recordIndex][e.swExpandableRecord.entity.$$getIDName()];if(e.swExpandableRecord.multiselectIdPaths&&e.swExpandableRecord.multiselectIdPaths.length){var r=e.swExpandableRecord.multiselectIdPaths.split(",");e.swExpandableRecord.childrenLoaded||angular.forEach(r,function(t){var i=l.utilityService.listFind(t,n,"/"),r=t.split("/"),a=r.length;i!==-1&&i<a-1&&!l.expandableService.getState(n,"isOpen")&&(l.expandableService.updateState(n,{isOpen:!0}),e.swExpandableRecord.toggleChild())})}}l.$templateRequest(l.hibachiPathBuilder.buildPartialsPath(l.corePartialsPath)+"expandablerecord.html").then(function(i){var n=angular.element(i),r=angular.copy(e.swExpandableRecord.autoOpen);e.swExpandableRecord.autoOpen=!1,n=l.$compile(n)(e),t.html(n),t.on("click",e.swExpandableRecord.toggleChild),r&&e.swExpandableRecord.toggleChild()})}},this.$compile=e,this.$templateRequest=t,this.corePartialsPath=r,this.$timeout=n,this.utilityService=a,this.expandableService=o,this.hibachiPathBuilder=s}return e.$inject=["$compile","$templateRequest","$timeout","corePartialsPath","utilityService","expandableService","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$compile","$templateRequest","$timeout","corePartialsPath","utilityService","expandableService","hibachiPathBuilder"],t},e}();t.SWExpandableRecord=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){return{restrict:"A",templateUrl:i.buildPartialsPath(t)+"exportaction.html",scope:{},link:function(e,t,i){}}}return e.$inject=["$log","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$log","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWExportAction=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(4),r=function(){function e(){this.gravatarURL="http://www.gravatar.com/avatar/"+n(this.emailAddress.toLowerCase().trim())}return e}();t.SWGravatarController=r;var a=function(){function e(){this.template="<img src='{{swGravatar.gravatarURL}}' />",this.transclude=!1,this.restrict="E",this.scope={},this.bindToController={emailAddress:"@"},this.controller=r,this.controllerAs="swGravatar",this.link=function(e,t,i,n,r){}}return e.Factory=function(){var t=function(){return new e};return t.$inject=[],t},e.$inject=["$hibachi","$timeout","collectionConfigService","corePartialsPath","hibachiPathBuilder"],e}();t.SWGravatar=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){return{restrict:"A",scope:{swHref:"@"},link:function(e,t,i){var n=i.swHref;n="?ng#!"+n,t.attr("href",n)}}}return e.Factory=function(){var t=function(){return new e};return t.$inject=[],t},e}();t.SWHref=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){return{restrict:"A",transclude:!0,templateUrl:i.buildPartialsPath(t)+"loading.html",scope:{swLoading:"="},link:function(e,t,i){}}}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$log","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWLoading=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){var s=this;this.$route=e,this.$log=t,this.$window=i,this.corePartialsPath=n,this.$hibachi=r,this.dialogService=a,this.hibachiScope=o,this.login=function(){var e=s.$hibachi.login(s.account_login.data.emailAddress,s.account_login.data.password);e.then(function(e){e&&e.data&&e.data.token&&(s.$window.localStorage.setItem("token",e.data.token),s.hibachiScope.loginDisplayed=!1,s.$route.reload(),s.dialogService.removeCurrentDialog())},function(e){})},this.$hibachi=r,this.$window=i,this.$route=e,this.hibachiScope=o,this.account_login=r.newEntity("Account_Login")}return e.$inject=["$route","$log","$window","corePartialsPath","$hibachi","dialogService","hibachiScope"],e}(),n=function(){function e(e,t,n,r,a,o,s){this.$route=e,this.$log=t,this.$window=n,this.corePartialsPath=r,this.$hibachi=a,this.dialogService=o,this.restrict="E",this.scope={},this.bindToController={},this.controller=i,this.controllerAs="SwLogin",this.link=function(e,t,i){},this.templateUrl=s.buildPartialsPath(this.corePartialsPath+"/login.html")}return e.$inject=["$route","$log","$window","corePartialsPath","$hibachi","dialogService","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$route","$log","$window","corePartialsPath","$hibachi","dialogService","hibachiPathBuilder"],t},e}();t.SWLogin=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){var e=this;this.hasSaveAction=!1,this.hasCancelAction=!1,this.hasDeleteAction=!1,this.launchModal=function(){e.showModal=!0},this.saveCallback=function(){if(e.hasSaveAction)var t=e.saveAction()();t.then(function(t){$("#"+e.modalName).modal("hide")},function(e){})},this.deleteCallback=function(){if(e.hasDeleteAction)var t=e.saveAction()();t.then(function(t){$("#"+e.modalName).modal("hide")},function(e){})},this.cancelCallback=function(){e.hasCancelAction&&e.cancelAction()()},angular.isUndefined(this.showModal)&&(this.showModal=!1),angular.isUndefined(this.saveActionText)&&(this.saveActionText="Save"),angular.isUndefined(this.cancelActionText)&&(this.cancelActionText="Cancel")}return e}();t.SWModalLauncherController=i;var n=function(){function e(e,t,n){this.$compile=e,this.corePartialsPath=t,this.transclude={button:"?swModalButton",staticButton:"?swModalStaticButton",content:"?swModalContent"},this.restrict="EA",this.scope={},this.bindToController={showModal:"=?",modalName:"@",title:"@",saveAction:"&?",deleteAction:"&?",cancelAction:"&?",saveActionText:"@?",cancelActionText:"@?"},this.controller=i,this.controllerAs="swModalLauncher",this.compile=function(e,t,i){return{pre:function(e,t,i){angular.isDefined(i.saveAction)&&(e.swModalLauncher.hasSaveAction=!0),angular.isDefined(i.deleteAction)&&(e.swModalLauncher.hasDeleteAction=!0),angular.isDefined(i.cancelAction)&&(e.swModalLauncher.hasCancelAction=!0)},post:function(e,t,i){}}},this.templateUrl=n.buildPartialsPath(t)+"modallauncher.html"}return e.$inject=["$compile","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$compile","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWModalLauncher=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){angular.isUndefined(this.modalName)&&(console.warn("You did not pass a modal title to SWModalWindowController"),this.modalName="")}return e}();t.SWModalWindowController=i;var n=function(){function e(e,t,n){this.$compile=e,this.corePartialsPath=t,this.transclude={modalBody:"?swModalBody"},this.restrict="EA",this.scope={},this.bindToController={modalName:"@",title:"@",hasSaveAction:"=?",saveAction:"&?",hasDeleteAction:"=?",deleteAction:"&?",hasCancelAction:"=?",cancelAction:"&?",saveActionText:"@",cancelActionText:"@"},this.controller=i,this.controllerAs="swModalWindow",this.compile=function(e,t,i){return{pre:function(e,t,i){},post:function(e,t,i){}}},this.templateUrl=n.buildPartialsPath(t)+"modalwindow.html"}return e.$inject=["$compile","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$compile","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWModalWindow=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.restrict="A",this.require="ngModel",this.scope={ngModel:"=",minNumber:"=?",maxNumber:"=?"},this.link=function(e,t,i,n){n.$parsers.unshift(function(t){var i=n.$modelValue;return""==t||isNaN(Number(t))||(angular.isDefined(e.minNumber)&&(Number(t)>=e.minNumber||!angular.isDefined(e.minNumber)?n.$setValidity("minNumber",!0):angular.isDefined(e.minNumber)&&n.$setValidity("minNumber",!1)),angular.isDefined(e.maxNumber)&&(Number(t)<=e.maxNumber||!angular.isDefined(e.maxNumber)?n.$setValidity("maxNumber",!0):angular.isDefined(e.maxNumber)&&n.$setValidity("maxNumber",!1)),i=n.$valid?Number(t):e.minNumber),i})}}return e.Factory=function(){var t=function(){return new e};return t.$inject=[],t},e}();t.SWNumbersOnly=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){return{restrict:"AE",scope:{objectName:"@"},templateUrl:r.buildPartialsPath(n)+"options.html",link:function(e,n,r){e.swOptions={},e.swOptions.objectName=e.objectName,e.getOptions=function(){e.swOptions.object=t["new"+e.swOptions.objectName]();var n=[{propertyIdentifier:e.swOptions.objectName.charAt(0).toLowerCase()+e.swOptions.objectName.slice(1)+"Name"},{propertyIdentifier:e.swOptions.object.$$getIDName()}];t.getEntity(e.swOptions.objectName,{allRecords:!0,columnsConfig:angular.toJson(n)}).then(function(t){e.swOptions.options=t.records,i.notify("optionsLoaded")})},e.getOptions();var a=function(t){t?e.swOptions.selectOption(t):e.swOptions.selectOption(e.swOptions.options[0])};i.attach(a,"selectOption","selectOption"),e.swOptions.selectOption=function(t){e.swOptions.selectedOption=t,i.notify("optionsChanged",t)}}}}return e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$log","$hibachi","observerService","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWOptions=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){var n=this;this.listingService=e,this.observerService=t,this.utilityService=i,this.sortCode="ASC",this.updateSortOrderProperty=function(){angular.isDefined(n.selectedPropertyIdentifier)?n.propertyNotChosen=!1:n.propertyNotChosen=!0,n.updateOrderBy()},this.updateOrderBy=function(){if(angular.isDefined(n.selectedPropertyIdentifier)&&n.selectedPropertyIdentifier.length>0)var e=n.selectedPropertyIdentifier;switch(n.sortCode){case"ASC":n.disabled=!1,null!=e&&(angular.isDefined(n.collectionConfig)&&n.collectionConfig.toggleOrderBy(e,!0),n.inListingDisplay&&n.listingService.setSingleColumnOrderBy(n.listingId,e,"ASC")),n.inListingDisplay&&n.listingService.setManualSort(n.listingId,!1);break;case"DESC":n.disabled=!1,null!=e&&(angular.isDefined(n.collectionConfig)&&n.collectionConfig.toggleOrderBy(e,!0),n.inListingDisplay&&n.listingService.setSingleColumnOrderBy(n.listingId,e,"DESC"),n.inListingDisplay&&n.listingService.setManualSort(n.listingId,!1));break;case"MANUAL":n.disabled=!0,n.inListingDisplay&&n.listingService.setManualSort(n.listingId,!0)}},this.sortAscending=function(){n.sortCode="ASC",n.updateOrderBy()},this.sortDescending=function(){n.sortCode="DESC",n.updateOrderBy()},this.manualSort=function(){n.sortCode="MANUAL",n.updateOrderBy()},angular.isUndefined(this.edit)&&(this.edit=!0),angular.isDefined(this.collectionConfig)&&(this.columns=this.collectionConfig.columns),angular.isDefined(this.initialSortDefaultDirection)&&this.initialSortDefaultDirection.length>0&&(this.sortCode=this.initialSortDefaultDirection),angular.isDefined(this.initialSortProperty)&&this.initialSortProperty.length>0&&(this.selectedPropertyIdentifier=this.initialSortProperty),this.id=this.utilityService.createID(32)}return e.$inject=["listingService","observerService","utilityService"],e}();t.SWOrderByControlsController=i;var n=function(){function e(e,t,n,r,a){var o=this;this.$compile=e,this.scopeService=t,this.listingService=n,this.corePartialsPath=r,this.transclude=!0,this.restrict="EA",this.scope={},this.bindToController={collectionConfig:"=?",selectedOrderByColumn:"=?",inListingDisplay:"=?",toggleCollectionConfig:"=?",initialSortProperty:"@?",initialSortDefaultDirection:"@?",sortPropertyFieldName:"@?",sortDefaultDirectionFieldName:"@?",edit:"=?"},this.controller=i,this.controllerAs="swOrderByControls",this.compile=function(e,t,i){return{pre:function(e,t,i){if(e.swOrderByControls.inListingDisplay&&o.scopeService.hasParentScope(e,"swListingDisplay")){var n=o.scopeService.getRootParentScope(e,"swListingDisplay").swListingDisplay;e.swOrderByControls.listingId=n.tableID,o.listingService.attachToListingInitiated(e.swOrderByControls.listingId,e.swOrderByControls.updateOrderBy),null==e.swOrderByControls.collectionConfig&&null!=n.collectionConfig&&(e.swOrderByControls.collectionConfig=n.collectionConfig)}},post:function(e,t,i){}}},this.templateUrl=a.buildPartialsPath(r)+"orderbycontrols.html"}return e.$inject=["$compile","scopeService","listingService","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$compile","scopeService","listingService","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWOrderByControls=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l){var c=this;this.rbkeyService=e,this.$templateRequest=t,this.$compile=i,this.corePartialsPath=n,this.$scope=r,this.$element=a,this.$transclude=o,this.$templateRequest=t,this.$compile=i,this.corePartialsPath=n,this.utilityService=s,this.type=this.type||"link",this.queryString=this.queryString||"",this.$scope=r,this.$element=a,this.$transclude=this.$transclude,this.$templateRequest(l.buildPartialsPath(this.corePartialsPath)+"processcaller.html").then(function(e){var t=angular.element(e);c.$element.parent().append(t),i(t)(c.$scope)}),angular.isDefined(this.titleRbKey)&&(this.title=this.rbkeyService.getRBKey(this.titleRbKey)),angular.isUndefined(this.text)&&(this.text=this.title)}return e.$inject=["rbkeyService","$templateRequest","$compile","corePartialsPath","$scope","$element","$transclude","utilityService","hibachiPathBuilder"],e}(),n=function(){function e(e,t){this.corePartialsPath=e,this.utilityService=t,this.restrict="E",this.scope={},this.bindToController={action:"@",entity:"@",processContext:"@",hideDisabled:"=",type:"@",queryString:"@",text:"@",title:"@?",titleRbKey:"@?",class:"@",icon:"=",iconOnly:"=",submit:"=",confirm:"=",disabled:"=",disabledText:"@",modal:"="},this.controller=i,this.controllerAs="swProcessCaller",this.link=function(e,t,i){},this.corePartialsPath=e,this.utilityService=t}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["corePartialsPath","utilityService"],t},e.$inject=["corePartialsPath","utilityService"],e}();t.SWProcessCaller=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a){return{restrict:"A",scope:{swRbkey:"="},link:function(e,t,i){var n=e.swRbkey,r=function(){angular.isDefined(n)&&angular.isString(n)&&t.text(a.getRBKey(n))};r()}}}return e.Factory=function(){var t=function(t,i,n,r,a,o){return new e(t,i,n,r,a,o)};return t.$inject=["$hibachi","observerService","utilityService","$rootScope","$log","rbkeyService"],t},e}();t.SWRbKey=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){return{link:function(n,r,a){var o,s,l,c;return t=angular.element(t),l=0,null!=a.infiniteScrollDistance&&n.$watch(a.infiniteScrollDistance,function(e){return l=parseInt(e,10)}),c=!0,o=!1,null!=a.infiniteScrollDisabled&&n.$watch(a.infiniteScrollDisabled,function(e){if(c=!e,c&&o)return o=!1,s()}),s=function(){var i,s,u,d;return d=t.height()+t.scrollTop(),i=r.offset().top+r.height(),s=i-d,u=s<=t.height()*l,u&&c?e.$$phase?n.$eval(a.infiniteScroll):n.$apply(a.infiniteScroll):u?o=!0:void 0},t.on("scroll",s),n.$on("$destroy",function(){return t.off("scroll",s)}),i(function(){return a.infiniteScrollImmediateCheck?n.$eval(a.infiniteScrollImmediateCheck)?s():void 0:s()},0)}}}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$rootScope","$window","$timeout"],t},e}();t.SWScrollTrigger=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.selectionService=e,this.observerService=t,this.updateSelectValue=function(e){i.isRadio&&"check"==e.action?i.toggleValue==i.selection:"clear"==e.action?i.toggleValue=!1:"selectAll"==e.action?i.toggleValue=!0:e.selection==i.selection&&(i.toggleValue="check"==e.action)},this.toggleSelection=function(e,t,n){i.isRadio?(i.selectionService.radioSelection(t,n),i.toggleValue=n):e?i.selectionService.addSelection(t,n):i.selectionService.removeSelection(t,n)},angular.isUndefined(this.name)&&(this.name="selection"),e.isAllSelected(this.selectionid)?this.toggleValue=!e.hasSelection(this.selectionid,this.selection):this.toggleValue=e.hasSelection(this.selectionid,this.selection),this.isRadio&&this.toggleValue&&(this.toggleValue=this.selection),t.attach(this.updateSelectValue,"swSelectionToggleSelection"+this.selectionid),angular.isDefined(this.initSelected)&&this.initSelected&&(this.toggleValue=this.selection,this.toggleSelection(this.toggleValue,this.selectionid,this.selection))}return e.$inject=["selectionService","observerService"],e}(),n=function(){function e(e,t){this.collectionPartialsPath=e,this.hibachiPathBuilder=t,this.restrict="E",this.scope={},this.bindToController={selection:"=",selectionid:"@",id:"=",isRadio:"=",name:"@",disabled:"=",initSelected:"="},this.controller=i,this.controllerAs="swSelection",this.templateUrl=this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath)+"selection.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["corePartialsPath","hibachiPathBuilder"],t},e.$inject=["corePartialsPath","hibachiPathBuilder"],e}();t.SWSelection=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return function(t){var i=this;t.sortable({placeholder:"placeholder",opacity:.8,axis:"y",update:function(n,r){var a=i.$apply(e),o=a.length,s=[];t.children().each(function(e){var t=$(this),i=parseInt(t.attr("sw:sortable-index"),10);a.push(a[i]),t.attr("sw:sortable-index")&&(s[i]=t,t.detach())}),a.splice(0,o),t.append.apply(t,s),i.$digest()}})}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["expression","compiledElement"],t},e}();t.SWSortable=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s){this.$scope=e,this.$q=t,this.$transclude=i,this.$hibachi=n,this.$timeout=r,this.utilityService=a,this.rbkeyService=o,this.collectionConfigService=s,angular.isUndefined(this.active)&&(this.active=!1),angular.isUndefined(this.loaded)&&(this.loaded=!1),angular.isUndefined(this.hide)&&(this.hide=!1),angular.isUndefined(this.id)&&(this.id=a.createID(16)),angular.isUndefined(this.name)&&(this.name=this.id)}return e.$inject=["$scope","$q","$transclude","$hibachi","$timeout","utilityService","rbkeyService","collectionConfigService"],e}();t.SWTabContentController=i;var n=function(){function e(e,t,n,r,a){var o=this;this.$compile=e,this.scopeService=t,this.observerService=n,this.corePartialsPath=r,this.transclude=!0,this.restrict="EA",this.scope={},this.bindToController={active:"=?",loaded:"=?",hide:"=?",name:"@?"},this.controller=i,this.controllerAs="swTabContent",this.compile=function(e,t,i){return{pre:function(e,t,i){},post:function(e,t,i){var n=o.scopeService.getRootParentScope(e,"swTabGroup").swTabGroup;angular.isDefined(n)&&angular.isDefined(n.tabs)&&(n.tabs.push(e.swTabContent),o.observerService.notify(n.initTabEventName))}}},this.templateUrl=a.buildPartialsPath(r)+"tabcontent.html"}return e.$inject=["$compile","scopeService","observerService","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$compile","scopeService","observerService","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWTabContent=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){var n=this;this.utilityService=e,this.rbkeyService=t,this.observerService=i,this.hasActiveTab=!1,this.initTab=function(){for(var e=0;e<n.tabs.length;e++)if(!n.tabs[e].hide){n.tabs[e].active=!0,n.tabs[e].loaded=!0;break}},this.switchTab=function(e){n.observerService.notify(n.switchTabGroupEventName);for(var t=0;t<n.tabs.length;t++)n.tabs[t].active=!1;e.active=!0,e.loaded=!0},this.getTabByName=function(e){for(var t=0;t<n.tabs.length;t++)if(n.tabs[t].name==e)return n.tabs[t]},angular.isUndefined(this.tabs)&&(this.tabs=[]),this.tabGroupID="TG"+this.utilityService.createID(30),this.switchTabGroupEventName="SwitchTabGroup"+this.tabGroupID,this.initTabEventName="InitTabForTabGroup"+this.tabGroupID,this.observerService.attach(this.initTab,this.initTabEventName),angular.isUndefined(this.switchTabEventName)&&(this.switchTabEventName=this.tabGroupID+"SwitchTabTo"),this.observerService.attach(this.switchTab,this.switchTabEventName)}return e.$inject=["utilityService","rbkeyService","observerService"],e}();t.SWTabGroupController=i;var n=function(){function e(e,t,n){this.$compile=e,this.corePartialsPath=t,this.transclude=!0,this.restrict="EA",this.scope={},this.bindToController={switchTabEventName:"@?"},this.controller=i,this.controllerAs="swTabGroup",this.compile=function(e,t,i){return{pre:function(e,t,i){},post:function(e,t,i){}}},this.templateUrl=n.buildPartialsPath(t)+"tabgroup.html"}return e.$inject=["$compile","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$compile","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWTabGroup=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.rbkeyService=e,this.showTooltip=!1,this.show=function(){t.showTooltip=!0},this.hide=function(){t.showTooltip=!1},angular.isDefined(this.rbKey)&&(this.text=e.getRBKey(this.rbKey)),angular.isUndefined(this.position)&&(this.position="top")}return e.$inject=["rbkeyService"],e}();t.SWTooltipController=i;var n=function(){function e(e,t,n){this.$document=e,this.corePartialsPath=t,this.transclude=!0,this.restrict="EA",this.scope={},this.bindToController={rbKey:"@?",text:"@?",position:"@?",showTooltip:"=?"},this.controller=i,this.controllerAs="swTooltip",this.link=function(e,t,i,n,r){var a=t.find(".tooltip"),o=t.position(),s=a[0].style;if(i&&i.position)switch(i.position.toLowerCase()){case"top":s.top="0px",s.left="0px";break;case"bottom":break;case"left":s.top=o.top+t[0].offsetHeight-5+"px",s.left=-1*(o.left+t[0].offsetLeft-5)+"px",t.find(".tooltip-inner")[0].style.maxWidth="none";break;default:s.top=o.top+t[0].offsetHeight-5+"px",s.left=o.left+t[0].offsetWidth-5+"px"}},this.templateUrl=n.buildPartialsPath(t)+"tooltip.html"}return e.$inject=["$document","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$document","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWTooltip=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){var a=this;if(this.$scope=e,this.$transclude=t,this.collectionConfigService=i,this.$rootScope=n,this.observerService=r,this.columns=[],this.filters=[],this.addFunction=function(e){if(a.modelValue=e[a.propertyToSave],a.action){var t={};a.variables&&(t=a.variables()),t.value=a.modelValue,a.$root.slatwall.doAction(a.action,t)}},this.$root=n,angular.isUndefined(this.typeaheadCollectionConfig)){if(!angular.isDefined(this.entityName))throw"You did not pass the correct collection config data to swTypeaheadInputField";this.typeaheadCollectionConfig=i.newCollectionConfig(this.entityName)}if(angular.isUndefined(this.validateRequired)&&(this.validateRequired=!1),this.$transclude(e,function(){}),angular.isUndefined(this.propertyToSave))throw"You must select a property to save for the input field directive";if(angular.isDefined(this.propertiesToLoad)&&this.typeaheadCollectionConfig.addDisplayProperty(this.propertiesToLoad),angular.forEach(this.columns,function(e){a.typeaheadCollectionConfig.addDisplayProperty(e.propertyIdentifier,"",e)}),angular.forEach(this.filters,function(e){a.typeaheadCollectionConfig.addFilter(e.propertyIdentifier,e.comparisonValue,e.comparisonOperator,e.logicalOperator,e.hidden)}),angular.isDefined(this.initialEntityId)&&this.initialEntityId.length&&(this.modelValue=this.initialEntityId),this.eventListeners)for(var o in this.eventListeners)r.attach(this.eventListeners[o],o)}return e.$inject=["$scope","$transclude","collectionConfigService","$rootScope","observerService"],e}();t.SWTypeaheadInputFieldController=i;var n=function(){function e(e,t){this.corePartialsPath=e,this.transclude=!0,this.restrict="EA",this.scope={},this.bindToController={fieldName:"@",entityName:"@",typeaheadCollectionConfig:"=?",propertiesToLoad:"@?",placeholderRbKey:"@?",propertyToShow:"@",propertyToSave:"@",initialEntityId:"@",allRecords:"=?",validateRequired:"=?",maxRecords:"@",action:"@",variables:"&?",eventListeners:"=?",placeholderText:"@?",searchEndpoint:"@?",titleText:"@?"},this.controller=i,this.controllerAs="swTypeaheadInputField",this.templateUrl=t.buildPartialsPath(e)+"typeaheadinputfield.html"}return e.$inject=["corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["corePartialsPath","hibachiPathBuilder"],t},e}();t.SWTypeaheadInputField=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){var s=this;this.$scope=e,this.$transclude=t,this.$hibachi=i,this.listingService=n,this.typeaheadService=r,this.utilityService=a,this.collectionConfigService=o,this.addSelection=function(e){s.typeaheadService.addSelection(s.typeaheadDataKey,e),s.inListingDisplay&&s.listingService.insertListingPageRecord(s.listingId,e)},this.removeSelection=function(e){var t=s.typeaheadService.removeSelection(s.typeaheadDataKey,e);s.inListingDisplay&&s.listingService.removeListingPageRecord(s.listingId,t)},this.getSelections=function(){return s.typeaheadService.getData(s.typeaheadDataKey)},this.updateSelectionList=function(){s.selectionList=s.typeaheadService.updateSelectionList(s.typeaheadDataKey)},angular.isUndefined(this.typeaheadDataKey)&&(this.typeaheadDataKey=this.utilityService.createID(32)),angular.isUndefined(this.disabled)&&(this.disabled=!1),angular.isUndefined(this.showSelections)&&(this.showSelections=!1),angular.isUndefined(this.multiselectMode)&&(this.multiselectMode=!0),angular.isUndefined(this.hasAddButtonFunction)&&(this.hasAddButtonFunction=!1),angular.isUndefined(this.hasViewFunction)&&(this.hasViewFunction=!1),angular.isDefined(this.selectedCollectionConfig)&&this.typeaheadService.initializeSelections(this.typeaheadDataKey,this.selectedCollectionConfig),this.typeaheadService.attachTypeaheadSelectionUpdateEvent(this.typeaheadDataKey,this.updateSelectionList)}return e.$inject=["$scope","$transclude","$hibachi","listingService","typeaheadService","utilityService","collectionConfigService"],e}();t.SWTypeaheadMultiselectController=i;var n=function(){function e(e,t,n,r,a){var o=this;this.$compile=e,this.scopeService=t,this.typeaheadService=n,this.corePartialsPath=r,this.transclude=!0,this.restrict="EA",this.scope={},this.bindToController={placeholderRbKey:"@",collectionConfig:"=?",selectedCollectionConfig:"=?",typeaheadDataKey:"@?",multiselectModeOn:"=?multiselectMode",showSelections:"=?",dataTarget:"=?",dataTargetIndex:"=?",addButtonFunction:"&?",viewFunction:"&?",inListingDisplay:"=?",listingId:"@?",propertyToCompare:"@?",fallbackPropertiesToCompare:"@?",rightContentPropertyIdentifier:"@?",selectionFieldName:"@?",disabled:"=?"},this.controller=i,this.controllerAs="swTypeaheadMultiselect",this.compile=function(e,t,i){return{pre:function(e,t,i){if(angular.isDefined(i.addButtonFunction)?e.swTypeaheadMultiselect.hasAddButtonFunction=!0:e.swTypeaheadMultiselect.hasAddButtonFunction=!1,angular.isDefined(i.viewFunction)?e.swTypeaheadMultiselect.viewFunction=!0:e.swTypeaheadMultiselect.viewFunction=!1,angular.isUndefined(e.swTypeaheadMultiselect.inListingDisplay)&&(e.swTypeaheadMultiselect.inListingDisplay=!1),e.swTypeaheadMultiselect.inListingDisplay&&o.scopeService.hasParentScope(e,"swListingDisplay")){var n=o.scopeService.getRootParentScope(e,"swListingDisplay").swListingDisplay;e.swTypeaheadMultiselect.listingId=n.tableID,n.typeaheadDataKey=e.swTypeaheadMultiselect.typeaheadDataKey}},post:function(e,t,n){var r=t.find(".s-selected-list"),a=angular.element('<div class="alert s-selected-item" ng-repeat="item in swTypeaheadMultiselect.getSelections() track by $index">'),s=angular.element('<button ng-click="swTypeaheadMultiselect.removeSelection($index)" type="button" class="close"><span>×</span><span class="sr-only" sw-rbkey="&apos;define.close&apos;"></span></button>');a.append(s),a.append(o.typeaheadService.stripTranscludedContent(i(e,function(){}))),r.append(o.$compile(a)(e))}}},this.templateUrl=a.buildPartialsPath(r)+"typeaheadmultiselect.html"}return e.$inject=["$compile","scopeService","typeaheadService","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$compile","scopeService","typeaheadService","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWTypeaheadMultiselect=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){var a=this;this.$scope=e,this.listingService=t,this.scopeService=i,this.typeaheadService=n,this.utilityService=r,this.updatePageRecord=function(){if(a.scopeService.hasParentScope(a.$scope,"pageRecord")){var e=a.scopeService.getRootParentScope(a.$scope,"pageRecord").pageRecord;a.pageRecord=e}},this.removeSelection=function(){a.disabled||(a.typeaheadService.removeSelection(a.typeaheadDataKey,void 0,a.pageRecord),a.listingService.removeListingPageRecord(a.listingId,a.pageRecord))},this.listingService.attachToListingPageRecordsUpdate(this.listingId,this.updatePageRecord,this.utilityService.createID(32)),angular.isUndefined(this.disabled)&&(this.disabled=!1)}return e}();t.SWTypeaheadRemoveSelectionController=i;var n=function(){function e(e,t,n){var r=this;this.scopeService=e,this.corePartialsPath=t,this.transclude=!0,this.restrict="EA",this.scope={},this.bindToController={typeaheadDataKey:"@?",index:"@?",disabled:"=?"},this.controller=i,this.controllerAs="swTypeaheadRemoveSelection",
this.link=function(e,t,i){if(r.scopeService.hasParentScope(e,"swListingDisplay")){var n=r.scopeService.getRootParentScope(e,"swListingDisplay").swListingDisplay;e.swTypeaheadRemoveSelection.typeaheadDataKey=n.typeaheadDataKey,e.swTypeaheadRemoveSelection.listingId=n.tableID}if(r.scopeService.hasParentScope(e,"pageRecord")){var a=r.scopeService.getRootParentScope(e,"pageRecord").pageRecord;e.swTypeaheadRemoveSelection.pageRecord=a}},this.templateUrl=n.buildPartialsPath(t)+"typeaheadremoveselection.html"}return e.$inject=["scopeService","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["scopeService","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWTypeaheadRemoveSelection=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c,u,d){var p=this;if(this.$scope=e,this.$q=t,this.$transclude=i,this.$hibachi=n,this.$timeout=r,this.utilityService=a,this.observerService=o,this.rbkeyService=s,this.collectionConfigService=l,this.typeaheadService=c,this.$http=u,this.requestService=d,this.results=[],this.columns=[],this.filters=[],this.searchableColumns=[],this.initialSearchableColumnsState=[],this.searchableColumnSelection="All",this.fallbackPropertyArray=[],this.clearSearch=function(){p.searchText="",p.hideSearch=!0,angular.isDefined(p.addFunction)&&p.addFunction()(void 0)},this.toggleDropdown=function(){p.dropdownOpen=!p.dropdownOpen},this.toggleOptions=function(){!p.hideSearch||p.searchText&&p.searchText.length||p.search(p.searchText),p.hideSearch=!p.hideSearch},this.search=function(e){if(p._timeoutPromise&&p.$timeout.cancel(p._timeoutPromise),p.collectionConfig.setKeywords(e),angular.isDefined(p.filterGroupsConfig)){var t=p.filterGroupsConfig.replace("replaceWithSearchString",e);t=t.trim(),p.collectionConfig.loadFilterGroups(JSON.parse(t))}p._timeoutPromise=p.$timeout(function(){var t;t=p.searchEndpoint?p.requestService.newPublicRequest("/"+p.searchEndpoint,{search:e,options:p.collectionConfig.getOptions(),entityName:p.collectionConfig.baseEntityName},"post",{"Content-Type":"application/json"}).promise:p.collectionConfig.getEntity(),t.then(function(e){p.results=e.pageRecords||e.records,p.updateSelections()}).finally(function(){p.resultsDeferred.resolve(),p.hideSearch=0==p.results.length})},500)},this.updateSelections=function(){p.typeaheadService.updateSelections(p.typeaheadDataKey)},this.updateSearchableProperties=function(e){angular.isString(e)&&"all"==e?(angular.copy(p.initialSearchableColumnsState,p.searchableColumns),p.searchableColumnSelection="All"):(angular.forEach(p.searchableColumns,function(e,t){e.isSearchable=!1}),e.isSearchable=!0,p.searchableColumnSelection=e.title)},this.addOrRemoveItem=function(e){var t=e.selected||!1;p.hideSearch||p.multiselectMode||(p.hideSearch=!0),p.multiselectMode||(angular.isDefined(p.propertyToShow)?p.searchText=e[p.propertyToShow]:angular.isDefined(p.columns)&&p.columns.length&&angular.isDefined(p.columns[0].propertyIdentifier)&&(p.searchText=e[p.columns[0].propertyIdentifier])),!t&&angular.isDefined(p.addFunction)&&p.addFunction()(e),t&&angular.isDefined(p.removeFunction)&&(p.removeFunction()(e.selectedIndex),e.selected=!1,e.selectedIndex=void 0),p.updateSelections()},this.addButtonItem=function(){p.hideSearch||(p.hideSearch=!0),angular.isDefined(p.addButtonFunction)&&p.addButtonFunction()(p.searchText)},this.viewButtonClick=function(){p.viewFunction()()},this.closeThis=function(e){if(p.hideSearch=!0,angular.isDefined(e))for(var t in e.callBackActions)e.callBackActions[t]()},this.getSelections=function(){return p.typeaheadService.getData(p.typeaheadDataKey)},this.dropdownOpen=!1,this.requestService=d,this.$transclude(e,function(){}),this.resultsDeferred=t.defer(),this.resultsPromise=this.resultsDeferred.promise,angular.isUndefined(this.typeaheadDataKey)&&(this.typeaheadDataKey=this.utilityService.createID(32)),angular.isUndefined(this.disabled)&&(this.disabled=!1),angular.isUndefined(this.multiselectMode)&&(this.multiselectMode=!1),angular.isUndefined(this.searchText)||null==this.searchText?this.searchText="":this.search(this.searchText),angular.isUndefined(this.validateRequired)&&(this.validateRequired=!1),angular.isUndefined(this.hideSearch)&&(this.hideSearch=!0),angular.isUndefined(this.collectionConfig)){if(!angular.isDefined(this.entity))throw"You did not pass the correct collection config data to swTypeaheadSearch";this.collectionConfig=l.newCollectionConfig(this.entity)}if(angular.isDefined(this.collectionConfig)&&(this.primaryIDPropertyName=n.getPrimaryIDPropertyNameByEntityName(this.collectionConfig.baseEntityName)),angular.isDefined(this.fallbackPropertiesToCompare)&&this.fallbackPropertiesToCompare.length&&(this.fallbackPropertyArray=this.fallbackPropertiesToCompare.split(",")),angular.isDefined(this.placeholderRbKey)?this.placeholderText=this.rbkeyService.getRBKey(this.placeholderRbKey):angular.isUndefined(this.placeholderText)&&(this.placeholderText=this.rbkeyService.getRBKey("define.search")),this._timeoutPromise=this.$timeout(function(){},500),angular.isDefined(this.propertiesToDisplay)&&this.collectionConfig.addDisplayProperty(this.propertiesToDisplay.split(",")),angular.forEach(this.columns,function(e){p.collectionConfig.addDisplayProperty(e.propertyIdentifier,"",e)}),angular.forEach(this.filters,function(e){p.collectionConfig.addFilter(e.propertyIdentifier,e.comparisonValue,e.comparisonOperator,e.logicalOperator,e.hidden)}),angular.isUndefined(this.allRecords)&&(this.allRecords=this.collectionConfig.allRecords),this.collectionConfig.setAllRecords(this.allRecords),angular.isDefined(this.maxRecords)&&this.collectionConfig.setPageShow(this.maxRecords),angular.isDefined(this.initialEntityId)&&this.initialEntityId.length){this.initialEntityCollectionConfig=l.newCollectionConfig(this.collectionConfig.baseEntityName),this.initialEntityCollectionConfig.loadColumns(this.collectionConfig.columns);var f=n.getPrimaryIDPropertyNameByEntityName(this.initialEntityCollectionConfig.baseEntityName);this.initialEntityCollectionConfig.addFilter(f,this.initialEntityId,"=");var h=this.initialEntityCollectionConfig.getEntity();h.then(function(e){p.results=e.pageRecords,p.results.length&&p.addOrRemoveItem(p.results[0])})}angular.forEach(this.collectionConfig.columns,function(e,t){e.isSearchable&&p.searchableColumns.push(e)}),angular.copy(this.searchableColumns,this.initialSearchableColumnsState),this.typeaheadService.setTypeaheadState(this.typeaheadDataKey,this),this.observerService.attach(this.clearSearch,this.typeaheadDataKey+"clearSearch"),this.$http=u}return e.$inject=["$scope","$q","$transclude","$hibachi","$timeout","utilityService","observerService","rbkeyService","collectionConfigService","typeaheadService","$http","requestService"],e}();t.SWTypeaheadSearchController=i;var n=function(){function e(e,t,n,r){var a=this;this.$compile=e,this.typeaheadService=t,this.corePartialsPath=n,this.transclude=!0,this.restrict="EA",this.scope={},this.bindToController={collectionConfig:"=?",entity:"@?",properties:"@?",propertiesToDisplay:"@?",filterGroupsConfig:"@?",placeholderText:"@?",placeholderRbKey:"@?",propertyToCompare:"@?",fallbackPropertiesToCompare:"@?",searchText:"=?",results:"=?",addFunction:"&?",removeFunction:"&?",addButtonFunction:"&?",viewFunction:"&?",showAddButton:"=?",showViewButton:"=?",validateRequired:"=?",clickOutsideArguments:"=?",propertyToShow:"=?",hideSearch:"=?",allRecords:"=?",maxRecords:"=?",disabled:"=?",initialEntityId:"@",multiselectMode:"=?",typeaheadDataKey:"@?",rightContentPropertyIdentifier:"@?",searchEndpoint:"@?",titleText:"@?"},this.controller=i,this.controllerAs="swTypeaheadSearch",this.compile=function(e,t,i){return{pre:function(e,t,i){angular.isDefined(i.addButtonFunction)&&angular.isUndefined(i.showAddButton)?e.swTypeaheadSearch.showAddButton=!0:angular.isUndefined(i.showAddButton)&&(e.swTypeaheadSearch.showAddButton=!1),angular.isDefined(i.viewFunction)&&angular.isUndefined(i.showViewButton)?e.swTypeaheadSearch.showViewButton=!0:angular.isUndefined(i.showViewButton)&&(e.swTypeaheadSearch.showViewButton=!1)},post:function(e,t,n){var r=t.find(".dropdown-menu"),o='\n                    <li ng-repeat="item in swTypeaheadSearch.results" ng-class="{\'s-selected\':item.selected}"></li>\n                ',s='\n                    <a ng-click="swTypeaheadSearch.addOrRemoveItem(item)">\n                ';if(angular.isDefined(e.swTypeaheadSearch.rightContentPropertyIdentifier))var l='<span class="s-right-content" ng-bind="item[swTypeaheadSearch.rightContentPropertyIdentifier]"></span></a>';else var l="</a>";s+=l;var c=angular.element(o),u=angular.element(s);u.append(a.typeaheadService.stripTranscludedContent(i(e,function(){}))),c.append(u),e.swTypeaheadSearch.resultsPromise.then(function(){r.append(a.$compile(c)(e))})}}},this.templateUrl=r.buildPartialsPath(n)+"typeaheadsearch.html"}return e.$inject=["$compile","typeaheadService","corePartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["$compile","typeaheadService","corePartialsPath","hibachiPathBuilder"],t},e}();t.SWTypeaheadSearch=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e}();t.SWTypeaheadSearchLineItemController=i;var n=function(){function e(e){this.$compile=e,this.restrict="EA",this.scope=!0,this.bindToController={propertyIdentifier:"@",isSearchable:"@?"},this.controller=i,this.controllerAs="swTypeaheadSearchLineItem",this.compile=function(e,t,i){return{pre:function(e,t,i){var n=t[0].innerHTML;t[0].innerHTML="";var r='<span ng-if="item.'+e.swTypeaheadSearchLineItem.propertyIdentifier+'.toString().trim().length">'+n+'</span><span ng-bind="item.'+e.swTypeaheadSearchLineItem.propertyIdentifier+'"></span>';t.append(r)},post:function(e,t,i){}}}}return e.$inject=["$compile"],e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["$compile"],t},e}();t.SWTypeaheadSearchLineItem=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a){e.keywords="",e.searchResultsOpen=!1,e.sidebarClass="sidebar",e.loading=!1,e.resultsFound=!0,e.searchResults={product:{title:"Products",resultNameFilter:function(e){return e.productName},results:[],id:function(e){return e.productID}},order:{title:a.getRBKey("entity.order_plural"),resultNameFilter:function(e){return e.orderNumber},results:[],id:function(e){return e.orderID}},brand:{title:a.getRBKey("entity.brand_plural"),resultNameFilter:function(e){return e.brandName},results:[],id:function(e){return e.brandID}},account:{title:"Accounts",resultNameFilter:function(e){return e.firstName+" "+e.lastName},results:[],id:function(e){return e.accountID}},vendor:{title:"Vendors",resultNameFilter:function(e){return e.vendorName},results:[],id:function(e){return e.vendorID}}};var o,s=0;e.updateSearchResults=function(){e.loading=!0,e.showResults(),o&&n.cancel(o),o=n(function(){if(""===e.keywords)e.hideResults();else{e.showResults(),s=Object.keys(e.searchResults).length;for(var t in e.searchResults)!function(t){var i=r.getEntity(t,{keywords:e.keywords,pageShow:4,deferkey:"global-search-"+t});i.then(function(i){e.searchResults[t].results=[],e.searchResults[t].title=a.getRBKey("entity."+t.toLowerCase()+"_plural");for(var n in i.pageRecords)e.searchResults[t].results.push({name:e.searchResults[t].resultNameFilter(i.pageRecords[n]),link:r.buildUrl("entity.detail"+t)+"&"+t+"ID="+e.searchResults[t].id(i.pageRecords[n])});if(s--,0==s){e.loading=!1;var o=!1;for(var l in e.searchResults)if(e.searchResults[l].results.length){o=!0;break}e.resultsFound=o}})}(t)}},500)},e.showResults=function(){e.searchResultsOpen=!0,e.sidebarClass="sidebar s-search-width",i.onclick=function(t){var i=t.target.parentElement.offsetParent.classList.contains("sidebar");i||(e.hideResults(),e.$apply())}},e.hideResults=function(){e.searchResultsOpen=!1,e.sidebarClass="sidebar",e.search.$setPristine(),e.keywords="",i.onclick=null,e.loading=!1,e.resultsFound=!0;for(var t in e.searchResults)e.searchResults[t].results=[]}}return e.$inject=["$scope","$log","$window","$timeout","$hibachi","rbkeyService"],e}();t.GlobalSearchController=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.Factory=function(e){return function(t,i){return 0===t.trim().length?"":e("date")(new Date(t),i)}},e.Factory.$inject=["$filter"],e}();t.DateFilter=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.Factory=function(e){return function(t){return angular.isDefined(t)&&angular.isString(t)&&(t=t.replace("_","").toLowerCase(),t=e.getRBKey("entity."+t)),t}},e.Factory.$inject=["rbkeyService"],e}();t.EntityRBKey=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.Factory=function(){return function(e,t,i){return t=angular.isNumber(t)?t:3,i=i||"%",isNaN(e)?"":Math.round(e*Math.pow(10,t+2))/Math.pow(10,t)+i}},e}();t.PercentageFilter=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.Factory=function(e){return function(e,t,i,n){if(void 0===i&&(i=!0),void 0===n&&(n="..."),angular.isDefined(e)&&angular.isString(e)){if(!e)return"";if(t=parseInt(t,10),!t)return e;if(e.length<=t)return e;if(e=e.substr(0,t),i){var r=e.lastIndexOf(" ");r!=-1&&(e=e.substr(0,r))}return e+n}return e}},e.Factory.$inject=["rbkeyService"],e}();t.SWTrim=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e.Factory=function(){var e;return e=function(e,t){if(t===!1)return e;if((t||angular.isUndefined(t))&&angular.isArray(e)){var i=[],n=function(e){return angular.isDefined(e)&&null!=e[t]?e[t]:e};angular.forEach(e,function(e){for(var t=!1,r=0;r<i.length;r++)if(n(i[r])==n(e)){t=!0;break}t||i.push(e)})}return i}},e}();t.SWUnique=i},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(3),a=function(e){function t(t){var i=e.call(this,t)||this;return i.giftCards=[],i.userIsLoggedIn=function(){return""!==i.accountID},i}return n(t,e),t}(r.BaseEntity);t.Account=a},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(3),a=function(e){function t(t){return e.call(this,t)||this}return n(t,e),t}(r.BaseEntity);t.Address=a},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(3),a=function(e){function t(t){var i=e.call(this,t)||this;return i.orderRequirementsList="",i.orderPayments=[],i.orderItems=[],i.orderFulfillments=[],i.hasShippingAddressAndMethod=function(){return i.orderRequirementsList.indexOf("fulfillment")==-1},i.orderRequiresAccount=function(){return i.orderRequirementsList.indexOf("account")!=-1||!i.account.accountID},i.getOrderItemQuantitySum=function(){var e=0;if(angular.isDefined(i.orderItems)){for(var t in i.orderItems)e+=i.orderItems[t].quantity;return e}return e},i}return n(t,e),t}(r.BaseEntity);t.Cart=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(167);t.Account=n.Account;var r=i(168);t.Address=r.Address;var a=i(169);t.Cart=a.Cart;var o=i(171);t.OrderItem=o.OrderItem;var s=i(172);t.OrderPayment=s.OrderPayment;var l=i(173);t.Sku=l.Sku},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(3),a=function(e){function t(t){return e.call(this,t)||this}return n(t,e),t}(r.BaseEntity);t.OrderItem=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e}();t.OrderPayment=i},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(3),a=function(e){function t(t){var i=e.call(this,t)||this;return i.setNewQOH=function(e){i.newQOH=e},i.getNewQOH=function(){return i.newQOH},i}return n(t,e),t}(r.BaseEntity);t.Sku=a},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(5),a=function(e){function t(t){return e.call(this,t)||this}return n(t,e),t}(r.BaseTransient);t.BaseProcess=a},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(174),a=function(e){function t(t){var i=e.call(this,t)||this;return i.$injector=t,i}return n(t,e),t}(r.BaseProcess);t.Order_AddOrderPayment=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(175);t.Order_AddOrderPayment=n.Order_AddOrderPayment},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(12),a=function(e){function t(t,i,n,r,a,o){void 0===n&&(n="post"),void 0===r&&(r={"Content-Type":"application/json"});var s=e.call(this,t,i,n,r,a)||this;return s.observerService=o,s.observerService=o,s.promise.then(function(e){if(t.indexOf("api:main.post")!=-1&&i.entityName){var n=i.entityName+i.context.charAt(0).toUpperCase()+i.context.slice(0);e.errors?s.observerService.notify(n+"Failure",e.data):s.observerService.notify(n+"Success",e.data)}s.messages=e.messages}).catch(function(e){}),s}return n(t,e),t}(r.Request);t.AdminRequest=a},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(12),a=function(e){function t(t,i,n,r,a,o){void 0===r&&(r={"Content-Type":"application/x-www-form-urlencoded"});var s=e.call(this,t,i,n,r,a)||this;return s.observerService=o,s.failureActions=[],s.successfulActions=[],s.messages=[],s.hasSuccessfulAction=function(){return s.successfulActions.length>0},s.hasFailureAction=function(){return s.failureActions.length>0},s.observerService=o,s.promise.then(function(e){s.successfulActions=e.successfulActions;for(var t in s.successfulActions){var i=s.successfulActions[t];s.observerService.notify(i.split(".")[1]+"Success",e.data)}s.failureActions=e.failureActions;for(var t in s.failureActions){var n=s.failureActions[t];s.observerService.notify(n.split(".")[1]+"Failure",e.data)}s.messages=e.messages}).catch(function(e){}),s}return n(t,e),t}(r.Request);t.PublicRequest=a},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(2),a=function(e){function t(t,i,n){var r=e.call(this,t,i,n,"Account")||this;return r.$injector=t,r.$hibachi=i,r.utilityService=n,r}return n(t,e),t.$inject=["$injector","$hibachi","utilityService"],t}(r.BaseEntityService);t.AccountService=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.localStorageService=e,this.cacheData={},this.saveCacheData=function(){t.localStorageService.setItem("cacheData",t.cacheData)},this.hasKey=function(e){return!!angular.isDefined(t.cacheData[e])},this.dateExpired=function(e){return"forever"!=t.cacheData[e].expiresTime&&t.cacheData[e].expiresTime<Date.now()},this.put=function(e,i,n,r){return void 0===r&&(r="forever"),t.cacheData[e]={},t.cacheData[e].expiresTime=r,t.cacheData[e].dataPromise=i,t.cacheData[e].dataTarget=n,i.then(function(i){t.localStorageService.setItem(e,i[n])},function(i){delete t.cacheData[e]}),t.saveCacheData(),i},this.reload=function(e,i){return void 0===i&&(i="forever"),t.cacheData[e].expiresTime=i,t.cacheData[e].dataPromise.then(function(i){t.localStorageService.setItem(e,i[t.cacheData[e].dataTarget])},function(i){delete t.cacheData[e]}),t.saveCacheData(),t.cacheData[e].dataPromise},this.fetch=function(e){if(t.hasKey(e)&&!t.dateExpired(e)){if(t.localStorageService.hasItem(e))return t.localStorageService.getItem(e);t.put(e,t.cacheData[e].dataPromise,t.cacheData[e].dataTarget,t.cacheData[e].expiresTime).finally(function(){return t.localStorageService.getItem(e)})}},this.fetchOrReload=function(e,i){return angular.isDefined(t.fetch(e))?t.fetch(e):void t.reload(e,i).then(function(i){return t.fetch(e)},function(e){})},e.hasItem("cacheData")&&(this.cacheData=e.getItem("cacheData"))}return e.$inject=["localStorageService"],e}();t.CacheService=i},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(2),a=function(e){function t(t,i,n){var r=e.call(this,t,i,n,"Order","Cart")||this;return r.$injector=t,r.$hibachi=i,r.utilityService=n,r}return n(t,e),t.$inject=["$injector","$hibachi","utilityService"],t}(r.BaseEntityService);t.CartService=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.isDropAllowed=function(e){return!0},this.isMouseInFirstHalf=function(e,t,i,n){var r=n?e.offsetX||e.layerX:e.offsetY||e.layerY,a=n?t.offsetWidth:t.offsetHeight,o=n?t.offsetLeft:t.offsetTop;return o=i?o:0,r<o+a/2}}return e}();t.DraggableService=i},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(2),a=function(e){function t(t,i,n){var r=e.call(this,t,i,n)||this;return r.$injector=t,r.$hibachi=i,r.utilityService=n,r}return n(t,e),t.$inject=["$injector","$hibachi","utilityService"],t}(r.BaseEntityService);t.EntityService=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){var e=this;this.recordStates={},this.addRecord=function(t,i){angular.isUndefined(i)&&(i={isLoaded:!0}),e.recordStates[t]=i},this.updateState=function(t,i){angular.isUndefined(e.recordStates[t])&&(e.recordStates[t]={});for(var n in i)e.recordStates[t][n]=i[n]},this.getState=function(t,i){if(angular.isDefined(e.recordStates[t])&&angular.isDefined(i))var n=e.recordStates[t][i];else var n=e.recordStates[t];return!!angular.isDefined(n)&&n}}return e}();t.ExpandableService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.filterMatch=function(e,t,i){switch(t){case"!=":if(e!=i)return!0;break;case">":if(e>i)return!0;break;case">=":if(e>=i)return!0;break;case"<":if(e<i)return!0;break;case"<=":if(e<=i)return!0;break;case"is":if(e==i)return!0;break;case"is not":if(e!=i)return!0;break;default:if(e==i)return!0}return!1}}return e}();t.FilterService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){this.$addControl=function(e){},this.$removeControl=function(e){},this.$setValidity=function(e,t,i){},this.$setDirty=function(){},this.$setPristine=function(){},this.$commitViewValue=function(){},this.$rollbackViewValue=function(){},this.$setSubmitted=function(){},this.$setUntouched=function(){},this.name=e,this.object=t,this.editing=i}return e.$inject=["name","object","editing"],e}(),n=function(){function e(e){var t=this;this.$log=e,this.setPristinePropertyValue=function(e,i){t._pristinePropertyValue[e]=i},this.getPristinePropertyValue=function(e){return t._pristinePropertyValue[e]},this.setForm=function(e){t._forms[e.name]=e},this.getForm=function(e){return t._forms[e]},this.getForms=function(){return t._forms},this.getFormsByObjectName=function(e){var i=[];for(var n in t._forms)angular.isDefined(t._forms[n].$$swFormInfo.object)&&t._forms[n].$$swFormInfo.object.metaData.className===e&&i.push(t._forms[n]);return i},this.createForm=function(e,n,r){var a=new i(e,n,r);return t.setForm(a),a},this.resetForm=function(e){t.$log.debug("resetting form"),t.$log.debug(e);for(var i in e)angular.isDefined(e[i])&&"function"==typeof e[i].$setViewValue&&angular.isDefined(e[i].$viewValue)&&(t.$log.debug(e[i]),angular.isDefined(t.getPristinePropertyValue(i))?e[i].$setViewValue(t.getPristinePropertyValue(i)):e[i].$setViewValue(""),e[i].$setUntouched(!0),e[i].$render(),t.$log.debug(e[i]));e.$submitted=!1,e.$setPristine(),e.$setUntouched()},this.$log=e,this._forms={},this._pristinePropertyValue={}}return e.$inject=["$log"],e}();t.FormService=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c){var u=this;this.$location=e,this.$q=t,this.$log=i,this.$injector=n,this.localStorageService=r,this.alertService=a,this.appConfig=o,this.dialogService=s,this.utilityService=l,this.hibachiPathBuilder=c,this.urlParam=null,this.authHeader="Authorization",this.authPrefix="Bearer ",this.request=function(e){if(u.$log.debug("request"),"/"!==e.url.charAt(0))return e;if("GET"==e.method&&e.url.indexOf(".html")>=0&&e.url.indexOf("/")>=0)return e.url=e.url+"?instantiationKey="+u.appConfig.instantiationKey,e;e.cache=!0,e.headers=e.headers||{},u.localStorageService.hasItem("token")&&(e.headers["Auth-Token"]="Bearer "+u.localStorageService.getItem("token"));var t=u.utilityService.getQueryParamsFromUrl(e.url);if("GET"==e.method&&t[u.appConfig.action]&&"api:main.get"===t[u.appConfig.action]){u.$log.debug(e),e.method="POST",e.data={};var i={};angular.isDefined(e.params)&&(i=e.params);var n={};n.serializedJsonData=angular.toJson(i),n.context="GET",e.data=$.param(n),delete e.params,e.headers["Content-Type"]="application/x-www-form-urlencoded"}return e},this.requestError=function(e){return u.$q.reject(e)},this.response=function(e){if(e.data.messages){var t=u.alertService.formatMessagesToAlerts(e.data.messages);u.alertService.addAlerts(t)}return e},this.responseError=function(e){if(angular.isDefined(e.status)&&404!==e.status&&403!==e.status&&499!==e.status)if(e.data&&e.data.messages){var t=u.alertService.formatMessagesToAlerts(e.data.messages);u.alertService.addAlerts(t)}else{var i={msg:"there was error retrieving data",type:"error"};u.alertService.addAlert(i)}if(499===e.status&&e.data&&e.data.messages){var n=u.$injector.get("$http");if("timeout"===e.data.messages[0].message)u.dialogService.addPageDialog(u.hibachiPathBuilder.buildPartialsPath("preprocesslogin"),{});else if("invalid_token"===e.data.messages[0].message)return n.get(u.baseUrl+"?"+u.appConfig.action+"=api:main.login").then(function(t){if(200===t.status)return u.localStorageService.setItem("token",t.data.token),e.config.headers=e.config.headers||{},e.config.headers["Auth-Token"]="Bearer "+t.data.token,n(e.config).then(function(e){return e})},function(e){return e})}return e},this.$location=e,this.$q=t,this.$log=i,this.$injector=n,this.localStorageService=r,this.alertService=a,this.appConfig=o,this.dialogService=s,this.utilityService=l,this.hibachiPathBuilder=c,this.baseUrl=o.baseURL}return e.$inject=["$location","$q","$log","$injector","localStorageService","alertService","appConfig","dialogService","utilityService","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o,s,l,c,u){return new e(t,i,n,r,a,o,s,l,c,u)};return t.$inject=["$location","$q","$log","$injector","localStorageService","alertService","appConfig","dialogService","utilityService","hibachiPathBuilder"],t},e}();t.HibachiInterceptor=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){var e=this;this.setBaseURL=function(t){e.baseURL=t},this.setBasePartialsPath=function(t){e.basePartialsPath=t},this.setApiSubsystemName=function(t){e.apiSubsystemName=t},this.buildPartialsPath=function(t){if(angular.isDefined(e.baseURL)&&angular.isDefined(e.basePartialsPath))return(e.baseURL+e.basePartialsPath+t).replace("//","/");throw"need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there"}}return e}();t.HibachiPathBuilder=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.loginDisplayed=!1,this.isValidToken=!0,this.setToken=function(e){t.token=e;var i=e.split(".");try{t.jwtInfo=angular.fromJson(window.atob(i[0]).trim()),t.session=angular.fromJson(window.atob(i[1]).trim())}catch(e){t.isValidToken=!1}},this.config=e}return e.$inject=["appConfig"],e}();t.HibachiScope=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c,u,d,p,f,h,g){var m=this;this.$window=e,this.$q=t,this.$http=i,this.$timeout=n,this.$log=r,this.$rootScope=a,this.$location=o,this.$anchorScroll=s,this.requestService=l,this.utilityService=c,this.formService=u,this.rbkeyService=d,this.appConfig=p,this._config=f,this._jsEntities=h,
this._jsEntityInstances=g,this._deferred={},this._resourceBundle={},this.buildUrl=function(e,t){var i=m.appConfig.action,n=m.appConfig.baseURL;return t=t||"",angular.isDefined(t)&&t.length&&0!==t.indexOf("&")&&(t="&"+t),n+"?"+i+"="+e+t},this.getUrlWithActionPrefix=function(){return m.appConfig.baseURL+"/index.cfm/?"+m.appConfig.action+"="},this.getJsEntities=function(){return m._jsEntities},this.setJsEntities=function(e){m._jsEntities=e},this.getJsEntityInstances=function(){return m._jsEntityInstances},this.setJsEntityInstances=function(e){m._jsEntityInstances=e},this.getEntityExample=function(e){return m._jsEntityInstances[e]},this.getEntityMetaData=function(e){return m._jsEntityInstances[e].metaData},this.getPropertyByEntityNameAndPropertyName=function(e,t){return m.getEntityMetaData(e)[t]},this.getPrimaryIDPropertyNameByEntityName=function(e){return m.getEntityExample(e).$$getIDName()},this.getEntityHasPropertyByEntityName=function(e,t){return angular.isDefined(m.getEntityMetaData(e)[t])},this.getBaseEntityAliasFromName=function(e){return"_"+e},this.getPropertyIsObjectByEntityNameAndPropertyIdentifier=function(e,t){var i=m.getLastEntityNameInPropertyIdentifier(e,t),n=m.getEntityMetaData(i);return angular.isDefined(n[m.utilityService.listLast(t,".")].cfc)},this.getLastEntityNameInPropertyIdentifier=function(e,t){if(!e)throw"No entity name was supplied to getLastEntityNameInPropertyIdentifier in hibachi service.";"_"===t.charAt(0)&&(t=m.utilityService.listRest(t.replace(/_/g,"."),"."));var i=t.split(".");if(i[0]===e.toLowerCase()&&i.shift(),i.length>1){var n=m.getEntityMetaData(e),r=i.shift();if(!n[r]||!n[r].cfc)throw"The Property Identifier "+t+" is invalid for the entity "+e;var a=n[r].cfc,o=i.join(".");return m.getLastEntityNameInPropertyIdentifier(a,o)}return e},this.populateEntity=function(e,t){var i=m.newEntity(e);return angular.extend(i.data,t),i},this.populateCollection=function(e,t){var i=[],n=m;return angular.forEach(e,function(e,r){var a=n["new"+t.baseEntityName.replace(m.appConfig.applicationKey,"")]();angular.forEach(t.columns,function(i,r){var o=i.propertyIdentifier.replace(t.baseEntityAlias.toLowerCase(),"");o=m.utilityService.replaceAll(o,"_","."),"."===o.charAt(0)&&(o=o.slice(1));var s=o.split("."),l=o.replace(/\./g,"_"),c=a;angular.forEach(s,function(t,i){if(i===s.length-1)if(angular.isObject(e[l])&&"many-to-one"===c.metaData[t].fieldtype){var r=n["new"+c.metaData[t].cfc]();r.$$init(e[l][0]),c["$$set"+c.metaData[t].name.charAt(0).toUpperCase()+c.metaData[t].name.slice(1)](r)}else angular.isArray(e[l])&&"one-to-many"===c.metaData[t].fieldtype?angular.forEach(e[l],function(e,i){var r=n["new"+c.metaData[t].cfc]();r.$$init(e),c["$$add"+c.metaData[t].singularname.charAt(0).toUpperCase()+c.metaData[t].singularname.slice(1)](r)}):c.data[t]=e[l];else{var a=c.metaData[t];r=angular.isUndefined(c.data[t])?"one-to-many"===a.fieldtype?[]:n["new"+a.cfc]():c.data[t],c["$$set"+a.name.charAt(0).toUpperCase()+a.name.slice(1)](r),c=r}})}),i.push(a)}),i},this.getDefer=function(e){return m._deferred[e]},this.cancelPromise=function(e){var t=m.getDefer(e);angular.isDefined(t)&&t.resolve({messages:[{messageType:"error",message:"User Cancelled"}]})},this.newEntity=function(e){if(void 0!=e){var t=e.charAt(0).toLowerCase()+e.slice(1)+"Service";if(angular.element(document.body).injector().has(t)){var i=angular.element(document.body).injector().get(t),n=i["new"+e];if(void 0!=i["new"+e]&&n&&n.constructor&&n.call&&n.apply)return i["new"+e]()}return new m._jsEntities[e]}},this.getEntityDefinition=function(e){return m._jsEntities[e]},this.getEntity=function(e,t){var i=m.appConfig.apiSubsystemName||"api";angular.isUndefined(t)&&(t={}),angular.isDefined(t.deferKey)&&m.cancelPromise(t.deferKey);var n={};if("string"==typeof t)var r=m.getUrlWithActionPrefix()+i+":main.get&entityName="+e+"&entityID="+t;else{n["P:Current"]=t.currentPage||1,n["P:Show"]=t.pageShow||10,n.keywords=t.keywords||"",n.columnsConfig=t.columnsConfig||"",n.filterGroupsConfig=t.filterGroupsConfig||"",n.joinsConfig=t.joinsConfig||"",n.orderByConfig=t.orderByConfig||"",n.groupBysConfig=t.groupBysConfig||"",n.isDistinct=t.isDistinct||!1,n.propertyIdentifiersList=t.propertyIdentifiersList||"",n.allRecords=t.allRecords||!1,n.defaultColumns=t.defaultColumns||!0,n.processContext=t.processContext||"";var r=m.getUrlWithActionPrefix()+i+":main.get&entityName="+e}angular.isDefined(t.id)&&(r+="&entityId="+t.id);var a=function(e){return angular.isString(e)&&(e=JSON.parse(e)),e};angular.isDefined(t.transformResponse)&&(a=function(e){var e=JSON.parse(e);return angular.isDefined(e.records)&&(e=t.transformResponse(e.records)),e});var o=m.requestService.newAdminRequest(r,n);return t.deferKey&&(m._deferred[t.deferKey]=o),o.promise},this.getResizedImageByProfileName=function(e,t){var i=m.getUrlWithActionPrefix()+"api:main.getResizedImageByProfileName&context=getResizedImageByProfileName&profileName="+e+"&skuIDs="+t,n=m.requestService.newPublicRequest(i);return n.promise},this.getEventOptions=function(e){var t=m.getUrlWithActionPrefix()+"api:main.getEventOptionsByEntityName&entityName="+e,i=m.requestService.newAdminRequest(t);return i.promise},this.getProcessOptions=function(e){var t=m.getUrlWithActionPrefix()+"api:main.getProcessMethodOptionsByEntityName&entityName="+e,i=m.requestService.newAdminRequest(t);return i.promise},this.checkUniqueOrNullValue=function(e,t,i){var n=e.metaData.className,r=e.$$getID();return m.$http.get(m.getUrlWithActionPrefix()+"api:main.getValidationPropertyStatus&object="+n+"&objectID="+r+"&propertyidentifier="+t+"&value="+escape(i)).then(function(e){return e.data.uniqueStatus})},this.checkUniqueValue=function(e,t,i){var n=e.metaData.className,r=e.$$getID();return m.$http.get(m.getUrlWithActionPrefix()+"api:main.getValidationPropertyStatus&object="+n+"&objectID="+r+"&propertyidentifier="+t+"&value="+escape(i)).then(function(e){return e.data.uniqueStatus})},this.getPropertyDisplayData=function(e,t){var i=m.getUrlWithActionPrefix()+"api:main.getPropertyDisplayData&entityName="+e,n={};n.propertyIdentifiersList=t.propertyIdentifiersList||"";var r=m.requestService.newAdminRequest(i,n);return r.promise},this.getPropertyDisplayOptions=function(e,t){var i=m.getUrlWithActionPrefix()+"api:main.getPropertyDisplayOptions&entityName="+e,n={};n.property=t.property||t.propertyIdentifier||"",angular.isDefined(t.argument1)&&(n.argument1=t.argument1);var r=m.requestService.newAdminRequest(i,n);return r.promise},this.getPropertyTitle=function(e,t){var i=t[e];return angular.isDefined(i.hb_rbkey)?t.$$getRBKey(i.hb_rbkey):angular.isUndefined(i.persistent)?angular.isDefined(i.fieldtype)&&angular.isDefined(i.cfc)&&["one-to-many","many-to-many"].indexOf(i.fieldtype)>-1?t.$$getRBKey("entity."+t.className.toLowerCase()+"."+e+",entity."+i.cfc+"_plural"):angular.isDefined(i.fieldtype)&&angular.isDefined(i.cfc)&&["many-to-one"].indexOf(i.fieldtype)>-1?t.$$getRBKey("entity."+t.className.toLowerCase()+"."+e.toLowerCase()+",entity."+i.cfc):t.$$getRBKey("entity."+t.className.toLowerCase()+"."+e.toLowerCase()):t.isProcessObject?angular.isDefined(i.fieldtype)&&angular.isDefined(i.cfc)&&["one-to-many","many-to-many"].indexOf(i.fieldtype)>-1?t.$$getRBKey("processObject."+t.className.toLowerCase()+"."+e.toLowerCase()+",entity."+i.cfc.toLowerCase()+"_plural"):angular.isDefined(i.fieldtype)&&angular.isDefined(i.cfc)?t.$$getRBKey("processObject."+t.className.toLowerCase()+"."+e.toLowerCase()+",entity."+i.cfc.toLowerCase()):t.$$getRBKey("processObject."+t.className.toLowerCase()+"."+e.toLowerCase()):t.$$getRBKey("object."+t.className.toLowerCase()+"."+e.toLowerCase())},this.saveEntity=function(e,t,i,n){var r=m.getUrlWithActionPrefix()+"api:main.post";angular.isDefined(e)&&(i.entityName=e),angular.isDefined(t)&&(i.entityID=t),angular.isDefined(n)&&(i.context=n);var a=m.requestService.newAdminRequest(r,i);return a.promise},this.getExistingCollectionsByBaseEntity=function(e){var t=m.getUrlWithActionPrefix()+"api:main.getExistingCollectionsByBaseEntity&entityName="+e,i=m.requestService.newAdminRequest(t);return i.promise},this.getFilterPropertiesByBaseEntityName=function(e,t){void 0===t&&(t=!1);var i=m.getUrlWithActionPrefix()+"api:main.getFilterPropertiesByBaseEntityName&EntityName="+e+"&includeNonPersistent="+t,n=m.requestService.newAdminRequest(i);return n.promise},this.login=function(e,t){var i=m.appConfig.baseURL+"/index.cfm/api/auth/login",n={emailAddress:e,password:t},r=m.requestService.newAdminRequest(i,n);return r.promise},this.getResourceBundle=function(e){var e=e||m.appConfig.rbLocale;if(m._resourceBundle[e])return m._resourceBundle[e];var t=m.getUrlWithActionPrefix()+"api:main.getResourceBundle&instantiationKey="+m.appConfig.instantiationKey+"&locale="+e,i=m.requestService.newAdminRequest(t);return i.promise},this.getCurrencies=function(){var e=m.getUrlWithActionPrefix()+"api:main.getCurrencies&instantiationKey="+m.appConfig.instantiationKey,t=m.requestService.newAdminRequest(e);return t.promise},this.getConfig=function(){return m._config},this.getConfigValue=function(e){return m._config[e]},this.setConfigValue=function(e,t){m._config[e]=t},this.setConfig=function(e){m._config=e},this.$window=e,this.$q=t,this.$http=i,this.$timeout=n,this.$log=r,this.$rootScope=a,this.$location=o,this.$anchorScroll=s,this.requestService=l,this.utilityService=c,this.formService=u,this.rbkeyService=d,this.appConfig=p,this._config=f,this._jsEntities=h,this._jsEntityInstances=g}return e.$inject=["$window","$q","$http","$timeout","$log","$rootScope","$location","$anchorScroll","requestService","utilityService","formService","rbkeyService","appConfig","_config","_jsEntities","_jsEntityInstances"],e}();t.HibachiService=i;var n=function(){function e(e){var t=this;this._config={},this.angular=angular,this.setJsEntities=function(e){t._jsEntities=e},this.getConfig=function(){return t._config},this.getConfigValue=function(e){return t._config[e]},this.setConfigValue=function(e,i){t._config[e]=i},this.setConfig=function(e){t._config=e},this._config=e,this.$get.$inject=["$window","$q","$http","$timeout","$log","$rootScope","$location","$anchorScroll","requestService","utilityService","formService","rbkeyService","appConfig"]}return e.$inject=["appConfig"],e.prototype.$get=function(e,t,n,r,a,o,s,l,c,u,d,p,f){return new i(e,t,n,r,a,o,s,l,c,u,d,p,f,this._config,this._jsEntities,this._jsEntityInstances)},e}();t.$Hibachi=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c,u,d,p,f,h){var g=d,m={},y={},v=d.modelConfig.entities,b=d.modelConfig.validations,w=d.modelConfig.defaultValues;angular.forEach(v,function(i){if(h&&h[i.className]){var n=h[i.className];for(var r in n){var a=n[r];for(var o in a.attributes){var c=a.attributes[o];c.attributeSet=a,c.isAttribute=!0,i[o]=c}}}e["get"+i.className]=function(t){var n=e.newEntity(i.className),r=e.getEntity(i.className,t);return r.then(function(r){if(angular.isDefined(r.processData)){n.$$init(r.data);var a=e["new"+i.className+"_"+t.processContext.charAt(0).toUpperCase()+t.processContext.slice(1)]();a.$$init(r.processData),a.data[i.className.charAt(0).toLowerCase()+i.className.slice(1)]=n,n.processObject=a}else n.populate?n.populate(r):n.$$init(r)}),{promise:r,value:n}},e["new"+i.className]=function(){var t=i.className,n=t.charAt(0).toLowerCase()+t.slice(1)+"Service";if(angular.element(document.body).injector().has(n)){var r=angular.element(document.body).injector().get(n);if(r["new"+i.className])return r["new"+i.className]()}return e.newEntity(i.className)},i.isProcessObject=i.className.indexOf("_")>=0,m[i.className]=function(){this.validations=b[i.className],this.metaData=i,this.metaData.className=i.className,n&&(this.attributeMetaData=n),i.hb_parentPropertyName&&(this.metaData.hb_parentPropertyName=i.hb_parentPropertyName),i.hb_childPropertyName&&(this.metaData.hb_childPropertyName=i.hb_childPropertyName),this.metaData.$$getRBKey=function(e,t){return u.rbKey(e,t)},this.metaData.$$getPropertyTitle=function(e){return S(e,this)},this.metaData.$$getPropertyHint=function(e){return P(e,this)},this.metaData.$$getManyToManyName=function(e){var t=this;for(var i in t)if(t[i].singularname===e)return t[i].name},this.metaData.$$getPropertyFieldType=function(e){return D(e,this)},this.metaData.$$getPropertyFormatType=function(e){if(this[e])return k(e,this)},this.metaData.$$getDetailTabs=function(){var e=s.defer(),i=g.baseURL+"/index.cfm/?"+d.action+"=api:main.getDetailTabs&entityName="+this.className;return t.get(i).success(function(t){e.resolve(t)}).error(function(t){e.reject(t)}),e.promise},this.$$getFormattedValue=function(e,t){return O(e,t,this)},this.data={},this.modifiedData={};var e=this;i.isProcessObject&&!function(e){m[e.className].prototype={$$getID:function(){return""},$$getIDName:function(){var e="";return e}}}(i),angular.forEach(i,function(t){angular.isObject(t)&&angular.isDefined(t.name)&&(w&&w[i.className]&&null!=w[i.className][t.name]?e.data[t.name]=angular.copy(w[i.className][t.name]):e.data[t.name]=void 0)})},m[i.className].prototype={$$getPropertyByName:function(e){return this["$$get"+e.charAt(0).toUpperCase()+e.slice(1)]()},$$isPersisted:function(){return""!==this.$$getID()},$$init:function(e){C(this,e)},$$save:function(){return _(this)},$$delete:function(){return T(this)},$$getValidationsByProperty:function(e){return F(this,e)},$$getValidationByPropertyAndContext:function(e,t){return M(this,e,t)},$$getTitleByPropertyIdentifier:function(t){if(t.split(".").length>1){var i=l.listFirst(t,"."),n=this.metaData[i].cfc,r=e.newEntity(n);return r.$$getTitleByPropertyIdentifier(t.replace(i,""))}return this.metaData.$$getPropertyTitle(t)},$$getMetaData:function(e){return void 0===e?this.metaData:(angular.isDefined(this.metaData[e].name)&&angular.isUndefined(this.metaData[e].nameCapitalCase)&&(this.metaData[e].nameCapitalCase=this.metaData[e].name.charAt(0).toUpperCase()+this.metaData[e].name.slice(1)),angular.isDefined(this.metaData[e].cfc)&&angular.isUndefined(this.metaData[e].cfcProperCase)&&(this.metaData[e].cfcProperCase=this.metaData[e].cfc.charAt(0).toLowerCase()+this.metaData[e].cfc.slice(1)),this.metaData[e])}},angular.forEach(n,function(e){angular.forEach(e.attributes,function(e){e&&e.attributeCode&&Object.defineProperty(m[i.className].prototype,e.attributeCode,{configurable:!0,enumerable:!1,get:function(){if(null==e||null!=this.data[e.attributeCode])return this.data[e.attributeCode]},set:function(t){this.data[e.attributeCode]=t}})})}),angular.forEach(i,function(t){if(angular.isObject(t)&&angular.isDefined(t.name))if(angular.isDefined(t.fieldtype))if(["many-to-one"].indexOf(t.fieldtype)>=0)m[i.className].prototype["$$get"+t.name.charAt(0).toUpperCase()+t.name.slice(1)]=function(){var n=this;if(angular.isDefined(this["$$get"+this.$$getIDName().charAt(0).toUpperCase()+this.$$getIDName().slice(1)]())){var r={columnsConfig:angular.toJson([{propertyIdentifier:"_"+this.metaData.className.toLowerCase()+"_"+t.name}]),joinsConfig:angular.toJson([{associationName:t.name,alias:"_"+this.metaData.className.toLowerCase()+"_"+t.name}]),filterGroupsConfig:angular.toJson([{filterGroup:[{propertyIdentifier:"_"+this.metaData.className.toLowerCase()+"."+this.$$getIDName(),comparisonOperator:"=",value:this.$$getID()}]}]),allRecords:!0},a=e.getEntity(i.className,r);return a.then(function(i){for(var r in i.records){var a=e.newEntity(n.metaData[t.name].cfc);angular.isArray(i.records[r][t.name])?a.$$init(i.records[r][t.name][0]):a.$$init(i.records[r][t.name]),n["$$set"+t.name.charAt(0).toUpperCase()+t.name.slice(1)](a)}}),a}return null},m[i.className].prototype["$$set"+t.name.charAt(0).toUpperCase()+t.name.slice(1)]=function(e){var i=this,n=this.metaData,r="";if(angular.isUndefined(e)){if(angular.isDefined(i.data[t.name])&&delete i.data[t.name],!i.parents)return;for(var a=0;a<=i.parents.length;a++)angular.isDefined(i.parents[a])&&i.parents[a].name==t.name.charAt(0).toLowerCase()+t.name.slice(1)&&i.parents.splice(a,1)}else{if(t.name==="parent"+this.metaData.className){var o="child"+this.metaData.className;r=e.metaData.$$getManyToManyName(o)}else e.metaData&&(r=e.metaData.$$getManyToManyName(n.className.charAt(0).toLowerCase()+n.className.slice(1)));if(angular.isUndefined(i.parents)&&(i.parents=[]),i.parents.push(i.metaData[t.name]),angular.isDefined(r)&&r.length){angular.isUndefined(e.children)&&(e.children=[]);var s=e.metaData[r];e.children.indexOf(s)===-1&&e.children.push(s),angular.isUndefined(e.data[r])&&(e.data[r]=[]),e.data[r].push(i)}i.data[t.name]=e}},"data"!==t.name&&"validations"!==t.name&&Object.defineProperty(m[i.className].prototype,t.name,{configurable:!0,enumerable:!1,get:function(){if(null!=this.data[t.name])return this.data[t.name]},set:function(e){this["$$set"+t.name.charAt(0).toUpperCase()+t.name.slice(1)](e)}});else if(["one-to-many","many-to-many"].indexOf(t.fieldtype)>=0){if(!t.singularname)throw"need to define a singularname for "+t.fieldtype;m[i.className].prototype["$$add"+t.singularname.charAt(0).toUpperCase()+t.singularname.slice(1)]=function(i){if(angular.isUndefined(i))var i=e.newEntity(this.metaData[t.name].cfc);var n=this.metaData;if("one-to-many"===n[t.name].fieldtype)i.data[n[t.name].fkcolumn.slice(0,-2)]=this;else if("many-to-many"===n[t.name].fieldtype){var r=i.metaData.$$getManyToManyName(n.className.charAt(0).toLowerCase()+this.metaData.className.slice(1));angular.isUndefined(i.data[r])&&(i.data[r]=[]),i.data[r].push(this)}if(angular.isDefined(n[t.name])){angular.isDefined(i.metaData[n[t.name].fkcolumn.slice(0,-2)])&&(angular.isUndefined(i.parents)&&(i.parents=[]),i.parents.push(i.metaData[n[t.name].fkcolumn.slice(0,-2)])),angular.isUndefined(this.children)&&(this.children=[]);var a=n[t.name];this.children.indexOf(a)===-1&&this.children.push(a)}return angular.isUndefined(this.data[t.name])&&(this.data[t.name]=[]),this.data[t.name].push(i),i},m[i.className].prototype["$$get"+t.name.charAt(0).toUpperCase()+t.name.slice(1)]=function(){var i=this;if(angular.isDefined(this["$$get"+this.$$getIDName().charAt(0).toUpperCase()+this.$$getIDName().slice(1)])){var n={filterGroupsConfig:angular.toJson([{filterGroup:[{propertyIdentifier:"_"+t.cfc.toLowerCase()+"."+t.fkcolumn.replace("ID","")+"."+this.$$getIDName(),comparisonOperator:"=",value:this.$$getID()}]}]),allRecords:!0},r=e.getEntity(t.cfc,n);return r.then(function(e){var n=[];for(var r in e.records){var a=i["$$add"+t.singularname.charAt(0).toUpperCase()+t.singularname.slice(1)]();a.$$init(e.records[r]),angular.isUndefined(i[t.name])&&(i[t.name]=[]),n.push(a)}i.data[t.name]=n}),r}},Object.defineProperty(m[i.className].prototype,t.name,{configurable:!0,enumerable:!1,get:function(){if(null!=this.data[t.name])return this.data[t.name]},set:function(i){if(this.data[t.name]=[],angular.isArray(i))for(var n=0;n<i.length;n++){var r=i[n],a=e.newEntity(this.metaData[t.name].cfc);a.$$init(r),this["$$add"+t.singularname.charAt(0).toUpperCase()+t.singularname.slice(1)](a)}else{var a=e.newEntity(this.metaData[t.name].cfc);a.$$init(i),this["$$add"+t.singularname.charAt(0).toUpperCase()+t.singularname.slice(1)](a)}}})}else["id"].indexOf(t.fieldtype)>=0&&(m[i.className].prototype.$$getID=function(){return this.data[this.$$getIDName()]},m[i.className].prototype.$$getIDName=function(){var e=t.name;return e}),"data"!==t.name&&"validations"!==t.name&&Object.defineProperty(m[i.className].prototype,t.name,{configurable:!0,enumerable:!1,get:function(){if(null!=this.data[t.name])return this.data[t.name]},set:function(e){this.data[t.name]=e}}),m[i.className].prototype["$$get"+t.name.charAt(0).toUpperCase()+t.name.slice(1)]=function(){return this.data[t.name]};else"data"!==t.name&&"validations"!==t.name&&Object.defineProperty(m[i.className].prototype,t.name,{configurable:!0,enumerable:!1,get:function(){if(null!=this.data[t.name])return this.data[t.name]},set:function(e){this.data[t.name]=e}}),m[i.className].prototype["$$get"+t.name.charAt(0).toUpperCase()+t.name.slice(1)]=function(){return this.data[t.name]}})}),e.setJsEntities(m),angular.forEach(m,function(e){var t=new e;y[t.metaData.className]=t}),e.setJsEntityInstances(y);var C=function(e,t){f.init(e,t)},S=function(t,i){return e.getPropertyTitle(t,i)},P=function(e,t){var i=t[e],n="";return n=angular.isDefined(i.hb_rbkey)?t.$$getRBKey(i.hb_rbkey+"_hint"):angular.isUndefined(i.persistent)||angular.isDefined(i.persistent)&&i.persistent===!0?t.$$getRBKey("entity."+t.className.toLowerCase()+"."+e.toLowerCase()+"_hint"):t.$$getRBKey("object."+t.className.toLowerCase()+"."+e.toLowerCase()),"_missing"!==n.slice(-8)?n:""},D=function(e,t){var i=t[e];if(angular.isDefined(i.hb_formfieldtype))return i.hb_formfieldtype;if(angular.isUndefined(i.fieldtype)||"column"===i.fieldtype){var n="";if(angular.isDefined(i.ormtype)?n=i.ormtype:angular.isDefined(i.type)&&(n=i.type),["boolean","yes_no","true_false"].indexOf(n)>-1)return"yesno";if(["date","timestamp"].indexOf(n)>-1)return"dateTime";if("array"===n)return"select";if("struct"===n)return"checkboxgroup";if(e.indexOf("password")>-1)return"password"}else{if(angular.isDefined(i.fieldtype)&&"many-to-one"===i.fieldtype)return"select";if(angular.isDefined(i.fieldtype)&&"one-to-many"===i.fieldtype)return"There is no property field type for one-to-many relationship properties, which means that you cannot get a fieldtype for "+e;if(angular.isDefined(i.fieldtype)&&"many-to-many"===i.fieldtype)return"listingMultiselect"}return"text"},k=function(e,t){if(!e||!t)return"none";var i=t[e];if(i.hb_formattype)return i.hb_formattype;if(angular.isUndefined(i.fieldtype)||"column"===i.fieldtype){var n="";if(angular.isDefined(i.ormtype)?n=i.ormtype:angular.isDefined(i.type)&&(n=i.type),["boolean","yes_no","true_false"].indexOf(n)>-1)return"yesno";if(["date","timestamp"].indexOf(n)>-1)return"dateTime";if(["big_decimal"].indexOf(n)>-1&&"weight"===e.slice(-6))return"weight";if(["big_decimal"].indexOf(n)>-1)return"currency"}return"none"},I=function(e){return!!(angular.isString(e)||angular.isNumber(e)||angular.isDate(e)||e===!1||e===!0)},O=function(e,t,i){var n=i.$$getPropertyByName(e);if(angular.isUndefined(t)&&(t=i.metaData.$$getPropertyFormatType(e)),"custom"===t);else if("rbkey"===t)return angular.isDefined(n)?i.$$getRBKey("entity."+i.metaData.className.toLowerCase()+"."+e.toLowerCase()+"."+n):"";if(angular.isUndefined(n)){var r=i.metaData[e];return angular.isDefined(r.hb_nullRBKey)?i.$$getRbKey(r.hb_nullRBKey):""}if(I(n)){var a={};return angular.isDefined(i.data.currencyCode)&&(a.currencyCode=i.$$getCurrencyCode()),l.formatValue(n,t,a,i)}},T=function(t){var i=t.metaData.className,n=t.$$getID(),r="delete";return e.saveEntity(i,n,{},r)},A=function(e,t){for(var i in e)if(angular.isArray(e[i])){var n=e[i];t.data[i];for(var r in n){var a=n[r],o=t.data[i][r];A(a,o)}}else if(angular.isObject(e[i]))for(var s in e[i])A(e[i][s],t.data[i][s]);else t.data[i]=e[i]},_=function(t){var n=s.defer();return i(function(){var i=t.$$getID(),r=E(t);if(r.valid){var s={};s.serializedJsonData=l.toJson(r.value);var c="",u="save";if(1===t.metaData.isProcessObject){var d=r.objectLevel.metaData.className.split("_");c=d[0],u=d[1]}else c=r.objectLevel.metaData.className;var f=e.saveEntity(c,i,s,u);f.then(function(e){var t=e.data;angular.isDefined(e.SUCCESS)&&e.SUCCESS===!0||angular.isDefined(e.success)&&e.success===!0?(a.url()=="/entity/"+c+"/create"&&e.data[r.objectLevel.$$getIDName()]&&a.path("/entity/"+c+"/"+e.data[r.objectLevel.$$getIDName()],!1),A(t,r.objectLevel),n.resolve(t),p.notify("saveSuccess",t),p.notify("saveSuccess"+c,t)):(n.reject(angular.isDefined(e.messages)?e.messages:e),p.notify("saveFailed",e),p.notify("saveFailed"+c,e))},function(e){n.reject(e),p.notify("saveFailed",e),p.notify("saveFailed"+c,e)})}else{var h=$("input.ng-invalid:first:visible:enabled");if(angular.isDefined(h)){h.focus();h.attr("id");o()}n.reject("Input is invalid."),p.notify("validationFailed"),p.notify("validationFailed"+c)}}),n.promise},E=function(e){var t={};return t=x(e)},x=function(e){return f.getModifiedDataByInstance(e)},F=function(e,t){return f.getValidationsByProperty(e,t)},M=function(e,t,i){return f.getValidationByPropertyAndContext(e,t,i)};return e}return e.$inject=["$delegate","$http","$timeout","$log","$rootScope","$location","$anchorScroll","$q","utilityService","formService","rbkeyService","appConfig","observerService","hibachiValidationService","attributeMetaData"],e}();t.HibachiServiceDecorator=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.$log=e,this.getObjectSaveLevel=function(e){var i=e,n=e.$$getID();return angular.forEach(e.parents,function(r){if(angular.isDefined(e.data[r.name])&&""===e.data[r.name].$$getID()&&(angular.isUndefined(n)||!n.trim().length)){var a=e.data[r.name],o=a.$$getID();""===o&&a.forms&&(i=t.getObjectSaveLevel(a))}}),i},this.getModifiedDataByInstance=function(e){var i={},n=t.getObjectSaveLevel(e);t.$log.debug("objectSaveLevel : "+n);var r=t.validateObject(n);return t.$log.debug("validateObject data"),t.$log.debug(r.value),i={objectLevel:n,value:r.value,valid:r.valid}},this.getValidationByPropertyAndContext=function(e,i,n){var r=t.getValidationsByProperty(e,i);for(var a in r){var o=r[a].contexts.split(",");for(var s in o)if(o[s]===n)return r[a]}},this.getValidationsByProperty=function(e,t){return e.validations.properties[t]},this.validateObject=function(e){var i={},n=!0,r=e.forms;t.$log.debug("process base level data");for(var a in r){var o=r[a];if(o.$setSubmitted(),o.$dirty&&o.$valid){for(var s in o)if(t.$log.debug("key:"+s),"$"!==s.charAt(0)&&angular.isObject(o[s])){var l=o[s];"undefined"!=typeof l.$modelValue&&""!==l.$modelValue&&(l.$dirty=!0),angular.isDefined(l.$valid)&&l.$valid===!0&&(l.$dirty===!0||o.autoDirty&&1==o.autoDirty)&&(angular.isDefined(e.metaData[s])&&angular.isDefined(e.metaData[s].hb_formfieldtype)&&"json"===e.metaData[s].hb_formfieldtype?i[s]=angular.toJson(l.$modelValue):i[s]=l.$modelValue)}}else o.$valid||(n=!1)}if(i[e.$$getIDName()]=e.$$getID(),t.$log.debug(i),t.$log.debug("process parent data"),angular.isDefined(e.parents))for(var c in e.parents){var u=e.parents[c],d=e.data[u.name];angular.isUndefined(i[u.name])&&(i[u.name]={});var r=d.forms;for(var a in r){var o=r[a];if(o.$setSubmitted(),o.$dirty&&o.$valid){for(var s in o)if("$"!==s.charAt(0)&&angular.isObject(o[s])){var l=o[s];"undefined"!=typeof l.$modelValue&&""!==l.$modelValue&&(l.$dirty=!0),angular.isDefined(l)&&angular.isDefined(l.$valid)&&l.$valid===!0&&(l.$dirty===!0||o.autoDirty&&1==o.autoDirty)&&(angular.isDefined(d.metaData[s])&&angular.isDefined(d.metaData[s].hb_formfieldtype)&&"json"===d.metaData[s].hb_formfieldtype?i[u.name][s]=angular.toJson(l.$modelValue):i[u.name][s]=l.$modelValue)}}else o.$valid||(n=!1)}i[u.name][d.$$getIDName()]=d.$$getID()}t.$log.debug(i),t.$log.debug("begin child data");var p=t.validateChildren(e);return t.$log.debug("child Data"),t.$log.debug(p),angular.extend(i,p),{valid:n,value:i}},this.validateChildren=function(e){var i={};return angular.isDefined(e.children)&&e.children.length&&(i=t.getDataFromChildren(e)),i},this.init=function(e,t){for(var i in t)if("$"!==i.charAt(0)&&angular.isDefined(e.metaData[i])){var n=e.metaData[i];angular.isDefined(n)&&angular.isDefined(n.hb_formfieldtype)&&"json"===n.hb_formfieldtype?""!==t[i].trim()&&(e.data[i]=angular.fromJson(t[i])):e.data[i]=t[i]}},this.processForm=function(e,i){t.$log.debug("begin process form");var n={};e.$setSubmitted();for(var r in e)if("$"!==r.charAt(0)&&angular.isObject(e[r])){var a=e[r];a.$modelValue&&(a.$dirty=!0),angular.isDefined(a)&&angular.isDefined(a)&&a.$valid===!0&&(a.$dirty===!0||e.autoDirty&&1==e.autoDirty)&&(angular.isDefined(i.metaData[r])&&angular.isDefined(i.metaData[r].hb_formfieldtype)&&"json"===i.metaData[r].hb_formfieldtype?n[r]=angular.toJson(a.$modelValue):n[r]=a.$modelValue)}return n[i.$$getIDName()]=i.$$getID(),t.$log.debug("process form data"),t.$log.debug(n),n},this.processParent=function(e){var i={};""!==e.$$getID()&&(i[e.$$getIDName()]=e.$$getID()),t.$log.debug("processParent"),t.$log.debug(e);var n=e.forms;for(var r in n){var a=n[r];i=angular.extend(i,t.processForm(a,e))}return i},this.processChild=function(e,i){var n={},r=e.forms;for(var a in r){var o=r[a];angular.extend(n,t.processForm(o,e))}if(angular.isDefined(e.children)&&e.children.length){var s=t.getDataFromChildren(e);angular.extend(n,s)}if(angular.isDefined(e.parents)&&e.parents.length){var l=t.getDataFromParents(e,i);angular.extend(n,l)}return n},this.getDataFromParents=function(e,i){var n={};for(var r in e.parents){var a=e.parents[r];if(angular.isDefined(a)){var o=e.data[a.name];if(angular.isObject(o)&&i!==o&&""!==o.$$getID()){angular.isUndefined(n[a.name])&&(n[a.name]={});var s=t.processParent(o);t.$log.debug("parentData:"+a.name),t.$log.debug(s),angular.extend(n[a.name],s)}}}return n},this.getDataFromChildren=function(e){var i={};t.$log.debug("childrenFound"),t.$log.debug(e.children);for(var n in e.children){var r=e.children[n],a=e.data[r.name];if(t.$log.debug(r),t.$log.debug(a),angular.isArray(e.data[r.name]))angular.isUndefined(i[r.name])&&(i[r.name]=[]),angular.forEach(e.data[r.name],function(n,a){t.$log.debug("process child array item");var o=t.processChild(n,e);t.$log.debug("process child return"),t.$log.debug(o),i[r.name].push(o)});else{angular.isUndefined(i[r.name])&&(i[r.name]={});var o=e.data[r.name];t.$log.debug("begin process child");var s=t.processChild(o,e);t.$log.debug("process child return"),t.$log.debug(s),angular.extend(i,s)}}return t.$log.debug("returning child data"),t.$log.debug(i),i},this.$log=e}return e.$inject=["$log"],e}();t.HibachiValidationService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){var e=this;this.histories={},this.recordHistory=function(t,i,n){void 0===n&&(n=!1),(angular.isUndefined(e.histories[t])||n)&&(e.histories[t]=[]),e.histories[t].push(i)},this.hasHistory=function(t){return angular.isDefined(e.histories[t])},this.getHistory=function(t){if(angular.isDefined(e.histories[t]))return e.histories[t]},this.deleteHistory=function(t){e.histories[t]=[]}}return e}();t.HistoryService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.$window=e,this.hasItem=function(e){try{return t.$window.localStorage.getItem(e)&&null!==t.$window.localStorage.getItem(e)&&"undefined"!==t.$window.localStorage.getItem(e)}catch(e){return!1}},this.getItem=function(e){var i=t.$window.localStorage.getItem(e);return"{"!==i.charAt(0)&&"["!==i.charAt(0)||(i=angular.fromJson(i)),i},this.setItem=function(e,i){try{(angular.isObject(i)||angular.isArray(i))&&(i=angular.toJson(i)),t.$window.localStorage.setItem(e,i)}catch(e){}},this.$window=e}return e.$inject=["$window"],e}();t.LocalStorageService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.$filter=e,this.$log=t,this.getPropertyHintByObjectAndPropertyIdentifier=function(e,t){var n="";return i.hasPropertyByEntityNameAndPropertyIdentifier(e,t)&&(n=i.isAttributePropertyByEntityAndPropertyIdentifier(e,t)?e.metaData&&e.metaData[t].attributeHint:e.metaData.$$getPropertyHint(t)),n},this.getPropertyTitle=function(e,t){var n="";return i.hasPropertyByEntityNameAndPropertyIdentifier(e,t)&&(n=i.isAttributePropertyByEntityAndPropertyIdentifier(e,t)?e.metaData&&e.metaData[t].attributeName:e.metaData.$$getPropertyTitle(t)),n},this.getPropertyFieldType=function(e,t){var n="";return i.hasPropertyByEntityNameAndPropertyIdentifier(e,t)&&(n=i.isAttributePropertyByEntityAndPropertyIdentifier(e,t)?e.metaData&&e.metaData[t].attributeInputType:e.metaData.$$getPropertyFieldType(t)),n},this.isAttributePropertyByEntityAndPropertyIdentifier=function(e,t){return e.metaData&&e.metaData[t]&&e.metaData[t].attributeCode==t},this.hasPropertyByEntityNameAndPropertyIdentifier=function(e,t){return e.metaData&&e.metaData[t]},
this.getPropertiesList=function(){return i._propertiesList},this.getPropertiesListByBaseEntityAlias=function(e){return i._propertiesList[e]},this.setPropertiesList=function(e,t){i._propertiesList[t]=e},this.formatPropertiesList=function(e,t){e||(e={}),e.data||(e.data=[]);var n={$$group:"simple"};e.data.push(n);var r={$$group:"drilldown"};e.data.push(r);var a={$$group:"compareCollections"};e.data.push(a);var o={$$group:"attribute"};e.data.push(o);for(var s in e.data){angular.isDefined(e.data[s].ormtype)&&(angular.isDefined(e.data[s].attributeID)?e.data[s].$$group="attribute":e.data[s].$$group="simple"),angular.isDefined(e.data[s].fieldtype)&&("id"===e.data[s].fieldtype&&(e.data[s].$$group="simple"),"many-to-one"===e.data[s].fieldtype&&(e.data[s].$$group="drilldown"),"many-to-many"!==e.data[s].fieldtype&&"one-to-many"!==e.data[s].fieldtype||(e.data[s].$$group="compareCollections"));var l="_";"simple"!=e.data[s].$$group&&"attribute"!=e.data[s].$$group||(l="."),e.data[s].propertyIdentifier=t+l+e.data[s].name}for(var c=[],u=0;u<=e.data.length-1;u++)e.data[u].propertyIdentifier.indexOf(".undefined")!=-1||e.data[u].propertyIdentifier.indexOf("_undefined")!=-1?(i.$log.debug("removing: "+e.data[u].displayPropertyIdentifier),e.data[u].displayPropertyIdentifier="hide"):(c.push(e.data[u]),i.$log.debug(e.data[u]));c.sort,e.data=c,i.$log.debug("----------------------PropertyList\n\n\n\n\n"),e.data=i._orderBy(e.data,["propertyIdentifier"],!1)},this.orderBy=function(e,t,n){return i._orderBy(e,t,n)},this.$filter=e,this.$log=t,this._propertiesList={},this._orderBy=e("orderBy")}return e.$inject=["$filter","$log"],e}();t.MetaDataService=i},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(6),a=function(e){function t(t,i,n){var r=e.call(this)||this;return r.$timeout=t,r.historyService=i,r.utilityService=n,r.attach=function(e,t,i){i||(i=r.utilityService.createID()),t=t.toLowerCase(),i=i.toLowerCase(),r.observers[t]||(r.observers[t]={}),r.observers[t][i]||(r.observers[t][i]=[]),r.observers[t][i].push(e)},r.detachById=function(e){e=e.toLowerCase();for(var t in r.observers)r.detachByEventAndId(t,e)},r.detachByEvent=function(e){e=e.toLowerCase(),e in r.observers&&delete r.observers[e]},r.detachByEventAndId=function(e,t){e=e.toLowerCase(),t=t.toLowerCase(),e in r.observers&&t in r.observers[e]&&delete r.observers[e][t]},r.notify=function(e,t){return console.warn(e,t),e=e.toLowerCase(),r.$timeout(function(){for(var i in r.observers[e])for(var n=0,a=r.observers[e][i];n<a.length;n++){var o=a[n];o(t)}})},r.notifyById=function(e,t,i){return e=e.toLowerCase(),t=t.toLowerCase(),r.$timeout(function(){for(var n in r.observers[e])n==t&&angular.forEach(r.observers[e][n],function(e){e(i)})})},r.notifyAndRecord=function(e,t){return r.notify(e,t).then(function(){r.historyService.recordHistory(e,t,!0)})},r.observers={},r}return n(t,e),t.$inject=["$timeout","historyService","utilityService"],t}(r.BaseService);t.ObserverService=a},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(2),a=function(e){function t(t,i,n){var r=e.call(this,t,i,n,"OrderPayment")||this;return r.$injector=t,r.$hibachi=i,r.utilityService=n,r}return n(t,e),t.$inject=["$injector","$hibachi","utilityService"],t}(r.BaseEntityService);t.OrderPaymentService=a},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(2),a=function(e){function t(t,i,n){var r=e.call(this,t,i,n,"Order")||this;return r.$injector=t,r.$hibachi=i,r.utilityService=n,r.newOrder_AddOrderPayment=function(){return r.newProcessObject("Order_AddOrderPayment")},r}return n(t,e),t.$inject=["$injector","$hibachi","utilityService"],t}(r.BaseEntityService);t.OrderService=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c,u,d,p){var f=this;this.$http=e,this.$q=t,this.$window=i,this.$location=n,this.$hibachi=r,this.$injector=a,this.requestService=o,this.accountService=s,this.cartService=l,this.orderService=c,this.observerService=u,this.appConfig=d,this.$timeout=p,this.requests={},this.errors={},this.baseActionPath="",this.months=[{name:"01 - JAN",value:1},{name:"02 - FEB",value:2},{name:"03 - MAR",value:3},{name:"04 - APR",value:4},{name:"05 - MAY",value:5},{name:"06 - JUN",value:6},{name:"07 - JUL",value:7},{name:"08 - AUG",value:8},{name:"09 - SEP",value:9},{name:"10 - OCT",value:10},{name:"11 - NOV",value:11},{name:"12 - DEC",value:12}],this.years=[],this.shippingAddress="",this.accountAddressEditFormIndex=[],this.showStoreSelector=[],this.showEmailSelector=[],this.imagePath={},this.successfulActions=[],this.failureActions=[],this.getErrors=function(){f.errors={};for(var e in f.requests){var t=f.requests[e];Object.keys(t.errors).length&&(f.errors[e]=t.errors)}return f.errors},this.getExpirationYears=function(){for(var e=new Date,t=e.getFullYear(),i=t,n=0;n<=15;n++)f.years.push({name:i+n,value:i+n})},this.getAccount=function(e){void 0===e&&(e=!1);var t=f.baseActionPath+"getAccount/";return f.accountDataPromise&&!e||(f.accountDataPromise=f.getData(t,"account","")),f.accountDataPromise},this.getCart=function(e){void 0===e&&(e=!1);var t=f.baseActionPath+"getCart/";return f.cartDataPromise&&!e||(f.cartDataPromise=f.getData(t,"cart","")),f.cartDataPromise},this.getCountries=function(e){void 0===e&&(e=!1);var t=f.baseActionPath+"getCountries/";return f.countryDataPromise&&!e||(f.countryDataPromise=f.getData(t,"countries","")),f.countryDataPromise},this.getStates=function(e,t,i){void 0===i&&(i=!1),t&&t.data&&(e=t.data.countrycode||t.countrycode),"boolean"!=typeof t||angular.isDefined(i)||(i=t),angular.isDefined(e)||(e="US");var n=f.baseActionPath+"getStateCodeOptionsByCountryCode/";return f.getRequestByAction("getStateCodeOptionsByCountryCode")&&f.getRequestByAction("getStateCodeOptionsByCountryCode").loading&&!i?f.stateDataPromise:(f.stateDataPromise=f.getData(n,"states","?countryCode="+e),f.stateDataPromise)},this.refreshAddressOptions=function(e){f.getStates(null,e),f.getAddressOptions(null,e)},this.getStateByStateCode=function(e){if(angular.isDefined(f.states)&&angular.isDefined(f.states.stateCodeOptions)&&angular.isDefined(e))for(var t in f.states.stateCodeOptions)if(f.states.stateCodeOptions[t].value==e)return f.states.stateCodeOptions[t]},this.getCountryByCountryCode=function(e){if(angular.isDefined(f.countries)&&angular.isDefined(f.countries.countryCodeOptions)){e||(e="US");for(var t in f.countries.countryCodeOptions)if(f.countries.countryCodeOptions[t].value==e)return f.countries.countryCodeOptions[t]}},this.getAddressOptions=function(e,t,i){void 0===i&&(i=!1),t&&t.data&&(e=t.data.countrycode||t.countrycode),angular.isDefined(e)||(e="US"),"boolean"!=typeof t||angular.isDefined(i)||(i=t);var n=f.baseActionPath+"getAddressOptionsByCountryCode/";return f.getRequestByAction("getAddressOptionsByCountryCode")&&f.getRequestByAction("getAddressOptionsByCountryCode").loading&&!i?f.addressOptionData:(f.addressOptionData=f.getData(n,"addressOptions","?countryCode="+e),f.addressOptionData)},this.getData=function(e,t,i){var n=e+i,r=f.requestService.newPublicRequest(n);return r.promise.then(function(e){t.indexOf("account")!=-1&&t.indexOf("cart")!=-1||(e.account&&delete e.account,e.cart&&delete e.cart),"cart"==t||"account"==t&&f[t]&&f[t].populate?f[t].populate(e):"states"==t?(f[t]={},f.$timeout(function(){f[t]=e})):f[t]=e}).catch(function(e){}),f.requests[r.getAction()]=r,r.promise},this.setShippingAddress=function(e){f.shippingAddress=e},this.setBillingAddress=function(e){f.billingAddress=e},this.selectBillingAddress=function(e){if(f.orderPaymentObject&&f.orderPaymentObject.forms){var t=f.account.accountAddresses[e].address;t.accountAddressID=f.account.accountAddresses[e].accountAddressID;for(var i in t)for(var n in f.orderPaymentObject.forms)n=f.orderPaymentObject.forms[n],void 0!=n["newOrderPayment.billingAddress."+i]&&n["newOrderPayment.billingAddress."+i].$setViewValue(t[i]);f.orderPaymentObject.newOrderPayment.billingAddress=t}},this.doAction=function(e,t,i){if(f.getRequestByAction(e)&&f.loadingThisRequest(e,t,!1))return f.$q.when();if(!e)throw"Action is required exception";var n=f.appConfig.baseURL;if(e.indexOf(":")!==-1?n+=e:n=f.baseActionPath+e,t?(i="post",t.returnJsonObjects="cart,account"):(n+=n.indexOf("?")==-1?"?":"&",n+="returnJsonObject=cart,account"),"post"==i){t.returnJsonObjects="cart,account";var r=f.requestService.newPublicRequest(n,t,i);return r.promise.then(function(e){f.processAction(e,r)}).catch(function(e){}),f.requests[r.getAction()]=r,r.promise}var a=n,o=f.requestService.newPublicRequest(a,t,i);return o.promise.then(function(e){f.processAction(e,o)}).catch(function(e){}),f.requests[o.getAction()]=o,o.promise},this.uploadFile=function(e,t){f.$timeout(function(){f.uploadingFile=!0});var i=f.appConfig.baseURL+e,n=new FormData;n.append("fileName",t.fileName),n.append("uploadFile",t.uploadFile);var r=new XMLHttpRequest;r.open("POST",i,!0),r.onload=function(e){var t=JSON.parse(r.response);200===r.status&&(f.processAction(t,null),f.successfulActions=t.successfulActions,f.failureActions=t.failureActions),f.$timeout(function(){f.uploadingFile=!1})},r.send(n)},this.processAction=function(e,t){if(f.runCheckoutAdjustments(e),t&&t.hasSuccessfulAction()){f.successfulActions=[];for(var i in t.successfulActions){if(t.successfulActions[i].indexOf("public:cart.placeOrder")!==-1)return void(f.$window.location.href=f.confirmationUrl);if(t.successfulActions[i].indexOf("public:cart.finalizeCart")!==-1)return void(f.$window.location.href=f.checkoutUrl);t.successfulActions[i].indexOf("public:account.logout")!==-1&&(f.account=f.$hibachi.newAccount()),f.successfulActions.push(t.successfulActions[i].split(".")[1])}}if(t&&t.hasFailureAction()){f.failureActions=[];for(var i in t.failureActions)f.failureActions.push(t.failureActions[i].split(".")[1])}e.account&&(f.account.populate(e.account),f.account.request=t),e.cart&&(f.cart.populate(e.cart),f.cart.request=t),f.errors=e.errors},this.runCheckoutAdjustments=function(e){f.filterErrors(e),e.cart&&f.removeInvalidOrderPayments(e.cart)},this.getRequestByAction=function(e){return f.requests[e]},this.userIsLoggedIn=function(){return f.account.userIsLoggedIn()},this.getActivePaymentMethods=function(){var e="/?"+f.appConfig.action+"=admin:ajax.getActivePaymentMethods",t=f.requestService.newPublicRequest(e).then(function(e){angular.isDefined(e.data.paymentMethods)&&(f.paymentMethods=e.data.paymentMethods)});f.requests[t.getAction()]=t},this.filterErrors=function(e){if(e&&e.cart&&e.cart.errors){var t=e.cart.errors;t.addOrderPayment&&(t.addOrderPayment=t.addOrderPayment.filter(function(e){return"billingAddress"!=e}))}},this.loadingThisRequest=function(e,t,i){var n=f.getRequestByAction(e);if(!n||!n.loading)return!1;for(var r in t)if((t[r]!==!0||i)&&n.data[r]!=t[r])return!1;return!0},this.removeInvalidOrderPayments=function(e){e.orderPayments=e.orderPayments.filter(function(e){return!e.hasErrors})},this.getPaymentMethodID=function(e){for(var t in f.paymentMethods)if(f.paymentMethods[t].paymentMethodName==e&&"Yes "==f.paymentMethods[t].activeFlag)return f.paymentMethods[t].paymentMethodID},this.hasPaymentMethod=function(e){for(var t=0,i=f.cart.orderPayments;t<i.length;t++){var n=i[t];if(n.paymentMethod.paymentMethodName===e)return!0}return!1},this.hasCreditCardPaymentMethod=function(){return f.hasPaymentMethod("Credit Card")},this.hasPaypalPaymentMethod=function(){return f.hasPaymentMethod("PayPal Express")},this.hasGiftCardPaymentMethod=function(){return f.hasPaymentMethod("Gift Card")},this.hasMoneyOrderPaymentMethod=function(){return f.hasPaymentMethod("Money Order")},this.hasCashPaymentMethod=function(){return f.hasPaymentMethod("Cash")},this.hasFulfillmentMethod=function(e){for(var t=0,i=f.cart.orderFulfillments;t<i.length;t++){var n=i[t];if(n.fulfillmentMethod.fulfillmentMethodName===e)return!0}return!1},this.hasShippingFulfillmentMethod=function(){return f.hasFulfillmentMethod("Shipping")},this.hasEmailFulfillmentMethod=function(){return f.hasFulfillmentMethod("Email")},this.hasPickupFulfillmentMethod=function(){return f.hasFulfillmentMethod("Pickup")},this.getFulfillmentType=function(e){return e.fulfillmentMethod.fulfillmentMethodType},this.isShippingFulfillment=function(e){return"shipping"===f.getFulfillmentType(e)},this.isEmailFulfillment=function(e){return"email"===f.getFulfillmentType(e)},this.isPickupFulfillment=function(e){return"pickup"===f.getFulfillmentType(e)},this.hasShippingAddress=function(e){return f.cart.orderFulfillments[e]&&f.isShippingFulfillment(f.cart.orderFulfillments[e])&&f.cart.orderFulfillments[e].data.shippingAddress},this.hasShippingMethodOptions=function(e){var t=f.cart.orderFulfillments[e].shippingMethodOptions;return t&&t.length&&(t.length>1||t[0].value&&t[0].value.length)},this.hasPickupLocation=function(e){return f.cart.orderFulfillments[e]&&f.isPickupFulfillment(f.cart.orderFulfillments[e])&&f.cart.orderFulfillments[e].pickupLocation},this.orderRequiresFulfillment=function(){return f.cart.orderRequiresFulfillment()},this.orderRequiresAccount=function(){return f.cart.orderRequiresAccount()},this.hasShippingAddressAndMethod=function(){return f.cart.hasShippingAddressAndMethod()},this.hasAccount=function(){return!!f.account.accountID},this.redirectExact=function(e){f.$window.location.href=e},this.isUndefinedOrEmpty=function(e,t){return!angular.isDefined(e[t])||""==e[t]},this.getOrderItemQuantitySum=function(){var e=0;return angular.isDefined(f.cart)?f.cart.getOrderItemQuantitySum():e},this.getSelectedStateIndexFromStateCode=function(e,t){for(var i in t)if(t[i].value==e)return i},this.isMobile=function(){return f.$window.innerWidth<=800&&f.$window.innerHeight<=600},this.isSelectedShippingMethod=function(e,t){if("number"==typeof e||"string"==typeof e){for(var i=t,n=void 0,r=0,a=f.cart.orderFulfillments;r<a.length;r++){var o=a[r];f.isShippingFulfillment(o)&&(n=o)}return!!(f.cart.fulfillmentTotal&&i==n.shippingMethod.shippingMethodID||1==n.shippingMethodOptions.length)}return f.cart.orderFulfillments[t].data.shippingMethod&&f.cart.orderFulfillments[t].data.shippingMethod.shippingMethodID==e.value||1==f.cart.orderFulfillments[t].data.shippingMethodOptions.length},this.selectShippingMethod=function(e,t){var i={shippingMethodID:e.value,fulfillmentID:f.cart.orderFulfillments[t].orderFulfillmentID};f.doAction("addShippingMethodUsingShippingMethodID",i),f.cart.orderFulfillments[t].data.shippingMethod||(f.cart.orderFulfillments[t].data.shippingMethod={}),f.cart.orderFulfillments[t].data.shippingMethod.shippingMethodID=e.value},this.removePromoCode=function(e){f.doAction("removePromotionCode",{promotionCode:e})},this.getTotalMinusGiftCards=function(){var e=f.getAppliedGiftCardTotals();return f.cart.calculatedTotal-e},this.formatPaymentMethod=function(e){return(e.accountPaymentMethodName||e.nameOnCreditCard)+" - "+e.creditCardType+" *"+e.creditCardLastFour+" exp. "+("0"+e.expirationMonth).slice(-2)+"/"+e.expirationYear.toString().slice(-2)},this.getOrderItemSkuIDs=function(e){return e.orderItems.map(function(e){return e.sku.skuID}).join(",")},this.getResizedImageByProfileName=function(e,t){f.loading=!0,void 0==e&&(e="medium"),f.doAction("getResizedImageByProfileName",{profileName:e,skuIds:t}).then(function(e){if(angular.isDefined(f.imagePath)||(f.imagePath={}),e.resizedImagePaths)for(var t in e.resizedImagePaths)f.imagePath[t]=e.resizedImagePaths[t]})},this.getPaymentTotals=function(){var e=0;for(var t in f.cart.orderPayments)e+=Number(f.cart.orderPayments[t].amount.toFixed(2));return e},this.getTotalMinusPayments=function(){var e=f.getPaymentTotals();return f.cart.calculatedTotal-e},this.paymentsEqualTotalBalance=function(){return 0==f.getTotalMinusPayments()},this.checkIfFinalPayment=function(){(f.getRequestByAction("addOrderPayment")&&f.getRequestByAction("addOrderPayment").hasSuccessfulAction()||f.getRequestByAction("addGiftCardOrderPayment")&&f.getRequestByAction("addGiftCardOrderPayment").hasSuccessfulAction())&&f.paymentsEqualTotalBalance()&&(f.edit="review")},this.getAddressEntity=function(e){var t=f.$hibachi.newAddress();if(e)for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);return t},this.resetRequests=function(e){delete f.requests[e]},this.addressesMatch=function(e,t){return!(!angular.isDefined(e)||!angular.isDefined(t)||e.streetAddress!=t.streetAddress||e.street2Address!=t.street2Address||e.city!=t.city||e.postalCode!=t.postalCode||e.stateCode!=t.stateCode||e.countrycode!=t.countrycode)},this.showFulfillmentTabBody=function(){return!!f.hasAccount()&&(f.cart.orderRequirementsList.indexOf("account")==-1&&f.cart.orderRequirementsList.indexOf("fulfillment")!=-1&&!f.edit||"fulfillment"==f.edit)},this.showPaymentTabBody=function(){return!!f.hasAccount()&&(f.cart.orderRequirementsList.indexOf("account")==-1&&f.cart.orderRequirementsList.indexOf("fulfillment")==-1&&f.cart.orderRequirementsList.indexOf("payment")!=-1&&!f.edit||f.cart.orderRequirementsList.indexOf("account")==-1&&f.cart.orderRequirementsList.indexOf("fulfillment")==-1&&"payment"==f.edit)},this.showReviewTabBody=function(){return!!f.hasAccount()&&!(f.cart.orderRequirementsList.indexOf("account")!=-1||f.cart.orderRequirementsList.indexOf("fulfillment")!=-1||f.cart.orderRequirementsList.indexOf("payment")!=-1||f.edit&&"review"!=f.edit)},this.fulfillmentTabIsActive=function(){return!!f.hasAccount()&&!("fulfillment"!=f.edit&&(f.edit||f.cart.orderRequirementsList.indexOf("account")!=-1||!f.account.accountID||f.cart.orderRequirementsList.indexOf("fulfillment")==-1))},this.paymentTabIsActive=function(){return!!f.hasAccount()&&!("payment"!=f.edit&&(f.edit||f.cart.orderRequirementsList.indexOf("account")!=-1||!f.account.accountID||f.cart.orderRequirementsList.indexOf("fulfillment")!=-1||f.cart.orderRequirementsList.indexOf("payment")==-1))},this.isCreatingAccount=function(){return!f.hasAccount()&&f.showCreateAccount},this.isSigningIn=function(){return!f.hasAccount()&&!f.showCreateAccount},this.loginError=function(){if(f.account.processObjects&&f.account.processObjects.login&&f.account.processObjects.login.hasErrors)return f.account.processObjects.login.errors.emailAddress[0]},this.createAccountError=function(){if(f.account.processObjects&&f.account.processObjects.create&&f.account.processObjects.create.hasErrors)return f.account.processObjects.create.errors},this.forgotPasswordNotSubmitted=function(){return!f.account.processObjects||!f.account.hasErrors&&!f.account.processObjects.forgotPassword},this.forgotPasswordSubmitted=function(){return f.account.processObjects&&f.account.processObjects.forgotPassword},this.forgotPasswordHasNoErrors=function(){return f.account.processObjects&&f.account.processObjects.forgotPassword&&!f.account.processObjects.forgotPassword.hasErrors},this.forgotPasswordError=function(){if(f.forgotPasswordSubmitted()&&!f.forgotPasswordHasNoErrors())return f.account.processObjects.forgotPassword.errors.emailAddress[0]},this.placeOrderFailure=function(){var e=[];for(var t in f.cart.errors){var i=f.cart.errors[t];e=e.concat(i)}f.cart.errors.runPlaceOrderTransaction=e,f.edit=""},this.placeOrderError=function(){if(f.cart.hasErrors&&f.cart.errors.runPlaceOrderTransaction)return f.cart.errors.runPlaceOrderTransaction},this.addOrderPaymentError=function(){return f.cart.errors.addOrderPayment?f.cart.errors.addOrderPayment:f.cart.errors.runPlaceOrderTransaction?f.cart.errors.runPlaceOrderTransaction:!!angular.isDefined(f.errors)&&f.errors.ADDORDERPAYMENT},this.addBillingAddressError=function(){if(f.addBillingAddressErrors=f.cart.errors.addBillingAddress||!!angular.isDefined(f.errors)&&f.errors.addBillingAddress,!f.billingAddressEditFormIndex&&f.errors&&f.hasFailureAction("addBillingAddress")){var e=f.$hibachi.newAddress().data;for(var t in f.errors)e.hasOwnProperty(t)&&(f.addBillingAddressErrors=f.addBillingAddressErrors||[],f.errors[t].forEach(function(e){f.addBillingAddressErrors.push(e)}))}},this.giftCardError=function(){if(f.cart.processObjects&&f.cart.processObjects.addOrderPayment&&f.cart.processObjects.addOrderPayment.errors&&f.cart.processObjects.addOrderPayment.errors.giftCardID)return f.cart.processObjects.addOrderPayment.errors.giftCardID[0]},this.editAccountAddress=function(e,t){f.clearShippingAddressErrors(),f.accountAddressEditFormIndex[t]=e,f.editingAccountAddress=f.getAddressEntity(f.account.accountAddresses[e].address),f.editingAccountAddress.accountAddressName=f.account.accountAddresses[e].accountAddressName,f.editingAccountAddress.accountAddressID=f.account.accountAddresses[e].accountAddressID},this.editBillingAddress=function(e,t){f.billingAddressEditFormIndex=e,f.selectedBillingAddress=null,t?(f[t+"BillingAddress"]=f.getAddressEntity(f.account.accountAddresses[e].address),f[t+"BillingAddress"].accountAddressName=f.account.accountAddresses[e].accountAddressName,f[t+"BillingAddress"].accountAddressID=f.account.accountAddresses[e].accountAddressID):(f.billingAddress=f.getAddressEntity(f.account.accountAddresses[e].address),f.billingAddress.accountAddressName=f.account.accountAddresses[e].accountAddressName,f.billingAddress.accountAddressID=f.account.accountAddresses[e].accountAddressID)},this.clearShippingAddressErrors=function(){f.clearMessages(),f.shippingAddressErrors=void 0},this.clearMessages=function(){f.successfulActions=[],f.failureActions=[]},this.hideAccountAddressForm=function(e){f.accountAddressEditFormIndex[e]=void 0},this.hideBillingAddressForm=function(){if(void 0!=f.billingAddressEditFormIndex){var e=f.billingAddressEditFormIndex;"new"==f.billingAddressEditFormIndex&&(e=f.account.accountAddresses.length-1),f.selectBillingAddress(e)}f.billingAddressEditFormIndex=void 0,f.billingAddress={}},this.editingDifferentAccountAddress=function(e){for(var t=0;t<f.cart.orderFulfillments.length;t++)if(t!==e&&void 0!=f.accountAddressEditFormIndex[t])return!0},this.showEditAccountAddressForm=function(e){return void 0!=f.accountAddressEditFormIndex[e]&&"new"!=f.accountAddressEditFormIndex[e]},this.showNewAccountAddressForm=function(e){return"new"==f.accountAddressEditFormIndex[e]},this.showNewBillingAddressForm=function(){return!f.useShippingAsBilling&&"new"==f.billingAddressEditFormIndex},this.showEditBillingAddressForm=function(){return!f.useShippingAsBilling&&void 0!=f.billingAddressEditFormIndex&&"new"!=f.billingAddressEditFormIndex},this.addBillingErrorsToCartErrors=function(){var e=f.cart.errors;if(e.addOrderPayment){var t=e.addOrderPayment.indexOf("billingAddress");t>-1&&e.addOrderPayment.splice(t,1),0==e.addOrderPayment.length&&(e.addOrderPayment=null)}e.addBillingAddress=[];for(var i in f.errors)f.cart.errors.addBillingAddress=f.cart.errors.addBillingAddress.concat(f.errors[i])},this.accountAddressIsSelectedShippingAddress=function(e,t){return!!(f.account&&f.account.accountAddresses&&f.cart.orderFulfillments[t].shippingAddress)&&f.addressesMatch(f.account.accountAddresses[e].address,f.cart.orderFulfillments[t].shippingAddress)},this.accountAddressIsSelectedBillingAddress=function(e){return!!(f.account&&f.account.accountAddresses&&f.orderPaymentObject&&f.orderPaymentObject.newOrderPayment&&f.orderPaymentObject.newOrderPayment.billingAddress)&&f.account.accountAddresses[e].accountAddressID==f.orderPaymentObject.newOrderPayment.billingAddress.accountAddressID},this.hasEmailFulfillmentAddress=function(e){return Boolean(f.cart.orderFulfillments[e].emailAddress)},this.getEligiblePaymentMethodsForPaymentMethodType=function(e){return f.cart.eligiblePaymentMethodDetails.filter(function(t){return t.paymentMethod.paymentMethodType==e})},this.getEligibleCreditCardPaymentMethods=function(){return f.getEligiblePaymentMethodsForPaymentMethodType("creditCard")},this.getPickupLocation=function(e){if(f.cart.data.orderFulfillments[e])return f.cart.data.orderFulfillments[e].pickupLocation},this.getShippingAddress=function(e){if(f.cart.data.orderFulfillments[e])return f.cart.data.orderFulfillments[e].data.shippingAddress},this.getEmailFulfillmentAddress=function(e){if(f.cart.data.orderFulfillments[e])return f.cart.data.orderFulfillments[e].emailAddress},this.getPickupLocations=function(){var e=[];return f.cart.orderFulfillments.forEach(function(t,i){"pickup"==f.getFulfillmentType(t)&&t.pickupLocation&&t.pickupLocation.locationID&&(t.pickupLocation.fulfillmentIndex=i,e.push(t.pickupLocation))}),e},this.getShippingAddresses=function(){var e=[];return f.cart.orderFulfillments.forEach(function(t,i){"shipping"==f.getFulfillmentType(t)&&t.data.shippingAddress&&t.data.shippingAddress.addressID&&(t.data.shippingAddress.fulfillmentIndex=i,e.push(t.data.shippingAddress))}),e},this.getEmailFulfillmentAddresses=function(){var e=[];return f.cart.orderFulfillments.forEach(function(t,i){"email"==f.getFulfillmentType(t)&&t.emailAddress&&(t.fulfillmentIndex=i,e.push(t))}),e},this.hasSuccessfulAction=function(e){for(var t=0,i=e.split(",");t<i.length;t++){var n=i[t];if(f.successfulActions.indexOf(n)>-1)return!0}return!1},this.hasFailureAction=function(e){for(var t=0,i=e.split(",");t<i.length;t++){var n=i[t];if(f.failureActions.indexOf(n)>-1)return!0}return!1},this.shippingUpdateSuccess=function(){return f.hasSuccessfulAction("addShippingAddressUsingAccountAddress,addShippingAddress")},this.shippingMethodUpdateSuccess=function(){return f.hasSuccessfulAction("addShippingMethodUsingShippingMethodID")},this.emailFulfillmentUpdateSuccess=function(){return f.hasSuccessfulAction("addEmailFulfillmentAddress")},this.pickupLocationUpdateSuccess=function(){return f.hasSuccessfulAction("addEmailFulfillmentAddress")},this.namelessPickupLocation=function(e){return!!f.getPickupLocation(e)&&(void 0!=f.getPickupLocation(e).primaryAddress&&void 0==f.getPickupLocation(e).locationName)},this.noPickupLocation=function(e){return!f.getPickupLocation(e)||void 0==f.getPickupLocation(e).primaryAddress&&void 0==f.getPickupLocation(e).locationName},this.disableContinueToPayment=function(){return f.cart.orderRequirementsList.indexOf("fulfillment")!=-1},this.hasAccountPaymentMethods=function(){return f.account&&f.account.accountPaymentMethods&&f.account.accountPaymentMethods.length},this.showBillingAccountAddresses=function(){return!f.useShippingAsBilling&&void 0==f.billingAddressEditFormIndex},this.hasNoCardInfo=function(){return!(f.newCardInfo&&f.newCardInfo.nameOnCreditCard&&f.newCardInfo.cardNumber&&f.newCardInfo.cvv)},this.isGiftCardPayment=function(e){return e.giftCard&&e.giftCard.giftCardCode},this.isPurchaseOrderPayment=function(e){return e.purchaseOrderNumber},this.isCheckOrMoneyOrderPayment=function(e){return"Check or Money Order"==e.paymentMethod.paymentMethodName},this.orderHasNoPayments=function(){var e=f.cart.orderPayments.filter(function(e){return 0!=e.amount});return!e.length},this.hasProductNameAndNoSkuName=function(e){return!e.sku.skuName&&e.sku.product&&e.sku.product.productName},this.cartHasNoItems=function(){return!f.getRequestByAction("getCart").loading&&f.hasAccount()&&f.cart&&f.cart.orderItems&&!f.cart.orderItems.length&&!f.loading&&!f.orderPlaced},this.hasAccountAndCartItems=function(){return f.hasAccount()&&!f.cartHasNoItems()},this.hideStoreSelector=function(e){f.showStoreSelector[e]=!1},this.hideEmailSelector=function(e){f.showEmailSelector[e]=!1},this.incrementItemQuantity=function(e,t){void 0===t&&(t=1),e.quantity+=t,e.quantity<0&&(e.quantity=0),f.updateOrderItemQuantity(e)},this.updateOrderItemQuantity=function(e){e.swForm.submit()},this.getOrderAttributeValues=function(e){var t={},i=JSON.parse(localStorage.attributeMetaData).Order;for(var n in i){var r=i[n];if(e.indexOf(n)!==-1)for(var a in r.attributes){var o=r.attributes[a];t[o.attributeCode]={attributeCode:o.attributeCode,attributeName:o.attributeName,attributeValue:f.cart[o.attributeCode],inputType:o.attributeInputType,requiredFlag:o.requiredFlag}}}return t},this.binder=function(e,t){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];return t.bind.apply(t,[e].concat(i))},this.getSelectedShippingIndex=function(e,t){for(var i=0;i<=this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions.length;i++)if(this.cart.fulfillmentTotal==this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions[i].totalCharge)return i},this.validateNewOrderPayment=function(e){var t={};f.isUndefinedOrEmpty(e,"newOrderPayment.billingAddress.streetAddress")&&(t.streetAddress="Required *"),f.isUndefinedOrEmpty(e,"newOrderPayment.billingAddress.countrycode")&&(t.countrycode="Required *"),f.isUndefinedOrEmpty(e,"newOrderPayment.billingAddress.statecode")&&f.isUndefinedOrEmpty(e,"newOrderPayment.billingAddress.locality")&&(t.statecode="Required *"),f.isUndefinedOrEmpty(e,"newOrderPayment.billingAddress.city")&&f.isUndefinedOrEmpty(e,"newOrderPayment.billingAddress.city")&&(t.city="Required *"),f.isUndefinedOrEmpty(e,"newOrderPayment.billingAddress.locality")&&f.isUndefinedOrEmpty(e,"newOrderPayment.billingAddress.statecode")&&(t.locality="Required *"),f.isUndefinedOrEmpty(e,"newOrderPayment.billingAddress.postalcode")&&(t.postalCode="Required *"),f.isUndefinedOrEmpty(e,"newOrderPayment.nameOnCreditCard")&&(t.nameOnCreditCard="Required *"),f.isUndefinedOrEmpty(e,"newOrderPayment.expirationMonth")&&(t.streetAddress="Required *"),f.isUndefinedOrEmpty(e,"newOrderPayment.expirationYear")&&(t.expirationYear="Required *"),f.isUndefinedOrEmpty(e,"newOrderPayment.creditCardNumber")&&(t.creditCardNumber="Required *"),f.isUndefinedOrEmpty(e,"newOrderPayment.securityCode")&&(t.securityCode="Required *"),Object.keys(t).length},this.addOrderPayment=function(e){var t=f.newBillingAddress,i=e.month,n=e.year,r=e.country,a=e.state,o=(f.account.firstName,f.account.lastName,{});f.orderService.newOrder_AddOrderPayment();return o={"newOrderPayment.billingAddress.addressID":"","newOrderPayment.billingAddress.streetAddress":t.streetAddress,"newOrderPayment.billingAddress.street2Address":t.street2Address,"newOrderPayment.nameOnCreditCard":t.nameOnCreditCard,"newOrderPayment.billingAddress.name":t.nameOnCreditCard,"newOrderPayment.expirationMonth":i,"newOrderPayment.expirationYear":n,"newOrderPayment.billingAddress.countrycode":r||t.countrycode,"newOrderPayment.billingAddress.city":""+t.city,"newOrderPayment.billingAddress.statecode":a||t.statecode,"newOrderPayment.billingAddress.locality":t.locality||"","newOrderPayment.billingAddress.postalcode":t.postalcode,"newOrderPayment.securityCode":t.cvv,"newOrderPayment.creditCardNumber":t.cardNumber,"newOrderPayment.saveShippingAsBilling":1==f.saveShippingAsBilling},f.validateNewOrderPayment(o),f.cart.orderPayments.hasErrors&&Object.keys(f.cart.orderPayments.errors).length?-1:void f.doAction("addOrderPayment",o,"post").then(function(e){var t=e;t.cart.hasErrors||angular.isDefined(f.cart.orderPayments[f.cart.orderPayments.length-1].errors)&&!f.cart.orderPayments[f.cart.orderPayments.length-1].errors.hasErrors?(f.cart.hasErrors=!0,f.readyToPlaceOrder=!0,f.edit=""):(f.editPayment=!1,f.readyToPlaceOrder=!0,f.edit="")});
},this.addGiftCardOrderPayments=function(e){f.cart.hasErrors=!1,f.cart.orderPayments.errors={},f.cart.orderPayments.hasErrors=!1;var t=f.account.giftCards,i={};i={"newOrderPayment.paymentMethod.paymentMethodID":"50d8cd61009931554764385482347f3a","newOrderPayment.redeemGiftCardToAccount":e};for(var n in t)1==t[n].applied&&(i["newOrderPayment.giftCardNumber"]=t[n].giftCardCode,t[n].calculatedTotal<f.cart.calculatedTotal?i["newOrderPayment.amount"]=t[n].calculatedBalanceAmount:i["newOrderPayment.amount"]=f.cart.calculatedTotal,i.copyFromType="",f.$q.all([f.doAction("addOrderPayment",i,"post")]).then(function(e){var t;angular.isDefined(e[0])&&(t=e[0].data),(t.cart.hasErrors||angular.isDefined(this.cart.orderPayments[this.cart.orderPayments.length-1].errors)&&!this.cart.orderPayments[""+(this.cart.orderPayments.length-1)].errors.hasErrors)&&(this.cart.hasErrors=!0,this.readyToPlaceOrder=!0,this.edit="")}))},this.addOrderPaymentAndPlaceOrder=function(e){f.orderPlaced=!1;var t=f.newBillingAddress,i=e.month,n=e.year,r=e.country,a=e.state,o=f.account.firstName,s=f.account.lastName,l={};return l={orderid:f.cart.orderID,"newOrderPayment.billingAddress.streetAddress":t.streetAddress,"newOrderPayment.billingAddress.street2Address":t.street2Address,"newOrderPayment.nameOnCreditCard":t.nameOnCard||o+" "+s,"newOrderPayment.expirationMonth":i,"newOrderPayment.expirationYear":n,"newOrderPayment.billingAddress.countrycode":r||t.countrycode,"newOrderPayment.billingAddress.city":""+t.city,"newOrderPayment.billingAddress.statecode":a||t.statecode,"newOrderPayment.billingAddress.locality":t.locality||"","newOrderPayment.billingAddress.postalcode":t.postalcode,"newOrderPayment.securityCode":t.cvv,"newOrderPayment.creditCardNumber":t.cardNumber,"newOrderPayment.saveShippingAsBilling":1==f.saveShippingAsBilling},f.cart.orderPayments.hasErrors&&Object.keys(f.cart.orderPayments.errors).length?-1:void f.$q.all([f.doAction("addOrderPayment,placeOrder",l,"post")]).then(function(e){var t;if(angular.isDefined(e[0])&&(t=e[0].data),t.cart.hasErrors||angular.isDefined(t.failureActions)&&t.failureActions.length&&"public:cart.addOrderPayment"==t.failureActions[0]){if(t.failureActions.length)for(var i in t.failureActions);return this.edit="",!0}if(t.successfulActions.length){this.cart.hasErrors=!1,this.editPayment=!1,this.edit="";for(var i in t.successfulActions)t.successfulActions[i].indexOf("placeOrder")!=-1&&(this.orderPlaced=!0,this.redirectExact("/order-confirmation/"))}else this.edit=""})},this.applyGiftCard=function(e){f.finding=!0;var t=!1;for(var i in f.account.giftCards)0==f.account.giftCards[i].balanceAmount&&(f.account.giftCards[i].error="The balance is $0.00 for this card.",t=!1),f.account.giftCards[i].giftCardCode==e&&(f.account.giftCards[i].applied=!0,t=!0);t?(f.finding=!1,f.addGiftCardOrderPayments(!1)):(f.finding=!1,f.addGiftCardOrderPayments(!0))},this.getAppliedGiftCardTotals=function(){var e=0;for(var t in f.cart.orderPayments)""!=f.cart.orderPayments[t].giftCardNumber&&(e+=parseInt(f.cart.orderPayments[t].amount));return e},this.orderService=c,this.cartService=l,this.accountService=s,this.requestService=o,this.appConfig=d,this.baseActionPath=this.appConfig.baseURL+"/index.cfm/api/scope/",this.confirmationUrl="/order-confirmation",this.checkoutUrl="/checkout",this.$http=e,this.$location=n,this.$q=t,this.$injector=a,this.getExpirationYears(),this.$window=i,this.$hibachi=r,this.cart=this.cartService.newCart(),this.account=this.accountService.newAccount(),this.observerService=u,this.$timeout=p}return e.$inject=["$http","$q","$window","$location","$hibachi","$injector","requestService","accountService","cartService","orderService","observerService","appConfig","$timeout"],e.prototype.getOrderFulfillmentItemList=function(e){return this.cart.orderFulfillments[e].orderFulfillmentItems.map(function(e){return e.sku.skuName?e.sku.skuName:e.sku.product.productName}).join(", ")},e.prototype.copyOrderItem=function(e){return this.orderItem={orderItemID:e.orderItemID,quantity:e.quantity},this},e}();t.PublicService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){var r=this;this.$http=e,this.$q=t,this.appConfig=i,this.resourceBundles=n,this._resourceBundle={},this._resourceBundleLastModified="",this._loadingResourceBundle=!1,this._loadedResourceBundle=!1,this.getRBLoaded=function(){return r._loadedResourceBundle},this.rbKey=function(e,t){var i=r.getRBKey(e,r.appConfig.rbLocale);return i},this.getRBKey=function(e,t,i,n){if(r.resourceBundles){e=e.toLowerCase(),i=i||"",t=t||"en_us";var a=e.split(",");if(a.length>1){for(var o="",s=0;s<a.length&&(o=r.getRBKey(a[s],t,o),"_missing"==o.slice(-8));s++);return o}var l=r.resourceBundles[t];if(angular.isDefined(l[e]))return l[e];var c=i.split(",");c.push(e+"_"+t+"_missing"),i=c.join(","),angular.isUndefined(n)&&(n=e);var u=t.split("_");if(2===u.length){if(l=r.resourceBundles[u[0]],angular.isDefined(l[e]))return l[e];c.push(e+"_"+u[0]+"_missing"),i=c.join(",")}var d=e.split(".");if(d.length>=3&&"define"===d[d.length-2]){var p=e.replace(d[d.length-3]+".define","define");return r.getRBKey(p,t,i,n)}if(d.length>=2&&"define"!==d[d.length-2]){var p=e.replace(d[d.length-2]+".","define.");return r.getRBKey(p,t,i,n)}return"en"!==u[0]?r.getRBKey(n,"en",i):i}return""},this.$q=t,this.$http=e,this.appConfig=i,this.resourceBundles=n}return e.$inject=["$http","$q","appConfig","resourceBundles"],e}();t.RbKeyService=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(177),r=i(178),a=function(){function e(e,t){var i=this;this.$injector=e,this.observerService=t,this.newAdminRequest=function(e,t,r,a,o,s){return void 0===r&&(r="post"),void 0===a&&(a={"Content-Type":"application/json"}),void 0===o&&(o=i.$injector),void 0===s&&(s=i.observerService),new n.AdminRequest(e,t,r,a,o,s)},this.newPublicRequest=function(e,t,n,a,o,s){return void 0===n&&(n="post"),void 0===a&&(a={"Content-Type":"application/x-www-form-urlencoded"}),void 0===o&&(o=i.$injector),void 0===s&&(s=i.observerService),new r.PublicRequest(e,t,n,a,o,s)},this.$injector=e,this.observerService=t}return e.$inject=["$injector","observerService"],e}();t.RequestService=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){var e=this;this.getRootParentScope=function(e,t){for(var i=e;null!=i&&angular.isUndefined(i[t])&&angular.isDefined(i.$parent);)i=i.$parent;if(null!=i&&angular.isDefined(i[t]))return i},this.hasParentScope=function(t,i){return null!=e.getRootParentScope(t,i)}}return e}();t.ScopeService=i},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(6),a=function(e){function t(t){var i=e.call(this)||this;return i.observerService=t,i._selection={},i.createSelections=function(e){i._selection[e]={allSelected:!1,ids:[]}},i.radioSelection=function(e,t){i.createSelections(e),i._selection[e].ids.push(t),i.observerService.notify("swSelectionToggleSelection"+e,{action:"check",selectionid:e,selection:t})},i.addSelection=function(e,t){if(i.isAllSelected(e)){var n=i._selection[e].ids.indexOf(t);n>-1&&(i._selection[e].ids.splice(n,1),i.observerService.notify("swSelectionToggleSelection"+e,{action:"check",selectionid:e,selection:t}))}else i.hasSelection(e,t)||(i._selection[e].ids.push(t),i.observerService.notify("swSelectionToggleSelection"+e,{action:"check",selectionid:e,selection:t}));console.info(i._selection[e])},i.setSelection=function(e,t){angular.isUndefined(i._selection[e])&&i.createSelections(e),i._selection[e].ids=t},i.removeSelection=function(e,t){if(!angular.isUndefined(i._selection[e])){if(i.isAllSelected(e))i.hasSelection(e,t)||(i._selection[e].ids.push(t),i.observerService.notify("swSelectionToggleSelection"+e,{action:"uncheck",selectionid:e,selection:t}));else{var n=i._selection[e].ids.indexOf(t);n>-1&&(i._selection[e].ids.splice(n,1),i.observerService.notify("swSelectionToggleSelection"+e,{action:"uncheck",selectionid:e,selection:t}))}console.info(i._selection[e])}},i.hasSelection=function(e,t){return!angular.isUndefined(i._selection[e])&&i._selection[e].ids.indexOf(t)>-1},i.getSelections=function(e){return angular.isUndefined(i._selection[e])&&i.createSelections(e),i._selection[e].ids},i.getSelectionCount=function(e){return angular.isUndefined(i._selection[e])&&i.createSelections(e),i._selection[e].ids.length},i.clearSelection=function(e){i.createSelections(e),i.observerService.notify("swSelectionToggleSelection"+e,{action:"clear"}),console.info(i._selection[e])},i.selectAll=function(e){i._selection[e]={allSelected:!0,ids:[]},i.observerService.notify("swSelectionToggleSelection"+e,{action:"selectAll"}),console.info(i._selection[e])},i.isAllSelected=function(e){return angular.isUndefined(i._selection[e])&&i.createSelections(e),i._selection[e].allSelected},i}return n(t,e),t.$inject=["observerService"],t}(r.BaseService);t.SelectionService=a},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(2),a=function(e){function t(t,i,n){var r=e.call(this,t,i,n,"Sku")||this;return r.$injector=t,r.$hibachi=i,r.utilityService=n,r}return n(t,e),t.$inject=["$injector","$hibachi","utilityService"],t}(r.BaseEntityService);t.SkuService=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.$timeout=e,this.observerService=t,this.typeaheadData={},this.typeaheadPromises={},this.typeaheadStates={},this.getTypeaheadSelectionUpdateEvent=function(e){return"typeaheadSelectionUpdated"+e},this.attachTypeaheadSelectionUpdateEvent=function(e,t){i.observerService.attach(t,i.getTypeaheadSelectionUpdateEvent(e))},this.notifyTypeaheadSelectionUpdateEvent=function(e){i.observerService.notify(i.getTypeaheadSelectionUpdateEvent(e))},this.setTypeaheadState=function(e,t){i.typeaheadStates[e]=t},this.getTypeaheadState=function(e){return i.typeaheadStates[e]},this.getTypeaheadPrimaryIDPropertyName=function(e){return i.getTypeaheadState(e).primaryIDPropertyName},this.getIndexOfSelection=function(e,t){for(var n=0;n<i.getData(e).length;n++){if(angular.isDefined(t[i.getTypeaheadPrimaryIDPropertyName(e)])&&t[i.getTypeaheadPrimaryIDPropertyName(e)]==i.getData(e)[n][i.getTypeaheadPrimaryIDPropertyName(e)])return n;if(i.checkAgainstFallbackProperties(e,i.getData(e)[n],t))return n}return-1},this.addSelection=function(e,t){angular.isUndefined(i.typeaheadData[e])&&(i.typeaheadData[e]=[]),i.typeaheadData[e].push(t),i.notifyTypeaheadSelectionUpdateEvent(e)},this.removeSelection=function(e,t,n){if(angular.isUndefined(t)&&angular.isDefined(n)&&(t=i.getIndexOfSelection(e,n)),angular.isDefined(t)&&angular.isDefined(i.typeaheadData[e])&&t!=-1){i.updateSelections(e);var r=i.typeaheadData[e].splice(t,1)[0];return i.notifyTypeaheadSelectionUpdateEvent(e),r}},this.initializeSelections=function(e,t){t.setAllRecords(!0),i.typeaheadPromises[e]=t.getEntity(),i.typeaheadPromises[e].then(function(t){for(var n=0;n<t.records.length;n++)i.addSelection(e,t.records[n])},function(t){throw"typeaheadservice had trouble intializing selections for "+e+" because "+t})},this.updateSelections=function(e){if(angular.isDefined(i.getData(e))&&i.getData(e).length)for(var t=0;t<i.getTypeaheadState(e).results.length;t++)for(var n=0;n<i.getData(e).length;n++){if(i.getData(e)[n][i.getTypeaheadPrimaryIDPropertyName(e)]==i.getTypeaheadState(e).results[t][i.getTypeaheadPrimaryIDPropertyName(e)]){i.markResultSelected(i.getTypeaheadState(e).results[t],n);break}var r=i.checkAgainstFallbackProperties(e,i.getData(e)[n],i.getTypeaheadState(e).results[t],n);if(r)break}},this.markResultSelected=function(e,t){e.selected=!0,e.selectedIndex=t},this.checkAgainstFallbackProperties=function(e,t,n,r){var a=n[i.getTypeaheadPrimaryIDPropertyName(e)];if(angular.isDefined(i.getTypeaheadState(e).propertyToCompare)&&i.getTypeaheadState(e).propertyToCompare.length){if(angular.isDefined(t[i.getTypeaheadState(e).propertyToCompare])&&t[i.getTypeaheadState(e).propertyToCompare]==a)return angular.isDefined(r)&&i.markResultSelected(n,r),!0;if(angular.isDefined(t[i.getTypeaheadState(e).propertyToCompare])&&angular.isDefined(n[i.getTypeaheadState(e).propertyToCompare])&&t[i.getTypeaheadState(e).propertyToCompare]==n[i.getTypeaheadState(e).propertyToCompare])return angular.isDefined(r)&&i.markResultSelected(n,r),!0}if(i.getTypeaheadState(e).fallbackPropertyArray.length>0)for(var o=0;o<i.getTypeaheadState(e).fallbackPropertyArray.length;o++){var s=i.getTypeaheadState(e).fallbackPropertyArray[o];if(angular.isDefined(t[s])){if(t[s]==a)return angular.isDefined(r)&&i.markResultSelected(n,r),!0;if(angular.isDefined(n[s])&&t[s]==n[s])return angular.isDefined(r)&&i.markResultSelected(n,r),!0}}return!1},this.updateSelectionList=function(e){var t=[];if(angular.isDefined(i.getData(e)))for(var n=0;n<i.getData(e).length;n++){var r=i.getData(e)[n],a=r[i.getTypeaheadPrimaryIDPropertyName(e)];if(angular.isDefined(a))t.push(a);else if(angular.isDefined(i.getTypeaheadState(e).propertyToCompare)&&angular.isDefined(r[i.getTypeaheadState(e).propertyToCompare]))t.push(r[i.getTypeaheadState(e).propertyToCompare]);else if(angular.isDefined(i.getTypeaheadState(e).fallbackPropertyArray))for(var o=i.getTypeaheadState(e).fallbackPropertyArray,s=0;s<o.length;s++){var l=o[s];if(angular.isDefined(r[l])){t.push(r[l]);break}}}return t.join(",")},this.getData=function(e){return e in i.typeaheadPromises?(i.typeaheadPromises[e].then().finally(function(){return i.typeaheadData[e]||[]}),void delete i.typeaheadPromises[e]):i.typeaheadData[e]||[]},this.stripTranscludedContent=function(e){for(var t=0;t<e.length;t++)angular.isDefined(e[t].localName)&&"ng-transclude"==e[t].localName&&(e=e.children());for(var t=0;t<e.length;t++)angular.isDefined(e[t].localName)&&"sw-collection-config"==e[t].localName&&e.splice(t,1);return e}}return e.$inject=["$timeout","observerService"],e}();t.TypeaheadService=i},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(6),a=function(e){function t(t){var i=e.call(this)||this;return i.$parse=t,i.structKeyExists=function(e,t){return t in e},i.keyToAttributeString=function(e){for(var t="data-",n=0;n<e.length;n++)if("_"==e.charAt(n))t+="-";else if(i.isUpperCase(e.charAt(n)))if(n+1<=e.length&&i.isUpperCase(e.charAt(n+1))){if(e.charAt(n)+e.charAt(n+1)=="ID")t+="-id",n++;else if(i.isUpperCase(e.charAt(n+1)))for(t+="-";n+1<=e.length&&i.isUpperCase(e.charAt(n+1));)t+=e.charAt(n).toLowerCase(),n++}else t+="-"+e.charAt(n).toLowerCase();else t+=e.charAt(n);return t},i.isUpperCase=function(e){return e==e.toUpperCase()},i.isLowerCase=function(e){return e==e.toLowerCase()},i.snakeToCapitalCase=function(e){return e.charAt(0).toUpperCase()+e.replace(/(\-\w)/g,function(e){return e[1].toUpperCase()}).slice(1)},i.camelCaseToSnakeCase=function(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})},i.replaceStringWithProperties=function(e,t){var n=i.getPropertiesFromString(e);if(n){var r=[];return angular.forEach(n,function(e){e.indexOf(".")!=-1&&(e=e.replace(".","_"));var n=i.$parse(e);r.push(n(t))}),i.replacePropertiesWithData(e,r)}},i.extend=function(e,t){e.prototype=new t,e.prototype.constructor=e},i.getQueryParamsFromUrl=function(e){var t={};if(e&&e.split){var i=e.split("?");if(i.length&&(e=i[1],e&&e.split)){var n=e.split("&");if(n&&n.length)for(var r=0;r<n.length;r++){var a=n[r].split("=");if("undefined"==typeof t[a[0]])t[a[0]]=a[1];else if("string"==typeof t[a[0]]){var o=[t[a[0]],a[1]];t[a[0]]=o}else t[a[0]].push(a[1])}}}return t},i.isAngularRoute=function(){return/[\?&]ng#!/.test(window.location.href)},i.ArrayFindByPropertyValue=function(e,t,i){var n=-1;return e.forEach(function(e,r){e[t]&&e[t]===i&&(n=r)}),n},i.listLast=function(e,t){void 0===e&&(e=""),void 0===t&&(t=",");var i=e.split(t);return i[i.length-1]},i.listRest=function(e,t){void 0===e&&(e=""),void 0===t&&(t=",");var i=e.split(t);return i.length&&i.splice(0,1),i.join(t)},i.listFirst=function(e,t){void 0===e&&(e=""),void 0===t&&(t=",");var i=e.split(t);return i[0]},i.listPrepend=function(e,t,i){void 0===e&&(e=""),void 0===t&&(t=""),void 0===i&&(i=",");var n=e.split(i);return n.length?t+i+e:t},i.listAppend=function(e,t,i){void 0===e&&(e=""),void 0===t&&(t=""),void 0===i&&(i=",");var n=e.split(i);return""!=e.trim()&&n.length?e+i+t:t},i.listAppendUnique=function(e,t,i){void 0===e&&(e=""),void 0===t&&(t=""),void 0===i&&(i=",");var n=e.split(i);return""!=e.trim()&&n.length&&n.indexOf(t)==-1?e+i+t:t},i.listRemove=function(e,t){return e.indexOf(t)!=-1&&(e=e.replace(t,""),e=e.replace(",,",""),","==e&&(e=""),","==e.substring(0,1)&&(e=e.substring(1)),e=e.substring(0,e.length-1)),e},i.formatValue=function(e,t,n,r){angular.isUndefined(n)&&(n={});var a=["currency","date","datetime","pixels","percentage","second","time","truefalse","url","weight","yesno"];return a.indexOf(t)&&i["format_"+t](e,n,r),e},i.format_currency=function(e,t,i){angular.isUndefined&&(t={})},i.format_date=function(e,t,i){angular.isUndefined&&(t={})},i.format_datetime=function(e,t,i){angular.isUndefined&&(t={})},i.format_pixels=function(e,t,i){angular.isUndefined&&(t={})},i.format_yesno=function(e,t,i){return angular.isUndefined&&(t={}),Boolean(e)===!0?i.metaData.$$getRBKey("define.yes"):e===!1||"No"===e.trim()||"NO"===e.trim||"0"===e.trim()?i.metaData.$$getRBKey("define.no"):void 0},i.left=function(e,t){return e.substring(0,t)},i.right=function(e,t){return e.substring(e.length-t,e.length)},i.mid=function(e,t,i){var n=t+i;return e.substring(t,n)},i.getPropertiesFromString=function(e){if(e){for(var t=!1,i="",n=[],r=0;r<e.length;r++)t||"${"!=e.substr(r,2)?t&&"}"!=e[r]?i=i.concat(e[r]):t&&(n.push(i),t=!1):(i="",t=!0,r+=1);return n}},i.replacePropertiesWithData=function(e,t){for(var n=i.getPropertiesFromString(e),r=0;r<n.length;r++)e=e.replace("${"+n[r]+"}",t[r]);return e},i.replaceAll=function(e,t,n){return e.replace(new RegExp(i.escapeRegExp(t),"g"),n)},i.escapeRegExp=function(e){return e.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")},i.createID=function(e){for(var e=e||26,t="",i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r="",a=0;a<e;a++)r=0===a?i:n,t+=r.charAt(Math.floor(Math.random()*r.length));return t},i.arrayToList=function(e,t){return null!=t?e.join(t):e.join()},i.getPropertyValue=function(e,t){for(var i,n=t.split("."),r=e;(i=n.shift())&&n.length;)r=r[i];return r[i]},i.setPropertyValue=function(e,t,i){for(var n,r=t.split("."),a=e;(n=r.shift())&&r.length;)a[n]||(a[n]={}),a=a[n];a[n]=i},i.nvpToObject=function(e){var t={};for(var n in e){var r=e[n],a=n.replace(/\_/g,".");i.setPropertyValue(t,a,r)}return t},i.isDescendantElement=function(e,t){for(var i=t.parentNode;null!=i;){if(i==e)return!0;i=i.parentNode}return!1},i.toJson=function(e){var t=[];return JSON.stringify(e,function(e,i){if(null!=i&&"object"==typeof i){if(t.indexOf(i)>=0)return;t.push(i)}return i})},i.listFind=function(e,t,i){void 0===e&&(e=""),void 0===t&&(t=""),void 0===i&&(i=",");for(var n=e.split(i),r=-1,a=0;a<n.length;a++){var o=n[a];o===t&&(r=a)}return r},i.listLen=function(e,t){void 0===e&&(e=""),void 0===t&&(t=",");var i=e.split(t);return i.length},i.arraySorter=function(e,t){var i=[],n=[],r=t[0];if(angular.isDefined(t[1]))var a=t[1];for(var o in e)i.indexOf(e[o][r])>-1||i.push(e[o][r]);i.sort(function(e,t){return e<t?-1:e>t?1:0});for(var s in i){var l=[];for(var o in e)e[o][r]==i[s]&&l.push(e[o]);null!=t[1]&&l.sort(function(e,t){return e[a]<t[a]?-1:e[a]>t[a]?1:0});for(var c in l)n.push(l[c])}return n},i.minutesOfDay=function(e){return e.getMinutes()+60*e.getHours()},i.removeTimeOffset=function(e){var t=new Date(e),i=new Date;return i.setUTCFullYear(t.getFullYear(),t.getMonth(),t.getDate()),i.setUTCHours(t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds())},i}return n(t,e),t.$inject=["$parse"],t}(r.BaseService);t.UtilityService=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){e.$id="pageDialogController",e.pageDialogs=n.getPageDialogs(),e.scrollToTopOfDialog=function(){t.hash("/#topOfPageDialog"),i()},e.pageDialogStyle={"z-index":3e3}}return e.$inject=["$scope","$location","$anchorScroll","dialogService"],e}();t.PageDialogController=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.hibachiPathBuilder=e,this.get=function(){return t._pageDialogs||[]},this.addPageDialog=function(e,i){var n={path:e+".html",params:i};t._pageDialogs.push(n)},this.removePageDialog=function(e){t._pageDialogs.splice(e,1)},this.getPageDialogs=function(){return t._pageDialogs},this.removeCurrentDialog=function(){t._pageDialogs.splice(t._pageDialogs.length-1,1)},this.getCurrentDialog=function(){return t._pageDialogs[t._pageDialogs.length-1]},this._pageDialogs=[],this.hibachiPathBuilder=e}return e.$inject=["hibachiPathBuilder"],e}();t.DialogService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){return{restrict:"E",templateUrl:r.buildPartialsPath(n)+"/detail.html",link:function(a,o,s){a.$id="slatwallDetailController",t.debug("slatwallDetailController"),a.setDirty=function(e){angular.forEach(e.forms,function(e){e.$setSubmitted()})};var l=function(){a[a.entityName.toLowerCase()]=a.entity,a.entity.metaData.$$getDetailTabs().then(function(e){a.detailTabs=e.data,t.debug("detailtabs"),t.debug(a.detailTabs)})},c=a.entityName.charAt(0).toUpperCase()+a.entityName.slice(1);a.tabPartialPath=r.buildPartialsPath(n),a.getEntity=function(){if("create"===a.entityID)a.createMode=!0,a.entity=i["new"+c](),l();else{a.createMode=!1;var e=i["get"+c]({id:a.entityID});e.promise.then(function(){a.entity=e.value,l()})}},a.getEntity(),a.deleteEntity=function(){var t=a.entity.$$delete();t.then(function(){e.path("/entity/"+c+"/")})},a.allTabsOpen=!1}}}return e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$location","$log","$hibachi","coreEntityPartialsPath","hibachiPathBuilder"],t},e}();t.SWDetail=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return{restrict:"E",templateUrl:t.buildPartialsPath(e)+"detailtabs.html",link:function(e,t,i){}}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["coreEntityPartialsPath","hibachiPathBuilder"],t},e}();t.SWDetailTabs=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){return{restrict:"E",templateUrl:i.buildPartialsPath(t)+"/list.html",link:function(t,i,n){e.debug("slatwallList init")}}}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$log","coreEntityPartialsPath","hibachiPathBuilder"],t},e}();t.SWList=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){e.$id="otherwiseController"}return e.$inject=["$scope"],e}();t.OtherWiseController=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){e.$id="routerController",e.partialRoute="",n.debug(t),n.debug(i);var a=i.path();e.controllerType=a.split("/")[1];"entity"===e.controllerType&&(e.entityName=r.snakeToCapitalCase(t.entityName),angular.isDefined(t.entityID)&&(e.entityID=t.entityID||""))}return e.$inject=["$scope","$routeParams","$location","$log","utilityService"],e}();t.RouterController=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){var r=this;this.$scope=e,this.$log=t,this.observerService=i,this.$rootScope=n,this.showAddressBookSelect=!1,this.showCountrySelect=!0,this.showSubmitButton=!0,this.showCloseButton=!0,this.param="?slataction=",this.showAlerts="true",this.getAction=function(){return angular.isDefined(r.action)||(r.action="addAddress"),r.action.indexOf(":")!=-1&&r.action.indexOf(r.param)==-1&&(r.action=r.param+r.action),r.action},this.hasField=function(e){return r.fieldList.indexOf(e)!=-1},this.submitKeyCheck=function(e){e.form.$name==r.addressName&&13==e.event.keyCode&&e.swForm.submit(e.swForm.action)},angular.isDefined(this.slatwallScope)&&(this.slatwall=this.slatwallScope),void 0==this.fieldList&&(this.fieldList="countryCode,name,company,streetAddress,street2Address,locality,city,stateCode,postalCode"),void 0==this.showAddressBookSelect&&(this.showAddressBookSelect=!1),void 0==this.showCountrySelect&&(this.showCountrySelect=!0),void 0==this.action&&(this.showSubmitButton=!1),n.slatwall&&!e.slatwall&&(e.slatwall=n.slatwall);var a=this.addressName;if(this.address&&(this.address.getData=function(){var e=r.address||{},t=r.address.forms[a];for(var i in t){var n=t[i];"object"==typeof n&&n.hasOwnProperty("$modelValue")&&(n=n.$modelValue?n.$modelValue:n.$viewValue?n.$viewValue:"",angular.isString(n)&&(e[i]=n),n.$modelValue?e[i]=n.$modelValue:n.$viewValue&&(e[i]=n.$viewValue))}return e||""}),this.eventListeners||(this.eventListeners={}),this.submitOnEnter&&(this.eventListeners.keyup=this.submitKeyCheck),this.eventListeners)for(var o in this.eventListeners)i.attach(this.eventListeners[o],o)}return e.$inject=["$scope","$log","observerService","$rootScope"],e}();t.SWAddressFormController=i;var n=function(){function e(e,t){var n=this;this.coreFormPartialsPath=e,this.hibachiPathBuilder=t,this.transclude=!0,this.controller=i,this.controllerAs="SwAddressForm",this.bindToController={action:"@",actionText:"@",context:"@",customPartial:"@",slatwallScope:"=",address:"=",id:"@?",fieldNamePrefix:"@",fieldList:"@",fieldClass:"@",fulfillmentIndex:"@",tabIndex:"@",addressName:"@",showAddressBookSelect:"@",showCountrySelect:"@",showSubmitButton:"@",showCloseButton:"@",showAlerts:"@",eventListeners:"=?",submitOnEnter:"@"},this.scope={},this.templateUrl=function(e,t){return t.customPartial?"true"===t.customPartial?hibachiConfig.customPartialsPath+"addressform.html":hibachiConfig.customPartialsPath+t.customPartial:n.hibachiPathBuilder.buildPartialsPath(n.coreFormPartialsPath)+"addressform.html"}}return e.$inject=["coreFormPartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["coreFormPartialsPath","hibachiPathBuilder"],t},e}();t.SWAddressForm=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.$injector=e,this.$injector=e}return e.$inject=["$injector"],e.prototype.$onInit=function(){var e=this.$injector.get("swErrorDisplayDirective")[0].bindToController;for(var t in e)this[t]||"name"===t||(!this[t]&&this.swPropertyDisplay&&this.swPropertyDisplay[t]?this[t]=this.swPropertyDisplay[t]:!this[t]&&this.swfPropertyDisplay&&this.swfPropertyDisplay[t]?this[t]=this.swfPropertyDisplay[t]:!this[t]&&this.swForm&&this.swForm[t]&&(this[t]=this.swForm[t]));this.property=this.property||this.propertyIdentifier,this.propertyIdentifier=this.propertyIdentifier||this.property,!this.name&&this.property&&(this.name=this.property)},e}();t.SWErrorDisplayController=i;var n=function(){function e(e,t){this.coreFormPartialsPath=e,this.hibachiPathBuilder=t,this.require={swForm:"^?swForm",form:"^?form",swPropertyDisplay:"^?swPropertyDisplay",swfPropertyDisplay:"^?swfPropertyDisplay"},this.restrict="E",this.controller=i,this.controllerAs="swErrorDisplay",this.scope={},this.bindToController={form:"=?",name:"@?",property:"@?",propertyIdentifier:"@?",errorClass:"@?"},this.templateUrl=t.buildPartialsPath(this.coreFormPartialsPath)+"errordisplay.html"}return e.$inject=["coreFormPartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["coreFormPartialsPath","hibachiPathBuilder"],t},e}();t.SWErrorDisplay=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){this.$scope=e,this.$element=t,this.$compile=i,this.utilityService=n,this.utilityService=n,this.$scope=e,this.$element=t,this.$compile=i}return e.$inject=["$scope","$element","$compile","utilityService"],e}(),n=function(){function e(e,t){this.restrict="E",this.require={swfPropertyDisplayCtrl:"^?swfPropertyDisplay",form:"^?form"},this.controller=i,this.controllerAs="swfFormField",this.scope={},this.bindToController={propertyDisplay:"=?",propertyIdentifier:"@?",name:"@?",class:"@?",errorClass:"@?",type:"@?"},this.link=function(e,t,i,n,r){},this.templateUrl=t.buildPartialsPath(e)+"swfformfield.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["coreFormPartialsPath","hibachiPathBuilder"],t},e}();t.SWFFormField=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l){var c=this;if(this.$scope=e,this.$element=t,this.$hibachi=i,this.$http=n,this.$timeout=r,this.observerService=a,this.$rootScope=o,this.entityService=s,this.utilityService=l,this.eventsObj=[],this.formData={},this.isObject=function(){return angular.isObject(c.object)},this.submitKeyCheck=function(e){e.form.$name==c.name&&13==e.event.keyCode&&c.submit(e.swForm.action)},this.submit=function(e){e=e||c.action,c.clearErrors(),c.formData=c.getFormData()||"",c.doActions(e)},this.doActions=function(e){if(angular.isArray(e))for(var t=0,i=e;t<i.length;t++){var n=i[t];c.doAction(n)}else{if(!angular.isString(e))throw"Unknown type of action exception";c.doAction(e)}},this.doAction=function(e){if(!e)throw"Action not defined on form";c.formData=c.formData||{};c.$rootScope.hibachiScope.doAction(e,c.formData).then(function(e){e&&(c.object.forms[c.name].$setSubmitted(!0),e.errors&&c.parseErrors(e.errors))})},this.parseErrors=function(e){angular.isDefined(e)&&e&&angular.forEach(e,function(t,i){var n=c.$element.find("[error-for='"+i+"']");c.$timeout(function(){e[i].forEach(function(e){n.append("<div name='"+i+"Error'>"+e+"</div>")})},0)},c)},this.clearErrors=function(){c.$timeout(function(){var e=c.$element.find("[error-for]");e.empty()},0)},this.eventsHandler=function(e){for(var t in e.events)angular.isDefined(e.events[t].value)&&e.events[t].value==c.name.toLowerCase()&&e.events[t].name&&c[e.events[t].name]&&c[e.events[t].name](e.events[t].value)},this.hide=function(e){c.name.toLowerCase()==e&&c.$element.hide()},this.show=function(e){c.name.toLowerCase()==e&&c.$element.show()},this.refresh=function(e){},this.update=function(e){},this.clear=function(e){var t=c.formCtrl;angular.forEach(t,function(e,t){"object"==typeof e&&e.hasOwnProperty("$modelValue")?c.object.forms[c.name][t].$viewValue&&(c.object.forms[c.name][t].$setViewValue(""),c.object.forms[c.name][t].$render()):e=""})},this.getFormData=function(){var e=c.formCtrl;return angular.forEach(e,function(e,t){"object"==typeof e&&e.hasOwnProperty("$modelValue")&&(c.object.forms[c.name][t].$modelValue?e=c.object.forms[c.name][t].$modelValue:c.object.forms[c.name][t].$viewValue?e=c.object.forms[c.name][t].$viewValue:c.object.forms[c.name][t].$dirty&&(e=""),
(angular.isString(e)||angular.isNumber(e)||"boolean"==typeof e)&&(c.formData[t]=e),void 0!=e.$modelValue?c.formData[t]=e.$modelValue:void 0!=e.$viewValue&&(c.formData[t]=e.$viewValue))}),c.formData||""},this.$hibachi=i,this.utilityService=l,angular.isUndefined(this.isDirty)&&(this.isDirty=!1),angular.isString(this.object)){var u=this.object.split("_");this.entityName=u[0],u.length>1?(this.context=this.context||u[1],this.isProcessForm=!0):(this.context=this.context||"save",this.isProcessForm=!1),this.$timeout(function(){c.object=c.$hibachi["new"+c.object]()})}else this.object&&this.object.metaData&&(this.isProcessForm=this.object.metaData.isProcessObject,this.entityName=this.object.metaData.className.split("_")[0],this.isProcessForm?this.context=this.context||this.object.metaData.className.split("_")[1]:this.context=this.context||"save");if(this.context=this.context||this.name,this.isProcessForm&&"Order"==this.entityName&&(this.entityName="Cart"),this.submitOnEnter&&(this.eventListeners=this.eventListeners||{},this.eventListeners.keyup=this.submitKeyCheck),this.eventListeners)for(var d in this.eventListeners)this.observerService.attach(this.eventListeners[d],d)}return e.$inject=["$scope","$element","$hibachi","$http","$timeout","observerService","$rootScope","entityService","utilityService"],e}();t.SWFormController=i;var n=function(){function e(e,t){this.coreFormPartialsPath=e,this.hibachiPathBuilder=t,this.templateUrl="",this.transclude=!0,this.restrict="E",this.controller=i,this.controllerAs="swForm",this.scope={},this.bindToController={name:"@?",context:"@?",entityName:"@?",hiddenFields:"=?",action:"@?",actions:"@?",formClass:"@?",formData:"=?",errorClass:"@?",object:"=?",onSuccess:"@?",onError:"@?",hideUntil:"@?",isDirty:"=?",inputAttributes:"@?",eventListeners:"=?",eventAnnouncers:"@",submitOnEnter:"@"},this.link=function(e,t,i,n){},this.templateUrl=t.buildPartialsPath(this.coreFormPartialsPath)+"form.html"}return e.$inject=["coreFormPartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["coreFormPartialsPath","hibachiPathBuilder"],t},e}();t.SWForm=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){var s=this;this.$injector=e,this.$scope=t,this.$timeout=i,this.$log=n,this.$hibachi=r,this.observerService=a,this.utilityService=o,this.formFieldChanged=function(e){"yesno"===s.fieldType?(s.object.data[s.propertyIdentifier]=e.value,s.form[s.propertyIdentifier].$dirty=!0,s.form["selected"+s.object.metaData.className+s.propertyIdentifier+s.selectedRadioFormName].$dirty=!1):"checkbox"==s.fieldType?(s.object.data[s.propertyIdentifier]=e.value,s.form[s.propertyIdentifier].$dirty=!0):"select"===s.fieldType?(s.$log.debug("formfieldchanged"),s.$log.debug(e),"object"===s.selectType&&"function"==typeof s.object.data[s.propertyIdentifier].$$getIDName?(s.object.data[s.propertyIdentifier].data[s.object.data[s.propertyIdentifier].$$getIDName()]=e.value,angular.isDefined(s.form[s.object.data[s.propertyIdentifier].$$getIDName()])&&(s.form[s.object.data[s.propertyIdentifier].$$getIDName()].$dirty=!0)):"string"===s.selectType&&e&&null!=e.value&&(s.object.data[s.propertyIdentifier]=e.value,s.form[s.propertyIdentifier].$dirty=!0),s.observerService.notify(s.object.metaData.className+s.propertyIdentifier.charAt(0).toUpperCase()+s.propertyIdentifier.slice(1)+"OnChange",e)):(s.object.data[s.propertyIdentifier]=e.value,s.form[s.propertyIdentifier].$dirty=!0,s.form["selected"+s.object.metaData.className+s.propertyIdentifier+s.selectedRadioFormName].$dirty=!1)},this.$onInit=function(){var e=s.$injector.get("swFormFieldDirective")[0].bindToController;for(var t in e)s[t]||(!s[t]&&s.swPropertyDisplay&&s.swPropertyDisplay[t]?s[t]=s.swPropertyDisplay[t]:!s[t]&&s.swfPropertyDisplay&&s.swfPropertyDisplay[t]?s[t]=s.swfPropertyDisplay[t]:!s[t]&&s.swForm&&s.swForm[t]&&(s[t]=s.swForm[t]));if(s.edit=s.edit||!0,s.fieldType=s.fieldType||"text","yesno"===s.fieldType&&s.yesnoStrategy(),"select"===s.fieldType&&s.selectStrategy(),s.eventListeners)for(var i in s.eventListeners)s.observerService.attach(s.eventListeners[i],i)},this.selectStrategy=function(){angular.isDefined(s.object.metaData)&&angular.isDefined(s.object.metaData[s.propertyIdentifier])&&angular.isDefined(s.object.metaData[s.propertyIdentifier].fieldtype)?(s.selectType="object",s.$log.debug("selectType:object")):(s.selectType="string",s.$log.debug("selectType:string")),s.getOptions()},this.getOptions=function(){if(angular.isUndefined(s.options)){s.optionsArguments&&s.optionsArguments.hasOwnProperty("propertyIdentifier")||(s.optionsArguments={propertyIdentifier:s.propertyIdentifier});var e=s.$hibachi.getPropertyDisplayOptions(s.object.metaData.className,s.optionsArguments);e.then(function(e){if(s.options=e.data,"object"===s.selectType)if(angular.isUndefined(s.object.data[s.propertyIdentifier])&&(s.object.data[s.propertyIdentifier]=s.$hibachi["new"+s.object.metaData[s.propertyIdentifier].cfc]()),""===s.object.data[s.propertyIdentifier].$$getID())s.$log.debug("no ID"),s.$log.debug(s.object.data[s.propertyIdentifier].$$getIDName()),s.object.data["selected"+s.propertyIdentifier]=s.options[0],s.object.data[s.propertyIdentifier]=s.$hibachi["new"+s.object.metaData[s.propertyIdentifier].cfc](),s.object.data[s.propertyIdentifier].data[s.object.data[s.propertyIdentifier].$$getIDName()]=s.options[0].value;else{var t=!1;for(var i in s.options){if(angular.isObject(s.options[i].value)){if(s.$log.debug("isObject"),s.$log.debug(s.object.data[s.propertyIdentifier].$$getIDName()),s.options[i].value===s.object.data[s.propertyIdentifier]){s.object.data["selected"+s.propertyIdentifier]=s.options[i],s.object.data[s.propertyIdentifier]=s.options[i].value,t=!0;break}}else if(s.$log.debug("notisObject"),s.$log.debug(s.object.data[s.propertyIdentifier].$$getIDName()),s.options[i].value===s.object.data[s.propertyIdentifier].$$getID()){s.object.data["selected"+s.propertyIdentifier]=s.options[i],s.object.data[s.propertyIdentifier].data[s.object.data[s.propertyIdentifier].$$getIDName()]=s.options[i].value,t=!0;break}t||(s.object.data["selected"+s.propertyIdentifier]=s.options[0])}}else if("string"===s.selectType)if(null!==s.object.data[s.propertyIdentifier])for(var i in s.options)s.options[i].value===s.object.data[s.propertyIdentifier]&&(s.object.data["selected"+s.propertyIdentifier]=s.options[i],s.object.data[s.propertyIdentifier]=s.options[i].value);else s.object.data["selected"+s.propertyIdentifier]=s.options[0],s.object.data[s.propertyIdentifier]=s.options[0].value})}},this.yesnoStrategy=function(){if(s.selectedRadioFormName=s.utilityService.createID(26),s.object.data[s.propertyIdentifier]=s.object.data[s.propertyIdentifier]&&s.object.data[s.propertyIdentifier].length&&"yes"===s.object.data[s.propertyIdentifier].toLowerCase().trim()||1==s.object.data[s.propertyIdentifier]?1:0,s.options=[{name:"Yes",value:1},{name:"No",value:0}],angular.isDefined(s.object.data[s.propertyIdentifier]))for(var e in s.options)s.options[e].value===s.object.data[s.propertyIdentifier]&&(s.selected=s.options[e],s.object.data[s.propertyIdentifier]=s.options[e].value);else s.selected=s.options[0],s.object.data[s.propertyIdentifier]=s.options[0].value;s.$timeout(function(){s.form[s.propertyIdentifier].$dirty=s.isDirty})},this.$injector=e,this.$scope=t,this.$timeout=i,this.$log=n,this.$hibachi=r,this.observerService=a,this.utilityService=o}return e.$inject=["$injector","$scope","$timeout","$log","$hibachi","observerService","utilityService"],e}();t.SWFormFieldController=i;var n=function(){function e(e,t,n,r,a,o,s){this.restrict="EA",this.require={swfPropertyDisplay:"^?swfPropertyDisplay",swPropertyDisplay:"^?swPropertyDisplay",form:"^?form",swForm:"^?swForm"},this.controller=i,this.controllerAs="swFormField",this.scope={},this.bindToController={propertyIdentifier:"@?",property:"@?",name:"@?",class:"@?",errorClass:"@?",fieldType:"@?",type:"@?",option:"=?",valueObject:"=?",object:"=?",label:"@?",labelText:"@?",labelClass:"@?",optionValues:"=?",edit:"=?",title:"@?",value:"=?",errorText:"@?",inListingDisplay:"=?",inputAttributes:"@?",options:"=?",optionsArguments:"=?",eagerLoadOptions:"=?",rawFileTarget:"@?",binaryFileTarget:"@?",isDirty:"=?",onChange:"=?",editable:"=?",eventListeners:"=?",context:"@?",eventAnnouncers:"@"},this.link=function(e,t,i){},this.templateUrl=s.buildPartialsPath(o)+"formfield.html"}return e.$inject=["$log","$templateCache","$window","$hibachi","formService","coreFormPartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$log","$templateCache","$window","$hibachi","formService","coreFormPartialsPath","hibachiPathBuilder"],t},e}();t.SWFormField=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.formService=e,void 0==this.propertyDisplay.isDirty&&(this.propertyDisplay.isDirty=!1),this.propertyDisplay.form.$dirty=this.propertyDisplay.isDirty}return e.$inject=["formService"],e}(),n=function(){function e(e,t){this.restrict="E",this.require="^form",this.controller=i,this.controllerAs="swFormFieldFile",this.scope=!0,this.bindToController={propertyDisplay:"="},this.link=function(e,t,i,n){},this.link.$inject=["scope","element","attr","formController"],this.templateUrl=t.buildPartialsPath(e)+"file.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["coreFormPartialsPath","hibachiPathBuilder"],t},e}();t.SWFormFieldFile=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.propertyDisplay.form.$dirty=this.propertyDisplay.isDirty}return e.$inject=["formService"],e}(),n=function(){function e(e,t){this.restrict="E",this.require="^form",this.scope=!0,this.controller=i,this.bindToController={propertyDisplay:"=?"},this.controllerAs="ctrl",this.templateUrl="",this.link=function(e,t,i,n){},this.templateUrl=t.buildPartialsPath(e)+"json.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["coreFormPartialsPath","hibachiPathBuilder"],t},e}();t.SWFormFieldJson=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){return{templateUrl:n.buildPartialsPath(i)+"search-select.html",require:"^form",restrict:"E",scope:{propertyDisplay:"="},link:function(i,n,r,a){i.selectionOptions={value:[],$$adding:!1},i.setAdding=function(e){i.isAdding=e,i.showAddBtn=!1},i.selectedOption={},i.showAddBtn=!1;var o=i.propertyDisplay.object.$$getMetaData(i.propertyDisplay.property),s=t.newEntity(o.cfc);i.cfcProperCase=o.cfcProperCase,i.selectionOptions.getOptionsByKeyword=function(n){var r='[ {  "filterGroup":[  { "propertyIdentifier":"_'+i.cfcProperCase.toLowerCase()+"."+i.cfcProperCase+'Name", "comparisonOperator":"like", "ormtype":"string", "value":"%'+n+'%"  } ] }]';return t.getEntity(o.cfc,{filterGroupsConfig:r.trim()}).then(function(t){e.debug("typesByKeyword"),e.debug(t),i.selectionOptions.value=t.pageRecords;var r=n.length;return r>0?i.showAddBtn=!0:i.showAddBtn=!1,i.selectionOptions.value})};var l=i.propertyDisplay.object["$$get"+o.nameCapitalCase]();l.then(function(e){}),i.selectItem=function(t,n,r){i.$item=t,i.$model=n,i.$label=r,i.showAddBtn=!1,s.$$init(t),e.debug("select item"),e.debug(s),i.propertyDisplay.object["$$set"+o.nameCapitalCase](s)}}}}return e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["$log","$hibachi","coreFormPartialsPath","hibachiPathBuilder"],t},e}();t.SWFormFieldSearchSelect=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"E",require:["^form","^swForm"],scope:{object:"=?",context:"@?",name:"@?",isDirty:"=?"},link:function(t,i,n,r,a){t.$watch(function(){return r[0]},function(){r[1].formCtrl=r[0]}),r[0].$$swFormInfo={object:t.object,context:t.context||"save",name:t.name};t.isDirty&&(r[0].autoDirty=!0),t.form=r[0],r[0].name=t.name,r[0].$setDirty(),e.setForm(r[0]),angular.isDefined(t.object.forms)||(t.object.forms={}),t.object.forms[t.name]=r[0]}}}return e.$inject=["formService"],e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["formService"],t},e}();t.SWFormRegistrar=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a){var o=this;this.$log=e,this.$compile=t,this.$hibachi=i,this.utilityService=n,this.rbkeyService=r,this.$injector=a,this.$onInit=function(){var e=o.$injector.get("swFormSubscriberDirective")[0].bindToController;for(var t in e)o[t]||!o[t]&&o.swForm&&o.swForm[t]&&(o[t]=o.swForm[t]);o.property=o.property||o.propertyIdentifier,o.propertyIdentifier=o.propertyIdentifier||o.property,o.type=o.type||o.fieldType,o.fieldType=o.fieldType||o.type,o.edit=o.edit||o.editing,o.editing=o.editing||o.edit,o.editing=o.editing||!0,o.fieldType=o.fieldType||"text",o.inputAttributes=o.inputAttributes||""},this.utilityService=n,this.$hibachi=i,this.rbkeyService=r,this.$log=e,this.$injector=a}return e.$inject=["$log","$compile","$hibachi","utilityService","rbkeyService","$injector"],e}(),n=function(){function e(){this.restrict="A",this.require={swForm:"?^swForm",form:"?^form"},this.scope={},this.bindToController={propertyIdentifier:"@?",name:"@?",class:"@?",errorClass:"@?",option:"=?",valueObject:"=?",object:"=?",label:"@?",labelText:"@?",labelClass:"@?",optionValues:"=?",edit:"=?",title:"@?",value:"=?",errorText:"@?",fieldType:"@?",property:"@?",inputAttributes:"@?",type:"@?",editing:"=?"},this.controller=i,this.controllerAs="SWFormSubscriber",this.link=function(e,t,i){}}return e.Factory=function(){var t=function(){return new e};return t.$inject=[],t},e}();t.SWFormSubscriber=n},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(15),a=function(e){function t(t,i,n,r,a){var o=e.call(this,t,i,n,r,a)||this;return o.$filter=t,o.utilityService=i,o.$injector=n,o.metadataService=r,o.observerService=a,o.edit=!0,o}return n(t,e),t.$inject=["$filter","utilityService","$injector","metadataService","observerService"],t}(r.SWPropertyDisplayController);t.SWFPropertyDisplayController=a;var o=function(e){function t(t,i,n,r,o){var s=e.call(this,t,i,n,r,o)||this;return s.$compile=t,s.scopeService=i,s.coreFormPartialsPath=n,s.hibachiPathBuilder=r,s.swpropertyPartialPath=o,s.controller=a,s.controllerAs="swfPropertyDisplay",s.scope={},s.link=function(e,t,i){},s}return n(t,e),t.$inject=["$compile","scopeService","coreFormPartialsPath","hibachiPathBuilder","swpropertyPartialPath"],t}(r.SWPropertyDisplay);t.SWFPropertyDisplay=o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l){var c=this;this.$scope=e,this.$log=t,this.$hibachi=i,this.$injector=n,this.listingService=r,this.utilityService=a,this.rbkeyService=o,this.observerService=s,this.metadataService=l,this.eventAnnouncers="",this.onSuccess=function(){c.utilityService.setPropertyValue(c.swForm.object,c.propertyIdentifier,c.value),c.swPropertyDisplay&&c.utilityService.setPropertyValue(c.swPropertyDisplay.object,c.propertyIdentifier,c.value),c.swfPropertyDisplay&&(c.utilityService.setPropertyValue(c.swfPropertyDisplay.object,c.propertyIdentifier,c.value),c.swfPropertyDisplay.edit=!1),c.utilityService.setPropertyValue(c.swFormField.object,c.propertyIdentifier,c.value)},this.getValidationDirectives=function(){var e="",t=c.propertyIdentifier,i=c.form;if(c.$log.debug("Name is:"+t+" and form is: "+i),c.metadataService.isAttributePropertyByEntityAndPropertyIdentifier(c.object,c.propertyIdentifier)&&(c.object.validations.properties[t]=[],(c.object.metaData[c.propertyIdentifier].requiredFlag&&1==c.object.metaData[c.propertyIdentifier].requiredFlag||"string"==typeof c.object.metaData[c.propertyIdentifier].requiredFlag&&"yes"==c.object.metaData[c.propertyIdentifier].requiredFlag.trim().toLowerCase())&&c.object.validations.properties[t].push({contexts:"save",required:!0}),c.object.metaData[c.propertyIdentifier].validationRegex&&c.object.validations.properties[t].push({contexts:"save",regex:c.object.metaData[c.propertyIdentifier].validationRegex})),angular.isUndefined(c.object.validations)||angular.isUndefined(c.object.validations.properties)||angular.isUndefined(c.object.validations.properties[c.propertyIdentifier]))return"";var n=c.object.validations.properties[c.propertyIdentifier];c.$log.debug("Validations: ",n),c.$log.debug(c.form);var r=[],a=c.swForm.context,o=c.swForm.name;c.$log.debug("Form context is: "),c.$log.debug(a),c.$log.debug("Form Name: "),c.$log.debug(o);var s=c.object.validations.properties[t];if(angular.isObject(s)){if(angular.isUndefined(s[0].contexts)&&c.object.metaData.isProcessObject&&(s[0].contexts=c.object.metaData.className.split("_")[1]),s[0].contexts.indexOf(a)>-1){c.$log.debug("Matched");for(var l in s[0])"contexts"!=l&&"conditions"!==l&&(e+=" swvalidation"+l.toLowerCase()+"='"+s[0][l]+"'")}c.$log.debug(e)}return c.$log.debug(n),c.$log.debug(i),angular.forEach(n,function(e,t){e.contexts&&c.utilityService.listFind(e.contexts.toLowerCase(),c.swForm.context.toLowerCase())!==-1&&(c.$log.debug("Validations for context"),c.$log.debug(e),r.push(e))}),e},this.clear=function(){c.reverted&&(c.reverted=!1,c.showRevert=!0),c.edited=!1,c.value=c.initialValue,c.inListingDisplay&&c.rowSaveEnabled&&c.listingService.markUnedited(c.listingID,c.pageRecordIndex,c.propertyDisplayID)},this.revert=function(){c.showRevert=!1,c.reverted=!0,c.value=c.revertToValue,c.onEvent({},"change")},this.onEvent=function(e,t){var i=c.swForm.name+c.name+t,n=c.swForm.name+t,r={event:e,eventName:t,form:c.form,swForm:c.swForm,swInput:c,inputElement:$("input").first()[0]};c.observerService.notify(i,r),c.observerService.notify(n,r),c.observerService.notify(t,r)},this.getTemplate=function(){var e="",t="",i="",n="",r="";c.class||(c.class="form-control"),c.noValidate||(t=c.getValidationDirectives()),c.object&&c.object.metaData&&void 0!=c.object.metaData.$$getPropertyFormatType(c.propertyIdentifier)&&"currency"==c.object.metaData.$$getPropertyFormatType(c.propertyIdentifier)&&(n="sw-currency-formatter ",angular.isDefined(c.object.data.currencyCode)&&(n=n+'data-currency-code="'+c.object.data.currencyCode+'" ',i='<span class="s-title">'+c.object.data.currencyCode+"</span>"));var a=c.$hibachi.getConfig(),o="";c.object.metaData&&c.object.metaData[c.propertyIdentifier]&&c.object.metaData[c.propertyIdentifier].hb_nullrbkey&&(o=c.rbkeyService.getRBKey(c.object.metaData[c.propertyIdentifier].hb_nullrbkey)),"json"===c.fieldType.toLowerCase()&&(r=r+="display:none");var s=["email","text","password","number","time","date","datetime","json","file"];if(s.indexOf(c.fieldType.toLowerCase())>=0){var l=c.fieldType.toLowerCase();"time"!==c.fieldType&&"number"!==c.fieldType||(l="text"),e=i+'<input type="'+l+'" class="'+c.class+'" ng-model="swInput.value" ng-disabled="swInput.editable === false" ng-show="swInput.edit" ng-class="{\'form-control\':swInput.inListingDisplay, \'input-xs\':swInput.inListingDisplay}"name="'+c.propertyIdentifier+'" placeholder="'+o+'" '+t+n+'id="swinput'+c.swForm.name+c.name+'" style="'+r+'"'+c.inputAttributes+c.eventAnnouncerTemplate}var u=["date","datetime","time"];u.indexOf(c.fieldType.toLowerCase())>=0&&(e+="datetime-picker "),"time"===c.fieldType&&(e=e+'data-time-only="true" date-format="'+a.timeFormat.replace("tt","a")+'" ng-blur="swInput.pushBindings()"'),"date"===c.fieldType&&(e=e+'data-date-only="true" future-only date-format="'+a.dateFormat+'" '),e.length&&(e+=" />");var d='\n\t\t\t<a class="s-remove-change"\n\t\t\t\tdata-ng-click="swPropertyDisplay.clear()"\n\t\t\t\tdata-ng-if="swInput.edited && swInput.edit">\n\t\t\t\t\t<i class="fa fa-remove"></i>\n\t\t\t</a>\n\n\t\t\t<!-- Revert Button -->\n\t\t\t<button class="btn btn-xs btn-default s-revert-btn"\n\t\t\t\t\tdata-ng-show="swInput.showRevert"\n\t\t\t\t\tdata-ng-click="swInput.revert()"\n\t\t\t\t\tdata-toggle="popover"\n\t\t\t\t\tdata-trigger="hover"\n\t\t\t\t\tdata-content="{{swInput.revertText}}"\n\t\t\t\t\tdata-original-title=""\n\t\t\t\t\ttitle="">\n\t\t\t\t<i class="fa fa-refresh"></i>\n\t\t\t</button>\n\t\t';return e+d},this.pullBindings=function(){var e=c.$injector.get("swInputDirective")[0].bindToController;for(var t in e)c[t]||(!c[t]&&c.swFormField&&c.swFormField[t]?c[t]=c.swFormField[t]:!c[t]&&c.swPropertyDisplay&&c.swPropertyDisplay[t]?c[t]=c.swPropertyDisplay[t]:!c[t]&&c.swfPropertyDisplay&&c.swfPropertyDisplay[t]?c[t]=c.swfPropertyDisplay[t]:!c[t]&&c.swForm&&c.swForm[t]&&(c[t]=c.swForm[t]));c.edit=c.edit||!0,c.fieldType=c.fieldType||"text",c.inputAttributes=c.inputAttributes||"",c.inputAttributes=c.utilityService.replaceAll(c.inputAttributes,"'",'"'),c.value=c.utilityService.getPropertyValue(c.object,c.propertyIdentifier)},this.pushBindings=function(){c.observerService.notify("updateBindings").then(function(){})},this.$onInit=function(){c.pullBindings(),c.eventAnnouncersArray=c.eventAnnouncers.split(","),c.eventAnnouncerTemplate="";for(var e in c.eventAnnouncersArray){var t=c.eventAnnouncersArray[e];t.length&&(c.eventAnnouncerTemplate+=" ng-"+t+"=\"swInput.onEvent($event,'"+t+"')\"")}c.object&&c.object.metaData&&void 0!=c.object.metaData.className?c.eventNameForObjectSuccess=c.object.metaData.className.split("_")[0]+c.context.charAt(0).toUpperCase()+c.context.slice(1)+"Success":c.eventNameForObjectSuccess=c.context.charAt(0).toUpperCase()+c.context.slice(1)+"Success";var i=c.eventNameForObjectSuccess+c.propertyIdentifier,n="updateBindings";if(c.object&&c.object.metaData&&void 0!=c.object.metaData.className)var r=c.object.metaData.className.split("_")[0]+c.propertyIdentifier+"updateBindings";else var r=c.propertyIdentifier+"updateBindings";var a="pullBindings";if(c.object&&c.object.metaData&&void 0!=c.object.metaData.className)var o=c.object.metaData.className.split("_")[0]+c.propertyIdentifier+"pullBindings";else var o=c.propertyIdentifier+"pullBindings";c.object&&(c.observerService.attach(c.onSuccess,c.eventNameForObjectSuccess,i),c.observerService.attach(c.onSuccess,n,r),c.observerService.attach(c.pullBindings,a,o)),c.$scope.$on("$destroy",function(){c.observerService.detachById(n),c.observerService.detachById(r)})}}return e.$inject=["$scope","$log","$hibachi","$injector","listingService","utilityService","rbkeyService","observerService","metadataService"],e}(),n=function(){function e(e,t,n,r){var a=this;this.$compile=e,this.$timeout=t,this.$parse=n,this.fileService=r,this.restrict="E",this.require={swForm:"?^swForm",form:"?^form",swFormField:"?^swFormField",swPropertyDisplay:"?^swPropertyDisplay",swfPropertyDisplay:"?^swfPropertyDisplay"},this.scope={},this.bindToController={propertyIdentifier:"@?",name:"@?",class:"@?",errorClass:"@?",option:"=?",valueObject:"=?",object:"=?",label:"@?",labelText:"@?",labelClass:"@?",inListingDisplay:"=?",listingID:"=?",pageRecordIndex:"=?",propertyDisplayID:"=?",initialValue:"=?",optionValues:"=?",edit:"=?",title:"@?",value:"=?",errorText:"@?",fieldType:"@?",property:"@?",binaryFileTarget:"@?",rawFileTarget:"@?",reverted:"=?",revertToValue:"=?",showRevert:"=?",inputAttributes:"@?",type:"@?",eventAnnouncers:"@?",context:"@?"},this.controller=i,this.controllerAs="swInput",this.link=function(e,t,i){if("file"===e.swInput.type){angular.isUndefined(e.swInput.object.data[e.swInput.rawFileTarget])&&(e.swInput.object[e.swInput.rawFileTarget]="",e.swInput.object.data[e.swInput.rawFileTarget]="");var n=a.$parse("swInput.object.data[swInput.rawFileTarget]"),r=n.assign;t.bind("change",function(t){var i=(t.srcElement||t.target).files[0];e.$apply(function(){r(e,i)},function(){throw"swinput couldn't apply the file to scope"}),a.$timeout(function(){a.fileService.uploadFile(i,e.swInput.object,e.swInput.binaryFileTarget).then(function(n){e.swInput.object[e.swInput.property]=i,e.swInput.onEvent(t,"change")},function(){})})})}t.html(e.swInput.getTemplate()),a.$compile(t.contents())(e)}}return e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["$compile","$timeout","$parse","fileService"],t},e}();t.SWInput=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),r=i(227),a=i(225),o=i(216),s=i(217),l=i(218),c=i(219),u=i(220),d=i(221),p=i(222),f=i(215),h=i(214),g=i(15),m=i(224),y=i(223),v=angular.module("hibachi.form",["angularjs-datetime-picker",n.coremodule.name]).config(function(){}).constant("coreFormPartialsPath","form/components/").service("fileService",r.FileService).directive("swInput",a.SWInput.Factory()).directive("swfFormField",o.SWFFormField.Factory()).directive("swForm",s.SWForm.Factory()).directive("swFormField",l.SWFormField.Factory()).directive("swFormFieldFile",c.SWFormFieldFile.Factory()).directive("swFormFieldJson",u.SWFormFieldJson.Factory()).directive("swFormFieldSearchSelect",d.SWFormFieldSearchSelect.Factory()).directive("swFormRegistrar",p.SWFormRegistrar.Factory()).directive("swfPropertyDisplay",m.SWFPropertyDisplay.Factory(m.SWFPropertyDisplay,"swfpropertydisplay.html")).directive("swPropertyDisplay",g.SWPropertyDisplay.Factory(g.SWPropertyDisplay,"propertydisplay.html")).directive("swErrorDisplay",f.SWErrorDisplay.Factory()).directive("swAddressForm",h.SWAddressForm.Factory()).directive("swFormSubscriber",y.SWFormSubscriber.Factory());t.formmodule=v},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.$q=e,this.observerService=t,this.fileStates={},this.imageExists=function(e){var t=i.$q.defer(),n=new Image;return n.onerror=function(){t.reject()},n.onload=function(){t.resolve()},n.src=e,t.promise},this.uploadFile=function(e,t,n){var r=i.$q.defer(),a=r.promise,o=new FileReader;return o.readAsDataURL(e),o.onload=function(e){t.data[n]=o.result,r.resolve(o.result)},o.onerror=function(e){throw r.reject(),"fileservice couldn't read the file"},a}}return e.$inject=["$q","observerService"],e}();t.FileService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){var a=this;if(this.$hibachi=e,this.dialogService=t,this.alertService=i,this.rbkeyService=n,this.$log=r,this.saving=!1,this.initialSetup=function(){angular.isDefined(a.finish)?a.openNewDialog="true"!=a.finish.toLowerCase():a.openNewDialog=!1,a.openNewDialog?a.rbKey="admin.define.saveandnew":a.rbKey="admin.define.saveandfinish"},this.save=function(){a.saving=!0;var e=a.entity.$$save();e.then(function(e){a.dialogService.removeCurrentDialog(),a.openNewDialog&&angular.isDefined(a.partial)?a.dialogService.addPageDialog(a.partial):angular.isDefined(a.redirectUrl)?window.location.href=a.redirectUrl:angular.isDefined(a.redirectAction)?(angular.isUndefined(a.redirectQueryString)&&(a.redirectQueryString=""),window.location.href=a.$hibachi.buildUrl(a.redirectAction,a.redirectQueryString)):a.$log.debug("You did not specify a redirect for swSaveAndFinish")}).catch(function(e){if(angular.isDefined(a.customErrorRbkey)&&(e=a.rbkeyService.getRBKey(a.customErrorRbkey)),angular.isString(e)){var t=a.alertService.newAlert();t.msg=e,t.type="error",t.fade=!0,a.alertService.addAlert(t)}else a.alertService.addAlerts(e)}).finally(function(){a.saving=!1})},!angular.isFunction(this.entity.$$save))throw"Your entity does not have the $$save function.";this.initialSetup()}return e.$inject=["$hibachi","dialogService","alertService","rbkeyService","$log"],e}();t.SWSaveAndFinishController=i;var n=function(){function e(e,t){this.hibachiPartialsPath=e,this.restrict="EA",this.scope={},this.controller=i,this.controllerAs="swSaveAndFinish",this.bindToController={entity:"=",redirectUrl:"@?",redirectAction:"@?",redirectQueryString:"@?",finish:"@?",partial:"@?",customErrorRbkey:"@?"},this.templateUrl=t.buildPartialsPath(e)+"saveandfinish.html"}return e.$inject=["hibachiPartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["hibachiPartialsPath","hibachiPathBuilder"],t},e}();t.SWSaveAndFinish=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(9),r=i(10),a=i(244),o=i(13),s=i(14),l=i(247),c=i(226),u=i(265),d=i(16),p=i(228),f=angular.module("hibachi",[n.alertmodule.name,r.collectionmodule.name,s.entitymodule.name,o.dialogmodule.name,a.listingmodule.name,l.paginationmodule.name,c.formmodule.name,u.validationmodule.name,d.workflowmodule.name]).config([function(){}]).run(["$rootScope","publicService","$hibachi",function(e,t,i){e.hibachiScope=t,e.hasAccount=t.hasAccount,i.newAccount&&e.hibachiScope.getAccount(),i.newOrder&&e.hibachiScope.getCart(),i.newCountry&&e.hibachiScope.getCountries(),i.newState&&e.hibachiScope.getStates(),i.newState&&e.hibachiScope.getAddressOptions()}]).constant("hibachiPartialsPath","hibachi/components/").directive("swSaveAndFinish",p.SWSaveAndFinish.Factory());t.hibachimodule=f},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){var e=this;this.init=function(){e.editable=e.editable||!1},this.init()}return e}(),n=function(){function e(){this.restrict="EA",this.scope=!0,this.bindToController={propertyIdentifier:"@",aggregateFunction:"@",aggregateAlias:"@?"},this.controller=i,this.controllerAs="swListingAggregate",this.link=function(e,t,i){var n={propertyIdentifier:e.swListingAggregate.propertyIdentifier,aggregateFunction:e.swListingAggregate.aggregateFunction,aggregateAlias:e.swListingAggregate.aggregateAlias};e.$parent.swListingDisplay.aggregates.push(n)}}return e.Factory=function(){var t=function(){return new e};return t.$inject=[],t},e}();t.SWListingAggregate=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.init=function(){},this.init()}return e}(),n=function(){function e(e){var t=this;this.utilityService=e,this.restrict="EA",this.scope=!0,this.bindToController={propertyToCompare:"@",comparisonOperator:"@",comparisonValue:"@",comparisonProperty:"@",colorClass:"@",color:"@"},this.controller=i,this.controllerAs="swListingColorFilter",this.link=function(e,i,n){var r={propertyToCompare:e.swListingColorFilter.propertyToCompare,comparisonOperator:e.swListingColorFilter.comparisonOperator,comparisonValue:e.swListingColorFilter.comparisonValue,comparisonProperty:e.swListingColorFilter.comparisonProperty,colorClass:e.swListingColorFilter.colorClass,color:e.swListingColorFilter.color};t.utilityService.ArrayFindByPropertyValue(e.$parent.swListingDisplay.colorFilters,"propertyToCompare",r.propertyToCompare)===-1&&e.$parent.swListingDisplay.colorFilters.push(r)}}return e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["utilityService"],t},e}();t.SWListingColorFilter=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){var r=this;this.$injector=e,this.utilityService=t,this.listingService=i,this.rbkeyService=n,this.hasCellView=!1,this.hasHeaderView=!1,this.$onInit=function(){if(angular.isUndefined(r.isVisible)&&(r.isVisible=!0),angular.isUndefined(r.isDeletable)&&(r.isDeletable=!0),angular.isUndefined(r.search)&&(r.search=!0),r.editable=r.editable||!1,r.cellView){if(!r.$injector.has(r.cellView+"Directive"))throw r.cellView+" is not an existing directive";r.hasCellView=!0}if(r.headerView){if(!r.$injector.has(r.headerView+"Directive"))throw r.headerView+" is not an existing directive";r.hasHeaderView=!0}r.column={columnID:"C"+r.utilityService.createID(31),propertyIdentifier:r.propertyIdentifier,fallbackPropertyIdentifiers:r.fallbackPropertyIdentifiers,
processObjectProperty:r.processObjectProperty,title:r.title,tdclass:r.tdclass,search:r.search,sort:r.sort,filter:r.filter,range:r.range,editable:r.editable,buttonGroup:r.buttonGroup,hasCellView:r.hasCellView,hasHeaderView:r.hasHeaderView,isVisible:r.isVisible,isDeletable:r.isDeletable,isSearchable:r.search,action:r.action,queryString:r.queryString,persistent:r.persistent},r.hasCellView&&(r.column.cellView=r.cellView),r.hasHeaderView&&(r.column.headerView=r.utilityService.camelCaseToSnakeCase(r.headerView)),r.aggregate&&(r.column.aggregate=r.aggregate,r.column.aggregate.propertyIdentifier=r.propertyIdentifier)},this.$injector=e,this.utilityService=t,this.listingService=i,this.rbkeyService=n}return e.$inject=["$injector","utilityService","listingService","rbkeyService"],e}(),n=function(){function e(e){var t=this;this.listingService=e,this.restrict="EA",this.scope=!0,this.require={swListingDisplay:"?^swListingDisplay"},this.bindToController={propertyIdentifier:"@",processObjectProperty:"@?",aggregate:"=?",title:"@?",tdclass:"@?",search:"=?",sort:"=?",filter:"=?",isVisible:"=?",isDeletable:"=?",range:"=?",editable:"=?",buttonGroup:"=?",cellView:"@?",headerView:"@?",fallbackPropertyIdentifiers:"@?",action:"@?",queryString:"@?"},this.controller=i,this.controllerAs="swListingColumn",this.link=function(e,i,n,r){if(angular.isDefined(e.swListingDisplay)&&e.swListingDisplay.tableID&&e.swListingDisplay.tableID.length){var a=e.swListingDisplay.tableID;t.listingService.addColumn(a,e.swListingColumn.column),t.listingService.setupColumn(a,e.swListingColumn.column)}else{if(!(angular.isDefined(e.swListingColumn.swListingDisplay)&&e.swListingColumn.swListingDisplay.tableID&&e.swListingColumn.swListingDisplay.tableID.length))throw"listing display scope not available to sw-listing-column or there is no table id";var a=e.swListingColumn.swListingDisplay.tableID;t.listingService.addColumn(a,e.swListingColumn.column)}}}return e.$inject=["listingService"],e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["listingService"],t},e}();t.SWListingColumn=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){var a=this;this.$hibachi=e,this.metadataService=t,this.collectionService=i,this.listingService=n,this.observerService=r,this.displayOptionsClosed=!0,this.filtersClosed=!0,this.columnIsControllableMap={},this.filterActions=function(e){"add"!=e.action&&"remove"!=e.action||a.observerService.notify("swPaginationAction",{type:"setCurrentPage",payload:1}),a.filtersClosed=!0},this.getSelectedSearchColumnName=function(){return angular.isUndefined(a.selectedSearchColumn)?"All":a.selectedSearchColumn.title},this.canDisplayColumn=function(e){if(!a.listingColumns.length)return!0;if(angular.isDefined(a.columnIsControllableMap[e.propertyIdentifier]))return a.columnIsControllableMap[e.propertyIdentifier];for(var t=0;t<a.listingColumns.length;t++)e.propertyIdentifier==a.listingColumns[t].propertyIdentifier&&(a.columnIsControllableMap[e.propertyIdentifier]=!0);return a.columnIsControllableMap[e.propertyIdentifier]||(a.columnIsControllableMap[e.propertyIdentifier]=!1),a.columnIsControllableMap[e.propertyIdentifier]},this.addSearchFilter=function(){if(!angular.isUndefined(a.selectedSearchColumn)&&a.searchText){for(var e=a.searchText.split(" "),t=0;t<e.length;t++)a.collectionConfig.addLikeFilter(a.selectedSearchColumn.propertyIdentifier,e[t],"%w%",void 0,a.selectedSearchColumn.title);a.searchText="",a.collectionConfig.setKeywords(a.searchText),a.observerService.notify("swPaginationAction",{type:"setCurrentPage",payload:1})}},this.toggleDisplayOptions=function(e){void 0===e&&(e=!1),e?a.displayOptionsClosed=!0:a.displayOptionsClosed=!a.displayOptionsClosed},this.setItemInUse=function(e){a.itemInUse=e},this.removeFilter=function(e,t,i){void 0===i&&(i=!0),e.splice(t,1),i&&a.observerService.notify("swPaginationAction",{type:"setCurrentPage",payload:1})},this.toggleFilters=function(){a.filtersClosed&&(a.filtersClosed=!1,a.simple&&(a.newFilterPosition=a.collectionService.newFilterItem(a.collectionConfig.filterGroups[0].filterGroup,a.setItemInUse)))},this.selectFilterItem=function(e){a.filtersClosed=!1,a.collectionService.selectFilterItem(e)},this.saveCollection=function(e){e&&(a.collectionConfig=e),a.swListingDisplay.collectionConfig=a.collectionConfig,a.observerService.notify("swPaginationAction",{type:"setCurrentPage",payload:1})},angular.isUndefined(this.showToggleFilters)&&(this.showToggleFilters=!0),angular.isUndefined(this.showToggleDisplayOptions)&&(this.showToggleDisplayOptions=!0),angular.isUndefined(this.showFilters)&&(this.showFilters=!1),this.backupColumnsConfig=this.collectionConfig.getColumns(),angular.isDefined(this.tableId)&&(this.listingColumns=this.listingService.getListingColumns(this.tableId)),angular.isUndefined(this.simple)&&(this.simple=!0),this.filterPropertiesList={},e.getFilterPropertiesByBaseEntityName(this.collectionConfig.baseEntityAlias).then(function(e){t.setPropertiesList(e,a.collectionConfig.baseEntityAlias),a.filterPropertiesList[a.collectionConfig.baseEntityAlias]=t.getPropertiesListByBaseEntityAlias(a.collectionConfig.baseEntityAlias),t.formatPropertiesList(a.filterPropertiesList[a.collectionConfig.baseEntityAlias],a.collectionConfig.baseEntityAlias)}),this.observerService.attach(this.filterActions,"filterItemAction")}return e.$inject=["$hibachi","metadataService","collectionService","listingService","observerService"],e}(),n=function(){function e(e,t){this.collectionPartialsPath=e,this.hibachiPathBuilder=t,this.restrict="E",this.scope={},this.require={swListingDisplay:"?^swListingDisplay"},this.bindToController={collectionConfig:"=",tableId:"=?",getCollection:"&",showFilters:"=?",showToggleFilters:"=?",showToggleDisplayOptions:"=?",simple:"=?"},this.controller=i,this.controllerAs="swListingControls",this.templateUrl=this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath)+"listingcontrols.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["listingPartialPath","hibachiPathBuilder"],t},e.$inject=["listingPartialPath","hibachiPathBuilder"],e}();t.SWListingControls=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.$q=e}return e.$inject=["$q"],e}(),n=function(){function e(e,t){var n=this;this.scopeService=e,this.$q=t,this.restrict="EA",this.scope=!0,this.template="\n        \n    ",this.bindToController={filterPropertyIdentifier:"@",filterComparisonOperator:"@",filterComparisonValue:"@"},this.controller=i,this.controllerAs="swListingDisableRule",this.link=function(e,t,i){var r={filterPropertyIdentifier:e.swListingDisableRule.filterPropertyIdentifier,filterComparisonOperator:e.swListingDisableRule.filterComparisonOperator,filterComparisonValue:e.swListingDisableRule.filterComparisonValue},a=n.scopeService.getRootParentScope(e,"swListingDisplay");if(!angular.isDefined(a.swListingDisplay))throw"listing display scope not available to sw-listing-disable-rule";a=a.swListingDisplay,a.disableRules.push(r)}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["scopeService","$q"],t},e}();t.SWListingDisableRule=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c,u,d){var p=this;this.$scope=e,this.$transclude=t,this.$timeout=i,this.$q=n,this.$hibachi=r,this.utilityService=a,this.collectionConfigService=o,this.listingService=s,this.paginationService=l,this.selectionService=c,this.observerService=u,this.rbkeyService=d,this.actions=[],this.allpropertyidentifiers="",this.allprocessobjectproperties="false",this.aggregates=[],this.buttonGroup=[],this.childCollectionConfigs={},this.collectionConfigs=[],this.collectionObjects=[],this.colorFilters=[],this.columns=[],this.disableRules=[],this.expandableRules=[],this.exampleEntity="",this.filters=[],this.filterGroups=[],this.hideRules=[],this.multiselectable=!1,this.orderBys=[],this.orderByStates={},this.orderByIndices={},this.pageRecordsWithManualSortOrder={},this.searching=!1,this.selectable=!1,this.showSearchFilters=!1,this.sortable=!1,this.getCollectionByPagination=function(e){if(e.type){switch(e.type){case"setCurrentPage":p.collectionConfig.currentPage=e.payload;break;case"nextPage":p.collectionConfig.currentPage=e.payload;break;case"prevPage":p.collectionConfig.currentPage=e.payload;break;case"setPageShow":p.collectionConfig.currentPage=1,p.collectionConfig.setPageShow(e.payload)}p.getCollection=p.collectionConfig.getEntity().then(function(e){p.collectionData=e,p.observerService.notify("swPaginationUpdate",e)})}},this.setupCollectionPromise=function(){angular.isUndefined(p.getCollection)&&(p.getCollection=p.listingService.setupDefaultGetCollection(p.tableID)),p.paginator.getCollection=p.getCollection;p.tableID;p.listingService.getCollection(p.tableID)},this.getCollectionObserver=function(e){p.collectionConfig.loadJson(e.collectionConfig),p.collectionData=void 0,p.$timeout(function(){p.getCollection()})},this.initializeState=function(){null!=p.name?p.tableID=p.name:p.tableID="LD"+p.utilityService.createID(),angular.isUndefined(p.collectionConfig)&&(p.collectionConfig=null),angular.isUndefined(p.multiSlot)&&(p.multiSlot=!1),angular.isDefined(p.administrativeCount)?p.administrativeCount=parseInt(p.administrativeCount):p.administrativeCount=0,p.recordDetailAction&&p.recordDetailAction.length&&(p.administrativeCount++,p.adminattributes=p.getAdminAttributesByType("detail")),p.recordEditAction&&p.recordEditAction.length&&(p.administrativeCount++,p.adminattributes=p.getAdminAttributesByType("edit")),p.recordDeleteAction&&p.recordDeleteAction.length&&(p.administrativeCount++,p.adminattributes=p.getAdminAttributesByType("delete")),p.recordAddAction&&p.recordAddAction.length&&(p.administrativeCount++,p.adminattributes=p.getAdminAttributesByType("add")),null!=p.collectionConfig&&angular.isDefined(p.collection)&&angular.isDefined(p.collection.collectionConfig)&&(p.collectionConfig=p.collection.collectionConfig),angular.isUndefined(p.collectionObject)&&angular.isDefined(p.collection)&&angular.isDefined(p.collection.collectionObject)&&(p.collectionObject=p.collection.collectionObject),p.processObjectProperties=p.processObjectProperties||"",p.recordProcessButtonDisplayFlag=p.recordProcessButtonDisplayFlag||!0,p.norecordstext=p.rbkeyService.getRBKey("entity."+p.collectionObject+".norecords"),angular.isUndefined(p.defaultSelectEvent)&&(p.defaultSelectEvent="swSelectionToggleSelection"+p.tableID),angular.isUndefined(p.isAngularRoute)&&(p.isAngularRoute=!0),angular.isUndefined(p.customListingControls)&&(p.customListingControls=!1),angular.isUndefined(p.hasSearch)&&(p.hasSearch=!0,p.showSearch=!0),angular.isUndefined(p.showOrderBy)&&(p.showOrderBy=!0),angular.isUndefined(p.expandable)&&(p.expandable=!1),angular.isDefined(p.exportAction)&&(p.exportAction=p.$hibachi.buildUrl("main.collectionExport")+"&collectionExportID="),angular.isDefined(p.printAction)&&(p.printAction=p.$hibachi.buildUrl("main.collectionPrint")+"&collectionExportID="),angular.isDefined(p.emailAction)&&(p.emailAction=p.$hibachi.buildUrl("main.collectionEmail")+"&collectionExportID="),p.paginator=p.paginationService.createPagination(),p.hasCollectionPromise=!1,angular.isUndefined(p.getChildCount)&&(p.getChildCount=!1),p.tableclass=p.tableclass||"",p.tableclass=p.utilityService.listPrepend(p.tableclass,"table table-bordered table-hover"," "),angular.isDefined(p.sortableFieldName)&&(p.sortableFieldName="sorting"+p.tableID)},this.getListingPageRecordsUpdateEventString=function(){return p.listingService.getListingPageRecordsUpdateEventString(p.tableID)},this.getKeyOfMatchedHideRule=function(e){return p.listingService.getKeyOfMatchedHideRule(p.tableID,e)},this.getPageRecordMatchesHideRule=function(e){return p.listingService.getPageRecordMatchesHideRule(p.tableID,e)},this.getPageRecordValueByColumn=function(e,t){return p.listingService.getPageRecordValueByColumn(e,t)},this.getKeyOfMatchedDisableRule=function(e){return p.listingService.getKeyOfMatchedExpandableRule(p.tableID,e)},this.getPageRecordMatchesDisableRule=function(e){return p.listingService.getPageRecordMatchesDisableRule(p.tableID,e)},this.getKeyOfMatchedExpandableRule=function(e){return p.listingService.getKeyOfMatchedExpandableRule(p.tableID,e)},this.getPageRecordMatchesExpandableRule=function(e){return p.listingService.getPageRecordMatchesExpandableRule(p.tableID,e)},this.getPageRecordChildCollectionConfigForExpandableRule=function(e){return p.listingService.getPageRecordChildCollectionConfigForExpandableRule(p.tableID,e)},this.getPageRecordRefreshChildrenEvent=function(e){return p.listingService.hasPageRecordRefreshChildrenEvent(p.tableID,e)?p.listingService.getPageRecordRefreshChildrenEvent(p.tableID,e):""},this.getExampleEntityForExpandableRecord=function(e){return p.listingService.getExampleEntityForExpandableRecord(p.tableID,e)},this.getNGClassObjectForPageRecordRow=function(e){return p.listingService.getNGClassObjectForPageRecordRow(p.tableID,e)},this.getNGClassObjectForPageRecordCell=function(e,t){var i="{";return i+"}"},this.getColorFilterConditionString=function(e,t){return p.listingService.getColorFilterConditionString(e,t)},this.hasSingleCollectionConfig=function(){return p.collectionConfig&&0==p.collectionConfigs.length},this.toggleOrderBy=function(e){p.listingService.toggleOrderBy(p.tableID,e)},this.columnOrderByIndex=function(e){return p.listingService.columnOrderByIndex(p.tableID,e)},this.updateMultiselectValues=function(e){switch(p.multiselectValues=p.selectionService.getSelections(p.tableID),p.selectionService.isAllSelected(p.tableID)?p.multiselectCount=p.collectionData.recordsCount-p.selectionService.getSelectionCount(p.tableID):p.multiselectCount=p.selectionService.getSelectionCount(p.tableID),e.action){case"uncheck":p.isCurrentPageRecordsSelected=!1;break;case"selectAll":p.allSelected=!0,p.isCurrentPageRecordsSelected=!1;break;case"clear":p.allSelected=!1,p.isCurrentPageRecordsSelected=!1}},this.getPageRecordKey=function(e){return p.listingService.getPageRecordKey(e)},this.getAdminAttributesByType=function(e){var t="record"+e.toUpperCase()+"Action",i=t+"Property",n=t+"QueryString",r=t+"Modal";p.adminattributes=p.utilityService.listAppend(p.adminattributes,"data-"+e+'action="'+p[t]+'"'," "),p[i]&&p[i].length&&(p.adminattributes=p.utilityService.listAppend(p.adminattributes,"data-"+e+'actionproperty="'+p[i]+'"'," ")),p.adminattributes=p.utilityService.listAppend(p.adminattributes,"data-"+e+'querystring="'+p[n]+'"'," "),p.adminattributes=p.utilityService.listAppend(p.adminattributes,"data-"+e+'modal="'+p[r]+'"'," ")},this.getExportAction=function(){return p.exportAction+p.collectionID},this.getPrintAction=function(){return p.printAction+p.collectionID},this.getEmailAction=function(){return p.emailAction+p.collectionID},this.exportCurrentList=function(e){if(void 0===e&&(e=!1),0==p.collectionConfigs.length){var t=angular.copy(p.collectionConfig.getCollectionConfig());e&&!angular.isUndefined(p.selectionService.getSelections(p.tableID))&&p.selectionService.getSelections(p.tableID).length>0&&(t.filterGroups[0].filterGroup=[{displayPropertyIdentifier:p.rbkeyService.getRBKey("entity."+t.baseEntityName.toLowerCase()+"."+p.exampleEntity.$$getIDName().toLowerCase()),propertyIdentifier:t.baseEntityAlias+"."+p.exampleEntity.$$getIDName(),comparisonOperator:p.allSelected?"not in":"in",value:p.selectionService.getSelections(p.tableID).join(),displayValue:p.selectionService.getSelections(p.tableID).join(),ormtype:"string",fieldtype:"id",conditionDisplay:"In List"}])}$("body").append('<form action="/?'+p.$hibachi.getConfigValue("action")+'=main.collectionConfigExport" method="post" id="formExport"></form>'),$("#formExport").append("<input type='hidden' name='collectionConfig' value='"+angular.toJson(t)+"' />").submit().remove()},this.paginationPageChange=function(e){p.isCurrentPageRecordsSelected=!1},this.selectCurrentPageRecords=function(){p.listingService.selectCurrentPageRecords(p.tableID)},this.clearSelection=function(){p.selectionService.clearSelection(p.tableID)},this.selectAll=function(){p.selectionService.selectAll(p.tableID)},this.multipleCollectionDeffered=n.defer(),this.multipleCollectionPromise=this.multipleCollectionDeffered.promise,this.singleCollectionDeferred=n.defer(),this.singleCollectionPromise=this.singleCollectionDeferred.promise,angular.isDefined(this.collection)&&angular.isString(this.collection)&&(this.baseEntityName=this.collection,this.collectionObject=this.collection,this.collectionConfig=this.collectionConfigService.newCollectionConfig(this.collectionObject),this.$timeout(function(){p.collection=p.collectionConfig,p.columns=p.collectionConfig.columns}),this.multipleCollectionDeffered.reject()),this.initializeState(),angular.isDefined(this.collectionPromise)&&(this.hasCollectionPromise=!0,this.multipleCollectionDeffered.reject()),null!=this.collectionConfig&&this.multipleCollectionDeffered.reject(),this.listingService.setListingState(this.tableID,this),this.$transclude(this.$scope,function(){}),this.hasCollectionPromise=angular.isDefined(this.collectionPromise),this.multiSlot?(this.singleCollectionPromise.then(function(){p.multipleCollectionDeffered.reject()}),this.multipleCollectionPromise.then(function(){p.listingService.setupInMultiCollectionConfigMode(p.tableID)}).catch(function(){p.listingService.setupInSingleCollectionConfigMode(p.tableID,p.$scope)}).finally(function(){angular.isUndefined(p.getCollection)&&(p.getCollection=p.listingService.setupDefaultGetCollection(p.tableID)),p.paginator.getCollection=p.getCollection;var e=p.tableID;p.observerService.attach(p.getCollectionObserver,"getCollection",e)})):0==this.multiSlot&&(this.columns&&this.columns.length&&(this.collectionConfig.columns=this.columns),this.setupCollectionPromise()),this.collectionObject&&(this.exampleEntity=this.$hibachi.getEntityExample(this.collectionObject)),this.observerService.attach(this.getCollectionByPagination,"swPaginationAction")}return e.$inject=["$scope","$transclude","$timeout","$q","$hibachi","utilityService","collectionConfigService","listingService","paginationService","selectionService","observerService","rbkeyService"],e}(),n=function(){function e(e,t){this.listingPartialPath=e,this.hibachiPathBuilder=t,this.restrict="E",this.scope={},this.transclude={addAction:"?swListingAddAction",detailAction:"?swListingDetailAction",deleteAction:"?swListingDeleteAction",editAction:"?swListingEditAction",saveAction:"?swListingSaveAction",columns:"?swListingColumns",collectionConfigs:"?swCollectionConfigs",disableRules:"?swDisabledRowRules",expandableRules:"?swExpandableRowRules",customListingControls:"?swCustomListingControls"},this.bindToController={isRadio:"<?",angularLinks:"<?",isAngularRoute:"<?",name:"@?",collection:"<?",collectionConfig:"<?",getCollection:"&?",collectionPromise:"<?",edit:"<?",title:"<?",childPropertyName:"@?",baseEntity:"<?",baseEntityName:"@?",baseEntityId:"@?",actions:"<?",administrativeCount:"@?",recordEditAction:"@?",recordEditActionProperty:"@?",recordEditQueryString:"@?",recordEditModal:"<?",recordEditDisabled:"<?",recordDetailAction:"@?",recordDetailActionProperty:"@?",recordDetailQueryString:"@?",recordDetailModal:"<?",recordDeleteAction:"@?",recordDeleteActionProperty:"@?",recordDeleteQueryString:"@?",recordAddAction:"@?",recordAddActionProperty:"@?",recordAddQueryString:"@?",recordAddModal:"<?",recordAddDisabled:"<?",recordProcessesConfig:"<?",parentPropertyName:"@?",expandable:"<?",expandableOpenRoot:"<?",searchText:"<?",sortable:"<?",sortableFieldName:"@?",sortProperty:"@?",sortContextIDColumn:"@?",sortContextIDValue:"@?",selectFiledName:"@?",selectValue:"@?",selectTitle:"@?",multiselectFieldName:"@?",multiselectPropertyIdentifier:"@?",multiselectIdPaths:"@?",multiselectValues:"@?",tableattributes:"@?",tableclass:"@?",typeaheadDataKey:"@?",adminattributes:"@?",showheader:"<?",showOrderBy:"<?",showTopPagination:"<?",showSearch:"<?",showSearchFilters:"<?",showSimpleListingControls:"<?",createModal:"<?",createAction:"@?",createQueryString:"@?",exportAction:"@?",getChildCount:"<?",hasSearch:"<?",hasActionBar:"<?",multiSlot:"<?",customListingControls:"<?"},this.controller=i,this.controllerAs="swListingDisplay",this.compile=function(e,t){return{pre:function(e,t,i,n){},post:function(e,t,i){}}},this.listingPartialPath=e,this.templateUrl=t.buildPartialsPath(this.listingPartialPath)+"listingdisplay.html"}return e.$inject=["listingPartialPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["listingPartialPath","hibachiPathBuilder"],t},e}();t.SWListingDisplay=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){var a=this;if(this.listingPartialPath=e,this.hibachiPathBuilder=t,this.listingService=i,this.utilityService=n,this.$scope=r,this.expandable=!1,this.getDirectiveTemplate=function(){var e=a.hibachiPathBuilder.buildPartialsPath(a.listingPartialPath)+"listingdisplaycell.html";return(a.expandable||a.swListingDisplay.expandable&&a.column.tdclass&&"primary"===a.column.tdclass)&&(e=a.hibachiPathBuilder.buildPartialsPath(a.listingPartialPath)+"listingdisplayselectablecellexpandable.html"),a.swListingDisplay.expandable&&a.column.tdclass&&"primary"===a.column.tdclass||("timestamp"===a.column.ormtype?e=a.hibachiPathBuilder.buildPartialsPath(a.listingPartialPath)+"listingdisplaycelldate.html":"currency"===a.column.type?e=a.hibachiPathBuilder.buildPartialsPath(a.listingPartialPath)+"listingdisplaycellcurrency.html":a.column.aggregate&&(a.value=a.pageRecord[a.swListingDisplay.getPageRecordKey(a.column.aggregate.aggregateAlias)],e=a.hibachiPathBuilder.buildPartialsPath(a.listingPartialPath)+"listingdisplaycellaggregate.html")),e},this.hibachiPathBuilder=t,this.listingPartialPath=e,this.$scope=r,this.value=this.listingService.getPageRecordValueByColumn(this.pageRecord,this.column),this.popover=this.utilityService.replaceStringWithProperties(this.column.tooltip,this.pageRecord),this.hasActionCaller=!1,this.column.action&&this.column.queryString&&(this.hasActionCaller=!0,this.actionCaller={action:this.column.action},this.column.queryString&&(this.actionCaller.queryString=this.utilityService.replaceStringWithProperties(this.column.queryString,this.pageRecord))),this.cellView){var o=this.utilityService.camelCaseToSnakeCase(this.cellView);this.template=o,this.templateVariables=this.pageRecord,angular.isDefined(this.column.columnID)&&(this.templateVariables.column=this.column.columnID),angular.isDefined(this.swListingDisplay.baseEntityName)&&angular.isDefined(this.swListingDisplay.baseEntityId)&&(this.templateVariables.baseEntityId=this.swListingDisplay.baseEntityId,this.templateVariables.baseEntityName=this.swListingDisplay.baseEntityName),angular.isDefined(this.column.propertyIdentifier)&&(this.templateVariables.columnPropertyIdentifier=this.column.propertyIdentifier),this.templateVariables.listingDisplayID=this.swListingDisplay.tableID}else this.hasActionCaller||(this.templateUrl=this.getDirectiveTemplate())}return e.$inject=["listingPartialPath","hibachiPathBuilder","listingService","utilityService","$scope"],e}(),n=function(){function e(){this.restrict="E",this.scope={},this.bindToController={swListingDisplay:"=?",column:"=?",pageRecord:"=?",cellView:"@?",expandableRules:"=?"},this.controller=i,this.controllerAs="swListingDisplayCell",this.template='\n        <div ng-if="swListingDisplayCell.template" sw-directive data-variables="swListingDisplayCell.templateVariables" data-directive-template="swListingDisplayCell.template"></div>\n        <div ng-if="swListingDisplayCell.templateUrl" ng-include src="swListingDisplayCell.templateUrl"></div>\n        <sw-action-caller ng-if="swListingDisplayCell.hasActionCaller"\n                    data-action="{{swListingDisplayCell.actionCaller.action}}"\n                    data-query-string="{{swListingDisplayCell.actionCaller.queryString}}"\n                    data-text="{{swListingDisplayCell.value}}"\n                    data-tooltip-text="{{swListingDisplayCell.popover}}"\n                    data-is-angular-route="false"\n\n        >\n        </sw-action-caller>\n    '}return e.Factory=function(){var t=function(){return new e};return t.$inject=[],t},e}();t.SWListingDisplayCell=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.$q=e,this.hasChildrenCollectionConfigDeferred=e.defer(),this.hasChildrenCollectionConfigPromise=this.hasChildrenCollectionConfigDeferred.promise,this.childrenCollectionConfig=null}return e.$inject=["$q"],e}(),n=function(){function e(e,t){var n=this;this.scopeService=e,this.$q=t,this.restrict="EA",this.scope=!0,this.transclude={collectionConfig:"?swConfig"},this.template='\n        <div ng-transclude="collectionConfig"></div> \n    ',this.bindToController={childrenCollectionConfig:"=?",filterPropertyIdentifier:"@",filterComparisonOperator:"@",filterComparisonValue:"@",refreshChildrenEvent:"@?"},this.controller=i,this.controllerAs="swListingExpandableRule",this.link=function(e,t,i){e.swListingExpandableRule.hasChildrenCollectionConfigPromise.then(function(){var t={filterPropertyIdentifier:e.swListingExpandableRule.filterPropertyIdentifier,filterComparisonOperator:e.swListingExpandableRule.filterComparisonOperator,filterComparisonValue:e.swListingExpandableRule.filterComparisonValue,childrenCollectionConfig:e.swListingExpandableRule.childrenCollectionConfig,refreshChildrenEvent:e.swListingExpandableRule.refreshChildrenEvent},i=n.scopeService.getRootParentScope(e,"swListingDisplay");if(!angular.isDefined(i.swListingDisplay))throw"listing display scope not available to sw-listing-expandable-rule";i=i.swListingDisplay,i.expandableRules.push(t)})}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["scopeService","$q"],t},e}();t.SWListingExpandableRule=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.init=function(){},this.init()}return e}(),n=function(){function e(){this.restrict="EA",this.scope=!0,this.bindToController={propertyIdentifier:"@",comparisonOperator:"@",comparisonValue:"@",logicalOperator:"@",hidden:"@?"},this.controller=i,this.controllerAs="swListingFilter",this.link=function(e,t,i){var n={propertyIdentifier:e.swListingFilter.propertyIdentifier,comparisonOperator:e.swListingFilter.comparisonOperator,comparisonValue:e.swListingFilter.comparisonValue,logicalOperator:e.swListingFilter.logicalOperator,hidden:!1};angular.isDefined(e.swListingFilter.hidden)&&(n.hidden=e.swListingFilter.hidden),angular.isDefined(e.$parent.swListingFilterGroup)?e.$parent.swListingFilterGroup.filters.push(n):e.$parent.swListingDisplay.filters.push(n)}}return e.Factory=function(){var t=function(){return new e};return t.$inject=[],t},e}();t.SWListingFilter=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){this.$scope=e,this.$transclude=t,this.filters=[],t(e,function(){}),e.$parent.swListingDisplay.filterGroups.push(this.filters)}return e}(),n=function(){function e(){this.restrict="EA",this.transclude=!0,this.scope=!0,this.bindToController={},this.controller=i,this.controllerAs="swListingFilterGroup"}return e.Factory=function(){var t=function(){return new e};return t.$inject=[],t},e.$inject=[],e}();t.SWListingFilterGroup=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.$timeout=e,this.init=function(){t.searching=!1},this.search=function(){t.searching=!0,t._timeoutPromise&&t.$timeout.cancel(t._timeoutPromise),t._timeoutPromise=t.$timeout(function(){t.getCollection()},500)},this.init()}return e.$inject=["$timeout"],e}(),n=function(){function e(e,t,n){this.utilityService=e,this.restrict="EA",this.scope={},this.bindToController={searching:"=",searchText:"=",getCollection:"="},this.controller=i,this.controllerAs="swListingGlobalSearch",this.link=function(e,t,i){},this.templateUrl=n.buildPartialsPath(t)+"listingglobalsearch.html"}return e.$inject=["utilityService","listingPartialPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["utilityService","listingPartialPath","hibachiPathBuilder"],t},e}();t.SWListingGlobalSearch=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.init=function(){},this.init()}return e}(),n=function(){function e(e){this.utilityService=e,this.restrict="EA",this.scope=!0,this.bindToController={orderBy:"@"},this.controller=i,this.controllerAs="swListingOrderBy",this.link=function(e,t,i){var n={orderBy:e.swListingOrderBy.orderBy};e.$parent.swListingDisplay.orderBys.push(n)}}return e.$inject=["utilityService"],e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["utilityService"],t},e}();t.SWListingOrderBy=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){var t=this;this.listingService=e,this.save=function(){t.listingService.markSaved(t.listingID,t.pageRecordIndex)}}return e.$inject=["listingService"],e}(),n=function(){function e(e,t,n,r){var a=this;this.hibachiPathBuilder=e,this.listingPartialPath=t,this.utilityService=n,this.scopeService=r,this.restrict="EA",this.scope=!0,this.bindToController={},this.controller=i,this.controllerAs="swListingRowSave",this.link=function(e,t,i){var n=a.scopeService.getRootParentScope(e,"pageRecord");angular.isDefined(n.pageRecord)&&(e.swListingRowSave.pageRecord=n.pageRecord);var n=a.scopeService.getRootParentScope(e,"pageRecordKey");angular.isDefined(n.pageRecordKey)&&(e.swListingRowSave.pageRecordIndex=n.pageRecordKey);var n=a.scopeService.getRootParentScope(e,"swListingDisplay");angular.isDefined(n.swListingDisplay)&&(e.swListingRowSave.listingID=n.swListingDisplay.tableID)},this.templateUrl=e.buildPartialsPath(this.listingPartialPath)+"listingrowsave.html"}return e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["hibachiPathBuilder","listingPartialPath","utilityService","scopeService"],t},e.$inject=["utilityService"],e}();t.SWListingRowSave=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){var a=this;this.$hibachi=e,this.metadataService=t,this.listingService=i,this.collectionService=n,this.observerService=r,this.displayOptionsClosed=!0,this.filtersClosed=!0,this.$onInit=function(){a.searchableOptions=angular.copy(a.swListingDisplay.collectionConfig.columns),a.selectedSearchColumn={title:"All"},a.configureSearchableColumns(a.selectedSearchColumn)},this.selectSearchColumn=function(e){a.selectedSearchColumn=e,a.configureSearchableColumns(e),a.searchText&&a.search()},this.search=function(){a.searchText.length>0?a.listingService.setExpandable(a.listingId,!1):a.listingService.setExpandable(a.listingId,!0),a.collectionConfig.setKeywords(a.searchText),a.swListingDisplay.collectionConfig=a.collectionConfig,a.observerService.notify("swPaginationAction",{type:"setCurrentPage",payload:1})},this.configureSearchableColumns=function(e){var t="";e.propertyIdentifier&&(t=e.propertyIdentifier);for(var i=0;i<a.swListingDisplay.collectionConfig.columns.length;i++)t.length?t===a.swListingDisplay.collectionConfig.columns[i].propertyIdentifier?a.swListingDisplay.collectionConfig.columns[i].isSearchable=!0:a.swListingDisplay.collectionConfig.columns[i].isSearchable=!1:a.swListingDisplay.collectionConfig.columns[i].isSearchable=!0},angular.isUndefined(this.showToggleFilters)&&(this.showToggleFilters=!0),angular.isUndefined(this.showToggleDisplayOptions)&&(this.showToggleDisplayOptions=!0)}return e.$inject=["$hibachi","metadataService","listingService","collectionService","observerService"],
e}(),n=function(){function e(e,t,n){this.scopeService=e,this.collectionPartialsPath=t,this.hibachiPathBuilder=n,this.restrict="EA",this.scope={},this.require={swListingDisplay:"?^swListingDisplay",swListingControls:"?^swListingControls"},this.bindToController={collectionConfig:"<?",paginator:"=?",toggleFilters:"&?",toggleDisplayOptions:"&?",showToggleFilters:"=?",showToggleDisplayOptions:"=?",listingId:"@?"},this.controller=i,this.controllerAs="swListingSearch",this.templateUrl=this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath)+"listingsearch.html"}return e.$inject=["scopeService","collectionPartialsPath","hibachiPathBuilder"],e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["scopeService","listingPartialPath","hibachiPathBuilder"],t},e}();t.SWListingSearch=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(10),r=i(245),a=i(235),o=i(236),s=i(233),l=i(230),c=i(231),u=i(232),d=i(234),p=i(237),f=i(238),h=i(239),g=i(241),m=i(242),y=i(243),v=i(240),b=angular.module("hibachi.listing",[n.collectionmodule.name]).run([function(){}]).service("listingService",r.ListingService).directive("swListingDisplay",a.SWListingDisplay.Factory()).directive("swListingControls",s.SWListingControls.Factory()).directive("swListingAggregate",l.SWListingAggregate.Factory()).directive("swListingColorFilter",c.SWListingColorFilter.Factory()).directive("swListingColumn",u.SWListingColumn.Factory()).directive("swListingDisableRule",d.SWListingDisableRule.Factory()).directive("swListingExpandableRule",p.SWListingExpandableRule.Factory()).directive("swListingDisplayCell",o.SWListingDisplayCell.Factory()).directive("swListingFilter",f.SWListingFilter.Factory()).directive("swListingFilterGroup",h.SWListingFilterGroup.Factory()).directive("swListingOrderBy",g.SWListingOrderBy.Factory()).directive("swListingRowSave",m.SWListingRowSave.Factory()).directive("swListingSearch",y.SWListingSearch.Factory()).directive("swListingGlobalSearch",v.SWListingGlobalSearch.Factory()).constant("listingPartialPath","listing/components/");t.listingmodule=b},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s,l,c){var u=this;this.$timeout=e,this.$q=t,this.collectionConfigService=i,this.filterService=n,this.historyService=r,this.observerService=a,this.rbkeyService=o,this.selectionService=s,this.utilityService=l,this.$hibachi=c,this.listingDisplays={},this.getListingPageRecordsUpdateEventString=function(e){return e+"pageRecordsUpdated"},this.getListingOrderByChangedEventString=function(e){return e+"orderByChanged"},this.getListingInitiatedEventString=function(e){return e+"initiated"},this.notifyListingPageRecordsUpdate=function(e){u.observerService.notify(u.getListingPageRecordsUpdateEventString(e),e)},this.attachToListingPageRecordsUpdate=function(e,t,i){u.observerService.attach(t,u.getListingPageRecordsUpdateEventString(e),i)},this.attachToOrderByChangedUpdate=function(e,t,i){u.observerService.attach(t,u.getListingOrderByChangedEventString(e),i)},this.attachToListingInitiated=function(e,t){u.observerService.attach(t,u.getListingInitiatedEventString(e)),u.historyService.hasHistory(u.getListingInitiatedEventString(e))&&t()},this.setListingState=function(e,t){u.listingDisplays[e]=t,u.observerService.notifyAndRecord(u.getListingInitiatedEventString(e))},this.getListing=function(e){return u.listingDisplays[e]},this.getListingColumns=function(e){return u.getListing(e).columns||u.getListingCollectionConfigColumns(e)},this.getListingCollectionConfigColumns=function(e){if(null!=u.getListing(e).collectionConfig)return u.getListing(e).collectionConfig.columns},this.getListingExampleEntity=function(e){return null!=u.getListing(e).exampleEntity?u.getListing(e).exampleEntity:void u.setupExampleEntity(e)},this.getListingCollectionConfigColumnIndexByPropertyIdentifier=function(e,t){var i=u.getListingCollectionConfigColumns(e);return u.utilityService.ArrayFindByPropertyValue(i,"propertyIdentifier",t)},this.getListingColumnIndexByPropertyIdentifier=function(e,t){var i=u.getListingColumns(e);return u.utilityService.ArrayFindByPropertyValue(i,"propertyIdentifier",t)},this.getListingBaseEntityName=function(e){var t=u.getListing(e).baseEntityName||u.getListing(e).collectionObject;return null==t&&null!=u.getListing(e).collectionConfig&&(t=u.getListing(e).collectionConfig.baseEntityName),null==t&&null!=u.getListing(e).collectionData&&(t=u.getListing(e).collectionData.collectionObject),t},this.getListingBaseEntityPrimaryIDPropertyName=function(e){if(null!=u.getListingExampleEntity(e))return u.getListingExampleEntity(e).$$getIDName()},this.getListingPrimaryEntityName=function(e){return u.getListing(e).baseEntityName||u.getListing(e).collectionObject||u.getListing(e).collectionConfig.baseEntityName},this.getListingEntityPrimaryIDPropertyName=function(e){return u.$hibachi.getPrimaryIDPropertyNameByEntityName(u.getListingPrimaryEntityName(e))},this.getListingPageRecords=function(e){if(angular.isDefined(u.getListing(e))&&angular.isDefined(u.getListing(e).collectionData)&&angular.isDefined(u.getListing(e).collectionData.pageRecords))return u.getListing(e).collectionData.pageRecords},this.getCollection=function(e){return u.getListing(e).getCollection()},this.getPageRecordsWithManualSortOrder=function(e){if(!angular.isDefined(u.getListing(e))||null==u.getListingPageRecords(e))return angular.toJson({});var t=u.getListingPageRecords(e),i=u.getListingEntityPrimaryIDPropertyName(e),n=u.getListing(e).collectionConfig.baseEntityAlias+"."+i,r={};u.$timeout(function(){for(var a=0;a<t.length;a++){var o=t[a],s=t[a][i],l=a+1,c=u.getListingCollectionConfigColumnIndexByPropertyIdentifier(e,n);if(angular.isDefined(s))r[s]=l;else if(c!==-1){var d=u.getListingCollectionConfigColumns(e)[c];if(angular.isDefined(d.fallbackPropertyIdentifiers))for(var p=d.fallbackPropertyIdentifiers.split(","),f=0;f<p.length;f++)angular.isDefined(o[p[f]])&&(r[o[p[f]]]=l)}}return u.getListing(e).pageRecordsWithManualSortOrder=angular.toJson(r),u.getListing(e).pageRecordsWithManualSortOrders},0)},this.getListingPageRecordIndexByPageRecord=function(e,t){for(var i=u.getListingPageRecords(e),n=u.getListingEntityPrimaryIDPropertyName(e),r=0;r<i.length;r++){var a=i[r];if(a[n]==t[n])return r}return-1},this.insertListingPageRecord=function(e,t){t.newFlag=!0,angular.isDefined(u.getListingPageRecords(e))&&(u.notifyListingPageRecordsUpdate(e),u.getListingPageRecords(e).unshift(t))},this.removeListingPageRecord=function(e,t){var i=u.getListingPageRecords(e);if(u.getListingPageRecordIndexByPageRecord(e,t)!=-1)return u.notifyListingPageRecordsUpdate(e),i.splice(u.getListingPageRecordIndexByPageRecord(e,t),1)[0]},this.getPageRecordKey=function(e){if(e){var t="";return t=0===e.indexOf("_")?e.substring(e.indexOf(".")+1,e.length):e,u.utilityService.replaceAll(t,".","_")}return""},this.getPageRecordValueByColumn=function(e,t){var i=e[u.getPageRecordKey(t.propertyIdentifier)]||"";if(""==i)for(var n in e)n.indexOf(u.getPageRecordKey(t.propertyIdentifier).trim())!=-1&&(i=e[n]);if((angular.isUndefined(i)||angular.isString(i)&&0==i.trim().length)&&angular.isDefined(t.fallbackPropertyIdentifiers))for(var r=t.fallbackPropertyIdentifiers.replace(".","_").split(","),a=0;a<r.length;a++)if(angular.isDefined(e[u.getPageRecordKey(r[a])])){i=e[u.getPageRecordKey(r[a])];break}return i},this.selectCurrentPageRecords=function(e){if(u.getListing(e).collectionData.pageRecords)for(var t=0;t<u.getListing(e).collectionData.pageRecords.length;t++)1==u.getListing(e).isCurrentPageRecordsSelected?u.getListing(e).selectionService.addSelection(u.getListing(e).tableID,u.getListingPageRecords(e)[t][u.getListingBaseEntityPrimaryIDPropertyName(e)]):u.selectionService.removeSelection(u.getListing(e).tableID,u.getListingPageRecords(e)[t][u.getListingBaseEntityPrimaryIDPropertyName(e)])},this.getSelectedBy=function(e,t,i){return e&&t&&i?u.getListing(e).collectionData.pageRecords.findIndex(function(e){return e[t]==i}):-1},this.clearAllSelections=function(e){if(!e)return-1;for(var t=0;t<u.getListing(e).collectionData.pageRecords.length;t++)u.selectionService.removeSelection(u.getListing(e).tableID,u.getListingPageRecords(e)[t][u.getListingBaseEntityPrimaryIDPropertyName(e)])},this.getNGClassObjectForPageRecordRow=function(e,t){var i="{";angular.forEach(u.getListing(e).colorFilters,function(e,n){i=i.concat("'"+e.colorClass+"':"+u.getColorFilterConditionString(e,t)),i=i.concat(",")}),i=i.concat(" 's-child':"+u.getPageRecordIsChild(e,t));var n=!1;return null!=t.newFlag&&"string"==typeof t.newFlag&&""!==t.newFlag.trim()&&(n=t.newFlag),i=i.concat(",'s-selected-row':"+n),i=i.concat(",'s-disabled':"+u.getPageRecordMatchesDisableRule(e,t)),i=i.concat(",'s-edited':pageRecord.edited"),i+"}"},this.getPageRecordIsChild=function(e,t){var i=!1;return i},this.determineRowEdited=function(e,t){var i=0;for(var n in e[t].editedFields)if(i++,i>1)return e[t].edited=!0,!0;return e[t].edited=!1,!1},this.markUnedited=function(e,t,i){var n=u.getListingPageRecords(e);return angular.isDefined(n[t].editedFields[i])&&delete n[t].editedFields[i],u.determineRowEdited(n,t)},this.markEdited=function(e,t,i,n){var r=u.getListingPageRecords(e);return angular.isUndefined(r[t].editedFields)&&!angular.isObject(r[t].editedFields)&&(r[t].editedFields={}),r[t].editedFields[i]=n,u.determineRowEdited(r,t)},this.markSaved=function(e,t){var i=u.getListingPageRecords(e),n=[];for(var r in i[t].editedFields)angular.isFunction(i[t].editedFields[r])&&n.push(i[t].editedFields[r]());u.$q.all(n).then(function(){delete i[t].editedFields,i[t].edited=!1})},this.setupInSingleCollectionConfigMode=function(e,t){null!=u.getListing(e).collectionObject&&null!=u.getListing(e).collectionConfig&&(u.getListing(e).collectionObject=u.getListing(e).collectionConfig.baseEntityName),u.initCollectionConfigData(e,u.getListing(e).collectionConfig),u.setupColumns(e,u.getListing(e).collectionConfig,u.getListing(e).collectionObject),t.$watch("swListingDisplay.collectionPromise",function(t,i){t&&u.$q.when(u.getListing(e).collectionPromise).then(function(t){u.getListing(e).collectionData=t,u.setupDefaultCollectionInfo(e),null!=u.getListing(e).collectionConfig&&u.getListing(e).collectionConfig.hasColumns()?u.setupColumns(e,u.getListing(e).collectionConfig,u.getListing(e).collectionObject):u.getListing(e).collectionConfig.loadJson(t.collectionConfig),u.notifyListingPageRecordsUpdate(e),u.getListing(e).collectionData.pageRecords=u.getListing(e).collectionData.pageRecords||u.getListing(e).collectionData.records,u.getListing(e).paginator.setPageRecordsInfo(u.getListing(e).collectionData),u.getListing(e).searching=!1})})},this.setupInMultiCollectionConfigMode=function(e){angular.forEach(u.getListing(e).collectionConfigs,function(t,i){u.getListing(e).collectionObjects[i]=t.baseEntityName})},this.setupDefaultCollectionInfo=function(e){u.getListing(e).hasCollectionPromise&&angular.isDefined(u.getListing(e).collection)&&null==u.getListing(e).collectionConfig&&(u.getListing(e).collectionObject=u.getListing(e).collection.collectionObject,u.getListing(e).collectionConfig=u.collectionConfigService.newCollectionConfig(u.getListing(e).collectionObject),u.getListing(e).collectionConfig.loadJson(u.getListing(e).collection.collectionConfig)),0==u.getListing(e).multiSlot&&u.$timeout(function(){u.getListing(e).collectionConfig.loadJson(u.getListing(e).collectionData.collectionConfig),u.getListing(e).columns=u.getListing(e).collectionConfig.columns}),null!=u.getListing(e).paginator&&null!=u.getListing(e).collectionConfig&&(u.getListing(e).collectionConfig.setPageShow(u.getListing(e).paginator.getPageShow()),u.getListing(e).collectionConfig.setCurrentPage(u.getListing(e).paginator.getCurrentPage()))},this.addColumn=function(e,t){null!=u.getListing(e).collectionConfig&&null!=u.getListing(e).collectionConfig.baseEntityAlias?t.propertyIdentifier=u.getListing(e).collectionConfig.baseEntityAlias+"."+t.propertyIdentifier:null!=u.getListingBaseEntityName(e)&&(t.propertyIdentifier="_"+u.getListingBaseEntityName(e).toLowerCase()+"."+t.propertyIdentifier),u.getListingColumnIndexByPropertyIdentifier(e,t.propertyIdentifier)===-1&&(t.aggregate?u.getListing(e).aggregates.push(t.aggregate):u.getListing(e).columns.push(t))},this.setupColumns=function(e,t,i){if(0==u.getListing(e).columns.length&&null!=t)if(null==t.columns)t.getEntity().then(function(){for(var i=0;i<t.columns.length;i++){var n=t.columns[i];n.isVisible&&u.getListing(e).columns.push(n)}},function(){throw"listing display couldn't initiate no columns"});else for(var n=0;n<t.columns.length;n++){var r=t.columns[n];r.isVisible&&u.getListing(e).columns.push(r)}for(var a=0;a<u.getListing(e).columns.length;a++){var r=u.getListing(e).columns[a];u.setupColumn(e,r,t,i)}},this.setupColumn=function(e,t,i,n){null==u.getListing(e).collectionConfig||t.hasCellView||u.getListing(e).collectionConfig.addColumn(t.propertyIdentifier,void 0,t),i||null==u.getListing(e).collectionConfig||(i=null!=u.getListing(e).collectionConfig);var r=u.getListingBaseEntityName(e);if(n||(n=r),null!=r){var a=u.$hibachi.getLastEntityNameInPropertyIdentifier(r,t.propertyIdentifier);angular.isUndefined(t.title)&&(t.title=u.rbkeyService.getRBKey("entity."+a.toLowerCase()+"."+u.utilityService.listLast(t.propertyIdentifier,"."))),angular.isUndefined(t.isVisible)&&(t.isVisible=!0);var o=u.$hibachi.getPropertyByEntityNameAndPropertyName(a,u.utilityService.listLast(t.propertyIdentifier,"."));if(o&&angular.isDefined(o.persistent)&&(t.persistent=o.persistent),o&&angular.isDefined(o.ormtype)&&(t.ormtype=o.ormtype),angular.isDefined(o)&&angular.isDefined(o.hb_formattype)?t.type=o.hb_formatType:t.type="none",t.propertyIdentifier?u.getListing(e).allpropertyidentifiers=u.utilityService.listAppend(u.getListing(e).allpropertyidentifiers,t.propertyIdentifier):t.processObjectProperty&&(t.searchable=!1,t.sort=!1,u.getListing(e).allprocessobjectproperties=u.utilityService.listAppend(u.getListing(e).allprocessobjectproperties,t.processObjectProperty)),t.tdclass){var s=t.tdclass.split(" ");s.indexOf("primary")>=0&&u.getListing(e).expandable&&(u.getListing(e).tableattributes=u.utilityService.listAppend(u.getListing(e).tableattributes,"data-expandsortproperty="+t.propertyIdentifier," "),t.sort=!1)}}if(angular.isDefined(t.tooltip)){var l=u.utilityService.getPropertiesFromString(t.tooltip);l&&l.length&&i.addDisplayProperty(u.utilityService.arrayToList(l),"",{isVisible:!1})}else t.tooltip="";if(angular.isDefined(t.queryString)){var l=u.utilityService.getPropertiesFromString(t.queryString);l&&l.length&&i.addDisplayProperty(u.utilityService.arrayToList(l),"",{isVisible:!1})}if(u.getListing(e).hasCollectionPromise){var a=u.$hibachi.getLastEntityNameInPropertyIdentifier(n,u.utilityService.listRest(t.propertyIdentifier,"."));t.title=t.title||u.rbkeyService.getRBKey("entity."+a.toLowerCase()+"."+u.utilityService.listLast(t.propertyIdentifier,".")),angular.isUndefined(t.isVisible)&&(t.isVisible=!0)}u.columnOrderBy(e,t)},this.initCollectionConfigData=function(e,t){u.setupSelect(e),u.setupMultiselect(e),u.setupExampleEntity(e),null!=t&&(angular.forEach(u.getListing(e).filterGroups,function(e){t.addFilterGroup(e)}),angular.forEach(u.getListing(e).filters,function(e){t.addFilter(e.propertyIdentifier,e.comparisonValue,e.comparisonOperator,e.logicalOperator,e.hidden)}),angular.forEach(u.getListing(e).orderBys,function(e){t.addOrderBy(e.orderBy)}),angular.forEach(u.getListing(e).aggregates,function(e){t.addDisplayAggregate(e.propertyIdentifier,e.aggregateFunction,e.aggregateAlias)}),angular.forEach(u.getListing(e).actions,function(e){if(angular.isDefined(e.queryString)){var i=u.utilityService.getPropertiesFromString(e.queryString);i&&i.length&&t.addDisplayProperty(u.utilityService.arrayToList(i),"",{isVisible:!1})}}),angular.forEach(u.getListing(e).colorFilters,function(e){angular.isDefined(e.propertyToCompare)&&t.addDisplayProperty(e.propertyToCompare,"",{isVisible:!1})}),null!=u.getListing(e).collectionConfig&&u.getListing(e).collectionConfig.hasColumns()&&t.addDisplayProperty(u.getListingExampleEntity(e).$$getIDName(),void 0,{isVisible:!1}),t.setPageShow(u.getListing(e).paginator.pageShow),t.setCurrentPage(u.getListing(e).paginator.currentPage),!u.getListing(e).multiselectable||u.getListing(e).columns&&u.getListing(e).columns.length||u.getListing(e).exampleEntity.metaData.activeProperty&&!u.getListing(e).hasCollectionPromise&&t.addFilter("activeFlag",1,"=",void 0,!0),u.setupHierarchicalExpandable(e,t)),u.setupSortable(e),u.updateColumnAndAdministrativeCount(e)},this.setupSortable=function(e){u.attachToListingPageRecordsUpdate(e,u.getPageRecordsWithManualSortOrder,u.utilityService.createID(32))},this.setupSelect=function(e){u.getListing(e).selectFieldName&&u.getListing(e).selectFieldName.length&&(u.getListing(e).selectable=!0,u.getListing(e).tableclass=u.utilityService.listAppend(u.getListing(e).tableclass,"table-select"," "),u.getListing(e).tableattributes=u.utilityService.listAppend(u.getListing(e).tableattributes,'data-selectfield="'+u.getListing(e).selectFieldName+'"'," "))},this.setupMultiselect=function(e){if(u.getListing(e).multiselectFieldName&&u.getListing(e).multiselectFieldName.length&&(u.getListing(e).multiselectable=!0,u.getListing(e).tableclass=u.utilityService.listAppend(u.getListing(e).tableclass,"table-multiselect"," "),u.getListing(e).tableattributes=u.utilityService.listAppend(u.getListing(e).tableattributes,'data-multiselectpropertyidentifier="'+u.getListing(e).multiselectPropertyIdentifier+'"'," "),u.getListing(e).observerService.attach(u.getListing(e).updateMultiselectValues,u.getListing(e).defaultSelectEvent,u.getListing(e).collectionObject),u.getListing(e).observerService.attach(u.getListing(e).paginationPageChange,"swPaginationAction")),u.getListing(e).multiselectValues&&u.getListing(e).multiselectValues.length){var t=u.getListing(e).multiselectValues.split(",");angular.forEach(t,function(t){u.getListing(e).selectionService.addSelection(u.getListing(e).tableID,t)})}u.getListing(e).multiselectIdPaths&&u.getListing(e).multiselectIdPaths.length&&angular.forEach(u.getListing(e).multiselectIdPaths.split(","),function(t){var i=u.getListing(e).utilityService.listLast(t,"/");u.getListing(e).selectionService.addSelection(u.getListing(e).tableID,i)})},this.setupExampleEntity=function(e){u.getListing(e).exampleEntity=u.$hibachi.getEntityExample(u.getListingBaseEntityName(e)),null!=u.getListing(e).exampleEntity&&((!u.getListing(e).parentPropertyName||u.getListing(e).parentPropertyName&&!u.getListing(e).parentPropertyName.length)&&u.getListing(e).exampleEntity.metaData.hb_parentPropertyName&&(u.getListing(e).parentPropertyName=u.getListing(e).exampleEntity.metaData.hb_parentPropertyName),(!u.getListing(e).childPropertyName||u.getListing(e).childPropertyName&&!u.getListing(e).childPropertyName.length)&&u.getListing(e).exampleEntity.metaData.hb_childPropertyName&&(u.getListing(e).childPropertyName=u.getListing(e).exampleEntity.metaData.hb_childPropertyName))},this.setupHierarchicalExpandable=function(e,t){u.getListing(e).parentPropertyName&&u.getListing(e).parentPropertyName.length&&0!=u.getListing(e).expandable&&(angular.isUndefined(u.getListing(e).expandable)&&(u.getListing(e).expandable=!0),u.getListing(e).tableclass=u.utilityService.listAppend(u.getListing(e).tableclass,"table-expandable"," "),u.getListing(e).hasCollectionPromise||t.addFilter(u.getListing(e).parentPropertyName+"."+u.getListing(e).exampleEntity.$$getIDName(),"NULL","IS",void 0,!0,!1,!1),u.getListing(e).childPropertyName&&u.getListing(e).childPropertyName.length&&(!u.getListing(e).getChildCount&&u.getListing(e).hasCollectionPromise||t.addDisplayAggregate(u.getListing(e).childPropertyName,"COUNT",u.getListing(e).childPropertyName+"Count",{isVisible:!1,isSearchable:!1})),u.getListing(e).allpropertyidentifiers=u.utilityService.listAppend(u.getListing(e).allpropertyidentifiers,u.getListing(e).exampleEntity.$$getIDName()+"Path"),u.getListing(e).tableattributes=u.utilityService.listAppend(u.getListing(e).tableattributes,"data-parentidproperty="+u.getListing(e).parentPropertyName+"."+u.getListing(e).exampleEntity.$$getIDName()," "))},this.updateColumnAndAdministrativeCount=function(e){u.getListing(e).columnCount=u.getListing(e).columns?u.getListing(e).columns.length:0,u.getListing(e).selectable&&u.getListing(e).columnCount++,u.getListing(e).multiselectable&&u.getListing(e).columnCount++,u.getListing(e).sortable&&u.getListing(e).columnCount++,u.getListing(e).administrativeCount&&u.getListing(e).administrativeCount++},this.setupDefaultGetCollection=function(e){return 0==u.getListing(e).collectionConfigs.length?(u.getListing(e).collectionPromise=u.getListing(e).collectionConfig.getEntity(),function(){u.getListing(e).collectionConfig.setCurrentPage(u.getListing(e).paginator.getCurrentPage()),u.getListing(e).collectionConfig.setPageShow(u.getListing(e).paginator.getPageShow()),u.getListing(e).multiSlot?u.getListing(e).collectionConfig.getEntity().then(function(t){u.getListing(e).collectionData=t,u.setupDefaultCollectionInfo(e),u.getListing(e).collectionData.pageRecords=t.pageRecords||t.records,u.getListing(e).paginator.setPageRecordsInfo(u.getListing(e).collectionData)},function(e){throw"Listing Service encounter a problem when trying to get collection. Reason: "+e}):u.getListing(e).collectionPromise.then(function(t){u.getListing(e).collectionData=t,u.setupDefaultCollectionInfo(e),u.getListing(e).collectionData.pageRecords=t.pageRecords||t.records,u.getListing(e).paginator.setPageRecordsInfo(u.getListing(e).collectionData)},function(e){throw"Listing Service encounter a problem when trying to get collection. Reason: "+e})}):function(){u.getListing(e).collectionData={},u.getListing(e).collectionData.pageRecords=[];var t=[];angular.forEach(u.getListing(e).collectionConfigs,function(e,i){t.push(e.getEntity())}),t.length&&u.$q.all(t).then(function(t){angular.forEach(t,function(t,i){u.getListing(e).listingService.setupColumns(e,u.getListing(e).collectionConfigs[i],u.getListing(e).collectionObjects[i]),u.getListing(e).collectionData.pageRecords=u.getListing(e).collectionData.pageRecords.concat(t.records)})},function(e){throw"listing service had trouble getting collection data because: "+e})}},this.columnOrderBy=function(e,t){var i=!1;return null!=u.getListing(e).collectionConfigs&&angular.forEach(u.getListing(e).collectionConfig.orderBy,function(n,r){t.propertyIdentifier==n.propertyIdentifier&&(i=!0,u.getListing(e).orderByStates[t.propertyIdentifier]=n.direction)}),i||(u.getListing(e).orderByStates[t.propertyIdentifier]=""),u.getListing(e).orderByStates[t.propertyIdentifier]},this.columnOrderByIndex=function(e,t){var i=!1;return null!=u.getListing(e).collectionConfig&&angular.forEach(u.getListing(e).collectionConfig.orderBy,function(n,r){t.propertyIdentifier==n.propertyIdentifier&&(i=!0,u.getListing(e).orderByIndices[t.propertyIdentifier]=r+1)}),i||(u.getListing(e).orderByIndices[t.propertyIdentifier]=""),u.getListing(e).orderByIndices[t.propertyIdentifier]},this.setSingleColumnOrderBy=function(e,t,i,n){if(void 0===n&&(n=!0),"ASC"===i.toUpperCase())var r="DESC";else var r="ASC";if(null!=u.getListing(e).collectionConfig){var a=!1;angular.forEach(u.getListing(e).collectionConfig.orderBy,function(e,n){t==e.propertyIdentifier?(e.direction=i,a=!0):e.direction=r}),a||u.getListing(e).collectionConfig.addOrderBy(t+"|"+i),n&&u.observerService.notify(u.getListingOrderByChangedEventString(e)),u.getCollection(e)}},this.setManualSort=function(e,t){u.getListing(e).sortable=t,t&&u.setSingleColumnOrderBy(e,"sortOrder","ASC")},this.toggleOrderBy=function(e,t){u.getListing(e).hasSingleCollectionConfig()&&u.getListing(e).collectionConfig.toggleOrderBy(t.propertyIdentifier,!0),u.getCollection(e)},this.getColorFilterConditionString=function(e,t){return angular.isDefined(e.comparisonProperty)?t[e.propertyToCompare.replace(".","_")]+e.comparisonOperator+t[e.comparisonProperty.replace(".","_")]:t[e.propertyToCompare.replace(".","_")]+e.comparisonOperator+e.comparisonValue},this.getKeyOfMatchedDisableRule=function(e,t){var i=-1;return angular.isDefined(u.getListing(e).disableRules)&&angular.forEach(u.getListing(e).disableRules,function(e,n){if(angular.isDefined(t[e.filterPropertyIdentifier])){if(angular.isString(t[e.filterPropertyIdentifier]))var r=t[e.filterPropertyIdentifier].trim();else var r=t[e.filterPropertyIdentifier];if("null"==e.filterComparisonValue&&(e.filterComparisonValue=""),u.filterService.filterMatch(r,e.filterComparisonOperator,e.filterComparisonValue)&&(i=n),i!=-1)return i}}),i},this.getPageRecordMatchesDisableRule=function(e,t){return u.getKeyOfMatchedDisableRule(e,t)!=-1},this.setExpandable=function(e,t){angular.isDefined(u.getListing(e))&&(u.getListing(e).expandable=t)},this.getKeyOfMatchedExpandableRule=function(e,t){var i=-1;return angular.isDefined(u.getListing(e))&&angular.isDefined(u.getListing(e).expandableRules)&&angular.forEach(u.getListing(e).expandableRules,function(e,n){if(angular.isDefined(t[e.filterPropertyIdentifier])){if(angular.isString(t[e.filterPropertyIdentifier]))var r=t[e.filterPropertyIdentifier].trim();else var r=t[e.filterPropertyIdentifier];if(u.filterService.filterMatch(r,e.filterComparisonOperator,e.filterComparisonValue)&&(i=n),i!=-1)return i}}),i},this.getExampleEntityForExpandableRecord=function(e,t){var i=u.getListing(e).getPageRecordChildCollectionConfigForExpandableRule(t);return angular.isDefined(i)?u.$hibachi.getEntityExample(u.getListing(e).getPageRecordChildCollectionConfigForExpandableRule(t).baseEntityName):u.getListing(e).exampleEntity},this.getPageRecordMatchesExpandableRule=function(e,t){return u.getKeyOfMatchedExpandableRule(e,t)!=-1},this.hasPageRecordRefreshChildrenEvent=function(e,t){return null!=u.getPageRecordRefreshChildrenEvent(e,t)},this.getPageRecordRefreshChildrenEvent=function(e,t){var i=u.getKeyOfMatchedExpandableRule(e,t);if(i!=-1)return u.getListing(e).expandableRules[i].refreshChildrenEvent},this.getPageRecordChildCollectionConfigForExpandableRule=function(e,t){var i=u.getKeyOfMatchedExpandableRule(e,t);if(null!=u.getListing(e)&&angular.isFunction(u.getListing(e).exampleEntity.$$getIDName)&&angular.isDefined(t[u.getListing(e).exampleEntity.$$getIDName()])&&angular.isDefined(u.getListing(e).childCollectionConfigs[t[u.getListing(e).exampleEntity.$$getIDName()]]))return u.getListing(e).childCollectionConfigs[t[u.getListing(e).exampleEntity.$$getIDName()]];if(i!=-1){var n=u.getListing(e).expandableRules[i].childrenCollectionConfig.clone();return angular.forEach(n.filterGroups[0],function(e,i){angular.forEach(e,function(e,i){angular.isString(e.value)&&e.value.length&&"$"==e.value.charAt(0)&&(e.value=u.utilityService.replaceStringWithProperties(e.value,t))})}),u.getListing(e).childCollectionConfigs[t[u.getListing(e).exampleEntity.$$getIDName()]]=n,u.getListing(e).childCollectionConfigs[t[u.getListing(e).exampleEntity.$$getIDName()]]}}}return e.$inject=["$timeout","$q","collectionConfigService","filterService","historyService","observerService","rbkeyService","selectionService","utilityService","$hibachi"],e}();t.ListingService=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.paginationService=e,angular.isUndefined(this.paginator)&&(this.paginator=e.createPagination())}return e.$inject=["paginationService"],e}();t.SWPaginationBarController=i;var n=function(){function e(e,t){this.restrict="E",this.scope={},this.bindToController={paginator:"=?"},this.controller=i,this.controllerAs="swPaginationBar",this.link=function(e,t,i){},this.templateUrl=e.buildPartialsPath(t)+"paginationbar.html"}return e.$inject=["hibachiPathBuilder","partialsPath"],e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["hibachiPathBuilder","partialsPath"],t},e}();t.SWPaginationBar=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(248),r=i(246),a=i(1),o=angular.module("hibachi.pagination",[a.coremodule.name]).run([function(){}]).service("paginationService",n.PaginationService).directive("swPaginationBar",r.SWPaginationBar.Factory()).constant("partialsPath","pagination/components/");t.paginationmodule=o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.observerService=e,this.uuid=t,this.pageShow=10,this.currentPage=1,this.pageStart=0,this.pageEnd=0,this.recordsCount=0,this.totalPages=0,this.pageShowOptions=[{display:10,value:10},{display:20,value:20},{display:50,value:50},{display:250,value:250},{display:"Auto",value:"Auto"}],this.autoScrollPage=1,this.autoScrollDisabled=!1,this.getSelectedPageShowOption=function(){return i.selectedPageShowOption},this.pageShowOptionChanged=function(e){i.setPageShow(e.value),i.currentPage=1,i.observerService.notify("swPaginationAction",{type:"setPageShow",payload:i.getPageShow()})},this.getTotalPages=function(){return i.totalPages},this.setTotalPages=function(e){i.totalPages=e},this.getPageStart=function(){return i.pageStart},this.setPageStart=function(e){i.pageStart=e},this.getPageEnd=function(){return i.pageEnd},this.setPageEnd=function(e){i.pageEnd=e},this.getRecordsCount=function(){return i.recordsCount},this.setRecordsCount=function(e){i.recordsCount=e},this.getPageShowOptions=function(){return i.pageShowOptions},this.setPageShowOptions=function(e){i.pageShowOptions=e},this.getPageShow=function(){return i.pageShow},this.setPageShow=function(e){i.pageShow=e},this.getCurrentPage=function(){return i.currentPage},this.setCurrentPage=function(e){i.currentPage=e,i.observerService.notify("swPaginationAction",{action:"pageChange",currentPage:e}),i.observerService.notify("swPaginationAction",{type:"setCurrentPage",payload:i.getCurrentPage()})},this.previousPage=function(){1!=i.getCurrentPage()&&i.setCurrentPage(i.getCurrentPage()-1)},this.nextPage=function(){i.getCurrentPage()<i.getTotalPages()&&(i.setCurrentPage(i.getCurrentPage()+1),i.observerService.notify("swPaginationAction",{type:"nextPage",payload:i.getCurrentPage()}))},this.hasPrevious=function(){return i.getPageStart()<=1},this.hasNext=function(){return i.getPageEnd()===i.getRecordsCount()},this.showPreviousJump=function(){return angular.isDefined(i.getCurrentPage())&&i.getCurrentPage()>3},this.showNextJump=function(){return!!(i.getCurrentPage()<i.getTotalPages()-3&&i.getTotalPages()>6)},this.previousJump=function(){i.setCurrentPage(i.currentPage-3)},this.nextJump=function(){i.setCurrentPage(i.getCurrentPage()+3)},this.showPageNumber=function(e){if(i.getCurrentPage()>=i.getTotalPages()-3&&e>i.getTotalPages()-6)return!0;if(i.getCurrentPage()<=3){if(e<6)return!0}else{var t=i.getCurrentPage()-2,n=i.getCurrentPage()+2;if(e>t&&e<n)return!0}return!1},this.setPageRecordsInfo=function(e){if(i.setRecordsCount(e.recordsCount),0===i.getRecordsCount()?i.setPageStart(0):i.setPageStart(e.pageRecordsStart),i.setPageEnd(e.pageRecordsEnd),i.setTotalPages(e.totalPages),i.totalPagesArray=[],angular.isUndefined(i.getCurrentPage())||i.getCurrentPage()<5)var t=1,n=i.getTotalPages()<=10?i.getTotalPages()+1:10;else var t=i.showNextJump()?i.getCurrentPage()-3:i.getTotalPages()-4,n=i.showNextJump()?i.getCurrentPage()+5:i.getTotalPages()+1;for(var r=t;r<n;r++)i.totalPagesArray.push(r)},this.uuid=t,this.selectedPageShowOption=this.pageShowOptions[0],this.observerService.attach(this.setPageRecordsInfo,"swPaginationUpdate")}return e.$inject=["observerService","uuid"],e}();t.Pagination=i;var n=function(){function e(e,t){var n=this;this.utilityService=e,this.observerService=t,this.paginations={},this.createPagination=function(){var e=n.utilityService.createID(10);return n.paginations[e]=new i(n.observerService,e),n.paginations[e]},this.getPagination=function(e){if(e)return n.paginations[e]}}return e.$inject=["utilityService","observerService"],e}();t.PaginationService=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{
value:!0});var i=function(){function e(e,t){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){function a(t,i,n){var r={};r={name:"name",context:"context",required:"required",error:"none",errorkey:"none"};for(var a in P)if(a===t||a===t+"Flag")for(var l in P[a]){var c=P[a][l].required||"false",i=P[a][l].contexts||"none";r={name:a,context:i,required:c,error:"none",errorkey:"none"};for(var $=s(o,S,P[a][l]),C=0;C<$.length;C++)if(1==$[C]){if("regex"===S[C]&&""!==n){var k=P[a][l].regex,I=u(n,k);return 1!=I?(D.push("Invalid input"),r.error=D[D.length-1],r.errorkey="invalid-"+w.REGEX.name,r.fail=!0):(D.push("Valid input"),r.error=D[D.length-1],r.errorkey="invalid-"+w.REGEX.name,r.fail=!1),r}if("minValue"===S[C]){var O=P[a][l].minValue;e.debug(O);var I=d(n,O);return e.debug("e>v"+I+" :"+n,":"+O),1!=I?(D.push("Minimum value is: "+O),r.error=D[D.length-1],r.errorkey="invalid-"+w.MIN_VALUE.name,r.fail=!0):(r.error=D[D.length-1],r.errorkey="invalid-"+w.MIN_VALUE.name,r.fail=!1),r}if("maxValue"===S[C]){var T=P[a][l].maxValue,I=p(n,T);return e.debug("Max Value result is: "+I),1!=I&&(D.push("Maximum value is: "+T),r.error=D[D.length-1],r.errorkey="invalid-"+w.MAX_VALUE.name,r.fail=!0),r}if("minLength"===S[C]){var A=P[a][l].minLength,I=f(n,A);return e.debug("Min Length result is: "+I),1!=I&&(D.push("Minimum length must be: "+A),r.error=D[D.length-1],r.errorkey="invalid-"+w.MIN_LENGTH.name,r.fail=!0),r}if("maxLength"===S[C]){var _=P[a][l].maxLength,I=h(n,_);return e.debug("Max Length result is: "+I),1!=I&&(D.push("Maximum length is: "+_),r.error=D[D.length-1],r.errorkey="invalid-"+w.MAX_LENGTH.name,r.fail=!0),r}if("eq"===S[C]){var E=P[a][l].eq,I=g(n,E);return 1!=I&&(D.push("Must equal "+E),r.error=D[D.length-1],r.errorkey="invalid-"+w.EQ.name,r.fail=!0),r}if("neq"===S[C]){var x=P[a][l].neq,I=m(n,x);return 1!=I&&(D.push("Must not equal: "+x),r.error=D[D.length-1],r.errorkey="invalid-"+w.NEQ.name,r.fail=!0),r}if("lte"===S[C]){var F=P[a][l].lte,I=y(n,F);return 1!=I&&(D.push("Must be less than "+F),r.error=D[D.length-1],r.errorkey="invalid-"+w.LTE.name,r.fail=!0),r}if("gte"===S[C]){var M=P[a][l].gte,I=v(n,M);return 1!=I&&(D.push("Must be greater than: "+M),r.error=D[D.length-1],r.errorkey="invalid-"+w.GTE.name,r.fail=!0),r}if("required"===S[C]){var j=P[a][l].require,I=b(n,j);return 1!=I?(D.push("Required"),r.error=D[D.length-1],r.errorkey=w.REQUIRED.name,r.fail=!0):(D.push("Required"),r.error=D[D.length-1],r.errorkey=w.REQUIRED.name,r.fail=!1),r}}}}function o(e,t){return void 0!=e[t]}function s(e,t,i){var n=[];return l(t,function(t){n.push(e(i,t))}),n}function l(e,t){for(var i=0;i<e.length;i++)t(e[i])}function c(e){var t=[];for(var i in e){var n=e[i].name||"stub";t.push(n)}return t}function u(e,t){var i=new RegExp(t);return!!i.test(e)}function d(e,t){return e>=t}function p(e,t){return e<=t}function f(e,t){return e.length>=t}function h(e,t){return e.length<=t}function g(e,t){return e==t}function m(e,t){return e!=t}function y(e,t){return e<t}function v(e,t){return e>t}function b(e,t){return""==t&&1==e}var $={SAVE:{name:"save",value:0},DELETE:{name:"delete",value:1},EDIT:{name:"edit",value:2}},w={REGEX:{name:"regex",value:0},MIN_VALUE:{name:"minValue",value:1},MAX_VALUE:{name:"maxValue",value:2},EQ:{name:"eq",value:3},NEQ:{name:"neq",value:4},UNIQUE:{name:"unique",value:5},LTE:{name:"lte",value:6},GTE:{name:"gte",value:7},MIN_LENGTH:{name:"minLength",value:8},MAX_LENGTH:{name:"maxLength",value:9},DATA_TYPE:{name:"dataType",value:10},REQUIRED:{name:"required",value:11}};t.validationPropertiesEnum=w,t.contextsEnum=$;var C=t.contextsEnum.SAVE,S=(c($),c(w)),P=t.propertyDisplay.object.validations.properties,D=(t.propertyDisplay.errors,[]);r.$parsers.unshift(function(n){var o=i.context.name,s=i.val(),l=a(o,C,s)||{};return e.debug(t),e.debug(l),r.$setValidity(l.errorkey,!l.fail),!0}),i.bind("blur",function(e){})}}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["$log","$hibachi"],t},e}();t.SWValidate=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){var a=function(t){return e.validateDataType(t,n.swvalidationdatatype)};r.$validators.swvalidationdatatype=a,r.$validators["swvalidation"+n.swvalidationdatatype]=a}}}return e.$inject=["validationService"],e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationDataType=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){r.$validators.swvalidationeq=function(t,i){return e.validateEq(t,n.swvalidationeq)}}}}return e.$inject=["validationService"],e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationEq=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){r.$validators.swvalidationGte=function(t,i){return e.validateGte(t,n.swvalidationGte)}}}}return e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationGte=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){r.$validators.swvalidationlte=function(t,i){return e.validateLte(t,n.swvalidationlte)}}}}return e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationLte=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){r.$validators.swvalidationmaxlength=function(t,i){var r=0;return i&&i.length&&(r=i.length),e.validateMaxLength(r||0,n.swvalidationmaxlength)}}}}return e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationMaxLength=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){r.$validators.swvalidationmaxvalue=function(t,i){return null==i||void e.validateMaxValue(i,n.swvalidationmaxvalue)}}}}return e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationMaxValue=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return{restrict:"A",require:"^ngModel",link:function(e,i,n,r){r.$validators.swvalidationminlength=function(e,i){var r=0;return i&&i.length&&(r=i.length),t.validateMinLength(r||0,n.swvalidationminlength)}}}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["$log","validationService"],t},e}();t.SWValidationMinLength=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){r.$validators.swvalidationminvalue=function(t,i){return null==i||e.validateMinValue(i,n.swvalidationminvalue)}}}}return e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationMinValue=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){r.$validators.swvalidationneq=function(t){return e.validateNeq(t,n.swvalidationneq)}}}}return e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationNeq=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){r.$validators.swvalidationnumeric=function(t,i){return e.validateNumeric(i)}}}}return e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationNumeric=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){r.$validators.swvalidationregex=function(t){return e.validateRegex(t,n.swvalidationregex)}}}}return e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationRegex=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){return{restrict:"A",require:"^ngModel",link:function(t,i,n,r){r.$validators.swvalidationrequired=function(t,i){var r=t||i;return"true"!==n.swvalidationrequired||e.validateRequired(r)}}}}return e.$inject=["validationService"],e.Factory=function(){var t=function(t){return new e(t)};return t.$inject=["validationService"],t},e}();t.SWValidationRequired=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){return{restrict:"A",require:["ngModel","^?swFormField"],link:function(e,t,i,n){var a=n[0];a.$asyncValidators.swvalidationunique=function(e,t){var i=e||t,a=n[1].property;return r.validateUnique(i,n[1].object,a)}}}}return e.$inject=["$http","$q","$hibachi","$log","validationService"],e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$http","$q","$hibachi","$log","validationService"],t},e}();t.SWValidationUnique=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){return{restrict:"A",require:"ngModel",link:function(e,i,n,a){a.$asyncValidators.swvalidationuniqueornull=function(i,n){var a=i||n;if(e&&e.propertyDisplay&&e.propertyDisplay.property){var o=e.propertyDisplay.property;return r.validateUniqueOrNull(a,e.propertyDisplay.object,o)}return t.resolve()}}}}return e.$inject=["$http","$q","$hibachi","$log","validationService"],e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$http","$q","$hibachi","$log","validationService"],t},e}();t.SWValidationUniqueOrNull=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var i=this;this.$hibachi=e,this.$q=t,this.MY_EMAIL_REGEXP=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,this.validateUnique=function(e,t,n){var r=i.$q.defer();return t&&n?i.$hibachi.checkUniqueValue(t,n,e).then(function(e){e?r.resolve():r.reject()}):r.resolve(),r.promise},this.validateUniqueOrNull=function(e,t,n){var r=i.$q.defer();return t&&n?i.$hibachi.checkUniqueOrNullValue(t,n,e).then(function(e){e?r.resolve():r.reject()}):r.resolve(),r.promise},this.validateEmail=function(e){return i.validateDataType(e,"email")},this.validateDataType=function(e,t){return null==e||(!(!angular.isString(e)||"string"!==t)||(!(!angular.isNumber(parseInt(e))||"numeric"!==t)||(!(!angular.isArray(e)||"array"!==t)||(!(!angular.isDate(e)||"date"!==t)||(!(!angular.isObject(e)||"object"!==t)||("email"===t?i.MY_EMAIL_REGEXP.test(e):!!angular.isUndefined(e&&"undefined"===t)))))))},this.validateEq=function(e,t){return e===t},this.validateNeq=function(e,t){return e!==t},this.validateGte=function(e,t){return void 0===t&&(t=0),angular.isString(e)&&(e=parseInt(e)),angular.isString(t)&&(t=parseInt(t)),e>=t},this.validateLte=function(e,t){return void 0===t&&(t=0),angular.isString(e)&&(e=parseInt(e)),angular.isString(t)&&(t=parseInt(t)),e<=t},this.validateMaxLength=function(e,t){return void 0===t&&(t=0),i.validateLte(e,t)},this.validateMaxValue=function(e,t){return void 0===t&&(t=0),i.validateLte(e,t)},this.validateMinLength=function(e,t){return void 0===t&&(t=0),i.validateGte(e,t)},this.validateMinValue=function(e,t){return void 0===t&&(t=0),i.validateGte(e,t)},this.validateNumeric=function(e){return!isNaN(e)},this.validateRegex=function(e,t){var i=new RegExp(t);return i.test(e)},this.validateRequired=function(e){return!!e},this.$hibachi=e,this.$q=t}return e.$inject=["$hibachi","$q"],e}();t.ValidationService=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(249),r=i(256),a=i(250),o=i(251),s=i(252),l=i(253),c=i(254),u=i(255),d=i(257),p=i(258),f=i(259),h=i(260),g=i(261),m=i(262),y=i(263),v=i(264),b=i(1),$=angular.module("hibachi.validation",[b.coremodule.name]).run([function(){}]).directive("swValidate",n.SWValidate.Factory()).directive("swvalidationminlength",r.SWValidationMinLength.Factory()).directive("swvalidationdatatype",a.SWValidationDataType.Factory()).directive("swvalidationeq",o.SWValidationEq.Factory()).directive("swvalidationgte",s.SWValidationGte.Factory()).directive("swvalidationlte",l.SWValidationLte.Factory()).directive("swvalidationmaxlength",c.SWValidationMaxLength.Factory()).directive("swvalidationmaxvalue",u.SWValidationMaxValue.Factory()).directive("swvalidationminvalue",d.SWValidationMinValue.Factory()).directive("swvalidationneq",p.SWValidationNeq.Factory()).directive("swvalidationnumeric",f.SWValidationNumeric.Factory()).directive("swvalidationregex",h.SWValidationRegex.Factory()).directive("swvalidationrequired",g.SWValidationRequired.Factory()).directive("swvalidationunique",m.SWValidationUnique.Factory()).directive("swvalidationuniqueornull",y.SWValidationUniqueOrNull.Factory()).service("validationService",v.ValidationService);t.validationmodule=$},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i){return{restrict:"E",scope:{},templateUrl:i.buildPartialsPath(t)+"admincreatesuperuser.html",link:function(t,i,n){t.Account_SetupInitialAdmin=e.newAccount_SetupInitialAdmin()}}}return e.Factory=function(){var t=function(t,i,n){return new e(t,i,n)};return t.$inject=["$hibachi","workflowPartialsPath","hibachiPathBuilder"],t},e}();t.SWAdminCreateSuperUser=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){}return e}(),n=function(){function e(e,t){this.workflowPartialsPath=e,this.hibachiPathBuilder=t,this.restrict="AE",this.scope={},this.bindToController={schedule:"="},this.controller=i,this.controllerAs="swSchedulePreview",this.templateUrl=this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath)+"schedulepreview.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["workflowPartialsPath","hibachiPathBuilder"],t},e.$inject=["workflowPartialsPath","hibachiPathBuilder"],e}();t.SWSchedulePreview=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return{restrict:"A",scope:{workflow:"="},templateUrl:t.buildPartialsPath(e)+"workflowbasic.html",link:function(e,t,i){}}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["workflowPartialsPath","hibachiPathBuilder"],t},e}();t.SWWorkflowBasic=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){return{restrict:"E",scope:{workflowCondition:"=",workflowConditionIndex:"=",workflow:"=",filterPropertiesList:"="},templateUrl:r.buildPartialsPath(n)+"workflowcondition.html",link:function(n,r,a){if(e.debug("workflowCondition init"),e.debug(n),n.selectBreadCrumb=function(e){var t=n.filterItem.breadCrumbs.length-1-e;n.filterItem.breadCrumbs.splice(e+1,t),n.selectedFilterPropertyChanged(null)},n.selectedFilterPropertyChanged=function(t){e.debug("selectedFilterProperty"),e.debug(t),n.selectedFilterProperty=t},angular.isUndefined(n.workflowCondition.breadCrumbs))if(n.workflowCondition.breadCrumbs=[],""===n.workflowCondition.propertyIdentifier)n.workflowCondition.breadCrumbs=[{entityAlias:n.workflow.data.workflowObject,cfc:n.workflow.data.workflowObject,propertyIdentifier:n.workflow.data.workflowObject}];else{var o=n.workflowCondition.propertyIdentifier.split(".");o.pop();for(var s in o){var l={entityAlias:o[s],cfc:o[s],propertyIdentifier:o[s]};n.workflowCondition.breadCrumbs.push(l)}}else angular.forEach(n.workflowCondition.breadCrumbs,function(e,r){if(angular.isUndefined(n.filterPropertiesList[e.propertyIdentifier])){var a=t.getFilterPropertiesByBaseEntityName(e.cfc,!0);a.then(function(t){i.setPropertiesList(t,e.propertyIdentifier),n.filterPropertiesList[e.propertyIdentifier]=i.getPropertiesListByBaseEntityAlias(e.propertyIdentifier),i.formatPropertiesList(n.filterPropertiesList[e.propertyIdentifier],e.propertyIdentifier);var r=n.workflowCondition.propertyIdentifier.split(".");if(r.pop(),r=r.join(".").trim(),angular.isDefined(n.filterPropertiesList[r]))for(var a in n.filterPropertiesList[r].data){var o=n.filterPropertiesList[r].data[a];o.propertyIdentifier===n.workflowCondition.propertyIdentifier&&(n.selectedFilterProperty=o,n.selectedFilterProperty.value=n.workflowCondition.value,n.selectedFilterProperty.comparisonOperator=n.workflowCondition.comparisonOperator)}})}else{var o=n.workflowCondition.propertyIdentifier.split(".");if(o.pop(),o=o.join(".").trim(),angular.isDefined(n.filterPropertiesList[o]))for(var s in n.filterPropertiesList[o].data){var l=n.filterPropertiesList[o].data[s];l.propertyIdentifier===n.workflowCondition.propertyIdentifier&&(n.selectedFilterProperty=l,n.selectedFilterProperty.value=n.workflowCondition.value,n.selectedFilterProperty.comparisonOperator=n.workflowCondition.comparisonOperator)}}})}}}return e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$log","$hibachi","metadataService","workflowPartialsPath","hibachiPathBuilder"],t},e}();t.SWWorkflowCondition=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return{restrict:"E",templateUrl:t.buildPartialsPath(e)+"workflowconditiongroupitem.html",link:function(e,t,i){}}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["workflowPartialsPath","hibachiPathBuilder"],t},e}();t.SWWorkflowConditionGroupItem=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){return{restrict:"E",scope:{workflowConditionGroupItem:"=",workflowConditionGroup:"=",workflow:"=",filterPropertiesList:"="},templateUrl:n.buildPartialsPath(i)+"workflowconditiongroups.html",link:function(i,n,r){e.debug("workflowconditiongroups init"),i.addWorkflowCondition=function(){e.debug("addWorkflowCondition");var n=t.newWorkflowCondition();t.addWorkflowCondition(i.workflowConditionGroupItem,n)},i.addWorkflowGroupItem=function(){e.debug("addWorkflowGrouptItem");var n=t.newWorkflowConditionGroupItem();t.addWorkflowConditionGroupItem(i.workflowConditionItem,n)}}}}return e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["$log","workflowConditionService","workflowPartialsPath","hibachiPathBuilder"],t},e}();t.SWWorkflowConditionGroups=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){return{restrict:"E",scope:{workflowTask:"=",workflowTasks:"="},templateUrl:t.buildPartialsPath(e)+"workflowtask.html",link:function(e,t,i){e.removeWorkflowTask=function(t){var i=t.$$delete();i.then(function(){t===e.workflowTasks.selectedTask&&delete e.workflowTasks.selectedTask,e.workflowTasks.splice(t.$$index,1);for(var i in e.workflowTasks)e.workflowTasks[i].$$index=i})}}}}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["workflowPartialsPath","hibachiPathBuilder"],t},e}();t.SWWorkflowTask=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){var s=this;this.$log=e,this.$hibachi=t,this.metadataService=i,this.workflowPartialsPath=n,this.hibachiPathBuilder=r,this.collectionConfigService=a,this.observerService=o,this.$log.debug("Workflow Task Actions Init"),this.$log.debug(this.workflowTask),this.openActions=!1,this.observerService.attach(function(e){angular.isDefined(s.emailTemplateCollectionConfig)&&(s.emailTemplateCollectionConfig.clearFilters(),s.emailTemplateCollectionConfig.addFilter("emailTemplateObject",e.value)),angular.isDefined(s.printTemplateCollectionConfig)&&(s.printTemplateCollectionConfig.clearFilters(),s.printTemplateCollectionConfig.addFilter("printTemplateObject",e.value))},"WorkflowWorkflowObjectOnChange");var l=function(e){"email"===e.data.actionType?e.$$getEmailTemplate():"print"===e.data.actionType&&e.$$getPrintTemplate()};this.getWorkflowTaskActions=function(){if(angular.isUndefined(s.workflowTask.data.workflowTaskActions)){var e=s.workflowTask.$$getWorkflowTaskActions();e.then(function(){s.workflowTaskActions=s.workflowTask.data.workflowTaskActions,angular.forEach(s.workflowTaskActions,function(e){l(e)}),s.$log.debug(s.workflowTaskActions)})}else s.workflowTaskActions=s.workflowTask.data.workflowTaskActions;angular.isUndefined(s.workflowTask.data.workflowTaskActions)&&(s.workflowTask.data.workflowTaskActions=[],s.workflowTaskActions=s.workflowTask.data.workflowTaskActions)},this.getWorkflowTaskActions(),this.saveWorkflowTaskAction=function(e,t){s.$log.debug("Context: "+t),s.$log.debug("saving task action and parent task"),s.$log.debug(e);var i=s.workflowTaskActions.selectedTaskAction.$$save();i.then(function(){e.$$save;"add"==t?(s.$log.debug("Save and New"),s.addWorkflowTaskAction(e),s.finished=!1):"finish"==t&&(s.finished=!0),s.workflowTask.data.workflow.$$save()},function(e){angular.element('a[href="/##j-basic-2"]').click(),console.warn(e)})},this.setHidden=function(e){angular.isObject(e)||(e={}),angular.isUndefined(e.hidden)?e.hidden=!1:(s.$log.debug("setHidden()","Setting Hide Value To "+!e.hidden),e.hidden=!e.hidden)},this.addWorkflowTaskAction=function(e){var t=s.workflowTask.$$addWorkflowTaskAction();s.selectWorkflowTaskAction(t),s.$log.debug(s.workflow)},this.selectWorkflowTaskAction=function(e){s.$log.debug("Selecting new task action for editing: "),s.$log.debug(e),s.finished=!1,s.workflowTaskActions.selectedTaskAction=void 0;var t=s.$hibachi.getFilterPropertiesByBaseEntityName(s.workflowTask.data.workflow.data.workflowObject,!0);t.then(function(t){s.filterPropertiesList={baseEntityName:s.workflowTask.data.workflow.data.workflowObject,baseEntityAlias:"_"+s.workflowTask.data.workflow.data.workflowObject},s.metadataService.setPropertiesList(t,s.workflowTask.data.workflow.data.workflowObject),s.filterPropertiesList[s.workflowTask.data.workflow.data.workflowObject]=s.metadataService.getPropertiesListByBaseEntityAlias(s.workflowTask.data.workflow.data.workflowObject),s.metadataService.formatPropertiesList(s.filterPropertiesList[s.workflowTask.data.workflow.data.workflowObject],s.workflowTask.data.workflow.data.workflowObject),s.workflowTaskActions.selectedTaskAction=e,s.emailTemplateSelected=s.workflowTaskActions.selectedTaskAction.data.emailTemplate?s.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateName:"",s.emailTemplateCollectionConfig=s.collectionConfigService.newCollectionConfig("EmailTemplate"),s.emailTemplateCollectionConfig.setDisplayProperties("emailTemplateID,emailTemplateName"),s.emailTemplateCollectionConfig.addFilter("emailTemplateObject",s.workflowTask.data.workflow.data.workflowObject),s.printTemplateSelected=s.workflowTaskActions.selectedTaskAction.data.printTemplate?s.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateName:"",s.printTemplateCollectionConfig=s.collectionConfigService.newCollectionConfig("PrintTemplate"),s.printTemplateCollectionConfig.setDisplayProperties("printTemplateID,printTemplateName"),s.printTemplateCollectionConfig.addFilter("printTemplateObject",s.workflowTask.data.workflow.data.workflowObject)})},this.deleteEntity=function(e){s.removeWorkflowTaskAction(e)},this.removeWorkflowTaskAction=function(e){var t=e.$$delete();t.then(function(){e===s.workflowTaskActions.selectedTaskAction&&delete s.workflowTaskActions.selectedTaskAction,s.$log.debug("removeWorkflowTaskAction"),s.$log.debug(e),s.workflowTaskActions.splice(e.$$actionIndex,1);for(var t in s.workflowTaskActions)s.workflowTaskActions[t].$$actionIndex=t})},this.searchProcess={name:""},this.showProcessOptions=!1,this.processOptions=[],this.getProcessOptions=function(e){if(!s.processOptions.length){var t=s.$hibachi.getProcessOptions(e);t.then(function(e){s.processOptions=e.data})}s.showProcessOptions=!0},this.selectProcess=function(e){s.workflowTaskActions.selectedTaskAction.data.processMethod=e.value,s.searchProcess.name=e.value,s.workflowTaskActions.selectedTaskAction.forms.selectedTaskAction.$setDirty(),s.showProcessOptions=!1},this.selectEmailTemplate=function(e){if(angular.isDefined(s.workflowTaskActions.selectedTaskAction.data.emailTemplate))s.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateID=e.emailTemplateID;else{var t=s.$hibachi.newEmailTemplate();t.data.emailTemplateID=e.emailTemplateID,s.workflowTaskActions.selectedTaskAction.$$setEmailTemplate(t)}},this.selectPrintTemplate=function(e){if(angular.isDefined(s.workflowTaskActions.selectedTaskAction.data.printTemplate))s.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateID=e.printTemplateID;else{var t=s.$hibachi.newPrintTemplate();t.data.printTemplateID=e.printTemplateID,s.workflowTaskActions.selectedTaskAction.$$setPrintTemplate(t)}}}return e.$inject=["$log","$hibachi","metadataService","workflowPartialsPath","hibachiPathBuilder","collectionConfigService","observerService"],e}(),n=function(){function e(e,t){this.workflowPartialsPath=e,this.hibachiPathBuilder=t,this.restrict="AE",this.scope={},this.bindToController={workflowTask:"="},this.controller=i,this.controllerAs="swWorkflowTaskActions",this.link=function(e,t,i){},this.templateUrl=this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath)+"workflowtaskactions.html"}return e.Factory=function(){var t=function(t,i){return new e(t,i)};return t.$inject=["workflowPartialsPath","hibachiPathBuilder"],t},e.$inject=["workflowPartialsPath","hibachiPathBuilder"],e}();t.SWWorkflowTaskActions=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r){return{restrict:"A",scope:{workflow:"="},templateUrl:r.buildPartialsPath(n)+"workflowtasks.html",link:function(a,o,s){function l(t,i){e.debug("SwWorkflowTasks :"+t+" : "+i)}a.workflowPartialsPath=r.buildPartialsPath(n),a.propertiesList={},a.getWorkflowTasks=function(){if(l("getWorkflowTasks","Retrieving items"),l("getWorkflowTasks","Workflow Tasks"),e.debug(a.workflowTasks),!a.workflow.$$isPersisted())return a.workflow.data.workflowTasks=[],void(a.workflowTasks=a.workflow.data.workflowTasks);if(angular.isUndefined(a.workflow.data.workflowTasks)){var t=a.workflow.$$getWorkflowTasks();t.then(function(){a.workflowTasks=a.workflow.data.workflowTasks})}else l("getWorkflowTasks","Retrieving cached Items"),a.workflowTasks=a.workflow.data.workflowTasks;angular.isUndefined(a.workflow.data.workflowTasks)&&(l("getWorkflowTasks","workflowTasks is undefined."),a.workflow.data.workflowTasks=[],a.workflowTasks=a.workflow.data.workflowTasks)},a.getWorkflowTasks(),a.setHidden=function(e){!angular.isObject(e)||angular.isUndefined(e.hidden)?e.hidden=!1:(l("setHidden()","Setting Hide Value To "+!e.hidden),e.hidden=!e.hidden)},a.addWorkflowTask=function(){var e=a.workflow.$$addWorkflowTask();l("var newWorkflowTask",e),a.selectWorkflowTask(e)},a.$watch("workflowTasks.selectedTask.data.workflow.data.workflowObject",function(e,t){l("scope.$watch","Change Detected "+e+" from "+t),e!==t&&angular.isDefined(a.workflowTasks.selectedTask)&&(l("scope.$watch","Change to "+e),a.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityAlias=e,a.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityName=e)}),a.saveWorkflowTask=function(e,t){a.workflowTasks.selectedTask.$$save().then(function(e){a.done=!0,delete a.workflowTasks.selectedTask,"add"===t?(a.addWorkflowTask(),a.finished=!0):"finish"==t&&(a.finished=!1),delete a.workflow.data.workflowTasks,a.getWorkflowTasks(),a.workflow.$$save()},function(e){})},a.selectWorkflowTask=function(n){a.done=!1,e.debug(n),a.finished=!1,a.workflowTasks.selectedTask=void 0;var r=t.getFilterPropertiesByBaseEntityName(a.workflow.data.workflowObject,!0);r.then(function(e){a.filterPropertiesList={baseEntityName:a.workflow.data.workflowObject,baseEntityAlias:"_"+a.workflow.data.workflowObject},i.setPropertiesList(e,a.workflow.data.workflowObject),a.filterPropertiesList[a.workflow.data.workflowObject]=i.getPropertiesListByBaseEntityAlias(a.workflow.data.workflowObject),i.formatPropertiesList(a.filterPropertiesList[a.workflow.data.workflowObject],a.workflow.data.workflowObject),a.workflowTasks.selectedTask=n})},a.softRemoveTask=function(e){e===a.workflowTasks.selectedTask&&delete a.workflowTasks.selectedTask,a.removeIndexFromTasks(e.$$index),a.reindexTaskList()},a.hardRemoveTask=function(e){var t=e.$$delete();t.then(function(){e===a.workflowTasks.selectedTask&&delete a.workflowTasks.selectedTask,a.removeIndexFromTasks(e.$$index),a.reindexTaskList()})},a.deleteEntity=function(e){a.hardRemoveTask(e)},a.reindexTaskList=function(){for(var e in a.workflowTasks)l("ReIndexing the list",e),a.workflowTasks[e].$$index=e},a.removeIndexFromTasks=function(e){l("RemoveIndexFromTasks",e),a.workflowTasks.splice(e,1)}}}}return e.Factory=function(){var t=function(t,i,n,r,a){return new e(t,i,n,r,a)};return t.$inject=["$log","$hibachi","metadataService","workflowPartialsPath","hibachiPathBuilder"],t},e}();t.SWWorkflowTasks=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o){return{restrict:"A",replace:!0,scope:{workflowTrigger:"=",workflowTriggers:"="},templateUrl:a.buildPartialsPath(r)+"workflowtrigger.html",link:function(r,a,s){r.selectWorkflowTrigger=function(e){r.done=!1,r.finished=!1,r.workflowTriggers.selectedTrigger=void 0;var i=t.getFilterPropertiesByBaseEntityName(r.workflowTrigger.data.workflow.data.workflowObject,!0);i.then(function(t){r.filterPropertiesList={baseEntityName:r.workflowTrigger.data.workflow.data.workflowObject,baseEntityAlias:"_"+r.workflowTrigger.data.workflow.data.workflowObject},n.setPropertiesList(t,r.workflowTrigger.data.workflow.data.workflowObject),r.filterPropertiesList[r.workflowTrigger.data.workflow.data.workflowObject]=n.getPropertiesListByBaseEntityAlias(r.workflowTrigger.data.workflow.data.workflowObject),n.formatPropertiesList(r.filterPropertiesList[r.workflowTrigger.data.workflow.data.workflowObject],r.workflowTrigger.data.workflow.data.workflowObject),r.workflowTriggers.selectedTrigger=e})},r.executingTrigger=!1,r.executeWorkflowTrigger=function(n){if(!r.executingTrigger){if(!n.data.workflow.data.workflowTasks||!n.data.workflow.data.workflowTasks.length){var a=i.newAlert();return a.msg="You don't have any Task yet!",a.type="error",a.fade=!0,void i.addAlert(a)}r.executingTrigger=!0;var s=t.getConfig(),l=s.baseURL+"/index.cfm/?"+s.action+"=api:workflow.executeScheduleWorkflowTrigger&workflowTriggerID="+n.data.workflowTriggerID+"&x="+o.createID();e.get(l).finally(function(){r.executingTrigger=!1;var e=i.newAlert();e.msg="Task Triggered Successfully. Check History for Status",e.type="success",e.fade=!0,i.addAlert(e)})}},r.deleteEntity=function(e,t){r.deleteTrigger(e,t)},r.deleteTrigger=function(e,i){var n=t.saveEntity("WorkflowTrigger",e.data.workflowTriggerID,{},"Delete");n.then(function(e){r.workflowTriggers.splice(i,1)})}}}}return e.Factory=function(){var t=function(t,i,n,r,a,o,s){return new e(t,i,n,r,a,o,s)};return t.$inject=["$http","$hibachi","alertService","metadataService","workflowPartialsPath","hibachiPathBuilder","utilityService"],t},e}();t.SWWorkflowTrigger=i;
},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n){return{restrict:"A",scope:{workflow:"="},templateUrl:t.buildPartialsPath(e)+"workflowtriggerhistory.html",link:function(e,t,r){i.workflowID=e.workflow.data.workflowID,e.workflowTriggerHistoryCollection=n.newCollectionConfig("WorkflowTriggerHistory"),e.workflowTriggerHistoryCollection.addFilter("workflowTrigger.workflow.workflowID",i.workflowID,"="),e.workflowTriggerHistoryCollection.addDisplayProperty("workflowTrigger.triggerType"),e.workflowTriggerHistoryCollection.addDisplayProperty("response"),e.workflowTriggerHistoryCollection.addDisplayProperty("endTime"),e.workflowTriggerHistoryCollection.addDisplayProperty("startTime"),e.workflowTriggerHistoryCollection.addDisplayProperty("successFlag")}}}return e.Factory=function(){var t=function(t,i,n,r){return new e(t,i,n,r)};return t.$inject=["workflowPartialsPath","hibachiPathBuilder","$rootScope","collectionConfigService"],t},e}();t.SWWorkflowTriggerHistory=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,i,n,r,a,o,s){return{restrict:"E",scope:{workflow:"="},templateUrl:r.buildPartialsPath(t)+"workflowtriggers.html",link:function(t,r,l,c){t.schedule={},t.$watch("workflowTriggers.selectedTrigger",function(e,i){void 0!==e&&e!==i&&("Schedule"==e.data.triggerType?(angular.isDefined(e.data.schedule)&&(t.schedule.selectedName=e.data.schedule.data.scheduleName,t.selectSchedule(e.data.schedule.data)),angular.isDefined(e.data.scheduleCollection)&&(t.selectedCollection=e.data.scheduleCollection.data.collectionName)):t.searchEvent.name=t.workflowTriggers.selectedTrigger.triggerEventTitle)}),t.collectionCollectionConfig=a.newCollectionConfig("Collection"),t.collectionCollectionConfig.setDisplayProperties("collectionID,collectionName"),t.collectionCollectionConfig.addFilter("collectionObject",t.workflow.data.workflowObject),n.attach(function(e){t.collectionCollectionConfig.clearFilters(),t.collectionCollectionConfig.addFilter("collectionObject",e.value),t.eventOptions=[]},"WorkflowWorkflowObjectOnChange"),t.scheduleCollectionConfig=a.newCollectionConfig("Schedule"),t.scheduleCollectionConfig.setDisplayProperties("scheduleID,scheduleName,daysOfMonthToRun,daysOfWeekToRun,recuringType,frequencyStartTime,frequencyEndTime,frequencyInterval"),t.daysOfweek=[],t.daysOfMonth=[],t.$id="swWorkflowTriggers",t.getWorkflowTriggers=function(){if(!t.workflow.$$isPersisted())return t.workflow.data.workflowTriggers=[],void(t.workflowTriggers=t.workflow.data.workflowTriggers);if(angular.isUndefined(t.workflow.data.workflowTriggers)){var e=t.workflow.$$getWorkflowTriggers();e.then(function(){t.workflowTriggers=t.workflow.data.workflowTriggers,angular.isUndefined(t.workflow.data.workflowTriggers)&&(t.workflow.data.workflowTriggers=[],t.workflowTriggers=t.workflow.data.workflowTriggers),angular.forEach(t.workflowTriggers,function(e,t){"Schedule"===e.data.triggerType&&(e.$$getSchedule(),e.$$getScheduleCollection())})})}else t.workflowTriggers=t.workflow.data.workflowTriggers},t.getWorkflowTriggers(),t.showCollections=!1,t.collections=[],t.searchEvent={name:""},t.showEventOptions=!1,t.eventOptions=[],t.getEventOptions=function(i){if(!t.eventOptions.length){var n=e.getEventOptions(i);n.then(function(e){t.eventOptions=e.data})}t.showEventOptions=!t.showEventOptions},t.saveWorkflowTrigger=function(e){t.workflowTriggers.selectedTrigger.$$isPersisted()||t.workflowTriggers.selectedTrigger.$$setWorkflow(t.workflow);var i=t.workflowTriggers.selectedTrigger.$$save();i.then(function(){t.showEventOptions=!0,t.searchEvent={name:""},t.schedule.selectedName="",t.schedulePreview={},"add"==e?t.addWorkflowTrigger():"finish"==e&&(t.workflowTriggers.selectedTrigger=void 0),t.workflow.$$save()})},t.closeTrigger=function(){t.workflowTriggers.selectedTrigger.$$isPersisted()||t.workflowTriggers.selectedTrigger.$$setWorkflow(),t.workflowTriggers.selectedTrigger=void 0},t.selectEvent=function(e){t.workflowTriggers.selectedTrigger.data.triggerEventTitle=e.name,t.workflowTriggers.selectedTrigger.data.triggerEvent=e.value,e.entityName==t.workflow.data.workflowObject?t.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier="":t.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier=e.entityName,t.searchEvent.name=e.name,t.showEventOptions=!1,n.notifyById("pullBindings","WorkflowTriggertriggerEventpullBindings").then(function(){}),n.notifyById("pullBindings","WorkflowTriggertriggerEventTitlepullBindings").then(function(){})},t.selectCollection=function(e){t.workflowTriggers.selectedTrigger.data.scheduleCollection=e,t.showCollections=!1},t.removeWorkflowTrigger=function(e){e===t.workflowTriggers.selectedTrigger&&delete t.workflowTriggers.selectedTrigger,t.workflowTriggers.splice(e.$$index,1)},t.setAsEvent=function(e){e.$$isPersisted()||(e.data.saveTriggerHistoryFlag=0)},t.setAsSchedule=function(e){e.$$isPersisted()||(e.data.saveTriggerHistoryFlag=1)},t.addWorkflowTrigger=function(){var i=e.newWorkflowTrigger();t.workflowTriggers.selectedTrigger=i},t.addNewSchedule=function(){t.createSchedule=!0,t.scheduleEntity=e.newSchedule()},t.saveSchedule=function(){"weekly"==t.scheduleEntity.data.recuringType?t.scheduleEntity.data.daysOfWeekToRun=t.daysOfweek.filter(Number).join():"monthly"==t.scheduleEntity.data.recuringType&&(t.scheduleEntity.data.daysOfMonthToRun=t.daysOfMonth.filter(Number).join()),t.scheduleEntity.$$save().then(function(e){t.schedule.selectedName=angular.copy(t.scheduleEntity.data.scheduleName),t.selectSchedule(angular.copy(t.scheduleEntity.data)),i.resetForm(t.scheduleEntity.forms.scheduleForm),t.createSchedule=!1},function(){})},t.selectCollection=function(i){if(void 0===i)return void t.workflowTriggers.selectedTrigger.$$setScheduleCollection();if(angular.isDefined(t.workflowTriggers.selectedTrigger.data.scheduleCollection))t.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID=i.collectionID,t.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionName=i.collectionName;else{var n=e.newCollection();n.data.collectionID=i.collectionID,n.data.collectionName=i.collectionName,t.workflowTriggers.selectedTrigger.$$setScheduleCollection(n)}},t.viewCollection=function(){angular.isDefined(t.workflowTriggers.selectedTrigger.data.scheduleCollection)&&s.addPageDialog("org/Hibachi/client/src/collection/components/criteriacreatecollection",{entityName:"Collection",entityId:t.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID,readOnly:!0})},t.selectSchedule=function(i){if(void 0===i)return t.schedulePreview={},void t.workflowTriggers.selectedTrigger.$$setSchedule();if(t.schedulePreview=o.buildSchedulePreview(i,6),angular.isDefined(t.workflowTriggers.selectedTrigger.data.schedule))t.workflowTriggers.selectedTrigger.data.schedule.data.scheduleID=i.scheduleID,t.workflowTriggers.selectedTrigger.data.schedule.data.scheduleName=i.scheduleName;else{var n=e.newSchedule();n.data.scheduleID=i.scheduleID,n.data.scheduleName=i.scheduleName,t.workflowTriggers.selectedTrigger.$$setSchedule(n)}}}}}return e.Factory=function(){var t=function(t,i,n,r,a,o,s,l){return new e(t,i,n,r,a,o,s,l)};return t.$inject=["$hibachi","workflowPartialsPath","formService","observerService","hibachiPathBuilder","collectionConfigService","scheduleService","dialogService"],t},e}();t.SWWorkflowTriggers=i},function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(2),a=function(e){function t(t,i,n){var r=e.call(this,t,i,n,"Schedule")||this;return r.$injector=t,r.$hibachi=i,r.utilityService=n,r.schedulePreview={},r.clearSchedulePreview=function(){r.schedulePreview={}},r.addSchedulePreviewItem=function(e,t){void 0===t&&(t=!0);var i=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],n=["January","February","March","April","May","June","July","August","September","October","November","December"],a=["Jan","Feb","Mar","Apr","May","June","July","Aug","Sept","Oct","Nov","Dec"],o=e.getMonth()+1+"-"+e.getDate()+"-"+e.getFullYear();void 0===r.schedulePreview[o]&&(r.schedulePreview[o]={day:e.getDate(),month:t?n[e.getMonth()]:a[e.getMonth()],year:e.getFullYear(),weekday:i[e.getDay()],times:[]}),r.schedulePreview[o].times.push(e.toLocaleTimeString())},r.buildSchedulePreview=function(e,t){void 0===t&&(t=10),r.clearSchedulePreview();var i=new Date(Date.parse(e.frequencyStartTime)),n=!!e.frequencyEndTime.trim()&&new Date(Date.parse(e.frequencyEndTime)),a=new Date,o=new Date;o.setHours(i.getHours()),o.setMinutes(i.getMinutes()),o.setSeconds(i.getSeconds());var s=[];if("weekly"==e.recuringType&&(s=e.daysOfWeekToRun.toString().split(","),!s.length||""==e.daysOfWeekToRun.toString().trim()))return r.schedulePreview;if("monthly"==e.recuringType&&(s=e.daysOfMonthToRun.toString().split(","),!s.length||!e.daysOfWeekToRun||""==e.daysOfWeekToRun.toString().trim()))return r.schedulePreview;for(var l=0,c=0;!(l>=t||c>=500);c++){var u=e.frequencyInterval&&e.frequencyInterval.toString().trim()?e.frequencyInterval*c*6e4:24*c*60*60*1e3,d=new Date(o.getTime()+u);if(!(d<a)){if("weekly"==e.recuringType){if(s.indexOf((d.getDay()+1).toString())==-1)continue}else if("monthly"==e.recuringType&&s.indexOf(d.getDate().toString())==-1)continue;n?r.utilityService.minutesOfDay(i)<=r.utilityService.minutesOfDay(d)&&r.utilityService.minutesOfDay(n)>=r.utilityService.minutesOfDay(d)&&(r.addSchedulePreviewItem(d),l++):(r.addSchedulePreviewItem(d),l++)}}return r.schedulePreview},r}return n(t,e),t.$inject=["$injector","$hibachi","utilityService"],t}(r.BaseEntityService);t.ScheduleService=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.propertyIdentifer="",this.comparisonOperator="",this.value="",this.displayPropertyIdentifier="",this.$$disabled=!1,this.$$isClosed=!0,this.$$isNew=!0}return e}();t.WorkflowCondition=i;var n=function(){function e(){this.workflowConditionGroup=[]}return e}();t.WorkflowConditionGroupItem=n;var r=function(){function e(e,t,r){var a=this;this.$log=e,this.newWorkflowCondition=function(){return new i},this.addWorkflowCondition=function(e,t){a.$log.debug("addWorkflowCondition"),a.$log.debug(e),a.$log.debug(t),e.length>=1&&(t.logicalOperator="AND"),e.push(t)},this.newWorkflowConditionGroupItem=function(){return new n},this.addWorkflowConditionGroupItem=function(e,t){e.push(t)}}return e.$inject=["$log","$hibachi","alertService"],e}();t.WorkflowConditionService=r}]);
>>>>>>> 8a477e59126e583f382a4a62a52f31313f7979af
