var hibachi =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 929);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var hibachiinterceptor_1 = __webpack_require__(831);
//constant
var hibachipathbuilder_1 = __webpack_require__(832);
//services
var cacheservice_1 = __webpack_require__(824);
var publicservice_1 = __webpack_require__(843);
var accountservice_1 = __webpack_require__(823);
var cartservice_1 = __webpack_require__(825);
var draggableservice_1 = __webpack_require__(826);
var utilityservice_1 = __webpack_require__(850);
var selectionservice_1 = __webpack_require__(847);
var observerservice_1 = __webpack_require__(840);
var orderservice_1 = __webpack_require__(842);
var orderpaymentservice_1 = __webpack_require__(841);
var formservice_1 = __webpack_require__(830);
var filterservice_1 = __webpack_require__(829);
var expandableservice_1 = __webpack_require__(828);
var metadataservice_1 = __webpack_require__(839);
var rbkeyservice_1 = __webpack_require__(844);
var typeaheadservice_1 = __webpack_require__(849);
var hibachiservice_1 = __webpack_require__(834);
var historyservice_1 = __webpack_require__(837);
var localstorageservice_1 = __webpack_require__(838);
var hibachiservicedecorator_1 = __webpack_require__(835);
var hibachiscope_1 = __webpack_require__(833);
var requestservice_1 = __webpack_require__(845);
var scopeservice_1 = __webpack_require__(846);
var skuservice_1 = __webpack_require__(848);
var hibachivalidationservice_1 = __webpack_require__(836);
var entityservice_1 = __webpack_require__(827);
//controllers
var globalsearch_1 = __webpack_require__(803);
//filters
var percentage_1 = __webpack_require__(806);
var entityrbkey_1 = __webpack_require__(805);
var swtrim_1 = __webpack_require__(807);
var swunique_1 = __webpack_require__(808);
var datefilter_1 = __webpack_require__(804);
//directives
//  components
var swactioncaller_1 = __webpack_require__(764);
var swtypeaheadsearch_1 = __webpack_require__(801);
var swtypeaheadinputfield_1 = __webpack_require__(798);
var swtypeaheadmultiselect_1 = __webpack_require__(799);
var swtypeaheadsearchlineitem_1 = __webpack_require__(802);
var swtypeaheadremoveselection_1 = __webpack_require__(800);
var swcollectionconfig_1 = __webpack_require__(768);
var swcollectionfilter_1 = __webpack_require__(769);
var swcollectionorderby_1 = __webpack_require__(770);
var swcollectioncolumn_1 = __webpack_require__(767);
var swactioncallerdropdown_1 = __webpack_require__(765);
var swcolumnsorter_1 = __webpack_require__(771);
var swconfirm_1 = __webpack_require__(772);
var swdraggable_1 = __webpack_require__(774);
var swdraggablecontainer_1 = __webpack_require__(775);
var swentityactionbar_1 = __webpack_require__(776);
var swentityactionbarbuttongroup_1 = __webpack_require__(777);
var swexpandablerecord_1 = __webpack_require__(778);
var swgravatar_1 = __webpack_require__(781);
var swlogin_1 = __webpack_require__(784);
var swmodallauncher_1 = __webpack_require__(785);
var swmodalwindow_1 = __webpack_require__(786);
var swnumbersonly_1 = __webpack_require__(787);
var swloading_1 = __webpack_require__(783);
var swscrolltrigger_1 = __webpack_require__(792);
var swtabgroup_1 = __webpack_require__(796);
var swtabcontent_1 = __webpack_require__(795);
var swtooltip_1 = __webpack_require__(797);
var swrbkey_1 = __webpack_require__(791);
var swoptions_1 = __webpack_require__(788);
var swselection_1 = __webpack_require__(793);
var swclickoutside_1 = __webpack_require__(766);
var swdirective_1 = __webpack_require__(773);
var swexportaction_1 = __webpack_require__(780);
var swhref_1 = __webpack_require__(782);
var swprocesscaller_1 = __webpack_require__(790);
var swsortable_1 = __webpack_require__(794);
var sworderbycontrols_1 = __webpack_require__(789);
var alert_module_1 = __webpack_require__(304);
var dialog_module_1 = __webpack_require__(308);
var coremodule = angular.module('hibachi.core', [
    //Angular Modules
    'ngAnimate',
    'ngRoute',
    'ngSanitize',
    //3rdParty modules
    'ui.bootstrap',
    alert_module_1.alertmodule.name,
    dialog_module_1.dialogmodule.name
])
    .config(['$compileProvider', '$httpProvider', '$logProvider', '$filterProvider', '$provide', 'hibachiPathBuilder', 'appConfig', function ($compileProvider, $httpProvider, $logProvider, $filterProvider, $provide, hibachiPathBuilder, appConfig) {
        hibachiPathBuilder.setBaseURL(appConfig.baseURL);
        hibachiPathBuilder.setBasePartialsPath('/org/Hibachi/client/src/');
        if (!appConfig.debugFlag) {
            appConfig.debugFlag = false;
        }
        $logProvider.debugEnabled(appConfig.debugFlag);
        $filterProvider.register('likeFilter', function () {
            return function (text) {
                if (angular.isDefined(text) && angular.isString(text)) {
                    return text.replace(new RegExp('%', 'g'), '');
                }
            };
        });
        //This filter is used to shorten a string by removing the charecter count that is passed to it and ending it with "..."
        $filterProvider.register('truncate', function () {
            return function (input, chars, breakOnWord) {
                if (isNaN(chars))
                    return input;
                if (chars <= 0)
                    return '';
                if (input && input.length > chars) {
                    input = input.substring(0, chars);
                    if (!breakOnWord) {
                        var lastspace = input.lastIndexOf(' ');
                        //get last space
                        if (lastspace !== -1) {
                            input = input.substr(0, lastspace);
                        }
                    }
                    else {
                        while (input.charAt(input.length - 1) === ' ') {
                            input = input.substr(0, input.length - 1);
                        }
                    }
                    return input + '...';
                }
                return input;
            };
        });
        //This filter is used to shorten long string but unlike "truncate", it removes from the start of the string and prepends "..."
        $filterProvider.register('pretruncate', function () {
            return function (input, chars, breakOnWord) {
                if (isNaN(chars))
                    return input;
                if (chars <= 0)
                    return '';
                if (input && input.length > chars) {
                    input = input.slice('-' + chars);
                    //  input = input.substring(0, chars);
                    if (!breakOnWord) {
                        var lastspace = input.lastIndexOf(' ');
                        //get last space
                        if (lastspace !== -1) {
                            input = input.substr(0, lastspace);
                        }
                    }
                    else {
                        while (input.charAt(input.length - 1) === ' ') {
                            input = input.substr(0, input.length - 1);
                        }
                    }
                    return '...' + input;
                }
                return input;
            };
        });
        hibachiPathBuilder.setBaseURL(appConfig.baseURL);
        hibachiPathBuilder.setBasePartialsPath('/org/Hibachi/client/src/');
        // $provide.decorator('$hibachi',
        $httpProvider.interceptors.push('hibachiInterceptor');
    }])
    .run(['$rootScope', '$hibachi', '$route', '$location', function ($rootScope, $hibachi, $route, $location) {
        $rootScope.buildUrl = $hibachi.buildUrl;
        var original = $location.path;
        $location.path = function (path, reload) {
            if (reload === false) {
                var lastRoute = $route.current;
                var un = $rootScope.$on('$locationChangeSuccess', function () {
                    $route.current = lastRoute;
                    un();
                });
            }
            return original.apply($location, [path]);
        };
    }])
    .constant('hibachiPathBuilder', new hibachipathbuilder_1.HibachiPathBuilder())
    .constant('corePartialsPath', 'core/components/')
    //services
    .service('cacheService', cacheservice_1.CacheService)
    .service('publicService', publicservice_1.PublicService)
    .service('utilityService', utilityservice_1.UtilityService)
    .service('selectionService', selectionservice_1.SelectionService)
    .service('observerService', observerservice_1.ObserverService)
    .service('draggableService', draggableservice_1.DraggableService)
    .service('expandableService', expandableservice_1.ExpandableService)
    .service('filterService', filterservice_1.FilterService)
    .service('formService', formservice_1.FormService)
    .service('historyService', historyservice_1.HistoryService)
    .service('metadataService', metadataservice_1.MetaDataService)
    .service('rbkeyService', rbkeyservice_1.RbKeyService)
    .service('typeaheadService', typeaheadservice_1.TypeaheadService)
    .provider('$hibachi', hibachiservice_1.$Hibachi)
    .decorator('$hibachi', hibachiservicedecorator_1.HibachiServiceDecorator)
    .service('hibachiInterceptor', hibachiinterceptor_1.HibachiInterceptor.Factory())
    .service('hibachiScope', hibachiscope_1.HibachiScope)
    .service('scopeService', scopeservice_1.ScopeService)
    .service('skuService', skuservice_1.SkuService)
    .service('localStorageService', localstorageservice_1.LocalStorageService)
    .service('requestService', requestservice_1.RequestService)
    .service('accountService', accountservice_1.AccountService)
    .service('orderService', orderservice_1.OrderService)
    .service('orderPaymentService', orderpaymentservice_1.OrderPaymentService)
    .service('cartService', cartservice_1.CartService)
    .service('hibachiValidationService', hibachivalidationservice_1.HibachiValidationService)
    .service('entityService', entityservice_1.EntityService)
    //controllers
    .controller('globalSearch', globalsearch_1.GlobalSearchController)
    //filters
    .filter('dateFilter', ['$filter', datefilter_1.DateFilter.Factory])
    .filter('percentage', [percentage_1.PercentageFilter.Factory])
    .filter('trim', [swtrim_1.SWTrim.Factory])
    .filter('entityRBKey', ['rbkeyService', entityrbkey_1.EntityRBKey.Factory])
    .filter('swdate', ['$filter', datefilter_1.DateFilter.Factory])
    .filter('unique', [swunique_1.SWUnique.Factory])
    //directives
    .directive('swCollectionConfig', swcollectionconfig_1.SWCollectionConfig.Factory())
    .directive('swCollectionColumn', swcollectioncolumn_1.SWCollectionColumn.Factory())
    .directive('swCollectionFilter', swcollectionfilter_1.SWCollectionFilter.Factory())
    .directive('swCollectionOrderBy', swcollectionorderby_1.SWCollectionOrderBy.Factory())
    .directive('swTypeaheadSearch', swtypeaheadsearch_1.SWTypeaheadSearch.Factory())
    .directive('swTypeaheadInputField', swtypeaheadinputfield_1.SWTypeaheadInputField.Factory())
    .directive('swTypeaheadMultiselect', swtypeaheadmultiselect_1.SWTypeaheadMultiselect.Factory())
    .directive('swTypeaheadSearchLineItem', swtypeaheadsearchlineitem_1.SWTypeaheadSearchLineItem.Factory())
    .directive('swTypeaheadRemoveSelection', swtypeaheadremoveselection_1.SWTypeaheadRemoveSelection.Factory())
    .directive('swActionCaller', swactioncaller_1.SWActionCaller.Factory())
    .directive('swActionCallerDropdown', swactioncallerdropdown_1.SWActionCallerDropdown.Factory())
    .directive('swColumnSorter', swcolumnsorter_1.SWColumnSorter.Factory())
    .directive('swConfirm', swconfirm_1.SWConfirm.Factory())
    .directive('swEntityActionBar', swentityactionbar_1.SWEntityActionBar.Factory())
    .directive('swEntityActionBarButtonGroup', swentityactionbarbuttongroup_1.SWEntityActionBarButtonGroup.Factory())
    .directive('swExpandableRecord', swexpandablerecord_1.SWExpandableRecord.Factory())
    .directive('swGravatar', swgravatar_1.SWGravatar.Factory())
    .directive('swDraggable', swdraggable_1.SWDraggable.Factory())
    .directive('swDraggableContainer', swdraggablecontainer_1.SWDraggableContainer.Factory())
    .directive('swLogin', swlogin_1.SWLogin.Factory())
    .directive('swModalLauncher', swmodallauncher_1.SWModalLauncher.Factory())
    .directive('swModalWindow', swmodalwindow_1.SWModalWindow.Factory())
    .directive('swNumbersOnly', swnumbersonly_1.SWNumbersOnly.Factory())
    .directive('swLoading', swloading_1.SWLoading.Factory())
    .directive('swScrollTrigger', swscrolltrigger_1.SWScrollTrigger.Factory())
    .directive('swRbkey', swrbkey_1.SWRbKey.Factory())
    .directive('swOptions', swoptions_1.SWOptions.Factory())
    .directive('swSelection', swselection_1.SWSelection.Factory())
    .directive('swTabGroup', swtabgroup_1.SWTabGroup.Factory())
    .directive('swTabContent', swtabcontent_1.SWTabContent.Factory())
    .directive('swTooltip', swtooltip_1.SWTooltip.Factory())
    .directive('swClickOutside', swclickoutside_1.SWClickOutside.Factory())
    .directive('swDirective', swdirective_1.SWDirective.Factory())
    .directive('swExportAction', swexportaction_1.SWExportAction.Factory())
    .directive('swHref', swhref_1.SWHref.Factory())
    .directive('swProcessCaller', swprocesscaller_1.SWProcessCaller.Factory())
    .directive('sw:sortable', swsortable_1.SWSortable.Factory())
    .directive('swOrderByControls', sworderbycontrols_1.SWOrderByControls.Factory());
exports.coremodule = coremodule;


/***/ }),
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var baseobject_1 = __webpack_require__(306);
var Entities = __webpack_require__(813);
var Processes = __webpack_require__(819);
var BaseEntityService = /** @class */ (function (_super) {
    __extends(BaseEntityService, _super);
    //@ngInject
    function BaseEntityService($injector, $hibachi, utilityService, baseObjectName, objectName) {
        var _this = _super.call(this, $injector) || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.baseObjectName = baseObjectName;
        _this.objectName = objectName;
        _this.newEntity = function (baseObjectName, objectName) {
            if (!objectName) {
                objectName = baseObjectName;
            }
            return _this.newObject('Entity', baseObjectName, objectName);
        };
        _this.newProcessObject = function (baseObjectName, objectName) {
            if (!objectName) {
                objectName = baseObjectName;
            }
            return _this.newObject('Process', baseObjectName, objectName);
        };
        _this.newObject = function (type, baseObjectName, objectName) {
            if (!objectName) {
                objectName = baseObjectName;
            }
            var baseObject = _this.$hibachi.getEntityDefinition(baseObjectName);
            if (baseObject) {
                var Barrell = {};
                if (type === 'Entity') {
                    Barrell = Entities;
                }
                else if (type === 'Process') {
                    Barrell = Processes;
                }
                if (Barrell[objectName]) {
                    _this.utilityService.extend(Barrell[objectName], baseObject);
                    var entity = new Barrell[objectName](_this.$injector);
                }
                else {
                    var entity = new baseObject();
                    //throw('need to add '+ objectName+' class');
                }
                return entity;
            }
            else {
                return {};
            }
        };
        _this.utilityService = utilityService;
        _this.$hibachi = $hibachi;
        _this.$injector = $injector;
        if (!_this.objectName) {
            _this.objectName = _this.baseObjectName;
        }
        _this['new' + _this.objectName] = function () {
            return _this.newEntity(_this.baseObjectName, _this.objectName);
        };
        return _this;
    }
    return BaseEntityService;
}(baseobject_1.BaseObject));
exports.BaseEntityService = BaseEntityService;


/***/ }),
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var basetransient_1 = __webpack_require__(68);
var BaseEntity = /** @class */ (function (_super) {
    __extends(BaseEntity, _super);
    function BaseEntity($injector) {
        return _super.call(this, $injector) || this;
    }
    return BaseEntity;
}(basetransient_1.BaseTransient));
exports.BaseEntity = BaseEntity;


/***/ }),
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

(function(){
  var crypt = __webpack_require__(359),
      utf8 = __webpack_require__(72).utf8,
      isBuffer = __webpack_require__(360),
      bin = __webpack_require__(72).bin,

  // The core
  md5 = function (message, options) {
    // Convert to byte array
    if (message.constructor == String)
      if (options && options.encoding === 'binary')
        message = bin.stringToBytes(message);
      else
        message = utf8.stringToBytes(message);
    else if (isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message))
      message = message.toString();
    // else, assume byte array already

    var m = crypt.bytesToWords(message),
        l = message.length * 8,
        a =  1732584193,
        b = -271733879,
        c = -1732584194,
        d =  271733878;

    // Swap endian
    for (var i = 0; i < m.length; i++) {
      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
    }

    // Padding
    m[l >>> 5] |= 0x80 << (l % 32);
    m[(((l + 64) >>> 9) << 4) + 14] = l;

    // Method shortcuts
    var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;

    for (var i = 0; i < m.length; i += 16) {

      var aa = a,
          bb = b,
          cc = c,
          dd = d;

      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
      c = FF(c, d, a, b, m[i+10], 17, -42063);
      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
      d = FF(d, a, b, c, m[i+13], 12, -40341101);
      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
      c = GG(c, d, a, b, m[i+11], 14,  643717713);
      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
      d = GG(d, a, b, c, m[i+10],  9,  38016083);
      c = GG(c, d, a, b, m[i+15], 14, -660478335);
      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
      b = HH(b, c, d, a, m[i+14], 23, -35309556);
      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
      a = HH(a, b, c, d, m[i+13],  4,  681279174);
      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
      d = HH(d, a, b, c, m[i+12], 11, -421815835);
      c = HH(c, d, a, b, m[i+15], 16,  530742520);
      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
      c = II(c, d, a, b, m[i+14], 15, -1416354905);
      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
      a = II(a, b, c, d, m[i+12],  6,  1700485571);
      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
      c = II(c, d, a, b, m[i+10], 15, -1051523);
      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
      d = II(d, a, b, c, m[i+15], 10, -30611744);
      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
      b = II(b, c, d, a, m[i+13], 21,  1309151649);
      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
      d = II(d, a, b, c, m[i+11], 10, -1120210379);
      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

      a = (a + aa) >>> 0;
      b = (b + bb) >>> 0;
      c = (c + cc) >>> 0;
      d = (d + dd) >>> 0;
    }

    return crypt.endian([a, b, c, d]);
  };

  // Auxiliary functions
  md5._ff  = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._gg  = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._hh  = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._ii  = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;

  module.exports = function (message, options) {
    if (message === undefined || message === null)
      throw new Error('Illegal argument ' + message);

    var digestbytes = crypt.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

})();


/***/ }),
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseobject_1 = __webpack_require__(306);
var BaseTransient = /** @class */ (function (_super) {
    __extends(BaseTransient, _super);
    function BaseTransient($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.errors = {};
        _this.messages = {};
        _this.populate = function (response) {
            var data = response;
            if (response.data) {
                data = response.data;
            }
            data = _this.utilityService.nvpToObject(data);
            var _loop_1 = function () {
                var propertyIdentifier = key.replace(_this.className.toLowerCase() + '.', '');
                var propertyIdentifierArray = propertyIdentifier.split('.');
                var propertyIdentifierKey = propertyIdentifier.replace(/\./g, '_');
                var currentEntity = _this;
                angular.forEach(propertyIdentifierArray, function (property, propertyKey) {
                    if (currentEntity.metaData[property]) {
                        //if we are on the last item in the array
                        if (propertyKey === propertyIdentifierArray.length - 1) {
                            //if is json
                            //if(currentEntity.metaData[key]){
                            //if propertyidentifier
                            // }else{
                            if (angular.isObject(data[key]) && currentEntity.metaData[property].fieldtype && currentEntity.metaData[property].fieldtype === 'many-to-one') {
                                var relatedEntity = _this.entityService.newEntity(currentEntity.metaData[property].cfc);
                                if (relatedEntity.populate) {
                                    relatedEntity.populate(data[key]);
                                    currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
                                }
                                else {
                                    relatedEntity.$$init(data[key]);
                                    currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
                                }
                            }
                            else if (angular.isArray(data[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {
                                currentEntity[property] = [];
                                angular.forEach(data[key], function (arrayItem, propertyKey) {
                                    var relatedEntity = _this.entityService.newEntity(currentEntity.metaData[property].cfc);
                                    if (relatedEntity.populate) {
                                        relatedEntity.populate(arrayItem);
                                        var hasItem = false;
                                        for (var item in currentEntity[property]) {
                                            if (currentEntity[property][item].$$getID().length > 0 && currentEntity[property][item].$$getID() === relatedEntity.$$getID()) {
                                                hasItem = true;
                                                break;
                                            }
                                        }
                                        if (!hasItem) {
                                            currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
                                        }
                                    }
                                    else {
                                        relatedEntity.$$init(arrayItem);
                                        currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
                                    }
                                });
                            }
                            else {
                                currentEntity[property] = data[key];
                            }
                            //}
                        }
                        else {
                            var propertyMetaData = currentEntity.metaData[property];
                            if (angular.isUndefined(currentEntity.data[property]) || (currentEntity.data[property] && currentEntity.data[property] === null)) {
                                if (propertyMetaData.fieldtype === 'one-to-many') {
                                    relatedEntity = [];
                                }
                                else {
                                    relatedEntity = _this.$hibachi['new' + propertyMetaData.cfc]();
                                }
                            }
                            else {
                                relatedEntity = currentEntity.data[property];
                            }
                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);
                            currentEntity = relatedEntity;
                        }
                    }
                    else {
                        _this[key] = data[key];
                    }
                });
            };
            for (var key in data) {
                _loop_1();
            }
            if (response.errors) {
                _this.errors = response.errors;
                _this.messages = response.messages;
            }
        };
        _this.addError = function (errorName, errorMessage) {
            if (!_this.errors[errorName]) {
                _this.errors[errorName] = [];
            }
            if (angular.isArray(errorMessage)) {
                _this.addErrorsByArray(errorName, errorMessage);
            }
            else if (angular.isObject(errorMessage)) {
                _this.addErrorsByObject(errorName, errorMessage);
            }
            else {
                _this.errors[errorName].push(errorMessage);
            }
        };
        _this.addErrorsByArray = function (errorName, errorMessages) {
            for (var i = 0; i < errorMessages.length; i++) {
                var message = errorMessages[i];
                _this.errors[errorName].push(message);
            }
        };
        _this.addErrorsByObject = function (errorName, errorMessage) {
            if (!_this.errors[errorName]) {
                _this.errors[errorName] = [];
            }
            for (var key in errorMessage) {
                for (var i = 0; i < errorMessage[key].length; i++) {
                    var message = errorMessage[i];
                    _this.errors[errorName].push(message);
                }
            }
        };
        _this.addErrors = function (errors) {
            for (var key in errors) {
                if (!_this.errors[key]) {
                    _this.errors[key] = [];
                }
                for (var message in errors[key]) {
                    _this.errors[key].push(message);
                }
            }
        };
        _this.getError = function (errorName) {
            return _this.getErrorByErrorName(errorName);
        };
        _this.getErrorByErrorName = function (errorName) {
            return _this.errors[errorName];
        };
        _this.hasError = function (errorName) {
            return _this.hasErrorByErrorName(errorName);
        };
        _this.hasErrorByErrorName = function (errorName) {
            return angular.isDefined(_this.errors[errorName]);
        };
        _this.hasErrors = function () {
            return Object.keys(_this.errors).length;
        };
        _this.hasSuccessfulAction = function (action) {
            return;
        };
        _this.$hibachi = _this.getService('$hibachi');
        _this.hibachiValidationService = _this.getService('hibachiValidationService');
        _this.utilityService = _this.getService('utilityService');
        _this.entityService = _this.getService('entityService');
        return _this;
    }
    return BaseTransient;
}(baseobject_1.BaseObject));
exports.BaseTransient = BaseTransient;


/***/ }),
/* 69 */,
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var BaseService = /** @class */ (function () {
    function BaseService() {
    }
    return BaseService;
}());
exports.BaseService = BaseService;


/***/ }),
/* 71 */,
/* 72 */
/***/ (function(module, exports) {

var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

module.exports = charenc;


/***/ }),
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//controllers
var alertcontroller_1 = __webpack_require__(723);
//services
var alertservice_1 = __webpack_require__(725);
var alertmodule = angular.module('hibachi.alert', [])
    //controllers
    .controller('alertController', alertcontroller_1.AlertController)
    //services
    .service('alertService', alertservice_1.AlertService);
exports.alertmodule = alertmodule;


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(11);
//services
var collectionconfigservice_1 = __webpack_require__(762);
var collectionservice_1 = __webpack_require__(763);
//controllers
var collections_1 = __webpack_require__(757);
var createcollection_1 = __webpack_require__(759);
var confirmationcontroller_1 = __webpack_require__(758);
var entity_createcollection_1 = __webpack_require__(760);
//directives
var swcollection_1 = __webpack_require__(736);
var swaddfilterbuttons_1 = __webpack_require__(735);
var swdisplayoptions_1 = __webpack_require__(751);
var swdisplayitem_1 = __webpack_require__(749);
var swdisplayitemaggregate_1 = __webpack_require__(750);
var swcollectiontable_1 = __webpack_require__(737);
var swcolumnitem_1 = __webpack_require__(738);
var swconditioncriteria_1 = __webpack_require__(739);
var swcriteria_1 = __webpack_require__(740);
var swcriteriaboolean_1 = __webpack_require__(741);
var swcriteriadate_1 = __webpack_require__(742);
var swcriteriamanytomany_1 = __webpack_require__(743);
var swcriteriamanytoone_1 = __webpack_require__(744);
var swcriterianumber_1 = __webpack_require__(745);
var swcriteriaonetomany_1 = __webpack_require__(746);
var swcriteriarelatedobject_1 = __webpack_require__(747);
var swcriteriastring_1 = __webpack_require__(748);
var sweditfilteritem_1 = __webpack_require__(752);
var swfiltergroups_1 = __webpack_require__(754);
var swfilteritem_1 = __webpack_require__(755);
var swfiltergroupitem_1 = __webpack_require__(753);
//filters
var aggregatefilter_1 = __webpack_require__(761);
var collectionmodule = angular.module('hibachi.collection', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('collectionPartialsPath', 'collection/components/')
    //controllers
    .controller('collections', collections_1.CollectionController)
    .controller('confirmationController', confirmationcontroller_1.ConfirmationController)
    .controller('createCollection', createcollection_1.CreateCollection)
    .controller('entity_createcollection', entity_createcollection_1.CollectionCreateController)
    //services
    .factory('collectionConfigService', ['rbkeyService', '$hibachi', 'utilityService', 'observerService', function (rbkeyService, $hibachi, utilityService, observerService) { return new collectionconfigservice_1.CollectionConfig(rbkeyService, $hibachi, utilityService, observerService); }])
    .service('collectionService', collectionservice_1.CollectionService)
    //directives
    .directive('swCollection', swcollection_1.SWCollection.Factory())
    .directive('swAddFilterButtons', swaddfilterbuttons_1.SWAddFilterButtons.Factory())
    .directive('swDisplayOptions', swdisplayoptions_1.SWDisplayOptions.Factory())
    .directive('swDisplayItem', swdisplayitem_1.SWDisplayItem.Factory())
    .directive('swDisplayItemAggregate', swdisplayitemaggregate_1.SWDisplayItemAggregate.Factory())
    .directive('swCollectionTable', swcollectiontable_1.SWCollectionTable.Factory())
    .directive('swColumnItem', swcolumnitem_1.SWColumnItem.Factory())
    .directive('swConditionCriteria', swconditioncriteria_1.SWConditionCriteria.Factory())
    .directive('swCriteria', swcriteria_1.SWCriteria.Factory())
    .directive('swCriteriaBoolean', swcriteriaboolean_1.SWCriteriaBoolean.Factory())
    .directive('swCriteriaDate', swcriteriadate_1.SWCriteriaDate.Factory())
    .directive('swCriteriaManyToMany', swcriteriamanytomany_1.SWCriteriaManyToMany.Factory())
    .directive('swCriteriaManyToOne', swcriteriamanytoone_1.SWCriteriaManyToOne.Factory())
    .directive('swCriteriaNumber', swcriterianumber_1.SWCriteriaNumber.Factory())
    .directive('swCriteriaOneToMany', swcriteriaonetomany_1.SWCriteriaOneToMany.Factory())
    .directive('swCriteriaRelatedObject', swcriteriarelatedobject_1.SWCriteriaRelatedObject.Factory())
    .directive('swCriteriaString', swcriteriastring_1.SWCriteriaString.Factory())
    .directive('swEditFilterItem', sweditfilteritem_1.SWEditFilterItem.Factory())
    .directive('swFilterGroups', swfiltergroups_1.SWFilterGroups.Factory())
    .directive('swFilterItem', swfilteritem_1.SWFilterItem.Factory())
    .directive('swFilterGroupItem', swfiltergroupitem_1.SWFilterGroupItem.Factory())
    //filters
    .filter('aggregateFilter', ['$filter', aggregatefilter_1.AggregateFilter.Factory]);
exports.collectionmodule = collectionmodule;


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"angular\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
var BaseObject = /** @class */ (function () {
    //@ngInject
    function BaseObject($injector) {
        var _this = this;
        this.getService = function (serviceName) {
            //return;
            if (_this.$injector.has(serviceName)) {
                //returns a generic service
                return _this.$injector.get(serviceName);
            }
        };
        this.getHibachiScope = function () {
            return _this.getService('publicService');
        };
        this.getAppConfig = function () {
            return _this.getService('appConfig');
        };
        this.$injector = $injector;
        var constructorString = this.constructor.toString();
        this.className = constructorString.match(/\w+/g)[1];
    }
    return BaseObject;
}());
exports.BaseObject = BaseObject;


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var basetransient_1 = __webpack_require__(68);
var Request = /** @class */ (function (_super) {
    __extends(Request, _super);
    function Request(url, data, method, headers, $injector) {
        var _this = _super.call(this, $injector) || this;
        _this.loading = true;
        _this.errors = {};
        _this.processResponse = function (response) {
            _this.loading = false;
            if (response.errors) {
                _this.errors = response.errors;
            }
            if (response.messages) {
                _this.messages = response.messages;
            }
        };
        //returns hibachiAction value from url and data;
        _this.getAction = function () {
            var config = _this.getAppConfig();
            //typically hibachiAction
            var actionName = config.action;
            var params = _this.utilityService.getQueryParamsFromUrl(_this.url);
            if (params[actionName]) {
                return params[actionName];
            }
            if (_this.data && _this.data[actionName]) {
                return _this.data[actionName];
            }
            if (_this.url.indexOf('api/scope/') > 0) {
                return _this.extractPublicAction(_this.url);
            }
        };
        _this.extractPublicAction = function (url) {
            //get in between api/scope and / or ? or end of word
            var regex = /\api\/scope\/(.*?)(?=\/|\?|$)/;
            var arr = regex.exec(url);
            return arr[1];
        };
        _this.processSuccess = function (response) {
            _this.processResponse(response);
        };
        _this.processError = function (response) {
            _this.processResponse(response);
        };
        /** used to turn data into a correct format for the post */
        _this.toFormParams = function (data) {
            if (data) {
                return $.param(data);
            }
            else {
                return "";
            }
            //return data = this.serializeData(data) || "";
        };
        _this.serializeData = function (data) {
            // If this is not an object, defer to native stringification.
            if (!angular.isObject(data)) {
                return ((data == null) ? "" : data.toString());
            }
            var buffer = [];
            // Serialize each key in the object.
            for (var name in data) {
                if (!data.hasOwnProperty(name)) {
                    continue;
                }
                var value = data[name];
                buffer.push(encodeURIComponent(name) + "=" + encodeURIComponent((value == null) ? "" : value));
            }
            // Serialize the buffer and clean it up for transportation.
            var source = buffer.join("&").replace(/%20/g, "+");
            return (source);
        };
        _this.headers = headers;
        _this.$q = _this.getService('$q');
        _this.$http = _this.getService('$http');
        _this.$window = _this.getService('$window');
        _this.url = url;
        _this.data = data;
        _this.method = method;
        _this.utilityService = _this.getService('utilityService');
        if (!method) {
            if (data == undefined) {
                method = "get";
            }
            else {
                method = "post";
            }
        }
        var deferred = _this.$q.defer();
        if (method == "post") {
            if (_this.headers['Content-Type'] !== "application/json") {
                data = _this.toFormParams(data);
            }
            //post
            var promise = _this.$http({
                url: url, data: data, headers: _this.headers, method: 'post'
            })
                .success(function (result) {
                _this.processSuccess(result);
                deferred.resolve(result);
            }).error(function (response) {
                _this.processError(response);
                deferred.reject(response);
            });
            _this.promise = deferred.promise;
        }
        else {
            //get
            _this.$http({ url: url, method: 'get' })
                .success(function (result) {
                _this.processSuccess(result);
                deferred.resolve(result);
            }).error(function (reason) {
                _this.processError(reason);
                deferred.reject(reason);
            });
            _this.promise = deferred.promise;
        }
        return _this;
    }
    return Request;
}(basetransient_1.BaseTransient));
exports.Request = Request;


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//services
var dialogservice_1 = __webpack_require__(852);
//controllers
var pagedialog_1 = __webpack_require__(851);
var dialogmodule = angular.module('hibachi.dialog', []).config(function () {
})
    //services
    .service('dialogService', dialogservice_1.DialogService)
    //controllers
    .controller('pageDialog', pagedialog_1.PageDialogController)
    //filters
    //constants
    .constant('dialogPartials', 'dialog/components/');
exports.dialogmodule = dialogmodule;


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//services
// import {AccountService} from "./services/accountservice";
// import {CartService} from "./services/cartservice";
// import {UtilityService} from "./services/utilityservice";
// import {SelectionService} from "./services/selectionservice";
// import {ObserverService} from "./services/observerservice";
// import {FormService} from "./services/formservice";
// import {MetaDataService} from "./services/metadataservice";
//controllers
var otherwisecontroller_1 = __webpack_require__(856);
var routercontroller_1 = __webpack_require__(857);
//directives
var swdetailtabs_1 = __webpack_require__(854);
var swdetail_1 = __webpack_require__(853);
var swlist_1 = __webpack_require__(855);
var core_module_1 = __webpack_require__(11);
var entitymodule = angular.module('hibachi.entity', ['ngRoute', core_module_1.coremodule.name])
    .config(['$routeProvider', '$injector', '$locationProvider', 'appConfig',
    function ($routeProvider, $injector, $locationProvider, appConfig) {
        //detect if we are in hashbang mode
        var vars = {};
        var parts = window.location.href.replace(/[?&]+([^=&]+)#([^/]*)/gi, function (m, key, value) {
            vars[key] = value;
        });
        if (vars.ng) {
            $locationProvider.html5Mode(false).hashPrefix('!');
        }
        var snakeToCapitalCase = function (s) {
            return s.charAt(0).toUpperCase() + s.replace(/(\-\w)/g, function (m) { return m[1].toUpperCase(); }).slice(1);
        };
        $routeProvider.when('/entity/:entityName/', {
            template: function (params) {
                var entityDirectiveExists = $injector.has('sw' + snakeToCapitalCase(params.entityName) + 'ListDirective');
                if (entityDirectiveExists) {
                    return '<sw-' + params.entityName.toLowerCase() + '-list></sw-' + params.entityName.toLowerCase() + '-list>';
                }
                else {
                    return '<sw-list></sw-list>';
                }
            },
            controller: 'routerController'
        }).when('/entity/:entityName/:entityID', {
            template: function (params) {
                var entityDirectiveExists = $injector.has('sw' + snakeToCapitalCase(params.entityName) + 'DetailDirective');
                if (entityDirectiveExists) {
                    return '<sw-' + params.entityName.toLowerCase() + '-detail></sw-' + params.entityName.toLowerCase() + '-detail>';
                }
                else {
                    return '<sw-detail></sw-detail>';
                }
            },
            controller: 'routerController',
        });
        //        .otherwise({
        //         //controller:'otherwiseController'
        //         templateUrl: appConfig.baseURL + '/admin/client/js/partials/otherwise.html',
        //     });
    }])
    .constant('coreEntityPartialsPath', 'entity/components/')
    //services
    //controllers
    .controller('otherwiseController', otherwisecontroller_1.OtherWiseController)
    .controller('routerController', routercontroller_1.RouterController)
    //filters
    //directives
    .directive('swDetail', swdetail_1.SWDetail.Factory())
    .directive('swDetailTabs', swdetailtabs_1.SWDetailTabs.Factory())
    .directive('swList', swlist_1.SWList.Factory());
exports.entitymodule = entitymodule;


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWPropertyDisplayController = /** @class */ (function () {
    //@ngInject
    function SWPropertyDisplayController($filter, utilityService, $injector, metadataService, observerService, listingService) {
        var _this = this;
        this.$filter = $filter;
        this.utilityService = utilityService;
        this.$injector = $injector;
        this.metadataService = metadataService;
        this.observerService = observerService;
        this.listingService = listingService;
        this.saved = false;
        this.optionValues = [];
        this.$onInit = function () {
            var bindToControllerProps = _this.$injector.get('swPropertyDisplayDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i] && _this.swForm && _this.swForm[i]) {
                    _this[i] = _this.swForm[i];
                }
            }
            _this.errors = {};
            _this.edited = false;
            _this.edit = _this.edit || _this.editing;
            _this.editing = _this.editing || _this.edit;
            _this.errorName = _this.errorName || _this.name;
            _this.initialValue = _this.object[_this.property];
            _this.propertyDisplayID = _this.utilityService.createID(32);
            if (angular.isUndefined(_this.showSave)) {
                _this.showSave = true;
            }
            if (angular.isUndefined(_this.inListingDisplay)) {
                _this.inListingDisplay = false;
            }
            if (angular.isUndefined(_this.rowSaveEnabled)) {
                _this.rowSaveEnabled = _this.inListingDisplay;
            }
            if (angular.isDefined(_this.revertToValue) && angular.isUndefined(_this.showRevert)) {
                _this.showRevert = true;
            }
            if (angular.isDefined(_this.revertToValue) && angular.isUndefined(_this.revertText)) {
                _this.revertText = _this.revertToValue;
            }
            if (angular.isUndefined(_this.showRevert)) {
                _this.showRevert = false;
            }
            if (angular.isUndefined(_this.rawFileTarget)) {
                _this.rawFileTarget = _this.property;
            }
            if (angular.isUndefined(_this.editing)) {
                _this.editing = false;
            }
            if (angular.isUndefined(_this.editable)) {
                _this.editable = true;
            }
            if (angular.isUndefined(_this.isHidden)) {
                _this.isHidden = false;
            }
            if (angular.isUndefined(_this.noValidate)) {
                _this.noValidate = false;
            }
            if (angular.isUndefined(_this.inModal)) {
                _this.inModal = false;
            }
            if (angular.isUndefined(_this.optionsArguments)) {
                _this.optionsArguments = {};
            }
            if ((_this.fieldType !== 'hidden' &&
                angular.isUndefined(_this.inListingDisplay)) ||
                (angular.isDefined(_this.inListingDisplay) && !_this.inListingDisplay)) {
                _this.showLabel = true;
            }
            else {
                _this.showLabel = false;
            }
            if (angular.isDefined(_this.pageRecord) && angular.isUndefined(_this.pageRecord.edited)) {
                _this.pageRecord.edited = false;
            }
            _this.applyFilter = function (model, filter) {
                try {
                    return _this.$filter(filter)(model);
                }
                catch (e) {
                    return model;
                }
            };
            //swfproperty logic
            if (angular.isUndefined(_this.fieldType) && _this.object && _this.object.metaData) {
                _this.fieldType = _this.metadataService.getPropertyFieldType(_this.object, _this.propertyIdentifier);
            }
            if (angular.isUndefined(_this.title) && _this.object && _this.object.metaData) {
                _this.labelText = _this.metadataService.getPropertyTitle(_this.object, _this.propertyIdentifier);
            }
            _this.labelText = _this.labelText || _this.title;
            _this.title = _this.title || _this.labelText;
            _this.fieldType = _this.fieldType || "text";
            _this.class = _this.class || "form-control";
            _this.fieldAttributes = _this.fieldAttributes || "";
            _this.label = _this.label || "true";
            _this.labelText = _this.labelText || "";
            _this.labelClass = _this.labelClass || "";
            _this.name = _this.name || "unnamed";
            _this.value = _this.value || _this.initialValue;
            _this.object = _this.object || _this.swForm.object; //this is the process object
            /** handle options */
            if (_this.options && angular.isString(_this.options)) {
                var optionsArray = [];
                optionsArray = _this.options.toString().split(",");
                angular.forEach(optionsArray, function (o) {
                    var newOption = {
                        name: "",
                        value: ""
                    };
                    newOption.name = o;
                    newOption.value = o;
                    _this.optionValues.push(newOption);
                });
            }
            /** handle turning the options into an array of objects */
            /** handle setting the default value for the yes / no element  */
            if (_this.fieldType == "yesno" && (_this.value && angular.isString(_this.value))) {
                _this.selected == _this.value;
            }
            if (angular.isUndefined(_this.hint) && _this.object && _this.object.metaData) {
                _this.hint = _this.metadataService.getPropertyHintByObjectAndPropertyIdentifier(_this.object, _this.propertyIdentifier);
            }
            if ((_this.hasOnChangeCallback || _this.inListingDisplay || _this.onChangeEvent) &&
                (angular.isDefined(_this.swForm) && angular.isDefined(_this.name))) {
                _this.swInputOnChangeEvent = _this.swForm.name + _this.name + 'change';
                _this.observerService.attach(_this.onChange, _this.swInputOnChangeEvent);
            }
        };
        this.onChange = function (result) {
            _this.edited = true;
            if (_this.saved) {
                _this.saved = false;
            }
            if (_this.hasOnChangeCallback) {
                _this.onChangeCallback(result);
            }
            if (_this.inListingDisplay && _this.rowSaveEnabled) {
                _this.listingService.markEdited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID, _this.save);
            }
            if (angular.isDefined(_this.onChangeEvent)) {
                _this.observerService.notify(_this.onChangeEvent, result);
            }
        };
        this.clear = function () {
            if (_this.reverted) {
                _this.reverted = false;
                _this.showRevert = true;
            }
            _this.edited = false;
            _this.object.data[_this.property] = _this.initialValue;
            if (_this.inListingDisplay && _this.rowSaveEnabled) {
                _this.listingService.markUnedited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID);
            }
        };
        this.revert = function () {
            _this.showRevert = false;
            _this.reverted = true;
            _this.object.data[_this.property] = _this.revertToValue;
            _this.onChange();
        };
        this.save = function () {
            //do this eagerly to hide save will reverse if theres an error
            _this.edited = false;
            _this.saved = true;
            if (!_this.inModal) {
                _this.object.$$save().then(function (response) {
                    if (_this.hasSaveCallback) {
                        _this.saveCallback(response);
                    }
                }, function (reason) {
                    _this.edited = true;
                    _this.saved = false;
                });
            }
            else if (_this.hasModalCallback) {
                _this.modalCallback();
            }
        };
    }
    return SWPropertyDisplayController;
}());
exports.SWPropertyDisplayController = SWPropertyDisplayController;
var SWPropertyDisplay = /** @class */ (function () {
    //@ngInject
    function SWPropertyDisplay($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.swpropertyPartialPath = swpropertyPartialPath;
        this.require = { swForm: "?^swForm", form: "?^form" };
        this.restrict = 'AE';
        this.scope = {};
        this.bindToController = {
            //swfproperty scope
            name: "@?",
            errorName: "@?",
            class: "@?",
            edit: "@?",
            valueObject: "=?",
            valueObjectProperty: "=?",
            propertyIdentifier: "@?",
            valueOptions: "=?",
            fieldAttributes: "@?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            errorText: "@?",
            errorClass: "@?",
            formTemplate: "@?",
            eventAnnouncers: "@",
            hideErrors: '=?',
            value: "@?",
            //swpropertyscope
            property: "@?",
            object: "=?",
            editable: "=?",
            editing: "=?",
            isHidden: "=?",
            title: "=?",
            hint: "@?",
            options: "=?",
            optionsArguments: "=?",
            eagerLoadOptions: "=?",
            isDirty: "=?",
            onChangeCallback: "&?onChange",
            onChangeEvent: "@?",
            saveCallback: "&?",
            fieldType: "@?",
            rawFileTarget: "@?",
            binaryFileTarget: "@?",
            noValidate: "=?",
            inListingDisplay: "=?",
            inModal: "=?",
            modalCallback: "&?",
            hasModalCallback: "=?",
            rowSaveEnabled: "=?",
            revertToValue: "=?",
            revertText: "@?",
            showRevert: "=?",
            showSave: "=?",
            placeholderText: "@",
            placeholderRbKey: "@",
            inputAttributes: "@?",
            optionValues: "=?",
            eventListeners: "=?",
            context: "@?"
        };
        this.controller = SWPropertyDisplayController;
        this.controllerAs = "swPropertyDisplay";
        this.templateUrlPath = "propertydisplay.html";
        this.link = function ($scope, element, attrs, formController) {
            $scope.frmController = formController;
            $scope.swfPropertyDisplay = $scope.swPropertyDisplay;
            if (angular.isDefined(attrs.onChange)) {
                $scope.swPropertyDisplay.hasOnChangeCallback = true;
            }
            else {
                $scope.swPropertyDisplay.hasOnChangeCallback = false;
            }
            if (angular.isDefined(attrs.saveCallback)) {
                $scope.swPropertyDisplay.hasSaveCallback = true;
            }
            else {
                $scope.swPropertyDisplay.hasSaveCallback = false;
            }
            if (angular.isDefined($scope.swPropertyDisplay.inListingDisplay) && $scope.swPropertyDisplay.inListingDisplay) {
                var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
                if (angular.isDefined(currentScope["pageRecord"])) {
                    $scope.swPropertyDisplay.pageRecord = currentScope["pageRecord"];
                }
                var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
                if (angular.isDefined(currentScope["pageRecordKey"])) {
                    $scope.swPropertyDisplay.pageRecordIndex = currentScope["pageRecordKey"];
                }
                var currentScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
                if (angular.isDefined(currentScope["swListingDisplay"])) {
                    $scope.swPropertyDisplay.listingID = currentScope["swListingDisplay"].tableID;
                }
            }
            if (angular.isDefined($scope.swPropertyDisplay.inModal) && $scope.swPropertyDisplay.inModal) {
                var modalScope = _this.scopeService.getRootParentScope($scope, "swModalLauncher");
                $scope.swPropertyDisplay.modalName = modalScope.swModalLauncher.modalName;
                if (angular.isFunction(modalScope.swModalLauncher.launchModal)) {
                    $scope.swPropertyDisplay.modalCallback = modalScope.swModalLauncher.launchModal;
                    $scope.swPropertyDisplay.hasModalCallback = true;
                }
            }
        };
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + swpropertyPartialPath;
    }
    SWPropertyDisplay.Factory = function (swpropertyClass, swpropertyPartialPath) {
        var directive = function ($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder) { return new swpropertyClass($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, 
        //not an inejctable don't add to $inject. This is in the form.module Factory implementation
        swpropertyPartialPath); };
        directive.$inject = ['$compile', 'scopeService', 'coreFormPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWPropertyDisplay.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
    return SWPropertyDisplay;
}());
exports.SWPropertyDisplay = SWPropertyDisplay;


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//services
var workflowconditionservice_1 = __webpack_require__(927);
var scheduleservice_1 = __webpack_require__(926);
//directives
var swadmincreatesuperuser_1 = __webpack_require__(914);
var swworkflowbasic_1 = __webpack_require__(916);
var swworkflowcondition_1 = __webpack_require__(917);
var swworkflowconditiongroupitem_1 = __webpack_require__(918);
var swworkflowconditiongroups_1 = __webpack_require__(919);
var swworkflowtask_1 = __webpack_require__(920);
var swworkflowtaskactions_1 = __webpack_require__(921);
var swworkflowtasks_1 = __webpack_require__(922);
var swworkflowtrigger_1 = __webpack_require__(923);
var swworkflowtriggers_1 = __webpack_require__(925);
var swworkflowtriggerhistory_1 = __webpack_require__(924);
var swschedulepreview_1 = __webpack_require__(915);
//filters
var workflowmodule = angular.module('hibachi.workflow', ['hibachi.collection']).config(function () {
})
    //constants
    .constant('workflowPartialsPath', 'workflow/components/')
    //services
    .service('workflowConditionService', workflowconditionservice_1.WorkflowConditionService)
    .service('scheduleService', scheduleservice_1.ScheduleService)
    //directives
    .directive('swAdminCreateSuperUser', swadmincreatesuperuser_1.SWAdminCreateSuperUser.Factory())
    .directive('swWorkflowBasic', swworkflowbasic_1.SWWorkflowBasic.Factory())
    .directive('swWorkflowCondition', swworkflowcondition_1.SWWorkflowCondition.Factory())
    .directive('swWorkflowConditionGroupItem', swworkflowconditiongroupitem_1.SWWorkflowConditionGroupItem.Factory())
    .directive('swWorkflowConditionGroups', swworkflowconditiongroups_1.SWWorkflowConditionGroups.Factory())
    .directive('swWorkflowTask', swworkflowtask_1.SWWorkflowTask.Factory())
    .directive('swWorkflowTaskActions', swworkflowtaskactions_1.SWWorkflowTaskActions.Factory())
    .directive('swWorkflowTasks', swworkflowtasks_1.SWWorkflowTasks.Factory())
    .directive('swWorkflowTrigger', swworkflowtrigger_1.SWWorkflowTrigger.Factory())
    .directive('swWorkflowTriggers', swworkflowtriggers_1.SWWorkflowTriggers.Factory())
    .directive('swWorkflowTriggerHistory', swworkflowtriggerhistory_1.SWWorkflowTriggerHistory.Factory())
    .directive('swSchedulePreview', swschedulepreview_1.SWSchedulePreview.Factory());
exports.workflowmodule = workflowmodule;


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/// <reference path='../typings/slatwallTypescript.d.ts' />
/// <reference path='../typings/tsd.d.ts' />
/*jshint browser:true */
var basebootstrap_1 = __webpack_require__(726);
var slatwalladmin_module_1 = __webpack_require__(722);
//custom bootstrapper
var bootstrapper = /** @class */ (function (_super) {
    __extends(bootstrapper, _super);
    function bootstrapper() {
        var _this = this;
        var angular = _this = _super.call(this, slatwalladmin_module_1.slatwalladminmodule.name) || this;
        angular.bootstrap();
        return _this;
    }
    return bootstrapper;
}(basebootstrap_1.BaseBootStrapper));
module.exports = new bootstrapper();


/***/ }),
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */
/***/ (function(module, exports) {

(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();


/***/ }),
/* 360 */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */,
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */,
/* 569 */,
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */,
/* 578 */,
/* 579 */,
/* 580 */,
/* 581 */,
/* 582 */,
/* 583 */,
/* 584 */,
/* 585 */,
/* 586 */,
/* 587 */,
/* 588 */,
/* 589 */,
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */,
/* 594 */,
/* 595 */,
/* 596 */,
/* 597 */,
/* 598 */,
/* 599 */,
/* 600 */,
/* 601 */,
/* 602 */,
/* 603 */,
/* 604 */,
/* 605 */,
/* 606 */,
/* 607 */,
/* 608 */,
/* 609 */,
/* 610 */,
/* 611 */,
/* 612 */,
/* 613 */,
/* 614 */,
/* 615 */,
/* 616 */,
/* 617 */,
/* 618 */,
/* 619 */,
/* 620 */,
/* 621 */,
/* 622 */,
/* 623 */,
/* 624 */,
/* 625 */,
/* 626 */,
/* 627 */,
/* 628 */,
/* 629 */,
/* 630 */,
/* 631 */,
/* 632 */,
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */,
/* 645 */,
/* 646 */,
/* 647 */,
/* 648 */,
/* 649 */,
/* 650 */,
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */,
/* 655 */,
/* 656 */,
/* 657 */,
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWAssignedProductsController = /** @class */ (function () {
    //@ngInject
    function SWAssignedProductsController(collectionConfigService, utilityService) {
        this.collectionConfigService = collectionConfigService;
        this.utilityService = utilityService;
        this.collectionConfig = collectionConfigService.newCollectionConfig("Product");
        this.collectionConfig.addDisplayProperty("productID,productName,productCode,productDescription,activeFlag,publishedFlag,productType.productTypeNamePath,productType.productTypeName,defaultSku.price");
        this.alreadySelectedProductsCollectionConfig = collectionConfigService.newCollectionConfig("ProductListingPage");
        this.alreadySelectedProductsCollectionConfig.addDisplayProperty("productListingPageID,sortOrder,product.productID,product.productName,product.productCode,product.productDescription,product.activeFlag,product.publishedFlag");
        this.alreadySelectedProductsCollectionConfig.addFilter("content.contentID", this.contentId, "=");
        this.typeaheadDataKey = utilityService.createID(32);
    }
    return SWAssignedProductsController;
}());
exports.SWAssignedProductsController = SWAssignedProductsController;
var SWAssignedProducts = /** @class */ (function () {
    //@ngInject
    function SWAssignedProducts($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder) {
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.contentPartialsPath = contentPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            contentId: "@?",
            edit: "=?",
            productSortProperty: "@?",
            productSortDefaultDirection: "@?"
        };
        this.controller = SWAssignedProductsController;
        this.controllerAs = "swAssignedProducts";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "/assignedproducts.html";
    }
    SWAssignedProducts.Factory = function () {
        var directive = function ($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder) { return new SWAssignedProducts($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'paginationService',
            'contentPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWAssignedProducts;
}());
exports.SWAssignedProducts = SWAssignedProducts;


/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWContentBasic = /** @class */ (function () {
    function SWContentBasic($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'EA',
            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "contentbasic.html",
            link: function (scope, element, attrs) {
                if (!scope.content.$$isPersisted()) {
                    if (angular.isDefined($routeParams.siteID)) {
                        var sitePromise;
                        var options = {
                            id: $routeParams.siteID
                        };
                        sitePromise = $hibachi.getSite(options);
                        sitePromise.promise.then(function () {
                            var site = sitePromise.value;
                            scope.content.$$setSite(site);
                        });
                    }
                    else {
                        var site = $hibachi.newSite();
                        scope.content.$$setSite(site);
                    }
                    var parentContent;
                    if (angular.isDefined($routeParams.parentContentID)) {
                        var parentContentPromise;
                        var options = {
                            id: $routeParams.parentContentID
                        };
                        parentContentPromise = $hibachi.getContent(options);
                        parentContentPromise.promise.then(function () {
                            var parentContent = parentContentPromise.value;
                            scope.content.$$setParentContent(parentContent);
                            $log.debug('contenttest');
                            $log.debug(scope.content);
                        });
                    }
                    else {
                        var parentContent = $hibachi.newContent();
                        scope.content.$$setParentContent(parentContent);
                    }
                    var contentTemplateType = $hibachi.newType();
                    scope.content.$$setContentTemplateType(contentTemplateType);
                }
                else {
                    scope.content.$$getSite();
                    scope.content.$$getParentContent();
                    scope.content.$$getContentTemplateType();
                }
            }
        };
    }
    SWContentBasic.Factory = function () {
        var directive = function ($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) { return new SWContentBasic($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$routeParams',
            '$hibachi',
            'formService',
            'contentPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWContentBasic;
}());
exports.SWContentBasic = SWContentBasic;


/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWContentEditor = /** @class */ (function () {
    function SWContentEditor($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'EA',
            scope: {
                content: "="
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "contenteditor.html",
            link: function (scope, element, attrs) {
                scope.editorOptions = CKEDITOR.editorConfig;
                scope.onContentChange = function () {
                    var form = formService.getForm('contentEditor');
                    form.contentBody.$setDirty();
                };
                //                scope.saveContent = function(){
                //                   var urlString = _config.baseURL+'/index.cfm/?slatAction=api:main.post';
                //                   var params = {
                //                        entityID:scope.content.contentID,
                //                        templateHTML:scope.content.templateHTML,
                //                        context:'saveTemplateHTML',
                //                        entityName:'content'
                //                   }
                //                   $http.post(urlString,
                //                        {
                //                            params:params
                //                        }
                //                    )
                //                    .success(function(data){
                //                    }).error(function(reason){
                //                    });
                //                }
            }
        };
    }
    SWContentEditor.Factory = function () {
        var directive = function ($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) { return new SWContentEditor($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$location',
            '$http',
            '$hibachi',
            'formService',
            'contentPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWContentEditor;
}());
exports.SWContentEditor = SWContentEditor;


/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWContentListController = /** @class */ (function () {
    //@ngInject
    function SWContentListController($scope, $log, $timeout, $hibachi, paginationService, observerService, collectionConfigService, localStorageService) {
        var _this = this;
        this.$scope = $scope;
        this.$log = $log;
        this.$timeout = $timeout;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.observerService = observerService;
        this.collectionConfigService = collectionConfigService;
        this.localStorageService = localStorageService;
        this.openRoot = true;
        this.$log.debug('slatwallcontentList init');
        var pageShow = 50;
        if (this.pageShow !== 'Auto') {
            pageShow = this.pageShow;
        }
        this.pageShowOptions = [
            { display: 10, value: 10 },
            { display: 20, value: 20 },
            { display: 50, value: 50 },
            { display: 250, value: 250 }
        ];
        this.loadingCollection = false;
        if (this.localStorageService.hasItem('selectedSiteOption')) {
            this.selectedSite = this.localStorageService.getItem('selectedSiteOption');
        }
        this.orderBy;
        var orderByConfig;
        this.getCollection = function (isSearching) {
            _this.collectionConfig = collectionConfigService.newCollectionConfig('Content');
            var columnsConfig = [
                //{"propertyIdentifier":"_content_childContents","title":"","isVisible":true,"isDeletable":true,"isSearchable":true,"isExportable":true,"ormtype":"string","aggregate":{"aggregateFunction":"COUNT","aggregateAlias":"childContentsCount"}},
                {
                    propertyIdentifier: '_content.contentID',
                    isVisible: false,
                    ormtype: 'id',
                    isSearchable: true
                },
                {
                    propertyIdentifier: '_content.urlTitlePath',
                    isVisible: false,
                    isSearchable: true
                },
                //need to get template via settings
                {
                    propertyIdentifier: '_content.allowPurchaseFlag',
                    isVisible: true,
                    ormtype: 'boolean',
                    isSearchable: false
                },
                {
                    propertyIdentifier: '_content.productListingPageFlag',
                    isVisible: true,
                    ormtype: 'boolean',
                    isSearchable: false
                },
                {
                    propertyIdentifier: '_content.activeFlag',
                    isVisible: true,
                    ormtype: 'boolean',
                    isSearchable: false
                }
            ];
            var options = {
                currentPage: '1',
                pageShow: '1',
                keywords: _this.keywords
            };
            var column = {};
            if (!isSearching || _this.keywords === '') {
                _this.isSearching = false;
                var filterGroupsConfig = [
                    {
                        "filterGroup": [
                            {
                                "propertyIdentifier": "parentContent",
                                "comparisonOperator": "is",
                                "value": 'null'
                            }
                        ]
                    }
                ];
                column = {
                    propertyIdentifier: '_content.title',
                    isVisible: true,
                    ormtype: 'string',
                    isSearchable: true,
                    tdclass: 'primary'
                };
                columnsConfig.unshift(column);
            }
            else {
                _this.collectionConfig.setKeywords(_this.keywords);
                _this.isSearching = true;
                var filterGroupsConfig = [
                    {
                        "filterGroup": [
                            {
                                "propertyIdentifier": "excludeFromSearch",
                                "comparisonOperator": "!=",
                                "value": true
                            }
                        ]
                    }
                ];
                column = {
                    propertyIdentifier: '_content.title',
                    isVisible: false,
                    ormtype: 'string',
                    isSearchable: true
                };
                columnsConfig.unshift(column);
                var titlePathColumn = {
                    propertyIdentifier: '_content.titlePath',
                    isVisible: true,
                    ormtype: 'string',
                    isSearchable: false
                };
                columnsConfig.unshift(titlePathColumn);
            }
            //if we have a selected Site add the filter
            if (_this.selectedSite && _this.selectedSite.siteID) {
                var selectedSiteFilter = {
                    logicalOperator: "AND",
                    propertyIdentifier: "site.siteID",
                    comparisonOperator: "=",
                    value: _this.selectedSite.siteID
                };
                filterGroupsConfig[0].filterGroup.push(selectedSiteFilter);
            }
            if (angular.isDefined(_this.orderBy)) {
                var orderByConfig = [];
                orderByConfig.push(_this.orderBy);
                options.orderByConfig = angular.toJson(orderByConfig);
            }
            angular.forEach(columnsConfig, function (column) {
                _this.collectionConfig.addColumn(column.propertyIdentifier, column.title, column);
            });
            _this.collectionConfig.addDisplayAggregate('childContents', 'COUNT', 'childContentsCount', { isVisible: false, isSearchable: false, title: 'test' });
            _this.collectionConfig.addDisplayProperty('site.siteID', undefined, {
                isVisible: false,
                ormtype: 'id',
                isSearchable: false
            });
            _this.collectionConfig.addDisplayProperty('site.domainNames', undefined, {
                isVisible: false,
                isSearchable: true
            });
            angular.forEach(filterGroupsConfig[0].filterGroup, function (filter) {
                _this.collectionConfig.addFilter(filter.propertyIdentifier, filter.value, filter.comparisonOperator, filter.logicalOperator);
            });
            _this.collectionListingPromise = _this.collectionConfig.getEntity();
            _this.collectionListingPromise.then(function (value) {
                _this.$timeout(function () {
                    _this.collection = value;
                    _this.collection.collectionConfig = _this.collectionConfig;
                    _this.firstLoad = true;
                    _this.loadingCollection = false;
                });
            });
            return _this.collectionListingPromise;
        };
        //this.getCollection(false);
        this.loadingCollection = false;
        this.searchCollection = function () {
            $log.debug('search with keywords');
            $log.debug(_this.keywords);
            $('.childNode').remove();
            //Set current page here so that the pagination does not break when getting collection
            _this.loadingCollection = true;
            var promise = _this.getCollection(true);
            promise.then(function () {
                _this.collection.collectionConfig = _this.collectionConfig;
                _this.loadingCollection = false;
            });
        };
        var siteChanged = function (selectedSiteOption) {
            _this.localStorageService.setItem('selectedSiteOption', selectedSiteOption);
            _this.selectedSite = _this.localStorageService.getItem('selectedSiteOption');
            _this.openRoot = true;
            _this.getCollection();
        };
        this.observerService.attach(siteChanged, 'optionsChanged', 'siteOptions');
        var sortChanged = function (orderBy) {
            _this.orderBy = orderBy;
            _this.getCollection();
        };
        this.observerService.attach(sortChanged, 'sortByColumn', 'siteSorting');
        var optionsLoaded = function () {
            var option;
            if (_this.selectedSite) {
                option = _this.selectedSite;
            }
            _this.observerService.notify('selectOption', option);
        };
        this.observerService.attach(optionsLoaded, 'optionsLoaded', 'siteOptionsLoaded');
    }
    return SWContentListController;
}());
var SWContentList = /** @class */ (function () {
    //@ngInject
    function SWContentList(contentPartialsPath, observerService, slatwallPathBuilder) {
        this.restrict = 'E';
        //public bindToController=true;
        this.controller = SWContentListController;
        this.controllerAs = "swContentList";
        this.link = function (scope, element, attrs, controller, transclude) {
            scope.$on('$destroy', function handler() {
                this.observerService.detachByEvent('optionsChanged');
                this.observerService.detachByEvent('sortByColumn');
            });
        };
        this.observerService = observerService;
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + 'contentlist.html';
    }
    SWContentList.Factory = function () {
        var directive = function (contentPartialsPath, observerService, slatwallPathBuilder) { return new SWContentList(contentPartialsPath, observerService, slatwallPathBuilder); };
        directive.$inject = [
            'contentPartialsPath',
            'observerService',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWContentList;
}());
exports.SWContentList = SWContentList;


/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWContentNode = /** @class */ (function () {
    function SWContentNode($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'A',
            scope: {
                contentData: '=',
                loadChildren: "="
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + 'contentnode.html',
            link: function (scope, element, attr) {
                if (angular.isUndefined(scope.depth)) {
                    scope.depth = 0;
                }
                if (angular.isDefined(scope.$parent.depth)) {
                    scope.depth = scope.$parent.depth + 1;
                }
                var childContentColumnsConfig = [{
                        propertyIdentifier: '_content.contentID',
                        isVisible: false,
                        isSearchable: false
                    },
                    {
                        propertyIdentifier: '_content.title',
                        isVisible: true,
                        isSearchable: true
                    },
                    {
                        propertyIdentifier: '_content.urlTitlePath',
                        isVisible: true,
                        isSearchable: true
                    },
                    {
                        propertyIdentifier: '_content.site.siteID',
                        isVisible: false,
                        isSearchable: false
                    },
                    {
                        propertyIdentifier: '_content.site.siteName',
                        isVisible: true,
                        isSearchable: true
                    },
                    {
                        propertyIdentifier: '_content.site.domainNames',
                        isVisible: true,
                        isSearchable: true
                    },
                    //                            {
                    //                                propertyIdentifier: '_content.contentTemplateFile',
                    //                                persistent: false,
                    //                                setting: true,
                    //                                isVisible: true
                    //                            },
                    //need to get template via settings
                    {
                        propertyIdentifier: '_content.allowPurchaseFlag',
                        isVisible: true,
                        isSearchable: true
                    }, {
                        propertyIdentifier: '_content.productListingPageFlag',
                        isVisible: true,
                        isSearchable: true
                    }, {
                        propertyIdentifier: '_content.activeFlag',
                        isVisible: true,
                        isSearchable: true
                    }
                ];
                var childContentOrderBy = [
                    {
                        "propertyIdentifier": "_content.sortOrder",
                        "direction": "DESC"
                    }
                ];
                scope.toggleChildContent = function (parentContentRecord) {
                    if (angular.isUndefined(scope.childOpen) || scope.childOpen === false) {
                        scope.childOpen = true;
                        if (!scope.childrenLoaded) {
                            scope.getChildContent(parentContentRecord);
                        }
                    }
                    else {
                        scope.childOpen = false;
                    }
                };
                scope.getChildContent = function (parentContentRecord) {
                    var childContentfilterGroupsConfig = [{
                            "filterGroup": [{
                                    "propertyIdentifier": "_content.parentContent.contentID",
                                    "comparisonOperator": "=",
                                    "value": parentContentRecord.contentID
                                }]
                        }];
                    var collectionListingPromise = $hibachi.getEntity('Content', {
                        columnsConfig: angular.toJson(childContentColumnsConfig),
                        filterGroupsConfig: angular.toJson(childContentfilterGroupsConfig),
                        orderByConfig: angular.toJson(childContentOrderBy),
                        allRecords: true
                    });
                    collectionListingPromise.then(function (value) {
                        parentContentRecord.children = value.records;
                        var index = 0;
                        angular.forEach(parentContentRecord.children, function (child) {
                            child.site_domainNames = child.site_domainNames.split(",")[0];
                            scope['child' + index] = child;
                            element.after($compile('<tr class="childNode" style="margin-left:{{depth*15||0}}px" ng-if="childOpen"  sw-content-node data-content-data="child' + index + '"></tr>')(scope));
                            index++;
                        });
                        scope.childrenLoaded = true;
                    });
                };
                scope.childrenLoaded = false;
                //if the children have never been loaded and we are not in search mode based on the title received
                if (angular.isDefined(scope.loadChildren) && scope.loadChildren === true && !(scope.contentData.titlePath && scope.contentData.titlePath.trim().length)) {
                    scope.toggleChildContent(scope.contentData);
                }
            }
        };
    }
    SWContentNode.Factory = function () {
        var directive = function ($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder) { return new SWContentNode($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$compile',
            '$hibachi',
            'contentPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWContentNode;
}());
exports.SWContentNode = SWContentNode;


/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSiteSelectorController = /** @class */ (function () {
    //@ngInject
    function SWSiteSelectorController(collectionConfigService, listingService, localStorageService, typeaheadService, utilityService) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.localStorageService = localStorageService;
        this.typeaheadService = typeaheadService;
        this.utilityService = utilityService;
        this.selectSite = function () {
            _this.collectionConfigToFilter.removeFilterByDisplayPropertyIdentifier(_this.simpleFilterPropertyIdentifier);
            console.log("selectSite", _this.selectedSite);
            switch (_this.selectedSite) {
                case "all":
                    //do nothing
                    console.log("donothing");
                    break;
                case "default":
                    _this.updateDefaultSiteID();
                    if (_this.defaultEstablished) {
                        console.log("adding filter", _this.defaultSiteID);
                        _this.collectionConfigToFilter.addFilter(_this.filterPropertyIdentifier, _this.defaultSiteID, "=");
                    }
                    break;
                case undefined:
                    //do nothing
                    break;
                default:
                    _this.localStorageService.setItem("defaultSiteID", _this.selectedSite);
                    _this.collectionConfigToFilter.addFilter(_this.filterPropertyIdentifier, _this.selectedSite, "=");
                    break;
            }
            if (_this.withTypeahead && _this.typeaheadDataKey != null) {
                _this.typeaheadService.getData(_this.typeaheadDataKey);
            }
            if (_this.inListingDisplay && _this.listingID != null) {
                _this.listingService.getCollection(_this.listingID);
            }
        };
        this.updateDefaultSiteID = function () {
            console.log("updating default established");
            if (_this.localStorageService.hasItem("defaultSiteID")) {
                _this.defaultEstablished = true;
                _this.defaultSiteID = _this.localStorageService.getItem("defaultSiteID");
            }
            else {
                console.log("default established false");
                _this.defaultEstablished = false;
            }
        };
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
        if (angular.isUndefined(this.simpleFilterPropertyIdentifier)) {
            this.simpleFilterPropertyIdentifier = "siteID";
        }
        this.sitesCollectionConfig = collectionConfigService.newCollectionConfig("Site");
        this.sitesCollectionConfig.addDisplayProperty("siteID, siteName, siteCode");
        this.sitesCollectionConfig.setAllRecords(true);
        this.sitesCollectionConfig.getEntity().then(function (data) {
            _this.sites = data.records;
            if (_this.sites[0]) {
                _this.selectedSite = _this.sites[0].siteID;
            }
        }, function (reason) {
            throw ("SWProductListingPages had trouble fetching sites because of " + reason);
        }).finally(function () {
            _this.selectSite();
        });
    }
    return SWSiteSelectorController;
}());
exports.SWSiteSelectorController = SWSiteSelectorController;
var SWSiteSelector = /** @class */ (function () {
    //@ngInject
    function SWSiteSelector($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.listingService = listingService;
        this.scopeService = scopeService;
        this.contentPartialsPath = contentPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            inListingDisplay: "=?",
            filterPropertyIdentifier: "@?",
            collectionConfigToFilter: "=?",
            withTypeahead: "=?",
            typeaheadDataKey: "@?",
            disabled: "=?"
        };
        this.controller = SWSiteSelectorController;
        this.controllerAs = "swSiteSelector";
        this.link = function ($scope, element, attrs) {
            if ($scope.swSiteSelector.withTypeahead == null) {
                $scope.swSiteSelector.withTypeahead = false;
            }
            if ($scope.swSiteSelector.inListingDisplay == null) {
                $scope.swSiteSelector.inListingDisplay = !$scope.swSiteSelector.withTypeahead;
            }
            if ($scope.swSiteSelector.inListingDisplay == true && _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
                var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
                $scope.swSiteSelector.listingID = listingDisplayScope.tableID;
                if (listingDisplayScope.collectionConfig != null) {
                    $scope.swSiteSelector.collectionConfigToFilter = listingDisplayScope.collectionConfig;
                }
                _this.listingService.attachToListingInitiated($scope.swSiteSelector.listingID, $scope.swSiteSelector.selectSite);
            }
            else {
                $scope.swSiteSelector.selectSite();
            }
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "/siteselector.html";
    }
    SWSiteSelector.Factory = function () {
        var directive = function ($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder) { return new SWSiteSelector($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'listingService',
            'scopeService',
            'contentPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSiteSelector;
}());
exports.SWSiteSelector = SWSiteSelector;


/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(11);
//services
//filters
//directives
var swcontentbasic_1 = __webpack_require__(659);
var swcontenteditor_1 = __webpack_require__(660);
var swcontentlist_1 = __webpack_require__(661);
var swcontentnode_1 = __webpack_require__(662);
var swassignedproducts_1 = __webpack_require__(658);
var swsiteselector_1 = __webpack_require__(663);
var contentmodule = angular.module('hibachi.content', [core_module_1.coremodule.name]).config(function () {
})
    .constant('contentPartialsPath', 'content/components/')
    //services
    //filters
    //directives
    .directive('swContentBasic', swcontentbasic_1.SWContentBasic.Factory())
    .directive('swContentEditor', swcontenteditor_1.SWContentEditor.Factory())
    .directive('swContentList', swcontentlist_1.SWContentList.Factory())
    .directive('swContentNode', swcontentnode_1.SWContentNode.Factory())
    .directive('swAssignedProducts', swassignedproducts_1.SWAssignedProducts.Factory())
    .directive('swSiteSelector', swsiteselector_1.SWSiteSelector.Factory());
exports.contentmodule = contentmodule;


/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormResponseListingController = /** @class */ (function () {
    //@ngInject
    function SWFormResponseListingController($filter, $http, $hibachi, paginationService, requestService) {
        var _this = this;
        this.$filter = $filter;
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.requestService = requestService;
        this.init = function () {
            if (angular.isUndefined(_this.formId)) {
                throw ("Form ID is required for swFormResponseListing");
            }
            _this.paginator = _this.paginationService.createPagination();
            _this.paginator.getCollection = _this.updateFormResponses;
            _this.updateFormResponses();
        };
        this.export = function () {
            var exportFormResponseRequest = _this.requestService.newAdminRequest(_this.$hibachi.getUrlWithActionPrefix() + 'api:main.exportformresponses&formID=' + _this.formId, {}, 'GET');
            exportFormResponseRequest.promise.then(function (response) {
                var anchor = angular.element('<a/>');
                anchor.attr({
                    href: 'data:attachment/csv;charset=utf-8,' + encodeURI(response),
                    target: '_blank',
                    download: 'formresponses' + _this.formId + '.csv'
                })[0].click();
            });
        };
        this.updateFormResponses = function () {
            var formResponsesRequestUrl = _this.$hibachi.getUrlWithActionPrefix() + "api:main.getformresponses&formID=" + _this.formId;
            var params = {};
            params.currentPage = _this.paginator.currentPage || 1;
            params.pageShow = _this.paginator.pageShow || 10;
            var formResponsesPromise = _this.$http({
                method: 'GET',
                url: formResponsesRequestUrl,
                params: params
            });
            formResponsesPromise.then(function (response) {
                _this.columns = response.data.columnRecords;
                _this.pageRecords = response.data.pageRecords;
                _this.paginator.recordsCount = response.data.recordsCount;
                _this.paginator.totalPages = response.data.totalPages;
                _this.paginator.pageStart = response.data.pageRecordsStart;
                _this.paginator.pageEnd = response.data.pageRecordsEnd;
                for (var i = 0; i < _this.pageRecords.length; i++) {
                    if (angular.isDefined(_this.pageRecords[i].createdDateTime)) {
                        _this.pageRecords[i].createdDateTime = _this.dateFilter(_this.pageRecords[i].createdDateTime, "MMM dd, yyyy - hh:mm a");
                    }
                }
            }, function (response) {
                throw ("There was a problem collecting the form responses");
            });
        };
        this.dateFilter = $filter("dateFilter");
        this.init();
    }
    return SWFormResponseListingController;
}());
exports.SWFormResponseListingController = SWFormResponseListingController;
var SWFormResponseListing = /** @class */ (function () {
    //@ngInject
    function SWFormResponseListing($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder) {
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.formBuilderPartialsPath = formBuilderPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            "formId": "@"
        };
        this.controller = SWFormResponseListingController;
        this.controllerAs = "swFormResponseListing";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(formBuilderPartialsPath) + "/formresponselisting.html";
    }
    SWFormResponseListing.Factory = function () {
        var directive = function ($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder) { return new SWFormResponseListing($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'paginationService',
            'formBuilderPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWFormResponseListing;
}());
exports.SWFormResponseListing = SWFormResponseListing;


/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(11);
//controllers
//directives
var swformresponselisting_1 = __webpack_require__(665);
//models
var formbuildermodule = angular.module('formbuilder', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('formBuilderPartialsPath', 'formbuilder/components/')
    //controllers
    //directives
    .directive('swFormResponseListing', swformresponselisting_1.SWFormResponseListing.Factory());
exports.formbuildermodule = formbuildermodule;


/***/ }),
/* 667 */,
/* 668 */,
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var giftrecipient_1 = __webpack_require__(679);
var SWAddOrderItemRecipientController = /** @class */ (function () {
    //@ngInject
    function SWAddOrderItemRecipientController($hibachi, collectionConfigService, entityService, observerService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.collectionConfigService = collectionConfigService;
        this.entityService = entityService;
        this.observerService = observerService;
        this.unassignedCountArray = [];
        this.addGiftRecipientFromAccountList = function (account) {
            var giftRecipient = new giftrecipient_1.GiftRecipient();
            giftRecipient.firstName = account.firstName;
            giftRecipient.lastName = account.lastName;
            giftRecipient.emailAddress = account.primaryEmailAddress_emailAddress;
            giftRecipient.account = true;
            _this.orderItemGiftRecipients.push(giftRecipient);
            _this.searchText = "";
        };
        this.getUnassignedCountArray = function () {
            if (_this.getUnassignedCount() < _this.unassignedCountArray.length) {
                _this.unassignedCountArray.splice(_this.getUnassignedCount(), _this.unassignedCountArray.length);
            }
            if (_this.getUnassignedCount() > _this.unassignedCountArray.length) {
                for (var i = _this.unassignedCountArray.length + 1; i <= _this.getUnassignedCount(); i++) {
                    _this.unassignedCountArray.push({ name: i, value: i });
                }
            }
            return _this.unassignedCountArray;
        };
        this.getAssignedCount = function () {
            _this.assignedCount = 0;
            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
                _this.assignedCount += orderItemGiftRecipient.quantity;
            });
            return _this.assignedCount;
        };
        this.getUnassignedCount = function () {
            _this.unassignedCount = _this.quantity;
            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
                _this.unassignedCount -= orderItemGiftRecipient.quantity;
            });
            return _this.unassignedCount;
        };
        this.addGiftRecipient = function () {
            if (_this.currentGiftRecipient.forms.createRecipient.$valid) {
                _this.observerService.notify('updateBindings').then(function () {
                    _this.showInvalidAddFormMessage = true;
                    _this.adding = false;
                    var giftRecipient = new giftrecipient_1.GiftRecipient();
                    angular.extend(giftRecipient, _this.currentGiftRecipient.data);
                    _this.orderItemGiftRecipients.push(giftRecipient);
                    _this.searchText = "";
                    _this.currentGiftRecipient = _this.entityService.newEntity("OrderItemGiftRecipient");
                });
            }
            else {
                _this.showInvalidAddFormMessage = true;
            }
        };
        this.cancelAddRecipient = function () {
            _this.adding = false;
            _this.currentGiftRecipient.reset();
            _this.searchText = "";
            _this.showInvalidAddFormMessage = false;
        };
        this.startFormWithName = function (searchString) {
            if (searchString === void 0) { searchString = _this.searchText; }
            _this.adding = !_this.adding;
            if (_this.adding) {
                _this.currentGiftRecipient.forms.createRecipient.$setUntouched();
                _this.currentGiftRecipient.forms.createRecipient.$setPristine();
                if (searchString != "") {
                    _this.currentGiftRecipient.firstName = searchString;
                    _this.searchText = "";
                }
            }
        };
        this.getTotalQuantity = function () {
            var totalQuantity = 0;
            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
                totalQuantity += orderItemGiftRecipient.quantity;
            });
            return totalQuantity;
        };
        this.getMessageCharactersLeft = function () {
            if (_this.currentGiftRecipient.giftMessage && _this.currentGiftRecipient.giftMessage != null) {
                return 250 - _this.currentGiftRecipient.giftMessage.length;
            }
            else {
                return 250;
            }
        };
        if (angular.isUndefined(this.adding)) {
            this.adding = false;
        }
        if (angular.isUndefined(this.assignedCount)) {
            this.assignedCount = 0;
        }
        if (angular.isUndefined(this.searchText)) {
            this.searchText = "";
        }
        var count = 1;
        this.currentGiftRecipient = this.entityService.newEntity("OrderItemGiftRecipient");
        if (angular.isUndefined(this.orderItemGiftRecipients)) {
            this.orderItemGiftRecipients = [];
        }
        if (angular.isUndefined(this.showInvalidAddFormMessage)) {
            this.showInvalidAddFormMessage = false;
        }
        this.typeaheadCollectionConfig = collectionConfigService.newCollectionConfig('Account');
        this.typeaheadCollectionConfig.addDisplayProperty("accountID,firstName,lastName,primaryEmailAddress.emailAddress");
        this.typeaheadCollectionConfig.addFilter("primaryEmailAddress", "null", "is not");
    }
    return SWAddOrderItemRecipientController;
}());
exports.SWAddOrderItemRecipientController = SWAddOrderItemRecipientController;
var SWAddOrderItemGiftRecipient = /** @class */ (function () {
    function SWAddOrderItemGiftRecipient($hibachi, giftCardPartialsPath, slatwallPathBuilder) {
        this.$hibachi = $hibachi;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.require = "^form";
        this.restrict = "EA";
        this.transclude = true;
        this.scope = {};
        this.bindToController = {
            "quantity": "=?",
            "orderItemGiftRecipients": "=?",
            "adding": "=?",
            "searchText": "=?",
            "currentgiftRecipient": "=?",
            "showInvalidAddFormMessage": "=?",
            "showInvalidRowMessage": "=?",
            "tableForm": "=?",
            "recipientAddForm": "=?"
        };
        this.controller = SWAddOrderItemRecipientController;
        this.controllerAs = "addGiftRecipientControl";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/addorderitemgiftrecipient.html";
    }
    SWAddOrderItemGiftRecipient.Factory = function () {
        var directive = function ($hibachi, giftCardPartialsPath, slatwallPathBuilder) { return new SWAddOrderItemGiftRecipient($hibachi, giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    SWAddOrderItemGiftRecipient.$inject = ["$hibachi"];
    return SWAddOrderItemGiftRecipient;
}());
exports.SWAddOrderItemGiftRecipient = SWAddOrderItemGiftRecipient;


/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardBalanceController = /** @class */ (function () {
    function SWGiftCardBalanceController(collectionConfigService) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.init = function () {
            _this.initialBalance = 0;
            var totalDebit = 0;
            var totalCredit = 0;
            var transactionConfig = _this.collectionConfigService.newCollectionConfig('GiftCardTransaction');
            transactionConfig.setDisplayProperties("giftCardTransactionID, creditAmount, debitAmount, giftCard.giftCardID");
            transactionConfig.addFilter('giftCard.giftCardID', _this.giftCard.giftCardID);
            transactionConfig.setAllRecords(true);
            transactionConfig.setOrderBy("createdDateTime|DESC");
            var transactionPromise = transactionConfig.getEntity();
            transactionPromise.then(function (response) {
                _this.transactions = response.records;
                var initialCreditIndex = _this.transactions.length - 1;
                _this.initialBalance = _this.transactions[initialCreditIndex].creditAmount;
                angular.forEach(_this.transactions, function (transaction, index) {
                    if (!angular.isString(transaction.debitAmount)) {
                        totalDebit += transaction.debitAmount;
                    }
                    if (!angular.isString(transaction.creditAmount)) {
                        totalCredit += transaction.creditAmount;
                    }
                });
                _this.currentBalance = totalCredit - totalDebit;
                _this.balancePercentage = parseInt(((_this.currentBalance / _this.initialBalance) * 100).toString());
            });
        };
        this.init();
    }
    SWGiftCardBalanceController.$inject = ["collectionConfigService"];
    return SWGiftCardBalanceController;
}());
exports.SWGiftCardBalanceController = SWGiftCardBalanceController;
var SWGiftCardBalance = /** @class */ (function () {
    function SWGiftCardBalance(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
        this.collectionConfigService = collectionConfigService;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCard: "=?",
            transactions: "=?",
            initialBalance: "=?",
            currentBalance: "=?",
            balancePercentage: "=?"
        };
        this.controller = SWGiftCardBalanceController;
        this.controllerAs = "swGiftCardBalance";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/balance.html";
        this.restrict = "EA";
    }
    SWGiftCardBalance.Factory = function () {
        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardBalance(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'collectionConfigService',
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWGiftCardBalance;
}());
exports.SWGiftCardBalance = SWGiftCardBalance;


/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardDetailController = /** @class */ (function () {
    function SWGiftCardDetailController(collectionConfigService) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.init = function () {
            var giftCardConfig = _this.collectionConfigService.newCollectionConfig('GiftCard');
            giftCardConfig.setDisplayProperties("giftCardID, giftCardCode, currencyCode, giftCardPin, expirationDate, ownerFirstName, ownerLastName, ownerEmailAddress, activeFlag, balanceAmount,  originalOrderItem.sku.product.productName, originalOrderItem.sku.product.productID, originalOrderItem.order.orderID, originalOrderItem.orderItemID, orderItemGiftRecipient.firstName, orderItemGiftRecipient.lastName, orderItemGiftRecipient.emailAddress, orderItemGiftRecipient.giftMessage, ownerAccount.accountID, ownerAccount.firstName, ownerAccount.lastName");
            giftCardConfig.addFilter('giftCardID', _this.giftCardId);
            giftCardConfig.setAllRecords(true);
            giftCardConfig.getEntity().then(function (response) {
                _this.giftCard = response.records[0];
            });
        };
        this.init();
    }
    SWGiftCardDetailController.$inject = ["collectionConfigService"];
    return SWGiftCardDetailController;
}());
exports.SWGiftCardDetailController = SWGiftCardDetailController;
var SWGiftCardDetail = /** @class */ (function () {
    function SWGiftCardDetail(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
        this.collectionConfigService = collectionConfigService;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCardId: "@",
            giftCard: "=?"
        };
        this.controller = SWGiftCardDetailController;
        this.controllerAs = "swGiftCardDetail";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/basic.html";
        this.restrict = "E";
    }
    SWGiftCardDetail.Factory = function () {
        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardDetail(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'collectionConfigService',
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWGiftCardDetail;
}());
exports.SWGiftCardDetail = SWGiftCardDetail;


/***/ }),
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardHistoryController = /** @class */ (function () {
    //@ngInject
    function SWGiftCardHistoryController(collectionConfigService, $hibachi) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.$hibachi = $hibachi;
        var initialBalance = 0;
        var totalDebit = 0;
        var transactionConfig = this.collectionConfigService.newCollectionConfig('GiftCardTransaction');
        transactionConfig.setDisplayProperties("giftCardTransactionID, creditAmount, debitAmount, createdDateTime, giftCard.giftCardID, orderPayment.order.orderID, orderPayment.order.orderNumber, orderPayment.order.orderOpenDateTime", "id,credit,debit,created,giftcardID,ordernumber,orderdatetime");
        transactionConfig.addFilter('giftCard.giftCardID', this.giftCard.giftCardID);
        transactionConfig.setAllRecords(true);
        transactionConfig.setOrderBy("createdDateTime|DESC");
        var emailBounceConfig = this.collectionConfigService.newCollectionConfig('EmailBounce');
        emailBounceConfig.setDisplayProperties("emailBounceID, rejectedEmailTo, rejectedEmailSendTime, relatedObject, relatedObjectID");
        emailBounceConfig.addFilter('relatedObjectID', this.giftCard.giftCardID);
        emailBounceConfig.setAllRecords(true);
        emailBounceConfig.setOrderBy("rejectedEmailSendTime|DESC");
        var emailConfig = this.collectionConfigService.newCollectionConfig('Email');
        emailConfig.setDisplayProperties('emailID, emailTo, relatedObject, relatedObjectID, createdDateTime');
        emailConfig.addFilter('relatedObjectID', this.giftCard.giftCardID);
        emailConfig.setAllRecords(true);
        emailConfig.setOrderBy("createdDateTime|DESC");
        emailConfig.getEntity().then(function (response) {
            _this.emails = response.records;
            emailBounceConfig.getEntity().then(function (response) {
                _this.bouncedEmails = response.records;
                transactionConfig.getEntity().then(function (response) {
                    _this.transactions = response.records;
                    var initialCreditIndex = _this.transactions.length - 1;
                    var initialBalance = _this.transactions[initialCreditIndex].creditAmount;
                    var currentBalance = initialBalance;
                    for (var i = initialCreditIndex; i >= 0; i--) {
                        var transaction = _this.transactions[i];
                        if (typeof transaction.debitAmount !== "string") {
                            transaction.debit = true;
                            totalDebit += transaction.debitAmount;
                        }
                        else if (typeof transaction.creditAmount !== "string") {
                            if (i != initialCreditIndex) {
                                currentBalance += transaction.creditAmount;
                            }
                            transaction.debit = false;
                        }
                        transaction.detailOrderLink = $hibachi.buildUrl('admin:entity.detailOrder', 'orderID=' + transaction.orderPayment_order_orderID);
                        var tempCurrentBalance = currentBalance - totalDebit;
                        transaction.balance = tempCurrentBalance;
                        if (i == initialCreditIndex) {
                            var activeCard = {
                                activated: true,
                                debit: false,
                                activeAt: transaction.orderPayment_order_orderOpenDateTime,
                                balance: initialBalance
                            };
                            _this.transactions.splice(i, 0, activeCard);
                            if (angular.isDefined(_this.bouncedEmails)) {
                                angular.forEach(_this.bouncedEmails, function (email, bouncedEmailIndex) {
                                    email.bouncedEmail = true;
                                    email.balance = initialBalance;
                                    _this.transactions.splice(i, 0, email);
                                });
                            }
                            if (angular.isDefined(_this.emails)) {
                                angular.forEach(_this.emails, function (email) {
                                    email.emailSent = true;
                                    email.debit = false;
                                    email.sentAt = email.createdDateTime;
                                    email.balance = initialBalance;
                                    _this.transactions.splice(i, 0, email);
                                });
                            }
                        }
                    }
                });
            });
        });
        var orderConfig = this.collectionConfigService.newCollectionConfig('Order');
        orderConfig.setDisplayProperties("orderID,orderNumber,orderOpenDateTime,account.firstName,account.lastName,account.accountID,account.primaryEmailAddress.emailAddress");
        orderConfig.addFilter('orderID', this.giftCard.originalOrderItem_order_orderID);
        orderConfig.setAllRecords(true);
        orderConfig.getEntity().then(function (response) {
            _this.order = response.records[0];
        });
    }
    return SWGiftCardHistoryController;
}());
exports.SWGiftCardHistoryController = SWGiftCardHistoryController;
var SWGiftCardHistory = /** @class */ (function () {
    //@ngInject
    function SWGiftCardHistory(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
        this.collectionConfigService = collectionConfigService;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCard: "=?",
            transactions: "=?",
            bouncedEmails: "=?",
            order: "=?"
        };
        this.controller = SWGiftCardHistoryController;
        this.controllerAs = "swGiftCardHistory";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/history.html";
        this.restrict = "EA";
    }
    SWGiftCardHistory.Factory = function () {
        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardHistory(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'collectionConfigService',
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWGiftCardHistory;
}());
exports.SWGiftCardHistory = SWGiftCardHistory;


/***/ }),
/* 673 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardOrderInfoController = /** @class */ (function () {
    function SWGiftCardOrderInfoController(collectionConfigService) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.init = function () {
            var orderConfig = _this.collectionConfigService.newCollectionConfig('Order');
            orderConfig.setDisplayProperties("orderID, orderNumber, orderOpenDateTime, account.firstName, account.lastName");
            orderConfig.addFilter('orderID', _this.giftCard.originalOrderItem_order_orderID);
            orderConfig.setAllRecords(true);
            orderConfig.getEntity().then(function (response) {
                _this.order = response.records[0];
            });
        };
        this.init();
    }
    SWGiftCardOrderInfoController.$inject = ["collectionConfigService"];
    return SWGiftCardOrderInfoController;
}());
exports.SWGiftCardOrderInfoController = SWGiftCardOrderInfoController;
var SWGiftCardOrderInfo = /** @class */ (function () {
    function SWGiftCardOrderInfo(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
        this.collectionConfigService = collectionConfigService;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCard: "=?",
            order: "=?"
        };
        this.controller = SWGiftCardOrderInfoController;
        this.controllerAs = "swGiftCardOrderInfo";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/orderinfo.html";
        this.restrict = "EA";
    }
    SWGiftCardOrderInfo.Factory = function () {
        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardOrderInfo(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'collectionConfigService',
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    SWGiftCardOrderInfo.$inject = ["collectionConfigService", "partialsPath"];
    return SWGiftCardOrderInfo;
}());
exports.SWGiftCardOrderInfo = SWGiftCardOrderInfo;


/***/ }),
/* 674 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardOverviewController = /** @class */ (function () {
    function SWGiftCardOverviewController() {
    }
    return SWGiftCardOverviewController;
}());
exports.SWGiftCardOverviewController = SWGiftCardOverviewController;
var SWGiftCardOverview = /** @class */ (function () {
    function SWGiftCardOverview(giftCardPartialsPath, slatwallPathBuilder) {
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCard: "=?"
        };
        this.controller = SWGiftCardOverviewController;
        this.controllerAs = "swGiftCardOverview";
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/overview.html";
        this.restrict = "EA";
    }
    SWGiftCardOverview.Factory = function () {
        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardOverview(giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWGiftCardOverview;
}());
exports.SWGiftCardOverview = SWGiftCardOverview;


/***/ }),
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWGiftCardRecipientInfoController = /** @class */ (function () {
    //@ngInject
    function SWGiftCardRecipientInfoController($hibachi) {
        this.$hibachi = $hibachi;
        if (angular.isDefined(this.giftCard.ownerAccount_accountID)) {
            this.detailAccountLink = $hibachi.buildUrl('admin:entity.detailaccount', 'accountID=' + this.giftCard.ownerAccount_accountID);
        }
    }
    return SWGiftCardRecipientInfoController;
}());
exports.SWGiftCardRecipientInfoController = SWGiftCardRecipientInfoController;
var SWGiftCardRecipientInfo = /** @class */ (function () {
    function SWGiftCardRecipientInfo(giftCardPartialsPath, slatwallPathBuilder) {
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.scope = {};
        this.bindToController = {
            giftCard: "=?"
        };
        this.controller = SWGiftCardRecipientInfoController;
        this.controllerAs = "swGiftCardRecipientInfo";
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/recipientinfo.html";
        this.restrict = "EA";
    }
    SWGiftCardRecipientInfo.Factory = function () {
        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardRecipientInfo(giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWGiftCardRecipientInfo;
}());
exports.SWGiftCardRecipientInfo = SWGiftCardRecipientInfo;


/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOrderItemGiftRecipientRowController = /** @class */ (function () {
    function SWOrderItemGiftRecipientRowController() {
        var _this = this;
        this.edit = function (recipient) {
            angular.forEach(_this.recipients, function (recipient) {
                recipient.editing = false;
            });
            if (!recipient.editing) {
                recipient.editing = true;
            }
        };
        this.delete = function (recipient) {
            _this.recipients.splice(_this.recipients.indexOf(recipient), 1);
        };
        this.saveGiftRecipient = function (recipient) {
            if (_this.tableForm.$valid) {
                _this.showInvalidRecipientMessage = false;
                recipient.editing = false;
            }
            else {
                _this.showInvalidRecipientMessage = true;
            }
        };
        this.getQuantity = function () {
            if (isNaN(_this.quantity)) {
                return 0;
            }
            else {
                return _this.quantity;
            }
        };
        this.getUnassignedCount = function () {
            var unassignedCount = _this.getQuantity();
            angular.forEach(_this.recipients, function (recipient) {
                unassignedCount -= recipient.quantity;
            });
            return unassignedCount;
        };
        this.getMessageCharactersLeft = function () {
            if (angular.isDefined(_this.recipient.giftMessage) && _this.recipient.giftMessage != null) {
                return 250 - _this.recipient.giftMessage.length;
            }
            else {
                return 250;
            }
        };
        this.getUnassignedCountArray = function () {
            var unassignedCountArray = new Array();
            for (var i = 1; i <= _this.recipient.quantity + _this.getUnassignedCount(); i++) {
                unassignedCountArray.push(i);
            }
            return unassignedCountArray;
        };
    }
    return SWOrderItemGiftRecipientRowController;
}());
exports.SWOrderItemGiftRecipientRowController = SWOrderItemGiftRecipientRowController;
var SWOrderItemGiftRecipientRow = /** @class */ (function () {
    function SWOrderItemGiftRecipientRow(giftCardPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.giftCardPartialsPath = giftCardPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'AE';
        this.scope = {
            recipient: "=",
            recipients: "=",
            quantity: "=",
            showInvalidRecipientMessage: "=",
            tableForm: "=?",
            index: "="
        };
        this.bindToController = {
            recipient: "=",
            recipients: "=",
            quantity: "=",
            showInvalidRecipientMessage: "=",
            tableForm: "=?",
            index: "="
        };
        this.controller = SWOrderItemGiftRecipientRowController;
        this.controllerAs = "giftRecipientRowControl";
        this.init = function () {
            _this.templateUrl = _this.slatwallPathBuilder.buildPartialsPath(_this.giftCardPartialsPath) + "/orderitemgiftrecipientrow.html";
        };
        this.init();
    }
    SWOrderItemGiftRecipientRow.Factory = function () {
        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWOrderItemGiftRecipientRow(giftCardPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'giftCardPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWOrderItemGiftRecipientRow;
}());
exports.SWOrderItemGiftRecipientRow = SWOrderItemGiftRecipientRow;


/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var OrderItemGiftRecipientControl = /** @class */ (function () {
    //@ngInject
    function OrderItemGiftRecipientControl($scope, $hibachi) {
        var _this = this;
        this.$scope = $scope;
        this.$hibachi = $hibachi;
        this.getUnassignedCountArray = function () {
            var unassignedCountArray = new Array();
            for (var i = 1; i <= _this.getUnassignedCount(); i++) {
                unassignedCountArray.push(i);
            }
            return unassignedCountArray;
        };
        this.getAssignedCount = function () {
            var assignedCount = 0;
            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
                assignedCount += orderItemGiftRecipient.quantity;
            });
            return assignedCount;
        };
        this.getUnassignedCount = function () {
            var unassignedCount = _this.quantity;
            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
                unassignedCount -= orderItemGiftRecipient.quantity;
            });
            return unassignedCount;
        };
        this.orderItemGiftRecipients = $scope.orderItemGiftRecipients = [];
        $scope.collection = {};
        this.adding = false;
        this.searchText = "";
        var count = 1;
    }
    OrderItemGiftRecipientControl.$inject = ["$scope", "$hibachi"];
    return OrderItemGiftRecipientControl;
}());
exports.OrderItemGiftRecipientControl = OrderItemGiftRecipientControl;


/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(11);
//controllers
var preprocessorderitem_addorderitemgiftrecipient_1 = __webpack_require__(677);
//directives
var swaddorderitemgiftrecipient_1 = __webpack_require__(669);
var swgiftcardbalance_1 = __webpack_require__(670);
var swgiftcarddetail_1 = __webpack_require__(671);
var swgiftcardhistory_1 = __webpack_require__(672);
var swgiftcardoverview_1 = __webpack_require__(674);
var swgiftcardorderinfo_1 = __webpack_require__(673);
var swgiftcardrecipientinfo_1 = __webpack_require__(675);
var sworderitemgiftrecipientrow_1 = __webpack_require__(676);
var giftcardmodule = angular.module('giftcard', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('giftCardPartialsPath', 'giftcard/components/')
    //controllers
    .controller('preprocessorderitem_addorderitemgiftrecipient', preprocessorderitem_addorderitemgiftrecipient_1.OrderItemGiftRecipientControl)
    //directives
    .directive('swAddOrderItemGiftRecipient', swaddorderitemgiftrecipient_1.SWAddOrderItemGiftRecipient.Factory())
    .directive('swGiftCardBalance', swgiftcardbalance_1.SWGiftCardBalance.Factory())
    .directive('swGiftCardOverview', swgiftcardoverview_1.SWGiftCardOverview.Factory())
    .directive('swGiftCardDetail', swgiftcarddetail_1.SWGiftCardDetail.Factory())
    .directive('swGiftCardHistory', swgiftcardhistory_1.SWGiftCardHistory.Factory())
    .directive('swGiftCardRecipientInfo', swgiftcardrecipientinfo_1.SWGiftCardRecipientInfo.Factory())
    .directive('swGiftCardOrderInfo', swgiftcardorderinfo_1.SWGiftCardOrderInfo.Factory())
    .directive('swOrderItemGiftRecipientRow', sworderitemgiftrecipientrow_1.SWOrderItemGiftRecipientRow.Factory());
exports.giftcardmodule = giftcardmodule;


/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var GiftRecipient = /** @class */ (function () {
    function GiftRecipient(firstName, lastName, emailAddress, giftMessage, quantity, account, editing) {
        var _this = this;
        this.reset = function () {
            _this.firstName = null;
            _this.lastName = null;
            _this.emailAddress = null;
            _this.account = null;
            _this.editing = false;
            _this.quantity = 1;
        };
        this.quantity = 1;
        this.editing = false;
        this.account = false;
    }
    return GiftRecipient;
}());
exports.GiftRecipient = GiftRecipient;


/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var md5 = __webpack_require__(50);
var optionWithGroup = /** @class */ (function () {
    function optionWithGroup(optionID, optionGroupID, match) {
        var _this = this;
        this.optionID = optionID;
        this.optionGroupID = optionGroupID;
        this.match = match;
        this.toString = function () {
            return _this.optionID;
        };
    }
    return optionWithGroup;
}());
exports.optionWithGroup = optionWithGroup;
var SWAddOptionGroupController = /** @class */ (function () {
    // @ngInject
    function SWAddOptionGroupController($hibachi, $timeout, collectionConfigService, observerService, utilityService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.getOptionList = function () {
            _this.selection.sort();
            return _this.utilityService.arrayToList(_this.selection);
        };
        this.validateOptions = function (args) {
            _this.addToSelection(args[0], args[1].optionGroupId);
            if (_this.hasCompleteSelection()) {
                _this.validateSelection();
            }
        };
        this.validateSelection = function () {
            var optionList = _this.getOptionList();
            var validateSkuCollectionConfig = _this.collectionConfigService.newCollectionConfig("Sku");
            validateSkuCollectionConfig.addDisplayProperty("calculatedOptionsHash");
            validateSkuCollectionConfig.addFilter("product.productID", _this.productId);
            validateSkuCollectionConfig.addFilter("skuID", _this.skuId, "!=");
            validateSkuCollectionConfig.addFilter("calculatedOptionsHash", md5(optionList));
            validateSkuCollectionConfig.setAllRecords(true);
            validateSkuCollectionConfig.getEntity().then(function (response) {
                if (response.records && response.records.length == 0) {
                    _this.selectedOptionList = _this.getOptionList();
                    _this.showValidFlag = true;
                    _this.showInvalidFlag = false;
                }
                else {
                    _this.showValidFlag = false;
                    _this.showInvalidFlag = true;
                }
            });
        };
        this.hasCompleteSelection = function () {
            var answer = true;
            angular.forEach(_this.selection, function (pair) {
                if (pair.optionID.length === 0) {
                    answer = false;
                }
            });
            return answer;
        };
        this.addToSelection = function (optionId, optionGroupId) {
            angular.forEach(_this.selection, function (pair) {
                if (pair.optionGroupID === optionGroupId) {
                    pair.optionID = optionId;
                    return true;
                }
            });
            return false;
        };
        this.optionGroupIds = this.optionGroups.split(",");
        this.optionGroupIds.sort();
        this.selection = [];
        this.showValidFlag = false;
        this.showInvalidFlag = false;
        for (var i = 0; i < this.optionGroupIds.length; i++) {
            this.selection.push(new optionWithGroup("", this.optionGroupIds[i], false));
        }
        //get current selections
        this.optionCollectionConfig = collectionConfigService.newCollectionConfig("Option");
        this.optionCollectionConfig.setDisplayProperties('optionID,optionGroup.optionGroupID');
        this.optionCollectionConfig.addFilter('skus.skuID', this.skuId);
        this.optionCollectionConfig.setAllRecords(true);
        this.optionCollectionConfig.getEntity().then(function (response) {
            _this.savedOptions = {};
            if (response.records) {
                for (var kk in response.records) {
                    var record = response.records[kk];
                    _this.savedOptions[record['optionGroup_optionGroupID']] = record['optionID'];
                    _this.addToSelection(record['optionID'], record['optionGroup_optionGroupID']);
                }
            }
        });
        this.observerService.attach(this.validateOptions, "validateOptions");
    }
    return SWAddOptionGroupController;
}());
exports.SWAddOptionGroupController = SWAddOptionGroupController;
var SWAddOptionGroup = /** @class */ (function () {
    // @ngInject
    function SWAddOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) {
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.optionGroupPartialsPath = optionGroupPartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            productId: "@",
            skuId: "@",
            optionGroups: "="
        };
        this.controller = SWAddOptionGroupController;
        this.controllerAs = "swAddOptionGroup";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(optionGroupPartialsPath) + "addoptiongroup.html";
    }
    SWAddOptionGroup.Factory = function () {
        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) { return new SWAddOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            '$timeout',
            'collectionConfigService',
            'observerService',
            'optionGroupPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWAddOptionGroup;
}());
exports.SWAddOptionGroup = SWAddOptionGroup;


/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOptionsForOptionGroupController = /** @class */ (function () {
    // @ngInject
    function SWOptionsForOptionGroupController($hibachi, $timeout, collectionConfigService, observerService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.validateChoice = function () {
            _this.observerService.notify("validateOptions", [_this.selectedOption, _this.optionGroup]);
        };
        this.optionCollectionConfig = collectionConfigService.newCollectionConfig("Option");
        this.optionCollectionConfig.setDisplayProperties("optionID, optionName, optionGroup.optionGroupID,optionGroup.optionGroupName");
        this.optionCollectionConfig.addFilter("optionGroup.optionGroupID", this.optionGroupId);
        this.optionCollectionConfig.setOrderBy('sortOrder|ASC');
        this.optionCollectionConfig.setAllRecords(true);
        this.optionCollectionConfig.getEntity().then(function (response) {
            _this.options = response.records;
            if (_this.options.length) {
                _this.optionGroup = {
                    optionGroupId: _this.options[0]['optionGroup_optionGroupID'],
                    optionGroupName: _this.options[0]['optionGroup_optionGroupName']
                };
                _this.selectedOption = _this.savedOptions[_this.optionGroup.optionGroupId];
            }
        });
    }
    return SWOptionsForOptionGroupController;
}());
exports.SWOptionsForOptionGroupController = SWOptionsForOptionGroupController;
var SWOptionsForOptionGroup = /** @class */ (function () {
    // @ngInject
    function SWOptionsForOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) {
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.optionGroupPartialsPath = optionGroupPartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            optionGroupId: "@",
            savedOptions: "="
        };
        this.controller = SWOptionsForOptionGroupController;
        this.controllerAs = "swOptionsForOptionGroup";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(optionGroupPartialsPath) + "optionsforoptiongroup.html";
    }
    SWOptionsForOptionGroup.Factory = function () {
        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) { return new SWOptionsForOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            '$timeout',
            'collectionConfigService',
            'observerService',
            'optionGroupPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWOptionsForOptionGroup;
}());
exports.SWOptionsForOptionGroup = SWOptionsForOptionGroup;


/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(11);
//controllers
//directives
var swaddoptiongroup_1 = __webpack_require__(680);
var swoptionsforoptiongroup_1 = __webpack_require__(681);
var optiongroupmodule = angular.module('optiongroup', [core_module_1.coremodule.name])
    .config([function () {
    }]).run([function () {
    }])
    //constants
    .constant('optionGroupPartialsPath', 'optiongroup/components/')
    //controllers
    //directives
    .directive('swAddOptionGroup', swaddoptiongroup_1.SWAddOptionGroup.Factory())
    .directive('swOptionsForOptionGroup', swoptionsforoptiongroup_1.SWOptionsForOptionGroup.Factory());
exports.optiongroupmodule = optiongroupmodule;


/***/ }),
/* 683 */,
/* 684 */,
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWChildOrderItem = /** @class */ (function () {
    function SWChildOrderItem($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) {
        return {
            restrict: "A",
            scope: {
                orderItem: "=",
                orderId: "@",
                childOrderItems: "=",
                attributes: "="
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "childorderitem.html",
            link: function (scope, element, attr) {
                var columnsConfig = [
                    {
                        "isDeletable": false,
                        "isExportable": true,
                        "propertyIdentifier": "_orderitem.orderItemID",
                        "ormtype": "id",
                        "isVisible": true,
                        "isSearchable": true,
                        "title": "Order Item ID"
                    },
                    {
                        "title": "Order Item Type",
                        "propertyIdentifier": "_orderitem.orderItemType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Order Item Price",
                        "propertyIdentifier": "_orderitem.price",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku Name",
                        "propertyIdentifier": "_orderitem.sku.skuName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku Price",
                        "propertyIdentifier": "_orderitem.skuPrice",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku ID",
                        "propertyIdentifier": "_orderitem.sku.skuID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "SKU Code",
                        "propertyIdentifier": "_orderitem.sku.skuCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product ID",
                        "propertyIdentifier": "_orderitem.sku.product.productID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Name",
                        "propertyIdentifier": "_orderitem.sku.product.productName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Description",
                        "propertyIdentifier": "_orderitem.sku.product.productDescription",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Image File Name",
                        "propertyIdentifier": "_orderitem.sku.imageFile",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.sku.skuPrice",
                        "ormtype": "string"
                    },
                    {
                        "title": "Product Type",
                        "propertyIdentifier": "_orderitem.sku.product.productType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.sku.baseProductType",
                        "persistent": false
                    },
                    {
                        "title": "Qty.",
                        "propertyIdentifier": "_orderitem.quantity",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment Method Name",
                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment ID",
                        "propertyIdentifier": "_orderitem.orderFulfillment.orderFulfillmentID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment Method Type",
                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Street Address",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.streetAddress",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Street Address 2",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.street2Address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Postal Code",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.postalCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "City",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.city",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "State",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.stateCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Country",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.countryCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Total",
                        "propertyIdentifier": "_orderitem.itemTotal",
                        "persistent": false
                    },
                    {
                        "title": "Discount Amount",
                        "propertyIdentifier": "_orderitem.discountAmount",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.extendedPrice",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroup.amount"
                    },
                    {
                        "title": "Product Bundle Group",
                        "propertyIdentifier": "_orderitem.productBundleGroup.productBundleGroupID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroup.amountType"
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroupPrice",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundlePrice",
                        "persistent": false
                    }
                ];
                //add attributes to the column config
                angular.forEach(scope.attributes, function (attribute) {
                    var attributeColumn = {
                        propertyIdentifier: "_orderitem." + attribute.attributeCode,
                        attributeID: attribute.attributeID,
                        attributeSetObject: "orderItem"
                    };
                    columnsConfig.push(attributeColumn);
                });
                var filterGroupsConfig = [
                    {
                        "filterGroup": [
                            {
                                "propertyIdentifier": "_orderitem.parentOrderItem.orderItemID",
                                "comparisonOperator": "=",
                                "value": scope.orderItem.$$getID(),
                            }
                        ]
                    }
                ];
                var options = {
                    columnsConfig: angular.toJson(columnsConfig),
                    filterGroupsConfig: angular.toJson(filterGroupsConfig),
                    allRecords: true
                };
                //hide the children on click
                scope.hideChildren = function (orderItem) {
                    //Set all child order items to clicked = false.
                    angular.forEach(scope.childOrderItems, function (child) {
                        console.dir(child);
                        child.hide = !child.hide;
                        scope.orderItem.clicked = !scope.orderItem.clicked;
                    });
                };
                /**
                * Returns a list of child order items.
                */
                scope.getChildOrderItems = function (orderItem) {
                    orderItem.clicked = true;
                    if (!scope.orderItem.childItemsRetrieved) {
                        scope.orderItem.childItemsRetrieved = true;
                        var orderItemsPromise = $hibachi.getEntity('orderItem', options);
                        orderItemsPromise.then(function (value) {
                            var collectionConfig = {};
                            collectionConfig.columns = columnsConfig;
                            collectionConfig.baseEntityName = 'SlatwallOrderItem';
                            collectionConfig.baseEntityAlias = '_orderitem';
                            var childOrderItems = $hibachi.populateCollection(value.records, collectionConfig);
                            angular.forEach(childOrderItems, function (childOrderItem) {
                                childOrderItem.hide = false;
                                childOrderItem.depth = orderItem.depth + 1;
                                childOrderItem.data.parentOrderItem = orderItem;
                                childOrderItem.data.parentOrderItemQuantity = scope.orderItem.data.quantity / scope.orderItem.data.parentOrderItemQuantity;
                                scope.childOrderItems.splice(scope.childOrderItems.indexOf(orderItem) + 1, 0, childOrderItem);
                                childOrderItem.data.productBundleGroupPercentage = 1;
                                if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageIncrease') {
                                    childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;
                                }
                                else if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageDecrease') {
                                    childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;
                                }
                            });
                        });
                    }
                };
            }
        };
    }
    SWChildOrderItem.Factory = function () {
        var directive = function ($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) { return new SWChildOrderItem($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$http',
            '$compile',
            '$templateCache',
            '$hibachi',
            'orderItemPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWChildOrderItem;
}());
exports.SWChildOrderItem = SWChildOrderItem;


/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * Displays a shipping label in the order items row.
 * @module slatwalladmin
 * @class swOrderItemsShippingLabelStamp
 */
var SWOiShippingLabelStamp = /** @class */ (function () {
    function SWOiShippingLabelStamp($log, orderItemPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                orderFulfillment: "="
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderfulfillment-shippinglabel.html",
            link: function (scope, element, attrs) {
                //Get the template.
                $log.debug("\n\n<---ORDER FULFILLMENT STAMP--->\n\n");
                $log.debug(scope.orderFulfillment);
                $log.debug(scope.orderFulfillment.data.fulfillmentMethodType);
            }
        };
    }
    SWOiShippingLabelStamp.Factory = function () {
        var directive = function ($log, orderItemPartialsPath, slatwallPathBuilder) { return new SWOiShippingLabelStamp($log, orderItemPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            'orderItemPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWOiShippingLabelStamp;
}());
exports.SWOiShippingLabelStamp = SWOiShippingLabelStamp;


/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOrderItem = /** @class */ (function () {
    //@ngInject
    function SWOrderItem($log, $compile, $http, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) {
        return {
            restrict: "A",
            scope: {
                orderItem: "=",
                orderId: "@",
                attributes: "=",
                paginator: "=?"
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem.html",
            link: function (scope, element, attr) {
                $log.debug('order item init');
                $log.debug(scope.orderItem);
                scope.orderItem.clicked = false; //Never been clicked
                scope.orderItem.details = [];
                scope.orderItem.events = [];
                scope.orderItem.queuePosition;
                scope.orderItem.onWaitlist = false;
                scope.orderItem.isPending = false;
                scope.orderItem.isRegistered = false;
                var foundPosition = false;
                if (scope.orderItem.data.sku.data.product.data.productType.data.systemCode === 'event') {
                    var eventRegistrationPromise = scope.orderItem.$$getEventRegistrations();
                    eventRegistrationPromise.then(function () {
                        angular.forEach(scope.orderItem.data.eventRegistrations, function (eventRegistration) {
                            $log.debug(eventRegistration);
                            var eventRegistrationPromise = eventRegistration.$$getEventRegistrationStatusType();
                            eventRegistrationPromise.then(function (rec) {
                                $log.debug(rec);
                                angular.forEach(rec.records, function (record) {
                                    $log.debug("Records");
                                    $log.debug(record.eventRegistrationStatusType);
                                    angular.forEach(record.eventRegistrationStatusType, function (statusType) {
                                        if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstWaitlisted") {
                                            scope.orderItem.onWaitlist = true;
                                            $log.debug("Found + " + statusType.systemCode);
                                            //Because the customer is waitlisted, we need to get the number of customers ahead of them in the queue.
                                            var position = getPositionInQueueFor(scope.orderItem);
                                            scope.orderItem.queuePosition = position;
                                        }
                                        else if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstRegistered") {
                                            scope.orderItem.isRegistered = true;
                                            $log.debug("Found + " + statusType.systemCode);
                                        }
                                        else if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstPendingApproval") {
                                            scope.orderItem.isPending = true;
                                            $log.debug("Found + " + statusType.systemCode);
                                        }
                                        else {
                                            $log.error("Couldn't resolve a status type for: " + statusType.systemCode);
                                        }
                                    });
                                });
                            });
                        });
                    });
                }
                /**
                * Returns the current position in the queue for an orderItem that's on the waiting list.
                */
                var getPositionInQueueFor = function (orderItem) {
                    $log.debug("Retrieving position in Queue: ");
                    var queueConfig = [
                        {
                            "propertyIdentifier": "_eventregistration.waitlistQueuePositionStruct",
                            "isVisible": true,
                            "persistent": false,
                            "title": "Event Registrations"
                        }
                    ];
                    var queueGroupsConfig = [
                        {
                            "filterGroup": [
                                {
                                    "propertyIdentifier": "_eventregistration.orderItem.orderItemID",
                                    "comparisonOperator": "=",
                                    "value": orderItem.$$getID(),
                                }
                            ]
                        }
                    ];
                    var queueOptions = {
                        columnsConfig: angular.toJson(queueConfig),
                        filterGroupsConfig: angular.toJson(queueGroupsConfig),
                        allRecords: true
                    };
                    var positionPromise = $hibachi.getEntity('EventRegistration', queueOptions);
                    $log.debug(positionPromise);
                    positionPromise.then(function (value) {
                        angular.forEach(value.records, function (position) {
                            $log.debug("Position: " + position.waitlistQueuePositionStruct);
                            if (position.waitlistQueuePositionStruct !== -1) {
                                scope.orderItem.queuePosition = position.waitlistQueuePositionStruct; //Use the value.
                                return position.waitlistQueuePositionStruct;
                            }
                        });
                    });
                };
                //define how we get child order items
                var columnsConfig = [
                    {
                        "isDeletable": false,
                        "isExportable": true,
                        "propertyIdentifier": "_orderitem.orderItemID",
                        "ormtype": "id",
                        "isVisible": true,
                        "isSearchable": true,
                        "title": "Order Item ID"
                    },
                    {
                        "title": "Order Item Type",
                        "propertyIdentifier": "_orderitem.orderItemType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Order Item Price",
                        "propertyIdentifier": "_orderitem.price",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku Name",
                        "propertyIdentifier": "_orderitem.sku.skuName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku Price",
                        "propertyIdentifier": "_orderitem.skuPrice",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Sku ID",
                        "propertyIdentifier": "_orderitem.sku.skuID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "SKU Code",
                        "propertyIdentifier": "_orderitem.sku.skuCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Bundle Group",
                        "propertyIdentifier": "_orderitem.productBundleGroup.productBundleGroupID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product ID",
                        "propertyIdentifier": "_orderitem.sku.product.productID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Name",
                        "propertyIdentifier": "_orderitem.sku.product.productName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Type",
                        "propertyIdentifier": "_orderitem.sku.product.productType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Description",
                        "propertyIdentifier": "_orderitem.sku.product.productDescription",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.sku.baseProductType",
                        "persistent": false
                    },
                    {
                        "title": "Event Start Date",
                        "propertyIdentifier": "_orderitem.sku.eventStartDateTime",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Product Description",
                        "propertyIdentifier": "_orderitem.sku.options",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.skuPrice",
                        "ormtype": "string"
                    },
                    {
                        "title": "Image File Name",
                        "propertyIdentifier": "_orderitem.sku.imageFile",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Qty.",
                        "propertyIdentifier": "_orderitem.quantity",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Order Return ID",
                        "propertyIdentifier": "_orderitem.orderReturn.orderReturnID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Return Street Address",
                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.streetAddress",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Return Street Address 2",
                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.street2Address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Return City",
                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.city",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Return State",
                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.stateCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Return Postal Code",
                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.postalCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment Method Name",
                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment ID",
                        "propertyIdentifier": "_orderitem.orderFulfillment.orderFulfillmentID",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Fulfillment Method Type",
                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Street Address",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.streetAddress",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Street Address 2",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.street2Address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Postal Code",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.postalCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "City",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.city",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "State",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.stateCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Country",
                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.countryCode",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",
                        "isVisible": true,
                        "isDeletable": true
                    },
                    {
                        "title": "Total",
                        "propertyIdentifier": "_orderitem.itemTotal",
                        "persistent": false
                    },
                    {
                        "title": "Discount Amount",
                        "propertyIdentifier": "_orderitem.discountAmount",
                        "persistent": false
                    },
                    {
                        "title": "Tax Amount",
                        "propertyIdentifier": "_orderitem.taxAmount",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.extendedPrice",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroup.amount",
                        "ormtype": "big_decimal"
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroup.amountType",
                        "ormtype": "string"
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundleGroupPrice",
                        "persistent": false
                    },
                    {
                        "propertyIdentifier": "_orderitem.productBundlePrice",
                        "persistent": false
                    }
                ];
                //Add attributes to the column configuration
                angular.forEach(scope.attributes, function (attribute) {
                    var attributeColumn = {
                        propertyIdentifier: "_orderitem." + attribute.attributeCode,
                        attributeID: attribute.attributeID,
                        attributeSetObject: "orderItem"
                    };
                    columnsConfig.push(attributeColumn);
                });
                var filterGroupsConfig = [
                    {
                        "filterGroup": [
                            {
                                "propertyIdentifier": "_orderitem.parentOrderItem.orderItemID",
                                "comparisonOperator": "=",
                                "value": scope.orderItem.$$getID(),
                            }
                        ]
                    }
                ];
                var options = {
                    columnsConfig: angular.toJson(columnsConfig),
                    filterGroupsConfig: angular.toJson(filterGroupsConfig),
                    allRecords: true
                };
                //Create a list of order items.
                scope.childOrderItems = [];
                scope.orderItem.depth = 1;
                /**
                * Hide orderItem children on clicking the details link.
                */
                scope.hideChildren = function (orderItem) {
                    //Set all child order items to clicked = false.
                    angular.forEach(scope.childOrderItems, function (child) {
                        $log.debug("hideing");
                        child.hide = !child.hide;
                        scope.orderItem.clicked = !scope.orderItem.clicked;
                    });
                };
                //Delete orderItem
                scope.deleteEntity = function () {
                    $log.debug("Deleting");
                    $log.debug(scope.orderItem);
                    var deletePromise = scope.orderItem.$$delete();
                    deletePromise.then(function (result) {
                        if (!result.errors || !Object.keys(result.errors).length) {
                            delete scope.orderItem;
                        }
                        scope.paginator.getCollection();
                    });
                };
                /**
                * Gets a list of child order items if they exist.
                */
                scope.getChildOrderItems = function () {
                    if (!scope.orderItem.childItemsRetrieved) {
                        scope.orderItem.clicked = !scope.orderItem.clicked;
                        scope.orderItem.hide = !scope.orderItem.hide;
                        scope.orderItem.childItemsRetrieved = true;
                        var orderItemsPromise = $hibachi.getEntity('orderItem', options);
                        orderItemsPromise.then(function (value) {
                            var collectionConfig = {};
                            collectionConfig.columns = columnsConfig;
                            collectionConfig.baseEntityName = 'SlatwallOrderItem';
                            collectionConfig.baseEntityAlias = '_orderitem';
                            var childOrderItems = $hibachi.populateCollection(value.records, collectionConfig);
                            angular.forEach(childOrderItems, function (childOrderItem) {
                                childOrderItem.depth = scope.orderItem.depth + 1;
                                scope.childOrderItems.push(childOrderItem);
                                childOrderItem.data.productBundleGroupPercentage = 1;
                                if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageIncrease') {
                                    childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;
                                }
                                else if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageDecrease') {
                                    childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;
                                }
                            });
                        });
                    }
                    else {
                        //We already have the items so we just need to show them.
                        angular.forEach(scope.childOrderItems, function (child) {
                            child.hide = !child.hide;
                            scope.orderItem.clicked = !scope.orderItem.clicked;
                        });
                    }
                };
            }
        };
    }
    SWOrderItem.Factory = function () {
        var directive = function ($log, $compile, $http, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) { return new SWOrderItem($log, $compile, $http, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$compile',
            '$http',
            '$templateCache',
            '$hibachi',
            'orderItemPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWOrderItem;
}());
exports.SWOrderItem = SWOrderItem;


/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * Displays a shipping label in the order items row.
 * @module slatwalladmin
 * @class swOrderItemsShippingLabelStamp
 */
var SWOrderItemDetailStamp = /** @class */ (function () {
    function SWOrderItemDetailStamp($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'A',
            scope: {
                systemCode: "=",
                orderItemId: "=",
                skuId: "=",
                orderItem: "="
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem-detaillabel.html",
            link: function (scope, element, attrs) {
                scope.details = [];
                scope.orderItem.detailsName = [];
                var results;
                $log.debug("Detail stamp");
                $log.debug(scope.systemCode);
                $log.debug(scope.orderItemId);
                $log.debug(scope.skuId);
                $log.debug(scope.orderItem);
                /**
                 * For each type of orderItem, get the appropriate detail information.
                 *
                 * Merchandise: Option Group Name and Option
                 * Event: Event Date, Event Location
                 * Subscription: Subscription Term, Subscription Benefits
                 */
                var getMerchandiseDetails = function (orderItem) {
                    //Get option and option groups
                    for (var i = 0; i <= orderItem.data.sku.data.options.length - 1; i++) {
                        var optionGroupCollectionConfig = collectionConfigService.newCollectionConfig("Option");
                        optionGroupCollectionConfig.addDisplayProperty("optionID,optionName, optionGroup.optionGroupName");
                        optionGroupCollectionConfig.addFilter("optionID", orderItem.data.sku.data.options[i].optionID, "=");
                        optionGroupCollectionConfig.getEntity().then(function (results) {
                            if (angular.isDefined(results.pageRecords[0])) {
                                orderItem.detailsName.push(results.pageRecords[0].optionGroup_optionGroupName);
                                orderItem.details.push(results.pageRecords[0].optionName);
                            }
                        }, function (reason) {
                            throw ("SWOrderItemDetailStamp had trouble retrieving the option group for option");
                        });
                    }
                };
                var getSubscriptionDetails = function (orderItem) {
                    //get Subscription Term and Subscription Benefits
                    var name = orderItem.data.sku.data.subscriptionTerm.data.subscriptionTermName || "";
                    orderItem.detailsName.push("Subscription Term:");
                    orderItem.details.push(name);
                    //Maybe multiple benefits so show them all.
                    for (var i = 0; i <= orderItem.data.sku.data.subscriptionBenefits.length - 1; i++) {
                        var benefitName = orderItem.data.sku.data.subscriptionBenefits[i].subscriptionBenefitName || "";
                        orderItem.detailsName.push("Subscription Benefit:");
                        orderItem.details.push(benefitName);
                    }
                };
                var getEventDetails = function (orderItem) {
                    //get event date, and event location
                    orderItem.detailsName.push("Event Date: ");
                    orderItem.details.push(orderItem.data.sku.data.eventStartDateTime);
                    //Need to iterate this.
                    for (var i = 0; i <= orderItem.data.sku.data.locations.length - 1; i++) {
                        orderItem.detailsName.push("Location: ");
                        orderItem.details.push(orderItem.data.sku.data.locations[i].locationName);
                    }
                };
                if (angular.isUndefined(scope.orderItem.details)) {
                    scope.orderItem.details = [];
                }
                if (angular.isDefined(scope.orderItem.details)) {
                    switch (scope.systemCode) {
                        case "merchandise":
                            getMerchandiseDetails(scope.orderItem);
                            break;
                        case "subscription":
                            getSubscriptionDetails(scope.orderItem);
                            break;
                        case "event":
                            getEventDetails(scope.orderItem);
                            break;
                    }
                }
            }
        };
    }
    SWOrderItemDetailStamp.Factory = function () {
        var directive = function ($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) { return new SWOrderItemDetailStamp($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionConfigService',
            'orderItemPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWOrderItemDetailStamp;
}());
exports.SWOrderItemDetailStamp = SWOrderItemDetailStamp;


/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOrderItems = /** @class */ (function () {
    //@ngInject
    function SWOrderItems($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService, observerService) {
        return {
            restrict: 'E',
            scope: {
                orderId: "@"
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitems.html",
            link: function (scope, element, attrs) {
                var options = {};
                scope.keywords = "";
                scope.loadingCollection = false;
                var searchPromise;
                scope.searchCollection = function () {
                    if (searchPromise) {
                        $timeout.cancel(searchPromise);
                    }
                    searchPromise = $timeout(function () {
                        $log.debug('search with keywords');
                        $log.debug(scope.keywords);
                        //Set current page here so that the pagination does not break when getting collection
                        scope.paginator.setCurrentPage(1);
                        scope.loadingCollection = true;
                        scope.getCollection();
                    }, 500);
                };
                $log.debug('Init Order Item');
                $log.debug(scope.orderId);
                //Setup the data needed for each order item object.
                scope.getCollection = function () {
                    if (scope.pageShow === 'Auto') {
                        scope.pageShow = 50;
                    }
                    var orderItemCollection = collectionConfigService.newCollectionConfig('OrderItem');
                    orderItemCollection.setDisplayProperties("orderItemID,currencyCode,sku.skuName\n                         ,price,skuPrice,sku.skuID,sku.skuCode,productBundleGroup.productBundleGroupID\n\t\t\t\t\t\t ,sku.product.productID\n \t\t\t\t\t\t ,sku.product.productName,sku.product.productDescription\n\t\t\t\t\t\t ,sku.eventStartDateTime\n \t\t\t\t\t\t ,quantity\n\t\t\t\t\t\t ,orderFulfillment.fulfillmentMethod.fulfillmentMethodName\n\t\t\t\t\t\t ,orderFulfillment.orderFulfillmentID\n \t\t\t\t\t\t ,orderFulfillment.shippingAddress.streetAddress\n     \t\t\t\t\t ,orderFulfillment.shippingAddress.street2Address\n\t\t\t\t\t\t ,orderFulfillment.shippingAddress.postalCode\n\t\t\t\t\t\t ,orderFulfillment.shippingAddress.city,orderFulfillment.shippingAddress.stateCode\n \t\t\t\t\t\t ,orderFulfillment.shippingAddress.countryCode\n                         ,orderItemType.systemCode\n\t\t\t\t\t\t ,orderFulfillment.fulfillmentMethod.fulfillmentMethodType\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.streetAddress\n\t\t\t\t\t\t ,orderFulfillment.pickupLocation.primaryAddress.address.street2Address\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.city\n\t\t\t\t\t\t ,orderFulfillment.pickupLocation.primaryAddress.address.stateCode\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.postalCode\n\t\t\t\t\t\t ,orderReturn.orderReturnID\n \t\t\t\t\t\t ,orderReturn.returnLocation.primaryAddress.address.streetAddress\n\t\t\t\t\t\t ,orderReturn.returnLocation.primaryAddress.address.street2Address\n                         ,orderReturn.returnLocation.primaryAddress.address.city\n\t\t\t\t\t\t ,orderReturn.returnLocation.primaryAddress.address.stateCode\n                         ,orderReturn.returnLocation.primaryAddress.address.postalCode\n\t\t\t\t\t\t ,itemTotal,discountAmount,taxAmount,extendedPrice,productBundlePrice,sku.baseProductType\n                         ,sku.subscriptionBenefits\n\t\t\t\t\t\t ,sku.product.productType.systemCode\n\t\t\t\t\t\t ,sku.options\n\t\t\t\t\t\t ,sku.locations\n \t\t\t\t\t\t ,sku.subscriptionTerm.subscriptionTermName\n \t\t\t\t\t\t ,sku.imageFile\n                         ,stock.location.locationName")
                        .addFilter('order.orderID', scope.orderId)
                        .addFilter('parentOrderItem', 'null', 'IS')
                        .setKeywords(scope.keywords)
                        .setPageShow(scope.paginator.getPageShow())
                        .setCurrentPage(scope.paginator.getCurrentPage());
                    //add attributes to the column config
                    angular.forEach(scope.attributes, function (attribute) {
                        var attributeColumn = {
                            propertyIdentifier: "_orderitem." + attribute.attributeCode,
                            attributeID: attribute.attributeID,
                            attributeSetObject: "orderItem"
                        };
                        orderItemCollection.columns.push(attributeColumn);
                    });
                    var orderItemsPromise = orderItemCollection.getEntity();
                    orderItemsPromise.then(function (value) {
                        scope.collection = value;
                        var collectionConfig = {};
                        scope.orderItems = $hibachi.populateCollection(value.pageRecords, orderItemCollection);
                        for (var orderItem in scope.orderItems) {
                            $log.debug("OrderItem Product Type");
                            $log.debug(scope.orderItems);
                            //orderItem.productType = orderItem.data.sku.data.product.data.productType.$$getParentProductType();
                        }
                        scope.paginator.setPageRecordsInfo(scope.collection);
                        scope.loadingCollection = false;
                    }, function (value) {
                        scope.orderItems = [];
                    });
                };
                var attributesCollection = collectionConfigService.newCollectionConfig('Attribute');
                attributesCollection.setDisplayProperties('attributeID,attributeCode,attributeName')
                    .addFilter('displayOnOrderDetailFlag', true)
                    .addFilter('activeFlag', true)
                    .setAllRecords(true);
                var attItemsPromise = attributesCollection.getEntity();
                attItemsPromise.then(function (value) {
                    scope.attributes = [];
                    angular.forEach(value.records, function (attributeItemData) {
                        //Use that custom attribute name to get the value.
                        scope.attributes.push(attributeItemData);
                    });
                    scope.getCollection();
                });
                //Add claim function and cancel function
                /*scope.appendToCollection = function(){
                    if(scope.pageShow === 'Auto'){
                        $log.debug('AppendToCollection');
                        if(scope.paginator.autoScrollPage < scope.collection.totalPages){
                            scope.paginator.autoScrollDisabled = true;
                            scope.paginator.autoScrollPage++;

                            var appendOptions:any = {};
                            angular.extend(appendOptions,options);
                            appendOptions.pageShow = 50;
                            appendOptions.currentPage = scope.paginator.autoScrollPage;

                            var collectionListingPromise = $hibachi.getEntity('orderItem', appendOptions);
                            collectionListingPromise.then(function(value){
                                scope.collection.pageRecords = scope.collection.pageRecords.concat(value.pageRecords);
                                scope.autoScrollDisabled = false;
                            },function(reason){
                                scope.collection.pageRecords = [];
                            });
                        }
                    }
                };*/
                scope.paginator = paginationService.createPagination();
                scope.paginator.collection = scope.collection;
                scope.paginator.getCollection = scope.getCollection;
                //set up custom event as temporary fix to update when new sku is adding via jquery ajax instead of angular scope
                $(document).on("listingDisplayUpdate", {}, function (event, arg1, arg2) {
                    scope.orderItems = undefined;
                    scope.getCollection();
                });
                observerService.attach(scope.getCollection, 'swPaginationAction');
            } //<--End link
        };
    }
    SWOrderItems.Factory = function () {
        var directive = function ($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService, observerService) { return new SWOrderItems($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService, observerService); };
        directive.$inject = [
            '$log',
            '$timeout',
            '$location',
            '$hibachi',
            'collectionConfigService',
            'formService',
            'orderItemPartialsPath',
            'slatwallPathBuilder',
            'paginationService',
            'observerService'
        ];
        return directive;
    };
    return SWOrderItems;
}());
exports.SWOrderItems = SWOrderItems;


/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWResizedImage = /** @class */ (function () {
    function SWResizedImage($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                orderItem: "=",
            },
            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem-image.html",
            link: function (scope, element, attrs) {
                var profileName = attrs.profilename;
                var skuID = scope.orderItem.data.sku.data.skuID;
                //Get the template.
                //Call slatwallService to get the path from the image.
                $hibachi.getResizedImageByProfileName(profileName, skuID)
                    .then(function (response) {
                    $log.debug(response.resizedImagePaths[0]);
                    scope.orderItem.imagePath = response.resizedImagePaths[0];
                });
            }
        };
    }
    SWResizedImage.Factory = function () {
        var directive = function ($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder) { return new SWResizedImage($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http', '$log', '$q', '$hibachi', 'orderItemPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWResizedImage;
}());
exports.SWResizedImage = SWResizedImage;


/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/slatwallTypescript.d.ts" />
var core_module_1 = __webpack_require__(11);
//directives
var swchildorderitem_1 = __webpack_require__(685);
var sworderitem_1 = __webpack_require__(687);
var swoishippinglabelstamp_1 = __webpack_require__(686);
var sworderitemdetailstamp_1 = __webpack_require__(688);
var sworderitems_1 = __webpack_require__(689);
var swresizedimage_1 = __webpack_require__(690);
var orderitemmodule = angular.module('hibachi.orderitem', [core_module_1.coremodule.name])
    // .config(['$provide','baseURL',($provide,baseURL)=>{
    // 	$provide.constant('paginationPartials', baseURL+basePartialsPath+'pagination/components/');
    // }])
    .run([function () {
    }])
    //directives
    .directive('swChildOrderItem', swchildorderitem_1.SWChildOrderItem.Factory())
    .directive('swOrderItem', sworderitem_1.SWOrderItem.Factory())
    .directive('swoishippinglabelstamp', swoishippinglabelstamp_1.SWOiShippingLabelStamp.Factory())
    .directive('swOrderItemDetailStamp', sworderitemdetailstamp_1.SWOrderItemDetailStamp.Factory())
    .directive('swOrderItems', sworderitems_1.SWOrderItems.Factory())
    .directive('swresizedimage', swresizedimage_1.SWResizedImage.Factory())
    //constants
    .constant('orderItemPartialsPath', 'orderitem/components/');
exports.orderitemmodule = orderitemmodule;


/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWProductListingPagesController = /** @class */ (function () {
    //@ngInject
    function SWProductListingPagesController(collectionConfigService, listingService, utilityService) {
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.utilityService = utilityService;
        this.collectionConfig = collectionConfigService.newCollectionConfig("Content");
        this.collectionConfig.addDisplayProperty("contentID, title, activeFlag, site.siteName, titlePath");
        this.typeaheadDataKey = utilityService.createID(32);
        this.alreadySelectedContentCollectionConfig = collectionConfigService.newCollectionConfig("ProductListingPage");
        this.alreadySelectedContentCollectionConfig.addDisplayProperty("productListingPageID, product.productID, content.contentID, content.title, content.site.siteName, content.activeFlag");
        this.alreadySelectedContentCollectionConfig.addFilter("product.productID", this.productId, "=");
    }
    return SWProductListingPagesController;
}());
exports.SWProductListingPagesController = SWProductListingPagesController;
var SWProductListingPages = /** @class */ (function () {
    //@ngInject
    function SWProductListingPages($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) {
        this.$http = $http;
        this.$hibachi = $hibachi;
        this.paginationService = paginationService;
        this.productPartialsPath = productPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            edit: "=?",
            selectedListingPageIdPaths: "@?",
            productId: "@?"
        };
        this.controller = SWProductListingPagesController;
        this.controllerAs = "swProductListingPages";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productPartialsPath) + "/productlistingpages.html";
    }
    SWProductListingPages.Factory = function () {
        var directive = function ($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) { return new SWProductListingPages($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'paginationService',
            'productPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWProductListingPages;
}());
exports.SWProductListingPages = SWProductListingPages;


/***/ }),
/* 693 */,
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var ProductCreateController = /** @class */ (function () {
    //@ngInject
    function ProductCreateController($q, $scope, $element, $log, $hibachi, collectionConfigService, selectionService, rbkeyService) {
        var _this = this;
        this.$q = $q;
        this.$scope = $scope;
        this.$element = $element;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.collectionConfigService = collectionConfigService;
        this.selectionService = selectionService;
        this.rbkeyService = rbkeyService;
        //on select change get collection
        this.$scope.preprocessproduct_createCtrl.productTypeChanged = function (selectedOption) {
            _this.$scope.preprocessproduct_createCtrl.selectedOption = selectedOption;
            _this.$scope.preprocessproduct_createCtrl.getCollection();
            _this.selectionService.clearSelection('ListingDisplay');
        };
        this.$scope.productTypeIDPaths = {};
        this.$scope.preprocessproduct_createCtrl.getCollection = function () {
            var productTypeDeffered = _this.$q.defer();
            var productTypePromise = productTypeDeffered.promise;
            if (angular.isUndefined(_this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value])) {
                var productTypeCollectionConfig = _this.collectionConfigService.newCollectionConfig('ProductType');
                productTypeCollectionConfig.addDisplayProperty('productTypeID, productTypeIDPath');
                productTypeCollectionConfig.addFilter('productTypeID', _this.$scope.preprocessproduct_createCtrl.selectedOption.value, "=");
                productTypeCollectionConfig.getEntity().then(function (result) {
                    if (angular.isDefined(result.pageRecords[0])) {
                        _this.$scope.productTypeIDPaths[result.pageRecords[0].productTypeID] = result.pageRecords[0].productTypeIDPath;
                    }
                    productTypeDeffered.resolve();
                }, function (reason) {
                    productTypeDeffered.reject();
                    throw ("ProductCreateController was unable to retrieve the product type ID Path.");
                });
            }
            else {
                productTypeDeffered.resolve();
            }
            productTypePromise.then(function () {
                if (_this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value]) {
                    var collectionConfig = _this.collectionConfigService.newCollectionConfig('Option');
                    collectionConfig.setDisplayProperties('optionGroup.optionGroupName,optionName', undefined, { isVisible: true });
                    collectionConfig.setDisplayProperties('optionID', undefined, { isVisible: false });
                    //this.collectionConfig.addFilter('optionGroup.optionGroupID',$('input[name="currentOptionGroups"]').val(),'NOT IN')
                    collectionConfig.addFilter('optionGroup.globalFlag', 1, '=');
                    var productTypeIDArray = _this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value].split(",");
                    for (var j = 0; j < productTypeIDArray.length; j++) {
                        collectionConfig.addFilter('optionGroup.productTypes.productTypeID', productTypeIDArray[j], '=', 'OR');
                    }
                    collectionConfig.setOrderBy('optionGroup.sortOrder|ASC,sortOrder|ASC');
                    _this.$scope.preprocessproduct_createCtrl.collectionListingPromise = collectionConfig.getEntity();
                    _this.$scope.preprocessproduct_createCtrl.collectionListingPromise.then(function (data) {
                        _this.$scope.preprocessproduct_createCtrl.collection = data;
                        _this.$scope.preprocessproduct_createCtrl.collection.collectionConfig = collectionConfig;
                    });
                }
            }, function () {
                throw ("ProductCreateController was unable to resolve the product type.");
            });
        };
        var renewalMethodOptions = $("select[name='renewalMethod']")[0];
        this.$scope.preprocessproduct_createCtrl.renewalMethodOptions = [];
        angular.forEach(renewalMethodOptions, function (option) {
            var optionToAdd = {
                label: option.label,
                value: option.value
            };
            _this.$scope.preprocessproduct_createCtrl.renewalMethodOptions.push(optionToAdd);
        });
        this.$scope.preprocessproduct_createCtrl.renewalSkuChoice = this.$scope.preprocessproduct_createCtrl.renewalMethodOptions[1];
        var productTypeOptions = $("select[name='product.productType.productTypeID']")[0];
        this.$scope.preprocessproduct_createCtrl.options = [];
        angular.forEach(productTypeOptions, function (jQueryOption) {
            var option = {
                label: jQueryOption.label,
                value: jQueryOption.value
            };
            _this.$scope.preprocessproduct_createCtrl.options.push(option);
        });
        this.$scope.preprocessproduct_createCtrl.selectedOption = {};
        if (angular.isDefined(this.$scope.preprocessproduct_createCtrl.options[0]) && angular.isDefined(this.$scope.preprocessproduct_createCtrl.options[0].value)) {
            this.$scope.preprocessproduct_createCtrl.selectedOption.value = this.$scope.preprocessproduct_createCtrl.options[0].value;
            this.$scope.preprocessproduct_createCtrl.productTypeChanged(this.$scope.preprocessproduct_createCtrl.selectedOption);
        }
        else {
            this.$scope.preprocessproduct_createCtrl.selectedOption.value = "";
        }
        this.$scope.preprocessproduct_createCtrl.getCollection();
    }
    return ProductCreateController;
}());
exports.ProductCreateController = ProductCreateController;


/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//modules
var core_module_1 = __webpack_require__(11);
//services
//controllers
var preprocessproduct_create_1 = __webpack_require__(694);
//filters
//directives
var swproductlistingpages_1 = __webpack_require__(692);
var productmodule = angular.module('hibachi.product', [core_module_1.coremodule.name]).config(function () {
})
    .constant('productPartialsPath', 'product/components/')
    //services
    //controllers
    .controller('preprocessproduct_create', preprocessproduct_create_1.ProductCreateController)
    //filters
    //directives
    .directive('swProductListingPages', swproductlistingpages_1.SWProductListingPages.Factory());
exports.productmodule = productmodule;


/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CollectionFilterItem = /** @class */ (function () {
    function CollectionFilterItem(name, type, displayPropertyIdentifier, propertyIdentifier, displayValue, value, comparisonOperator, logicalOperator) {
        this.name = name;
        this.type = type;
        this.displayPropertyIdentifier = displayPropertyIdentifier;
        this.propertyIdentifier = propertyIdentifier;
        this.displayValue = displayValue;
        this.value = value;
        this.comparisonOperator = comparisonOperator;
        this.logicalOperator = logicalOperator;
    }
    return CollectionFilterItem;
}());
var SWProductBundleCollectionFilterItemTypeaheadController = /** @class */ (function () {
    // @ngInject
    function SWProductBundleCollectionFilterItemTypeaheadController($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath) {
        var _this = this;
        this.$log = $log;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.productBundleService = productBundleService;
        this.metadataService = metadataService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.$hibachi = $hibachi;
        this.productBundlePartialsPath = productBundlePartialsPath;
        this.init = function () {
            _this.maxRecords = 10;
            _this.recordsCount = 0;
            _this.pageRecordsStart = 0;
            _this.pageRecordsEnd = 0;
            _this.recordsPerPage = 10;
            _this.showAll = false;
            _this.showAdvanced = false;
            _this.currentPage = 1;
            _this.pageShow = 10;
            _this.searchAllCollectionConfigs = [];
            if (angular.isUndefined(_this.filterPropertiesList)) {
                _this.filterPropertiesList = {};
                var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName('_sku');
                filterPropertiesPromise.then(function (value) {
                    _this.metadataService.setPropertiesList(value, '_sku');
                    _this.filterPropertiesList['_sku'] = _this.metadataService.getPropertiesListByBaseEntityAlias('_sku');
                    _this.metadataService.formatPropertiesList(_this.filterPropertiesList['_sku'], '_sku');
                });
            }
            _this.skuCollectionConfig = {
                baseEntityName: "Sku",
                baseEntityAlias: "_sku",
                collectionConfig: _this.productBundleGroup.data.skuCollectionConfig,
                collectionObject: 'Sku'
            };
            _this.searchOptions = {
                options: [
                    {
                        name: "All",
                        value: "All"
                    },
                    {
                        name: "Product Type",
                        value: "productType"
                    },
                    {
                        name: "Brand",
                        value: "brand"
                    },
                    {
                        name: "Products",
                        value: "product"
                    },
                    {
                        name: "Skus",
                        value: "sku"
                    }
                ],
                selected: {
                    name: "All",
                    value: "All"
                },
                setSelected: function (searchOption) {
                    _this.searchOptions.selected = searchOption;
                    _this.getFiltersByTerm(_this.productBundleGroupFilters.keyword, searchOption);
                }
            };
            _this.navigation = {
                value: 'Basic',
                setValue: function (value) {
                    _this.value = value;
                }
            };
            _this.filterTemplatePath = _this.productBundlePartialsPath + "productbundlefilter.html";
            _this.productBundleGroupFilters = {};
            _this.productBundleGroupFilters.value = [];
            if (angular.isUndefined(_this.productBundleGroup.data.skuCollectionConfig)) {
                _this.productBundleGroup.data.skuCollectionConfig = {};
                _this.productBundleGroup.data.skuCollectionConfig.filterGroups = [];
            }
            if (!angular.isDefined(_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0])) {
                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0] = {};
                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];
            }
            var options = {
                filterGroupsConfig: _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup,
                columnsConfig: _this.productBundleGroup.data.skuCollectionConfig.columns,
            };
            _this.getCollection();
        };
        this.openCloseAndRefresh = function () {
            _this.showAdvanced = !_this.showAdvanced;
            if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.length) {
                _this.getCollection();
            }
        };
        this.deleteEntity = function (type) {
            if (angular.isNumber(type)) {
                _this.removeProductBundleGroupFilter(type);
            }
            else {
                _this.removeProductBundleGroup({ index: _this.index });
                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];
            }
        };
        this.getCollection = function () {
            var options = {
                filterGroupsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.filterGroups),
                columnsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.columns),
                currentPage: 1,
                pageShow: 10
            };
            var collectionPromise = _this.$hibachi.getEntity('Sku', options);
            collectionPromise.then(function (response) {
                _this.collection = response;
            });
        };
        this.increaseCurrentCount = function () {
            if (angular.isDefined(_this.totalPages) && _this.totalPages != _this.currentPage) {
                _this.currentPage++;
            }
            else {
                _this.currentPage = 1;
            }
        };
        this.resetCurrentCount = function () {
            _this.currentPage = 1;
        };
        this.getFiltersByTerm = function (keyword, filterTerm) {
            //save search
            _this.keyword = keyword;
            _this.filterTerm = filterTerm;
            _this.loading = true;
            _this.showAll = true;
            var _loadingCount;
            if (_this.timeoutPromise) {
                _this.$timeout.cancel(_this.timeoutPromise);
            }
            _this.timeoutPromise = _this.$timeout(function () {
                if (filterTerm.value === 'All') {
                    _this.showAll = true;
                    _this.productBundleGroupFilters.value = [];
                    _loadingCount = _this.searchOptions.options.length - 1;
                    for (var i = 0; i < _this.searchOptions.options.length; i++) {
                        if (i > 0) {
                            var option = _this.searchOptions.options[i];
                            (function (keyword, option) {
                                if (_this.searchAllCollectionConfigs.length <= 4) {
                                    _this.searchAllCollectionConfigs.push(_this.collectionConfigService.newCollectionConfig(_this.searchOptions.options[i].value));
                                }
                                _this.searchAllCollectionConfigs[i - 1].setKeywords(keyword);
                                _this.searchAllCollectionConfigs[i - 1].setCurrentPage(_this.currentPage);
                                _this.searchAllCollectionConfigs[i - 1].setPageShow(_this.pageShow);
                                //searchAllCollectionConfig.setAllRecords(true);
                                _this.searchAllCollectionConfigs[i - 1].getEntity().then(function (value) {
                                    _this.recordsCount = value.recordsCount;
                                    _this.pageRecordsStart = value.pageRecordsStart;
                                    _this.pageRecordsEnd = value.pageRecordsEnd;
                                    _this.totalPages = value.totalPages;
                                    var formattedProductBundleGroupFilters = _this.productBundleService.formatProductBundleGroupFilters(value.pageRecords, option, _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup);
                                    for (var j in formattedProductBundleGroupFilters) {
                                        if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.indexOf(formattedProductBundleGroupFilters[j]) == -1) {
                                            _this.productBundleGroupFilters.value.push(formattedProductBundleGroupFilters[j]);
                                            _this.$log.debug(formattedProductBundleGroupFilters[j]);
                                        }
                                    }
                                    // Increment Down The Loading Count
                                    _loadingCount--;
                                    // If the loadingCount drops to 0, then we can update scope
                                    if (_loadingCount == 0) {
                                        //This sorts the array of objects by the objects' "type" property alphabetically
                                        _this.productBundleGroupFilters.value = _this.utilityService.arraySorter(_this.productBundleGroupFilters.value, ["type", "name"]);
                                        _this.$log.debug(_this.productBundleGroupFilters.value);
                                        if (_this.productBundleGroupFilters.value.length == 0) {
                                            _this.currentPage = 0;
                                        }
                                    }
                                    _this.loading = false;
                                });
                            })(keyword, option);
                        }
                    }
                }
                else {
                    _this.showAll = false;
                    if (angular.isUndefined(_this.searchCollectionConfig) || filterTerm.value != _this.searchCollectionConfig.baseEntityName) {
                        _this.searchCollectionConfig = _this.collectionConfigService.newCollectionConfig(filterTerm.value);
                    }
                    _this.searchCollectionConfig.setKeywords(keyword);
                    _this.searchCollectionConfig.setCurrentPage(_this.currentPage);
                    _this.searchCollectionConfig.setPageShow(_this.pageShow);
                    _this.searchCollectionConfig.getEntity().then(function (value) {
                        _this.recordsCount = value.recordsCount;
                        _this.pageRecordsStart = value.pageRecordsStart;
                        _this.pageRecordsEnd = value.pageRecordsEnd;
                        _this.totalPages = value.totalPages;
                        _this.productBundleGroupFilters.value = _this.productBundleService.formatProductBundleGroupFilters(value.pageRecords, filterTerm, _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup) || [];
                        _this.loading = false;
                    });
                }
            }, 500);
        };
        this.addFilterToProductBundle = function (filterItem, include, index) {
            var collectionFilterItem = new CollectionFilterItem(filterItem.name, filterItem.type, filterItem.type, filterItem.propertyIdentifier, filterItem[filterItem.entityType.charAt(0).toLowerCase() + filterItem.entityType.slice(1) + 'ID'], filterItem[filterItem.entityType.charAt(0).toLowerCase() + filterItem.entityType.slice(1) + 'ID']);
            if (include === false) {
                collectionFilterItem.comparisonOperator = '!=';
            }
            else {
                collectionFilterItem.comparisonOperator = '=';
            }
            if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.length > 0) {
                collectionFilterItem.logicalOperator = 'OR';
            }
            if (angular.isDefined(_this.searchCollectionConfig)) {
                _this.searchCollectionConfig.addFilter(_this.searchCollectionConfig.baseEntityName + "ID", collectionFilterItem.value, "!=");
            }
            if (_this.showAll) {
                switch (collectionFilterItem.type) {
                    case 'Product Type':
                        _this.searchAllCollectionConfigs[0].addFilter("productTypeID", collectionFilterItem.value, "!=");
                        break;
                    case 'Brand':
                        _this.searchAllCollectionConfigs[1].addFilter("brandID", collectionFilterItem.value, "!=");
                        break;
                    case 'Products':
                        _this.searchAllCollectionConfigs[2].addFilter("productID", collectionFilterItem.value, "!=");
                        break;
                    case 'Skus':
                        _this.searchAllCollectionConfigs[3].addFilter("skuID", collectionFilterItem.value, "!=");
                        break;
                }
            }
            _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.push(collectionFilterItem);
            _this.productBundleGroup.forms[_this.formName].skuCollectionConfig.$setDirty();
            //reload the list to correct pagination show all takes too long for this to be graceful
            if (!_this.showAll) {
                _this.getFiltersByTerm(_this.keyword, _this.filterTerm);
            }
            else {
                //Removes the filter item from the left hand search result
                _this.productBundleGroupFilters.value.splice(index, 1);
            }
        };
        this.removeProductBundleGroupFilter = function (index) {
            //Pushes item back into array
            _this.productBundleGroupFilters.value.push(_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup[index]);
            //Sorts Array
            _this.productBundleGroupFilters.value = _this.utilityService.arraySorter(_this.productBundleGroupFilters.value, ["type", "name"]);
            //Removes the filter item from the filtergroup
            var collectionFilterItem = _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.splice(index, 1)[0];
            if (angular.isDefined(_this.searchCollectionConfig)) {
                _this.searchCollectionConfig.removeFilter(_this.searchCollectionConfig.baseEntityAlias + '.' + _this.searchCollectionConfig.baseEntityName + "ID", collectionFilterItem.value, "!=");
            }
            if (_this.showAll) {
                switch (collectionFilterItem.type) {
                    case 'Product Type':
                        _this.searchAllCollectionConfigs[0].removeFilter("_productType.productTypeID", collectionFilterItem.value, "!=");
                        break;
                    case 'Brand':
                        _this.searchAllCollectionConfigs[1].removeFilter("_brand.brandID", collectionFilterItem.value, "!=");
                        break;
                    case 'Products':
                        _this.searchAllCollectionConfigs[2].removeFilter("_product.productID", collectionFilterItem.value, "!=");
                        break;
                    case 'Skus':
                        _this.searchAllCollectionConfigs[3].removeFilter("_sku.skuID", collectionFilterItem.value, "!=");
                        break;
                }
            }
            if (!_this.showAll) {
                _this.getFiltersByTerm(_this.keyword, _this.filterTerm);
            }
            else {
                _this.productBundleGroupFilters.value.splice(index, 0, collectionFilterItem);
            }
        };
        this.init();
    }
    return SWProductBundleCollectionFilterItemTypeaheadController;
}());
exports.SWProductBundleCollectionFilterItemTypeaheadController = SWProductBundleCollectionFilterItemTypeaheadController;
var SWProductBundleCollectionFilterItemTypeahead = /** @class */ (function () {
    // @ngInject
    function SWProductBundleCollectionFilterItemTypeahead($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) {
        this.$log = $log;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.productBundleService = productBundleService;
        this.metadataService = metadataService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.$hibachi = $hibachi;
        this.productBundlePartialsPath = productBundlePartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            productBundleGroup: "=",
            index: "=",
            formName: "@"
        };
        this.controller = SWProductBundleCollectionFilterItemTypeaheadController;
        this.controllerAs = "swProductBundleCollectionFilteritemTypeahead";
        this.link = function ($scope, element, attrs, ctrl) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlecollectionfilteritemtypeahead.html";
    }
    SWProductBundleCollectionFilterItemTypeahead.Factory = function () {
        var directive = function ($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) { return new SWProductBundleCollectionFilterItemTypeahead($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            "$log", "$timeout", "collectionConfigService", "productBundleService", "metadataService", "utilityService", "formService", "$hibachi", "productBundlePartialsPath",
            "slatwallPathBuilder"
        ];
        return directive;
    };
    return SWProductBundleCollectionFilterItemTypeahead;
}());
exports.SWProductBundleCollectionFilterItemTypeahead = SWProductBundleCollectionFilterItemTypeahead;


/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CollectionFilterItem = /** @class */ (function () {
    function CollectionFilterItem(name, type, displayPropertyIdentifier, propertyIdentifier, displayValue, value, comparisonOperator, logicalOperator) {
        this.name = name;
        this.type = type;
        this.displayPropertyIdentifier = displayPropertyIdentifier;
        this.propertyIdentifier = propertyIdentifier;
        this.displayValue = displayValue;
        this.value = value;
        this.comparisonOperator = comparisonOperator;
        this.logicalOperator = logicalOperator;
    }
    return CollectionFilterItem;
}());
var SWProductBundleGroupController = /** @class */ (function () {
    // @ngInject
    function SWProductBundleGroupController($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath) {
        var _this = this;
        this.$log = $log;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.productBundleService = productBundleService;
        this.metadataService = metadataService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.$hibachi = $hibachi;
        this.productBundlePartialsPath = productBundlePartialsPath;
        this.init = function () {
            _this.maxRecords = 10;
            _this.recordsCount = 0;
            _this.pageRecordsStart = 0;
            _this.pageRecordsEnd = 0;
            _this.recordsPerPage = 10;
            _this.showAll = false;
            _this.showAdvanced = false;
            _this.currentPage = 1;
            _this.pageShow = 10;
            _this.searchAllCollectionConfigs = [];
            if (angular.isUndefined(_this.filterPropertiesList)) {
                _this.filterPropertiesList = {};
                var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName('_sku');
                filterPropertiesPromise.then(function (value) {
                    _this.metadataService.setPropertiesList(value, '_sku');
                    _this.filterPropertiesList['_sku'] = _this.metadataService.getPropertiesListByBaseEntityAlias('_sku');
                    _this.metadataService.formatPropertiesList(_this.filterPropertiesList['_sku'], '_sku');
                });
            }
            _this.searchOptions = {
                options: [
                    {
                        name: "All",
                        value: "All"
                    },
                    {
                        name: "Product Type",
                        value: "productType"
                    },
                    {
                        name: "Brand",
                        value: "brand"
                    },
                    {
                        name: "Products",
                        value: "product"
                    },
                    {
                        name: "Skus",
                        value: "sku"
                    }
                ],
                selected: {
                    name: "All",
                    value: "All"
                },
                setSelected: function (searchOption) {
                    _this.searchOptions.selected = searchOption;
                }
            };
            _this.navigation = {
                value: 'Basic',
                setValue: function (value) {
                    _this.value = value;
                }
            };
            _this.filterTemplatePath = _this.productBundlePartialsPath + "productbundlefilter.html";
            _this.productBundleGroupFilters = {};
            _this.productBundleGroupFilters.value = [];
            if (angular.isUndefined(_this.productBundleGroup.data.skuCollectionConfig) || _this.productBundleGroup.data.skuCollectionConfig === null) {
                _this.productBundleGroup.data.skuCollectionConfig = _this.collectionConfigService.newCollectionConfig("Sku").getCollectionConfig();
            }
            var options = {
                filterGroupsConfig: _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup,
                columnsConfig: _this.productBundleGroup.data.skuCollectionConfig.columns,
            };
            _this.getCollection();
        };
        this.deleteEntity = function (type) {
            _this.removeProductBundleGroup({ index: _this.index });
            _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];
        };
        this.getCollection = function () {
            var options = {
                filterGroupsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.filterGroups),
                columnsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.columns),
                currentPage: 1,
                pageShow: 10
            };
            var collectionPromise = _this.$hibachi.getEntity('Sku', options);
            collectionPromise.then(function (response) {
                _this.collection = response;
            });
        };
        this.increaseCurrentCount = function () {
            if (angular.isDefined(_this.totalPages) && _this.totalPages != _this.currentPage) {
                _this.currentPage++;
            }
            else {
                _this.currentPage = 1;
            }
        };
        this.resetCurrentCount = function () {
            _this.currentPage = 1;
        };
        this.save = function () {
            var savePromise = _this.productBundleGroup.$$save();
            savePromise.then(function (response) {
                _this.productBundleGroup.data.$$toggleEdit();
                _this.refreshProductBundleGroup();
            }).catch(function (data) {
                //error handling handled by $$save
            });
        };
        this.saveAndAddBundleGroup = function () {
            var savePromise = _this.productBundleGroup.$$save();
            savePromise.then(function (response) {
                _this.productBundleGroup.data.$$toggleEdit();
                _this.addProductBundleGroup();
            }).catch(function (data) {
                //error handling handled by $$save
            });
        };
        this.init();
    }
    return SWProductBundleGroupController;
}());
var SWProductBundleGroup = /** @class */ (function () {
    // @ngInject
    function SWProductBundleGroup($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) {
        this.$log = $log;
        this.$timeout = $timeout;
        this.collectionConfigService = collectionConfigService;
        this.productBundleService = productBundleService;
        this.metadataService = metadataService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.$hibachi = $hibachi;
        this.productBundlePartialsPath = productBundlePartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            productBundleGroup: "=",
            productBundleGroups: "=",
            index: "=",
            addProductBundleGroup: "&",
            removeProductBundleGroup: "&",
            refreshProductBundleGroup: "&",
            formName: "@"
        };
        this.controller = SWProductBundleGroupController;
        this.controllerAs = "swProductBundleGroup";
        this.link = function ($scope, element, attrs, ctrl) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlegroup.html";
    }
    SWProductBundleGroup.Factory = function () {
        var directive = function ($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) { return new SWProductBundleGroup($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            "$log", "$timeout", "collectionConfigService", "productBundleService", "metadataService", "utilityService", "formService", "$hibachi", "productBundlePartialsPath",
            "slatwallPathBuilder"
        ];
        return directive;
    };
    return SWProductBundleGroup;
}());
exports.SWProductBundleGroup = SWProductBundleGroup;


/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWProductBundleGroupsController = /** @class */ (function () {
    //@ngInject
    function SWProductBundleGroupsController($scope, $element, $attrs, $log, productBundleService, $hibachi) {
        var _this = this;
        this.$scope = $scope;
        this.$element = $element;
        this.$attrs = $attrs;
        this.$log = $log;
        this.productBundleService = productBundleService;
        this.$hibachi = $hibachi;
        this.removeProductBundleGroup = function (index) {
            if (angular.isDefined(_this.productBundleGroups[index]) && _this.productBundleGroups[index].$$isPersisted()) {
                _this.productBundleGroups[index].$$delete().then(function (data) {
                    //no more logic to run
                });
            }
            _this.productBundleGroups.splice(index, 1);
        };
        this.addProductBundleGroup = function () {
            var productBundleGroup = _this.$hibachi.newProductBundleGroup();
            productBundleGroup.$$setProductBundleSku(_this.sku);
            productBundleGroup = _this.productBundleService.decorateProductBundleGroup(productBundleGroup);
        };
        this.refreshProductBundleGroup = function () {
            for (var pbg in _this.productBundleGroups) {
                if (_this.productBundleGroups[pbg]['forms'] != undefined || _this.productBundleGroups[pbg]['forms']["createProductBundle" + pbg] != undefined) {
                    //updates the min and max from the raw form values instead of making another http call.
                    if (_this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['maximumQuantity'] != undefined && _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['maximumQuantity']['$modelValue'] != undefined) {
                        if (_this.productBundleGroups["" + pbg]['data']['maximumQuantity'] !== _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['maximumQuantity']['$modelValue']) {
                            _this.productBundleGroups["" + pbg]['data']['maximumQuantity'] = _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['maximumQuantity']['$modelValue'];
                        }
                    }
                    if (_this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['minimumQuantity'] != undefined && _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['minimumQuantity']['$modelValue'] != undefined) {
                        if (_this.productBundleGroups["" + pbg]['data']['minimumQuantity'] !== _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['minimumQuantity']['$modelValue']) {
                            _this.productBundleGroups["" + pbg]['data']['minimumQuantity'] = _this.productBundleGroups[pbg]['forms']["form.createProductBundle" + pbg]['minimumQuantity']['$modelValue'];
                        }
                    }
                }
            }
        };
        $scope.editing = $scope.editing || true;
        angular.forEach(this.productBundleGroups, function (obj) {
            productBundleService.decorateProductBundleGroup(obj);
            obj.data.$$editing = false;
        });
    }
    return SWProductBundleGroupsController;
}());
exports.SWProductBundleGroupsController = SWProductBundleGroupsController;
var SWProductBundleGroups = /** @class */ (function () {
    function SWProductBundleGroups($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) {
        this.restrict = 'EA';
        this.scope = {
            sku: "=",
            productBundleGroups: "="
        };
        this.bindToController = {
            sku: "=",
            productBundleGroups: "="
        };
        this.controller = SWProductBundleGroupsController;
        this.controllerAs = "swProductBundleGroups";
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlegroups.html";
    }
    SWProductBundleGroups.Factory = function () {
        var directive = function ($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) { return new SWProductBundleGroups($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$log',
            '$hibachi',
            'metadataService',
            'productBundlePartialsPath',
            'productBundleService',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWProductBundleGroups;
}());
exports.SWProductBundleGroups = SWProductBundleGroups;


/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWProductBundleGroupType = /** @class */ (function () {
    function SWProductBundleGroupType($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) {
        return {
            restrict: 'A',
            templateUrl: slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlegrouptype.html",
            scope: {
                productBundleGroup: "="
            },
            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
                    $log.debug('productBundleGrouptype');
                    $log.debug($scope.productBundleGroup);
                    $scope.productBundleGroupTypes = {};
                    $scope.$$id = "productBundleGroupType";
                    $scope.productBundleGroupTypes.value = [];
                    $scope.productBundleGroupTypes.$$adding = false;
                    $scope.productBundleGroupTypeSaving = false;
                    $scope.productBundleGroupType = {};
                    $scope.productBundleGroupTypeCollection = collectionConfigService.newCollectionConfig(("Type"));
                    $scope.productBundleGroupTypeCollection.setAllRecords(true);
                    $scope.productBundleGroupTypeCollection.addFilter("parentType.systemCode", "productBundleGroupType", "=");
                    if (angular.isUndefined($scope.productBundleGroup.data.productBundleGroupType)) {
                        var productBundleGroupType = $hibachi.newType();
                        var parentType = $hibachi.newType();
                        parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';
                        productBundleGroupType.$$setParentType(parentType);
                        $scope.productBundleGroup.$$setProductBundleGroupType(productBundleGroupType);
                    }
                    /**
                     * Sets the state to adding and sets the initial data.
                     */
                    $scope.productBundleGroupTypes.setAdding = function () {
                        $scope.productBundleGroupTypes.$$adding = !$scope.productBundleGroupTypes.$$adding;
                        if (!$scope.productBundleGroupTypes.$$adding) {
                            var productBundleGroupType = $hibachi.newType();
                            var parentType = $hibachi.newType();
                            parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';
                            productBundleGroupType.$$setParentType(parentType);
                            $scope.productBundleGroup.data.productBundleGroupType.data.typeName = "";
                            productBundleGroupType.data.typeName = $scope.productBundleGroup.data.productBundleGroupType.data.typeName;
                            productBundleGroupType.data.typeDescription = '';
                            productBundleGroupType.data.typeNameCode = '';
                            angular.extend($scope.productBundleGroup.data.productBundleGroupType, productBundleGroupType);
                            //formService.getForm('form.addProductBundleGroupType').$setDirty();
                        }
                    };
                    $scope.showAddProductBundleGroupTypeBtn = false;
                    /**
                     * Handles looking up the keyword and populating the dropdown as a user types.
                     */
                    $scope.productBundleGroupTypes.getTypesByKeyword = function (keyword) {
                        $log.debug('getTypesByKeyword');
                        var filterGroupsConfig = '[' +
                            ' {  ' +
                            '"filterGroup":[  ' +
                            ' {  ' +
                            ' "propertyIdentifier":"_type.parentType.systemCode",' +
                            ' "comparisonOperator":"=",' +
                            ' "value":"productBundleGroupType",' +
                            ' "ormtype":"string",' +
                            ' "conditionDisplay":"Equals"' +
                            '},' +
                            '{' +
                            '"logicalOperator":"AND",' +
                            ' "propertyIdentifier":"_type.typeName",' +
                            ' "comparisonOperator":"like",' +
                            ' "ormtype":"string",' +
                            ' "value":"%' + keyword + '%"' +
                            '  }' +
                            ' ]' +
                            ' }' +
                            ']';
                        return $hibachi.getEntity('type', { filterGroupsConfig: filterGroupsConfig.trim() })
                            .then(function (value) {
                            $log.debug('typesByKeyword');
                            $log.debug(value);
                            $scope.productBundleGroupTypes.value = value.pageRecords;
                            var myLength = keyword.length;
                            if (myLength > 0) {
                                $scope.showAddProductBundleGroupTypeBtn = true;
                            }
                            else {
                                $scope.showAddProductBundleGroupTypeBtn = false;
                            }
                            return $scope.productBundleGroupTypes.value;
                        });
                    };
                    /**
                     * Handles user selection of the dropdown.
                     */
                    $scope.selectProductBundleGroupType = function (item) {
                        angular.extend($scope.productBundleGroup.data.productBundleGroupType.data, item);
                        var parentType = $hibachi.newType();
                        parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';
                        $scope.productBundleGroup.data.productBundleGroupType.$$setParentType(parentType);
                        $scope.showAddProductBundleGroupTypeBtn = false;
                    };
                    /**
                     * Closes the add screen
                     */
                    $scope.closeAddScreen = function () {
                        $scope.productBundleGroupTypes.$$adding = false;
                        $scope.showAddProductBundleGroupTypeBtn = false;
                    };
                    /**
                     * Clears the type name
                     */
                    $scope.clearTypeName = function () {
                        if (angular.isDefined($scope.productBundleGroup.data.productBundleGroupType)) {
                            $scope.productBundleGroup.data.productBundleGroupType.data.typeName = '';
                        }
                    };
                    /**
                     * Saves product bundle group type
                     */
                    $scope.saveProductBundleGroupType = function () {
                        $scope.productBundleGroupTypeSaving = true;
                        //Gets the promise from save                    
                        var promise = $scope.productBundleGroup.data.productBundleGroupType.$$save();
                        promise.then(function (response) {
                            //Calls close function
                            if (promise.$$state.status) {
                                $scope.productBundleGroupTypeSaving = false;
                                $scope.closeAddScreen();
                            }
                        }, function () {
                            $scope.productBundleGroupTypeSaving = false;
                        });
                    };
                    //Sets up clickOutside Directive call back arguments
                    $scope.clickOutsideArgs = {
                        callBackActions: [$scope.closeAddScreen]
                    };
                    /**
                     * Works with swclickoutside directive to close dialog
                     */
                    $scope.closeThis = function (clickOutsideArgs) {
                        //Check against the object state
                        if (!$scope.productBundleGroup.data.productBundleGroupType.$$isPersisted()) {
                            //Perform all callback actions
                            for (var callBackAction in clickOutsideArgs.callBackActions) {
                                clickOutsideArgs.callBackActions[callBackAction]();
                            }
                        }
                    };
                }]
        };
    }
    SWProductBundleGroupType.Factory = function () {
        var directive = function ($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) { return new SWProductBundleGroupType($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder); };
        directive.$inject = [
            '$http',
            '$log',
            '$hibachi',
            'formService',
            'collectionConfigService',
            'productBundlePartialsPath',
            'productBundleService',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWProductBundleGroupType;
}());
exports.SWProductBundleGroupType = SWProductBundleGroupType;


/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var CreateBundleController = /** @class */ (function () {
    //@ngInject
    function CreateBundleController($scope, $location, $log, $rootScope, $window, $hibachi, dialogService, alertService, productBundleService, formService, productBundlePartialsPath) {
        $scope.productBundlePartialsPath = productBundlePartialsPath;
        var getParameterByName = function (name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"), results = regex.exec(location.search);
            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        };
        $scope.$id = "create-bundle-controller";
        //if this view is part of the dialog section, call the inherited function
        if (angular.isDefined($scope.scrollToTopOfDialog)) {
            $scope.scrollToTopOfDialog();
        }
        var productID = getParameterByName('productID');
        var productBundleConstructor = function () {
            $log.debug($scope);
            if (angular.isDefined($scope.product)) {
                for (var form in $scope.product.forms) {
                    formService.resetForm($scope.product.forms[form]);
                }
                if (angular.isDefined($scope.product.data.skus[0])) {
                    for (var form in $scope.product.data.skus[0].forms) {
                        formService.resetForm($scope.product.data.skus[0].forms[form]);
                    }
                }
                if (angular.isDefined($scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup)) {
                    for (var form in $scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup.forms) {
                        formService.resetForm($scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup.forms[form]);
                    }
                }
            }
            $scope.product = $hibachi.newProduct();
            var brand = $hibachi.newBrand();
            var productType = $hibachi.newProductType();
            $scope.product.$$setBrand(brand);
            $scope.product.$$setProductType(productType);
            $scope.product.$$addSku();
            $scope.product.data.skus[0].data.productBundleGroups = [];
        };
        $scope.productBundleGroup;
        if (angular.isDefined(productID) && productID !== '') {
            var productPromise = $hibachi.getProduct({ id: productID });
            productPromise.promise.then(function () {
                $log.debug(productPromise.value);
                productPromise.value.$$getSkus().then(function () {
                    productPromise.value.data.skus[0].$$getProductBundleGroups().then(function () {
                        $scope.product = productPromise.value;
                        angular.forEach($scope.product.data.skus[0].data.productBundleGroups, function (productBundleGroup) {
                            productBundleGroup.$$getProductBundleGroupType();
                            productBundleService.decorateProductBundleGroup(productBundleGroup);
                            productBundleGroup.data.$$editing = false;
                        });
                    });
                });
            }, productBundleConstructor());
        }
        else {
            productBundleConstructor();
        }
    }
    return CreateBundleController;
}());
exports.CreateBundleController = CreateBundleController;


/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var core_module_1 = __webpack_require__(11);
//services
var productbundleservice_1 = __webpack_require__(702);
//controllers
var create_bundle_controller_1 = __webpack_require__(700);
//directives
var swproductbundlegrouptype_1 = __webpack_require__(699);
var swproductbundlegroups_1 = __webpack_require__(698);
var swproductbundlegroup_1 = __webpack_require__(697);
var swproductbundlecollectionfilteritemtypeahead_1 = __webpack_require__(696);
//filters
var productbundlemodule = angular.module('hibachi.productbundle', [core_module_1.coremodule.name]).config(function () {
})
    //constants
    .constant('productBundlePartialsPath', 'productbundle/components/')
    //services
    .service('productBundleService', productbundleservice_1.ProductBundleService)
    //controllers
    .controller('create-bundle-controller', create_bundle_controller_1.CreateBundleController)
    //directives
    .directive('swProductBundleGroupType', swproductbundlegrouptype_1.SWProductBundleGroupType.Factory())
    .directive('swProductBundleGroups', swproductbundlegroups_1.SWProductBundleGroups.Factory())
    .directive('swProductBundleGroup', swproductbundlegroup_1.SWProductBundleGroup.Factory())
    .directive('swProductBundleCollectionFilterItemTypeahead', swproductbundlecollectionfilteritemtypeahead_1.SWProductBundleCollectionFilterItemTypeahead.Factory());
exports.productbundlemodule = productbundlemodule;


/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var ProductBundleService = /** @class */ (function () {
    //ngInject
    function ProductBundleService($log, $hibachi, utilityService) {
        var _this = this;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.decorateProductBundleGroup = function (productBundleGroup) {
            productBundleGroup.data.$$editing = true;
            var prototype = {
                $$setMinimumQuantity: function (quantity) {
                    if (quantity < 0 || quantity === null) {
                        this.minimumQuantity = 0;
                    }
                    if (quantity > this.maximumQuantity) {
                        this.maximumQuantity = quantity;
                    }
                },
                $$setMaximumQuantity: function (quantity) {
                    if (quantity < 1 || quantity === null) {
                        this.maximumQuantity = 1;
                    }
                    if (this.maximumQuantity < this.minimumQuantity) {
                        this.minimumQuantity = this.maximumQuantity;
                    }
                },
                $$setActive: function (value) {
                    this.active = value;
                },
                $$toggleEdit: function () {
                    if (angular.isUndefined(this.$$editing) || this.$$editing === false) {
                        this.$$editing = true;
                    }
                    else {
                        this.$$editing = false;
                    }
                }
            };
            angular.extend(productBundleGroup.data, prototype);
        };
        this.formatProductBundleGroupFilters = function (productBundleGroupFilters, filterTerm) {
            _this.$log.debug('FORMATTING PRODUCT BUNDLE FILTERs');
            _this.$log.debug(productBundleGroupFilters);
            _this.$log.debug(filterTerm);
            if (filterTerm.value === 'sku') {
                for (var i in productBundleGroupFilters) {
                    productBundleGroupFilters[i].name = productBundleGroupFilters[i][filterTerm.value + 'Code'];
                    productBundleGroupFilters[i].type = filterTerm.name;
                    productBundleGroupFilters[i].entityType = filterTerm.value;
                    productBundleGroupFilters[i].propertyIdentifier = '_sku.skuID';
                }
            }
            else {
                for (var i in productBundleGroupFilters) {
                    productBundleGroupFilters[i].name = productBundleGroupFilters[i][filterTerm.value + 'Name'];
                    productBundleGroupFilters[i].type = filterTerm.name;
                    productBundleGroupFilters[i].entityType = filterTerm.value;
                    if (filterTerm.value === 'brand' || filterTerm.value === 'productType') {
                        productBundleGroupFilters[i].propertyIdentifier = '_sku.product.' + filterTerm.value + '.' + filterTerm.value + 'ID';
                    }
                    else {
                        productBundleGroupFilters[i].propertyIdentifier = '_sku.' + filterTerm.value + '.' + filterTerm.value + 'ID';
                    }
                }
            }
            _this.$log.debug(productBundleGroupFilters);
            return productBundleGroupFilters;
        };
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
    }
    return ProductBundleService;
}());
exports.ProductBundleService = ProductBundleService;


/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAddSkuPriceModalLauncherController = /** @class */ (function () {
    //@ngInject
    function SWAddSkuPriceModalLauncherController($hibachi, entityService, formService, listingService, observerService, skuPriceService, utilityService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.entityService = entityService;
        this.formService = formService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.skuPriceService = skuPriceService;
        this.utilityService = utilityService;
        this.baseName = "j-add-sku-item-";
        this.saveSuccess = true;
        this.initData = function () {
            //these are populated in the link function initially
            _this.skuPrice = _this.entityService.newEntity('SkuPrice');
            _this.skuPrice.$$setSku(_this.sku);
            if (angular.isUndefined(_this.disableAllFieldsButPrice)) {
                _this.disableAllFieldsButPrice = false;
            }
            if (angular.isUndefined(_this.defaultCurrencyOnly)) {
                _this.defaultCurrencyOnly = false;
            }
            if (angular.isDefined(_this.minQuantity) && !isNaN(parseInt(_this.minQuantity))) {
                _this.skuPrice.data.minQuantity = parseInt(_this.minQuantity);
            }
            if (angular.isDefined(_this.maxQuantity) && !isNaN(parseInt(_this.minQuantity))) {
                _this.skuPrice.data.maxQuantity = parseInt(_this.maxQuantity);
            }
            if (angular.isUndefined(_this.currencyCodeOptions) && angular.isDefined(_this.eligibleCurrencyCodeList)) {
                _this.currencyCodeOptions = _this.eligibleCurrencyCodeList.split(",");
            }
            if (_this.defaultCurrencyOnly) {
                _this.skuPrice.data.currencyCode = "USD"; //temporarily hardcoded
            }
            else if (angular.isDefined(_this.currencyCode)) {
                _this.skuPrice.data.currencyCode = _this.currencyCode;
            }
            else if (angular.isDefined(_this.currencyCodeOptions) && _this.currencyCodeOptions.length) {
                _this.skuPrice.data.currencyCode = _this.currencyCodeOptions[0];
            }
            _this.observerService.notify("pullBindings");
        };
        this.save = function () {
            _this.observerService.notify("updateBindings");
            var firstSkuPriceForSku = !_this.skuPriceService.hasSkuPrices(_this.sku.data.skuID);
            var savePromise = _this.skuPrice.$$save();
            savePromise.then(function (response) {
                _this.saveSuccess = true;
                _this.observerService.notify('skuPricesUpdate', { skuID: _this.sku.data.skuID, refresh: true });
                //temporarily overriding for USD need to get this setting accessable to client side
                if (angular.isDefined(_this.listingID) &&
                    _this.skuPrice.data.currencyCode == "USD") {
                    var pageRecords = _this.listingService.getListingPageRecords(_this.listingID);
                    for (var i = 0; i < pageRecords.length; i++) {
                        if (angular.isDefined(pageRecords[i].skuID) &&
                            pageRecords[i].skuID == _this.sku.data.skuID) {
                            var skuPageRecord = pageRecords[i];
                            var index = i + 1;
                            while (index < pageRecords.length && angular.isUndefined(pageRecords[index].skuID)) {
                                //if there is a place in the listing to insert the new sku price lets insert it
                                if ((pageRecords[index].minQuantity <= _this.skuPrice.data.minQuantity) &&
                                    (index + 1 < pageRecords.length && (pageRecords[index + 1].minQuantity >= _this.skuPrice.data.minQuantity ||
                                        angular.isDefined(pageRecords[index + 1].skuID))) || index + 1 == pageRecords.length) {
                                    _this.skuPrice.data.eligibleCurrencyCodeList = _this.currencyCodeOptions.join(",");
                                    //spoof the page record
                                    var skuPriceForListing = {};
                                    for (var key in _this.skuPrice.data) {
                                        skuPriceForListing[key] = _this.skuPrice.data[key];
                                    }
                                    skuPriceForListing["sku_skuID"] = _this.sku.skuID;
                                    skuPriceForListing["sku_skuCode"] = _this.sku.skuCode;
                                    skuPriceForListing["sku_skuDefinition"] = _this.sku.skuDefinition;
                                    pageRecords.splice(index + 1, 0, skuPriceForListing);
                                    break;
                                }
                                index++;
                            }
                        }
                    }
                }
            }, function (reason) {
                //error callback
                _this.saveSuccess = false;
            }).finally(function () {
                if (_this.saveSuccess) {
                    for (var key in _this.skuPrice.data) {
                        _this.skuPrice.data[key] = null;
                    }
                    _this.initData();
                    if (firstSkuPriceForSku) {
                        _this.listingService.getCollection(_this.listingID);
                    }
                    _this.listingService.notifyListingPageRecordsUpdate(_this.listingID);
                }
            });
            return savePromise;
        };
        this.uniqueName = this.baseName + this.utilityService.createID(16);
        this.formName = "addSkuPrice" + this.utilityService.createID(16);
        this.skuPrice = this.entityService.newEntity('SkuPrice');
    }
    return SWAddSkuPriceModalLauncherController;
}());
exports.SWAddSkuPriceModalLauncherController = SWAddSkuPriceModalLauncherController;
var SWAddSkuPriceModalLauncher = /** @class */ (function () {
    function SWAddSkuPriceModalLauncher($hibachi, entityService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.entityService = entityService;
        this.scopeService = scopeService;
        this.collectionConfigService = collectionConfigService;
        this.skuPartialsPath = skuPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.transclude = true;
        this.bindToController = {
            sku: "=?",
            pageRecord: "=?",
            minQuantity: "@?",
            maxQuantity: "@?",
            currencyCode: "@?",
            eligibleCurrencyCodeList: "@?",
            defaultCurrencyOnly: "=?",
            disableAllFieldsButPrice: "=?"
        };
        this.controller = SWAddSkuPriceModalLauncherController;
        this.controllerAs = "swAddSkuPriceModalLauncher";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive
                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
                    if (angular.isDefined(currentScope.pageRecord)) {
                        $scope.swAddSkuPriceModalLauncher.pageRecord = currentScope.pageRecord;
                        //sku record case
                        if (angular.isDefined(currentScope.pageRecord.skuID)) {
                            var skuData = {
                                skuID: currentScope.pageRecord.skuID,
                                skuCode: currentScope.pageRecord.skuCode,
                                skuDescription: currentScope.pageRecord.skuDescription,
                                eligibleCurrencyCodeList: currentScope.pageRecord.eligibleCurrencyCodeList
                            };
                            $scope.swAddSkuPriceModalLauncher.currencyCodeOptions = currentScope.pageRecord.eligibleCurrencyCodeList.split(",");
                            $scope.swAddSkuPriceModalLauncher.sku = _this.$hibachi.populateEntity('Sku', skuData);
                            $scope.swAddSkuPriceModalLauncher.skuPrice = _this.entityService.newEntity('SkuPrice');
                            $scope.swAddSkuPriceModalLauncher.skuPrice.$$setSku($scope.swAddSkuPriceModalLauncher.sku);
                        }
                    }
                    else {
                        throw ("swAddSkuPriceModalLauncher was unable to find the pageRecord that it needs!");
                    }
                    var listingScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
                    if (angular.isDefined(listingScope.swListingDisplay)) {
                        $scope.swAddSkuPriceModalLauncher.listingID = listingScope.swListingDisplay.tableID;
                    }
                    $scope.swAddSkuPriceModalLauncher.initData();
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "addskupricemodallauncher.html";
    }
    SWAddSkuPriceModalLauncher.Factory = function () {
        var directive = function ($hibachi, entityService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder) { return new SWAddSkuPriceModalLauncher($hibachi, entityService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'entityService',
            'scopeService',
            'collectionConfigService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWAddSkuPriceModalLauncher;
}());
exports.SWAddSkuPriceModalLauncher = SWAddSkuPriceModalLauncher;


/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDefaultSkuRadioController = /** @class */ (function () {
    //@ngInject
    function SWDefaultSkuRadioController($hibachi, defaultSkuService) {
        this.$hibachi = $hibachi;
        this.defaultSkuService = defaultSkuService;
        if (angular.isDefined(this.listingDisplayId) && angular.isDefined(this.columnId)) {
            this.selectionId = this.listingDisplayId + this.columnId;
        }
        else if (angular.isDefined(this.listingDisplayId)) {
            this.selectionId = this.listingDisplayId;
        }
        else {
            throw ("You must provide the listingDisplayId to SWDefaultSkuRadioController");
        }
        defaultSkuService.attachObserver(this.selectionId, this.productProductId);
        if (angular.isUndefined(this.selectionFieldName)) {
            this.selectionFieldName = this.selectionId + 'selection';
        }
        if (angular.isUndefined(this.skuId) && angular.isUndefined(this.sku)) {
            throw ("You must provide a skuID to SWDefaultSkuRadioController");
        }
        this.isDefaultSku = (this.skuId == this.productDefaultSkuSkuId);
        if (angular.isUndefined(this.sku)) {
            var skuData = {
                skuID: this.skuId
            };
            this.sku = this.$hibachi.populateEntity('Sku', skuData);
        }
    }
    return SWDefaultSkuRadioController;
}());
exports.SWDefaultSkuRadioController = SWDefaultSkuRadioController;
var SWDefaultSkuRadio = /** @class */ (function () {
    function SWDefaultSkuRadio(skuPartialsPath, slatwallPathBuilder) {
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuId: "@",
            sku: "=?",
            productProductId: "@?",
            productDefaultSkuSkuId: "@?",
            productId: "@?",
            listingDisplayId: "@?",
            columnId: "@?"
        };
        this.controller = SWDefaultSkuRadioController;
        this.controllerAs = "swDefaultSkuRadio";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "defaultskuradio.html";
    }
    SWDefaultSkuRadio.Factory = function () {
        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWDefaultSkuRadio(skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWDefaultSkuRadio;
}());
exports.SWDefaultSkuRadio = SWDefaultSkuRadio;


/***/ }),
/* 705 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDeleteSkuPriceModalLauncherController = /** @class */ (function () {
    //@ngInject
    function SWDeleteSkuPriceModalLauncherController($q, $hibachi, listingService, skuPriceService, utilityService) {
        var _this = this;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.listingService = listingService;
        this.skuPriceService = skuPriceService;
        this.utilityService = utilityService;
        this.baseName = "j-delete-sku-item-";
        this.delete = function () {
            var skuPricesToDelete = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuId, _this.skuPrice.data.minQuantity, _this.skuPrice.data.maxQuantity);
            var deletePromises = [];
            skuPricesToDelete.then(function (skuPrices) {
                for (var i = 0; i < skuPrices.length; i++) {
                    deletePromises.push(skuPrices[i].$$delete());
                }
            }, function (reason) {
                //error
            }).finally(function () {
                _this.$q.all(deletePromises).then(function (response) {
                    if (angular.isDefined(_this.listingID)) {
                        var pageRecords = _this.listingService.getListingPageRecords(_this.listingID);
                        for (var i = 0; i < pageRecords.length; i++) {
                            if (angular.isDefined(pageRecords[i].skuPriceID) &&
                                _this.skuPrice.data.skuPriceID == pageRecords[i].skuPriceID) {
                                pageRecords.splice(i, 1);
                                break;
                            }
                        }
                    }
                });
            });
            return _this.$q.all(deletePromises);
        };
        this.uniqueName = this.baseName + this.utilityService.createID(16);
    }
    return SWDeleteSkuPriceModalLauncherController;
}());
exports.SWDeleteSkuPriceModalLauncherController = SWDeleteSkuPriceModalLauncherController;
var SWDeleteSkuPriceModalLauncher = /** @class */ (function () {
    function SWDeleteSkuPriceModalLauncher($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.scopeService = scopeService;
        this.skuPartialsPath = skuPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            pageRecord: "=?"
        };
        this.controller = SWDeleteSkuPriceModalLauncherController;
        this.controllerAs = "swDeleteSkuPriceModalLauncher";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive
                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
                    if (angular.isDefined(currentScope.pageRecord)) {
                        $scope.swDeleteSkuPriceModalLauncher.pageRecord = currentScope.pageRecord;
                        if (angular.isDefined(currentScope.pageRecord.sku_skuID)) {
                            $scope.swDeleteSkuPriceModalLauncher.skuId = currentScope.pageRecord.sku_skuID;
                        }
                        if (angular.isDefined(currentScope.pageRecord.skuPriceID) && currentScope.pageRecord.skuPriceID.length) {
                            var skuPriceData = {
                                skuPriceID: currentScope.pageRecord.skuPriceID,
                                minQuantity: currentScope.pageRecord.minQuantity,
                                maxQuantity: currentScope.pageRecord.maxQuantity,
                                currencyCode: currentScope.pageRecord.currencyCode,
                                price: currentScope.pageRecord.price
                            };
                            $scope.swDeleteSkuPriceModalLauncher.skuPrice = _this.$hibachi.populateEntity('SkuPrice', skuPriceData);
                        }
                    }
                    else {
                        throw ("swDeleteSkuPriceModalLauncher was unable to find the pageRecord that it needs!");
                    }
                    var listingScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
                    if (angular.isDefined(listingScope.swListingDisplay)) {
                        $scope.swDeleteSkuPriceModalLauncher.listingID = listingScope.swListingDisplay.tableID;
                    }
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "deleteskupricemodallauncher.html";
    }
    SWDeleteSkuPriceModalLauncher.Factory = function () {
        var directive = function ($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWDeleteSkuPriceModalLauncher($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWDeleteSkuPriceModalLauncher;
}());
exports.SWDeleteSkuPriceModalLauncher = SWDeleteSkuPriceModalLauncher;


/***/ }),
/* 706 */,
/* 707 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWImageDetailModalLauncherController = /** @class */ (function () {
    //@ngInject
    function SWImageDetailModalLauncherController(observerService, formService, fileService, collectionConfigService, utilityService, $hibachi, $http) {
        var _this = this;
        this.observerService = observerService;
        this.formService = formService;
        this.fileService = fileService;
        this.collectionConfigService = collectionConfigService;
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.$http = $http;
        this.baseName = "j-image-detail";
        this.imageOptions = [];
        this.numberOfSkusWithImageFile = 0;
        this.fetchImageOptionData = function () {
            _this.imageOptionsAttachedToSku = _this.collectionConfigService.newCollectionConfig("Option");
            _this.imageOptionsAttachedToSku.addDisplayProperty('optionGroup.optionGroupName,optionName,optionCode,optionID');
            _this.imageOptionsAttachedToSku.addFilter('skus.skuID', _this.skuId, "=");
            _this.imageOptionsAttachedToSku.addFilter('optionGroup.imageGroupFlag', true, "=");
            _this.imageOptionsAttachedToSku.setAllRecords(true);
            _this.imageOptionsAttachedToSku.getEntity().then(function (data) {
                angular.forEach(data.records, function (value, key) {
                    _this.imageOptions.push(_this.$hibachi.populateEntity("Option", value));
                });
            }, function (reason) {
                throw ("Could not calculate affected skus in SWImageDetailModalLauncher because of: " + reason);
            });
            _this.otherSkusWithSameImageCollectionConfig = _this.collectionConfigService.newCollectionConfig("Sku");
            _this.otherSkusWithSameImageCollectionConfig.addFilter("imageFile", _this.imageFile, "=");
            _this.otherSkusWithSameImageCollectionConfig.setAllRecords(true);
            _this.otherSkusWithSameImageCollectionConfig.getEntity().then(function (data) {
                _this.skusAffectedCount = data.records.length;
            }, function (reason) {
                throw ("Could not calculate affected skus in SWImageDetailModalLauncher because of: " + reason);
            });
        };
        this.updateImage = function (rawImage) {
        };
        this.saveAction = function () {
            var data = new FormData();
            data.append('slatAction', "admin:entity.processProduct");
            data.append('processContext', "uploadDefaultImage");
            data.append('sRedirectAction', "admin:entity.detailProduct");
            data.append('preprocessDisplayedFlag', "1");
            data.append('ajaxRequest', "1");
            data.append('productID', _this.sku.data.product_productID);
            if (_this.customImageNameFlag) {
                data.append('imageFile', _this.imageFileName);
            }
            else {
                data.append('imageFile', _this.sku.data.imageFile);
            }
            data.append('uploadFile', _this.sku.data.uploadFile);
            var savePromise = _this.$http.post("/?s=1", data, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': undefined }
            });
            return savePromise;
        };
        this.cancelAction = function () {
            _this.observerService.notify(_this.imageFileUpdateEvent, _this.imagePath);
        };
        this.name = this.baseName + this.utilityService.createID(18);
        fileService.imageExists(this.imagePath).then(function () {
            _this.imagePathToUse = _this.imagePath;
        }, function () {
            _this.imagePathToUse = '/assets/images/image-placeholder.jpg';
        }).finally(function () {
            var skuData = {
                skuID: _this.skuId,
                skuCode: _this.skuCode,
                imageFileName: _this.imageFileName,
                imagePath: _this.imagePathToUse,
                imageFile: _this.imageFile
            };
            _this.sku = _this.$hibachi.populateEntity("Sku", skuData);
            _this.imageFileUpdateEvent = "file:" + _this.imagePath;
            _this.observerService.attach(_this.updateImage, _this.imageFileUpdateEvent, _this.skuId);
            _this.fetchImageOptionData();
        });
    }
    return SWImageDetailModalLauncherController;
}());
exports.SWImageDetailModalLauncherController = SWImageDetailModalLauncherController;
var SWImageDetailModalLauncher = /** @class */ (function () {
    function SWImageDetailModalLauncher(skuPartialsPath, slatwallPathBuilder) {
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuId: "@",
            skuCode: "@",
            imagePath: "@",
            imageFile: "@",
            imageFileName: "@"
        };
        this.controller = SWImageDetailModalLauncherController;
        this.controllerAs = "swImageDetailModalLauncher";
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "imagedetailmodallauncher.html";
    }
    SWImageDetailModalLauncher.Factory = function () {
        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWImageDetailModalLauncher(skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWImageDetailModalLauncher;
}());
exports.SWImageDetailModalLauncher = SWImageDetailModalLauncher;


/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWPricingManagerController = /** @class */ (function () {
    //@ngInject
    function SWPricingManagerController(collectionConfigService) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.productCollectionConfig = this.collectionConfigService.newCollectionConfig("Product");
        this.productCollectionConfig.addFilter("productID", this.productId, "=");
        this.productCollectionConfig.addDisplayProperty("productID,defaultSku.currencyCode");
        this.productCollectionConfig.getEntity().then(function (response) {
            _this.product = response.pageRecords[0];
        }, function (reason) {
        });
    }
    return SWPricingManagerController;
}());
exports.SWPricingManagerController = SWPricingManagerController;
var SWPricingManager = /** @class */ (function () {
    // @ngInject
    function SWPricingManager($hibachi, skuPartialsPath, slatwallPathBuilder) {
        this.$hibachi = $hibachi;
        this.skuPartialsPath = skuPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'EA';
        this.priority = 1000;
        this.scope = {};
        this.bindToController = {
            productId: "@",
            trackInventory: "=?"
        };
        this.controller = SWPricingManagerController;
        this.controllerAs = "swPricingManager";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "pricingmanager.html";
    }
    SWPricingManager.Factory = function () {
        var directive = function ($hibachi, skuPartialsPath, slatwallPathBuilder) { return new SWPricingManager($hibachi, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWPricingManager;
}());
exports.SWPricingManager = SWPricingManager;


/***/ }),
/* 709 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuCodeEditController = /** @class */ (function () {
    //@ngInject
    function SWSkuCodeEditController(historyService, listingService, observerService, skuPriceService, utilityService, $hibachi, $filter, $timeout) {
        this.historyService = historyService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.skuPriceService = skuPriceService;
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.$filter = $filter;
        this.$timeout = $timeout;
        this.showSave = true;
        this.baseEntityName = "Product";
        console.log('skucodeedit');
        if (angular.isDefined(this.pageRecord)) {
            this.pageRecord.edited = false;
        }
        this.formName = this.utilityService.createID(32);
        if (angular.isUndefined(this.skuId) && angular.isDefined(this.bundledSkuSkuId)) {
            this.skuId = this.bundledSkuSkuId;
        }
        if (angular.isUndefined(this.price) && angular.isDefined(this.bundledSkuPrice)) {
            this.price = this.bundledSkuPrice;
        }
        if (angular.isDefined(this.sku)) {
            this.sku.data.price = this.currencyFilter(this.sku.data.price, this.currencyCode, 2, false);
        }
        if (angular.isDefined(this.skuPrice)) {
            this.skuPrice.data.price = this.currencyFilter(this.skuPrice.data.price, this.currencyCode, 2, false);
        }
        if (angular.isDefined(this.bundledSkuSkuCode)) {
            this.skuCode = this.bundledSkuSkuCode;
        }
        if (angular.isDefined(this.skuId) && angular.isUndefined(this.sku)) {
            var skuData = {
                skuID: this.skuId,
                skuCode: this.skuCode
            };
            this.sku = this.$hibachi.populateEntity("Sku", skuData);
        }
    }
    return SWSkuCodeEditController;
}());
exports.SWSkuCodeEditController = SWSkuCodeEditController;
var SWSkuCodeEdit = /** @class */ (function () {
    function SWSkuCodeEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.observerService = observerService;
        this.historyService = historyService;
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuId: "@?",
            skuPriceId: "@?",
            skuCode: "@?",
            price: "@?",
            baseEntityId: "@?",
            baseEntityName: "@?",
            bundledSkuSkuId: "@?",
            bundledSkuSkuCode: "@?",
            bundledSkuCurrencyCode: "@?",
            bundledSkuPrice: "@?",
            eligibleCurrencyCodeList: "@?",
            listingDisplayId: "@?",
            currencyCode: "@?",
            masterPriceObject: "=?",
            revertToValue: "=?",
            sku: "=?",
            skuPrice: "=?"
        };
        this.controller = SWSkuCodeEditController;
        this.controllerAs = "swSkuCodeEdit";
        this.link = function (scope, element, attrs, formController, transcludeFn) {
            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecord");
            if (angular.isDefined(currentScope["pageRecord"])) {
                scope.swSkuCodeEdit.pageRecord = currentScope["pageRecord"];
            }
            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecordKey");
            if (angular.isDefined(currentScope["pageRecordKey"])) {
                scope.swSkuCodeEdit.pageRecordIndex = currentScope["pageRecordKey"];
            }
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skucodeedit.html";
    }
    SWSkuCodeEdit.Factory = function () {
        var directive = function (observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuCodeEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'observerService',
            'historyService',
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuCodeEdit;
}());
exports.SWSkuCodeEdit = SWSkuCodeEdit;


/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuCurrencySelectorController = /** @class */ (function () {
    //@ngInject
    function SWSkuCurrencySelectorController(collectionConfigService, observerService, $hibachi) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.$hibachi = $hibachi;
        this.currencyCodes = [];
        this.baseEntityName = "Product";
        this.select = function (currencyCode) {
            _this.selectedCurrencyCode = currencyCode;
            _this.observerService.notifyAndRecord(_this.selectCurrencyCodeEventName, currencyCode);
        };
        //this should be an rbkey
        this.currencyCodes.push("All");
        if (angular.isDefined(this.baseEntityId)) {
            this.selectCurrencyCodeEventName = "currencyCodeSelect" + this.baseEntityId;
        }
        this.selectedCurrencyCode = "USD";
        this.observerService.notifyAndRecord(this.selectCurrencyCodeEventName, this.selectedCurrencyCode);
        if (angular.isDefined(this.baseEntityName) && angular.isDefined(this.baseEntityId)) {
            this.baseEntityCollectionConfig = this.collectionConfigService.newCollectionConfig(this.baseEntityName);
            this.baseEntityCollectionConfig.addDisplayProperty("eligibleCurrencyCodeList");
            this.baseEntityCollectionConfig.addFilter("productID", this.baseEntityId, "=");
            this.baseEntityCollectionConfig.getEntity().then(function (response) {
                _this.product = _this.$hibachi.populateEntity(_this.baseEntityName, response.pageRecords[0]);
                var tempCurrencyCodeArray = _this.product.data.eligibleCurrencyCodeList.split(",");
                for (var key in tempCurrencyCodeArray) {
                    _this.currencyCodes.push(tempCurrencyCodeArray[key]);
                }
            }, function (reason) {
                //error callback
            });
        }
    }
    return SWSkuCurrencySelectorController;
}());
exports.SWSkuCurrencySelectorController = SWSkuCurrencySelectorController;
var SWSkuCurrencySelector = /** @class */ (function () {
    function SWSkuCurrencySelector(scopeService, skuPartialsPath, slatwallPathBuilder) {
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            baseEntityName: "@?",
            baseEntityId: "@?"
        };
        this.controller = SWSkuCurrencySelectorController;
        this.controllerAs = "swSkuCurrencySelector";
        this.link = function (scope, element, attrs, formController, transcludeFn) {
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skucurrencyselector.html";
    }
    SWSkuCurrencySelector.Factory = function () {
        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuCurrencySelector(scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuCurrencySelector;
}());
exports.SWSkuCurrencySelector = SWSkuCurrencySelector;


/***/ }),
/* 711 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuPriceEditController = /** @class */ (function () {
    //@ngInject
    function SWSkuPriceEditController(historyService, listingService, observerService, skuPriceService, utilityService, $hibachi, $filter, $timeout) {
        var _this = this;
        this.historyService = historyService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.skuPriceService = skuPriceService;
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.$filter = $filter;
        this.$timeout = $timeout;
        this.showSave = true;
        this.baseEntityName = "Product";
        this.updateDisplay = function (currencyCode) {
            if (angular.isDefined(currencyCode) && angular.isDefined(_this.currencyCode)) {
                _this.filterOnCurrencyCode = currencyCode;
                if (_this.currencyCode == _this.filterOnCurrencyCode || _this.filterOnCurrencyCode == "All") {
                    _this.showPriceEdit = true;
                }
                else {
                    _this.showPriceEdit = false;
                }
            }
        };
        this.switchTabContext = function () {
            _this.observerService.notify(_this.switchTabContextEventName, _this.tabToSwitchTo);
        };
        if (angular.isDefined(this.pageRecord)) {
            this.pageRecord.edited = false;
        }
        this.currencyFilter = this.$filter('swcurrency');
        this.formName = this.utilityService.createID(32);
        if (angular.isUndefined(this.showPriceEdit)) {
            this.showPriceEdit = true;
        }
        if (angular.isUndefined(this.skuId) && angular.isDefined(this.bundledSkuSkuId)) {
            this.skuId = this.bundledSkuSkuId;
        }
        if (angular.isDefined(this.bundledSkuCurrencyCode)) {
            this.currencyCode = this.bundledSkuCurrencyCode;
        }
        if (angular.isUndefined(this.currencyCode) && angular.isDefined(this.sku)) {
            this.currencyCode = this.sku.data.currencyCode;
        }
        if (angular.isUndefined(this.currencyCode) && angular.isDefined(this.skuPrice)) {
            this.currencyCode = this.skuPrice.data.currencyCode;
        }
        if (angular.isUndefined(this.price) && angular.isDefined(this.bundledSkuPrice)) {
            this.price = this.bundledSkuPrice;
        }
        if (angular.isDefined(this.sku)) {
            this.sku.data.price = this.currencyFilter(this.sku.data.price, this.currencyCode, 2, false);
        }
        if (angular.isDefined(this.skuPrice)) {
            this.skuPrice.data.price = this.currencyFilter(this.skuPrice.data.price, this.currencyCode, 2, false);
        }
        if (angular.isUndefined(this.skuId)
            && angular.isUndefined(this.sku)
            && angular.isUndefined(this.skuPriceId)
            && angular.isUndefined(this.skuPrice)) {
            throw ("You must provide either a skuID or a skuPriceID or a sku or a skuPrice to SWSkuPriceSingleEditController");
        }
        else {
            if (angular.isDefined(this.skuId) && angular.isUndefined(this.sku)) {
                var skuData = {
                    skuID: this.skuId,
                    skuCode: this.skuCode,
                    currencyCode: this.currencyCode,
                    price: this.currencyFilter(this.price, this.currencyCode, 2, false)
                };
                this.sku = this.$hibachi.populateEntity("Sku", skuData);
            }
            if (angular.isDefined(this.skuPriceId) && angular.isUndefined(this.skuPrice)) {
                var skuPriceData = {
                    skuPriceId: this.skuPriceId,
                    currencyCode: this.currencyCode,
                    minQuantity: this.minQuantity,
                    maxQuantity: this.maxQuantity,
                    price: this.currencyFilter(this.price, this.currencyCode, 2, false)
                };
                this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);
            }
        }
        if (angular.isDefined(this.masterPriceObject)) {
            if (angular.isDefined(this.masterPriceObject.data.sku)) {
                var sku = this.masterPriceObject.data.sku;
            }
            else {
                var sku = this.masterPriceObject;
            }
            this.revertToValue = this.currencyFilter(this.skuPriceService.getInferredSkuPrice(sku, this.masterPriceObject.data.price, this.currencyCode), this.currencyCode, 2, false);
        }
    }
    return SWSkuPriceEditController;
}());
exports.SWSkuPriceEditController = SWSkuPriceEditController;
var SWSkuPriceEdit = /** @class */ (function () {
    function SWSkuPriceEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.observerService = observerService;
        this.historyService = historyService;
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuId: "@?",
            skuPriceId: "@?",
            skuCode: "@?",
            price: "@?",
            baseEntityId: "@?",
            baseEntityName: "@?",
            bundledSkuSkuId: "@?",
            bundledSkuCurrencyCode: "@?",
            bundledSkuPrice: "@?",
            eligibleCurrencyCodeList: "@?",
            listingDisplayId: "@?",
            currencyCode: "@?",
            masterPriceObject: "=?",
            revertToValue: "=?",
            sku: "=?",
            skuPrice: "=?"
        };
        this.controller = SWSkuPriceEditController;
        this.controllerAs = "swSkuPriceEdit";
        this.link = function (scope, element, attrs, formController, transcludeFn) {
            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecord");
            if (angular.isDefined(currentScope["pageRecord"])) {
                scope.swSkuPriceEdit.pageRecord = currentScope["pageRecord"];
            }
            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecordKey");
            if (angular.isDefined(currentScope["pageRecordKey"])) {
                scope.swSkuPriceEdit.pageRecordIndex = currentScope["pageRecordKey"];
            }
            var skuPricesEditScope = _this.scopeService.getRootParentScope(scope, "swSkuPricesEdit");
            if (skuPricesEditScope != null) {
                scope.swSkuPriceEdit.baseEntityId = skuPricesEditScope["swSkuPricesEdit"].baseEntityId;
                scope.swSkuPriceEdit.baseEntityName = skuPricesEditScope["swSkuPricesEdit"].baseEntityName;
            }
            if (angular.isDefined(scope.swSkuPriceEdit.baseEntityId) && angular.isUndefined(scope.swSkuPriceEdit.skuId)) {
                scope.swSkuPriceEdit.selectCurrencyCodeEventName = "currencyCodeSelect" + scope.swSkuPriceEdit.baseEntityId;
                _this.observerService.attach(scope.swSkuPriceEdit.updateDisplay, scope.swSkuPriceEdit.selectCurrencyCodeEventName, scope.swSkuPriceEdit.formName);
                if (_this.historyService.hasHistory(scope.swSkuPriceEdit.selectCurrencyCodeEventName)) {
                    scope.swSkuPriceEdit.updateDisplay(_this.historyService.getHistory(scope.swSkuPriceEdit.selectCurrencyCodeEventName));
                }
            }
            var tabGroupScope = _this.scopeService.getRootParentScope(scope, "swTabGroup");
            var tabContentScope = _this.scopeService.getRootParentScope(scope, "swTabContent");
            if (tabContentScope != null) {
                if (angular.isDefined(tabGroupScope) && tabContentScope["swTabContent"].name == "Basic") {
                    scope.swSkuPriceEdit.switchTabContextEventName = tabGroupScope["swTabGroup"].switchTabEventName;
                    scope.swSkuPriceEdit.tabToSwitchTo = tabGroupScope["swTabGroup"].getTabByName("Pricing");
                    scope.swSkuPriceEdit.showSwitchTabContextButton = true;
                }
                else {
                    scope.swSkuPriceEdit.showSwitchTabContextButton = false;
                }
            }
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupriceedit.html";
    }
    SWSkuPriceEdit.Factory = function () {
        var directive = function (observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPriceEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'observerService',
            'historyService',
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuPriceEdit;
}());
exports.SWSkuPriceEdit = SWSkuPriceEdit;


/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuPriceQuantityEditController = /** @class */ (function () {
    //@ngInject
    function SWSkuPriceQuantityEditController($q, $hibachi, collectionConfigService, listingService, observerService, skuPriceService) {
        var _this = this;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.skuPriceService = skuPriceService;
        this.skuPrices = [];
        this.showSave = true;
        this.refreshSkuPrices = function () {
            _this.skuPriceService.loadSkuPricesForSku(_this.skuSkuId).finally(function () {
                _this.getSkuPrices();
            });
        };
        this.updateSkuPrices = function () {
            angular.forEach(_this.skuPrices, function (value, key) {
                if (key > 0) {
                    var formName = _this.columnPropertyIdentifier + value.data.skuPriceID;
                    value.forms[formName].$setDirty(true);
                    if (angular.isDefined(value.forms[formName][_this.columnPropertyIdentifier]) &&
                        angular.isFunction(value.forms[formName][_this.columnPropertyIdentifier].$setDirty)) {
                        value.forms[formName][_this.columnPropertyIdentifier].$setDirty(true);
                    }
                    value.data[_this.columnPropertyIdentifier] = _this.skuPrice.data[_this.columnPropertyIdentifier];
                }
            });
        };
        this.saveSkuPrices = function () {
            var savePromises = [];
            angular.forEach(_this.skuPrices, function (value, key) {
                if (key > 0) {
                    savePromises.push(value.$$save());
                }
            });
            _this.savePromise = _this.$q.all(savePromises);
            _this.savePromise.then(function (response) {
                //success
            }, function (reason) {
                //failure
            });
            return _this.savePromise;
        };
        this.getSkuPrices = function () {
            var promise = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuSkuId, _this.minQuantity, _this.maxQuantity);
            promise.then(function (data) {
                _this.skuPrices = data;
            });
            return promise;
        };
        if (angular.isDefined(this.pageRecord)) {
            this.pageRecord.edited = false;
        }
        if (angular.isDefined(this.skuSkuId) && angular.isUndefined(this.skuPrice)) {
            var skuPriceData = {
                skuPriceID: this.skuPriceId,
                minQuantity: parseInt(this.minQuantity),
                maxQuantity: parseInt(this.maxQuantity),
                currencyCode: this.currencyCode,
                price: this.price
            };
            this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);
            this.skuPriceService.setSkuPrices(this.skuSkuId, [this.skuPrice]);
            this.refreshSkuPrices();
            this.observerService.attach(this.refreshSkuPrices, "skuPricesUpdate");
        }
    }
    return SWSkuPriceQuantityEditController;
}());
exports.SWSkuPriceQuantityEditController = SWSkuPriceQuantityEditController;
var SWSkuPriceQuantityEdit = /** @class */ (function () {
    function SWSkuPriceQuantityEdit(scopeService, skuPartialsPath, slatwallPathBuilder) {
        var _this = this;
        this.scopeService = scopeService;
        this.skuPartialsPath = skuPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuPrice: "=?",
            skuPriceId: "@",
            currencyCode: "@",
            skuSkuId: "@",
            column: "=?",
            columnPropertyIdentifier: "@",
            minQuantity: "@",
            maxQuantity: "@",
            price: "@",
            showSave: "=?",
            listingDisplayId: "@?"
        };
        this.controller = SWSkuPriceQuantityEditController;
        this.controllerAs = "swSkuPriceQuantityEdit";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive
                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
                    if (angular.isDefined(currentScope["pageRecord"])) {
                        $scope.swSkuPriceQuantityEdit.pageRecord = currentScope["pageRecord"];
                    }
                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
                    if (angular.isDefined(currentScope["pageRecordKey"])) {
                        $scope.swSkuPriceQuantityEdit.pageRecordIndex = currentScope["pageRecordKey"];
                    }
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupricequantityedit.html";
    }
    SWSkuPriceQuantityEdit.Factory = function () {
        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPriceQuantityEdit(scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuPriceQuantityEdit;
}());
exports.SWSkuPriceQuantityEdit = SWSkuPriceQuantityEdit;


/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuPricesEditController = /** @class */ (function () {
    //@ngInject
    function SWSkuPricesEditController(observerService, collectionConfigService, utilityService, skuPriceService, $hibachi) {
        var _this = this;
        this.observerService = observerService;
        this.collectionConfigService = collectionConfigService;
        this.utilityService = utilityService;
        this.skuPriceService = skuPriceService;
        this.$hibachi = $hibachi;
        this.baseEntityName = "Product";
        this.refreshSkuPrices = function () {
            _this.skuPriceService.loadSkuPricesForSku(_this.skuId).finally(function () {
                _this.getSkuPrices();
            });
        };
        this.hasSkuPrices = function () {
            return _this.skuPriceService.hasSkuPrices(_this.skuId);
        };
        this.getSkuPrices = function () {
            if (angular.isDefined(_this.skuSkuId)) {
                _this.loadingPromise = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuId, _this.minQuantity, _this.maxQuantity, _this.eligibleCurrencyCodes);
            }
            else if (angular.isDefined(_this.skuId)) {
                _this.loadingPromise = _this.skuPriceService.getBaseSkuPricesForSku(_this.skuId, _this.eligibleCurrencyCodes);
            }
            _this.loadingPromise.then(function (data) {
                _this.skuPrices = data;
            }, function (reason) {
                throw ("swSkuPrices was unable to fetch skuPrices because: " + reason);
            });
            return _this.loadingPromise;
        };
        this.Id = this.utilityService.createID(32);
        if (angular.isDefined(this.skuEligibleCurrencyCodeList)) {
            this.eligibleCurrencyCodeList = this.skuEligibleCurrencyCodeList;
        }
        if (angular.isDefined(this.eligibleCurrencyCodeList)) {
            this.eligibleCurrencyCodes = this.eligibleCurrencyCodeList.split(",");
        }
        if (angular.isUndefined(this.skuPrices)) {
            this.skuPrices = [];
        }
        if (angular.isDefined(this.skuSkuId)) {
            this.skuId = this.skuSkuId;
        }
        else {
            //inflate the sku
            this.sku = this.$hibachi.populateEntity("Sku", { skuID: this.skuId, price: this.price });
        }
        if (angular.isDefined(this.skuPriceId)) {
            var skuPriceData = {
                skuPriceID: this.skuPriceId,
                minQuantity: this.minQuantity,
                maxQuantity: this.maxQuantity,
                currencyCode: this.currencyCode,
                price: this.price
            };
            this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);
        }
        if (angular.isDefined(this.skuSkuId) && angular.isDefined(this.skuPrice)) {
            this.masterPriceObject = this.skuPrice;
        }
        else if (angular.isDefined(this.sku)) {
            this.masterPriceObject = this.sku;
        }
        this.refreshSkuPrices();
        this.observerService.attach(this.refreshSkuPrices, "skuPricesUpdate");
    }
    return SWSkuPricesEditController;
}());
exports.SWSkuPricesEditController = SWSkuPricesEditController;
var SWSkuPricesEdit = /** @class */ (function () {
    function SWSkuPricesEdit(scopeService, skuPartialsPath, slatwallPathBuilder) {
        this.scopeService = scopeService;
        this.skuPartialsPath = skuPartialsPath;
        this.slatwallPathBuilder = slatwallPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuId: "@",
            skuSkuId: "@",
            skuPriceId: "@",
            minQuantity: "@",
            maxQuantity: "@",
            currencyCode: "@",
            price: "@",
            bundledSkuSkuId: "@",
            baseEntityName: "@?",
            baseEntityId: "@?",
            listingDisplayId: "@?",
            eligibleCurrencyCodeList: "@?",
            skuEligibleCurrencyCodeList: "@?",
            sku: "=?"
        };
        this.controller = SWSkuPricesEditController;
        this.controllerAs = "swSkuPricesEdit";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupricesedit.html";
    }
    SWSkuPricesEdit.Factory = function () {
        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPricesEdit(scopeService, skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'scopeService',
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuPricesEdit;
}());
exports.SWSkuPricesEdit = SWSkuPricesEdit;


/***/ }),
/* 714 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuStockAdjustmentModalLauncherController = /** @class */ (function () {
    //@ngInject
    function SWSkuStockAdjustmentModalLauncherController($http, $q, $hibachi, observerService, utilityService, collectionConfigService) {
        var _this = this;
        this.$http = $http;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.initData = function () {
            _this.selectedLocation = undefined;
            _this.stockAdjustmentType = undefined;
            var skudata = {
                skuID: _this.skuId,
                skuCode: _this.skuCode,
                skuDescription: _this.skuDescription,
                imagePath: _this.imagePath,
                calculatedQATS: _this.calculatedQats || 0,
                calculatedQOH: _this.calculatedQoh || 0,
            };
            _this.sku = _this.$hibachi.populateEntity("Sku", skudata);
            _this.sku.setNewQOH(_this.calculatedQoh || 0);
            _this.stockAdjustmentID = "";
            _this.stock = _this.$hibachi.newStock();
            _this.stockAdjustment = _this.$hibachi.newStockAdjustment();
            _this.stockAdjustmentItem = _this.$hibachi.newStockAdjustmentItem();
            _this.selectedLocation = _this.$hibachi.newLocation();
            _this.stockAdjustment.$$addStockAdjustmentItem(_this.stockAdjustmentItem);
            _this.stock.$$setSku(_this.sku);
            _this.stockAdjustmentStatusType = _this.$hibachi.populateEntity("Type", { typeID: "444df2e2f66ddfaf9c60caf5c76349a6" }); //new status type for stock adjusment
            _this.stockAdjustment.$$setStockAdjustmentStatusType(_this.stockAdjustmentStatusType);
            _this.stockAdjustmentItem.$$setSku(_this.sku);
            _this.newQuantity = _this.calculatedQoh || 0;
            _this.observerService.notify(_this.selectedLocationTypeaheadDataKey + 'clearSearch');
        };
        this.save = function () {
            if (_this.stockAdjustmentItem.data.quantity > 0) {
                _this.stockAdjustment.$$setStockAdjustmentType(_this.$hibachi.populateEntity("Type", { typeID: "444df2e60db81c12589c9b39346009f2" })); //manual in stock adjustment type
                _this.stockAdjustment.$$setToLocation(_this.selectedLocation);
                _this.stockAdjustmentItem.$$setToStock(_this.stock);
            }
            else {
                _this.stockAdjustment.$$setStockAdjustmentType(_this.$hibachi.populateEntity("Type", { typeID: "444df2e7dba550b7a24a03acbb37e717" })); //manual out stock adjustment type
                _this.stockAdjustment.$$setFromLocation(_this.selectedLocation);
                _this.stockAdjustmentItem.data.quantity = _this.stockAdjustmentItem.data.quantity * -1;
                _this.stockAdjustmentItem.$$setFromStock(_this.stock);
            }
            return _this.$q.all([_this.observerService.notify('updateBindings'), _this.stock.$$save()]).then().finally(function () {
                var stockAdjustmentSavePromise = _this.stockAdjustment.$$save();
                stockAdjustmentSavePromise.then(function (response) {
                    _this.sku.newQOH = _this.newQuantity;
                    _this.sku.data.newQOH = _this.newQuantity;
                    _this.sku.data.calculatedQOH = _this.newQuantity;
                    _this.stockAdjustmentID = response.stockAdjustmentID;
                    _this.observerService.notify('updateBindings');
                }).finally(function () {
                    _this.observerService.notify('updateBindings');
                    _this.$http({
                        method: "POST",
                        url: _this.$hibachi.getUrlWithActionPrefix() + "entity.processStockAdjustment&processContext=processAdjustment&stockAdjustmentID=" + _this.stockAdjustmentID
                    }).then(function (response) {
                        //don't need to do anything here
                        _this.swListingDisplay.getCollection();
                    });
                });
            });
        };
        this.addSelectedLocation = function (item) {
            if (angular.isDefined(item)) {
                _this.selectedLocation = _this.$hibachi.populateEntity('Location', item);
                _this.stock.$$setLocation(_this.selectedLocation);
                //get existing stockID if one exists
                _this.stockCollectionConfig = _this.collectionConfigService.newCollectionConfig('Stock');
                _this.stockCollectionConfig.addFilter('sku.skuID', _this.stock.sku.skuID);
                _this.stockCollectionConfig.addFilter('location.locationID', _this.selectedLocation.locationID);
                _this.stockCollectionConfig.setDistinct(true);
                _this.stockCollectionConfig.getEntity().then(function (res) {
                    if (res.pageRecords.length > 0) {
                        _this.stock.stockID = res.pageRecords[0].stockID;
                    }
                });
            }
            else {
                _this.selectedLocation = undefined;
            }
        };
        this.updateNewQuantity = function (args) {
            if (!isNaN(args.swInput.value)) {
                _this.newQuantity = args.swInput.value;
            }
            else {
                _this.sku.data.newQOH = 0;
            }
            _this.updateStockAdjustmentQuantity();
        };
        this.updateStockAdjustmentQuantity = function () {
            if (!isNaN(_this.newQuantity)) {
                _this.stockAdjustmentItem.data.quantity = _this.newQuantity - _this.sku.data.calculatedQOH;
            }
            else {
                _this.newQuantity = 0;
            }
        };
        this.selectedLocationTypeaheadDataKey = this.utilityService.createID(32);
        if (angular.isDefined(this.skuId)) {
            this.name = "skuStockAdjustment" + this.utilityService.createID(32);
        }
        else {
            throw ("SWSkuStockAdjustmentModalLauncherController was not provided with a sku id");
        }
        if (angular.isDefined(this.calculatedQats)) {
            this.calculatedQats = parseInt(this.calculatedQats);
        }
        if (angular.isDefined(this.calculatedQoh)) {
            this.calculatedQoh = parseInt(this.calculatedQoh);
        }
        this.initData();
        this.observerService.attach(this.updateNewQuantity, this.name + 'newQuantitychange');
    }
    return SWSkuStockAdjustmentModalLauncherController;
}());
exports.SWSkuStockAdjustmentModalLauncherController = SWSkuStockAdjustmentModalLauncherController;
var SWSkuStockAdjustmentModalLauncher = /** @class */ (function () {
    function SWSkuStockAdjustmentModalLauncher(skuPartialsPath, slatwallPathBuilder) {
        this.restrict = 'EA';
        this.scope = {};
        this.require = { swListingDisplay: '?^swListingDisplay' };
        this.bindToController = {
            skuId: "@",
            skuCode: "@",
            skuDescription: "@",
            imagePath: "@",
            calculatedQats: "=?",
            calculatedQoh: "=?"
        };
        this.controller = SWSkuStockAdjustmentModalLauncherController;
        this.controllerAs = "swSkuStockAdjustmentModalLauncher";
        this.link = function (scope, element, attrs) {
            scope.$watch('swStockAdjustmentModalLauncherController.calculatedQoh', function (newValue) {
                console.log('newvalue', newValue);
                scope.swSkuStockAdjustmentModalLauncher.newQuantity = newValue;
            });
        };
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skustockadjustmentmodallauncher.html";
    }
    SWSkuStockAdjustmentModalLauncher.Factory = function () {
        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWSkuStockAdjustmentModalLauncher(skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuStockAdjustmentModalLauncher;
}());
exports.SWSkuStockAdjustmentModalLauncher = SWSkuStockAdjustmentModalLauncher;


/***/ }),
/* 715 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSkuThumbnailController = /** @class */ (function () {
    //@ngInject
    function SWSkuThumbnailController() {
        if (!angular.isDefined(this.skuData)) {
            throw ("You must provide a sku to the SWSkuThumbnailController");
        }
        if (angular.isDefined(this.skuData.imagePath)) {
            this.image = this.skuData.imagePath;
        }
    }
    return SWSkuThumbnailController;
}());
exports.SWSkuThumbnailController = SWSkuThumbnailController;
var SWSkuThumbnail = /** @class */ (function () {
    function SWSkuThumbnail(skuPartialsPath, slatwallPathBuilder) {
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            skuData: "=",
            imageOnly: "=?",
            imagePath: "@?"
        };
        this.controller = SWSkuThumbnailController;
        this.controllerAs = "swSkuThumbnail";
        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skuthumbnail.html";
    }
    SWSkuThumbnail.Factory = function () {
        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWSkuThumbnail(skuPartialsPath, slatwallPathBuilder); };
        directive.$inject = [
            'skuPartialsPath',
            'slatwallPathBuilder'
        ];
        return directive;
    };
    return SWSkuThumbnail;
}());
exports.SWSkuThumbnail = SWSkuThumbnail;


/***/ }),
/* 716 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var DefaultSkuService = /** @class */ (function () {
    //@ngInject
    function DefaultSkuService($hibachi, observerService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.observerKeys = {};
        this.defaultSkuSelections = {};
        this.attachObserver = function (selectionID, productID) {
            if (angular.isUndefined(_this.observerKeys[selectionID])) {
                _this.observerKeys[selectionID] = { attached: true, productID: productID, hasBeenCalled: false };
                _this.observerService.attach(_this.decideToSaveSku, 'swSelectionToggleSelection' + selectionID);
            } //otherwise the event has been attached
        };
        this.decideToSaveSku = function (args) {
            if (_this.defaultSkuSelections[args.selectionid] == null) {
                _this.defaultSkuSelections[args.selectionid] = args.selection;
            }
            else if (_this.defaultSkuSelections[args.selectionid] != args.selection) {
                _this.defaultSkuSelections[args.selectionid] = args.selection;
                _this.saveDefaultSku(args);
            }
        };
        this.saveDefaultSku = function (args) {
            //we only want to call save on the second and subsequent times the event fires, because it will fire when it is initialized
            _this.$hibachi.getEntity("Product", _this.observerKeys[args.selectionid].productID).then(function (product) {
                var product = _this.$hibachi.populateEntity("Product", product);
                product.$$setDefaultSku(_this.$hibachi.populateEntity("Sku", { skuID: args.selection }));
                product.$$save().then(function () {
                    //there was success
                }, function () {
                    //there was a problem
                });
            }, function (reason) {
            });
        };
    }
    return DefaultSkuService;
}());
exports.DefaultSkuService = DefaultSkuService;


/***/ }),
/* 717 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SkuPriceService = /** @class */ (function () {
    //@ngInject
    function SkuPriceService($http, $q, $hibachi, entityService, cacheService, collectionConfigService, observerService, utilityService) {
        var _this = this;
        this.$http = $http;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.entityService = entityService;
        this.cacheService = cacheService;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.skuPrices = {};
        this.skuPriceCollectionConfigs = {};
        this.skuPriceGetEntityPromises = {};
        this.skuDictionary = {};
        this.skuPriceHasEntityDeferred = {};
        this.skuPriceHasEntityPromises = {};
        this.newSkuPrice = function () {
            return _this.entityService.newEntity('SkuPrice');
        };
        this.getRelatedSkuPriceCollectionConfig = function (skuID, currencyCode, minQuantity, maxQuantity) {
            var relatedSkuPriceCollectionConfig = _this.collectionConfigService.newCollectionConfig("SkuPrice");
            relatedSkuPriceCollectionConfig.addDisplayProperty("skuPriceID,sku.skuID,minQuantity,maxQuantity,currencyCode,price");
            relatedSkuPriceCollectionConfig.addFilter("minQuantity", minQuantity, "=");
            relatedSkuPriceCollectionConfig.addFilter("maxQuantity", maxQuantity, "=");
            relatedSkuPriceCollectionConfig.addFilter("currencyCode", currencyCode, "!=");
            relatedSkuPriceCollectionConfig.addFilter("sku.skuID", skuID, "=");
            relatedSkuPriceCollectionConfig.addOrderBy("currencyCode|asc");
            relatedSkuPriceCollectionConfig.setAllRecords(true);
            return relatedSkuPriceCollectionConfig;
        };
        //wrapper function to split up args
        this.updateSkuPrices = function (args) {
            _this.loadSkuPricesForSku(args.skuID, args.refresh);
        };
        this.loadSkuPricesForSku = function (skuID, refresh) {
            _this.skuPriceHasEntityDeferred[skuID] = _this.$q.defer();
            _this.skuPriceHasEntityPromises[skuID] = _this.skuPriceHasEntityDeferred[skuID].promise;
            if (angular.isUndefined(_this.skuPriceCollectionConfigs[skuID])) {
                _this.skuPriceCollectionConfigs[skuID] = _this.collectionConfigService.newCollectionConfig("SkuPrice");
                _this.skuPriceCollectionConfigs[skuID].addDisplayProperty("skuPriceID,minQuantity,maxQuantity,currencyCode,price,sku.skuID");
                _this.skuPriceCollectionConfigs[skuID].addFilter("sku.skuID", skuID, "=");
                _this.skuPriceCollectionConfigs[skuID].addOrderBy("currencyCode|asc");
                _this.skuPriceCollectionConfigs[skuID].setAllRecords(true);
            }
            if (angular.isUndefined(_this.skuPriceGetEntityPromises[skuID]) || refresh) {
                _this.skuPriceGetEntityPromises[skuID] = _this.skuPriceCollectionConfigs[skuID].getEntity();
                refresh = true;
            }
            if (refresh) {
                _this.skuPriceGetEntityPromises[skuID].then(function (response) {
                    angular.forEach(response.records, function (value, key) {
                        _this.setSkuPrices(skuID, [_this.$hibachi.populateEntity("SkuPrice", value)]);
                    });
                }, function (reason) {
                    _this.skuPriceHasEntityPromises[skuID].reject();
                    throw ("skupriceservice failed to get sku prices" + reason);
                }).finally(function () {
                    _this.skuPriceHasEntityPromises[skuID].resolve();
                });
            }
            return _this.skuPriceGetEntityPromises[skuID];
        };
        this.setSkuPrices = function (skuID, skuPrices) {
            if (angular.isDefined(_this.skuPrices[skuID])) {
                for (var i = 0; i < skuPrices.length; i++) {
                    if (_this.getKeyOfSkuPriceMatch(skuID, skuPrices[i]) != -1) {
                        _this.getSkuPrices(skuID)[_this.getKeyOfSkuPriceMatch(skuID, skuPrices[i])].data.price = skuPrices[i].data.price;
                        skuPrices.splice(i, 1);
                        i--;
                    }
                }
                _this.skuPrices[skuID] = _this.skuPrices[skuID].concat(skuPrices);
            }
            else {
                _this.skuPrices[skuID] = skuPrices;
            }
        };
        this.hasSkuPrices = function (skuID) {
            if (angular.isDefined(_this.skuPrices[skuID])) {
                return true;
            }
            return false;
        };
        this.getSkuPrices = function (skuID) {
            if (angular.isDefined(_this.skuPrices[skuID])) {
                return _this.skuPrices[skuID];
            }
        };
        this.loadCurrencies = function () {
            var loadCurrenciesDeferred = _this.$q.defer();
            var loadCurrenciesPromise = loadCurrenciesDeferred.promise;
            if (angular.isDefined(_this.currencies)) {
                loadCurrenciesDeferred.resolve(_this.currencies);
            }
            else {
                var currencyRatePromise = _this.$http({
                    method: "POST",
                    url: _this.$hibachi.getUrlWithActionPrefix() + "api:main.getcurrencyrates"
                });
                currencyRatePromise.then(function (response) {
                    _this.currencies = response.data;
                    loadCurrenciesDeferred.resolve(_this.currencies);
                }, function (reason) {
                    loadCurrenciesDeferred.reject(reason);
                });
            }
            return loadCurrenciesPromise;
        };
        //logic for inferred currency prices
        this.getInferredSkuPrice = function (sku, basePrice, currencyCode) {
            if (angular.isDefined(_this.currencies[currencyCode]) && sku.data.currencyCode != currencyCode) {
                var currencyData = _this.currencies[currencyCode];
                if (currencyData.CONVERTFROM == sku.data.currencyCode) {
                    return basePrice * (1 / currencyData.CONVERSIONRATE);
                }
                else if (currencyData.CONVERTFROM == "EUR" && _this.currencies[sku.data.currencyCode].CONVERTFROM == "EUR") {
                    //Convert using euro
                    var tempPrice = basePrice * (1 / currencyData.CONVERSIONRATE);
                    return tempPrice * (1 / _this.currencies[sku.data.currencyCode].CONVERSIONRATE);
                }
                else {
                    return "N/A"; //will become NaN
                }
            }
            else if (sku.data.currencyCode == currencyCode) {
                return basePrice;
            }
            return "N/A"; //will become NaN
        };
        this.createInferredSkuPriceForCurrency = function (sku, skuPrice, currencyCode) {
            var nonPersistedSkuPrice = _this.entityService.newEntity('SkuPrice');
            nonPersistedSkuPrice.$$setSku(sku);
            nonPersistedSkuPrice.data.currencyCode = currencyCode;
            //if for some reason the price that came back was preformatted althought this really shouldn't be needed
            if (angular.isString(sku.data.price) && isNaN(parseFloat(sku.data.price.substr(0, 1)))) {
                //strip currency symbol
                sku.data.price = parseFloat(sku.data.price.substr(1, sku.data.price.length));
            }
            var basePrice = 0;
            if (angular.isDefined(skuPrice)) {
                basePrice = skuPrice.data.price;
            }
            else {
                basePrice = sku.data.price;
            }
            nonPersistedSkuPrice.data.price = _this.getInferredSkuPrice(sku, basePrice, currencyCode);
            if (angular.isDefined(skuPrice) && angular.isDefined(skuPrice.data.minQuantity) && !isNaN(skuPrice.data.minQuantity)) {
                nonPersistedSkuPrice.data.minQuantity = skuPrice.data.minQuantity;
            }
            if (angular.isDefined(skuPrice) && angular.isDefined(skuPrice.data.maxQuantity) && !isNaN(skuPrice.data.maxQuantity)) {
                nonPersistedSkuPrice.data.maxQuantity = skuPrice.data.maxQuantity;
            }
            nonPersistedSkuPrice.data.inferred = true;
            return nonPersistedSkuPrice;
        };
        this.skuPriceSetHasCurrencyCode = function (skuPriceSet, currencyCode) {
            for (var k = 0; k < skuPriceSet.length; k++) {
                if (currencyCode == skuPriceSet[k].data.currencyCode) {
                    return true;
                }
            }
            return false;
        };
        this.defaultCurrencySkuPriceForSet = function (skuPriceSet) {
            for (var i = 0; i < skuPriceSet.length; i++) {
                //temporarily hard coded
                if (skuPriceSet[i].data.currencyCode == "USD") {
                    return skuPriceSet[i];
                }
            }
        };
        this.getSku = function (skuID) {
            var deferred = _this.$q.defer();
            var promise = deferred.promise;
            if (skuID in _this.skuDictionary) {
                var sku = _this.skuDictionary[skuID];
                deferred.resolve(sku);
            }
            else {
                _this.$hibachi.getEntity("Sku", skuID).then(function (response) {
                    _this.skuDictionary[skuID] = _this.$hibachi.populateEntity("Sku", response);
                    deferred.resolve(_this.skuDictionary[skuID]);
                }, function (reason) {
                    deferred.reject(reason);
                });
            }
            return promise;
        };
        this.loadInferredSkuPricesForSkuPriceSet = function (skuID, skuPriceSet, eligibleCurrencyCodes) {
            var deferred = _this.$q.defer();
            var promise = deferred.promise;
            _this.loadCurrencies().then(function () {
                _this.getSku(skuID).then(function (sku) {
                    for (var j = 0; j < eligibleCurrencyCodes.length; j++) {
                        if ((sku.data.currencyCode != eligibleCurrencyCodes[j]) &&
                            (skuPriceSet.length > 0 && !_this.skuPriceSetHasCurrencyCode(skuPriceSet, eligibleCurrencyCodes[j])) ||
                            ((sku.data.currencyCode != eligibleCurrencyCodes[j]) && skuPriceSet.length == 0)) {
                            skuPriceSet.push(_this.createInferredSkuPriceForCurrency(sku, _this.defaultCurrencySkuPriceForSet(skuPriceSet), eligibleCurrencyCodes[j]));
                        }
                    }
                    skuPriceSet = _this.sortSkuPrices(skuPriceSet);
                }, function (reason) {
                }).finally(function () {
                    deferred.resolve(skuPriceSet);
                });
            });
            return promise;
        };
        this.getBaseSkuPricesForSku = function (skuID, eligibleCurrencyCodes) {
            var deferred = _this.$q.defer();
            var promise = deferred.promise;
            var skuPriceSet = [];
            if (angular.isDefined(_this.skuPriceHasEntityPromises[skuID])) {
                _this.skuPriceGetEntityPromises[skuID].then(function () {
                    var skuPrices = _this.getSkuPrices(skuID) || [];
                    for (var i = 0; i < skuPrices.length; i++) {
                        var skuPrice = skuPrices[i];
                        if (_this.isBaseSkuPrice(skuPrice.data)) {
                            skuPriceSet.push(skuPrice);
                        }
                    }
                }).finally(function () {
                    if (angular.isDefined(eligibleCurrencyCodes)) {
                        _this.loadInferredSkuPricesForSkuPriceSet(skuID, skuPriceSet, eligibleCurrencyCodes).then(function (data) {
                            deferred.resolve(_this.sortSkuPrices(data));
                        });
                    }
                    else {
                        deferred.resolve(_this.sortSkuPrices(skuPriceSet));
                    }
                });
            }
            return promise;
        };
        this.getSkuPricesForQuantityRange = function (skuID, minQuantity, maxQuantity, eligibleCurrencyCodes) {
            var deferred = _this.$q.defer();
            var promise = deferred.promise;
            var skuPriceSet = [];
            if (angular.isDefined(_this.skuPriceHasEntityPromises[skuID])) {
                _this.skuPriceGetEntityPromises[skuID].then(function () {
                    var skuPrices = _this.getSkuPrices(skuID);
                    for (var i = 0; i < skuPrices.length; i++) {
                        var skuPrice = skuPrices[i];
                        if (_this.isQuantityRangeSkuPrice(skuPrice.data, minQuantity, maxQuantity)) {
                            skuPriceSet.push(skuPrice);
                        }
                    }
                }).finally(function () {
                    if (angular.isDefined(eligibleCurrencyCodes)) {
                        _this.loadInferredSkuPricesForSkuPriceSet(skuID, skuPriceSet, eligibleCurrencyCodes).then(function (data) {
                            deferred.resolve(_this.sortSkuPrices(data));
                        });
                    }
                    else {
                        deferred.resolve(_this.sortSkuPrices(skuPriceSet));
                    }
                });
            }
            return promise;
        };
        this.getKeyOfSkuPriceMatch = function (skuID, skuPrice) {
            if (_this.hasSkuPrices(skuID)) {
                for (var i = 0; i < _this.getSkuPrices(skuID).length; i++) {
                    var savedSkuPriceData = _this.getSkuPrices(skuID)[i].data;
                    if (savedSkuPriceData.currencyCode == skuPrice.data.currencyCode &&
                        ((_this.isBaseSkuPrice(savedSkuPriceData) &&
                            _this.isBaseSkuPrice(savedSkuPriceData) == _this.isBaseSkuPrice(skuPrice.data)) || _this.isQuantityRangeSkuPrice(savedSkuPriceData, skuPrice.data.minQuantity, skuPrice.data.maxQuantity))) {
                        return i;
                    }
                }
            }
            return -1;
        };
        this.isBaseSkuPrice = function (skuPriceData) {
            return isNaN(parseInt(skuPriceData.minQuantity)) && isNaN(parseInt(skuPriceData.maxQuantity));
        };
        this.isQuantityRangeSkuPrice = function (skuPriceData, minQuantity, maxQuantity) {
            var minQuantityMatch = (parseInt(skuPriceData.minQuantity) == parseInt(minQuantity));
            var maxQuantityMatch = (parseInt(skuPriceData.maxQuantity) == parseInt(maxQuantity));
            return minQuantityMatch && maxQuantityMatch;
        };
        this.sortSkuPrices = function (skuPriceSet) {
            function compareSkuPrices(a, b) {
                //temporarily hardcoded to usd needs to be default sku value
                if (a.data.currencyCode == "USD")
                    return -1;
                if (a.data.currencyCode < b.data.currencyCode)
                    return -1;
                if (a.data.currencyCode > b.data.currencyCode)
                    return 1;
                return 0;
            }
            return skuPriceSet.sort(compareSkuPrices);
        };
        this.observerService.attach(this.updateSkuPrices, 'skuPricesUpdate');
    }
    return SkuPriceService;
}());
exports.SkuPriceService = SkuPriceService;


/***/ }),
/* 718 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var core_module_1 = __webpack_require__(11);
//services
var defaultskuservice_1 = __webpack_require__(716);
var skupriceservice_1 = __webpack_require__(717);
//controllers
//directives
var swpricingmanager_1 = __webpack_require__(708);
var swimagedetailmodallauncher_1 = __webpack_require__(707);
var swaddskupricemodallauncher_1 = __webpack_require__(703);
var swdeleteskupricemodallauncher_1 = __webpack_require__(705);
var swskustockadjustmentmodallauncher_1 = __webpack_require__(714);
var swdefaultskuradio_1 = __webpack_require__(704);
var swskucurrencyselector_1 = __webpack_require__(710);
var swskupriceedit_1 = __webpack_require__(711);
var swskucodeedit_1 = __webpack_require__(709);
var swskupricesedit_1 = __webpack_require__(713);
var swskupricequantityedit_1 = __webpack_require__(712);
var swskuthumbnail_1 = __webpack_require__(715);
//filters
var skumodule = angular.module('hibachi.sku', [core_module_1.coremodule.name]).config(function () {
})
    //constants
    .constant('skuPartialsPath', 'sku/components/')
    //services
    .service('defaultSkuService', defaultskuservice_1.DefaultSkuService)
    .service('skuPriceService', skupriceservice_1.SkuPriceService)
    //controllers
    //directives
    .directive('swPricingManager', swpricingmanager_1.SWPricingManager.Factory())
    .directive('swImageDetailModalLauncher', swimagedetailmodallauncher_1.SWImageDetailModalLauncher.Factory())
    .directive('swAddSkuPriceModalLauncher', swaddskupricemodallauncher_1.SWAddSkuPriceModalLauncher.Factory())
    .directive('swDeleteSkuPriceModalLauncher', swdeleteskupricemodallauncher_1.SWDeleteSkuPriceModalLauncher.Factory())
    .directive('swSkuStockAdjustmentModalLauncher', swskustockadjustmentmodallauncher_1.SWSkuStockAdjustmentModalLauncher.Factory())
    .directive('swDefaultSkuRadio', swdefaultskuradio_1.SWDefaultSkuRadio.Factory())
    .directive('swSkuCurrencySelector', swskucurrencyselector_1.SWSkuCurrencySelector.Factory())
    .directive('swSkuPriceEdit', swskupriceedit_1.SWSkuPriceEdit.Factory())
    .directive('swSkuCodeEdit', swskucodeedit_1.SWSkuCodeEdit.Factory())
    .directive('swSkuPricesEdit', swskupricesedit_1.SWSkuPricesEdit.Factory())
    .directive('swSkuPriceQuantityEdit', swskupricequantityedit_1.SWSkuPriceQuantityEdit.Factory())
    .directive('swSkuThumbnail', swskuthumbnail_1.SWSkuThumbnail.Factory());
exports.skumodule = skumodule;


/***/ }),
/* 719 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCurrencyFormatter = /** @class */ (function () {
    function SWCurrencyFormatter($filter, $timeout) {
        var _this = this;
        this.$filter = $filter;
        this.$timeout = $timeout;
        this.restrict = "A";
        this.require = "ngModel";
        this.scope = {
            ngModel: '=',
            currencyCode: '@?'
        };
        this.link = function ($scope, element, attrs, modelCtrl) {
            modelCtrl.$parsers.push(function (data) {
                var currencyFilter = _this.$filter('swcurrency');
                if (isNaN(data)) {
                    data = 0;
                    modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));
                    modelCtrl.$render();
                }
                else {
                    if (_this._timeoutPromise) {
                        _this.$timeout.cancel(_this._timeoutPromise);
                    }
                    _this._timeoutPromise = _this.$timeout(function () {
                        modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));
                        modelCtrl.$render();
                    }, 1500);
                }
                return modelCtrl.$viewValue;
            });
            modelCtrl.$formatters.push(function (data) {
                if (isNaN(data)) {
                    data = 0;
                }
                var currencyFilter = _this.$filter('swcurrency');
                modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));
                modelCtrl.$render();
                return modelCtrl.$viewValue;
            });
        };
    }
    SWCurrencyFormatter.Factory = function () {
        var directive = function ($filter, $timeout) { return new SWCurrencyFormatter($filter, $timeout); };
        directive.$inject = [
            '$filter',
            '$timeout'
        ];
        return directive;
    };
    return SWCurrencyFormatter;
}());
exports.SWCurrencyFormatter = SWCurrencyFormatter;


/***/ }),
/* 720 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCurrency = /** @class */ (function () {
    function SWCurrency() {
    }
    //@ngInject
    SWCurrency.Factory = function ($sce, $log, $hibachi) {
        var data = null, serviceInvoked = false;
        function realFilter(value, decimalPlace, returnStringFlag) {
            if (returnStringFlag === void 0) { returnStringFlag = true; }
            // REAL FILTER LOGIC, DISREGARDING PROMISES
            if (!angular.isDefined(data)) {
                $log.debug("Please provide a valid currencyCode, swcurrency defaults to $");
                data = "$";
            }
            if (angular.isDefined(value)) {
                if (angular.isDefined(decimalPlace)) {
                    value = parseFloat(value.toString()).toFixed(decimalPlace);
                }
                else {
                    value = parseFloat(value.toString()).toFixed(2);
                }
            }
            if (returnStringFlag) {
                return data + value;
            }
            else {
                return value;
            }
        }
        var filterStub;
        filterStub = function (value, currencyCode, decimalPlace, returnStringFlag) {
            if (returnStringFlag === void 0) { returnStringFlag = true; }
            if (data === null && returnStringFlag) {
                if (!serviceInvoked) {
                    serviceInvoked = true;
                    $hibachi.getCurrencies().then(function (currencies) {
                        var result = currencies.data;
                        data = result[currencyCode];
                    });
                }
                return "-";
            }
            else
                return realFilter(value, decimalPlace, returnStringFlag);
        };
        filterStub.$stateful = true;
        return filterStub;
    };
    return SWCurrency;
}());
exports.SWCurrency = SWCurrency;


/***/ }),
/* 721 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/slatwallTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var SlatwallPathBuilder = /** @class */ (function () {
    //@ngInject
    function SlatwallPathBuilder() {
        var _this = this;
        this.setBaseURL = function (baseURL) {
            _this.baseURL = baseURL;
        };
        this.setBasePartialsPath = function (basePartialsPath) {
            _this.basePartialsPath = basePartialsPath;
        };
        this.buildPartialsPath = function (componentsPath) {
            if (angular.isDefined(_this.baseURL) && angular.isDefined(_this.basePartialsPath)) {
                return _this.baseURL + _this.basePartialsPath + componentsPath;
            }
            else {
                throw ('need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there');
            }
        };
    }
    return SlatwallPathBuilder;
}());
exports.SlatwallPathBuilder = SlatwallPathBuilder;


/***/ }),
/* 722 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/slatwallTypescript.d.ts" />
var hibachi_module_1 = __webpack_require__(875);
var workflow_module_1 = __webpack_require__(311);
var entity_module_1 = __webpack_require__(309);
var content_module_1 = __webpack_require__(664);
var formbuilder_module_1 = __webpack_require__(666);
var giftcard_module_1 = __webpack_require__(678);
var optiongroup_module_1 = __webpack_require__(682);
var orderitem_module_1 = __webpack_require__(691);
var product_module_1 = __webpack_require__(695);
var productbundle_module_1 = __webpack_require__(701);
var sku_module_1 = __webpack_require__(718);
//constant
var slatwallpathbuilder_1 = __webpack_require__(721);
//directives
var swcurrencyformatter_1 = __webpack_require__(719);
//filters
var swcurrency_1 = __webpack_require__(720);
var slatwalladminmodule = angular.module('slatwalladmin', [
    //custom modules
    hibachi_module_1.hibachimodule.name,
    entity_module_1.entitymodule.name,
    content_module_1.contentmodule.name,
    formbuilder_module_1.formbuildermodule.name,
    giftcard_module_1.giftcardmodule.name,
    optiongroup_module_1.optiongroupmodule.name,
    orderitem_module_1.orderitemmodule.name,
    product_module_1.productmodule.name,
    productbundle_module_1.productbundlemodule.name,
    sku_module_1.skumodule.name,
    workflow_module_1.workflowmodule.name
])
    .constant("baseURL", $.slatwall.getConfig().baseURL)
    .constant('slatwallPathBuilder', new slatwallpathbuilder_1.SlatwallPathBuilder())
    .config(["$provide", '$logProvider', '$filterProvider', '$httpProvider', '$routeProvider', '$injector', '$locationProvider', 'datepickerConfig', 'datepickerPopupConfig', 'slatwallPathBuilder', 'appConfig',
    function ($provide, $logProvider, $filterProvider, $httpProvider, $routeProvider, $injector, $locationProvider, datepickerConfig, datepickerPopupConfig, slatwallPathBuilder, appConfig) {
        //configure partials path properties
        slatwallPathBuilder.setBaseURL($.slatwall.getConfig().baseURL);
        slatwallPathBuilder.setBasePartialsPath('/admin/client/src/');
        datepickerConfig.showWeeks = false;
        datepickerConfig.format = 'MMM dd, yyyy hh:mm a';
        datepickerPopupConfig.toggleWeeksText = null;
        // route provider configuration
    }])
    .run(['$rootScope', '$filter', '$anchorScroll', '$hibachi', 'dialogService', 'observerService', 'utilityService', 'slatwallPathBuilder', function ($rootScope, $filter, $anchorScroll, $hibachi, dialogService, observerService, utilityService, slatwallPathBuilder) {
        $anchorScroll.yOffset = 100;
        $rootScope.openPageDialog = function (partial) {
            dialogService.addPageDialog(partial);
        };
        $rootScope.closePageDialog = function (index) {
            dialogService.removePageDialog(index);
        };
        $rootScope.createID = utilityService.createID;
        $rootScope.slatwall = $rootScope.hibachiScope;
        $rootScope.slatwall.getProcessObject = $hibachi.newEntity;
    }])
    //services
    //directives
    .directive('swCurrencyFormatter', swcurrencyformatter_1.SWCurrencyFormatter.Factory())
    //controllers
    .controller('preprocessaccount_addaccountpayment', ['$scope', '$compile', function ($scope, $compile) {
        //Define the different payment types used here
        var paymentType = { aptCharge: "444df32dd2b0583d59a19f1b77869025", aptCredit: "444df32e9b448ea196c18c66e1454c46", aptAdjustment: "68e3fb57d8102b47acc0003906d16ddd" };
        $scope.totalAmountToApply = 0; //Default value to show on new form
        $scope.paymentTypeName = $.slatwall.rbKey('define.charge'); //Default payment type
        $scope.paymentTypeLock = true; //Used to lock down the order payment type dropdowns
        $scope.amount = 0;
        $scope.updatePaymentType = function () {
            //Change all order payment types here
            angular.forEach($scope.appliedOrderPayment, function (obj, key) {
                //Only change the payment type if the type isn't adjustment'
                if ($scope.paymentType != paymentType.aptAdjustment)
                    obj.paymentType = $scope.paymentType;
            });
            if ($scope.paymentType == paymentType.aptCharge) {
                $scope.paymentTypeName = $.slatwall.rbKey('define.charge');
                $scope.paymentTypeLock = true;
            }
            else if ($scope.paymentType == paymentType.aptCredit) {
                $scope.paymentTypeName = $.slatwall.rbKey('define.credit');
                $scope.paymentTypeLock = true;
            }
            else if ($scope.paymentType == paymentType.aptAdjustment) {
                $scope.paymentTypeLock = false;
                $scope.paymentTypeName = $.slatwall.rbKey('define.adjustment');
                $scope.amount = 0;
            }
            //Update the subtotal now that we changed the payment type
            $scope.updateSubTotal();
        };
        $scope.updateSubTotal = function () {
            $scope.totalAmountToApply = 0; //Reset the subtotal before we loop
            //Loop through all the amount fields and create a running subtotal
            angular.forEach($scope.appliedOrderPayment, function (obj, key) {
                //Don't count the field if its undefied or not a number
                if (obj.amount != undefined && !isNaN(obj.amount)) {
                    //Charge / adjustment condition for subtotal
                    if ($scope.paymentType == paymentType.aptCharge || $scope.paymentType == paymentType.aptAdjustment) {
                        if (obj.paymentType == paymentType.aptCharge)
                            $scope.totalAmountToApply += parseFloat(obj.amount);
                        else if (obj.paymentType == paymentType.aptCredit)
                            $scope.totalAmountToApply -= parseFloat(obj.amount);
                        //Credit condition for subtotal
                    }
                    else if ($scope.paymentType == paymentType.aptCredit) {
                        if (obj.paymentType == paymentType.aptCharge)
                            $scope.totalAmountToApply -= parseFloat(obj.amount);
                        else if (obj.paymentType == paymentType.aptCredit)
                            $scope.totalAmountToApply += parseFloat(obj.amount);
                    }
                }
            });
            //The amount not applied to an order
            $scope.amountUnapplied = (Math.round(($scope.amount - $scope.totalAmountToApply + $scope.amountUnassigned) * 100) / 100);
            $scope.accountBalanceChange = parseFloat($scope.amount);
            //Switch the account balance display amount to a negative if you are doing a charge
            if ($scope.paymentType == paymentType.aptCharge)
                $scope.accountBalanceChange = parseFloat(($scope.accountBalanceChange * -1).toString()); //If charge, change to neg since we are lowering account balance
            else if ($scope.paymentType == paymentType.aptAdjustment)
                $scope.accountBalanceChange += parseFloat($scope.amountUnapplied); //If adjustment, use the amount unapplied to determine the balance change
        };
    }])
    //filters
    .filter('swcurrency', ['$sce', '$log', '$hibachi', swcurrency_1.SWCurrency.Factory]);
exports.slatwalladminmodule = slatwalladminmodule;
// ((): void => {
//     var app = angular.module('slatwalladmin', ['hibachi','ngSlatwall','ngSlatwallModel','ui.bootstrap','ngAnimate','ngRoute','ngSanitize','ngCkeditor']);
//     app.config(
//         ["$provide",'$logProvider','$filterProvider','$httpProvider','$routeProvider','$injector','$locationProvider','datepickerConfig', 'datepickerPopupConfig',
//         ($provide, $logProvider,$filterProvider,$httpProvider,$routeProvider,$injector,$locationProvider,datepickerConfig, datepickerPopupConfig) =>
//      {
//         datepickerConfig.showWeeks = false;
//         datepickerConfig.format = 'MMM dd, yyyy hh:mm a';
//             datepickerPopupConfig.toggleWeeksText = null;
//         if(slatwallAngular.hashbang){
//             $locationProvider.html5Mode( false ).hashPrefix('!');
//         }
//         //
//         $provide.constant("baseURL", $.slatwall.getConfig().baseURL);
//         var _partialsPath = $.slatwall.getConfig().baseURL + '/admin/client/partials/';
//         $provide.constant("partialsPath", _partialsPath);
//         $provide.constant("productBundlePartialsPath", _partialsPath+'productbundle/');
//         angular.forEach(slatwallAngular.constantPaths, function(constantPath,key){
//             var constantKey = constantPath.charAt(0).toLowerCase()+constantPath.slice(1)+'PartialsPath';
//             var constantPartialsPath = _partialsPath+constantPath.toLowerCase()+'/';
//             $provide.constant(constantKey, constantPartialsPath);
//         });
//         $logProvider.debugEnabled( $.slatwall.getConfig().debugFlag );
//         $filterProvider.register('likeFilter',function(){
//             return function(text){
//                 if(angular.isDefined(text) && angular.isString(text)){
//                     return text.replace(new RegExp('%', 'g'), '');
//                 }
//             };
//         });
//         $filterProvider.register('truncate',function(){
//             return function (input, chars, breakOnWord) {
//                 if (isNaN(chars)) return input;
//                 if (chars <= 0) return '';
//                 if (input && input.length > chars) {
//                     input = input.substring(0, chars);
//                     if (!breakOnWord) {
//                         var lastspace = input.lastIndexOf(' ');
//                         //get last space
//                         if (lastspace !== -1) {
//                             input = input.substr(0, lastspace);
//                         }
//                     }else{
//                         while(input.charAt(input.length-1) === ' '){
//                             input = input.substr(0, input.length -1);
//                         }
//                     }
//                     return input + '...';
//                 }
//                 return input;
//             };
//         });
//         $httpProvider.interceptors.push('slatwallInterceptor');
//         // route provider configuration
//         $routeProvider.when('/entity/:entityName/', {
//             template: function(params){
//                 var entityDirectiveExists = $injector.has('sw'+params.entityName+'ListDirective');
//                 if(entityDirectiveExists){
//                     return '<sw-'+params.entityName.toLowerCase()+'-list>';
//                 }else{
//                     return '<sw-list></sw-list>';
//                 }
//             },
//             controller: 'routerController'
//         }).when('/entity/:entityName/:entityID', {
//             template: function(params){
//                 var entityDirectiveExists = $injector.has('sw'+params.entityName+'DetailDirective');
//                 if(entityDirectiveExists){
//                     return '<sw-'+params.entityName.toLowerCase()+'-detail>';
//                 }else{
//                     return '<sw-detail></sw-detail>';
//                 }
//             },
//             controller: 'routerController',
//         }).otherwise({
//             //controller:'otherwiseController'
//             templateUrl: $.slatwall.getConfig().baseURL + '/admin/client/js/partials/otherwise.html',
//         });
//     }]).run(['$rootScope','$filter','$anchorScroll','$hibachi','dialogService','observerService','utilityService', ($rootScope,$filter,$anchorScroll,$hibachi,dialogService,observerService,utilityService) => {
//         $anchorScroll.yOffset = 100;
//         $rootScope.openPageDialog = function( partial ) {
//             dialogService.addPageDialog( partial );
//         };
//         $rootScope.closePageDialog = function( index ) {
//             dialogService.removePageDialog( index );
//         };
//         $rootScope.loadedResourceBundle = false;
//         $rootScope.loadedResourceBundle = $hibachi.hasResourceBundle();
//         $rootScope.buildUrl = $hibachi.buildUrl;
//         $rootScope.createID = utilityService.createID;
//         var rbListener = $rootScope.$watch('loadedResourceBundle',function(newValue,oldValue){
//             if(newValue !== oldValue){
//                 $rootScope.$broadcast('hasResourceBundle');
//                 rbListener();
//             }
//         });
//     }])
// })();


/***/ }),
/* 723 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var AlertController = /** @class */ (function () {
    //@ngInject
    function AlertController($scope, alertService) {
        $scope.$id = "alertController";
        $scope.alerts = alertService.getAlerts();
    }
    return AlertController;
}());
exports.AlertController = AlertController;


/***/ }),
/* 724 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//model
var Alert = /** @class */ (function () {
    function Alert(msg, type, fade, dismissable) {
        this.fade = false;
        this.dismissable = false;
        this.msg = msg;
        this.type = type;
        this.fade = fade;
        this.dismissable = dismissable;
    }
    return Alert;
}());
exports.Alert = Alert;


/***/ }),
/* 725 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//import Alert = require('../model/alert');
var alert_1 = __webpack_require__(724);
var AlertService = /** @class */ (function () {
    function AlertService($timeout, alerts) {
        var _this = this;
        this.$timeout = $timeout;
        this.alerts = alerts;
        this.newAlert = function () {
            return new alert_1.Alert();
        };
        this.get = function () {
            return _this.alerts || [];
        };
        this.addAlert = function (alert) {
            _this.alerts.push(alert);
            _this.$timeout(function () {
                _this.removeAlert(alert);
            }, 3500);
        };
        this.addAlerts = function (alerts) {
            angular.forEach(alerts, function (alert) {
                _this.addAlert(alert);
            });
        };
        this.removeAlert = function (alert) {
            var index = _this.alerts.indexOf(alert, 0);
            if (index != undefined) {
                _this.alerts.splice(index, 1);
            }
        };
        this.getAlerts = function () {
            return _this.alerts;
        };
        this.formatMessagesToAlerts = function (messages) {
            var alerts = [];
            if (messages && messages.length) {
                for (var message in messages) {
                    var alert = new alert_1.Alert(messages[message].message, messages[message].messageType);
                    alerts.push(alert);
                    if (alert.type === 'success' || alert.type === 'error') {
                        _this.$timeout(function () {
                            alert.fade = true;
                        }, 3500);
                        alert.dismissable = false;
                    }
                    else {
                        alert.fade = false;
                        alert.dismissable = true;
                    }
                }
            }
            return alerts;
        };
        this.removeOldestAlert = function () {
            _this.alerts.splice(0, 1);
        };
        this.alerts = [];
    }
    AlertService.$inject = [
        '$timeout'
    ];
    return AlertService;
}());
exports.AlertService = AlertService;


/***/ }),
/* 726 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../typings/hibachiTypescript.d.ts' />
/// <reference path='../typings/tsd.d.ts' />
var core_module_1 = __webpack_require__(11);
var md5 = __webpack_require__(50);
//generic bootstrapper
var BaseBootStrapper = /** @class */ (function () {
    function BaseBootStrapper(myApplication) {
        var _this = this;
        this._resourceBundle = {};
        this.getData = function (invalidCache) {
            var promises = {};
            for (var i in invalidCache) {
                var invalidCacheName = invalidCache[i];
                var functionName = invalidCacheName.charAt(0).toUpperCase() + invalidCacheName.slice(1);
                promises[invalidCacheName] = _this['get' + functionName + 'Data']();
            }
            return _this.$q.all(promises).then(function (data) {
            });
        };
        this.getAttributeCacheKeyData = function () {
            var urlString = "";
            if (!hibachiConfig) {
                hibachiConfig = {};
            }
            if (!hibachiConfig.baseURL) {
                hibachiConfig.baseURL = '';
            }
            urlString += hibachiConfig.baseURL;
            if (urlString.length && urlString.slice(-1) !== '/') {
                urlString += '/';
            }
            return _this.$http.get(urlString + '?' + hibachiConfig.action + '=api:main.getAttributeModel')
                .then(function (resp) {
                core_module_1.coremodule.constant('attributeMetaData', resp.data.data);
                //for safari private mode which has no localStorage
                try {
                    localStorage.setItem('attributeMetaData', JSON.stringify(resp.data.data));
                }
                catch (e) { }
                _this.attributeMetaData = resp.data.data;
            }, function (response) {
            });
        };
        this.getInstantiationKeyData = function () {
            if (!_this.instantiationKey) {
                var d = new Date();
                var n = d.getTime();
                _this.instantiationKey = n.toString();
            }
            var urlString = "";
            if (!hibachiConfig) {
                hibachiConfig = {};
            }
            if (!hibachiConfig.baseURL) {
                hibachiConfig.baseURL = '';
            }
            urlString += hibachiConfig.baseURL;
            if (hibachiConfig.baseURL.length && hibachiConfig.baseURL.charAt(hibachiConfig.baseURL.length - 1) != '/') {
                urlString += '/';
            }
            return _this.$http.get(urlString + '/custom/config/config.json?instantiationKey=' + _this.instantiationKey)
                .then(function (resp) {
                var appConfig = resp.data.data;
                if (hibachiConfig.baseURL.length) {
                    appConfig.baseURL = urlString;
                }
                core_module_1.coremodule.constant('appConfig', resp.data.data);
                _this.appConfig = appConfig;
                return _this.getResourceBundles();
            }, function (response) {
            });
        };
        this.getResourceBundle = function (locale) {
            var deferred = _this.$q.defer();
            var locale = locale || _this.appConfig.rbLocale;
            if (_this._resourceBundle[locale]) {
                return _this._resourceBundle[locale];
            }
            var urlString = _this.appConfig.baseURL + '/custom/config/resourceBundles/' + locale + '.json?instantiationKey=' + _this.appConfig.instantiationKey;
            _this.$http({
                url: urlString,
                method: "GET"
            }).success(function (response, status, headersGetter) {
                _this._resourceBundle[locale] = response;
                deferred.resolve(response);
            }).error(function (response, status) {
                if (status === 404) {
                    _this._resourceBundle[locale] = {};
                    deferred.resolve(response);
                }
                else {
                    deferred.reject(response);
                }
            });
            return deferred.promise;
        };
        this.getResourceBundles = function () {
            var rbLocale = _this.appConfig.rbLocale.split('_');
            var localeListArray = rbLocale;
            var rbPromise;
            var rbPromises = [];
            rbPromise = _this.getResourceBundle(_this.appConfig.rbLocale);
            rbPromises.push(rbPromise);
            if (localeListArray.length === 2) {
                //$log.debug('has two');
                rbPromise = _this.getResourceBundle(localeListArray[0]);
                rbPromises.push(rbPromise);
            }
            if (localeListArray[0] !== 'en') {
                //$log.debug('get english');
                _this.getResourceBundle('en_us');
                _this.getResourceBundle('en');
            }
            var resourceBundlePromises = _this.$q.all(rbPromises).then(function (data) {
                core_module_1.coremodule.constant('resourceBundles', _this._resourceBundle);
            }, function (error) {
                //can enterhere due to 404
                core_module_1.coremodule.constant('resourceBundles', _this._resourceBundle);
            });
            return resourceBundlePromises;
        };
        this.myApplication = myApplication;
        return angular.lazy(this.myApplication)
            .resolve(['$http', '$q', '$timeout', function ($http, $q, $timeout) {
                _this.$http = $http;
                _this.$q = $q;
                var baseURL = hibachiConfig.baseURL;
                if (!baseURL) {
                    baseURL = '';
                }
                if (baseURL.length && baseURL.slice(-1) !== '/') {
                    baseURL += '/';
                }
                return $http.get(baseURL + '?' + hibachiConfig.action + '=api:main.getInstantiationKey')
                    .then(function (resp) {
                    _this.instantiationKey = resp.data.data.instantiationKey;
                    var invalidCache = [];
                    try {
                        var hashedData = md5(localStorage.getItem('attributeMetaData'));
                        if (resp.data.data['attributeCacheKey'] === hashedData.toUpperCase()) {
                            core_module_1.coremodule.constant('attributeMetaData', JSON.parse(localStorage.getItem('attributeMetaData')));
                        }
                        else {
                            invalidCache.push('attributeCacheKey');
                        }
                    }
                    catch (e) {
                        invalidCache.push('attributeCacheKey');
                    }
                    invalidCache.push('instantiationKey');
                    return _this.getData(invalidCache);
                });
            }])
            .loading(function () {
            //angular.element('#loading').show();
        })
            .error(function () {
            //angular.element('#error').show();
        })
            .done(function () {
            //angular.element('#loading').hide();
        });
    }
    return BaseBootStrapper;
}());
exports.BaseBootStrapper = BaseBootStrapper;


/***/ }),
/* 727 */,
/* 728 */,
/* 729 */,
/* 730 */,
/* 731 */,
/* 732 */,
/* 733 */,
/* 734 */,
/* 735 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAddFilterButtons = /** @class */ (function () {
    //@ngInject
    function SWAddFilterButtons(collectionService, collectionPartialsPath, hibachiPathBuilder) {
        return {
            require: '^swFilterGroups',
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "addfilterbuttons.html",
            scope: {
                itemInUse: "=",
                readOnly: "="
            },
            link: function (scope, element, attrs, filterGroupsController) {
                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();
                scope.addFilterItem = function () {
                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse);
                };
                scope.addFilterGroupItem = function () {
                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse, true);
                };
            }
        };
    }
    SWAddFilterButtons.Factory = function () {
        var directive = function (collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWAddFilterButtons(collectionService, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionService',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWAddFilterButtons;
}());
exports.SWAddFilterButtons = SWAddFilterButtons;


/***/ }),
/* 736 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCollection = /** @class */ (function () {
    //@ngInject
    function SWCollection(hibachiPathBuilder, collectionPartialsPath) {
        return {
            restrict: 'A',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "collection.html",
            link: function (scope, $element, $attrs) {
                scope.tabsUniqueID = Math.floor(Math.random() * 999);
                scope.toggleCogOpen = $attrs.toggleoption;
                //Toggles open/close of filters and display options
                scope.toggleFiltersAndOptions = function () {
                    if (scope.toggleCogOpen === false) {
                        scope.toggleCogOpen = true;
                    }
                    else {
                        scope.toggleCogOpen = false;
                    }
                };
            }
        };
    }
    SWCollection.Factory = function () {
        var directive = function (hibachiPathBuilder, collectionPartialsPath) { return new SWCollection(hibachiPathBuilder, collectionPartialsPath); };
        directive.$inject = [
            'hibachiPathBuilder',
            'collectionPartialsPath'
        ];
        return directive;
    };
    return SWCollection;
}());
exports.SWCollection = SWCollection;


/***/ }),
/* 737 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCollectionTable = /** @class */ (function () {
    //@ngInject
    function SWCollectionTable($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "collectiontable.html",
            scope: {
                collection: "=",
                collectionConfig: "=",
                isRadio: "=?",
                //angularLink:true || false
                angularLinks: "=?"
            },
            link: function (scope, element, attrs) {
                if (angular.isUndefined(scope.angularLinks)) {
                    scope.angularLinks = false;
                }
                if (scope.collection.collectionObject) {
                    scope.collectionObject = $hibachi['new' + scope.collection.collectionObject]();
                }
                else if (scope.collectionConfig.baseEntityName) {
                    scope.collectionObject = scope.collectionConfig.baseEntityName;
                }
                var escapeRegExp = function (str) {
                    return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
                };
                scope.replaceAll = function (str, find, replace) {
                    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
                };
                /*
                 * Handles setting the key on the data.
                 * */
                angular.forEach(scope.collectionConfig.columns, function (column) {
                    $log.debug("Config Key : " + column);
                    column.key = column.propertyIdentifier.replace(/\./g, '_').replace(scope.collectionConfig.baseEntityAlias + '_', '');
                });
                scope.addSelection = function (selectionid, selection) {
                    selectionService.addSelection(selectionid, selection);
                };
            }
        };
    }
    SWCollectionTable.Factory = function () {
        var directive = function ($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi) { return new SWCollectionTable($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi); };
        directive.$inject = [
            '$log',
            'hibachiPathBuilder',
            'collectionPartialsPath',
            'selectionService',
            '$hibachi'
        ];
        return directive;
    };
    return SWCollectionTable;
}());
exports.SWCollectionTable = SWCollectionTable;


/***/ }),
/* 738 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWColumnItem = /** @class */ (function () {
    //@ngInject
    function SWColumnItem($log, hibachiPathBuilder, collectionPartialsPath, observerService) {
        return {
            restrict: 'A',
            require: {
                swDisplayOptions: "?^swDisplayOptions",
                swListingControls: "?^swListingControls"
            },
            scope: {
                column: "=",
                columns: "=",
                columnIndex: "=",
                saveCollection: "&?",
                propertiesList: "<",
                orderBy: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "columnitem.html",
            link: function (scope, element, attrs, controller, observerService) {
                if (!scope.saveCollection && controller.swListingControls) {
                    scope.saveCollection = function () {
                        controller.swListingControls.collectionConfig.columns = scope.columns;
                        controller.swDisplayOptions.columns = scope.columns;
                        controller.swListingControls.saveCollection();
                    };
                }
                scope.editingDisplayTitle = false;
                scope.editDisplayTitle = function () {
                    if (angular.isUndefined(scope.column.displayTitle) || !scope.column.displayTitle.length) {
                        scope.column.displayTitle = scope.column.title;
                    }
                    scope.previousDisplayTitle = scope.column.displayTitle;
                    scope.editingDisplayTitle = true;
                };
                scope.saveDisplayTitle = function () {
                    scope.saveCollection();
                    scope.editingDisplayTitle = false;
                };
                scope.cancelDisplayTitle = function () {
                    scope.column.displayTitle = scope.previousDisplayTitle;
                    scope.editingDisplayTitle = false;
                };
                if (angular.isUndefined(scope.column.sorting)) {
                    scope.column.sorting = {
                        active: false,
                        sortOrder: 'asc',
                        priority: 0
                    };
                }
                scope.toggleVisible = function (column) {
                    if (angular.isUndefined(column.isVisible)) {
                        column.isVisible = false;
                    }
                    column.isVisible = !column.isVisible;
                    scope.saveCollection();
                };
                scope.toggleSearchable = function (column) {
                    if (angular.isUndefined(column.isSearchable)) {
                        column.isSearchable = false;
                    }
                    column.isSearchable = !column.isSearchable;
                    scope.saveCollection();
                };
                scope.toggleExportable = function (column) {
                    $log.debug('toggle exporable');
                    if (angular.isUndefined(column.isExportable)) {
                        column.isExportable = false;
                    }
                    column.isExportable = !column.isExportable;
                    scope.saveCollection();
                };
                var compareByPriority = function (a, b) {
                    if (a.sorting && b.sorting && angular.isDefined(a.sorting) && angular.isDefined(a.sorting.priority)) {
                        if (a.sorting.priority < b.sorting.priority) {
                            return -1;
                        }
                        if (a.sorting.priority > b.sorting.priority) {
                            return 1;
                        }
                    }
                    return 0;
                };
                var updateOrderBy = function () {
                    if (angular.isDefined(scope.columns)) {
                        var columnsCopy = angular.copy(scope.columns);
                        columnsCopy.sort(compareByPriority);
                        scope.orderBy = [];
                        angular.forEach(columnsCopy, function (column) {
                            if (angular.isDefined(column.sorting) && column.sorting.active === true) {
                                var orderBy = {
                                    propertyIdentifier: column.propertyIdentifier,
                                    direction: column.sorting.sortOrder
                                };
                                if (column.aggregate && column.aggregate.aggregateFunction) {
                                    var aggregateFunction = column.aggregate.aggregateFunction.toUpperCase();
                                    if (aggregateFunction == 'AVERAGE') {
                                        aggregateFunction = 'AVG';
                                    }
                                    orderBy.propertyIdentifier = aggregateFunction + '(' + column.propertyIdentifier + ')';
                                }
                                scope.orderBy.push(orderBy);
                            }
                        });
                    }
                };
                scope.toggleSortable = function (column) {
                    $log.debug('toggle sortable');
                    if (angular.isUndefined(column.sorting)) {
                        column.sorting = {
                            active: true,
                            sortOrder: 'asc',
                            priority: 0
                        };
                    }
                    if (column.sorting.active === true) {
                        if (column.sorting.sortOrder === 'asc') {
                            column.sorting.sortOrder = 'desc';
                        }
                        else {
                            removeSorting(column);
                            column.sorting.active = false;
                        }
                    }
                    else {
                        column.sorting.active = true;
                        column.sorting.sortOrder = 'asc';
                        column.sorting.priority = getActivelySorting().length;
                    }
                    updateOrderBy();
                    scope.saveCollection();
                };
                var removeSorting = function (column, saving) {
                    if (column.sorting.active === true) {
                        for (var i in scope.columns) {
                            if (scope.columns[i].sorting.active === true && scope.columns[i].sorting.priority > column.sorting.priority) {
                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority - 1;
                            }
                        }
                        column.sorting.priority = 0;
                    }
                    if (!saving) {
                        updateOrderBy();
                        scope.saveCollection();
                    }
                };
                scope.prioritize = function (column) {
                    if (column.sorting.priority === 1) {
                        var activelySorting = getActivelySorting();
                        for (var i in scope.columns) {
                            if (scope.columns[i].sorting.active === true) {
                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority - 1;
                            }
                        }
                        column.sorting.priority = activelySorting.length;
                    }
                    else {
                        for (var i in scope.columns) {
                            if (scope.columns[i].sorting.active === true && scope.columns[i].sorting.priority === column.sorting.priority - 1) {
                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority + 1;
                            }
                        }
                        column.sorting.priority -= 1;
                    }
                    updateOrderBy();
                    scope.saveCollection();
                };
                var getActivelySorting = function () {
                    var activelySorting = [];
                    for (var i in scope.columns) {
                        if (scope.columns[i].sorting.active === true) {
                            activelySorting.push(scope.columns[i]);
                        }
                    }
                    return activelySorting;
                };
                scope.removeColumn = function (columnIndex) {
                    if (scope.columns[columnIndex].isDeletable) {
                        removeSorting(scope.columns[columnIndex], true);
                        controller.swDisplayOptions.removeColumn(columnIndex);
                        updateOrderBy();
                        scope.saveCollection();
                    }
                };
            }
        };
    }
    SWColumnItem.Factory = function () {
        var directive = function ($log, hibachiPathBuilder, collectionPartialsPath, observerService) { return new SWColumnItem($log, hibachiPathBuilder, collectionPartialsPath, observerService); };
        directive.$inject = [
            '$log',
            'hibachiPathBuilder',
            'collectionPartialsPath',
            'observerService'
        ];
        return directive;
    };
    return SWColumnItem;
}());
exports.SWColumnItem = SWColumnItem;


/***/ }),
/* 739 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWConditionCriteria = /** @class */ (function () {
    //@ngInject
    function SWConditionCriteria($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder) {
        /* Template info begin*/
        var getTemplate = function (selectedFilterProperty) {
            var template = '';
            var templatePath = '';
            if (angular.isUndefined(selectedFilterProperty.ormtype) && angular.isUndefined(selectedFilterProperty.fieldtype)) {
                templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteria.html";
            }
            else {
                var criteriaormtype = selectedFilterProperty.ormtype;
                var criteriafieldtype = selectedFilterProperty.fieldtype;
                /*TODO: convert all switches to object literals*/
                switch (criteriaormtype) {
                    case 'boolean':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriaboolean.html";
                        break;
                    case 'string':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriastring.html";
                        break;
                    case 'timestamp':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriadate.html";
                        break;
                    case 'big_decimal':
                    case 'integer':
                    case 'float':
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criterianumber.html";
                        break;
                }
                switch (criteriafieldtype) {
                    case "many-to-one":
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriamanytoone.html";
                        break;
                    case "many-to-many":
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriamanytomany.html";
                        break;
                    case "one-to-many":
                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriaonetomany.html";
                        break;
                }
            }
            var templateLoader = $http.get(templatePath, { cache: $templateCache });
            return templateLoader;
        };
        /* Template info end*/
        /* Options info begin */
        var getStringOptions = function (type) {
            var stringOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                stringOptions = [
                    {
                        display: "Equals",
                        comparisonOperator: "="
                    },
                    {
                        display: "Doesn't Equal",
                        comparisonOperator: "<>"
                    },
                    {
                        display: "Contains",
                        comparisonOperator: "like",
                        pattern: "%w%"
                    },
                    {
                        display: "Doesn't Contain",
                        comparisonOperator: "not like",
                        pattern: "%w%"
                    },
                    {
                        display: "Starts With",
                        comparisonOperator: "like",
                        pattern: "w%"
                    },
                    {
                        display: "Doesn't Start With",
                        comparisonOperator: "not like",
                        pattern: "w%"
                    },
                    {
                        display: "Ends With",
                        comparisonOperator: "like",
                        pattern: "%w"
                    },
                    {
                        display: "Doesn't End With",
                        comparisonOperator: "not like",
                        pattern: "%w"
                    },
                    {
                        display: "In List",
                        comparisonOperator: "in"
                    },
                    {
                        display: "Not In List",
                        comparisonOperator: "not in"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
                if (type === 'condition') {
                    stringOptions = [
                        {
                            display: "Equals",
                            comparisonOperator: "="
                        },
                        {
                            display: "In List",
                            comparisonOperator: "in"
                        },
                        {
                            display: "Defined",
                            comparisonOperator: "is not",
                            value: "null"
                        },
                        {
                            display: "Not Defined",
                            comparisonOperator: "is",
                            value: "null"
                        }
                    ];
                }
            }
            return stringOptions;
        };
        var getBooleanOptions = function (type) {
            var booleanOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type === 'filter' || type === 'condition') {
                booleanOptions = [
                    {
                        display: "True",
                        comparisonOperator: "=",
                        value: "True"
                    },
                    {
                        display: "False",
                        comparisonOperator: "=",
                        value: "False"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            return booleanOptions;
        };
        var getDateOptions = function (type) {
            var dateOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type === 'filter') {
                dateOptions = [
                    {
                        display: "Date",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'exactDate',
                        }
                    },
                    {
                        display: "In Range",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'range'
                        }
                    },
                    {
                        display: "Not In Range",
                        comparisonOperator: "not between",
                        dateInfo: {
                            type: 'range'
                        }
                    },
                    {
                        display: "Today",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'd',
                            measureCount: 0,
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "Yesterday",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'd',
                            measureCount: -1,
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Week",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'w',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Month",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'm',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Quarter",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'q',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "This Year",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'y',
                            behavior: 'toDate'
                        }
                    },
                    {
                        display: "Last N Hour(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'h',
                            measureTypeDisplay: 'Hours'
                        }
                    },
                    {
                        display: "Last N Day(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'd',
                            measureTypeDisplay: 'Days'
                        }
                    },
                    {
                        display: "Last N Week(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'w',
                            measureTypeDisplay: 'Weeks'
                        }
                    },
                    {
                        display: "Last N Month(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'm',
                            measureTypeDisplay: 'Months'
                        }
                    },
                    {
                        display: "Last N Quarter(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'q',
                            measureTypeDisplay: 'Quarters'
                        }
                    },
                    {
                        display: "Last N Year(s)",
                        comparisonOperator: "between",
                        dateInfo: {
                            type: 'calculation',
                            measureType: 'y',
                            measureTypeDisplay: 'Years'
                        }
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            if (type === 'condition') {
                dateOptions = [
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            return dateOptions;
        };
        var getNumberOptions = function (type) {
            var numberOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                numberOptions = [
                    {
                        display: "Equals",
                        comparisonOperator: "="
                    },
                    {
                        display: "Doesn't Equal",
                        comparisonOperator: "<>"
                    },
                    {
                        display: "In Range",
                        comparisonOperator: "between",
                        type: "range"
                    },
                    {
                        display: "Not In Range",
                        comparisonOperator: "not between",
                        type: "range"
                    },
                    {
                        display: "Greater Than",
                        comparisonOperator: ">"
                    },
                    {
                        display: "Greater Than Or Equal",
                        comparisonOperator: ">="
                    },
                    {
                        display: "Less Than",
                        comparisonOperator: "<"
                    },
                    {
                        display: "Less Than Or Equal",
                        comparisonOperator: "<="
                    },
                    {
                        display: "In List",
                        comparisonOperator: "in"
                    },
                    {
                        display: "Not In List",
                        comparisonOperator: "not in"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            if (type === 'condition') {
                numberOptions = [
                    {
                        display: "Equals",
                        comparisonOperator: "="
                    },
                    {
                        display: "Doesn't Equal",
                        comparisonOperator: "<>"
                    },
                    {
                        display: "Greater Than",
                        comparisonOperator: ">"
                    },
                    {
                        display: "Greater Than Or Equal",
                        comparisonOperator: ">="
                    },
                    {
                        display: "Less Than",
                        comparisonOperator: "<"
                    },
                    {
                        display: "Less Than Or Equal",
                        comparisonOperator: "<="
                    },
                    {
                        display: "In List",
                        comparisonOperator: "in"
                    },
                    {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                ];
            }
            return numberOptions;
        };
        var getOneToManyOptions = function (type) {
            var oneToManyOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                oneToManyOptions = [
                    {
                        display: "All Exist In Collection",
                        comparisonOperator: "All"
                    },
                    {
                        display: "None Exist In Collection",
                        comparisonOperator: "None"
                    },
                    {
                        display: "Some Exist In Collection",
                        comparisonOperator: "One"
                    }
                ];
            }
            if (type === 'condition') {
                oneToManyOptions = [];
            }
            return oneToManyOptions;
        };
        var getManyToManyOptions = function (type) {
            var manyToManyOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                manyToManyOptions = [
                    {
                        display: "All Exist In Collection",
                        comparisonOperator: "All"
                    },
                    {
                        display: "None Exist In Collection",
                        comparisonOperator: "None"
                    },
                    {
                        display: "Some Exist In Collection",
                        comparisonOperator: "One"
                    },
                    {
                        display: "Empty",
                        comparisonOperator: "is",
                        value: "null"
                    },
                    {
                        display: "Not Empty",
                        comparisonOperator: "is not",
                        value: "null"
                    }
                ];
            }
            if (type === 'condition') {
                manyToManyOptions = [
                    {
                        display: "Empty",
                        comparisonOperator: "is",
                        value: "null"
                    },
                    {
                        display: "Not Empty",
                        comparisonOperator: "is not",
                        value: "null"
                    }
                ];
            }
            return manyToManyOptions;
        };
        var getManyToOneOptions = function (type) {
            var manyToOneOptions = [];
            if (angular.isUndefined(type)) {
                type = 'filter';
            }
            if (type == 'filter') {
                manyToOneOptions = {
                    drillEntity: {},
                    hasEntity: {
                        display: "Defined",
                        comparisonOperator: "is not",
                        value: "null"
                    },
                    notHasEntity: {
                        display: "Not Defined",
                        comparisonOperator: "is",
                        value: "null"
                    }
                };
            }
            return manyToOneOptions;
        };
        /* Options info end */
        var linker = function (scope, element, attrs) {
            /*show the user the value without % symbols as these are reserved*/
            scope.$watch('selectedFilterProperty.criteriaValue', function (criteriaValue) {
                if (angular.isDefined(criteriaValue)) {
                    scope.selectedFilterProperty.criteriaValue = $filter('likeFilter')(criteriaValue);
                }
            });
            scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                if (angular.isDefined(selectedFilterProperty)) {
                    $log.debug('watchSelectedFilterProperty');
                    $log.debug(scope.selectedFilterProperty);
                    /*prepopulate if we have a comparison operator and value*/
                    if (selectedFilterProperty === null) {
                        return;
                    }
                    if (angular.isDefined(selectedFilterProperty.ormtype)) {
                        switch (scope.selectedFilterProperty.ormtype) {
                            case "boolean":
                                scope.conditionOptions = getBooleanOptions();
                                break;
                            case "string":
                                scope.conditionOptions = getStringOptions();
                                scope.selectedConditionChanged = function (selectedFilterProperty) {
                                    //scope.selectedFilterProperty.criteriaValue = '';
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                        selectedFilterProperty.showCriteriaValue = false;
                                    }
                                    else {
                                        selectedFilterProperty.showCriteriaValue = true;
                                    }
                                };
                                break;
                            case "timestamp":
                                scope.conditionOptions = getDateOptions();
                                scope.today = function () {
                                    if (angular.isDefined(scope.selectedFilterProperty)) {
                                        scope.selectedFilterProperty.criteriaRangeStart = new Date().getTime();
                                        scope.selectedFilterProperty.criteriaRangeEnd = new Date().getTime();
                                    }
                                };
                                scope.clear = function () {
                                    scope.selectedFilterProperty.criteriaRangeStart = null;
                                    scope.selectedFilterProperty.criteriaRangeEnd = null;
                                };
                                scope.openCalendarStart = function ($event) {
                                    $event.preventDefault();
                                    $event.stopPropagation();
                                    scope.openedCalendarStart = true;
                                };
                                scope.openCalendarEnd = function ($event) {
                                    $event.preventDefault();
                                    $event.stopPropagation();
                                    scope.openedCalendarEnd = true;
                                };
                                scope.formats = [
                                    'dd-MMMM-yyyy',
                                    'yyyy/MM/dd',
                                    'dd.MM.yyyy',
                                    'shortDate'
                                ];
                                scope.format = scope.formats[1];
                                scope.selectedConditionChanged = function (selectedFilterProperty) {
                                    $log.debug('selectedConditionChanged Begin');
                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                                    //check whether condition is checking for null values in date
                                    if (angular.isDefined(selectedCondition.dateInfo)) {
                                        //is condition a calculation
                                        if (selectedCondition.dateInfo.type === 'calculation') {
                                            selectedCondition.showCriteriaStart = true;
                                            selectedCondition.showCriteriaEnd = true;
                                            selectedCondition.disableCriteriaStart = true;
                                            selectedCondition.disableCriteriaEnd = true;
                                            //if item is a calculation of an N number of measure display the measure and number input
                                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {
                                                $log.debug('Not toDate');
                                                selectedCondition.showNumberOf = true;
                                                selectedCondition.conditionDisplay = 'Number of ' + selectedCondition.dateInfo.measureTypeDisplay + ' :';
                                            }
                                            else {
                                                $log.debug('toDate');
                                                var today = Date.parse('today');
                                                var todayEOD = today.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = todayEOD;
                                                //get this Measure to date
                                                switch (selectedCondition.dateInfo.measureType) {
                                                    case 'd':
                                                        var dateBOD = Date.parse('today').add(selectedCondition.dateInfo.measureCount).days();
                                                        dateBOD.setHours(0, 0, 0, 0);
                                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();
                                                        break;
                                                    case 'w':
                                                        var firstDayOfWeek = Date.today().last().monday();
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();
                                                        break;
                                                    case 'm':
                                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();
                                                        break;
                                                    case 'q':
                                                        var month = Date.parse('today').toString('MM');
                                                        var year = Date.parse('today').toString('yyyy');
                                                        var quarterMonth = (Math.floor(month / 3) * 3);
                                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();
                                                        break;
                                                    case 'y':
                                                        var year = Date.parse('today').toString('yyyy');
                                                        var firstDayOfYear = new Date(year, 0, 1);
                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();
                                                        break;
                                                }
                                            }
                                        }
                                        if (selectedCondition.dateInfo.type === 'range') {
                                            selectedCondition.showCriteriaStart = true;
                                            selectedCondition.showCriteriaEnd = true;
                                            selectedCondition.disableCriteriaStart = false;
                                            selectedCondition.disableCriteriaEnd = false;
                                            selectedCondition.showNumberOf = false;
                                        }
                                        if (selectedCondition.dateInfo.type === 'exactDate') {
                                            selectedCondition.showCriteriaEnd = false;
                                            selectedCondition.disableCriteriaStart = false;
                                            selectedCondition.disableCriteriaEnd = true;
                                            if (!selectedCondition.dateInfo.measureType) {
                                                selectedCondition.conditionDisplay = '';
                                                selectedCondition.showCriteriaStart = true;
                                                selectedCondition.showNumberOf = false;
                                                selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                                                selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                                            }
                                            else {
                                                selectedCondition.conditionDisplay = 'How many ' + selectedCondition.dateInfo.measureTypeDisplay + ' ago?';
                                                selectedCondition.showCriteriaStart = false;
                                                selectedCondition.showNumberOf = true;
                                            }
                                        }
                                    }
                                    else {
                                        selectedCondition.showCriteriaStart = false;
                                        selectedCondition.showCriteriaEnd = false;
                                        selectedCondition.showNumberOf = false;
                                        selectedCondition.conditionDisplay = '';
                                    }
                                    $log.debug('selectedConditionChanged End');
                                    $log.debug('selectedConditionChanged Result');
                                    $log.debug(selectedCondition);
                                    $log.debug(selectedFilterProperty);
                                };
                                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                                    if (selectedCondition.dateInfo.type === 'calculation') {
                                        var measureCount = selectedFilterProperty.criteriaNumberOf;
                                        switch (selectedCondition.dateInfo.measureType) {
                                            case 'h':
                                                var today = Date.parse('today');
                                                selectedFilterProperty.criteriaRangeEnd = today.getTime();
                                                var todayXHoursAgo = Date.parse('today').add(-(measureCount)).hours();
                                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();
                                                break;
                                            case 'd':
                                                var lastFullDay = Date.parse('today').add(-1).days();
                                                lastFullDay.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();
                                                var lastXDaysAgo = Date.parse('today').add(-(measureCount)).days();
                                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();
                                                break;
                                            case 'w':
                                                var lastFullWeekEnd = Date.today().last().sunday();
                                                lastFullWeekEnd.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();
                                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();
                                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();
                                                break;
                                            case 'm':
                                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();
                                                lastFullMonthEnd.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();
                                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();
                                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();
                                                break;
                                            case 'q':
                                                var currentQuarter = Math.floor((Date.parse('today').getMonth() / 3));
                                                var firstDayOfCurrentQuarter = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();
                                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();
                                                var lastXQuartersAgo = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                                lastXQuartersAgo.add(-(measureCount * 3)).months();
                                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();
                                                break;
                                            case 'y':
                                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();
                                                lastFullYearEnd.setHours(23, 59, 59, 999);
                                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();
                                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();
                                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();
                                                break;
                                        }
                                    }
                                    if (selectedCondition.dateInfo.type === 'exactDate') {
                                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);
                                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                                    }
                                    if (selectedCondition.dateInfo.type === 'range') {
                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
                                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                                        }
                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd)) {
                                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);
                                        }
                                    }
                                    $log.debug('criteriaRangeChanged');
                                    $log.debug(selectedCondition);
                                    $log.debug(selectedFilterProperty);
                                };
                                break;
                            case "big_decimal":
                            case "integer":
                            case "float":
                                scope.conditionOptions = getNumberOptions();
                                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                                };
                                scope.selectedConditionChanged = function (selectedFilterProperty) {
                                    selectedFilterProperty.showCriteriaValue = true;
                                    //check whether the type is a range
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.type)) {
                                        selectedFilterProperty.showCriteriaValue = false;
                                        selectedFilterProperty.selectedCriteriaType.showCriteriaStart = true;
                                        selectedFilterProperty.selectedCriteriaType.showCriteriaEnd = true;
                                    }
                                    //is null or is not null
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                        selectedFilterProperty.showCriteriaValue = false;
                                    }
                                };
                                break;
                        }
                    }
                    if (angular.isDefined(scope.selectedFilterProperty.fieldtype)) {
                        switch (scope.selectedFilterProperty.fieldtype) {
                            case "many-to-one":
                                scope.conditionOptions = getManyToOneOptions(scope.comparisonType);
                                $log.debug('many-to-one');
                                $log.debug(scope.selectedFilterProperty);
                                $log.debug(scope.filterPropertiesList);
                                if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
                                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.selectedFilterProperty.cfc);
                                    filterPropertiesPromise.then(function (value) {
                                        scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
                                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
                                    }, function (reason) {
                                    });
                                }
                                break;
                            case "many-to-many":
                            case "one-to-many":
                                scope.manyToManyOptions = getManyToManyOptions();
                                scope.oneToManyOptions = getOneToManyOptions();
                                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(selectedFilterProperty.cfc);
                                existingCollectionsPromise.then(function (value) {
                                    scope.collectionOptions = value.data;
                                    if (angular.isDefined(scope.workflowCondition.collectionID)) {
                                        for (var i in scope.collectionOptions) {
                                            if (scope.collectionOptions[i].collectionID === scope.workflowCondition.collectionID) {
                                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
                                            }
                                        }
                                        for (var i in scope.oneToManyOptions) {
                                            if (scope.oneToManyOptions[i].comparisonOperator === scope.workflowCondition.criteria) {
                                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];
                                            }
                                        }
                                    }
                                });
                                break;
                        }
                    }
                    $log.debug('workflowCondition');
                    $log.debug(scope.workflowCondition);
                    angular.forEach(scope.conditionOptions, function (conditionOption) {
                        if (conditionOption.display == scope.workflowCondition.conditionDisplay) {
                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                            scope.selectedFilterProperty.criteriaValue = scope.workflowCondition.value;
                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo)
                                && angular.isDefined(scope.workflowCondition.value)
                                && scope.workflowCondition.value.length) {
                                var dateRangeArray = scope.workflowCondition.value.split("-");
                                scope.selectedFilterProperty.criteriaRangeStart = new Date(parseInt(dateRangeArray[0]));
                                scope.selectedFilterProperty.criteriaRangeEnd = new Date(parseInt(dateRangeArray[1]));
                            }
                            if (angular.isDefined(scope.workflowCondition.criteriaNumberOf)) {
                                scope.selectedFilterProperty.criteriaNumberOf = scope.workflowCondition.criteriaNumberOf;
                            }
                            if (angular.isDefined(scope.selectedConditionChanged)) {
                                scope.selectedConditionChanged(scope.selectedFilterProperty);
                            }
                        }
                    });
                    $log.debug('templateLoader');
                    $log.debug(selectedFilterProperty);
                    var templateLoader = getTemplate(selectedFilterProperty);
                    var promise = templateLoader.success(function (html) {
                        element.html(html);
                        $compile(element.contents())(scope);
                    });
                }
            });
            scope.selectedCriteriaChanged = function (selectedCriteria) {
                $log.debug(selectedCriteria);
                //update breadcrumbs as array of filterpropertylist keys
                $log.debug(scope.selectedFilterProperty);
                var breadCrumb = {
                    entityAlias: scope.selectedFilterProperty.name,
                    cfc: scope.selectedFilterProperty.cfc,
                    propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier
                };
                scope.workflowCondition.breadCrumbs.push(breadCrumb);
                //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                //update criteria to display the condition of the new critera we have selected
            };
        };
        return {
            restrict: 'A',
            scope: {
                workflowCondition: "=",
                selectedFilterProperty: "=",
                filterPropertiesList: "=",
                selectedFilterPropertyChanged: "&"
            },
            link: linker
        };
    }
    SWConditionCriteria.Factory = function () {
        var directive = function ($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWConditionCriteria($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder); };
        directive.$inject = [
            '$http',
            '$compile',
            '$templateCache',
            '$log',
            '$hibachi',
            '$filter',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWConditionCriteria;
}());
exports.SWConditionCriteria = SWConditionCriteria;


/***/ }),
/* 740 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCriteria = /** @class */ (function () {
    function SWCriteria(collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                filterItem: "=",
                selectedFilterProperty: "=",
                filterPropertiesList: "=",
                selectedFilterPropertyChanged: "&",
                comparisonType: "=",
                collectionConfig: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteria.html',
            link: function (scope, element, attrs) {
            }
        };
    }
    SWCriteria.Factory = function () {
        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteria(collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteria;
}());
exports.SWCriteria = SWCriteria;


/***/ }),
/* 741 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaBoolean = /** @class */ (function () {
    function SWCriteriaBoolean(collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriaboolean.html',
            link: function (scope, element, attrs) {
                var getBooleanOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var booleanOptions = [];
                    if (type === 'filter') {
                        booleanOptions = [
                            {
                                display: "True",
                                comparisonOperator: "=",
                                value: "True"
                            },
                            {
                                display: "False",
                                comparisonOperator: "=",
                                value: "False"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        booleanOptions = [
                            {
                                display: "True",
                                comparisonOperator: "eq",
                                value: "True"
                            },
                            {
                                display: "False",
                                comparisonOperator: "eq",
                                value: "False"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return booleanOptions;
                };
                scope.conditionOptions = getBooleanOptions(scope.comparisonType);
                angular.forEach(scope.conditionOptions, function (conditionOption) {
                    if (conditionOption.display == scope.filterItem.conditionDisplay) {
                        scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                        scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                        if (angular.isDefined(scope.selectedConditionChanged)) {
                            scope.selectedConditionChanged(scope.selectedFilterProperty);
                        }
                    }
                });
            }
        };
    }
    SWCriteriaBoolean.Factory = function () {
        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaBoolean(collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaBoolean;
}());
exports.SWCriteriaBoolean = SWCriteriaBoolean;


/***/ }),
/* 742 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaDate = /** @class */ (function () {
    function SWCriteriaDate($log, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriadate.html',
            link: function (scope, element, attrs) {
                var getDateOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var dateOptions = [];
                    if (type === 'filter') {
                        dateOptions = [
                            {
                                display: "Date",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                }
                            },
                            {
                                display: "In Range",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'range'
                                }
                            },
                            {
                                display: "Not In Range",
                                comparisonOperator: "not between",
                                dateInfo: {
                                    type: 'range'
                                }
                            },
                            {
                                display: "Today",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'd',
                                    measureCount: 0,
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "Yesterday",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'd',
                                    measureCount: -1,
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Week",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'w',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Month",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'm',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Quarter",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'q',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "This Year",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'y',
                                    behavior: 'toDate'
                                }
                            },
                            {
                                display: "Last N Hour(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'h',
                                    measureTypeDisplay: 'Hours'
                                }
                            },
                            {
                                display: "Last N Day(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'd',
                                    measureTypeDisplay: 'Days'
                                }
                            },
                            {
                                display: "Last N Week(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'w',
                                    measureTypeDisplay: 'Weeks'
                                }
                            },
                            {
                                display: "Last N Month(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'm',
                                    measureTypeDisplay: 'Months'
                                }
                            },
                            {
                                display: "Last N Quarter(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'q',
                                    measureTypeDisplay: 'Quarters'
                                }
                            },
                            {
                                display: "Last N Year(s)",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'calculation',
                                    measureType: 'y',
                                    measureTypeDisplay: 'Years'
                                }
                            },
                            {
                                display: "Exact N Day(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'd',
                                    measureTypeDisplay: 'Days'
                                }
                            },
                            {
                                display: "Exact N Month(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'm',
                                    measureTypeDisplay: 'Months'
                                }
                            },
                            {
                                display: "Exact N Year(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'y',
                                    measureTypeDisplay: 'Years'
                                }
                            },
                            {
                                display: "Exact N Day(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'd',
                                    measureTypeDisplay: 'Days'
                                }
                            },
                            {
                                display: "Exact N Month(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'm',
                                    measureTypeDisplay: 'Months'
                                }
                            },
                            {
                                display: "Exact N Year(s) Ago",
                                comparisonOperator: "between",
                                dateInfo: {
                                    type: 'exactDate',
                                    measureType: 'y',
                                    measureTypeDisplay: 'Years'
                                }
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        dateOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "eq"
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "neq"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return dateOptions;
                };
                scope.conditionOptions = getDateOptions(scope.comparisonType);
                scope.today = function () {
                    if (angular.isDefined(scope.selectedFilterProperty)) {
                        scope.selectedFilterProperty.criteriaRangeStart = new Date().getTime();
                        scope.selectedFilterProperty.criteriaRangeEnd = new Date().getTime();
                    }
                };
                scope.clear = function () {
                    scope.selectedFilterProperty.criteriaRangeStart = null;
                    scope.selectedFilterProperty.criteriaRangeEnd = null;
                };
                scope.openCalendarStart = function ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    scope.openedCalendarStart = true;
                };
                scope.openCalendarEnd = function ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    scope.openedCalendarEnd = true;
                };
                scope.formats = [
                    'dd-MMMM-yyyy',
                    'yyyy/MM/dd',
                    'dd.MM.yyyy',
                    'shortDate'
                ];
                scope.format = scope.formats[1];
                scope.selectedConditionChanged = function (selectedFilterProperty) {
                    $log.debug('selectedConditionChanged Begin');
                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                    //check whether condition is checking for null values in date
                    if (angular.isDefined(selectedCondition.dateInfo)) {
                        //is condition a calculation
                        if (selectedCondition.dateInfo.type === 'calculation') {
                            selectedCondition.showCriteriaStart = true;
                            selectedCondition.showCriteriaEnd = true;
                            selectedCondition.disableCriteriaStart = true;
                            selectedCondition.disableCriteriaEnd = true;
                            //if item is a calculation of an N number of measure display the measure and number input
                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {
                                $log.debug('Not toDate');
                                selectedCondition.showNumberOf = true;
                                selectedCondition.conditionDisplay = 'Number of ' + selectedCondition.dateInfo.measureTypeDisplay + ' :';
                            }
                            else {
                                $log.debug('toDate');
                                var today = Date.parse('today');
                                var todayEOD = today.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = todayEOD;
                                //get this Measure to date
                                switch (selectedCondition.dateInfo.measureType) {
                                    case 'd':
                                        var dateBOD = Date.parse('today').add(selectedCondition.dateInfo.measureCount).days();
                                        dateBOD.setHours(0, 0, 0, 0);
                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();
                                        break;
                                    case 'w':
                                        var firstDayOfWeek = Date.today().last().monday();
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();
                                        break;
                                    case 'm':
                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();
                                        break;
                                    case 'q':
                                        var month = Date.parse('today').toString('MM');
                                        var year = Date.parse('today').toString('yyyy');
                                        var quarterMonth = (Math.floor(month / 3) * 3);
                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();
                                        break;
                                    case 'y':
                                        var year = Date.parse('today').toString('yyyy');
                                        var firstDayOfYear = new Date(year, 0, 1);
                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();
                                        break;
                                }
                            }
                        }
                        if (selectedCondition.dateInfo.type === 'range') {
                            selectedCondition.showCriteriaStart = true;
                            selectedCondition.showCriteriaEnd = true;
                            selectedCondition.disableCriteriaStart = false;
                            selectedCondition.disableCriteriaEnd = false;
                            selectedCondition.showNumberOf = false;
                        }
                        if (selectedCondition.dateInfo.type === 'exactDate') {
                            selectedCondition.showCriteriaStart = true;
                            selectedCondition.showCriteriaEnd = false;
                            selectedCondition.disableCriteriaStart = false;
                            selectedCondition.disableCriteriaEnd = true;
                            if (!selectedCondition.dateInfo.measureType) {
                                selectedCondition.conditionDisplay = '';
                                selectedCondition.showCriteriaStart = true;
                                selectedCondition.showNumberOf = false;
                                selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                                selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                            }
                            else {
                                selectedCondition.conditionDisplay = 'How many ' + selectedCondition.dateInfo.measureTypeDisplay + ' ago?';
                                selectedCondition.showCriteriaStart = false;
                                selectedCondition.showNumberOf = true;
                            }
                        }
                    }
                    else {
                        selectedCondition.showCriteriaStart = false;
                        selectedCondition.showCriteriaEnd = false;
                        selectedCondition.showNumberOf = false;
                        selectedCondition.conditionDisplay = '';
                    }
                    $log.debug('selectedConditionChanged End');
                    $log.debug('selectedConditionChanged Result');
                    $log.debug(selectedCondition);
                    $log.debug(selectedFilterProperty);
                };
                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                    $log.debug('criteriaRangeChanged');
                    $log.debug(selectedFilterProperty);
                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                    if (selectedCondition.dateInfo.type === 'calculation') {
                        var measureCount = selectedFilterProperty.criteriaNumberOf;
                        switch (selectedCondition.dateInfo.measureType) {
                            case 'h':
                                var today = Date.parse('today');
                                selectedFilterProperty.criteriaRangeEnd = today.getTime();
                                var todayXHoursAgo = Date.parse('today').add(-(measureCount)).hours();
                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();
                                break;
                            case 'd':
                                var lastFullDay = Date.parse('today').add(-1).days();
                                lastFullDay.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();
                                var lastXDaysAgo = Date.parse('today').add(-(measureCount)).days();
                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();
                                break;
                            case 'w':
                                var lastFullWeekEnd = Date.today().last().sunday();
                                lastFullWeekEnd.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();
                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();
                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();
                                break;
                            case 'm':
                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();
                                lastFullMonthEnd.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();
                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();
                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();
                                break;
                            case 'q':
                                var currentQuarter = Math.floor((Date.parse('today').getMonth() / 3));
                                var firstDayOfCurrentQuarter = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();
                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();
                                var lastXQuartersAgo = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
                                lastXQuartersAgo.add(-(measureCount * 3)).months();
                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();
                                break;
                            case 'y':
                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();
                                lastFullYearEnd.setHours(23, 59, 59, 999);
                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();
                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();
                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();
                                break;
                        }
                    }
                    if (selectedCondition.dateInfo.type === 'exactDate' && angular.isDefined(selectedFilterProperty.criteriaRangeStart) && angular.isDefined(selectedFilterProperty.criteriaRangeStart.setHours)) {
                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);
                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
                    }
                    if (selectedCondition.dateInfo.type === 'range') {
                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart) && angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
                        }
                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd) && angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);
                        }
                    }
                    $log.debug('criteriaRangeChanged');
                    $log.debug(selectedCondition);
                    $log.debug(selectedFilterProperty);
                };
                if (angular.isUndefined(scope.filterItem.$$isNew) || scope.filterItem.$$isNew === false) {
                    angular.forEach(scope.conditionOptions, function (conditionOption) {
                        if (conditionOption.display == scope.filterItem.conditionDisplay) {
                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                            scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo)
                                && angular.isDefined(scope.filterItem.value)
                                && scope.filterItem.value.length) {
                                var dateRangeArray = scope.filterItem.value.split("-");
                                var rangeStart = new Date(parseInt(dateRangeArray[0])).toUTCString();
                                rangeStart = rangeStart.split(' ').slice(0, 5).join(' ');
                                var rangeEnd = new Date(parseInt(dateRangeArray[1])).toUTCString();
                                rangeEnd = rangeEnd.split(' ').slice(0, 5).join(' ');
                                scope.selectedFilterProperty.criteriaRangeStart = rangeStart;
                                scope.selectedFilterProperty.criteriaRangeEnd = rangeEnd;
                            }
                            if (angular.isDefined(scope.selectedConditionChanged)) {
                                scope.selectedConditionChanged(scope.selectedFilterProperty);
                            }
                        }
                    });
                }
                else {
                    scope.selectedFilterProperty.criteriaValue = '';
                    scope.selectedFilterProperty.criteriaRangeStart = '';
                    scope.selectedFilterProperty.criteriaRangeEnd = '';
                }
            }
        };
    }
    SWCriteriaDate.Factory = function () {
        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaDate($log, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaDate;
}());
exports.SWCriteriaDate = SWCriteriaDate;


/***/ }),
/* 743 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaManyToMany = /** @class */ (function () {
    function SWCriteriaManyToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriamanytomany.html',
            link: function (scope, element, attrs) {
                scope.data = {};
                scope.collectionOptionsOpen = false;
                scope.toggleCollectionOptions = function (flag) {
                    scope.collectionOptionsOpen = (!angular.isUndefined(flag)) ? flag : !scope.collectionOptionsOpen;
                };
                scope.selectCollection = function (collection) {
                    scope.toggleCollectionOptions();
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[2];
                };
                scope.cleanSelection = function () {
                    scope.toggleCollectionOptions(false);
                    scope.data.collectionName = "";
                    scope.selectedFilterProperty.selectedCollection = null;
                };
                var getManyToManyOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    $log.debug('type', type);
                    var manyToManyOptions = [];
                    if (type == 'filter') {
                        manyToManyOptions = [
                            {
                                display: "All Exist In Collection",
                                comparisonOperator: "All"
                            },
                            {
                                display: "None Exist In Collection",
                                comparisonOperator: "None"
                            },
                            {
                                display: "Some Exist In Collection",
                                comparisonOperator: "One"
                            },
                            {
                                display: "Empty",
                                comparisonOperator: "is",
                                value: "null"
                            },
                            {
                                display: "Not Empty",
                                comparisonOperator: "is not",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        manyToManyOptions = [];
                    }
                    return manyToManyOptions;
                };
                scope.manyToManyOptions = getManyToManyOptions(scope.comparisonType);
                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(scope.selectedFilterProperty.cfc);
                existingCollectionsPromise.then(function (value) {
                    scope.collectionOptions = value.data;
                    if (angular.isDefined(scope.filterItem.collectionID)) {
                        for (var i in scope.collectionOptions) {
                            if (scope.collectionOptions[i].collectionID === scope.filterItem.collectionID) {
                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
                            }
                        }
                        for (var i in scope.manyToManyOptions) {
                            if (scope.manyToManyOptions[i].comparisonOperator === scope.filterItem.criteria) {
                                scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[i];
                            }
                        }
                    }
                });
                function populateUI(collection) {
                    scope.collectionOptions.push(collection);
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[2];
                }
                observerService.attach(populateUI, 'addCollection', 'addCollection');
                scope.selectedCriteriaChanged = function (selectedCriteria) {
                    $log.debug(selectedCriteria);
                    //update breadcrumbs as array of filterpropertylist keys
                    $log.debug(scope.selectedFilterProperty);
                    var breadCrumb = {
                        entityAlias: scope.selectedFilterProperty.name,
                        cfc: scope.selectedFilterProperty.cfc,
                        propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                        rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
                    };
                    scope.filterItem.breadCrumbs.push(breadCrumb);
                    //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                    scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                    //update criteria to display the condition of the new critera we have selected
                };
                scope.addNewCollection = function () {
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: scope.selectedFilterProperty.cfc,
                        collectionName: scope.data.collectionName,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                    scope.cleanSelection();
                };
                scope.viewSelectedCollection = function () {
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: 'collection',
                        entityId: scope.selectedFilterProperty.selectedCollection.collectionID,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                };
            }
        };
    }
    SWCriteriaManyToMany.Factory = function () {
        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, dialogService, observerService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaManyToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionPartialsPath',
            'dialogService',
            'observerService',
            'hibachiPathBuilder',
            'rbkeyService',
        ];
        return directive;
    };
    return SWCriteriaManyToMany;
}());
exports.SWCriteriaManyToMany = SWCriteriaManyToMany;


/***/ }),
/* 744 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaManyToOne = /** @class */ (function () {
    function SWCriteriaManyToOne($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriamanytoone.html',
            link: function (scope, element, attrs) {
                var getManyToOneOptions = function () {
                    var manyToOneOptions = {
                        drillEntity: {},
                        hasEntity: {
                            display: "Defined",
                            comparisonOperator: "is not",
                            value: "null"
                        },
                        notHasEntity: {
                            display: "Not Defined",
                            comparisonOperator: "is",
                            value: "null"
                        }
                    };
                    return manyToOneOptions;
                };
                scope.manyToOneOptions = getManyToOneOptions();
                scope.conditionOptions = getManyToOneOptions();
                $log.debug('many-to-one');
                $log.debug(scope.selectedFilterProperty);
                $log.debug(scope.filterPropertiesList);
                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                    if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
                        var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
                        filterPropertiesPromise.then(function (value) {
                            scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
                        }, function (reason) {
                        });
                    }
                    scope.selectedCriteriaChanged = function (selectedCriteria) {
                        $log.debug(selectedCriteria);
                        $log.debug('changed');
                        //update breadcrumbs as array of filterpropertylist keys
                        $log.debug(scope.selectedFilterProperty);
                        var breadCrumb = {
                            entityAlias: scope.selectedFilterProperty.name,
                            cfc: scope.selectedFilterProperty.cfc,
                            propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                            rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
                        };
                        $log.debug('breadcrumb');
                        $log.debug(breadCrumb);
                        $log.debug(scope.filterItem.breadCrumbs);
                        scope.filterItem.breadCrumbs.push(breadCrumb);
                        //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                        scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                        //update criteria to display the condition of the new critera we have selected
                        $log.debug(scope.selectedFilterProperty);
                    };
                });
            }
        };
    }
    SWCriteriaManyToOne.Factory = function () {
        var directive = function ($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaManyToOne($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder',
            'rbkeyService'
        ];
        return directive;
    };
    return SWCriteriaManyToOne;
}());
exports.SWCriteriaManyToOne = SWCriteriaManyToOne;
// 'use strict';
// angular.module('slatwalladmin')
// .directive('swCriteriaManyToOne', [
// 	'$log',
// 	'$hibachi',
// 	'$filter',
// 	'collectionPartialsPath',
// 	'collectionService',
// 	'metadataService',
// 	function(
// 		$log,
// 		$hibachi,
// 		$filter,
// 		collectionPartialsPath,
// 		collectionService,
// 		metadataService
// 	){
// 		return {
// 			restrict: 'E',
// 			templateUrl:collectionPartialsPath+'criteriamanytoone.html',
// 			link: function(scope, element, attrs){
// 				var getManyToOneOptions = function(){
// 			    	var manyToOneOptions = {
// 			            drillEntity:{},
// 						hasEntity:{
// 							display:"Defined",
// 							comparisonOperator:"is not",
// 							value:"null"
// 						},
// 						notHasEntity:{
// 							display:"Not Defined",
// 							comparisonOperator:"is",
// 							value:"null"
// 						}
// 			    	};
// 			    	return manyToOneOptions;
// 			    };
// 			    scope.manyToOneOptions = getManyToOneOptions();
// 			    scope.conditionOptions = getManyToOneOptions();
// 				$log.debug('many-to-one');
// 				$log.debug(scope.selectedFilterProperty);
// 				$log.debug(scope.filterPropertiesList);
// 				scope.$watch('selectedFilterProperty',function(selectedFilterProperty){
// 					if(angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])){
// 						var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
// 						filterPropertiesPromise.then(function(value){
// 							scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
// 							metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier],scope.selectedFilterProperty.propertyIdentifier);
// 						}, function(reason){
// 						});
// 					}
// 					scope.selectedCriteriaChanged = function(selectedCriteria){
// 						$log.debug(selectedCriteria);
// 						$log.debug('changed');
// 						//update breadcrumbs as array of filterpropertylist keys
// 						$log.debug(scope.selectedFilterProperty);
// 						var breadCrumb = {
// 								entityAlias:scope.selectedFilterProperty.name,
// 								cfc:scope.selectedFilterProperty.cfc,
// 								propertyIdentifier:scope.selectedFilterProperty.propertyIdentifier,
// 								rbKey:rbkeyService.getRBKey('entity.'+scope.selectedFilterProperty.cfc.replace('_',''))
// 						};
// 						$log.debug('breadcrumb');
// 						$log.debug(breadCrumb);
// 						$log.debug(scope.filterItem.breadCrumbs);
// 						scope.filterItem.breadCrumbs.push(breadCrumb);
// 						//populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
// 						scope.selectedFilterPropertyChanged({selectedFilterProperty:scope.selectedFilterProperty.selectedCriteriaType});
// 						//update criteria to display the condition of the new critera we have selected
// 						$log.debug(scope.selectedFilterProperty);
// 					};
// 				});
// 			}
// 		};
// 	}
// ]);


/***/ }),
/* 745 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaNumber = /** @class */ (function () {
    function SWCriteriaNumber($log, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criterianumber.html',
            link: function (scope, element, attrs) {
                var getNumberOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var numberOptions = [];
                    if (type === 'filter') {
                        numberOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "="
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "<>"
                            },
                            {
                                display: "In Range",
                                comparisonOperator: "between",
                                type: "range"
                            },
                            {
                                display: "Not In Range",
                                comparisonOperator: "not between",
                                type: "range"
                            },
                            {
                                display: "Greater Than",
                                comparisonOperator: ">"
                            },
                            {
                                display: "Greater Than Or Equal",
                                comparisonOperator: ">="
                            },
                            {
                                display: "Less Than",
                                comparisonOperator: "<"
                            },
                            {
                                display: "Less Than Or Equal",
                                comparisonOperator: "<="
                            },
                            {
                                display: "In List",
                                comparisonOperator: "in"
                            },
                            {
                                display: "Not In List",
                                comparisonOperator: "not in"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        numberOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "eq"
                            },
                            {
                                display: "Greater Than",
                                comparisonOperator: "gt"
                            },
                            {
                                display: "Greater Than Or Equal",
                                comparisonOperator: "gte"
                            },
                            {
                                display: "Less Than",
                                comparisonOperator: "lt"
                            },
                            {
                                display: "Less Than Or Equal",
                                comparisonOperator: "lte"
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "neq"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return numberOptions;
                };
                scope.$watch('selectedFilterProperty.criteriaValue', function (criteriaValue) {
                    if (angular.isDefined(criteriaValue)) {
                        scope.selectedFilterProperty.criteriaValue = criteriaValue;
                        $log.debug(scope.selectedFilterProperty);
                    }
                });
                scope.conditionOptions = getNumberOptions(scope.comparisonType);
                scope.criteriaRangeChanged = function (selectedFilterProperty) {
                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
                };
                scope.selectedConditionChanged = function (selectedFilterProperty) {
                    selectedFilterProperty.showCriteriaValue = true;
                    //check whether the type is a range
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.type)) {
                        selectedFilterProperty.showCriteriaValue = false;
                        selectedFilterProperty.selectedCriteriaType.showCriteriaStart = true;
                        selectedFilterProperty.selectedCriteriaType.showCriteriaEnd = true;
                    }
                    //is null or is not null
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                        selectedFilterProperty.showCriteriaValue = false;
                    }
                };
                angular.forEach(scope.conditionOptions, function (conditionOption) {
                    $log.debug('populate');
                    if (conditionOption.display == scope.filterItem.conditionDisplay) {
                        scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                        $log.debug(scope.filterItem);
                        if (scope.filterItem.comparisonOperator === 'between' || scope.filterItem.comparisonOperator === 'not between') {
                            var criteriaRangeArray = scope.filterItem.value.split('-');
                            $log.debug(criteriaRangeArray);
                            scope.selectedFilterProperty.criteriaRangeStart = parseInt(criteriaRangeArray[0]);
                            scope.selectedFilterProperty.criteriaRangeEnd = parseInt(criteriaRangeArray[1]);
                        }
                        else {
                            scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                        }
                        if (angular.isDefined(scope.filterItem.criteriaNumberOf)) {
                            scope.selectedFilterProperty.criteriaNumberOf = scope.filterItem.criteriaNumberOf;
                        }
                        if (angular.isDefined(scope.selectedConditionChanged)) {
                            scope.selectedConditionChanged(scope.selectedFilterProperty);
                        }
                    }
                });
            }
        };
    }
    SWCriteriaNumber.Factory = function () {
        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaNumber($log, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaNumber;
}());
exports.SWCriteriaNumber = SWCriteriaNumber;


/***/ }),
/* 746 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaOneToMany = /** @class */ (function () {
    function SWCriteriaOneToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriaonetomany.html',
            link: function (scope, element, attrs) {
                scope.data = {};
                scope.collectionOptionsOpen = false;
                scope.toggleCollectionOptions = function (flag) {
                    scope.collectionOptionsOpen = (!angular.isUndefined(flag)) ? flag : !scope.collectionOptionsOpen;
                };
                scope.selectCollection = function (collection) {
                    scope.toggleCollectionOptions();
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[2];
                };
                scope.cleanSelection = function () {
                    scope.toggleCollectionOptions(false);
                    scope.data.collectionName = "";
                    scope.selectedFilterProperty.selectedCollection = null;
                };
                var getOneToManyOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var oneToManyOptions = [];
                    if (type == 'filter') {
                        oneToManyOptions = [
                            {
                                display: "All Exist In Collection",
                                comparisonOperator: "All"
                            },
                            {
                                display: "None Exist In Collection",
                                comparisonOperator: "None"
                            },
                            {
                                display: "Some Exist In Collection",
                                comparisonOperator: "One"
                            }
                            /*,
                             {
                             display:"Empty",
                             comparisonOperator:"is",
                             value:"null"
                             },
                             {
                             display:"Not Empty",
                             comparisonOperator:"is not",
                             value:"null"
                             }*/
                        ];
                    }
                    else if (type === 'condition') {
                        oneToManyOptions = [];
                    }
                    return oneToManyOptions;
                };
                $log.debug('onetomany');
                $log.debug(scope.selectedFilterProperty);
                scope.oneToManyOptions = getOneToManyOptions(scope.comparisonType);
                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(scope.selectedFilterProperty.cfc);
                existingCollectionsPromise.then(function (value) {
                    scope.collectionOptions = value.data;
                    if (angular.isDefined(scope.filterItem.collectionID)) {
                        for (var i in scope.collectionOptions) {
                            if (scope.collectionOptions[i].collectionID === scope.filterItem.collectionID) {
                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
                            }
                        }
                        for (var i in scope.oneToManyOptions) {
                            if (scope.oneToManyOptions[i].comparisonOperator === scope.filterItem.criteria) {
                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];
                            }
                        }
                    }
                });
                function populateUI(collection) {
                    scope.collectionOptions.push(collection);
                    scope.selectedFilterProperty.selectedCollection = collection;
                    scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[2];
                }
                observerService.attach(populateUI, 'addCollection', 'addCollection');
                scope.selectedCriteriaChanged = function (selectedCriteria) {
                    $log.debug(selectedCriteria);
                    //update breadcrumbs as array of filterpropertylist keys
                    $log.debug(scope.selectedFilterProperty);
                    var breadCrumb = {
                        entityAlias: scope.selectedFilterProperty.name,
                        cfc: scope.selectedFilterProperty.cfc,
                        propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                        rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', '')),
                        filterProperty: scope.selectedFilterProperty
                    };
                    scope.filterItem.breadCrumbs.push(breadCrumb);
                    $log.debug('criteriaChanged');
                    //$log.debug(selectedFilterPropertyChanged);
                    $log.debug(scope.selectedFilterProperty);
                    //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                    scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                    //update criteria to display the condition of the new critera we have selected
                };
                scope.addNewCollection = function () {
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: scope.selectedFilterProperty.cfc,
                        collectionName: scope.data.collectionName,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                    scope.cleanSelection();
                };
                scope.viewSelectedCollection = function () {
                    scope.toggleCollectionOptions();
                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                        entityName: 'collection',
                        entityId: scope.selectedFilterProperty.selectedCollection.collectionID,
                        parentEntity: scope.collectionConfig.baseEntityName
                    });
                };
            }
        };
    }
    SWCriteriaOneToMany.Factory = function () {
        var directive = function ($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaOneToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'collectionPartialsPath',
            'dialogService',
            'observerService',
            'hibachiPathBuilder',
            'rbkeyService'
        ];
        return directive;
    };
    return SWCriteriaOneToMany;
}());
exports.SWCriteriaOneToMany = SWCriteriaOneToMany;


/***/ }),
/* 747 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaRelatedObject = /** @class */ (function () {
    function SWCriteriaRelatedObject($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriarelatedobject.html',
            link: function (scope, element, attrs) {
                var getRelatedObjectOptions = function () {
                    var relatedObjectOptions = {
                        drillEntity: null,
                        hasEntity: {
                            display: "Defined",
                            comparisonOperator: "is not",
                            value: "null"
                        },
                        notHasEntity: {
                            display: "Not Defined",
                            comparisonOperator: "is",
                            value: "null"
                        },
                        aggregate: {
                            aggregate: ""
                        }
                    };
                    return relatedObjectOptions;
                };
                scope.aggegate = {};
                scope.aggegate.selectedAggregate = '';
                scope.aggregateOptions = ['Average', 'Count', 'Sum'];
                scope.selectAggregate = function (aggregate) {
                    scope.selectedFilterProperty.selectedCriteriaType.aggregate = aggregate;
                };
                scope.relatedObjectOptions = getRelatedObjectOptions();
                scope.conditionOptions = getRelatedObjectOptions();
                $log.debug('many-to-one');
                $log.debug(scope.selectedFilterProperty);
                $log.debug(scope.filterPropertiesList);
                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                    if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
                        var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
                        filterPropertiesPromise.then(function (value) {
                            scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
                        }, function (reason) {
                        });
                    }
                    scope.selectedCriteriaChanged = function (selectedCriteria, selectedAggregate) {
                        var breadCrumb = {
                            entityAlias: scope.selectedFilterProperty.name,
                            cfc: scope.selectedFilterProperty.cfc,
                            propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
                            rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
                        };
                        $log.debug('breadcrumb');
                        $log.debug(breadCrumb);
                        $log.debug(scope.filterItem.breadCrumbs);
                        scope.filterItem.breadCrumbs.push(breadCrumb);
                        if (selectedAggregate) {
                            scope.selectedFilterProperty.selectedCriteriaType.ormtype = 'integer';
                            scope.selectedFilterProperty.selectedCriteriaType.aggregate = selectedAggregate;
                        }
                        //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
                        scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
                        //update criteria to display the condition of the new critera we have selected
                        $log.debug(scope.selectedFilterProperty);
                    };
                });
            }
        };
    }
    SWCriteriaRelatedObject.Factory = function () {
        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaRelatedObject($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            '$filter',
            'collectionPartialsPath',
            'collectionService',
            'metadataService',
            'hibachiPathBuilder',
            'rbkeyService'
        ];
        return directive;
    };
    return SWCriteriaRelatedObject;
}());
exports.SWCriteriaRelatedObject = SWCriteriaRelatedObject;


/***/ }),
/* 748 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWCriteriaString = /** @class */ (function () {
    function SWCriteriaString(collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriastring.html',
            link: function (scope, element, attrs) {
                var getStringOptions = function (type) {
                    if (angular.isUndefined(type)) {
                        type = 'filter';
                    }
                    var stringOptions = [];
                    if (type === 'filter') {
                        stringOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "="
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "<>"
                            },
                            {
                                display: "Contains",
                                comparisonOperator: "like",
                                pattern: "%w%"
                            },
                            {
                                display: "Doesn't Contain",
                                comparisonOperator: "not like",
                                pattern: "%w%"
                            },
                            {
                                display: "Starts With",
                                comparisonOperator: "like",
                                pattern: "w%"
                            },
                            {
                                display: "Doesn't Start With",
                                comparisonOperator: "not like",
                                pattern: "w%"
                            },
                            {
                                display: "Ends With",
                                comparisonOperator: "like",
                                pattern: "%w"
                            },
                            {
                                display: "Doesn't End With",
                                comparisonOperator: "not like",
                                pattern: "%w"
                            },
                            {
                                display: "In List",
                                comparisonOperator: "in"
                            },
                            {
                                display: "Not In List",
                                comparisonOperator: "not in"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "is not",
                                value: "null"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "is",
                                value: "null"
                            }
                        ];
                    }
                    else if (type === 'condition') {
                        stringOptions = [
                            {
                                display: "Equals",
                                comparisonOperator: "eq"
                            },
                            {
                                display: "Doesn't Equal",
                                comparisonOperator: "neq"
                            },
                            {
                                display: "Defined",
                                comparisonOperator: "null",
                                value: "False"
                            },
                            {
                                display: "Not Defined",
                                comparisonOperator: "null",
                                value: "True"
                            }
                        ];
                    }
                    return stringOptions;
                };
                //initialize values
                scope.conditionOptions = getStringOptions(scope.comparisonType);
                scope.inListArray = [];
                if (angular.isDefined(scope.filterItem.value)) {
                    scope.inListArray = scope.filterItem.value.split(',');
                }
                scope.newListItem = '';
                //declare functions
                scope.addToValueInListFormat = function (inListItem) {
                    // Adds item into array
                    scope.inListArray.push(inListItem);
                    //set value field to the user generated list
                    scope.filterItem.value = scope.inListArray.toString();
                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, ', ');
                    scope.newListItem = '';
                };
                scope.removelistItem = function (argListIndex) {
                    scope.inListArray.splice(argListIndex, 1);
                    scope.filterItem.value = scope.inListArray.toString();
                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, ', ');
                };
                scope.clearField = function () {
                    scope.newListItem = '';
                };
                scope.selectedConditionChanged = function (selectedFilterProperty) {
                    //scope.selectedFilterProperty.criteriaValue = '';
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                        selectedFilterProperty.showCriteriaValue = false;
                    }
                    else {
                        if (selectedFilterProperty.selectedCriteriaType.comparisonOperator === 'in' || selectedFilterProperty.selectedCriteriaType.comparisonOperator === 'not in') {
                            selectedFilterProperty.showCriteriaValue = false;
                            scope.comparisonOperatorInAndNotInFlag = true;
                        }
                        else {
                            selectedFilterProperty.showCriteriaValue = true;
                        }
                    }
                };
                scope.$watch('filterItem.value', function (criteriaValue) {
                    //remove percents for like values
                    if (angular.isDefined(scope.filterItem) && angular.isDefined(scope.filterItem.value)) {
                        scope.filterItem.value = scope.filterItem.value.replace('%', '');
                    }
                });
                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
                    if (angular.isDefined(selectedFilterProperty)) {
                        angular.forEach(scope.conditionOptions, function (conditionOption) {
                            if (conditionOption.display == scope.filterItem.conditionDisplay) {
                                scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
                                scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
                                if (angular.isDefined(scope.selectedConditionChanged)) {
                                    scope.selectedConditionChanged(scope.selectedFilterProperty);
                                }
                            }
                        });
                    }
                });
            }
        };
    }
    SWCriteriaString.Factory = function () {
        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaString(collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWCriteriaString;
}());
exports.SWCriteriaString = SWCriteriaString;


/***/ }),
/* 749 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDisplayItem = /** @class */ (function () {
    //@ngInject
    function SWDisplayItem($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) {
        return {
            require: '?^swDisplayOptions',
            restrict: 'A',
            scope: {
                selectedProperty: "=",
                propertiesList: "=",
                breadCrumbs: "=",
                selectedPropertyChanged: "&"
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayitem.html",
            link: function (scope, element, attrs, displayOptionsController) {
                scope.showDisplayItem = false;
                scope.selectedDisplayOptionChanged = function (selectedDisplayOption) {
                    var breadCrumb = {
                        entityAlias: scope.selectedProperty.name,
                        cfc: scope.selectedProperty.cfc,
                        propertyIdentifier: scope.selectedProperty.propertyIdentifier
                    };
                    scope.breadCrumbs.push(breadCrumb);
                    scope.selectedPropertyChanged({ selectedProperty: selectedDisplayOption });
                };
                scope.$watch('selectedProperty', function (selectedProperty) {
                    if (angular.isDefined(selectedProperty)) {
                        if (angular.isUndefined(scope.propertiesList[selectedProperty.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedProperty.cfc);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, selectedProperty.propertyIdentifier);
                                scope.propertiesList[selectedProperty.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(selectedProperty.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.propertiesList[selectedProperty.propertyIdentifier], selectedProperty.propertyIdentifier);
                            }, function (reason) {
                            });
                        }
                    }
                });
            }
        };
    }
    SWDisplayItem.Factory = function () {
        var directive = function ($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWDisplayItem($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDisplayItem;
}());
exports.SWDisplayItem = SWDisplayItem;


/***/ }),
/* 750 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDisplayItemAggregate = /** @class */ (function () {
    //@ngInject
    function SWDisplayItemAggregate($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) {
        return {
            require: '^swDisplayOptions',
            restrict: 'A',
            scope: {
                selectedProperty: "=",
                propertiesList: "=",
                breadCrumbs: "=",
                selectedPropertyChanged: "&"
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayitemaggregate.html",
            link: function (scope, element, attrs, displayOptionsController) {
                scope.showDisplayItem = false;
                scope.aggegate = {};
                scope.aggegate.selectedAggregate = '';
                scope.aggregateOptions = [
                    { id: 'average', value: 'Average' },
                    { id: 'count', value: 'Count' },
                    { id: 'sum', value: 'Sum' }
                ];
                scope.selectAggregate = function (aggregate) {
                    if (aggregate == 'count') {
                        scope.selectedProperty.aggregate = aggregate;
                        scope.selectedPropertyChanged({ selectedProperty: scope.selectedProperty });
                    }
                    else {
                        scope.aggegate.currentObject = scope.selectedProperty.cfc;
                    }
                };
                scope.selectedDisplayOptionChanged = function (selectedDisplayOption) {
                    selectedDisplayOption.aggregate = scope.aggegate.selectedAggregate;
                    selectedDisplayOption.aggregateObject = scope.aggegate.currentObject;
                    scope.selectedPropertyChanged({ selectedProperty: selectedDisplayOption });
                };
                scope.$watch('selectedProperty', function (selectedProperty) {
                    if (angular.isDefined(selectedProperty)) {
                        if (angular.isUndefined(scope.propertiesList[selectedProperty.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedProperty.cfc);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, selectedProperty.propertyIdentifier);
                                scope.propertiesList[selectedProperty.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(selectedProperty.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.propertiesList[selectedProperty.propertyIdentifier], selectedProperty.propertyIdentifier);
                            }, function (reason) {
                            });
                        }
                        scope.showDisplayItem = true;
                    }
                });
            }
        };
    }
    SWDisplayItemAggregate.Factory = function () {
        var directive = function ($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWDisplayItemAggregate($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'collectionPartialsPath',
            'metadataService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDisplayItemAggregate;
}());
exports.SWDisplayItemAggregate = SWDisplayItemAggregate;


/***/ }),
/* 751 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDisplayOptions = /** @class */ (function () {
    //@ngInject
    function SWDisplayOptions($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService) {
        return {
            restrict: 'E',
            require: {
                swListingDisplay: "?^swListingDisplay",
                swListingControls: "?^swListingControls"
            },
            transclude: true,
            scope: {
                orderBy: "<",
                columns: '<',
                joins: "<",
                groupBys: "<",
                propertiesList: "<",
                saveCollection: "&?",
                baseEntityAlias: "<?",
                baseEntityName: "<?",
                listingName: "@?"
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayoptions.html",
            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
                    this.removeColumn = function (columnIndex) {
                        if ($scope.columns.length) {
                            $scope.columns.splice(columnIndex, 1);
                        }
                    };
                }],
            link: function (scope, element, $attrs, controllers, observerService) {
                scope.breadCrumbs = [{
                        entityAlias: scope.baseEntityAlias,
                        cfc: scope.baseEntityAlias,
                        propertyIdentifier: scope.baseEntityAlias
                    }];
                scope.getPropertiesList = function () {
                    return scope.propertiesList;
                };
                scope.addDisplayDialog = {
                    isOpen: false,
                    toggleDisplayDialog: function () {
                        scope.addDisplayDialog.isOpen = !scope.addDisplayDialog.isOpen;
                    }
                };
                var getTitleFromProperty = function (selectedProperty) {
                    var baseEntityCfcName = scope.baseEntityName.replace('Slatwall', '').charAt(0).toLowerCase() + scope.baseEntityName.replace('Slatwall', '').slice(1);
                    var propertyIdentifier = selectedProperty.propertyIdentifier;
                    var title = '';
                    var propertyIdentifierArray = propertyIdentifier.replace(/^_/, '').split(/[._]+/);
                    var currentEntity;
                    var currentEntityInstance;
                    var prefix = 'entity.';
                    if (selectedProperty.$$group == "attribute") {
                        return selectedProperty.displayPropertyIdentifier;
                    }
                    angular.forEach(propertyIdentifierArray, function (propertyIdentifierItem, key) {
                        //pass over the initial item
                        if (key !== 0) {
                            if (key === 1) {
                                currentEntityInstance = $hibachi['new' + scope.baseEntityName.replace('Slatwall', '')]();
                                currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];
                                title += rbkeyService.getRBKey(prefix + baseEntityCfcName + '.' + propertyIdentifierItem);
                            }
                            else {
                                var currentEntityInstance = $hibachi['new' + currentEntity.cfc.charAt(0).toUpperCase() + currentEntity.cfc.slice(1)]();
                                currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];
                                title += rbkeyService.getRBKey(prefix + currentEntityInstance.metaData.className + '.' + currentEntity.name);
                            }
                            if (key < propertyIdentifierArray.length - 1) {
                                title += ' | ';
                            }
                        }
                    });
                    return title;
                };
                scope.addColumn = function (closeDialog) {
                    var selectedProperty = scope.selectedProperty;
                    if (angular.isDefined(scope.selectedAggregate)) {
                        selectedProperty = scope.selectedAggregate;
                    }
                    if (selectedProperty.$$group === 'simple' || 'attribute' || 'compareCollections') {
                        $log.debug(scope.columns);
                        if (angular.isDefined(selectedProperty)) {
                            var column = {
                                title: getTitleFromProperty(selectedProperty),
                                propertyIdentifier: selectedProperty.propertyIdentifier,
                                isVisible: true,
                                isDeletable: true,
                                isSearchable: true,
                                isExportable: true
                            };
                            //only add attributeid if the selectedProperty is attributeid
                            if (angular.isDefined(selectedProperty.attributeID)) {
                                column['attributeID'] = selectedProperty.attributeID;
                                column['attributeSetObject'] = selectedProperty.attributeSetObject;
                            }
                            if (angular.isDefined(selectedProperty.ormtype)) {
                                column['ormtype'] = selectedProperty.ormtype;
                            }
                            if (selectedProperty.hb_formattype) {
                                column['type'] = selectedProperty.hb_formattype;
                            }
                            else {
                                column['type'] = 'none';
                            }
                            if (angular.isDefined(selectedProperty.aggregate)) {
                                column['ormtype'] = 'string';
                                column['aggregate'] = {
                                    aggregateFunction: selectedProperty.aggregate.toUpperCase(),
                                    aggregateAlias: selectedProperty.propertyIdentifier.split(/[._]+/).pop() + selectedProperty.aggregate.charAt(0).toUpperCase() + selectedProperty.aggregate.slice(1)
                                };
                                column['title'] += ' ' + rbkeyService.getRBKey('define.' + column['aggregate']['aggregateFunction']);
                            }
                            scope.columns.push(column);
                            if ((selectedProperty.propertyIdentifier.match(/_/g) || []).length > 1) {
                                var PIlimit = selectedProperty.propertyIdentifier.length;
                                if (selectedProperty.propertyIdentifier.indexOf('.') != -1) {
                                    PIlimit = selectedProperty.propertyIdentifier.indexOf('.');
                                }
                                var propertyIdentifierJoins = selectedProperty.propertyIdentifier.substring(1, PIlimit);
                                var propertyIdentifierParts = propertyIdentifierJoins.split('_');
                                var current_collection = $hibachi.getEntityExample(scope.baseEntityName);
                                var _propertyIdentifier = '';
                                var joins = [];
                                if (angular.isDefined(scope.joins)) {
                                    joins = scope.joins;
                                }
                                for (var i = 1; i < propertyIdentifierParts.length; i++) {
                                    if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
                                        current_collection = $hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
                                        _propertyIdentifier += '_' + propertyIdentifierParts[i];
                                        var newJoin = {
                                            associationName: _propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1),
                                            alias: '_' + propertyIdentifierParts[0] + _propertyIdentifier
                                        };
                                        var joinFound = false;
                                        for (var j = 0; j < joins.length; j++) {
                                            if (joins[j].alias === newJoin.alias) {
                                                joinFound = true;
                                                break;
                                            }
                                        }
                                        if (!joinFound) {
                                            joins.push(newJoin);
                                        }
                                    }
                                }
                                scope.joins = joins;
                                if (angular.isUndefined(scope.groupBys) || scope.groupBys.split(',').length != scope.columns.length) {
                                    var groupbyArray = angular.isUndefined(scope.groupBys) ? [] : scope.groupBys.split(',');
                                    for (var col = 0; col < scope.columns.length; col++) {
                                        if ('attributeID' in scope.columns[col])
                                            continue;
                                        if (groupbyArray.indexOf(scope.columns[col].propertyIdentifier) == -1) {
                                            groupbyArray.push(scope.columns[col].propertyIdentifier);
                                        }
                                    }
                                    scope.groupBys = groupbyArray.join(',');
                                }
                            }
                            if (controllers.swListingControls) {
                                controllers.swListingControls.columnIsControllableMap[column.propertyIdentifier] = true;
                            }
                            scope.saveCollection();
                            if (angular.isDefined(closeDialog) && closeDialog === true) {
                                scope.addDisplayDialog.toggleDisplayDialog();
                                scope.selectBreadCrumb(0);
                            }
                        }
                    }
                };
                scope.selectBreadCrumb = function (breadCrumbIndex) {
                    //splice out array items above index
                    var removeCount = scope.breadCrumbs.length - 1 - breadCrumbIndex;
                    scope.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
                    scope.selectedPropertyChanged(null);
                };
                var unbindBaseEntityAlias = scope.$watch('baseEntityAlias', function (newValue, oldValue) {
                    if (newValue !== oldValue) {
                        scope.breadCrumbs = [{
                                entityAlias: scope.baseEntityAlias,
                                cfc: scope.baseEntityAlias,
                                propertyIdentifier: scope.baseEntityAlias
                            }];
                        unbindBaseEntityAlias();
                    }
                });
                scope.selectedPropertyChanged = function (selectedProperty, aggregate) {
                    // drill down or select field?
                    if (!aggregate) {
                        scope.selectedProperty = selectedProperty;
                        scope.selectedAggregate = undefined;
                    }
                    else {
                        scope.selectedAggregate = selectedProperty;
                    }
                };
                jQuery(function ($) {
                    var panelList = angular.element(element).children('ul');
                    panelList.sortable({
                        // Only make the .panel-heading child elements support dragging.
                        // Omit this to make then entire <li>...</li> draggable.
                        handle: '.s-pannel-name',
                        update: function (event, ui) {
                            var tempColumnsArray = [];
                            $('.s-pannel-name', panelList).each(function (index, elem) {
                                var newIndex = $(elem).attr('j-column-index');
                                var columnItem = scope.columns[newIndex];
                                tempColumnsArray.push(columnItem);
                            });
                            scope.columns = tempColumnsArray;
                            scope.saveCollection();
                        }
                    });
                });
                if (!scope.saveCollection && controllers.swListingControls) {
                    scope.saveCollection = function () {
                        controllers.swListingControls.collectionConfig.columns = scope.columns;
                        if (controllers.swListingDisplay) {
                            controllers.swListingDisplay.columns = scope.columns;
                        }
                        controllers.swListingControls.saveCollection();
                    };
                }
                if (controllers.swListingDisplay) {
                    scope.getCollection = controllers.swListingDisplay.getCollection;
                }
                /*var unbindBaseEntityAlaisWatchListener = scope.$watch('baseEntityAlias',function(){
                 $("select").selectBoxIt();
                 unbindBaseEntityAlaisWatchListener();
                 });*/
            }
        };
    }
    SWDisplayOptions.Factory = function () {
        var directive = function ($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService) { return new SWDisplayOptions($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'hibachiPathBuilder',
            'collectionPartialsPath',
            'rbkeyService'
        ];
        return directive;
    };
    return SWDisplayOptions;
}());
exports.SWDisplayOptions = SWDisplayOptions;


/***/ }),
/* 752 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWEditFilterItem = /** @class */ (function () {
    function SWEditFilterItem($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService) {
        return {
            require: {
                swFilterGroups: '^swFilterGroups',
                swListingControls: '?^swListingControls'
            },
            restrict: 'E',
            scope: {
                collectionConfig: "=",
                filterItem: "=",
                filterPropertiesList: "=",
                saveCollection: "&?",
                removeFilterItem: "&",
                filterItemIndex: "=",
                comparisonType: "=",
                simple: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "editfilteritem.html",
            link: function (scope, element, attrs, filterGroupsController) {
                if (!scope.saveCollection && filterGroupsController.swListingControls) {
                    scope.saveCollection = function () {
                        filterGroupsController.swListingControls.collectionConfig = scope.collectionConfig;
                        filterGroupsController.swListingControls.saveCollection();
                    };
                }
                function daysBetween(first, second) {
                    // Copy date parts of the timestamps, discarding the time parts.
                    var one = new Date(first.getFullYear(), first.getMonth(), first.getDate());
                    var two = new Date(second.getFullYear(), second.getMonth(), second.getDate());
                    // Do the math.
                    var millisecondsPerDay = 1000 * 60 * 60 * 24;
                    var millisBetween = two.getTime() - one.getTime();
                    var days = millisBetween / millisecondsPerDay;
                    // Round down.
                    return Math.floor(days);
                }
                if (angular.isUndefined(scope.filterItem.breadCrumbs)) {
                    scope.filterItem.breadCrumbs = [];
                    if (scope.filterItem.propertyIdentifier === "") {
                        scope.filterItem.breadCrumbs = [
                            {
                                rbKey: rbkeyService.getRBKey('entity.' + scope.collectionConfig.baseEntityAlias.replace('_', '')),
                                entityAlias: scope.collectionConfig.baseEntityAlias,
                                cfc: scope.collectionConfig.baseEntityAlias,
                                propertyIdentifier: scope.collectionConfig.baseEntityAlias
                            }
                        ];
                    }
                    else {
                        var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
                        entityAliasArrayFromString.pop();
                        for (var i in entityAliasArrayFromString) {
                            var breadCrumb = {
                                rbKey: rbkeyService.getRBKey('entity.' + scope.collectionConfig.baseEntityAlias.replace('_', '')),
                                entityAlias: entityAliasArrayFromString[i],
                                cfc: entityAliasArrayFromString[i],
                                propertyIdentifier: entityAliasArrayFromString[i]
                            };
                            scope.filterItem.breadCrumbs.push(breadCrumb);
                        }
                    }
                }
                else {
                    angular.forEach(scope.filterItem.breadCrumbs, function (breadCrumb, key) {
                        if (angular.isUndefined(scope.filterPropertiesList[breadCrumb.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(breadCrumb.cfc);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, breadCrumb.propertyIdentifier);
                                scope.filterPropertiesList[breadCrumb.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(breadCrumb.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.filterPropertiesList[breadCrumb.propertyIdentifier], breadCrumb.propertyIdentifier);
                                var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
                                entityAliasArrayFromString.pop();
                                entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                                if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                    for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                        var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                        if (filterProperty.propertyIdentifier === scope.filterItem.propertyIdentifier) {
                                            //selectItem from drop down
                                            scope.selectedFilterProperty = filterProperty;
                                            //decorate with value and comparison Operator so we can use it in the Condition section
                                            scope.selectedFilterProperty.value = scope.filterItem.value;
                                            scope.selectedFilterProperty.comparisonOperator = scope.filterItem.comparisonOperator;
                                        }
                                    }
                                }
                            });
                        }
                        else {
                            var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
                            entityAliasArrayFromString.pop();
                            entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                            if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                    var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                    if (filterProperty.propertyIdentifier === scope.filterItem.propertyIdentifier) {
                                        //selectItem from drop down
                                        scope.selectedFilterProperty = filterProperty;
                                        //decorate with value and comparison Operator so we can use it in the Condition section
                                        scope.selectedFilterProperty.value = scope.filterItem.value;
                                        scope.selectedFilterProperty.comparisonOperator = scope.filterItem.comparisonOperator;
                                    }
                                }
                            }
                        }
                    });
                }
                if (angular.isUndefined(scope.filterItem.$$isClosed)) {
                    scope.filterItem.$$isClosed = true;
                }
                scope.filterGroupItem = filterGroupsController.swFilterGroups.getFilterGroupItem();
                scope.togglePrepareForFilterGroup = function () {
                    scope.filterItem.$$prepareForFilterGroup = !scope.filterItem.$$prepareForFilterGroup;
                };
                //public functions
                scope.selectBreadCrumb = function (breadCrumbIndex) {
                    //splice out array items above index
                    var removeCount = scope.filterItem.breadCrumbs.length - 1 - breadCrumbIndex;
                    scope.filterItem.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
                    $log.debug('selectBreadCrumb');
                    $log.debug(scope.selectedFilterProperty);
                    //scope.selectedFilterPropertyChanged(scope.filterItem.breadCrumbs[scope.filterItem.breadCrumbs.length -1].filterProperty);
                    scope.selectedFilterPropertyChanged(null);
                };
                scope.selectedFilterPropertyChanged = function (selectedFilterProperty) {
                    $log.debug('selectedFilterProperty');
                    $log.debug(selectedFilterProperty);
                    if (angular.isDefined(scope.selectedFilterProperty) && scope.selectedFilterProperty === null) {
                        scope.selectedFilterProperty = {};
                    }
                    if (angular.isDefined(scope.selectedFilterProperty) && angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType)) {
                        delete scope.selectedFilterProperty.selectedCriteriaType;
                    }
                    if (angular.isDefined(scope.filterItem.value)) {
                        delete scope.filterItem.value;
                    }
                    scope.selectedFilterProperty.showCriteriaValue = false;
                    scope.selectedFilterProperty = selectedFilterProperty;
                };
                scope.addFilterItem = function () {
                    collectionService.newFilterItem(filterGroupsController.swFilterGroups.getFilterGroupItem(), filterGroupsController.swFilterGroups.setItemInUse);
                    this.observerService.notify('collectionConfigUpdated', {
                        collectionConfig: collectionService
                    });
                };
                scope.cancelFilterItem = function () {
                    $log.debug('cancelFilterItem');
                    $log.debug(scope.filterItemIndex);
                    //scope.deselectItems(scope.filterGroupItem[filterItemIndex]);
                    scope.filterItem.setItemInUse(false);
                    scope.filterItem.$$isClosed = true;
                    for (var siblingIndex in scope.filterItem.$$siblingItems) {
                        scope.filterItem.$$siblingItems[siblingIndex].$$disabled = false;
                    }
                    if (scope.filterItem.$$isNew === true) {
                        observerService.notify('filterItemAction', { action: 'remove', filterItemIndex: scope.filterItemIndex });
                        scope.removeFilterItem({ filterItemIndex: scope.filterItemIndex });
                    }
                    else {
                        observerService.notify('filterItemAction', { action: 'close', filterItemIndex: scope.filterItemIndex });
                    }
                };
                scope.saveFilter = function (selectedFilterProperty, filterItem, callback) {
                    var _this = this;
                    $log.debug('saveFilter begin');
                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType) && angular.equals({}, selectedFilterProperty.selectedCriteriaType)) {
                        return;
                    }
                    if ((selectedFilterProperty.propertyIdentifier.match(/_/g) || []).length > 1) {
                        var propertyIdentifierStart = (selectedFilterProperty.propertyIdentifier.charAt(0) == '_') ? 1 : 0;
                        var propertyIdentifierEnd = (selectedFilterProperty.propertyIdentifier.indexOf('.') == -1) ? selectedFilterProperty.propertyIdentifier.length : selectedFilterProperty.propertyIdentifier.indexOf('.');
                        var propertyIdentifierJoins = selectedFilterProperty.propertyIdentifier.substring(propertyIdentifierStart, propertyIdentifierEnd);
                        var propertyIdentifierParts = propertyIdentifierJoins.split('_');
                        var current_collection = $hibachi.getEntityExample(scope.collectionConfig.baseEntityName);
                        var _propertyIdentifier = '';
                        var joins = [];
                        if (angular.isDefined(scope.collectionConfig.joins)) {
                            joins = scope.collectionConfig.joins;
                        }
                        for (var i = 1; i < propertyIdentifierParts.length; i++) {
                            if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
                                current_collection = $hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
                                _propertyIdentifier += '_' + propertyIdentifierParts[i];
                                var newJoin = {
                                    associationName: _propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1),
                                    alias: '_' + propertyIdentifierParts[0] + _propertyIdentifier
                                };
                                var joinFound = false;
                                for (var j = 0; j < joins.length; j++) {
                                    if (joins[j].alias === newJoin.alias) {
                                        joinFound = true;
                                        break;
                                    }
                                }
                                if (!joinFound) {
                                    joins.push(newJoin);
                                }
                            }
                        }
                        scope.collectionConfig.joins = joins;
                        if (angular.isDefined(scope.collectionConfig.columns) && (angular.isUndefined(scope.collectionConfig.groupBys) || scope.collectionConfig.groupBys.split(',').length != scope.collectionConfig.columns.length)) {
                            var groupbyArray = angular.isUndefined(scope.collectionConfig.groupBys) ? [] : scope.collectionConfig.groupBys.split(',');
                            for (var column = 0; column < scope.collectionConfig.columns.length; column++) {
                                if (groupbyArray.indexOf(scope.collectionConfig.columns[column].propertyIdentifier) == -1) {
                                    groupbyArray.push(scope.collectionConfig.columns[column].propertyIdentifier);
                                }
                            }
                            scope.collectionConfig.groupBys = groupbyArray.join(',');
                        }
                    }
                    if (angular.isDefined(selectedFilterProperty) && angular.isDefined(selectedFilterProperty.selectedCriteriaType)) {
                        //populate filterItem with selectedFilterProperty values
                        filterItem.$$isNew = false;
                        filterItem.propertyIdentifier = selectedFilterProperty.propertyIdentifier;
                        filterItem.displayPropertyIdentifier = selectedFilterProperty.displayPropertyIdentifier;
                        switch (selectedFilterProperty.ormtype) {
                            case 'boolean':
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                filterItem.displayValue = filterItem.value;
                                break;
                            case 'string':
                                if (angular.isDefined(selectedFilterProperty.attributeID)) {
                                    filterItem.attributeID = selectedFilterProperty.attributeID;
                                    filterItem.attributeSetObject = selectedFilterProperty.attributeSetObject;
                                }
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //retrieving implied value or user input | ex. implied:prop is null, user input:prop = "Name"
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value.toString();
                                    //if has a pattern then we need to evaluate where to add % for like statement
                                }
                                else if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.pattern)) {
                                    filterItem.pattern = selectedFilterProperty.selectedCriteriaType.pattern;
                                }
                                filterItem.displayValue = filterItem.value;
                                break;
                            //TODO:simplify timestamp and big decimal to leverage reusable function for null, range, and value
                            case 'timestamp':
                                //retrieving implied value or user input | ex. implied:prop is null, user input:prop = "Name"
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //is it null or a range
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                    filterItem.displayValue = filterItem.value;
                                }
                                else {
                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.dateInfo.type) && selectedFilterProperty.selectedCriteriaType.dateInfo.type === 'calculation') {
                                        var _daysBetween = daysBetween(new Date(selectedFilterProperty.criteriaRangeStart), new Date(selectedFilterProperty.criteriaRangeEnd));
                                        filterItem.value = _daysBetween;
                                        filterItem.displayValue = selectedFilterProperty.selectedCriteriaType.display;
                                        if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
                                            filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
                                        }
                                    }
                                    else if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.dateInfo.type) && selectedFilterProperty.selectedCriteriaType.dateInfo.type === 'exactDate') {
                                        if (angular.isUndefined(selectedFilterProperty.selectedCriteriaType.dateInfo.measureType)) {
                                            filterItem.value = selectedFilterProperty.criteriaRangeStart + '-' + selectedFilterProperty.criteriaRangeEnd;
                                            filterItem.displayValue = $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeStart), 'MM/dd/yyyy @ h:mma') + '-' + $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeEnd), 'MM/dd/yyyy @ h:mma');
                                        }
                                        else {
                                            filterItem.measureType = selectedFilterProperty.selectedCriteriaType.dateInfo.measureType;
                                            filterItem.measureCriteria = selectedFilterProperty.selectedCriteriaType.dateInfo.type;
                                            filterItem.criteriaNumberOf = "0";
                                            if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
                                                filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
                                            }
                                            filterItem.value = filterItem.criteriaNumberOf;
                                            filterItem.displayValue = filterItem.criteriaNumberOf;
                                            switch (filterItem.measureType) {
                                                case 'd':
                                                    filterItem.displayValue += ' Day';
                                                    break;
                                                case 'm':
                                                    filterItem.displayValue += ' Month';
                                                    break;
                                                case 'y':
                                                    filterItem.displayValue += ' Year';
                                                    break;
                                            }
                                            filterItem.displayValue += ((filterItem.criteriaNumberOf > 1) ? 's' : '') + ' Ago';
                                        }
                                    }
                                    else {
                                        var dateValueString = utilityService.removeTimeOffset(selectedFilterProperty.criteriaRangeStart) + '-' + utilityService.removeTimeOffset(selectedFilterProperty.criteriaRangeEnd);
                                        filterItem.value = dateValueString;
                                        var formattedDateValueString = $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeStart), 'MM/dd/yyyy @ h:mma') + '-' + $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeEnd), 'MM/dd/yyyy @ h:mma');
                                        filterItem.displayValue = formattedDateValueString;
                                        if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
                                            filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
                                        }
                                    }
                                }
                                break;
                            case 'big_decimal':
                            case 'integer':
                            case 'float':
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //is null, is not null
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                }
                                else {
                                    if (angular.isUndefined(selectedFilterProperty.selectedCriteriaType.type)) {
                                        filterItem.value = selectedFilterProperty.criteriaValue;
                                    }
                                    else {
                                        var decimalValueString = selectedFilterProperty.criteriaRangeStart + '-' + selectedFilterProperty.criteriaRangeEnd;
                                        filterItem.value = decimalValueString;
                                    }
                                }
                                if (angular.isDefined(selectedFilterProperty.aggregate)) {
                                    filterItem.aggregate = selectedFilterProperty.aggregate;
                                }
                                filterItem.displayValue = filterItem.value;
                                break;
                        }
                        switch (selectedFilterProperty.fieldtype) {
                            case 'one-to-many':
                            case 'many-to-many':
                            case 'many-to-one':
                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                                //is null, is not null
                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
                                }
                                filterItem.displayValue = filterItem.value;
                                break;
                            //case 'one-to-many':
                            //
                            //case 'many-to-many':
                            //    filterItem.collectionID = selectedFilterProperty.selectedCollection.collectionID;
                            //    filterItem.displayValue = selectedFilterProperty.selectedCollection.collectionName;
                            //    filterItem.criteria = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
                            //
                            //    break;
                        }
                        if (angular.isUndefined(filterItem.displayValue)) {
                            filterItem.displayValue = filterItem.value;
                        }
                        if (angular.isDefined(selectedFilterProperty.ormtype)) {
                            filterItem.ormtype = selectedFilterProperty.ormtype;
                        }
                        if (angular.isDefined(selectedFilterProperty.fieldtype)) {
                            filterItem.fieldtype = selectedFilterProperty.fieldtype;
                        }
                        for (var siblingIndex in filterItem.$$siblingItems) {
                            filterItem.$$siblingItems[siblingIndex].$$disabled = false;
                        }
                        filterItem.conditionDisplay = selectedFilterProperty.selectedCriteriaType.display;
                        //if the add to New group checkbox has been checked then we need to transplant the filter item into a filter group
                        if (filterItem.$$prepareForFilterGroup === true) {
                            collectionService.transplantFilterItemIntoFilterGroup(filterGroupsController.swFilterGroups.getFilterGroupItem(), filterItem);
                        }
                        //persist Config and
                        scope.saveCollection();
                        $log.debug(selectedFilterProperty);
                        $log.debug(filterItem);
                        var timeoutpromise = $timeout(function () {
                            callback();
                        });
                        timeoutpromise.then(function () {
                            observerService.notify('filterItemAction', { action: 'add', filterItemIndex: scope.filterItemIndex, collectionConfig: _this.collectionConfig });
                        });
                        $log.debug('saveFilter end');
                    }
                };
            }
        };
    }
    SWEditFilterItem.Factory = function () {
        var directive = function ($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService) { return new SWEditFilterItem($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService); };
        directive.$inject = [
            '$log',
            '$filter',
            '$timeout',
            '$hibachi',
            'collectionPartialsPath',
            'collectionService',
            'metadataService',
            'hibachiPathBuilder',
            'rbkeyService',
            'observerService',
            'utilityService'
        ];
        return directive;
    };
    return SWEditFilterItem;
}());
exports.SWEditFilterItem = SWEditFilterItem;


/***/ }),
/* 753 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFilterGroupItem = /** @class */ (function () {
    function SWFilterGroupItem($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            require: "^swFilterGroups",
            scope: {
                collectionConfig: "=",
                filterGroupItem: "=",
                siblingItems: "=",
                filterPropertiesList: "=",
                filterGroupItemIndex: "=",
                saveCollection: "&",
                comparisonType: "="
            },
            link: function (scope, element, attrs, filterGroupsController) {
                var Partial = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filtergroupitem.html";
                var templateLoader = $http.get(Partial, { cache: $templateCache });
                var promise = templateLoader.success(function (html) {
                    element.html(html);
                }).then(function (response) {
                    element.replaceWith($compile(element.html())(scope));
                });
                //for(item in filterGroupItem){}
                scope.filterGroupItem.setItemInUse = filterGroupsController.setItemInUse;
                scope.filterGroupItem.$$index = scope.filterGroupItemIndex;
                scope.removeFilterGroupItem = function () {
                    filterGroupsController.removeFilterGroupItem(scope.filterGroupItemIndex);
                };
                scope.filterGroupItem.removeFilterGroupItem = scope.removeFilterGroupItem;
                scope.filterGroupItem.$$disabled = false;
                if (angular.isUndefined(scope.filterGroupItem.$$isClosed)) {
                    scope.filterGroupItem.$$isClosed = true;
                }
                scope.filterGroupItem.$$siblingItems = scope.siblingItems;
                scope.selectFilterGroupItem = function (filterGroupItem) {
                    collectionService.selectFilterGroupItem(filterGroupItem);
                };
                scope.logicalOperatorChanged = function (logicalOperatorValue) {
                    $log.debug('logicalOperatorChanged');
                    $log.debug(logicalOperatorValue);
                    scope.filterGroupItem.logicalOperator = logicalOperatorValue;
                    filterGroupsController.saveCollection();
                };
            }
        };
    }
    SWFilterGroupItem.Factory = function () {
        var directive = function ($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterGroupItem($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$http',
            '$compile',
            '$templateCache',
            '$log',
            'collectionService',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFilterGroupItem;
}());
exports.SWFilterGroupItem = SWFilterGroupItem;


/***/ }),
/* 754 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFilterGroups = /** @class */ (function () {
    function SWFilterGroups($log, collectionPartialsPath, hibachiPathBuilder, observerService) {
        return {
            restrict: 'EA',
            scope: {
                collectionConfig: "=?",
                filterGroupItem: "=?",
                filterPropertiesList: "=?",
                saveCollection: "&",
                filterGroup: "=?",
                comparisonType: "=?",
                simple: "=",
                readOnly: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filtergroups.html",
            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
                    //if the filter group comparisontype is not specified, then assume we are doing filters
                    if (!angular.isDefined($scope.comparisonType)) {
                        $scope.comparisonType = 'filter';
                    }
                    $scope.itemInUse = false;
                    $log.debug('collectionConfig');
                    $log.debug($scope.collectionConfig);
                    this.getFilterGroup = function () {
                        return $scope.filterGroup;
                    };
                    this.getFilterGroupItem = function () {
                        return $scope.filterGroupItem;
                    };
                    this.setItemInUse = function (booleanValue) {
                        $scope.itemInUse = booleanValue;
                    };
                    this.getItemInUse = function () {
                        return $scope.itemInUse;
                    };
                    this.saveCollection = function () {
                        $scope.saveCollection();
                    };
                    $scope.deselectItems = function (filterItem) {
                        for (var i in filterItem.$$siblingItems) {
                            filterItem.$$siblingItems[i].$$disabled = false;
                        }
                    };
                    this.removeFilterItem = function (filterItemIndex) {
                        if (angular.isDefined(filterItemIndex)) {
                            $scope.deselectItems($scope.filterGroupItem[filterItemIndex]);
                            $scope.filterGroupItem[filterItemIndex].setItemInUse(false);
                            //remove item
                            $log.debug('removeFilterItem');
                            $log.debug(filterItemIndex);
                            $scope.filterGroupItem.splice(filterItemIndex, 1);
                            //make sure first item has no logical operator if it exists
                            if ($scope.filterGroupItem.length) {
                                delete $scope.filterGroupItem[0].logicalOperator;
                            }
                            $log.debug('removeFilterItem');
                            $log.debug(filterItemIndex);
                            $scope.saveCollection();
                        }
                    };
                    this.removeFilterGroupItem = function (filterGroupItemIndex) {
                        //remove Item
                        $scope.deselectItems($scope.filterGroupItem[filterGroupItemIndex]);
                        $scope.filterGroupItem[filterGroupItemIndex].setItemInUse(false);
                        $scope.filterGroupItem.splice(filterGroupItemIndex, 1);
                        //make sure first item has no logical operator if it exists
                        if ($scope.filterGroupItem.length) {
                            delete $scope.filterGroupItem[0].logicalOperator;
                        }
                        $log.debug('removeFilterGroupItem');
                        $log.debug(filterGroupItemIndex);
                        $scope.saveCollection();
                    };
                }]
        };
    }
    SWFilterGroups.Factory = function () {
        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder, observerService) { return new SWFilterGroups($log, collectionPartialsPath, hibachiPathBuilder, observerService); };
        directive.$inject = [
            '$log',
            'collectionPartialsPath',
            'hibachiPathBuilder',
            'observerService'
        ];
        return directive;
    };
    return SWFilterGroups;
}());
exports.SWFilterGroups = SWFilterGroups;


/***/ }),
/* 755 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFilterItem = /** @class */ (function () {
    function SWFilterItem($log, collectionService, collectionPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            require: '^swFilterGroups',
            scope: {
                collectionConfig: "=",
                filterItem: "=",
                siblingItems: "=",
                filterPropertiesList: "=",
                filterItemIndex: "=",
                saveCollection: "&",
                comparisonType: "=",
                simple: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filteritem.html",
            link: function (scope, element, attrs, filterGroupsController) {
                scope.baseEntityAlias = scope.collectionConfig.baseEntityAlias;
                if (angular.isUndefined(scope.filterItem.$$isClosed)) {
                    scope.filterItem.$$isClosed = true;
                }
                if (angular.isUndefined(scope.filterItem.$$disabled)) {
                    scope.filterItem.$$disabled = false;
                }
                if (angular.isUndefined(scope.filterItem.siblingItems)) {
                    scope.filterItem.$$siblingItems = scope.siblingItems;
                }
                scope.filterItem.setItemInUse = filterGroupsController.setItemInUse;
                scope.selectFilterItem = function (filterItem) {
                    collectionService.selectFilterItem(filterItem);
                };
                scope.removeFilterItem = function () {
                    filterGroupsController.removeFilterItem(scope.filterItemIndex, filterGroupsController.getFilterGroupItem());
                };
                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();
                scope.logicalOperatorChanged = function (logicalOperatorValue) {
                    $log.debug('logicalOperatorChanged');
                    $log.debug(logicalOperatorValue);
                    scope.filterItem.logicalOperator = logicalOperatorValue;
                    filterGroupsController.saveCollection();
                };
            }
        };
    }
    SWFilterItem.Factory = function () {
        var directive = function ($log, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterItem($log, collectionService, collectionPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'collectionService',
            'collectionPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFilterItem;
}());
exports.SWFilterItem = SWFilterItem;


/***/ }),
/* 756 */,
/* 757 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CollectionController = /** @class */ (function () {
    //@ngInject
    function CollectionController($scope, $log, $timeout, $hibachi, collectionService, metadataService, selectionService, paginationService, collectionConfigService, appConfig, observerService) {
        //init values
        //$scope.collectionTabs =[{tabTitle:'PROPERTIES',isActive:true},{tabTitle:'FILTERS ('+filterCount+')',isActive:false},{tabTitle:'DISPLAY OPTIONS',isActive:false}];
        $scope.$id = "collectionsController";
        /*used til we convert to use route params*/
        var QueryString = function () {
            // This function is anonymous, is executed immediately and
            // the return value is assigned to QueryString!
            var query_string = {};
            var query = window.location.search.substring(1);
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                // If first entry with this name
                if (typeof query_string[pair[0]] === "undefined") {
                    query_string[pair[0]] = pair[1];
                    // If second entry with this name
                }
                else if (typeof query_string[pair[0]] === "string") {
                    var arr = [query_string[pair[0]], pair[1]];
                    query_string[pair[0]] = arr;
                    // If third or later entry with this name
                }
                else {
                    query_string[pair[0]].push(pair[1]);
                }
            }
            return query_string;
        }();
        //get url param to retrieve collection listing
        //set up defaults
        $scope.collectionID = QueryString.collectionID;
        if (!$scope.entityName) {
            $scope.entityName = 'collection';
        }
        if ($scope.entityID) {
            $scope.collectionID = $scope.entityID;
        }
        if (!$scope.propertyName) {
            $scope.propertyName = 'collectionConfig';
        }
        $scope.paginator = paginationService.createPagination();
        $scope.appendToCollection = function () {
            if ($scope.paginator.getPageShow() === 'Auto') {
                $log.debug('AppendToCollection');
                if ($scope.autoScrollPage < $scope.collection.totalPages) {
                    $scope.autoScrollDisabled = true;
                    $scope.autoScrollPage++;
                    var collectionListingPromise = $hibachi.getEntity($scope.entityName, { id: $scope.collectionID, currentPage: $scope.paginator.autoScrollPage, pageShow: 50 });
                    collectionListingPromise.then(function (value) {
                        $scope.collection.pageRecords = $scope.collection.pageRecords.concat(value.pageRecords);
                        $scope.autoScrollDisabled = false;
                    }, function (reason) {
                    });
                }
            }
        };
        $scope.keywords = "";
        $scope.loadingCollection = false;
        var searchPromise;
        $scope.searchCollection = function () {
            if (searchPromise) {
                $timeout.cancel(searchPromise);
            }
            searchPromise = $timeout(function () {
                $log.debug('search with keywords');
                $log.debug($scope.keywords);
                //Set current page here so that the pagination does not break when getting collection
                $scope.paginator.setCurrentPage(1);
                $scope.loadingCollection = true;
            }, 500);
        };
        $scope.getCollection = function (action) {
            //			$scope.currentPage = $scope.pagination.getCurrentPage();
            if ($scope.getCollectionPromise) {
                $timeout.cancel($scope.getCollectionPromise);
            }
            $scope.getCollectionPromise = $timeout(function () {
                var collectionListingPromise = $hibachi.getEntity('collection', { id: $scope.collectionID, currentPage: $scope.paginator.getCurrentPage(), pageShow: $scope.paginator.getPageShow(), keywords: $scope.keywords });
                collectionListingPromise.then(function (value) {
                    $scope.collection = value;
                    $scope.paginator.setPageRecordsInfo($scope.collection);
                    $scope.collectionInitial = angular.copy($scope.collection);
                    if (angular.isUndefined($scope.collectionConfig)) {
                        var test = collectionConfigService.newCollectionConfig();
                        test.loadJson($scope.propertyName);
                        $scope.collectionConfig = test.getCollectionConfig();
                    }
                    //check if we have any filter Groups
                    if (angular.isUndefined($scope.collectionConfig.filterGroups)) {
                        $scope.collectionConfig.filterGroups = [
                            {
                                filterGroup: []
                            }
                        ];
                    }
                    collectionService.setFilterCount(filterItemCounter());
                    $scope.loadingCollection = false;
                }, function (reason) {
                });
            }, 1000);
            return $scope.getCollectionPromise;
        };
        $scope.paginator.getCollection = $scope.getCollection;
        $scope.getCollection();
        observerService.attach($scope.getCollection, 'swPaginationAction');
        var unbindCollectionObserver = $scope.$watch('collection', function (newValue, oldValue) {
            if (newValue !== oldValue) {
                if (angular.isUndefined($scope.filterPropertiesList)) {
                    $scope.filterPropertiesList = {};
                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName($scope.collectionConfig.baseEntityAlias);
                    filterPropertiesPromise.then(function (value) {
                        metadataService.setPropertiesList(value, $scope.collectionConfig.baseEntityAlias);
                        $scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias($scope.collectionConfig.baseEntityAlias);
                        metadataService.formatPropertiesList($scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias], $scope.collectionConfig.baseEntityAlias);
                    });
                }
                unbindCollectionObserver();
            }
        });
        $scope.setCollectionForm = function (form) {
            $scope.collectionForm = form;
        };
        $scope.collectionDetails = {
            isOpen: false,
            openCollectionDetails: function () {
                $scope.collectionDetails.isOpen = true;
            }
        };
        $scope.errorMessage = {};
        var filterItemCounter = function (filterGroupArray) {
            var filterItemCount = 0;
            if (!angular.isDefined(filterGroupArray)) {
                filterGroupArray = $scope.collectionConfig.filterGroups[0].filterGroup;
            }
            //Start out loop
            for (var index in filterGroupArray) {
                //If filter isn't new then increment the count
                if (!filterGroupArray[index].$$isNew
                    && !angular.isDefined(filterGroupArray[index].filterGroup)) {
                    filterItemCount++;
                    // If there are nested filter groups run introspectively
                }
                else if (angular.isDefined(filterGroupArray[index].filterGroup)) {
                    //Call function recursively
                    filterItemCount += filterItemCounter(filterGroupArray[index].filterGroup);
                    //Otherwise make like the foo fighters and "Break Out!"
                }
                else {
                    break;
                }
            }
            return filterItemCount;
        };
        $scope.saveCollection = function () {
            if ($scope.saveCollectionPromise) {
                $timeout.cancel($scope.saveCollectionPromise);
            }
            $scope.saveCollectionPromise = $timeout(function () {
                var entityName = $scope.entityName;
                var collection = $scope.collection;
                if (isFormValid($scope.collectionForm)) {
                    if (angular.isDefined($scope.collectionConfig)
                        && angular.isDefined($scope.collectionConfig.groupBys)
                        && $scope.collectionConfig.groupBys.split(',').length != $scope.collectionConfig.columns.length) {
                        var groupbyArray = $scope.collectionConfig.groupBys.split(',');
                        for (var column = 0; column < $scope.collectionConfig.columns.length; column++) {
                            if (groupbyArray.indexOf($scope.collectionConfig.columns[column].propertyIdentifier) == -1) {
                                groupbyArray.push($scope.collectionConfig.columns[column].propertyIdentifier);
                            }
                        }
                        $scope.collectionConfig.groupBys = groupbyArray.join(',');
                    }
                    var collectionConfigString = collectionService.stringifyJSON($scope.collectionConfig);
                    $log.debug(collectionConfigString);
                    var data = angular.copy(collection);
                    data.collectionConfig = collectionConfigString;
                    //has to be removed in order to save transient correctly
                    delete data.pageRecords;
                    var saveCollectionPromise = $hibachi.saveEntity(entityName, collection.collectionID, data, 'save');
                    saveCollectionPromise.then(function (value) {
                        $scope.errorMessage = {};
                        //Set current page here so that the pagination does not break when getting collection
                        $scope.paginator.setCurrentPage(1);
                        $scope.collectionDetails.isOpen = false;
                    }, function (reason) {
                        //revert to original
                        angular.forEach(reason.errors, function (value, key) {
                            $scope.collectionForm[key].$invalid = true;
                            $scope.errorMessage[key] = value[0];
                        });
                        //$scope.collection = angular.copy($scope.collectionInitial);
                    });
                }
                collectionService.setFilterCount(filterItemCounter());
            }, 1000);
        };
        var isFormValid = function (angularForm) {
            $log.debug('validateForm');
            var formValid = true;
            for (var field in angularForm) {
                // look at each form input with a name attribute set
                // checking if it is pristine and not a '$' special field
                if (field[0] != '$') {
                    // need to use formValid variable instead of formController.$valid because checkbox dropdown is not an input
                    // and somehow formController didn't invalid if checkbox dropdown is invalid
                    if (angularForm[field].$invalid) {
                        formValid = false;
                        for (var error in angularForm[field].$error) {
                            if (error == 'required') {
                                $scope.errorMessage[field] = 'This field is required';
                            }
                        }
                    }
                    if (angularForm[field].$pristine) {
                        if (angular.isUndefined(angularForm[field].$viewValue)) {
                            angularForm[field].$setViewValue("");
                        }
                        else {
                            angularForm[field].$setViewValue(angularForm[field].$viewValue);
                        }
                    }
                }
            }
            return formValid;
        };
        $scope.copyExistingCollection = function () {
            $scope.collection.collectionConfig = $scope.selectedExistingCollection;
        };
        $scope.setSelectedExistingCollection = function (selectedExistingCollection) {
            $scope.selectedExistingCollection = selectedExistingCollection;
        };
        $scope.setSelectedFilterProperty = function (selectedFilterProperty) {
            $scope.selectedFilterProperty = selectedFilterProperty;
        };
        $scope.filterCount = collectionService.getFilterCount;
        //export action
        $scope.exportCollection = function () {
            var url = '/?' + appConfig.action + '=main.collectionExport&collectionExportID=' + $scope.collectionID + '&downloadReport=1';
            var data = {
                "ids": selectionService.getSelections('collectionSelection'),
                "keywords": $scope.keywords
            };
            var target = "downloadCollection";
            $('body').append('<form action="' + url + '" method="post" target="' + target + '" id="postToIframe"></form>');
            $.each(data, function (n, v) {
                $('#postToIframe').append('<input type="hidden" name="' + n + '" value="' + v + '" />');
            });
            $('#postToIframe').submit().remove();
        };
    }
    return CollectionController;
}());
exports.CollectionController = CollectionController;
// 'use strict';
// angular.module('slatwalladmin')
// //using $location to get url params, this will probably change to using routes eventually
// .controller('collections', [
// 	'$scope',
// '$location',
// '$log',
// '$timeout',
// '$hibachi',
// 'collectionService',
// 'metadataService',
// 'selectionService',
// 'paginationService',
// 	function(
// 		$scope,
// $location,
// $log,
// $timeout,
// $hibachi,
// collectionService,
// metadataService,
// selectionService,
// paginationService
// 	){
//
// 	}
// ]);


/***/ }),
/* 758 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var ConfirmationController = /** @class */ (function () {
    //@ngInject
    function ConfirmationController($scope, $log, $modalInstance) {
        $scope.deleteEntity = function (entity) {
            $log.debug("Deleting an entity.");
            $log.debug($scope.entity);
            this.close();
        };
        $scope.fireCallback = function (callbackFunction) {
            callbackFunction();
            this.close();
        };
        /**
        * Closes the modal window
        */
        $scope.close = function () {
            $modalInstance.close();
        };
        /**
        * Cancels the modal window
        */
        $scope.cancel = function () {
            $modalInstance.dismiss("cancel");
        };
    }
    return ConfirmationController;
}());
exports.ConfirmationController = ConfirmationController;


/***/ }),
/* 759 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CreateCollection = /** @class */ (function () {
    //@ngInject
    function CreateCollection($scope, $log, $timeout, $hibachi, collectionService, metadataService, paginationService, dialogService, observerService, selectionService, collectionConfigService, rbkeyService, $window) {
        $window.scrollTo(0, 0);
        $scope.params = dialogService.getCurrentDialog().params;
        $scope.readOnly = angular.isDefined($scope.params.readOnly) && $scope.params.readOnly == true;
        $scope.myCollection = collectionConfigService.newCollectionConfig($scope.params.entityName);
        var hibachiConfig = $hibachi.getConfig();
        if ($scope.params.entityName == 'Type' && angular.isUndefined($scope.params.entityId) && angular.isDefined($scope.params.parentEntity)) {
            $scope.params.parentEntity = $scope.params.parentEntity.replace(new RegExp('^' + hibachiConfig.applicationKey, 'i'), '');
            var systemCode = $scope.params.parentEntity.charAt(0).toLowerCase() + $scope.params.parentEntity.slice(1) + 'Type';
            $scope.myCollection.addFilter('parentType.systemCode', systemCode);
        }
        $scope.keywords = '';
        $scope.paginator = paginationService.createPagination();
        //$scope.isRadio = true;
        $scope.hideEditView = true;
        //$scope.closeSaving = true;
        $scope.hasSelection = selectionService.getSelectionCount;
        $scope.idsSelected = selectionService.getSelections;
        $scope.unselectAll = function () {
            selectionService.clearSelections('collectionSelection');
            $scope.getCollection();
        };
        $scope.newCollection = $hibachi.newCollection();
        $scope.newCollection.data.collectionCode = $scope.params.entityName + "-" + new Date().valueOf();
        $scope.newCollection.data.collectionObject = $scope.params.entityName;
        if (angular.isDefined($scope.params.entityId)) {
            $scope.newCollection.data.collectionID = $scope.params.entityId;
            $timeout(function () {
                $scope.newCollection.forms['form.createCollection'].$setDirty();
            });
        }
        if (angular.isDefined($scope.params.collectionName)) {
            $scope.newCollection.data.collectionName = $scope.params.collectionName;
            $timeout(function () {
                $scope.newCollection.forms['form.createCollection'].$setDirty();
            });
        }
        $scope.saveCollection = function () {
            $scope.myCollection.loadJson($scope.collectionConfig);
            $scope.getCollection();
        };
        $scope.getCollection = function () {
            $scope.closeSaving = true;
            $scope.myCollection.setPageShow($scope.paginator.getPageShow());
            $scope.myCollection.setCurrentPage($scope.paginator.getCurrentPage());
            $scope.myCollection.setKeywords($scope.keywords);
            var collectionOptions;
            if (angular.isDefined($scope.params.entityId)) {
                collectionOptions = {
                    id: $scope.params.entityId,
                    currentPage: $scope.paginator.getCurrentPage(),
                    pageShow: $scope.paginator.getPageShow(),
                    keywords: $scope.keywords
                };
            }
            else {
                collectionOptions = $scope.myCollection.getOptions();
            }
            $log.debug($scope.myCollection.getOptions());
            var collectionListingPromise = $hibachi.getEntity($scope.myCollection.getEntityName(), collectionOptions);
            collectionListingPromise.then(function (value) {
                if (angular.isDefined($scope.params.entityId)) {
                    $scope.newCollection.data.collectionName = value.collectionName;
                }
                $scope.collection = value;
                $scope.collection.collectionObject = $scope.myCollection.baseEntityName;
                $scope.collectionInitial = angular.copy($scope.collection);
                $scope.paginator.setRecordsCount($scope.collection.recordsCount);
                $scope.paginator.setPageRecordsInfo($scope.collection);
                if (angular.isUndefined($scope.myCollection.columns)) {
                    var colConfig = angular.fromJson(value.collectionConfig);
                    colConfig.baseEntityName = colConfig.baseEntityName.replace(new RegExp('^' + hibachiConfig.applicationKey, 'i'), '');
                    $scope.myCollection.loadJson(colConfig);
                }
                if (angular.isUndefined($scope.collectionConfig)) {
                    var tempCollectionConfig = collectionConfigService.newCollectionConfig();
                    tempCollectionConfig.loadJson(value.collectionConfig);
                    $scope.collectionConfig = tempCollectionConfig.getCollectionConfig();
                }
                if (angular.isUndefined($scope.collectionConfig.filterGroups) || !$scope.collectionConfig.filterGroups.length) {
                    $scope.collectionConfig.filterGroups = [
                        {
                            filterGroup: []
                        }
                    ];
                }
                collectionService.setFilterCount(filterItemCounter());
                $scope.loadingCollection = false;
                $scope.closeSaving = false;
            }, function (reason) {
            });
            return collectionListingPromise;
        };
        $scope.paginator.collection = $scope.newCollection;
        $scope.paginator.getCollection = $scope.getCollection;
        var unbindCollectionObserver = $scope.$watch('collection', function (newValue, oldValue) {
            if (newValue !== oldValue) {
                if (angular.isUndefined($scope.filterPropertiesList)) {
                    $scope.filterPropertiesList = {};
                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName($scope.collectionConfig.baseEntityAlias);
                    filterPropertiesPromise.then(function (value) {
                        metadataService.setPropertiesList(value, $scope.collectionConfig.baseEntityAlias);
                        $scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias($scope.collectionConfig.baseEntityAlias);
                        metadataService.formatPropertiesList($scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias], $scope.collectionConfig.baseEntityAlias);
                    });
                }
                unbindCollectionObserver();
            }
        });
        var filterItemCounter = function (filterGroupArray) {
            var filterItemCount = 0;
            if (!angular.isDefined(filterGroupArray)) {
                filterGroupArray = $scope.collectionConfig.filterGroups[0].filterGroup;
            }
            //Start out loop
            for (var index in filterGroupArray) {
                //If filter isn't new then increment the count
                if (!filterGroupArray[index].$$isNew && !angular.isDefined(filterGroupArray[index].filterGroup)) {
                    filterItemCount++;
                    // If there are nested filter groups run introspectively
                }
                else if (angular.isDefined(filterGroupArray[index].filterGroup)) {
                    //Call function recursively
                    filterItemCount += filterItemCounter(filterGroupArray[index].filterGroup);
                    //Otherwise make like the foo fighters and "Break Out!"
                }
                else {
                    break;
                }
            }
            return filterItemCount;
        };
        $scope.getCollection();
        $scope.copyExistingCollection = function () {
            $scope.collection.collectionConfig = $scope.selectedExistingCollection;
        };
        $scope.setSelectedExistingCollection = function (selectedExistingCollection) {
            $scope.selectedExistingCollection = selectedExistingCollection;
        };
        $scope.setSelectedFilterProperty = function (selectedFilterProperty) {
            $scope.selectedFilterProperty = selectedFilterProperty;
        };
        $scope.loadingCollection = false;
        var searchPromise;
        $scope.searchCollection = function () {
            if (searchPromise) {
                $timeout.cancel(searchPromise);
            }
            searchPromise = $timeout(function () {
                //$log.debug('search with keywords');
                //$log.debug($scope.keywords);
                //Set current page here so that the pagination does not break when getting collection
                $scope.paginator.setCurrentPage(1);
                $scope.loadingCollection = true;
            }, 500);
        };
        $scope.filterCount = collectionService.getFilterCount;
        //
        $scope.hideExport = true;
        $scope.saveNewCollection = function ($index) {
            if ($scope.closeSaving)
                return;
            $scope.closeSaving = true;
            if (!angular.isUndefined(selectionService.getSelections('collectionSelection'))
                && (selectionService.getSelections('collectionSelection').length > 0)) {
                $scope.collectionConfig.filterGroups[0].filterGroup = [
                    {
                        "displayPropertyIdentifier": rbkeyService.getRBKey("entity." + $scope.myCollection.baseEntityName.toLowerCase() + "." + $scope.myCollection.collection.$$getIDName().toLowerCase()),
                        "propertyIdentifier": $scope.myCollection.baseEntityAlias + "." + $scope.myCollection.collection.$$getIDName(),
                        "comparisonOperator": "in",
                        "value": selectionService.getSelections('collectionSelection').join(),
                        "displayValue": selectionService.getSelections('collectionSelection').join(),
                        "ormtype": "string",
                        "fieldtype": "id",
                        "conditionDisplay": "In List"
                    }
                ];
            }
            $scope.newCollection.data.collectionConfig = $scope.collectionConfig;
            if ($scope.newCollection.data.collectionConfig.baseEntityName.lastIndexOf(hibachiConfig.applicationKey, 0) !== 0) {
                $scope.newCollection.data.collectionConfig.baseEntityName = hibachiConfig.applicationKey + $scope.newCollection.data.collectionConfig.baseEntityName;
            }
            $scope.newCollection.$$save().then(function () {
                observerService.notify('addCollection', $scope.newCollection.data);
                selectionService.clearSelection('collectionSelection');
                dialogService.removePageDialog($index);
                $scope.closeSaving = false;
            }, function () {
                $scope.closeSaving = false;
            });
        };
    }
    return CreateCollection;
}());
exports.CreateCollection = CreateCollection;


/***/ }),
/* 760 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var CollectionCreateController = /** @class */ (function () {
    //@ngInject
    function CollectionCreateController($scope, collectionConfigService) {
        var _this = this;
        this.$scope = $scope;
        this.collectionConfigService = collectionConfigService;
        this.$scope.entity_createcollectionCtrl = {};
        this.$scope.entity_createcollectionCtrl.baseCollections = [];
        this.collection = this.collectionConfigService.newCollectionConfig('Collection');
        this.collection.setDisplayProperties('collectionID,collectionName');
        this.getBaseCollections('Access');
        //on select change get collection
        this.$scope.entity_createcollectionCtrl.collectionObjectChanged = function () {
            _this.getBaseCollections(_this.$scope.entity_createcollectionCtrl.selectedOption);
        };
    }
    CollectionCreateController.prototype.getBaseCollections = function (baseCollectionObject) {
        var _this = this;
        this.collection.clearFilters();
        this.collection.addFilter('collectionObject', baseCollectionObject);
        this.collection.setPageShow(50);
        this.collection.getEntity().then(function (res) {
            _this.$scope.entity_createcollectionCtrl.baseCollections = res.pageRecords;
        });
    };
    return CollectionCreateController;
}());
exports.CollectionCreateController = CollectionCreateController;


/***/ }),
/* 761 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var AggregateFilter = /** @class */ (function () {
    function AggregateFilter() {
    }
    //@ngInject
    AggregateFilter.Factory = function ($filter) {
        return function (property) {
            return property.filter(function (item) {
                if (item.fieldtype && item.fieldtype !== 'id') {
                    return false;
                }
                if (item.ormtype && ['big_decimal', 'double', 'float', 'integer'].indexOf(item.ormtype) < 0) {
                    return false;
                }
                return true;
            });
        };
    };
    return AggregateFilter;
}());
exports.AggregateFilter = AggregateFilter;


/***/ }),
/* 762 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var Column = /** @class */ (function () {
    function Column(propertyIdentifier, title, isVisible, isDeletable, isSearchable, isExportable, persistent, ormtype, attributeID, attributeSetObject) {
        if (isVisible === void 0) { isVisible = true; }
        if (isDeletable === void 0) { isDeletable = true; }
        if (isSearchable === void 0) { isSearchable = true; }
        if (isExportable === void 0) { isExportable = true; }
        this.propertyIdentifier = propertyIdentifier;
        this.title = title;
        this.isVisible = isVisible;
        this.isDeletable = isDeletable;
        this.isSearchable = isSearchable;
        this.isExportable = isExportable;
        this.persistent = persistent;
        this.ormtype = ormtype;
        this.attributeID = attributeID;
        this.attributeSetObject = attributeSetObject;
    }
    return Column;
}());
exports.Column = Column;
var Filter = /** @class */ (function () {
    function Filter(propertyIdentifier, value, comparisonOperator, logicalOperator, displayPropertyIdentifier, displayValue, hidden, pattern) {
        if (hidden === void 0) { hidden = false; }
        this.propertyIdentifier = propertyIdentifier;
        this.value = value;
        this.comparisonOperator = comparisonOperator;
        this.logicalOperator = logicalOperator;
        this.displayPropertyIdentifier = displayPropertyIdentifier;
        this.displayValue = displayValue;
        this.hidden = hidden;
        this.pattern = pattern;
    }
    return Filter;
}());
exports.Filter = Filter;
var CollectionFilter = /** @class */ (function () {
    function CollectionFilter(propertyIdentifier, displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly) {
        if (readOnly === void 0) { readOnly = false; }
        this.propertyIdentifier = propertyIdentifier;
        this.displayPropertyIdentifier = displayPropertyIdentifier;
        this.displayValue = displayValue;
        this.collectionID = collectionID;
        this.criteria = criteria;
        this.fieldtype = fieldtype;
        this.readOnly = readOnly;
    }
    return CollectionFilter;
}());
exports.CollectionFilter = CollectionFilter;
var Join = /** @class */ (function () {
    function Join(associationName, alias) {
        this.associationName = associationName;
        this.alias = alias;
    }
    return Join;
}());
exports.Join = Join;
var OrderBy = /** @class */ (function () {
    function OrderBy(propertyIdentifier, direction) {
        this.propertyIdentifier = propertyIdentifier;
        this.direction = direction;
    }
    return OrderBy;
}());
exports.OrderBy = OrderBy;
var CollectionConfig = /** @class */ (function () {
    // @ngInject
    function CollectionConfig(rbkeyService, $hibachi, utilityService, observerService, baseEntityName, baseEntityAlias, columns, keywordColumns, filterGroups, keywordFilterGroups, joins, orderBy, groupBys, id, currentPage, pageShow, keywords, allRecords, dirtyRead, isDistinct) {
        if (keywordColumns === void 0) { keywordColumns = []; }
        if (filterGroups === void 0) { filterGroups = [{ filterGroup: [] }]; }
        if (keywordFilterGroups === void 0) { keywordFilterGroups = [{ filterGroup: [] }]; }
        if (currentPage === void 0) { currentPage = 1; }
        if (pageShow === void 0) { pageShow = 10; }
        if (keywords === void 0) { keywords = ''; }
        if (allRecords === void 0) { allRecords = false; }
        if (dirtyRead === void 0) { dirtyRead = false; }
        if (isDistinct === void 0) { isDistinct = false; }
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.baseEntityName = baseEntityName;
        this.baseEntityAlias = baseEntityAlias;
        this.columns = columns;
        this.keywordColumns = keywordColumns;
        this.filterGroups = filterGroups;
        this.keywordFilterGroups = keywordFilterGroups;
        this.joins = joins;
        this.orderBy = orderBy;
        this.groupBys = groupBys;
        this.id = id;
        this.currentPage = currentPage;
        this.pageShow = pageShow;
        this.keywords = keywords;
        this.allRecords = allRecords;
        this.dirtyRead = dirtyRead;
        this.isDistinct = isDistinct;
        this.clearFilterGroups = function () {
            _this.filterGroups = [{ filterGroup: [] }];
            _this.keywordFilterGroups = [{ filterGroup: [] }];
            return _this;
        };
        this.newCollectionConfig = function (baseEntityName, baseEntityAlias) {
            return new CollectionConfig(_this.rbkeyService, _this.$hibachi, _this.utilityService, _this.observerService, baseEntityName, baseEntityAlias);
        };
        this.loadJson = function (jsonCollection) {
            //if json then make a javascript object else use the javascript object
            //if coldfusion has double encoded the json keep calling fromJson until it becomes an object
            while (angular.isString(jsonCollection)) {
                jsonCollection = angular.fromJson(jsonCollection);
            }
            _this.baseEntityAlias = jsonCollection.baseEntityAlias;
            _this.baseEntityName = jsonCollection.baseEntityName;
            if (angular.isDefined(jsonCollection.filterGroups)) {
                _this.validateFilter(jsonCollection.filterGroups);
                _this.filterGroups = jsonCollection.filterGroups;
            }
            _this.columns = jsonCollection.columns;
            _this.joins = jsonCollection.joins;
            _this.keywords = jsonCollection.keywords;
            _this.orderBy = jsonCollection.orderBy;
            _this.groupBys = jsonCollection.groupBys;
            _this.pageShow = jsonCollection.pageShow;
            _this.allRecords = jsonCollection.allRecords;
            if (jsonCollection.dirtyRead) {
                _this.dirtyRead = jsonCollection.dirtyRead;
            }
            _this.isDistinct = jsonCollection.isDistinct;
            _this.currentPage = jsonCollection.currentPage || 1;
            _this.pageShow = jsonCollection.pageShow || 10;
            _this.keywords = jsonCollection.keywords;
            return _this;
        };
        this.clone = function () {
            return _this.newCollectionConfig(_this.baseEntityName, _this.baseEntityAlias).loadJson(JSON.parse(JSON.stringify(_this.getCollectionConfig())));
        };
        this.loadFilterGroups = function (filterGroupsConfig) {
            if (filterGroupsConfig === void 0) { filterGroupsConfig = [{ filterGroup: [] }]; }
            _this.filterGroups = filterGroupsConfig;
            return _this;
        };
        this.loadColumns = function (columns) {
            _this.columns = columns;
            return _this;
        };
        this.getCollectionConfig = function (validate) {
            if (validate === void 0) { validate = true; }
            if (validate) {
                _this.validateFilter(_this.filterGroups);
            }
            return {
                baseEntityAlias: _this.baseEntityAlias,
                baseEntityName: _this.baseEntityName,
                columns: _this.columns,
                keywordColumns: _this.keywordColumns,
                filterGroups: _this.filterGroups,
                joins: _this.joins,
                groupBys: _this.groupBys,
                currentPage: _this.currentPage,
                pageShow: _this.pageShow,
                keywords: _this.keywords,
                defaultColumns: (!_this.columns || !_this.columns.length),
                allRecords: _this.allRecords,
                dirtyRead: _this.dirtyRead,
                isDistinct: _this.isDistinct,
                orderBy: _this.orderBy
            };
        };
        this.getEntityName = function () {
            return _this.baseEntityName.charAt(0).toUpperCase() + _this.baseEntityName.slice(1);
        };
        this.getOptions = function () {
            _this.validateFilter(_this.filterGroups);
            var columns = _this.columns;
            if (_this.keywords && _this.keywords.length && _this.keywordFilterGroups[0].filterGroup.length > 0) {
                var filters = _this.keywordFilterGroups;
            }
            else {
                var filters = _this.filterGroups;
            }
            var options = {
                columnsConfig: angular.toJson(columns),
                filterGroupsConfig: angular.toJson(filters),
                joinsConfig: angular.toJson(_this.joins),
                orderByConfig: angular.toJson(_this.orderBy),
                groupBysConfig: angular.toJson(_this.groupBys),
                currentPage: _this.currentPage,
                pageShow: _this.pageShow,
                keywords: _this.keywords,
                defaultColumns: (!_this.columns || !_this.columns.length),
                allRecords: _this.allRecords,
                dirtyRead: _this.dirtyRead,
                isDistinct: _this.isDistinct
            };
            if (angular.isDefined(_this.id)) {
                options['id'] = _this.id;
            }
            return options;
        };
        this.debug = function () {
            return _this;
        };
        this.formatPropertyIdentifier = function (propertyIdentifier, addJoin) {
            if (addJoin === void 0) { addJoin = false; }
            //if already starts with alias, strip it out
            if (propertyIdentifier.lastIndexOf(_this.baseEntityAlias, 0) === 0) {
                propertyIdentifier = propertyIdentifier.slice(_this.baseEntityAlias.length + 1);
            }
            var _propertyIdentifier = _this.baseEntityAlias;
            if (addJoin === true) {
                _propertyIdentifier += _this.processJoin(propertyIdentifier);
            }
            else {
                _propertyIdentifier += '.' + propertyIdentifier;
            }
            return _propertyIdentifier;
        };
        this.processJoin = function (propertyIdentifier) {
            var _propertyIdentifier = '', propertyIdentifierParts = propertyIdentifier.split('.'), current_collection = _this.collection;
            for (var i = 0; i < propertyIdentifierParts.length; i++) {
                if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
                    current_collection = _this.$hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
                    _propertyIdentifier += '_' + propertyIdentifierParts[i];
                    _this.addJoin(new Join(_propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1), _this.baseEntityAlias + _propertyIdentifier));
                }
                else {
                    _propertyIdentifier += '.' + propertyIdentifierParts[i];
                }
            }
            return _propertyIdentifier;
        };
        this.addJoin = function (join) {
            if (!_this.joins) {
                _this.joins = [];
            }
            var joinFound = false;
            angular.forEach(_this.joins, function (configJoin) {
                if (configJoin.alias === join.alias) {
                    joinFound = true;
                }
            });
            if (!joinFound) {
                _this.joins.push(join);
            }
            return _this;
        };
        this.addAlias = function (propertyIdentifier) {
            var parts = propertyIdentifier.split('.');
            if (parts.length > 1 && parts[0] !== _this.baseEntityAlias) {
                return _this.baseEntityAlias + '.' + propertyIdentifier;
            }
            return propertyIdentifier;
        };
        this.addColumn = function (column, title, options) {
            if (title === void 0) { title = ''; }
            if (options === void 0) { options = {}; }
            if (!_this.columns || options.aggregate != null || _this.utilityService.ArrayFindByPropertyValue(_this.columns, 'propertyIdentifier', column) === -1) {
                var isVisible = true, isDeletable = true, isSearchable = true, isExportable = true, persistent, ormtype = 'string', lastProperty = column.split('.').pop(), isKeywordColumn = true, isOnlyKeywordColumn = false;
                var lastEntity = _this.$hibachi.getEntityExample(_this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, column));
                if (angular.isUndefined(lastEntity)) {
                    throw ("You have passed an incorrect entity name to a collection config");
                }
                if (angular.isUndefined(_this.columns)) {
                    _this.columns = [];
                }
                //hide id columns
                if (angular.isDefined(options['isVisible'])) {
                    isVisible = options['isVisible'];
                }
                if (angular.isUndefined(options.isVisible) &&
                    column.substring(column.length - 2) === "ID") {
                    isVisible = false;
                }
                if (angular.isDefined(options['isDeletable'])) {
                    isDeletable = options['isDeletable'];
                }
                if (angular.isDefined(options['isSearchable'])) {
                    isSearchable = options['isSearchable'];
                }
                if (angular.isDefined(options['isExportable'])) {
                    isExportable = options['isExportable'];
                }
                if (angular.isUndefined(options['isExportable']) && !isVisible) {
                    isExportable = false;
                }
                if (angular.isDefined(options['ormtype'])) {
                    ormtype = options['ormtype'];
                }
                else if (lastEntity.metaData[lastProperty] && lastEntity.metaData[lastProperty].ormtype) {
                    ormtype = lastEntity.metaData[lastProperty].ormtype;
                }
                if (angular.isDefined(options['isKeywordColumn'])) {
                    isKeywordColumn = options['isKeywordColumn'];
                }
                if (angular.isDefined(options['isOnlyKeywordColumn'])) {
                    isOnlyKeywordColumn = options['isOnlyKeywordColumn'];
                }
                if (angular.isDefined(lastEntity.metaData[lastProperty])) {
                    persistent = lastEntity.metaData[lastProperty].persistent;
                }
                var columnObject = new Column(column, title, isVisible, isDeletable, isSearchable, isExportable, persistent, ormtype, options['attributeID'], options['attributeSetObject']);
                if (options['aggregate']) {
                    columnObject['aggregate'] = options['aggregate'],
                        columnObject['aggregateAlias'] = title;
                }
                //add any non-conventional options
                for (var key in options) {
                    if (!columnObject[key]) {
                        columnObject[key] = options[key];
                    }
                }
                if (!isOnlyKeywordColumn) {
                    _this.columns.push(columnObject);
                }
                if (isKeywordColumn) {
                    _this.keywordColumns.push(columnObject);
                }
            }
            return _this;
        };
        this.setDisplayProperties = function (propertyIdentifier, title, options) {
            if (title === void 0) { title = ''; }
            if (options === void 0) { options = {}; }
            _this.addDisplayProperty(propertyIdentifier, title, options);
            return _this;
        };
        this.addDisplayAggregate = function (propertyIdentifier, aggregateFunction, aggregateAlias, options) {
            if (angular.isUndefined(aggregateAlias)) {
                aggregateAlias = propertyIdentifier.replace(/\./g, '_') + aggregateFunction;
            }
            var column = {
                propertyIdentifier: _this.formatPropertyIdentifier(propertyIdentifier, true),
                title: _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, propertyIdentifier) + "." + _this.utilityService.listLast(propertyIdentifier)),
                aggregate: {
                    aggregateFunction: aggregateFunction,
                    aggregateAlias: aggregateAlias
                }
            };
            angular.extend(column, options);
            //Add columns
            _this.addColumn(column.propertyIdentifier, undefined, column);
            return _this;
        };
        this.addGroupBy = function (groupByAlias) {
            if (!_this.groupBys) {
                _this.groupBys = '';
            }
            _this.groupBys = _this.utilityService.listAppendUnique(_this.groupBys, groupByAlias);
            return _this;
        };
        this.addDisplayProperty = function (propertyIdentifier, title, options) {
            if (title === void 0) { title = ''; }
            if (options === void 0) { options = {}; }
            var _DividedColumns = propertyIdentifier.trim().split(',');
            var _DividedTitles = title.trim().split(',');
            var join = propertyIdentifier.split('.').length > 1;
            _DividedColumns.forEach(function (column, index) {
                column = column.trim();
                if (angular.isDefined(_DividedTitles[index]) && _DividedTitles[index].trim() != '') {
                    title = _DividedTitles[index].trim();
                }
                else {
                    title = _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, column) + "." + _this.utilityService.listLast(column, "."));
                }
                _this.addColumn(_this.formatPropertyIdentifier(column, join), title, options);
            });
            return _this;
        };
        this.addFilter = function (propertyIdentifier, value, comparisonOperator, logicalOperator, hidden, isKeywordFilter, isOnlyKeywordFilter) {
            if (comparisonOperator === void 0) { comparisonOperator = '='; }
            if (hidden === void 0) { hidden = false; }
            if (isKeywordFilter === void 0) { isKeywordFilter = true; }
            if (isOnlyKeywordFilter === void 0) { isOnlyKeywordFilter = false; }
            if (!_this.filterGroups[0].filterGroup.length) {
                logicalOperator = undefined;
            }
            if (propertyIdentifier.split('.').length > 1) {
                _this.processJoin(propertyIdentifier);
            }
            //create filter
            var filter = _this.createFilter(propertyIdentifier, value, comparisonOperator, logicalOperator, hidden);
            if (!isOnlyKeywordFilter) {
                _this.filterGroups[0].filterGroup.push(filter);
            }
            if (isKeywordFilter) {
                _this.keywordFilterGroups[0].filterGroup.push(filter);
            }
            _this.observerService.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.addLikeFilter = function (propertyIdentifier, value, pattern, logicalOperator, displayPropertyIdentifier, hidden) {
            if (pattern === void 0) { pattern = '%w%'; }
            if (hidden === void 0) { hidden = false; }
            //if filterGroups does not exists then set a default
            if (!_this.filterGroups) {
                _this.filterGroups = [{ filterGroup: [] }];
            }
            //if filterGroups is longer than 0 then we at least need to default the logical Operator to AND
            if (_this.filterGroups[0].filterGroup.length && !logicalOperator)
                logicalOperator = 'AND';
            var join = propertyIdentifier.split('.').length > 1;
            if (angular.isUndefined(displayPropertyIdentifier)) {
                displayPropertyIdentifier = _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, propertyIdentifier) + "." + _this.utilityService.listLast(propertyIdentifier));
            }
            //create filter group
            var filter = new Filter(_this.formatPropertyIdentifier(propertyIdentifier, join), value, 'like', logicalOperator, displayPropertyIdentifier, value, hidden, pattern);
            _this.filterGroups[0].filterGroup.push(filter);
            _this.observerService.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.createFilter = function (propertyIdentifier, value, comparisonOperator, logicalOperator, hidden) {
            if (comparisonOperator === void 0) { comparisonOperator = '='; }
            if (hidden === void 0) { hidden = false; }
            //if filterGroups does not exists then set a default
            if (!_this.filterGroups) {
                _this.filterGroups = [{ filterGroup: [] }];
            }
            //if filterGroups is longer than 0 then we at least need to default the logical Operator to AND
            if (_this.filterGroups[0].filterGroup.length && !logicalOperator)
                logicalOperator = 'AND';
            var join = propertyIdentifier.split('.').length > 1;
            //create filter group
            var filter = new Filter(_this.formatPropertyIdentifier(propertyIdentifier, join), value, comparisonOperator, logicalOperator, propertyIdentifier.split('.').pop(), value, hidden);
            return filter;
        };
        this.addFilterGroup = function (filterGroup) {
            var group = {
                filterGroup: [],
                logicalOperator: 'AND'
            };
            for (var i = 0; i < filterGroup.length; i++) {
                var filter = _this.createFilter(filterGroup[i].propertyIdentifier, filterGroup[i].comparisonValue, filterGroup[i].comparisonOperator, filterGroup[i].logicalOperator, filterGroup[i].hidden);
                group.filterGroup.push(filter);
            }
            _this.filterGroups[0].filterGroup.push(group);
            _this.observerService.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.removeFilter = function (propertyIdentifier, value, comparisonOperator) {
            if (comparisonOperator === void 0) { comparisonOperator = '='; }
            _this.removeFilterHelper(_this.filterGroups, propertyIdentifier, value, comparisonOperator);
            _this.observerService.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        this.removeFilterByDisplayPropertyIdentifier = function (displayPropertyIdentifier) {
            _this.removeFromFilterGroupsByPropertyIdentifier(_this.filterGroups, displayPropertyIdentifier);
            _this.removeFromFilterGroupsByPropertyIdentifier(_this.keywordFilterGroups, displayPropertyIdentifier);
        };
        this.removeFromFilterGroupsByPropertyIdentifier = function (filterGroups, displayPropertyIdentifier) {
            for (var j = 0; j < filterGroups.length; j++) {
                var filterGroup = filterGroups[j].filterGroup;
                for (var i = 0; i < filterGroup.length; i++) {
                    var filter = filterGroup[i];
                    if (filter.displayPropertyIdentifier == displayPropertyIdentifier) {
                        filterGroup.splice(i, 1);
                        i--;
                    }
                }
            }
        };
        this.removeFilterHelper = function (filter, propertyIdentifier, value, comparisonOperator, currentGroup) {
            if (angular.isUndefined(currentGroup)) {
                currentGroup = filter;
            }
            if (angular.isArray(filter)) {
                angular.forEach(filter, function (key) {
                    _this.removeFilterHelper(key, propertyIdentifier, value, comparisonOperator, filter);
                });
            }
            else if (angular.isArray(filter.filterGroup)) {
                _this.removeFilterHelper(filter.filterGroup, propertyIdentifier, value, comparisonOperator, filter.filterGroup);
            }
            else {
                if (filter.propertyIdentifier == propertyIdentifier && filter.value == value && filter.comparisonOperator == comparisonOperator) {
                    currentGroup.splice(currentGroup.indexOf(filter), 1);
                }
            }
        };
        this.addCollectionFilter = function (propertyIdentifier, displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly) {
            if (criteria === void 0) { criteria = 'One'; }
            if (readOnly === void 0) { readOnly = false; }
            _this.filterGroups[0].filterGroup.push(new CollectionFilter(_this.formatPropertyIdentifier(propertyIdentifier), displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly));
            _this.observerService.notify('collectionConfigUpdated', {
                collectionConfig: _this
            });
            return _this;
        };
        //orderByList in this form: "property|direction" concrete: "skuName|ASC"
        this.setOrderBy = function (orderByList) {
            var orderBys = orderByList.split(',');
            angular.forEach(orderBys, function (orderBy) {
                _this.addOrderBy(orderBy);
            });
            return _this;
        };
        this.clearOrderBy = function () {
            _this.orderBy = [];
        };
        this.addOrderBy = function (orderByString, formatPropertyIdentifier) {
            if (formatPropertyIdentifier === void 0) { formatPropertyIdentifier = true; }
            if (!_this.orderBy) {
                _this.orderBy = [];
            }
            var propertyIdentifier = _this.utilityService.listFirst(orderByString, '|');
            if (formatPropertyIdentifier) {
                propertyIdentifier = _this.formatPropertyIdentifier(propertyIdentifier);
            }
            var direction = _this.utilityService.listLast(orderByString, '|');
            var orderBy = {
                propertyIdentifier: propertyIdentifier,
                direction: direction
            };
            _this.orderBy.push(orderBy);
        };
        this.toggleOrderBy = function (formattedPropertyIdentifier, singleColumn) {
            if (singleColumn === void 0) { singleColumn = false; }
            if (!_this.orderBy) {
                _this.orderBy = [];
            }
            var found = false;
            for (var i = _this.orderBy.length - 1; i >= 0; i--) {
                if (_this.orderBy[i].propertyIdentifier == formattedPropertyIdentifier) {
                    found = true;
                    if (_this.orderBy[i].direction.toUpperCase() == "DESC") {
                        _this.orderBy[i].direction = "ASC";
                    }
                    else if (_this.orderBy[i].direction.toUpperCase() == "ASC") {
                        _this.orderBy.splice(i, 1);
                    }
                    break;
                }
            }
            if (!found) {
                if (singleColumn) {
                    _this.orderBy = [];
                    for (var i = 0; i < _this.columns.length; i++) {
                        if (_this.columns[i]["sorting"] && _this.columns[i]["sorting"]["active"]) {
                            _this.columns[i]["sorting"]["active"] = false;
                            _this.columns[i]["sorting"]["sortOrder"] = 'asc';
                        }
                    }
                }
                _this.addOrderBy(formattedPropertyIdentifier + '|DESC', false);
            }
        };
        this.removeOrderBy = function (formattedPropertyIdentifier) {
            angular.forEach(_this.orderBy, function (orderBy, index) {
                if (orderBy.propertyIdentifier == formattedPropertyIdentifier) {
                    _this.orderBy.splice(index, 1);
                    return true;
                }
            });
            return false;
        };
        this.setCurrentPage = function (pageNumber) {
            _this.currentPage = pageNumber;
            return _this;
        };
        this.getCurrentPage = function () {
            return _this.currentPage;
        };
        this.setPageShow = function (NumberOfPages) {
            _this.pageShow = NumberOfPages;
            return _this;
        };
        this.getPageShow = function () {
            return _this.pageShow;
        };
        this.setAllRecords = function (allFlag) {
            if (allFlag === void 0) { allFlag = false; }
            _this.allRecords = allFlag;
            return _this;
        };
        this.setDistinct = function (flag) {
            if (flag === void 0) { flag = true; }
            _this.isDistinct = flag;
            return _this;
        };
        this.setDirtyRead = function (flag) {
            if (flag === void 0) { flag = false; }
            _this.dirtyRead = flag;
            return _this;
        };
        this.setKeywords = function (keyword) {
            _this.keywords = keyword;
            return _this;
        };
        this.setId = function (id) {
            _this.id = id;
            return _this;
        };
        this.hasFilters = function () {
            return (_this.filterGroups.length && _this.filterGroups[0].filterGroup.length);
        };
        this.hasColumns = function () {
            return _this.columns != null && _this.columns.length > 0;
        };
        this.clearFilters = function () {
            _this.filterGroups = [{ filterGroup: [] }];
            return _this;
        };
        this.getEntity = function (id) {
            if (angular.isDefined(id)) {
                _this.setId(id);
            }
            return _this.$hibachi.getEntity(_this.baseEntityName, _this.getOptions());
        };
        this.validateFilter = function (filter, currentGroup) {
            if (angular.isUndefined(currentGroup)) {
                currentGroup = filter;
            }
            if (angular.isArray(filter)) {
                angular.forEach(filter, function (key) {
                    _this.validateFilter(key, filter);
                });
            }
            else if (angular.isArray(filter.filterGroup)) {
                _this.validateFilter(filter.filterGroup, filter.filterGroup);
            }
            else {
                if ((!filter.comparisonOperator || !filter.comparisonOperator.length) && (!filter.propertyIdentifier || !filter.propertyIdentifier.length)) {
                    var index = currentGroup.indexOf(filter);
                    if (index > -1) {
                        _this.observerService.notify('filterItemAction', {
                            action: 'remove',
                            filterItemIndex: index
                        });
                        currentGroup.splice(index, 1);
                    }
                }
            }
        };
        this.getColumns = function () {
            if (!_this.columns) {
                _this.columns = [];
            }
            return _this.columns;
        };
        this.setColumns = function (columns) {
            _this.columns = columns;
            return _this;
        };
        this.$hibachi = $hibachi;
        this.rbkeyService = rbkeyService;
        if (angular.isDefined(this.baseEntityName)) {
            this.collection = this.$hibachi.getEntityExample(this.baseEntityName);
            if (angular.isUndefined(this.baseEntityAlias)) {
                this.baseEntityAlias = '_' + this.baseEntityName.toLowerCase();
            }
        }
    }
    Object.defineProperty(CollectionConfig.prototype, "collectionConfigString", {
        get: function () {
            return angular.toJson(this.getCollectionConfig(false));
        },
        enumerable: true,
        configurable: true
    });
    return CollectionConfig;
}());
exports.CollectionConfig = CollectionConfig;


/***/ }),
/* 763 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(17);
var CollectionService = /** @class */ (function (_super) {
    __extends(CollectionService, _super);
    //@ngInject
    function CollectionService($injector, $hibachi, utilityService, $filter, $log) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Collection') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.$filter = $filter;
        _this.$log = $log;
        _this.get = function () {
            return _this._pageDialogs || [];
        };
        //test
        _this.setFilterCount = function (count) {
            _this.$log.debug('incrementFilterCount');
            _this._filterCount = count;
        };
        _this.getFilterCount = function () {
            return _this._filterCount;
        };
        _this.getColumns = function () {
            return _this._collection.collectionConfig.columns;
        };
        _this.getFilterPropertiesList = function () {
            return _this._filterPropertiesList;
        };
        _this.getFilterPropertiesListByBaseEntityAlias = function (baseEntityAlias) {
            return _this._filterPropertiesList[baseEntityAlias];
        };
        _this.setFilterPropertiesList = function (value, key) {
            if (angular.isUndefined(_this._filterPropertiesList[key])) {
                _this._filterPropertiesList[key] = value;
            }
        };
        _this.stringifyJSON = function (jsonObject) {
            var jsonString = angular.toJson(jsonObject);
            return jsonString;
        };
        _this.removeFilterItem = function (filterItem, filterGroup) {
            filterGroup.pop(filterGroup.indexOf(filterItem));
        };
        _this.selectFilterItem = function (filterItem) {
            if (filterItem.$$isClosed) {
                for (var i in filterItem.$$siblingItems) {
                    filterItem.$$siblingItems[i].$$isClosed = true;
                    filterItem.$$siblingItems[i].$$disabled = true;
                }
                filterItem.$$isClosed = false;
                filterItem.$$disabled = false;
                filterItem.setItemInUse(true);
            }
            else {
                for (var i in filterItem.$$siblingItems) {
                    filterItem.$$siblingItems[i].$$disabled = false;
                }
                filterItem.$$isClosed = true;
                filterItem.setItemInUse(false);
            }
        };
        _this.selectFilterGroupItem = function (filterGroupItem) {
            if (filterGroupItem.$$isClosed) {
                for (var i in filterGroupItem.$$siblingItems) {
                    filterGroupItem.$$siblingItems[i].$$disabled = true;
                }
                filterGroupItem.$$isClosed = false;
                filterGroupItem.$$disabled = false;
            }
            else {
                for (var i in filterGroupItem.$$siblingItems) {
                    filterGroupItem.$$siblingItems[i].$$disabled = false;
                }
                filterGroupItem.$$isClosed = true;
            }
            filterGroupItem.setItemInUse(!filterGroupItem.$$isClosed);
        };
        _this.newFilterItem = function (filterItemGroup, setItemInUse, prepareForFilterGroup) {
            if (angular.isUndefined(prepareForFilterGroup)) {
                prepareForFilterGroup = false;
            }
            var filterItem = {
                displayPropertyIdentifier: "",
                propertyIdentifier: "",
                comparisonOperator: "",
                value: "",
                $$disabled: false,
                $$isClosed: true,
                $$isNew: true,
                $$siblingItems: filterItemGroup,
                setItemInUse: setItemInUse
            };
            if (filterItemGroup.length !== 0) {
                filterItem.logicalOperator = "AND";
            }
            if (prepareForFilterGroup === true) {
                filterItem.$$prepareForFilterGroup = true;
            }
            filterItemGroup.push(filterItem);
            _this.selectFilterItem(filterItem);
            return (filterItemGroup.length - 1);
        };
        _this.newFilterGroupItem = function (filterItemGroup, setItemInUse) {
            var filterGroupItem = {
                filterGroup: [],
                $$disabled: "false",
                $$isClosed: "true",
                $$siblingItems: filterItemGroup,
                $$isNew: "true",
                setItemInUse: setItemInUse
            };
            if (filterItemGroup.length !== 0) {
                filterGroupItem.logicalOperator = "AND";
            }
            filterItemGroup.push(filterGroupItem);
            _this.selectFilterGroupItem(filterGroupItem);
            _this.newFilterItem(filterGroupItem.filterGroup, setItemInUse, undefined);
        };
        _this.transplantFilterItemIntoFilterGroup = function (filterGroup, filterItem) {
            var filterGroupItem = {
                filterGroup: [],
                $$disabled: "false",
                $$isClosed: "true",
                $$isNew: "true"
            };
            if (angular.isDefined(filterItem.logicalOperator)) {
                filterGroupItem.logicalOperator = filterItem.logicalOperator;
                delete filterItem.logicalOperator;
            }
            filterGroupItem.setItemInUse = filterItem.setItemInUse;
            filterGroupItem.$$siblingItems = filterItem.$$siblingItems;
            filterItem.$$siblingItems = [];
            filterGroup.pop(filterGroup.indexOf(filterItem));
            filterItem.$$prepareForFilterGroup = false;
            filterGroupItem.filterGroup.push(filterItem);
            filterGroup.push(filterGroupItem);
        };
        _this.formatFilterPropertiesList = function (filterPropertiesList, propertyIdentifier) {
            _this.$log.debug('format Filter Properties List arguments 2');
            _this.$log.debug(filterPropertiesList);
            _this.$log.debug(propertyIdentifier);
            var simpleGroup = {
                $$group: 'simple',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(simpleGroup);
            var drillDownGroup = {
                $$group: 'drilldown',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(drillDownGroup);
            var compareCollections = {
                $$group: 'compareCollections',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(compareCollections);
            var attributeCollections = {
                $$group: 'attribute',
                displayPropertyIdentifier: '-----------------'
            };
            filterPropertiesList.data.push(attributeCollections);
            for (var i in filterPropertiesList.data) {
                if (angular.isDefined(filterPropertiesList.data[i].ormtype)) {
                    if (angular.isDefined(filterPropertiesList.data[i].attributeID)) {
                        filterPropertiesList.data[i].$$group = 'attribute';
                    }
                    else {
                        filterPropertiesList.data[i].$$group = 'simple';
                    }
                }
                if (angular.isDefined(filterPropertiesList.data[i].fieldtype)) {
                    if (filterPropertiesList.data[i].fieldtype === 'id') {
                        filterPropertiesList.data[i].$$group = 'simple';
                    }
                    if (filterPropertiesList.data[i].fieldtype === 'many-to-one') {
                        filterPropertiesList.data[i].$$group = 'drilldown';
                    }
                    if (filterPropertiesList.data[i].fieldtype === 'many-to-many' || filterPropertiesList.data[i].fieldtype === 'one-to-many') {
                        filterPropertiesList.data[i].$$group = 'compareCollections';
                    }
                }
                filterPropertiesList.data[i].propertyIdentifier = propertyIdentifier + '.' + filterPropertiesList.data[i].name;
            }
            filterPropertiesList.data = _this._orderBy(filterPropertiesList.data, ['-$$group', 'propertyIdentifier'], false);
        };
        _this.orderBy = function (propertiesList, predicate, reverse) {
            return _this._orderBy(propertiesList, predicate, reverse);
        };
        _this.$filter = $filter;
        _this.$log = $log;
        _this._collection = null;
        _this._collectionConfig = null;
        _this._filterPropertiesList = {};
        _this._filterCount = 0;
        _this._orderBy = $filter('orderBy');
        return _this;
    }
    return CollectionService;
}(baseentityservice_1.BaseEntityService));
exports.CollectionService = CollectionService;


/***/ }),
/* 764 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWActionCallerController = /** @class */ (function () {
    //@ngInject
    function SWActionCallerController($scope, $element, $templateRequest, $compile, $timeout, corePartialsPath, utilityService, observerService, $hibachi, rbkeyService, hibachiPathBuilder) {
        var _this = this;
        this.$scope = $scope;
        this.$element = $element;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.$timeout = $timeout;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.$hibachi = $hibachi;
        this.rbkeyService = rbkeyService;
        this.$onInit = function () {
            //Check if is NOT a ngRouter
            if (angular.isUndefined(_this.isAngularRoute)) {
                _this.isAngularRoute = _this.utilityService.isAngularRoute();
            }
            if (!_this.isAngularRoute) {
                _this.actionUrl = _this.$hibachi.buildUrl(_this.action, _this.queryString);
            }
            else {
                _this.actionUrl = '#!/entity/' + _this.action + '/' + _this.queryString.split('=')[1];
            }
            //            this.class = this.utilityService.replaceAll(this.utilityService.replaceAll(this.getAction(),':',''),'.','') + ' ' + this.class;
            _this.type = _this.type || 'link';
            if (angular.isDefined(_this.titleRbKey)) {
                _this.title = _this.rbkeyService.getRBKey(_this.titleRbKey);
            }
            if (angular.isUndefined(_this.text)) {
                _this.text = _this.title;
            }
            if (_this.type == "button") {
                //handle submit.
                /** in order to attach the correct controller to local vm, we need a watch to bind */
                var unbindWatcher = _this.$scope.$watch(function () { return _this.formController; }, function (newValue, oldValue) {
                    if (newValue !== undefined) {
                        _this.formController = newValue;
                    }
                    unbindWatcher();
                });
            }
            //            this.actionItem = this.getActionItem();
            //            this.actionItemEntityName = this.getActionItemEntityName();
            //            this.text = this.getText();
            //            if(this.getDisabled()){
            //                this.getDisabledText();
            //            }else if(this.getConfirm()){
            //                this.getConfirmText();
            //            }
            //
            //            if(this.modalFullWidth && !this.getDisabled()){
            //                this.class = this.class + " modalload-fullwidth";
            //            }
            //
            //            if(this.modal && !this.getDisabled() && !this.modalFullWidth){
            //                this.class = this.class + " modalload";
            //            }
            /*need authentication lookup by api to disable
            <cfif not attributes.hibachiScope.authenticateAction(action=attributes.action)>
                <cfset attributes.class &= " disabled" />
            </cfif>
            */
            if (_this.eventListeners) {
                for (var key in _this.eventListeners) {
                    _this.observerService.attach(_this.eventListeners[key], key);
                }
            }
        };
        this.submit = function () {
            _this.$timeout(function () {
                if (!_this.form) {
                    _this.$scope.$root.slatwall.doAction(_this.action);
                }
                else if (_this.form.$valid) {
                    _this.formController.submit(_this.action);
                }
            });
        };
        this.getAction = function () {
            return _this.action || '';
        };
        this.getActionItem = function () {
            return _this.utilityService.listLast(_this.getAction(), '.');
        };
        this.getActionItemEntityName = function () {
            var firstFourLetters = _this.utilityService.left(_this.actionItem, 4);
            var firstSixLetters = _this.utilityService.left(_this.actionItem, 6);
            var minus4letters = _this.utilityService.right(_this.actionItem, 4);
            var minus6letters = _this.utilityService.right(_this.actionItem, 6);
            var actionItemEntityName = "";
            if (firstFourLetters === 'list' && _this.actionItem.length > 4) {
                actionItemEntityName = minus4letters;
            }
            else if (firstFourLetters === 'edit' && _this.actionItem.length > 4) {
                actionItemEntityName = minus4letters;
            }
            else if (firstFourLetters === 'save' && _this.actionItem.length > 4) {
                actionItemEntityName = minus4letters;
            }
            else if (firstSixLetters === 'create' && _this.actionItem.length > 6) {
                actionItemEntityName = minus6letters;
            }
            else if (firstSixLetters === 'detail' && _this.actionItem.length > 6) {
                actionItemEntityName = minus6letters;
            }
            else if (firstSixLetters === 'delete' && _this.actionItem.length > 6) {
                actionItemEntityName = minus6letters;
            }
            return actionItemEntityName;
        };
        this.getTitle = function () {
            //if title is undefined then use text
            if (angular.isUndefined(_this.title) || !_this.title.length) {
                _this.title = _this.getText();
            }
            return _this.title;
        };
        this.getTextByRBKeyByAction = function (actionItemType, plural) {
            if (plural === void 0) { plural = false; }
            var navRBKey = _this.rbkeyService.getRBKey('admin.define.' + actionItemType + '_nav');
            var entityRBKey = '';
            var replaceKey = '';
            if (plural) {
                entityRBKey = _this.rbkeyService.getRBKey('entity.' + _this.actionItemEntityName + '_plural');
                replaceKey = '${itemEntityNamePlural}';
            }
            else {
                entityRBKey = _this.rbkeyService.getRBKey('entity.' + _this.actionItemEntityName);
                replaceKey = '${itemEntityName}';
            }
            return _this.utilityService.replaceAll(navRBKey, replaceKey, entityRBKey);
        };
        this.getText = function () {
            //if we don't have text then make it up based on rbkeys
            if (angular.isUndefined(_this.text) || (angular.isDefined(_this.text) && !_this.text.length)) {
                _this.text = _this.rbkeyService.getRBKey(_this.utilityService.replaceAll(_this.getAction(), ":", ".") + '_nav');
                var minus8letters = _this.utilityService.right(_this.text, 8);
                //if rbkey is still missing. then can we infer it
                if (minus8letters === '_missing') {
                    var firstFourLetters = _this.utilityService.left(_this.actionItem, 4);
                    var firstSixLetters = _this.utilityService.left(_this.actionItem, 6);
                    var minus4letters = _this.utilityService.right(_this.actionItem, 4);
                    var minus6letters = _this.utilityService.right(_this.actionItem, 6);
                    if (firstFourLetters === 'list' && _this.actionItem.length > 4) {
                        _this.text = _this.getTextByRBKeyByAction('list', true);
                    }
                    else if (firstFourLetters === 'edit' && _this.actionItem.length > 4) {
                        _this.text = _this.getTextByRBKeyByAction('edit', false);
                    }
                    else if (firstFourLetters === 'save' && _this.actionItem.length > 4) {
                        _this.text = _this.getTextByRBKeyByAction('save', false);
                    }
                    else if (firstSixLetters === 'create' && _this.actionItem.length > 6) {
                        _this.text = _this.getTextByRBKeyByAction('create', false);
                    }
                    else if (firstSixLetters === 'detail' && _this.actionItem.length > 6) {
                        _this.text = _this.getTextByRBKeyByAction('detail', false);
                    }
                    else if (firstSixLetters === 'delete' && _this.actionItem.length > 6) {
                        _this.text = _this.getTextByRBKeyByAction('delete', false);
                    }
                }
                if (_this.utilityService.right(_this.text, 8)) {
                    _this.text = _this.rbkeyService.getRBKey(_this.utilityService.replaceAll(_this.getAction(), ":", "."));
                }
            }
            if (!_this.title || (_this.title && !_this.title.length)) {
                _this.title = _this.text;
            }
            return _this.text;
        };
        this.getDisabled = function () {
            //if item is disabled
            if (angular.isDefined(_this.disabled) && _this.disabled) {
                return true;
            }
            else {
                return false;
            }
        };
        this.getDisabledText = function () {
            if (_this.getDisabled()) {
                //and no disabled text specified
                if (angular.isUndefined(_this.disabledtext) || !_this.disabledtext.length) {
                    var disabledrbkey = _this.utilityService.replaceAll(_this.action, ':', '.') + '_disabled';
                    _this.disabledtext = _this.rbkeyService.getRBKey(disabledrbkey);
                }
                //add disabled class
                _this.class += " btn-disabled";
                _this.confirm = false;
                return _this.disabledtext;
            }
            return "";
        };
        this.getConfirm = function () {
            if (angular.isDefined(_this.confirm) && _this.confirm) {
                return true;
            }
            else {
                return false;
            }
        };
        this.getConfirmText = function () {
            if (_this.getConfirm()) {
                if (angular.isUndefined(_this.confirmtext) && _this.confirmtext.length) {
                    var confirmrbkey = _this.utilityService.replaceAll(_this.action, ':', '.') + '_confirm';
                    _this.confirmtext = _this.rbkeyService.getRBKey(confirmrbkey);
                    /*<cfif right(attributes.confirmtext, "8") eq "_missing">
                        <cfset attributes.confirmtext = replace(attributes.hibachiScope.rbKey("admin.define.delete_confirm"),'${itemEntityName}', attributes.hibachiScope.rbKey('entity.#actionItemEntityName#'), "all") />
                    </cfif>*/
                }
                _this.class += " alert-confirm";
                return _this.confirm;
            }
            return "";
        };
        this.$scope = $scope;
        this.$element = $element;
        this.$timeout = $timeout;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.rbkeyService = rbkeyService;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.$templateRequest(this.hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "actioncaller.html").then(function (html) {
            var template = angular.element(html);
            _this.$element.parent().append(template);
            $compile(template)($scope);
            //need to perform init after promise completes
            //this.init();
        });
    }
    return SWActionCallerController;
}());
exports.SWActionCallerController = SWActionCallerController;
var SWActionCaller = /** @class */ (function () {
    function SWActionCaller(partialsPath, utiltiyService, $hibachi) {
        this.partialsPath = partialsPath;
        this.utiltiyService = utiltiyService;
        this.$hibachi = $hibachi;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            action: "@",
            text: "@",
            type: "@",
            queryString: "@",
            title: "@?",
            titleRbKey: "@?",
            'class': "@",
            icon: "@",
            iconOnly: "=",
            name: "@",
            confirm: "=",
            confirmtext: "@",
            disabled: "=",
            disabledtext: "@",
            modal: "=",
            modalFullWidth: "=",
            id: "@",
            isAngularRoute: "=?",
            eventListeners: '=?'
        };
        this.require = { formController: "^?swForm", form: "^?form" };
        this.controller = SWActionCallerController;
        this.controllerAs = "swActionCaller";
        this.link = function (scope, element, attrs) {
            if (angular.isDefined(scope.swActionCaller.formController)) {
                scope.formController = scope.swActionCaller.formController;
            }
        };
    }
    SWActionCaller.Factory = function () {
        var directive = function (partialsPath, utiltiyService, $hibachi) { return new SWActionCaller(partialsPath, utiltiyService, $hibachi); };
        directive.$inject = [
            'partialsPath',
            'utilityService',
            '$hibachi'
        ];
        return directive;
    };
    return SWActionCaller;
}());
exports.SWActionCaller = SWActionCaller;


/***/ }),
/* 765 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWActionCallerDropdownController = /** @class */ (function () {
    function SWActionCallerDropdownController() {
        this.title = this.title || '';
        this.icon = this.icon || 'plus';
        this.type = this.type || 'button';
        this.dropdownClass = this.dropdownClass || '';
        this.dropdownId = this.dropdownId || '';
        this.buttonClass = this.buttonClass || 'btn-primary';
    }
    return SWActionCallerDropdownController;
}());
exports.SWActionCallerDropdownController = SWActionCallerDropdownController;
var SWActionCallerDropdown = /** @class */ (function () {
    function SWActionCallerDropdown(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = true;
        this.bindToController = {
            title: "@",
            icon: "@",
            type: "=",
            dropdownClass: "@",
            dropdownId: "@",
            buttonClass: "@"
        };
        this.controller = SWActionCallerDropdownController;
        this.controllerAs = "swActionCallerDropdown";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'actioncallerdropdown.html';
    }
    SWActionCallerDropdown.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWActionCallerDropdown(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWActionCallerDropdown;
}());
exports.SWActionCallerDropdown = SWActionCallerDropdown;


/***/ }),
/* 766 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWClickOutside = /** @class */ (function () {
    //@ngInject
    function SWClickOutside($document, $timeout, utilityService) {
        var _this = this;
        this.$document = $document;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.restrict = 'A';
        this.scope = {
            swClickOutside: '&'
        };
        this.link = function (scope, elem, attr) {
            _this.$document.on('click', function (e) {
                if (!e || !e.target)
                    return;
                //check if our element already hidden
                if (angular.element(elem).hasClass("ng-hide")) {
                    return;
                }
                if (e.target !== elem && elem && elem[0] && !_this.utilityService.isDescendantElement(elem[0], e.target)) {
                    _this.$timeout(function () {
                        scope.swClickOutside();
                    });
                }
            });
        };
        this.$document = $document;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
    }
    SWClickOutside.Factory = function () {
        var directive = function ($document, $timeout, utilityService) { return new SWClickOutside($document, $timeout, utilityService); };
        directive.$inject = [
            '$document', '$timeout', 'utilityService'
        ];
        return directive;
    };
    return SWClickOutside;
}());
exports.SWClickOutside = SWClickOutside;


/***/ }),
/* 767 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionColumnController = /** @class */ (function () {
    function SWCollectionColumnController() {
    }
    return SWCollectionColumnController;
}());
exports.SWCollectionColumnController = SWCollectionColumnController;
var SWCollectionColumn = /** @class */ (function () {
    //@ngInject
    function SWCollectionColumn(scopeService, utilityService) {
        var _this = this;
        this.scopeService = scopeService;
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            fallbackPropertyIdentifiers: "@?",
            isVisible: "=?",
            isSearchable: "=?",
            isDeletable: "=?",
            isExportable: "=?",
            isKeywordColumn: "=?",
            isOnlyKeywordColumn: "=?",
            tdclass: "@?",
            hidden: "=?"
        };
        this.controller = SWCollectionColumn;
        this.controllerAs = "swCollectionColumn";
        this.template = "";
        this.link = function (scope, element, attrs) {
            if (angular.isUndefined(scope.swCollectionColumn.isKeywordColumn)) {
                scope.swCollectionColumn.isKeywordColumn = false;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isOnlyKeywordColumn)) {
                scope.swCollectionColumn.isOnlyKeywordColumn = scope.swCollectionColumn.isKeywordColumn;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isVisible)) {
                scope.swCollectionColumn.isVisible = true;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isSearchable)) {
                scope.swCollectionColumn.isSearchable = false;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isDeletable)) {
                scope.swCollectionColumn.isDeletable = false;
            }
            if (angular.isUndefined(scope.swCollectionColumn.isExportable)) {
                scope.swCollectionColumn.isExportable = true;
            }
            var column = {
                propertyIdentifier: scope.swCollectionColumn.propertyIdentifier,
                fallbackPropertyIdentifiers: scope.swCollectionColumn.fallbackPropertyIdentifiers,
                isVisible: scope.swCollectionColumn.isVisible,
                isSearchable: scope.swCollectionColumn.isSearchable,
                isDeletable: scope.swCollectionColumn.isDeletable,
                isExportable: scope.swCollectionColumn.isExportable,
                hidden: scope.swCollectionColumn.hidden,
                tdclass: scope.swCollectionColumn.tdclass,
                isKeywordColumn: scope.swCollectionColumn.isKeywordColumn,
                isOnlyKeywordColumn: scope.swCollectionColumn.isOnlyKeywordColumn
            };
            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
            if (angular.isDefined(currentScope.swCollectionConfig)) {
                //push directly here because we've already built the column object
                currentScope.swCollectionConfig.columns.push(column);
                currentScope.swCollectionConfig.columnsDeferred.resolve();
            }
            else {
                throw ("Could not find swCollectionConfig in the parent scope from swcollectioncolumn");
            }
        };
    }
    SWCollectionColumn.Factory = function () {
        var directive = function (scopeService, utilityService) { return new SWCollectionColumn(scopeService, utilityService); };
        directive.$inject = [
            'scopeService',
            'utilityService'
        ];
        return directive;
    };
    return SWCollectionColumn;
}());
exports.SWCollectionColumn = SWCollectionColumn;


/***/ }),
/* 768 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionConfigController = /** @class */ (function () {
    //@ngInject
    function SWCollectionConfigController($transclude, $q, collectionConfigService) {
        this.$transclude = $transclude;
        this.$q = $q;
        this.collectionConfigService = collectionConfigService;
        this.filters = [];
        this.columns = [];
        this.orderBys = [];
        this.keywordColumns = [];
        this.columnsDeferred = this.$q.defer();
        this.columnsPromise = this.columnsDeferred.promise;
        this.filtersDeferred = this.$q.defer();
        this.filtersPromise = this.filtersDeferred.promise;
        this.orderBysDeferred = this.$q.defer();
        this.orderBysPromise = this.columnsDeferred.promise;
    }
    return SWCollectionConfigController;
}());
exports.SWCollectionConfigController = SWCollectionConfigController;
var SWCollectionConfig = /** @class */ (function () {
    // @ngInject
    function SWCollectionConfig(collectionConfigService, listingService, scopeService, $q) {
        var _this = this;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.scopeService = scopeService;
        this.$q = $q;
        this.restrict = 'EA';
        this.scope = true;
        this.transclude = {
            columns: "?swCollectionColumns",
            filters: "?swCollectionFilters",
            orderBys: "?swCollectionOrderBys"
        };
        this.bindToController = {
            allRecords: "=?",
            collectionConfigProperty: "@?",
            distinct: "=?",
            entityName: "@",
            filterFlag: "=?",
            inListingDisplay: "=?",
            multiCollectionConfigProperty: "@?",
            pageShow: "@?",
            parentDirectiveControllerAsName: "@?",
            parentDeferredProperty: "@?"
        };
        this.controller = SWCollectionConfigController;
        this.controllerAs = "swCollectionConfig";
        this.template = " \n        <div ng-transclude=\"columns\"></div>\n        <div ng-transclude=\"filters\"></div>\n        <div ng-transclude=\"orderBys\"></div>\n    ";
        this.link = function (scope, element, attrs) {
            //some automatic configuration for listing display
            if (angular.isUndefined(scope.swCollectionConfig.inListingDisplay)) {
                scope.swCollectionConfig.inListingDisplay = false;
            }
            if (scope.swCollectionConfig.inListingDisplay) {
                scope.swCollectionConfig.parentDirectiveControllerAsName = "swListingDisplay";
                scope.swCollectionConfig.parentDeferredProperty = "singleCollectionDeferred";
            }
            if (angular.isUndefined(scope.swCollectionConfig.entityName)) {
                throw ("You must provide an entityname to swCollectionConfig");
            }
            if (angular.isUndefined(scope.swCollectionConfig.parentDirectiveControllerAsName) && !scope.swCollectionConfig.inListingDisplay) {
                throw ("You must provide the parent directives Controller-As Name to swCollectionConfig");
            }
            if (angular.isUndefined(scope.swCollectionConfig.collectionConfigProperty)) {
                scope.swCollectionConfig.collectionConfigProperty = "collectionConfig";
            }
            if (angular.isUndefined(scope.swCollectionConfig.allRecords)) {
                scope.swCollectionConfig.allRecords = false;
            }
            if (angular.isUndefined(scope.swCollectionConfig.pageShow)) {
                scope.swCollectionConfig.pageShow = 10;
            }
            if (angular.isUndefined(scope.swCollectionConfig.distinct)) {
                scope.swCollectionConfig.distinct = false;
            }
            if (angular.isUndefined(scope.swCollectionConfig.filterFlag)) {
                scope.swCollectionConfig.filterFlag = true; //assume there are filters
            }
            var allCollectionConfigPromises = [];
            var currentScope = scope;
            //we want to wait for all sibling scopes before pushing the collection config
            while (angular.isDefined(currentScope)) {
                if (angular.isDefined(currentScope.swCollectionConfig)) {
                    allCollectionConfigPromises.push(currentScope.swCollectionConfig.columnsPromise);
                    if (scope.swCollectionConfig.filterFlag) {
                        allCollectionConfigPromises.push(currentScope.swCollectionConfig.filtersPromise);
                    }
                }
                currentScope = currentScope.$$nextSibling;
                if (currentScope == null) {
                    break;
                }
            }
            var newCollectionConfig = _this.collectionConfigService.newCollectionConfig(scope.swCollectionConfig.entityName);
            newCollectionConfig.setAllRecords(scope.swCollectionConfig.allRecords);
            newCollectionConfig.setDistinct(scope.swCollectionConfig.distinct);
            newCollectionConfig.setPageShow(scope.swCollectionConfig.pageShow);
            var currentScope = _this.scopeService.getRootParentScope(scope, scope.swCollectionConfig.parentDirectiveControllerAsName);
            if (currentScope[scope.swCollectionConfig.parentDirectiveControllerAsName]) {
                var parentDirective = currentScope[scope.swCollectionConfig.parentDirectiveControllerAsName];
            }
            else {
                throw ("swCollectionConfig was unable to find a parent scope");
            }
            scope.swCollectionConfig.columnsPromise.then(function () {
                angular.forEach(scope.swCollectionConfig.columns, function (column) {
                    newCollectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
                });
            });
            scope.swCollectionConfig.filtersPromise.then(function () {
                angular.forEach(scope.swCollectionConfig.filters, function (filter) {
                    newCollectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
                });
            });
            scope.swCollectionConfig.orderBysPromise.then(function () {
                angular.forEach(scope.swCollectionConfig.orderBys, function (orderBy) {
                    newCollectionConfig.addOrderBy(orderBy);
                });
            });
            _this.$q.all(allCollectionConfigPromises).then(function () {
                if (angular.isDefined(parentDirective)) {
                    if (angular.isDefined(scope.swCollectionConfig.multiCollectionConfigProperty)
                        && angular.isDefined(parentDirective[scope.swCollectionConfig.multiCollectionConfigProperty])) {
                        parentDirective[scope.swCollectionConfig.multiCollectionConfigProperty].push(newCollectionConfig);
                    }
                    else if (angular.isDefined(parentDirective[scope.swCollectionConfig.collectionConfigProperty])) {
                        parentDirective[scope.swCollectionConfig.collectionConfigProperty] = newCollectionConfig;
                    }
                    else {
                        throw ("swCollectionConfig could not locate a collection config property to bind it's collection to");
                    }
                    if (angular.isDefined(parentDirective[scope.swCollectionConfig.parentDeferredProperty])) {
                        parentDirective[scope.swCollectionConfig.parentDeferredProperty].resolve();
                    }
                    else {
                        //throw("SWCollectionConfig cannot resolve rule");
                    }
                }
            }, function (reason) {
                throw ("SWCollectionConfig is having some issues.");
            });
        };
    }
    SWCollectionConfig.Factory = function () {
        var directive = function (collectionConfigService, listingService, scopeService, $q) { return new SWCollectionConfig(collectionConfigService, listingService, scopeService, $q); };
        directive.$inject = [
            'collectionConfigService',
            'listingService',
            'scopeService',
            '$q'
        ];
        return directive;
    };
    return SWCollectionConfig;
}());
exports.SWCollectionConfig = SWCollectionConfig;


/***/ }),
/* 769 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionFilterController = /** @class */ (function () {
    function SWCollectionFilterController() {
    }
    return SWCollectionFilterController;
}());
exports.SWCollectionFilterController = SWCollectionFilterController;
var SWCollectionFilter = /** @class */ (function () {
    //@ngInject
    function SWCollectionFilter(scopeService, utilityService) {
        var _this = this;
        this.scopeService = scopeService;
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            comparisonOperator: "@?",
            comparisonValue: "@?",
            logicalOperator: "@?",
            hidden: "@?"
        };
        this.controller = SWCollectionFilterController;
        this.controllerAs = "SWCollectionFilter";
        this.template = "";
        this.link = function (scope, element, attrs) {
            var filter = {
                propertyIdentifier: scope.SWCollectionFilter.propertyIdentifier,
                comparisonOperator: scope.SWCollectionFilter.comparisonOperator,
                comparisonValue: scope.SWCollectionFilter.comparisonValue,
                logicalOperator: scope.SWCollectionFilter.logicalOperator,
                hidden: scope.SWCollectionFilter.hidden
            };
            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
            if (angular.isDefined(currentScope.swCollectionConfig)) {
                currentScope.swCollectionConfig.filters.push(filter);
                currentScope.swCollectionConfig.filtersDeferred.resolve();
            }
            else {
                throw ("could not find swCollectionConfig in the parent scope from swcollectionfilter");
            }
        };
    }
    SWCollectionFilter.Factory = function () {
        var directive = function (scopeService, utilityService) { return new SWCollectionFilter(scopeService, utilityService); };
        directive.$inject = [
            'scopeService',
            'utilityService'
        ];
        return directive;
    };
    return SWCollectionFilter;
}());
exports.SWCollectionFilter = SWCollectionFilter;


/***/ }),
/* 770 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWCollectionOrderByController = /** @class */ (function () {
    function SWCollectionOrderByController() {
    }
    return SWCollectionOrderByController;
}());
exports.SWCollectionOrderByController = SWCollectionOrderByController;
var SWCollectionOrderBy = /** @class */ (function () {
    //@ngInject
    function SWCollectionOrderBy(scopeService) {
        var _this = this;
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            orderBy: "@"
        };
        this.controller = SWCollectionOrderByController;
        this.controllerAs = "SWCollectionOrderBy";
        this.template = "";
        this.link = function (scope, element, attrs) {
            var orderBy = scope.SWCollectionOrderBy.orderBy;
            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
            if (angular.isDefined(currentScope.swCollectionConfig)) {
                currentScope.swCollectionConfig.orderBys.push(orderBy);
                currentScope.swCollectionConfig.orderBysDeferred.resolve();
            }
            else {
                throw ("could not find swCollectionConfig in the parent scope from swcollectionorderby");
            }
        };
    }
    SWCollectionOrderBy.Factory = function () {
        var directive = function (scopeService) { return new SWCollectionOrderBy(scopeService); };
        directive.$inject = [
            'scopeService'
        ];
        return directive;
    };
    return SWCollectionOrderBy;
}());
exports.SWCollectionOrderBy = SWCollectionOrderBy;


/***/ }),
/* 771 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWColumnSorter = /** @class */ (function () {
    //@ngInject
    function SWColumnSorter(observerService, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'AE',
            scope: {
                column: "=",
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "columnsorter.html",
            link: function (scope, element, attrs) {
                var orderBy = {
                    "propertyIdentifier": scope.column.propertyIdentifier,
                };
                scope.sortAsc = function () {
                    orderBy.direction = 'Asc';
                    this.observerService.notify('sortByColumn', orderBy);
                };
                scope.sortDesc = function () {
                    orderBy.direction = 'Desc';
                    observerService.notify('sortByColumn', orderBy);
                };
            }
        };
    }
    SWColumnSorter.Factory = function () {
        var directive = function (observerService, corePartialsPath, hibachiPathBuilder) { return new SWColumnSorter(observerService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'observerService',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWColumnSorter;
}());
exports.SWColumnSorter = SWColumnSorter;


/***/ }),
/* 772 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * <------------------------------------------------------------------------------------------------------------------------------------>
 *   This directive can be used to prompt the user with a confirmation dialog.
 *
 *   Example Usage 1:
 *   <a swconfirm
 *   						use-rb-key=true
 * 							yes-text="define.yes"
 * 							no-text="define.no"
 * 							confirm-text="define.confirm"
 * 							message-text="define.delete.message"
 * 							callback="someFunction()">
 *   </a>
 *   Alternate Version (No Rbkeys):
 *   <a swconfirm
 *   						use-rb-key=false
 * 							yes-text="Sure"
 * 							no-text="Not Sure!"
 * 							confirm-text="Sure"
 * 							message-text="Are you sure?"
 * 							callback="sure()">
 *   </a>
 *
 *   Note: Because the template is dynamic, the following keywords can not be used anywhere in the text for this modal.
 *
 *   [yes] [no] [confirm] [message] [callback]
 *
 *   The above words in upper-case can be used - just not those words inside square brackets.
 *   Note: Your callback function on-confirm should return true;
 *<------------------------------------------------------------------------------------------------------------------------------------->
 */
Object.defineProperty(exports, "__esModule", { value: true });
var SWConfirm = /** @class */ (function () {
    //@ngInject
    function SWConfirm($log, $modal) {
        var buildConfirmationModal = function (simple, useRbKey, confirmText, messageText, noText, yesText) {
            /* Keys */
            var confirmKey = "[confirm]";
            var messageKey = "[message]";
            var noKey = "[no]";
            var yesKey = "[yes]";
            var swRbKey = "sw-rbkey=";
            /* Values */
            var confirmVal = "<confirm>";
            var messageVal = "<message>";
            var noVal = "<no>";
            var yesVal = "<yes>";
            /* Parse Tags */
            var startTag = "\"'";
            var endTag = "'\"";
            var startParen = "'";
            var endParen = "'";
            var empty = "";
            /* Modal String */
            var parsedKeyString = "";
            var finishedString = "";
            //Figure out which version of this tag we are using
            var templateString = "<div>" +
                "<div class='modal-header'><a class='close' data-dismiss='modal' ng-click='cancel()'>×</a><h3 [confirm]><confirm></h3></div>" +
                "<div class='modal-body' [message]>" + "<message>" + "</div>" +
                "<div class='modal-footer'>" +
                "<button class='btn btn-sm btn-default btn-inverse' ng-click='cancel()' [no]><no></button>" +
                "<button class='btn btn-sm btn-default btn-primary' ng-click='fireCallback(callback)' [yes]><yes></button></div></div></div>";
            /* Use RbKeys or Not? */
            if (useRbKey === "true") {
                $log.debug("Using RbKey? " + useRbKey);
                /* Then decorate the template with the keys. */
                confirmText = swRbKey + startTag + confirmText + endTag;
                messageText = swRbKey + startTag + messageText + endTag;
                yesText = swRbKey + startTag + yesText + endTag;
                noText = swRbKey + startTag + noText + endTag;
                parsedKeyString = templateString.replace(confirmKey, confirmText)
                    .replace(messageText, messageText)
                    .replace(noKey, noText)
                    .replace(yesKey, yesText);
                $log.debug(finishedString);
                finishedString = parsedKeyString.replace(confirmKey, empty)
                    .replace(messageVal, empty)
                    .replace(noVal, empty)
                    .replace(yesVal, empty);
                $log.debug(finishedString);
                return finishedString;
            }
            else {
                /* Then decorate the template without the keys. */
                $log.debug("Using RbKey? " + useRbKey);
                parsedKeyString = templateString.replace(confirmVal, confirmText)
                    .replace(messageVal, messageText)
                    .replace(noVal, noText)
                    .replace(yesVal, yesText);
                finishedString = parsedKeyString.replace(confirmKey, empty)
                    .replace(messageKey, empty)
                    .replace(noKey, empty)
                    .replace(yesKey, empty);
                $log.debug(finishedString);
                return finishedString;
            }
        };
        return {
            restrict: 'EA',
            scope: {
                callback: "&",
                entity: "="
            },
            link: function (scope, element, attr) {
                /* Grab the template and build the modal on click */
                $log.debug("Modal is: ");
                $log.debug($modal);
                element.bind('click', function () {
                    /* Default Values */
                    var useRbKey = attr.useRbKey || "false";
                    var simple = attr.simple || false;
                    var yesText = attr.yesText || "define.yes";
                    var noText = attr.noText || "define.no";
                    var confirmText = attr.confirmText || "define.delete";
                    var messageText = attr.messageText || "define.delete_message";
                    var templateString = buildConfirmationModal(simple, useRbKey, confirmText, messageText, noText, yesText);
                    var modalInstance = $modal.open({
                        template: templateString,
                        controller: 'confirmationController',
                        scope: scope
                    });
                    /**
                        * Handles the result - callback or dismissed
                        */
                    modalInstance.result.then(function (result) {
                        $log.debug("Result:" + result);
                        return true;
                    }, function () {
                        //There was an error
                    });
                }); //<--end bind
            }
        };
    }
    SWConfirm.Factory = function () {
        var directive = function ($log, $modal) { return new SWConfirm($log, $modal); };
        directive.$inject = ['$log', '$modal'];
        return directive;
    };
    return SWConfirm;
}());
exports.SWConfirm = SWConfirm;


/***/ }),
/* 773 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDirective = /** @class */ (function () {
    //@ngInject
    function SWDirective($compile, utilityService) {
        return {
            restrict: 'AE',
            //replace:true,
            scope: {
                variables: "=",
                directiveTemplate: "="
            },
            controllerAs: "swDirective",
            link: function (scope, element, attrs) {
                var tempVariables = {};
                angular.forEach(scope.variables, function (value, key) {
                    if (key.toString().charAt(0) != "$" && value !== " ") {
                        tempVariables[utilityService.keyToAttributeString(key)] = value;
                    }
                });
                scope.variables = tempVariables;
                var template = '<' + scope.directiveTemplate + ' ';
                if (angular.isDefined(scope.variables)) {
                    angular.forEach(scope.variables, function (value, key) {
                        if (!angular.isString(value) && !angular.isNumber(value)) {
                            template += ' ' + key + '="swDirective.' + 'variables.' + key + '" ';
                        }
                        else {
                            template += ' ' + key + '="' + value + '" ';
                        }
                    });
                }
                template += '>';
                template += '</' + scope.directiveTemplate + '>';
                // Render the template.
                element.html($compile(template)(scope));
            }
        };
    }
    SWDirective.Factory = function () {
        var directive = function ($compile, utilityService) { return new SWDirective($compile, utilityService); };
        directive.$inject = [
            '$compile',
            'utilityService'
        ];
        return directive;
    };
    return SWDirective;
}());
exports.SWDirective = SWDirective;


/***/ }),
/* 774 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWDraggableController = /** @class */ (function () {
    //@ngInject
    function SWDraggableController() {
        if (angular.isUndefined(this.draggable)) {
            this.draggable = false;
        }
    }
    return SWDraggableController;
}());
var SWDraggable = /** @class */ (function () {
    //@ngInject
    function SWDraggable(corePartialsPath, utilityService, draggableService, hibachiPathBuilder) {
        var _this = this;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.draggableService = draggableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            //all fields required
            draggable: "=",
            draggableRecord: "=",
            draggableKey: "="
        };
        this.controller = SWDraggableController;
        this.controllerAs = "swDraggable";
        this.link = function (scope, element, attrs) {
            angular.element(element).attr("draggable", "true");
            var id = angular.element(element).attr("id");
            if (!id) {
                id = _this.utilityService.createID(32);
            }
            element.bind("dragstart", function (e) {
                e = e.originalEvent || e;
                e.stopPropagation();
                if (!scope.swDraggable.draggable)
                    return false;
                element.addClass("s-dragging");
                scope.swDraggable.draggableRecord.draggableStartKey = scope.swDraggable.draggableKey;
                e.dataTransfer.setData("application/json", angular.toJson(scope.swDraggable.draggableRecord));
                e.dataTransfer.effectAllowed = "move";
                e.dataTransfer.setDragImage(element[0], 0, 0);
            });
            element.bind("dragend", function (e) {
                e = e.originalEvent || e;
                e.stopPropagation();
                element.removeClass("s-dragging");
            });
            /*element.on('dragenter', function (e) {
                e = e.originalEvent || e;
                e.stopPropagation();
            });
    
            element.on('dragover', function(e) {
                e = e.originalEvent || e;
                e.stopPropagation();
            });
    
            element.on('drop', function(e) {
                e = e.originalEvent || e;
                e.stopPropagation();
            });
    
            element.on('dragleave', function(e) {
                e = e.originalEvent || e;
                e.stopPropagation();
            });*/
        };
    }
    SWDraggable.Factory = function () {
        var directive = function (corePartialsPath, utilityService, draggableService, hibachiPathBuilder) { return new SWDraggable(corePartialsPath, utilityService, draggableService, hibachiPathBuilder); };
        directive.$inject = [
            'corePartialsPath',
            'utilityService',
            'draggableService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDraggable;
}());
exports.SWDraggable = SWDraggable;


/***/ }),
/* 775 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWDraggableContainerController = /** @class */ (function () {
    //@ngInject
    function SWDraggableContainerController(draggableService) {
        this.draggableService = draggableService;
        if (angular.isUndefined(this.draggable)) {
            this.draggable = false;
        }
    }
    return SWDraggableContainerController;
}());
var SWDraggableContainer = /** @class */ (function () {
    //@ngInject
    function SWDraggableContainer($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder) {
        var _this = this;
        this.$timeout = $timeout;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.draggableService = draggableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            draggable: "=?",
            draggableRecords: "=?",
            dropEventName: "@?",
            listingId: "@?"
        };
        this.controller = SWDraggableContainerController;
        this.controllerAs = "swDraggableContainer";
        this.link = function (scope, element, attrs) {
            angular.element(element).attr("draggable", "true");
            var placeholderElement = angular.element("<tr class='s-placeholder'><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td></td></tr>"); //temporarirly hardcoding tds so it will show up
            var id = angular.element(element).attr("id");
            if (!id) {
                id = _this.utilityService.createID(32);
            }
            var listNode = element[0];
            var placeholderNode = placeholderElement[0];
            placeholderElement.remove();
            element.on('drop', function (e) {
                e = e.originalEvent || e;
                e.preventDefault();
                if (!_this.draggableService.isDropAllowed(e))
                    return true;
                var record = e.dataTransfer.getData("application/json") || e.dataTransfer.getData("text/plain");
                var parsedRecord = JSON.parse(record);
                var index = Array.prototype.indexOf.call(listNode.children, placeholderNode);
                if (index < parsedRecord.draggableStartKey) {
                    parsedRecord.draggableStartKey++;
                }
                _this.$timeout(function () {
                    scope.swDraggableContainer.draggableRecords.splice(index, 0, parsedRecord);
                    scope.swDraggableContainer.draggableRecords.splice(parsedRecord.draggableStartKey, 1);
                }, 0);
                if (angular.isDefined(scope.swDraggableContainer.listingId)) {
                    _this.listingService.notifyListingPageRecordsUpdate(scope.swDraggableContainer.listingId);
                }
                else if (angular.isDefined(scope.swDraggableContainer.dropEventName)) {
                    _this.observerService.notify(scope.swDraggableContainer.dropEventName);
                }
                placeholderElement.remove();
                e.stopPropagation();
                return false;
            });
            element.on('dragenter', function (e) {
                e = e.originalEvent || e;
                if (!_this.draggableService.isDropAllowed(e))
                    return true;
                e.preventDefault();
            });
            element.on('dragleave', function (e) {
                e = e.originalEvent || e;
                if (e.pageX != 0 || e.pageY != 0) {
                    return false;
                }
                return false;
            });
            element.on('dragover', function (e) {
                e = e.originalEvent || e;
                e.stopPropagation();
                if (placeholderNode.parentNode != listNode) {
                    element.append(placeholderElement);
                }
                if (e.target !== listNode) {
                    var listItemNode = e.target;
                    while (listItemNode.parentNode !== listNode && listItemNode.parentNode) {
                        listItemNode = listItemNode.parentNode;
                    }
                    if (listItemNode.parentNode === listNode && listItemNode !== placeholderNode) {
                        if (_this.draggableService.isMouseInFirstHalf(e, listItemNode)) {
                            listNode.insertBefore(placeholderNode, listItemNode);
                        }
                        else {
                            listNode.insertBefore(placeholderNode, listItemNode.nextSibling);
                        }
                    }
                }
                element.addClass("s-dragged-over");
                return false;
            });
        };
    }
    SWDraggableContainer.Factory = function () {
        var directive = function ($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder) { return new SWDraggableContainer($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder); };
        directive.$inject = [
            '$timeout',
            'corePartialsPath',
            'utilityService',
            'listingService',
            'observerService',
            'draggableService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDraggableContainer;
}());
exports.SWDraggableContainer = SWDraggableContainer;


/***/ }),
/* 776 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWEntityActionBarController = /** @class */ (function () {
    //@ngInject
    function SWEntityActionBarController(rbkeyService) {
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.init = function () {
            if (angular.isDefined(_this.pageTitleRbKey)) {
                _this.pageTitle = _this.rbkeyService.getRBKey(_this.pageTitleRbKey);
            }
        };
        this.init();
    }
    return SWEntityActionBarController;
}());
var SWEntityActionBar = /** @class */ (function () {
    //@ngInject
    function SWEntityActionBar(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = true;
        this.bindToController = {
            /*Core settings*/
            type: "@",
            object: "=",
            pageTitle: "@?",
            pageTitleRbKey: "@?",
            edit: "=",
            /*Action Callers (top buttons)*/
            showcancel: "=",
            showcreate: "=",
            showedit: "=",
            showdelete: "=",
            /*Basic Action Caller Overrides*/
            createModal: "=",
            createAction: "=",
            createQueryString: "=",
            backAction: "=",
            backQueryString: "=",
            cancelAction: "=",
            cancelQueryString: "=",
            deleteAction: "=",
            deleteQueryString: "=",
            /*Process Specific Values*/
            processAction: "=",
            processContext: "="
        };
        this.controller = SWEntityActionBarController;
        this.controllerAs = "swEntityActionBar";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'entityactionbar.html';
    }
    SWEntityActionBar.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWEntityActionBar(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWEntityActionBar;
}());
exports.SWEntityActionBar = SWEntityActionBar;
//	angular.module('slatwalladmin').directive('swEntityActionBar',['corePartialsPath',(corePartialsPath) => new SWEntityActionBar(corePartialsPath)]);


/***/ }),
/* 777 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWEntityActionBarButtonGroupController = /** @class */ (function () {
    function SWEntityActionBarButtonGroupController() {
    }
    return SWEntityActionBarButtonGroupController;
}());
var SWEntityActionBarButtonGroup = /** @class */ (function () {
    //@ngInject
    function SWEntityActionBarButtonGroup(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = true;
        this.bindToController = {};
        this.controller = SWEntityActionBarButtonGroupController;
        this.controllerAs = "swEntityActionBarButtonGroup";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'entityactionbarbuttongroup.html';
    }
    SWEntityActionBarButtonGroup.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWEntityActionBarButtonGroup(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath',
            'hibachiPathBuilder'];
        return directive;
    };
    return SWEntityActionBarButtonGroup;
}());
exports.SWEntityActionBarButtonGroup = SWEntityActionBarButtonGroup;


/***/ }),
/* 778 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWExpandableRecordController = /** @class */ (function () {
    //@ngInject
    function SWExpandableRecordController($timeout, $hibachi, utilityService, collectionConfigService, expandableService, listingService, observerService) {
        var _this = this;
        this.$timeout = $timeout;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.expandableService = expandableService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.childrenLoaded = false;
        this.childrenOpen = false;
        this.children = [];
        this.refreshChildren = function () {
            _this.getEntity();
        };
        this.setupChildCollectionConfig = function () {
            _this.childCollectionConfig = _this.collectionConfigService.newCollectionConfig(_this.entity.metaData.className);
            //set up parent
            var parentName = _this.entity.metaData.hb_parentPropertyName;
            var parentCFC = _this.entity.metaData[parentName].cfc;
            _this.parentIDName = _this.$hibachi.getEntityExample(parentCFC).$$getIDName();
            //set up child
            var childName = _this.entity.metaData.hb_childPropertyName;
            var childCFC = _this.entity.metaData[childName].cfc;
            var childIDName = _this.$hibachi.getEntityExample(childCFC).$$getIDName();
            _this.childCollectionConfig.clearFilterGroups();
            _this.childCollectionConfig.collection = _this.entity;
            _this.childCollectionConfig.addFilter(parentName + '.' + _this.parentIDName, _this.parentId);
            _this.childCollectionConfig.setAllRecords(true);
            angular.forEach(_this.collectionConfig.columns, function (column) {
                _this.childCollectionConfig.addColumn(column.propertyIdentifier, column.title, column);
            });
            angular.forEach(_this.collectionConfig.joins, function (join) {
                _this.childCollectionConfig.addJoin(join);
            });
            _this.childCollectionConfig.groupBys = _this.collectionConfig.groupBys;
        };
        this.getEntity = function () {
            _this.collectionPromise.then(function (data) {
                _this.collectionData = data;
                _this.collectionData.pageRecords = _this.collectionData.pageRecords || _this.collectionData.records;
                if (_this.collectionData.pageRecords.length) {
                    angular.forEach(_this.collectionData.pageRecords, function (pageRecord) {
                        _this.expandableService.addRecord(pageRecord[_this.parentIDName], true);
                        pageRecord.dataparentID = _this.recordID;
                        pageRecord.depth = _this.recordDepth || 0;
                        pageRecord.depth++;
                        //push the children into the listing display
                        _this.children.push(pageRecord);
                        _this.records.splice(_this.recordIndex + 1, 0, pageRecord);
                    });
                }
                _this.childrenLoaded = true;
            });
        };
        this.toggleChild = function () {
            _this.$timeout(function () {
                _this.childrenOpen = !_this.childrenOpen;
                _this.expandableService.updateState(_this.recordID, { isOpen: _this.childrenOpen });
                if (!_this.childrenLoaded) {
                    if (_this.childCollectionConfig == null) {
                        _this.setupChildCollectionConfig();
                    }
                    if (angular.isFunction(_this.childCollectionConfig.getEntity)) {
                        _this.collectionPromise = _this.childCollectionConfig.getEntity();
                    }
                    _this.getEntity();
                }
                angular.forEach(_this.children, function (child) {
                    child.dataIsVisible = _this.childrenOpen;
                    var entityPrimaryIDName = _this.entity.$$getIDName();
                    var idsToCheck = [];
                    idsToCheck.push(child[entityPrimaryIDName]);
                    _this.expandableService.updateState(child[entityPrimaryIDName], { isOpen: _this.childrenOpen });
                    //close all children of the child if we are closing
                    var childrenTraversed = false;
                    var recordLength = _this.records.length;
                    while (!childrenTraversed && idsToCheck.length > 0) {
                        var found = false;
                        var idToCheck = idsToCheck.pop();
                        for (var i = 0; i < recordLength; i++) {
                            var record = _this.records[i];
                            if (record['dataparentID'] == idToCheck) {
                                idsToCheck.push(record[entityPrimaryIDName]);
                                _this.expandableService.updateState(record[entityPrimaryIDName], { isOpen: _this.childrenOpen });
                                record.dataIsVisible = _this.childrenOpen;
                                found = true;
                            }
                        }
                        if (!found) {
                            childrenTraversed = true;
                        }
                    }
                });
            });
        };
        this.recordID = this.parentId; //this is what parent is initalized to in the listing display
        expandableService.addRecord(this.recordID);
        if (angular.isDefined(this.refreshChildrenEvent) && this.refreshChildrenEvent.length) {
            this.observerService.attach(this.refreshChildren, this.refreshChildrenEvent);
        }
    }
    return SWExpandableRecordController;
}());
var SWExpandableRecord = /** @class */ (function () {
    //@ngInject
    function SWExpandableRecord($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.$templateRequest = $templateRequest;
        this.$timeout = $timeout;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.expandableService = expandableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            recordValue: "=",
            link: "@",
            expandable: "=?",
            parentId: "=",
            entity: "=",
            collectionConfig: "=?",
            childCollectionConfig: "=?",
            refreshChildrenEvent: "=?",
            listingId: "@?",
            records: "=",
            pageRecord: "=",
            recordIndex: "=",
            recordDepth: "=",
            childCount: "=",
            autoOpen: "=",
            multiselectIdPaths: "=",
            expandableRules: "="
        };
        this.controller = SWExpandableRecordController;
        this.controllerAs = "swExpandableRecord";
        this.link = function (scope, element, attrs) {
            if (scope.swExpandableRecord.expandable && scope.swExpandableRecord.childCount) {
                if (scope.swExpandableRecord.recordValue) {
                    var id = scope.swExpandableRecord.records[scope.swExpandableRecord.recordIndex][scope.swExpandableRecord.entity.$$getIDName()];
                    if (scope.swExpandableRecord.multiselectIdPaths && scope.swExpandableRecord.multiselectIdPaths.length) {
                        var multiselectIdPathsArray = scope.swExpandableRecord.multiselectIdPaths.split(',');
                        if (!scope.swExpandableRecord.childrenLoaded) {
                            angular.forEach(multiselectIdPathsArray, function (multiselectIdPath) {
                                var position = _this.utilityService.listFind(multiselectIdPath, id, '/');
                                var multiSelectIDs = multiselectIdPath.split('/');
                                var multiselectPathLength = multiSelectIDs.length;
                                if (position !== -1 && position < multiselectPathLength - 1 && !_this.expandableService.getState(id, "isOpen")) {
                                    _this.expandableService.updateState(id, { isOpen: true });
                                    scope.swExpandableRecord.toggleChild();
                                }
                            });
                        }
                    }
                }
                _this.$templateRequest(_this.hibachiPathBuilder.buildPartialsPath(_this.corePartialsPath) + "expandablerecord.html").then(function (html) {
                    var template = angular.element(html);
                    //get autoopen reference to ensure only the root is autoopenable
                    var autoOpen = angular.copy(scope.swExpandableRecord.autoOpen);
                    scope.swExpandableRecord.autoOpen = false;
                    template = _this.$compile(template)(scope);
                    element.html(template);
                    element.on('click', scope.swExpandableRecord.toggleChild);
                    if (autoOpen) {
                        scope.swExpandableRecord.toggleChild();
                    }
                });
            }
        };
        this.$compile = $compile;
        this.$templateRequest = $templateRequest;
        this.corePartialsPath = corePartialsPath;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.expandableService = expandableService;
        this.hibachiPathBuilder = hibachiPathBuilder;
    }
    SWExpandableRecord.Factory = function () {
        var directive = function ($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder) { return new SWExpandableRecord($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder); };
        directive.$inject = [
            '$compile',
            '$templateRequest',
            '$timeout',
            'corePartialsPath',
            'utilityService',
            'expandableService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWExpandableRecord;
}());
exports.SWExpandableRecord = SWExpandableRecord;


/***/ }),
/* 779 */,
/* 780 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWExportAction = /** @class */ (function () {
    //@ngInject
    function SWExportAction($log, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'exportaction.html',
            scope: {},
            link: function (scope, element, attrs) {
            }
        };
    }
    SWExportAction.Factory = function () {
        var directive = function ($log, corePartialsPath, hibachiPathBuilder) { return new SWExportAction($log, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWExportAction;
}());
exports.SWExportAction = SWExportAction;


/***/ }),
/* 781 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var md5 = __webpack_require__(50);
var SWGravatarController = /** @class */ (function () {
    // @ngInject
    function SWGravatarController() {
        this.gravatarURL = "http://www.gravatar.com/avatar/" + md5(this.emailAddress.toLowerCase().trim());
    }
    return SWGravatarController;
}());
exports.SWGravatarController = SWGravatarController;
var SWGravatar = /** @class */ (function () {
    function SWGravatar() {
        this.template = "<img src='{{swGravatar.gravatarURL}}' />";
        this.transclude = false;
        this.restrict = "E";
        this.scope = {};
        this.bindToController = {
            emailAddress: "@"
        };
        this.controller = SWGravatarController;
        this.controllerAs = "swGravatar";
        this.link = function (scope, element, attrs, controller, transclude) {
        };
    }
    SWGravatar.Factory = function () {
        var directive = function () { return new SWGravatar(); };
        directive.$inject = [];
        return directive;
    };
    SWGravatar.$inject = ["$hibachi", "$timeout", "collectionConfigService", "corePartialsPath",
        'hibachiPathBuilder'];
    return SWGravatar;
}());
exports.SWGravatar = SWGravatar;


/***/ }),
/* 782 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWHref = /** @class */ (function () {
    function SWHref() {
        return {
            restrict: 'A',
            scope: {
                swHref: "@"
            },
            link: function (scope, element, attrs) {
                /*convert link to use hashbang*/
                var hrefValue = attrs.swHref;
                hrefValue = '?ng#!' + hrefValue;
                element.attr('href', hrefValue);
            }
        };
    }
    SWHref.Factory = function () {
        var directive = function () { return new SWHref(); };
        directive.$inject = [];
        return directive;
    };
    return SWHref;
}());
exports.SWHref = SWHref;


/***/ }),
/* 783 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWLoading = /** @class */ (function () {
    function SWLoading($log, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            transclude: true,
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'loading.html',
            scope: {
                swLoading: '='
            },
            link: function (scope, attrs, element) {
            }
        };
    }
    SWLoading.Factory = function () {
        var directive = function ($log, corePartialsPath, hibachiPathBuilder) { return new SWLoading($log, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWLoading;
}());
exports.SWLoading = SWLoading;


/***/ }),
/* 784 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWLoginController = /** @class */ (function () {
    //@ngInject
    function SWLoginController($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiScope) {
        var _this = this;
        this.$route = $route;
        this.$log = $log;
        this.$window = $window;
        this.corePartialsPath = corePartialsPath;
        this.$hibachi = $hibachi;
        this.dialogService = dialogService;
        this.hibachiScope = hibachiScope;
        this.login = function () {
            var loginPromise = _this.$hibachi.login(_this.account_login.data.emailAddress, _this.account_login.data.password);
            loginPromise.then(function (loginResponse) {
                if (loginResponse && loginResponse.data && loginResponse.data.token) {
                    _this.$window.localStorage.setItem('token', loginResponse.data.token);
                    _this.hibachiScope.loginDisplayed = false;
                    _this.$route.reload();
                    _this.dialogService.removeCurrentDialog();
                }
            }, function (rejection) {
            });
        };
        this.$hibachi = $hibachi;
        this.$window = $window;
        this.$route = $route;
        this.hibachiScope = hibachiScope;
        this.account_login = $hibachi.newEntity('Account_Login');
    }
    return SWLoginController;
}());
var SWLogin = /** @class */ (function () {
    //@ngInject
    function SWLogin($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder) {
        this.$route = $route;
        this.$log = $log;
        this.$window = $window;
        this.corePartialsPath = corePartialsPath;
        this.$hibachi = $hibachi;
        this.dialogService = dialogService;
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {};
        this.controller = SWLoginController;
        this.controllerAs = "SwLogin";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.corePartialsPath + '/login.html');
    }
    SWLogin.Factory = function () {
        var directive = function ($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder) { return new SWLogin($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder); };
        directive.$inject = [
            '$route',
            '$log',
            '$window',
            'corePartialsPath',
            '$hibachi',
            'dialogService',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWLogin;
}());
exports.SWLogin = SWLogin;


/***/ }),
/* 785 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWModalLauncherController = /** @class */ (function () {
    // @ngInject
    function SWModalLauncherController() {
        var _this = this;
        this.hasSaveAction = false;
        this.hasCancelAction = false;
        this.hasDeleteAction = false;
        this.launchModal = function () {
            //activate the necessary modal
            _this.showModal = true;
        };
        this.saveCallback = function () {
            //the passed save action must return a promise
            if (_this.hasSaveAction) {
                var savePromise = _this.saveAction()();
            }
            savePromise.then(function (response) {
                //if the action was sucessful
                $("#" + _this.modalName).modal('hide');
            }, function (reason) {
                //if the action failed
            });
        };
        this.deleteCallback = function () {
            //the passed save action must return a promise
            if (_this.hasDeleteAction) {
                var deletePromise = _this.saveAction()();
            }
            deletePromise.then(function (response) {
                //if the action was sucessful
                $("#" + _this.modalName).modal('hide');
            }, function (reason) {
                //if the action failed
            });
        };
        this.cancelCallback = function () {
            if (_this.hasCancelAction) {
                _this.cancelAction()();
            }
        };
        if (angular.isUndefined(this.showModal)) {
            this.showModal = false;
        }
        if (angular.isUndefined(this.saveActionText)) {
            this.saveActionText = "Save";
        }
        if (angular.isUndefined(this.cancelActionText)) {
            this.cancelActionText = "Cancel";
        }
    }
    return SWModalLauncherController;
}());
exports.SWModalLauncherController = SWModalLauncherController;
var SWModalLauncher = /** @class */ (function () {
    // @ngInject
    function SWModalLauncher($compile, corePartialsPath, hibachiPathBuilder) {
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.transclude = {
            button: '?swModalButton',
            staticButton: '?swModalStaticButton',
            content: '?swModalContent'
        };
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            showModal: "=?",
            modalName: "@",
            title: "@",
            saveAction: "&?",
            deleteAction: "&?",
            cancelAction: "&?",
            saveActionText: "@?",
            cancelActionText: "@?"
        };
        this.controller = SWModalLauncherController;
        this.controllerAs = "swModalLauncher";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    if (angular.isDefined(attrs.saveAction)) {
                        $scope.swModalLauncher.hasSaveAction = true;
                    }
                    if (angular.isDefined(attrs.deleteAction)) {
                        $scope.swModalLauncher.hasDeleteAction = true;
                    }
                    if (angular.isDefined(attrs.cancelAction)) {
                        $scope.swModalLauncher.hasCancelAction = true;
                    }
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "modallauncher.html";
    }
    SWModalLauncher.Factory = function () {
        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWModalLauncher($compile, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWModalLauncher;
}());
exports.SWModalLauncher = SWModalLauncher;


/***/ }),
/* 786 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWModalWindowController = /** @class */ (function () {
    // @ngInject
    function SWModalWindowController() {
        if (angular.isUndefined(this.modalName)) {
            console.warn("You did not pass a modal title to SWModalWindowController");
            this.modalName = "";
        }
    }
    return SWModalWindowController;
}());
exports.SWModalWindowController = SWModalWindowController;
var SWModalWindow = /** @class */ (function () {
    // @ngInject
    function SWModalWindow($compile, corePartialsPath, hibachiPathBuilder) {
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.transclude = {
            modalBody: "?swModalBody"
        };
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            modalName: "@",
            title: "@",
            hasSaveAction: "=?",
            saveAction: "&?",
            hasDeleteAction: "=?",
            deleteAction: "&?",
            hasCancelAction: "=?",
            cancelAction: "&?",
            saveActionText: "@",
            cancelActionText: "@"
        };
        this.controller = SWModalWindowController;
        this.controllerAs = "swModalWindow";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "modalwindow.html";
    }
    SWModalWindow.Factory = function () {
        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWModalWindow($compile, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWModalWindow;
}());
exports.SWModalWindow = SWModalWindow;


/***/ }),
/* 787 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWNumbersOnly = /** @class */ (function () {
    function SWNumbersOnly() {
        this.restrict = "A";
        this.require = "ngModel";
        this.scope = {
            ngModel: '=',
            minNumber: '=?',
            maxNumber: '=?'
        };
        this.link = function ($scope, element, attrs, modelCtrl) {
            modelCtrl.$parsers.unshift(function (inputValue) {
                var modelValue = modelCtrl.$modelValue;
                if (inputValue != "" && !isNaN(Number(inputValue))) {
                    if (angular.isDefined($scope.minNumber)) {
                        if (Number(inputValue) >= $scope.minNumber || !angular.isDefined($scope.minNumber)) {
                            modelCtrl.$setValidity("minNumber", true);
                        }
                        else if (angular.isDefined($scope.minNumber)) {
                            modelCtrl.$setValidity("minNumber", false);
                        }
                    }
                    if (angular.isDefined($scope.maxNumber)) {
                        if (Number(inputValue) <= $scope.maxNumber || !angular.isDefined($scope.maxNumber)) {
                            modelCtrl.$setValidity("maxNumber", true);
                        }
                        else if (angular.isDefined($scope.maxNumber)) {
                            modelCtrl.$setValidity("maxNumber", false);
                        }
                    }
                    if (modelCtrl.$valid) {
                        modelValue = Number(inputValue);
                    }
                    else {
                        modelValue = $scope.minNumber;
                    }
                }
                return modelValue;
            });
        };
    }
    SWNumbersOnly.Factory = function () {
        var directive = function () { return new SWNumbersOnly(); };
        directive.$inject = [];
        return directive;
    };
    return SWNumbersOnly;
}());
exports.SWNumbersOnly = SWNumbersOnly;


/***/ }),
/* 788 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWOptions = /** @class */ (function () {
    function SWOptions($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'AE',
            scope: {
                objectName: '@'
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "options.html",
            link: function (scope, element, attrs) {
                scope.swOptions = {};
                scope.swOptions.objectName = scope.objectName;
                //sets up drop down options via collections
                scope.getOptions = function () {
                    scope.swOptions.object = $hibachi['new' + scope.swOptions.objectName]();
                    var columnsConfig = [
                        {
                            "propertyIdentifier": scope.swOptions.objectName.charAt(0).toLowerCase() + scope.swOptions.objectName.slice(1) + 'Name'
                        },
                        {
                            "propertyIdentifier": scope.swOptions.object.$$getIDName()
                        }
                    ];
                    $hibachi.getEntity(scope.swOptions.objectName, { allRecords: true, columnsConfig: angular.toJson(columnsConfig) })
                        .then(function (value) {
                        scope.swOptions.options = value.records;
                        observerService.notify('optionsLoaded');
                    });
                };
                scope.getOptions();
                var selectOption = function (option) {
                    if (option) {
                        scope.swOptions.selectOption(option);
                    }
                    else {
                        scope.swOptions.selectOption(scope.swOptions.options[0]);
                    }
                };
                observerService.attach(selectOption, 'selectOption', 'selectOption');
                //use by ng-change to record changes
                scope.swOptions.selectOption = function (selectedOption) {
                    scope.swOptions.selectedOption = selectedOption;
                    observerService.notify('optionsChanged', selectedOption);
                };
            }
        };
    }
    SWOptions.Factory = function () {
        var directive = function ($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder) { return new SWOptions($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'observerService',
            'corePartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWOptions;
}());
exports.SWOptions = SWOptions;


/***/ }),
/* 789 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWOrderByControlsController = /** @class */ (function () {
    // @ngInject
    function SWOrderByControlsController(listingService, observerService, utilityService) {
        var _this = this;
        this.listingService = listingService;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.sortCode = "ASC";
        this.updateSortOrderProperty = function () {
            if (angular.isDefined(_this.selectedPropertyIdentifier)) {
                _this.propertyNotChosen = false;
            }
            else {
                _this.propertyNotChosen = true;
            }
            _this.updateOrderBy();
        };
        this.updateOrderBy = function () {
            if (angular.isDefined(_this.selectedPropertyIdentifier) && _this.selectedPropertyIdentifier.length > 0) {
                var propertyIdentifier = _this.selectedPropertyIdentifier;
            }
            switch (_this.sortCode) {
                case "ASC":
                    _this.disabled = false;
                    if (propertyIdentifier != null) {
                        if (angular.isDefined(_this.collectionConfig)) {
                            _this.collectionConfig.toggleOrderBy(propertyIdentifier, true); //single column mode true
                        }
                        if (_this.inListingDisplay) {
                            _this.listingService.setSingleColumnOrderBy(_this.listingId, propertyIdentifier, "ASC");
                        }
                    }
                    if (_this.inListingDisplay)
                        _this.listingService.setManualSort(_this.listingId, false);
                    break;
                case "DESC":
                    _this.disabled = false;
                    if (propertyIdentifier != null) {
                        if (angular.isDefined(_this.collectionConfig)) {
                            _this.collectionConfig.toggleOrderBy(propertyIdentifier, true); //single column mode true
                        }
                        if (_this.inListingDisplay) {
                            _this.listingService.setSingleColumnOrderBy(_this.listingId, propertyIdentifier, "DESC");
                        }
                        if (_this.inListingDisplay)
                            _this.listingService.setManualSort(_this.listingId, false);
                    }
                    break;
                case "MANUAL":
                    //flip listing
                    _this.disabled = true;
                    if (_this.inListingDisplay) {
                        _this.listingService.setManualSort(_this.listingId, true);
                    }
                    break;
            }
        };
        this.sortAscending = function () {
            _this.sortCode = 'ASC';
            _this.updateOrderBy();
        };
        this.sortDescending = function () {
            _this.sortCode = 'DESC';
            _this.updateOrderBy();
        };
        this.manualSort = function () {
            _this.sortCode = 'MANUAL';
            _this.updateOrderBy();
        };
        if (angular.isUndefined(this.edit)) {
            this.edit = true;
        }
        if (angular.isDefined(this.collectionConfig)) {
            this.columns = this.collectionConfig.columns;
        }
        if (angular.isDefined(this.initialSortDefaultDirection) && this.initialSortDefaultDirection.length > 0) {
            this.sortCode = this.initialSortDefaultDirection;
        }
        if (angular.isDefined(this.initialSortProperty) && this.initialSortProperty.length > 0) {
            this.selectedPropertyIdentifier = this.initialSortProperty;
        }
        this.id = this.utilityService.createID(32);
    }
    return SWOrderByControlsController;
}());
exports.SWOrderByControlsController = SWOrderByControlsController;
var SWOrderByControls = /** @class */ (function () {
    // @ngInject
    function SWOrderByControls($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.listingService = listingService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            collectionConfig: "=?",
            selectedOrderByColumn: "=?",
            inListingDisplay: "=?",
            toggleCollectionConfig: "=?",
            initialSortProperty: "@?",
            initialSortDefaultDirection: "@?",
            sortPropertyFieldName: "@?",
            sortDefaultDirectionFieldName: "@?",
            edit: "=?"
        };
        this.controller = SWOrderByControlsController;
        this.controllerAs = "swOrderByControls";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    if ($scope.swOrderByControls.inListingDisplay &&
                        _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
                        var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
                        $scope.swOrderByControls.listingId = listingDisplayScope.tableID;
                        _this.listingService.attachToListingInitiated($scope.swOrderByControls.listingId, $scope.swOrderByControls.updateOrderBy);
                        if ($scope.swOrderByControls.collectionConfig == null &&
                            listingDisplayScope.collectionConfig != null) {
                            $scope.swOrderByControls.collectionConfig = listingDisplayScope.collectionConfig;
                        }
                    }
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "orderbycontrols.html";
    }
    SWOrderByControls.Factory = function () {
        var directive = function ($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder) { return new SWOrderByControls($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "scopeService", "listingService", "corePartialsPath",
            "hibachiPathBuilder"];
        return directive;
    };
    return SWOrderByControls;
}());
exports.SWOrderByControls = SWOrderByControls;


/***/ }),
/* 790 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWProcessCallerController = /** @class */ (function () {
    //@ngInject
    function SWProcessCallerController(rbkeyService, $templateRequest, $compile, corePartialsPath, $scope, $element, $transclude, utilityService, hibachiPathBuilder) {
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.$scope = $scope;
        this.$element = $element;
        this.$transclude = $transclude;
        this.$templateRequest = $templateRequest;
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.type = this.type || 'link';
        this.queryString = this.queryString || '';
        this.$scope = $scope;
        this.$element = $element;
        this.$transclude = this.$transclude;
        this.$templateRequest(hibachiPathBuilder.buildPartialsPath(this.corePartialsPath) + "processcaller.html").then(function (html) {
            var template = angular.element(html);
            _this.$element.parent().append(template);
            $compile(template)(_this.$scope);
        });
        if (angular.isDefined(this.titleRbKey)) {
            this.title = this.rbkeyService.getRBKey(this.titleRbKey);
        }
        if (angular.isUndefined(this.text)) {
            this.text = this.title;
        }
    }
    return SWProcessCallerController;
}());
var SWProcessCaller = /** @class */ (function () {
    function SWProcessCaller(corePartialsPath, utilityService) {
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            action: "@",
            entity: "@",
            processContext: "@",
            hideDisabled: "=",
            type: "@",
            queryString: "@",
            text: "@",
            title: "@?",
            titleRbKey: "@?",
            'class': "@",
            icon: "=",
            iconOnly: "=",
            submit: "=",
            confirm: "=",
            disabled: "=",
            disabledText: "@",
            modal: "="
        };
        this.controller = SWProcessCallerController;
        this.controllerAs = "swProcessCaller";
        this.link = function (scope, element, attrs) {
        };
        this.corePartialsPath = corePartialsPath;
        this.utilityService = utilityService;
    }
    SWProcessCaller.Factory = function () {
        var directive = function (corePartialsPath, utilityService) { return new SWProcessCaller(corePartialsPath, utilityService); };
        directive.$inject = [
            'corePartialsPath', 'utilityService'
        ];
        return directive;
    };
    SWProcessCaller.$inject = ['corePartialsPath', 'utilityService'];
    return SWProcessCaller;
}());
exports.SWProcessCaller = SWProcessCaller;


/***/ }),
/* 791 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWRbKey = /** @class */ (function () {
    function SWRbKey($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService) {
        return {
            restrict: 'A',
            scope: {
                swRbkey: "="
            },
            link: function (scope, element, attrs) {
                var rbKeyValue = scope.swRbkey;
                var bindRBKey = function () {
                    if (angular.isDefined(rbKeyValue) && angular.isString(rbKeyValue)) {
                        element.text(rbkeyService.getRBKey(rbKeyValue));
                    }
                };
                bindRBKey();
            }
        };
    }
    SWRbKey.Factory = function () {
        var directive = function ($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService) { return new SWRbKey($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService); };
        directive.$inject = [
            '$hibachi',
            'observerService',
            'utilityService',
            '$rootScope',
            '$log',
            'rbkeyService'
        ];
        return directive;
    };
    return SWRbKey;
}());
exports.SWRbKey = SWRbKey;


/***/ }),
/* 792 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWScrollTrigger = /** @class */ (function () {
    function SWScrollTrigger($rootScope, $window, $timeout) {
        return {
            link: function (scope, elem, attrs) {
                var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
                $window = angular.element($window);
                scrollDistance = 0;
                if (attrs.infiniteScrollDistance != null) {
                    scope
                        .$watch(attrs.infiniteScrollDistance, function (value) {
                        return scrollDistance = parseInt(value, 10);
                    });
                }
                scrollEnabled = true;
                checkWhenEnabled = false;
                if (attrs.infiniteScrollDisabled != null) {
                    scope
                        .$watch(attrs.infiniteScrollDisabled, function (value) {
                        scrollEnabled = !value;
                        if (scrollEnabled
                            && checkWhenEnabled) {
                            checkWhenEnabled = false;
                            return handler();
                        }
                    });
                }
                handler = function () {
                    var elementBottom, remaining, shouldScroll, windowBottom;
                    windowBottom = $window.height()
                        + $window.scrollTop();
                    elementBottom = elem.offset().top
                        + elem.height();
                    remaining = elementBottom
                        - windowBottom;
                    shouldScroll = remaining <= $window
                        .height()
                        * scrollDistance;
                    if (shouldScroll && scrollEnabled) {
                        if ($rootScope.$$phase) {
                            return scope
                                .$eval(attrs.infiniteScroll);
                        }
                        else {
                            return scope
                                .$apply(attrs.infiniteScroll);
                        }
                    }
                    else if (shouldScroll) {
                        return checkWhenEnabled = true;
                    }
                };
                $window.on('scroll', handler);
                scope.$on('$destroy', function () {
                    return $window.off('scroll', handler);
                });
                return $timeout((function () {
                    if (attrs.infiniteScrollImmediateCheck) {
                        if (scope
                            .$eval(attrs.infiniteScrollImmediateCheck)) {
                            return handler();
                        }
                    }
                    else {
                        return handler();
                    }
                }), 0);
            }
        };
    }
    SWScrollTrigger.Factory = function () {
        var directive = function ($rootScope, $window, $timeout) { return new SWScrollTrigger($rootScope, $window, $timeout); };
        directive.$inject = [
            '$rootScope',
            '$window',
            '$timeout'
        ];
        return directive;
    };
    return SWScrollTrigger;
}());
exports.SWScrollTrigger = SWScrollTrigger;


/***/ }),
/* 793 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSelectionController = /** @class */ (function () {
    //@ngInject
    function SWSelectionController(selectionService, observerService) {
        var _this = this;
        this.selectionService = selectionService;
        this.observerService = observerService;
        this.updateSelectValue = function (res) {
            if (_this.isRadio && (res.action == 'check')) {
                _this.toggleValue == _this.selection;
            }
            else if (res.action == 'clear') {
                _this.toggleValue = false;
            }
            else if (res.action == 'selectAll') {
                _this.toggleValue = true;
            }
            else if (res.selection == _this.selection) {
                _this.toggleValue = (res.action == 'check');
            }
        };
        this.toggleSelection = function (toggleValue, selectionid, selection) {
            if (_this.isRadio) {
                _this.selectionService.radioSelection(selectionid, selection);
                _this.toggleValue = selection;
            }
            else {
                if (toggleValue) {
                    _this.selectionService.addSelection(selectionid, selection);
                }
                else {
                    _this.selectionService.removeSelection(selectionid, selection);
                }
            }
        };
        if (angular.isUndefined(this.name)) {
            this.name = 'selection';
        }
        if (selectionService.isAllSelected(this.selectionid)) {
            this.toggleValue = !selectionService.hasSelection(this.selectionid, this.selection);
        }
        else {
            this.toggleValue = selectionService.hasSelection(this.selectionid, this.selection);
        }
        if (this.isRadio && this.toggleValue) {
            this.toggleValue = this.selection;
        }
        //attach observer so we know when a selection occurs
        observerService.attach(this.updateSelectValue, 'swSelectionToggleSelection' + this.selectionid);
        if (angular.isDefined(this.initSelected) && this.initSelected) {
            this.toggleValue = this.selection;
            this.toggleSelection(this.toggleValue, this.selectionid, this.selection);
        }
    }
    return SWSelectionController;
}());
var SWSelection = /** @class */ (function () {
    function SWSelection(collectionPartialsPath, hibachiPathBuilder) {
        this.collectionPartialsPath = collectionPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            selection: "=",
            selectionid: "@",
            id: "=",
            isRadio: "=",
            name: "@",
            disabled: "=",
            initSelected: "="
        };
        this.controller = SWSelectionController;
        this.controllerAs = 'swSelection';
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "selection.html";
    }
    SWSelection.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWSelection(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWSelection.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
    return SWSelection;
}());
exports.SWSelection = SWSelection;


/***/ }),
/* 794 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSortable = /** @class */ (function () {
    function SWSortable(expression, compiledElement) {
        return function (linkElement) {
            var scope = this;
            linkElement.sortable({
                placeholder: "placeholder",
                opacity: 0.8,
                axis: "y",
                update: function (event, ui) {
                    // get model
                    var model = scope.$apply(expression);
                    // remember its length
                    var modelLength = model.length;
                    // rember html nodes
                    var items = [];
                    // loop through items in new order
                    linkElement.children().each(function (index) {
                        var item = $(this);
                        // get old item index
                        var oldIndex = parseInt(item.attr("sw:sortable-index"), 10);
                        // add item to the end of model
                        model.push(model[oldIndex]);
                        if (item.attr("sw:sortable-index")) {
                            // items in original order to restore dom
                            items[oldIndex] = item;
                            // and remove item from dom
                            item.detach();
                        }
                    });
                    model.splice(0, modelLength);
                    // restore original dom order, so angular does not get confused
                    linkElement.append.apply(linkElement, items);
                    // notify angular of the change
                    scope.$digest();
                }
            });
        };
    }
    SWSortable.Factory = function () {
        var directive = function (expression, compiledElement) { return new SWSortable(expression, compiledElement); };
        directive.$inject = ['expression', 'compiledElement'];
        return directive;
    };
    return SWSortable;
}());
exports.SWSortable = SWSortable;


/***/ }),
/* 795 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWTabContentController = /** @class */ (function () {
    // @ngInject
    function SWTabContentController($scope, $q, $transclude, $hibachi, $timeout, utilityService, rbkeyService, collectionConfigService) {
        this.$scope = $scope;
        this.$q = $q;
        this.$transclude = $transclude;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.collectionConfigService = collectionConfigService;
        if (angular.isUndefined(this.active)) {
            this.active = false;
        }
        if (angular.isUndefined(this.loaded)) {
            this.loaded = false;
        }
        if (angular.isUndefined(this.hide)) {
            this.hide = false;
        }
        if (angular.isUndefined(this.id)) {
            this.id = utilityService.createID(16);
        }
        if (angular.isUndefined(this.name)) {
            this.name = this.id;
        }
        //make a tab service? 
    }
    return SWTabContentController;
}());
exports.SWTabContentController = SWTabContentController;
var SWTabContent = /** @class */ (function () {
    // @ngInject
    function SWTabContent($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.observerService = observerService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            active: "=?",
            loaded: "=?",
            hide: "=?",
            name: "@?"
        };
        this.controller = SWTabContentController;
        this.controllerAs = "swTabContent";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                },
                post: function ($scope, element, attrs) {
                    var parentDirective = _this.scopeService.getRootParentScope($scope, "swTabGroup")["swTabGroup"];
                    if (angular.isDefined(parentDirective) && angular.isDefined(parentDirective.tabs)) {
                        parentDirective.tabs.push($scope.swTabContent);
                        _this.observerService.notify(parentDirective.initTabEventName);
                    }
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tabcontent.html";
    }
    SWTabContent.Factory = function () {
        var directive = function ($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder) { return new SWTabContent($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile",
            "scopeService",
            "observerService",
            "corePartialsPath",
            "hibachiPathBuilder"];
        return directive;
    };
    return SWTabContent;
}());
exports.SWTabContent = SWTabContent;


/***/ }),
/* 796 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWTabGroupController = /** @class */ (function () {
    // @ngInject
    function SWTabGroupController(utilityService, rbkeyService, observerService) {
        var _this = this;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.observerService = observerService;
        this.hasActiveTab = false;
        this.initTab = function () {
            for (var i = 0; i < _this.tabs.length; i++) {
                if (!_this.tabs[i].hide) {
                    _this.tabs[i].active = true;
                    _this.tabs[i].loaded = true;
                    break;
                }
            }
        };
        this.switchTab = function (tabToActivate) {
            _this.observerService.notify(_this.switchTabGroupEventName);
            for (var i = 0; i < _this.tabs.length; i++) {
                _this.tabs[i].active = false;
            }
            tabToActivate.active = true;
            tabToActivate.loaded = true;
        };
        this.getTabByName = function (name) {
            for (var i = 0; i < _this.tabs.length; i++) {
                if (_this.tabs[i].name == name) {
                    return _this.tabs[i];
                }
            }
        };
        if (angular.isUndefined(this.tabs)) {
            this.tabs = [];
        }
        this.tabGroupID = "TG" + this.utilityService.createID(30);
        this.switchTabGroupEventName = "SwitchTabGroup" + this.tabGroupID;
        this.initTabEventName = "InitTabForTabGroup" + this.tabGroupID;
        this.observerService.attach(this.initTab, this.initTabEventName);
        if (angular.isUndefined(this.switchTabEventName)) {
            this.switchTabEventName = this.tabGroupID + "SwitchTabTo";
        }
        this.observerService.attach(this.switchTab, this.switchTabEventName);
    }
    return SWTabGroupController;
}());
exports.SWTabGroupController = SWTabGroupController;
var SWTabGroup = /** @class */ (function () {
    // @ngInject
    function SWTabGroup($compile, corePartialsPath, hibachiPathBuilder) {
        this.$compile = $compile;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            switchTabEventName: "@?"
        };
        this.controller = SWTabGroupController;
        this.controllerAs = "swTabGroup";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) { },
                post: function ($scope, element, attrs) { }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tabgroup.html";
    }
    SWTabGroup.Factory = function () {
        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWTabGroup($compile, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWTabGroup;
}());
exports.SWTabGroup = SWTabGroup;


/***/ }),
/* 797 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWTooltipController = /** @class */ (function () {
    // @ngInject
    function SWTooltipController(rbkeyService) {
        var _this = this;
        this.rbkeyService = rbkeyService;
        this.showTooltip = false;
        this.show = function () {
            _this.showTooltip = true;
        };
        this.hide = function () {
            _this.showTooltip = false;
        };
        if (angular.isDefined(this.rbKey)) {
            this.text = rbkeyService.getRBKey(this.rbKey);
        }
        if (angular.isUndefined(this.position)) {
            this.position = "top";
        }
    }
    return SWTooltipController;
}());
exports.SWTooltipController = SWTooltipController;
var SWTooltip = /** @class */ (function () {
    // @ngInject
    function SWTooltip($document, corePartialsPath, hibachiPathBuilder) {
        this.$document = $document;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            rbKey: "@?",
            text: "@?",
            position: "@?",
            showTooltip: "=?"
        };
        this.controller = SWTooltipController;
        this.controllerAs = "swTooltip";
        this.link = function (scope, element, attrs, controller, transclude) {
            var tooltip = element.find(".tooltip");
            var elementPosition = element.position();
            var tooltipStyle = tooltip[0].style;
            if (attrs && attrs.position) {
                switch (attrs.position.toLowerCase()) {
                    case 'top':
                        tooltipStyle.top = "0px";
                        tooltipStyle.left = "0px";
                        break;
                    case 'bottom':
                        //where the element is rendered to begin with
                        break;
                    case 'left':
                        tooltipStyle.top = (elementPosition.top + element[0].offsetHeight - 5) + "px";
                        tooltipStyle.left = (-1 * (elementPosition.left + element[0].offsetLeft - 5)) + "px";
                        element.find(".tooltip-inner")[0].style.maxWidth = "none";
                        break;
                    default:
                        //right is the default
                        tooltipStyle.top = (elementPosition.top + element[0].offsetHeight - 5) + "px";
                        tooltipStyle.left = (elementPosition.left + element[0].offsetWidth - 5) + "px";
                }
            }
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tooltip.html";
    }
    SWTooltip.Factory = function () {
        var directive = function ($document, corePartialsPath, hibachiPathBuilder) { return new SWTooltip($document, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$document", "corePartialsPath", "hibachiPathBuilder"];
        return directive;
    };
    return SWTooltip;
}());
exports.SWTooltip = SWTooltip;


/***/ }),
/* 798 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadInputFieldController = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadInputFieldController($scope, $transclude, collectionConfigService, $rootScope, observerService) {
        var _this = this;
        this.$scope = $scope;
        this.$transclude = $transclude;
        this.collectionConfigService = collectionConfigService;
        this.$rootScope = $rootScope;
        this.observerService = observerService;
        this.columns = [];
        this.filters = [];
        this.addFunction = function (value) {
            _this.modelValue = value[_this.propertyToSave];
            if (_this.action) {
                var data = {};
                if (_this.variables) {
                    data = _this.variables();
                }
                data['value'] = _this.modelValue;
                _this.$root.slatwall.doAction(_this.action, data);
            }
        };
        this.$root = $rootScope;
        if (angular.isUndefined(this.typeaheadCollectionConfig)) {
            if (angular.isDefined(this.entityName)) {
                this.typeaheadCollectionConfig = collectionConfigService.newCollectionConfig(this.entityName);
            }
            else {
                throw ("You did not pass the correct collection config data to swTypeaheadInputField");
            }
        }
        if (angular.isUndefined(this.validateRequired)) {
            this.validateRequired = false;
        }
        //get the collection config
        this.$transclude($scope, function () { });
        if (angular.isUndefined(this.propertyToSave)) {
            throw ("You must select a property to save for the input field directive");
        }
        if (angular.isDefined(this.propertiesToLoad)) {
            this.typeaheadCollectionConfig.addDisplayProperty(this.propertiesToLoad);
        }
        angular.forEach(this.columns, function (column) {
            _this.typeaheadCollectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
        });
        angular.forEach(this.filters, function (filter) {
            _this.typeaheadCollectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
        });
        if (angular.isDefined(this.initialEntityId) && this.initialEntityId.length) {
            this.modelValue = this.initialEntityId;
        }
        if (this.eventListeners) {
            for (var key in this.eventListeners) {
                observerService.attach(this.eventListeners[key], key);
            }
        }
    }
    return SWTypeaheadInputFieldController;
}());
exports.SWTypeaheadInputFieldController = SWTypeaheadInputFieldController;
var SWTypeaheadInputField = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadInputField(corePartialsPath, hibachiPathBuilder) {
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            fieldName: "@",
            entityName: "@",
            typeaheadCollectionConfig: "=?",
            propertiesToLoad: "@?",
            placeholderRbKey: "@?",
            propertyToShow: "@",
            propertyToSave: "@",
            initialEntityId: "@",
            allRecords: "=?",
            validateRequired: "=?",
            maxRecords: "@",
            action: "@",
            variables: '&?',
            eventListeners: '=?',
            placeholderText: '@?',
            searchEndpoint: '@?',
            titleText: '@?'
        };
        this.controller = SWTypeaheadInputFieldController;
        this.controllerAs = "swTypeaheadInputField";
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadinputfield.html";
    }
    SWTypeaheadInputField.Factory = function () {
        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadInputField(corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["corePartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadInputField;
}());
exports.SWTypeaheadInputField = SWTypeaheadInputField;


/***/ }),
/* 799 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadMultiselectController = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadMultiselectController($scope, $transclude, $hibachi, listingService, typeaheadService, utilityService, collectionConfigService) {
        var _this = this;
        this.$scope = $scope;
        this.$transclude = $transclude;
        this.$hibachi = $hibachi;
        this.listingService = listingService;
        this.typeaheadService = typeaheadService;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.addSelection = function (item) {
            _this.typeaheadService.addSelection(_this.typeaheadDataKey, item);
            if (_this.inListingDisplay) {
                _this.listingService.insertListingPageRecord(_this.listingId, item);
            }
        };
        this.removeSelection = function (index) {
            var itemRemoved = _this.typeaheadService.removeSelection(_this.typeaheadDataKey, index);
            if (_this.inListingDisplay) {
                _this.listingService.removeListingPageRecord(_this.listingId, itemRemoved);
            }
        };
        this.getSelections = function () {
            return _this.typeaheadService.getData(_this.typeaheadDataKey);
        };
        this.updateSelectionList = function () {
            _this.selectionList = _this.typeaheadService.updateSelectionList(_this.typeaheadDataKey);
        };
        if (angular.isUndefined(this.typeaheadDataKey)) {
            this.typeaheadDataKey = this.utilityService.createID(32);
        }
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
        if (angular.isUndefined(this.showSelections)) {
            this.showSelections = false;
        }
        if (angular.isUndefined(this.multiselectMode)) {
            this.multiselectMode = true;
        }
        if (angular.isUndefined(this.hasAddButtonFunction)) {
            this.hasAddButtonFunction = false;
        }
        if (angular.isUndefined(this.hasViewFunction)) {
            this.hasViewFunction = false;
        }
        if (angular.isDefined(this.selectedCollectionConfig)) {
            this.typeaheadService.initializeSelections(this.typeaheadDataKey, this.selectedCollectionConfig);
        }
        this.typeaheadService.attachTypeaheadSelectionUpdateEvent(this.typeaheadDataKey, this.updateSelectionList);
    }
    return SWTypeaheadMultiselectController;
}());
exports.SWTypeaheadMultiselectController = SWTypeaheadMultiselectController;
var SWTypeaheadMultiselect = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadMultiselect($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.scopeService = scopeService;
        this.typeaheadService = typeaheadService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            placeholderRbKey: "@",
            collectionConfig: "=?",
            selectedCollectionConfig: "=?",
            typeaheadDataKey: "@?",
            multiselectModeOn: "=?multiselectMode",
            showSelections: "=?",
            dataTarget: "=?",
            dataTargetIndex: "=?",
            addButtonFunction: "&?",
            viewFunction: "&?",
            inListingDisplay: "=?",
            listingId: "@?",
            propertyToCompare: "@?",
            fallbackPropertiesToCompare: "@?",
            rightContentPropertyIdentifier: "@?",
            selectionFieldName: "@?",
            disabled: "=?"
        };
        this.controller = SWTypeaheadMultiselectController;
        this.controllerAs = "swTypeaheadMultiselect";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    //because callbacks are defined even when they're not passed in, this needs to be communicated to the typeahead
                    if (angular.isDefined(attrs.addButtonFunction)) {
                        $scope.swTypeaheadMultiselect.hasAddButtonFunction = true;
                    }
                    else {
                        $scope.swTypeaheadMultiselect.hasAddButtonFunction = false;
                    }
                    if (angular.isDefined(attrs.viewFunction)) {
                        $scope.swTypeaheadMultiselect.viewFunction = true;
                    }
                    else {
                        $scope.swTypeaheadMultiselect.viewFunction = false;
                    }
                    if (angular.isUndefined($scope.swTypeaheadMultiselect.inListingDisplay)) {
                        $scope.swTypeaheadMultiselect.inListingDisplay = false;
                    }
                    if ($scope.swTypeaheadMultiselect.inListingDisplay && _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
                        var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
                        $scope.swTypeaheadMultiselect.listingId = listingDisplayScope.tableID;
                        listingDisplayScope.typeaheadDataKey = $scope.swTypeaheadMultiselect.typeaheadDataKey;
                    }
                },
                post: function ($scope, element, attrs) {
                    var target = element.find(".s-selected-list");
                    var selectedItemTemplate = angular.element('<div class="alert s-selected-item" ng-repeat="item in swTypeaheadMultiselect.getSelections() track by $index">');
                    var closeButton = angular.element('<button ng-click="swTypeaheadMultiselect.removeSelection($index)" type="button" class="close"><span>×</span><span class="sr-only" sw-rbkey="&apos;define.close&apos;"></span></button>');
                    selectedItemTemplate.append(closeButton);
                    selectedItemTemplate.append(_this.typeaheadService.stripTranscludedContent(transclude($scope, function () { })));
                    target.append(_this.$compile(selectedItemTemplate)($scope));
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadmultiselect.html";
    }
    SWTypeaheadMultiselect.Factory = function () {
        var directive = function ($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadMultiselect($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "scopeService", "typeaheadService", "corePartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadMultiselect;
}());
exports.SWTypeaheadMultiselect = SWTypeaheadMultiselect;


/***/ }),
/* 800 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadRemoveSelectionController = /** @class */ (function () {
    function SWTypeaheadRemoveSelectionController($scope, listingService, scopeService, typeaheadService, utilityService) {
        var _this = this;
        this.$scope = $scope;
        this.listingService = listingService;
        this.scopeService = scopeService;
        this.typeaheadService = typeaheadService;
        this.utilityService = utilityService;
        this.updatePageRecord = function () {
            if (_this.scopeService.hasParentScope(_this.$scope, "pageRecord")) {
                var pageRecordScope = _this.scopeService.getRootParentScope(_this.$scope, "pageRecord")["pageRecord"];
                _this.pageRecord = pageRecordScope;
            }
        };
        this.removeSelection = function () {
            if (!_this.disabled) {
                _this.typeaheadService.removeSelection(_this.typeaheadDataKey, undefined, _this.pageRecord);
                _this.listingService.removeListingPageRecord(_this.listingId, _this.pageRecord);
            }
        };
        this.listingService.attachToListingPageRecordsUpdate(this.listingId, this.updatePageRecord, this.utilityService.createID(32));
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
    }
    return SWTypeaheadRemoveSelectionController;
}());
exports.SWTypeaheadRemoveSelectionController = SWTypeaheadRemoveSelectionController;
var SWTypeaheadRemoveSelection = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadRemoveSelection(scopeService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.scopeService = scopeService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            typeaheadDataKey: "@?",
            index: "@?",
            disabled: "=?"
        };
        this.controller = SWTypeaheadRemoveSelectionController;
        this.controllerAs = "swTypeaheadRemoveSelection";
        this.link = function (scope, element, attrs) {
            if (_this.scopeService.hasParentScope(scope, "swListingDisplay")) {
                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay")["swListingDisplay"];
                scope.swTypeaheadRemoveSelection.typeaheadDataKey = listingDisplayScope.typeaheadDataKey;
                scope.swTypeaheadRemoveSelection.listingId = listingDisplayScope.tableID;
            }
            if (_this.scopeService.hasParentScope(scope, "pageRecord")) {
                var pageRecordScope = _this.scopeService.getRootParentScope(scope, "pageRecord")["pageRecord"];
                scope.swTypeaheadRemoveSelection.pageRecord = pageRecordScope;
            }
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadremoveselection.html";
    }
    SWTypeaheadRemoveSelection.Factory = function () {
        var directive = function (scopeService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadRemoveSelection(scopeService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["scopeService", "corePartialsPath", 'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadRemoveSelection;
}());
exports.SWTypeaheadRemoveSelection = SWTypeaheadRemoveSelection;


/***/ }),
/* 801 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadSearchController = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadSearchController($scope, $q, $transclude, $hibachi, $timeout, utilityService, observerService, rbkeyService, collectionConfigService, typeaheadService, $http, requestService) {
        var _this = this;
        this.$scope = $scope;
        this.$q = $q;
        this.$transclude = $transclude;
        this.$hibachi = $hibachi;
        this.$timeout = $timeout;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.rbkeyService = rbkeyService;
        this.collectionConfigService = collectionConfigService;
        this.typeaheadService = typeaheadService;
        this.$http = $http;
        this.requestService = requestService;
        this.results = [];
        this.columns = [];
        this.filters = [];
        this.searchableColumns = [];
        this.initialSearchableColumnsState = [];
        this.searchableColumnSelection = 'All';
        this.fallbackPropertyArray = [];
        this.clearSearch = function () {
            _this.searchText = "";
            _this.hideSearch = true;
            if (angular.isDefined(_this.addFunction)) {
                _this.addFunction()(undefined);
            }
        };
        this.toggleDropdown = function () {
            _this.dropdownOpen = !_this.dropdownOpen;
        };
        this.toggleOptions = function () {
            if (_this.hideSearch && (!_this.searchText || !_this.searchText.length)) {
                _this.search(_this.searchText);
            }
            _this.hideSearch = !_this.hideSearch;
        };
        this.search = function (search) {
            if (_this._timeoutPromise) {
                _this.$timeout.cancel(_this._timeoutPromise);
            }
            _this.collectionConfig.setKeywords(search);
            if (angular.isDefined(_this.filterGroupsConfig)) {
                //allows for filtering on search text
                var filterConfig = _this.filterGroupsConfig.replace("replaceWithSearchString", search);
                filterConfig = filterConfig.trim();
                _this.collectionConfig.loadFilterGroups(JSON.parse(filterConfig));
            }
            _this._timeoutPromise = _this.$timeout(function () {
                var promise;
                if (_this.searchEndpoint) {
                    promise = _this.requestService.newPublicRequest('/' + _this.searchEndpoint, {
                        search: search,
                        options: _this.collectionConfig.getOptions(),
                        entityName: _this.collectionConfig.baseEntityName
                    }, 'post', {
                        'Content-Type': 'application/json'
                    }).promise;
                }
                else {
                    promise = _this.collectionConfig.getEntity();
                }
                promise.then(function (response) {
                    _this.results = response.pageRecords || response.records;
                    _this.updateSelections();
                }).finally(function () {
                    _this.resultsDeferred.resolve();
                    _this.hideSearch = (_this.results.length == 0);
                });
            }, 500);
        };
        this.updateSelections = function () {
            _this.typeaheadService.updateSelections(_this.typeaheadDataKey);
        };
        this.updateSearchableProperties = function (column) {
            if (angular.isString(column) && column == 'all') {
                angular.copy(_this.initialSearchableColumnsState, _this.searchableColumns); //need to insure that these changes are actually on the collectionconfig
                _this.searchableColumnSelection = 'All';
            }
            else {
                angular.forEach(_this.searchableColumns, function (value, key) {
                    value.isSearchable = false;
                });
                column.isSearchable = true;
                _this.searchableColumnSelection = column.title;
            }
            //probably need to refetch the collection
        };
        this.addOrRemoveItem = function (item) {
            var remove = item.selected || false;
            if (!_this.hideSearch && !_this.multiselectMode) {
                _this.hideSearch = true;
            }
            if (!_this.multiselectMode) {
                if (angular.isDefined(_this.propertyToShow)) {
                    _this.searchText = item[_this.propertyToShow];
                }
                else if (angular.isDefined(_this.columns) &&
                    _this.columns.length &&
                    angular.isDefined(_this.columns[0].propertyIdentifier)) {
                    _this.searchText = item[_this.columns[0].propertyIdentifier];
                }
            }
            if (!remove && angular.isDefined(_this.addFunction)) {
                _this.addFunction()(item);
            }
            if (remove && angular.isDefined(_this.removeFunction)) {
                _this.removeFunction()(item.selectedIndex);
                item.selected = false;
                item.selectedIndex = undefined;
            }
            _this.updateSelections();
        };
        this.addButtonItem = function () {
            if (!_this.hideSearch) {
                _this.hideSearch = true;
            }
            if (angular.isDefined(_this.addButtonFunction)) {
                _this.addButtonFunction()(_this.searchText);
            }
        };
        this.viewButtonClick = function () {
            _this.viewFunction()();
        };
        this.closeThis = function (clickOutsideArgs) {
            _this.hideSearch = true;
            if (angular.isDefined(clickOutsideArgs)) {
                for (var callBackAction in clickOutsideArgs.callBackActions) {
                    clickOutsideArgs.callBackActions[callBackAction]();
                }
            }
        };
        this.getSelections = function () {
            return _this.typeaheadService.getData(_this.typeaheadDataKey);
        };
        this.dropdownOpen = false;
        this.requestService = requestService;
        //populates all needed variables
        this.$transclude($scope, function () { });
        this.resultsDeferred = $q.defer();
        this.resultsPromise = this.resultsDeferred.promise;
        if (angular.isUndefined(this.typeaheadDataKey)) {
            this.typeaheadDataKey = this.utilityService.createID(32);
        }
        if (angular.isUndefined(this.disabled)) {
            this.disabled = false;
        }
        if (angular.isUndefined(this.multiselectMode)) {
            this.multiselectMode = false;
        }
        if (angular.isUndefined(this.searchText) || this.searchText == null) {
            this.searchText = "";
        }
        else {
            this.search(this.searchText);
        }
        if (angular.isUndefined(this.validateRequired)) {
            this.validateRequired = false;
        }
        if (angular.isUndefined(this.hideSearch)) {
            this.hideSearch = true;
        }
        if (angular.isUndefined(this.collectionConfig)) {
            if (angular.isDefined(this.entity)) {
                this.collectionConfig = collectionConfigService.newCollectionConfig(this.entity);
            }
            else {
                throw ("You did not pass the correct collection config data to swTypeaheadSearch");
            }
        }
        if (angular.isDefined(this.collectionConfig)) {
            this.primaryIDPropertyName = $hibachi.getPrimaryIDPropertyNameByEntityName(this.collectionConfig.baseEntityName);
        }
        if (angular.isDefined(this.fallbackPropertiesToCompare) &&
            this.fallbackPropertiesToCompare.length) {
            this.fallbackPropertyArray = this.fallbackPropertiesToCompare.split(",");
        }
        if (angular.isDefined(this.placeholderRbKey)) {
            this.placeholderText = this.rbkeyService.getRBKey(this.placeholderRbKey);
        }
        else if (angular.isUndefined(this.placeholderText)) {
            this.placeholderText = this.rbkeyService.getRBKey('define.search');
        }
        //init timeoutPromise for link
        this._timeoutPromise = this.$timeout(function () { }, 500);
        if (angular.isDefined(this.propertiesToDisplay)) {
            this.collectionConfig.addDisplayProperty(this.propertiesToDisplay.split(","));
        }
        angular.forEach(this.columns, function (column) {
            _this.collectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
        });
        angular.forEach(this.filters, function (filter) {
            _this.collectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
        });
        if (angular.isUndefined(this.allRecords)) {
            this.allRecords = this.collectionConfig.allRecords;
        }
        this.collectionConfig.setAllRecords(this.allRecords);
        if (angular.isDefined(this.maxRecords)) {
            this.collectionConfig.setPageShow(this.maxRecords);
        }
        if (angular.isDefined(this.initialEntityId) && this.initialEntityId.length) {
            this.initialEntityCollectionConfig = collectionConfigService.newCollectionConfig(this.collectionConfig.baseEntityName);
            this.initialEntityCollectionConfig.loadColumns(this.collectionConfig.columns);
            var primaryIDProperty = $hibachi.getPrimaryIDPropertyNameByEntityName(this.initialEntityCollectionConfig.baseEntityName);
            this.initialEntityCollectionConfig.addFilter(primaryIDProperty, this.initialEntityId, "=");
            var promise = this.initialEntityCollectionConfig.getEntity();
            promise.then(function (response) {
                _this.results = response.pageRecords;
                if (_this.results.length) {
                    _this.addOrRemoveItem(_this.results[0]);
                }
            });
        }
        angular.forEach(this.collectionConfig.columns, function (value, key) {
            if (value.isSearchable) {
                _this.searchableColumns.push(value);
            }
        });
        //need to insure that these changes are actually on the collectionconfig
        angular.copy(this.searchableColumns, this.initialSearchableColumnsState);
        this.typeaheadService.setTypeaheadState(this.typeaheadDataKey, this);
        this.observerService.attach(this.clearSearch, this.typeaheadDataKey + 'clearSearch');
        this.$http = $http;
    }
    return SWTypeaheadSearchController;
}());
exports.SWTypeaheadSearchController = SWTypeaheadSearchController;
var SWTypeaheadSearch = /** @class */ (function () {
    // @ngInject
    function SWTypeaheadSearch($compile, typeaheadService, corePartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.$compile = $compile;
        this.typeaheadService = typeaheadService;
        this.corePartialsPath = corePartialsPath;
        this.transclude = true;
        this.restrict = "EA";
        this.scope = {};
        this.bindToController = {
            collectionConfig: "=?",
            entity: "@?",
            properties: "@?",
            propertiesToDisplay: "@?",
            filterGroupsConfig: "@?",
            placeholderText: "@?",
            placeholderRbKey: "@?",
            propertyToCompare: "@?",
            fallbackPropertiesToCompare: "@?",
            searchText: "=?",
            results: "=?",
            addFunction: "&?",
            removeFunction: "&?",
            addButtonFunction: "&?",
            viewFunction: "&?",
            showAddButton: "=?",
            showViewButton: "=?",
            validateRequired: "=?",
            clickOutsideArguments: "=?",
            propertyToShow: "=?",
            hideSearch: "=?",
            allRecords: "=?",
            maxRecords: "=?",
            disabled: "=?",
            initialEntityId: "@",
            multiselectMode: "=?",
            typeaheadDataKey: "@?",
            rightContentPropertyIdentifier: "@?",
            searchEndpoint: "@?",
            titleText: '@?'
        };
        this.controller = SWTypeaheadSearchController;
        this.controllerAs = "swTypeaheadSearch";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function ($scope, element, attrs) {
                    if (angular.isDefined(attrs.addButtonFunction) && angular.isUndefined(attrs.showAddButton)) {
                        $scope.swTypeaheadSearch.showAddButton = true;
                    }
                    else if (angular.isUndefined(attrs.showAddButton)) {
                        $scope.swTypeaheadSearch.showAddButton = false;
                    }
                    if (angular.isDefined(attrs.viewFunction) && angular.isUndefined(attrs.showViewButton)) {
                        $scope.swTypeaheadSearch.showViewButton = true;
                    }
                    else if (angular.isUndefined(attrs.showViewButton)) {
                        $scope.swTypeaheadSearch.showViewButton = false;
                    }
                },
                post: function ($scope, element, attrs) {
                    var target = element.find(".dropdown-menu");
                    var listItemTemplateString = "\n                    <li ng-repeat=\"item in swTypeaheadSearch.results\" ng-class=\"{'s-selected':item.selected}\"></li>\n                ";
                    var anchorTemplateString = "\n                    <a ng-click=\"swTypeaheadSearch.addOrRemoveItem(item)\">\n                ";
                    if (angular.isDefined($scope.swTypeaheadSearch.rightContentPropertyIdentifier)) {
                        var rightContentTemplateString = "<span class=\"s-right-content\" ng-bind=\"item[swTypeaheadSearch.rightContentPropertyIdentifier]\"></span></a>";
                    }
                    else {
                        var rightContentTemplateString = "</a>";
                    }
                    anchorTemplateString = anchorTemplateString + rightContentTemplateString;
                    var listItemTemplate = angular.element(listItemTemplateString);
                    var anchorTemplate = angular.element(anchorTemplateString);
                    anchorTemplate.append(_this.typeaheadService.stripTranscludedContent(transclude($scope, function () { })));
                    listItemTemplate.append(anchorTemplate);
                    $scope.swTypeaheadSearch.resultsPromise.then(function () {
                        target.append(_this.$compile(listItemTemplate)($scope));
                    });
                }
            };
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadsearch.html";
    }
    SWTypeaheadSearch.Factory = function () {
        var directive = function ($compile, typeaheadService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadSearch($compile, typeaheadService, corePartialsPath, hibachiPathBuilder); };
        directive.$inject = ["$compile", "typeaheadService", "corePartialsPath",
            'hibachiPathBuilder'];
        return directive;
    };
    return SWTypeaheadSearch;
}());
exports.SWTypeaheadSearch = SWTypeaheadSearch;


/***/ }),
/* 802 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTypeaheadSearchLineItemController = /** @class */ (function () {
    function SWTypeaheadSearchLineItemController() {
    }
    return SWTypeaheadSearchLineItemController;
}());
exports.SWTypeaheadSearchLineItemController = SWTypeaheadSearchLineItemController;
var SWTypeaheadSearchLineItem = /** @class */ (function () {
    //@ngInject
    function SWTypeaheadSearchLineItem($compile) {
        this.$compile = $compile;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            isSearchable: "@?",
        };
        this.controller = SWTypeaheadSearchLineItemController;
        this.controllerAs = "swTypeaheadSearchLineItem";
        this.compile = function (element, attrs, transclude) {
            return {
                pre: function (scope, element, attrs) {
                    var innerHTML = element[0].innerHTML;
                    element[0].innerHTML = '';
                    var span = '<span ng-if="item.' + scope.swTypeaheadSearchLineItem.propertyIdentifier + '.toString().trim().length">' + innerHTML + '</span><span ng-bind="item.' + scope.swTypeaheadSearchLineItem.propertyIdentifier + '"></span>';
                    element.append(span);
                },
                post: function (scope, element, attrs) { }
            };
        };
    }
    SWTypeaheadSearchLineItem.Factory = function () {
        var directive = function ($compile) { return new SWTypeaheadSearchLineItem($compile); };
        directive.$inject = [
            '$compile'
        ];
        return directive;
    };
    return SWTypeaheadSearchLineItem;
}());
exports.SWTypeaheadSearchLineItem = SWTypeaheadSearchLineItem;


/***/ }),
/* 803 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var GlobalSearchController = /** @class */ (function () {
    //@ngInject
    function GlobalSearchController($scope, $log, $window, $timeout, $hibachi, rbkeyService) {
        $scope.keywords = '';
        $scope.searchResultsOpen = false;
        $scope.sidebarClass = 'sidebar';
        $scope.loading = false; //Set loading wheel to false
        $scope.resultsFound = true; // Set the results Found to true because no search has been done yet
        $scope.searchResults = {
            'product': {
                'title': 'Products',
                'resultNameFilter': function (data) {
                    return data['productName'];
                },
                'results': [],
                'id': function (data) {
                    return data['productID'];
                }
            },
            'order': {
                'title': rbkeyService.getRBKey('entity.order_plural'),
                'resultNameFilter': function (data) {
                    return data['orderNumber'];
                },
                'results': [],
                'id': function (data) {
                    return data['orderID'];
                }
            },
            'brand': {
                'title': rbkeyService.getRBKey('entity.brand_plural'),
                'resultNameFilter': function (data) {
                    return data['brandName'];
                },
                'results': [],
                'id': function (data) {
                    return data['brandID'];
                }
            },
            'account': {
                'title': 'Accounts',
                'resultNameFilter': function (data) {
                    return data['firstName'] + ' ' + data['lastName'];
                },
                'results': [],
                'id': function (data) {
                    return data['accountID'];
                }
            },
            'vendor': {
                'title': 'Vendors',
                'resultNameFilter': function (data) {
                    return data['vendorName'];
                },
                'results': [],
                'id': function (data) {
                    return data['vendorID'];
                }
            }
        };
        var _timeoutPromise;
        var _loadingCount = 0;
        $scope.updateSearchResults = function () {
            $scope.loading = true;
            $scope.showResults();
            if (_timeoutPromise) {
                $timeout.cancel(_timeoutPromise);
            }
            _timeoutPromise = $timeout(function () {
                // If no keywords, then set everything back to their defaults
                if ($scope.keywords === '') {
                    $scope.hideResults();
                    // Otherwise performe the search
                }
                else {
                    $scope.showResults();
                    // Set the loadingCount to the number of AJAX Calls we are about to do
                    _loadingCount = Object.keys($scope.searchResults).length;
                    for (var entityName in $scope.searchResults) {
                        (function (entityName) {
                            var searchPromise = $hibachi.getEntity(entityName, { keywords: $scope.keywords, pageShow: 4, deferkey: 'global-search-' + entityName });
                            searchPromise.then(function (data) {
                                // Clear out the old Results
                                $scope.searchResults[entityName].results = [];
                                $scope.searchResults[entityName].title = rbkeyService.getRBKey('entity.' + entityName.toLowerCase() + '_plural');
                                // push in the new results
                                for (var i in data.pageRecords) {
                                    $scope.searchResults[entityName].results.push({
                                        'name': $scope.searchResults[entityName].resultNameFilter(data.pageRecords[i]),
                                        'link': $hibachi.buildUrl('entity.detail' + entityName) + '&' + entityName + 'ID=' + $scope.searchResults[entityName].id(data.pageRecords[i]),
                                    });
                                }
                                // Increment Down The Loading Count
                                _loadingCount--;
                                // If the loadingCount drops to 0, then we can update scope
                                if (_loadingCount == 0) {
                                    $scope.loading = false;
                                    var _foundResults = false;
                                    for (var _thisEntityName in $scope.searchResults) {
                                        if ($scope.searchResults[_thisEntityName].results.length) {
                                            _foundResults = true;
                                            break;
                                        }
                                    }
                                    $scope.resultsFound = _foundResults;
                                }
                            });
                        })(entityName);
                    }
                }
            }, 500);
        };
        $scope.showResults = function () {
            $scope.searchResultsOpen = true;
            $scope.sidebarClass = 'sidebar s-search-width';
            $window.onclick = function (event) {
                var _targetClassOfSearch = event.target.parentElement.offsetParent.classList.contains('sidebar');
                if (!_targetClassOfSearch) {
                    $scope.hideResults();
                    $scope.$apply();
                }
            };
        };
        $scope.hideResults = function () {
            $scope.searchResultsOpen = false;
            $scope.sidebarClass = 'sidebar';
            $scope.search.$setPristine();
            $scope.keywords = "";
            $window.onclick = null;
            $scope.loading = false;
            $scope.resultsFound = true;
            for (var entityName in $scope.searchResults) {
                $scope.searchResults[entityName].results = [];
            }
        };
    }
    return GlobalSearchController;
}());
exports.GlobalSearchController = GlobalSearchController;


/***/ }),
/* 804 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var DateFilter = /** @class */ (function () {
    function DateFilter() {
    }
    //@ngInject
    DateFilter.Factory = function ($filter) {
        return function (date, dateString) {
            if (date.trim().length === 0) {
                return '';
            }
            return $filter('date')(new Date(date), dateString);
        };
    };
    return DateFilter;
}());
exports.DateFilter = DateFilter;


/***/ }),
/* 805 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var EntityRBKey = /** @class */ (function () {
    function EntityRBKey() {
    }
    //@ngInject
    EntityRBKey.Factory = function (rbkeyService) {
        return function (text) {
            if (angular.isDefined(text) && angular.isString(text)) {
                text = text.replace('_', '').toLowerCase();
                text = rbkeyService.getRBKey('entity.' + text);
            }
            return text;
        };
    };
    return EntityRBKey;
}());
exports.EntityRBKey = EntityRBKey;


/***/ }),
/* 806 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var PercentageFilter = /** @class */ (function () {
    function PercentageFilter() {
    }
    PercentageFilter.Factory = function () {
        return function (input, decimals, suffix) {
            decimals = angular.isNumber(decimals) ? decimals : 3;
            suffix = suffix || '%';
            if (isNaN(input)) {
                return '';
            }
            return Math.round(input * Math.pow(10, decimals + 2)) / Math.pow(10, decimals) + suffix;
        };
    };
    return PercentageFilter;
}());
exports.PercentageFilter = PercentageFilter;


/***/ }),
/* 807 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWTrim = /** @class */ (function () {
    function SWTrim() {
    }
    //@ngInject
    SWTrim.Factory = function (rbkeyService) {
        return function (text, max, wordwise, tail) {
            if (wordwise === void 0) { wordwise = true; }
            if (tail === void 0) { tail = "..."; }
            if (angular.isDefined(text) && angular.isString(text)) {
                if (!text)
                    return '';
                max = parseInt(max, 10);
                if (!max)
                    return text;
                if (text.length <= max)
                    return text;
                text = text.substr(0, max);
                if (wordwise) {
                    var lastSpace = text.lastIndexOf(' ');
                    if (lastSpace != -1) {
                        text = text.substr(0, lastSpace);
                    }
                }
                return text + tail;
            }
            return text;
        };
    };
    return SWTrim;
}());
exports.SWTrim = SWTrim;


/***/ }),
/* 808 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWUnique = /** @class */ (function () {
    function SWUnique() {
    }
    //@ngInject
    SWUnique.Factory = function () {
        var filterStub;
        filterStub = function (items, filterOn) {
            if (filterOn === false) {
                return items;
            }
            if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
                var hashCheck = {}, newItems = [];
                var extractValueToCompare = function (item) {
                    if (angular.isDefined(item) && item[filterOn] != null) {
                        return item[filterOn];
                    }
                    return item;
                };
                angular.forEach(items, function (item) {
                    var isDuplicate = false;
                    for (var i = 0; i < newItems.length; i++) {
                        if (extractValueToCompare(newItems[i]) == extractValueToCompare(item)) {
                            isDuplicate = true;
                            break;
                        }
                    }
                    if (!isDuplicate) {
                        newItems.push(item);
                    }
                });
            }
            return newItems;
        };
        //filterStub.$stateful = true;
        return filterStub;
    };
    return SWUnique;
}());
exports.SWUnique = SWUnique;


/***/ }),
/* 809 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(22);
var Account = /** @class */ (function (_super) {
    __extends(Account, _super);
    function Account($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.giftCards = [];
        _this.userIsLoggedIn = function () {
            if (_this.accountID !== '') {
                return true;
            }
            return false;
        };
        return _this;
    }
    return Account;
}(baseentity_1.BaseEntity));
exports.Account = Account;


/***/ }),
/* 810 */,
/* 811 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(22);
var Address = /** @class */ (function (_super) {
    __extends(Address, _super);
    function Address($injector) {
        return _super.call(this, $injector) || this;
    }
    return Address;
}(baseentity_1.BaseEntity));
exports.Address = Address;


/***/ }),
/* 812 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(22);
var Cart = /** @class */ (function (_super) {
    __extends(Cart, _super);
    //deprecated
    function Cart($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.orderRequirementsList = "";
        _this.orderPayments = [];
        _this.orderItems = [];
        _this.orderFulfillments = [];
        _this.hasShippingAddressAndMethod = function () {
            if (_this.orderRequirementsList.indexOf('fulfillment') == -1) {
                return true;
            }
            return false;
        };
        _this.orderRequiresAccount = function () {
            if (_this.orderRequirementsList.indexOf('account') != -1 || !_this.account.accountID) {
                return true;
            }
            return false;
        };
        _this.getOrderItemQuantitySum = function () {
            var totalQuantity = 0;
            if (angular.isDefined(_this.orderItems)) {
                for (var orderItem in _this.orderItems) {
                    totalQuantity = totalQuantity + _this.orderItems[orderItem].quantity;
                }
                return totalQuantity;
            }
            return totalQuantity;
        };
        return _this;
    }
    return Cart;
}(baseentity_1.BaseEntity));
exports.Cart = Cart;


/***/ }),
/* 813 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var account_1 = __webpack_require__(809);
exports.Account = account_1.Account;
var address_1 = __webpack_require__(811);
exports.Address = address_1.Address;
var cart_1 = __webpack_require__(812);
exports.Cart = cart_1.Cart;
var orderitem_1 = __webpack_require__(814);
exports.OrderItem = orderitem_1.OrderItem;
var orderpayment_1 = __webpack_require__(815);
exports.OrderPayment = orderpayment_1.OrderPayment;
var sku_1 = __webpack_require__(816);
exports.Sku = sku_1.Sku;


/***/ }),
/* 814 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var baseentity_1 = __webpack_require__(22);
var OrderItem = /** @class */ (function (_super) {
    __extends(OrderItem, _super);
    function OrderItem($injector) {
        return _super.call(this, $injector) || this;
    }
    return OrderItem;
}(baseentity_1.BaseEntity));
exports.OrderItem = OrderItem;


/***/ }),
/* 815 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var OrderPayment = /** @class */ (function () {
    function OrderPayment() {
    }
    return OrderPayment;
}());
exports.OrderPayment = OrderPayment;


/***/ }),
/* 816 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentity_1 = __webpack_require__(22);
var Sku = /** @class */ (function (_super) {
    __extends(Sku, _super);
    function Sku($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.setNewQOH = function (value) {
            _this.newQOH = value;
        };
        _this.getNewQOH = function () {
            return _this.newQOH;
        };
        return _this;
    }
    return Sku;
}(baseentity_1.BaseEntity));
exports.Sku = Sku;


/***/ }),
/* 817 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var basetransient_1 = __webpack_require__(68);
var BaseProcess = /** @class */ (function (_super) {
    __extends(BaseProcess, _super);
    function BaseProcess($injector) {
        return _super.call(this, $injector) || this;
    }
    return BaseProcess;
}(basetransient_1.BaseTransient));
exports.BaseProcess = BaseProcess;


/***/ }),
/* 818 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseprocess_1 = __webpack_require__(817);
var Order_AddOrderPayment = /** @class */ (function (_super) {
    __extends(Order_AddOrderPayment, _super);
    function Order_AddOrderPayment($injector) {
        var _this = _super.call(this, $injector) || this;
        _this.$injector = $injector;
        return _this;
    }
    return Order_AddOrderPayment;
}(baseprocess_1.BaseProcess));
exports.Order_AddOrderPayment = Order_AddOrderPayment;


/***/ }),
/* 819 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var order_addorderpayment_1 = __webpack_require__(818);
exports.Order_AddOrderPayment = order_addorderpayment_1.Order_AddOrderPayment;


/***/ }),
/* 820 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var request_1 = __webpack_require__(307);
var AdminRequest = /** @class */ (function (_super) {
    __extends(AdminRequest, _super);
    function AdminRequest(url, data, method, headers, $injector, observerService) {
        if (method === void 0) { method = "post"; }
        if (headers === void 0) { headers = { 'Content-Type': "application/json" }; }
        var _this = _super.call(this, url, data, method, headers, $injector) || this;
        _this.observerService = observerService;
        _this.observerService = observerService;
        _this.promise.then(function (result) {
            //identify that it is an object save
            if (url.indexOf('api:main.post') != -1 && data.entityName) {
                var eventNameBase = data.entityName + data.context.charAt(0).toUpperCase() + data.context.slice(0);
                if (result.errors) {
                    _this.observerService.notify(eventNameBase + 'Failure', result.data);
                }
                else {
                    _this.observerService.notify(eventNameBase + 'Success', result.data);
                }
            }
            _this.messages = result.messages;
        }).catch(function (response) {
        });
        return _this;
    }
    return AdminRequest;
}(request_1.Request));
exports.AdminRequest = AdminRequest;


/***/ }),
/* 821 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../../typings/tsd.d.ts' />
var request_1 = __webpack_require__(307);
var PublicRequest = /** @class */ (function (_super) {
    __extends(PublicRequest, _super);
    function PublicRequest(url, data, method, headers, $injector, observerService) {
        if (headers === void 0) { headers = { 'Content-Type': "application/x-www-form-urlencoded" }; }
        var _this = _super.call(this, url, data, method, headers, $injector) || this;
        _this.observerService = observerService;
        _this.failureActions = [];
        _this.successfulActions = [];
        _this.messages = [];
        _this.hasSuccessfulAction = function () {
            return _this.successfulActions.length > 0;
        };
        _this.hasFailureAction = function () {
            return _this.failureActions.length > 0;
        };
        _this.observerService = observerService;
        _this.promise.then(function (result) {
            _this.successfulActions = result.successfulActions;
            for (var i in _this.successfulActions) {
                var successfulAction = _this.successfulActions[i];
                _this.observerService.notify(successfulAction.split('.')[1] + 'Success', result.data);
                console.log("Successful action result:", result);
            }
            _this.failureActions = result.failureActions;
            for (var i in _this.failureActions) {
                var failureAction = _this.failureActions[i];
                _this.observerService.notify(failureAction.split('.')[1] + 'Failure', result.data);
            }
            _this.messages = result.messages;
        }).catch(function (response) {
        });
        return _this;
    }
    return PublicRequest;
}(request_1.Request));
exports.PublicRequest = PublicRequest;


/***/ }),
/* 822 */,
/* 823 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(17);
var AccountService = /** @class */ (function (_super) {
    __extends(AccountService, _super);
    //@ngInject
    function AccountService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Account') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return AccountService;
}(baseentityservice_1.BaseEntityService));
exports.AccountService = AccountService;


/***/ }),
/* 824 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var CacheService = /** @class */ (function () {
    //@ngInject
    function CacheService(localStorageService) {
        var _this = this;
        this.localStorageService = localStorageService;
        this.cacheData = {};
        this.saveCacheData = function () {
            _this.localStorageService.setItem("cacheData", _this.cacheData);
        };
        this.hasKey = function (key) {
            if (angular.isDefined(_this.cacheData[key])) {
                return true;
            }
            return false;
        };
        this.dateExpired = function (key) {
            if (_this.cacheData[key].expiresTime == "forever") {
                return false;
            }
            return _this.cacheData[key].expiresTime < Date.now();
        };
        this.put = function (key, dataPromise, dataTarget, expiresTime) {
            if (expiresTime === void 0) { expiresTime = "forever"; }
            _this.cacheData[key] = {};
            _this.cacheData[key].expiresTime = expiresTime;
            _this.cacheData[key].dataPromise = dataPromise;
            _this.cacheData[key].dataTarget = dataTarget;
            dataPromise.then(function (response) {
                _this.localStorageService.setItem(key, response[dataTarget]);
            }, function (reason) {
                delete _this.cacheData[key];
            });
            _this.saveCacheData();
            return dataPromise;
        };
        this.reload = function (key, expiresTime) {
            if (expiresTime === void 0) { expiresTime = "forever"; }
            _this.cacheData[key].expiresTime = expiresTime;
            _this.cacheData[key].dataPromise.then(function (response) {
                _this.localStorageService.setItem(key, response[_this.cacheData[key].dataTarget]);
            }, function (reason) {
                delete _this.cacheData[key];
            });
            _this.saveCacheData();
            return _this.cacheData[key].dataPromise;
        };
        this.fetch = function (key) {
            if (_this.hasKey(key) && !_this.dateExpired(key)) {
                if (_this.localStorageService.hasItem(key)) {
                    return _this.localStorageService.getItem(key);
                }
                _this.put(key, _this.cacheData[key].dataPromise, _this.cacheData[key].dataTarget, _this.cacheData[key].expiresTime).finally(function () {
                    return _this.localStorageService.getItem(key);
                });
            }
        };
        this.fetchOrReload = function (key, expiresTime) {
            if (angular.isDefined(_this.fetch(key))) {
                return _this.fetch(key);
            }
            else {
                _this.reload(key, expiresTime).then(function (response) {
                    return _this.fetch(key);
                }, function (reason) {
                    //throw
                });
            }
        };
        if (localStorageService.hasItem("cacheData")) {
            this.cacheData = localStorageService.getItem("cacheData");
        }
    }
    return CacheService;
}());
exports.CacheService = CacheService;


/***/ }),
/* 825 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(17);
var CartService = /** @class */ (function (_super) {
    __extends(CartService, _super);
    //@ngInject
    //@ngInject
    function CartService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Order', 'Cart') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return CartService;
}(baseentityservice_1.BaseEntityService));
exports.CartService = CartService;


/***/ }),
/* 826 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var DraggableService = /** @class */ (function () {
    //ngInject
    function DraggableService() {
        this.isDropAllowed = function (event) {
            //todo implement
            return true;
        };
        this.isMouseInFirstHalf = function (event, targetNode, relativeToParent, horizontal) {
            var mousePointer = horizontal ? (event.offsetX || event.layerX)
                : (event.offsetY || event.layerY);
            var targetSize = horizontal ? targetNode.offsetWidth : targetNode.offsetHeight;
            var targetPosition = horizontal ? targetNode.offsetLeft : targetNode.offsetTop;
            targetPosition = relativeToParent ? targetPosition : 0;
            return mousePointer < targetPosition + targetSize / 2;
        };
    }
    return DraggableService;
}());
exports.DraggableService = DraggableService;


/***/ }),
/* 827 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var baseentityservice_1 = __webpack_require__(17);
var EntityService = /** @class */ (function (_super) {
    __extends(EntityService, _super);
    //@ngInject
    function EntityService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService) || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return EntityService;
}(baseentityservice_1.BaseEntityService));
exports.EntityService = EntityService;


/***/ }),
/* 828 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var ExpandableService = /** @class */ (function () {
    //ngInject
    function ExpandableService() {
        var _this = this;
        this.recordStates = {};
        this.addRecord = function (recordID, state) {
            if (angular.isUndefined(state)) {
                state = { isLoaded: true };
            }
            _this.recordStates[recordID] = state;
        };
        this.updateState = function (recordID, state) {
            if (angular.isUndefined(_this.recordStates[recordID])) {
                _this.recordStates[recordID] = {};
            }
            for (var key in state) {
                _this.recordStates[recordID][key] = state[key];
            }
        };
        this.getState = function (recordID, key) {
            if (angular.isDefined(_this.recordStates[recordID]) && angular.isDefined(key)) {
                var dataToReturn = _this.recordStates[recordID][key];
            }
            else {
                var dataToReturn = _this.recordStates[recordID];
            }
            if (angular.isDefined(dataToReturn)) {
                return dataToReturn;
            }
            return false;
        };
    }
    return ExpandableService;
}());
exports.ExpandableService = ExpandableService;


/***/ }),
/* 829 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FilterService = /** @class */ (function () {
    //ngInject
    function FilterService() {
        this.filterMatch = function (valueToCompareAgainst, comparisonOperator, comparisonValue) {
            switch (comparisonOperator) {
                case "!=":
                    if (valueToCompareAgainst != comparisonValue) {
                        return true;
                    }
                    break;
                case ">":
                    if (valueToCompareAgainst > comparisonValue) {
                        return true;
                    }
                    break;
                case ">=":
                    if (valueToCompareAgainst >= comparisonValue) {
                        return true;
                    }
                    break;
                case "<":
                    if (valueToCompareAgainst < comparisonValue) {
                        return true;
                    }
                    break;
                case "<=":
                    if (valueToCompareAgainst <= comparisonValue) {
                        return true;
                    }
                    break;
                case "is":
                    if (valueToCompareAgainst == comparisonValue) {
                        return true;
                    }
                    break;
                case "is not":
                    if (valueToCompareAgainst != comparisonValue) {
                        return true;
                    }
                    break;
                default:
                    //= case
                    if (valueToCompareAgainst == comparisonValue) {
                        return true;
                    }
                    break;
            }
            return false;
        };
    }
    return FilterService;
}());
exports.FilterService = FilterService;


/***/ }),
/* 830 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var Form = /** @class */ (function () {
    //@ngInject
    function Form(name, object, editing) {
        this.$addControl = function (control) { };
        this.$removeControl = function (control) { };
        this.$setValidity = function (validationErrorKey, isValid, control) { };
        this.$setDirty = function () { };
        this.$setPristine = function () { };
        this.$commitViewValue = function () { };
        this.$rollbackViewValue = function () { };
        this.$setSubmitted = function () { };
        this.$setUntouched = function () { };
        this.name = name;
        this.object = object;
        this.editing = editing;
    }
    return Form;
}());
var FormService = /** @class */ (function () {
    function FormService($log) {
        var _this = this;
        this.$log = $log;
        this.setPristinePropertyValue = function (property, value) {
            _this._pristinePropertyValue[property] = value;
        };
        this.getPristinePropertyValue = function (property) {
            return _this._pristinePropertyValue[property];
        };
        this.setForm = function (form) {
            _this._forms[form.name] = form;
        };
        this.getForm = function (formName) {
            return _this._forms[formName];
        };
        this.getForms = function () {
            return _this._forms;
        };
        this.getFormsByObjectName = function (objectName) {
            var forms = [];
            for (var f in _this._forms) {
                if (angular.isDefined(_this._forms[f].$$swFormInfo.object) && _this._forms[f].$$swFormInfo.object.metaData.className === objectName) {
                    forms.push(_this._forms[f]);
                }
            }
            return forms;
        };
        this.createForm = function (name, object, editing) {
            var _form = new Form(name, object, editing);
            _this.setForm(_form);
            return _form;
        };
        this.resetForm = function (form) {
            _this.$log.debug('resetting form');
            _this.$log.debug(form);
            for (var key in form) {
                if (angular.isDefined(form[key])
                    && typeof form[key].$setViewValue == 'function'
                    && angular.isDefined(form[key].$viewValue)) {
                    _this.$log.debug(form[key]);
                    if (angular.isDefined(_this.getPristinePropertyValue(key))) {
                        form[key].$setViewValue(_this.getPristinePropertyValue(key));
                    }
                    else {
                        form[key].$setViewValue('');
                    }
                    form[key].$setUntouched(true);
                    form[key].$render();
                    _this.$log.debug(form[key]);
                }
            }
            form.$submitted = false;
            form.$setPristine();
            form.$setUntouched();
        };
        this.$log = $log;
        this._forms = {};
        this._pristinePropertyValue = {};
    }
    FormService.$inject = ['$log'];
    return FormService;
}());
exports.FormService = FormService;


/***/ }),
/* 831 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var HibachiInterceptor = /** @class */ (function () {
    //@ngInject
    function HibachiInterceptor($location, $q, $log, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder) {
        var _this = this;
        this.$location = $location;
        this.$q = $q;
        this.$log = $log;
        this.$injector = $injector;
        this.localStorageService = localStorageService;
        this.alertService = alertService;
        this.appConfig = appConfig;
        this.dialogService = dialogService;
        this.utilityService = utilityService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.urlParam = null;
        this.authHeader = 'Authorization';
        this.authPrefix = 'Bearer ';
        this.request = function (config) {
            _this.$log.debug('request');
            //bypass interceptor rules when checking template cache
            if (config.url.charAt(0) !== '/') {
                return config;
            }
            if (config.method == 'GET' && config.url.indexOf('.html') >= 0 && config.url.indexOf('/') >= 0) {
                //all partials are bound to instantiation key
                config.url = config.url + '?instantiationKey=' + _this.appConfig.instantiationKey;
                return config;
            }
            config.cache = true;
            config.headers = config.headers || {};
            if (_this.localStorageService.hasItem('token')) {
                config.headers['Auth-Token'] = 'Bearer ' + _this.localStorageService.getItem('token');
            }
            var queryParams = _this.utilityService.getQueryParamsFromUrl(config.url);
            if (config.method == 'GET' && (queryParams[_this.appConfig.action] && queryParams[_this.appConfig.action] === 'api:main.get')) {
                _this.$log.debug(config);
                config.method = 'POST';
                config.data = {};
                var data = {};
                if (angular.isDefined(config.params)) {
                    data = config.params;
                }
                var params = {};
                params.serializedJsonData = angular.toJson(data);
                params.context = "GET";
                config.data = $.param(params);
                delete config.params;
                config.headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
            return config;
        };
        this.requestError = function (rejection) {
            return _this.$q.reject(rejection);
        };
        this.response = function (response) {
            if (response.data.messages) {
                var alerts = _this.alertService.formatMessagesToAlerts(response.data.messages);
                _this.alertService.addAlerts(alerts);
            }
            return response;
        };
        this.responseError = function (rejection) {
            if (angular.isDefined(rejection.status) && rejection.status !== 404 && rejection.status !== 403 && rejection.status !== 499) {
                if (rejection.data && rejection.data.messages) {
                    var alerts = _this.alertService.formatMessagesToAlerts(rejection.data.messages);
                    _this.alertService.addAlerts(alerts);
                }
                else {
                    var message = {
                        msg: 'there was error retrieving data',
                        type: 'error'
                    };
                    _this.alertService.addAlert(message);
                }
            }
            if (rejection.status === 499) {
                // handle the case where the user is not authenticated
                if (rejection.data && rejection.data.messages) {
                    //var deferred = $q.defer();
                    var $http = _this.$injector.get('$http');
                    if (rejection.data.messages[0].message === 'timeout') {
                        //open dialog
                        _this.dialogService.addPageDialog(_this.hibachiPathBuilder.buildPartialsPath('preprocesslogin'), {});
                    }
                    else if (rejection.data.messages[0].message === 'invalid_token') {
                        return $http.get(_this.baseUrl + '?' + _this.appConfig.action + '=api:main.login').then(function (loginResponse) {
                            if (loginResponse.status === 200) {
                                _this.localStorageService.setItem('token', loginResponse.data.token);
                                rejection.config.headers = rejection.config.headers || {};
                                rejection.config.headers['Auth-Token'] = 'Bearer ' + loginResponse.data.token;
                                return $http(rejection.config).then(function (response) {
                                    return response;
                                });
                            }
                        }, function (rejection) {
                            return rejection;
                        });
                    }
                }
            }
            return rejection;
        };
        this.$location = $location;
        this.$q = $q;
        this.$log = $log;
        this.$injector = $injector;
        this.localStorageService = localStorageService;
        this.alertService = alertService;
        this.appConfig = appConfig;
        this.dialogService = dialogService;
        this.utilityService = utilityService;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.baseUrl = appConfig.baseURL;
    }
    HibachiInterceptor.Factory = function () {
        var eventHandler = function ($location, $q, $log, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder) { return new HibachiInterceptor($location, $q, $log, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder); };
        eventHandler.$inject = [
            '$location',
            '$q',
            '$log',
            '$injector',
            'localStorageService',
            'alertService',
            'appConfig',
            'dialogService',
            'utilityService',
            'hibachiPathBuilder'
        ];
        return eventHandler;
    };
    return HibachiInterceptor;
}());
exports.HibachiInterceptor = HibachiInterceptor;


/***/ }),
/* 832 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var HibachiPathBuilder = /** @class */ (function () {
    //@ngInject
    function HibachiPathBuilder() {
        var _this = this;
        this.setBaseURL = function (baseURL) {
            _this.baseURL = baseURL;
        };
        this.setBasePartialsPath = function (basePartialsPath) {
            _this.basePartialsPath = basePartialsPath;
        };
        this.setApiSubsystemName = function (apiSubsystemName) {
            _this.apiSubsystemName = apiSubsystemName;
        };
        this.buildPartialsPath = function (componentsPath) {
            if (angular.isDefined(_this.baseURL) && angular.isDefined(_this.basePartialsPath)) {
                return (_this.baseURL + _this.basePartialsPath + componentsPath).replace("//", "/");
            }
            else {
                throw ('need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there');
            }
        };
    }
    return HibachiPathBuilder;
}());
exports.HibachiPathBuilder = HibachiPathBuilder;


/***/ }),
/* 833 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var HibachiScope = /** @class */ (function () {
    //@ngInject
    function HibachiScope(appConfig) {
        var _this = this;
        this.loginDisplayed = false;
        this.isValidToken = true;
        this.setToken = function (token) {
            _this.token = token;
            var stringArray = token.split('.');
            try {
                _this.jwtInfo = angular.fromJson(window.atob(stringArray[0]).trim());
                _this.session = angular.fromJson(window.atob(stringArray[1]).trim());
            }
            catch (err) {
                _this.isValidToken = false;
            }
        };
        this.config = appConfig;
    }
    return HibachiScope;
}());
exports.HibachiScope = HibachiScope;


/***/ }),
/* 834 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
// interface ISlatwallRootScopeService extends ng.IRootScopeService{
//     loadedResourceBundle:boolean;
// 	loadingResourceBundle:boolean;
// } 
var HibachiService = /** @class */ (function () {
    //@ngInject
    function HibachiService($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbkeyService, appConfig, _config, _jsEntities, _jsEntityInstances) {
        var _this = this;
        this.$window = $window;
        this.$q = $q;
        this.$http = $http;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$rootScope = $rootScope;
        this.$location = $location;
        this.$anchorScroll = $anchorScroll;
        this.requestService = requestService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.rbkeyService = rbkeyService;
        this.appConfig = appConfig;
        this._config = _config;
        this._jsEntities = _jsEntities;
        this._jsEntityInstances = _jsEntityInstances;
        this._deferred = {};
        this._resourceBundle = {};
        this.buildUrl = function (action, queryString) {
            //actionName example: slatAction. defined in FW1 and populated to config
            var actionName = _this.appConfig.action;
            var baseUrl = _this.appConfig.baseURL;
            queryString = queryString || '';
            if (angular.isDefined(queryString) && queryString.length) {
                if (queryString.indexOf('&') !== 0) {
                    queryString = '&' + queryString;
                }
            }
            return baseUrl + '?' + actionName + '=' + action + queryString;
        };
        this.getUrlWithActionPrefix = function () {
            return _this.appConfig.baseURL + '/index.cfm/?' + _this.appConfig.action + "=";
        };
        this.getJsEntities = function () {
            return _this._jsEntities;
        };
        this.setJsEntities = function (jsEntities) {
            _this._jsEntities = jsEntities;
        };
        this.getJsEntityInstances = function () {
            return _this._jsEntityInstances;
        };
        this.setJsEntityInstances = function (jsEntityInstances) {
            _this._jsEntityInstances = jsEntityInstances;
        };
        this.getEntityExample = function (entityName) {
            return _this._jsEntityInstances[entityName];
        };
        this.getEntityMetaData = function (entityName) {
            return _this._jsEntityInstances[entityName].metaData;
        };
        this.getPropertyByEntityNameAndPropertyName = function (entityName, propertyName) {
            return _this.getEntityMetaData(entityName)[propertyName];
        };
        this.getPrimaryIDPropertyNameByEntityName = function (entityName) {
            return _this.getEntityExample(entityName).$$getIDName();
        };
        this.getEntityHasPropertyByEntityName = function (entityName, propertyName) {
            return angular.isDefined(_this.getEntityMetaData(entityName)[propertyName]);
        };
        this.getBaseEntityAliasFromName = function (entityName) {
            return '_' + entityName;
        };
        this.getPropertyIsObjectByEntityNameAndPropertyIdentifier = function (entityName, propertyIdentifier) {
            var lastEntity = _this.getLastEntityNameInPropertyIdentifier(entityName, propertyIdentifier);
            var entityMetaData = _this.getEntityMetaData(lastEntity);
            return angular.isDefined(entityMetaData[_this.utilityService.listLast(propertyIdentifier, '.')].cfc);
        };
        this.getLastEntityNameInPropertyIdentifier = function (entityName, propertyIdentifier) {
            if (!entityName) {
                throw ('No entity name was supplied to getLastEntityNameInPropertyIdentifier in hibachi service.');
            }
            //strip alias if it exists and convert everything to be periods
            if (propertyIdentifier.charAt(0) === '_') {
                propertyIdentifier = _this.utilityService.listRest(propertyIdentifier.replace(/_/g, '.'), '.');
            }
            var propertyIdentifierArray = propertyIdentifier.split('.');
            if (propertyIdentifierArray[0] === entityName.toLowerCase()) {
                propertyIdentifierArray.shift();
            }
            if (propertyIdentifierArray.length > 1) {
                var propertiesStruct = _this.getEntityMetaData(entityName);
                var currentProperty = propertyIdentifierArray.shift();
                if (!propertiesStruct[currentProperty] ||
                    !propertiesStruct[currentProperty].cfc) {
                    throw ("The Property Identifier " + propertyIdentifier + " is invalid for the entity " + entityName);
                }
                var currentEntityName = propertiesStruct[currentProperty].cfc;
                var currentPropertyIdentifier = propertyIdentifierArray.join('.');
                return _this.getLastEntityNameInPropertyIdentifier(currentEntityName, currentPropertyIdentifier);
            }
            return entityName;
        };
        //helper method to inflate a new entity with data
        this.populateEntity = function (entityName, data) {
            var newEntity = _this.newEntity(entityName);
            angular.extend(newEntity.data, data);
            return newEntity;
        };
        //service method used to transform collection data to collection objects based on a collectionconfig
        this.populateCollection = function (collectionData, collectionConfig) {
            //create array to hold objects
            var entities = [];
            //loop over all collection data to create objects
            var hibachiService = _this;
            angular.forEach(collectionData, function (collectionItemData, key) {
                //create base Entity
                var entity = hibachiService['new' + collectionConfig.baseEntityName.replace(_this.appConfig.applicationKey, '')]();
                //populate entity with data based on the collectionConfig
                angular.forEach(collectionConfig.columns, function (column, key) {
                    //get objects base properties
                    var propertyIdentifier = column.propertyIdentifier.replace(collectionConfig.baseEntityAlias.toLowerCase(), '');
                    propertyIdentifier = _this.utilityService.replaceAll(propertyIdentifier, '_', '.');
                    if (propertyIdentifier.charAt(0) === '.') {
                        propertyIdentifier = propertyIdentifier.slice(1);
                    }
                    var propertyIdentifierArray = propertyIdentifier.split('.');
                    var propertyIdentifierKey = propertyIdentifier.replace(/\./g, '_');
                    var currentEntity = entity;
                    angular.forEach(propertyIdentifierArray, function (property, key) {
                        if (key === propertyIdentifierArray.length - 1) {
                            //if we are on the last item in the array
                            if (angular.isObject(collectionItemData[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype === 'many-to-one') {
                                var relatedEntity = hibachiService['new' + currentEntity.metaData[property].cfc]();
                                relatedEntity.$$init(collectionItemData[propertyIdentifierKey][0]);
                                currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
                            }
                            else if (angular.isArray(collectionItemData[propertyIdentifierKey]) && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {
                                angular.forEach(collectionItemData[propertyIdentifierKey], function (arrayItem, key) {
                                    var relatedEntity = hibachiService['new' + currentEntity.metaData[property].cfc]();
                                    relatedEntity.$$init(arrayItem);
                                    currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
                                });
                            }
                            else {
                                currentEntity.data[property] = collectionItemData[propertyIdentifierKey];
                            }
                        }
                        else {
                            var propertyMetaData = currentEntity.metaData[property];
                            if (angular.isUndefined(currentEntity.data[property])) {
                                if (propertyMetaData.fieldtype === 'one-to-many') {
                                    relatedEntity = [];
                                }
                                else {
                                    relatedEntity = hibachiService['new' + propertyMetaData.cfc]();
                                }
                            }
                            else {
                                relatedEntity = currentEntity.data[property];
                            }
                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);
                            currentEntity = relatedEntity;
                        }
                    });
                });
                entities.push(entity);
            });
            return entities;
        };
        /*basic entity getter where id is optional, returns a promise*/
        this.getDefer = function (deferKey) {
            return _this._deferred[deferKey];
        };
        this.cancelPromise = function (deferKey) {
            var deferred = _this.getDefer(deferKey);
            if (angular.isDefined(deferred)) {
                deferred.resolve({ messages: [{ messageType: 'error', message: 'User Cancelled' }] });
            }
        };
        this.newEntity = function (entityName) {
            if (entityName != undefined) {
                var entityServiceName = entityName.charAt(0).toLowerCase() + entityName.slice(1) + 'Service';
                if (angular.element(document.body).injector().has(entityServiceName)) {
                    var entityService = angular.element(document.body).injector().get(entityServiceName);
                    var functionObj = entityService['new' + entityName];
                    if (entityService['new' + entityName] != undefined && !!(functionObj && functionObj.constructor && functionObj.call && functionObj.apply)) {
                        return entityService['new' + entityName]();
                    }
                }
                return new _this._jsEntities[entityName];
            }
        };
        this.getEntityDefinition = function (entityName) {
            return _this._jsEntities[entityName];
        };
        /*basic entity getter where id is optional, returns a promise*/
        this.getEntity = function (entityName, options) {
            /*
            *
            * getEntity('Product', '12345-12345-12345-12345');
            * getEntity('Product', {keywords='Hello'});
            *
            */
            var apiSubsystemName = _this.appConfig.apiSubsystemName || "api";
            if (angular.isUndefined(options)) {
                options = {};
            }
            if (angular.isDefined(options.deferKey)) {
                _this.cancelPromise(options.deferKey);
            }
            var params = {};
            if (typeof options === 'string') {
                var urlString = _this.getUrlWithActionPrefix() + apiSubsystemName + ':' + 'main.get&entityName=' + entityName + '&entityID=' + options;
            }
            else {
                params['P:Current'] = options.currentPage || 1;
                params['P:Show'] = options.pageShow || 10;
                params.keywords = options.keywords || '';
                params.columnsConfig = options.columnsConfig || '';
                params.filterGroupsConfig = options.filterGroupsConfig || '';
                params.joinsConfig = options.joinsConfig || '';
                params.orderByConfig = options.orderByConfig || '';
                params.groupBysConfig = options.groupBysConfig || '';
                params.isDistinct = options.isDistinct || false;
                params.propertyIdentifiersList = options.propertyIdentifiersList || '';
                params.allRecords = options.allRecords || false;
                params.defaultColumns = options.defaultColumns || true;
                params.processContext = options.processContext || '';
                var urlString = _this.getUrlWithActionPrefix() + apiSubsystemName + ':' + 'main.get&entityName=' + entityName;
            }
            if (angular.isDefined(options.id)) {
                urlString += '&entityId=' + options.id;
            }
            var transformResponse = function (data) {
                if (angular.isString(data)) {
                    data = JSON.parse(data);
                }
                return data;
            };
            //check if we are using a service to transform the response
            if (angular.isDefined(options.transformResponse)) {
                transformResponse = function (data) {
                    var data = JSON.parse(data);
                    if (angular.isDefined(data.records)) {
                        data = options.transformResponse(data.records);
                    }
                    return data;
                };
            }
            var request = _this.requestService.newAdminRequest(urlString, params);
            if (options.deferKey) {
                _this._deferred[options.deferKey] = request;
            }
            return request.promise;
        };
        this.getResizedImageByProfileName = function (profileName, skuIDs) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getResizedImageByProfileName&context=getResizedImageByProfileName&profileName=' + profileName + '&skuIDs=' + skuIDs;
            var request = _this.requestService.newPublicRequest(urlString);
            return request.promise;
        };
        this.getEventOptions = function (entityName) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getEventOptionsByEntityName&entityName=' + entityName;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getProcessOptions = function (entityName) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getProcessMethodOptionsByEntityName&entityName=' + entityName;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.checkUniqueOrNullValue = function (object, property, value) {
            var objectName = object.metaData.className;
            var objectID = object.$$getID();
            return _this.$http.get(_this.getUrlWithActionPrefix() + 'api:main.getValidationPropertyStatus&object=' + objectName + '&objectID=' + objectID + '&propertyidentifier=' + property +
                '&value=' + escape(value)).then(function (results) {
                return results.data.uniqueStatus;
            });
        };
        this.checkUniqueValue = function (object, property, value) {
            var objectName = object.metaData.className;
            var objectID = object.$$getID();
            return _this.$http.get(_this.getUrlWithActionPrefix() + 'api:main.getValidationPropertyStatus&object=' + objectName + '&objectID=' + objectID + '&propertyidentifier=' + property +
                '&value=' + escape(value)).then(function (results) {
                return results.data.uniqueStatus;
            });
        };
        this.getPropertyDisplayData = function (entityName, options) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getPropertyDisplayData&entityName=' + entityName;
            var params = {};
            params.propertyIdentifiersList = options.propertyIdentifiersList || '';
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getPropertyDisplayOptions = function (entityName, options) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getPropertyDisplayOptions&entityName=' + entityName;
            var params = {};
            params.property = options.property || options.propertyIdentifier || '';
            if (angular.isDefined(options.argument1)) {
                params.argument1 = options.argument1;
            }
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getPropertyTitle = function (propertyName, metaData) {
            var propertyMetaData = metaData[propertyName];
            if (angular.isDefined(propertyMetaData['hb_rbkey'])) {
                return metaData.$$getRBKey(propertyMetaData['hb_rbkey']);
            }
            else if (angular.isUndefined(propertyMetaData['persistent'])) {
                if (angular.isDefined(propertyMetaData['fieldtype'])
                    && angular.isDefined(propertyMetaData['cfc'])
                    && ["one-to-many", "many-to-many"].indexOf(propertyMetaData.fieldtype) > -1) {
                    return metaData.$$getRBKey("entity." + metaData.className.toLowerCase() + "." + propertyName + ',entity.' + propertyMetaData.cfc + '_plural');
                }
                else if (angular.isDefined(propertyMetaData.fieldtype)
                    && angular.isDefined(propertyMetaData.cfc)
                    && ["many-to-one"].indexOf(propertyMetaData.fieldtype) > -1) {
                    return metaData.$$getRBKey("entity." + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc);
                }
                return metaData.$$getRBKey('entity.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
            }
            else if (metaData.isProcessObject) {
                if (angular.isDefined(propertyMetaData.fieldtype)
                    && angular.isDefined(propertyMetaData.cfc)
                    && ["one-to-many", "many-to-many"].indexOf(propertyMetaData.fieldtype) > -1) {
                    return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc.toLowerCase() + '_plural');
                }
                else if (angular.isDefined(propertyMetaData.fieldtype)
                    && angular.isDefined(propertyMetaData.cfc)) {
                    return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc.toLowerCase());
                }
                return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
            }
            return metaData.$$getRBKey('object.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
        };
        this.saveEntity = function (entityName, id, params, context) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.post';
            if (angular.isDefined(entityName)) {
                params.entityName = entityName;
            }
            if (angular.isDefined(id)) {
                params.entityID = id;
            }
            if (angular.isDefined(context)) {
                params.context = context;
            }
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getExistingCollectionsByBaseEntity = function (entityName) {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getExistingCollectionsByBaseEntity&entityName=' + entityName;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getFilterPropertiesByBaseEntityName = function (entityName, includeNonPersistent) {
            if (includeNonPersistent === void 0) { includeNonPersistent = false; }
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getFilterPropertiesByBaseEntityName&EntityName=' + entityName + '&includeNonPersistent=' + includeNonPersistent;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.login = function (emailAddress, password) {
            var urlString = _this.appConfig.baseURL + '/index.cfm/api/auth/login';
            var params = {
                emailAddress: emailAddress,
                password: password
            };
            var request = _this.requestService.newAdminRequest(urlString, params);
            return request.promise;
        };
        this.getResourceBundle = function (locale) {
            var locale = locale || _this.appConfig.rbLocale;
            if (_this._resourceBundle[locale]) {
                return _this._resourceBundle[locale];
            }
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getResourceBundle&instantiationKey=' + _this.appConfig.instantiationKey + '&locale=' + locale;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getCurrencies = function () {
            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getCurrencies&instantiationKey=' + _this.appConfig.instantiationKey;
            var request = _this.requestService.newAdminRequest(urlString);
            return request.promise;
        };
        this.getConfig = function () {
            return _this._config;
        };
        this.getConfigValue = function (key) {
            return _this._config[key];
        };
        this.setConfigValue = function (key, value) {
            _this._config[key] = value;
        };
        this.setConfig = function (config) {
            _this._config = config;
        };
        this.$window = $window;
        this.$q = $q;
        this.$http = $http;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$rootScope = $rootScope;
        this.$location = $location;
        this.$anchorScroll = $anchorScroll;
        this.requestService = requestService;
        this.utilityService = utilityService;
        this.formService = formService;
        this.rbkeyService = rbkeyService;
        this.appConfig = appConfig;
        this._config = _config;
        this._jsEntities = _jsEntities;
        this._jsEntityInstances = _jsEntityInstances;
    }
    return HibachiService;
}());
exports.HibachiService = HibachiService;
var $Hibachi = /** @class */ (function () {
    //@ngInject
    function $Hibachi(appConfig) {
        var _this = this;
        this._config = {};
        this.angular = angular;
        this.setJsEntities = function (jsEntities) {
            _this._jsEntities = jsEntities;
        };
        this.getConfig = function () {
            return _this._config;
        };
        this.getConfigValue = function (key) {
            return _this._config[key];
        };
        this.setConfigValue = function (key, value) {
            _this._config[key] = value;
        };
        this.setConfig = function (config) {
            _this._config = config;
        };
        this._config = appConfig;
        this.$get.$inject = [
            '$window',
            '$q',
            '$http',
            '$timeout',
            '$log',
            '$rootScope',
            '$location',
            '$anchorScroll',
            'requestService',
            'utilityService',
            'formService',
            'rbkeyService',
            'appConfig'
        ];
    }
    $Hibachi.prototype.$get = function ($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbkeyService, appConfig) {
        return new HibachiService($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbkeyService, appConfig, this._config, this._jsEntities, this._jsEntityInstances);
    };
    return $Hibachi;
}());
exports.$Hibachi = $Hibachi;


/***/ }),
/* 835 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var HibachiServiceDecorator = /** @class */ (function () {
    //@ngInject
    function HibachiServiceDecorator($delegate, $http, $timeout, $log, $rootScope, $location, $anchorScroll, $q, utilityService, formService, rbkeyService, appConfig, observerService, hibachiValidationService, attributeMetaData) {
        var _deferred = {};
        var _config = appConfig;
        var _jsEntities = {};
        var _jsEntityInstances = {};
        var entities = appConfig.modelConfig.entities, validations = appConfig.modelConfig.validations, defaultValues = appConfig.modelConfig.defaultValues;
        angular.forEach(entities, function (entity) {
            if (attributeMetaData && attributeMetaData[entity.className]) {
                var relatedAttributes = attributeMetaData[entity.className];
                for (var attributeSetCode in relatedAttributes) {
                    var attributeSet = relatedAttributes[attributeSetCode];
                    for (var attributeCode in attributeSet.attributes) {
                        var attribute = attributeSet.attributes[attributeCode];
                        attribute.attributeSet = attributeSet;
                        attribute.isAttribute = true;
                        entity[attributeCode] = attribute;
                    }
                }
            }
            $delegate['get' + entity.className] = function (options) {
                var entityInstance = $delegate.newEntity(entity.className);
                var entityDataPromise = $delegate.getEntity(entity.className, options);
                entityDataPromise.then(function (response) {
                    if (angular.isDefined(response.processData)) {
                        entityInstance.$$init(response.data);
                        var processObjectInstance = $delegate['new' + entity.className + '_' + options.processContext.charAt(0).toUpperCase() + options.processContext.slice(1)]();
                        processObjectInstance.$$init(response.processData);
                        processObjectInstance.data[entity.className.charAt(0).toLowerCase() + entity.className.slice(1)] = entityInstance;
                        entityInstance.processObject = processObjectInstance;
                    }
                    else {
                        if (entityInstance.populate) {
                            entityInstance.populate(response);
                        }
                        else {
                            entityInstance.$$init(response);
                        }
                    }
                });
                return {
                    promise: entityDataPromise,
                    value: entityInstance
                };
            };
            $delegate['new' + entity.className] = function () {
                //if we have the service then get the new instance from that
                var entityName = entity.className;
                var serviceName = entityName.charAt(0).toLowerCase() + entityName.slice(1) + 'Service';
                if (angular.element(document.body).injector().has(serviceName)) {
                    var entityService = angular.element(document.body).injector().get(serviceName);
                    if (entityService['new' + entity.className]) {
                        return entityService['new' + entity.className]();
                    }
                }
                return $delegate.newEntity(entity.className);
            };
            entity.isProcessObject = entity.className.indexOf('_') >= 0;
            _jsEntities[entity.className] = function () {
                this.validations = validations[entity.className];
                this.metaData = entity;
                this.metaData.className = entity.className;
                if (relatedAttributes) {
                    this.attributeMetaData = relatedAttributes;
                }
                if (entity.hb_parentPropertyName) {
                    this.metaData.hb_parentPropertyName = entity.hb_parentPropertyName;
                }
                if (entity.hb_childPropertyName) {
                    this.metaData.hb_childPropertyName = entity.hb_childPropertyName;
                }
                this.metaData.$$getRBKey = function (rbKey, replaceStringData) {
                    return rbkeyService.rbKey(rbKey, replaceStringData);
                };
                this.metaData.$$getPropertyTitle = function (propertyName) {
                    return _getPropertyTitle(propertyName, this);
                };
                this.metaData.$$getPropertyHint = function (propertyName) {
                    return _getPropertyHint(propertyName, this);
                };
                this.metaData.$$getManyToManyName = function (singularname) {
                    var metaData = this;
                    for (var i in metaData) {
                        if (metaData[i].singularname === singularname) {
                            return metaData[i].name;
                        }
                    }
                };
                this.metaData.$$getPropertyFieldType = function (propertyName) {
                    return _getPropertyFieldType(propertyName, this);
                };
                this.metaData.$$getPropertyFormatType = function (propertyName) {
                    if (this[propertyName])
                        return _getPropertyFormatType(propertyName, this);
                };
                this.metaData.$$getDetailTabs = function () {
                    var deferred = $q.defer();
                    var urlString = _config.baseURL + '/index.cfm/?' + appConfig.action + '=api:main.getDetailTabs&entityName=' + this.className;
                    var detailTabs = [];
                    $http.get(urlString)
                        .success(function (data) {
                        deferred.resolve(data);
                    }).error(function (reason) {
                        deferred.reject(reason);
                    });
                    return deferred.promise;
                };
                this.$$getFormattedValue = function (propertyName, formatType) {
                    return _getFormattedValue(propertyName, formatType, this);
                };
                this.data = {};
                this.modifiedData = {};
                var jsEntity = this;
                if (entity.isProcessObject) {
                    (function (entity) {
                        _jsEntities[entity.className].prototype = {
                            $$getID: function () {
                                return '';
                            },
                            $$getIDName: function () {
                                var IDNameString = '';
                                return IDNameString;
                            }
                        };
                    })(entity);
                }
                angular.forEach(entity, function (property) {
                    if (angular.isObject(property) && angular.isDefined(property.name)) {
                        if (defaultValues && defaultValues[entity.className] && defaultValues[entity.className][property.name] != null) {
                            jsEntity.data[property.name] = angular.copy(defaultValues[entity.className][property.name]);
                        }
                        else {
                            jsEntity.data[property.name] = undefined;
                        }
                    }
                });
            };
            _jsEntities[entity.className].prototype = {
                $$getPropertyByName: function (propertyName) {
                    return this['$$get' + propertyName.charAt(0).toUpperCase() + propertyName.slice(1)]();
                },
                $$isPersisted: function () {
                    return this.$$getID() !== '';
                },
                $$init: function (data) {
                    _init(this, data);
                },
                $$save: function () {
                    return _save(this);
                },
                $$delete: function () {
                    return _delete(this);
                },
                $$getValidationsByProperty: function (property) {
                    return _getValidationsByProperty(this, property);
                },
                $$getValidationByPropertyAndContext: function (property, context) {
                    return _getValidationByPropertyAndContext(this, property, context);
                },
                $$getTitleByPropertyIdentifier: function (propertyIdentifier) {
                    if (propertyIdentifier.split('.').length > 1) {
                        var listFirst = utilityService.listFirst(propertyIdentifier, '.');
                        var relatedEntityName = this.metaData[listFirst].cfc;
                        var exampleEntity = $delegate.newEntity(relatedEntityName);
                        return exampleEntity.$$getTitleByPropertyIdentifier(propertyIdentifier.replace(listFirst, ''));
                    }
                    return this.metaData.$$getPropertyTitle(propertyIdentifier);
                },
                $$getMetaData: function (propertyName) {
                    if (propertyName === undefined) {
                        return this.metaData;
                    }
                    else {
                        if (angular.isDefined(this.metaData[propertyName].name) && angular.isUndefined(this.metaData[propertyName].nameCapitalCase)) {
                            this.metaData[propertyName].nameCapitalCase = this.metaData[propertyName].name.charAt(0).toUpperCase() + this.metaData[propertyName].name.slice(1);
                        }
                        if (angular.isDefined(this.metaData[propertyName].cfc) && angular.isUndefined(this.metaData[propertyName].cfcProperCase)) {
                            this.metaData[propertyName].cfcProperCase = this.metaData[propertyName].cfc.charAt(0).toLowerCase() + this.metaData[propertyName].cfc.slice(1);
                        }
                        return this.metaData[propertyName];
                    }
                }
            };
            angular.forEach(relatedAttributes, function (attributeSet) {
                angular.forEach(attributeSet.attributes, function (attribute) {
                    if (attribute && attribute.attributeCode) {
                        Object.defineProperty(_jsEntities[entity.className].prototype, attribute.attributeCode, {
                            configurable: true,
                            enumerable: false,
                            get: function () {
                                if (attribute != null && this.data[attribute.attributeCode] == null) {
                                    return undefined;
                                }
                                return this.data[attribute.attributeCode];
                            },
                            set: function (value) {
                                this.data[attribute.attributeCode] = value;
                            }
                        });
                    }
                });
            });
            angular.forEach(entity, function (property) {
                if (angular.isObject(property) && angular.isDefined(property.name)) {
                    //if(angular.isUndefined(property.persistent)){
                    if (angular.isDefined(property.fieldtype)) {
                        if (['many-to-one'].indexOf(property.fieldtype) >= 0) {
                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                                var thisEntityInstance = this;
                                if (angular.isDefined(this['$$get' + this.$$getIDName().charAt(0).toUpperCase() + this.$$getIDName().slice(1)]())) {
                                    var options = {
                                        columnsConfig: angular.toJson([
                                            {
                                                "propertyIdentifier": "_" + this.metaData.className.toLowerCase() + "_" + property.name
                                            }
                                        ]),
                                        joinsConfig: angular.toJson([
                                            {
                                                "associationName": property.name,
                                                "alias": "_" + this.metaData.className.toLowerCase() + "_" + property.name
                                            }
                                        ]),
                                        filterGroupsConfig: angular.toJson([{
                                                "filterGroup": [
                                                    {
                                                        "propertyIdentifier": "_" + this.metaData.className.toLowerCase() + "." + this.$$getIDName(),
                                                        "comparisonOperator": "=",
                                                        "value": this.$$getID()
                                                    }
                                                ]
                                            }]),
                                        allRecords: true
                                    };
                                    var collectionPromise = $delegate.getEntity(entity.className, options);
                                    collectionPromise.then(function (response) {
                                        for (var i in response.records) {
                                            var entityInstance = $delegate.newEntity(thisEntityInstance.metaData[property.name].cfc);
                                            //Removed the array index here at the end of local.property.name.
                                            if (angular.isArray(response.records[i][property.name])) {
                                                entityInstance.$$init(response.records[i][property.name][0]);
                                            }
                                            else {
                                                entityInstance.$$init(response.records[i][property.name]); //Shouldn't have the array index'
                                            }
                                            thisEntityInstance['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)](entityInstance);
                                        }
                                    });
                                    return collectionPromise;
                                }
                                return null;
                            };
                            _jsEntities[entity.className].prototype['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function (entityInstance) {
                                var thisEntityInstance = this;
                                var metaData = this.metaData;
                                var manyToManyName = '';
                                //if entityInstance is not passed in, clear related object
                                if (angular.isUndefined(entityInstance)) {
                                    if (angular.isDefined(thisEntityInstance.data[property.name])) {
                                        delete thisEntityInstance.data[property.name];
                                    }
                                    if (!thisEntityInstance.parents) {
                                        return;
                                    }
                                    for (var i = 0; i <= thisEntityInstance.parents.length; i++) {
                                        if (angular.isDefined(thisEntityInstance.parents[i]) && thisEntityInstance.parents[i].name == property.name.charAt(0).toLowerCase() + property.name.slice(1)) {
                                            thisEntityInstance.parents.splice(i, 1);
                                        }
                                    }
                                    return;
                                }
                                if (property.name === 'parent' + this.metaData.className) {
                                    var childName = 'child' + this.metaData.className;
                                    manyToManyName = entityInstance.metaData.$$getManyToManyName(childName);
                                }
                                else if (entityInstance.metaData) {
                                    manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + metaData.className.slice(1));
                                }
                                // else{
                                //     manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + metaData.className.slice(1));
                                // }
                                if (angular.isUndefined(thisEntityInstance.parents)) {
                                    thisEntityInstance.parents = [];
                                }
                                thisEntityInstance.parents.push(thisEntityInstance.metaData[property.name]);
                                if (angular.isDefined(manyToManyName) && manyToManyName.length) {
                                    if (angular.isUndefined(entityInstance.children)) {
                                        entityInstance.children = [];
                                    }
                                    var child = entityInstance.metaData[manyToManyName];
                                    if (entityInstance.children.indexOf(child) === -1) {
                                        entityInstance.children.push(child);
                                    }
                                    if (angular.isUndefined(entityInstance.data[manyToManyName])) {
                                        entityInstance.data[manyToManyName] = [];
                                    }
                                    entityInstance.data[manyToManyName].push(thisEntityInstance);
                                }
                                thisEntityInstance.data[property.name] = entityInstance;
                            };
                            if (property.name !== 'data' && property.name !== 'validations') {
                                Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                    configurable: true,
                                    enumerable: false,
                                    get: function () {
                                        if (this.data[property.name] == null) {
                                            return undefined;
                                        }
                                        return this.data[property.name];
                                    },
                                    set: function (value) {
                                        this['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)](value);
                                    }
                                });
                            }
                        }
                        else if (['one-to-many', 'many-to-many'].indexOf(property.fieldtype) >= 0) {
                            if (!property.singularname) {
                                throw ('need to define a singularname for ' + property.fieldtype);
                            }
                            _jsEntities[entity.className].prototype['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)] = function (entityInstance) {
                                if (angular.isUndefined(entityInstance)) {
                                    var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
                                }
                                var metaData = this.metaData;
                                if (metaData[property.name].fieldtype === 'one-to-many') {
                                    entityInstance.data[metaData[property.name].fkcolumn.slice(0, -2)] = this;
                                }
                                else if (metaData[property.name].fieldtype === 'many-to-many') {
                                    var manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + this.metaData.className.slice(1));
                                    if (angular.isUndefined(entityInstance.data[manyToManyName])) {
                                        entityInstance.data[manyToManyName] = [];
                                    }
                                    entityInstance.data[manyToManyName].push(this);
                                }
                                if (angular.isDefined(metaData[property.name])) {
                                    if (angular.isDefined(entityInstance.metaData[metaData[property.name].fkcolumn.slice(0, -2)])) {
                                        if (angular.isUndefined(entityInstance.parents)) {
                                            entityInstance.parents = [];
                                        }
                                        entityInstance.parents.push(entityInstance.metaData[metaData[property.name].fkcolumn.slice(0, -2)]);
                                    }
                                    if (angular.isUndefined(this.children)) {
                                        this.children = [];
                                    }
                                    var child = metaData[property.name];
                                    if (this.children.indexOf(child) === -1) {
                                        this.children.push(child);
                                    }
                                }
                                if (angular.isUndefined(this.data[property.name])) {
                                    this.data[property.name] = [];
                                }
                                this.data[property.name].push(entityInstance);
                                return entityInstance;
                            };
                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                                var thisEntityInstance = this;
                                if (angular.isDefined(this['$$get' + this.$$getIDName().charAt(0).toUpperCase() + this.$$getIDName().slice(1)])) {
                                    var options = {
                                        filterGroupsConfig: angular.toJson([{
                                                "filterGroup": [
                                                    {
                                                        "propertyIdentifier": "_" + property.cfc.toLowerCase() + "." + property.fkcolumn.replace('ID', '') + "." + this.$$getIDName(),
                                                        "comparisonOperator": "=",
                                                        "value": this.$$getID()
                                                    }
                                                ]
                                            }]),
                                        allRecords: true
                                    };
                                    var collectionPromise = $delegate.getEntity(property.cfc, options);
                                    collectionPromise.then(function (response) {
                                        var entityInstances = [];
                                        for (var i in response.records) {
                                            var entityInstance = thisEntityInstance['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)]();
                                            entityInstance.$$init(response.records[i]);
                                            if (angular.isUndefined(thisEntityInstance[property.name])) {
                                                thisEntityInstance[property.name] = [];
                                            }
                                            entityInstances.push(entityInstance);
                                        }
                                        thisEntityInstance.data[property.name] = entityInstances;
                                    });
                                    return collectionPromise;
                                }
                            };
                            Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                configurable: true,
                                enumerable: false,
                                get: function () {
                                    if (this.data[property.name] == null) {
                                        return undefined;
                                    }
                                    return this.data[property.name];
                                },
                                set: function (value) {
                                    this.data[property.name] = [];
                                    if (angular.isArray(value)) {
                                        for (var i = 0; i < value.length; i++) {
                                            var item = value[i];
                                            var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
                                            entityInstance.$$init(item);
                                            this['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)](entityInstance);
                                        }
                                    }
                                    else {
                                        var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
                                        entityInstance.$$init(value);
                                        this['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)](entityInstance);
                                    }
                                }
                            });
                        }
                        else {
                            if (['id'].indexOf(property.fieldtype) >= 0) {
                                _jsEntities[entity.className].prototype['$$getID'] = function () {
                                    //this should retreive id from the metadata
                                    return this.data[this.$$getIDName()];
                                };
                                _jsEntities[entity.className].prototype['$$getIDName'] = function () {
                                    var IDNameString = property.name;
                                    return IDNameString;
                                };
                            }
                            if (property.name !== 'data' && property.name !== 'validations') {
                                Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                    configurable: true,
                                    enumerable: false,
                                    get: function () {
                                        if (this.data[property.name] == null) {
                                            return undefined;
                                        }
                                        return this.data[property.name];
                                    },
                                    set: function (value) {
                                        this.data[property.name] = value;
                                    }
                                });
                            }
                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                                return this.data[property.name];
                            };
                        }
                    }
                    else {
                        if (property.name !== 'data' && property.name !== 'validations') {
                            Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
                                configurable: true,
                                enumerable: false,
                                get: function () {
                                    if (this.data[property.name] == null) {
                                        return undefined;
                                    }
                                    return this.data[property.name];
                                },
                                set: function (value) {
                                    this.data[property.name] = value;
                                }
                            });
                        }
                        _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
                            return this.data[property.name];
                        };
                    }
                    //}
                }
            });
        });
        $delegate.setJsEntities(_jsEntities);
        angular.forEach(_jsEntities, function (jsEntity) {
            var jsEntityInstance = new jsEntity;
            _jsEntityInstances[jsEntityInstance.metaData.className] = jsEntityInstance;
        });
        $delegate.setJsEntityInstances(_jsEntityInstances);
        var _init = function (entityInstance, data) {
            hibachiValidationService.init(entityInstance, data);
        };
        var _getPropertyTitle = function (propertyName, metaData) {
            return $delegate.getPropertyTitle(propertyName, metaData);
        };
        var _getPropertyHint = function (propertyName, metaData) {
            var propertyMetaData = metaData[propertyName];
            var keyValue = '';
            if (angular.isDefined(propertyMetaData['hb_rbkey'])) {
                keyValue = metaData.$$getRBKey(propertyMetaData['hb_rbkey'] + '_hint');
            }
            else if (angular.isUndefined(propertyMetaData['persistent']) || (angular.isDefined(propertyMetaData['persistent']) && propertyMetaData['persistent'] === true)) {
                keyValue = metaData.$$getRBKey('entity.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + '_hint');
            }
            else {
                keyValue = metaData.$$getRBKey('object.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
            }
            if (keyValue.slice(-8) !== '_missing') {
                return keyValue;
            }
            return '';
        };
        var _getPropertyFieldType = function (propertyName, metaData) {
            var propertyMetaData = metaData[propertyName];
            if (angular.isDefined(propertyMetaData['hb_formfieldtype'])) {
                return propertyMetaData['hb_formfieldtype'];
            }
            if (angular.isUndefined(propertyMetaData.fieldtype) || propertyMetaData.fieldtype === 'column') {
                var dataType = "";
                if (angular.isDefined(propertyMetaData.ormtype)) {
                    dataType = propertyMetaData.ormtype;
                }
                else if (angular.isDefined(propertyMetaData.type)) {
                    dataType = propertyMetaData.type;
                }
                if (["boolean", "yes_no", "true_false"].indexOf(dataType) > -1) {
                    return "yesno";
                }
                else if (["date", "timestamp"].indexOf(dataType) > -1) {
                    return "dateTime";
                }
                else if ("array" === dataType) {
                    return "select";
                }
                else if ("struct" === dataType) {
                    return "checkboxgroup";
                }
                else if (propertyName.indexOf('password') > -1) {
                    return "password";
                }
            }
            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'many-to-one') {
                return 'select';
            }
            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'one-to-many') {
                return 'There is no property field type for one-to-many relationship properties, which means that you cannot get a fieldtype for ' + propertyName;
            }
            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'many-to-many') {
                return "listingMultiselect";
            }
            return "text";
        };
        var _getPropertyFormatType = function (propertyName, metaData) {
            if (!propertyName || !metaData) {
                return 'none';
            }
            var propertyMetaData = metaData[propertyName];
            if (propertyMetaData['hb_formattype']) {
                return propertyMetaData['hb_formattype'];
            }
            else if (angular.isUndefined(propertyMetaData.fieldtype) || propertyMetaData.fieldtype === 'column') {
                var dataType = "";
                if (angular.isDefined(propertyMetaData.ormtype)) {
                    dataType = propertyMetaData.ormtype;
                }
                else if (angular.isDefined(propertyMetaData.type)) {
                    dataType = propertyMetaData.type;
                }
                if (["boolean", "yes_no", "true_false"].indexOf(dataType) > -1) {
                    return "yesno";
                }
                else if (["date", "timestamp"].indexOf(dataType) > -1) {
                    return "dateTime";
                }
                else if (["big_decimal"].indexOf(dataType) > -1 && propertyName.slice(-6) === 'weight') {
                    return "weight";
                }
                else if (["big_decimal"].indexOf(dataType) > -1) {
                    return "currency";
                }
            }
            return 'none';
        };
        var _isSimpleValue = function (value) {
            return !!(angular.isString(value) || angular.isNumber(value)
                || angular.isDate(value) || value === false || value === true);
        };
        var _getFormattedValue = function (propertyName, formatType, entityInstance) {
            var value = entityInstance.$$getPropertyByName(propertyName);
            if (angular.isUndefined(formatType)) {
                formatType = entityInstance.metaData.$$getPropertyFormatType(propertyName);
            }
            if (formatType === "custom") {
                //to be implemented
                //return entityInstance['$$get'+propertyName+Formatted]();
            }
            else if (formatType === "rbkey") {
                if (angular.isDefined(value)) {
                    return entityInstance.$$getRBKey('entity.' + entityInstance.metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + '.' + value);
                }
                else {
                    return '';
                }
            }
            if (angular.isUndefined(value)) {
                var propertyMeta = entityInstance.metaData[propertyName];
                if (angular.isDefined(propertyMeta['hb_nullRBKey'])) {
                    return entityInstance.$$getRbKey(propertyMeta['hb_nullRBKey']);
                }
                return "";
            }
            else if (_isSimpleValue(value)) {
                var formatDetails = {};
                if (angular.isDefined(entityInstance.data['currencyCode'])) {
                    formatDetails.currencyCode = entityInstance.$$getCurrencyCode();
                }
                return utilityService.formatValue(value, formatType, formatDetails, entityInstance);
            }
        };
        var _delete = function (entityInstance) {
            var entityName = entityInstance.metaData.className;
            var entityID = entityInstance.$$getID();
            var context = 'delete';
            return $delegate.saveEntity(entityName, entityID, {}, context);
        };
        var _setValueByPropertyPath = function (obj, path, value) {
            var a = path.split('.');
            var context = obj;
            var selector;
            var myregexp = /([a-zA-Z]+)(\[(\d)\])+/; // matches:  item[0]
            var match = null;
            for (var i = 0; i < a.length - 1; i += 1) {
                match = myregexp.exec(a[i]);
                if (match !== null)
                    context = context[match[1]][match[3]];
                else
                    context = context[a[i]];
            }
            // check for ending item[xx] syntax
            match = myregexp.exec([a[a.length - 1]]);
            if (match !== null)
                context[match[1]][match[3]] = value;
            else
                context[a[a.length - 1]] = value;
        };
        var _getValueByPropertyPath = function (obj, path) {
            var paths = path.split('.'), current = obj, i;
            for (i = 0; i < paths.length; ++i) {
                if (current[paths[i]] == undefined) {
                    return undefined;
                }
                else {
                    current = current[paths[i]];
                }
            }
            return current;
        };
        var _addReturnedIDs = function (returnedIDs, entityInstance) {
            for (var key in returnedIDs) {
                if (angular.isArray(returnedIDs[key])) {
                    var arrayItems = returnedIDs[key];
                    var entityInstanceArray = entityInstance.data[key];
                    for (var i in arrayItems) {
                        var arrayItem = arrayItems[i];
                        var entityInstanceArrayItem = entityInstance.data[key][i];
                        _addReturnedIDs(arrayItem, entityInstanceArrayItem);
                    }
                }
                else if (angular.isObject(returnedIDs[key])) {
                    for (var k in returnedIDs[key]) {
                        _addReturnedIDs(returnedIDs[key][k], entityInstance.data[key][k]);
                    }
                }
                else {
                    entityInstance.data[key] = returnedIDs[key];
                }
            }
        };
        var _save = function (entityInstance) {
            var deferred = $q.defer();
            $timeout(function () {
                //$log.debug('save begin');
                //$log.debug(entityInstance);
                var entityID = entityInstance.$$getID();
                var modifiedData = _getModifiedData(entityInstance);
                //$log.debug('modifiedData complete');
                //$log.debug(modifiedData);
                //timeoutPromise.valid = modifiedData.valid;
                if (modifiedData.valid) {
                    var params = {};
                    params.serializedJsonData = utilityService.toJson(modifiedData.value);
                    //if we have a process object then the context is different from the standard save
                    var entityName = '';
                    var context = 'save';
                    if (entityInstance.metaData.isProcessObject === 1) {
                        var processStruct = modifiedData.objectLevel.metaData.className.split('_');
                        entityName = processStruct[0];
                        context = processStruct[1];
                    }
                    else {
                        entityName = modifiedData.objectLevel.metaData.className;
                    }
                    var savePromise = $delegate.saveEntity(entityName, entityID, params, context);
                    savePromise.then(function (response) {
                        var returnedIDs = response.data;
                        if ((angular.isDefined(response.SUCCESS) && response.SUCCESS === true)
                            || (angular.isDefined(response.success) && response.success === true)) {
                            if ($location.url() == '/entity/' + entityName + '/create' && response.data[modifiedData.objectLevel.$$getIDName()]) {
                                $location.path('/entity/' + entityName + '/' + response.data[modifiedData.objectLevel.$$getIDName()], false);
                            }
                            _addReturnedIDs(returnedIDs, modifiedData.objectLevel);
                            deferred.resolve(returnedIDs);
                            observerService.notify('saveSuccess', returnedIDs);
                            observerService.notify('saveSuccess' + entityName, returnedIDs);
                        }
                        else {
                            deferred.reject(angular.isDefined(response.messages) ? response.messages : response);
                            observerService.notify('saveFailed', response);
                            observerService.notify('saveFailed' + entityName, response);
                        }
                    }, function (reason) {
                        deferred.reject(reason);
                        observerService.notify('saveFailed', reason);
                        observerService.notify('saveFailed' + entityName, reason);
                    });
                }
                else {
                    //select first, visible, and enabled input with a class of ng-invalid
                    var target = $('input.ng-invalid:first:visible:enabled');
                    if (angular.isDefined(target)) {
                        target.focus();
                        var targetID = target.attr('id');
                        $anchorScroll();
                    }
                    deferred.reject('Input is invalid.');
                    observerService.notify('validationFailed');
                    observerService.notify('validationFailed' + entityName);
                }
            });
            //return timeoutPromise;
            return deferred.promise;
            /*

            */
        };
        var _getModifiedData = function (entityInstance) {
            var modifiedData = {};
            modifiedData = getModifiedDataByInstance(entityInstance);
            return modifiedData;
        };
        var getObjectSaveLevel = function (entityInstance) {
            return hibachiValidationService.getObjectSaveLevel(entityInstance);
        };
        var validateObject = function (entityInstance) {
            return hibachiValidationService.validateObject;
        };
        var validateChildren = function (entityInstance) {
            return hibachiValidationService.validateChildren(entityInstance);
        };
        var processChild = function (entityInstance, entityInstanceParent) {
            return hibachiValidationService.processChild(entityInstance, entityInstanceParent);
        };
        var processParent = function (entityInstance) {
            return hibachiValidationService.processParent(entityInstance);
        };
        var processForm = function (form, entityInstance) {
            return hibachiValidationService.processForm(form, entityInstance);
        };
        var getDataFromParents = function (entityInstance, entityInstanceParents) {
            return hibachiValidationService.getDataFromParents(entityInstance, entityInstanceParents);
        };
        var getDataFromChildren = function (entityInstance) {
            return hibachiValidationService.getDataFromChildren(entityInstance);
        };
        var getModifiedDataByInstance = function (entityInstance) {
            return hibachiValidationService.getModifiedDataByInstance(entityInstance);
        };
        var _getValidationsByProperty = function (entityInstance, property) {
            return hibachiValidationService.getValidationsByProperty(entityInstance, property);
        };
        var _getValidationByPropertyAndContext = function (entityInstance, property, context) {
            return hibachiValidationService.getValidationByPropertyAndContext(entityInstance, property, context);
        };
        return $delegate;
    }
    return HibachiServiceDecorator;
}());
exports.HibachiServiceDecorator = HibachiServiceDecorator;


/***/ }),
/* 836 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var HibachiValidationService = /** @class */ (function () {
    //@ngInject
    function HibachiValidationService($log) {
        var _this = this;
        this.$log = $log;
        this.getObjectSaveLevel = function (entityInstance) {
            var objectLevel = entityInstance;
            var entityID = entityInstance.$$getID();
            angular.forEach(entityInstance.parents, function (parentObject) {
                if (angular.isDefined(entityInstance.data[parentObject.name]) && entityInstance.data[parentObject.name].$$getID() === '' && (angular.isUndefined(entityID) || !entityID.trim().length)) {
                    var parentEntityInstance = entityInstance.data[parentObject.name];
                    var parentEntityID = parentEntityInstance.$$getID();
                    if (parentEntityID === '' && parentEntityInstance.forms) {
                        objectLevel = _this.getObjectSaveLevel(parentEntityInstance);
                    }
                }
            });
            return objectLevel;
        };
        this.getModifiedDataByInstance = function (entityInstance) {
            var modifiedData = {};
            var objectSaveLevel = _this.getObjectSaveLevel(entityInstance);
            _this.$log.debug('objectSaveLevel : ' + objectSaveLevel);
            var valueStruct = _this.validateObject(objectSaveLevel);
            _this.$log.debug('validateObject data');
            _this.$log.debug(valueStruct.value);
            modifiedData = {
                objectLevel: objectSaveLevel,
                value: valueStruct.value,
                valid: valueStruct.valid
            };
            return modifiedData;
        };
        this.getValidationByPropertyAndContext = function (entityInstance, property, context) {
            var validations = _this.getValidationsByProperty(entityInstance, property);
            for (var i in validations) {
                var contexts = validations[i].contexts.split(',');
                for (var j in contexts) {
                    if (contexts[j] === context) {
                        return validations[i];
                    }
                }
            }
        };
        this.getValidationsByProperty = function (entityInstance, property) {
            return entityInstance.validations.properties[property];
        };
        this.validateObject = function (entityInstance) {
            var modifiedData = {};
            var valid = true;
            var forms = entityInstance.forms;
            _this.$log.debug('process base level data');
            for (var f in forms) {
                var form = forms[f];
                form.$setSubmitted(); //Sets the form to submitted for the validation errors to pop up.
                if (form.$dirty && form.$valid) {
                    for (var key in form) {
                        _this.$log.debug('key:' + key);
                        if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
                            var inputField = form[key];
                            if (typeof inputField.$modelValue != 'undefined' && inputField.$modelValue !== '') {
                                inputField.$dirty = true;
                            }
                            if (angular.isDefined(inputField.$valid) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
                                if (angular.isDefined(entityInstance.metaData[key])
                                    && angular.isDefined(entityInstance.metaData[key].hb_formfieldtype)
                                    && entityInstance.metaData[key].hb_formfieldtype === 'json') {
                                    modifiedData[key] = angular.toJson(inputField.$modelValue);
                                }
                                else {
                                    modifiedData[key] = inputField.$modelValue;
                                }
                            }
                        }
                    }
                }
                else {
                    if (!form.$valid) {
                        valid = false;
                    }
                }
            }
            modifiedData[entityInstance.$$getIDName()] = entityInstance.$$getID();
            _this.$log.debug(modifiedData);
            _this.$log.debug('process parent data');
            if (angular.isDefined(entityInstance.parents)) {
                for (var p in entityInstance.parents) {
                    var parentObject = entityInstance.parents[p];
                    var parentInstance = entityInstance.data[parentObject.name];
                    if (angular.isUndefined(modifiedData[parentObject.name])) {
                        modifiedData[parentObject.name] = {};
                    }
                    var forms = parentInstance.forms;
                    for (var f in forms) {
                        var form = forms[f];
                        form.$setSubmitted();
                        if (form.$dirty && form.$valid) {
                            for (var key in form) {
                                if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
                                    var inputField = form[key];
                                    if (typeof inputField.$modelValue != 'undefined' && inputField.$modelValue !== '') {
                                        inputField.$dirty = true;
                                    }
                                    if (angular.isDefined(inputField) && angular.isDefined(inputField.$valid) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
                                        if (angular.isDefined(parentInstance.metaData[key])
                                            && angular.isDefined(parentInstance.metaData[key].hb_formfieldtype)
                                            && parentInstance.metaData[key].hb_formfieldtype === 'json') {
                                            modifiedData[parentObject.name][key] = angular.toJson(inputField.$modelValue);
                                        }
                                        else {
                                            modifiedData[parentObject.name][key] = inputField.$modelValue;
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if (!form.$valid) {
                                valid = false;
                            }
                        }
                    }
                    modifiedData[parentObject.name][parentInstance.$$getIDName()] = parentInstance.$$getID();
                }
            }
            _this.$log.debug(modifiedData);
            _this.$log.debug('begin child data');
            var childrenData = _this.validateChildren(entityInstance);
            _this.$log.debug('child Data');
            _this.$log.debug(childrenData);
            angular.extend(modifiedData, childrenData);
            return {
                valid: valid,
                value: modifiedData
            };
        };
        this.validateChildren = function (entityInstance) {
            var data = {};
            if (angular.isDefined(entityInstance.children) && entityInstance.children.length) {
                data = _this.getDataFromChildren(entityInstance);
            }
            return data;
        };
        this.init = function (entityInstance, data) {
            for (var key in data) {
                if (key.charAt(0) !== '$' && angular.isDefined(entityInstance.metaData[key])) {
                    var propertyMetaData = entityInstance.metaData[key];
                    if (angular.isDefined(propertyMetaData) && angular.isDefined(propertyMetaData.hb_formfieldtype) && propertyMetaData.hb_formfieldtype === 'json') {
                        if (data[key].trim() !== '') {
                            entityInstance.data[key] = angular.fromJson(data[key]);
                        }
                    }
                    else {
                        entityInstance.data[key] = data[key];
                    }
                }
            }
        };
        this.processForm = function (form, entityInstance) {
            _this.$log.debug('begin process form');
            var data = {};
            form.$setSubmitted();
            for (var key in form) {
                if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
                    var inputField = form[key];
                    if (inputField.$modelValue) {
                        inputField.$dirty = true;
                    }
                    if (angular.isDefined(inputField) && angular.isDefined(inputField) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
                        if (angular.isDefined(entityInstance.metaData[key]) && angular.isDefined(entityInstance.metaData[key].hb_formfieldtype) && entityInstance.metaData[key].hb_formfieldtype === 'json') {
                            data[key] = angular.toJson(inputField.$modelValue);
                        }
                        else {
                            data[key] = inputField.$modelValue;
                        }
                    }
                }
            }
            data[entityInstance.$$getIDName()] = entityInstance.$$getID();
            _this.$log.debug('process form data');
            _this.$log.debug(data);
            return data;
        };
        this.processParent = function (entityInstance) {
            var data = {};
            if (entityInstance.$$getID() !== '') {
                data[entityInstance.$$getIDName()] = entityInstance.$$getID();
            }
            _this.$log.debug('processParent');
            _this.$log.debug(entityInstance);
            var forms = entityInstance.forms;
            for (var f in forms) {
                var form = forms[f];
                data = angular.extend(data, _this.processForm(form, entityInstance));
            }
            return data;
        };
        this.processChild = function (entityInstance, entityInstanceParent) {
            var data = {};
            var forms = entityInstance.forms;
            for (var f in forms) {
                var form = forms[f];
                angular.extend(data, _this.processForm(form, entityInstance));
            }
            if (angular.isDefined(entityInstance.children) && entityInstance.children.length) {
                var childData = _this.getDataFromChildren(entityInstance);
                angular.extend(data, childData);
            }
            if (angular.isDefined(entityInstance.parents) && entityInstance.parents.length) {
                var parentData = _this.getDataFromParents(entityInstance, entityInstanceParent);
                angular.extend(data, parentData);
            }
            return data;
        };
        this.getDataFromParents = function (entityInstance, entityInstanceParent) {
            var data = {};
            for (var c in entityInstance.parents) {
                var parentMetaData = entityInstance.parents[c];
                if (angular.isDefined(parentMetaData)) {
                    var parent = entityInstance.data[parentMetaData.name];
                    if (angular.isObject(parent) && entityInstanceParent !== parent && parent.$$getID() !== '') {
                        if (angular.isUndefined(data[parentMetaData.name])) {
                            data[parentMetaData.name] = {};
                        }
                        var parentData = _this.processParent(parent);
                        _this.$log.debug('parentData:' + parentMetaData.name);
                        _this.$log.debug(parentData);
                        angular.extend(data[parentMetaData.name], parentData);
                    }
                    else {
                    }
                }
            }
            ;
            return data;
        };
        this.getDataFromChildren = function (entityInstance) {
            var data = {};
            _this.$log.debug('childrenFound');
            _this.$log.debug(entityInstance.children);
            for (var c in entityInstance.children) {
                var childMetaData = entityInstance.children[c];
                var children = entityInstance.data[childMetaData.name];
                _this.$log.debug(childMetaData);
                _this.$log.debug(children);
                if (angular.isArray(entityInstance.data[childMetaData.name])) {
                    if (angular.isUndefined(data[childMetaData.name])) {
                        data[childMetaData.name] = [];
                    }
                    angular.forEach(entityInstance.data[childMetaData.name], function (child, key) {
                        _this.$log.debug('process child array item');
                        var childData = _this.processChild(child, entityInstance);
                        _this.$log.debug('process child return');
                        _this.$log.debug(childData);
                        data[childMetaData.name].push(childData);
                    });
                }
                else {
                    if (angular.isUndefined(data[childMetaData.name])) {
                        data[childMetaData.name] = {};
                    }
                    var child = entityInstance.data[childMetaData.name];
                    _this.$log.debug('begin process child');
                    var childData = _this.processChild(child, entityInstance);
                    _this.$log.debug('process child return');
                    _this.$log.debug(childData);
                    angular.extend(data, childData);
                }
            }
            _this.$log.debug('returning child data');
            _this.$log.debug(data);
            return data;
        };
        this.$log = $log;
    }
    return HibachiValidationService;
}());
exports.HibachiValidationService = HibachiValidationService;


/***/ }),
/* 837 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var HistoryService = /** @class */ (function () {
    //ngInject
    function HistoryService() {
        var _this = this;
        this.histories = {};
        this.recordHistory = function (key, data, overwrite) {
            if (overwrite === void 0) { overwrite = false; }
            if (angular.isUndefined(_this.histories[key]) || overwrite) {
                _this.histories[key] = [];
            }
            _this.histories[key].push(data);
        };
        this.hasHistory = function (key) {
            return angular.isDefined(_this.histories[key]);
        };
        this.getHistory = function (key) {
            if (angular.isDefined(_this.histories[key])) {
                return _this.histories[key];
            }
        };
        this.deleteHistory = function (key) {
            _this.histories[key] = [];
        };
    }
    return HistoryService;
}());
exports.HistoryService = HistoryService;


/***/ }),
/* 838 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var LocalStorageService = /** @class */ (function () {
    //@ngInject
    function LocalStorageService($window) {
        var _this = this;
        this.$window = $window;
        this.hasItem = function (key) {
            //try catch to handle safari in private mode which does not allow localstorage
            try {
                return (_this.$window.localStorage.getItem(key)
                    && _this.$window.localStorage.getItem(key) !== null
                    && _this.$window.localStorage.getItem(key) !== "undefined");
            }
            catch (e) {
                return false;
            }
        };
        this.getItem = function (key) {
            var value = _this.$window.localStorage.getItem(key);
            if (value.charAt(0) === '{' || value.charAt(0) === '[') {
                value = angular.fromJson(value);
            }
            return value;
        };
        this.setItem = function (key, data) {
            //try catch to handle safari in private mode which does not allow localstorage
            try {
                if (angular.isObject(data) || angular.isArray(data)) {
                    data = angular.toJson(data);
                }
                _this.$window.localStorage.setItem(key, data);
            }
            catch (e) {
            }
        };
        this.$window = $window;
    }
    return LocalStorageService;
}());
exports.LocalStorageService = LocalStorageService;


/***/ }),
/* 839 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var MetaDataService = /** @class */ (function () {
    //@ngInject
    function MetaDataService($filter, $log) {
        var _this = this;
        this.$filter = $filter;
        this.$log = $log;
        this.getPropertyHintByObjectAndPropertyIdentifier = function (object, propertyIdentifier) {
            var hint = "";
            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
                    hint = object.metaData && object.metaData[propertyIdentifier].attributeHint;
                }
                else {
                    hint = object.metaData.$$getPropertyHint(propertyIdentifier);
                }
            }
            return hint;
        };
        this.getPropertyTitle = function (object, propertyIdentifier) {
            var title = "";
            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
                    title = object.metaData && object.metaData[propertyIdentifier].attributeName;
                }
                else {
                    title = object.metaData.$$getPropertyTitle(propertyIdentifier);
                }
            }
            return title;
        };
        this.getPropertyFieldType = function (object, propertyIdentifier) {
            var fieldType = "";
            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
                    fieldType = object.metaData && object.metaData[propertyIdentifier].attributeInputType;
                }
                else {
                    fieldType = object.metaData.$$getPropertyFieldType(propertyIdentifier);
                }
            }
            return fieldType;
        };
        this.isAttributePropertyByEntityAndPropertyIdentifier = function (object, propertyIdentifier) {
            return object.metaData && object.metaData[propertyIdentifier] && object.metaData[propertyIdentifier].attributeCode == propertyIdentifier;
        };
        this.hasPropertyByEntityNameAndPropertyIdentifier = function (object, propertyIdentifier) {
            return object.metaData && object.metaData[propertyIdentifier];
        };
        this.getPropertiesList = function () {
            return _this._propertiesList;
        };
        this.getPropertiesListByBaseEntityAlias = function (baseEntityAlias) {
            return _this._propertiesList[baseEntityAlias];
        };
        this.setPropertiesList = function (value, key) {
            _this._propertiesList[key] = value;
        };
        this.formatPropertiesList = function (propertiesList, propertyIdentifier) {
            if (!propertiesList) {
                propertiesList = {};
            }
            if (!propertiesList.data) {
                propertiesList.data = [];
            }
            var simpleGroup = {
                $$group: 'simple',
            };
            propertiesList.data.push(simpleGroup);
            var drillDownGroup = {
                $$group: 'drilldown',
            };
            propertiesList.data.push(drillDownGroup);
            var compareCollections = {
                $$group: 'compareCollections',
            };
            propertiesList.data.push(compareCollections);
            var attributeCollections = {
                $$group: 'attribute',
            };
            propertiesList.data.push(attributeCollections);
            for (var i in propertiesList.data) {
                if (angular.isDefined(propertiesList.data[i].ormtype)) {
                    if (angular.isDefined(propertiesList.data[i].attributeID)) {
                        propertiesList.data[i].$$group = 'attribute';
                    }
                    else {
                        propertiesList.data[i].$$group = 'simple';
                    }
                }
                if (angular.isDefined(propertiesList.data[i].fieldtype)) {
                    if (propertiesList.data[i].fieldtype === 'id') {
                        propertiesList.data[i].$$group = 'simple';
                    }
                    if (propertiesList.data[i].fieldtype === 'many-to-one') {
                        propertiesList.data[i].$$group = 'drilldown';
                    }
                    if (propertiesList.data[i].fieldtype === 'many-to-many' || propertiesList.data[i].fieldtype === 'one-to-many') {
                        propertiesList.data[i].$$group = 'compareCollections';
                    }
                }
                var divider = '_';
                if (propertiesList.data[i].$$group == 'simple' || propertiesList.data[i].$$group == 'attribute') {
                    divider = '.';
                }
                propertiesList.data[i].propertyIdentifier = propertyIdentifier + divider + propertiesList.data[i].name;
            }
            //propertiesList.data = _orderBy(propertiesList.data,['displayPropertyIdentifier'],false);
            //--------------------------------Removes empty lines from dropdown.
            var temp = [];
            for (var i_1 = 0; i_1 <= propertiesList.data.length - 1; i_1++) {
                if (propertiesList.data[i_1].propertyIdentifier.indexOf(".undefined") != -1 || propertiesList.data[i_1].propertyIdentifier.indexOf("_undefined") != -1) {
                    _this.$log.debug("removing: " + propertiesList.data[i_1].displayPropertyIdentifier);
                    propertiesList.data[i_1].displayPropertyIdentifier = "hide";
                }
                else {
                    temp.push(propertiesList.data[i_1]);
                    _this.$log.debug(propertiesList.data[i_1]);
                }
            }
            temp.sort;
            propertiesList.data = temp;
            _this.$log.debug("----------------------PropertyList\n\n\n\n\n");
            propertiesList.data = _this._orderBy(propertiesList.data, ['propertyIdentifier'], false);
            //--------------------------------End remove empty lines.
        };
        this.orderBy = function (propertiesList, predicate, reverse) {
            return _this._orderBy(propertiesList, predicate, reverse);
        };
        this.$filter = $filter;
        this.$log = $log;
        this._propertiesList = {};
        this._orderBy = $filter('orderBy');
    }
    MetaDataService.$inject = [
        '$filter',
        '$log'
    ];
    return MetaDataService;
}());
exports.MetaDataService = MetaDataService;


/***/ }),
/* 840 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * @ngdoc service
 * @name sdt.models:ObserverService
 * @description
 * # ObserverService
 * Manages all events inside the application
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseservice_1 = __webpack_require__(70);
var ObserverService = /** @class */ (function (_super) {
    __extends(ObserverService, _super);
    //@ngInject
    function ObserverService($timeout, historyService, utilityService) {
        var _this = 
        /**
         * @ngdoc property
         * @name ObserverService#observers
         * @propertyOf sdt.models:ObserverService
         * @description object to store all observers in
         * @returns {object} object
         */
        _super.call(this) || this;
        _this.$timeout = $timeout;
        _this.historyService = historyService;
        _this.utilityService = utilityService;
        /* Declare methods */
        /**
         * @ngdoc method
         * @name ObserverService#attach
         * @methodOf sdt.models:ObserverService
         * @param {function} callback the callback function to fire
         * @param {string} event name of the event
         * @param {string} id unique id for the object that is listening i.e. namespace
         * @description adds events listeners
         */
        _this.attach = function (callback, event, id) {
            if (!id) {
                id = _this.utilityService.createID();
            }
            event = event.toLowerCase();
            id = id.toLowerCase();
            if (!_this.observers[event]) {
                _this.observers[event] = {};
            }
            if (!_this.observers[event][id])
                _this.observers[event][id] = [];
            _this.observers[event][id].push(callback);
        };
        /**
         * @ngdoc method
         * @name ObserverService#detachById
         * @methodOf sdt.models:ObserverService
         * @param {string} id unique id for the object that is listening i.e. namespace
         * @description removes all events for a specific id from the observers object
         */
        _this.detachById = function (id) {
            id = id.toLowerCase();
            for (var event in _this.observers) {
                _this.detachByEventAndId(event, id);
            }
        };
        /**
         * @ngdoc method
         * @name ObserverService#detachById
         * @methodOf sdt.models:ObserverService
         * @param {string} event name of the event
         * @description removes removes all the event from the observer object
         */
        _this.detachByEvent = function (event) {
            event = event.toLowerCase();
            if (event in _this.observers) {
                delete _this.observers[event];
            }
        };
        /**
         * @ngdoc method
         * @name ObserverService#detachByEventAndId
         * @methodOf sdt.models:ObserverService
         * @param {string} event name of the event
         * @param {string} id unique id for the object that is listening i.e. namespace
         * @description removes removes all callbacks for an id in a specific event from the observer object
         */
        _this.detachByEventAndId = function (event, id) {
            event = event.toLowerCase();
            id = id.toLowerCase();
            if (event in _this.observers) {
                if (id in _this.observers[event]) {
                    delete _this.observers[event][id];
                }
            }
        };
        /**
         * @ngdoc method
         * @name ObserverService#notify
         * @methodOf sdt.models:ObserverService
         * @param {string} event name of the event
         * @param {string|object|Array|number} parameters pass whatever your listener is expecting
         * @description notifies all observers of a specific event
         */
        _this.notify = function (event, parameters) {
            console.warn(event, parameters);
            event = event.toLowerCase();
            return _this.$timeout(function () {
                for (var id in _this.observers[event]) {
                    for (var _i = 0, _a = _this.observers[event][id]; _i < _a.length; _i++) {
                        var callback = _a[_i];
                        callback(parameters);
                    }
                }
            });
        };
        /**
         * @ngdoc method
         * @name ObserverService#notifyById
         * @methodOf sdt.models:ObserverService
         * @param {string} event name of the event
         * @param {string} eventId unique id for the object that is listening i.e. namespace
         * @param {string|object|Array|number} parameters pass whatever your listener is expecting
         * @description notifies observers of a specific event by id
         */
        _this.notifyById = function (event, eventId, parameters) {
            event = event.toLowerCase();
            eventId = eventId.toLowerCase();
            return _this.$timeout(function () {
                for (var id in _this.observers[event]) {
                    if (id != eventId)
                        continue;
                    angular.forEach(_this.observers[event][id], function (callback) {
                        callback(parameters);
                    });
                }
            });
        };
        _this.notifyAndRecord = function (event, parameters) {
            return _this.notify(event, parameters).then(function () {
                _this.historyService.recordHistory(event, parameters, true);
            });
        };
        _this.observers = {};
        return _this;
    }
    return ObserverService;
}(baseservice_1.BaseService));
exports.ObserverService = ObserverService;


/***/ }),
/* 841 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(17);
var OrderPaymentService = /** @class */ (function (_super) {
    __extends(OrderPaymentService, _super);
    //@ngInject
    function OrderPaymentService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'OrderPayment') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return OrderPaymentService;
}(baseentityservice_1.BaseEntityService));
exports.OrderPaymentService = OrderPaymentService;


/***/ }),
/* 842 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(17);
var OrderService = /** @class */ (function (_super) {
    __extends(OrderService, _super);
    //@ngInject
    function OrderService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Order') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.newOrder_AddOrderPayment = function () {
            return _this.newProcessObject('Order_AddOrderPayment');
        };
        return _this;
    }
    return OrderService;
}(baseentityservice_1.BaseEntityService));
exports.OrderService = OrderService;


/***/ }),
/* 843 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var PublicService = /** @class */ (function () {
    ///index.cfm/api/scope/
    //@ngInject
    function PublicService($http, $q, $window, $location, $hibachi, $injector, requestService, accountService, cartService, orderService, observerService, appConfig, $timeout) {
        var _this = this;
        this.$http = $http;
        this.$q = $q;
        this.$window = $window;
        this.$location = $location;
        this.$hibachi = $hibachi;
        this.$injector = $injector;
        this.requestService = requestService;
        this.accountService = accountService;
        this.cartService = cartService;
        this.orderService = orderService;
        this.observerService = observerService;
        this.appConfig = appConfig;
        this.$timeout = $timeout;
        this.requests = {};
        this.errors = {};
        this.baseActionPath = "";
        this.months = [{ name: '01 - JAN', value: 1 }, { name: '02 - FEB', value: 2 }, { name: '03 - MAR', value: 3 }, { name: '04 - APR', value: 4 }, { name: '05 - MAY', value: 5 }, { name: '06 - JUN', value: 6 }, { name: '07 - JUL', value: 7 }, { name: '08 - AUG', value: 8 }, { name: '09 - SEP', value: 9 }, { name: '10 - OCT', value: 10 }, { name: '11 - NOV', value: 11 }, { name: '12 - DEC', value: 12 }];
        this.years = [];
        this.shippingAddress = "";
        this.accountAddressEditFormIndex = [];
        this.showStoreSelector = [];
        this.showEmailSelector = [];
        this.imagePath = {};
        this.successfulActions = [];
        this.failureActions = [];
        // public hasErrors = ()=>{
        //     return this.errors.length;
        // }
        /**
         * Helper methods for getting errors from the cart
         */
        this.getErrors = function () {
            _this.errors = {};
            for (var key in _this.requests) {
                var request = _this.requests[key];
                if (Object.keys(request.errors).length) {
                    _this.errors[key] = request.errors;
                }
            }
            return _this.errors;
        };
        /** grab the valid expiration years for credit cards  */
        this.getExpirationYears = function () {
            var baseDate = new Date();
            var today = baseDate.getFullYear();
            var start = today;
            for (var i = 0; i <= 15; i++) {
                _this.years.push({
                    name: start + i,
                    value: start + i,
                });
            }
        };
        /** accessors for account */
        this.getAccount = function (refresh) {
            if (refresh === void 0) { refresh = false; }
            var urlBase = _this.baseActionPath + 'getAccount/';
            if (!_this.accountDataPromise || refresh) {
                _this.accountDataPromise = _this.getData(urlBase, "account", "");
            }
            return _this.accountDataPromise;
        };
        /** accessors for cart */
        this.getCart = function (refresh) {
            if (refresh === void 0) { refresh = false; }
            var urlBase = _this.baseActionPath + 'getCart/';
            if (!_this.cartDataPromise || refresh) {
                _this.cartDataPromise = _this.getData(urlBase, "cart", "");
            }
            return _this.cartDataPromise;
        };
        /** accessors for countries */
        this.getCountries = function (refresh) {
            if (refresh === void 0) { refresh = false; }
            var urlBase = _this.baseActionPath + 'getCountries/';
            if (!_this.countryDataPromise || refresh) {
                _this.countryDataPromise = _this.getData(urlBase, "countries", "");
            }
            return _this.countryDataPromise;
        };
        /** accessors for states */
        this.getStates = function (countryCode, address, refresh) {
            if (refresh === void 0) { refresh = false; }
            if (address && address.data) {
                countryCode = address.data.countrycode || address.countrycode;
            }
            if (typeof address === 'boolean' && !angular.isDefined(refresh)) {
                refresh = address;
            }
            if (!angular.isDefined(countryCode))
                countryCode = "US";
            var urlBase = _this.baseActionPath + 'getStateCodeOptionsByCountryCode/';
            if (!_this.getRequestByAction('getStateCodeOptionsByCountryCode') || !_this.getRequestByAction('getStateCodeOptionsByCountryCode').loading || refresh) {
                _this.stateDataPromise = _this.getData(urlBase, "states", "?countryCode=" + countryCode);
                return _this.stateDataPromise;
            }
            return _this.stateDataPromise;
        };
        this.refreshAddressOptions = function (address) {
            _this.getStates(null, address);
            _this.getAddressOptions(null, address);
        };
        this.getStateByStateCode = function (stateCode) {
            if (!angular.isDefined(_this.states) || !angular.isDefined(_this.states.stateCodeOptions) || !angular.isDefined(stateCode)) {
                return;
            }
            for (var state in _this.states.stateCodeOptions) {
                if (_this.states.stateCodeOptions[state].value == stateCode) {
                    return _this.states.stateCodeOptions[state];
                }
            }
        };
        this.getCountryByCountryCode = function (countryCode) {
            if (!angular.isDefined(_this.countries) || !angular.isDefined(_this.countries.countryCodeOptions)) {
                return;
            }
            if (!countryCode) {
                countryCode = 'US';
            }
            for (var country in _this.countries.countryCodeOptions) {
                if (_this.countries.countryCodeOptions[country].value == countryCode) {
                    return _this.countries.countryCodeOptions[country];
                }
            }
        };
        /** accessors for states */
        this.getAddressOptions = function (countryCode, address, refresh) {
            if (refresh === void 0) { refresh = false; }
            if (address && address.data) {
                countryCode = address.data.countrycode || address.countrycode;
            }
            if (!angular.isDefined(countryCode))
                countryCode = "US";
            if (typeof address === 'boolean' && !angular.isDefined(refresh)) {
                refresh = address;
            }
            var urlBase = _this.baseActionPath + 'getAddressOptionsByCountryCode/';
            if (!_this.getRequestByAction('getAddressOptionsByCountryCode') || !_this.getRequestByAction('getAddressOptionsByCountryCode').loading || refresh) {
                _this.addressOptionData = _this.getData(urlBase, "addressOptions", "?countryCode=" + countryCode);
                return _this.addressOptionData;
            }
            return _this.addressOptionData;
        };
        /** accessors for states */
        this.getData = function (url, setter, param) {
            var urlBase = url + param;
            var request = _this.requestService.newPublicRequest(urlBase);
            request.promise.then(function (result) {
                //don't need account and cart for anything other than account and cart calls.
                if (setter.indexOf('account') == -1 || setter.indexOf('cart') == -1) {
                    if (result['account']) {
                        delete result['account'];
                    }
                    if (result['cart']) {
                        delete result['cart'];
                    }
                }
                if (setter == 'cart' || setter == 'account' && _this[setter] && _this[setter].populate) {
                    //cart and account return cart and account info flat
                    _this[setter].populate(result);
                }
                else {
                    //other functions reutrn cart,account and then data
                    if (setter == 'states') {
                        _this[setter] = {};
                        _this.$timeout(function () {
                            _this[setter] = (result);
                        });
                    }
                    else {
                        _this[setter] = (result);
                    }
                }
            }).catch(function (reason) {
            });
            _this.requests[request.getAction()] = request;
            return request.promise;
        };
        /** sets the current shipping address */
        this.setShippingAddress = function (shippingAddress) {
            _this.shippingAddress = shippingAddress;
        };
        /** sets the current shipping address */
        this.setBillingAddress = function (billingAddress) {
            _this.billingAddress = billingAddress;
        };
        /** sets the current billing address */
        this.selectBillingAddress = function (key) {
            if (_this.orderPaymentObject && _this.orderPaymentObject.forms) {
                var address = _this.account.accountAddresses[key].address;
                address.accountAddressID = _this.account.accountAddresses[key].accountAddressID;
                for (var property in address) {
                    for (var form in _this.orderPaymentObject['forms']) {
                        form = _this.orderPaymentObject['forms'][form];
                        if (form['newOrderPayment.billingAddress.' + property] != undefined) {
                            form['newOrderPayment.billingAddress.' + property].$setViewValue(address[property]);
                        }
                    }
                }
                _this.orderPaymentObject.newOrderPayment.billingAddress = address;
            }
        };
        /** this is the generic method used to call all server side actions.
        *  @param action {string} the name of the action (method) to call in the public service.
        *  @param data   {object} the params as key value pairs to pass in the post request.
        *  @return a deferred promise that resolves server response or error. also includes updated account and cart.
        */
        this.doAction = function (action, data, method) {
            //Prevent sending the same request multiple times in parallel
            if (_this.getRequestByAction(action) && _this.loadingThisRequest(action, data, false))
                return _this.$q.when();
            if (!action) {
                throw "Action is required exception";
            }
            var urlBase = _this.appConfig.baseURL;
            //check if the caller is defining a path to hit, otherwise use the public scope.
            if (action.indexOf(":") !== -1) {
                urlBase = urlBase + action; //any path
            }
            else {
                urlBase = _this.baseActionPath + action; //public path
            }
            if (data) {
                method = "post";
                data.returnJsonObjects = "cart,account";
            }
            else {
                urlBase += (urlBase.indexOf('?') == -1) ? '?' : '&';
                urlBase += "returnJsonObject=cart,account";
            }
            if (method == "post") {
                data.returnJsonObjects = "cart,account";
                //post
                var request_1 = _this.requestService.newPublicRequest(urlBase, data, method);
                request_1.promise.then(function (result) {
                    _this.processAction(result, request_1);
                }).catch(function (response) {
                });
                _this.requests[request_1.getAction()] = request_1;
                return request_1.promise;
            }
            else {
                //get
                var url = urlBase;
                var request_2 = _this.requestService.newPublicRequest(url, data, method);
                request_2.promise.then(function (result) {
                    _this.processAction(result, request_2);
                }).catch(function (reason) {
                });
                _this.requests[request_2.getAction()] = request_2;
                return request_2.promise;
            }
        };
        this.uploadFile = function (action, data) {
            _this.$timeout(function () {
                _this.uploadingFile = true;
            });
            var url = _this.appConfig.baseURL + action;
            var formData = new FormData();
            formData.append("fileName", data.fileName);
            formData.append("uploadFile", data.uploadFile);
            var xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.onload = function (result) {
                var response = JSON.parse(xhr.response);
                if (xhr.status === 200) {
                    _this.processAction(response, null);
                    _this.successfulActions = response.successfulActions;
                    _this.failureActions = response.failureActions;
                }
                _this.$timeout(function () {
                    _this.uploadingFile = false;
                });
            };
            xhr.send(formData);
        };
        this.processAction = function (response, request) {
            //Run any specific adjustments needed
            _this.runCheckoutAdjustments(response);
            //if the action that was called was successful, then success is true.
            if (request && request.hasSuccessfulAction()) {
                _this.successfulActions = [];
                for (var action in request.successfulActions) {
                    if (request.successfulActions[action].indexOf('public:cart.placeOrder') !== -1) {
                        _this.$window.location.href = _this.confirmationUrl;
                        return;
                    }
                    else if (request.successfulActions[action].indexOf('public:cart.finalizeCart') !== -1) {
                        _this.$window.location.href = _this.checkoutUrl;
                        return;
                    }
                    else if (request.successfulActions[action].indexOf('public:account.logout') !== -1) {
                        _this.account = _this.$hibachi.newAccount();
                    }
                    _this.successfulActions.push(request.successfulActions[action].split('.')[1]);
                }
            }
            if (request && request.hasFailureAction()) {
                _this.failureActions = [];
                for (var action in request.failureActions) {
                    _this.failureActions.push(request.failureActions[action].split('.')[1]);
                }
            }
            /** update the account and the cart */
            if (response.account) {
                _this.account.populate(response.account);
                _this.account.request = request;
            }
            if (response.cart) {
                _this.cart.populate(response.cart);
                _this.cart.request = request;
            }
            _this.errors = response.errors;
        };
        this.runCheckoutAdjustments = function (response) {
            _this.filterErrors(response);
            if (response.cart) {
                _this.removeInvalidOrderPayments(response.cart);
            }
        };
        this.getRequestByAction = function (action) {
            return _this.requests[action];
        };
        /**
         * Helper methods so that everything in account and cart can be accessed using getters.
         */
        this.userIsLoggedIn = function () {
            return _this.account.userIsLoggedIn();
        };
        this.getActivePaymentMethods = function () {
            var urlString = "/?" + _this.appConfig.action + "=admin:ajax.getActivePaymentMethods";
            var request = _this.requestService.newPublicRequest(urlString)
                .then(function (result) {
                if (angular.isDefined(result.data.paymentMethods)) {
                    _this.paymentMethods = result.data.paymentMethods;
                }
            });
            _this.requests[request.getAction()] = request;
        };
        this.filterErrors = function (response) {
            if (!response || !response.cart || !response.cart.errors)
                return;
            var cartErrors = response.cart.errors;
            if (cartErrors.addOrderPayment) {
                cartErrors.addOrderPayment = cartErrors.addOrderPayment.filter(function (error) { return error != 'billingAddress'; });
            }
        };
        /** Uses getRequestByAction() plus an identifier to distinguish between different functionality using the same route*/
        this.loadingThisRequest = function (action, conditions, strict) {
            var request = _this.getRequestByAction(action);
            if (!request || !request.loading)
                return false;
            for (var identifier in conditions) {
                if (!((conditions[identifier] === true && !strict) || request.data[identifier] == conditions[identifier])) {
                    return false;
                }
            }
            return true;
        };
        this.removeInvalidOrderPayments = function (cart) {
            cart.orderPayments = cart.orderPayments.filter(function (payment) { return !payment.hasErrors; });
        };
        /**
         * Given a payment method name, returns the id.
         */
        this.getPaymentMethodID = function (name) {
            for (var method in _this.paymentMethods) {
                if (_this.paymentMethods[method].paymentMethodName == name && _this.paymentMethods[method].activeFlag == "Yes ") {
                    return _this.paymentMethods[method].paymentMethodID;
                }
            }
        };
        /** Returns a boolean indicating whether or not the order has the named payment method.*/
        this.hasPaymentMethod = function (paymentMethodName) {
            for (var _i = 0, _a = _this.cart.orderPayments; _i < _a.length; _i++) {
                var payment = _a[_i];
                if (payment.paymentMethod.paymentMethodName === paymentMethodName)
                    return true;
            }
            return false;
        };
        this.hasCreditCardPaymentMethod = function () {
            return _this.hasPaymentMethod("Credit Card");
        };
        this.hasPaypalPaymentMethod = function () {
            return _this.hasPaymentMethod("PayPal Express");
        };
        this.hasGiftCardPaymentMethod = function () {
            return _this.hasPaymentMethod("Gift Card");
        };
        this.hasMoneyOrderPaymentMethod = function () {
            return _this.hasPaymentMethod("Money Order");
        };
        this.hasCashPaymentMethod = function () {
            return _this.hasPaymentMethod("Cash");
        };
        /** Returns a boolean indicating whether or not the order has the named fulfillment method.*/
        this.hasFulfillmentMethod = function (fulfillmentMethodName) {
            for (var _i = 0, _a = _this.cart.orderFulfillments; _i < _a.length; _i++) {
                var fulfillment = _a[_i];
                if (fulfillment.fulfillmentMethod.fulfillmentMethodName === fulfillmentMethodName)
                    return true;
            }
            return false;
        };
        this.hasShippingFulfillmentMethod = function () {
            return _this.hasFulfillmentMethod("Shipping");
        };
        this.hasEmailFulfillmentMethod = function () {
            return _this.hasFulfillmentMethod("Email");
        };
        this.hasPickupFulfillmentMethod = function () {
            return _this.hasFulfillmentMethod("Pickup");
        };
        this.getFulfillmentType = function (fulfillment) {
            return fulfillment.fulfillmentMethod.fulfillmentMethodType;
        };
        this.isShippingFulfillment = function (fulfillment) {
            return _this.getFulfillmentType(fulfillment) === 'shipping';
        };
        this.isEmailFulfillment = function (fulfillment) {
            return _this.getFulfillmentType(fulfillment) === 'email';
        };
        this.isPickupFulfillment = function (fulfillment) {
            return _this.getFulfillmentType(fulfillment) === 'pickup';
        };
        /** Returns true if the order fulfillment has a shipping address selected. */
        this.hasShippingAddress = function (fulfillmentIndex) {
            return (_this.cart.orderFulfillments[fulfillmentIndex] &&
                _this.isShippingFulfillment(_this.cart.orderFulfillments[fulfillmentIndex]) &&
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingAddress);
        };
        this.hasShippingMethodOptions = function (fulfillmentIndex) {
            var shippingMethodOptions = _this.cart.orderFulfillments[fulfillmentIndex].shippingMethodOptions;
            return shippingMethodOptions && shippingMethodOptions.length && (shippingMethodOptions.length > 1 || (shippingMethodOptions[0].value && shippingMethodOptions[0].value.length));
        };
        /** Returns true if the order fulfillment has a shipping address selected. */
        this.hasPickupLocation = function (fulfillmentIndex) {
            return (_this.cart.orderFulfillments[fulfillmentIndex] &&
                _this.isPickupFulfillment(_this.cart.orderFulfillments[fulfillmentIndex]) &&
                _this.cart.orderFulfillments[fulfillmentIndex].pickupLocation);
        };
        /** Returns true if the order requires a fulfillment */
        this.orderRequiresFulfillment = function () {
            return _this.cart.orderRequiresFulfillment();
        };
        /**
         *  Returns true if the order requires a account
         *  Either because the user is not logged in, or because they don't have one.
         *
         */
        this.orderRequiresAccount = function () {
            return _this.cart.orderRequiresAccount();
        };
        /** Returns true if the payment tab should be active */
        this.hasShippingAddressAndMethod = function () {
            return _this.cart.hasShippingAddressAndMethod();
        };
        /**
         * Returns true if the user has an account and is logged in.
         */
        this.hasAccount = function () {
            if (_this.account.accountID) {
                return true;
            }
            return false;
        };
        /** Redirects to the passed in URL
        */
        this.redirectExact = function (url) {
            _this.$window.location.href = url;
        };
        // /** Returns true if a property on an object is undefined or empty. */
        this.isUndefinedOrEmpty = function (object, property) {
            if (!angular.isDefined(object[property]) || object[property] == "") {
                return true;
            }
            return false;
        };
        /** A simple method to return the quantity sum of all orderitems in the cart. */
        this.getOrderItemQuantitySum = function () {
            var totalQuantity = 0;
            if (angular.isDefined(_this.cart)) {
                return _this.cart.getOrderItemQuantitySum();
            }
            return totalQuantity;
        };
        /** Returns the index of the state from the list of states */
        this.getSelectedStateIndexFromStateCode = function (stateCode, states) {
            for (var state in states) {
                if (states[state].value == stateCode) {
                    return state;
                }
            }
        };
        /**
         * Returns true if on a mobile device. This is important for placeholders.
         */
        this.isMobile = function () {
            if (_this.$window.innerWidth <= 800 && _this.$window.innerHeight <= 600) {
                return true;
            }
            return false;
        };
        /** returns true if the shipping method option passed in is the selected shipping method
        */
        this.isSelectedShippingMethod = function (option, fulfillmentIndex) {
            // DEPRECATED LOGIC
            if (typeof option === 'number' || typeof option === 'string') {
                var index = option, value = fulfillmentIndex;
                var orderFulfillment = void 0;
                for (var _i = 0, _a = _this.cart.orderFulfillments; _i < _a.length; _i++) {
                    var fulfillment = _a[_i];
                    if (_this.isShippingFulfillment(fulfillment)) {
                        orderFulfillment = fulfillment;
                    }
                }
                if (_this.cart.fulfillmentTotal &&
                    value == orderFulfillment.shippingMethod.shippingMethodID ||
                    orderFulfillment.shippingMethodOptions.length == 1) {
                    return true;
                }
                return false;
            }
            //NEW LOGIC
            return (_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod &&
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod.shippingMethodID == option.value) ||
                (_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethodOptions.length == 1);
        };
        /** Select a shipping method - temporarily changes the selected method on the front end while awaiting official change from server
        */
        this.selectShippingMethod = function (option, fulfillmentIndex) {
            var data = {
                'shippingMethodID': option.value,
                'fulfillmentID': _this.cart.orderFulfillments[fulfillmentIndex].orderFulfillmentID
            };
            _this.doAction('addShippingMethodUsingShippingMethodID', data);
            if (!_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod) {
                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod = {};
            }
            _this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod.shippingMethodID = option.value;
        };
        /** Removes promotional code from order*/
        this.removePromoCode = function (code) {
            _this.doAction('removePromotionCode', { promotionCode: code });
        };
        //gets the calcuated total minus the applied gift cards.
        this.getTotalMinusGiftCards = function () {
            var total = _this.getAppliedGiftCardTotals();
            return _this.cart.calculatedTotal - total;
        };
        /** Format saved payment method info for display in list*/
        this.formatPaymentMethod = function (paymentMethod) {
            return (paymentMethod.accountPaymentMethodName || paymentMethod.nameOnCreditCard) + ' - ' + paymentMethod.creditCardType + ' *' + paymentMethod.creditCardLastFour + ' exp. ' + ('0' + paymentMethod.expirationMonth).slice(-2) + '/' + paymentMethod.expirationYear.toString().slice(-2);
        };
        this.getOrderItemSkuIDs = function (cart) {
            return cart.orderItems.map(function (item) {
                return item.sku.skuID;
            }).join(',');
        };
        this.getResizedImageByProfileName = function (profileName, skuIDs) {
            _this.loading = true;
            if (profileName == undefined) {
                profileName = "medium";
            }
            _this.doAction('getResizedImageByProfileName', { profileName: profileName, skuIds: skuIDs }).then(function (result) {
                if (!angular.isDefined(_this.imagePath)) {
                    _this.imagePath = {};
                }
                if (result.resizedImagePaths) {
                    for (var skuID in result.resizedImagePaths) {
                        _this.imagePath[skuID] = result.resizedImagePaths[skuID];
                    }
                }
            });
        };
        /** Returns the amount total of giftcards added to this order.*/
        this.getPaymentTotals = function () {
            //
            var total = 0;
            for (var index in _this.cart.orderPayments) {
                total = total + Number(_this.cart.orderPayments[index]['amount'].toFixed(2));
            }
            return total;
        };
        /** Gets the calcuated total minus the applied gift cards. */
        this.getTotalMinusPayments = function () {
            var total = _this.getPaymentTotals();
            return _this.cart.calculatedTotal - total;
        };
        /** Boolean indicating whether the total balance has been accounted for by order payments.*/
        this.paymentsEqualTotalBalance = function () {
            return _this.getTotalMinusPayments() == 0;
        };
        /**View logic - Opens review panel if no more payments are due.*/
        this.checkIfFinalPayment = function () {
            if ((_this.getRequestByAction('addOrderPayment') && _this.getRequestByAction('addOrderPayment').hasSuccessfulAction() ||
                _this.getRequestByAction('addGiftCardOrderPayment') && _this.getRequestByAction('addGiftCardOrderPayment').hasSuccessfulAction()) && _this.paymentsEqualTotalBalance()) {
                _this.edit = 'review';
            }
        };
        this.getAddressEntity = function (address) {
            var addressEntity = _this.$hibachi.newAddress();
            if (address) {
                for (var key in address) {
                    if (address.hasOwnProperty(key)) {
                        addressEntity[key] = address[key];
                    }
                }
            }
            return addressEntity;
        };
        this.resetRequests = function (request) {
            delete _this.requests[request];
        };
        /** Returns true if the addresses match. */
        this.addressesMatch = function (address1, address2) {
            if (angular.isDefined(address1) && angular.isDefined(address2)) {
                if ((address1.streetAddress == address2.streetAddress &&
                    address1.street2Address == address2.street2Address &&
                    address1.city == address2.city &&
                    address1.postalCode == address2.postalCode &&
                    address1.stateCode == address2.stateCode &&
                    address1.countrycode == address2.countrycode)) {
                    return true;
                }
            }
            return false;
        };
        /**
       *  Returns true when the fulfillment body should be showing
       *  Show if we don't need an account but do need a fulfillment
       *
       */
        this.showFulfillmentTabBody = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('fulfillment') != -1) && !_this.edit ||
                (_this.edit == 'fulfillment')) {
                return true;
            }
            return false;
        };
        /**
         *  Returns true when the fulfillment body should be showing
         *  Show if we don't need an account,fulfillment, and don't have a payment - or
         *  we have a payment but are editting the payment AND nothing else is being edited
         *
         */
        this.showPaymentTabBody = function () {
            if (!_this.hasAccount())
                return false;
            if (((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('payment') != -1) && !_this.edit) ||
                ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                    (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                    (_this.edit == 'payment'))) {
                return true;
            }
            return false;
        };
        /**
         *  Returns true if the review tab body should be showing.
         *  Show if we don't need an account,fulfillment,payment, but not if something else is being edited
         *
         */
        this.showReviewTabBody = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                (_this.cart.orderRequirementsList.indexOf('payment') == -1) &&
                ((!_this.edit) || (_this.edit == 'review'))) {
                return true;
            }
            return false;
        };
        /** Returns true if the fulfillment tab should be active */
        this.fulfillmentTabIsActive = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.edit == 'fulfillment') ||
                (!_this.edit && ((_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID) &&
                    (_this.cart.orderRequirementsList.indexOf('fulfillment') != -1))) {
                return true;
            }
            return false;
        };
        /** Returns true if the payment tab should be active */
        this.paymentTabIsActive = function () {
            if (!_this.hasAccount())
                return false;
            if ((_this.edit == 'payment') ||
                (!_this.edit &&
                    (_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID &&
                    (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
                    (_this.cart.orderRequirementsList.indexOf('payment') != -1))) {
                return true;
            }
            return false;
        };
        this.isCreatingAccount = function () {
            return !_this.hasAccount() && _this.showCreateAccount;
        };
        this.isSigningIn = function () {
            return !_this.hasAccount() && !_this.showCreateAccount;
        };
        this.loginError = function () {
            if (_this.account.processObjects && _this.account.processObjects.login && _this.account.processObjects.login.hasErrors) {
                return _this.account.processObjects.login.errors.emailAddress['0'];
            }
            ;
        };
        this.createAccountError = function () {
            if (_this.account.processObjects && _this.account.processObjects.create && _this.account.processObjects.create.hasErrors) {
                return _this.account.processObjects.create.errors;
            }
        };
        this.forgotPasswordNotSubmitted = function () {
            return !_this.account.processObjects || (!_this.account.hasErrors && !_this.account.processObjects.forgotPassword);
        };
        this.forgotPasswordSubmitted = function () {
            return _this.account.processObjects && _this.account.processObjects.forgotPassword;
        };
        this.forgotPasswordHasNoErrors = function () {
            return _this.account.processObjects && _this.account.processObjects.forgotPassword && !_this.account.processObjects.forgotPassword.hasErrors;
        };
        this.forgotPasswordError = function () {
            if (_this.forgotPasswordSubmitted() && !_this.forgotPasswordHasNoErrors()) {
                return _this.account.processObjects.forgotPassword.errors.emailAddress['0'];
            }
        };
        /** Consolidate response errors on cart.errors.runPlaceOrderTransaction*/
        this.placeOrderFailure = function () {
            var errors = [];
            for (var key in _this.cart.errors) {
                var errArray = _this.cart.errors[key];
                errors = errors.concat(errArray);
            }
            _this.cart.errors.runPlaceOrderTransaction = errors;
            _this.edit = '';
        };
        /** Returns errors from placeOrder request*/
        this.placeOrderError = function () {
            if (_this.cart.hasErrors && _this.cart.errors.runPlaceOrderTransaction) {
                return _this.cart.errors.runPlaceOrderTransaction;
            }
        };
        /** Returns errors from addOrderPayment request. */
        this.addOrderPaymentError = function () {
            if (_this.cart.errors.addOrderPayment)
                return _this.cart.errors.addOrderPayment;
            if (_this.cart.errors.runPlaceOrderTransaction)
                return _this.cart.errors.runPlaceOrderTransaction;
            return angular.isDefined(_this.errors) ? _this.errors['ADDORDERPAYMENT'] : false;
        };
        /** Returns errors from addBillingAddress request. */
        this.addBillingAddressError = function () {
            _this.addBillingAddressErrors = _this.cart.errors.addBillingAddress || (angular.isDefined(_this.errors) ? _this.errors['addBillingAddress'] : false);
            if (!_this.billingAddressEditFormIndex && _this.errors && _this.hasFailureAction('addBillingAddress')) {
                var addressProperties = _this.$hibachi.newAddress().data;
                for (var property in _this.errors) {
                    if (addressProperties.hasOwnProperty(property)) {
                        _this.addBillingAddressErrors = _this.addBillingAddressErrors || [];
                        _this.errors[property].forEach(function (error) {
                            _this.addBillingAddressErrors.push(error);
                        });
                    }
                }
            }
        };
        /** Returns errors from addGiftCard request. */
        this.giftCardError = function () {
            if (_this.cart.processObjects &&
                _this.cart.processObjects.addOrderPayment &&
                _this.cart.processObjects.addOrderPayment.errors &&
                _this.cart.processObjects.addOrderPayment.errors.giftCardID) {
                return _this.cart.processObjects.addOrderPayment.errors.giftCardID[0];
            }
        };
        this.editAccountAddress = function (key, fulfillmentIndex) {
            _this.clearShippingAddressErrors();
            _this.accountAddressEditFormIndex[fulfillmentIndex] = key;
            _this.editingAccountAddress = _this.getAddressEntity(_this.account.accountAddresses[key].address);
            _this.editingAccountAddress.accountAddressName = _this.account.accountAddresses[key].accountAddressName;
            _this.editingAccountAddress.accountAddressID = _this.account.accountAddresses[key].accountAddressID;
        };
        this.editBillingAddress = function (key, formName) {
            _this.billingAddressEditFormIndex = key;
            _this.selectedBillingAddress = null;
            if (formName) {
                _this[formName + 'BillingAddress'] = _this.getAddressEntity(_this.account.accountAddresses[key].address);
                _this[formName + 'BillingAddress'].accountAddressName = _this.account.accountAddresses[key].accountAddressName;
                _this[formName + 'BillingAddress'].accountAddressID = _this.account.accountAddresses[key].accountAddressID;
            }
            else {
                _this.billingAddress = _this.getAddressEntity(_this.account.accountAddresses[key].address);
                _this.billingAddress.accountAddressName = _this.account.accountAddresses[key].accountAddressName;
                _this.billingAddress.accountAddressID = _this.account.accountAddresses[key].accountAddressID;
            }
        };
        this.clearShippingAddressErrors = function () {
            _this.clearMessages();
            _this.shippingAddressErrors = undefined;
        };
        this.clearMessages = function () {
            _this.successfulActions = [];
            _this.failureActions = [];
        };
        /**Hides shipping address form, clears shipping address errors*/
        this.hideAccountAddressForm = function (fulfillmentIndex) {
            _this.accountAddressEditFormIndex[fulfillmentIndex] = undefined;
        };
        this.hideBillingAddressForm = function () {
            if (_this.billingAddressEditFormIndex != undefined) {
                var index = _this.billingAddressEditFormIndex;
                if (_this.billingAddressEditFormIndex == 'new') {
                    index = _this.account.accountAddresses.length - 1;
                }
                _this.selectBillingAddress(index);
            }
            _this.billingAddressEditFormIndex = undefined;
            _this.billingAddress = {};
        };
        this.editingDifferentAccountAddress = function (fulfillmentIndex) {
            for (var index = 0; index < _this.cart.orderFulfillments.length; index++) {
                if (index !== fulfillmentIndex && _this.accountAddressEditFormIndex[index] != undefined) {
                    return true;
                }
            }
        };
        this.showEditAccountAddressForm = function (fulfillmentIndex) {
            return _this.accountAddressEditFormIndex[fulfillmentIndex] != undefined && _this.accountAddressEditFormIndex[fulfillmentIndex] != 'new';
        };
        this.showNewAccountAddressForm = function (fulfillmentIndex) {
            return _this.accountAddressEditFormIndex[fulfillmentIndex] == 'new';
        };
        this.showNewBillingAddressForm = function () {
            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex == 'new';
        };
        this.showEditBillingAddressForm = function () {
            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex != undefined && _this.billingAddressEditFormIndex != 'new';
        };
        /** Adds errors from response to cart errors.*/
        this.addBillingErrorsToCartErrors = function () {
            var cartErrors = _this.cart.errors;
            if (cartErrors.addOrderPayment) {
                var deleteIndex = cartErrors.addOrderPayment.indexOf('billingAddress');
                if (deleteIndex > -1) {
                    cartErrors.addOrderPayment.splice(deleteIndex, 1);
                }
                if (cartErrors.addOrderPayment.length == 0) {
                    cartErrors.addOrderPayment = null;
                }
            }
            cartErrors.addBillingAddress = [];
            for (var key in _this.errors) {
                _this.cart.errors.addBillingAddress = _this.cart.errors.addBillingAddress.concat(_this.errors[key]);
            }
        };
        this.accountAddressIsSelectedShippingAddress = function (key, fulfillmentIndex) {
            if (_this.account &&
                _this.account.accountAddresses &&
                _this.cart.orderFulfillments[fulfillmentIndex].shippingAddress) {
                return _this.addressesMatch(_this.account.accountAddresses[key].address, _this.cart.orderFulfillments[fulfillmentIndex].shippingAddress);
            }
            return false;
        };
        this.accountAddressIsSelectedBillingAddress = function (key) {
            if (_this.account &&
                _this.account.accountAddresses &&
                _this.orderPaymentObject &&
                _this.orderPaymentObject.newOrderPayment &&
                _this.orderPaymentObject.newOrderPayment.billingAddress) {
                return _this.account.accountAddresses[key].accountAddressID == _this.orderPaymentObject.newOrderPayment.billingAddress.accountAddressID;
            }
            return false;
        };
        /** Returns true if order requires email fulfillment and email address has been chosen.*/
        this.hasEmailFulfillmentAddress = function (fulfillmentIndex) {
            return Boolean(_this.cart.orderFulfillments[fulfillmentIndex].emailAddress);
        };
        this.getEligiblePaymentMethodsForPaymentMethodType = function (paymentMethodType) {
            return _this.cart.eligiblePaymentMethodDetails.filter(function (paymentMethod) {
                return paymentMethod.paymentMethod.paymentMethodType == paymentMethodType;
            });
        };
        this.getEligibleCreditCardPaymentMethods = function () {
            return _this.getEligiblePaymentMethodsForPaymentMethodType('creditCard');
        };
        this.getPickupLocation = function (fulfillmentIndex) {
            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])
                return;
            return _this.cart.data.orderFulfillments[fulfillmentIndex].pickupLocation;
        };
        this.getShippingAddress = function (fulfillmentIndex) {
            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])
                return;
            return _this.cart.data.orderFulfillments[fulfillmentIndex].data.shippingAddress;
        };
        this.getEmailFulfillmentAddress = function (fulfillmentIndex) {
            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])
                return;
            return _this.cart.data.orderFulfillments[fulfillmentIndex].emailAddress;
        };
        this.getPickupLocations = function () {
            var locations = [];
            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {
                if (_this.getFulfillmentType(fulfillment) == 'pickup' && fulfillment.pickupLocation && fulfillment.pickupLocation.locationID) {
                    fulfillment.pickupLocation.fulfillmentIndex = index;
                    locations.push(fulfillment.pickupLocation);
                }
            });
            return locations;
        };
        this.getShippingAddresses = function () {
            var addresses = [];
            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {
                if (_this.getFulfillmentType(fulfillment) == 'shipping' && fulfillment.data.shippingAddress && fulfillment.data.shippingAddress.addressID) {
                    fulfillment.data.shippingAddress.fulfillmentIndex = index;
                    addresses.push(fulfillment.data.shippingAddress);
                }
            });
            return addresses;
        };
        this.getEmailFulfillmentAddresses = function () {
            var addresses = [];
            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {
                if (_this.getFulfillmentType(fulfillment) == 'email' && fulfillment.emailAddress) {
                    fulfillment.fulfillmentIndex = index;
                    addresses.push(fulfillment);
                }
            });
            return addresses;
        };
        /** Returns true if any action in comma-delimited list exists in this.successfulActions */
        this.hasSuccessfulAction = function (actionList) {
            for (var _i = 0, _a = actionList.split(','); _i < _a.length; _i++) {
                var action = _a[_i];
                if (_this.successfulActions.indexOf(action) > -1) {
                    return true;
                }
            }
            return false;
        };
        /** Returns true if any action in comma-delimited list exists in this.failureActions */
        this.hasFailureAction = function (actionList) {
            for (var _i = 0, _a = actionList.split(','); _i < _a.length; _i++) {
                var action = _a[_i];
                if (_this.failureActions.indexOf(action) > -1) {
                    return true;
                }
            }
            return false;
        };
        this.shippingUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addShippingAddressUsingAccountAddress,addShippingAddress');
        };
        this.shippingMethodUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addShippingMethodUsingShippingMethodID');
        };
        this.emailFulfillmentUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addEmailFulfillmentAddress');
        };
        this.pickupLocationUpdateSuccess = function () {
            return _this.hasSuccessfulAction('addEmailFulfillmentAddress');
        };
        /** Returns true if selected pickup location has no name.*/
        this.namelessPickupLocation = function (fulfillmentIndex) {
            if (!_this.getPickupLocation(fulfillmentIndex))
                return false;
            return _this.getPickupLocation(fulfillmentIndex).primaryAddress != undefined && _this.getPickupLocation(fulfillmentIndex).locationName == undefined;
        };
        /** Returns true if no pickup location has been selected.*/
        this.noPickupLocation = function (fulfillmentIndex) {
            if (!_this.getPickupLocation(fulfillmentIndex))
                return true;
            return _this.getPickupLocation(fulfillmentIndex).primaryAddress == undefined && _this.getPickupLocation(fulfillmentIndex).locationName == undefined;
        };
        this.disableContinueToPayment = function () {
            return _this.cart.orderRequirementsList.indexOf('fulfillment') != -1;
        };
        this.hasAccountPaymentMethods = function () {
            return _this.account && _this.account.accountPaymentMethods && _this.account.accountPaymentMethods.length;
        };
        this.showBillingAccountAddresses = function () {
            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex == undefined;
        };
        this.hasNoCardInfo = function () {
            return !_this.newCardInfo || !_this.newCardInfo.nameOnCreditCard || !_this.newCardInfo.cardNumber || !_this.newCardInfo.cvv;
        };
        this.isGiftCardPayment = function (payment) {
            return payment.giftCard && payment.giftCard.giftCardCode;
        };
        this.isPurchaseOrderPayment = function (payment) {
            return payment.purchaseOrderNumber;
        };
        //Not particularly robust, needs to be modified for each project
        this.isCheckOrMoneyOrderPayment = function (payment) {
            return payment.paymentMethod.paymentMethodName == "Check or Money Order";
        };
        this.orderHasNoPayments = function () {
            var activePayments = _this.cart.orderPayments.filter(function (payment) { return payment.amount != 0; });
            return !activePayments.length;
        };
        this.hasProductNameAndNoSkuName = function (orderItem) {
            return !orderItem.sku.skuName && orderItem.sku.product && orderItem.sku.product.productName;
        };
        this.cartHasNoItems = function () {
            return !_this.getRequestByAction('getCart').loading && _this.hasAccount() && _this.cart && _this.cart.orderItems && !_this.cart.orderItems.length && !_this.loading && !_this.orderPlaced;
        };
        this.hasAccountAndCartItems = function () {
            return _this.hasAccount() && !_this.cartHasNoItems();
        };
        this.hideStoreSelector = function (fulfillmentIndex) {
            _this.showStoreSelector[fulfillmentIndex] = false;
        };
        this.hideEmailSelector = function (fulfillmentIndex) {
            _this.showEmailSelector[fulfillmentIndex] = false;
        };
        this.incrementItemQuantity = function (orderItem, amount) {
            if (amount === void 0) { amount = 1; }
            orderItem.quantity += amount;
            if (orderItem.quantity < 0) {
                orderItem.quantity = 0;
            }
            _this.updateOrderItemQuantity(orderItem);
        };
        this.updateOrderItemQuantity = function (event) {
            event.swForm.submit();
        };
        this.getOrderAttributeValues = function (allowedAttributeSets) {
            var attributeValues = {};
            var orderAttributeModel = JSON.parse(localStorage.attributeMetaData)["Order"];
            for (var attributeSetCode in orderAttributeModel) {
                var attributeSet = orderAttributeModel[attributeSetCode];
                if (allowedAttributeSets.indexOf(attributeSetCode) !== -1) {
                    for (var attributeCode in attributeSet.attributes) {
                        var attribute = attributeSet.attributes[attributeCode];
                        attributeValues[attribute.attributeCode] = {
                            attributeCode: attribute.attributeCode,
                            attributeName: attribute.attributeName,
                            attributeValue: _this.cart[attribute.attributeCode],
                            inputType: attribute.attributeInputType,
                            requiredFlag: attribute.requiredFlag
                        };
                    }
                }
            }
            return attributeValues;
        };
        this.binder = function (self, fn) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            return fn.bind.apply(fn, [self].concat(args));
        };
        /*********************************************************************************/
        /*******************                                    **************************/
        /*******************         DEPRECATED METHODS         **************************/
        /*******************                                    **************************/
        /*********************************************************************************/
        /** DEPRECATED
        */
        this.getSelectedShippingIndex = function (index, value) {
            for (var i = 0; i <= this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions.length; i++) {
                if (this.cart.fulfillmentTotal == this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions[i].totalCharge) {
                    return i;
                }
            }
        };
        /** simple validation just to ensure data is present and accounted for.
        */
        this.validateNewOrderPayment = function (newOrderPayment) {
            var newOrderPaymentErrors = {};
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.streetAddress')) {
                newOrderPaymentErrors['streetAddress'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.countrycode')) {
                newOrderPaymentErrors['countrycode'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.statecode')) {
                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.locality')) {
                    newOrderPaymentErrors['statecode'] = 'Required *';
                }
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.city')) {
                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.city')) {
                    newOrderPaymentErrors['city'] = 'Required *';
                }
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.locality')) {
                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.statecode')) {
                    newOrderPaymentErrors['locality'] = 'Required *';
                }
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.postalcode')) {
                newOrderPaymentErrors['postalCode'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.nameOnCreditCard')) {
                newOrderPaymentErrors['nameOnCreditCard'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.expirationMonth')) {
                newOrderPaymentErrors['streetAddress'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.expirationYear')) {
                newOrderPaymentErrors['expirationYear'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.creditCardNumber')) {
                newOrderPaymentErrors['creditCardNumber'] = 'Required *';
            }
            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.securityCode')) {
                newOrderPaymentErrors['securityCode'] = 'Required *';
            }
            if (Object.keys(newOrderPaymentErrors).length) {
                //this.cart.orderPayments.hasErrors = true;
                //this.cart.orderPayments.errors = newOrderPaymentErrors;
            }
        };
        /** Allows an easy way to calling the service addOrderPayment.
        */
        this.addOrderPayment = function (formdata) {
            //reset the form errors.
            //Grab all the data
            var billingAddress = _this.newBillingAddress;
            var expirationMonth = formdata.month;
            var expirationYear = formdata.year;
            var country = formdata.country;
            var state = formdata.state;
            var accountFirst = _this.account.firstName;
            var accountLast = _this.account.lastName;
            var data = {};
            var processObject = _this.orderService.newOrder_AddOrderPayment();
            data = {
                'newOrderPayment.billingAddress.addressID': '',
                'newOrderPayment.billingAddress.streetAddress': billingAddress.streetAddress,
                'newOrderPayment.billingAddress.street2Address': billingAddress.street2Address,
                'newOrderPayment.nameOnCreditCard': billingAddress.nameOnCreditCard,
                'newOrderPayment.billingAddress.name': billingAddress.nameOnCreditCard,
                'newOrderPayment.expirationMonth': expirationMonth,
                'newOrderPayment.expirationYear': expirationYear,
                'newOrderPayment.billingAddress.countrycode': country || billingAddress.countrycode,
                'newOrderPayment.billingAddress.city': '' + billingAddress.city,
                'newOrderPayment.billingAddress.statecode': state || billingAddress.statecode,
                'newOrderPayment.billingAddress.locality': billingAddress.locality || '',
                'newOrderPayment.billingAddress.postalcode': billingAddress.postalcode,
                'newOrderPayment.securityCode': billingAddress.cvv,
                'newOrderPayment.creditCardNumber': billingAddress.cardNumber,
                'newOrderPayment.saveShippingAsBilling': (_this.saveShippingAsBilling == true),
            };
            //processObject.populate(data);
            //Make sure we have required fields for a newOrderPayment.
            _this.validateNewOrderPayment(data);
            if (_this.cart.orderPayments.hasErrors && Object.keys(_this.cart.orderPayments.errors).length) {
                return -1;
            }
            //Post the new order payment and set errors as needed.
            _this.doAction('addOrderPayment', data, 'post').then(function (result) {
                var serverData = result;
                if (serverData.cart.hasErrors || angular.isDefined(_this.cart.orderPayments[_this.cart.orderPayments.length - 1]['errors']) && !_this.cart.orderPayments[_this.cart.orderPayments.length - 1]['errors'].hasErrors) {
                    _this.cart.hasErrors = true;
                    _this.readyToPlaceOrder = true;
                    _this.edit = '';
                }
                else {
                    _this.editPayment = false;
                    _this.readyToPlaceOrder = true;
                    _this.edit = '';
                }
            });
        };
        /** Allows an easy way to calling the service addOrderPayment.
        */
        this.addGiftCardOrderPayments = function (redeemGiftCardToAccount) {
            //reset the form errors.
            _this.cart.hasErrors = false;
            _this.cart.orderPayments.errors = {};
            _this.cart.orderPayments.hasErrors = false;
            //Grab all the data
            var giftCards = _this.account.giftCards;
            var data = {};
            data = {
                'newOrderPayment.paymentMethod.paymentMethodID': '50d8cd61009931554764385482347f3a',
                'newOrderPayment.redeemGiftCardToAccount': redeemGiftCardToAccount,
            };
            //add the amounts from the gift cards
            for (var card in giftCards) {
                if (giftCards[card].applied == true) {
                    data['newOrderPayment.giftCardNumber'] = giftCards[card].giftCardCode;
                    if (giftCards[card].calculatedTotal < _this.cart.calculatedTotal) {
                        data['newOrderPayment.amount'] = giftCards[card].calculatedBalanceAmount; //will use once we have amount implemented.
                    }
                    else {
                        data['newOrderPayment.amount'] = _this.cart.calculatedTotal; //this is so it doesn't throw the 100% error
                    }
                    data['copyFromType'] = "";
                    //Post the new order payment and set errors as needed.
                    _this.$q.all([_this.doAction('addOrderPayment', data, 'post')]).then(function (result) {
                        var serverData;
                        if (angular.isDefined(result['0'])) {
                            serverData = result['0'].data;
                        }
                        if (serverData.cart.hasErrors || angular.isDefined(this.cart.orderPayments[this.cart.orderPayments.length - 1]['errors']) && !this.cart.orderPayments['' + (this.cart.orderPayments.length - 1)]['errors'].hasErrors) {
                            this.cart.hasErrors = true;
                            this.readyToPlaceOrder = true;
                            this.edit = '';
                        }
                        else {
                        }
                    });
                }
            }
        };
        /** Allows an easy way to calling the service addOrderPayment.
        */
        this.addOrderPaymentAndPlaceOrder = function (formdata) {
            //reset the form errors.
            _this.orderPlaced = false;
            //Grab all the data
            var billingAddress = _this.newBillingAddress;
            var expirationMonth = formdata.month;
            var expirationYear = formdata.year;
            var country = formdata.country;
            var state = formdata.state;
            var accountFirst = _this.account.firstName;
            var accountLast = _this.account.lastName;
            var data = {};
            data = {
                'orderid': _this.cart.orderID,
                'newOrderPayment.billingAddress.streetAddress': billingAddress.streetAddress,
                'newOrderPayment.billingAddress.street2Address': billingAddress.street2Address,
                'newOrderPayment.nameOnCreditCard': billingAddress.nameOnCard || accountFirst + ' ' + accountLast,
                'newOrderPayment.expirationMonth': expirationMonth,
                'newOrderPayment.expirationYear': expirationYear,
                'newOrderPayment.billingAddress.countrycode': country || billingAddress.countrycode,
                'newOrderPayment.billingAddress.city': '' + billingAddress.city,
                'newOrderPayment.billingAddress.statecode': state || billingAddress.statecode,
                'newOrderPayment.billingAddress.locality': billingAddress.locality || '',
                'newOrderPayment.billingAddress.postalcode': billingAddress.postalcode,
                'newOrderPayment.securityCode': billingAddress.cvv,
                'newOrderPayment.creditCardNumber': billingAddress.cardNumber,
                'newOrderPayment.saveShippingAsBilling': (_this.saveShippingAsBilling == true),
            };
            //Make sure we have required fields for a newOrderPayment.
            //this.validateNewOrderPayment( data );
            if (_this.cart.orderPayments.hasErrors && Object.keys(_this.cart.orderPayments.errors).length) {
                return -1;
            }
            //Post the new order payment and set errors as needed.
            _this.$q.all([_this.doAction('addOrderPayment,placeOrder', data, 'post')]).then(function (result) {
                var serverData;
                if (angular.isDefined(result['0'])) {
                    serverData = result['0'].data;
                }
                else {
                } //|| angular.isDefined(serverData.cart.orderPayments[serverData.cart.orderPayments.length-1]['errors']) && slatwall.cart.orderPayments[''+slatwall.cart.orderPayments.length-1]['errors'].hasErrors
                if (serverData.cart.hasErrors || (angular.isDefined(serverData.failureActions) && serverData.failureActions.length && serverData.failureActions[0] == "public:cart.addOrderPayment")) {
                    if (serverData.failureActions.length) {
                        for (var action in serverData.failureActions) {
                            //
                        }
                    }
                    this.edit = '';
                    return true;
                }
                else if (serverData.successfulActions.length) {
                    //
                    this.cart.hasErrors = false;
                    this.editPayment = false;
                    this.edit = '';
                    for (var action in serverData.successfulActions) {
                        //
                        if (serverData.successfulActions[action].indexOf("placeOrder") != -1) {
                            //if there are no errors then redirect.
                            this.orderPlaced = true;
                            this.redirectExact('/order-confirmation/');
                        }
                    }
                }
                else {
                    this.edit = '';
                }
            });
        };
        //Applies a giftcard from the user account onto the payment.
        this.applyGiftCard = function (giftCardCode) {
            _this.finding = true;
            //find the code already on the account.
            var found = false;
            for (var giftCard in _this.account.giftCards) {
                if (_this.account.giftCards[giftCard].balanceAmount == 0) {
                    _this.account.giftCards[giftCard]['error'] = "The balance is $0.00 for this card.";
                    found = false;
                }
                if (_this.account.giftCards[giftCard].giftCardCode == giftCardCode) {
                    _this.account.giftCards[giftCard].applied = true;
                    found = true;
                }
            }
            if (found) {
                _this.finding = false;
                _this.addGiftCardOrderPayments(false);
            }
            else {
                _this.finding = false;
                _this.addGiftCardOrderPayments(true);
            }
        };
        //returns the amount total of giftcards added to this account.
        this.getAppliedGiftCardTotals = function () {
            //
            var total = 0;
            for (var payment in _this.cart.orderPayments) {
                if (_this.cart.orderPayments[payment].giftCardNumber != "") {
                    total = total + parseInt(_this.cart.orderPayments[payment]['amount']);
                }
            }
            return total;
        };
        this.orderService = orderService;
        this.cartService = cartService;
        this.accountService = accountService;
        this.requestService = requestService;
        this.appConfig = appConfig;
        this.baseActionPath = this.appConfig.baseURL + "/index.cfm/api/scope/"; //default path
        this.confirmationUrl = "/order-confirmation";
        this.checkoutUrl = "/checkout";
        this.$http = $http;
        this.$location = $location;
        this.$q = $q;
        this.$injector = $injector;
        this.getExpirationYears();
        this.$window = $window;
        this.$hibachi = $hibachi;
        this.cart = this.cartService.newCart();
        this.account = this.accountService.newAccount();
        this.observerService = observerService;
        this.$timeout = $timeout;
    }
    PublicService.prototype.getOrderFulfillmentItemList = function (fulfillmentIndex) {
        return this.cart.orderFulfillments[fulfillmentIndex].orderFulfillmentItems.map(function (item) { return item.sku.skuName ? item.sku.skuName : item.sku.product.productName; }).join(', ');
    };
    //Use with bind, assigning 'this' as the temporary order item
    //a.k.a. slatwall.bind(tempOrderItem,slatwall.copyOrderItem,originalOrderItem);
    //gets you tempOrderItem.orderItem == originalOrderItem;
    PublicService.prototype.copyOrderItem = function (orderItem) {
        this.orderItem = { orderItemID: orderItem.orderItemID,
            quantity: orderItem.quantity };
        return this;
    };
    return PublicService;
}());
exports.PublicService = PublicService;


/***/ }),
/* 844 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var RbKeyService = /** @class */ (function () {
    //@ngInject
    function RbKeyService($http, $q, appConfig, resourceBundles) {
        var _this = this;
        this.$http = $http;
        this.$q = $q;
        this.appConfig = appConfig;
        this.resourceBundles = resourceBundles;
        this._resourceBundle = {};
        this._resourceBundleLastModified = '';
        this._loadingResourceBundle = false;
        this._loadedResourceBundle = false;
        this.getRBLoaded = function () {
            return _this._loadedResourceBundle;
        };
        this.rbKey = function (key, replaceStringData) {
            ////$log.debug('rbkey');
            ////$log.debug(key);
            ////$log.debug(this.getConfig().rbLocale);
            var keyValue = _this.getRBKey(key, _this.appConfig.rbLocale);
            ////$log.debug(keyValue);
            return keyValue;
        };
        this.getRBKey = function (key, locale, checkedKeys, originalKey) {
            ////$log.debug('getRBKey');
            ////$log.debug('loading:'+this._loadingResourceBundle);
            ////$log.debug('loaded'+this._loadedResourceBundle);
            if (_this.resourceBundles) {
                key = key.toLowerCase();
                checkedKeys = checkedKeys || "";
                locale = locale || 'en_us';
                ////$log.debug('locale');
                ////$log.debug(locale);
                var keyListArray = key.split(',');
                ////$log.debug('keylistAray');
                ////$log.debug(keyListArray);
                if (keyListArray.length > 1) {
                    var keyValue = "";
                    for (var i = 0; i < keyListArray.length; i++) {
                        keyValue = _this.getRBKey(keyListArray[i], locale, keyValue);
                        //$log.debug('keyvalue:'+keyValue);
                        if (keyValue.slice(-8) != "_missing") {
                            break;
                        }
                    }
                    return keyValue;
                }
                var bundle = _this.resourceBundles[locale];
                if (angular.isDefined(bundle[key])) {
                    //$log.debug('rbkeyfound:'+bundle[key]);
                    return bundle[key];
                }
                var checkedKeysListArray = checkedKeys.split(',');
                checkedKeysListArray.push(key + '_' + locale + '_missing');
                checkedKeys = checkedKeysListArray.join(",");
                if (angular.isUndefined(originalKey)) {
                    originalKey = key;
                }
                //$log.debug('originalKey:'+key);
                //$log.debug(checkedKeysListArray);
                var localeListArray = locale.split('_');
                //$log.debug(localeListArray);
                if (localeListArray.length === 2) {
                    bundle = _this.resourceBundles[localeListArray[0]];
                    if (angular.isDefined(bundle[key])) {
                        //$log.debug('rbkey found:'+bundle[key]);
                        return bundle[key];
                    }
                    checkedKeysListArray.push(key + '_' + localeListArray[0] + '_missing');
                    checkedKeys = checkedKeysListArray.join(",");
                }
                var keyDotListArray = key.split('.');
                if (keyDotListArray.length >= 3
                    && keyDotListArray[keyDotListArray.length - 2] === 'define') {
                    var newKey = key.replace(keyDotListArray[keyDotListArray.length - 3] + '.define', 'define');
                    //$log.debug('newkey1:'+newKey);
                    return _this.getRBKey(newKey, locale, checkedKeys, originalKey);
                }
                else if (keyDotListArray.length >= 2 && keyDotListArray[keyDotListArray.length - 2] !== 'define') {
                    var newKey = key.replace(keyDotListArray[keyDotListArray.length - 2] + '.', 'define.');
                    //$log.debug('newkey:'+newKey);
                    return _this.getRBKey(newKey, locale, checkedKeys, originalKey);
                }
                //$log.debug(localeListArray);
                if (localeListArray[0] !== "en") {
                    return _this.getRBKey(originalKey, 'en', checkedKeys);
                }
                return checkedKeys;
            }
            return '';
        };
        this.$q = $q;
        this.$http = $http;
        this.appConfig = appConfig;
        this.resourceBundles = resourceBundles;
    }
    return RbKeyService;
}());
exports.RbKeyService = RbKeyService;


/***/ }),
/* 845 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var adminrequest_1 = __webpack_require__(820);
var publicrequest_1 = __webpack_require__(821);
var RequestService = /** @class */ (function () {
    //@ngInject
    function RequestService($injector, observerService) {
        var _this = this;
        this.$injector = $injector;
        this.observerService = observerService;
        this.newAdminRequest = function (url, data, method, headers, $injector, observerService) {
            if (method === void 0) { method = "post"; }
            if (headers === void 0) { headers = { 'Content-Type': "application/json" }; }
            if ($injector === void 0) { $injector = _this.$injector; }
            if (observerService === void 0) { observerService = _this.observerService; }
            return new adminrequest_1.AdminRequest(url, data, method, headers, $injector, observerService);
        };
        this.newPublicRequest = function (url, data, method, headers, $injector, observerService) {
            if (method === void 0) { method = "post"; }
            if (headers === void 0) { headers = { 'Content-Type': "application/x-www-form-urlencoded" }; }
            if ($injector === void 0) { $injector = _this.$injector; }
            if (observerService === void 0) { observerService = _this.observerService; }
            return new publicrequest_1.PublicRequest(url, data, method, headers, $injector, observerService);
        };
        this.$injector = $injector;
        this.observerService = observerService;
    }
    return RequestService;
}());
exports.RequestService = RequestService;


/***/ }),
/* 846 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ScopeService = /** @class */ (function () {
    //ngInject
    function ScopeService() {
        var _this = this;
        this.getRootParentScope = function (scope, targetScopeName) {
            var currentScope = scope;
            while (currentScope != null && angular.isUndefined(currentScope[targetScopeName])) {
                if (angular.isDefined(currentScope.$parent)) {
                    currentScope = currentScope.$parent;
                }
                else {
                    break;
                }
            }
            if (currentScope != null && angular.isDefined(currentScope[targetScopeName])) {
                return currentScope;
            }
        };
        this.hasParentScope = function (scope, targetScopeName) {
            if (_this.getRootParentScope(scope, targetScopeName) != null) {
                return true;
            }
            return false;
        };
    }
    return ScopeService;
}());
exports.ScopeService = ScopeService;


/***/ }),
/* 847 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseservice_1 = __webpack_require__(70);
var SelectionService = /** @class */ (function (_super) {
    __extends(SelectionService, _super);
    //@ngInject
    function SelectionService(observerService) {
        var _this = _super.call(this) || this;
        _this.observerService = observerService;
        _this._selection = {};
        /* add current selectionid to main selection object*/
        _this.createSelections = function (selectionid) {
            _this._selection[selectionid] = {
                allSelected: false,
                ids: []
            };
        };
        _this.radioSelection = function (selectionid, selection) {
            _this.createSelections(selectionid);
            _this._selection[selectionid].ids.push(selection);
            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
        };
        _this.addSelection = function (selectionid, selection) {
            /*if allSelected flag is true addSelection will remove selection*/
            if (_this.isAllSelected(selectionid)) {
                var index = _this._selection[selectionid].ids.indexOf(selection);
                if (index > -1) {
                    _this._selection[selectionid].ids.splice(index, 1);
                    _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
                }
            }
            else if (!_this.hasSelection(selectionid, selection)) {
                _this._selection[selectionid].ids.push(selection);
                _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
            }
            console.info(_this._selection[selectionid]);
        };
        _this.setSelection = function (selectionid, selections) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                _this.createSelections(selectionid);
            }
            _this._selection[selectionid].ids = selections;
        };
        _this.removeSelection = function (selectionid, selection) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                return;
            }
            if (!_this.isAllSelected(selectionid)) {
                var index = _this._selection[selectionid].ids.indexOf(selection);
                if (index > -1) {
                    _this._selection[selectionid].ids.splice(index, 1);
                    _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'uncheck', selectionid: selectionid, selection: selection });
                }
                /*if allSelected flag is true removeSelection will add selection*/
            }
            else if (!_this.hasSelection(selectionid, selection)) {
                _this._selection[selectionid].ids.push(selection);
                _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'uncheck', selectionid: selectionid, selection: selection });
            }
            console.info(_this._selection[selectionid]);
        };
        _this.hasSelection = function (selectionid, selection) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                return false;
            }
            return _this._selection[selectionid].ids.indexOf(selection) > -1;
        };
        _this.getSelections = function (selectionid) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                _this.createSelections(selectionid);
            }
            return _this._selection[selectionid].ids;
        };
        _this.getSelectionCount = function (selectionid) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                _this.createSelections(selectionid);
            }
            return _this._selection[selectionid].ids.length;
        };
        _this.clearSelection = function (selectionid) {
            _this.createSelections(selectionid);
            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'clear' });
            console.info(_this._selection[selectionid]);
        };
        _this.selectAll = function (selectionid) {
            _this._selection[selectionid] = {
                allSelected: true,
                ids: []
            };
            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'selectAll' });
            console.info(_this._selection[selectionid]);
        };
        _this.isAllSelected = function (selectionid) {
            if (angular.isUndefined(_this._selection[selectionid])) {
                _this.createSelections(selectionid);
            }
            return _this._selection[selectionid].allSelected;
        };
        return _this;
    }
    return SelectionService;
}(baseservice_1.BaseService));
exports.SelectionService = SelectionService;


/***/ }),
/* 848 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var baseentityservice_1 = __webpack_require__(17);
var SkuService = /** @class */ (function (_super) {
    __extends(SkuService, _super);
    //@ngInject
    function SkuService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Sku') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        return _this;
    }
    return SkuService;
}(baseentityservice_1.BaseEntityService));
exports.SkuService = SkuService;


/***/ }),
/* 849 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var TypeaheadService = /** @class */ (function () {
    //@ngInject
    function TypeaheadService($timeout, observerService) {
        var _this = this;
        this.$timeout = $timeout;
        this.observerService = observerService;
        this.typeaheadData = {};
        this.typeaheadPromises = {};
        this.typeaheadStates = {};
        this.getTypeaheadSelectionUpdateEvent = function (key) {
            return "typeaheadSelectionUpdated" + key;
        };
        this.attachTypeaheadSelectionUpdateEvent = function (key, callback) {
            _this.observerService.attach(callback, _this.getTypeaheadSelectionUpdateEvent(key));
        };
        this.notifyTypeaheadSelectionUpdateEvent = function (key) {
            _this.observerService.notify(_this.getTypeaheadSelectionUpdateEvent(key));
        };
        this.setTypeaheadState = function (key, state) {
            _this.typeaheadStates[key] = state;
        };
        this.getTypeaheadState = function (key) {
            return _this.typeaheadStates[key];
        };
        this.getTypeaheadPrimaryIDPropertyName = function (key) {
            return _this.getTypeaheadState(key).primaryIDPropertyName;
        };
        this.getIndexOfSelection = function (key, data) {
            for (var j = 0; j < _this.getData(key).length; j++) {
                if (angular.isDefined(data[_this.getTypeaheadPrimaryIDPropertyName(key)]) &&
                    data[_this.getTypeaheadPrimaryIDPropertyName(key)] == _this.getData(key)[j][_this.getTypeaheadPrimaryIDPropertyName(key)]) {
                    return j;
                }
                else if (_this.checkAgainstFallbackProperties(key, _this.getData(key)[j], data)) {
                    return j;
                }
            }
            return -1;
        };
        this.addSelection = function (key, data) {
            if (angular.isUndefined(_this.typeaheadData[key])) {
                _this.typeaheadData[key] = [];
            }
            _this.typeaheadData[key].push(data);
            _this.notifyTypeaheadSelectionUpdateEvent(key);
        };
        this.removeSelection = function (key, index, data) {
            if (angular.isUndefined(index) &&
                angular.isDefined(data)) {
                index = _this.getIndexOfSelection(key, data);
            }
            if (angular.isDefined(index) &&
                angular.isDefined(_this.typeaheadData[key]) &&
                index != -1) {
                _this.updateSelections(key);
                var removedItem = _this.typeaheadData[key].splice(index, 1)[0]; //this will always be an array of 1 element
                _this.notifyTypeaheadSelectionUpdateEvent(key);
                return removedItem;
            }
        };
        this.initializeSelections = function (key, selectedCollectionConfig) {
            selectedCollectionConfig.setAllRecords(true);
            _this.typeaheadPromises[key] = selectedCollectionConfig.getEntity();
            _this.typeaheadPromises[key].then(function (data) {
                for (var j = 0; j < data.records.length; j++) {
                    _this.addSelection(key, data.records[j]);
                }
            }, function (reason) {
                throw ("typeaheadservice had trouble intializing selections for " + key + " because " + reason);
            });
        };
        this.updateSelections = function (key) {
            if (angular.isDefined(_this.getData(key)) && _this.getData(key).length) {
                for (var j = 0; j < _this.getTypeaheadState(key).results.length; j++) {
                    for (var i = 0; i < _this.getData(key).length; i++) {
                        if (_this.getData(key)[i][_this.getTypeaheadPrimaryIDPropertyName(key)] == _this.getTypeaheadState(key).results[j][_this.getTypeaheadPrimaryIDPropertyName(key)]) {
                            _this.markResultSelected(_this.getTypeaheadState(key).results[j], i);
                            break;
                        }
                        var found = _this.checkAgainstFallbackProperties(key, _this.getData(key)[i], _this.getTypeaheadState(key).results[j], i);
                        if (found) {
                            break;
                        }
                    }
                }
            }
        };
        this.markResultSelected = function (result, index) {
            result.selected = true;
            result.selectedIndex = index;
        };
        this.checkAgainstFallbackProperties = function (key, selection, result, selectionIndex) {
            var resultPrimaryID = result[_this.getTypeaheadPrimaryIDPropertyName(key)];
            //is there a singular property to compare against
            if (angular.isDefined(_this.getTypeaheadState(key).propertyToCompare) &&
                _this.getTypeaheadState(key).propertyToCompare.length) {
                if (angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare]) &&
                    selection[_this.getTypeaheadState(key).propertyToCompare] == resultPrimaryID) {
                    if (angular.isDefined(selectionIndex)) {
                        _this.markResultSelected(result, selectionIndex);
                    }
                    return true;
                }
                if (angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare]) &&
                    angular.isDefined(result[_this.getTypeaheadState(key).propertyToCompare]) &&
                    selection[_this.getTypeaheadState(key).propertyToCompare] == result[_this.getTypeaheadState(key).propertyToCompare]) {
                    if (angular.isDefined(selectionIndex)) {
                        _this.markResultSelected(result, selectionIndex);
                    }
                    return true;
                }
            }
            //check the defined fallback properties to see if theres a match
            if (_this.getTypeaheadState(key).fallbackPropertyArray.length > 0) {
                for (var j = 0; j < _this.getTypeaheadState(key).fallbackPropertyArray.length; j++) {
                    var property = _this.getTypeaheadState(key).fallbackPropertyArray[j];
                    if (angular.isDefined(selection[property])) {
                        if (selection[property] == resultPrimaryID) {
                            if (angular.isDefined(selectionIndex)) {
                                _this.markResultSelected(result, selectionIndex);
                            }
                            return true;
                        }
                        if (angular.isDefined(result[property]) &&
                            selection[property] == result[property]) {
                            if (angular.isDefined(selectionIndex)) {
                                _this.markResultSelected(result, selectionIndex);
                            }
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        this.updateSelectionList = function (key) {
            var selectionIDArray = [];
            if (angular.isDefined(_this.getData(key))) {
                for (var j = 0; j < _this.getData(key).length; j++) {
                    var selection = _this.getData(key)[j];
                    var primaryID = selection[_this.getTypeaheadPrimaryIDPropertyName(key)];
                    if (angular.isDefined(primaryID)) {
                        selectionIDArray.push(primaryID);
                    }
                    else if (angular.isDefined(_this.getTypeaheadState(key).propertyToCompare) &&
                        angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare])) {
                        selectionIDArray.push(selection[_this.getTypeaheadState(key).propertyToCompare]);
                    }
                    else if (angular.isDefined(_this.getTypeaheadState(key).fallbackPropertyArray)) {
                        var fallbackPropertyArray = _this.getTypeaheadState(key).fallbackPropertyArray;
                        for (var i = 0; i < fallbackPropertyArray.length; i++) {
                            var fallbackProperty = fallbackPropertyArray[i];
                            if (angular.isDefined(selection[fallbackProperty])) {
                                selectionIDArray.push(selection[fallbackProperty]);
                                break;
                            }
                        }
                    }
                }
            }
            return selectionIDArray.join(",");
        };
        this.getData = function (key) {
            if (key in _this.typeaheadPromises) {
                //wait until it's been intialized
                _this.typeaheadPromises[key].then().finally(function () {
                    return _this.typeaheadData[key] || [];
                });
                delete _this.typeaheadPromises[key];
            }
            else {
                return _this.typeaheadData[key] || [];
            }
        };
        //strips out dangerous directives that cause infinite compile errors 
        // - this probably belongs in a different service but is used for typeahead only at the moment
        this.stripTranscludedContent = function (transcludedContent) {
            for (var i = 0; i < transcludedContent.length; i++) {
                if (angular.isDefined(transcludedContent[i].localName) &&
                    transcludedContent[i].localName == 'ng-transclude') {
                    transcludedContent = transcludedContent.children();
                }
            }
            //prevent collection config from being recompiled
            for (var i = 0; i < transcludedContent.length; i++) {
                if (angular.isDefined(transcludedContent[i].localName) &&
                    transcludedContent[i].localName == 'sw-collection-config') {
                    transcludedContent.splice(i, 1);
                }
            }
            return transcludedContent;
        };
    }
    return TypeaheadService;
}());
exports.TypeaheadService = TypeaheadService;


/***/ }),
/* 850 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
var baseservice_1 = __webpack_require__(70);
var UtilityService = /** @class */ (function (_super) {
    __extends(UtilityService, _super);
    //@ngInject
    function UtilityService($parse) {
        var _this = _super.call(this) || this;
        _this.$parse = $parse;
        _this.structKeyExists = function (struct, key) {
            return key in struct;
        };
        _this.keyToAttributeString = function (key) {
            var attributeString = "data-";
            for (var i = 0; i < key.length; i++) {
                if (key.charAt(i) == "_") {
                    attributeString += "-";
                }
                else if (_this.isUpperCase(key.charAt(i))) {
                    //special case for ID and Acronyms because it doesn't follow naming conventions
                    if (i + 1 <= key.length && _this.isUpperCase(key.charAt(i + 1))) {
                        if (key.charAt(i) + key.charAt(i + 1) == "ID") {
                            attributeString += "-id";
                            i++; //skip ahead
                        }
                        else if (_this.isUpperCase(key.charAt(i + 1))) {
                            attributeString += "-";
                            //this handles acronyms IE QATS 
                            while (i + 1 <= key.length && _this.isUpperCase(key.charAt(i + 1))) {
                                attributeString += key.charAt(i).toLowerCase();
                                i++;
                            }
                        }
                    }
                    else {
                        attributeString += "-" + key.charAt(i).toLowerCase();
                    }
                }
                else {
                    attributeString += key.charAt(i);
                }
            }
            return attributeString;
        };
        _this.isUpperCase = function (character) {
            return character == character.toUpperCase();
        };
        _this.isLowerCase = function (character) {
            return character == character.toLowerCase();
        };
        _this.snakeToCapitalCase = function (s) {
            return s.charAt(0).toUpperCase() + s.replace(/(\-\w)/g, function (m) { return m[1].toUpperCase(); }).slice(1);
        };
        _this.camelCaseToSnakeCase = function (s) {
            return s.replace(/([A-Z])/g, function ($1) { return "-" + $1.toLowerCase(); });
        };
        _this.replaceStringWithProperties = function (stringItem, context) {
            var properties = _this.getPropertiesFromString(stringItem);
            if (!properties)
                return;
            var data = [];
            angular.forEach(properties, function (property) {
                if (property.indexOf('.') != -1) {
                    property = property.replace('.', '_');
                }
                var parseFunction = _this.$parse(property);
                data.push(parseFunction(context));
            });
            return _this.replacePropertiesWithData(stringItem, data);
        };
        //used to do inheritance at runtime
        _this.extend = function (ChildClass, ParentClass) {
            ChildClass.prototype = new ParentClass();
            ChildClass.prototype.constructor = ChildClass;
        };
        _this.getQueryParamsFromUrl = function (url) {
            // This function is anonymous, is executed immediately and
            // the return value is assigned to QueryString!
            var query_string = {};
            if (url && url.split) {
                var spliturl = url.split('?');
                if (spliturl.length) {
                    url = spliturl[1];
                    if (url && url.split) {
                        var vars = url.split("&");
                        if (vars && vars.length) {
                            for (var i = 0; i < vars.length; i++) {
                                var pair = vars[i].split("=");
                                // If first entry with this name
                                if (typeof query_string[pair[0]] === "undefined") {
                                    query_string[pair[0]] = pair[1];
                                    // If second entry with this name
                                }
                                else if (typeof query_string[pair[0]] === "string") {
                                    var arr = [query_string[pair[0]], pair[1]];
                                    query_string[pair[0]] = arr;
                                    // If third or later entry with this name
                                }
                                else {
                                    query_string[pair[0]].push(pair[1]);
                                }
                            }
                        }
                    }
                }
            }
            return query_string;
        };
        _this.isAngularRoute = function () {
            return /[\?&]ng#!/.test(window.location.href);
        };
        _this.ArrayFindByPropertyValue = function (arr, property, value) {
            var currentIndex = -1;
            arr.forEach(function (arrItem, index) {
                if (arrItem[property] && arrItem[property] === value) {
                    currentIndex = index;
                }
            });
            return currentIndex;
        };
        _this.listLast = function (list, delimiter) {
            if (list === void 0) { list = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var listArray = list.split(delimiter);
            return listArray[listArray.length - 1];
        };
        _this.listRest = function (list, delimiter) {
            if (list === void 0) { list = ''; }
            if (delimiter === void 0) { delimiter = ","; }
            var listArray = list.split(delimiter);
            if (listArray.length) {
                listArray.splice(0, 1);
            }
            return listArray.join(delimiter);
        };
        _this.listFirst = function (list, delimiter) {
            if (list === void 0) { list = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var listArray = list.split(delimiter);
            return listArray[0];
        };
        _this.listPrepend = function (list, substring, delimiter) {
            if (list === void 0) { list = ''; }
            if (substring === void 0) { substring = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var listArray = list.split(delimiter);
            if (listArray.length) {
                return substring + delimiter + list;
            }
            else {
                return substring;
            }
        };
        _this.listAppend = function (list, substring, delimiter) {
            if (list === void 0) { list = ''; }
            if (substring === void 0) { substring = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var listArray = list.split(delimiter);
            if (list.trim() != '' && listArray.length) {
                return list + delimiter + substring;
            }
            else {
                return substring;
            }
        };
        _this.listAppendUnique = function (list, substring, delimiter) {
            if (list === void 0) { list = ''; }
            if (substring === void 0) { substring = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var listArray = list.split(delimiter);
            if (list.trim() != '' && listArray.length && listArray.indexOf(substring) == -1) {
                return list + delimiter + substring;
            }
            else {
                return substring;
            }
        };
        /**
         * Removes a substring from a string.
         * str: The original string.
         * subStr: The string to remove.
         * returns the modified string.
         */
        _this.listRemove = function (str, substring) {
            if (str.indexOf(substring) != -1) {
                //remove it cause its no longer selected.
                str = str.replace(substring, "");
                str = str.replace(",,", "");
                if (str == ",") {
                    str = "";
                }
                if (str.substring(0, 1) == ',') {
                    str = str.substring(1);
                }
                str = str.substring(0, str.length - 1);
            }
            return str;
        };
        _this.formatValue = function (value, formatType, formatDetails, entityInstance) {
            if (angular.isUndefined(formatDetails)) {
                formatDetails = {};
            }
            var typeList = ["currency", "date", "datetime", "pixels", "percentage", "second", "time", "truefalse", "url", "weight", "yesno"];
            if (typeList.indexOf(formatType)) {
                _this['format_' + formatType](value, formatDetails, entityInstance);
            }
            return value;
        };
        _this.format_currency = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
        };
        _this.format_date = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
        };
        _this.format_datetime = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
        };
        _this.format_pixels = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
        };
        _this.format_yesno = function (value, formatDetails, entityInstance) {
            if (angular.isUndefined) {
                formatDetails = {};
            }
            if (Boolean(value) === true) {
                return entityInstance.metaData.$$getRBKey("define.yes");
            }
            else if (value === false || value.trim() === 'No' || value.trim === 'NO' || value.trim() === '0') {
                return entityInstance.metaData.$$getRBKey("define.no");
            }
        };
        _this.left = function (stringItem, count) {
            return stringItem.substring(0, count);
        };
        _this.right = function (stringItem, count) {
            return stringItem.substring(stringItem.length - count, stringItem.length);
        };
        //this.utilityService.mid(propertyIdentifier,1,propertyIdentifier.lastIndexOf('.'));
        _this.mid = function (stringItem, start, count) {
            var end = start + count;
            return stringItem.substring(start, end);
        };
        _this.getPropertiesFromString = function (stringItem) {
            if (!stringItem)
                return;
            var capture = false;
            var property = '';
            var results = [];
            for (var i = 0; i < stringItem.length; i++) {
                if (!capture && stringItem.substr(i, 2) == "${") {
                    property = '';
                    capture = true;
                    i = i + 1; //skip the ${
                }
                else if (capture && stringItem[i] != '}') {
                    property = property.concat(stringItem[i]);
                }
                else if (capture) {
                    results.push(property);
                    capture = false;
                }
            }
            return results;
        };
        _this.replacePropertiesWithData = function (stringItem, data) {
            var results = _this.getPropertiesFromString(stringItem);
            for (var i = 0; i < results.length; i++) {
                stringItem = stringItem.replace('${' + results[i] + '}', data[i]);
            }
            return stringItem;
        };
        _this.replaceAll = function (stringItem, find, replace) {
            return stringItem.replace(new RegExp(_this.escapeRegExp(find), 'g'), replace);
        };
        _this.escapeRegExp = function (stringItem) {
            return stringItem.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
        };
        _this.createID = function (count) {
            var count = count || 26;
            var text = "";
            var firstPossibleCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
            var nextPossibleCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            var currentPossibleCharacters = "";
            for (var i = 0; i < count; i++) {
                if (i === 0) {
                    currentPossibleCharacters = firstPossibleCharacters;
                }
                else {
                    currentPossibleCharacters = nextPossibleCharacters;
                }
                text += currentPossibleCharacters.charAt(Math.floor(Math.random() * currentPossibleCharacters.length));
            }
            return text;
        };
        //list functions
        _this.arrayToList = function (array, delimiter) {
            if (delimiter != null) {
                return array.join(delimiter);
            }
            else {
                return array.join();
            }
        };
        _this.getPropertyValue = function (object, propertyIdentifier) {
            var keys = propertyIdentifier.split('.'), obj = object, keyPart;
            while ((keyPart = keys.shift()) && keys.length) {
                obj = obj[keyPart];
            }
            return obj[keyPart];
        };
        _this.setPropertyValue = function (object, propertyIdentifier, value) {
            var keys = propertyIdentifier.split('.'), obj = object, keyPart;
            while ((keyPart = keys.shift()) && keys.length) {
                if (!obj[keyPart]) {
                    obj[keyPart] = {};
                }
                obj = obj[keyPart];
            }
            obj[keyPart] = value;
        };
        _this.nvpToObject = function (NVPData) {
            var object = {};
            for (var key in NVPData) {
                var value = NVPData[key];
                var propertyIdentitifer = key.replace(/\_/g, '.');
                _this.setPropertyValue(object, propertyIdentitifer, value);
            }
            return object;
        };
        _this.isDescendantElement = function (parent, child) {
            var node = child.parentNode;
            while (node != null) {
                if (node == parent) {
                    return true;
                }
                node = node.parentNode;
            }
            return false;
        };
        //utility service toJson avoids circular references
        _this.toJson = function (obj) {
            var seen = [];
            return JSON.stringify(obj, function (key, val) {
                if (val != null && typeof val == "object") {
                    if (seen.indexOf(val) >= 0) {
                        return;
                    }
                    seen.push(val);
                }
                return val;
            });
        };
        _this.listFind = function (list, value, delimiter) {
            if (list === void 0) { list = ''; }
            if (value === void 0) { value = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var splitString = list.split(delimiter);
            var stringFound = -1;
            for (var i = 0; i < splitString.length; i++) {
                var stringPart = splitString[i];
                if (stringPart === value) {
                    stringFound = i;
                }
            }
            return stringFound;
        };
        _this.listLen = function (list, delimiter) {
            if (list === void 0) { list = ''; }
            if (delimiter === void 0) { delimiter = ','; }
            var splitString = list.split(delimiter);
            return splitString.length;
        };
        //This will enable you to sort by two separate keys in the order they are passed in
        _this.arraySorter = function (array, keysToSortBy) {
            var arrayOfTypes = [], returnArray = [], firstKey = keysToSortBy[0];
            if (angular.isDefined(keysToSortBy[1])) {
                var secondKey = keysToSortBy[1];
            }
            for (var itemIndex in array) {
                if (!(arrayOfTypes.indexOf(array[itemIndex][firstKey]) > -1)) {
                    arrayOfTypes.push(array[itemIndex][firstKey]);
                }
            }
            arrayOfTypes.sort(function (a, b) {
                if (a < b) {
                    return -1;
                }
                else if (a > b) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (var typeIndex in arrayOfTypes) {
                var tempArray = [];
                for (var itemIndex in array) {
                    if (array[itemIndex][firstKey] == arrayOfTypes[typeIndex]) {
                        tempArray.push(array[itemIndex]);
                    }
                }
                if (keysToSortBy[1] != null) {
                    tempArray.sort(function (a, b) {
                        if (a[secondKey] < b[secondKey]) {
                            return -1;
                        }
                        else if (a[secondKey] > b[secondKey]) {
                            return 1;
                        }
                        else {
                            return 0;
                        }
                    });
                }
                for (var finalIndex in tempArray) {
                    returnArray.push(tempArray[finalIndex]);
                }
            }
            return returnArray;
        };
        _this.minutesOfDay = function (m) {
            return m.getMinutes() + m.getHours() * 60;
        };
        _this.removeTimeOffset = function (timestampStr) {
            var date = new Date(timestampStr);
            var correctDate = new Date();
            correctDate.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());
            return correctDate.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
        };
        return _this;
    }
    return UtilityService;
}(baseservice_1.BaseService));
exports.UtilityService = UtilityService;


/***/ }),
/* 851 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var PageDialogController = /** @class */ (function () {
    //@ngInject
    function PageDialogController($scope, $location, $anchorScroll, dialogService) {
        $scope.$id = 'pageDialogController';
        //get url param to retrieve collection listing
        $scope.pageDialogs = dialogService.getPageDialogs();
        $scope.scrollToTopOfDialog = function () {
            $location.hash('/#topOfPageDialog');
            $anchorScroll();
        };
        $scope.pageDialogStyle = { "z-index": 3000 };
    }
    return PageDialogController;
}());
exports.PageDialogController = PageDialogController;


/***/ }),
/* 852 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DialogService = /** @class */ (function () {
    function DialogService(hibachiPathBuilder) {
        var _this = this;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.get = function () {
            return _this._pageDialogs || [];
        };
        this.addPageDialog = function (name, params) {
            var newDialog = {
                'path': name + '.html',
                'params': params
            };
            _this._pageDialogs.push(newDialog);
        };
        this.removePageDialog = function (index) {
            _this._pageDialogs.splice(index, 1);
        };
        this.getPageDialogs = function () {
            return _this._pageDialogs;
        };
        this.removeCurrentDialog = function () {
            _this._pageDialogs.splice(_this._pageDialogs.length - 1, 1);
        };
        this.getCurrentDialog = function () {
            return _this._pageDialogs[_this._pageDialogs.length - 1];
        };
        this._pageDialogs = [];
        this.hibachiPathBuilder = hibachiPathBuilder;
    }
    DialogService.$inject = [
        'hibachiPathBuilder'
    ];
    return DialogService;
}());
exports.DialogService = DialogService;


/***/ }),
/* 853 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDetail = /** @class */ (function () {
    function SWDetail($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + '/detail.html',
            link: function (scope, element, attr) {
                scope.$id = "slatwallDetailController";
                $log.debug('slatwallDetailController');
                /*Sets the view dirty on save*/
                scope.setDirty = function (entity) {
                    angular.forEach(entity.forms, function (form) {
                        form.$setSubmitted();
                    });
                };
                var setupMetaData = function () {
                    scope[scope.entityName.toLowerCase()] = scope.entity;
                    scope.entity.metaData.$$getDetailTabs().then(function (value) {
                        scope.detailTabs = value.data;
                        $log.debug('detailtabs');
                        $log.debug(scope.detailTabs);
                    });
                };
                var propertyCasedEntityName = scope.entityName.charAt(0).toUpperCase() + scope.entityName.slice(1);
                scope.tabPartialPath = hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath);
                scope.getEntity = function () {
                    if (scope.entityID === 'create') {
                        scope.createMode = true;
                        scope.entity = $hibachi['new' + propertyCasedEntityName]();
                        setupMetaData();
                    }
                    else {
                        scope.createMode = false;
                        var entityPromise = $hibachi['get' + propertyCasedEntityName]({ id: scope.entityID });
                        entityPromise.promise.then(function () {
                            scope.entity = entityPromise.value;
                            setupMetaData();
                        });
                    }
                };
                scope.getEntity();
                scope.deleteEntity = function () {
                    var deletePromise = scope.entity.$$delete();
                    deletePromise.then(function () {
                        $location.path('/entity/' + propertyCasedEntityName + '/');
                    });
                };
                scope.allTabsOpen = false;
            }
        };
    }
    SWDetail.Factory = function () {
        var directive = function ($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) { return new SWDetail($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$location',
            '$log',
            '$hibachi',
            'coreEntityPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDetail;
}());
exports.SWDetail = SWDetail;


/***/ }),
/* 854 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWDetailTabs = /** @class */ (function () {
    function SWDetailTabs(coreEntityPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + 'detailtabs.html',
            link: function (scope, element, attr) {
            }
        };
    }
    SWDetailTabs.Factory = function () {
        var directive = function (coreEntityPartialsPath, hibachiPathBuilder) { return new SWDetailTabs(coreEntityPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreEntityPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWDetailTabs;
}());
exports.SWDetailTabs = SWDetailTabs;


/***/ }),
/* 855 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWList = /** @class */ (function () {
    function SWList($log, coreEntityPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + '/list.html',
            link: function (scope, element, attr) {
                $log.debug('slatwallList init');
                //scope.getCollection = function(){
                //
                //	var pageShow = 50;
                //	if(scope.pageShow !== 'Auto'){
                //		pageShow = scope.pageShow;
                //	}
                //	scope.entityName = scope.entityName.charAt(0).toUpperCase()+scope.entityName.slice(1);
                //	var collectionListingPromise = $hibachi.getEntity(scope.entityName, {currentPage:scope.currentPage, pageShow:pageShow, keywords:scope.keywords});
                //	collectionListingPromise.then(function(value){
                //		scope.collection = value;
                //		scope.collectionConfig = angular.fromJson(scope.collection.collectionConfig);
                //	});
                //};
                //scope.getCollection();
            }
        };
    }
    SWList.Factory = function () {
        var directive = function ($log, coreEntityPartialsPath, hibachiPathBuilder) { return new SWList($log, coreEntityPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'coreEntityPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWList;
}());
exports.SWList = SWList;


/***/ }),
/* 856 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var OtherWiseController = /** @class */ (function () {
    //@ngInject
    function OtherWiseController($scope) {
        $scope.$id = "otherwiseController";
    }
    return OtherWiseController;
}());
exports.OtherWiseController = OtherWiseController;


/***/ }),
/* 857 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var RouterController = /** @class */ (function () {
    //@ngInject
    function RouterController($scope, $routeParams, $location, $log, utilityService) {
        $scope.$id = "routerController";
        $scope.partialRoute = '';
        $log.debug($routeParams);
        $log.debug($location);
        var path = $location.path();
        $scope.controllerType = path.split('/')[1];
        var type;
        if ($scope.controllerType === 'entity') {
            //remove all dashes
            $scope.entityName = utilityService.snakeToCapitalCase($routeParams.entityName);
            if (angular.isDefined($routeParams.entityID)) {
                $scope.entityID = $routeParams.entityID || '';
            }
        }
    }
    return RouterController;
}());
exports.RouterController = RouterController;


/***/ }),
/* 858 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAddressFormController = /** @class */ (function () {
    //@ngInject
    function SWAddressFormController($scope, $log, observerService, $rootScope) {
        var _this = this;
        this.$scope = $scope;
        this.$log = $log;
        this.observerService = observerService;
        this.$rootScope = $rootScope;
        this.showAddressBookSelect = false;
        this.showCountrySelect = true;
        this.showSubmitButton = true;
        this.showCloseButton = true;
        this.param = "?slataction=";
        this.showAlerts = "true";
        this.getAction = function () {
            if (!angular.isDefined(_this.action)) {
                _this.action = "addAddress";
            }
            if (_this.action.indexOf(":") != -1 && _this.action.indexOf(_this.param) == -1) {
                _this.action = _this.param + _this.action;
            }
            return _this.action;
        };
        this.hasField = function (field) {
            if (_this.fieldList.indexOf(field) != -1) {
                return true;
            }
            return false;
        };
        this.submitKeyCheck = function (event) {
            if (event.form.$name == _this.addressName &&
                event.event.keyCode == 13) {
                event.swForm.submit(event.swForm.action);
            }
        };
        //if exists, just name it slatwall.
        if (angular.isDefined(this.slatwallScope)) {
            this.slatwall = this.slatwallScope;
        }
        if (this.fieldList == undefined) {
            this.fieldList = "countryCode,name,company,streetAddress,street2Address,locality,city,stateCode,postalCode";
        }
        if (this.showAddressBookSelect == undefined) {
            this.showAddressBookSelect = false;
        }
        if (this.showCountrySelect == undefined) {
            this.showCountrySelect = true;
        }
        if (this.action == undefined) {
            this.showSubmitButton = false;
        }
        if ($rootScope.slatwall && !$scope.slatwall) {
            $scope.slatwall = $rootScope.slatwall;
        }
        var addressName = this.addressName;
        if (this.address) {
            this.address.getData = function () {
                var formData = _this.address || {};
                var form = _this.address.forms[addressName];
                for (var key_1 in form) {
                    var val = form[key_1];
                    if (typeof val === 'object' && val.hasOwnProperty('$modelValue')) {
                        if (val.$modelValue) {
                            val = val.$modelValue;
                        }
                        else if (val.$viewValue) {
                            val = val.$viewValue;
                        }
                        else {
                            val = "";
                        }
                        if (angular.isString(val)) {
                            formData[key_1] = val;
                        }
                        if (val.$modelValue) {
                            formData[key_1] = val.$modelValue;
                        }
                        else if (val.$viewValue) {
                            formData[key_1] = val.$viewValue;
                        }
                    }
                }
                return formData || "";
            };
        }
        if (!this.eventListeners) {
            this.eventListeners = {};
        }
        if (this.submitOnEnter) {
            this.eventListeners.keyup = this.submitKeyCheck;
        }
        if (this.eventListeners) {
            for (var key in this.eventListeners) {
                observerService.attach(this.eventListeners[key], key);
            }
        }
    }
    return SWAddressFormController;
}());
exports.SWAddressFormController = SWAddressFormController;
var SWAddressForm = /** @class */ (function () {
    // @ngInject
    function SWAddressForm(coreFormPartialsPath, hibachiPathBuilder) {
        var _this = this;
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.transclude = true;
        this.controller = SWAddressFormController;
        this.controllerAs = 'SwAddressForm';
        this.bindToController = {
            action: '@',
            actionText: '@',
            context: '@',
            customPartial: '@',
            slatwallScope: '=',
            address: "=",
            id: "@?",
            fieldNamePrefix: "@",
            fieldList: "@",
            fieldClass: "@",
            fulfillmentIndex: "@",
            tabIndex: "@",
            addressName: "@",
            showAddressBookSelect: "@",
            showCountrySelect: "@",
            showSubmitButton: "@",
            showCloseButton: "@",
            showAlerts: "@",
            eventListeners: "=?",
            submitOnEnter: "@"
        };
        this.scope = {};
        this.templateUrl = function (elem, attrs) {
            if (attrs.customPartial) {
                if (attrs.customPartial === "true") {
                    return hibachiConfig.customPartialsPath + "addressform.html";
                }
                else {
                    return hibachiConfig.customPartialsPath + attrs.customPartial;
                }
            }
            else {
                return _this.hibachiPathBuilder.buildPartialsPath(_this.coreFormPartialsPath) + "addressform.html";
            }
        };
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWAddressForm.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWAddressForm(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWAddressForm;
}());
exports.SWAddressForm = SWAddressForm;


/***/ }),
/* 859 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWErrorDisplayController = /** @class */ (function () {
    //@ngInject
    function SWErrorDisplayController($injector) {
        this.$injector = $injector;
        this.$injector = $injector;
    }
    SWErrorDisplayController.prototype.$onInit = function () {
        var bindToControllerProps = this.$injector.get('swErrorDisplayDirective')[0].bindToController;
        for (var i in bindToControllerProps) {
            if (!this[i] && i !== 'name') {
                if (!this[i] && this.swPropertyDisplay && this.swPropertyDisplay[i]) {
                    this[i] = this.swPropertyDisplay[i];
                }
                else if (!this[i] && this.swfPropertyDisplay && this.swfPropertyDisplay[i]) {
                    this[i] = this.swfPropertyDisplay[i];
                }
                else if (!this[i] && this.swForm && this.swForm[i]) {
                    this[i] = this.swForm[i];
                }
            }
        }
        this.property = this.property || this.propertyIdentifier;
        this.propertyIdentifier = this.propertyIdentifier || this.property;
        if (!this.name && this.property) {
            this.name = this.property;
        }
    };
    return SWErrorDisplayController;
}());
exports.SWErrorDisplayController = SWErrorDisplayController;
var SWErrorDisplay = /** @class */ (function () {
    // @ngInject
    function SWErrorDisplay(coreFormPartialsPath, hibachiPathBuilder) {
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.require = {
            swForm: "^?swForm",
            form: "^?form",
            swPropertyDisplay: "^?swPropertyDisplay",
            swfPropertyDisplay: "^?swfPropertyDisplay"
        };
        this.restrict = "E";
        this.controller = SWErrorDisplayController;
        this.controllerAs = "swErrorDisplay";
        this.scope = {};
        this.bindToController = {
            form: "=?",
            name: "@?",
            property: "@?",
            propertyIdentifier: "@?",
            errorClass: "@?"
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "errordisplay.html";
    }
    SWErrorDisplay.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWErrorDisplay(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWErrorDisplay;
}());
exports.SWErrorDisplay = SWErrorDisplay;


/***/ }),
/* 860 */,
/* 861 */,
/* 862 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**********************************************************************************************
 **********************************************************************************************
 **********************************************************************************************
 **		___________________________________________
 ** 	Form Field - type have the following options (This is for the frontend so it can be modified):
 **
 **		checkbox			|	As a single checkbox this doesn't require any options, but it will create a hidden field for you so that the key gets submitted even when not checked.  The value of the checkbox will be 1
 **		checkboxgroup		|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		file				|	No value can be passed in
 **		multiselect			|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		password			|	No Value can be passed in
 **		radiogroup			|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		select      		|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
 **		text				|	Simple Text Field
 **		textarea			|	Simple Textarea
 **		yesno				|	This is used by booleans and flags to create a radio group of Yes and No
 **		submit				|	submit button to post these properties back to the server.
 **		------------------------------------------------------------------------------------------------------
 **
 **		attr.valueObject" type="any" default="" />
 **		attr.valueObjectProperty" type="string" default="" />
 **
 **		General Settings that end up getting applied to the value object
 **		attr.type" type="string" default="text"
 **		attr.name" type="string" default=""
 **		attr.class" type="string" default=""
 **		attr.value" type="any" default=""
 **		attr.valueOptions" type="array" default="#arrayNew(1)#"		<!--- Used for select, checkbox group, multiselect --->
 **		attr.fieldAttributes" type="string" default=""
 **
 *********************************************************************************************
 *********************************************************************************************
 *********************************************************************************************
 */
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/**
    * Property Display Controller handles the logic for this directive.
    */
var SWFFormFieldController = /** @class */ (function () {
    //@ngInject
    function SWFFormFieldController($scope, $element, $compile, utilityService) {
        this.$scope = $scope;
        this.$element = $element;
        this.$compile = $compile;
        this.utilityService = utilityService;
        this.utilityService = utilityService;
        this.$scope = $scope;
        this.$element = $element;
        this.$compile = $compile;
    }
    /**
        * Handles the logic for the frontend version of the property display.
        */
    SWFFormFieldController.$inject = ['$scope', '$element', '$compile', 'utilityService'];
    return SWFFormFieldController;
}());
/**
    * This class handles configuring formFields for use in process forms on the front end.
    */
var SWFFormField = /** @class */ (function () {
    function SWFFormField(coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = "E";
        this.require = { swfPropertyDisplayCtrl: "^?swfPropertyDisplay", form: "^?form" };
        this.controller = SWFFormFieldController;
        this.controllerAs = "swfFormField";
        this.scope = {};
        this.bindToController = {
            propertyDisplay: "=?",
            propertyIdentifier: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            type: "@?"
        };
        this.link = function (scope, element, attrs, formController, transcludeFn) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'swfformfield.html';
    }
    /**
        * Handles injecting the partials path into this class
        */
    SWFFormField.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFFormField(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFFormField;
}());
exports.SWFFormField = SWFFormField;


/***/ }),
/* 863 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/**
* Form Controller handles the logic for this directive.
*/
var SWFormController = /** @class */ (function () {
    /**
     * This controller handles most of the logic for the swFormDirective when more complicated self inspection is needed.
     */
    // @ngInject
    function SWFormController($scope, $element, $hibachi, $http, $timeout, observerService, $rootScope, entityService, utilityService) {
        var _this = this;
        this.$scope = $scope;
        this.$element = $element;
        this.$hibachi = $hibachi;
        this.$http = $http;
        this.$timeout = $timeout;
        this.observerService = observerService;
        this.$rootScope = $rootScope;
        this.entityService = entityService;
        this.utilityService = utilityService;
        this.eventsObj = [];
        this.formData = {};
        this.isObject = function () {
            return (angular.isObject(_this.object));
        };
        this.submitKeyCheck = function (event) {
            if (event.form.$name == _this.name &&
                event.event.keyCode == 13) {
                _this.submit(event.swForm.action);
            }
        };
        /** create the generic submit function */
        this.submit = function (actions) {
            actions = actions || _this.action;
            console.log('actions!', actions);
            _this.clearErrors();
            _this.formData = _this.getFormData() || "";
            _this.doActions(actions);
        };
        //array or comma delimited
        this.doActions = function (actions) {
            if (angular.isArray(actions)) {
                for (var _i = 0, _a = actions; _i < _a.length; _i++) {
                    var action = _a[_i];
                    _this.doAction(action);
                }
            }
            else if (angular.isString(actions)) {
                _this.doAction(actions);
            }
            else {
                throw ("Unknown type of action exception");
            }
        };
        // /** iterates through the factory submitting data */
        this.doAction = function (action) {
            if (!action) {
                throw "Action not defined on form";
            }
            _this.formData = _this.formData || {};
            //
            var request = _this.$rootScope.hibachiScope.doAction(action, _this.formData)
                .then(function (result) {
                if (!result)
                    return;
                _this.object.forms[_this.name].$setSubmitted(true);
                if (result.errors) {
                    _this.parseErrors(result.errors);
                }
            });
        };
        /****
             * Handle parsing through the server errors and injecting the error text for that field
            * If the form only has a submit, then simply call that function and set errors.
            ***/
        this.parseErrors = function (errors) {
            if (angular.isDefined(errors) && errors) {
                angular.forEach(errors, function (val, key) {
                    var primaryElement = _this.$element.find("[error-for='" + key + "']");
                    _this.$timeout(function () {
                        errors[key].forEach(function (error) {
                            primaryElement.append("<div name='" + key + "Error'>" + error + "</div>");
                        });
                    }, 0);
                }, _this);
            }
        };
        /** find and clear all errors on form */
        this.clearErrors = function () {
            /** clear all form errors on submit. */
            _this.$timeout(function () {
                var errorElements = _this.$element.find("[error-for]");
                errorElements.empty();
            }, 0);
        };
        this.eventsHandler = function (params) {
            //this will call any form specific functions such as hide,show,refresh,update or whatever else you later add
            for (var e in params.events) {
                if (angular.isDefined(params.events[e].value) && params.events[e].value == _this.name.toLowerCase()) {
                    if (params.events[e].name && _this[params.events[e].name]) {
                        _this[params.events[e].name](params.events[e].value);
                    }
                }
            }
        };
        /** hides this directive on event */
        this.hide = function (param) {
            if (_this.name.toLowerCase() == param) {
                _this.$element.hide();
            }
        };
        /** shows this directive on event */
        this.show = function (param) {
            if (_this.name.toLowerCase() == param) {
                _this.$element.show();
            }
        };
        /** refreshes this directive on event */
        this.refresh = function (params) {
            //stub
        };
        /** updates this directive on event */
        this.update = function (params) {
            //stub
        };
        /** clears this directive on event */
        this.clear = function (params) {
            var iterable = _this.formCtrl;
            angular.forEach(iterable, function (val, key) {
                if (typeof val === 'object' && val.hasOwnProperty('$modelValue')) {
                    if (_this.object.forms[_this.name][key].$viewValue) {
                        _this.object.forms[_this.name][key].$setViewValue("");
                        _this.object.forms[_this.name][key].$render();
                    }
                }
                else {
                    val = "";
                }
            });
        };
        /** returns all the data from the form by iterating the form elements */
        this.getFormData = function () {
            var iterable = _this.formCtrl;
            angular.forEach(iterable, function (val, key) {
                if (typeof val === 'object' && val.hasOwnProperty('$modelValue')) {
                    if (_this.object.forms[_this.name][key].$modelValue) {
                        val = _this.object.forms[_this.name][key].$modelValue;
                    }
                    else if (_this.object.forms[_this.name][key].$viewValue) {
                        val = _this.object.forms[_this.name][key].$viewValue;
                    }
                    else if (_this.object.forms[_this.name][key].$dirty) {
                        val = "";
                    }
                    /** Check for form elements that have a name that doesn't start with $ */
                    if (angular.isString(val) || angular.isNumber(val) || typeof val == 'boolean') {
                        _this.formData[key] = val;
                    }
                    if (val.$modelValue != undefined) {
                        _this.formData[key] = val.$modelValue;
                    }
                    else if (val.$viewValue != undefined) {
                        _this.formData[key] = val.$viewValue;
                    }
                }
                else {
                }
            });
            return _this.formData || "";
        };
        /** only use if the developer has specified these features with isProcessForm */
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        if (angular.isUndefined(this.isDirty)) {
            this.isDirty = false;
        }
        //object can be either an instance or a string that will become an instance
        if (angular.isString(this.object)) {
            var objectNameArray = this.object.split('_');
            this.entityName = objectNameArray[0];
            //if the object name array has two parts then we can infer that it is a process object
            if (objectNameArray.length > 1) {
                this.context = this.context || objectNameArray[1];
                this.isProcessForm = true;
            }
            else {
                this.context = this.context || 'save';
                this.isProcessForm = false;
            }
            //convert the string to an object
            this.$timeout(function () {
                _this.object = _this.$hibachi['new' + _this.object]();
            });
        }
        else {
            if (this.object && this.object.metaData) {
                this.isProcessForm = this.object.metaData.isProcessObject;
                this.entityName = this.object.metaData.className.split('_')[0];
                if (this.isProcessForm) {
                    this.context = this.context || this.object.metaData.className.split('_')[1];
                }
                else {
                    this.context = this.context || 'save';
                }
            }
        }
        //
        this.context = this.context || this.name;
        if (this.isProcessForm) {
            /** Cart is an alias for an Order */
            if (this.entityName == "Order") {
                this.entityName = "Cart";
            }
            ;
        }
        if (this.submitOnEnter) {
            this.eventListeners = this.eventListeners || {};
            this.eventListeners.keyup = this.submitKeyCheck;
        }
        if (this.eventListeners) {
            for (var key in this.eventListeners) {
                this.observerService.attach(this.eventListeners[key], key);
            }
        }
    }
    return SWFormController;
}());
exports.SWFormController = SWFormController;
var SWForm = /** @class */ (function () {
    // @ngInject
    function SWForm(coreFormPartialsPath, hibachiPathBuilder) {
        this.coreFormPartialsPath = coreFormPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.templateUrl = "";
        this.transclude = true;
        this.restrict = "E";
        this.controller = SWFormController;
        this.controllerAs = "swForm";
        this.scope = {};
        /**
         * Binds all of our variables to the controller so we can access using this
         */
        this.bindToController = {
            name: "@?",
            context: "@?",
            entityName: "@?",
            hiddenFields: "=?",
            action: "@?",
            actions: "@?",
            formClass: "@?",
            formData: "=?",
            errorClass: '@?',
            object: "=?",
            onSuccess: "@?",
            onError: "@?",
            hideUntil: "@?",
            isDirty: "=?",
            inputAttributes: "@?",
            eventListeners: "=?",
            eventAnnouncers: "@",
            submitOnEnter: "@"
        };
        /**
            * Sets the context of this form
            */
        this.link = function (scope, element, attrs, controller) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "form.html";
    }
    /**
     * Handles injecting the partials path into this class
     */
    SWForm.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWForm(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWForm;
}());
exports.SWForm = SWForm;


/***/ }),
/* 864 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormFieldController = /** @class */ (function () {
    //@ngInject
    function SWFormFieldController($injector, $scope, $timeout, $log, $hibachi, observerService, utilityService) {
        var _this = this;
        this.$injector = $injector;
        this.$scope = $scope;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.utilityService = utilityService;
        this.formFieldChanged = function (option) {
            if (_this.fieldType === 'yesno') {
                _this.object.data[_this.propertyIdentifier] = option.value;
                _this.form[_this.propertyIdentifier].$dirty = true;
                _this.form['selected' + _this.object.metaData.className + _this.propertyIdentifier + _this.selectedRadioFormName].$dirty = false;
            }
            else if (_this.fieldType == 'checkbox') {
                _this.object.data[_this.propertyIdentifier] = option.value;
                _this.form[_this.propertyIdentifier].$dirty = true;
            }
            else if (_this.fieldType === 'select') {
                _this.$log.debug('formfieldchanged');
                _this.$log.debug(option);
                if (_this.selectType === 'object' && typeof _this.object.data[_this.propertyIdentifier].$$getIDName == "function") {
                    _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = option.value;
                    if (angular.isDefined(_this.form[_this.object.data[_this.propertyIdentifier].$$getIDName()])) {
                        _this.form[_this.object.data[_this.propertyIdentifier].$$getIDName()].$dirty = true;
                    }
                }
                else if (_this.selectType === 'string' && option && option.value != null) {
                    _this.object.data[_this.propertyIdentifier] = option.value;
                    _this.form[_this.propertyIdentifier].$dirty = true;
                }
                _this.observerService.notify(_this.object.metaData.className + _this.propertyIdentifier.charAt(0).toUpperCase() + _this.propertyIdentifier.slice(1) + 'OnChange', option);
            }
            else {
                _this.object.data[_this.propertyIdentifier] = option.value;
                _this.form[_this.propertyIdentifier].$dirty = true;
                _this.form['selected' + _this.object.metaData.className + _this.propertyIdentifier + _this.selectedRadioFormName].$dirty = false;
            }
        };
        this.$onInit = function () {
            var bindToControllerProps = _this.$injector.get('swFormFieldDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i]) {
                    if (!_this[i] && _this.swPropertyDisplay && _this.swPropertyDisplay[i]) {
                        _this[i] = _this.swPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swfPropertyDisplay && _this.swfPropertyDisplay[i]) {
                        _this[i] = _this.swfPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swForm && _this.swForm[i]) {
                        _this[i] = _this.swForm[i];
                    }
                }
            }
            _this.edit = _this.edit || true;
            _this.fieldType = _this.fieldType || "text";
            if (_this.fieldType === 'yesno') {
                _this.yesnoStrategy();
            }
            if (_this.fieldType === 'select') {
                _this.selectStrategy();
            }
            if (_this.eventListeners) {
                for (var key in _this.eventListeners) {
                    _this.observerService.attach(_this.eventListeners[key], key);
                }
            }
        };
        this.selectStrategy = function () {
            //this is specific to the admin because it implies loading of options via api
            if (angular.isDefined(_this.object.metaData) && angular.isDefined(_this.object.metaData[_this.propertyIdentifier]) && angular.isDefined(_this.object.metaData[_this.propertyIdentifier].fieldtype)) {
                _this.selectType = 'object';
                _this.$log.debug('selectType:object');
            }
            else {
                _this.selectType = 'string';
                _this.$log.debug('selectType:string');
            }
            _this.getOptions();
        };
        this.getOptions = function () {
            if (angular.isUndefined(_this.options)) {
                if (!_this.optionsArguments || !_this.optionsArguments.hasOwnProperty('propertyIdentifier')) {
                    _this.optionsArguments = {
                        'propertyIdentifier': _this.propertyIdentifier
                    };
                }
                var optionsPromise = _this.$hibachi.getPropertyDisplayOptions(_this.object.metaData.className, _this.optionsArguments);
                optionsPromise.then(function (value) {
                    _this.options = value.data;
                    if (_this.selectType === 'object') {
                        if (angular.isUndefined(_this.object.data[_this.propertyIdentifier])) {
                            _this.object.data[_this.propertyIdentifier] = _this.$hibachi['new' + _this.object.metaData[_this.propertyIdentifier].cfc]();
                        }
                        if (_this.object.data[_this.propertyIdentifier].$$getID() === '') {
                            _this.$log.debug('no ID');
                            _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());
                            _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];
                            _this.object.data[_this.propertyIdentifier] = _this.$hibachi['new' + _this.object.metaData[_this.propertyIdentifier].cfc]();
                            _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = _this.options[0].value;
                        }
                        else {
                            var found = false;
                            for (var i in _this.options) {
                                if (angular.isObject(_this.options[i].value)) {
                                    _this.$log.debug('isObject');
                                    _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());
                                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {
                                        _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];
                                        _this.object.data[_this.propertyIdentifier] = _this.options[i].value;
                                        found = true;
                                        break;
                                    }
                                }
                                else {
                                    _this.$log.debug('notisObject');
                                    _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());
                                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier].$$getID()) {
                                        _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];
                                        _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = _this.options[i].value;
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found) {
                                    _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];
                                }
                            }
                        }
                    }
                    else if (_this.selectType === 'string') {
                        if (_this.object.data[_this.propertyIdentifier] !== null) {
                            for (var i in _this.options) {
                                if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {
                                    _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];
                                    _this.object.data[_this.propertyIdentifier] = _this.options[i].value;
                                }
                            }
                        }
                        else {
                            _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];
                            _this.object.data[_this.propertyIdentifier] = _this.options[0].value;
                        }
                    }
                });
            }
        };
        this.yesnoStrategy = function () {
            //format value
            _this.selectedRadioFormName = _this.utilityService.createID(26);
            _this.object.data[_this.propertyIdentifier] = (_this.object.data[_this.propertyIdentifier]
                && _this.object.data[_this.propertyIdentifier].length
                && _this.object.data[_this.propertyIdentifier].toLowerCase().trim() === 'yes') || _this.object.data[_this.propertyIdentifier] == 1 ? 1 : 0;
            _this.options = [
                {
                    name: 'Yes',
                    value: 1
                },
                {
                    name: 'No',
                    value: 0
                }
            ];
            if (angular.isDefined(_this.object.data[_this.propertyIdentifier])) {
                for (var i in _this.options) {
                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {
                        _this.selected = _this.options[i];
                        _this.object.data[_this.propertyIdentifier] = _this.options[i].value;
                    }
                }
            }
            else {
                _this.selected = _this.options[0];
                _this.object.data[_this.propertyIdentifier] = _this.options[0].value;
            }
            _this.$timeout(function () {
                _this.form[_this.propertyIdentifier].$dirty = _this.isDirty;
            });
        };
        this.$injector = $injector;
        this.$scope = $scope;
        this.$timeout = $timeout;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.observerService = observerService;
        this.utilityService = utilityService;
    }
    return SWFormFieldController;
}());
exports.SWFormFieldController = SWFormFieldController;
var SWFormField = /** @class */ (function () {
    //@ngInject
    function SWFormField($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = "EA";
        this.require = {
            swfPropertyDisplay: "^?swfPropertyDisplay",
            swPropertyDisplay: "^?swPropertyDisplay",
            form: "^?form",
            swForm: '^?swForm'
        };
        this.controller = SWFormFieldController;
        this.controllerAs = "swFormField";
        this.scope = {};
        this.bindToController = {
            propertyIdentifier: "@?", property: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            fieldType: "@?", type: "@?",
            option: "=?",
            valueObject: "=?",
            object: "=?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            optionValues: "=?",
            edit: "=?",
            title: "@?",
            value: "=?",
            errorText: "@?",
            inListingDisplay: "=?",
            inputAttributes: "@?",
            options: "=?",
            optionsArguments: "=?",
            eagerLoadOptions: "=?",
            rawFileTarget: "@?",
            binaryFileTarget: "@?",
            isDirty: "=?",
            onChange: "=?",
            editable: "=?",
            eventListeners: "=?",
            context: "@?",
            eventAnnouncers: "@"
        };
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'formfield.html';
    }
    SWFormField.Factory = function () {
        var directive = function ($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormField($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$templateCache',
            '$window',
            '$hibachi',
            'formService',
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormField;
}());
exports.SWFormField = SWFormField;


/***/ }),
/* 865 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWFormFieldFileController = /** @class */ (function () {
    //@ngInject
    function SWFormFieldFileController(formService) {
        this.formService = formService;
        if (this.propertyDisplay.isDirty == undefined)
            this.propertyDisplay.isDirty = false;
        this.propertyDisplay.form.$dirty = this.propertyDisplay.isDirty;
        //this.formService.setPristinePropertyValue(this.propertyDisplay.property,this.propertyDisplay.object.data[this.propertyDisplay.property]);
    }
    return SWFormFieldFileController;
}());
var SWFormFieldFile = /** @class */ (function () {
    function SWFormFieldFile(coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = 'E';
        this.require = "^form";
        this.controller = SWFormFieldFileController;
        this.controllerAs = "swFormFieldFile";
        this.scope = true;
        this.bindToController = {
            propertyDisplay: "="
        };
        //@ngInject
        this.link = function (scope, element, attr, formController) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + "file.html";
    }
    SWFormFieldFile.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldFile(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormFieldFile;
}());
exports.SWFormFieldFile = SWFormFieldFile;


/***/ }),
/* 866 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormFieldJsonController = /** @class */ (function () {
    //@ngInject
    function SWFormFieldJsonController(formService) {
        this.propertyDisplay.form.$dirty = this.propertyDisplay.isDirty;
    }
    return SWFormFieldJsonController;
}());
var SWFormFieldJson = /** @class */ (function () {
    function SWFormFieldJson(coreFormPartialsPath, hibachiPathBuilder) {
        this.restrict = 'E';
        this.require = "^form";
        this.scope = true;
        this.controller = SWFormFieldJsonController;
        this.bindToController = {
            propertyDisplay: "=?"
        };
        this.controllerAs = "ctrl";
        this.templateUrl = "";
        this.link = function (scope, element, attrs, formController) { };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + "json.html";
    }
    SWFormFieldJson.Factory = function () {
        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldJson(coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormFieldJson;
}());
exports.SWFormFieldJson = SWFormFieldJson;


/***/ }),
/* 867 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormFieldSearchSelect = /** @class */ (function () {
    function SWFormFieldSearchSelect($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder) {
        return {
            templateUrl: hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'search-select.html',
            require: "^form",
            restrict: 'E',
            scope: {
                propertyDisplay: "="
            },
            link: function (scope, element, attr, formController) {
                //set up selectionOptions
                scope.selectionOptions = {
                    value: [],
                    $$adding: false
                };
                //match in matches track by
                //function to set state of adding new item
                scope.setAdding = function (isAdding) {
                    scope.isAdding = isAdding;
                    scope.showAddBtn = false;
                };
                scope.selectedOption = {};
                scope.showAddBtn = false;
                var propertyMetaData = scope.propertyDisplay.object.$$getMetaData(scope.propertyDisplay.property);
                //create basic
                var object = $hibachi.newEntity(propertyMetaData.cfc);
                //				scope.propertyDisplay.template = '';
                //				//check for a template
                //				//rules are tiered: check if an override is specified at scope.template, check if the cfc name .html exists, use
                //				var templatePath = coreFormPartialsPath + 'formfields/searchselecttemplates/';
                //				if(angular.isUndefined(scope.propertyDisplay.template)){
                //					var templatePromise = $http.get(templatePath+propertyMetaData.cfcProperCase+'.html',function(){
                //						$log.debug('template');
                //						scope.propertyDisplay.template = templatePath+propertyMetaData.cfcProperCase+'.html';
                //					},function(){
                //						scope.propertyDisplay.template = templatePath+'index.html';
                //						$log.debug('template');
                //						$log.debug(scope.propertyDisplay.template);
                //					});
                //				}
                //set up query function for finding related object
                scope.cfcProperCase = propertyMetaData.cfcProperCase;
                scope.selectionOptions.getOptionsByKeyword = function (keyword) {
                    var filterGroupsConfig = '[' +
                        ' {  ' +
                        '"filterGroup":[  ' +
                        '{' +
                        ' "propertyIdentifier":"_' + scope.cfcProperCase.toLowerCase() + '.' + scope.cfcProperCase + 'Name",' +
                        ' "comparisonOperator":"like",' +
                        ' "ormtype":"string",' +
                        ' "value":"%' + keyword + '%"' +
                        '  }' +
                        ' ]' +
                        ' }' +
                        ']';
                    return $hibachi.getEntity(propertyMetaData.cfc, { filterGroupsConfig: filterGroupsConfig.trim() })
                        .then(function (value) {
                        $log.debug('typesByKeyword');
                        $log.debug(value);
                        scope.selectionOptions.value = value.pageRecords;
                        var myLength = keyword.length;
                        if (myLength > 0) {
                            scope.showAddBtn = true;
                        }
                        else {
                            scope.showAddBtn = false;
                        }
                        return scope.selectionOptions.value;
                    });
                };
                var propertyPromise = scope.propertyDisplay.object['$$get' + propertyMetaData.nameCapitalCase]();
                propertyPromise.then(function (data) {
                });
                //set up behavior when selecting an item
                scope.selectItem = function ($item, $model, $label) {
                    scope.$item = $item;
                    scope.$model = $model;
                    scope.$label = $label;
                    scope.showAddBtn = false; //turns off the add btn on select
                    //angular.extend(inflatedObject.data,$item);
                    object.$$init($item);
                    $log.debug('select item');
                    $log.debug(object);
                    scope.propertyDisplay.object['$$set' + propertyMetaData.nameCapitalCase](object);
                };
                //				if(angular.isUndefined(scope.propertyDipslay.object[scope.propertyDisplay.property])){
                //					$log.debug('getmeta');
                //					$log.debug(scope.propertyDisplay.object.metaData[scope.propertyDisplay.property]);
                //
                //					//scope.propertyDipslay.object['$$get'+]
                //				}
                //
                //				scope.propertyDisplay.object.data[scope.propertyDisplay.property].$dirty = true;
            }
        };
    }
    SWFormFieldSearchSelect.Factory = function () {
        var directive = function ($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldSearchSelect($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'coreFormPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWFormFieldSearchSelect;
}());
exports.SWFormFieldSearchSelect = SWFormFieldSearchSelect;


/***/ }),
/* 868 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWFormRegistrar = /** @class */ (function () {
    //@ngInject
    function SWFormRegistrar(formService) {
        return {
            restrict: 'E',
            require: ["^form", "^swForm"],
            scope: {
                object: "=?",
                context: "@?",
                name: "@?",
                isDirty: "=?"
            },
            link: function (scope, element, attrs, formController, transclude) {
                /*add form info at the form level*/
                scope.$watch(function () { return formController[0]; }, function () {
                    formController[1].formCtrl = formController[0];
                });
                formController[0].$$swFormInfo = {
                    object: scope.object,
                    context: scope.context || 'save',
                    name: scope.name
                };
                var makeRandomID = function makeid(count) {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                    for (var i = 0; i < count; i++)
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    return text;
                };
                if (scope.isDirty) {
                    formController[0].autoDirty = true;
                }
                scope.form = formController[0];
                /*register form with service*/
                formController[0].name = scope.name;
                formController[0].$setDirty();
                formService.setForm(formController[0]);
                /*register form at object level*/
                if (!angular.isDefined(scope.object.forms)) {
                    scope.object.forms = {};
                }
                scope.object.forms[scope.name] = formController[0];
            }
        };
    }
    SWFormRegistrar.Factory = function () {
        var directive = function (formService) { return new SWFormRegistrar(formService); };
        directive.$inject = [
            'formService'
        ];
        return directive;
    };
    return SWFormRegistrar;
}());
exports.SWFormRegistrar = SWFormRegistrar;
// 	angular.module('slatwalladmin').directive('swFormRegistrar',[ 'formService', 'partialsPath', (formService, partialsPath) => new swFormRegistrar(formService, partialsPath)]);
// }


/***/ }),
/* 869 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWFormSubscriberController = /** @class */ (function () {
    //@ngInject
    function SWFormSubscriberController($log, $compile, $hibachi, utilityService, rbkeyService, $injector) {
        var _this = this;
        this.$log = $log;
        this.$compile = $compile;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.$injector = $injector;
        this.$onInit = function () {
            var bindToControllerProps = _this.$injector.get('swFormSubscriberDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i]) {
                    if (!_this[i] && _this.swForm && _this.swForm[i]) {
                        _this[i] = _this.swForm[i];
                    }
                }
            }
            _this.property = _this.property || _this.propertyIdentifier;
            _this.propertyIdentifier = _this.propertyIdentifier || _this.property;
            _this.type = _this.type || _this.fieldType;
            _this.fieldType = _this.fieldType || _this.type;
            _this.edit = _this.edit || _this.editing;
            _this.editing = _this.editing || _this.edit;
            _this.editing = _this.editing || true;
            _this.fieldType = _this.fieldType || "text";
            _this.inputAttributes = _this.inputAttributes || "";
        };
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.rbkeyService = rbkeyService;
        this.$log = $log;
        this.$injector = $injector;
    }
    return SWFormSubscriberController;
}());
var SWFormSubscriber = /** @class */ (function () {
    //ngInject
    function SWFormSubscriber() {
        this.restrict = "A";
        this.require = {
            swForm: "?^swForm",
            form: "?^form"
        };
        this.scope = {};
        this.bindToController = {
            propertyIdentifier: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            option: "=?",
            valueObject: "=?",
            object: "=?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            optionValues: "=?",
            edit: "=?",
            title: "@?",
            value: "=?",
            errorText: "@?",
            fieldType: "@?",
            property: "@?",
            inputAttributes: "@?",
            type: "@?",
            editing: "=?"
        };
        this.controller = SWFormSubscriberController;
        this.controllerAs = "SWFormSubscriber";
        this.link = function (scope, element, attr) {
        };
    }
    SWFormSubscriber.Factory = function () {
        var directive = function () { return new SWFormSubscriber(); };
        directive.$inject = [];
        return directive;
    };
    return SWFormSubscriber;
}());
exports.SWFormSubscriber = SWFormSubscriber;


/***/ }),
/* 870 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var swpropertydisplay_1 = __webpack_require__(310);
var SWFPropertyDisplayController = /** @class */ (function (_super) {
    __extends(SWFPropertyDisplayController, _super);
    //@ngInject
    function SWFPropertyDisplayController($filter, utilityService, $injector, metadataService, observerService) {
        var _this = _super.call(this, $filter, utilityService, $injector, metadataService, observerService) || this;
        _this.$filter = $filter;
        _this.utilityService = utilityService;
        _this.$injector = $injector;
        _this.metadataService = metadataService;
        _this.observerService = observerService;
        _this.edit = true;
        return _this;
    }
    return SWFPropertyDisplayController;
}(swpropertydisplay_1.SWPropertyDisplayController));
exports.SWFPropertyDisplayController = SWFPropertyDisplayController;
var SWFPropertyDisplay = /** @class */ (function (_super) {
    __extends(SWFPropertyDisplay, _super);
    //@ngInject
    function SWFPropertyDisplay($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) {
        var _this = _super.call(this, $compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) || this;
        _this.$compile = $compile;
        _this.scopeService = scopeService;
        _this.coreFormPartialsPath = coreFormPartialsPath;
        _this.hibachiPathBuilder = hibachiPathBuilder;
        _this.swpropertyPartialPath = swpropertyPartialPath;
        _this.controller = SWFPropertyDisplayController;
        _this.controllerAs = "swfPropertyDisplay";
        _this.scope = {};
        _this.link = function (scope, element, attrs) {
        };
        return _this;
    }
    return SWFPropertyDisplay;
}(swpropertydisplay_1.SWPropertyDisplay));
exports.SWFPropertyDisplay = SWFPropertyDisplay;


/***/ }),
/* 871 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWInputController = /** @class */ (function () {
    //@ngInject
    function SWInputController($scope, $log, $hibachi, $injector, listingService, utilityService, rbkeyService, observerService, metadataService) {
        var _this = this;
        this.$scope = $scope;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.$injector = $injector;
        this.listingService = listingService;
        this.utilityService = utilityService;
        this.rbkeyService = rbkeyService;
        this.observerService = observerService;
        this.metadataService = metadataService;
        this.eventAnnouncers = "";
        this.onSuccess = function () {
            _this.utilityService.setPropertyValue(_this.swForm.object, _this.propertyIdentifier, _this.value);
            if (_this.swPropertyDisplay) {
                _this.utilityService.setPropertyValue(_this.swPropertyDisplay.object, _this.propertyIdentifier, _this.value);
            }
            if (_this.swfPropertyDisplay) {
                _this.utilityService.setPropertyValue(_this.swfPropertyDisplay.object, _this.propertyIdentifier, _this.value);
                _this.swfPropertyDisplay.edit = false;
            }
            _this.utilityService.setPropertyValue(_this.swFormField.object, _this.propertyIdentifier, _this.value);
        };
        this.getValidationDirectives = function () {
            var spaceDelimitedList = '';
            var name = _this.propertyIdentifier;
            var form = _this.form;
            _this.$log.debug("Name is:" + name + " and form is: " + form);
            if (_this.metadataService.isAttributePropertyByEntityAndPropertyIdentifier(_this.object, _this.propertyIdentifier)) {
                _this.object.validations.properties[name] = [];
                if ((_this.object.metaData[_this.propertyIdentifier].requiredFlag && _this.object.metaData[_this.propertyIdentifier].requiredFlag == true) || typeof _this.object.metaData[_this.propertyIdentifier].requiredFlag === 'string' && _this.object.metaData[_this.propertyIdentifier].requiredFlag.trim().toLowerCase() == "yes") {
                    _this.object.validations.properties[name].push({
                        contexts: "save",
                        required: true
                    });
                }
                if (_this.object.metaData[_this.propertyIdentifier].validationRegex) {
                    _this.object.validations.properties[name].push({
                        contexts: "save", regex: _this.object.metaData[_this.propertyIdentifier].validationRegex
                    });
                }
            }
            if (angular.isUndefined(_this.object.validations)
                || angular.isUndefined(_this.object.validations.properties)
                || angular.isUndefined(_this.object.validations.properties[_this.propertyIdentifier])) {
                return '';
            }
            var validations = _this.object.validations.properties[_this.propertyIdentifier];
            _this.$log.debug("Validations: ", validations);
            _this.$log.debug(_this.form);
            var validationsForContext = [];
            //get the form context and the form name.
            var formContext = _this.swForm.context;
            var formName = _this.swForm.name;
            _this.$log.debug("Form context is: ");
            _this.$log.debug(formContext);
            _this.$log.debug("Form Name: ");
            _this.$log.debug(formName);
            //get the validations for the current element.
            var propertyValidations = _this.object.validations.properties[name];
            //check if the contexts match.
            if (angular.isObject(propertyValidations)) {
                //if this is a procesobject validation then the context is implied
                if (angular.isUndefined(propertyValidations[0].contexts) && _this.object.metaData.isProcessObject) {
                    propertyValidations[0].contexts = _this.object.metaData.className.split('_')[1];
                }
                if (propertyValidations[0].contexts.indexOf(formContext) > -1) {
                    _this.$log.debug("Matched");
                    for (var prop in propertyValidations[0]) {
                        if (prop != "contexts" && prop !== "conditions") {
                            spaceDelimitedList += (" swvalidation" + prop.toLowerCase() + "='" + propertyValidations[0][prop] + "'");
                        }
                    }
                }
                _this.$log.debug(spaceDelimitedList);
            }
            //loop over validations that are required and create the space delimited list
            _this.$log.debug(validations);
            //get all validations related to the form context;
            _this.$log.debug(form);
            angular.forEach(validations, function (validation, key) {
                if (validation.contexts && _this.utilityService.listFind(validation.contexts.toLowerCase(), _this.swForm.context.toLowerCase()) !== -1) {
                    _this.$log.debug("Validations for context");
                    _this.$log.debug(validation);
                    validationsForContext.push(validation);
                }
            });
            return spaceDelimitedList;
        };
        this.clear = function () {
            if (_this.reverted) {
                _this.reverted = false;
                _this.showRevert = true;
            }
            _this.edited = false;
            _this.value = _this.initialValue;
            if (_this.inListingDisplay && _this.rowSaveEnabled) {
                _this.listingService.markUnedited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID);
            }
        };
        this.revert = function () {
            _this.showRevert = false;
            _this.reverted = true;
            _this.value = _this.revertToValue;
            _this.onEvent({}, "change");
        };
        this.onEvent = function (event, eventName) {
            var customEventName = _this.swForm.name + _this.name + eventName;
            var formEventName = _this.swForm.name + eventName;
            var data = {
                event: event,
                eventName: eventName,
                form: _this.form,
                swForm: _this.swForm,
                swInput: _this,
                inputElement: $('input').first()[0]
            };
            _this.observerService.notify(customEventName, data);
            _this.observerService.notify(formEventName, data);
            _this.observerService.notify(eventName, data);
        };
        this.getTemplate = function () {
            var template = '';
            var validations = '';
            var currencyTitle = '';
            var currencyFormatter = '';
            var style = "";
            if (!_this.class) {
                _this.class = "form-control";
            }
            if (!_this.noValidate) {
                validations = _this.getValidationDirectives();
            }
            if (_this.object && _this.object.metaData && _this.object.metaData.$$getPropertyFormatType(_this.propertyIdentifier) != undefined && _this.object.metaData.$$getPropertyFormatType(_this.propertyIdentifier) == "currency") {
                currencyFormatter = 'sw-currency-formatter ';
                if (angular.isDefined(_this.object.data.currencyCode)) {
                    currencyFormatter = currencyFormatter + 'data-currency-code="' + _this.object.data.currencyCode + '" ';
                    currencyTitle = '<span class="s-title">' + _this.object.data.currencyCode + '</span>';
                }
            }
            var appConfig = _this.$hibachi.getConfig();
            var placeholder = '';
            if (_this.object.metaData && _this.object.metaData[_this.propertyIdentifier] && _this.object.metaData[_this.propertyIdentifier].hb_nullrbkey) {
                placeholder = _this.rbkeyService.getRBKey(_this.object.metaData[_this.propertyIdentifier].hb_nullrbkey);
            }
            if (_this.fieldType.toLowerCase() === 'json') {
                style = style += 'display:none';
            }
            var acceptedFieldTypes = ['email', 'text', 'password', 'number', 'time', 'date', 'datetime', 'json', 'file'];
            if (acceptedFieldTypes.indexOf(_this.fieldType.toLowerCase()) >= 0) {
                var inputType = _this.fieldType.toLowerCase();
                if (_this.fieldType === 'time' || _this.fieldType === 'number') {
                    inputType = "text";
                }
                template = currencyTitle + '<input type="' + inputType + '" class="' + _this.class + '" ' +
                    'ng-model="swInput.value" ' +
                    'ng-disabled="swInput.editable === false" ' +
                    'ng-show="swInput.edit" ' +
                    "ng-class=\"{'form-control':swInput.inListingDisplay, 'input-xs':swInput.inListingDisplay}\"" +
                    'name="' + _this.propertyIdentifier + '" ' +
                    'placeholder="' + placeholder + '" ' +
                    validations + currencyFormatter +
                    'id="swinput' + _this.swForm.name + _this.name + '" ' +
                    'style="' + style + '"' +
                    _this.inputAttributes +
                    _this.eventAnnouncerTemplate;
            }
            var dateFieldTypes = ['date', 'datetime', 'time'];
            if (dateFieldTypes.indexOf(_this.fieldType.toLowerCase()) >= 0) {
                template = template + 'datetime-picker ';
            }
            if (_this.fieldType === 'time') {
                template = template + 'data-time-only="true" date-format="' + appConfig.timeFormat.replace('tt', 'a') + '" ng-blur="swInput.pushBindings()"';
            }
            if (_this.fieldType === 'date') {
                template = template + 'data-date-only="true" future-only date-format="' + appConfig.dateFormat + '" ';
            }
            if (template.length) {
                template = template + ' />';
            }
            var actionButtons = "\n\t\t\t<a class=\"s-remove-change\"\n\t\t\t\tdata-ng-click=\"swPropertyDisplay.clear()\"\n\t\t\t\tdata-ng-if=\"swInput.edited && swInput.edit\">\n\t\t\t\t\t<i class=\"fa fa-remove\"></i>\n\t\t\t</a>\n\n\t\t\t<!-- Revert Button -->\n\t\t\t<button class=\"btn btn-xs btn-default s-revert-btn\"\n\t\t\t\t\tdata-ng-show=\"swInput.showRevert\"\n\t\t\t\t\tdata-ng-click=\"swInput.revert()\"\n\t\t\t\t\tdata-toggle=\"popover\"\n\t\t\t\t\tdata-trigger=\"hover\"\n\t\t\t\t\tdata-content=\"{{swInput.revertText}}\"\n\t\t\t\t\tdata-original-title=\"\"\n\t\t\t\t\ttitle=\"\">\n\t\t\t\t<i class=\"fa fa-refresh\"></i>\n\t\t\t</button>\n\t\t";
            return template + actionButtons;
        };
        this.pullBindings = function () {
            var bindToControllerProps = _this.$injector.get('swInputDirective')[0].bindToController;
            for (var i in bindToControllerProps) {
                if (!_this[i]) {
                    if (!_this[i] && _this.swFormField && _this.swFormField[i]) {
                        _this[i] = _this.swFormField[i];
                    }
                    else if (!_this[i] && _this.swPropertyDisplay && _this.swPropertyDisplay[i]) {
                        _this[i] = _this.swPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swfPropertyDisplay && _this.swfPropertyDisplay[i]) {
                        _this[i] = _this.swfPropertyDisplay[i];
                    }
                    else if (!_this[i] && _this.swForm && _this.swForm[i]) {
                        _this[i] = _this.swForm[i];
                    }
                }
            }
            _this.edit = _this.edit || true;
            console.log(_this.fieldType);
            _this.fieldType = _this.fieldType || "text";
            _this.inputAttributes = _this.inputAttributes || "";
            _this.inputAttributes = _this.utilityService.replaceAll(_this.inputAttributes, "'", '"');
            _this.value = _this.utilityService.getPropertyValue(_this.object, _this.propertyIdentifier);
        };
        this.pushBindings = function () {
            _this.observerService.notify('updateBindings').then(function () { });
        };
        this.$onInit = function () {
            _this.pullBindings();
            _this.eventAnnouncersArray = _this.eventAnnouncers.split(',');
            _this.eventAnnouncerTemplate = "";
            for (var i in _this.eventAnnouncersArray) {
                var eventName = _this.eventAnnouncersArray[i];
                if (eventName.length) {
                    _this.eventAnnouncerTemplate += " ng-" + eventName + "=\"swInput.onEvent($event,'" + eventName + "')\"";
                }
            }
            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
                _this.eventNameForObjectSuccess = _this.object.metaData.className.split('_')[0] + _this.context.charAt(0).toUpperCase() + _this.context.slice(1) + 'Success';
            }
            else {
                _this.eventNameForObjectSuccess = _this.context.charAt(0).toUpperCase() + _this.context.slice(1) + 'Success';
            }
            var eventNameForObjectSuccessID = _this.eventNameForObjectSuccess + _this.propertyIdentifier;
            var eventNameForUpdateBindings = 'updateBindings';
            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
                var eventNameForUpdateBindingsID = _this.object.metaData.className.split('_')[0] + _this.propertyIdentifier + 'updateBindings';
            }
            else {
                var eventNameForUpdateBindingsID = _this.propertyIdentifier + 'updateBindings';
            }
            var eventNameForPullBindings = 'pullBindings';
            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
                var eventNameForPullBindingsID = _this.object.metaData.className.split('_')[0] + _this.propertyIdentifier + 'pullBindings';
            }
            else {
                var eventNameForPullBindingsID = _this.propertyIdentifier + 'pullBindings';
            }
            //attach a successObserver
            if (_this.object) {
                //update bindings on save success
                _this.observerService.attach(_this.onSuccess, _this.eventNameForObjectSuccess, eventNameForObjectSuccessID);
                //update bindings manually
                _this.observerService.attach(_this.onSuccess, eventNameForUpdateBindings, eventNameForUpdateBindingsID);
                //pull bindings from higher binding level manually
                _this.observerService.attach(_this.pullBindings, eventNameForPullBindings, eventNameForPullBindingsID);
            }
            _this.$scope.$on("$destroy", function () {
                _this.observerService.detachById(eventNameForUpdateBindings);
                _this.observerService.detachById(eventNameForUpdateBindingsID);
            });
        };
    }
    return SWInputController;
}());
var SWInput = /** @class */ (function () {
    //ngInject
    function SWInput($compile, $timeout, $parse, fileService) {
        var _this = this;
        this.$compile = $compile;
        this.$timeout = $timeout;
        this.$parse = $parse;
        this.fileService = fileService;
        this.restrict = "E";
        this.require = {
            swForm: "?^swForm",
            form: "?^form",
            swFormField: "?^swFormField",
            swPropertyDisplay: "?^swPropertyDisplay",
            swfPropertyDisplay: "?^swfPropertyDisplay"
        };
        this.scope = {};
        this.bindToController = {
            propertyIdentifier: "@?",
            name: "@?",
            class: "@?",
            errorClass: "@?",
            option: "=?",
            valueObject: "=?",
            object: "=?",
            label: "@?",
            labelText: "@?",
            labelClass: "@?",
            inListingDisplay: "=?",
            listingID: "=?",
            pageRecordIndex: "=?",
            propertyDisplayID: "=?",
            initialValue: "=?",
            optionValues: "=?",
            edit: "=?",
            title: "@?",
            value: "=?",
            errorText: "@?",
            fieldType: "@?",
            property: "@?",
            binaryFileTarget: "@?",
            rawFileTarget: "@?",
            reverted: "=?",
            revertToValue: "=?",
            showRevert: "=?",
            inputAttributes: "@?",
            type: "@?",
            eventAnnouncers: "@?",
            context: "@?"
        };
        this.controller = SWInputController;
        this.controllerAs = "swInput";
        this.link = function (scope, element, attr) {
            if (scope.swInput.type === 'file') {
                if (angular.isUndefined(scope.swInput.object.data[scope.swInput.rawFileTarget])) {
                    scope.swInput.object[scope.swInput.rawFileTarget] = "";
                    scope.swInput.object.data[scope.swInput.rawFileTarget] = "";
                }
                var model = _this.$parse("swInput.object.data[swInput.rawFileTarget]");
                var modelSetter = model.assign;
                element.bind("change", function (e) {
                    var fileToUpload = (e.srcElement || e.target).files[0];
                    scope.$apply(function () {
                        modelSetter(scope, fileToUpload);
                    }, function () {
                        throw ("swinput couldn't apply the file to scope");
                    });
                    _this.$timeout(function () {
                        _this.fileService.uploadFile(fileToUpload, scope.swInput.object, scope.swInput.binaryFileTarget)
                            .then(function (result) {
                            scope.swInput.object[scope.swInput.property] = fileToUpload;
                            scope.swInput.onEvent(e, "change");
                        }, function () {
                            //error	notify user
                        });
                    });
                });
            }
            //renders the template and compiles it
            element.html(scope.swInput.getTemplate());
            _this.$compile(element.contents())(scope);
        };
    }
    SWInput.Factory = function () {
        var directive = function ($compile, $timeout, $parse, fileService) { return new SWInput($compile, $timeout, $parse, fileService); };
        directive.$inject = [
            '$compile',
            '$timeout',
            '$parse',
            'fileService'
        ];
        return directive;
    };
    return SWInput;
}());
exports.SWInput = SWInput;


/***/ }),
/* 872 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//module
var core_module_1 = __webpack_require__(11);
//services
var fileservice_1 = __webpack_require__(873);
//directives
//  components
//form
var swinput_1 = __webpack_require__(871);
var swfformfield_1 = __webpack_require__(862);
var swform_1 = __webpack_require__(863);
var swformfield_1 = __webpack_require__(864);
var swformfieldfile_1 = __webpack_require__(865);
var swformfieldjson_1 = __webpack_require__(866);
var swformfieldsearchselect_1 = __webpack_require__(867);
var swformregistrar_1 = __webpack_require__(868);
var swerrordisplay_1 = __webpack_require__(859);
var swaddressform_1 = __webpack_require__(858);
var swpropertydisplay_1 = __webpack_require__(310);
var swfpropertydisplay_1 = __webpack_require__(870);
var swformsubscriber_1 = __webpack_require__(869);
var formmodule = angular.module('hibachi.form', ['angularjs-datetime-picker', core_module_1.coremodule.name]).config(function () {
})
    .constant('coreFormPartialsPath', 'form/components/')
    .service('fileService', fileservice_1.FileService)
    //directives
    .directive('swInput', swinput_1.SWInput.Factory())
    .directive('swfFormField', swfformfield_1.SWFFormField.Factory())
    .directive('swForm', swform_1.SWForm.Factory())
    .directive('swFormField', swformfield_1.SWFormField.Factory())
    .directive('swFormFieldFile', swformfieldfile_1.SWFormFieldFile.Factory())
    .directive('swFormFieldJson', swformfieldjson_1.SWFormFieldJson.Factory())
    .directive('swFormFieldSearchSelect', swformfieldsearchselect_1.SWFormFieldSearchSelect.Factory())
    .directive('swFormRegistrar', swformregistrar_1.SWFormRegistrar.Factory())
    .directive('swfPropertyDisplay', swfpropertydisplay_1.SWFPropertyDisplay.Factory(swfpropertydisplay_1.SWFPropertyDisplay, "swfpropertydisplay.html"))
    .directive('swPropertyDisplay', swpropertydisplay_1.SWPropertyDisplay.Factory(swpropertydisplay_1.SWPropertyDisplay, "propertydisplay.html"))
    .directive('swErrorDisplay', swerrordisplay_1.SWErrorDisplay.Factory())
    .directive('swAddressForm', swaddressform_1.SWAddressForm.Factory())
    .directive('swFormSubscriber', swformsubscriber_1.SWFormSubscriber.Factory());
exports.formmodule = formmodule;


/***/ }),
/* 873 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FileService = /** @class */ (function () {
    //@ngInject
    function FileService($q, observerService) {
        var _this = this;
        this.$q = $q;
        this.observerService = observerService;
        this.fileStates = {};
        this.imageExists = function (src) {
            var deferred = _this.$q.defer();
            var image = new Image();
            image.onerror = function () {
                deferred.reject();
            };
            image.onload = function () {
                deferred.resolve();
            };
            image.src = src;
            return deferred.promise;
        };
        this.uploadFile = function (file, object, property) {
            var deferred = _this.$q.defer();
            var promise = deferred.promise;
            var fileReader = new FileReader();
            fileReader.readAsDataURL(file);
            fileReader.onload = function (result) {
                object.data[property] = fileReader.result;
                deferred.resolve(fileReader.result);
            };
            fileReader.onerror = function (result) {
                deferred.reject();
                throw ("fileservice couldn't read the file");
            };
            return promise;
        };
    }
    return FileService;
}());
exports.FileService = FileService;


/***/ }),
/* 874 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWSaveAndFinishController = /** @class */ (function () {
    //@ngInject
    function SWSaveAndFinishController($hibachi, dialogService, alertService, rbkeyService, $log) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.dialogService = dialogService;
        this.alertService = alertService;
        this.rbkeyService = rbkeyService;
        this.$log = $log;
        this.saving = false;
        this.initialSetup = function () {
            if (!angular.isDefined(_this.finish)) {
                _this.openNewDialog = false;
            }
            else {
                _this.openNewDialog = (_this.finish.toLowerCase() == 'true') ? false : true;
            }
            if (_this.openNewDialog) {
                _this.rbKey = 'admin.define.saveandnew';
            }
            else {
                _this.rbKey = 'admin.define.saveandfinish';
            }
        };
        this.save = function () {
            _this.saving = true;
            var savePromise = _this.entity.$$save();
            savePromise.then(function (data) {
                _this.dialogService.removeCurrentDialog();
                if (_this.openNewDialog && angular.isDefined(_this.partial)) {
                    _this.dialogService.addPageDialog(_this.partial);
                }
                else {
                    if (angular.isDefined(_this.redirectUrl)) {
                        window.location.href = _this.redirectUrl;
                    }
                    else if (angular.isDefined(_this.redirectAction)) {
                        if (angular.isUndefined(_this.redirectQueryString)) {
                            _this.redirectQueryString = "";
                        }
                        window.location.href = _this.$hibachi.buildUrl(_this.redirectAction, _this.redirectQueryString);
                    }
                    else {
                        _this.$log.debug("You did not specify a redirect for swSaveAndFinish");
                    }
                }
            }).catch(function (data) {
                if (angular.isDefined(_this.customErrorRbkey)) {
                    data = _this.rbkeyService.getRBKey(_this.customErrorRbkey);
                }
                if (angular.isString(data)) {
                    var alert = _this.alertService.newAlert();
                    alert.msg = data;
                    alert.type = "error";
                    alert.fade = true;
                    _this.alertService.addAlert(alert);
                }
                else {
                    _this.alertService.addAlerts(data);
                }
            }).finally(function () {
                _this.saving = false;
            });
        };
        if (!angular.isFunction(this.entity.$$save)) {
            throw ("Your entity does not have the $$save function.");
        }
        this.initialSetup();
    }
    return SWSaveAndFinishController;
}());
exports.SWSaveAndFinishController = SWSaveAndFinishController;
var SWSaveAndFinish = /** @class */ (function () {
    //@ngInject
    function SWSaveAndFinish(hibachiPartialsPath, hibachiPathBuilder) {
        this.hibachiPartialsPath = hibachiPartialsPath;
        this.restrict = "EA";
        this.scope = {};
        this.controller = SWSaveAndFinishController;
        this.controllerAs = "swSaveAndFinish";
        this.bindToController = {
            entity: "=",
            redirectUrl: "@?",
            redirectAction: "@?",
            redirectQueryString: "@?",
            finish: "@?",
            partial: "@?",
            customErrorRbkey: "@?"
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(hibachiPartialsPath) + "saveandfinish.html";
    }
    SWSaveAndFinish.Factory = function () {
        var directive = function (hibachiPartialsPath, hibachiPathBuilder) { return new SWSaveAndFinish(hibachiPartialsPath, hibachiPathBuilder); };
        directive.$inject = ["hibachiPartialsPath", "hibachiPathBuilder"];
        return directive;
    };
    return SWSaveAndFinish;
}());
exports.SWSaveAndFinish = SWSaveAndFinish;


/***/ }),
/* 875 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../typings/tsd.d.ts' />
//import alertmodule = require('./alert/alert.module');
var alert_module_1 = __webpack_require__(304);
var collection_module_1 = __webpack_require__(305);
var listing_module_1 = __webpack_require__(891);
var dialog_module_1 = __webpack_require__(308);
var entity_module_1 = __webpack_require__(309);
var pagination_module_1 = __webpack_require__(894);
var form_module_1 = __webpack_require__(872);
var validation_module_1 = __webpack_require__(913);
var workflow_module_1 = __webpack_require__(311);
//directives
var swsaveandfinish_1 = __webpack_require__(874);
var hibachimodule = angular.module('hibachi', [
    alert_module_1.alertmodule.name,
    collection_module_1.collectionmodule.name,
    entity_module_1.entitymodule.name,
    dialog_module_1.dialogmodule.name,
    listing_module_1.listingmodule.name,
    pagination_module_1.paginationmodule.name,
    form_module_1.formmodule.name,
    validation_module_1.validationmodule.name,
    workflow_module_1.workflowmodule.name
]).config([function () {
    }])
    .run(['$rootScope', 'publicService', '$hibachi', function ($rootScope, publicService, $hibachi) {
        $rootScope.hibachiScope = publicService;
        $rootScope.hasAccount = publicService.hasAccount;
        if ($hibachi.newAccount) {
            $rootScope.hibachiScope.getAccount();
        }
        if ($hibachi.newOrder) {
            $rootScope.hibachiScope.getCart();
        }
        if ($hibachi.newCountry) {
            $rootScope.hibachiScope.getCountries();
        }
        if ($hibachi.newState) {
            $rootScope.hibachiScope.getStates();
        }
        if ($hibachi.newState) {
            $rootScope.hibachiScope.getAddressOptions();
        }
    }])
    .constant('hibachiPartialsPath', 'hibachi/components/')
    .directive('swSaveAndFinish', swsaveandfinish_1.SWSaveAndFinish.Factory());
exports.hibachimodule = hibachimodule;


/***/ }),
/* 876 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingAggregateController = /** @class */ (function () {
    function SWListingAggregateController() {
        var _this = this;
        this.init = function () {
            _this.editable = _this.editable || false;
        };
        this.init();
    }
    return SWListingAggregateController;
}());
var SWListingAggregate = /** @class */ (function () {
    function SWListingAggregate() {
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            aggregateFunction: "@",
            aggregateAlias: "@?"
        };
        this.controller = SWListingAggregateController;
        this.controllerAs = "swListingAggregate";
        this.link = function (scope, element, attrs) {
            var aggregate = {
                propertyIdentifier: scope.swListingAggregate.propertyIdentifier,
                aggregateFunction: scope.swListingAggregate.aggregateFunction,
                aggregateAlias: scope.swListingAggregate.aggregateAlias,
            };
            scope.$parent.swListingDisplay.aggregates.push(aggregate);
        };
    }
    SWListingAggregate.Factory = function () {
        var directive = function () { return new SWListingAggregate(); };
        directive.$inject = [];
        return directive;
    };
    return SWListingAggregate;
}());
exports.SWListingAggregate = SWListingAggregate;


/***/ }),
/* 877 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingColorFilterController = /** @class */ (function () {
    function SWListingColorFilterController() {
        this.init = function () {
        };
        this.init();
    }
    return SWListingColorFilterController;
}());
var SWListingColorFilter = /** @class */ (function () {
    function SWListingColorFilter(utilityService) {
        var _this = this;
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyToCompare: "@",
            comparisonOperator: "@",
            comparisonValue: "@",
            comparisonProperty: "@",
            colorClass: "@",
            color: "@"
        };
        this.controller = SWListingColorFilterController;
        this.controllerAs = "swListingColorFilter";
        this.link = function (scope, element, attrs) {
            var colorFilter = {
                propertyToCompare: scope.swListingColorFilter.propertyToCompare,
                comparisonOperator: scope.swListingColorFilter.comparisonOperator,
                comparisonValue: scope.swListingColorFilter.comparisonValue,
                comparisonProperty: scope.swListingColorFilter.comparisonProperty,
                colorClass: scope.swListingColorFilter.colorClass,
                color: scope.swListingColorFilter.color
            };
            if (_this.utilityService.ArrayFindByPropertyValue(scope.$parent.swListingDisplay.colorFilters, 'propertyToCompare', colorFilter.propertyToCompare) === -1) {
                scope.$parent.swListingDisplay.colorFilters.push(colorFilter);
            }
        };
    }
    SWListingColorFilter.Factory = function () {
        var directive = function (utilityService) { return new SWListingColorFilter(utilityService); };
        directive.$inject = [
            'utilityService'
        ];
        return directive;
    };
    return SWListingColorFilter;
}());
exports.SWListingColorFilter = SWListingColorFilter;


/***/ }),
/* 878 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingColumnController = /** @class */ (function () {
    //@ngInject
    function SWListingColumnController($injector, utilityService, listingService, rbkeyService) {
        var _this = this;
        this.$injector = $injector;
        this.utilityService = utilityService;
        this.listingService = listingService;
        this.rbkeyService = rbkeyService;
        this.hasCellView = false;
        this.hasHeaderView = false;
        this.$onInit = function () {
            if (angular.isUndefined(_this.isVisible)) {
                _this.isVisible = true;
            }
            if (angular.isUndefined(_this.isDeletable)) {
                _this.isDeletable = true;
            }
            if (angular.isUndefined(_this.search)) {
                _this.search = true;
            }
            _this.editable = _this.editable || false;
            //did a cellView get suggested, if so does it exist
            if (_this.cellView) {
                if (_this.$injector.has(_this.cellView + 'Directive')) {
                    _this.hasCellView = true;
                }
                else {
                    throw (_this.cellView + ' is not an existing directive');
                }
            }
            if (_this.headerView) {
                if (_this.$injector.has(_this.headerView + 'Directive')) {
                    _this.hasHeaderView = true;
                }
                else {
                    throw (_this.headerView + ' is not an existing directive');
                }
            }
            _this.column = {
                columnID: "C" + _this.utilityService.createID(31),
                propertyIdentifier: _this.propertyIdentifier,
                fallbackPropertyIdentifiers: _this.fallbackPropertyIdentifiers,
                processObjectProperty: _this.processObjectProperty,
                title: _this.title,
                tdclass: _this.tdclass,
                search: _this.search,
                sort: _this.sort,
                filter: _this.filter,
                range: _this.range,
                editable: _this.editable,
                buttonGroup: _this.buttonGroup,
                hasCellView: _this.hasCellView,
                hasHeaderView: _this.hasHeaderView,
                isVisible: _this.isVisible,
                isDeletable: _this.isDeletable,
                isSearchable: _this.search,
                action: _this.action,
                queryString: _this.queryString,
                persistent: _this.persistent
            };
            if (_this.hasCellView) {
                _this.column.cellView = _this.cellView;
            }
            if (_this.hasHeaderView) {
                _this.column.headerView = _this.utilityService.camelCaseToSnakeCase(_this.headerView);
            }
            //aggregate logic
            if (_this.aggregate) {
                _this.column.aggregate = _this.aggregate;
                _this.column.aggregate.propertyIdentifier = _this.propertyIdentifier;
            }
        };
        this.$injector = $injector;
        this.utilityService = utilityService;
        this.listingService = listingService;
        this.rbkeyService = rbkeyService;
    }
    return SWListingColumnController;
}());
var SWListingColumn = /** @class */ (function () {
    //@ngInject
    function SWListingColumn(listingService) {
        var _this = this;
        this.listingService = listingService;
        this.restrict = 'EA';
        this.scope = true;
        this.require = { swListingDisplay: "?^swListingDisplay" };
        this.bindToController = {
            propertyIdentifier: "@",
            processObjectProperty: "@?",
            //defined as aggregate = {aggregateFunction:'COUNT',aggregateAlias:'aliasstring'}
            aggregate: "=?",
            title: "@?",
            tdclass: "@?",
            search: "=?",
            sort: "=?",
            filter: "=?",
            isVisible: "=?",
            isDeletable: "=?",
            range: "=?",
            editable: "=?",
            buttonGroup: "=?",
            cellView: "@?",
            headerView: "@?",
            fallbackPropertyIdentifiers: "@?",
            action: "@?",
            queryString: "@?"
        };
        this.controller = SWListingColumnController;
        this.controllerAs = "swListingColumn";
        this.link = function (scope, elem, attr, listingService) {
            if (angular.isDefined(scope.swListingDisplay)
                && scope.swListingDisplay.tableID
                && scope.swListingDisplay.tableID.length) {
                var listingDisplayID = scope.swListingDisplay.tableID;
                _this.listingService.addColumn(listingDisplayID, scope.swListingColumn.column);
                _this.listingService.setupColumn(listingDisplayID, scope.swListingColumn.column);
            }
            else if (angular.isDefined(scope.swListingColumn.swListingDisplay)
                && scope.swListingColumn.swListingDisplay.tableID
                && scope.swListingColumn.swListingDisplay.tableID.length) {
                var listingDisplayID = scope.swListingColumn.swListingDisplay.tableID;
                _this.listingService.addColumn(listingDisplayID, scope.swListingColumn.column);
            }
            else {
                throw ("listing display scope not available to sw-listing-column or there is no table id");
            }
        };
    }
    SWListingColumn.Factory = function () {
        var directive = function (listingService) { return new SWListingColumn(listingService); };
        directive.$inject = [
            'listingService'
        ];
        return directive;
    };
    return SWListingColumn;
}());
exports.SWListingColumn = SWListingColumn;


/***/ }),
/* 879 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingControlsController = /** @class */ (function () {
    //@ngInject
    function SWListingControlsController($hibachi, metadataService, collectionService, listingService, observerService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.metadataService = metadataService;
        this.collectionService = collectionService;
        this.listingService = listingService;
        this.observerService = observerService;
        this.displayOptionsClosed = true;
        this.filtersClosed = true;
        this.columnIsControllableMap = {};
        this.filterActions = function (res) {
            if (res.action == 'add' || res.action == 'remove') {
                _this.observerService.notify('swPaginationAction', { type: 'setCurrentPage', payload: 1 });
            }
            _this.filtersClosed = true;
        };
        this.getSelectedSearchColumnName = function () {
            return (angular.isUndefined(_this.selectedSearchColumn)) ? 'All' : _this.selectedSearchColumn.title;
        };
        this.canDisplayColumn = function (column) {
            if (!_this.listingColumns.length) {
                return true;
            }
            if (angular.isDefined(_this.columnIsControllableMap[column.propertyIdentifier])) {
                return _this.columnIsControllableMap[column.propertyIdentifier];
            }
            for (var i = 0; i < _this.listingColumns.length; i++) {
                if (column.propertyIdentifier == _this.listingColumns[i].propertyIdentifier) {
                    _this.columnIsControllableMap[column.propertyIdentifier] = true;
                }
            }
            if (!_this.columnIsControllableMap[column.propertyIdentifier]) {
                _this.columnIsControllableMap[column.propertyIdentifier] = false;
            }
            return _this.columnIsControllableMap[column.propertyIdentifier];
        };
        this.addSearchFilter = function () {
            if (angular.isUndefined(_this.selectedSearchColumn) || !_this.searchText)
                return;
            var keywords = _this.searchText.split(" ");
            for (var i = 0; i < keywords.length; i++) {
                _this.collectionConfig.addLikeFilter(_this.selectedSearchColumn.propertyIdentifier, keywords[i], '%w%', undefined, _this.selectedSearchColumn.title);
            }
            _this.searchText = '';
            _this.collectionConfig.setKeywords(_this.searchText);
            _this.observerService.notify('swPaginationAction', { type: 'setCurrentPage', payload: 1 });
        };
        this.toggleDisplayOptions = function (closeButton) {
            if (closeButton === void 0) { closeButton = false; }
            if (closeButton) {
                _this.displayOptionsClosed = true;
            }
            else {
                _this.displayOptionsClosed = !_this.displayOptionsClosed;
            }
        };
        this.setItemInUse = function (booleanValue) {
            _this.itemInUse = booleanValue;
        };
        this.removeFilter = function (array, index, reloadCollection) {
            if (reloadCollection === void 0) { reloadCollection = true; }
            array.splice(index, 1);
            if (reloadCollection) {
                _this.observerService.notify('swPaginationAction', { type: 'setCurrentPage', payload: 1 });
            }
        };
        this.toggleFilters = function () {
            if (_this.filtersClosed) {
                _this.filtersClosed = false;
                if (_this.simple) {
                    _this.newFilterPosition = _this.collectionService.newFilterItem(_this.collectionConfig.filterGroups[0].filterGroup, _this.setItemInUse);
                }
            }
        };
        this.selectFilterItem = function (filterItem) {
            _this.filtersClosed = false;
            _this.collectionService.selectFilterItem(filterItem);
        };
        this.saveCollection = function (collectionConfig) {
            if (collectionConfig) {
                _this.collectionConfig = collectionConfig;
            }
            _this.swListingDisplay.collectionConfig = _this.collectionConfig;
            _this.observerService.notify('swPaginationAction', { type: 'setCurrentPage', payload: 1 });
        };
        if (angular.isUndefined(this.showToggleFilters)) {
            this.showToggleFilters = true;
        }
        if (angular.isUndefined(this.showToggleDisplayOptions)) {
            this.showToggleDisplayOptions = true;
        }
        if (angular.isUndefined(this.showFilters)) {
            this.showFilters = false;
        }
        this.backupColumnsConfig = this.collectionConfig.getColumns();
        if (angular.isDefined(this.tableId)) {
            this.listingColumns = this.listingService.getListingColumns(this.tableId);
        }
        if (angular.isUndefined(this.simple)) {
            this.simple = true;
        }
        this.filterPropertiesList = {};
        $hibachi.getFilterPropertiesByBaseEntityName(this.collectionConfig.baseEntityAlias).then(function (value) {
            metadataService.setPropertiesList(value, _this.collectionConfig.baseEntityAlias);
            _this.filterPropertiesList[_this.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias(_this.collectionConfig.baseEntityAlias);
            metadataService.formatPropertiesList(_this.filterPropertiesList[_this.collectionConfig.baseEntityAlias], _this.collectionConfig.baseEntityAlias);
        });
        this.observerService.attach(this.filterActions, 'filterItemAction');
    }
    return SWListingControlsController;
}());
var SWListingControls = /** @class */ (function () {
    function SWListingControls(collectionPartialsPath, hibachiPathBuilder) {
        this.collectionPartialsPath = collectionPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'E';
        this.scope = {};
        this.require = { swListingDisplay: '?^swListingDisplay' };
        this.bindToController = {
            collectionConfig: "=",
            tableId: "=?",
            getCollection: "&",
            showFilters: "=?",
            showToggleFilters: "=?",
            showToggleDisplayOptions: "=?",
            simple: "=?"
        };
        this.controller = SWListingControlsController;
        this.controllerAs = 'swListingControls';
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "listingcontrols.html";
    }
    SWListingControls.Factory = function () {
        var directive = function (listingPartialPath, hibachiPathBuilder) { return new SWListingControls(listingPartialPath, hibachiPathBuilder); };
        directive.$inject = ['listingPartialPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWListingControls.$inject = ['listingPartialPath', 'hibachiPathBuilder'];
    return SWListingControls;
}());
exports.SWListingControls = SWListingControls;


/***/ }),
/* 880 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/* SwListingDisableRule
 * defines a filter, by which to determine what rows will be disabled
 */
var SWListingDisableRuleController = /** @class */ (function () {
    //@ngInject
    function SWListingDisableRuleController($q) {
        this.$q = $q;
    }
    return SWListingDisableRuleController;
}());
var SWListingDisableRule = /** @class */ (function () {
    function SWListingDisableRule(scopeService, $q) {
        var _this = this;
        this.scopeService = scopeService;
        this.$q = $q;
        this.restrict = 'EA';
        this.scope = true;
        this.template = "\n        \n    ";
        this.bindToController = {
            filterPropertyIdentifier: "@",
            filterComparisonOperator: "@",
            filterComparisonValue: "@"
        };
        this.controller = SWListingDisableRuleController;
        this.controllerAs = "swListingDisableRule";
        this.link = function (scope, element, attrs) {
            var rule = {
                filterPropertyIdentifier: scope.swListingDisableRule.filterPropertyIdentifier,
                filterComparisonOperator: scope.swListingDisableRule.filterComparisonOperator,
                filterComparisonValue: scope.swListingDisableRule.filterComparisonValue
            };
            var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");
            if (angular.isDefined(listingDisplayScope.swListingDisplay)) {
                listingDisplayScope = listingDisplayScope.swListingDisplay;
            }
            else {
                throw ("listing display scope not available to sw-listing-disable-rule");
            }
            listingDisplayScope.disableRules.push(rule);
        };
    }
    SWListingDisableRule.Factory = function () {
        var directive = function (scopeService, $q) { return new SWListingDisableRule(scopeService, $q); };
        directive.$inject = [
            'scopeService',
            '$q'
        ];
        return directive;
    };
    return SWListingDisableRule;
}());
exports.SWListingDisableRule = SWListingDisableRule;


/***/ }),
/* 881 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingDisplayController = /** @class */ (function () {
    //@ngInject
    function SWListingDisplayController($scope, $transclude, $timeout, $q, $hibachi, utilityService, collectionConfigService, listingService, paginationService, selectionService, observerService, rbkeyService) {
        //Invariant - We must have some way to instantiate. Everything can't be optional. --commented out due to breaking sku listing on product detail page
        // if (!(this.collectionConfig) && !this.collectionConfigs.length && !this.collection){
        //     return;
        // }
        var _this = this;
        this.$scope = $scope;
        this.$transclude = $transclude;
        this.$timeout = $timeout;
        this.$q = $q;
        this.$hibachi = $hibachi;
        this.utilityService = utilityService;
        this.collectionConfigService = collectionConfigService;
        this.listingService = listingService;
        this.paginationService = paginationService;
        this.selectionService = selectionService;
        this.observerService = observerService;
        this.rbkeyService = rbkeyService;
        /* local state variables */
        this.actions = [];
        this.allpropertyidentifiers = "";
        this.allprocessobjectproperties = "false";
        this.aggregates = [];
        this.buttonGroup = [];
        this.childCollectionConfigs = {};
        this.collectionConfigs = [];
        this.collectionObjects = [];
        this.colorFilters = [];
        this.columns = [];
        this.disableRules = [];
        this.expandableRules = [];
        this.exampleEntity = "";
        this.filters = [];
        this.filterGroups = [];
        this.hideRules = [];
        this.multiselectable = false;
        this.orderBys = [];
        this.orderByStates = {};
        this.orderByIndices = {};
        this.pageRecordsWithManualSortOrder = {};
        this.searching = false;
        this.selectable = false;
        this.showSearchFilters = false;
        this.sortable = false;
        this.getCollectionByPagination = function (state) {
            if (state.type) {
                switch (state.type) {
                    case 'setCurrentPage':
                        _this.collectionConfig.currentPage = state.payload;
                        break;
                    case 'nextPage':
                        _this.collectionConfig.currentPage = state.payload;
                        break;
                    case 'prevPage':
                        _this.collectionConfig.currentPage = state.payload;
                        break;
                    case 'setPageShow':
                        _this.collectionConfig.currentPage = 1;
                        _this.collectionConfig.setPageShow(state.payload);
                        break;
                }
                _this.getCollection = _this.collectionConfig.getEntity().then(function (data) {
                    _this.collectionData = data;
                    _this.observerService.notify('swPaginationUpdate', data);
                });
            }
        };
        this.setupCollectionPromise = function () {
            if (angular.isUndefined(_this.getCollection)) {
                _this.getCollection = _this.listingService.setupDefaultGetCollection(_this.tableID);
            }
            _this.paginator.getCollection = _this.getCollection;
            var getCollectionEventID = _this.tableID;
            //this.observerService.attach(this.getCollectionObserver,'getCollection',getCollectionEventID);
            _this.listingService.getCollection(_this.tableID);
        };
        this.getCollectionObserver = function (param) {
            _this.collectionConfig.loadJson(param.collectionConfig);
            _this.collectionData = undefined;
            _this.$timeout(function () {
                _this.getCollection();
            });
        };
        this.initializeState = function () {
            if (_this.name != null) {
                _this.tableID = _this.name;
            }
            else {
                _this.tableID = 'LD' + _this.utilityService.createID();
            }
            if (angular.isUndefined(_this.collectionConfig)) {
                //make it available to swCollectionConfig
                _this.collectionConfig = null;
            }
            if (angular.isUndefined(_this.multiSlot)) {
                _this.multiSlot = false;
            }
            if (angular.isDefined(_this.administrativeCount)) {
                _this.administrativeCount = parseInt(_this.administrativeCount);
            }
            else {
                _this.administrativeCount = 0;
            }
            if (_this.recordDetailAction && _this.recordDetailAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('detail');
            }
            if (_this.recordEditAction && _this.recordEditAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('edit');
            }
            if (_this.recordDeleteAction && _this.recordDeleteAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('delete');
            }
            if (_this.recordAddAction && _this.recordAddAction.length) {
                _this.administrativeCount++;
                _this.adminattributes = _this.getAdminAttributesByType('add');
            }
            if (_this.collectionConfig != null &&
                angular.isDefined(_this.collection) &&
                angular.isDefined(_this.collection.collectionConfig)) {
                _this.collectionConfig = _this.collection.collectionConfig;
            }
            if (angular.isUndefined(_this.collectionObject) &&
                angular.isDefined(_this.collection) &&
                angular.isDefined(_this.collection.collectionObject)) {
                _this.collectionObject = _this.collection.collectionObject;
            }
            //set defaults if value is not specifies
            _this.processObjectProperties = _this.processObjectProperties || '';
            _this.recordProcessButtonDisplayFlag = _this.recordProcessButtonDisplayFlag || true;
            _this.norecordstext = _this.rbkeyService.getRBKey('entity.' + _this.collectionObject + '.norecords');
            if (angular.isUndefined(_this.defaultSelectEvent)) {
                _this.defaultSelectEvent = 'swSelectionToggleSelection' + _this.tableID;
            }
            if (angular.isUndefined(_this.isAngularRoute)) {
                _this.isAngularRoute = true;
            }
            if (angular.isUndefined(_this.customListingControls)) {
                _this.customListingControls = false;
            }
            if (angular.isUndefined(_this.hasSearch)) {
                _this.hasSearch = true;
                _this.showSearch = true;
            }
            if (angular.isUndefined(_this.showOrderBy)) {
                _this.showOrderBy = true;
            }
            if (angular.isUndefined(_this.expandable)) {
                _this.expandable = false;
            }
            //setup export action
            if (angular.isDefined(_this.exportAction)) {
                _this.exportAction = _this.$hibachi.buildUrl('main.collectionExport') + '&collectionExportID=';
            }
            //setup print action
            if (angular.isDefined(_this.printAction)) {
                _this.printAction = _this.$hibachi.buildUrl('main.collectionPrint') + '&collectionExportID=';
            }
            //setup email action
            if (angular.isDefined(_this.emailAction)) {
                _this.emailAction = _this.$hibachi.buildUrl('main.collectionEmail') + '&collectionExportID=';
            }
            _this.paginator = _this.paginationService.createPagination();
            _this.hasCollectionPromise = false;
            if (angular.isUndefined(_this.getChildCount)) {
                _this.getChildCount = false;
            }
            //Setup table class
            _this.tableclass = _this.tableclass || '';
            _this.tableclass = _this.utilityService.listPrepend(_this.tableclass, 'table table-bordered table-hover', ' ');
            if (angular.isDefined(_this.sortableFieldName)) {
                _this.sortableFieldName = "sorting" + _this.tableID;
            }
        };
        this.getListingPageRecordsUpdateEventString = function () {
            return _this.listingService.getListingPageRecordsUpdateEventString(_this.tableID);
        };
        this.getKeyOfMatchedHideRule = function (pageRecord) {
            return _this.listingService.getKeyOfMatchedHideRule(_this.tableID, pageRecord);
        };
        this.getPageRecordMatchesHideRule = function (pageRecord) {
            return _this.listingService.getPageRecordMatchesHideRule(_this.tableID, pageRecord);
        };
        this.getPageRecordValueByColumn = function (pageRecord, column) {
            return _this.listingService.getPageRecordValueByColumn(pageRecord, column);
        };
        this.getKeyOfMatchedDisableRule = function (pageRecord) {
            return _this.listingService.getKeyOfMatchedExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordMatchesDisableRule = function (pageRecord) {
            return _this.listingService.getPageRecordMatchesDisableRule(_this.tableID, pageRecord);
        };
        this.getKeyOfMatchedExpandableRule = function (pageRecord) {
            return _this.listingService.getKeyOfMatchedExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordMatchesExpandableRule = function (pageRecord) {
            return _this.listingService.getPageRecordMatchesExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordChildCollectionConfigForExpandableRule = function (pageRecord) {
            return _this.listingService.getPageRecordChildCollectionConfigForExpandableRule(_this.tableID, pageRecord);
        };
        this.getPageRecordRefreshChildrenEvent = function (pageRecord) {
            if (_this.listingService.hasPageRecordRefreshChildrenEvent(_this.tableID, pageRecord)) {
                return _this.listingService.getPageRecordRefreshChildrenEvent(_this.tableID, pageRecord);
            }
            else {
                return "";
            }
        };
        this.getExampleEntityForExpandableRecord = function (pageRecord) {
            return _this.listingService.getExampleEntityForExpandableRecord(_this.tableID, pageRecord);
        };
        this.getNGClassObjectForPageRecordRow = function (pageRecord) {
            return _this.listingService.getNGClassObjectForPageRecordRow(_this.tableID, pageRecord);
        };
        this.getNGClassObjectForPageRecordCell = function (pageRecord, column) {
            var classObjectString = "{";
            return classObjectString + "}";
        };
        this.getColorFilterConditionString = function (colorFilter, pageRecord) {
            return _this.listingService.getColorFilterConditionString(colorFilter, pageRecord);
        };
        this.hasSingleCollectionConfig = function () {
            return _this.collectionConfig && _this.collectionConfigs.length == 0;
        };
        this.toggleOrderBy = function (column) {
            _this.listingService.toggleOrderBy(_this.tableID, column);
        };
        this.columnOrderByIndex = function (column) {
            return _this.listingService.columnOrderByIndex(_this.tableID, column);
        };
        this.updateMultiselectValues = function (res) {
            _this.multiselectValues = _this.selectionService.getSelections(_this.tableID);
            if (_this.selectionService.isAllSelected(_this.tableID)) {
                _this.multiselectCount = _this.collectionData.recordsCount - _this.selectionService.getSelectionCount(_this.tableID);
            }
            else {
                _this.multiselectCount = _this.selectionService.getSelectionCount(_this.tableID);
            }
            switch (res.action) {
                case 'uncheck':
                    _this.isCurrentPageRecordsSelected = false;
                    break;
                case 'selectAll':
                    _this.allSelected = true;
                    _this.isCurrentPageRecordsSelected = false;
                    break;
                case 'clear':
                    _this.allSelected = false;
                    _this.isCurrentPageRecordsSelected = false;
                    break;
            }
        };
        this.getPageRecordKey = function (propertyIdentifier) {
            return _this.listingService.getPageRecordKey(propertyIdentifier);
        };
        this.getAdminAttributesByType = function (type) {
            var recordActionName = 'record' + type.toUpperCase() + 'Action';
            var recordActionPropertyName = recordActionName + 'Property';
            var recordActionQueryStringName = recordActionName + 'QueryString';
            var recordActionModalName = recordActionName + 'Modal';
            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'action="' + _this[recordActionName] + '"', " ");
            if (_this[recordActionPropertyName] && _this[recordActionPropertyName].length) {
                _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'actionproperty="' + _this[recordActionPropertyName] + '"', " ");
            }
            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'querystring="' + _this[recordActionQueryStringName] + '"', " ");
            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'modal="' + _this[recordActionModalName] + '"', " ");
        };
        this.getExportAction = function () {
            return _this.exportAction + _this.collectionID;
        };
        this.getPrintAction = function () {
            return _this.printAction + _this.collectionID;
        };
        this.getEmailAction = function () {
            return _this.emailAction + _this.collectionID;
        };
        this.exportCurrentList = function (selection) {
            if (selection === void 0) { selection = false; }
            if (_this.collectionConfigs.length == 0) {
                var exportCollectionConfig = angular.copy(_this.collectionConfig.getCollectionConfig());
                if (selection && !angular.isUndefined(_this.selectionService.getSelections(_this.tableID))
                    && (_this.selectionService.getSelections(_this.tableID).length > 0)) {
                    exportCollectionConfig.filterGroups[0].filterGroup = [
                        {
                            "displayPropertyIdentifier": _this.rbkeyService.getRBKey("entity." + exportCollectionConfig.baseEntityName.toLowerCase() + "." + _this.exampleEntity.$$getIDName().toLowerCase()),
                            "propertyIdentifier": exportCollectionConfig.baseEntityAlias + "." + _this.exampleEntity.$$getIDName(),
                            "comparisonOperator": (_this.allSelected) ? "not in" : "in",
                            "value": _this.selectionService.getSelections(_this.tableID).join(),
                            "displayValue": _this.selectionService.getSelections(_this.tableID).join(),
                            "ormtype": "string",
                            "fieldtype": "id",
                            "conditionDisplay": "In List"
                        }
                    ];
                }
            }
            else {
                //multiCollectionConfig logic
            }
            $('body').append('<form action="/?' + _this.$hibachi.getConfigValue('action') + '=main.collectionConfigExport" method="post" id="formExport"></form>');
            $('#formExport')
                .append("<input type='hidden' name='collectionConfig' value='" + angular.toJson(exportCollectionConfig) + "' />")
                .submit()
                .remove();
        };
        this.paginationPageChange = function (res) {
            _this.isCurrentPageRecordsSelected = false;
        };
        this.selectCurrentPageRecords = function () {
            _this.listingService.selectCurrentPageRecords(_this.tableID);
        };
        //these are no longer going to work
        this.clearSelection = function () {
            _this.selectionService.clearSelection(_this.tableID);
        };
        this.selectAll = function () {
            _this.selectionService.selectAll(_this.tableID);
        };
        //promises to determine which set of logic will run
        this.multipleCollectionDeffered = $q.defer();
        this.multipleCollectionPromise = this.multipleCollectionDeffered.promise;
        this.singleCollectionDeferred = $q.defer();
        this.singleCollectionPromise = this.singleCollectionDeferred.promise;
        if (angular.isDefined(this.collection) && angular.isString(this.collection)) {
            //not sure why we have two properties for this
            this.baseEntityName = this.collection;
            this.collectionObject = this.collection;
            this.collectionConfig = this.collectionConfigService.newCollectionConfig(this.collectionObject);
            this.$timeout(function () {
                _this.collection = _this.collectionConfig;
                _this.columns = _this.collectionConfig.columns;
            });
            this.multipleCollectionDeffered.reject();
        }
        this.initializeState();
        if (angular.isDefined(this.collectionPromise)) {
            this.hasCollectionPromise = true;
            this.multipleCollectionDeffered.reject();
        }
        if (this.collectionConfig != null) {
            this.multipleCollectionDeffered.reject();
        }
        this.listingService.setListingState(this.tableID, this);
        //this is performed after the listing state is set above to populate columns and multiple collectionConfigs if present
        this.$transclude(this.$scope, function () { });
        this.hasCollectionPromise = angular.isDefined(this.collectionPromise);
        if (this.multiSlot) {
            this.singleCollectionPromise.then(function () {
                _this.multipleCollectionDeffered.reject();
            });
            this.multipleCollectionPromise.then(function () {
                //now do the intial setup
                _this.listingService.setupInMultiCollectionConfigMode(_this.tableID);
            }).catch(function () {
                //do the initial setup for single collection mode
                _this.listingService.setupInSingleCollectionConfigMode(_this.tableID, _this.$scope);
            }).finally(function () {
                if (angular.isUndefined(_this.getCollection)) {
                    _this.getCollection = _this.listingService.setupDefaultGetCollection(_this.tableID);
                }
                _this.paginator.getCollection = _this.getCollection;
                var getCollectionEventID = _this.tableID;
                _this.observerService.attach(_this.getCollectionObserver, 'getCollection', getCollectionEventID);
            });
        }
        else if (this.multiSlot == false) {
            if (this.columns && this.columns.length) {
                this.collectionConfig.columns = this.columns;
            }
            this.setupCollectionPromise();
        }
        if (this.collectionObject) {
            this.exampleEntity = this.$hibachi.getEntityExample(this.collectionObject);
        }
        this.observerService.attach(this.getCollectionByPagination, 'swPaginationAction');
    }
    return SWListingDisplayController;
}());
var SWListingDisplay = /** @class */ (function () {
    //@ngInject
    function SWListingDisplay(listingPartialPath, hibachiPathBuilder) {
        this.listingPartialPath = listingPartialPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'E';
        this.scope = {};
        this.transclude = {
            addAction: "?swListingAddAction",
            detailAction: "?swListingDetailAction",
            deleteAction: "?swListingDeleteAction",
            editAction: "?swListingEditAction",
            saveAction: "?swListingSaveAction",
            columns: "?swListingColumns",
            collectionConfigs: "?swCollectionConfigs",
            disableRules: "?swDisabledRowRules",
            expandableRules: "?swExpandableRowRules",
            customListingControls: "?swCustomListingControls"
        };
        this.bindToController = {
            isRadio: "<?",
            angularLinks: "<?",
            isAngularRoute: "<?",
            name: "@?",
            /*required*/
            collection: "<?",
            collectionConfig: "<?",
            getCollection: "&?",
            collectionPromise: "<?",
            edit: "<?",
            /*Optional*/
            title: "<?",
            childPropertyName: "@?",
            baseEntity: "<?",
            baseEntityName: "@?",
            baseEntityId: "@?",
            /*Admin Actions*/
            actions: "<?",
            administrativeCount: "@?",
            recordEditAction: "@?",
            recordEditActionProperty: "@?",
            recordEditQueryString: "@?",
            recordEditModal: "<?",
            recordEditDisabled: "<?",
            recordDetailAction: "@?",
            recordDetailActionProperty: "@?",
            recordDetailQueryString: "@?",
            recordDetailModal: "<?",
            recordDeleteAction: "@?",
            recordDeleteActionProperty: "@?",
            recordDeleteQueryString: "@?",
            recordAddAction: "@?",
            recordAddActionProperty: "@?",
            recordAddQueryString: "@?",
            recordAddModal: "<?",
            recordAddDisabled: "<?",
            recordProcessesConfig: "<?",
            /* record processes config is an array of actions. Example:
            [
            {
                recordProcessAction:"@",
                recordProcessActionProperty:"@",
                recordProcessQueryString:"@",
                recordProcessContext:"@",
                recordProcessEntity:"=",
                recordProcessEntityData:"=",
                recordProcessUpdateTableID:"=",
                recordProcessButtonDisplayFlag:"=",
            }
            ]
            */
            /*Hierachy Expandable*/
            parentPropertyName: "@?",
            //booleans
            expandable: "<?",
            expandableOpenRoot: "<?",
            /*Searching*/
            searchText: "<?",
            /*Sorting*/
            sortable: "<?",
            sortableFieldName: "@?",
            sortProperty: "@?",
            sortContextIDColumn: "@?",
            sortContextIDValue: "@?",
            /*Single Select*/
            selectFiledName: "@?",
            selectValue: "@?",
            selectTitle: "@?",
            /*Multiselect*/
            multiselectFieldName: "@?",
            multiselectPropertyIdentifier: "@?",
            multiselectIdPaths: "@?",
            multiselectValues: "@?",
            /*Helper / Additional / Custom*/
            tableattributes: "@?",
            tableclass: "@?",
            typeaheadDataKey: "@?",
            adminattributes: "@?",
            /* Settings */
            showheader: "<?",
            showOrderBy: "<?",
            showTopPagination: "<?",
            showSearch: "<?",
            showSearchFilters: "<?",
            showSimpleListingControls: "<?",
            /* Basic Action Caller Overrides*/
            createModal: "<?",
            createAction: "@?",
            createQueryString: "@?",
            exportAction: "@?",
            getChildCount: "<?",
            hasSearch: "<?",
            hasActionBar: "<?",
            multiSlot: "<?",
            customListingControls: "<?"
        };
        this.controller = SWListingDisplayController;
        this.controllerAs = "swListingDisplay";
        this.compile = function (element, attrs) {
            return {
                pre: function ($scope, element, attrs, transclude) {
                },
                post: function ($scope, element, attrs) {
                }
            };
        };
        this.listingPartialPath = listingPartialPath;
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.listingPartialPath) + 'listingdisplay.html';
    }
    SWListingDisplay.Factory = function () {
        var directive = function (listingPartialPath, hibachiPathBuilder) { return new SWListingDisplay(listingPartialPath, hibachiPathBuilder); };
        directive.$inject = [
            'listingPartialPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWListingDisplay;
}());
exports.SWListingDisplay = SWListingDisplay;


/***/ }),
/* 882 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingDisplayCellController = /** @class */ (function () {
    //@ngInject
    function SWListingDisplayCellController(listingPartialPath, hibachiPathBuilder, listingService, utilityService, $scope) {
        var _this = this;
        this.listingPartialPath = listingPartialPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.listingService = listingService;
        this.utilityService = utilityService;
        this.$scope = $scope;
        this.expandable = false;
        this.getDirectiveTemplate = function () {
            var templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycell.html';
            if (_this.expandable || (_this.swListingDisplay.expandable && _this.column.tdclass && _this.column.tdclass === 'primary')) {
                templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplayselectablecellexpandable.html';
            }
            if (!_this.swListingDisplay.expandable || !_this.column.tdclass || _this.column.tdclass !== 'primary') {
                if (_this.column.ormtype === 'timestamp') {
                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycelldate.html';
                }
                else if (_this.column.type === 'currency') {
                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycellcurrency.html';
                }
                else if (_this.column.aggregate) {
                    _this.value = _this.pageRecord[_this.swListingDisplay.getPageRecordKey(_this.column.aggregate.aggregateAlias)];
                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycellaggregate.html';
                }
            }
            return templateUrl;
        };
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.listingPartialPath = listingPartialPath;
        this.$scope = $scope;
        this.value = this.listingService.getPageRecordValueByColumn(this.pageRecord, this.column);
        this.popover = this.utilityService.replaceStringWithProperties(this.column.tooltip, this.pageRecord);
        this.hasActionCaller = false;
        if (this.column.action && this.column.queryString) {
            this.hasActionCaller = true;
            this.actionCaller = {
                action: this.column.action
            };
            if (this.column.queryString) {
                this.actionCaller.queryString = this.utilityService.replaceStringWithProperties(this.column.queryString, this.pageRecord);
            }
        }
        if (this.cellView) {
            var htmlCellView = this.utilityService.camelCaseToSnakeCase(this.cellView);
            this.template = htmlCellView;
            //convert the page records into attrs
            this.templateVariables = this.pageRecord;
            if (angular.isDefined(this.column.columnID)) {
                this.templateVariables["column"] = this.column.columnID;
            }
            if (angular.isDefined(this.swListingDisplay.baseEntityName) && angular.isDefined(this.swListingDisplay.baseEntityId)) {
                this.templateVariables["baseEntityId"] = this.swListingDisplay.baseEntityId;
                this.templateVariables["baseEntityName"] = this.swListingDisplay.baseEntityName;
            }
            if (angular.isDefined(this.column.propertyIdentifier)) {
                this.templateVariables["columnPropertyIdentifier"] = this.column.propertyIdentifier;
            }
            this.templateVariables["listingDisplayID"] = this.swListingDisplay.tableID;
        }
        else if (!this.hasActionCaller) {
            this.templateUrl = this.getDirectiveTemplate();
        }
    }
    return SWListingDisplayCellController;
}());
var SWListingDisplayCell = /** @class */ (function () {
    //@ngInject
    function SWListingDisplayCell() {
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            swListingDisplay: "=?",
            column: "=?",
            pageRecord: "=?",
            cellView: "@?",
            expandableRules: "=?"
        };
        this.controller = SWListingDisplayCellController;
        this.controllerAs = "swListingDisplayCell";
        this.template = "\n        <div ng-if=\"swListingDisplayCell.template\" sw-directive data-variables=\"swListingDisplayCell.templateVariables\" data-directive-template=\"swListingDisplayCell.template\"></div>\n        <div ng-if=\"swListingDisplayCell.templateUrl\" ng-include src=\"swListingDisplayCell.templateUrl\"></div>\n        <sw-action-caller ng-if=\"swListingDisplayCell.hasActionCaller\"\n                    data-action=\"{{swListingDisplayCell.actionCaller.action}}\"\n                    data-query-string=\"{{swListingDisplayCell.actionCaller.queryString}}\"\n                    data-text=\"{{swListingDisplayCell.value}}\"\n                    data-tooltip-text=\"{{swListingDisplayCell.popover}}\"\n                    data-is-angular-route=\"false\"\n\n        >\n        </sw-action-caller>\n    ";
    }
    SWListingDisplayCell.Factory = function () {
        var directive = function () { return new SWListingDisplayCell(); };
        directive.$inject = [];
        return directive;
    };
    return SWListingDisplayCell;
}());
exports.SWListingDisplayCell = SWListingDisplayCell;


/***/ }),
/* 883 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
/* SWListingExpandableRule
 * defines a filter, by which to determine what will be expanded
 * supplies the collection config and any other necessary rules for what will be loaded and displayed
 */
var SWListingExpandableRuleController = /** @class */ (function () {
    //@ngInject
    function SWListingExpandableRuleController($q) {
        this.$q = $q;
        this.hasChildrenCollectionConfigDeferred = $q.defer();
        this.hasChildrenCollectionConfigPromise = this.hasChildrenCollectionConfigDeferred.promise;
        //why did I need this? 
        this.childrenCollectionConfig = null;
    }
    return SWListingExpandableRuleController;
}());
var SWListingExpandableRule = /** @class */ (function () {
    function SWListingExpandableRule(scopeService, $q) {
        var _this = this;
        this.scopeService = scopeService;
        this.$q = $q;
        this.restrict = 'EA';
        this.scope = true;
        this.transclude = {
            collectionConfig: "?swConfig"
        };
        this.template = "\n        <div ng-transclude=\"collectionConfig\"></div> \n    ";
        this.bindToController = {
            childrenCollectionConfig: "=?",
            filterPropertyIdentifier: "@",
            filterComparisonOperator: "@",
            filterComparisonValue: "@",
            refreshChildrenEvent: "@?"
        };
        this.controller = SWListingExpandableRuleController;
        this.controllerAs = "swListingExpandableRule";
        this.link = function (scope, element, attrs) {
            scope.swListingExpandableRule.hasChildrenCollectionConfigPromise.then(function () {
                var rule = {
                    filterPropertyIdentifier: scope.swListingExpandableRule.filterPropertyIdentifier,
                    filterComparisonOperator: scope.swListingExpandableRule.filterComparisonOperator,
                    filterComparisonValue: scope.swListingExpandableRule.filterComparisonValue,
                    childrenCollectionConfig: scope.swListingExpandableRule.childrenCollectionConfig,
                    refreshChildrenEvent: scope.swListingExpandableRule.refreshChildrenEvent
                };
                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");
                if (angular.isDefined(listingDisplayScope.swListingDisplay)) {
                    listingDisplayScope = listingDisplayScope.swListingDisplay;
                }
                else {
                    throw ("listing display scope not available to sw-listing-expandable-rule");
                }
                listingDisplayScope.expandableRules.push(rule);
            });
        };
    }
    SWListingExpandableRule.Factory = function () {
        var directive = function (scopeService, $q) { return new SWListingExpandableRule(scopeService, $q); };
        directive.$inject = [
            'scopeService',
            '$q'
        ];
        return directive;
    };
    return SWListingExpandableRule;
}());
exports.SWListingExpandableRule = SWListingExpandableRule;


/***/ }),
/* 884 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingFilterController = /** @class */ (function () {
    function SWListingFilterController() {
        this.init = function () {
        };
        this.init();
    }
    return SWListingFilterController;
}());
var SWListingFilter = /** @class */ (function () {
    function SWListingFilter() {
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            propertyIdentifier: "@",
            comparisonOperator: "@",
            comparisonValue: "@",
            logicalOperator: "@",
            hidden: "@?"
        };
        this.controller = SWListingFilterController;
        this.controllerAs = "swListingFilter";
        this.link = function (scope, element, attrs) {
            var filter = {
                propertyIdentifier: scope.swListingFilter.propertyIdentifier,
                comparisonOperator: scope.swListingFilter.comparisonOperator,
                comparisonValue: scope.swListingFilter.comparisonValue,
                logicalOperator: scope.swListingFilter.logicalOperator,
                hidden: false
            };
            if (angular.isDefined(scope.swListingFilter.hidden)) {
                filter['hidden'] = scope.swListingFilter.hidden;
            }
            if (angular.isDefined(scope.$parent.swListingFilterGroup)) {
                scope.$parent.swListingFilterGroup.filters.push(filter);
            }
            else {
                scope.$parent.swListingDisplay.filters.push(filter);
            }
        };
    }
    SWListingFilter.Factory = function () {
        var directive = function () { return new SWListingFilter(); };
        directive.$inject = [];
        return directive;
    };
    return SWListingFilter;
}());
exports.SWListingFilter = SWListingFilter;


/***/ }),
/* 885 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingFilterGroupController = /** @class */ (function () {
    function SWListingFilterGroupController($scope, $transclude) {
        this.$scope = $scope;
        this.$transclude = $transclude;
        this.filters = [];
        $transclude($scope, function () { });
        $scope.$parent.swListingDisplay.filterGroups.push(this.filters);
    }
    return SWListingFilterGroupController;
}());
var SWListingFilterGroup = /** @class */ (function () {
    function SWListingFilterGroup() {
        this.restrict = 'EA';
        this.transclude = true;
        this.scope = true;
        this.bindToController = {};
        this.controller = SWListingFilterGroupController;
        this.controllerAs = "swListingFilterGroup";
    }
    SWListingFilterGroup.Factory = function () {
        var directive = function () { return new SWListingFilterGroup(); };
        directive.$inject = [];
        return directive;
    };
    SWListingFilterGroup.$inject = [];
    return SWListingFilterGroup;
}());
exports.SWListingFilterGroup = SWListingFilterGroup;


/***/ }),
/* 886 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingGlobalSearchController = /** @class */ (function () {
    //@ngInject
    function SWListingGlobalSearchController($timeout) {
        var _this = this;
        this.$timeout = $timeout;
        this.init = function () {
            _this.searching = false;
        };
        this.search = function () {
            _this.searching = true;
            if (_this._timeoutPromise) {
                _this.$timeout.cancel(_this._timeoutPromise);
            }
            _this._timeoutPromise = _this.$timeout(function () {
                _this.getCollection();
            }, 500);
        };
        this.init();
    }
    return SWListingGlobalSearchController;
}());
var SWListingGlobalSearch = /** @class */ (function () {
    //@ngInject
    function SWListingGlobalSearch(utilityService, listingPartialPath, hibachiPathBuilder) {
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = {};
        this.bindToController = {
            searching: "=",
            searchText: "=",
            getCollection: "="
        };
        this.controller = SWListingGlobalSearchController;
        this.controllerAs = "swListingGlobalSearch";
        this.link = function (scope, element, attrs) {
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(listingPartialPath) + "listingglobalsearch.html";
    }
    SWListingGlobalSearch.Factory = function () {
        var directive = function (utilityService, listingPartialPath, hibachiPathBuilder) { return new SWListingGlobalSearch(utilityService, listingPartialPath, hibachiPathBuilder); };
        directive.$inject = ['utilityService', 'listingPartialPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWListingGlobalSearch;
}());
exports.SWListingGlobalSearch = SWListingGlobalSearch;


/***/ }),
/* 887 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingOrderByController = /** @class */ (function () {
    //@ngInject
    function SWListingOrderByController() {
        this.init = function () {
        };
        this.init();
    }
    return SWListingOrderByController;
}());
var SWListingOrderBy = /** @class */ (function () {
    //@ngInject
    function SWListingOrderBy(utilityService) {
        this.utilityService = utilityService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {
            orderBy: "@",
        };
        this.controller = SWListingOrderByController;
        this.controllerAs = "swListingOrderBy";
        this.link = function (scope, element, attrs) {
            var orderBy = {
                orderBy: scope.swListingOrderBy.orderBy,
            };
            scope.$parent.swListingDisplay.orderBys.push(orderBy);
        };
    }
    SWListingOrderBy.Factory = function () {
        var directive = function (utilityService) { return new SWListingOrderBy(utilityService); };
        directive.$inject = [
            'utilityService'
        ];
        return directive;
    };
    return SWListingOrderBy;
}());
exports.SWListingOrderBy = SWListingOrderBy;


/***/ }),
/* 888 */,
/* 889 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingRowSaveController = /** @class */ (function () {
    //@ngInject
    function SWListingRowSaveController(listingService) {
        var _this = this;
        this.listingService = listingService;
        this.save = function () {
            _this.listingService.markSaved(_this.listingID, _this.pageRecordIndex);
        };
    }
    return SWListingRowSaveController;
}());
var SWListingRowSave = /** @class */ (function () {
    function SWListingRowSave(hibachiPathBuilder, listingPartialPath, utilityService, scopeService) {
        var _this = this;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.listingPartialPath = listingPartialPath;
        this.utilityService = utilityService;
        this.scopeService = scopeService;
        this.restrict = 'EA';
        this.scope = true;
        this.bindToController = {};
        this.controller = SWListingRowSaveController;
        this.controllerAs = "swListingRowSave";
        this.link = function ($scope, element, attrs) {
            var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
            if (angular.isDefined(currentScope["pageRecord"])) {
                $scope.swListingRowSave.pageRecord = currentScope["pageRecord"];
            }
            var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
            if (angular.isDefined(currentScope["pageRecordKey"])) {
                $scope.swListingRowSave.pageRecordIndex = currentScope["pageRecordKey"];
            }
            var currentScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
            if (angular.isDefined(currentScope["swListingDisplay"])) {
                $scope.swListingRowSave.listingID = currentScope["swListingDisplay"].tableID;
            }
        };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.listingPartialPath) + 'listingrowsave.html';
    }
    SWListingRowSave.Factory = function () {
        var directive = function (hibachiPathBuilder, listingPartialPath, utilityService, scopeService) { return new SWListingRowSave(hibachiPathBuilder, listingPartialPath, utilityService, scopeService); };
        directive.$inject = [
            'hibachiPathBuilder',
            'listingPartialPath',
            'utilityService',
            'scopeService'
        ];
        return directive;
    };
    SWListingRowSave.$inject = ['utilityService'];
    return SWListingRowSave;
}());
exports.SWListingRowSave = SWListingRowSave;


/***/ }),
/* 890 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWListingSearchController = /** @class */ (function () {
    //@ngInject
    function SWListingSearchController($hibachi, metadataService, listingService, collectionService, observerService) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.metadataService = metadataService;
        this.listingService = listingService;
        this.collectionService = collectionService;
        this.observerService = observerService;
        this.displayOptionsClosed = true;
        this.filtersClosed = true;
        this.$onInit = function () {
            //snapshot searchable options in the beginning
            _this.searchableOptions = angular.copy(_this.swListingDisplay.collectionConfig.columns);
            _this.selectedSearchColumn = { title: 'All' };
            _this.configureSearchableColumns(_this.selectedSearchColumn);
        };
        this.selectSearchColumn = function (column) {
            _this.selectedSearchColumn = column;
            _this.configureSearchableColumns(column);
            if (_this.searchText) {
                _this.search();
            }
        };
        this.search = function () {
            if (_this.searchText.length > 0) {
                _this.listingService.setExpandable(_this.listingId, false);
            }
            else {
                _this.listingService.setExpandable(_this.listingId, true);
            }
            _this.collectionConfig.setKeywords(_this.searchText);
            _this.swListingDisplay.collectionConfig = _this.collectionConfig;
            _this.observerService.notify('swPaginationAction', { type: 'setCurrentPage', payload: 1 });
        };
        this.configureSearchableColumns = function (column) {
            var searchableColumn = "";
            if (column.propertyIdentifier) {
                searchableColumn = column.propertyIdentifier;
                //default to All columns
            }
            for (var i = 0; i < _this.swListingDisplay.collectionConfig.columns.length; i++) {
                if (searchableColumn.length) {
                    if (searchableColumn === _this.swListingDisplay.collectionConfig.columns[i].propertyIdentifier) {
                        _this.swListingDisplay.collectionConfig.columns[i].isSearchable = true;
                    }
                    else {
                        _this.swListingDisplay.collectionConfig.columns[i].isSearchable = false;
                    }
                }
                else {
                    _this.swListingDisplay.collectionConfig.columns[i].isSearchable = true;
                }
            }
        };
        if (angular.isUndefined(this.showToggleFilters)) {
            this.showToggleFilters = true;
        }
        if (angular.isUndefined(this.showToggleDisplayOptions)) {
            this.showToggleDisplayOptions = true;
        }
    }
    return SWListingSearchController;
}());
var SWListingSearch = /** @class */ (function () {
    //@ngInject
    function SWListingSearch(scopeService, collectionPartialsPath, hibachiPathBuilder) {
        this.scopeService = scopeService;
        this.collectionPartialsPath = collectionPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'EA';
        this.scope = {};
        this.require = { swListingDisplay: "?^swListingDisplay", swListingControls: '?^swListingControls' };
        this.bindToController = {
            collectionConfig: "<?",
            paginator: "=?",
            toggleFilters: "&?",
            toggleDisplayOptions: "&?",
            showToggleFilters: "=?",
            showToggleDisplayOptions: "=?",
            listingId: "@?"
        };
        this.controller = SWListingSearchController;
        this.controllerAs = 'swListingSearch';
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "listingsearch.html";
    }
    SWListingSearch.Factory = function () {
        var directive = function (scopeService, listingPartialPath, hibachiPathBuilder) { return new SWListingSearch(scopeService, listingPartialPath, hibachiPathBuilder); };
        directive.$inject = ['scopeService', 'listingPartialPath', 'hibachiPathBuilder'];
        return directive;
    };
    return SWListingSearch;
}());
exports.SWListingSearch = SWListingSearch;


/***/ }),
/* 891 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
//modules
var collection_module_1 = __webpack_require__(305);
//services
var listingservice_1 = __webpack_require__(892);
//directives
var swlistingdisplay_1 = __webpack_require__(881);
var swlistingdisplaycell_1 = __webpack_require__(882);
var swlistingcontrols_1 = __webpack_require__(879);
var swlistingaggregate_1 = __webpack_require__(876);
var swlistingcolorfilter_1 = __webpack_require__(877);
var swlistingcolumn_1 = __webpack_require__(878);
var swlistingdisablerule_1 = __webpack_require__(880);
var swlistingexpandablerule_1 = __webpack_require__(883);
var swlistingfilter_1 = __webpack_require__(884);
var swlistingfiltergroup_1 = __webpack_require__(885);
var swlistingorderby_1 = __webpack_require__(887);
var swlistingrowsave_1 = __webpack_require__(889);
var swlistingsearch_1 = __webpack_require__(890);
var swlistingglobalsearch_1 = __webpack_require__(886);
var listingmodule = angular.module('hibachi.listing', [collection_module_1.collectionmodule.name])
    .run([function () {
    }])
    //services
    .service('listingService', listingservice_1.ListingService)
    //directives
    .directive('swListingDisplay', swlistingdisplay_1.SWListingDisplay.Factory())
    .directive('swListingControls', swlistingcontrols_1.SWListingControls.Factory())
    .directive('swListingAggregate', swlistingaggregate_1.SWListingAggregate.Factory())
    .directive('swListingColorFilter', swlistingcolorfilter_1.SWListingColorFilter.Factory())
    .directive('swListingColumn', swlistingcolumn_1.SWListingColumn.Factory())
    .directive('swListingDisableRule', swlistingdisablerule_1.SWListingDisableRule.Factory())
    .directive('swListingExpandableRule', swlistingexpandablerule_1.SWListingExpandableRule.Factory())
    .directive('swListingDisplayCell', swlistingdisplaycell_1.SWListingDisplayCell.Factory())
    .directive('swListingFilter', swlistingfilter_1.SWListingFilter.Factory())
    .directive('swListingFilterGroup', swlistingfiltergroup_1.SWListingFilterGroup.Factory())
    .directive('swListingOrderBy', swlistingorderby_1.SWListingOrderBy.Factory())
    .directive('swListingRowSave', swlistingrowsave_1.SWListingRowSave.Factory())
    .directive('swListingSearch', swlistingsearch_1.SWListingSearch.Factory())
    .directive('swListingGlobalSearch', swlistingglobalsearch_1.SWListingGlobalSearch.Factory())
    //constants
    .constant('listingPartialPath', 'listing/components/');
exports.listingmodule = listingmodule;


/***/ }),
/* 892 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var ListingService = /** @class */ (function () {
    //@ngInject
    function ListingService($timeout, $q, collectionConfigService, filterService, historyService, observerService, rbkeyService, selectionService, utilityService, $hibachi) {
        var _this = this;
        this.$timeout = $timeout;
        this.$q = $q;
        this.collectionConfigService = collectionConfigService;
        this.filterService = filterService;
        this.historyService = historyService;
        this.observerService = observerService;
        this.rbkeyService = rbkeyService;
        this.selectionService = selectionService;
        this.utilityService = utilityService;
        this.$hibachi = $hibachi;
        this.listingDisplays = {};
        //Event Functions
        this.getListingPageRecordsUpdateEventString = function (listingID) {
            return listingID + "pageRecordsUpdated";
        };
        this.getListingOrderByChangedEventString = function (listingID) {
            return listingID + "orderByChanged";
        };
        this.getListingInitiatedEventString = function (listingID) {
            return listingID + "initiated";
        };
        this.notifyListingPageRecordsUpdate = function (listingID) {
            _this.observerService.notify(_this.getListingPageRecordsUpdateEventString(listingID), listingID);
        };
        this.attachToListingPageRecordsUpdate = function (listingID, callback, id) {
            _this.observerService.attach(callback, _this.getListingPageRecordsUpdateEventString(listingID), id);
        };
        this.attachToOrderByChangedUpdate = function (listingID, callback, id) {
            _this.observerService.attach(callback, _this.getListingOrderByChangedEventString(listingID), id);
        };
        this.attachToListingInitiated = function (listingID, callback) {
            _this.observerService.attach(callback, _this.getListingInitiatedEventString(listingID));
            if (_this.historyService.hasHistory(_this.getListingInitiatedEventString(listingID))) {
                callback();
            }
        };
        //End Event Functions
        //core getters and setters
        this.setListingState = function (listingID, state) {
            _this.listingDisplays[listingID] = state;
            _this.observerService.notifyAndRecord(_this.getListingInitiatedEventString(listingID));
        };
        this.getListing = function (listingID) {
            return _this.listingDisplays[listingID];
        };
        this.getListingColumns = function (listingID) {
            return _this.getListing(listingID).columns || _this.getListingCollectionConfigColumns(listingID);
        };
        this.getListingCollectionConfigColumns = function (listingID) {
            if (_this.getListing(listingID).collectionConfig != null) {
                return _this.getListing(listingID).collectionConfig.columns;
            }
        };
        this.getListingExampleEntity = function (listingID) {
            if (_this.getListing(listingID).exampleEntity != null) {
                return _this.getListing(listingID).exampleEntity;
            }
            else {
                _this.setupExampleEntity(listingID);
            }
        };
        this.getListingCollectionConfigColumnIndexByPropertyIdentifier = function (listingID, propertyIdentifier) {
            var columns = _this.getListingCollectionConfigColumns(listingID);
            return _this.utilityService.ArrayFindByPropertyValue(columns, 'propertyIdentifier', propertyIdentifier);
        };
        this.getListingColumnIndexByPropertyIdentifier = function (listingID, propertyIdentifier) {
            var columns = _this.getListingColumns(listingID);
            return _this.utilityService.ArrayFindByPropertyValue(columns, 'propertyIdentifier', propertyIdentifier);
        };
        this.getListingBaseEntityName = function (listingID) {
            var baseEntityName = _this.getListing(listingID).baseEntityName || _this.getListing(listingID).collectionObject;
            if (baseEntityName == null && _this.getListing(listingID).collectionConfig != null) {
                baseEntityName = _this.getListing(listingID).collectionConfig.baseEntityName;
            }
            if (baseEntityName == null && _this.getListing(listingID).collectionData != null) {
                baseEntityName = _this.getListing(listingID).collectionData.collectionObject;
            }
            return baseEntityName;
        };
        this.getListingBaseEntityPrimaryIDPropertyName = function (listingID) {
            if (_this.getListingExampleEntity(listingID) != null) {
                return _this.getListingExampleEntity(listingID).$$getIDName();
            }
        };
        this.getListingPrimaryEntityName = function (listingID) {
            return _this.getListing(listingID).baseEntityName ||
                _this.getListing(listingID).collectionObject ||
                _this.getListing(listingID).collectionConfig.baseEntityName;
        };
        this.getListingEntityPrimaryIDPropertyName = function (listingID) {
            return _this.$hibachi.getPrimaryIDPropertyNameByEntityName(_this.getListingPrimaryEntityName(listingID));
        };
        this.getListingPageRecords = function (listingID) {
            if (angular.isDefined(_this.getListing(listingID)) &&
                angular.isDefined(_this.getListing(listingID).collectionData) &&
                angular.isDefined(_this.getListing(listingID).collectionData.pageRecords)) {
                return _this.getListing(listingID).collectionData.pageRecords;
            }
        };
        this.getCollection = function (listingID) {
            return _this.getListing(listingID).getCollection();
        };
        this.getPageRecordsWithManualSortOrder = function (listingID) {
            if (angular.isDefined(_this.getListing(listingID)) && _this.getListingPageRecords(listingID) != null) {
                var pageRecords = _this.getListingPageRecords(listingID);
                var primaryIDPropertyName = _this.getListingEntityPrimaryIDPropertyName(listingID);
                var primaryIDWithBaseAlias = _this.getListing(listingID).collectionConfig.baseEntityAlias + '.' + primaryIDPropertyName;
                var pageRecordsWithManualSortOrder = {};
                _this.$timeout(function () {
                    for (var j = 0; j < pageRecords.length; j++) {
                        var pageRecord = pageRecords[j];
                        var primaryID = pageRecords[j][primaryIDPropertyName];
                        var sortOrder = j + 1;
                        var primaryIDColumnIndex = _this.getListingCollectionConfigColumnIndexByPropertyIdentifier(listingID, primaryIDWithBaseAlias);
                        if (angular.isDefined(primaryID)) {
                            pageRecordsWithManualSortOrder[primaryID] = sortOrder;
                        }
                        else if (primaryIDColumnIndex !== -1) {
                            var column = _this.getListingCollectionConfigColumns(listingID)[primaryIDColumnIndex];
                            if (angular.isDefined(column.fallbackPropertyIdentifiers)) {
                                var fallbackPropertyArray = column.fallbackPropertyIdentifiers.split(",");
                                for (var i = 0; i < fallbackPropertyArray.length; i++) {
                                    if (angular.isDefined(pageRecord[fallbackPropertyArray[i]])) {
                                        pageRecordsWithManualSortOrder[pageRecord[fallbackPropertyArray[i]]] = sortOrder;
                                    }
                                }
                            }
                        }
                    }
                    _this.getListing(listingID).pageRecordsWithManualSortOrder = angular.toJson(pageRecordsWithManualSortOrder);
                    return _this.getListing(listingID).pageRecordsWithManualSortOrders;
                }, 0);
            }
            else {
                return angular.toJson({});
            }
        };
        //Begin Listing Page Record Functions
        this.getListingPageRecordIndexByPageRecord = function (listingID, pageRecordToCompare) {
            var pageRecords = _this.getListingPageRecords(listingID);
            var primaryIDPropertyName = _this.getListingEntityPrimaryIDPropertyName(listingID);
            for (var j = 0; j < pageRecords.length; j++) {
                var pageRecord = pageRecords[j];
                if (pageRecord[primaryIDPropertyName] == pageRecordToCompare[primaryIDPropertyName]) {
                    return j;
                }
            }
            return -1;
        };
        this.insertListingPageRecord = function (listingID, pageRecord) {
            pageRecord.newFlag = true;
            if (angular.isDefined(_this.getListingPageRecords(listingID))) {
                _this.notifyListingPageRecordsUpdate(listingID);
                _this.getListingPageRecords(listingID).unshift(pageRecord); //insert at beginning be default
            }
        };
        this.removeListingPageRecord = function (listingID, pageRecord) {
            var pageRecords = _this.getListingPageRecords(listingID);
            if (_this.getListingPageRecordIndexByPageRecord(listingID, pageRecord) != -1) {
                _this.notifyListingPageRecordsUpdate(listingID);
                return pageRecords.splice(_this.getListingPageRecordIndexByPageRecord(listingID, pageRecord), 1)[0]; //this will always be an array of one element 
            }
        };
        this.getPageRecordKey = function (propertyIdentifier) {
            if (propertyIdentifier) {
                var propertyIdentifierWithoutAlias = '';
                if (propertyIdentifier.indexOf('_') === 0) {
                    propertyIdentifierWithoutAlias = propertyIdentifier.substring(propertyIdentifier.indexOf('.') + 1, propertyIdentifier.length);
                }
                else {
                    propertyIdentifierWithoutAlias = propertyIdentifier;
                }
                return _this.utilityService.replaceAll(propertyIdentifierWithoutAlias, '.', '_');
            }
            return '';
        };
        this.getPageRecordValueByColumn = function (pageRecord, column) {
            var pageRecordValue = pageRecord[_this.getPageRecordKey(column.propertyIdentifier)] || "";
            //try to find the property again if we need to...
            if (pageRecordValue == "") {
                for (var property in pageRecord) {
                    if (property.indexOf(_this.getPageRecordKey(column.propertyIdentifier).trim()) != -1) {
                        //use this record
                        pageRecordValue = pageRecord[property];
                    }
                }
            }
            //last change to find the value
            if ((angular.isUndefined(pageRecordValue) ||
                (angular.isString(pageRecordValue) && pageRecordValue.trim().length == 0)) &&
                angular.isDefined(column.fallbackPropertyIdentifiers)) {
                var fallbackPropertyArray = column.fallbackPropertyIdentifiers.replace('.', '_').split(",");
                for (var i = 0; i < fallbackPropertyArray.length; i++) {
                    if (angular.isDefined(pageRecord[_this.getPageRecordKey(fallbackPropertyArray[i])])) {
                        pageRecordValue = pageRecord[_this.getPageRecordKey(fallbackPropertyArray[i])];
                        break;
                    }
                }
            }
            return pageRecordValue;
        };
        this.selectCurrentPageRecords = function (listingID) {
            if (!_this.getListing(listingID).collectionData.pageRecords)
                return;
            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {
                if (_this.getListing(listingID).isCurrentPageRecordsSelected == true) {
                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
                }
                else {
                    _this.selectionService.removeSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
                }
            }
        };
        /** returns the index of the item in the listing pageRecord by checking propertyName == recordID */
        this.getSelectedBy = function (listingID, propertyName, value) {
            if (!listingID || !propertyName || !value) {
                return -1;
            }
            ;
            return _this.getListing(listingID).collectionData.pageRecords.findIndex(function (record) { return record[propertyName] == value; });
        };
        this.clearAllSelections = function (listingID) {
            if (!listingID)
                return -1;
            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {
                _this.selectionService.removeSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
            }
        };
        this.getNGClassObjectForPageRecordRow = function (listingID, pageRecord) {
            var classObjectString = "{";
            angular.forEach(_this.getListing(listingID).colorFilters, function (colorFilter, index) {
                classObjectString = classObjectString.concat("'" + colorFilter.colorClass + "':" + _this.getColorFilterConditionString(colorFilter, pageRecord));
                classObjectString = classObjectString.concat(",");
            });
            classObjectString = classObjectString.concat(" 's-child':" + _this.getPageRecordIsChild(listingID, pageRecord));
            var newFlag = false;
            if (pageRecord.newFlag != null && typeof pageRecord.newFlag === 'string' && pageRecord.newFlag.trim() !== '') {
                newFlag = pageRecord.newFlag;
            }
            classObjectString = classObjectString.concat(",'s-selected-row':" + newFlag);
            classObjectString = classObjectString.concat(",'s-disabled':" + _this.getPageRecordMatchesDisableRule(listingID, pageRecord));
            classObjectString = classObjectString.concat(",'s-edited':pageRecord.edited");
            return classObjectString + "}";
        };
        this.getPageRecordIsChild = function (listingID, pageRecord) {
            var isChild = false;
            //todo implement
            return isChild;
        };
        //End Listing Page Record Functions
        //Row Save Functionality
        this.determineRowEdited = function (pageRecords, pageRecordIndex) {
            var fieldCount = 0;
            for (var key in pageRecords[pageRecordIndex].editedFields) {
                fieldCount++;
                if (fieldCount > 1) {
                    pageRecords[pageRecordIndex].edited = true;
                    return true;
                }
            }
            pageRecords[pageRecordIndex].edited = false;
            return false;
        };
        this.markUnedited = function (listingID, pageRecordIndex, propertyDisplayID) {
            var pageRecords = _this.getListingPageRecords(listingID);
            if (angular.isDefined(pageRecords[pageRecordIndex].editedFields[propertyDisplayID])) {
                delete pageRecords[pageRecordIndex].editedFields[propertyDisplayID];
            }
            return _this.determineRowEdited(pageRecords, pageRecordIndex);
        };
        this.markEdited = function (listingID, pageRecordIndex, propertyDisplayID, saveCallback) {
            var pageRecords = _this.getListingPageRecords(listingID);
            if (angular.isUndefined(pageRecords[pageRecordIndex].editedFields) && !angular.isObject(pageRecords[pageRecordIndex].editedFields)) {
                pageRecords[pageRecordIndex].editedFields = {};
            }
            pageRecords[pageRecordIndex].editedFields[propertyDisplayID] = saveCallback;
            return _this.determineRowEdited(pageRecords, pageRecordIndex);
        };
        this.markSaved = function (listingID, pageRecordIndex) {
            var pageRecords = _this.getListingPageRecords(listingID);
            var savePromises = [];
            for (var key in pageRecords[pageRecordIndex].editedFields) {
                if (angular.isFunction(pageRecords[pageRecordIndex].editedFields[key])) {
                    savePromises.push(pageRecords[pageRecordIndex].editedFields[key]());
                }
            }
            _this.$q.all(savePromises).then(function () {
                delete pageRecords[pageRecordIndex].editedFields;
                pageRecords[pageRecordIndex].edited = false;
            });
        };
        //End Row Save Functionality
        //Setup Functions
        this.setupInSingleCollectionConfigMode = function (listingID, listingDisplayScope) {
            if (_this.getListing(listingID).collectionObject != null &&
                _this.getListing(listingID).collectionConfig != null) {
                _this.getListing(listingID).collectionObject = _this.getListing(listingID).collectionConfig.baseEntityName;
            }
            _this.initCollectionConfigData(listingID, _this.getListing(listingID).collectionConfig);
            _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);
            listingDisplayScope.$watch('swListingDisplay.collectionPromise', function (newValue, oldValue) {
                if (newValue) {
                    _this.$q.when(_this.getListing(listingID).collectionPromise).then(function (data) {
                        _this.getListing(listingID).collectionData = data;
                        _this.setupDefaultCollectionInfo(listingID);
                        if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {
                            _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);
                        }
                        else {
                            _this.getListing(listingID).collectionConfig.loadJson(data.collectionConfig);
                        }
                        _this.notifyListingPageRecordsUpdate(listingID);
                        _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords ||
                            _this.getListing(listingID).collectionData.records;
                        _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
                        _this.getListing(listingID).searching = false;
                    });
                }
            });
        };
        this.setupInMultiCollectionConfigMode = function (listingID) {
            angular.forEach(_this.getListing(listingID).collectionConfigs, function (value, key) {
                _this.getListing(listingID).collectionObjects[key] = value.baseEntityName;
            });
        };
        this.setupDefaultCollectionInfo = function (listingID) {
            if (_this.getListing(listingID).hasCollectionPromise
                && angular.isDefined(_this.getListing(listingID).collection)
                && _this.getListing(listingID).collectionConfig == null) {
                _this.getListing(listingID).collectionObject = _this.getListing(listingID).collection.collectionObject;
                _this.getListing(listingID).collectionConfig = _this.collectionConfigService.newCollectionConfig(_this.getListing(listingID).collectionObject);
                _this.getListing(listingID).collectionConfig.loadJson(_this.getListing(listingID).collection.collectionConfig);
            }
            if (_this.getListing(listingID).multiSlot == false) {
                _this.$timeout(function () {
                    _this.getListing(listingID).collectionConfig.loadJson(_this.getListing(listingID).collectionData.collectionConfig);
                    _this.getListing(listingID).columns = _this.getListing(listingID).collectionConfig.columns;
                });
            }
            if (_this.getListing(listingID).paginator != null
                && _this.getListing(listingID).collectionConfig != null) {
                _this.getListing(listingID).collectionConfig.setPageShow(_this.getListing(listingID).paginator.getPageShow());
                _this.getListing(listingID).collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.getCurrentPage());
            }
        };
        this.addColumn = function (listingID, column) {
            if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.baseEntityAlias != null) {
                column.propertyIdentifier = _this.getListing(listingID).collectionConfig.baseEntityAlias + "." + column.propertyIdentifier;
            }
            else if (_this.getListingBaseEntityName(listingID) != null) {
                column.propertyIdentifier = '_' + _this.getListingBaseEntityName(listingID).toLowerCase() + '.' + column.propertyIdentifier;
            }
            if (_this.getListingColumnIndexByPropertyIdentifier(listingID, column.propertyIdentifier) === -1) {
                if (column.aggregate) {
                    _this.getListing(listingID).aggregates.push(column.aggregate);
                }
                else {
                    _this.getListing(listingID).columns.push(column);
                }
            }
        };
        this.setupColumns = function (listingID, collectionConfig, collectionObject) {
            //assumes no alias formatting
            if (_this.getListing(listingID).columns.length == 0 &&
                collectionConfig != null) {
                if (collectionConfig.columns == null) {
                    collectionConfig.getEntity().then(function () {
                        for (var j = 0; j < collectionConfig.columns.length; j++) {
                            var column = collectionConfig.columns[j];
                            if (column.isVisible) {
                                _this.getListing(listingID).columns.push(column);
                            }
                        }
                    }, function () {
                        throw ("listing display couldn't initiate no columns");
                    });
                }
                else {
                    for (var j = 0; j < collectionConfig.columns.length; j++) {
                        var column = collectionConfig.columns[j];
                        if (column.isVisible) {
                            _this.getListing(listingID).columns.push(column);
                        }
                    }
                }
            }
            for (var i = 0; i < _this.getListing(listingID).columns.length; i++) {
                var column = _this.getListing(listingID).columns[i];
                _this.setupColumn(listingID, column, collectionConfig, collectionObject);
            }
        };
        this.setupColumn = function (listingID, column, collectionConfig, collectionObject) {
            if (_this.getListing(listingID).collectionConfig != null && !column.hasCellView) {
                _this.getListing(listingID).collectionConfig.addColumn(column.propertyIdentifier, undefined, column);
            }
            if (!collectionConfig && _this.getListing(listingID).collectionConfig != null) {
                collectionConfig = _this.getListing(listingID).collectionConfig != null;
            }
            var baseEntityName = _this.getListingBaseEntityName(listingID);
            if (!collectionObject) {
                collectionObject = baseEntityName;
            }
            //if we have entity information we can make some inferences about the column
            if (baseEntityName != null) {
                var lastEntity = _this.$hibachi.getLastEntityNameInPropertyIdentifier(baseEntityName, column.propertyIdentifier);
                if (angular.isUndefined(column.title)) {
                    column.title = _this.rbkeyService.getRBKey('entity.' + lastEntity.toLowerCase() + '.' + _this.utilityService.listLast(column.propertyIdentifier, '.'));
                }
                if (angular.isUndefined(column.isVisible)) {
                    column.isVisible = true;
                }
                var metadata = _this.$hibachi.getPropertyByEntityNameAndPropertyName(lastEntity, _this.utilityService.listLast(column.propertyIdentifier, '.'));
                if (metadata && angular.isDefined(metadata.persistent)) {
                    column.persistent = metadata.persistent;
                }
                if (metadata && angular.isDefined(metadata.ormtype)) {
                    column.ormtype = metadata.ormtype;
                }
                if (angular.isDefined(metadata) && angular.isDefined(metadata.hb_formattype)) {
                    column.type = metadata.hb_formatType;
                }
                else {
                    column.type = "none";
                }
                if (column.propertyIdentifier) {
                    _this.getListing(listingID).allpropertyidentifiers = _this.utilityService.listAppend(_this.getListing(listingID).allpropertyidentifiers, column.propertyIdentifier);
                }
                else if (column.processObjectProperty) {
                    column.searchable = false;
                    column.sort = false;
                    _this.getListing(listingID).allprocessobjectproperties = _this.utilityService.listAppend(_this.getListing(listingID).allprocessobjectproperties, column.processObjectProperty);
                }
                if (column.tdclass) {
                    var tdclassArray = column.tdclass.split(' ');
                    if (tdclassArray.indexOf("primary") >= 0 && _this.getListing(listingID).expandable) {
                        _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-expandsortproperty=' + column.propertyIdentifier, " ");
                        column.sort = false;
                    }
                }
            }
            if (angular.isDefined(column.tooltip)) {
                var parsedProperties = _this.utilityService.getPropertiesFromString(column.tooltip);
                if (parsedProperties && parsedProperties.length) {
                    collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
                }
            }
            else {
                column.tooltip = '';
            }
            if (angular.isDefined(column.queryString)) {
                var parsedProperties = _this.utilityService.getPropertiesFromString(column.queryString);
                if (parsedProperties && parsedProperties.length) {
                    collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
                }
            }
            //if the passed in collection has columns perform some formatting
            if (_this.getListing(listingID).hasCollectionPromise) {
                var lastEntity = _this.$hibachi.getLastEntityNameInPropertyIdentifier(collectionObject, _this.utilityService.listRest(column.propertyIdentifier, '.'));
                column.title = column.title || _this.rbkeyService.getRBKey('entity.' + lastEntity.toLowerCase() + '.' + _this.utilityService.listLast(column.propertyIdentifier, '.'));
                if (angular.isUndefined(column.isVisible)) {
                    column.isVisible = true;
                }
            }
            _this.columnOrderBy(listingID, column);
        };
        this.initCollectionConfigData = function (listingID, collectionConfig) {
            //kick off other essential setup 
            _this.setupSelect(listingID);
            _this.setupMultiselect(listingID);
            _this.setupExampleEntity(listingID);
            if (collectionConfig != null) {
                angular.forEach(_this.getListing(listingID).filterGroups, function (filterGroup) {
                    collectionConfig.addFilterGroup(filterGroup);
                });
                angular.forEach(_this.getListing(listingID).filters, function (filter) {
                    collectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
                });
                angular.forEach(_this.getListing(listingID).orderBys, function (orderBy) {
                    collectionConfig.addOrderBy(orderBy.orderBy);
                });
                angular.forEach(_this.getListing(listingID).aggregates, function (aggregate) {
                    collectionConfig.addDisplayAggregate(aggregate.propertyIdentifier, aggregate.aggregateFunction, aggregate.aggregateAlias);
                });
                //make sure we have necessary properties to make the actions 
                angular.forEach(_this.getListing(listingID).actions, function (action) {
                    if (angular.isDefined(action.queryString)) {
                        var parsedProperties = _this.utilityService.getPropertiesFromString(action.queryString);
                        if (parsedProperties && parsedProperties.length) {
                            collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
                        }
                    }
                });
                //also make sure we have necessary color filter properties
                angular.forEach(_this.getListing(listingID).colorFilters, function (colorFilter) {
                    if (angular.isDefined(colorFilter.propertyToCompare)) {
                        collectionConfig.addDisplayProperty(colorFilter.propertyToCompare, "", { isVisible: false });
                    }
                });
                if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {
                    collectionConfig.addDisplayProperty(_this.getListingExampleEntity(listingID).$$getIDName(), undefined, { isVisible: false });
                }
                collectionConfig.setPageShow(_this.getListing(listingID).paginator.pageShow);
                collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.currentPage);
                if (_this.getListing(listingID).multiselectable && (!_this.getListing(listingID).columns || !_this.getListing(listingID).columns.length)) {
                    //check if it has an active flag and if so then add the active flag
                    if (_this.getListing(listingID).exampleEntity.metaData.activeProperty && !_this.getListing(listingID).hasCollectionPromise) {
                        collectionConfig.addFilter('activeFlag', 1, '=', undefined, true);
                    }
                }
                _this.setupHierarchicalExpandable(listingID, collectionConfig);
            }
            _this.setupSortable(listingID);
            _this.updateColumnAndAdministrativeCount(listingID);
        };
        this.setupSortable = function (listingID) {
            _this.attachToListingPageRecordsUpdate(listingID, _this.getPageRecordsWithManualSortOrder, _this.utilityService.createID(32));
        };
        this.setupSelect = function (listingID) {
            if (_this.getListing(listingID).selectFieldName && _this.getListing(listingID).selectFieldName.length) {
                _this.getListing(listingID).selectable = true;
                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-select', ' ');
                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-selectfield="' + _this.getListing(listingID).selectFieldName + '"', ' ');
            }
        };
        this.setupMultiselect = function (listingID) {
            if (_this.getListing(listingID).multiselectFieldName && _this.getListing(listingID).multiselectFieldName.length) {
                _this.getListing(listingID).multiselectable = true;
                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-multiselect', ' ');
                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-multiselectpropertyidentifier="' + _this.getListing(listingID).multiselectPropertyIdentifier + '"', ' ');
                //attach observer so we know when a selection occurs
                _this.getListing(listingID).observerService.attach(_this.getListing(listingID).updateMultiselectValues, _this.getListing(listingID).defaultSelectEvent, _this.getListing(listingID).collectionObject);
                //attach observer so we know when a pagination change occurs
                _this.getListing(listingID).observerService.attach(_this.getListing(listingID).paginationPageChange, 'swPaginationAction');
            }
            if (_this.getListing(listingID).multiselectValues && _this.getListing(listingID).multiselectValues.length) {
                //select all owned ids
                var multiSelectValuesArray = _this.getListing(listingID).multiselectValues.split(',');
                angular.forEach(multiSelectValuesArray, function (value) {
                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, value);
                });
            }
            if (_this.getListing(listingID).multiselectIdPaths && _this.getListing(listingID).multiselectIdPaths.length) {
                angular.forEach(_this.getListing(listingID).multiselectIdPaths.split(','), function (value) {
                    var id = _this.getListing(listingID).utilityService.listLast(value, '/');
                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, id);
                });
            }
        };
        this.setupExampleEntity = function (listingID) {
            _this.getListing(listingID).exampleEntity = _this.$hibachi.getEntityExample(_this.getListingBaseEntityName(listingID));
            if (_this.getListing(listingID).exampleEntity != null) {
                //Look for Hierarchy in example entity
                if (!_this.getListing(listingID).parentPropertyName || (_this.getListing(listingID).parentPropertyName && !_this.getListing(listingID).parentPropertyName.length)) {
                    if (_this.getListing(listingID).exampleEntity.metaData.hb_parentPropertyName) {
                        _this.getListing(listingID).parentPropertyName = _this.getListing(listingID).exampleEntity.metaData.hb_parentPropertyName;
                    }
                }
                if (!_this.getListing(listingID).childPropertyName || (_this.getListing(listingID).childPropertyName && !_this.getListing(listingID).childPropertyName.length)) {
                    if (_this.getListing(listingID).exampleEntity.metaData.hb_childPropertyName) {
                        _this.getListing(listingID).childPropertyName = _this.getListing(listingID).exampleEntity.metaData.hb_childPropertyName;
                    }
                }
            }
        };
        this.setupHierarchicalExpandable = function (listingID, collectionConfig) {
            //Setup Hierachy Expandable
            if (_this.getListing(listingID).parentPropertyName && _this.getListing(listingID).parentPropertyName.length && _this.getListing(listingID).expandable != false) {
                if (angular.isUndefined(_this.getListing(listingID).expandable)) {
                    _this.getListing(listingID).expandable = true;
                }
                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-expandable', ' ');
                //add parent property root filter
                if (!_this.getListing(listingID).hasCollectionPromise) {
                    collectionConfig.addFilter(_this.getListing(listingID).parentPropertyName + '.' + _this.getListing(listingID).exampleEntity.$$getIDName(), 'NULL', 'IS', undefined, true, false, false);
                }
                //this.collectionConfig.addDisplayProperty(this.exampleEntity.$$getIDName()+'Path',undefined,{isVisible:false});
                //add children column
                if (_this.getListing(listingID).childPropertyName && _this.getListing(listingID).childPropertyName.length) {
                    if (_this.getListing(listingID).getChildCount || !_this.getListing(listingID).hasCollectionPromise) {
                        collectionConfig.addDisplayAggregate(_this.getListing(listingID).childPropertyName, 'COUNT', _this.getListing(listingID).childPropertyName + 'Count', { isVisible: false, isSearchable: false });
                    }
                }
                _this.getListing(listingID).allpropertyidentifiers = _this.utilityService.listAppend(_this.getListing(listingID).allpropertyidentifiers, _this.getListing(listingID).exampleEntity.$$getIDName() + 'Path');
                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-parentidproperty=' + _this.getListing(listingID).parentPropertyName + '.' + _this.getListing(listingID).exampleEntity.$$getIDName(), ' ');
            }
        };
        this.updateColumnAndAdministrativeCount = function (listingID) {
            //Setup a variable for the number of columns so that the none can have a proper colspan
            _this.getListing(listingID).columnCount = (_this.getListing(listingID).columns) ? _this.getListing(listingID).columns.length : 0;
            if (_this.getListing(listingID).selectable) {
                _this.getListing(listingID).columnCount++;
            }
            if (_this.getListing(listingID).multiselectable) {
                _this.getListing(listingID).columnCount++;
            }
            if (_this.getListing(listingID).sortable) {
                _this.getListing(listingID).columnCount++;
            }
            if (_this.getListing(listingID).administrativeCount) {
                _this.getListing(listingID).administrativeCount++;
            }
        };
        this.setupDefaultGetCollection = function (listingID) {
            if (_this.getListing(listingID).collectionConfigs.length == 0) {
                _this.getListing(listingID).collectionPromise = _this.getListing(listingID).collectionConfig.getEntity();
                return function () {
                    _this.getListing(listingID).collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.getCurrentPage());
                    _this.getListing(listingID).collectionConfig.setPageShow(_this.getListing(listingID).paginator.getPageShow());
                    if (_this.getListing(listingID).multiSlot) {
                        _this.getListing(listingID).collectionConfig.getEntity().then(function (data) {
                            _this.getListing(listingID).collectionData = data;
                            _this.setupDefaultCollectionInfo(listingID);
                            _this.getListing(listingID).collectionData.pageRecords = data.pageRecords || data.records;
                            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
                        }, function (reason) {
                            throw ("Listing Service encounter a problem when trying to get collection. Reason: " + reason);
                        });
                    }
                    else {
                        _this.getListing(listingID).collectionPromise.then(function (data) {
                            _this.getListing(listingID).collectionData = data;
                            _this.setupDefaultCollectionInfo(listingID);
                            _this.getListing(listingID).collectionData.pageRecords = data.pageRecords || data.records;
                            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
                        }, function (reason) {
                            throw ("Listing Service encounter a problem when trying to get collection. Reason: " + reason);
                        });
                    }
                };
            }
            else {
                return function () {
                    _this.getListing(listingID).collectionData = {};
                    _this.getListing(listingID).collectionData.pageRecords = [];
                    var allGetEntityPromises = [];
                    angular.forEach(_this.getListing(listingID).collectionConfigs, function (collectionConfig, key) {
                        allGetEntityPromises.push(collectionConfig.getEntity());
                    });
                    if (allGetEntityPromises.length) {
                        _this.$q.all(allGetEntityPromises).then(function (results) {
                            angular.forEach(results, function (result, key) {
                                _this.getListing(listingID).listingService.setupColumns(listingID, _this.getListing(listingID).collectionConfigs[key], _this.getListing(listingID).collectionObjects[key]);
                                _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords.concat(result.records);
                            });
                        }, function (reason) {
                            throw ("listing service had trouble getting collection data because: " + reason);
                        });
                    }
                };
            }
        };
        //End Setup Functions
        //Order By Functions
        //for multi order by
        this.columnOrderBy = function (listingID, column) {
            var isfound = false;
            if (_this.getListing(listingID).collectionConfigs != null) {
                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
                    if (column.propertyIdentifier == orderBy.propertyIdentifier) {
                        isfound = true;
                        _this.getListing(listingID).orderByStates[column.propertyIdentifier] = orderBy.direction;
                    }
                });
            }
            if (!isfound) {
                _this.getListing(listingID).orderByStates[column.propertyIdentifier] = '';
            }
            return _this.getListing(listingID).orderByStates[column.propertyIdentifier];
        };
        //for multi order by
        this.columnOrderByIndex = function (listingID, column) {
            var isfound = false;
            if (_this.getListing(listingID).collectionConfig != null) {
                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
                    if (column.propertyIdentifier == orderBy.propertyIdentifier) {
                        isfound = true;
                        _this.getListing(listingID).orderByIndices[column.propertyIdentifier] = index + 1;
                    }
                });
            }
            if (!isfound) {
                _this.getListing(listingID).orderByIndices[column.propertyIdentifier] = '';
            }
            return _this.getListing(listingID).orderByIndices[column.propertyIdentifier];
        };
        //for single column order by
        this.setSingleColumnOrderBy = function (listingID, propertyIdentifier, direction, notify) {
            if (notify === void 0) { notify = true; }
            if (direction.toUpperCase() === "ASC") {
                var oppositeDirection = "DESC";
            }
            else {
                var oppositeDirection = "ASC";
            }
            if (_this.getListing(listingID).collectionConfig != null) {
                var found = false;
                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
                    if (propertyIdentifier == orderBy.propertyIdentifier) {
                        orderBy.direction = direction;
                        found = true;
                    }
                    else {
                        orderBy.direction = oppositeDirection;
                    }
                });
                if (!found) {
                    _this.getListing(listingID).collectionConfig.addOrderBy(propertyIdentifier + "|" + direction);
                }
                if (notify) {
                    _this.observerService.notify(_this.getListingOrderByChangedEventString(listingID));
                }
                _this.getCollection(listingID);
            }
        };
        //for manual sort
        this.setManualSort = function (listingID, toggle) {
            _this.getListing(listingID).sortable = toggle;
            if (toggle) {
                _this.setSingleColumnOrderBy(listingID, "sortOrder", "ASC");
            }
        };
        //for single column order by
        this.toggleOrderBy = function (listingID, column) {
            if (_this.getListing(listingID).hasSingleCollectionConfig()) {
                _this.getListing(listingID).collectionConfig.toggleOrderBy(column.propertyIdentifier, true);
            }
            _this.getCollection(listingID);
        };
        //End Order By Functions
        this.getColorFilterConditionString = function (colorFilter, pageRecord) {
            if (angular.isDefined(colorFilter.comparisonProperty)) {
                return pageRecord[colorFilter.propertyToCompare.replace('.', '_')] + colorFilter.comparisonOperator + pageRecord[colorFilter.comparisonProperty.replace('.', '_')];
            }
            else {
                return pageRecord[colorFilter.propertyToCompare.replace('.', '_')] + colorFilter.comparisonOperator + colorFilter.comparisonValue;
            }
        };
        //Disable Row Functions
        this.getKeyOfMatchedDisableRule = function (listingID, pageRecord) {
            var disableRuleMatchedKey = -1;
            if (angular.isDefined(_this.getListing(listingID).disableRules)) {
                angular.forEach(_this.getListing(listingID).disableRules, function (rule, key) {
                    if (angular.isDefined(pageRecord[rule.filterPropertyIdentifier])) {
                        if (angular.isString(pageRecord[rule.filterPropertyIdentifier])) {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier].trim();
                        }
                        else {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier];
                        }
                        if (rule.filterComparisonValue == "null") {
                            rule.filterComparisonValue = "";
                        }
                        if (_this.filterService.filterMatch(pageRecordValue, rule.filterComparisonOperator, rule.filterComparisonValue)) {
                            disableRuleMatchedKey = key;
                        }
                        if (disableRuleMatchedKey != -1) {
                            return disableRuleMatchedKey;
                        }
                    }
                });
            }
            return disableRuleMatchedKey;
        };
        this.getPageRecordMatchesDisableRule = function (listingID, pageRecord) {
            return _this.getKeyOfMatchedDisableRule(listingID, pageRecord) != -1;
        };
        //End disable rule functions
        //Expandable Functions
        this.setExpandable = function (listingID, value) {
            if (angular.isDefined(_this.getListing(listingID))) {
                _this.getListing(listingID).expandable = value;
            }
        };
        this.getKeyOfMatchedExpandableRule = function (listingID, pageRecord) {
            var expandableRuleMatchedKey = -1;
            if (angular.isDefined(_this.getListing(listingID)) &&
                angular.isDefined(_this.getListing(listingID).expandableRules)) {
                angular.forEach(_this.getListing(listingID).expandableRules, function (rule, key) {
                    if (angular.isDefined(pageRecord[rule.filterPropertyIdentifier])) {
                        if (angular.isString(pageRecord[rule.filterPropertyIdentifier])) {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier].trim();
                        }
                        else {
                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier];
                        }
                        if (_this.filterService.filterMatch(pageRecordValue, rule.filterComparisonOperator, rule.filterComparisonValue)) {
                            expandableRuleMatchedKey = key;
                        }
                        if (expandableRuleMatchedKey != -1) {
                            return expandableRuleMatchedKey;
                        }
                    }
                });
            }
            return expandableRuleMatchedKey;
        };
        this.getExampleEntityForExpandableRecord = function (listingID, pageRecord) {
            var childCollectionConfig = _this.getListing(listingID).getPageRecordChildCollectionConfigForExpandableRule(pageRecord);
            if (angular.isDefined(childCollectionConfig)) {
                return _this.$hibachi.getEntityExample(_this.getListing(listingID).getPageRecordChildCollectionConfigForExpandableRule(pageRecord).baseEntityName);
            }
            return _this.getListing(listingID).exampleEntity;
        };
        this.getPageRecordMatchesExpandableRule = function (listingID, pageRecord) {
            return _this.getKeyOfMatchedExpandableRule(listingID, pageRecord) != -1;
        };
        this.hasPageRecordRefreshChildrenEvent = function (listingID, pageRecord) {
            return _this.getPageRecordRefreshChildrenEvent(listingID, pageRecord) != null;
        };
        this.getPageRecordRefreshChildrenEvent = function (listingID, pageRecord) {
            var keyOfExpandableRuleMet = _this.getKeyOfMatchedExpandableRule(listingID, pageRecord);
            if (keyOfExpandableRuleMet != -1) {
                return _this.getListing(listingID).expandableRules[keyOfExpandableRuleMet].refreshChildrenEvent;
            }
        };
        this.getPageRecordChildCollectionConfigForExpandableRule = function (listingID, pageRecord) {
            var keyOfExpandableRuleMet = _this.getKeyOfMatchedExpandableRule(listingID, pageRecord);
            if (_this.getListing(listingID) != null &&
                angular.isFunction(_this.getListing(listingID).exampleEntity.$$getIDName) &&
                angular.isDefined(pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]) &&
                angular.isDefined(_this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]])) {
                return _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]];
            }
            if (keyOfExpandableRuleMet != -1) {
                var childCollectionConfig = _this.getListing(listingID).expandableRules[keyOfExpandableRuleMet].childrenCollectionConfig.clone();
                angular.forEach(childCollectionConfig.filterGroups[0], function (filterGroup, key) {
                    angular.forEach(filterGroup, function (filter, key) {
                        if (angular.isString(filter.value)
                            && filter.value.length
                            && filter.value.charAt(0) == '$') {
                            filter.value = _this.utilityService.replaceStringWithProperties(filter.value, pageRecord);
                        }
                    });
                });
                _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]] = childCollectionConfig;
                return _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]];
            }
        };
    }
    return ListingService;
}());
exports.ListingService = ListingService;


/***/ }),
/* 893 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
//import pagination = require('../services/paginationservice');
//var PaginationService = pagination.PaginationService;
//'use strict';
var SWPaginationBarController = /** @class */ (function () {
    //@ngInject
    function SWPaginationBarController(paginationService) {
        this.paginationService = paginationService;
        if (angular.isUndefined(this.paginator)) {
            this.paginator = paginationService.createPagination();
        }
    }
    return SWPaginationBarController;
}());
exports.SWPaginationBarController = SWPaginationBarController;
var SWPaginationBar = /** @class */ (function () {
    //@ngInject
    function SWPaginationBar(hibachiPathBuilder, partialsPath) {
        this.restrict = 'E';
        this.scope = {};
        this.bindToController = {
            paginator: "=?"
        };
        this.controller = SWPaginationBarController;
        this.controllerAs = "swPaginationBar";
        this.link = function (scope, element, attrs) { };
        this.templateUrl = hibachiPathBuilder.buildPartialsPath(partialsPath) + 'paginationbar.html';
    }
    SWPaginationBar.Factory = function () {
        var directive = function (hibachiPathBuilder, partialsPath) { return new SWPaginationBar(hibachiPathBuilder, partialsPath); };
        directive.$inject = ['hibachiPathBuilder', 'partialsPath'];
        return directive;
    };
    return SWPaginationBar;
}());
exports.SWPaginationBar = SWPaginationBar;


/***/ }),
/* 894 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
//services
var paginationservice_1 = __webpack_require__(895);
var swpaginationbar_1 = __webpack_require__(893);
var core_module_1 = __webpack_require__(11);
var paginationmodule = angular.module('hibachi.pagination', [core_module_1.coremodule.name])
    // .config(['$provide','baseURL',($provide,baseURL)=>{
    // 	$provide.constant('paginationPartials', baseURL+basePartialsPath+'pagination/components/');
    // }])
    .run([function () {
    }])
    //services
    .service('paginationService', paginationservice_1.PaginationService)
    .directive('swPaginationBar', swpaginationbar_1.SWPaginationBar.Factory())
    //constants
    .constant('partialsPath', 'pagination/components/');
exports.paginationmodule = paginationmodule;


/***/ }),
/* 895 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../../typings/tsd.d.ts" />
/// <reference path="../../../typings/hibachiTypescript.d.ts" />
/*collection service is used to maintain the state of the ui*/
Object.defineProperty(exports, "__esModule", { value: true });
var Pagination = /** @class */ (function () {
    //@ngInject
    function Pagination(observerService, uuid) {
        var _this = this;
        this.observerService = observerService;
        this.uuid = uuid;
        this.pageShow = 10;
        this.currentPage = 1;
        this.pageStart = 0;
        this.pageEnd = 0;
        this.recordsCount = 0;
        this.totalPages = 0;
        this.pageShowOptions = [
            { display: 10, value: 10 },
            { display: 20, value: 20 },
            { display: 50, value: 50 },
            { display: 250, value: 250 },
            { display: "Auto", value: "Auto" }
        ];
        this.autoScrollPage = 1;
        this.autoScrollDisabled = false;
        this.getSelectedPageShowOption = function () {
            return _this.selectedPageShowOption;
        };
        this.pageShowOptionChanged = function (pageShowOption) {
            _this.setPageShow(pageShowOption.value);
            _this.currentPage = 1;
            _this.observerService.notify('swPaginationAction', { type: 'setPageShow', payload: _this.getPageShow() });
        };
        this.getTotalPages = function () {
            return _this.totalPages;
        };
        this.setTotalPages = function (totalPages) {
            _this.totalPages = totalPages;
        };
        this.getPageStart = function () {
            return _this.pageStart;
        };
        this.setPageStart = function (pageStart) {
            _this.pageStart = pageStart;
        };
        this.getPageEnd = function () {
            return _this.pageEnd;
        };
        this.setPageEnd = function (pageEnd) {
            _this.pageEnd = pageEnd;
        };
        this.getRecordsCount = function () {
            return _this.recordsCount;
        };
        this.setRecordsCount = function (recordsCount) {
            _this.recordsCount = recordsCount;
        };
        this.getPageShowOptions = function () {
            return _this.pageShowOptions;
        };
        this.setPageShowOptions = function (pageShowOptions) {
            _this.pageShowOptions = pageShowOptions;
        };
        this.getPageShow = function () {
            return _this.pageShow;
        };
        this.setPageShow = function (pageShow) {
            _this.pageShow = pageShow;
        };
        this.getCurrentPage = function () {
            return _this.currentPage;
        };
        this.setCurrentPage = function (currentPage) {
            _this.currentPage = currentPage;
            _this.observerService.notify('swPaginationAction', { action: 'pageChange', currentPage: currentPage });
            _this.observerService.notify('swPaginationAction', { type: 'setCurrentPage', payload: _this.getCurrentPage() });
        };
        this.previousPage = function () {
            if (_this.getCurrentPage() == 1)
                return;
            _this.setCurrentPage(_this.getCurrentPage() - 1);
        };
        this.nextPage = function () {
            if (_this.getCurrentPage() < _this.getTotalPages()) {
                _this.setCurrentPage(_this.getCurrentPage() + 1);
                _this.observerService.notify('swPaginationAction', { type: 'nextPage', payload: _this.getCurrentPage() });
            }
        };
        this.hasPrevious = function () {
            return (_this.getPageStart() <= 1);
        };
        this.hasNext = function () {
            return (_this.getPageEnd() === _this.getRecordsCount());
        };
        this.showPreviousJump = function () {
            return (angular.isDefined(_this.getCurrentPage()) && _this.getCurrentPage() > 3);
        };
        this.showNextJump = function () {
            return !!(_this.getCurrentPage() < _this.getTotalPages() - 3 && _this.getTotalPages() > 6);
        };
        this.previousJump = function () {
            _this.setCurrentPage(_this.currentPage - 3);
        };
        this.nextJump = function () {
            _this.setCurrentPage(_this.getCurrentPage() + 3);
        };
        this.showPageNumber = function (pageNumber) {
            if (_this.getCurrentPage() >= _this.getTotalPages() - 3) {
                if (pageNumber > _this.getTotalPages() - 6) {
                    return true;
                }
            }
            if (_this.getCurrentPage() <= 3) {
                if (pageNumber < 6) {
                    return true;
                }
            }
            else {
                var bottomRange = _this.getCurrentPage() - 2;
                var topRange = _this.getCurrentPage() + 2;
                if (pageNumber > bottomRange && pageNumber < topRange) {
                    return true;
                }
            }
            return false;
        };
        this.setPageRecordsInfo = function (collection) {
            _this.setRecordsCount(collection.recordsCount);
            if (_this.getRecordsCount() === 0) {
                _this.setPageStart(0);
            }
            else {
                _this.setPageStart(collection.pageRecordsStart);
            }
            _this.setPageEnd(collection.pageRecordsEnd);
            _this.setTotalPages(collection.totalPages);
            _this.totalPagesArray = [];
            if (angular.isUndefined(_this.getCurrentPage()) || _this.getCurrentPage() < 5) {
                var start = 1;
                var end = (_this.getTotalPages() <= 10) ? _this.getTotalPages() + 1 : 10;
            }
            else {
                var start = (!_this.showNextJump()) ? _this.getTotalPages() - 4 : _this.getCurrentPage() - 3;
                var end = (_this.showNextJump()) ? _this.getCurrentPage() + 5 : _this.getTotalPages() + 1;
            }
            for (var i = start; i < end; i++) {
                _this.totalPagesArray.push(i);
            }
        };
        this.uuid = uuid;
        this.selectedPageShowOption = this.pageShowOptions[0];
        this.observerService.attach(this.setPageRecordsInfo, 'swPaginationUpdate');
    }
    return Pagination;
}());
exports.Pagination = Pagination;
var PaginationService = /** @class */ (function () {
    //@ngInject
    function PaginationService(utilityService, observerService) {
        var _this = this;
        this.utilityService = utilityService;
        this.observerService = observerService;
        this.paginations = {};
        this.createPagination = function () {
            var uuid = _this.utilityService.createID(10);
            _this.paginations[uuid] = new Pagination(_this.observerService, uuid);
            return _this.paginations[uuid];
        };
        this.getPagination = function (uuid) {
            if (!uuid)
                return;
            return _this.paginations[uuid];
        };
    }
    return PaginationService;
}());
exports.PaginationService = PaginationService;


/***/ }),
/* 896 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * This validate directive will look at the current element, figure out the context (save, edit, delete) and
 * validate based on that context as defined in the validation properties object.
 */
// 'use strict';
// angular.module('slatwalladmin').directive('swValidate',
Object.defineProperty(exports, "__esModule", { value: true });
// [ '$log','$hibachi', function($log, $hibachi) {
var SWValidate = /** @class */ (function () {
    function SWValidate($log, $hibachi) {
        return {
            restrict: "A",
            require: '^ngModel',
            link: function (scope, elem, attr, ngModel) {
                //Define our contexts and validation property enums.
                var ContextsEnum = {
                    SAVE: { name: "save", value: 0 },
                    DELETE: { name: "delete", value: 1 },
                    EDIT: { name: "edit", value: 2 }
                };
                var ValidationPropertiesEnum = {
                    REGEX: { name: "regex", value: 0 },
                    MIN_VALUE: { name: "minValue", value: 1 },
                    MAX_VALUE: { name: "maxValue", value: 2 },
                    EQ: { name: "eq", value: 3 },
                    NEQ: { name: "neq", value: 4 },
                    UNIQUE: { name: "unique", value: 5 },
                    LTE: { name: "lte", value: 6 },
                    GTE: { name: "gte", value: 7 },
                    MIN_LENGTH: { name: "minLength", value: 8 },
                    MAX_LENGTH: { name: "maxLength", value: 9 },
                    DATA_TYPE: { name: "dataType", value: 10 },
                    REQUIRED: { name: "required", value: 11 }
                };
                scope.validationPropertiesEnum = ValidationPropertiesEnum;
                scope.contextsEnum = ContextsEnum;
                var myCurrentContext = scope.contextsEnum.SAVE; //We are only checking the save context right now.
                var contextNamesArray = getNamesFromObject(ContextsEnum); //Convert for higher order functions.
                var validationPropertiesArray = getNamesFromObject(ValidationPropertiesEnum); //Convert for higher order functions.
                var validationObject = scope.propertyDisplay.object.validations.properties; //Get the scope validation object.
                var errors = scope.propertyDisplay.errors;
                var errorMessages = [];
                var failFlag = 0;
                /**
                * Iterates over the validation object looking for the current elements validations, maps that to a validation function list
                * and calls those validate functions. When a validation fails, an error is set, the elements border turns red.
                */
                function validate(name, context, elementValue) {
                    var validationResults = {};
                    validationResults = { "name": "name", "context": "context", "required": "required", "error": "none", "errorkey": "none" };
                    for (var key in validationObject) {
                        // Look for the current attribute in the
                        // validation parameters.
                        if (key === name || key === name + "Flag") {
                            // Now that we have found the current
                            // validation parameters, iterate
                            // through them looking for
                            // the required parameters that match
                            // the current page context (save,
                            // delete, etc.)
                            for (var inner in validationObject[key]) {
                                var required = validationObject[key][inner].required || "false"; // Get
                                // the
                                // required
                                // value
                                var context = validationObject[key][inner].contexts || "none"; // Get
                                // the
                                // element
                                // context
                                //Setup the validation results object to pass back to caller.
                                validationResults = { "name": key, "context": context, "required": required, "error": "none", "errorkey": "none" };
                                var elementValidationArr = map(checkHasValidationType, validationPropertiesArray, validationObject[key][inner]);
                                //Iterate over the array and call the validate function if it has that property.
                                for (var i = 0; i < elementValidationArr.length; i++) {
                                    if (elementValidationArr[i] == true) {
                                        if (validationPropertiesArray[i] === "regex" && elementValue !== "") { //If element is zero, need to check required 
                                            //Get the regex string to match and send to validation function.
                                            var re = validationObject[key][inner].regex;
                                            var result = validate_RegExp(elementValue, re); //true if pattern match, fail otherwise.
                                            if (result != true) {
                                                errorMessages
                                                    .push("Invalid input");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["REGEX"].name;
                                                validationResults.fail = true;
                                            }
                                            else {
                                                errorMessages
                                                    .push("Valid input");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["REGEX"].name;
                                                validationResults.fail = false;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "minValue") {
                                            var validationMinValue = validationObject[key][inner].minValue;
                                            $log.debug(validationMinValue);
                                            var result = validate_MinValue(elementValue, validationMinValue);
                                            $log.debug("e>v" + result + " :" + elementValue, ":" + validationMinValue);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Minimum value is: "
                                                    + validationMinValue);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_VALUE"].name;
                                                validationResults.fail = true;
                                            }
                                            else {
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_VALUE"].name;
                                                validationResults.fail = false;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "maxValue") {
                                            var validationMaxValue = validationObject[key][inner].maxValue;
                                            var result = validate_MaxValue(elementValue, validationMaxValue);
                                            $log.debug("Max Value result is: " + result);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Maximum value is: "
                                                    + validationMaxValue);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MAX_VALUE"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "minLength") {
                                            var validationMinLength = validationObject[key][inner].minLength;
                                            var result = validate_MinLength(elementValue, validationMinLength);
                                            $log.debug("Min Length result is: " + result);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Minimum length must be: "
                                                    + validationMinLength);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_LENGTH"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "maxLength") {
                                            var validationMaxLength = validationObject[key][inner].maxLength;
                                            var result = validate_MaxLength(elementValue, validationMaxLength);
                                            $log.debug("Max Length result is: " + result);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Maximum length is: "
                                                    + validationMaxLength);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MAX_LENGTH"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "eq") {
                                            var validationEq = validationObject[key][inner].eq;
                                            var result = validate_Eq(elementValue, validationEq);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must equal "
                                                    + validationEq);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["EQ"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "neq") {
                                            var validationNeq = validationObject[key][inner].neq;
                                            var result = validate_Neq(elementValue, validationNeq);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must not equal: "
                                                    + validationNeq);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["NEQ"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "lte") {
                                            var validationLte = validationObject[key][inner].lte;
                                            var result = validate_Lte(elementValue, validationLte);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must be less than "
                                                    + validationLte);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["LTE"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "gte") {
                                            var validationGte = validationObject[key][inner].gte;
                                            var result = validate_Gte(elementValue, validationGte);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Must be greater than: "
                                                    + validationGte);
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["GTE"].name;
                                                validationResults.fail = true;
                                            }
                                            return validationResults;
                                        }
                                        if (validationPropertiesArray[i] === "required") {
                                            var validationRequire = validationObject[key][inner].require;
                                            var result = validate_Required(elementValue, validationRequire);
                                            if (result != true) {
                                                errorMessages
                                                    .push("Required");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = ValidationPropertiesEnum["REQUIRED"].name;
                                                validationResults.fail = true;
                                            }
                                            else {
                                                errorMessages
                                                    .push("Required");
                                                validationResults.error = errorMessages[errorMessages.length - 1];
                                                validationResults.errorkey = ValidationPropertiesEnum["REQUIRED"].name;
                                                validationResults.fail = false;
                                            }
                                            return validationResults;
                                        }
                                    }
                                }
                            }
                        }
                    } //<---end validate.			
                }
                /**
                * Function to map if we need a validation on this element.
                */
                function checkHasValidationType(validationProp, validationType) {
                    if (validationProp[validationType] != undefined) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                /**
                * Iterates over the properties object finding which types of validation are needed.
                */
                function map(func, array, obj) {
                    var result = [];
                    forEach(array, function (element) {
                        result.push(func(obj, element));
                    });
                    return result;
                }
                /**
                * Array iteration helper.
                */
                function forEach(array, action) {
                    for (var i = 0; i < array.length; i++)
                        action(array[i]);
                }
                /**
                * Helper function to read all the names in our enums into an array that the higher order functions can use.
                */
                function getNamesFromObject(obj) {
                    var result = [];
                    for (var i in obj) {
                        var name = obj[i].name || "stub";
                        result.push(name);
                    }
                    return result;
                }
                /**
                * Tests the value for a RegExp match given by the pattern string.
                * Validates true if pattern match, false otherwise.
                */
                function validate_RegExp(value, pattern) {
                    var regex = new RegExp(pattern);
                    if (regex.test(value)) {
                        return true;
                    }
                    return false;
                }
                /**
                * Validates true if userValue >= minValue (inclusive)
                */
                function validate_MinValue(userValue, minValue) {
                    return (userValue >= minValue);
                }
                /**
                * Validates true if userValue <= maxValue (inclusive)
                */
                function validate_MaxValue(userValue, maxValue) {
                    return (userValue <= maxValue) ? true : false;
                }
                /**
                * Validates true if length of the userValue >= minLength (inclusive)
                */
                function validate_MinLength(userValue, minLength) {
                    return (userValue.length >= minLength) ? true : false;
                }
                /**
                * Validates true if length of the userValue <= maxLength (inclusive)
                */
                function validate_MaxLength(userValue, maxLength) {
                    return (userValue.length <= maxLength) ? true : false;
                }
                /**
                * Validates true if the userValue == eqValue
                */
                function validate_Eq(userValue, eqValue) {
                    return (userValue == eqValue) ? true : false;
                }
                /**
                * Validates true if the userValue != neqValue
                */
                function validate_Neq(userValue, neqValue) {
                    return (userValue != neqValue) ? true : false;
                }
                /**
                * Validates true if the userValue < decisionValue (exclusive)
                */
                function validate_Lte(userValue, decisionValue) {
                    return (userValue < decisionValue) ? true : false;
                }
                /**
                * Validates true if the userValue > decisionValue (exclusive)
                */
                function validate_Gte(userValue, decisionValue) {
                    return (userValue > decisionValue) ? true : false;
                }
                /**
                * Validates true if the userValue === property
                */
                function validate_EqProperty(userValue, property) {
                    return (userValue === property) ? true : false;
                }
                /**
                * Validates true if the given value is !NaN (Negate, Not a Number).
                */
                function validate_IsNumeric(value) {
                    return !isNaN(value) ? true : false;
                }
                /**
                * Validates true if the given userValue is empty and the field is required.
                */
                function validate_Required(property, userValue) {
                    return (userValue == "" && property == true) ? true : false;
                }
                /**
                * Handles the 'eager' validation on every key press.
                */
                ngModel.$parsers.unshift(function (value) {
                    var name = elem.context.name; //Get the element name for the validate function.
                    var currentValue = elem.val(); //Get the current element value to check validations against.
                    var val = validate(name, myCurrentContext, currentValue) || {};
                    //Check if field is required.				
                    $log.debug(scope);
                    $log.debug(val);
                    ngModel.$setValidity(val.errorkey, !val.fail);
                    return true;
                }); //<---end $parsers
                /**
                * This handles 'lazy' validation on blur.
                */
                elem.bind('blur', function (e) {
                });
            }
        };
    }
    SWValidate.Factory = function () {
        var directive = function ($log, $hibachi) { return new SWValidate($log, $hibachi); };
        directive.$inject = ['$log', '$hibachi'];
        return directive;
    };
    return SWValidate;
}());
exports.SWValidate = SWValidate;


/***/ }),
/* 897 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationDataType = /** @class */ (function () {
    //@ngInject
    function SWValidationDataType(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                var isValidFunction = function (modelValue) {
                    return validationService.validateDataType(modelValue, attributes.swvalidationdatatype);
                };
                ngModel.$validators.swvalidationdatatype = isValidFunction;
                ngModel.$validators['swvalidation' + attributes.swvalidationdatatype] = isValidFunction;
            }
        };
    }
    SWValidationDataType.Factory = function () {
        var directive = function (validationService) { return new SWValidationDataType(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationDataType;
}());
exports.SWValidationDataType = SWValidationDataType;


/***/ }),
/* 898 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationEq = /** @class */ (function () {
    //@ngInject
    function SWValidationEq(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationeq =
                    function (modelValue, viewValue) {
                        return validationService.validateEq(modelValue, attributes.swvalidationeq);
                    }; //<--end function
            } //<--end link
        };
    }
    SWValidationEq.Factory = function () {
        var directive = function (validationService) { return new SWValidationEq(validationService); };
        directive.$inject = [
            'validationService'
        ];
        return directive;
    };
    return SWValidationEq;
}());
exports.SWValidationEq = SWValidationEq;


/***/ }),
/* 899 */,
/* 900 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationGte = /** @class */ (function () {
    function SWValidationGte(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationGte =
                    function (modelValue, viewValue) {
                        return validationService.validateGte(modelValue, attributes.swvalidationGte);
                    }; //<--end function
            } //<--end link
        };
    }
    SWValidationGte.Factory = function () {
        var directive = function (validationService) { return new SWValidationGte(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationGte;
}());
exports.SWValidationGte = SWValidationGte;


/***/ }),
/* 901 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationLte = /** @class */ (function () {
    function SWValidationLte(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationlte =
                    function (modelValue, viewValue) {
                        return validationService.validateLte(modelValue, attributes.swvalidationlte);
                    };
            }
        };
    }
    SWValidationLte.Factory = function () {
        var directive = function (validationService) { return new SWValidationLte(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationLte;
}());
exports.SWValidationLte = SWValidationLte;


/***/ }),
/* 902 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMaxLength = /** @class */ (function () {
    function SWValidationMaxLength(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationmaxlength =
                    function (modelValue, viewValue) {
                        var length = 0;
                        if (viewValue && viewValue.length) {
                            length = viewValue.length;
                        }
                        return validationService.validateMaxLength(length || 0, attributes.swvalidationmaxlength);
                    };
            }
        };
    }
    SWValidationMaxLength.Factory = function () {
        var directive = function (validationService) { return new SWValidationMaxLength(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationMaxLength;
}());
exports.SWValidationMaxLength = SWValidationMaxLength;


/***/ }),
/* 903 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMaxValue = /** @class */ (function () {
    function SWValidationMaxValue(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationmaxvalue =
                    function (modelValue, viewValue) {
                        if (viewValue == null) {
                            return true;
                        }
                        validationService.validateMaxValue(viewValue, attributes.swvalidationmaxvalue);
                    };
            }
        };
    }
    SWValidationMaxValue.Factory = function () {
        var directive = function (validationService) { return new SWValidationMaxValue(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationMaxValue;
}());
exports.SWValidationMaxValue = SWValidationMaxValue;


/***/ }),
/* 904 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMinLength = /** @class */ (function () {
    function SWValidationMinLength($log, validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationminlength =
                    function (modelValue, viewValue) {
                        var length = 0;
                        if (viewValue && viewValue.length) {
                            length = viewValue.length;
                        }
                        return validationService.validateMinLength(length || 0, attributes.swvalidationminlength);
                    };
            }
        };
    }
    SWValidationMinLength.Factory = function () {
        var directive = function ($log, validationService) { return new SWValidationMinLength($log, validationService); };
        directive.$inject = ['$log', 'validationService'];
        return directive;
    };
    return SWValidationMinLength;
}());
exports.SWValidationMinLength = SWValidationMinLength;


/***/ }),
/* 905 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationMinValue = /** @class */ (function () {
    function SWValidationMinValue(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationminvalue =
                    function (modelValue, viewValue) {
                        if (viewValue == null) {
                            return true;
                        }
                        return validationService.validateMinValue(viewValue, attributes.swvalidationminvalue);
                    };
            }
        };
    }
    SWValidationMinValue.Factory = function () {
        var directive = function (validationService) { return new SWValidationMinValue(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationMinValue;
}());
exports.SWValidationMinValue = SWValidationMinValue;


/***/ }),
/* 906 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationNeq = /** @class */ (function () {
    function SWValidationNeq(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationneq =
                    function (modelValue) {
                        return validationService.validateNeq(modelValue, attributes.swvalidationneq);
                    };
            }
        };
    }
    SWValidationNeq.Factory = function () {
        var directive = function (validationService) { return new SWValidationNeq(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationNeq;
}());
exports.SWValidationNeq = SWValidationNeq;


/***/ }),
/* 907 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationNumeric = /** @class */ (function () {
    function SWValidationNumeric(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationnumeric =
                    function (modelValue, viewValue) {
                        return validationService.validateNumeric(viewValue);
                    };
            }
        };
    }
    SWValidationNumeric.Factory = function () {
        var directive = function (validationService) { return new SWValidationNumeric(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationNumeric;
}());
exports.SWValidationNumeric = SWValidationNumeric;


/***/ }),
/* 908 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationRegex = /** @class */ (function () {
    function SWValidationRegex(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationregex =
                    function (modelValue) {
                        //Returns true if this user value (model value) does match the pattern
                        return validationService.validateRegex(modelValue, attributes.swvalidationregex);
                    };
            }
        };
    }
    SWValidationRegex.Factory = function () {
        var directive = function (validationService) { return new SWValidationRegex(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationRegex;
}());
exports.SWValidationRegex = SWValidationRegex;


/***/ }),
/* 909 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationRequired = /** @class */ (function () {
    //@ngInject
    function SWValidationRequired(validationService) {
        return {
            restrict: "A",
            require: "^ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$validators.swvalidationrequired =
                    function (modelValue, viewValue) {
                        var value = modelValue || viewValue;
                        if (attributes.swvalidationrequired === "true") {
                            return validationService.validateRequired(value);
                        }
                        else {
                            return true;
                        }
                    };
            }
        };
    }
    SWValidationRequired.Factory = function () {
        var directive = function (validationService) { return new SWValidationRequired(validationService); };
        directive.$inject = ['validationService'];
        return directive;
    };
    return SWValidationRequired;
}());
exports.SWValidationRequired = SWValidationRequired;


/***/ }),
/* 910 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationUnique = /** @class */ (function () {
    //@ngInject
    function SWValidationUnique($http, $q, $hibachi, $log, validationService) {
        return {
            restrict: "A",
            require: ["ngModel", "^?swFormField"],
            link: function (scope, element, attributes, controllers) {
                var ngModel = controllers[0];
                ngModel.$asyncValidators.swvalidationunique = function (modelValue, viewValue) {
                    var currentValue = modelValue || viewValue;
                    var property = controllers[1].property;
                    return validationService.validateUnique(currentValue, controllers[1].object, property);
                };
            }
        };
    }
    SWValidationUnique.Factory = function () {
        var directive = function ($http, $q, $hibachi, $log, validationService) { return new SWValidationUnique($http, $q, $hibachi, $log, validationService); };
        directive.$inject = ['$http', '$q', '$hibachi', '$log', 'validationService'];
        return directive;
    };
    return SWValidationUnique;
}());
exports.SWValidationUnique = SWValidationUnique;


/***/ }),
/* 911 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SWValidationUniqueOrNull = /** @class */ (function () {
    //@ngInject
    function SWValidationUniqueOrNull($http, $q, $hibachi, $log, validationService) {
        return {
            restrict: "A",
            require: "ngModel",
            link: function (scope, element, attributes, ngModel) {
                ngModel.$asyncValidators.swvalidationuniqueornull = function (modelValue, viewValue) {
                    var currentValue = modelValue || viewValue;
                    if (scope && scope.propertyDisplay && scope.propertyDisplay.property) {
                        var property = scope.propertyDisplay.property;
                        return validationService.validateUniqueOrNull(currentValue, scope.propertyDisplay.object, property);
                    }
                    else {
                        return $q.resolve(); //nothing to validate yet.
                    }
                };
            }
        };
    }
    SWValidationUniqueOrNull.Factory = function () {
        var directive = function ($http, $q, $hibachi, $log, validationService) { return new SWValidationUniqueOrNull($http, $q, $hibachi, $log, validationService); };
        directive.$inject = ['$http', '$q', '$hibachi', '$log', 'validationService'];
        return directive;
    };
    return SWValidationUniqueOrNull;
}());
exports.SWValidationUniqueOrNull = SWValidationUniqueOrNull;


/***/ }),
/* 912 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/*services return promises which can be handled uniquely based on success or failure by the controller*/
Object.defineProperty(exports, "__esModule", { value: true });
var ValidationService = /** @class */ (function () {
    //@ngInject
    function ValidationService($hibachi, $q) {
        var _this = this;
        this.$hibachi = $hibachi;
        this.$q = $q;
        this.MY_EMAIL_REGEXP = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        this.validateUnique = function (value, object, property) {
            var deferred = _this.$q.defer();
            //First time the asyncValidators function is loaded the
            //key won't be set  so ensure that we have
            //key and propertyName before checking with the server
            if (object && property) {
                _this.$hibachi.checkUniqueValue(object, property, value)
                    .then(function (unique) {
                    if (unique) {
                        deferred.resolve(); //It's unique
                    }
                    else {
                        deferred.reject(); //Add unique to $errors
                    }
                });
            }
            else {
                deferred.resolve(); //Ensure promise is resolved if we hit this
            }
            return deferred.promise;
        };
        this.validateUniqueOrNull = function (value, object, property) {
            var deferred = _this.$q.defer();
            //First time the asyncValidators function is loaded the
            //key won't be set  so ensure that we have
            //key and propertyName before checking with the server
            if (object && property) {
                _this.$hibachi.checkUniqueOrNullValue(object, property, value)
                    .then(function (unique) {
                    if (unique) {
                        deferred.resolve(); //It's unique
                    }
                    else {
                        deferred.reject(); //Add unique to $errors
                    }
                });
            }
            else {
                deferred.resolve(); //Ensure promise is resolved if we hit this
            }
            return deferred.promise;
        };
        this.validateEmail = function (value) {
            return _this.validateDataType(value, 'email');
        };
        this.validateDataType = function (value, type) {
            if (value == null) {
                return true;
            } //let required validate this
            if (angular.isString(value) && type === "string") {
                return true;
            }
            if (angular.isNumber(parseInt(value)) && type === "numeric") {
                return true;
            }
            if (angular.isArray(value) && type === "array") {
                return true;
            }
            if (angular.isDate(value) && type === "date") {
                return true;
            }
            if (angular.isObject(value) && type === "object") {
                return true;
            }
            if (type === 'email') {
                return _this.MY_EMAIL_REGEXP.test(value);
            }
            if (angular.isUndefined(value && type === "undefined")) {
                return true;
            }
            return false;
        };
        this.validateEq = function (value, expectedValue) {
            return (value === expectedValue);
        };
        this.validateNeq = function (value, expectedValue) {
            return (value !== expectedValue);
        };
        this.validateGte = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            if (angular.isString(value)) {
                value = parseInt(value);
            }
            if (angular.isString(comparisonValue)) {
                comparisonValue = parseInt(comparisonValue);
            }
            return (value >= comparisonValue);
        };
        this.validateLte = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            if (angular.isString(value)) {
                value = parseInt(value);
            }
            if (angular.isString(comparisonValue)) {
                comparisonValue = parseInt(comparisonValue);
            }
            return (value <= comparisonValue);
        };
        this.validateMaxLength = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateLte(value, comparisonValue);
        };
        this.validateMaxValue = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateLte(value, comparisonValue);
        };
        this.validateMinLength = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateGte(value, comparisonValue);
        };
        this.validateMinValue = function (value, comparisonValue) {
            if (comparisonValue === void 0) { comparisonValue = 0; }
            return _this.validateGte(value, comparisonValue);
        };
        this.validateNumeric = function (value) {
            return !isNaN(value);
        };
        this.validateRegex = function (value, pattern) {
            var regex = new RegExp(pattern);
            return regex.test(value);
        };
        this.validateRequired = function (value) {
            if (value) {
                return true;
            }
            else {
                return false;
            }
        };
        this.$hibachi = $hibachi;
        this.$q = $q;
    }
    return ValidationService;
}());
exports.ValidationService = ValidationService;


/***/ }),
/* 913 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../typings/tsd.d.ts" />
/// <reference path="../../typings/hibachiTypescript.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
//components
var swvalidate_1 = __webpack_require__(896);
var swvalidationminlength_1 = __webpack_require__(904);
var swvalidationdatatype_1 = __webpack_require__(897);
var swvalidationeq_1 = __webpack_require__(898);
var swvalidationgte_1 = __webpack_require__(900);
var swvalidationlte_1 = __webpack_require__(901);
var swvalidationmaxlength_1 = __webpack_require__(902);
var swvalidationmaxvalue_1 = __webpack_require__(903);
var swvalidationminvalue_1 = __webpack_require__(905);
var swvalidationneq_1 = __webpack_require__(906);
var swvalidationnumeric_1 = __webpack_require__(907);
var swvalidationregex_1 = __webpack_require__(908);
var swvalidationrequired_1 = __webpack_require__(909);
var swvalidationunique_1 = __webpack_require__(910);
var swvalidationuniqueornull_1 = __webpack_require__(911);
//services
var validationservice_1 = __webpack_require__(912);
var core_module_1 = __webpack_require__(11);
var validationmodule = angular.module('hibachi.validation', [core_module_1.coremodule.name])
    .run([function () {
    }])
    //directives
    .directive('swValidate', swvalidate_1.SWValidate.Factory())
    .directive('swvalidationminlength', swvalidationminlength_1.SWValidationMinLength.Factory())
    .directive('swvalidationdatatype', swvalidationdatatype_1.SWValidationDataType.Factory())
    .directive('swvalidationeq', swvalidationeq_1.SWValidationEq.Factory())
    .directive("swvalidationgte", swvalidationgte_1.SWValidationGte.Factory())
    .directive("swvalidationlte", swvalidationlte_1.SWValidationLte.Factory())
    .directive('swvalidationmaxlength', swvalidationmaxlength_1.SWValidationMaxLength.Factory())
    .directive("swvalidationmaxvalue", swvalidationmaxvalue_1.SWValidationMaxValue.Factory())
    .directive("swvalidationminvalue", swvalidationminvalue_1.SWValidationMinValue.Factory())
    .directive("swvalidationneq", swvalidationneq_1.SWValidationNeq.Factory())
    .directive("swvalidationnumeric", swvalidationnumeric_1.SWValidationNumeric.Factory())
    .directive("swvalidationregex", swvalidationregex_1.SWValidationRegex.Factory())
    .directive("swvalidationrequired", swvalidationrequired_1.SWValidationRequired.Factory())
    .directive("swvalidationunique", swvalidationunique_1.SWValidationUnique.Factory())
    .directive("swvalidationuniqueornull", swvalidationuniqueornull_1.SWValidationUniqueOrNull.Factory())
    //services
    .service("validationService", validationservice_1.ValidationService);
exports.validationmodule = validationmodule;


/***/ }),
/* 914 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWAdminCreateSuperUser = /** @class */ (function () {
    function SWAdminCreateSuperUser($hibachi, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "admincreatesuperuser.html",
            link: function (scope, element, attrs) {
                scope.Account_SetupInitialAdmin = $hibachi.newAccount_SetupInitialAdmin();
            }
        };
    }
    SWAdminCreateSuperUser.Factory = function () {
        var directive = function ($hibachi, workflowPartialsPath, hibachiPathBuilder) { return new SWAdminCreateSuperUser($hibachi, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$hibachi',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWAdminCreateSuperUser;
}());
exports.SWAdminCreateSuperUser = SWAdminCreateSuperUser;


/***/ }),
/* 915 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWSchedulePreviewController = /** @class */ (function () {
    function SWSchedulePreviewController() {
    }
    return SWSchedulePreviewController;
}());
var SWSchedulePreview = /** @class */ (function () {
    function SWSchedulePreview(workflowPartialsPath, hibachiPathBuilder) {
        this.workflowPartialsPath = workflowPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'AE';
        this.scope = {};
        this.bindToController = {
            schedule: "="
        };
        this.controller = SWSchedulePreviewController;
        this.controllerAs = "swSchedulePreview";
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath) + "schedulepreview.html";
    }
    SWSchedulePreview.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWSchedulePreview(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWSchedulePreview.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
    return SWSchedulePreview;
}());
exports.SWSchedulePreview = SWSchedulePreview;


/***/ }),
/* 916 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowBasic = /** @class */ (function () {
    function SWWorkflowBasic(workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowbasic.html",
            link: function (scope, element, attrs) {
            }
        };
    }
    SWWorkflowBasic.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowBasic(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowBasic;
}());
exports.SWWorkflowBasic = SWWorkflowBasic;


/***/ }),
/* 917 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowCondition = /** @class */ (function () {
    function SWWorkflowCondition($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                workflowCondition: "=",
                workflowConditionIndex: "=",
                workflow: "=",
                filterPropertiesList: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowcondition.html",
            link: function (scope, element, attrs) {
                $log.debug('workflowCondition init');
                $log.debug(scope);
                scope.selectBreadCrumb = function (breadCrumbIndex) {
                    //splice out array items above index
                    var removeCount = scope.filterItem.breadCrumbs.length - 1 - breadCrumbIndex;
                    scope.filterItem.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
                    scope.selectedFilterPropertyChanged(null);
                };
                scope.selectedFilterPropertyChanged = function (selectedFilterProperty) {
                    $log.debug('selectedFilterProperty');
                    $log.debug(selectedFilterProperty);
                    scope.selectedFilterProperty = selectedFilterProperty;
                };
                if (angular.isUndefined(scope.workflowCondition.breadCrumbs)) {
                    scope.workflowCondition.breadCrumbs = [];
                    if (scope.workflowCondition.propertyIdentifier === "") {
                        scope.workflowCondition.breadCrumbs = [
                            {
                                entityAlias: scope.workflow.data.workflowObject,
                                cfc: scope.workflow.data.workflowObject,
                                propertyIdentifier: scope.workflow.data.workflowObject
                            }
                        ];
                    }
                    else {
                        var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
                        entityAliasArrayFromString.pop();
                        for (var i in entityAliasArrayFromString) {
                            var breadCrumb = {
                                entityAlias: entityAliasArrayFromString[i],
                                cfc: entityAliasArrayFromString[i],
                                propertyIdentifier: entityAliasArrayFromString[i]
                            };
                            scope.workflowCondition.breadCrumbs.push(breadCrumb);
                        }
                    }
                }
                else {
                    angular.forEach(scope.workflowCondition.breadCrumbs, function (breadCrumb, key) {
                        if (angular.isUndefined(scope.filterPropertiesList[breadCrumb.propertyIdentifier])) {
                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(breadCrumb.cfc, true);
                            filterPropertiesPromise.then(function (value) {
                                metadataService.setPropertiesList(value, breadCrumb.propertyIdentifier);
                                scope.filterPropertiesList[breadCrumb.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(breadCrumb.propertyIdentifier);
                                metadataService.formatPropertiesList(scope.filterPropertiesList[breadCrumb.propertyIdentifier], breadCrumb.propertyIdentifier);
                                var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
                                entityAliasArrayFromString.pop();
                                entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                                if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                    for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                        var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                        if (filterProperty.propertyIdentifier === scope.workflowCondition.propertyIdentifier) {
                                            //selectItem from drop down
                                            scope.selectedFilterProperty = filterProperty;
                                            //decorate with value and comparison Operator so we can use it in the Condition section
                                            scope.selectedFilterProperty.value = scope.workflowCondition.value;
                                            scope.selectedFilterProperty.comparisonOperator = scope.workflowCondition.comparisonOperator;
                                        }
                                    }
                                }
                            });
                        }
                        else {
                            var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
                            entityAliasArrayFromString.pop();
                            entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
                            if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
                                for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
                                    var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
                                    if (filterProperty.propertyIdentifier === scope.workflowCondition.propertyIdentifier) {
                                        //selectItem from drop down
                                        scope.selectedFilterProperty = filterProperty;
                                        //decorate with value and comparison Operator so we can use it in the Condition section
                                        scope.selectedFilterProperty.value = scope.workflowCondition.value;
                                        scope.selectedFilterProperty.comparisonOperator = scope.workflowCondition.comparisonOperator;
                                    }
                                }
                            }
                        }
                    });
                }
            }
        };
    }
    SWWorkflowCondition.Factory = function () {
        var directive = function ($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowCondition($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'metadataService',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowCondition;
}());
exports.SWWorkflowCondition = SWWorkflowCondition;


/***/ }),
/* 918 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowConditionGroupItem = /** @class */ (function () {
    function SWWorkflowConditionGroupItem(workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowconditiongroupitem.html",
            link: function (scope, element, attrs) {
            }
        };
    }
    SWWorkflowConditionGroupItem.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowConditionGroupItem(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowConditionGroupItem;
}());
exports.SWWorkflowConditionGroupItem = SWWorkflowConditionGroupItem;


/***/ }),
/* 919 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowConditionGroups = /** @class */ (function () {
    function SWWorkflowConditionGroups($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                workflowConditionGroupItem: "=",
                workflowConditionGroup: "=",
                workflow: "=",
                filterPropertiesList: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowconditiongroups.html",
            link: function (scope, element, attrs) {
                $log.debug('workflowconditiongroups init');
                scope.addWorkflowCondition = function () {
                    $log.debug('addWorkflowCondition');
                    var workflowCondition = workflowConditionService.newWorkflowCondition();
                    workflowConditionService.addWorkflowCondition(scope.workflowConditionGroupItem, workflowCondition);
                };
                scope.addWorkflowGroupItem = function () {
                    $log.debug('addWorkflowGrouptItem');
                    var workflowConditionGroupItem = workflowConditionService.newWorkflowConditionGroupItem();
                    workflowConditionService.addWorkflowConditionGroupItem(scope.workflowConditionItem, workflowConditionGroupItem);
                };
            }
        };
    }
    SWWorkflowConditionGroups.Factory = function () {
        var directive = function ($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowConditionGroups($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            'workflowConditionService',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowConditionGroups;
}());
exports.SWWorkflowConditionGroups = SWWorkflowConditionGroups;


/***/ }),
/* 920 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTask = /** @class */ (function () {
    function SWWorkflowTask(workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'E',
            scope: {
                workflowTask: "=",
                workflowTasks: "=",
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtask.html",
            link: function (scope, element, attrs) {
                scope.removeWorkflowTask = function (workflowTask) {
                    var deletePromise = workflowTask.$$delete();
                    deletePromise.then(function () {
                        if (workflowTask === scope.workflowTasks.selectedTask) {
                            delete scope.workflowTasks.selectedTask;
                        }
                        scope.workflowTasks.splice(workflowTask.$$index, 1);
                        for (var i in scope.workflowTasks) {
                            scope.workflowTasks[i].$$index = i;
                        }
                    });
                };
            }
        };
    }
    SWWorkflowTask.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTask(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowTask;
}());
exports.SWWorkflowTask = SWWorkflowTask;


/***/ }),
/* 921 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var SWWorkflowTaskActionsController = /** @class */ (function () {
    //@ngInject
    function SWWorkflowTaskActionsController($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder, collectionConfigService, observerService) {
        var _this = this;
        this.$log = $log;
        this.$hibachi = $hibachi;
        this.metadataService = metadataService;
        this.workflowPartialsPath = workflowPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.collectionConfigService = collectionConfigService;
        this.observerService = observerService;
        this.$log.debug('Workflow Task Actions Init');
        this.$log.debug(this.workflowTask);
        this.openActions = false;
        this.observerService.attach(function (item) {
            if (angular.isDefined(_this.emailTemplateCollectionConfig)) {
                _this.emailTemplateCollectionConfig.clearFilters();
                _this.emailTemplateCollectionConfig.addFilter("emailTemplateObject", item.value);
            }
            if (angular.isDefined(_this.printTemplateCollectionConfig)) {
                _this.printTemplateCollectionConfig.clearFilters();
                _this.printTemplateCollectionConfig.addFilter("printTemplateObject", item.value);
            }
        }, 'WorkflowWorkflowObjectOnChange');
        /**
         * Returns the correct object based on the selected object type.
         */
        var getObjectByActionType = function (workflowTaskAction) {
            if (workflowTaskAction.data.actionType === 'email') {
                workflowTaskAction.$$getEmailTemplate();
            }
            else if (workflowTaskAction.data.actionType === 'print') {
                workflowTaskAction.$$getPrintTemplate();
            }
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Returns workflow task action, and saves them to the scope variable workflowtaskactions
         * --------------------------------------------------------------------------------------------------------
         */
        this.getWorkflowTaskActions = function () {
            /***
             Note:
             This conditional is checking whether or not we need to be retrieving to
             items all over again. If we already have them, we won't make another
             trip to the database.

             ***/
            if (angular.isUndefined(_this.workflowTask.data.workflowTaskActions)) {
                var workflowTaskPromise = _this.workflowTask.$$getWorkflowTaskActions();
                workflowTaskPromise.then(function () {
                    _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
                    angular.forEach(_this.workflowTaskActions, function (workflowTaskAction) {
                        getObjectByActionType(workflowTaskAction);
                    });
                    _this.$log.debug(_this.workflowTaskActions);
                });
            }
            else {
                _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
            }
            if (angular.isUndefined(_this.workflowTask.data.workflowTaskActions)) {
                _this.workflowTask.data.workflowTaskActions = [];
                _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
            }
        };
        this.getWorkflowTaskActions(); //Call get
        /**
         * --------------------------------------------------------------------------------------------------------
         * Saves the workflow task actions by calling the objects $$save method.
         * @param taskAction
         * --------------------------------------------------------------------------------------------------------
         */
        this.saveWorkflowTaskAction = function (taskAction, context) {
            _this.$log.debug("Context: " + context);
            _this.$log.debug("saving task action and parent task");
            _this.$log.debug(taskAction);
            var savePromise = _this.workflowTaskActions.selectedTaskAction.$$save();
            savePromise.then(function () {
                var taSavePromise = taskAction.$$save;
                //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished
                if (context == 'add') {
                    _this.$log.debug("Save and New");
                    _this.addWorkflowTaskAction(taskAction);
                    _this.finished = false;
                }
                else if (context == "finish") {
                    _this.finished = true;
                }
                //Auto save the workflow now that the task action is saved.
                _this.workflowTask.data.workflow.$$save();
            }, function (err) {
                angular.element('a[href="/##j-basic-2"]').click();
                console.warn(err);
            });
        }; //<--end save
        /**
         * Sets the editing state to show/hide the edit screen.
         */
        this.setHidden = function (task) {
            if (!angular.isObject(task)) {
                task = {};
            }
            if (angular.isUndefined(task.hidden)) {
                task.hidden = false;
            }
            else {
                _this.$log.debug("setHidden()", "Setting Hide Value To " + !task.hidden);
                task.hidden = !task.hidden;
            }
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Adds workflow action items by calling the workflowTask objects $$addWorkflowTaskAction() method
         * and sets the result to scope.
         * @param taskAction
         * --------------------------------------------------------------------------------------------------------
         */
        this.addWorkflowTaskAction = function (taskAction) {
            var workflowTaskAction = _this.workflowTask.$$addWorkflowTaskAction();
            _this.selectWorkflowTaskAction(workflowTaskAction);
            _this.$log.debug(_this.workflow);
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Selects a new task action and populates the task action properties.
         * --------------------------------------------------------------------------------------------------------
         */
        this.selectWorkflowTaskAction = function (workflowTaskAction) {
            _this.$log.debug("Selecting new task action for editing: ");
            _this.$log.debug(workflowTaskAction);
            _this.finished = false;
            _this.workflowTaskActions.selectedTaskAction = undefined;
            var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName(_this.workflowTask.data.workflow.data.workflowObject, true);
            filterPropertiesPromise.then(function (value) {
                _this.filterPropertiesList = {
                    baseEntityName: _this.workflowTask.data.workflow.data.workflowObject,
                    baseEntityAlias: "_" + _this.workflowTask.data.workflow.data.workflowObject
                };
                _this.metadataService.setPropertiesList(value, _this.workflowTask.data.workflow.data.workflowObject);
                _this.filterPropertiesList[_this.workflowTask.data.workflow.data.workflowObject] = _this.metadataService.getPropertiesListByBaseEntityAlias(_this.workflowTask.data.workflow.data.workflowObject);
                _this.metadataService.formatPropertiesList(_this.filterPropertiesList[_this.workflowTask.data.workflow.data.workflowObject], _this.workflowTask.data.workflow.data.workflowObject);
                _this.workflowTaskActions.selectedTaskAction = workflowTaskAction;
                _this.emailTemplateSelected = (_this.workflowTaskActions.selectedTaskAction.data.emailTemplate) ? _this.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateName : '';
                _this.emailTemplateCollectionConfig = _this.collectionConfigService.newCollectionConfig("EmailTemplate");
                _this.emailTemplateCollectionConfig.setDisplayProperties("emailTemplateID,emailTemplateName");
                _this.emailTemplateCollectionConfig.addFilter("emailTemplateObject", _this.workflowTask.data.workflow.data.workflowObject);
                _this.printTemplateSelected = (_this.workflowTaskActions.selectedTaskAction.data.printTemplate) ? _this.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateName : '';
                _this.printTemplateCollectionConfig = _this.collectionConfigService.newCollectionConfig("PrintTemplate");
                _this.printTemplateCollectionConfig.setDisplayProperties("printTemplateID,printTemplateName");
                _this.printTemplateCollectionConfig.addFilter("printTemplateObject", _this.workflowTask.data.workflow.data.workflowObject);
            });
        };
        /**
         * Overrides the confirm directive method deleteEntity. This is needed for the modal popup.
         */
        this.deleteEntity = function (entity) {
            _this.removeWorkflowTaskAction(entity);
        };
        /**
         * --------------------------------------------------------------------------------------------------------
         * Removes a workflow task action by calling the selected tasks $$delete method
         * and reindexes the list.
         * --------------------------------------------------------------------------------------------------------
         */
        this.removeWorkflowTaskAction = function (workflowTaskAction) {
            var deletePromise = workflowTaskAction.$$delete();
            deletePromise.then(function () {
                if (workflowTaskAction === _this.workflowTaskActions.selectedTaskAction) {
                    delete _this.workflowTaskActions.selectedTaskAction;
                }
                _this.$log.debug("removeWorkflowTaskAction");
                _this.$log.debug(workflowTaskAction);
                _this.workflowTaskActions.splice(workflowTaskAction.$$actionIndex, 1);
                for (var i in _this.workflowTaskActions) {
                    _this.workflowTaskActions[i].$$actionIndex = i;
                }
            });
        };
        this.searchProcess = {
            name: ''
        };
        /**
         * Watches for changes in the proccess
         */
        this.showProcessOptions = false;
        this.processOptions = [];
        //this.$scope.$watch('swWorkflowTaskActions.searchProcess.name', (newValue, oldValue)=>{
        //    if(newValue !== oldValue){
        //        this.getProcessOptions(this.workflowTask.data.workflow.data.workflowObject);
        //    }
        //});
        /**
         * Retrieves the proccess options for a workflow trigger action.
         */
        this.getProcessOptions = function (objectName) {
            if (!_this.processOptions.length) {
                var proccessOptionsPromise = _this.$hibachi.getProcessOptions(objectName);
                proccessOptionsPromise.then(function (value) {
                    _this.processOptions = value.data;
                });
            }
            _this.showProcessOptions = true;
        };
        /**
         * Changes the selected process option value.
         */
        this.selectProcess = function (processOption) {
            _this.workflowTaskActions.selectedTaskAction.data.processMethod = processOption.value;
            _this.searchProcess.name = processOption.value;
            _this.workflowTaskActions.selectedTaskAction.forms.selectedTaskAction.$setDirty();
            //this.searchProcess = processOption.name;
            _this.showProcessOptions = false;
        };
        this.selectEmailTemplate = function (item) {
            if (angular.isDefined(_this.workflowTaskActions.selectedTaskAction.data.emailTemplate)) {
                _this.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateID = item.emailTemplateID;
            }
            else {
                var templateEmail = _this.$hibachi.newEmailTemplate();
                templateEmail.data.emailTemplateID = item.emailTemplateID;
                _this.workflowTaskActions.selectedTaskAction.$$setEmailTemplate(templateEmail);
            }
        };
        this.selectPrintTemplate = function (item) {
            if (angular.isDefined(_this.workflowTaskActions.selectedTaskAction.data.printTemplate)) {
                _this.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateID = item.printTemplateID;
            }
            else {
                var templatePrint = _this.$hibachi.newPrintTemplate();
                templatePrint.data.printTemplateID = item.printTemplateID;
                _this.workflowTaskActions.selectedTaskAction.$$setPrintTemplate(templatePrint);
            }
        };
    }
    return SWWorkflowTaskActionsController;
}());
var SWWorkflowTaskActions = /** @class */ (function () {
    function SWWorkflowTaskActions(workflowPartialsPath, hibachiPathBuilder) {
        this.workflowPartialsPath = workflowPartialsPath;
        this.hibachiPathBuilder = hibachiPathBuilder;
        this.restrict = 'AE';
        this.scope = {};
        this.bindToController = {
            workflowTask: "="
        };
        this.controller = SWWorkflowTaskActionsController;
        this.controllerAs = "swWorkflowTaskActions";
        this.link = function ($scope, element, attrs) {
        };
        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath) + "workflowtaskactions.html";
    }
    SWWorkflowTaskActions.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTaskActions(workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
        return directive;
    };
    SWWorkflowTaskActions.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
    return SWWorkflowTaskActions;
}());
exports.SWWorkflowTaskActions = SWWorkflowTaskActions;


/***/ }),
/* 922 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
/**
 * Handles adding, editing, and deleting Workflows Tasks.
 */
var SWWorkflowTasks = /** @class */ (function () {
    function SWWorkflowTasks($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) {
        return {
            restrict: 'A',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtasks.html",
            link: function (scope, element, attrs) {
                scope.workflowPartialsPath = hibachiPathBuilder.buildPartialsPath(workflowPartialsPath);
                scope.propertiesList = {};
                function logger(context, message) {
                    $log.debug("SwWorkflowTasks :" + context + " : " + message);
                }
                /**
                 * Sets workflowTasks on the scope by populating with $$getWorkflowTasks()
                 */
                scope.getWorkflowTasks = function () {
                    logger("getWorkflowTasks", "Retrieving items");
                    logger("getWorkflowTasks", "Workflow Tasks");
                    $log.debug(scope.workflowTasks);
                    if (!scope.workflow.$$isPersisted()) {
                        scope.workflow.data.workflowTasks = [];
                        scope.workflowTasks = scope.workflow.data.workflowTasks;
                        return;
                    }
                    /***
                       Note:
                       This conditional is checking whether or not we need to be retrieving to
                       items all over again. If we already have them, we won't make another
                       trip to the database.

                     ***/
                    if (angular.isUndefined(scope.workflow.data.workflowTasks)) {
                        var workflowTasksPromise = scope.workflow.$$getWorkflowTasks();
                        workflowTasksPromise.then(function () {
                            scope.workflowTasks = scope.workflow.data.workflowTasks;
                        });
                    }
                    else {
                        logger("getWorkflowTasks", "Retrieving cached Items");
                        scope.workflowTasks = scope.workflow.data.workflowTasks;
                    }
                    if (angular.isUndefined(scope.workflow.data.workflowTasks)) {
                        //Reset the workflowTasks.
                        logger("getWorkflowTasks", "workflowTasks is undefined.");
                        scope.workflow.data.workflowTasks = [];
                        scope.workflowTasks = scope.workflow.data.workflowTasks;
                    }
                };
                scope.getWorkflowTasks(); //call tasks
                /**
                 * Sets the editing state to show/hide the edit screen.
                 */
                scope.setHidden = function (task) {
                    if (!angular.isObject(task) || angular.isUndefined(task.hidden)) {
                        task.hidden = false;
                    }
                    else {
                        logger("setHidden()", "Setting Hide Value To " + !task.hidden);
                        task.hidden = !task.hidden;
                    }
                };
                /**
                 * Add a workflow task and logs the result.
                 */
                scope.addWorkflowTask = function () {
                    var newWorkflowTask = scope.workflow.$$addWorkflowTask();
                    logger("var newWorkflowTask", newWorkflowTask);
                    scope.selectWorkflowTask(newWorkflowTask);
                };
                /**
                  * Watches the select for changes.
                  */
                scope.$watch('workflowTasks.selectedTask.data.workflow.data.workflowObject', function (newValue, oldValue) {
                    logger("scope.$watch", "Change Detected " + newValue + " from " + oldValue);
                    if ((newValue !== oldValue && angular.isDefined(scope.workflowTasks.selectedTask))) {
                        logger("scope.$watch", "Change to " + newValue);
                        scope.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityAlias = newValue;
                        scope.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityName = newValue;
                    }
                });
                /**
                   * --------------------------------------------------------------------------------------------------------
                   * Saves the workflow task by calling the objects $$save method. In addition to calling save here,
                   * we also refresh the data by calling getWorkflowTasks followed by calling the global entity.$$save.
                   * @param task
                   * --------------------------------------------------------------------------------------------------------
                   */
                scope.saveWorkflowTask = function (task, context) {
                    //scope.workflowTasks.selectedTask.$$setWorkflow(scope.workflow);
                    scope.workflowTasks.selectedTask.$$save().then(function (res) {
                        scope.done = true;
                        delete scope.workflowTasks.selectedTask;
                        if (context === 'add') {
                            scope.addWorkflowTask();
                            scope.finished = true;
                        }
                        else if (context == "finish") {
                            scope.finished = false;
                        }
                        //refresh the task information.
                        delete scope.workflow.data.workflowTasks;
                        scope.getWorkflowTasks();
                        //Save the workflow entity automatically.
                        scope.workflow.$$save();
                    }, function (err) {
                    });
                }; //<--end save*/
                /**
                 * Select a workflow task.
                 */
                scope.selectWorkflowTask = function (workflowTask) {
                    scope.done = false;
                    $log.debug(workflowTask);
                    scope.finished = false;
                    scope.workflowTasks.selectedTask = undefined;
                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.workflow.data.workflowObject, true);
                    filterPropertiesPromise.then(function (value) {
                        scope.filterPropertiesList = {
                            baseEntityName: scope.workflow.data.workflowObject,
                            baseEntityAlias: "_" + scope.workflow.data.workflowObject
                        };
                        metadataService.setPropertiesList(value, scope.workflow.data.workflowObject);
                        scope.filterPropertiesList[scope.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflow.data.workflowObject);
                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflow.data.workflowObject], scope.workflow.data.workflowObject);
                        scope.workflowTasks.selectedTask = workflowTask;
                    });
                };
                /* Does a delete of the property using delete */
                scope.softRemoveTask = function (workflowTask) {
                    if (workflowTask === scope.workflowTasks.selectedTask) {
                        delete scope.workflowTasks.selectedTask;
                    }
                    scope.removeIndexFromTasks(workflowTask.$$index);
                    scope.reindexTaskList();
                };
                /* Does an API call delete using $$delete */
                scope.hardRemoveTask = function (workflowTask) {
                    var deletePromise = workflowTask.$$delete();
                    deletePromise.then(function () {
                        if (workflowTask === scope.workflowTasks.selectedTask) {
                            delete scope.workflowTasks.selectedTask;
                        }
                        scope.removeIndexFromTasks(workflowTask.$$index);
                        scope.reindexTaskList();
                    });
                };
                /*Override the delete entity in the confirmation controller*/
                scope.deleteEntity = function (entity) {
                    scope.hardRemoveTask(entity);
                };
                /* Re-indexes the task list */
                scope.reindexTaskList = function () {
                    for (var i in scope.workflowTasks) {
                        logger("ReIndexing the list", i);
                        scope.workflowTasks[i].$$index = i;
                    }
                };
                /* Removes the tasks index from the tasks array */
                scope.removeIndexFromTasks = function (index) {
                    logger("RemoveIndexFromTasks", index);
                    scope.workflowTasks.splice(index, 1);
                };
            }
        };
    }
    SWWorkflowTasks.Factory = function () {
        var directive = function ($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTasks($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder); };
        directive.$inject = [
            '$log',
            '$hibachi',
            'metadataService',
            'workflowPartialsPath',
            'hibachiPathBuilder'
        ];
        return directive;
    };
    return SWWorkflowTasks;
}());
exports.SWWorkflowTasks = SWWorkflowTasks;


/***/ }),
/* 923 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTrigger = /** @class */ (function () {
    function SWWorkflowTrigger($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService) {
        return {
            restrict: 'A',
            replace: true,
            scope: {
                workflowTrigger: "=",
                workflowTriggers: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtrigger.html",
            link: function (scope, element, attrs) {
                /**
                 * Selects the current workflow trigger.
                 */
                scope.selectWorkflowTrigger = function (workflowTrigger) {
                    scope.done = false;
                    scope.finished = false;
                    scope.workflowTriggers.selectedTrigger = undefined;
                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.workflowTrigger.data.workflow.data.workflowObject, true);
                    filterPropertiesPromise.then(function (value) {
                        scope.filterPropertiesList = {
                            baseEntityName: scope.workflowTrigger.data.workflow.data.workflowObject,
                            baseEntityAlias: "_" + scope.workflowTrigger.data.workflow.data.workflowObject
                        };
                        metadataService.setPropertiesList(value, scope.workflowTrigger.data.workflow.data.workflowObject);
                        scope.filterPropertiesList[scope.workflowTrigger.data.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflowTrigger.data.workflow.data.workflowObject);
                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflowTrigger.data.workflow.data.workflowObject], scope.workflowTrigger.data.workflow.data.workflowObject);
                        scope.workflowTriggers.selectedTrigger = workflowTrigger;
                    });
                };
                scope.executingTrigger = false;
                scope.executeWorkflowTrigger = function (workflowTrigger) {
                    if (scope.executingTrigger)
                        return;
                    if (!workflowTrigger.data.workflow.data.workflowTasks || !workflowTrigger.data.workflow.data.workflowTasks.length) {
                        var alert = alertService.newAlert();
                        alert.msg = "You don't have any Task yet!";
                        alert.type = "error";
                        alert.fade = true;
                        alertService.addAlert(alert);
                        return;
                    }
                    scope.executingTrigger = true;
                    var appConfig = $hibachi.getConfig();
                    var urlString = appConfig.baseURL + '/index.cfm/?' + appConfig.action + '=api:workflow.executeScheduleWorkflowTrigger&workflowTriggerID=' + workflowTrigger.data.workflowTriggerID + '&x=' + utilityService.createID();
                    $http.get(urlString).finally(function () {
                        scope.executingTrigger = false;
                        var alert = alertService.newAlert();
                        alert.msg = "Task Triggered Successfully. Check History for Status";
                        alert.type = "success";
                        alert.fade = true;
                        alertService.addAlert(alert);
                    });
                };
                /**
                 * Overrides the delete function for the confirmation modal. Delegates to the normal delete method.
                 */
                scope.deleteEntity = function (entity, index) {
                    scope.deleteTrigger(entity, index);
                };
                /**
                 * Hard deletes a workflow trigger
                 */
                scope.deleteTrigger = function (workflowTrigger, index) {
                    var deleteTriggerPromise = $hibachi.saveEntity('WorkflowTrigger', workflowTrigger.data.workflowTriggerID, {}, 'Delete');
                    deleteTriggerPromise.then(function (value) {
                        scope.workflowTriggers.splice(index, 1);
                    });
                };
            }
        };
    }
    SWWorkflowTrigger.Factory = function () {
        var directive = function ($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService) { return new SWWorkflowTrigger($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService); };
        directive.$inject = [
            '$http',
            '$hibachi',
            'alertService',
            'metadataService',
            'workflowPartialsPath',
            'hibachiPathBuilder',
            'utilityService'
        ];
        return directive;
    };
    return SWWorkflowTrigger;
}());
exports.SWWorkflowTrigger = SWWorkflowTrigger;


/***/ }),
/* 924 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTriggerHistory = /** @class */ (function () {
    function SWWorkflowTriggerHistory(workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService) {
        return {
            restrict: 'A',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtriggerhistory.html",
            link: function (scope, element, attrs) {
                $rootScope.workflowID = scope.workflow.data.workflowID;
                //Build the history collection.
                scope.workflowTriggerHistoryCollection = collectionConfigService.newCollectionConfig("WorkflowTriggerHistory");
                scope.workflowTriggerHistoryCollection.addFilter("workflowTrigger.workflow.workflowID", $rootScope.workflowID, "=");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("workflowTrigger.triggerType");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("response");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("endTime");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("startTime");
                scope.workflowTriggerHistoryCollection.addDisplayProperty("successFlag");
            }
        };
    }
    SWWorkflowTriggerHistory.Factory = function () {
        var directive = function (workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService) { return new SWWorkflowTriggerHistory(workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService); };
        directive.$inject = [
            'workflowPartialsPath',
            'hibachiPathBuilder',
            '$rootScope',
            'collectionConfigService'
        ];
        return directive;
    };
    return SWWorkflowTriggerHistory;
}());
exports.SWWorkflowTriggerHistory = SWWorkflowTriggerHistory;


/***/ }),
/* 925 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var SWWorkflowTriggers = /** @class */ (function () {
    function SWWorkflowTriggers($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService) {
        return {
            restrict: 'E',
            scope: {
                workflow: "="
            },
            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtriggers.html",
            link: function (scope, element, attrs, formController) {
                scope.schedule = {};
                scope.$watch('workflowTriggers.selectedTrigger', function (newValue, oldValue) {
                    if (newValue !== undefined && newValue !== oldValue) {
                        if (newValue.data.triggerType == 'Schedule') {
                            if (angular.isDefined(newValue.data.schedule)) {
                                scope.schedule.selectedName = newValue.data.schedule.data.scheduleName;
                                scope.selectSchedule(newValue.data.schedule.data);
                            }
                            if (angular.isDefined(newValue.data.scheduleCollection)) {
                                scope.selectedCollection = newValue.data.scheduleCollection.data.collectionName;
                            }
                        }
                        else {
                            scope.searchEvent.name = scope.workflowTriggers.selectedTrigger.triggerEventTitle;
                        }
                    }
                });
                scope.collectionCollectionConfig = collectionConfigService.newCollectionConfig("Collection");
                scope.collectionCollectionConfig.setDisplayProperties("collectionID,collectionName");
                scope.collectionCollectionConfig.addFilter("collectionObject", scope.workflow.data.workflowObject);
                observerService.attach(function (item) {
                    scope.collectionCollectionConfig.clearFilters();
                    scope.collectionCollectionConfig.addFilter("collectionObject", item.value);
                    scope.eventOptions = [];
                }, 'WorkflowWorkflowObjectOnChange');
                scope.scheduleCollectionConfig = collectionConfigService.newCollectionConfig("Schedule");
                scope.scheduleCollectionConfig.setDisplayProperties("scheduleID,scheduleName,daysOfMonthToRun,daysOfWeekToRun,recuringType,frequencyStartTime,frequencyEndTime,frequencyInterval");
                scope.daysOfweek = [];
                scope.daysOfMonth = [];
                scope.$id = 'swWorkflowTriggers';
                /**
                 * Retrieves the workflow triggers.
                 */
                scope.getWorkflowTriggers = function () {
                    /***
                       Note:
                       This conditional is checking whether or not we need to be retrieving to
                       items all over again. If we already have them, we won't make another
                       trip to the database.

                    ***/
                    if (!scope.workflow.$$isPersisted()) {
                        scope.workflow.data.workflowTriggers = [];
                        scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                        return;
                    }
                    if (angular.isUndefined(scope.workflow.data.workflowTriggers)) {
                        var workflowTriggersPromise = scope.workflow.$$getWorkflowTriggers();
                        workflowTriggersPromise.then(function () {
                            scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                            /* resets the workflow trigger */
                            if (angular.isUndefined(scope.workflow.data.workflowTriggers)) {
                                scope.workflow.data.workflowTriggers = [];
                                scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                            }
                            angular.forEach(scope.workflowTriggers, function (workflowTrigger, key) {
                                if (workflowTrigger.data.triggerType === 'Schedule') {
                                    workflowTrigger.$$getSchedule();
                                    workflowTrigger.$$getScheduleCollection();
                                } //<---end if
                            }); //<---end forEach
                        }); //<---end workflow triggers promise
                    }
                    else {
                        //Use the cached versions.
                        scope.workflowTriggers = scope.workflow.data.workflowTriggers;
                    } //<---end else
                };
                scope.getWorkflowTriggers(); //call triggers
                scope.showCollections = false;
                scope.collections = [];
                scope.searchEvent = {
                    name: ''
                };
                /**
                 * Watches for changes in the event
                 */
                scope.showEventOptions = false;
                scope.eventOptions = [];
                /**
                 * Retrieves the event options for a workflow trigger item.
                 */
                scope.getEventOptions = function (objectName) {
                    if (!scope.eventOptions.length) {
                        var eventOptionsPromise = $hibachi.getEventOptions(objectName);
                        eventOptionsPromise.then(function (value) {
                            scope.eventOptions = value.data;
                        });
                    }
                    scope.showEventOptions = !scope.showEventOptions;
                };
                /**
                 * Saves the workflow triggers then cascade a save to the workflow object as well.
                 */
                scope.saveWorkflowTrigger = function (context) {
                    if (!scope.workflowTriggers.selectedTrigger.$$isPersisted()) {
                        scope.workflowTriggers.selectedTrigger.$$setWorkflow(scope.workflow);
                    }
                    var saveWorkflowTriggerPromise = scope.workflowTriggers.selectedTrigger.$$save();
                    saveWorkflowTriggerPromise.then(function () {
                        scope.showEventOptions = true;
                        scope.searchEvent = {
                            name: ''
                        };
                        scope.schedule.selectedName = '';
                        scope.schedulePreview = {};
                        //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished
                        if (context == 'add') {
                            scope.addWorkflowTrigger();
                        }
                        else if (context == "finish") {
                            scope.workflowTriggers.selectedTrigger = undefined;
                        }
                        //auto saves the workflow as well.
                        scope.workflow.$$save();
                    });
                };
                scope.closeTrigger = function () {
                    if (!scope.workflowTriggers.selectedTrigger.$$isPersisted()) {
                        scope.workflowTriggers.selectedTrigger.$$setWorkflow();
                    }
                    scope.workflowTriggers.selectedTrigger = undefined;
                };
                /**
                 * Changes the selected trigger value.
                 */
                scope.selectEvent = function (eventOption) {
                    //Needs to clear old and set new.
                    scope.workflowTriggers.selectedTrigger.data.triggerEventTitle = eventOption.name;
                    scope.workflowTriggers.selectedTrigger.data.triggerEvent = eventOption.value;
                    if (eventOption.entityName == scope.workflow.data.workflowObject) {
                        scope.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier = '';
                    }
                    else {
                        scope.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier = eventOption.entityName;
                    }
                    scope.searchEvent.name = eventOption.name;
                    scope.showEventOptions = false;
                    observerService.notifyById('pullBindings', 'WorkflowTriggertriggerEventpullBindings').then(function () {
                    });
                    observerService.notifyById('pullBindings', 'WorkflowTriggertriggerEventTitlepullBindings').then(function () {
                    });
                };
                /**
                 * Selects a new collection.
                 */
                scope.selectCollection = function (collection) {
                    scope.workflowTriggers.selectedTrigger.data.scheduleCollection = collection;
                    scope.showCollections = false;
                };
                /**
                 * Removes a workflow trigger
                 */
                scope.removeWorkflowTrigger = function (workflowTrigger) {
                    if (workflowTrigger === scope.workflowTriggers.selectedTrigger) {
                        delete scope.workflowTriggers.selectedTrigger;
                    }
                    scope.workflowTriggers.splice(workflowTrigger.$$index, 1);
                };
                scope.setAsEvent = function (workflowTrigger) {
                    if (!workflowTrigger.$$isPersisted()) {
                        workflowTrigger.data.saveTriggerHistoryFlag = 0;
                    }
                    //add event,  clear schedule
                };
                scope.setAsSchedule = function (workflowTrigger) {
                    if (!workflowTrigger.$$isPersisted()) {
                        workflowTrigger.data.saveTriggerHistoryFlag = 1;
                    }
                };
                /**
                 * Adds a workflow trigger.
                 */
                scope.addWorkflowTrigger = function () {
                    var newWorkflowTrigger = $hibachi.newWorkflowTrigger();
                    scope.workflowTriggers.selectedTrigger = newWorkflowTrigger;
                };
                scope.addNewSchedule = function () {
                    scope.createSchedule = true;
                    scope.scheduleEntity = $hibachi.newSchedule();
                };
                scope.saveSchedule = function () {
                    if (scope.scheduleEntity.data.recuringType == 'weekly') {
                        scope.scheduleEntity.data.daysOfWeekToRun = scope.daysOfweek.filter(Number).join();
                    }
                    else if (scope.scheduleEntity.data.recuringType == 'monthly') {
                        scope.scheduleEntity.data.daysOfMonthToRun = scope.daysOfMonth.filter(Number).join();
                    }
                    scope.scheduleEntity.$$save().then(function (res) {
                        scope.schedule.selectedName = angular.copy(scope.scheduleEntity.data.scheduleName);
                        scope.selectSchedule(angular.copy(scope.scheduleEntity.data));
                        formService.resetForm(scope.scheduleEntity.forms['scheduleForm']);
                        scope.createSchedule = false;
                    }, function () {
                    });
                };
                scope.selectCollection = function (item) {
                    if (item === undefined) {
                        scope.workflowTriggers.selectedTrigger.$$setScheduleCollection();
                        return;
                    }
                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.scheduleCollection)) {
                        scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID = item.collectionID;
                        scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionName = item.collectionName;
                    }
                    else {
                        var _collection = $hibachi.newCollection();
                        _collection.data.collectionID = item.collectionID;
                        _collection.data.collectionName = item.collectionName;
                        scope.workflowTriggers.selectedTrigger.$$setScheduleCollection(_collection);
                    }
                };
                scope.viewCollection = function () {
                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.scheduleCollection)) {
                        dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
                            entityName: 'Collection',
                            entityId: scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID,
                            readOnly: true
                        });
                    }
                };
                scope.selectSchedule = function (item) {
                    if (item === undefined) {
                        scope.schedulePreview = {};
                        scope.workflowTriggers.selectedTrigger.$$setSchedule();
                        return;
                    }
                    scope.schedulePreview = scheduleService.buildSchedulePreview(item, 6);
                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.schedule)) {
                        scope.workflowTriggers.selectedTrigger.data.schedule.data.scheduleID = item.scheduleID;
                        scope.workflowTriggers.selectedTrigger.data.schedule.data.scheduleName = item.scheduleName;
                    }
                    else {
                        var _schedule = $hibachi.newSchedule();
                        _schedule.data.scheduleID = item.scheduleID;
                        _schedule.data.scheduleName = item.scheduleName;
                        scope.workflowTriggers.selectedTrigger.$$setSchedule(_schedule);
                    }
                };
            }
        };
    }
    SWWorkflowTriggers.Factory = function () {
        var directive = function ($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService) { return new SWWorkflowTriggers($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService); };
        directive.$inject = [
            '$hibachi',
            'workflowPartialsPath',
            'formService',
            'observerService',
            'hibachiPathBuilder',
            'collectionConfigService',
            'scheduleService',
            'dialogService'
        ];
        return directive;
    };
    return SWWorkflowTriggers;
}());
exports.SWWorkflowTriggers = SWWorkflowTriggers;


/***/ }),
/* 926 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
var baseentityservice_1 = __webpack_require__(17);
var ScheduleService = /** @class */ (function (_super) {
    __extends(ScheduleService, _super);
    //@ngInject
    function ScheduleService($injector, $hibachi, utilityService) {
        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Schedule') || this;
        _this.$injector = $injector;
        _this.$hibachi = $hibachi;
        _this.utilityService = utilityService;
        _this.schedulePreview = {};
        _this.clearSchedulePreview = function () {
            _this.schedulePreview = {};
        };
        _this.addSchedulePreviewItem = function (cdate, longMonthName) {
            if (longMonthName === void 0) { longMonthName = true; }
            var weekday = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            var monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
            var currentDate = (cdate.getMonth() + 1) + '-' + cdate.getDate() + '-' + cdate.getFullYear();
            if (_this.schedulePreview[currentDate] === undefined) {
                _this.schedulePreview[currentDate] = {
                    day: cdate.getDate(),
                    month: (longMonthName) ? month[cdate.getMonth()] : monthShort[cdate.getMonth()],
                    year: cdate.getFullYear(),
                    weekday: weekday[cdate.getDay()],
                    times: []
                };
            }
            _this.schedulePreview[currentDate].times.push(cdate.toLocaleTimeString());
        };
        _this.buildSchedulePreview = function (scheduleObject, totalOfPreviews) {
            if (totalOfPreviews === void 0) { totalOfPreviews = 10; }
            _this.clearSchedulePreview();
            var startTime = new Date(Date.parse(scheduleObject.frequencyStartTime));
            var endTime = (scheduleObject.frequencyEndTime.trim()) ? new Date(Date.parse(scheduleObject.frequencyEndTime)) : false;
            var now = new Date();
            var startPoint = new Date();
            startPoint.setHours(startTime.getHours());
            startPoint.setMinutes(startTime.getMinutes());
            startPoint.setSeconds(startTime.getSeconds());
            var daysToRun = [];
            if (scheduleObject.recuringType == 'weekly') {
                daysToRun = scheduleObject.daysOfWeekToRun.toString().split(',');
                if (!daysToRun.length || scheduleObject.daysOfWeekToRun.toString().trim() == '') {
                    return _this.schedulePreview;
                }
            }
            if (scheduleObject.recuringType == 'monthly') {
                daysToRun = scheduleObject.daysOfMonthToRun.toString().split(',');
                if (!daysToRun.length || !scheduleObject.daysOfWeekToRun || scheduleObject.daysOfWeekToRun.toString().trim() == '') {
                    return _this.schedulePreview;
                }
            }
            var datesAdded = 0;
            for (var i = 0;; i++) {
                if (datesAdded >= totalOfPreviews || i >= 500)
                    break;
                var timeToadd = (scheduleObject.frequencyInterval && scheduleObject.frequencyInterval.toString().trim()) ? (scheduleObject.frequencyInterval * i) * 60000 : i * 24 * 60 * 60 * 1000;
                var currentDatetime = new Date(startPoint.getTime() + timeToadd);
                if (currentDatetime < now)
                    continue;
                if (scheduleObject.recuringType == 'weekly') {
                    if (daysToRun.indexOf((currentDatetime.getDay() + 1).toString()) == -1)
                        continue;
                }
                else if (scheduleObject.recuringType == 'monthly') {
                    if (daysToRun.indexOf(currentDatetime.getDate().toString()) == -1)
                        continue;
                }
                if (!endTime) {
                    _this.addSchedulePreviewItem(currentDatetime);
                    datesAdded++;
                }
                else {
                    if (_this.utilityService.minutesOfDay(startTime) <= _this.utilityService.minutesOfDay(currentDatetime)
                        && _this.utilityService.minutesOfDay(endTime) >= _this.utilityService.minutesOfDay(currentDatetime)) {
                        _this.addSchedulePreviewItem(currentDatetime);
                        datesAdded++;
                    }
                }
            }
            return _this.schedulePreview;
        };
        return _this;
    }
    return ScheduleService;
}(baseentityservice_1.BaseEntityService));
exports.ScheduleService = ScheduleService;


/***/ }),
/* 927 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path='../../../typings/hibachiTypescript.d.ts' />
/// <reference path='../../../typings/tsd.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var WorkflowCondition = /** @class */ (function () {
    function WorkflowCondition() {
        this.propertyIdentifer = "";
        this.comparisonOperator = "";
        this.value = "";
        this.displayPropertyIdentifier = "";
        this.$$disabled = false;
        this.$$isClosed = true;
        this.$$isNew = true;
    }
    return WorkflowCondition;
}());
exports.WorkflowCondition = WorkflowCondition;
var WorkflowConditionGroupItem = /** @class */ (function () {
    function WorkflowConditionGroupItem() {
        this.workflowConditionGroup = [];
    }
    return WorkflowConditionGroupItem;
}());
exports.WorkflowConditionGroupItem = WorkflowConditionGroupItem;
var WorkflowConditionService = /** @class */ (function () {
    function WorkflowConditionService($log, $hibachi, alertService) {
        var _this = this;
        this.$log = $log;
        this.newWorkflowCondition = function () {
            return new WorkflowCondition;
        };
        this.addWorkflowCondition = function (groupItem, condition) {
            _this.$log.debug('addWorkflowCondition');
            _this.$log.debug(groupItem);
            _this.$log.debug(condition);
            if (groupItem.length >= 1) {
                condition.logicalOperator = 'AND';
            }
            groupItem.push(condition);
        };
        this.newWorkflowConditionGroupItem = function () {
            return new WorkflowConditionGroupItem;
        };
        this.addWorkflowConditionGroupItem = function (group, groupItem) {
            group.push(groupItem);
        };
    }
    WorkflowConditionService.$inject = ["$log", "$hibachi", "alertService"];
    return WorkflowConditionService;
}());
exports.WorkflowConditionService = WorkflowConditionService;


/***/ }),
/* 928 */,
/* 929 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(312);


/***/ })
/******/ ]);