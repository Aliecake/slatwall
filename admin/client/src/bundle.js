/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);
	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(10);
	__webpack_require__(11);
	__webpack_require__(12);
	__webpack_require__(13);
	module.exports = __webpack_require__(14);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|after|from)/i,subtract:/^(\-|before|ago)/i,yesterday:/^yesterday/i,today:/^t(oday)?/i,tomorrow:/^tomorrow/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^min(ute)?s?/i,hour:/^h(ou)?rs?/i,week:/^w(ee)?k/i,month:/^m(o(nth)?s?)?/i,day:/^d(ays?)?/i,year:/^y((ea)?rs?)?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a|p)/i},abbreviatedTimeZoneStandard:{GMT:"-000",EST:"-0400",CST:"-0500",MST:"-0600",PST:"-0700"},abbreviatedTimeZoneDST:{GMT:"-000",EDT:"-0500",CDT:"-0600",MDT:"-0700",PDT:"-0800"}},Date.getMonthNumberFromName=function(t){for(var e=Date.CultureInfo.monthNames,n=Date.CultureInfo.abbreviatedMonthNames,r=t.toLowerCase(),a=0;a<e.length;a++)if(e[a].toLowerCase()==r||n[a].toLowerCase()==r)return a;return-1},Date.getDayNumberFromName=function(t){for(var e=Date.CultureInfo.dayNames,n=Date.CultureInfo.abbreviatedDayNames,r=(Date.CultureInfo.shortestDayNames,t.toLowerCase()),a=0;a<e.length;a++)if(e[a].toLowerCase()==r||n[a].toLowerCase()==r)return a;return-1},Date.isLeapYear=function(t){return t%4===0&&t%100!==0||t%400===0},Date.getDaysInMonth=function(t,e){return[31,Date.isLeapYear(t)?29:28,31,30,31,30,31,31,30,31,30,31][e]},Date.getTimezoneOffset=function(t,e){return e?Date.CultureInfo.abbreviatedTimeZoneDST[t.toUpperCase()]:Date.CultureInfo.abbreviatedTimeZoneStandard[t.toUpperCase()]},Date.getTimezoneAbbreviation=function(t,e){var n,r=e?Date.CultureInfo.abbreviatedTimeZoneDST:Date.CultureInfo.abbreviatedTimeZoneStandard;for(n in r)if(r[n]===t)return n;return null},Date.prototype.clone=function(){return new Date(this.getTime())},Date.prototype.compareTo=function(t){if(isNaN(this))throw new Error(this);if(t instanceof Date&&!isNaN(t))return this>t?1:t>this?-1:0;throw new TypeError(t)},Date.prototype.equals=function(t){return 0===this.compareTo(t)},Date.prototype.between=function(t,e){var n=this.getTime();return n>=t.getTime()&&n<=e.getTime()},Date.prototype.addMilliseconds=function(t){return this.setMilliseconds(this.getMilliseconds()+t),this},Date.prototype.addSeconds=function(t){return this.addMilliseconds(1e3*t)},Date.prototype.addMinutes=function(t){return this.addMilliseconds(6e4*t)},Date.prototype.addHours=function(t){return this.addMilliseconds(36e5*t)},Date.prototype.addDays=function(t){return this.addMilliseconds(864e5*t)},Date.prototype.addWeeks=function(t){return this.addMilliseconds(6048e5*t)},Date.prototype.addMonths=function(t){var e=this.getDate();return this.setDate(1),this.setMonth(this.getMonth()+t),this.setDate(Math.min(e,this.getDaysInMonth())),this},Date.prototype.addYears=function(t){return this.addMonths(12*t)},Date.prototype.add=function(t){if("number"==typeof t)return this._orient=t,this;var e=t;return(e.millisecond||e.milliseconds)&&this.addMilliseconds(e.millisecond||e.milliseconds),(e.second||e.seconds)&&this.addSeconds(e.second||e.seconds),(e.minute||e.minutes)&&this.addMinutes(e.minute||e.minutes),(e.hour||e.hours)&&this.addHours(e.hour||e.hours),(e.month||e.months)&&this.addMonths(e.month||e.months),(e.year||e.years)&&this.addYears(e.year||e.years),(e.day||e.days)&&this.addDays(e.day||e.days),this},Date._validate=function(t,e,n,r){if("number"!=typeof t)throw new TypeError(t+" is not a Number.");if(e>t||t>n)throw new RangeError(t+" is not a valid value for "+r+".");return!0},Date.validateMillisecond=function(t){return Date._validate(t,0,999,"milliseconds")},Date.validateSecond=function(t){return Date._validate(t,0,59,"seconds")},Date.validateMinute=function(t){return Date._validate(t,0,59,"minutes")},Date.validateHour=function(t){return Date._validate(t,0,23,"hours")},Date.validateDay=function(t,e,n){return Date._validate(t,1,Date.getDaysInMonth(e,n),"days")},Date.validateMonth=function(t){return Date._validate(t,0,11,"months")},Date.validateYear=function(t){return Date._validate(t,1,9999,"seconds")},Date.prototype.set=function(t){var e=t;return e.millisecond||0===e.millisecond||(e.millisecond=-1),e.second||0===e.second||(e.second=-1),e.minute||0===e.minute||(e.minute=-1),e.hour||0===e.hour||(e.hour=-1),e.day||0===e.day||(e.day=-1),e.month||0===e.month||(e.month=-1),e.year||0===e.year||(e.year=-1),-1!=e.millisecond&&Date.validateMillisecond(e.millisecond)&&this.addMilliseconds(e.millisecond-this.getMilliseconds()),-1!=e.second&&Date.validateSecond(e.second)&&this.addSeconds(e.second-this.getSeconds()),-1!=e.minute&&Date.validateMinute(e.minute)&&this.addMinutes(e.minute-this.getMinutes()),-1!=e.hour&&Date.validateHour(e.hour)&&this.addHours(e.hour-this.getHours()),-1!==e.month&&Date.validateMonth(e.month)&&this.addMonths(e.month-this.getMonth()),-1!=e.year&&Date.validateYear(e.year)&&this.addYears(e.year-this.getFullYear()),-1!=e.day&&Date.validateDay(e.day,this.getFullYear(),this.getMonth())&&this.addDays(e.day-this.getDate()),e.timezone&&this.setTimezone(e.timezone),e.timezoneOffset&&this.setTimezoneOffset(e.timezoneOffset),this},Date.prototype.clearTime=function(){return this.setHours(0),this.setMinutes(0),this.setSeconds(0),this.setMilliseconds(0),this},Date.prototype.isLeapYear=function(){var t=this.getFullYear();return t%4===0&&t%100!==0||t%400===0},Date.prototype.isWeekday=function(){return!(this.is().sat()||this.is().sun())},Date.prototype.getDaysInMonth=function(){return Date.getDaysInMonth(this.getFullYear(),this.getMonth())},Date.prototype.moveToFirstDayOfMonth=function(){return this.set({day:1})},Date.prototype.moveToLastDayOfMonth=function(){return this.set({day:this.getDaysInMonth()})},Date.prototype.moveToDayOfWeek=function(t,e){var n=(t-this.getDay()+7*(e||1))%7;return this.addDays(0===n?n+=7*(e||1):n)},Date.prototype.moveToMonth=function(t,e){var n=(t-this.getMonth()+12*(e||1))%12;return this.addMonths(0===n?n+=12*(e||1):n)},Date.prototype.getDayOfYear=function(){return Math.floor((this-new Date(this.getFullYear(),0,1))/864e5)},Date.prototype.getWeekOfYear=function(t){var e=this.getFullYear(),n=this.getMonth(),r=this.getDate(),a=t||Date.CultureInfo.firstDayOfWeek,o=8-new Date(e,0,1).getDay();8==o&&(o=1);var i=(Date.UTC(e,n,r,0,0,0)-Date.UTC(e,0,1,0,0,0))/864e5+1,s=Math.floor((i-o+7)/7);if(s===a){e--;var u=8-new Date(e,0,1).getDay();s=2==u||8==u?53:52}return s},Date.prototype.isDST=function(){return console.log("isDST"),"D"==this.toString().match(/(E|C|M|P)(S|D)T/)[2]},Date.prototype.getTimezone=function(){return Date.getTimezoneAbbreviation(this.getUTCOffset,this.isDST())},Date.prototype.setTimezoneOffset=function(t){var e=this.getTimezoneOffset(),n=-6*Number(t)/10;return this.addMinutes(n-e),this},Date.prototype.setTimezone=function(t){return this.setTimezoneOffset(Date.getTimezoneOffset(t))},Date.prototype.getUTCOffset=function(){var t,e=-10*this.getTimezoneOffset()/6;return 0>e?(t=(e-1e4).toString(),t[0]+t.substr(2)):(t=(e+1e4).toString(),"+"+t.substr(1))},Date.prototype.getDayName=function(t){return t?Date.CultureInfo.abbreviatedDayNames[this.getDay()]:Date.CultureInfo.dayNames[this.getDay()]},Date.prototype.getMonthName=function(t){return t?Date.CultureInfo.abbreviatedMonthNames[this.getMonth()]:Date.CultureInfo.monthNames[this.getMonth()]},Date.prototype._toString=Date.prototype.toString,Date.prototype.toString=function(t){var e=this,n=function(t){return 1==t.toString().length?"0"+t:t};return t?t.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(t){switch(t){case"hh":return n(e.getHours()<13?e.getHours():e.getHours()-12);case"h":return e.getHours()<13?e.getHours():e.getHours()-12;case"HH":return n(e.getHours());case"H":return e.getHours();case"mm":return n(e.getMinutes());case"m":return e.getMinutes();case"ss":return n(e.getSeconds());case"s":return e.getSeconds();case"yyyy":return e.getFullYear();case"yy":return e.getFullYear().toString().substring(2,4);case"dddd":return e.getDayName();case"ddd":return e.getDayName(!0);case"dd":return n(e.getDate());case"d":return e.getDate().toString();case"MMMM":return e.getMonthName();case"MMM":return e.getMonthName(!0);case"MM":return n(e.getMonth()+1);case"M":return e.getMonth()+1;case"t":return e.getHours()<12?Date.CultureInfo.amDesignator.substring(0,1):Date.CultureInfo.pmDesignator.substring(0,1);case"tt":return e.getHours()<12?Date.CultureInfo.amDesignator:Date.CultureInfo.pmDesignator;case"zzz":case"zz":case"z":return""}}):this._toString()},Date.now=function(){return new Date},Date.today=function(){return Date.now().clearTime()},Date.prototype._orient=1,Date.prototype.next=function(){return this._orient=1,this},Date.prototype.last=Date.prototype.prev=Date.prototype.previous=function(){return this._orient=-1,this},Date.prototype._is=!1,Date.prototype.is=function(){return this._is=!0,this},Number.prototype._dateElement="day",Number.prototype.fromNow=function(){var t={};return t[this._dateElement]=this,Date.now().add(t)},Number.prototype.ago=function(){var t={};return t[this._dateElement]=-1*this,Date.now().add(t)},function(){for(var t,e=Date.prototype,n=Number.prototype,r="sunday monday tuesday wednesday thursday friday saturday".split(/\s/),a="january february march april may june july august september october november december".split(/\s/),o="Millisecond Second Minute Hour Day Week Month Year".split(/\s/),i=function(t){return function(){return this._is?(this._is=!1,this.getDay()==t):this.moveToDayOfWeek(t,this._orient)}},s=0;s<r.length;s++)e[r[s]]=e[r[s].substring(0,3)]=i(s);for(var u=function(t){return function(){return this._is?(this._is=!1,this.getMonth()===t):this.moveToMonth(t,this._orient)}},h=0;h<a.length;h++)e[a[h]]=e[a[h].substring(0,3)]=u(h);for(var c=function(t){return function(){return"s"!=t.substring(t.length-1)&&(t+="s"),this["add"+t](this._orient)}},d=function(t){return function(){return this._dateElement=t,this}},l=0;l<o.length;l++)t=o[l].toLowerCase(),e[t]=e[t+"s"]=c(o[l]),n[t]=n[t+"s"]=d(t)}(),Date.prototype.toJSONString=function(){return this.toString("yyyy-MM-ddThh:mm:ssZ")},Date.prototype.toShortDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern)},Date.prototype.toLongDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.longDatePattern)},Date.prototype.toShortTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern)},Date.prototype.toLongTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.longTimePattern)},Date.prototype.getOrdinal=function(){switch(this.getDate()){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th"}},function(){Date.Parsing={Exception:function(t){this.message="Parse error at '"+t.substring(0,10)+" ...'"}};for(var t=Date.Parsing,e=t.Operators={rtoken:function(e){return function(n){var r=n.match(e);if(r)return[r[0],n.substring(r[0].length)];throw new t.Exception(n)}},token:function(){return function(t){return e.rtoken(new RegExp("^s*"+t+"s*"))(t)}},stoken:function(t){return e.rtoken(new RegExp("^"+t))},until:function(t){return function(e){for(var n=[],r=null;e.length;){try{r=t.call(this,e)}catch(a){n.push(r[0]),e=r[1];continue}break}return[n,e]}},many:function(t){return function(e){for(var n=[],r=null;e.length;){try{r=t.call(this,e)}catch(a){return[n,e]}n.push(r[0]),e=r[1]}return[n,e]}},optional:function(t){return function(e){var n=null;try{n=t.call(this,e)}catch(r){return[null,e]}return[n[0],n[1]]}},not:function(e){return function(n){try{e.call(this,n)}catch(r){return[null,n]}throw new t.Exception(n)}},ignore:function(t){return t?function(e){var n=null;return n=t.call(this,e),[null,n[1]]}:null},product:function(){for(var t=arguments[0],n=Array.prototype.slice.call(arguments,1),r=[],a=0;a<t.length;a++)r.push(e.each(t[a],n));return r},cache:function(e){var n={},r=null;return function(a){try{r=n[a]=n[a]||e.call(this,a)}catch(o){r=n[a]=o}if(r instanceof t.Exception)throw r;return r}},any:function(){var e=arguments;return function(n){for(var r=null,a=0;a<e.length;a++)if(null!=e[a]){try{r=e[a].call(this,n)}catch(o){r=null}if(r)return r}throw new t.Exception(n)}},each:function(){var e=arguments;return function(n){for(var r=[],a=null,o=0;o<e.length;o++)if(null!=e[o]){try{a=e[o].call(this,n)}catch(i){throw new t.Exception(n)}r.push(a[0]),n=a[1]}return[r,n]}},all:function(){var t=arguments,e=e;return e.each(e.optional(t))},sequence:function(n,r,a){return r=r||e.rtoken(/^\s*/),a=a||null,1==n.length?n[0]:function(e){for(var o=null,i=null,s=[],u=0;u<n.length;u++){try{o=n[u].call(this,e)}catch(h){break}s.push(o[0]);try{i=r.call(this,o[1])}catch(c){i=null;break}e=i[1]}if(!o)throw new t.Exception(e);if(i)throw new t.Exception(i[1]);if(a)try{o=a.call(this,o[1])}catch(d){throw new t.Exception(o[1])}return[s,o?o[1]:e]}},between:function(t,n,a){a=a||t;var o=e.each(e.ignore(t),n,e.ignore(a));return function(t){var e=o.call(this,t);return[[e[0][0],r[0][2]],e[1]]}},list:function(t,n,r){return n=n||e.rtoken(/^\s*/),r=r||null,t instanceof Array?e.each(e.product(t.slice(0,-1),e.ignore(n)),t.slice(-1),e.ignore(r)):e.each(e.many(e.each(t,e.ignore(n))),px,e.ignore(r))},set:function(n,r,a){return r=r||e.rtoken(/^\s*/),a=a||null,function(o){for(var i=null,s=null,u=null,h=null,c=[[],o],d=!1,l=0;l<n.length;l++){u=null,s=null,i=null,d=1==n.length;try{i=n[l].call(this,o)}catch(y){continue}if(h=[[i[0]],i[1]],i[1].length>0&&!d)try{u=r.call(this,i[1])}catch(f){d=!0}else d=!0;if(d||0!==u[1].length||(d=!0),!d){for(var m=[],p=0;p<n.length;p++)l!=p&&m.push(n[p]);s=e.set(m,r).call(this,u[1]),s[0].length>0&&(h[0]=h[0].concat(s[0]),h[1]=s[1])}if(h[1].length<c[1].length&&(c=h),0===c[1].length)break}if(0===c[0].length)return c;if(a){try{u=a.call(this,c[1])}catch(g){throw new t.Exception(c[1])}c[1]=u[1]}return c}},forward:function(t,e){return function(n){return t[e].call(this,n)}},replace:function(t,e){return function(n){var r=t.call(this,n);return[e,r[1]]}},process:function(t,e){return function(n){var r=t.call(this,n);return[e.call(this,r[0]),r[1]]}},min:function(e,n){return function(r){var a=n.call(this,r);if(a[0].length<e)throw new t.Exception(r);return a}}},n=function(t){return function(){var e=null,n=[];if(arguments.length>1?e=Array.prototype.slice.call(arguments):arguments[0]instanceof Array&&(e=arguments[0]),!e)return t.apply(null,arguments);for(var r=0,a=e.shift();r<a.length;r++)return e.unshift(a[r]),n.push(t.apply(null,e)),e.shift(),n}},a="optional not ignore cache".split(/\s/),o=0;o<a.length;o++)e[a[o]]=n(e[a[o]]);for(var i=function(t){return function(){return arguments[0]instanceof Array?t.apply(null,arguments[0]):t.apply(null,arguments)}},s="each any all".split(/\s/),u=0;u<s.length;u++)e[s[u]]=i(e[s[u]])}(),function(){var t=function(e){for(var n=[],r=0;r<e.length;r++)e[r]instanceof Array?n=n.concat(t(e[r])):e[r]&&n.push(e[r]);return n};Date.Grammar={},Date.Translator={hour:function(t){return function(){this.hour=Number(t)}},minute:function(t){return function(){this.minute=Number(t)}},second:function(t){return function(){this.second=Number(t)}},meridian:function(t){return function(){this.meridian=t.slice(0,1).toLowerCase()}},timezone:function(t){return function(){var e=t.replace(/[^\d\+\-]/g,"");e.length?this.timezoneOffset=Number(e):this.timezone=t.toLowerCase()}},day:function(t){var e=t[0];return function(){this.day=Number(e.match(/\d+/)[0])}},month:function(t){return function(){this.month=3==t.length?Date.getMonthNumberFromName(t):Number(t)-1}},year:function(t){return function(){var e=Number(t);this.year=t.length>2?e:e+(e+2e3<Date.CultureInfo.twoDigitYearMax?2e3:1900)}},rday:function(t){return function(){switch(t){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0,this.now=!0}}},finishExact:function(t){t=t instanceof Array?t:[t];var e=new Date;this.year=e.getFullYear(),this.month=e.getMonth(),this.day=1,this.hour=0,this.minute=0,this.second=0;for(var n=0;n<t.length;n++)t[n]&&t[n].call(this);if(this.hour="p"==this.meridian&&this.hour<13?this.hour+12:this.hour,this.day>Date.getDaysInMonth(this.year,this.month))throw new RangeError(this.day+" is not a valid value for days.");var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);return this.timezone?r.set({timezone:this.timezone}):this.timezoneOffset&&r.set({timezoneOffset:this.timezoneOffset}),r},finish:function(e){if(e=e instanceof Array?t(e):[e],0===e.length)return null;for(var n=0;n<e.length;n++)"function"==typeof e[n]&&e[n].call(this);if(this.now)return new Date;var r=Date.today(),a=!(null==this.days&&!this.orient&&!this.operator);if(a){var o,i,s;return s="past"==this.orient||"subtract"==this.operator?-1:1,this.weekday&&(this.unit="day",o=Date.getDayNumberFromName(this.weekday)-r.getDay(),i=7,this.days=o?(o+s*i)%i:s*i),this.month&&(this.unit="month",o=this.month-r.getMonth(),i=12,this.months=o?(o+s*i)%i:s*i,this.month=null),this.unit||(this.unit="day"),(null==this[this.unit+"s"]||null!=this.operator)&&(this.value||(this.value=1),"week"==this.unit&&(this.unit="day",this.value=7*this.value),this[this.unit+"s"]=this.value*s),r.add(this)}return this.meridian&&this.hour&&(this.hour=this.hour<13&&"p"==this.meridian?this.hour+12:this.hour),this.weekday&&!this.day&&(this.day=r.addDays(Date.getDayNumberFromName(this.weekday)-r.getDay()).getDate()),this.month&&!this.day&&(this.day=1),r.set(this)}};var e,n=Date.Parsing.Operators,r=Date.Grammar,a=Date.Translator;r.datePartDelimiter=n.rtoken(/^([\s\-\.\,\/\x27]+)/),r.timePartDelimiter=n.stoken(":"),r.whiteSpace=n.rtoken(/^\s*/),r.generalDelimiter=n.rtoken(/^(([\s\,]|at|on)+)/);var o={};r.ctoken=function(t){var e=o[t];if(!e){for(var r=Date.CultureInfo.regexPatterns,a=t.split(/\s+/),i=[],s=0;s<a.length;s++)i.push(n.replace(n.rtoken(r[a[s]]),a[s]));e=o[t]=n.any.apply(null,i)}return e},r.ctoken2=function(t){return n.rtoken(Date.CultureInfo.regexPatterns[t])},r.h=n.cache(n.process(n.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),a.hour)),r.hh=n.cache(n.process(n.rtoken(/^(0[0-9]|1[0-2])/),a.hour)),r.H=n.cache(n.process(n.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),a.hour)),r.HH=n.cache(n.process(n.rtoken(/^([0-1][0-9]|2[0-3])/),a.hour)),r.m=n.cache(n.process(n.rtoken(/^([0-5][0-9]|[0-9])/),a.minute)),r.mm=n.cache(n.process(n.rtoken(/^[0-5][0-9]/),a.minute)),r.s=n.cache(n.process(n.rtoken(/^([0-5][0-9]|[0-9])/),a.second)),r.ss=n.cache(n.process(n.rtoken(/^[0-5][0-9]/),a.second)),r.hms=n.cache(n.sequence([r.H,r.mm,r.ss],r.timePartDelimiter)),r.t=n.cache(n.process(r.ctoken2("shortMeridian"),a.meridian)),r.tt=n.cache(n.process(r.ctoken2("longMeridian"),a.meridian)),r.z=n.cache(n.process(n.rtoken(/^(\+|\-)?\s*\d\d\d\d?/),a.timezone)),r.zz=n.cache(n.process(n.rtoken(/^(\+|\-)\s*\d\d\d\d/),a.timezone)),r.zzz=n.cache(n.process(r.ctoken2("timezone"),a.timezone)),r.timeSuffix=n.each(n.ignore(r.whiteSpace),n.set([r.tt,r.zzz])),r.time=n.each(n.optional(n.ignore(n.stoken("T"))),r.hms,r.timeSuffix),r.d=n.cache(n.process(n.each(n.rtoken(/^([0-2]\d|3[0-1]|\d)/),n.optional(r.ctoken2("ordinalSuffix"))),a.day)),r.dd=n.cache(n.process(n.each(n.rtoken(/^([0-2]\d|3[0-1])/),n.optional(r.ctoken2("ordinalSuffix"))),a.day)),r.ddd=r.dddd=n.cache(n.process(r.ctoken("sun mon tue wed thu fri sat"),function(t){return function(){this.weekday=t}})),r.M=n.cache(n.process(n.rtoken(/^(1[0-2]|0\d|\d)/),a.month)),r.MM=n.cache(n.process(n.rtoken(/^(1[0-2]|0\d)/),a.month)),r.MMM=r.MMMM=n.cache(n.process(r.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),a.month)),r.y=n.cache(n.process(n.rtoken(/^(\d\d?)/),a.year)),r.yy=n.cache(n.process(n.rtoken(/^(\d\d)/),a.year)),r.yyy=n.cache(n.process(n.rtoken(/^(\d\d?\d?\d?)/),a.year)),r.yyyy=n.cache(n.process(n.rtoken(/^(\d\d\d\d)/),a.year)),e=function(){return n.each(n.any.apply(null,arguments),n.not(r.ctoken2("timeContext")))},r.day=e(r.d,r.dd),r.month=e(r.M,r.MMM),r.year=e(r.yyyy,r.yy),r.orientation=n.process(r.ctoken("past future"),function(t){return function(){this.orient=t}}),r.operator=n.process(r.ctoken("add subtract"),function(t){return function(){this.operator=t}}),r.rday=n.process(r.ctoken("yesterday tomorrow today now"),a.rday),r.unit=n.process(r.ctoken("minute hour day week month year"),function(t){return function(){this.unit=t}}),r.value=n.process(n.rtoken(/^\d\d?(st|nd|rd|th)?/),function(t){return function(){this.value=t.replace(/\D/g,"")}}),r.expression=n.set([r.rday,r.operator,r.value,r.unit,r.orientation,r.ddd,r.MMM]),e=function(){return n.set(arguments,r.datePartDelimiter)},r.mdy=e(r.ddd,r.month,r.day,r.year),r.ymd=e(r.ddd,r.year,r.month,r.day),r.dmy=e(r.ddd,r.day,r.month,r.year),r.date=function(t){return(r[Date.CultureInfo.dateElementOrder]||r.mdy).call(this,t)},r.format=n.process(n.many(n.any(n.process(n.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(t){if(r[t])return r[t];throw Date.Parsing.Exception(t)}),n.process(n.rtoken(/^[^dMyhHmstz]+/),function(t){return n.ignore(n.stoken(t))}))),function(t){return n.process(n.each.apply(null,t),a.finishExact)});var i={},s=function(t){return i[t]=i[t]||r.format(t)[0]};r.formats=function(t){if(t instanceof Array){for(var e=[],r=0;r<t.length;r++)e.push(s(t[r]));return n.any.apply(null,e)}return s(t)},r._formats=r.formats(["yyyy-MM-ddTHH:mm:ss","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","d"]),r._start=n.process(n.set([r.date,r.time,r.expression],r.generalDelimiter,r.whiteSpace),a.finish),r.start=function(t){try{var e=r._formats.call({},t);if(0===e[1].length)return e}catch(n){}return r._start.call({},t)}}(),Date._parse=Date.parse,Date.parse=function(t){var e=null;if(!t)return null;try{e=Date.Grammar.start.call({},t)}catch(n){return null}return 0===e[1].length?e[0]:null},Date.getParseFunction=function(t){var e=Date.Grammar.formats(t);return function(t){var n=null;try{n=e.call({},t)}catch(r){return null}return 0===n[1].length?n[0]:null}},Date.parseExact=function(t,e){return Date.getParseFunction(e)(t)};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	/*
	 AngularJS v1.5.5
	 (c) 2010-2016 Google, Inc. http://angularjs.org
	 License: MIT
	*/
	(function(v){'use strict';function O(a){return function(){var b=arguments[0],d;d="["+(a?a+":":"")+b+"] http://errors.angularjs.org/1.5.5/"+(a?a+"/":"")+b;for(b=1;b<arguments.length;b++){d=d+(1==b?"?":"&")+"p"+(b-1)+"=";var c=encodeURIComponent,e;e=arguments[b];e="function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof e?"undefined":"string"!=typeof e?JSON.stringify(e):e;d+=c(e)}return Error(d)}}function ya(a){if(null==a||Va(a))return!1;if(K(a)||F(a)||B&&a instanceof B)return!0;
	var b="length"in Object(a)&&a.length;return Q(b)&&(0<=b&&(b-1 in a||a instanceof Array)||"function"==typeof a.item)}function q(a,b,d){var c,e;if(a)if(E(a))for(c in a)"prototype"==c||"length"==c||"name"==c||a.hasOwnProperty&&!a.hasOwnProperty(c)||b.call(d,a[c],c,a);else if(K(a)||ya(a)){var f="object"!==typeof a;c=0;for(e=a.length;c<e;c++)(f||c in a)&&b.call(d,a[c],c,a)}else if(a.forEach&&a.forEach!==q)a.forEach(b,d,a);else if(oc(a))for(c in a)b.call(d,a[c],c,a);else if("function"===typeof a.hasOwnProperty)for(c in a)a.hasOwnProperty(c)&&
	b.call(d,a[c],c,a);else for(c in a)ua.call(a,c)&&b.call(d,a[c],c,a);return a}function pc(a,b,d){for(var c=Object.keys(a).sort(),e=0;e<c.length;e++)b.call(d,a[c[e]],c[e]);return c}function qc(a){return function(b,d){a(d,b)}}function Xd(){return++nb}function Nb(a,b,d){for(var c=a.$$hashKey,e=0,f=b.length;e<f;++e){var g=b[e];if(G(g)||E(g))for(var h=Object.keys(g),k=0,l=h.length;k<l;k++){var n=h[k],m=g[n];d&&G(m)?fa(m)?a[n]=new Date(m.valueOf()):Wa(m)?a[n]=new RegExp(m):m.nodeName?a[n]=m.cloneNode(!0):
	Ob(m)?a[n]=m.clone():(G(a[n])||(a[n]=K(m)?[]:{}),Nb(a[n],[m],!0)):a[n]=m}}c?a.$$hashKey=c:delete a.$$hashKey;return a}function R(a){return Nb(a,za.call(arguments,1),!1)}function Yd(a){return Nb(a,za.call(arguments,1),!0)}function X(a){return parseInt(a,10)}function Pb(a,b){return R(Object.create(a),b)}function C(){}function Xa(a){return a}function da(a){return function(){return a}}function rc(a){return E(a.toString)&&a.toString!==ma}function y(a){return"undefined"===typeof a}function x(a){return"undefined"!==
	typeof a}function G(a){return null!==a&&"object"===typeof a}function oc(a){return null!==a&&"object"===typeof a&&!sc(a)}function F(a){return"string"===typeof a}function Q(a){return"number"===typeof a}function fa(a){return"[object Date]"===ma.call(a)}function E(a){return"function"===typeof a}function Wa(a){return"[object RegExp]"===ma.call(a)}function Va(a){return a&&a.window===a}function Ya(a){return a&&a.$evalAsync&&a.$watch}function Da(a){return"boolean"===typeof a}function Zd(a){return a&&Q(a.length)&&
	$d.test(ma.call(a))}function Ob(a){return!(!a||!(a.nodeName||a.prop&&a.attr&&a.find))}function ae(a){var b={};a=a.split(",");var d;for(d=0;d<a.length;d++)b[a[d]]=!0;return b}function va(a){return P(a.nodeName||a[0]&&a[0].nodeName)}function Za(a,b){var d=a.indexOf(b);0<=d&&a.splice(d,1);return d}function qa(a,b){function d(a,b){var d=b.$$hashKey,e;if(K(a)){e=0;for(var f=a.length;e<f;e++)b.push(c(a[e]))}else if(oc(a))for(e in a)b[e]=c(a[e]);else if(a&&"function"===typeof a.hasOwnProperty)for(e in a)a.hasOwnProperty(e)&&
	(b[e]=c(a[e]));else for(e in a)ua.call(a,e)&&(b[e]=c(a[e]));d?b.$$hashKey=d:delete b.$$hashKey;return b}function c(a){if(!G(a))return a;var b=f.indexOf(a);if(-1!==b)return g[b];if(Va(a)||Ya(a))throw Aa("cpws");var b=!1,c=e(a);void 0===c&&(c=K(a)?[]:Object.create(sc(a)),b=!0);f.push(a);g.push(c);return b?d(a,c):c}function e(a){switch(ma.call(a)){case "[object Int8Array]":case "[object Int16Array]":case "[object Int32Array]":case "[object Float32Array]":case "[object Float64Array]":case "[object Uint8Array]":case "[object Uint8ClampedArray]":case "[object Uint16Array]":case "[object Uint32Array]":return new a.constructor(c(a.buffer));
	case "[object ArrayBuffer]":if(!a.slice){var b=new ArrayBuffer(a.byteLength);(new Uint8Array(b)).set(new Uint8Array(a));return b}return a.slice(0);case "[object Boolean]":case "[object Number]":case "[object String]":case "[object Date]":return new a.constructor(a.valueOf());case "[object RegExp]":return b=new RegExp(a.source,a.toString().match(/[^\/]*$/)[0]),b.lastIndex=a.lastIndex,b;case "[object Blob]":return new a.constructor([a],{type:a.type})}if(E(a.cloneNode))return a.cloneNode(!0)}var f=[],
	g=[];if(b){if(Zd(b)||"[object ArrayBuffer]"===ma.call(b))throw Aa("cpta");if(a===b)throw Aa("cpi");K(b)?b.length=0:q(b,function(a,d){"$$hashKey"!==d&&delete b[d]});f.push(a);g.push(b);return d(a,b)}return c(a)}function ha(a,b){if(K(a)){b=b||[];for(var d=0,c=a.length;d<c;d++)b[d]=a[d]}else if(G(a))for(d in b=b||{},a)if("$"!==d.charAt(0)||"$"!==d.charAt(1))b[d]=a[d];return b||a}function pa(a,b){if(a===b)return!0;if(null===a||null===b)return!1;if(a!==a&&b!==b)return!0;var d=typeof a,c;if(d==typeof b&&
	"object"==d)if(K(a)){if(!K(b))return!1;if((d=a.length)==b.length){for(c=0;c<d;c++)if(!pa(a[c],b[c]))return!1;return!0}}else{if(fa(a))return fa(b)?pa(a.getTime(),b.getTime()):!1;if(Wa(a))return Wa(b)?a.toString()==b.toString():!1;if(Ya(a)||Ya(b)||Va(a)||Va(b)||K(b)||fa(b)||Wa(b))return!1;d=T();for(c in a)if("$"!==c.charAt(0)&&!E(a[c])){if(!pa(a[c],b[c]))return!1;d[c]=!0}for(c in b)if(!(c in d)&&"$"!==c.charAt(0)&&x(b[c])&&!E(b[c]))return!1;return!0}return!1}function $a(a,b,d){return a.concat(za.call(b,
	d))}function tc(a,b){var d=2<arguments.length?za.call(arguments,2):[];return!E(b)||b instanceof RegExp?b:d.length?function(){return arguments.length?b.apply(a,$a(d,arguments,0)):b.apply(a,d)}:function(){return arguments.length?b.apply(a,arguments):b.call(a)}}function be(a,b){var d=b;"string"===typeof a&&"$"===a.charAt(0)&&"$"===a.charAt(1)?d=void 0:Va(b)?d="$WINDOW":b&&v.document===b?d="$DOCUMENT":Ya(b)&&(d="$SCOPE");return d}function ab(a,b){if(!y(a))return Q(b)||(b=b?2:null),JSON.stringify(a,be,
	b)}function uc(a){return F(a)?JSON.parse(a):a}function vc(a,b){a=a.replace(ce,"");var d=Date.parse("Jan 01, 1970 00:00:00 "+a)/6E4;return isNaN(d)?b:d}function Qb(a,b,d){d=d?-1:1;var c=a.getTimezoneOffset();b=vc(b,c);d*=b-c;a=new Date(a.getTime());a.setMinutes(a.getMinutes()+d);return a}function wa(a){a=B(a).clone();try{a.empty()}catch(b){}var d=B("<div>").append(a).html();try{return a[0].nodeType===Ma?P(d):d.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(a,b){return"<"+P(b)})}catch(c){return P(d)}}
	function wc(a){try{return decodeURIComponent(a)}catch(b){}}function xc(a){var b={};q((a||"").split("&"),function(a){var c,e,f;a&&(e=a=a.replace(/\+/g,"%20"),c=a.indexOf("="),-1!==c&&(e=a.substring(0,c),f=a.substring(c+1)),e=wc(e),x(e)&&(f=x(f)?wc(f):!0,ua.call(b,e)?K(b[e])?b[e].push(f):b[e]=[b[e],f]:b[e]=f))});return b}function Rb(a){var b=[];q(a,function(a,c){K(a)?q(a,function(a){b.push(ja(c,!0)+(!0===a?"":"="+ja(a,!0)))}):b.push(ja(c,!0)+(!0===a?"":"="+ja(a,!0)))});return b.length?b.join("&"):""}
	function ob(a){return ja(a,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function ja(a,b){return encodeURIComponent(a).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,b?"%20":"+")}function de(a,b){var d,c,e=Na.length;for(c=0;c<e;++c)if(d=Na[c]+b,F(d=a.getAttribute(d)))return d;return null}function ee(a,b){var d,c,e={};q(Na,function(b){b+="app";!d&&a.hasAttribute&&a.hasAttribute(b)&&(d=a,c=a.getAttribute(b))});
	q(Na,function(b){b+="app";var e;!d&&(e=a.querySelector("["+b.replace(":","\\:")+"]"))&&(d=e,c=e.getAttribute(b))});d&&(e.strictDi=null!==de(d,"strict-di"),b(d,c?[c]:[],e))}function yc(a,b,d){G(d)||(d={});d=R({strictDi:!1},d);var c=function(){a=B(a);if(a.injector()){var c=a[0]===v.document?"document":wa(a);throw Aa("btstrpd",c.replace(/</,"&lt;").replace(/>/,"&gt;"));}b=b||[];b.unshift(["$provide",function(b){b.value("$rootElement",a)}]);d.debugInfoEnabled&&b.push(["$compileProvider",function(a){a.debugInfoEnabled(!0)}]);
	b.unshift("ng");c=bb(b,d.strictDi);c.invoke(["$rootScope","$rootElement","$compile","$injector",function(a,b,c,d){a.$apply(function(){b.data("$injector",d);c(b)(a)})}]);return c},e=/^NG_ENABLE_DEBUG_INFO!/,f=/^NG_DEFER_BOOTSTRAP!/;v&&e.test(v.name)&&(d.debugInfoEnabled=!0,v.name=v.name.replace(e,""));if(v&&!f.test(v.name))return c();v.name=v.name.replace(f,"");ea.resumeBootstrap=function(a){q(a,function(a){b.push(a)});return c()};E(ea.resumeDeferredBootstrap)&&ea.resumeDeferredBootstrap()}function fe(){v.name=
	"NG_ENABLE_DEBUG_INFO!"+v.name;v.location.reload()}function ge(a){a=ea.element(a).injector();if(!a)throw Aa("test");return a.get("$$testability")}function zc(a,b){b=b||"_";return a.replace(he,function(a,c){return(c?b:"")+a.toLowerCase()})}function ie(){var a;if(!Ac){var b=pb();(Z=y(b)?v.jQuery:b?v[b]:void 0)&&Z.fn.on?(B=Z,R(Z.fn,{scope:Oa.scope,isolateScope:Oa.isolateScope,controller:Oa.controller,injector:Oa.injector,inheritedData:Oa.inheritedData}),a=Z.cleanData,Z.cleanData=function(b){for(var c,
	e=0,f;null!=(f=b[e]);e++)(c=Z._data(f,"events"))&&c.$destroy&&Z(f).triggerHandler("$destroy");a(b)}):B=U;ea.element=B;Ac=!0}}function qb(a,b,d){if(!a)throw Aa("areq",b||"?",d||"required");return a}function Pa(a,b,d){d&&K(a)&&(a=a[a.length-1]);qb(E(a),b,"not a function, got "+(a&&"object"===typeof a?a.constructor.name||"Object":typeof a));return a}function Qa(a,b){if("hasOwnProperty"===a)throw Aa("badname",b);}function Bc(a,b,d){if(!b)return a;b=b.split(".");for(var c,e=a,f=b.length,g=0;g<f;g++)c=
	b[g],a&&(a=(e=a)[c]);return!d&&E(a)?tc(e,a):a}function rb(a){for(var b=a[0],d=a[a.length-1],c,e=1;b!==d&&(b=b.nextSibling);e++)if(c||a[e]!==b)c||(c=B(za.call(a,0,e))),c.push(b);return c||a}function T(){return Object.create(null)}function je(a){function b(a,b,c){return a[b]||(a[b]=c())}var d=O("$injector"),c=O("ng");a=b(a,"angular",Object);a.$$minErr=a.$$minErr||O;return b(a,"module",function(){var a={};return function(f,g,h){if("hasOwnProperty"===f)throw c("badname","module");g&&a.hasOwnProperty(f)&&
	(a[f]=null);return b(a,f,function(){function a(b,d,e,f){f||(f=c);return function(){f[e||"push"]([b,d,arguments]);return M}}function b(a,d){return function(b,e){e&&E(e)&&(e.$$moduleName=f);c.push([a,d,arguments]);return M}}if(!g)throw d("nomod",f);var c=[],e=[],r=[],N=a("$injector","invoke","push",e),M={_invokeQueue:c,_configBlocks:e,_runBlocks:r,requires:g,name:f,provider:b("$provide","provider"),factory:b("$provide","factory"),service:b("$provide","service"),value:a("$provide","value"),constant:a("$provide",
	"constant","unshift"),decorator:b("$provide","decorator"),animation:b("$animateProvider","register"),filter:b("$filterProvider","register"),controller:b("$controllerProvider","register"),directive:b("$compileProvider","directive"),component:b("$compileProvider","component"),config:N,run:function(a){r.push(a);return this}};h&&N(h);return M})}})}function ke(a){R(a,{bootstrap:yc,copy:qa,extend:R,merge:Yd,equals:pa,element:B,forEach:q,injector:bb,noop:C,bind:tc,toJson:ab,fromJson:uc,identity:Xa,isUndefined:y,
	isDefined:x,isString:F,isFunction:E,isObject:G,isNumber:Q,isElement:Ob,isArray:K,version:le,isDate:fa,lowercase:P,uppercase:sb,callbacks:{counter:0},getTestability:ge,$$minErr:O,$$csp:Ea,reloadWithDebugInfo:fe});Sb=je(v);Sb("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:me});a.provider("$compile",Cc).directive({a:ne,input:Dc,textarea:Dc,form:oe,script:pe,select:qe,style:re,option:se,ngBind:te,ngBindHtml:ue,ngBindTemplate:ve,ngClass:we,ngClassEven:xe,ngClassOdd:ye,ngCloak:ze,ngController:Ae,
	ngForm:Be,ngHide:Ce,ngIf:De,ngInclude:Ee,ngInit:Fe,ngNonBindable:Ge,ngPluralize:He,ngRepeat:Ie,ngShow:Je,ngStyle:Ke,ngSwitch:Le,ngSwitchWhen:Me,ngSwitchDefault:Ne,ngOptions:Oe,ngTransclude:Pe,ngModel:Qe,ngList:Re,ngChange:Se,pattern:Ec,ngPattern:Ec,required:Fc,ngRequired:Fc,minlength:Gc,ngMinlength:Gc,maxlength:Hc,ngMaxlength:Hc,ngValue:Te,ngModelOptions:Ue}).directive({ngInclude:Ve}).directive(tb).directive(Ic);a.provider({$anchorScroll:We,$animate:Xe,$animateCss:Ye,$$animateJs:Ze,$$animateQueue:$e,
	$$AnimateRunner:af,$$animateAsyncRun:bf,$browser:cf,$cacheFactory:df,$controller:ef,$document:ff,$exceptionHandler:gf,$filter:Jc,$$forceReflow:hf,$interpolate:jf,$interval:kf,$http:lf,$httpParamSerializer:mf,$httpParamSerializerJQLike:nf,$httpBackend:of,$xhrFactory:pf,$location:qf,$log:rf,$parse:sf,$rootScope:tf,$q:uf,$$q:vf,$sce:wf,$sceDelegate:xf,$sniffer:yf,$templateCache:zf,$templateRequest:Af,$$testability:Bf,$timeout:Cf,$window:Df,$$rAF:Ef,$$jqLite:Ff,$$HashMap:Gf,$$cookieReader:Hf})}])}function cb(a){return a.replace(If,
	function(a,d,c,e){return e?c.toUpperCase():c}).replace(Jf,"Moz$1")}function Kc(a){a=a.nodeType;return 1===a||!a||9===a}function Lc(a,b){var d,c,e=b.createDocumentFragment(),f=[];if(Tb.test(a)){d=d||e.appendChild(b.createElement("div"));c=(Kf.exec(a)||["",""])[1].toLowerCase();c=ia[c]||ia._default;d.innerHTML=c[1]+a.replace(Lf,"<$1></$2>")+c[2];for(c=c[0];c--;)d=d.lastChild;f=$a(f,d.childNodes);d=e.firstChild;d.textContent=""}else f.push(b.createTextNode(a));e.textContent="";e.innerHTML="";q(f,function(a){e.appendChild(a)});
	return e}function Mc(a,b){var d=a.parentNode;d&&d.replaceChild(b,a);b.appendChild(a)}function U(a){if(a instanceof U)return a;var b;F(a)&&(a=V(a),b=!0);if(!(this instanceof U)){if(b&&"<"!=a.charAt(0))throw Ub("nosel");return new U(a)}if(b){b=v.document;var d;a=(d=Mf.exec(a))?[b.createElement(d[1])]:(d=Lc(a,b))?d.childNodes:[]}Nc(this,a)}function Vb(a){return a.cloneNode(!0)}function ub(a,b){b||db(a);if(a.querySelectorAll)for(var d=a.querySelectorAll("*"),c=0,e=d.length;c<e;c++)db(d[c])}function Oc(a,
	b,d,c){if(x(c))throw Ub("offargs");var e=(c=vb(a))&&c.events,f=c&&c.handle;if(f)if(b){var g=function(b){var c=e[b];x(d)&&Za(c||[],d);x(d)&&c&&0<c.length||(a.removeEventListener(b,f,!1),delete e[b])};q(b.split(" "),function(a){g(a);wb[a]&&g(wb[a])})}else for(b in e)"$destroy"!==b&&a.removeEventListener(b,f,!1),delete e[b]}function db(a,b){var d=a.ng339,c=d&&eb[d];c&&(b?delete c.data[b]:(c.handle&&(c.events.$destroy&&c.handle({},"$destroy"),Oc(a)),delete eb[d],a.ng339=void 0))}function vb(a,b){var d=
	a.ng339,d=d&&eb[d];b&&!d&&(a.ng339=d=++Nf,d=eb[d]={events:{},data:{},handle:void 0});return d}function Wb(a,b,d){if(Kc(a)){var c=x(d),e=!c&&b&&!G(b),f=!b;a=(a=vb(a,!e))&&a.data;if(c)a[b]=d;else{if(f)return a;if(e)return a&&a[b];R(a,b)}}}function xb(a,b){return a.getAttribute?-1<(" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+b+" "):!1}function yb(a,b){b&&a.setAttribute&&q(b.split(" "),function(b){a.setAttribute("class",V((" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g,
	" ").replace(" "+V(b)+" "," ")))})}function zb(a,b){if(b&&a.setAttribute){var d=(" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");q(b.split(" "),function(a){a=V(a);-1===d.indexOf(" "+a+" ")&&(d+=a+" ")});a.setAttribute("class",V(d))}}function Nc(a,b){if(b)if(b.nodeType)a[a.length++]=b;else{var d=b.length;if("number"===typeof d&&b.window!==b){if(d)for(var c=0;c<d;c++)a[a.length++]=b[c]}else a[a.length++]=b}}function Pc(a,b){return Ab(a,"$"+(b||"ngController")+"Controller")}function Ab(a,
	b,d){9==a.nodeType&&(a=a.documentElement);for(b=K(b)?b:[b];a;){for(var c=0,e=b.length;c<e;c++)if(x(d=B.data(a,b[c])))return d;a=a.parentNode||11===a.nodeType&&a.host}}function Qc(a){for(ub(a,!0);a.firstChild;)a.removeChild(a.firstChild)}function Bb(a,b){b||ub(a);var d=a.parentNode;d&&d.removeChild(a)}function Of(a,b){b=b||v;if("complete"===b.document.readyState)b.setTimeout(a);else B(b).on("load",a)}function Rc(a,b){var d=Cb[b.toLowerCase()];return d&&Sc[va(a)]&&d}function Pf(a,b){var d=function(c,
	d){c.isDefaultPrevented=function(){return c.defaultPrevented};var f=b[d||c.type],g=f?f.length:0;if(g){if(y(c.immediatePropagationStopped)){var h=c.stopImmediatePropagation;c.stopImmediatePropagation=function(){c.immediatePropagationStopped=!0;c.stopPropagation&&c.stopPropagation();h&&h.call(c)}}c.isImmediatePropagationStopped=function(){return!0===c.immediatePropagationStopped};var k=f.specialHandlerWrapper||Qf;1<g&&(f=ha(f));for(var l=0;l<g;l++)c.isImmediatePropagationStopped()||k(a,c,f[l])}};d.elem=
	a;return d}function Qf(a,b,d){d.call(a,b)}function Rf(a,b,d){var c=b.relatedTarget;c&&(c===a||Sf.call(a,c))||d.call(a,b)}function Ff(){this.$get=function(){return R(U,{hasClass:function(a,b){a.attr&&(a=a[0]);return xb(a,b)},addClass:function(a,b){a.attr&&(a=a[0]);return zb(a,b)},removeClass:function(a,b){a.attr&&(a=a[0]);return yb(a,b)}})}}function Fa(a,b){var d=a&&a.$$hashKey;if(d)return"function"===typeof d&&(d=a.$$hashKey()),d;d=typeof a;return d="function"==d||"object"==d&&null!==a?a.$$hashKey=
	d+":"+(b||Xd)():d+":"+a}function Ra(a,b){if(b){var d=0;this.nextUid=function(){return++d}}q(a,this.put,this)}function Tc(a){a=Function.prototype.toString.call(a).replace(Tf,"");return a.match(Uf)||a.match(Vf)}function Wf(a){return(a=Tc(a))?"function("+(a[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function bb(a,b){function d(a){return function(b,c){if(G(b))q(b,qc(a));else return a(b,c)}}function c(a,b){Qa(a,"service");if(E(b)||K(b))b=r.instantiate(b);if(!b.$get)throw Ga("pget",a);return m[a+"Provider"]=
	b}function e(a,b){return function(){var c=w.invoke(b,this);if(y(c))throw Ga("undef",a);return c}}function f(a,b,d){return c(a,{$get:!1!==d?e(a,b):b})}function g(a){qb(y(a)||K(a),"modulesToLoad","not an array");var b=[],c;q(a,function(a){function d(a){var b,c;b=0;for(c=a.length;b<c;b++){var e=a[b],f=r.get(e[0]);f[e[1]].apply(f,e[2])}}if(!n.get(a)){n.put(a,!0);try{F(a)?(c=Sb(a),b=b.concat(g(c.requires)).concat(c._runBlocks),d(c._invokeQueue),d(c._configBlocks)):E(a)?b.push(r.invoke(a)):K(a)?b.push(r.invoke(a)):
	Pa(a,"module")}catch(e){throw K(a)&&(a=a[a.length-1]),e.message&&e.stack&&-1==e.stack.indexOf(e.message)&&(e=e.message+"\n"+e.stack),Ga("modulerr",a,e.stack||e.message||e);}}});return b}function h(a,c){function d(b,e){if(a.hasOwnProperty(b)){if(a[b]===k)throw Ga("cdep",b+" <- "+l.join(" <- "));return a[b]}try{return l.unshift(b),a[b]=k,a[b]=c(b,e)}catch(f){throw a[b]===k&&delete a[b],f;}finally{l.shift()}}function e(a,c,f){var g=[];a=bb.$$annotate(a,b,f);for(var h=0,k=a.length;h<k;h++){var l=a[h];
	if("string"!==typeof l)throw Ga("itkn",l);g.push(c&&c.hasOwnProperty(l)?c[l]:d(l,f))}return g}return{invoke:function(a,b,c,d){"string"===typeof c&&(d=c,c=null);c=e(a,c,d);K(a)&&(a=a[a.length-1]);d=11>=Ca?!1:"function"===typeof a&&/^(?:class\s|constructor\()/.test(Function.prototype.toString.call(a));return d?(c.unshift(null),new (Function.prototype.bind.apply(a,c))):a.apply(b,c)},instantiate:function(a,b,c){var d=K(a)?a[a.length-1]:a;a=e(a,b,c);a.unshift(null);return new (Function.prototype.bind.apply(d,
	a))},get:d,annotate:bb.$$annotate,has:function(b){return m.hasOwnProperty(b+"Provider")||a.hasOwnProperty(b)}}}b=!0===b;var k={},l=[],n=new Ra([],!0),m={$provide:{provider:d(c),factory:d(f),service:d(function(a,b){return f(a,["$injector",function(a){return a.instantiate(b)}])}),value:d(function(a,b){return f(a,da(b),!1)}),constant:d(function(a,b){Qa(a,"constant");m[a]=b;N[a]=b}),decorator:function(a,b){var c=r.get(a+"Provider"),d=c.$get;c.$get=function(){var a=w.invoke(d,c);return w.invoke(b,null,
	{$delegate:a})}}}},r=m.$injector=h(m,function(a,b){ea.isString(b)&&l.push(b);throw Ga("unpr",l.join(" <- "));}),N={},M=h(N,function(a,b){var c=r.get(a+"Provider",b);return w.invoke(c.$get,c,void 0,a)}),w=M;m.$injectorProvider={$get:da(M)};var p=g(a),w=M.get("$injector");w.strictDi=b;q(p,function(a){a&&w.invoke(a)});return w}function We(){var a=!0;this.disableAutoScrolling=function(){a=!1};this.$get=["$window","$location","$rootScope",function(b,d,c){function e(a){var b=null;Array.prototype.some.call(a,
	function(a){if("a"===va(a))return b=a,!0});return b}function f(a){if(a){a.scrollIntoView();var c;c=g.yOffset;E(c)?c=c():Ob(c)?(c=c[0],c="fixed"!==b.getComputedStyle(c).position?0:c.getBoundingClientRect().bottom):Q(c)||(c=0);c&&(a=a.getBoundingClientRect().top,b.scrollBy(0,a-c))}else b.scrollTo(0,0)}function g(a){a=F(a)?a:d.hash();var b;a?(b=h.getElementById(a))?f(b):(b=e(h.getElementsByName(a)))?f(b):"top"===a&&f(null):f(null)}var h=b.document;a&&c.$watch(function(){return d.hash()},function(a,b){a===
	b&&""===a||Of(function(){c.$evalAsync(g)})});return g}]}function fb(a,b){if(!a&&!b)return"";if(!a)return b;if(!b)return a;K(a)&&(a=a.join(" "));K(b)&&(b=b.join(" "));return a+" "+b}function Xf(a){F(a)&&(a=a.split(" "));var b=T();q(a,function(a){a.length&&(b[a]=!0)});return b}function Ha(a){return G(a)?a:{}}function Yf(a,b,d,c){function e(a){try{a.apply(null,za.call(arguments,1))}finally{if(M--,0===M)for(;w.length;)try{w.pop()()}catch(b){d.error(b)}}}function f(){u=null;g();h()}function g(){p=I();
	p=y(p)?null:p;pa(p,L)&&(p=L);L=p}function h(){if(t!==k.url()||H!==p)t=k.url(),H=p,q(J,function(a){a(k.url(),p)})}var k=this,l=a.location,n=a.history,m=a.setTimeout,r=a.clearTimeout,N={};k.isMock=!1;var M=0,w=[];k.$$completeOutstandingRequest=e;k.$$incOutstandingRequestCount=function(){M++};k.notifyWhenNoOutstandingRequests=function(a){0===M?a():w.push(a)};var p,H,t=l.href,z=b.find("base"),u=null,I=c.history?function(){try{return n.state}catch(a){}}:C;g();H=p;k.url=function(b,d,e){y(e)&&(e=null);l!==
	a.location&&(l=a.location);n!==a.history&&(n=a.history);if(b){var f=H===e;if(t===b&&(!c.history||f))return k;var h=t&&Ia(t)===Ia(b);t=b;H=e;if(!c.history||h&&f){if(!h||u)u=b;d?l.replace(b):h?(d=l,e=b.indexOf("#"),e=-1===e?"":b.substr(e),d.hash=e):l.href=b;l.href!==b&&(u=b)}else n[d?"replaceState":"pushState"](e,"",b),g(),H=p;return k}return u||l.href.replace(/%27/g,"'")};k.state=function(){return p};var J=[],D=!1,L=null;k.onUrlChange=function(b){if(!D){if(c.history)B(a).on("popstate",f);B(a).on("hashchange",
	f);D=!0}J.push(b);return b};k.$$applicationDestroyed=function(){B(a).off("hashchange popstate",f)};k.$$checkUrlChange=h;k.baseHref=function(){var a=z.attr("href");return a?a.replace(/^(https?\:)?\/\/[^\/]*/,""):""};k.defer=function(a,b){var c;M++;c=m(function(){delete N[c];e(a)},b||0);N[c]=!0;return c};k.defer.cancel=function(a){return N[a]?(delete N[a],r(a),e(C),!0):!1}}function cf(){this.$get=["$window","$log","$sniffer","$document",function(a,b,d,c){return new Yf(a,c,b,d)}]}function df(){this.$get=
	function(){function a(a,c){function e(a){a!=m&&(r?r==a&&(r=a.n):r=a,f(a.n,a.p),f(a,m),m=a,m.n=null)}function f(a,b){a!=b&&(a&&(a.p=b),b&&(b.n=a))}if(a in b)throw O("$cacheFactory")("iid",a);var g=0,h=R({},c,{id:a}),k=T(),l=c&&c.capacity||Number.MAX_VALUE,n=T(),m=null,r=null;return b[a]={put:function(a,b){if(!y(b)){if(l<Number.MAX_VALUE){var c=n[a]||(n[a]={key:a});e(c)}a in k||g++;k[a]=b;g>l&&this.remove(r.key);return b}},get:function(a){if(l<Number.MAX_VALUE){var b=n[a];if(!b)return;e(b)}return k[a]},
	remove:function(a){if(l<Number.MAX_VALUE){var b=n[a];if(!b)return;b==m&&(m=b.p);b==r&&(r=b.n);f(b.n,b.p);delete n[a]}a in k&&(delete k[a],g--)},removeAll:function(){k=T();g=0;n=T();m=r=null},destroy:function(){n=h=k=null;delete b[a]},info:function(){return R({},h,{size:g})}}}var b={};a.info=function(){var a={};q(b,function(b,e){a[e]=b.info()});return a};a.get=function(a){return b[a]};return a}}function zf(){this.$get=["$cacheFactory",function(a){return a("templates")}]}function Cc(a,b){function d(a,
	b,c){var d=/^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/,e=T();q(a,function(a,f){if(a in n)e[f]=n[a];else{var g=a.match(d);if(!g)throw ga("iscp",b,f,a,c?"controller bindings definition":"isolate scope definition");e[f]={mode:g[1][0],collection:"*"===g[2],optional:"?"===g[3],attrName:g[4]||f};g[4]&&(n[a]=e[f])}});return e}function c(a){var b=a.charAt(0);if(!b||b!==P(b))throw ga("baddir",a);if(a!==a.trim())throw ga("baddir",a);}var e={},f=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,g=/(([\w\-]+)(?:\:([^;]+))?;?)/,
	h=ae("ngSrc,ngSrcset,src,srcset"),k=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,l=/^(on[a-z]+|formaction)$/,n=T();this.directive=function M(b,d){Qa(b,"directive");F(b)?(c(b),qb(d,"directiveFactory"),e.hasOwnProperty(b)||(e[b]=[],a.factory(b+"Directive",["$injector","$exceptionHandler",function(a,c){var d=[];q(e[b],function(e,f){try{var g=a.invoke(e);E(g)?g={compile:da(g)}:!g.compile&&g.link&&(g.compile=da(g.link));g.priority=g.priority||0;g.index=f;g.name=g.name||b;g.require=g.require||g.controller&&g.name;g.restrict=
	g.restrict||"EA";g.$$moduleName=e.$$moduleName;d.push(g)}catch(h){c(h)}});return d}])),e[b].push(d)):q(b,qc(M));return this};this.component=function(a,b){function c(a){function e(b){return E(b)||K(b)?function(c,d){return a.invoke(b,this,{$element:c,$attrs:d})}:b}var f=b.template||b.templateUrl?b.template:"",g={controller:d,controllerAs:Uc(b.controller)||b.controllerAs||"$ctrl",template:e(f),templateUrl:e(b.templateUrl),transclude:b.transclude,scope:{},bindToController:b.bindings||{},restrict:"E",
	require:b.require};q(b,function(a,b){"$"===b.charAt(0)&&(g[b]=a)});return g}var d=b.controller||function(){};q(b,function(a,b){"$"===b.charAt(0)&&(c[b]=a,E(d)&&(d[b]=a))});c.$inject=["$injector"];return this.directive(a,c)};this.aHrefSanitizationWhitelist=function(a){return x(a)?(b.aHrefSanitizationWhitelist(a),this):b.aHrefSanitizationWhitelist()};this.imgSrcSanitizationWhitelist=function(a){return x(a)?(b.imgSrcSanitizationWhitelist(a),this):b.imgSrcSanitizationWhitelist()};var m=!0;this.debugInfoEnabled=
	function(a){return x(a)?(m=a,this):m};var r=10;this.onChangesTtl=function(a){return arguments.length?(r=a,this):r};this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(a,b,c,n,t,z,u,I,J,D){function L(){try{if(!--qa)throw Z=void 0,ga("infchng",r);u.$apply(function(){for(var a=0,b=Z.length;a<b;++a)Z[a]();Z=void 0})}finally{qa++}}function S(a,b){if(b){var c=Object.keys(b),d,e,f;d=0;for(e=c.length;d<
	e;d++)f=c[d],this[f]=b[f]}else this.$attr={};this.$$element=a}function $(a,b,c){na.innerHTML="<span "+b+">";b=na.firstChild.attributes;var d=b[0];b.removeNamedItem(d.name);d.value=c;a.attributes.setNamedItem(d)}function A(a,b){try{a.addClass(b)}catch(c){}}function ba(a,b,c,d,e){a instanceof B||(a=B(a));for(var f=/\S+/,g=0,h=a.length;g<h;g++){var k=a[g];k.nodeType===Ma&&k.nodeValue.match(f)&&Mc(k,a[g]=v.document.createElement("span"))}var l=s(a,b,a,c,d,e);ba.$$addScopeClass(a);var m=null;return function(b,
	c,d){qb(b,"scope");e&&e.needsNewScope&&(b=b.$parent.$new());d=d||{};var f=d.parentBoundTranscludeFn,g=d.transcludeControllers;d=d.futureParentElement;f&&f.$$boundTransclude&&(f=f.$$boundTransclude);m||(m=(d=d&&d[0])?"foreignobject"!==va(d)&&ma.call(d).match(/SVG/)?"svg":"html":"html");d="html"!==m?B(ca(m,B("<div>").append(a).html())):c?Oa.clone.call(a):a;if(g)for(var h in g)d.data("$"+h+"Controller",g[h].instance);ba.$$addScopeInfo(d,b);c&&c(d,b);l&&l(b,d,d,f);return d}}function s(a,b,c,d,e,f){function g(a,
	c,d,e){var f,k,l,m,n,t,p;if(r)for(p=Array(c.length),m=0;m<h.length;m+=3)f=h[m],p[f]=c[f];else p=c;m=0;for(n=h.length;m<n;)k=p[h[m++]],c=h[m++],f=h[m++],c?(c.scope?(l=a.$new(),ba.$$addScopeInfo(B(k),l)):l=a,t=c.transcludeOnThisElement?ka(a,c.transclude,e):!c.templateOnThisElement&&e?e:!e&&b?ka(a,b):null,c(f,l,k,d,t)):f&&f(a,k.childNodes,void 0,e)}for(var h=[],k,l,m,n,r,t=0;t<a.length;t++){k=new S;l=x(a[t],[],k,0===t?d:void 0,e);(f=l.length?Ba(l,a[t],k,b,c,null,[],[],f):null)&&f.scope&&ba.$$addScopeClass(k.$$element);
	k=f&&f.terminal||!(m=a[t].childNodes)||!m.length?null:s(m,f?(f.transcludeOnThisElement||!f.templateOnThisElement)&&f.transclude:b);if(f||k)h.push(t,f,k),n=!0,r=r||f;f=null}return n?g:null}function ka(a,b,c){function d(e,f,g,h,k){e||(e=a.$new(!1,k),e.$$transcluded=!0);return b(e,f,{parentBoundTranscludeFn:c,transcludeControllers:g,futureParentElement:h})}var e=d.$$slots=T(),f;for(f in b.$$slots)e[f]=b.$$slots[f]?ka(a,b.$$slots[f],c):null;return d}function x(a,b,c,d,e){var h=c.$attr,k;switch(a.nodeType){case 1:la(b,
	xa(va(a)),"E",d,e);for(var l,m,n,t=a.attributes,r=0,p=t&&t.length;r<p;r++){var I=!1,D=!1;l=t[r];k=l.name;m=V(l.value);l=xa(k);if(n=ya.test(l))k=k.replace(Vc,"").substr(8).replace(/_(.)/g,function(a,b){return b.toUpperCase()});(l=l.match(Aa))&&Q(l[1])&&(I=k,D=k.substr(0,k.length-5)+"end",k=k.substr(0,k.length-6));l=xa(k.toLowerCase());h[l]=k;if(n||!c.hasOwnProperty(l))c[l]=m,Rc(a,l)&&(c[l]=!0);fa(a,b,m,l,n);la(b,l,"A",d,e,I,D)}a=a.className;G(a)&&(a=a.animVal);if(F(a)&&""!==a)for(;k=g.exec(a);)l=xa(k[2]),
	la(b,l,"C",d,e)&&(c[l]=V(k[3])),a=a.substr(k.index+k[0].length);break;case Ma:if(11===Ca)for(;a.parentNode&&a.nextSibling&&a.nextSibling.nodeType===Ma;)a.nodeValue+=a.nextSibling.nodeValue,a.parentNode.removeChild(a.nextSibling);X(b,a.nodeValue);break;case 8:try{if(k=f.exec(a.nodeValue))l=xa(k[1]),la(b,l,"M",d,e)&&(c[l]=V(k[2]))}catch(J){}}b.sort(Y);return b}function Wc(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw ga("uterdir",b,c);1==a.nodeType&&(a.hasAttribute(b)&&
	e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return B(d)}function Xc(a,b,c){return function(d,e,f,g,h){e=Wc(e[0],b,c);return a(d,e,f,g,h)}}function Yb(a,b,c,d,e,f){var g;return a?ba(b,c,d,e,f):function(){g||(g=ba(b,c,d,e,f),b=c=f=null);return g.apply(this,arguments)}}function Ba(a,b,d,e,f,g,h,k,l){function m(a,b,c,d){if(a){c&&(a=Xc(a,c,d));a.require=A.require;a.directiveName=M;if(D===A||A.$$isolateScope)a=ha(a,{isolateScope:!0});h.push(a)}if(b){c&&(b=Xc(b,c,d));
	b.require=A.require;b.directiveName=M;if(D===A||A.$$isolateScope)b=ha(b,{isolateScope:!0});k.push(b)}}function n(a,c,e,f,g){function l(a,b,c,d){var e;Ya(a)||(d=c,c=b,b=a,a=void 0);H&&(e=u);c||(c=H?z.parent():z);if(d){var f=g.$$slots[d];if(f)return f(a,b,e,c,$);if(y(f))throw ga("noslot",d,wa(z));}else return g(a,b,e,c,$)}var m,t,p,A,w,u,L,z;b===e?(f=d,z=d.$$element):(z=B(e),f=new S(z,d));w=c;D?A=c.$new(!0):r&&(w=c.$parent);g&&(L=l,L.$$boundTransclude=g,L.isSlotFilled=function(a){return!!g.$$slots[a]});
	I&&(u=O(z,f,L,I,A,c,D));D&&(ba.$$addScopeInfo(z,A,!0,!(J&&(J===D||J===D.$$originalDirective))),ba.$$addScopeClass(z,!0),A.$$isolateBindings=D.$$isolateBindings,t=ia(c,f,A,A.$$isolateBindings,D),t.removeWatches&&A.$on("$destroy",t.removeWatches));for(m in u){t=I[m];p=u[m];var Xb=t.$$bindings.bindToController;p.bindingInfo=p.identifier&&Xb?ia(w,f,p.instance,Xb,t):{};var M=p();M!==p.instance&&(p.instance=M,z.data("$"+t.name+"Controller",M),p.bindingInfo.removeWatches&&p.bindingInfo.removeWatches(),p.bindingInfo=
	ia(w,f,p.instance,Xb,t))}q(I,function(a,b){var c=a.require;a.bindToController&&!K(c)&&G(c)&&R(u[b].instance,gb(b,c,z,u))});q(u,function(a){var b=a.instance;E(b.$onChanges)&&b.$onChanges(a.bindingInfo.initialChanges);E(b.$onInit)&&b.$onInit();E(b.$onDestroy)&&w.$on("$destroy",function(){b.$onDestroy()})});m=0;for(t=h.length;m<t;m++)p=h[m],ja(p,p.isolateScope?A:c,z,f,p.require&&gb(p.directiveName,p.require,z,u),L);var $=c;D&&(D.template||null===D.templateUrl)&&($=A);a&&a($,e.childNodes,void 0,g);for(m=
	k.length-1;0<=m;m--)p=k[m],ja(p,p.isolateScope?A:c,z,f,p.require&&gb(p.directiveName,p.require,z,u),L);q(u,function(a){a=a.instance;E(a.$postLink)&&a.$postLink()})}l=l||{};for(var t=-Number.MAX_VALUE,r=l.newScopeDirective,I=l.controllerDirectives,D=l.newIsolateScopeDirective,J=l.templateDirective,w=l.nonTlbTranscludeDirective,u=!1,L=!1,H=l.hasElementTranscludeDirective,z=d.$$element=B(b),A,M,$,s=e,Sa,ka=!1,C=!1,v,F=0,Ba=a.length;F<Ba;F++){A=a[F];var P=A.$$start,Q=A.$$end;P&&(z=Wc(b,P,Q));$=void 0;
	if(t>A.priority)break;if(v=A.scope)A.templateUrl||(G(v)?(W("new/isolated scope",D||r,A,z),D=A):W("new/isolated scope",D,A,z)),r=r||A;M=A.name;if(!ka&&(A.replace&&(A.templateUrl||A.template)||A.transclude&&!A.$$tlb)){for(v=F+1;ka=a[v++];)if(ka.transclude&&!ka.$$tlb||ka.replace&&(ka.templateUrl||ka.template)){C=!0;break}ka=!0}!A.templateUrl&&A.controller&&(v=A.controller,I=I||T(),W("'"+M+"' controller",I[M],A,z),I[M]=A);if(v=A.transclude)if(u=!0,A.$$tlb||(W("transclusion",w,A,z),w=A),"element"==v)H=
	!0,t=A.priority,$=z,z=d.$$element=B(ba.$$createComment(M,d[M])),b=z[0],da(f,za.call($,0),b),$[0].$$parentNode=$[0].parentNode,s=Yb(C,$,e,t,g&&g.name,{nonTlbTranscludeDirective:w});else{var la=T();$=B(Vb(b)).contents();if(G(v)){$=[];var Y=T(),X=T();q(v,function(a,b){var c="?"===a.charAt(0);a=c?a.substring(1):a;Y[a]=b;la[b]=null;X[b]=c});q(z.contents(),function(a){var b=Y[xa(va(a))];b?(X[b]=!0,la[b]=la[b]||[],la[b].push(a)):$.push(a)});q(X,function(a,b){if(!a)throw ga("reqslot",b);});for(var Z in la)la[Z]&&
	(la[Z]=Yb(C,la[Z],e))}z.empty();s=Yb(C,$,e,void 0,void 0,{needsNewScope:A.$$isolateScope||A.$$newScope});s.$$slots=la}if(A.template)if(L=!0,W("template",J,A,z),J=A,v=E(A.template)?A.template(z,d):A.template,v=ta(v),A.replace){g=A;$=Tb.test(v)?Yc(ca(A.templateNamespace,V(v))):[];b=$[0];if(1!=$.length||1!==b.nodeType)throw ga("tplrt",M,"");da(f,z,b);Ba={$attr:{}};v=x(b,[],Ba);var ea=a.splice(F+1,a.length-(F+1));(D||r)&&Zc(v,D,r);a=a.concat(v).concat(ea);U(d,Ba);Ba=a.length}else z.html(v);if(A.templateUrl)L=
	!0,W("template",J,A,z),J=A,A.replace&&(g=A),n=aa(a.splice(F,a.length-F),z,d,f,u&&s,h,k,{controllerDirectives:I,newScopeDirective:r!==A&&r,newIsolateScopeDirective:D,templateDirective:J,nonTlbTranscludeDirective:w}),Ba=a.length;else if(A.compile)try{Sa=A.compile(z,d,s),E(Sa)?m(null,Sa,P,Q):Sa&&m(Sa.pre,Sa.post,P,Q)}catch(fa){c(fa,wa(z))}A.terminal&&(n.terminal=!0,t=Math.max(t,A.priority))}n.scope=r&&!0===r.scope;n.transcludeOnThisElement=u;n.templateOnThisElement=L;n.transclude=s;l.hasElementTranscludeDirective=
	H;return n}function gb(a,b,c,d){var e;if(F(b)){var f=b.match(k);b=b.substring(f[0].length);var g=f[1]||f[3],f="?"===f[2];"^^"===g?c=c.parent():e=(e=d&&d[b])&&e.instance;if(!e){var h="$"+b+"Controller";e=g?c.inheritedData(h):c.data(h)}if(!e&&!f)throw ga("ctreq",b,a);}else if(K(b))for(e=[],g=0,f=b.length;g<f;g++)e[g]=gb(a,b[g],c,d);else G(b)&&(e={},q(b,function(b,f){e[f]=gb(a,b,c,d)}));return e||null}function O(a,b,c,d,e,f,g){var h=T(),k;for(k in d){var l=d[k],m={$scope:l===g||l.$$isolateScope?e:f,
	$element:a,$attrs:b,$transclude:c},n=l.controller;"@"==n&&(n=b[l.name]);m=z(n,m,!0,l.controllerAs);h[l.name]=m;a.data("$"+l.name+"Controller",m.instance)}return h}function Zc(a,b,c){for(var d=0,e=a.length;d<e;d++)a[d]=Pb(a[d],{$$isolateScope:b,$$newScope:c})}function la(b,f,g,h,k,l,m){if(f===k)return null;k=null;if(e.hasOwnProperty(f)){var n;f=a.get(f+"Directive");for(var t=0,r=f.length;t<r;t++)try{if(n=f[t],(y(h)||h>n.priority)&&-1!=n.restrict.indexOf(g)){l&&(n=Pb(n,{$$start:l,$$end:m}));if(!n.$$bindings){var I=
	n,D=n,A=n.name,J={isolateScope:null,bindToController:null};G(D.scope)&&(!0===D.bindToController?(J.bindToController=d(D.scope,A,!0),J.isolateScope={}):J.isolateScope=d(D.scope,A,!1));G(D.bindToController)&&(J.bindToController=d(D.bindToController,A,!0));if(G(J.bindToController)){var w=D.controller,z=D.controllerAs;if(!w)throw ga("noctrl",A);if(!Uc(w,z))throw ga("noident",A);}var u=I.$$bindings=J;G(u.isolateScope)&&(n.$$isolateBindings=u.isolateScope)}b.push(n);k=n}}catch(L){c(L)}}return k}function Q(b){if(e.hasOwnProperty(b))for(var c=
	a.get(b+"Directive"),d=0,f=c.length;d<f;d++)if(b=c[d],b.multiElement)return!0;return!1}function U(a,b){var c=b.$attr,d=a.$attr,e=a.$$element;q(a,function(d,e){"$"!=e.charAt(0)&&(b[e]&&b[e]!==d&&(d+=("style"===e?";":" ")+b[e]),a.$set(e,d,!0,c[e]))});q(b,function(b,f){"class"==f?(A(e,b),a["class"]=(a["class"]?a["class"]+" ":"")+b):"style"==f?(e.attr("style",e.attr("style")+";"+b),a.style=(a.style?a.style+";":"")+b):"$"==f.charAt(0)||a.hasOwnProperty(f)||(a[f]=b,d[f]=c[f])})}function aa(a,b,c,d,e,f,
	g,h){var k=[],l,m,t=b[0],p=a.shift(),r=Pb(p,{templateUrl:null,transclude:null,replace:null,$$originalDirective:p}),I=E(p.templateUrl)?p.templateUrl(b,c):p.templateUrl,D=p.templateNamespace;b.empty();n(I).then(function(n){var J,w;n=ta(n);if(p.replace){n=Tb.test(n)?Yc(ca(D,V(n))):[];J=n[0];if(1!=n.length||1!==J.nodeType)throw ga("tplrt",p.name,I);n={$attr:{}};da(d,b,J);var z=x(J,[],n);G(p.scope)&&Zc(z,!0);a=z.concat(a);U(c,n)}else J=t,b.html(n);a.unshift(r);l=Ba(a,J,c,e,b,p,f,g,h);q(d,function(a,c){a==
	J&&(d[c]=b[0])});for(m=s(b[0].childNodes,e);k.length;){n=k.shift();w=k.shift();var u=k.shift(),L=k.shift(),z=b[0];if(!n.$$destroyed){if(w!==t){var S=w.className;h.hasElementTranscludeDirective&&p.replace||(z=Vb(J));da(u,B(w),z);A(B(z),S)}w=l.transcludeOnThisElement?ka(n,l.transclude,L):L;l(m,n,z,d,w)}}k=null});return function(a,b,c,d,e){a=e;b.$$destroyed||(k?k.push(b,c,d,a):(l.transcludeOnThisElement&&(a=ka(b,l.transclude,e)),l(m,b,c,d,a)))}}function Y(a,b){var c=b.priority-a.priority;return 0!==
	c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function W(a,b,c,d){function e(a){return a?" (module: "+a+")":""}if(b)throw ga("multidir",b.name,e(b.$$moduleName),c.name,e(c.$$moduleName),a,wa(d));}function X(a,c){var d=b(c,!0);d&&a.push({priority:0,compile:function(a){a=a.parent();var b=!!a.length;b&&ba.$$addBindingClass(a);return function(a,c){var e=c.parent();b||ba.$$addBindingClass(e);ba.$$addBindingInfo(e,d.expressions);a.$watch(d,function(a){c[0].nodeValue=a})}}})}function ca(a,b){a=
	P(a||"html");switch(a){case "svg":case "math":var c=v.document.createElement("div");c.innerHTML="<"+a+">"+b+"</"+a+">";return c.childNodes[0].childNodes;default:return b}}function ea(a,b){if("srcdoc"==b)return I.HTML;var c=va(a);if("xlinkHref"==b||"form"==c&&"action"==b||"img"!=c&&("src"==b||"ngSrc"==b))return I.RESOURCE_URL}function fa(a,c,d,e,f){var g=ea(a,e);f=h[e]||f;var k=b(d,!0,g,f);if(k){if("multiple"===e&&"select"===va(a))throw ga("selmulti",wa(a));c.push({priority:100,compile:function(){return{pre:function(a,
	c,h){c=h.$$observers||(h.$$observers=T());if(l.test(e))throw ga("nodomevents");var m=h[e];m!==d&&(k=m&&b(m,!0,g,f),d=m);k&&(h[e]=k(a),(c[e]||(c[e]=[])).$$inter=!0,(h.$$observers&&h.$$observers[e].$$scope||a).$watch(k,function(a,b){"class"===e&&a!=b?h.$updateClass(a,b):h.$set(e,a)}))}}}})}}function da(a,b,c){var d=b[0],e=b.length,f=d.parentNode,g,h;if(a)for(g=0,h=a.length;g<h;g++)if(a[g]==d){a[g++]=c;h=g+e-1;for(var k=a.length;g<k;g++,h++)h<k?a[g]=a[h]:delete a[g];a.length-=e-1;a.context===d&&(a.context=
	c);break}f&&f.replaceChild(c,d);a=v.document.createDocumentFragment();for(g=0;g<e;g++)a.appendChild(b[g]);B.hasData(d)&&(B.data(c,B.data(d)),B(d).off("$destroy"));B.cleanData(a.querySelectorAll("*"));for(g=1;g<e;g++)delete b[g];b[0]=c;b.length=1}function ha(a,b){return R(function(){return a.apply(null,arguments)},a,b)}function ja(a,b,d,e,f,g){try{a(b,d,e,f,g)}catch(h){c(h,wa(d))}}function ia(a,c,d,e,f){function g(b,c,e){E(d.$onChanges)&&c!==e&&(Z||(a.$$postDigest(L),Z=[]),m||(m={},Z.push(h)),m[b]&&
	(e=m[b].previousValue),m[b]=new Db(e,c))}function h(){d.$onChanges(m);m=void 0}var k=[],l={},m;q(e,function(e,h){var m=e.attrName,n=e.optional,p,r,I,D;switch(e.mode){case "@":n||ua.call(c,m)||(d[h]=c[m]=void 0);c.$observe(m,function(a){if(F(a)||Da(a))g(h,a,d[h]),d[h]=a});c.$$observers[m].$$scope=a;p=c[m];F(p)?d[h]=b(p)(a):Da(p)&&(d[h]=p);l[h]=new Db(Zb,d[h]);break;case "=":if(!ua.call(c,m)){if(n)break;c[m]=void 0}if(n&&!c[m])break;r=t(c[m]);D=r.literal?pa:function(a,b){return a===b||a!==a&&b!==b};
	I=r.assign||function(){p=d[h]=r(a);throw ga("nonassign",c[m],m,f.name);};p=d[h]=r(a);n=function(b){D(b,d[h])||(D(b,p)?I(a,b=d[h]):d[h]=b);return p=b};n.$stateful=!0;n=e.collection?a.$watchCollection(c[m],n):a.$watch(t(c[m],n),null,r.literal);k.push(n);break;case "<":if(!ua.call(c,m)){if(n)break;c[m]=void 0}if(n&&!c[m])break;r=t(c[m]);d[h]=r(a);l[h]=new Db(Zb,d[h]);n=a.$watch(r,function(a,b){a===b&&(b=d[h]);g(h,a,b);d[h]=a},r.literal);k.push(n);break;case "&":r=c.hasOwnProperty(m)?t(c[m]):C;if(r===
	C&&n)break;d[h]=function(b){return r(a,b)}}});return{initialChanges:l,removeWatches:k.length&&function(){for(var a=0,b=k.length;a<b;++a)k[a]()}}}var oa=/^\w/,na=v.document.createElement("div"),qa=r,Z;S.prototype={$normalize:xa,$addClass:function(a){a&&0<a.length&&J.addClass(this.$$element,a)},$removeClass:function(a){a&&0<a.length&&J.removeClass(this.$$element,a)},$updateClass:function(a,b){var c=$c(a,b);c&&c.length&&J.addClass(this.$$element,c);(c=$c(b,a))&&c.length&&J.removeClass(this.$$element,
	c)},$set:function(a,b,d,e){var f=Rc(this.$$element[0],a),g=ad[a],h=a;f?(this.$$element.prop(a,b),e=f):g&&(this[g]=b,h=g);this[a]=b;e?this.$attr[a]=e:(e=this.$attr[a])||(this.$attr[a]=e=zc(a,"-"));f=va(this.$$element);if("a"===f&&("href"===a||"xlinkHref"===a)||"img"===f&&"src"===a)this[a]=b=D(b,"src"===a);else if("img"===f&&"srcset"===a){for(var f="",g=V(b),k=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,k=/\s/.test(g)?k:/(,)/,g=g.split(k),k=Math.floor(g.length/2),l=0;l<k;l++)var m=2*l,f=f+D(V(g[m]),!0),f=
	f+(" "+V(g[m+1]));g=V(g[2*l]).split(/\s/);f+=D(V(g[0]),!0);2===g.length&&(f+=" "+V(g[1]));this[a]=b=f}!1!==d&&(null===b||y(b)?this.$$element.removeAttr(e):oa.test(e)?this.$$element.attr(e,b):$(this.$$element[0],e,b));(a=this.$$observers)&&q(a[h],function(a){try{a(b)}catch(d){c(d)}})},$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers=T()),e=d[a]||(d[a]=[]);e.push(b);u.$evalAsync(function(){e.$$inter||!c.hasOwnProperty(a)||y(c[a])||b(c[a])});return function(){Za(e,b)}}};var ra=b.startSymbol(),
	sa=b.endSymbol(),ta="{{"==ra&&"}}"==sa?Xa:function(a){return a.replace(/\{\{/g,ra).replace(/}}/g,sa)},ya=/^ngAttr[A-Z]/,Aa=/^(.+)Start$/;ba.$$addBindingInfo=m?function(a,b){var c=a.data("$binding")||[];K(b)?c=c.concat(b):c.push(b);a.data("$binding",c)}:C;ba.$$addBindingClass=m?function(a){A(a,"ng-binding")}:C;ba.$$addScopeInfo=m?function(a,b,c,d){a.data(c?d?"$isolateScopeNoTemplate":"$isolateScope":"$scope",b)}:C;ba.$$addScopeClass=m?function(a,b){A(a,b?"ng-isolate-scope":"ng-scope")}:C;ba.$$createComment=
	function(a,b){var c="";m&&(c=" "+(a||"")+": "+(b||"")+" ");return v.document.createComment(c)};return ba}]}function Db(a,b){this.previousValue=a;this.currentValue=b}function xa(a){return cb(a.replace(Vc,""))}function $c(a,b){var d="",c=a.split(/\s+/),e=b.split(/\s+/),f=0;a:for(;f<c.length;f++){for(var g=c[f],h=0;h<e.length;h++)if(g==e[h])continue a;d+=(0<d.length?" ":"")+g}return d}function Yc(a){a=B(a);var b=a.length;if(1>=b)return a;for(;b--;)8===a[b].nodeType&&Zf.call(a,b,1);return a}function Uc(a,
	b){if(b&&F(b))return b;if(F(a)){var d=bd.exec(a);if(d)return d[3]}}function ef(){var a={},b=!1;this.has=function(b){return a.hasOwnProperty(b)};this.register=function(b,c){Qa(b,"controller");G(b)?R(a,b):a[b]=c};this.allowGlobals=function(){b=!0};this.$get=["$injector","$window",function(d,c){function e(a,b,c,d){if(!a||!G(a.$scope))throw O("$controller")("noscp",d,b);a.$scope[b]=c}return function(f,g,h,k){var l,n,m;h=!0===h;k&&F(k)&&(m=k);if(F(f)){k=f.match(bd);if(!k)throw $f("ctrlfmt",f);n=k[1];m=
	m||k[3];f=a.hasOwnProperty(n)?a[n]:Bc(g.$scope,n,!0)||(b?Bc(c,n,!0):void 0);Pa(f,n,!0)}if(h)return h=(K(f)?f[f.length-1]:f).prototype,l=Object.create(h||null),m&&e(g,m,l,n||f.name),R(function(){var a=d.invoke(f,l,g,n);a!==l&&(G(a)||E(a))&&(l=a,m&&e(g,m,l,n||f.name));return l},{instance:l,identifier:m});l=d.instantiate(f,g,n);m&&e(g,m,l,n||f.name);return l}}]}function ff(){this.$get=["$window",function(a){return B(a.document)}]}function gf(){this.$get=["$log",function(a){return function(b,d){a.error.apply(a,
	arguments)}}]}function $b(a){return G(a)?fa(a)?a.toISOString():ab(a):a}function mf(){this.$get=function(){return function(a){if(!a)return"";var b=[];pc(a,function(a,c){null===a||y(a)||(K(a)?q(a,function(a){b.push(ja(c)+"="+ja($b(a)))}):b.push(ja(c)+"="+ja($b(a))))});return b.join("&")}}}function nf(){this.$get=function(){return function(a){function b(a,e,f){null===a||y(a)||(K(a)?q(a,function(a,c){b(a,e+"["+(G(a)?c:"")+"]")}):G(a)&&!fa(a)?pc(a,function(a,c){b(a,e+(f?"":"[")+c+(f?"":"]"))}):d.push(ja(e)+
	"="+ja($b(a))))}if(!a)return"";var d=[];b(a,"",!0);return d.join("&")}}}function ac(a,b){if(F(a)){var d=a.replace(ag,"").trim();if(d){var c=b("Content-Type");(c=c&&0===c.indexOf(cd))||(c=(c=d.match(bg))&&cg[c[0]].test(d));c&&(a=uc(d))}}return a}function dd(a){var b=T(),d;F(a)?q(a.split("\n"),function(a){d=a.indexOf(":");var e=P(V(a.substr(0,d)));a=V(a.substr(d+1));e&&(b[e]=b[e]?b[e]+", "+a:a)}):G(a)&&q(a,function(a,d){var f=P(d),g=V(a);f&&(b[f]=b[f]?b[f]+", "+g:g)});return b}function ed(a){var b;
	return function(d){b||(b=dd(a));return d?(d=b[P(d)],void 0===d&&(d=null),d):b}}function fd(a,b,d,c){if(E(c))return c(a,b,d);q(c,function(c){a=c(a,b,d)});return a}function lf(){var a=this.defaults={transformResponse:[ac],transformRequest:[function(a){return G(a)&&"[object File]"!==ma.call(a)&&"[object Blob]"!==ma.call(a)&&"[object FormData]"!==ma.call(a)?ab(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ha(bc),put:ha(bc),patch:ha(bc)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",
	paramSerializer:"$httpParamSerializer"},b=!1;this.useApplyAsync=function(a){return x(a)?(b=!!a,this):b};var d=!0;this.useLegacyPromiseExtensions=function(a){return x(a)?(d=!!a,this):d};var c=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(e,f,g,h,k,l){function n(b){function c(a){var b=R({},a);b.data=fd(a.data,a.headers,a.status,f.transformResponse);a=a.status;return 200<=a&&300>a?b:k.reject(b)}function e(a,b){var c,d={};q(a,function(a,
	e){E(a)?(c=a(b),null!=c&&(d[e]=c)):d[e]=a});return d}if(!G(b))throw O("$http")("badreq",b);if(!F(b.url))throw O("$http")("badreq",b.url);var f=R({method:"get",transformRequest:a.transformRequest,transformResponse:a.transformResponse,paramSerializer:a.paramSerializer},b);f.headers=function(b){var c=a.headers,d=R({},b.headers),f,g,h,c=R({},c.common,c[P(b.method)]);a:for(f in c){g=P(f);for(h in d)if(P(h)===g)continue a;d[f]=c[f]}return e(d,ha(b))}(b);f.method=sb(f.method);f.paramSerializer=F(f.paramSerializer)?
	l.get(f.paramSerializer):f.paramSerializer;var g=[function(b){var d=b.headers,e=fd(b.data,ed(d),void 0,b.transformRequest);y(e)&&q(d,function(a,b){"content-type"===P(b)&&delete d[b]});y(b.withCredentials)&&!y(a.withCredentials)&&(b.withCredentials=a.withCredentials);return m(b,e).then(c,c)},void 0],h=k.when(f);for(q(M,function(a){(a.request||a.requestError)&&g.unshift(a.request,a.requestError);(a.response||a.responseError)&&g.push(a.response,a.responseError)});g.length;){b=g.shift();var n=g.shift(),
	h=h.then(b,n)}d?(h.success=function(a){Pa(a,"fn");h.then(function(b){a(b.data,b.status,b.headers,f)});return h},h.error=function(a){Pa(a,"fn");h.then(null,function(b){a(b.data,b.status,b.headers,f)});return h}):(h.success=gd("success"),h.error=gd("error"));return h}function m(c,d){function g(a){if(a){var c={};q(a,function(a,d){c[d]=function(c){function d(){a(c)}b?h.$applyAsync(d):h.$$phase?d():h.$apply(d)}});return c}}function l(a,c,d,e){function f(){m(c,a,d,e)}L&&(200<=a&&300>a?L.put(A,[a,c,dd(d),
	e]):L.remove(A));b?h.$applyAsync(f):(f(),h.$$phase||h.$apply())}function m(a,b,d,e){b=-1<=b?b:0;(200<=b&&300>b?J.resolve:J.reject)({data:a,status:b,headers:ed(d),config:c,statusText:e})}function u(a){m(a.data,a.status,ha(a.headers()),a.statusText)}function I(){var a=n.pendingRequests.indexOf(c);-1!==a&&n.pendingRequests.splice(a,1)}var J=k.defer(),D=J.promise,L,S,M=c.headers,A=r(c.url,c.paramSerializer(c.params));n.pendingRequests.push(c);D.then(I,I);!c.cache&&!a.cache||!1===c.cache||"GET"!==c.method&&
	"JSONP"!==c.method||(L=G(c.cache)?c.cache:G(a.cache)?a.cache:N);L&&(S=L.get(A),x(S)?S&&E(S.then)?S.then(u,u):K(S)?m(S[1],S[0],ha(S[2]),S[3]):m(S,200,{},"OK"):L.put(A,D));y(S)&&((S=hd(c.url)?f()[c.xsrfCookieName||a.xsrfCookieName]:void 0)&&(M[c.xsrfHeaderName||a.xsrfHeaderName]=S),e(c.method,A,d,l,M,c.timeout,c.withCredentials,c.responseType,g(c.eventHandlers),g(c.uploadEventHandlers)));return D}function r(a,b){0<b.length&&(a+=(-1==a.indexOf("?")?"?":"&")+b);return a}var N=g("$http");a.paramSerializer=
	F(a.paramSerializer)?l.get(a.paramSerializer):a.paramSerializer;var M=[];q(c,function(a){M.unshift(F(a)?l.get(a):l.invoke(a))});n.pendingRequests=[];(function(a){q(arguments,function(a){n[a]=function(b,c){return n(R({},c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){q(arguments,function(a){n[a]=function(b,c,d){return n(R({},d||{},{method:a,url:b,data:c}))}})})("post","put","patch");n.defaults=a;return n}]}function pf(){this.$get=function(){return function(){return new v.XMLHttpRequest}}}
	function of(){this.$get=["$browser","$window","$document","$xhrFactory",function(a,b,d,c){return dg(a,c,a.defer,b.angular.callbacks,d[0])}]}function dg(a,b,d,c,e){function f(a,b,d){var f=e.createElement("script"),n=null;f.type="text/javascript";f.src=a;f.async=!0;n=function(a){f.removeEventListener("load",n,!1);f.removeEventListener("error",n,!1);e.body.removeChild(f);f=null;var g=-1,N="unknown";a&&("load"!==a.type||c[b].called||(a={type:"error"}),N=a.type,g="error"===a.type?404:200);d&&d(g,N)};f.addEventListener("load",
	n,!1);f.addEventListener("error",n,!1);e.body.appendChild(f);return n}return function(e,h,k,l,n,m,r,N,M,w){function p(){z&&z();u&&u.abort()}function H(b,c,e,f,g){x(J)&&d.cancel(J);z=u=null;b(c,e,f,g);a.$$completeOutstandingRequest(C)}a.$$incOutstandingRequestCount();h=h||a.url();if("jsonp"==P(e)){var t="_"+(c.counter++).toString(36);c[t]=function(a){c[t].data=a;c[t].called=!0};var z=f(h.replace("JSON_CALLBACK","angular.callbacks."+t),t,function(a,b){H(l,a,c[t].data,"",b);c[t]=C})}else{var u=b(e,h);
	u.open(e,h,!0);q(n,function(a,b){x(a)&&u.setRequestHeader(b,a)});u.onload=function(){var a=u.statusText||"",b="response"in u?u.response:u.responseText,c=1223===u.status?204:u.status;0===c&&(c=b?200:"file"==ra(h).protocol?404:0);H(l,c,b,u.getAllResponseHeaders(),a)};e=function(){H(l,-1,null,null,"")};u.onerror=e;u.onabort=e;q(M,function(a,b){u.addEventListener(b,a)});q(w,function(a,b){u.upload.addEventListener(b,a)});r&&(u.withCredentials=!0);if(N)try{u.responseType=N}catch(I){if("json"!==N)throw I;
	}u.send(y(k)?null:k)}if(0<m)var J=d(p,m);else m&&E(m.then)&&m.then(p)}}function jf(){var a="{{",b="}}";this.startSymbol=function(b){return b?(a=b,this):a};this.endSymbol=function(a){return a?(b=a,this):b};this.$get=["$parse","$exceptionHandler","$sce",function(d,c,e){function f(a){return"\\\\\\"+a}function g(c){return c.replace(m,a).replace(r,b)}function h(a,b,c,d){var e;return e=a.$watch(function(a){e();return d(a)},b,c)}function k(f,k,m,r){function H(a){try{var b=a;a=m?e.getTrusted(m,b):e.valueOf(b);
	var d;if(r&&!x(a))d=a;else if(null==a)d="";else{switch(typeof a){case "string":break;case "number":a=""+a;break;default:a=ab(a)}d=a}return d}catch(g){c(Ja.interr(f,g))}}if(!f.length||-1===f.indexOf(a)){var t;k||(k=g(f),t=da(k),t.exp=f,t.expressions=[],t.$$watchDelegate=h);return t}r=!!r;var z,u,I=0,J=[],D=[];t=f.length;for(var L=[],S=[];I<t;)if(-1!=(z=f.indexOf(a,I))&&-1!=(u=f.indexOf(b,z+l)))I!==z&&L.push(g(f.substring(I,z))),I=f.substring(z+l,u),J.push(I),D.push(d(I,H)),I=u+n,S.push(L.length),L.push("");
	else{I!==t&&L.push(g(f.substring(I)));break}m&&1<L.length&&Ja.throwNoconcat(f);if(!k||J.length){var q=function(a){for(var b=0,c=J.length;b<c;b++){if(r&&y(a[b]))return;L[S[b]]=a[b]}return L.join("")};return R(function(a){var b=0,d=J.length,e=Array(d);try{for(;b<d;b++)e[b]=D[b](a);return q(e)}catch(g){c(Ja.interr(f,g))}},{exp:f,expressions:J,$$watchDelegate:function(a,b){var c;return a.$watchGroup(D,function(d,e){var f=q(d);E(b)&&b.call(this,f,d!==e?c:f,a);c=f})}})}}var l=a.length,n=b.length,m=new RegExp(a.replace(/./g,
	f),"g"),r=new RegExp(b.replace(/./g,f),"g");k.startSymbol=function(){return a};k.endSymbol=function(){return b};return k}]}function kf(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(a,b,d,c,e){function f(f,k,l,n){function m(){r?f.apply(null,N):f(p)}var r=4<arguments.length,N=r?za.call(arguments,4):[],q=b.setInterval,w=b.clearInterval,p=0,H=x(n)&&!n,t=(H?c:d).defer(),z=t.promise;l=x(l)?l:0;z.$$intervalId=q(function(){H?e.defer(m):a.$evalAsync(m);t.notify(p++);0<l&&p>=l&&(t.resolve(p),
	w(z.$$intervalId),delete g[z.$$intervalId]);H||a.$apply()},k);g[z.$$intervalId]=t;return z}var g={};f.cancel=function(a){return a&&a.$$intervalId in g?(g[a.$$intervalId].reject("canceled"),b.clearInterval(a.$$intervalId),delete g[a.$$intervalId],!0):!1};return f}]}function cc(a){a=a.split("/");for(var b=a.length;b--;)a[b]=ob(a[b]);return a.join("/")}function id(a,b){var d=ra(a);b.$$protocol=d.protocol;b.$$host=d.hostname;b.$$port=X(d.port)||eg[d.protocol]||null}function jd(a,b){var d="/"!==a.charAt(0);
	d&&(a="/"+a);var c=ra(a);b.$$path=decodeURIComponent(d&&"/"===c.pathname.charAt(0)?c.pathname.substring(1):c.pathname);b.$$search=xc(c.search);b.$$hash=decodeURIComponent(c.hash);b.$$path&&"/"!=b.$$path.charAt(0)&&(b.$$path="/"+b.$$path)}function na(a,b){if(0===b.indexOf(a))return b.substr(a.length)}function Ia(a){var b=a.indexOf("#");return-1==b?a:a.substr(0,b)}function hb(a){return a.replace(/(#.+)|#$/,"$1")}function dc(a,b,d){this.$$html5=!0;d=d||"";id(a,this);this.$$parse=function(a){var d=na(b,
	a);if(!F(d))throw Eb("ipthprfx",a,b);jd(d,this);this.$$path||(this.$$path="/");this.$$compose()};this.$$compose=function(){var a=Rb(this.$$search),d=this.$$hash?"#"+ob(this.$$hash):"";this.$$url=cc(this.$$path)+(a?"?"+a:"")+d;this.$$absUrl=b+this.$$url.substr(1)};this.$$parseLinkUrl=function(c,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),!0;var f,g;x(f=na(a,c))?(g=f,g=x(f=na(d,f))?b+(na("/",f)||f):a+g):x(f=na(b,c))?g=b+f:b==c+"/"&&(g=b);g&&this.$$parse(g);return!!g}}function ec(a,b,d){id(a,this);
	this.$$parse=function(c){var e=na(a,c)||na(b,c),f;y(e)||"#"!==e.charAt(0)?this.$$html5?f=e:(f="",y(e)&&(a=c,this.replace())):(f=na(d,e),y(f)&&(f=e));jd(f,this);c=this.$$path;var e=a,g=/^\/[A-Z]:(\/.*)/;0===f.indexOf(e)&&(f=f.replace(e,""));g.exec(f)||(c=(f=g.exec(c))?f[1]:c);this.$$path=c;this.$$compose()};this.$$compose=function(){var b=Rb(this.$$search),e=this.$$hash?"#"+ob(this.$$hash):"";this.$$url=cc(this.$$path)+(b?"?"+b:"")+e;this.$$absUrl=a+(this.$$url?d+this.$$url:"")};this.$$parseLinkUrl=
	function(b,d){return Ia(a)==Ia(b)?(this.$$parse(b),!0):!1}}function kd(a,b,d){this.$$html5=!0;ec.apply(this,arguments);this.$$parseLinkUrl=function(c,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),!0;var f,g;a==Ia(c)?f=c:(g=na(b,c))?f=a+d+g:b===c+"/"&&(f=b);f&&this.$$parse(f);return!!f};this.$$compose=function(){var b=Rb(this.$$search),e=this.$$hash?"#"+ob(this.$$hash):"";this.$$url=cc(this.$$path)+(b?"?"+b:"")+e;this.$$absUrl=a+d+this.$$url}}function Fb(a){return function(){return this[a]}}function ld(a,
	b){return function(d){if(y(d))return this[a];this[a]=b(d);this.$$compose();return this}}function qf(){var a="",b={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(b){return x(b)?(a=b,this):a};this.html5Mode=function(a){return Da(a)?(b.enabled=a,this):G(a)?(Da(a.enabled)&&(b.enabled=a.enabled),Da(a.requireBase)&&(b.requireBase=a.requireBase),Da(a.rewriteLinks)&&(b.rewriteLinks=a.rewriteLinks),this):b};this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(d,
	c,e,f,g){function h(a,b,d){var e=l.url(),f=l.$$state;try{c.url(a,b,d),l.$$state=c.state()}catch(g){throw l.url(e),l.$$state=f,g;}}function k(a,b){d.$broadcast("$locationChangeSuccess",l.absUrl(),a,l.$$state,b)}var l,n;n=c.baseHref();var m=c.url(),r;if(b.enabled){if(!n&&b.requireBase)throw Eb("nobase");r=m.substring(0,m.indexOf("/",m.indexOf("//")+2))+(n||"/");n=e.history?dc:kd}else r=Ia(m),n=ec;var N=r.substr(0,Ia(r).lastIndexOf("/")+1);l=new n(r,N,"#"+a);l.$$parseLinkUrl(m,m);l.$$state=c.state();
	var q=/^\s*(javascript|mailto):/i;f.on("click",function(a){if(b.rewriteLinks&&!a.ctrlKey&&!a.metaKey&&!a.shiftKey&&2!=a.which&&2!=a.button){for(var e=B(a.target);"a"!==va(e[0]);)if(e[0]===f[0]||!(e=e.parent())[0])return;var h=e.prop("href"),k=e.attr("href")||e.attr("xlink:href");G(h)&&"[object SVGAnimatedString]"===h.toString()&&(h=ra(h.animVal).href);q.test(h)||!h||e.attr("target")||a.isDefaultPrevented()||!l.$$parseLinkUrl(h,k)||(a.preventDefault(),l.absUrl()!=c.url()&&(d.$apply(),g.angular["ff-684208-preventDefault"]=
	!0))}});hb(l.absUrl())!=hb(m)&&c.url(l.absUrl(),!0);var w=!0;c.onUrlChange(function(a,b){y(na(N,a))?g.location.href=a:(d.$evalAsync(function(){var c=l.absUrl(),e=l.$$state,f;a=hb(a);l.$$parse(a);l.$$state=b;f=d.$broadcast("$locationChangeStart",a,c,b,e).defaultPrevented;l.absUrl()===a&&(f?(l.$$parse(c),l.$$state=e,h(c,!1,e)):(w=!1,k(c,e)))}),d.$$phase||d.$digest())});d.$watch(function(){var a=hb(c.url()),b=hb(l.absUrl()),f=c.state(),g=l.$$replace,m=a!==b||l.$$html5&&e.history&&f!==l.$$state;if(w||
	m)w=!1,d.$evalAsync(function(){var b=l.absUrl(),c=d.$broadcast("$locationChangeStart",b,a,l.$$state,f).defaultPrevented;l.absUrl()===b&&(c?(l.$$parse(a),l.$$state=f):(m&&h(b,g,f===l.$$state?null:l.$$state),k(a,f)))});l.$$replace=!1});return l}]}function rf(){var a=!0,b=this;this.debugEnabled=function(b){return x(b)?(a=b,this):a};this.$get=["$window",function(d){function c(a){a instanceof Error&&(a.stack?a=a.message&&-1===a.stack.indexOf(a.message)?"Error: "+a.message+"\n"+a.stack:a.stack:a.sourceURL&&
	(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function e(a){var b=d.console||{},e=b[a]||b.log||C;a=!1;try{a=!!e.apply}catch(k){}return a?function(){var a=[];q(arguments,function(b){a.push(c(b))});return e.apply(b,a)}:function(a,b){e(a,null==b?"":b)}}return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:function(){var c=e("debug");return function(){a&&c.apply(b,arguments)}}()}}]}function Ta(a,b){if("__defineGetter__"===a||"__defineSetter__"===a||"__lookupGetter__"===a||"__lookupSetter__"===
	a||"__proto__"===a)throw ca("isecfld",b);return a}function fg(a){return a+""}function sa(a,b){if(a){if(a.constructor===a)throw ca("isecfn",b);if(a.window===a)throw ca("isecwindow",b);if(a.children&&(a.nodeName||a.prop&&a.attr&&a.find))throw ca("isecdom",b);if(a===Object)throw ca("isecobj",b);}return a}function md(a,b){if(a){if(a.constructor===a)throw ca("isecfn",b);if(a===gg||a===hg||a===ig)throw ca("isecff",b);}}function Gb(a,b){if(a&&(a===(0).constructor||a===(!1).constructor||a==="".constructor||
	a==={}.constructor||a===[].constructor||a===Function.constructor))throw ca("isecaf",b);}function jg(a,b){return"undefined"!==typeof a?a:b}function nd(a,b){return"undefined"===typeof a?b:"undefined"===typeof b?a:a+b}function aa(a,b){var d,c;switch(a.type){case s.Program:d=!0;q(a.body,function(a){aa(a.expression,b);d=d&&a.expression.constant});a.constant=d;break;case s.Literal:a.constant=!0;a.toWatch=[];break;case s.UnaryExpression:aa(a.argument,b);a.constant=a.argument.constant;a.toWatch=a.argument.toWatch;
	break;case s.BinaryExpression:aa(a.left,b);aa(a.right,b);a.constant=a.left.constant&&a.right.constant;a.toWatch=a.left.toWatch.concat(a.right.toWatch);break;case s.LogicalExpression:aa(a.left,b);aa(a.right,b);a.constant=a.left.constant&&a.right.constant;a.toWatch=a.constant?[]:[a];break;case s.ConditionalExpression:aa(a.test,b);aa(a.alternate,b);aa(a.consequent,b);a.constant=a.test.constant&&a.alternate.constant&&a.consequent.constant;a.toWatch=a.constant?[]:[a];break;case s.Identifier:a.constant=
	!1;a.toWatch=[a];break;case s.MemberExpression:aa(a.object,b);a.computed&&aa(a.property,b);a.constant=a.object.constant&&(!a.computed||a.property.constant);a.toWatch=[a];break;case s.CallExpression:d=a.filter?!b(a.callee.name).$stateful:!1;c=[];q(a.arguments,function(a){aa(a,b);d=d&&a.constant;a.constant||c.push.apply(c,a.toWatch)});a.constant=d;a.toWatch=a.filter&&!b(a.callee.name).$stateful?c:[a];break;case s.AssignmentExpression:aa(a.left,b);aa(a.right,b);a.constant=a.left.constant&&a.right.constant;
	a.toWatch=[a];break;case s.ArrayExpression:d=!0;c=[];q(a.elements,function(a){aa(a,b);d=d&&a.constant;a.constant||c.push.apply(c,a.toWatch)});a.constant=d;a.toWatch=c;break;case s.ObjectExpression:d=!0;c=[];q(a.properties,function(a){aa(a.value,b);d=d&&a.value.constant;a.value.constant||c.push.apply(c,a.value.toWatch)});a.constant=d;a.toWatch=c;break;case s.ThisExpression:a.constant=!1;a.toWatch=[];break;case s.LocalsExpression:a.constant=!1,a.toWatch=[]}}function od(a){if(1==a.length){a=a[0].expression;
	var b=a.toWatch;return 1!==b.length?b:b[0]!==a?b:void 0}}function pd(a){return a.type===s.Identifier||a.type===s.MemberExpression}function qd(a){if(1===a.body.length&&pd(a.body[0].expression))return{type:s.AssignmentExpression,left:a.body[0].expression,right:{type:s.NGValueParameter},operator:"="}}function rd(a){return 0===a.body.length||1===a.body.length&&(a.body[0].expression.type===s.Literal||a.body[0].expression.type===s.ArrayExpression||a.body[0].expression.type===s.ObjectExpression)}function sd(a,
	b){this.astBuilder=a;this.$filter=b}function td(a,b){this.astBuilder=a;this.$filter=b}function Hb(a){return"constructor"==a}function fc(a){return E(a.valueOf)?a.valueOf():kg.call(a)}function sf(){var a=T(),b=T(),d={"true":!0,"false":!1,"null":null,undefined:void 0},c,e;this.addLiteral=function(a,b){d[a]=b};this.setIdentifierFns=function(a,b){c=a;e=b;return this};this.$get=["$filter",function(f){function g(c,d,e){var g,k,D;e=e||H;switch(typeof c){case "string":D=c=c.trim();var q=e?b:a;g=q[D];if(!g){":"===
	c.charAt(0)&&":"===c.charAt(1)&&(k=!0,c=c.substring(2));g=e?p:w;var S=new gc(g);g=(new hc(S,f,g)).parse(c);g.constant?g.$$watchDelegate=r:k?g.$$watchDelegate=g.literal?m:n:g.inputs&&(g.$$watchDelegate=l);e&&(g=h(g));q[D]=g}return N(g,d);case "function":return N(c,d);default:return N(C,d)}}function h(a){function b(c,d,e,f){var g=H;H=!0;try{return a(c,d,e,f)}finally{H=g}}if(!a)return a;b.$$watchDelegate=a.$$watchDelegate;b.assign=h(a.assign);b.constant=a.constant;b.literal=a.literal;for(var c=0;a.inputs&&
	c<a.inputs.length;++c)a.inputs[c]=h(a.inputs[c]);b.inputs=a.inputs;return b}function k(a,b){return null==a||null==b?a===b:"object"===typeof a&&(a=fc(a),"object"===typeof a)?!1:a===b||a!==a&&b!==b}function l(a,b,c,d,e){var f=d.inputs,g;if(1===f.length){var h=k,f=f[0];return a.$watch(function(a){var b=f(a);k(b,h)||(g=d(a,void 0,void 0,[b]),h=b&&fc(b));return g},b,c,e)}for(var l=[],m=[],n=0,r=f.length;n<r;n++)l[n]=k,m[n]=null;return a.$watch(function(a){for(var b=!1,c=0,e=f.length;c<e;c++){var h=f[c](a);
	if(b||(b=!k(h,l[c])))m[c]=h,l[c]=h&&fc(h)}b&&(g=d(a,void 0,void 0,m));return g},b,c,e)}function n(a,b,c,d){var e,f;return e=a.$watch(function(a){return d(a)},function(a,c,d){f=a;E(b)&&b.apply(this,arguments);x(a)&&d.$$postDigest(function(){x(f)&&e()})},c)}function m(a,b,c,d){function e(a){var b=!0;q(a,function(a){x(a)||(b=!1)});return b}var f,g;return f=a.$watch(function(a){return d(a)},function(a,c,d){g=a;E(b)&&b.call(this,a,c,d);e(a)&&d.$$postDigest(function(){e(g)&&f()})},c)}function r(a,b,c,d){var e;
	return e=a.$watch(function(a){e();return d(a)},b,c)}function N(a,b){if(!b)return a;var c=a.$$watchDelegate,d=!1,c=c!==m&&c!==n?function(c,e,f,g){f=d&&g?g[0]:a(c,e,f,g);return b(f,c,e)}:function(c,d,e,f){e=a(c,d,e,f);c=b(e,c,d);return x(e)?c:e};a.$$watchDelegate&&a.$$watchDelegate!==l?c.$$watchDelegate=a.$$watchDelegate:b.$stateful||(c.$$watchDelegate=l,d=!a.inputs,c.inputs=a.inputs?a.inputs:[a]);return c}var M=Ea().noUnsafeEval,w={csp:M,expensiveChecks:!1,literals:qa(d),isIdentifierStart:E(c)&&c,
	isIdentifierContinue:E(e)&&e},p={csp:M,expensiveChecks:!0,literals:qa(d),isIdentifierStart:E(c)&&c,isIdentifierContinue:E(e)&&e},H=!1;g.$$runningExpensiveChecks=function(){return H};return g}]}function uf(){this.$get=["$rootScope","$exceptionHandler",function(a,b){return ud(function(b){a.$evalAsync(b)},b)}]}function vf(){this.$get=["$browser","$exceptionHandler",function(a,b){return ud(function(b){a.defer(b)},b)}]}function ud(a,b){function d(){this.$$state={status:0}}function c(a,b){return function(c){b.call(a,
	c)}}function e(c){!c.processScheduled&&c.pending&&(c.processScheduled=!0,a(function(){var a,d,e;e=c.pending;c.processScheduled=!1;c.pending=void 0;for(var f=0,g=e.length;f<g;++f){d=e[f][0];a=e[f][c.status];try{E(a)?d.resolve(a(c.value)):1===c.status?d.resolve(c.value):d.reject(c.value)}catch(h){d.reject(h),b(h)}}}))}function f(){this.promise=new d}var g=O("$q",TypeError);R(d.prototype,{then:function(a,b,c){if(y(a)&&y(b)&&y(c))return this;var d=new f;this.$$state.pending=this.$$state.pending||[];this.$$state.pending.push([d,
	a,b,c]);0<this.$$state.status&&e(this.$$state);return d.promise},"catch":function(a){return this.then(null,a)},"finally":function(a,b){return this.then(function(b){return k(b,!0,a)},function(b){return k(b,!1,a)},b)}});R(f.prototype,{resolve:function(a){this.promise.$$state.status||(a===this.promise?this.$$reject(g("qcycle",a)):this.$$resolve(a))},$$resolve:function(a){function d(a){k||(k=!0,h.$$resolve(a))}function f(a){k||(k=!0,h.$$reject(a))}var g,h=this,k=!1;try{if(G(a)||E(a))g=a&&a.then;E(g)?
	(this.promise.$$state.status=-1,g.call(a,d,f,c(this,this.notify))):(this.promise.$$state.value=a,this.promise.$$state.status=1,e(this.promise.$$state))}catch(l){f(l),b(l)}},reject:function(a){this.promise.$$state.status||this.$$reject(a)},$$reject:function(a){this.promise.$$state.value=a;this.promise.$$state.status=2;e(this.promise.$$state)},notify:function(c){var d=this.promise.$$state.pending;0>=this.promise.$$state.status&&d&&d.length&&a(function(){for(var a,e,f=0,g=d.length;f<g;f++){e=d[f][0];
	a=d[f][3];try{e.notify(E(a)?a(c):c)}catch(h){b(h)}}})}});var h=function(a,b){var c=new f;b?c.resolve(a):c.reject(a);return c.promise},k=function(a,b,c){var d=null;try{E(c)&&(d=c())}catch(e){return h(e,!1)}return d&&E(d.then)?d.then(function(){return h(a,b)},function(a){return h(a,!1)}):h(a,b)},l=function(a,b,c,d){var e=new f;e.resolve(a);return e.promise.then(b,c,d)},n=function(a){if(!E(a))throw g("norslvr",a);var b=new f;a(function(a){b.resolve(a)},function(a){b.reject(a)});return b.promise};n.prototype=
	d.prototype;n.defer=function(){var a=new f;a.resolve=c(a,a.resolve);a.reject=c(a,a.reject);a.notify=c(a,a.notify);return a};n.reject=function(a){var b=new f;b.reject(a);return b.promise};n.when=l;n.resolve=l;n.all=function(a){var b=new f,c=0,d=K(a)?[]:{};q(a,function(a,e){c++;l(a).then(function(a){d.hasOwnProperty(e)||(d[e]=a,--c||b.resolve(d))},function(a){d.hasOwnProperty(e)||b.reject(a)})});0===c&&b.resolve(d);return b.promise};return n}function Ef(){this.$get=["$window","$timeout",function(a,
	b){var d=a.requestAnimationFrame||a.webkitRequestAnimationFrame,c=a.cancelAnimationFrame||a.webkitCancelAnimationFrame||a.webkitCancelRequestAnimationFrame,e=!!d,f=e?function(a){var b=d(a);return function(){c(b)}}:function(a){var c=b(a,16.66,!1);return function(){b.cancel(c)}};f.supported=e;return f}]}function tf(){function a(a){function b(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$id=++nb;this.$$ChildScope=
	null}b.prototype=a;return b}var b=10,d=O("$rootScope"),c=null,e=null;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=["$exceptionHandler","$parse","$browser",function(f,g,h){function k(a){a.currentScope.$$destroyed=!0}function l(a){9===Ca&&(a.$$childHead&&l(a.$$childHead),a.$$nextSibling&&l(a.$$nextSibling));a.$parent=a.$$nextSibling=a.$$prevSibling=a.$$childHead=a.$$childTail=a.$root=a.$$watchers=null}function n(){this.$id=++nb;this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=
	this.$$prevSibling=this.$$childHead=this.$$childTail=null;this.$root=this;this.$$destroyed=!1;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$$isolateBindings=null}function m(a){if(H.$$phase)throw d("inprog",H.$$phase);H.$$phase=a}function r(a,b){do a.$$watchersCount+=b;while(a=a.$parent)}function N(a,b,c){do a.$$listenerCount[c]-=b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function s(){}function w(){for(;u.length;)try{u.shift()()}catch(a){f(a)}e=
	null}function p(){null===e&&(e=h.defer(function(){H.$apply(w)}))}n.prototype={constructor:n,$new:function(b,c){var d;c=c||this;b?(d=new n,d.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=a(this)),d=new this.$$ChildScope);d.$parent=c;d.$$prevSibling=c.$$childTail;c.$$childHead?(c.$$childTail.$$nextSibling=d,c.$$childTail=d):c.$$childHead=c.$$childTail=d;(b||c!=this)&&d.$on("$destroy",k);return d},$watch:function(a,b,d,e){var f=g(a);if(f.$$watchDelegate)return f.$$watchDelegate(this,b,d,f,
	a);var h=this,k=h.$$watchers,l={fn:b,last:s,get:f,exp:e||a,eq:!!d};c=null;E(b)||(l.fn=C);k||(k=h.$$watchers=[]);k.unshift(l);r(this,1);return function(){0<=Za(k,l)&&r(h,-1);c=null}},$watchGroup:function(a,b){function c(){h=!1;k?(k=!1,b(e,e,g)):b(e,d,g)}var d=Array(a.length),e=Array(a.length),f=[],g=this,h=!1,k=!0;if(!a.length){var l=!0;g.$evalAsync(function(){l&&b(e,e,g)});return function(){l=!1}}if(1===a.length)return this.$watch(a[0],function(a,c,f){e[0]=a;d[0]=c;b(e,a===c?e:d,f)});q(a,function(a,
	b){var k=g.$watch(a,function(a,f){e[b]=a;d[b]=f;h||(h=!0,g.$evalAsync(c))});f.push(k)});return function(){for(;f.length;)f.shift()()}},$watchCollection:function(a,b){function c(a){e=a;var b,d,g,h;if(!y(e)){if(G(e))if(ya(e))for(f!==m&&(f=m,t=f.length=0,l++),a=e.length,t!==a&&(l++,f.length=t=a),b=0;b<a;b++)h=f[b],g=e[b],d=h!==h&&g!==g,d||h===g||(l++,f[b]=g);else{f!==r&&(f=r={},t=0,l++);a=0;for(b in e)ua.call(e,b)&&(a++,g=e[b],h=f[b],b in f?(d=h!==h&&g!==g,d||h===g||(l++,f[b]=g)):(t++,f[b]=g,l++));if(t>
	a)for(b in l++,f)ua.call(e,b)||(t--,delete f[b])}else f!==e&&(f=e,l++);return l}}c.$stateful=!0;var d=this,e,f,h,k=1<b.length,l=0,n=g(a,c),m=[],r={},p=!0,t=0;return this.$watch(n,function(){p?(p=!1,b(e,e,d)):b(e,h,d);if(k)if(G(e))if(ya(e)){h=Array(e.length);for(var a=0;a<e.length;a++)h[a]=e[a]}else for(a in h={},e)ua.call(e,a)&&(h[a]=e[a]);else h=e})},$digest:function(){var a,g,k,l,n,r,p,q,N=b,u,x=[],y,v;m("$digest");h.$$checkUrlChange();this===H&&null!==e&&(h.defer.cancel(e),w());c=null;do{q=!1;
	for(u=this;t.length;){try{v=t.shift(),v.scope.$eval(v.expression,v.locals)}catch(C){f(C)}c=null}a:do{if(r=u.$$watchers)for(p=r.length;p--;)try{if(a=r[p])if(n=a.get,(g=n(u))!==(k=a.last)&&!(a.eq?pa(g,k):"number"===typeof g&&"number"===typeof k&&isNaN(g)&&isNaN(k)))q=!0,c=a,a.last=a.eq?qa(g,null):g,l=a.fn,l(g,k===s?g:k,u),5>N&&(y=4-N,x[y]||(x[y]=[]),x[y].push({msg:E(a.exp)?"fn: "+(a.exp.name||a.exp.toString()):a.exp,newVal:g,oldVal:k}));else if(a===c){q=!1;break a}}catch(F){f(F)}if(!(r=u.$$watchersCount&&
	u.$$childHead||u!==this&&u.$$nextSibling))for(;u!==this&&!(r=u.$$nextSibling);)u=u.$parent}while(u=r);if((q||t.length)&&!N--)throw H.$$phase=null,d("infdig",b,x);}while(q||t.length);for(H.$$phase=null;z.length;)try{z.shift()()}catch(B){f(B)}},$destroy:function(){if(!this.$$destroyed){var a=this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;this===H&&h.$$applicationDestroyed();r(this,-this.$$watchersCount);for(var b in this.$$listenerCount)N(this,this.$$listenerCount[b],b);a&&a.$$childHead==
	this&&(a.$$childHead=this.$$nextSibling);a&&a.$$childTail==this&&(a.$$childTail=this.$$prevSibling);this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling);this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling);this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=C;this.$on=this.$watch=this.$watchGroup=function(){return C};this.$$listeners={};this.$$nextSibling=null;l(this)}},$eval:function(a,b){return g(a)(this,b)},$evalAsync:function(a,b){H.$$phase||
	t.length||h.defer(function(){t.length&&H.$digest()});t.push({scope:this,expression:g(a),locals:b})},$$postDigest:function(a){z.push(a)},$apply:function(a){try{m("$apply");try{return this.$eval(a)}finally{H.$$phase=null}}catch(b){f(b)}finally{try{H.$digest()}catch(c){throw f(c),c;}}},$applyAsync:function(a){function b(){c.$eval(a)}var c=this;a&&u.push(b);a=g(a);p()},$on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||(d.$$listenerCount[a]=
	0),d.$$listenerCount[a]++;while(d=d.$parent);var e=this;return function(){var d=c.indexOf(b);-1!==d&&(c[d]=null,N(e,1,a))}},$emit:function(a,b){var c=[],d,e=this,g=!1,h={name:a,targetScope:e,stopPropagation:function(){g=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},k=$a([h],arguments,1),l,n;do{d=e.$$listeners[a]||c;h.currentScope=e;l=0;for(n=d.length;l<n;l++)if(d[l])try{d[l].apply(null,k)}catch(m){f(m)}else d.splice(l,1),l--,n--;if(g)return h.currentScope=null,h;e=e.$parent}while(e);
	h.currentScope=null;return h},$broadcast:function(a,b){var c=this,d=this,e={name:a,targetScope:this,preventDefault:function(){e.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[a])return e;for(var g=$a([e],arguments,1),h,k;c=d;){e.currentScope=c;d=c.$$listeners[a]||[];h=0;for(k=d.length;h<k;h++)if(d[h])try{d[h].apply(null,g)}catch(l){f(l)}else d.splice(h,1),h--,k--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&c.$$nextSibling))for(;c!==this&&!(d=c.$$nextSibling);)c=c.$parent}e.currentScope=
	null;return e}};var H=new n,t=H.$$asyncQueue=[],z=H.$$postDigestQueue=[],u=H.$$applyAsyncQueue=[];return H}]}function me(){var a=/^\s*(https?|ftp|mailto|tel|file):/,b=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(b){return x(b)?(a=b,this):a};this.imgSrcSanitizationWhitelist=function(a){return x(a)?(b=a,this):b};this.$get=function(){return function(d,c){var e=c?b:a,f;f=ra(d).href;return""===f||f.match(e)?d:"unsafe:"+f}}}function lg(a){if("self"===a)return a;
	if(F(a)){if(-1<a.indexOf("***"))throw ta("iwcard",a);a=vd(a).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*");return new RegExp("^"+a+"$")}if(Wa(a))return new RegExp("^"+a.source+"$");throw ta("imatcher");}function wd(a){var b=[];x(a)&&q(a,function(a){b.push(lg(a))});return b}function xf(){this.SCE_CONTEXTS=oa;var a=["self"],b=[];this.resourceUrlWhitelist=function(b){arguments.length&&(a=wd(b));return a};this.resourceUrlBlacklist=function(a){arguments.length&&(b=wd(a));return b};this.$get=["$injector",
	function(d){function c(a,b){return"self"===a?hd(b):!!a.exec(b.href)}function e(a){var b=function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=function(){return this.$$unwrapTrustedValue()};b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};return b}var f=function(a){throw ta("unsafe");};d.has("$sanitize")&&(f=d.get("$sanitize"));var g=e(),h={};h[oa.HTML]=e(g);h[oa.CSS]=e(g);h[oa.URL]=e(g);h[oa.JS]=e(g);h[oa.RESOURCE_URL]=
	e(h[oa.URL]);return{trustAs:function(a,b){var c=h.hasOwnProperty(a)?h[a]:null;if(!c)throw ta("icontext",a,b);if(null===b||y(b)||""===b)return b;if("string"!==typeof b)throw ta("itype",a);return new c(b)},getTrusted:function(d,e){if(null===e||y(e)||""===e)return e;var g=h.hasOwnProperty(d)?h[d]:null;if(g&&e instanceof g)return e.$$unwrapTrustedValue();if(d===oa.RESOURCE_URL){var g=ra(e.toString()),m,r,q=!1;m=0;for(r=a.length;m<r;m++)if(c(a[m],g)){q=!0;break}if(q)for(m=0,r=b.length;m<r;m++)if(c(b[m],
	g)){q=!1;break}if(q)return e;throw ta("insecurl",e.toString());}if(d===oa.HTML)return f(e);throw ta("unsafe");},valueOf:function(a){return a instanceof g?a.$$unwrapTrustedValue():a}}}]}function wf(){var a=!0;this.enabled=function(b){arguments.length&&(a=!!b);return a};this.$get=["$parse","$sceDelegate",function(b,d){if(a&&8>Ca)throw ta("iequirks");var c=ha(oa);c.isEnabled=function(){return a};c.trustAs=d.trustAs;c.getTrusted=d.getTrusted;c.valueOf=d.valueOf;a||(c.trustAs=c.getTrusted=function(a,b){return b},
	c.valueOf=Xa);c.parseAs=function(a,d){var e=b(d);return e.literal&&e.constant?e:b(d,function(b){return c.getTrusted(a,b)})};var e=c.parseAs,f=c.getTrusted,g=c.trustAs;q(oa,function(a,b){var d=P(b);c[cb("parse_as_"+d)]=function(b){return e(a,b)};c[cb("get_trusted_"+d)]=function(b){return f(a,b)};c[cb("trust_as_"+d)]=function(b){return g(a,b)}});return c}]}function yf(){this.$get=["$window","$document",function(a,b){var d={},c=!(a.chrome&&a.chrome.app&&a.chrome.app.runtime)&&a.history&&a.history.pushState,
	e=X((/android (\d+)/.exec(P((a.navigator||{}).userAgent))||[])[1]),f=/Boxee/i.test((a.navigator||{}).userAgent),g=b[0]||{},h,k=/^(Moz|webkit|ms)(?=[A-Z])/,l=g.body&&g.body.style,n=!1,m=!1;if(l){for(var r in l)if(n=k.exec(r)){h=n[0];h=h.substr(0,1).toUpperCase()+h.substr(1);break}h||(h="WebkitOpacity"in l&&"webkit");n=!!("transition"in l||h+"Transition"in l);m=!!("animation"in l||h+"Animation"in l);!e||n&&m||(n=F(l.webkitTransition),m=F(l.webkitAnimation))}return{history:!(!c||4>e||f),hasEvent:function(a){if("input"===
	a&&11>=Ca)return!1;if(y(d[a])){var b=g.createElement("div");d[a]="on"+a in b}return d[a]},csp:Ea(),vendorPrefix:h,transitions:n,animations:m,android:e}}]}function Af(){var a;this.httpOptions=function(b){return b?(a=b,this):a};this.$get=["$templateCache","$http","$q","$sce",function(b,d,c,e){function f(g,h){f.totalPendingRequests++;F(g)&&b.get(g)||(g=e.getTrustedResourceUrl(g));var k=d.defaults&&d.defaults.transformResponse;K(k)?k=k.filter(function(a){return a!==ac}):k===ac&&(k=null);return d.get(g,
	R({cache:b,transformResponse:k},a))["finally"](function(){f.totalPendingRequests--}).then(function(a){b.put(g,a.data);return a.data},function(a){if(!h)throw mg("tpload",g,a.status,a.statusText);return c.reject(a)})}f.totalPendingRequests=0;return f}]}function Bf(){this.$get=["$rootScope","$browser","$location",function(a,b,d){return{findBindings:function(a,b,d){a=a.getElementsByClassName("ng-binding");var g=[];q(a,function(a){var c=ea.element(a).data("$binding");c&&q(c,function(c){d?(new RegExp("(^|\\s)"+
	vd(b)+"(\\s|\\||$)")).test(c)&&g.push(a):-1!=c.indexOf(b)&&g.push(a)})});return g},findModels:function(a,b,d){for(var g=["ng-","data-ng-","ng\\:"],h=0;h<g.length;++h){var k=a.querySelectorAll("["+g[h]+"model"+(d?"=":"*=")+'"'+b+'"]');if(k.length)return k}},getLocation:function(){return d.url()},setLocation:function(b){b!==d.url()&&(d.url(b),a.$digest())},whenStable:function(a){b.notifyWhenNoOutstandingRequests(a)}}}]}function Cf(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",
	function(a,b,d,c,e){function f(f,k,l){E(f)||(l=k,k=f,f=C);var n=za.call(arguments,3),m=x(l)&&!l,r=(m?c:d).defer(),q=r.promise,s;s=b.defer(function(){try{r.resolve(f.apply(null,n))}catch(b){r.reject(b),e(b)}finally{delete g[q.$$timeoutId]}m||a.$apply()},k);q.$$timeoutId=s;g[s]=r;return q}var g={};f.cancel=function(a){return a&&a.$$timeoutId in g?(g[a.$$timeoutId].reject("canceled"),delete g[a.$$timeoutId],b.defer.cancel(a.$$timeoutId)):!1};return f}]}function ra(a){Ca&&(Y.setAttribute("href",a),a=
	Y.href);Y.setAttribute("href",a);return{href:Y.href,protocol:Y.protocol?Y.protocol.replace(/:$/,""):"",host:Y.host,search:Y.search?Y.search.replace(/^\?/,""):"",hash:Y.hash?Y.hash.replace(/^#/,""):"",hostname:Y.hostname,port:Y.port,pathname:"/"===Y.pathname.charAt(0)?Y.pathname:"/"+Y.pathname}}function hd(a){a=F(a)?ra(a):a;return a.protocol===xd.protocol&&a.host===xd.host}function Df(){this.$get=da(v)}function yd(a){function b(a){try{return decodeURIComponent(a)}catch(b){return a}}var d=a[0]||{},
	c={},e="";return function(){var a,g,h,k,l;a=d.cookie||"";if(a!==e)for(e=a,a=e.split("; "),c={},h=0;h<a.length;h++)g=a[h],k=g.indexOf("="),0<k&&(l=b(g.substring(0,k)),y(c[l])&&(c[l]=b(g.substring(k+1))));return c}}function Hf(){this.$get=yd}function Jc(a){function b(d,c){if(G(d)){var e={};q(d,function(a,c){e[c]=b(c,a)});return e}return a.factory(d+"Filter",c)}this.register=b;this.$get=["$injector",function(a){return function(b){return a.get(b+"Filter")}}];b("currency",zd);b("date",Ad);b("filter",ng);
	b("json",og);b("limitTo",pg);b("lowercase",qg);b("number",Bd);b("orderBy",Cd);b("uppercase",rg)}function ng(){return function(a,b,d){if(!ya(a)){if(null==a)return a;throw O("filter")("notarray",a);}var c;switch(ic(b)){case "function":break;case "boolean":case "null":case "number":case "string":c=!0;case "object":b=sg(b,d,c);break;default:return a}return Array.prototype.filter.call(a,b)}}function sg(a,b,d){var c=G(a)&&"$"in a;!0===b?b=pa:E(b)||(b=function(a,b){if(y(a))return!1;if(null===a||null===b)return a===
	b;if(G(b)||G(a)&&!rc(a))return!1;a=P(""+a);b=P(""+b);return-1!==a.indexOf(b)});return function(e){return c&&!G(e)?Ka(e,a.$,b,!1):Ka(e,a,b,d)}}function Ka(a,b,d,c,e){var f=ic(a),g=ic(b);if("string"===g&&"!"===b.charAt(0))return!Ka(a,b.substring(1),d,c);if(K(a))return a.some(function(a){return Ka(a,b,d,c)});switch(f){case "object":var h;if(c){for(h in a)if("$"!==h.charAt(0)&&Ka(a[h],b,d,!0))return!0;return e?!1:Ka(a,b,d,!1)}if("object"===g){for(h in b)if(e=b[h],!E(e)&&!y(e)&&(f="$"===h,!Ka(f?a:a[h],
	e,d,f,f)))return!1;return!0}return d(a,b);case "function":return!1;default:return d(a,b)}}function ic(a){return null===a?"null":typeof a}function zd(a){var b=a.NUMBER_FORMATS;return function(a,c,e){y(c)&&(c=b.CURRENCY_SYM);y(e)&&(e=b.PATTERNS[1].maxFrac);return null==a?a:Dd(a,b.PATTERNS[1],b.GROUP_SEP,b.DECIMAL_SEP,e).replace(/\u00A4/g,c)}}function Bd(a){var b=a.NUMBER_FORMATS;return function(a,c){return null==a?a:Dd(a,b.PATTERNS[0],b.GROUP_SEP,b.DECIMAL_SEP,c)}}function tg(a){var b=0,d,c,e,f,g;-1<
	(c=a.indexOf(Ed))&&(a=a.replace(Ed,""));0<(e=a.search(/e/i))?(0>c&&(c=e),c+=+a.slice(e+1),a=a.substring(0,e)):0>c&&(c=a.length);for(e=0;a.charAt(e)==jc;e++);if(e==(g=a.length))d=[0],c=1;else{for(g--;a.charAt(g)==jc;)g--;c-=e;d=[];for(f=0;e<=g;e++,f++)d[f]=+a.charAt(e)}c>Fd&&(d=d.splice(0,Fd-1),b=c-1,c=1);return{d:d,e:b,i:c}}function ug(a,b,d,c){var e=a.d,f=e.length-a.i;b=y(b)?Math.min(Math.max(d,f),c):+b;d=b+a.i;c=e[d];if(0<d){e.splice(Math.max(a.i,d));for(var g=d;g<e.length;g++)e[g]=0}else for(f=
	Math.max(0,f),a.i=1,e.length=Math.max(1,d=b+1),e[0]=0,g=1;g<d;g++)e[g]=0;if(5<=c)if(0>d-1){for(c=0;c>d;c--)e.unshift(0),a.i++;e.unshift(1);a.i++}else e[d-1]++;for(;f<Math.max(0,b);f++)e.push(0);if(b=e.reduceRight(function(a,b,c,d){b+=a;d[c]=b%10;return Math.floor(b/10)},0))e.unshift(b),a.i++}function Dd(a,b,d,c,e){if(!F(a)&&!Q(a)||isNaN(a))return"";var f=!isFinite(a),g=!1,h=Math.abs(a)+"",k="";if(f)k="\u221e";else{g=tg(h);ug(g,e,b.minFrac,b.maxFrac);k=g.d;h=g.i;e=g.e;f=[];for(g=k.reduce(function(a,
	b){return a&&!b},!0);0>h;)k.unshift(0),h++;0<h?f=k.splice(h):(f=k,k=[0]);h=[];for(k.length>=b.lgSize&&h.unshift(k.splice(-b.lgSize).join(""));k.length>b.gSize;)h.unshift(k.splice(-b.gSize).join(""));k.length&&h.unshift(k.join(""));k=h.join(d);f.length&&(k+=c+f.join(""));e&&(k+="e+"+e)}return 0>a&&!g?b.negPre+k+b.negSuf:b.posPre+k+b.posSuf}function Ib(a,b,d,c){var e="";if(0>a||c&&0>=a)c?a=-a+1:(a=-a,e="-");for(a=""+a;a.length<b;)a=jc+a;d&&(a=a.substr(a.length-b));return e+a}function W(a,b,d,c,e){d=
	d||0;return function(f){f=f["get"+a]();if(0<d||f>-d)f+=d;0===f&&-12==d&&(f=12);return Ib(f,b,c,e)}}function ib(a,b,d){return function(c,e){var f=c["get"+a](),g=sb((d?"STANDALONE":"")+(b?"SHORT":"")+a);return e[g][f]}}function Gd(a){var b=(new Date(a,0,1)).getDay();return new Date(a,0,(4>=b?5:12)-b)}function Hd(a){return function(b){var d=Gd(b.getFullYear());b=+new Date(b.getFullYear(),b.getMonth(),b.getDate()+(4-b.getDay()))-+d;b=1+Math.round(b/6048E5);return Ib(b,a)}}function kc(a,b){return 0>=a.getFullYear()?
	b.ERAS[0]:b.ERAS[1]}function Ad(a){function b(a){var b;if(b=a.match(d)){a=new Date(0);var f=0,g=0,h=b[8]?a.setUTCFullYear:a.setFullYear,k=b[8]?a.setUTCHours:a.setHours;b[9]&&(f=X(b[9]+b[10]),g=X(b[9]+b[11]));h.call(a,X(b[1]),X(b[2])-1,X(b[3]));f=X(b[4]||0)-f;g=X(b[5]||0)-g;h=X(b[6]||0);b=Math.round(1E3*parseFloat("0."+(b[7]||0)));k.call(a,f,g,h,b)}return a}var d=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(c,d,f){var g="",h=
	[],k,l;d=d||"mediumDate";d=a.DATETIME_FORMATS[d]||d;F(c)&&(c=vg.test(c)?X(c):b(c));Q(c)&&(c=new Date(c));if(!fa(c)||!isFinite(c.getTime()))return c;for(;d;)(l=wg.exec(d))?(h=$a(h,l,1),d=h.pop()):(h.push(d),d=null);var n=c.getTimezoneOffset();f&&(n=vc(f,n),c=Qb(c,f,!0));q(h,function(b){k=xg[b];g+=k?k(c,a.DATETIME_FORMATS,n):"''"===b?"'":b.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return g}}function og(){return function(a,b){y(b)&&(b=2);return ab(a,b)}}function pg(){return function(a,b,d){b=Infinity===
	Math.abs(Number(b))?Number(b):X(b);if(isNaN(b))return a;Q(a)&&(a=a.toString());if(!K(a)&&!F(a))return a;d=!d||isNaN(d)?0:X(d);d=0>d?Math.max(0,a.length+d):d;return 0<=b?a.slice(d,d+b):0===d?a.slice(b,a.length):a.slice(Math.max(0,d+b),d)}}function Cd(a){function b(b,d){d=d?-1:1;return b.map(function(b){var c=1,h=Xa;if(E(b))h=b;else if(F(b)){if("+"==b.charAt(0)||"-"==b.charAt(0))c="-"==b.charAt(0)?-1:1,b=b.substring(1);if(""!==b&&(h=a(b),h.constant))var k=h(),h=function(a){return a[k]}}return{get:h,
	descending:c*d}})}function d(a){switch(typeof a){case "number":case "boolean":case "string":return!0;default:return!1}}return function(a,e,f){if(null==a)return a;if(!ya(a))throw O("orderBy")("notarray",a);K(e)||(e=[e]);0===e.length&&(e=["+"]);var g=b(e,f);g.push({get:function(){return{}},descending:f?-1:1});a=Array.prototype.map.call(a,function(a,b){return{value:a,predicateValues:g.map(function(c){var e=c.get(a);c=typeof e;if(null===e)c="string",e="null";else if("string"===c)e=e.toLowerCase();else if("object"===
	c)a:{if("function"===typeof e.valueOf&&(e=e.valueOf(),d(e)))break a;if(rc(e)&&(e=e.toString(),d(e)))break a;e=b}return{value:e,type:c}})}});a.sort(function(a,b){for(var c=0,d=0,e=g.length;d<e;++d){var c=a.predicateValues[d],f=b.predicateValues[d],q=0;c.type===f.type?c.value!==f.value&&(q=c.value<f.value?-1:1):q=c.type<f.type?-1:1;if(c=q*g[d].descending)break}return c});return a=a.map(function(a){return a.value})}}function La(a){E(a)&&(a={link:a});a.restrict=a.restrict||"AC";return da(a)}function Id(a,
	b,d,c,e){var f=this,g=[];f.$error={};f.$$success={};f.$pending=void 0;f.$name=e(b.name||b.ngForm||"")(d);f.$dirty=!1;f.$pristine=!0;f.$valid=!0;f.$invalid=!1;f.$submitted=!1;f.$$parentForm=Jb;f.$rollbackViewValue=function(){q(g,function(a){a.$rollbackViewValue()})};f.$commitViewValue=function(){q(g,function(a){a.$commitViewValue()})};f.$addControl=function(a){Qa(a.$name,"input");g.push(a);a.$name&&(f[a.$name]=a);a.$$parentForm=f};f.$$renameControl=function(a,b){var c=a.$name;f[c]===a&&delete f[c];
	f[b]=a;a.$name=b};f.$removeControl=function(a){a.$name&&f[a.$name]===a&&delete f[a.$name];q(f.$pending,function(b,c){f.$setValidity(c,null,a)});q(f.$error,function(b,c){f.$setValidity(c,null,a)});q(f.$$success,function(b,c){f.$setValidity(c,null,a)});Za(g,a);a.$$parentForm=Jb};Jd({ctrl:this,$element:a,set:function(a,b,c){var d=a[b];d?-1===d.indexOf(c)&&d.push(c):a[b]=[c]},unset:function(a,b,c){var d=a[b];d&&(Za(d,c),0===d.length&&delete a[b])},$animate:c});f.$setDirty=function(){c.removeClass(a,Ua);
	c.addClass(a,Kb);f.$dirty=!0;f.$pristine=!1;f.$$parentForm.$setDirty()};f.$setPristine=function(){c.setClass(a,Ua,Kb+" ng-submitted");f.$dirty=!1;f.$pristine=!0;f.$submitted=!1;q(g,function(a){a.$setPristine()})};f.$setUntouched=function(){q(g,function(a){a.$setUntouched()})};f.$setSubmitted=function(){c.addClass(a,"ng-submitted");f.$submitted=!0;f.$$parentForm.$setSubmitted()}}function lc(a){a.$formatters.push(function(b){return a.$isEmpty(b)?b:b.toString()})}function jb(a,b,d,c,e,f){var g=P(b[0].type);
	if(!e.android){var h=!1;b.on("compositionstart",function(){h=!0});b.on("compositionend",function(){h=!1;l()})}var k,l=function(a){k&&(f.defer.cancel(k),k=null);if(!h){var e=b.val();a=a&&a.type;"password"===g||d.ngTrim&&"false"===d.ngTrim||(e=V(e));(c.$viewValue!==e||""===e&&c.$$hasNativeValidators)&&c.$setViewValue(e,a)}};if(e.hasEvent("input"))b.on("input",l);else{var n=function(a,b,c){k||(k=f.defer(function(){k=null;b&&b.value===c||l(a)}))};b.on("keydown",function(a){var b=a.keyCode;91===b||15<
	b&&19>b||37<=b&&40>=b||n(a,this,this.value)});if(e.hasEvent("paste"))b.on("paste cut",n)}b.on("change",l);if(Kd[g]&&c.$$hasNativeValidators&&g===d.type)b.on("keydown wheel mousedown",function(a){if(!k){var b=this.validity,c=b.badInput,d=b.typeMismatch;k=f.defer(function(){k=null;b.badInput===c&&b.typeMismatch===d||l(a)})}});c.$render=function(){var a=c.$isEmpty(c.$viewValue)?"":c.$viewValue;b.val()!==a&&b.val(a)}}function Lb(a,b){return function(d,c){var e,f;if(fa(d))return d;if(F(d)){'"'==d.charAt(0)&&
	'"'==d.charAt(d.length-1)&&(d=d.substring(1,d.length-1));if(yg.test(d))return new Date(d);a.lastIndex=0;if(e=a.exec(d))return e.shift(),f=c?{yyyy:c.getFullYear(),MM:c.getMonth()+1,dd:c.getDate(),HH:c.getHours(),mm:c.getMinutes(),ss:c.getSeconds(),sss:c.getMilliseconds()/1E3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},q(e,function(a,c){c<b.length&&(f[b[c]]=+a)}),new Date(f.yyyy,f.MM-1,f.dd,f.HH,f.mm,f.ss||0,1E3*f.sss||0)}return NaN}}function kb(a,b,d,c){return function(e,f,g,h,k,l,n){function m(a){return a&&
	!(a.getTime&&a.getTime()!==a.getTime())}function r(a){return x(a)&&!fa(a)?d(a)||void 0:a}Ld(e,f,g,h);jb(e,f,g,h,k,l);var q=h&&h.$options&&h.$options.timezone,s;h.$$parserName=a;h.$parsers.push(function(a){if(h.$isEmpty(a))return null;if(b.test(a))return a=d(a,s),q&&(a=Qb(a,q)),a});h.$formatters.push(function(a){if(a&&!fa(a))throw lb("datefmt",a);if(m(a))return(s=a)&&q&&(s=Qb(s,q,!0)),n("date")(a,c,q);s=null;return""});if(x(g.min)||g.ngMin){var w;h.$validators.min=function(a){return!m(a)||y(w)||d(a)>=
	w};g.$observe("min",function(a){w=r(a);h.$validate()})}if(x(g.max)||g.ngMax){var p;h.$validators.max=function(a){return!m(a)||y(p)||d(a)<=p};g.$observe("max",function(a){p=r(a);h.$validate()})}}}function Ld(a,b,d,c){(c.$$hasNativeValidators=G(b[0].validity))&&c.$parsers.push(function(a){var c=b.prop("validity")||{};return c.badInput||c.typeMismatch?void 0:a})}function Md(a,b,d,c,e){if(x(c)){a=a(c);if(!a.constant)throw lb("constexpr",d,c);return a(b)}return e}function mc(a,b){a="ngClass"+a;return["$animate",
	function(d){function c(a,b){var c=[],d=0;a:for(;d<a.length;d++){for(var e=a[d],n=0;n<b.length;n++)if(e==b[n])continue a;c.push(e)}return c}function e(a){var b=[];return K(a)?(q(a,function(a){b=b.concat(e(a))}),b):F(a)?a.split(" "):G(a)?(q(a,function(a,c){a&&(b=b.concat(c.split(" ")))}),b):a}return{restrict:"AC",link:function(f,g,h){function k(a){a=l(a,1);h.$addClass(a)}function l(a,b){var c=g.data("$classCounts")||T(),d=[];q(a,function(a){if(0<b||c[a])c[a]=(c[a]||0)+b,c[a]===+(0<b)&&d.push(a)});g.data("$classCounts",
	c);return d.join(" ")}function n(a,b){var e=c(b,a),f=c(a,b),e=l(e,1),f=l(f,-1);e&&e.length&&d.addClass(g,e);f&&f.length&&d.removeClass(g,f)}function m(a){if(!0===b||f.$index%2===b){var c=e(a||[]);if(!r)k(c);else if(!pa(a,r)){var d=e(r);n(d,c)}}r=K(a)?a.map(function(a){return ha(a)}):ha(a)}var r;f.$watch(h[a],m,!0);h.$observe("class",function(b){m(f.$eval(h[a]))});"ngClass"!==a&&f.$watch("$index",function(c,d){var g=c&1;if(g!==(d&1)){var m=e(f.$eval(h[a]));g===b?k(m):(g=l(m,-1),h.$removeClass(g))}})}}}]}
	function Jd(a){function b(a,b){b&&!f[a]?(k.addClass(e,a),f[a]=!0):!b&&f[a]&&(k.removeClass(e,a),f[a]=!1)}function d(a,c){a=a?"-"+zc(a,"-"):"";b(mb+a,!0===c);b(Nd+a,!1===c)}var c=a.ctrl,e=a.$element,f={},g=a.set,h=a.unset,k=a.$animate;f[Nd]=!(f[mb]=e.hasClass(mb));c.$setValidity=function(a,e,f){y(e)?(c.$pending||(c.$pending={}),g(c.$pending,a,f)):(c.$pending&&h(c.$pending,a,f),Od(c.$pending)&&(c.$pending=void 0));Da(e)?e?(h(c.$error,a,f),g(c.$$success,a,f)):(g(c.$error,a,f),h(c.$$success,a,f)):(h(c.$error,
	a,f),h(c.$$success,a,f));c.$pending?(b(Pd,!0),c.$valid=c.$invalid=void 0,d("",null)):(b(Pd,!1),c.$valid=Od(c.$error),c.$invalid=!c.$valid,d("",c.$valid));e=c.$pending&&c.$pending[a]?void 0:c.$error[a]?!1:c.$$success[a]?!0:null;d(a,e);c.$$parentForm.$setValidity(a,e,c)}}function Od(a){if(a)for(var b in a)if(a.hasOwnProperty(b))return!1;return!0}var zg=/^\/(.+)\/([a-z]*)$/,ua=Object.prototype.hasOwnProperty,P=function(a){return F(a)?a.toLowerCase():a},sb=function(a){return F(a)?a.toUpperCase():a},Ca,
	B,Z,za=[].slice,Zf=[].splice,Ag=[].push,ma=Object.prototype.toString,sc=Object.getPrototypeOf,Aa=O("ng"),ea=v.angular||(v.angular={}),Sb,nb=0;Ca=v.document.documentMode;C.$inject=[];Xa.$inject=[];var K=Array.isArray,$d=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,V=function(a){return F(a)?a.trim():a},vd=function(a){return a.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Ea=function(){if(!x(Ea.rules)){var a=v.document.querySelector("[ng-csp]")||
	v.document.querySelector("[data-ng-csp]");if(a){var b=a.getAttribute("ng-csp")||a.getAttribute("data-ng-csp");Ea.rules={noUnsafeEval:!b||-1!==b.indexOf("no-unsafe-eval"),noInlineStyle:!b||-1!==b.indexOf("no-inline-style")}}else{a=Ea;try{new Function(""),b=!1}catch(d){b=!0}a.rules={noUnsafeEval:b,noInlineStyle:!1}}}return Ea.rules},pb=function(){if(x(pb.name_))return pb.name_;var a,b,d=Na.length,c,e;for(b=0;b<d;++b)if(c=Na[b],a=v.document.querySelector("["+c.replace(":","\\:")+"jq]")){e=a.getAttribute(c+
	"jq");break}return pb.name_=e},ce=/:/g,Na=["ng-","data-ng-","ng:","x-ng-"],he=/[A-Z]/g,Ac=!1,Ma=3,le={full:"1.5.5",major:1,minor:5,dot:5,codeName:"material-conspiration"};U.expando="ng339";var eb=U.cache={},Nf=1;U._data=function(a){return this.cache[a[this.expando]]||{}};var If=/([\:\-\_]+(.))/g,Jf=/^moz([A-Z])/,wb={mouseleave:"mouseout",mouseenter:"mouseover"},Ub=O("jqLite"),Mf=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Tb=/<|&#?\w+;/,Kf=/<([\w:-]+)/,Lf=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	ia={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option;ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead;ia.th=ia.td;var Sf=v.Node.prototype.contains||function(a){return!!(this.compareDocumentPosition(a)&16)},Oa=U.prototype={ready:function(a){function b(){d||(d=!0,a())}var d=!1;"complete"===
	v.document.readyState?v.setTimeout(b):(this.on("DOMContentLoaded",b),U(v).on("load",b))},toString:function(){var a=[];q(this,function(b){a.push(""+b)});return"["+a.join(", ")+"]"},eq:function(a){return 0<=a?B(this[a]):B(this[this.length+a])},length:0,push:Ag,sort:[].sort,splice:[].splice},Cb={};q("multiple selected checked disabled readOnly required open".split(" "),function(a){Cb[P(a)]=a});var Sc={};q("input select option textarea button form details".split(" "),function(a){Sc[a]=!0});var ad={ngMinlength:"minlength",
	ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};q({data:Wb,removeData:db,hasData:function(a){for(var b in eb[a.ng339])return!0;return!1},cleanData:function(a){for(var b=0,d=a.length;b<d;b++)db(a[b])}},function(a,b){U[b]=a});q({data:Wb,inheritedData:Ab,scope:function(a){return B.data(a,"$scope")||Ab(a.parentNode||a,["$isolateScope","$scope"])},isolateScope:function(a){return B.data(a,"$isolateScope")||B.data(a,"$isolateScopeNoTemplate")},controller:Pc,injector:function(a){return Ab(a,
	"$injector")},removeAttr:function(a,b){a.removeAttribute(b)},hasClass:xb,css:function(a,b,d){b=cb(b);if(x(d))a.style[b]=d;else return a.style[b]},attr:function(a,b,d){var c=a.nodeType;if(c!==Ma&&2!==c&&8!==c)if(c=P(b),Cb[c])if(x(d))d?(a[b]=!0,a.setAttribute(b,c)):(a[b]=!1,a.removeAttribute(c));else return a[b]||(a.attributes.getNamedItem(b)||C).specified?c:void 0;else if(x(d))a.setAttribute(b,d);else if(a.getAttribute)return a=a.getAttribute(b,2),null===a?void 0:a},prop:function(a,b,d){if(x(d))a[b]=
	d;else return a[b]},text:function(){function a(a,d){if(y(d)){var c=a.nodeType;return 1===c||c===Ma?a.textContent:""}a.textContent=d}a.$dv="";return a}(),val:function(a,b){if(y(b)){if(a.multiple&&"select"===va(a)){var d=[];q(a.options,function(a){a.selected&&d.push(a.value||a.text)});return 0===d.length?null:d}return a.value}a.value=b},html:function(a,b){if(y(b))return a.innerHTML;ub(a,!0);a.innerHTML=b},empty:Qc},function(a,b){U.prototype[b]=function(b,c){var e,f,g=this.length;if(a!==Qc&&y(2==a.length&&
	a!==xb&&a!==Pc?b:c)){if(G(b)){for(e=0;e<g;e++)if(a===Wb)a(this[e],b);else for(f in b)a(this[e],f,b[f]);return this}e=a.$dv;g=y(e)?Math.min(g,1):g;for(f=0;f<g;f++){var h=a(this[f],b,c);e=e?e+h:h}return e}for(e=0;e<g;e++)a(this[e],b,c);return this}});q({removeData:db,on:function(a,b,d,c){if(x(c))throw Ub("onargs");if(Kc(a)){c=vb(a,!0);var e=c.events,f=c.handle;f||(f=c.handle=Pf(a,e));c=0<=b.indexOf(" ")?b.split(" "):[b];for(var g=c.length,h=function(b,c,g){var h=e[b];h||(h=e[b]=[],h.specialHandlerWrapper=
	c,"$destroy"===b||g||a.addEventListener(b,f,!1));h.push(d)};g--;)b=c[g],wb[b]?(h(wb[b],Rf),h(b,void 0,!0)):h(b)}},off:Oc,one:function(a,b,d){a=B(a);a.on(b,function e(){a.off(b,d);a.off(b,e)});a.on(b,d)},replaceWith:function(a,b){var d,c=a.parentNode;ub(a);q(new U(b),function(b){d?c.insertBefore(b,d.nextSibling):c.replaceChild(b,a);d=b})},children:function(a){var b=[];q(a.childNodes,function(a){1===a.nodeType&&b.push(a)});return b},contents:function(a){return a.contentDocument||a.childNodes||[]},append:function(a,
	b){var d=a.nodeType;if(1===d||11===d){b=new U(b);for(var d=0,c=b.length;d<c;d++)a.appendChild(b[d])}},prepend:function(a,b){if(1===a.nodeType){var d=a.firstChild;q(new U(b),function(b){a.insertBefore(b,d)})}},wrap:function(a,b){Mc(a,B(b).eq(0).clone()[0])},remove:Bb,detach:function(a){Bb(a,!0)},after:function(a,b){var d=a,c=a.parentNode;b=new U(b);for(var e=0,f=b.length;e<f;e++){var g=b[e];c.insertBefore(g,d.nextSibling);d=g}},addClass:zb,removeClass:yb,toggleClass:function(a,b,d){b&&q(b.split(" "),
	function(b){var e=d;y(e)&&(e=!xb(a,b));(e?zb:yb)(a,b)})},parent:function(a){return(a=a.parentNode)&&11!==a.nodeType?a:null},next:function(a){return a.nextElementSibling},find:function(a,b){return a.getElementsByTagName?a.getElementsByTagName(b):[]},clone:Vb,triggerHandler:function(a,b,d){var c,e,f=b.type||b,g=vb(a);if(g=(g=g&&g.events)&&g[f])c={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=
	!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:C,type:f,target:a},b.type&&(c=R(c,b)),b=ha(g),e=d?[c].concat(d):[c],q(b,function(b){c.isImmediatePropagationStopped()||b.apply(a,e)})}},function(a,b){U.prototype[b]=function(b,c,e){for(var f,g=0,h=this.length;g<h;g++)y(f)?(f=a(this[g],b,c,e),x(f)&&(f=B(f))):Nc(f,a(this[g],b,c,e));return x(f)?f:this};U.prototype.bind=U.prototype.on;U.prototype.unbind=U.prototype.off});Ra.prototype={put:function(a,
	b){this[Fa(a,this.nextUid)]=b},get:function(a){return this[Fa(a,this.nextUid)]},remove:function(a){var b=this[a=Fa(a,this.nextUid)];delete this[a];return b}};var Gf=[function(){this.$get=[function(){return Ra}]}],Uf=/^([^\(]+?)=>/,Vf=/^[^\(]*\(\s*([^\)]*)\)/m,Bg=/,/,Cg=/^\s*(_?)(\S+?)\1\s*$/,Tf=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,Ga=O("$injector");bb.$$annotate=function(a,b,d){var c;if("function"===typeof a){if(!(c=a.$inject)){c=[];if(a.length){if(b)throw F(d)&&d||(d=a.name||Wf(a)),Ga("strictdi",d);
	b=Tc(a);q(b[1].split(Bg),function(a){a.replace(Cg,function(a,b,d){c.push(d)})})}a.$inject=c}}else K(a)?(b=a.length-1,Pa(a[b],"fn"),c=a.slice(0,b)):Pa(a,"fn",!0);return c};var Qd=O("$animate"),Ze=function(){this.$get=C},$e=function(){var a=new Ra,b=[];this.$get=["$$AnimateRunner","$rootScope",function(d,c){function e(a,b,c){var d=!1;b&&(b=F(b)?b.split(" "):K(b)?b:[],q(b,function(b){b&&(d=!0,a[b]=c)}));return d}function f(){q(b,function(b){var c=a.get(b);if(c){var d=Xf(b.attr("class")),e="",f="";q(c,
	function(a,b){a!==!!d[b]&&(a?e+=(e.length?" ":"")+b:f+=(f.length?" ":"")+b)});q(b,function(a){e&&zb(a,e);f&&yb(a,f)});a.remove(b)}});b.length=0}return{enabled:C,on:C,off:C,pin:C,push:function(g,h,k,l){l&&l();k=k||{};k.from&&g.css(k.from);k.to&&g.css(k.to);if(k.addClass||k.removeClass)if(h=k.addClass,l=k.removeClass,k=a.get(g)||{},h=e(k,h,!0),l=e(k,l,!1),h||l)a.put(g,k),b.push(g),1===b.length&&c.$$postDigest(f);g=new d;g.complete();return g}}}]},Xe=["$provide",function(a){var b=this;this.$$registeredAnimations=
	Object.create(null);this.register=function(d,c){if(d&&"."!==d.charAt(0))throw Qd("notcsel",d);var e=d+"-animation";b.$$registeredAnimations[d.substr(1)]=e;a.factory(e,c)};this.classNameFilter=function(a){if(1===arguments.length&&(this.$$classNameFilter=a instanceof RegExp?a:null)&&/(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString()))throw Qd("nongcls","ng-animate");return this.$$classNameFilter};this.$get=["$$animateQueue",function(a){function b(a,c,d){if(d){var h;a:{for(h=0;h<d.length;h++){var k=
	d[h];if(1===k.nodeType){h=k;break a}}h=void 0}!h||h.parentNode||h.previousElementSibling||(d=null)}d?d.after(a):c.prepend(a)}return{on:a.on,off:a.off,pin:a.pin,enabled:a.enabled,cancel:function(a){a.end&&a.end()},enter:function(e,f,g,h){f=f&&B(f);g=g&&B(g);f=f||g.parent();b(e,f,g);return a.push(e,"enter",Ha(h))},move:function(e,f,g,h){f=f&&B(f);g=g&&B(g);f=f||g.parent();b(e,f,g);return a.push(e,"move",Ha(h))},leave:function(b,c){return a.push(b,"leave",Ha(c),function(){b.remove()})},addClass:function(b,
	c,g){g=Ha(g);g.addClass=fb(g.addclass,c);return a.push(b,"addClass",g)},removeClass:function(b,c,g){g=Ha(g);g.removeClass=fb(g.removeClass,c);return a.push(b,"removeClass",g)},setClass:function(b,c,g,h){h=Ha(h);h.addClass=fb(h.addClass,c);h.removeClass=fb(h.removeClass,g);return a.push(b,"setClass",h)},animate:function(b,c,g,h,k){k=Ha(k);k.from=k.from?R(k.from,c):c;k.to=k.to?R(k.to,g):g;k.tempClasses=fb(k.tempClasses,h||"ng-inline-animate");return a.push(b,"animate",k)}}}]}],bf=function(){this.$get=
	["$$rAF",function(a){function b(b){d.push(b);1<d.length||a(function(){for(var a=0;a<d.length;a++)d[a]();d=[]})}var d=[];return function(){var a=!1;b(function(){a=!0});return function(d){a?d():b(d)}}}]},af=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(a,b,d,c,e){function f(a){this.setHost(a);var b=d();this._doneCallbacks=[];this._tick=function(a){var d=c[0];d&&d.hidden?e(a,0,!1):b(a)};this._state=0}f.chain=function(a,b){function c(){if(d===a.length)b(!0);
	else a[d](function(a){!1===a?b(!1):(d++,c())})}var d=0;c()};f.all=function(a,b){function c(f){e=e&&f;++d===a.length&&b(e)}var d=0,e=!0;q(a,function(a){a.done(c)})};f.prototype={setHost:function(a){this.host=a||{}},done:function(a){2===this._state?a():this._doneCallbacks.push(a)},progress:C,getPromise:function(){if(!this.promise){var b=this;this.promise=a(function(a,c){b.done(function(b){!1===b?c():a()})})}return this.promise},then:function(a,b){return this.getPromise().then(a,b)},"catch":function(a){return this.getPromise()["catch"](a)},
	"finally":function(a){return this.getPromise()["finally"](a)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end();this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel();this._resolve(!1)},complete:function(a){var b=this;0===b._state&&(b._state=1,b._tick(function(){b._resolve(a)}))},_resolve:function(a){2!==this._state&&(q(this._doneCallbacks,function(b){b(a)}),this._doneCallbacks.length=
	0,this._state=2)}};return f}]},Ye=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(a,b,d){return function(b,e){function f(){a(function(){g.addClass&&(b.addClass(g.addClass),g.addClass=null);g.removeClass&&(b.removeClass(g.removeClass),g.removeClass=null);g.to&&(b.css(g.to),g.to=null);h||k.complete();h=!0});return k}var g=e||{};g.$$prepared||(g=qa(g));g.cleanupStyles&&(g.from=g.to=null);g.from&&(b.css(g.from),g.from=null);var h,k=new d;return{start:f,end:f}}}]},ga=O("$compile"),Zb=new function(){};
	Cc.$inject=["$provide","$$sanitizeUriProvider"];Db.prototype.isFirstChange=function(){return this.previousValue===Zb};var Vc=/^((?:x|data)[\:\-_])/i,$f=O("$controller"),bd=/^(\S+)(\s+as\s+([\w$]+))?$/,hf=function(){this.$get=["$document",function(a){return function(b){b?!b.nodeType&&b instanceof B&&(b=b[0]):b=a[0].body;return b.offsetWidth+1}}]},cd="application/json",bc={"Content-Type":cd+";charset=utf-8"},bg=/^\[|^\{(?!\{)/,cg={"[":/]$/,"{":/}$/},ag=/^\)\]\}',?\n/,Dg=O("$http"),gd=function(a){return function(){throw Dg("legacy",
	a);}},Ja=ea.$interpolateMinErr=O("$interpolate");Ja.throwNoconcat=function(a){throw Ja("noconcat",a);};Ja.interr=function(a,b){return Ja("interr",a,b.toString())};var Eg=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,eg={http:80,https:443,ftp:21},Eb=O("$location"),Fg={$$html5:!1,$$replace:!1,absUrl:Fb("$$absUrl"),url:function(a){if(y(a))return this.$$url;var b=Eg.exec(a);(b[1]||""===a)&&this.path(decodeURIComponent(b[1]));(b[2]||b[1]||""===a)&&this.search(b[3]||"");this.hash(b[5]||"");return this},protocol:Fb("$$protocol"),
	host:Fb("$$host"),port:Fb("$$port"),path:ld("$$path",function(a){a=null!==a?a.toString():"";return"/"==a.charAt(0)?a:"/"+a}),search:function(a,b){switch(arguments.length){case 0:return this.$$search;case 1:if(F(a)||Q(a))a=a.toString(),this.$$search=xc(a);else if(G(a))a=qa(a,{}),q(a,function(b,c){null==b&&delete a[c]}),this.$$search=a;else throw Eb("isrcharg");break;default:y(b)||null===b?delete this.$$search[a]:this.$$search[a]=b}this.$$compose();return this},hash:ld("$$hash",function(a){return null!==
	a?a.toString():""}),replace:function(){this.$$replace=!0;return this}};q([kd,ec,dc],function(a){a.prototype=Object.create(Fg);a.prototype.state=function(b){if(!arguments.length)return this.$$state;if(a!==dc||!this.$$html5)throw Eb("nostate");this.$$state=y(b)?null:b;return this}});var ca=O("$parse"),gg=Function.prototype.call,hg=Function.prototype.apply,ig=Function.prototype.bind,Mb=T();q("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(a){Mb[a]=!0});var Gg={n:"\n",f:"\f",r:"\r",
	t:"\t",v:"\v","'":"'",'"':'"'},gc=function(a){this.options=a};gc.prototype={constructor:gc,lex:function(a){this.text=a;this.index=0;for(this.tokens=[];this.index<this.text.length;)if(a=this.text.charAt(this.index),'"'===a||"'"===a)this.readString(a);else if(this.isNumber(a)||"."===a&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(a,"(){}[].,;:?"))this.tokens.push({index:this.index,text:a}),this.index++;else if(this.isWhitespace(a))this.index++;
	else{var b=a+this.peek(),d=b+this.peek(2),c=Mb[b],e=Mb[d];Mb[a]||c||e?(a=e?d:c?b:a,this.tokens.push({index:this.index,text:a,operator:!0}),this.index+=a.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(a,b){return-1!==b.indexOf(a)},peek:function(a){a=a||1;return this.index+a<this.text.length?this.text.charAt(this.index+a):!1},isNumber:function(a){return"0"<=a&&"9">=a&&"string"===typeof a},isWhitespace:function(a){return" "===a||"\r"===a||
	"\t"===a||"\n"===a||"\v"===a||"\u00a0"===a},isIdentifierStart:function(a){return this.options.isIdentifierStart?this.options.isIdentifierStart(a,this.codePointAt(a)):this.isValidIdentifierStart(a)},isValidIdentifierStart:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isIdentifierContinue:function(a){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(a,this.codePointAt(a)):this.isValidIdentifierContinue(a)},isValidIdentifierContinue:function(a,b){return this.isValidIdentifierStart(a,
	b)||this.isNumber(a)},codePointAt:function(a){return 1===a.length?a.charCodeAt(0):(a.charCodeAt(0)<<10)+a.charCodeAt(1)-56613888},peekMultichar:function(){var a=this.text.charAt(this.index),b=this.peek();if(!b)return a;var d=a.charCodeAt(0),c=b.charCodeAt(0);return 55296<=d&&56319>=d&&56320<=c&&57343>=c?a+b:a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},throwError:function(a,b,d){d=d||this.index;b=x(b)?"s "+b+"-"+this.index+" ["+this.text.substring(b,d)+"]":" "+d;throw ca("lexerr",
	a,b,this.text);},readNumber:function(){for(var a="",b=this.index;this.index<this.text.length;){var d=P(this.text.charAt(this.index));if("."==d||this.isNumber(d))a+=d;else{var c=this.peek();if("e"==d&&this.isExpOperator(c))a+=d;else if(this.isExpOperator(d)&&c&&this.isNumber(c)&&"e"==a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||c&&this.isNumber(c)||"e"!=a.charAt(a.length-1))break;else this.throwError("Invalid exponent")}this.index++}this.tokens.push({index:b,text:a,constant:!0,value:Number(a)})},
	readIdent:function(){var a=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var b=this.peekMultichar();if(!this.isIdentifierContinue(b))break;this.index+=b.length}this.tokens.push({index:a,text:this.text.slice(a,this.index),identifier:!0})},readString:function(a){var b=this.index;this.index++;for(var d="",c=a,e=!1;this.index<this.text.length;){var f=this.text.charAt(this.index),c=c+f;if(e)"u"===f?(e=this.text.substring(this.index+1,this.index+5),e.match(/[\da-f]{4}/i)||
	this.throwError("Invalid unicode escape [\\u"+e+"]"),this.index+=4,d+=String.fromCharCode(parseInt(e,16))):d+=Gg[f]||f,e=!1;else if("\\"===f)e=!0;else{if(f===a){this.index++;this.tokens.push({index:b,text:c,constant:!0,value:d});return}d+=f}this.index++}this.throwError("Unterminated quote",b)}};var s=function(a,b){this.lexer=a;this.options=b};s.Program="Program";s.ExpressionStatement="ExpressionStatement";s.AssignmentExpression="AssignmentExpression";s.ConditionalExpression="ConditionalExpression";
	s.LogicalExpression="LogicalExpression";s.BinaryExpression="BinaryExpression";s.UnaryExpression="UnaryExpression";s.CallExpression="CallExpression";s.MemberExpression="MemberExpression";s.Identifier="Identifier";s.Literal="Literal";s.ArrayExpression="ArrayExpression";s.Property="Property";s.ObjectExpression="ObjectExpression";s.ThisExpression="ThisExpression";s.LocalsExpression="LocalsExpression";s.NGValueParameter="NGValueParameter";s.prototype={ast:function(a){this.text=a;this.tokens=this.lexer.lex(a);
	a=this.program();0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]);return a},program:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.expressionStatement()),!this.expect(";"))return{type:s.Program,body:a}},expressionStatement:function(){return{type:s.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var a=this.expression();this.expect("|");)a=this.filter(a);return a},expression:function(){return this.assignment()},
	assignment:function(){var a=this.ternary();this.expect("=")&&(a={type:s.AssignmentExpression,left:a,right:this.assignment(),operator:"="});return a},ternary:function(){var a=this.logicalOR(),b,d;return this.expect("?")&&(b=this.expression(),this.consume(":"))?(d=this.expression(),{type:s.ConditionalExpression,test:a,alternate:b,consequent:d}):a},logicalOR:function(){for(var a=this.logicalAND();this.expect("||");)a={type:s.LogicalExpression,operator:"||",left:a,right:this.logicalAND()};return a},logicalAND:function(){for(var a=
	this.equality();this.expect("&&");)a={type:s.LogicalExpression,operator:"&&",left:a,right:this.equality()};return a},equality:function(){for(var a=this.relational(),b;b=this.expect("==","!=","===","!==");)a={type:s.BinaryExpression,operator:b.text,left:a,right:this.relational()};return a},relational:function(){for(var a=this.additive(),b;b=this.expect("<",">","<=",">=");)a={type:s.BinaryExpression,operator:b.text,left:a,right:this.additive()};return a},additive:function(){for(var a=this.multiplicative(),
	b;b=this.expect("+","-");)a={type:s.BinaryExpression,operator:b.text,left:a,right:this.multiplicative()};return a},multiplicative:function(){for(var a=this.unary(),b;b=this.expect("*","/","%");)a={type:s.BinaryExpression,operator:b.text,left:a,right:this.unary()};return a},unary:function(){var a;return(a=this.expect("+","-","!"))?{type:s.UnaryExpression,operator:a.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var a;this.expect("(")?(a=this.filterChain(),this.consume(")")):
	this.expect("[")?a=this.arrayDeclaration():this.expect("{")?a=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?a=qa(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?a={type:s.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?a=this.identifier():this.peek().constant?a=this.constant():this.throwError("not a primary expression",this.peek());for(var b;b=this.expect("(","[",".");)"("===b.text?(a={type:s.CallExpression,
	callee:a,arguments:this.parseArguments()},this.consume(")")):"["===b.text?(a={type:s.MemberExpression,object:a,property:this.expression(),computed:!0},this.consume("]")):"."===b.text?a={type:s.MemberExpression,object:a,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return a},filter:function(a){a=[a];for(var b={type:s.CallExpression,callee:this.identifier(),arguments:a,filter:!0};this.expect(":");)a.push(this.expression());return b},parseArguments:function(){var a=[];if(")"!==
	this.peekToken().text){do a.push(this.expression());while(this.expect(","))}return a},identifier:function(){var a=this.consume();a.identifier||this.throwError("is not a valid identifier",a);return{type:s.Identifier,name:a.text}},constant:function(){return{type:s.Literal,value:this.consume().value}},arrayDeclaration:function(){var a=[];if("]"!==this.peekToken().text){do{if(this.peek("]"))break;a.push(this.expression())}while(this.expect(","))}this.consume("]");return{type:s.ArrayExpression,elements:a}},
	object:function(){var a=[],b;if("}"!==this.peekToken().text){do{if(this.peek("}"))break;b={type:s.Property,kind:"init"};this.peek().constant?b.key=this.constant():this.peek().identifier?b.key=this.identifier():this.throwError("invalid key",this.peek());this.consume(":");b.value=this.expression();a.push(b)}while(this.expect(","))}this.consume("}");return{type:s.ObjectExpression,properties:a}},throwError:function(a,b){throw ca("syntax",b.text,a,b.index+1,this.text,this.text.substring(b.index));},consume:function(a){if(0===
	this.tokens.length)throw ca("ueoe",this.text);var b=this.expect(a);b||this.throwError("is unexpected, expecting ["+a+"]",this.peek());return b},peekToken:function(){if(0===this.tokens.length)throw ca("ueoe",this.text);return this.tokens[0]},peek:function(a,b,d,c){return this.peekAhead(0,a,b,d,c)},peekAhead:function(a,b,d,c,e){if(this.tokens.length>a){a=this.tokens[a];var f=a.text;if(f===b||f===d||f===c||f===e||!(b||d||c||e))return a}return!1},expect:function(a,b,d,c){return(a=this.peek(a,b,d,c))?
	(this.tokens.shift(),a):!1},selfReferential:{"this":{type:s.ThisExpression},$locals:{type:s.LocalsExpression}}};sd.prototype={compile:function(a,b){var d=this,c=this.astBuilder.ast(a);this.state={nextId:0,filters:{},expensiveChecks:b,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]};aa(c,d.$filter);var e="",f;this.stage="assign";if(f=qd(c))this.state.computing="assign",e=this.nextId(),this.recurse(f,e),this.return_(e),e="fn.assign="+this.generateFunction("assign","s,v,l");f=od(c.body);
	d.stage="inputs";q(f,function(a,b){var c="fn"+b;d.state[c]={vars:[],body:[],own:{}};d.state.computing=c;var e=d.nextId();d.recurse(a,e);d.return_(e);d.state.inputs.push(c);a.watchId=b});this.state.computing="fn";this.stage="main";this.recurse(c);e='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+e+this.watchFns()+"return fn;";e=(new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext",
	"ifDefined","plus","text",e))(this.$filter,Ta,sa,md,fg,Gb,jg,nd,a);this.state=this.stage=void 0;e.literal=rd(c);e.constant=c.constant;return e},USE:"use",STRICT:"strict",watchFns:function(){var a=[],b=this.state.inputs,d=this;q(b,function(b){a.push("var "+b+"="+d.generateFunction(b,"s"))});b.length&&a.push("fn.inputs=["+b.join(",")+"];");return a.join("")},generateFunction:function(a,b){return"function("+b+"){"+this.varsPrefix(a)+this.body(a)+"};"},filterPrefix:function(){var a=[],b=this;q(this.state.filters,
	function(d,c){a.push(d+"=$filter("+b.escape(c)+")")});return a.length?"var "+a.join(",")+";":""},varsPrefix:function(a){return this.state[a].vars.length?"var "+this.state[a].vars.join(",")+";":""},body:function(a){return this.state[a].body.join("")},recurse:function(a,b,d,c,e,f){var g,h,k=this,l,n;c=c||C;if(!f&&x(a.watchId))b=b||this.nextId(),this.if_("i",this.lazyAssign(b,this.computedMember("i",a.watchId)),this.lazyRecurse(a,b,d,c,e,!0));else switch(a.type){case s.Program:q(a.body,function(b,c){k.recurse(b.expression,
	void 0,void 0,function(a){h=a});c!==a.body.length-1?k.current().body.push(h,";"):k.return_(h)});break;case s.Literal:n=this.escape(a.value);this.assign(b,n);c(n);break;case s.UnaryExpression:this.recurse(a.argument,void 0,void 0,function(a){h=a});n=a.operator+"("+this.ifDefined(h,0)+")";this.assign(b,n);c(n);break;case s.BinaryExpression:this.recurse(a.left,void 0,void 0,function(a){g=a});this.recurse(a.right,void 0,void 0,function(a){h=a});n="+"===a.operator?this.plus(g,h):"-"===a.operator?this.ifDefined(g,
	0)+a.operator+this.ifDefined(h,0):"("+g+")"+a.operator+"("+h+")";this.assign(b,n);c(n);break;case s.LogicalExpression:b=b||this.nextId();k.recurse(a.left,b);k.if_("&&"===a.operator?b:k.not(b),k.lazyRecurse(a.right,b));c(b);break;case s.ConditionalExpression:b=b||this.nextId();k.recurse(a.test,b);k.if_(b,k.lazyRecurse(a.alternate,b),k.lazyRecurse(a.consequent,b));c(b);break;case s.Identifier:b=b||this.nextId();d&&(d.context="inputs"===k.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",
	a.name)+"?l:s"),d.computed=!1,d.name=a.name);Ta(a.name);k.if_("inputs"===k.stage||k.not(k.getHasOwnProperty("l",a.name)),function(){k.if_("inputs"===k.stage||"s",function(){e&&1!==e&&k.if_(k.not(k.nonComputedMember("s",a.name)),k.lazyAssign(k.nonComputedMember("s",a.name),"{}"));k.assign(b,k.nonComputedMember("s",a.name))})},b&&k.lazyAssign(b,k.nonComputedMember("l",a.name)));(k.state.expensiveChecks||Hb(a.name))&&k.addEnsureSafeObject(b);c(b);break;case s.MemberExpression:g=d&&(d.context=this.nextId())||
	this.nextId();b=b||this.nextId();k.recurse(a.object,g,void 0,function(){k.if_(k.notNull(g),function(){e&&1!==e&&k.addEnsureSafeAssignContext(g);if(a.computed)h=k.nextId(),k.recurse(a.property,h),k.getStringValue(h),k.addEnsureSafeMemberName(h),e&&1!==e&&k.if_(k.not(k.computedMember(g,h)),k.lazyAssign(k.computedMember(g,h),"{}")),n=k.ensureSafeObject(k.computedMember(g,h)),k.assign(b,n),d&&(d.computed=!0,d.name=h);else{Ta(a.property.name);e&&1!==e&&k.if_(k.not(k.nonComputedMember(g,a.property.name)),
	k.lazyAssign(k.nonComputedMember(g,a.property.name),"{}"));n=k.nonComputedMember(g,a.property.name);if(k.state.expensiveChecks||Hb(a.property.name))n=k.ensureSafeObject(n);k.assign(b,n);d&&(d.computed=!1,d.name=a.property.name)}},function(){k.assign(b,"undefined")});c(b)},!!e);break;case s.CallExpression:b=b||this.nextId();a.filter?(h=k.filter(a.callee.name),l=[],q(a.arguments,function(a){var b=k.nextId();k.recurse(a,b);l.push(b)}),n=h+"("+l.join(",")+")",k.assign(b,n),c(b)):(h=k.nextId(),g={},l=
	[],k.recurse(a.callee,h,g,function(){k.if_(k.notNull(h),function(){k.addEnsureSafeFunction(h);q(a.arguments,function(a){k.recurse(a,k.nextId(),void 0,function(a){l.push(k.ensureSafeObject(a))})});g.name?(k.state.expensiveChecks||k.addEnsureSafeObject(g.context),n=k.member(g.context,g.name,g.computed)+"("+l.join(",")+")"):n=h+"("+l.join(",")+")";n=k.ensureSafeObject(n);k.assign(b,n)},function(){k.assign(b,"undefined")});c(b)}));break;case s.AssignmentExpression:h=this.nextId();g={};if(!pd(a.left))throw ca("lval");
	this.recurse(a.left,void 0,g,function(){k.if_(k.notNull(g.context),function(){k.recurse(a.right,h);k.addEnsureSafeObject(k.member(g.context,g.name,g.computed));k.addEnsureSafeAssignContext(g.context);n=k.member(g.context,g.name,g.computed)+a.operator+h;k.assign(b,n);c(b||n)})},1);break;case s.ArrayExpression:l=[];q(a.elements,function(a){k.recurse(a,k.nextId(),void 0,function(a){l.push(a)})});n="["+l.join(",")+"]";this.assign(b,n);c(n);break;case s.ObjectExpression:l=[];q(a.properties,function(a){k.recurse(a.value,
	k.nextId(),void 0,function(b){l.push(k.escape(a.key.type===s.Identifier?a.key.name:""+a.key.value)+":"+b)})});n="{"+l.join(",")+"}";this.assign(b,n);c(n);break;case s.ThisExpression:this.assign(b,"s");c("s");break;case s.LocalsExpression:this.assign(b,"l");c("l");break;case s.NGValueParameter:this.assign(b,"v"),c("v")}},getHasOwnProperty:function(a,b){var d=a+"."+b,c=this.current().own;c.hasOwnProperty(d)||(c[d]=this.nextId(!1,a+"&&("+this.escape(b)+" in "+a+")"));return c[d]},assign:function(a,b){if(a)return this.current().body.push(a,
	"=",b,";"),a},filter:function(a){this.state.filters.hasOwnProperty(a)||(this.state.filters[a]=this.nextId(!0));return this.state.filters[a]},ifDefined:function(a,b){return"ifDefined("+a+","+this.escape(b)+")"},plus:function(a,b){return"plus("+a+","+b+")"},return_:function(a){this.current().body.push("return ",a,";")},if_:function(a,b,d){if(!0===a)b();else{var c=this.current().body;c.push("if(",a,"){");b();c.push("}");d&&(c.push("else{"),d(),c.push("}"))}},not:function(a){return"!("+a+")"},notNull:function(a){return a+
	"!=null"},nonComputedMember:function(a,b){var d=/[^$_a-zA-Z0-9]/g;return/[$_a-zA-Z][$_a-zA-Z0-9]*/.test(b)?a+"."+b:a+'["'+b.replace(d,this.stringEscapeFn)+'"]'},computedMember:function(a,b){return a+"["+b+"]"},member:function(a,b,d){return d?this.computedMember(a,b):this.nonComputedMember(a,b)},addEnsureSafeObject:function(a){this.current().body.push(this.ensureSafeObject(a),";")},addEnsureSafeMemberName:function(a){this.current().body.push(this.ensureSafeMemberName(a),";")},addEnsureSafeFunction:function(a){this.current().body.push(this.ensureSafeFunction(a),
	";")},addEnsureSafeAssignContext:function(a){this.current().body.push(this.ensureSafeAssignContext(a),";")},ensureSafeObject:function(a){return"ensureSafeObject("+a+",text)"},ensureSafeMemberName:function(a){return"ensureSafeMemberName("+a+",text)"},ensureSafeFunction:function(a){return"ensureSafeFunction("+a+",text)"},getStringValue:function(a){this.assign(a,"getStringValue("+a+")")},ensureSafeAssignContext:function(a){return"ensureSafeAssignContext("+a+",text)"},lazyRecurse:function(a,b,d,c,e,f){var g=
	this;return function(){g.recurse(a,b,d,c,e,f)}},lazyAssign:function(a,b){var d=this;return function(){d.assign(a,b)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)},escape:function(a){if(F(a))return"'"+a.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(Q(a))return a.toString();if(!0===a)return"true";if(!1===a)return"false";if(null===a)return"null";if("undefined"===typeof a)return"undefined";throw ca("esc");},nextId:function(a,
	b){var d="v"+this.state.nextId++;a||this.current().vars.push(d+(b?"="+b:""));return d},current:function(){return this.state[this.state.computing]}};td.prototype={compile:function(a,b){var d=this,c=this.astBuilder.ast(a);this.expression=a;this.expensiveChecks=b;aa(c,d.$filter);var e,f;if(e=qd(c))f=this.recurse(e);e=od(c.body);var g;e&&(g=[],q(e,function(a,b){var c=d.recurse(a);a.input=c;g.push(c);a.watchId=b}));var h=[];q(c.body,function(a){h.push(d.recurse(a.expression))});e=0===c.body.length?C:1===
	c.body.length?h[0]:function(a,b){var c;q(h,function(d){c=d(a,b)});return c};f&&(e.assign=function(a,b,c){return f(a,c,b)});g&&(e.inputs=g);e.literal=rd(c);e.constant=c.constant;return e},recurse:function(a,b,d){var c,e,f=this,g;if(a.input)return this.inputs(a.input,a.watchId);switch(a.type){case s.Literal:return this.value(a.value,b);case s.UnaryExpression:return e=this.recurse(a.argument),this["unary"+a.operator](e,b);case s.BinaryExpression:return c=this.recurse(a.left),e=this.recurse(a.right),
	this["binary"+a.operator](c,e,b);case s.LogicalExpression:return c=this.recurse(a.left),e=this.recurse(a.right),this["binary"+a.operator](c,e,b);case s.ConditionalExpression:return this["ternary?:"](this.recurse(a.test),this.recurse(a.alternate),this.recurse(a.consequent),b);case s.Identifier:return Ta(a.name,f.expression),f.identifier(a.name,f.expensiveChecks||Hb(a.name),b,d,f.expression);case s.MemberExpression:return c=this.recurse(a.object,!1,!!d),a.computed||(Ta(a.property.name,f.expression),
	e=a.property.name),a.computed&&(e=this.recurse(a.property)),a.computed?this.computedMember(c,e,b,d,f.expression):this.nonComputedMember(c,e,f.expensiveChecks,b,d,f.expression);case s.CallExpression:return g=[],q(a.arguments,function(a){g.push(f.recurse(a))}),a.filter&&(e=this.$filter(a.callee.name)),a.filter||(e=this.recurse(a.callee,!0)),a.filter?function(a,c,d,f){for(var m=[],r=0;r<g.length;++r)m.push(g[r](a,c,d,f));a=e.apply(void 0,m,f);return b?{context:void 0,name:void 0,value:a}:a}:function(a,
	c,d,n){var m=e(a,c,d,n),r;if(null!=m.value){sa(m.context,f.expression);md(m.value,f.expression);r=[];for(var q=0;q<g.length;++q)r.push(sa(g[q](a,c,d,n),f.expression));r=sa(m.value.apply(m.context,r),f.expression)}return b?{value:r}:r};case s.AssignmentExpression:return c=this.recurse(a.left,!0,1),e=this.recurse(a.right),function(a,d,g,n){var m=c(a,d,g,n);a=e(a,d,g,n);sa(m.value,f.expression);Gb(m.context);m.context[m.name]=a;return b?{value:a}:a};case s.ArrayExpression:return g=[],q(a.elements,function(a){g.push(f.recurse(a))}),
	function(a,c,d,e){for(var f=[],r=0;r<g.length;++r)f.push(g[r](a,c,d,e));return b?{value:f}:f};case s.ObjectExpression:return g=[],q(a.properties,function(a){g.push({key:a.key.type===s.Identifier?a.key.name:""+a.key.value,value:f.recurse(a.value)})}),function(a,c,d,e){for(var f={},r=0;r<g.length;++r)f[g[r].key]=g[r].value(a,c,d,e);return b?{value:f}:f};case s.ThisExpression:return function(a){return b?{value:a}:a};case s.LocalsExpression:return function(a,c){return b?{value:c}:c};case s.NGValueParameter:return function(a,
	c,d){return b?{value:d}:d}}},"unary+":function(a,b){return function(d,c,e,f){d=a(d,c,e,f);d=x(d)?+d:0;return b?{value:d}:d}},"unary-":function(a,b){return function(d,c,e,f){d=a(d,c,e,f);d=x(d)?-d:0;return b?{value:d}:d}},"unary!":function(a,b){return function(d,c,e,f){d=!a(d,c,e,f);return b?{value:d}:d}},"binary+":function(a,b,d){return function(c,e,f,g){var h=a(c,e,f,g);c=b(c,e,f,g);h=nd(h,c);return d?{value:h}:h}},"binary-":function(a,b,d){return function(c,e,f,g){var h=a(c,e,f,g);c=b(c,e,f,g);
	h=(x(h)?h:0)-(x(c)?c:0);return d?{value:h}:h}},"binary*":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)*b(c,e,f,g);return d?{value:c}:c}},"binary/":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)/b(c,e,f,g);return d?{value:c}:c}},"binary%":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)%b(c,e,f,g);return d?{value:c}:c}},"binary===":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)===b(c,e,f,g);return d?{value:c}:c}},"binary!==":function(a,b,d){return function(c,e,f,g){c=a(c,
	e,f,g)!==b(c,e,f,g);return d?{value:c}:c}},"binary==":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)==b(c,e,f,g);return d?{value:c}:c}},"binary!=":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)!=b(c,e,f,g);return d?{value:c}:c}},"binary<":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)<b(c,e,f,g);return d?{value:c}:c}},"binary>":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)>b(c,e,f,g);return d?{value:c}:c}},"binary<=":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,
	g)<=b(c,e,f,g);return d?{value:c}:c}},"binary>=":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)>=b(c,e,f,g);return d?{value:c}:c}},"binary&&":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)&&b(c,e,f,g);return d?{value:c}:c}},"binary||":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)||b(c,e,f,g);return d?{value:c}:c}},"ternary?:":function(a,b,d,c){return function(e,f,g,h){e=a(e,f,g,h)?b(e,f,g,h):d(e,f,g,h);return c?{value:e}:e}},value:function(a,b){return function(){return b?{context:void 0,
	name:void 0,value:a}:a}},identifier:function(a,b,d,c,e){return function(f,g,h,k){f=g&&a in g?g:f;c&&1!==c&&f&&!f[a]&&(f[a]={});g=f?f[a]:void 0;b&&sa(g,e);return d?{context:f,name:a,value:g}:g}},computedMember:function(a,b,d,c,e){return function(f,g,h,k){var l=a(f,g,h,k),n,m;null!=l&&(n=b(f,g,h,k),n+="",Ta(n,e),c&&1!==c&&(Gb(l),l&&!l[n]&&(l[n]={})),m=l[n],sa(m,e));return d?{context:l,name:n,value:m}:m}},nonComputedMember:function(a,b,d,c,e,f){return function(g,h,k,l){g=a(g,h,k,l);e&&1!==e&&(Gb(g),
	g&&!g[b]&&(g[b]={}));h=null!=g?g[b]:void 0;(d||Hb(b))&&sa(h,f);return c?{context:g,name:b,value:h}:h}},inputs:function(a,b){return function(d,c,e,f){return f?f[b]:a(d,c,e)}}};var hc=function(a,b,d){this.lexer=a;this.$filter=b;this.options=d;this.ast=new s(a,d);this.astCompiler=d.csp?new td(this.ast,b):new sd(this.ast,b)};hc.prototype={constructor:hc,parse:function(a){return this.astCompiler.compile(a,this.options.expensiveChecks)}};var kg=Object.prototype.valueOf,ta=O("$sce"),oa={HTML:"html",CSS:"css",
	URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},mg=O("$compile"),Y=v.document.createElement("a"),xd=ra(v.location.href);yd.$inject=["$document"];Jc.$inject=["$provide"];var Fd=22,Ed=".",jc="0";zd.$inject=["$locale"];Bd.$inject=["$locale"];var xg={yyyy:W("FullYear",4,0,!1,!0),yy:W("FullYear",2,0,!0,!0),y:W("FullYear",1,0,!1,!0),MMMM:ib("Month"),MMM:ib("Month",!0),MM:W("Month",2,1),M:W("Month",1,1),LLLL:ib("Month",!1,!0),dd:W("Date",2),d:W("Date",1),HH:W("Hours",2),H:W("Hours",1),hh:W("Hours",2,-12),
	h:W("Hours",1,-12),mm:W("Minutes",2),m:W("Minutes",1),ss:W("Seconds",2),s:W("Seconds",1),sss:W("Milliseconds",3),EEEE:ib("Day"),EEE:ib("Day",!0),a:function(a,b){return 12>a.getHours()?b.AMPMS[0]:b.AMPMS[1]},Z:function(a,b,d){a=-1*d;return a=(0<=a?"+":"")+(Ib(Math[0<a?"floor":"ceil"](a/60),2)+Ib(Math.abs(a%60),2))},ww:Hd(2),w:Hd(1),G:kc,GG:kc,GGG:kc,GGGG:function(a,b){return 0>=a.getFullYear()?b.ERANAMES[0]:b.ERANAMES[1]}},wg=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
	vg=/^\-?\d+$/;Ad.$inject=["$locale"];var qg=da(P),rg=da(sb);Cd.$inject=["$parse"];var ne=da({restrict:"E",compile:function(a,b){if(!b.href&&!b.xlinkHref)return function(a,b){if("a"===b[0].nodeName.toLowerCase()){var e="[object SVGAnimatedString]"===ma.call(b.prop("href"))?"xlink:href":"href";b.on("click",function(a){b.attr(e)||a.preventDefault()})}}}}),tb={};q(Cb,function(a,b){function d(a,d,e){a.$watch(e[c],function(a){e.$set(b,!!a)})}if("multiple"!=a){var c=xa("ng-"+b),e=d;"checked"===a&&(e=function(a,
	b,e){e.ngModel!==e[c]&&d(a,b,e)});tb[c]=function(){return{restrict:"A",priority:100,link:e}}}});q(ad,function(a,b){tb[b]=function(){return{priority:100,link:function(a,c,e){if("ngPattern"===b&&"/"==e.ngPattern.charAt(0)&&(c=e.ngPattern.match(zg))){e.$set("ngPattern",new RegExp(c[1],c[2]));return}a.$watch(e[b],function(a){e.$set(b,a)})}}}});q(["src","srcset","href"],function(a){var b=xa("ng-"+a);tb[b]=function(){return{priority:99,link:function(d,c,e){var f=a,g=a;"href"===a&&"[object SVGAnimatedString]"===
	ma.call(c.prop("href"))&&(g="xlinkHref",e.$attr[g]="xlink:href",f=null);e.$observe(b,function(b){b?(e.$set(g,b),Ca&&f&&c.prop(f,e[g])):"href"===a&&e.$set(g,null)})}}}});var Jb={$addControl:C,$$renameControl:function(a,b){a.$name=b},$removeControl:C,$setValidity:C,$setDirty:C,$setPristine:C,$setSubmitted:C};Id.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Rd=function(a){return["$timeout","$parse",function(b,d){function c(a){return""===a?d('this[""]').assign:d(a).assign||C}return{name:"form",
	restrict:a?"EAC":"E",require:["form","^^?form"],controller:Id,compile:function(d,f){d.addClass(Ua).addClass(mb);var g=f.name?"name":a&&f.ngForm?"ngForm":!1;return{pre:function(a,d,e,f){var m=f[0];if(!("action"in e)){var r=function(b){a.$apply(function(){m.$commitViewValue();m.$setSubmitted()});b.preventDefault()};d[0].addEventListener("submit",r,!1);d.on("$destroy",function(){b(function(){d[0].removeEventListener("submit",r,!1)},0,!1)})}(f[1]||m.$$parentForm).$addControl(m);var q=g?c(m.$name):C;g&&
	(q(a,m),e.$observe(g,function(b){m.$name!==b&&(q(a,void 0),m.$$parentForm.$$renameControl(m,b),q=c(m.$name),q(a,m))}));d.on("$destroy",function(){m.$$parentForm.$removeControl(m);q(a,void 0);R(m,Jb)})}}}}}]},oe=Rd(),Be=Rd(!0),yg=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,Hg=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Ig=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,
	Jg=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Sd=/^(\d{4,})-(\d{2})-(\d{2})$/,Td=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,nc=/^(\d{4,})-W(\d\d)$/,Ud=/^(\d{4,})-(\d\d)$/,Vd=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Kd=T();q(["date","datetime-local","month","time","week"],function(a){Kd[a]=!0});var Wd={text:function(a,b,d,c,e,f){jb(a,b,d,c,e,f);lc(c)},date:kb("date",Sd,Lb(Sd,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":kb("datetimelocal",Td,Lb(Td,"yyyy MM dd HH mm ss sss".split(" ")),
	"yyyy-MM-ddTHH:mm:ss.sss"),time:kb("time",Vd,Lb(Vd,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:kb("week",nc,function(a,b){if(fa(a))return a;if(F(a)){nc.lastIndex=0;var d=nc.exec(a);if(d){var c=+d[1],e=+d[2],f=d=0,g=0,h=0,k=Gd(c),e=7*(e-1);b&&(d=b.getHours(),f=b.getMinutes(),g=b.getSeconds(),h=b.getMilliseconds());return new Date(c,0,k.getDate()+e,d,f,g,h)}}return NaN},"yyyy-Www"),month:kb("month",Ud,Lb(Ud,["yyyy","MM"]),"yyyy-MM"),number:function(a,b,d,c,e,f){Ld(a,b,d,c);jb(a,b,d,c,e,f);c.$$parserName=
	"number";c.$parsers.push(function(a){if(c.$isEmpty(a))return null;if(Jg.test(a))return parseFloat(a)});c.$formatters.push(function(a){if(!c.$isEmpty(a)){if(!Q(a))throw lb("numfmt",a);a=a.toString()}return a});if(x(d.min)||d.ngMin){var g;c.$validators.min=function(a){return c.$isEmpty(a)||y(g)||a>=g};d.$observe("min",function(a){x(a)&&!Q(a)&&(a=parseFloat(a,10));g=Q(a)&&!isNaN(a)?a:void 0;c.$validate()})}if(x(d.max)||d.ngMax){var h;c.$validators.max=function(a){return c.$isEmpty(a)||y(h)||a<=h};d.$observe("max",
	function(a){x(a)&&!Q(a)&&(a=parseFloat(a,10));h=Q(a)&&!isNaN(a)?a:void 0;c.$validate()})}},url:function(a,b,d,c,e,f){jb(a,b,d,c,e,f);lc(c);c.$$parserName="url";c.$validators.url=function(a,b){var d=a||b;return c.$isEmpty(d)||Hg.test(d)}},email:function(a,b,d,c,e,f){jb(a,b,d,c,e,f);lc(c);c.$$parserName="email";c.$validators.email=function(a,b){var d=a||b;return c.$isEmpty(d)||Ig.test(d)}},radio:function(a,b,d,c){y(d.name)&&b.attr("name",++nb);b.on("click",function(a){b[0].checked&&c.$setViewValue(d.value,
	a&&a.type)});c.$render=function(){b[0].checked=d.value==c.$viewValue};d.$observe("value",c.$render)},checkbox:function(a,b,d,c,e,f,g,h){var k=Md(h,a,"ngTrueValue",d.ngTrueValue,!0),l=Md(h,a,"ngFalseValue",d.ngFalseValue,!1);b.on("click",function(a){c.$setViewValue(b[0].checked,a&&a.type)});c.$render=function(){b[0].checked=c.$viewValue};c.$isEmpty=function(a){return!1===a};c.$formatters.push(function(a){return pa(a,k)});c.$parsers.push(function(a){return a?k:l})},hidden:C,button:C,submit:C,reset:C,
	file:C},Dc=["$browser","$sniffer","$filter","$parse",function(a,b,d,c){return{restrict:"E",require:["?ngModel"],link:{pre:function(e,f,g,h){h[0]&&(Wd[P(g.type)]||Wd.text)(e,f,g,h[0],b,a,d,c)}}}}],Kg=/^(true|false|\d+)$/,Te=function(){return{restrict:"A",priority:100,compile:function(a,b){return Kg.test(b.ngValue)?function(a,b,e){e.$set("value",a.$eval(e.ngValue))}:function(a,b,e){a.$watch(e.ngValue,function(a){e.$set("value",a)})}}}},te=["$compile",function(a){return{restrict:"AC",compile:function(b){a.$$addBindingClass(b);
	return function(b,c,e){a.$$addBindingInfo(c,e.ngBind);c=c[0];b.$watch(e.ngBind,function(a){c.textContent=y(a)?"":a})}}}}],ve=["$interpolate","$compile",function(a,b){return{compile:function(d){b.$$addBindingClass(d);return function(c,d,f){c=a(d.attr(f.$attr.ngBindTemplate));b.$$addBindingInfo(d,c.expressions);d=d[0];f.$observe("ngBindTemplate",function(a){d.textContent=y(a)?"":a})}}}}],ue=["$sce","$parse","$compile",function(a,b,d){return{restrict:"A",compile:function(c,e){var f=b(e.ngBindHtml),g=
	b(e.ngBindHtml,function(a){return(a||"").toString()});d.$$addBindingClass(c);return function(b,c,e){d.$$addBindingInfo(c,e.ngBindHtml);b.$watch(g,function(){c.html(a.getTrustedHtml(f(b))||"")})}}}}],Se=da({restrict:"A",require:"ngModel",link:function(a,b,d,c){c.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),we=mc("",!0),ye=mc("Odd",0),xe=mc("Even",1),ze=La({compile:function(a,b){b.$set("ngCloak",void 0);a.removeClass("ng-cloak")}}),Ae=[function(){return{restrict:"A",scope:!0,controller:"@",
	priority:500}}],Ic={},Lg={blur:!0,focus:!0};q("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(a){var b=xa("ng-"+a);Ic[b]=["$parse","$rootScope",function(d,c){return{restrict:"A",compile:function(e,f){var g=d(f[b],null,!0);return function(b,d){d.on(a,function(d){var e=function(){g(b,{$event:d})};Lg[a]&&c.$$phase?b.$evalAsync(e):b.$apply(e)})}}}}]});var De=["$animate","$compile",function(a,
	b){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(d,c,e,f,g){var h,k,l;d.$watch(e.ngIf,function(d){d?k||g(function(d,f){k=f;d[d.length++]=b.$$createComment("end ngIf",e.ngIf);h={clone:d};a.enter(d,c.parent(),c)}):(l&&(l.remove(),l=null),k&&(k.$destroy(),k=null),h&&(l=rb(h.clone),a.leave(l).then(function(){l=null}),h=null))})}}}],Ee=["$templateRequest","$anchorScroll","$animate",function(a,b,d){return{restrict:"ECA",priority:400,terminal:!0,
	transclude:"element",controller:ea.noop,compile:function(c,e){var f=e.ngInclude||e.src,g=e.onload||"",h=e.autoscroll;return function(c,e,n,m,r){var q=0,s,w,p,y=function(){w&&(w.remove(),w=null);s&&(s.$destroy(),s=null);p&&(d.leave(p).then(function(){w=null}),w=p,p=null)};c.$watch(f,function(f){var n=function(){!x(h)||h&&!c.$eval(h)||b()},u=++q;f?(a(f,!0).then(function(a){if(!c.$$destroyed&&u===q){var b=c.$new();m.template=a;a=r(b,function(a){y();d.enter(a,null,e).then(n)});s=b;p=a;s.$emit("$includeContentLoaded",
	f);c.$eval(g)}},function(){c.$$destroyed||u!==q||(y(),c.$emit("$includeContentError",f))}),c.$emit("$includeContentRequested",f)):(y(),m.template=null)})}}}}],Ve=["$compile",function(a){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(b,d,c,e){ma.call(d[0]).match(/SVG/)?(d.empty(),a(Lc(e.template,v.document).childNodes)(b,function(a){d.append(a)},{futureParentElement:d})):(d.html(e.template),a(d.contents())(b))}}}],Fe=La({priority:450,compile:function(){return{pre:function(a,
	b,d){a.$eval(d.ngInit)}}}}),Re=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(a,b,d,c){var e=b.attr(d.$attr.ngList)||", ",f="false"!==d.ngTrim,g=f?V(e):e;c.$parsers.push(function(a){if(!y(a)){var b=[];a&&q(a.split(g),function(a){a&&b.push(f?V(a):a)});return b}});c.$formatters.push(function(a){if(K(a))return a.join(e)});c.$isEmpty=function(a){return!a||!a.length}}}},mb="ng-valid",Nd="ng-invalid",Ua="ng-pristine",Kb="ng-dirty",Pd="ng-pending",lb=O("ngModel"),Mg=["$scope",
	"$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(a,b,d,c,e,f,g,h,k,l){this.$modelValue=this.$viewValue=Number.NaN;this.$$rawModelValue=void 0;this.$validators={};this.$asyncValidators={};this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$untouched=!0;this.$touched=!1;this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$error={};this.$$success={};this.$pending=void 0;this.$name=l(d.name||"",!1)(a);
	this.$$parentForm=Jb;var n=e(d.ngModel),m=n.assign,r=n,s=m,v=null,w,p=this;this.$$setOptions=function(a){if((p.$options=a)&&a.getterSetter){var b=e(d.ngModel+"()"),f=e(d.ngModel+"($$$p)");r=function(a){var c=n(a);E(c)&&(c=b(a));return c};s=function(a,b){E(n(a))?f(a,{$$$p:b}):m(a,b)}}else if(!n.assign)throw lb("nonassign",d.ngModel,wa(c));};this.$render=C;this.$isEmpty=function(a){return y(a)||""===a||null===a||a!==a};this.$$updateEmptyClasses=function(a){p.$isEmpty(a)?(f.removeClass(c,"ng-not-empty"),
	f.addClass(c,"ng-empty")):(f.removeClass(c,"ng-empty"),f.addClass(c,"ng-not-empty"))};var H=0;Jd({ctrl:this,$element:c,set:function(a,b){a[b]=!0},unset:function(a,b){delete a[b]},$animate:f});this.$setPristine=function(){p.$dirty=!1;p.$pristine=!0;f.removeClass(c,Kb);f.addClass(c,Ua)};this.$setDirty=function(){p.$dirty=!0;p.$pristine=!1;f.removeClass(c,Ua);f.addClass(c,Kb);p.$$parentForm.$setDirty()};this.$setUntouched=function(){p.$touched=!1;p.$untouched=!0;f.setClass(c,"ng-untouched","ng-touched")};
	this.$setTouched=function(){p.$touched=!0;p.$untouched=!1;f.setClass(c,"ng-touched","ng-untouched")};this.$rollbackViewValue=function(){g.cancel(v);p.$viewValue=p.$$lastCommittedViewValue;p.$render()};this.$validate=function(){if(!Q(p.$modelValue)||!isNaN(p.$modelValue)){var a=p.$$rawModelValue,b=p.$valid,c=p.$modelValue,d=p.$options&&p.$options.allowInvalid;p.$$runValidators(a,p.$$lastCommittedViewValue,function(e){d||b===e||(p.$modelValue=e?a:void 0,p.$modelValue!==c&&p.$$writeModelToScope())})}};
	this.$$runValidators=function(a,b,c){function d(){var c=!0;q(p.$validators,function(d,e){var g=d(a,b);c=c&&g;f(e,g)});return c?!0:(q(p.$asyncValidators,function(a,b){f(b,null)}),!1)}function e(){var c=[],d=!0;q(p.$asyncValidators,function(e,g){var h=e(a,b);if(!h||!E(h.then))throw lb("nopromise",h);f(g,void 0);c.push(h.then(function(){f(g,!0)},function(){d=!1;f(g,!1)}))});c.length?k.all(c).then(function(){g(d)},C):g(!0)}function f(a,b){h===H&&p.$setValidity(a,b)}function g(a){h===H&&c(a)}H++;var h=
	H;(function(){var a=p.$$parserName||"parse";if(y(w))f(a,null);else return w||(q(p.$validators,function(a,b){f(b,null)}),q(p.$asyncValidators,function(a,b){f(b,null)})),f(a,w),w;return!0})()?d()?e():g(!1):g(!1)};this.$commitViewValue=function(){var a=p.$viewValue;g.cancel(v);if(p.$$lastCommittedViewValue!==a||""===a&&p.$$hasNativeValidators)p.$$updateEmptyClasses(a),p.$$lastCommittedViewValue=a,p.$pristine&&this.$setDirty(),this.$$parseAndValidate()};this.$$parseAndValidate=function(){var b=p.$$lastCommittedViewValue;
	if(w=y(b)?void 0:!0)for(var c=0;c<p.$parsers.length;c++)if(b=p.$parsers[c](b),y(b)){w=!1;break}Q(p.$modelValue)&&isNaN(p.$modelValue)&&(p.$modelValue=r(a));var d=p.$modelValue,e=p.$options&&p.$options.allowInvalid;p.$$rawModelValue=b;e&&(p.$modelValue=b,p.$modelValue!==d&&p.$$writeModelToScope());p.$$runValidators(b,p.$$lastCommittedViewValue,function(a){e||(p.$modelValue=a?b:void 0,p.$modelValue!==d&&p.$$writeModelToScope())})};this.$$writeModelToScope=function(){s(a,p.$modelValue);q(p.$viewChangeListeners,
	function(a){try{a()}catch(c){b(c)}})};this.$setViewValue=function(a,b){p.$viewValue=a;p.$options&&!p.$options.updateOnDefault||p.$$debounceViewValueCommit(b)};this.$$debounceViewValueCommit=function(b){var c=0,d=p.$options;d&&x(d.debounce)&&(d=d.debounce,Q(d)?c=d:Q(d[b])?c=d[b]:Q(d["default"])&&(c=d["default"]));g.cancel(v);c?v=g(function(){p.$commitViewValue()},c):h.$$phase?p.$commitViewValue():a.$apply(function(){p.$commitViewValue()})};a.$watch(function(){var b=r(a);if(b!==p.$modelValue&&(p.$modelValue===
	p.$modelValue||b===b)){p.$modelValue=p.$$rawModelValue=b;w=void 0;for(var c=p.$formatters,d=c.length,e=b;d--;)e=c[d](e);p.$viewValue!==e&&(p.$$updateEmptyClasses(e),p.$viewValue=p.$$lastCommittedViewValue=e,p.$render(),p.$$runValidators(b,e,C))}return b})}],Qe=["$rootScope",function(a){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Mg,priority:1,compile:function(b){b.addClass(Ua).addClass("ng-untouched").addClass(mb);return{pre:function(a,b,e,f){var g=f[0];b=f[1]||
	g.$$parentForm;g.$$setOptions(f[2]&&f[2].$options);b.$addControl(g);e.$observe("name",function(a){g.$name!==a&&g.$$parentForm.$$renameControl(g,a)});a.$on("$destroy",function(){g.$$parentForm.$removeControl(g)})},post:function(b,c,e,f){var g=f[0];if(g.$options&&g.$options.updateOn)c.on(g.$options.updateOn,function(a){g.$$debounceViewValueCommit(a&&a.type)});c.on("blur",function(){g.$touched||(a.$$phase?b.$evalAsync(g.$setTouched):b.$apply(g.$setTouched))})}}}}}],Ng=/(\s+|^)default(\s+|$)/,Ue=function(){return{restrict:"A",
	controller:["$scope","$attrs",function(a,b){var d=this;this.$options=qa(a.$eval(b.ngModelOptions));x(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=V(this.$options.updateOn.replace(Ng,function(){d.$options.updateOnDefault=!0;return" "}))):this.$options.updateOnDefault=!0}]}},Ge=La({terminal:!0,priority:1E3}),Og=O("ngOptions"),Pg=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
	Oe=["$compile","$document","$parse",function(a,b,d){function c(a,b,c){function e(a,b,c,d,f){this.selectValue=a;this.viewValue=b;this.label=c;this.group=d;this.disabled=f}function f(a){var b;if(!q&&ya(a))b=a;else{b=[];for(var c in a)a.hasOwnProperty(c)&&"$"!==c.charAt(0)&&b.push(c)}return b}var m=a.match(Pg);if(!m)throw Og("iexp",a,wa(b));var r=m[5]||m[7],q=m[6];a=/ as /.test(m[0])&&m[1];var s=m[9];b=d(m[2]?m[1]:r);var w=a&&d(a)||b,p=s&&d(s),v=s?function(a,b){return p(c,b)}:function(a){return Fa(a)},
	t=function(a,b){return v(a,L(a,b))},z=d(m[2]||m[1]),u=d(m[3]||""),y=d(m[4]||""),x=d(m[8]),D={},L=q?function(a,b){D[q]=b;D[r]=a;return D}:function(a){D[r]=a;return D};return{trackBy:s,getTrackByValue:t,getWatchables:d(x,function(a){var b=[];a=a||[];for(var d=f(a),e=d.length,g=0;g<e;g++){var h=a===d?g:d[g],l=a[h],h=L(l,h),l=v(l,h);b.push(l);if(m[2]||m[1])l=z(c,h),b.push(l);m[4]&&(h=y(c,h),b.push(h))}return b}),getOptions:function(){for(var a=[],b={},d=x(c)||[],g=f(d),h=g.length,m=0;m<h;m++){var p=d===
	g?m:g[m],q=L(d[p],p),r=w(c,q),p=v(r,q),D=z(c,q),N=u(c,q),q=y(c,q),r=new e(p,r,D,N,q);a.push(r);b[p]=r}return{items:a,selectValueMap:b,getOptionFromViewValue:function(a){return b[t(a)]},getViewValueFromOption:function(a){return s?ea.copy(a.viewValue):a.viewValue}}}}}var e=v.document.createElement("option"),f=v.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(a,b,c,d){d[0].registerOption=C},post:function(d,h,k,l){function n(a,b){a.element=
	b;b.disabled=a.disabled;a.label!==b.label&&(b.label=a.label,b.textContent=a.label);a.value!==b.value&&(b.value=a.selectValue)}function m(){var a=u&&r.readValue();if(u)for(var b=u.items.length-1;0<=b;b--){var c=u.items[b];c.group?Bb(c.element.parentNode):Bb(c.element)}u=I.getOptions();var d={};t&&h.prepend(w);u.items.forEach(function(a){var b;if(x(a.group)){b=d[a.group];b||(b=f.cloneNode(!1),E.appendChild(b),b.label=a.group,d[a.group]=b);var c=e.cloneNode(!1)}else b=E,c=e.cloneNode(!1);b.appendChild(c);
	n(a,c)});h[0].appendChild(E);s.$render();s.$isEmpty(a)||(b=r.readValue(),(I.trackBy||v?pa(a,b):a===b)||(s.$setViewValue(b),s.$render()))}var r=l[0],s=l[1],v=k.multiple,w;l=0;for(var p=h.children(),y=p.length;l<y;l++)if(""===p[l].value){w=p.eq(l);break}var t=!!w,z=B(e.cloneNode(!1));z.val("?");var u,I=c(k.ngOptions,h,d),E=b[0].createDocumentFragment();v?(s.$isEmpty=function(a){return!a||0===a.length},r.writeValue=function(a){u.items.forEach(function(a){a.element.selected=!1});a&&a.forEach(function(a){if(a=
	u.getOptionFromViewValue(a))a.element.selected=!0})},r.readValue=function(){var a=h.val()||[],b=[];q(a,function(a){(a=u.selectValueMap[a])&&!a.disabled&&b.push(u.getViewValueFromOption(a))});return b},I.trackBy&&d.$watchCollection(function(){if(K(s.$viewValue))return s.$viewValue.map(function(a){return I.getTrackByValue(a)})},function(){s.$render()})):(r.writeValue=function(a){var b=u.getOptionFromViewValue(a);b?(h[0].value!==b.selectValue&&(z.remove(),t||w.remove(),h[0].value=b.selectValue,b.element.selected=
	!0),b.element.setAttribute("selected","selected")):null===a||t?(z.remove(),t||h.prepend(w),h.val(""),w.prop("selected",!0),w.attr("selected",!0)):(t||w.remove(),h.prepend(z),h.val("?"),z.prop("selected",!0),z.attr("selected",!0))},r.readValue=function(){var a=u.selectValueMap[h.val()];return a&&!a.disabled?(t||w.remove(),z.remove(),u.getViewValueFromOption(a)):null},I.trackBy&&d.$watch(function(){return I.getTrackByValue(s.$viewValue)},function(){s.$render()}));t?(w.remove(),a(w)(d),w.removeClass("ng-scope")):
	w=B(e.cloneNode(!1));h.empty();m();d.$watchCollection(I.getWatchables,m)}}}}],He=["$locale","$interpolate","$log",function(a,b,d){var c=/{}/g,e=/^when(Minus)?(.+)$/;return{link:function(f,g,h){function k(a){g.text(a||"")}var l=h.count,n=h.$attr.when&&g.attr(h.$attr.when),m=h.offset||0,r=f.$eval(n)||{},s={},v=b.startSymbol(),w=b.endSymbol(),p=v+l+"-"+m+w,x=ea.noop,t;q(h,function(a,b){var c=e.exec(b);c&&(c=(c[1]?"-":"")+P(c[2]),r[c]=g.attr(h.$attr[b]))});q(r,function(a,d){s[d]=b(a.replace(c,p))});f.$watch(l,
	function(b){var c=parseFloat(b),e=isNaN(c);e||c in r||(c=a.pluralCat(c-m));c===t||e&&Q(t)&&isNaN(t)||(x(),e=s[c],y(e)?(null!=b&&d.debug("ngPluralize: no rule defined for '"+c+"' in "+n),x=C,k()):x=f.$watch(e,k),t=c)})}}}],Ie=["$parse","$animate","$compile",function(a,b,d){var c=O("ngRepeat"),e=function(a,b,c,d,e,n,m){a[c]=d;e&&(a[e]=n);a.$index=b;a.$first=0===b;a.$last=b===m-1;a.$middle=!(a.$first||a.$last);a.$odd=!(a.$even=0===(b&1))};return{restrict:"A",multiElement:!0,transclude:"element",priority:1E3,
	terminal:!0,$$tlb:!0,compile:function(f,g){var h=g.ngRepeat,k=d.$$createComment("end ngRepeat",h),l=h.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!l)throw c("iexp",h);var n=l[1],m=l[2],r=l[3],s=l[4],l=n.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);if(!l)throw c("iidexp",n);var v=l[3]||l[1],w=l[2];if(r&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(r)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(r)))throw c("badident",
	r);var p,y,t,z,u={$id:Fa};s?p=a(s):(t=function(a,b){return Fa(b)},z=function(a){return a});return function(a,d,f,g,l){p&&(y=function(b,c,d){w&&(u[w]=b);u[v]=c;u.$index=d;return p(a,u)});var n=T();a.$watchCollection(m,function(f){var g,m,p=d[0],s,u=T(),x,D,E,C,F,B,G;r&&(a[r]=f);if(ya(f))F=f,m=y||t;else for(G in m=y||z,F=[],f)ua.call(f,G)&&"$"!==G.charAt(0)&&F.push(G);x=F.length;G=Array(x);for(g=0;g<x;g++)if(D=f===F?g:F[g],E=f[D],C=m(D,E,g),n[C])B=n[C],delete n[C],u[C]=B,G[g]=B;else{if(u[C])throw q(G,
	function(a){a&&a.scope&&(n[a.id]=a)}),c("dupes",h,C,E);G[g]={id:C,scope:void 0,clone:void 0};u[C]=!0}for(s in n){B=n[s];C=rb(B.clone);b.leave(C);if(C[0].parentNode)for(g=0,m=C.length;g<m;g++)C[g].$$NG_REMOVED=!0;B.scope.$destroy()}for(g=0;g<x;g++)if(D=f===F?g:F[g],E=f[D],B=G[g],B.scope){s=p;do s=s.nextSibling;while(s&&s.$$NG_REMOVED);B.clone[0]!=s&&b.move(rb(B.clone),null,p);p=B.clone[B.clone.length-1];e(B.scope,g,v,E,w,D,x)}else l(function(a,c){B.scope=c;var d=k.cloneNode(!1);a[a.length++]=d;b.enter(a,
	null,p);p=d;B.clone=a;u[B.id]=B;e(B.scope,g,v,E,w,D,x)});n=u})}}}}],Je=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(b,d,c){b.$watch(c.ngShow,function(b){a[b?"removeClass":"addClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Ce=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(b,d,c){b.$watch(c.ngHide,function(b){a[b?"addClass":"removeClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Ke=La(function(a,b,d){a.$watch(d.ngStyle,function(a,
	d){d&&a!==d&&q(d,function(a,c){b.css(c,"")});a&&b.css(a)},!0)}),Le=["$animate","$compile",function(a,b){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(d,c,e,f){var g=[],h=[],k=[],l=[],n=function(a,b){return function(){a.splice(b,1)}};d.$watch(e.ngSwitch||e.on,function(c){var d,e;d=0;for(e=k.length;d<e;++d)a.cancel(k[d]);d=k.length=0;for(e=l.length;d<e;++d){var s=rb(h[d].clone);l[d].$destroy();(k[d]=a.leave(s)).then(n(k,d))}h.length=0;l.length=0;(g=f.cases["!"+
	c]||f.cases["?"])&&q(g,function(c){c.transclude(function(d,e){l.push(e);var f=c.element;d[d.length++]=b.$$createComment("end ngSwitchWhen");h.push({clone:d});a.enter(d,f.parent(),f)})})})}}}],Me=La({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,b,d,c,e){c.cases["!"+d.ngSwitchWhen]=c.cases["!"+d.ngSwitchWhen]||[];c.cases["!"+d.ngSwitchWhen].push({transclude:e,element:b})}}),Ne=La({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,
	b,d,c,e){c.cases["?"]=c.cases["?"]||[];c.cases["?"].push({transclude:e,element:b})}}),Qg=O("ngTransclude"),Pe=La({restrict:"EAC",link:function(a,b,d,c,e){d.ngTransclude===d.$attr.ngTransclude&&(d.ngTransclude="");if(!e)throw Qg("orphan",wa(b));e(function(a){a.length&&(b.empty(),b.append(a))},null,d.ngTransclude||d.ngTranscludeSlot)}}),pe=["$templateCache",function(a){return{restrict:"E",terminal:!0,compile:function(b,d){"text/ng-template"==d.type&&a.put(d.id,b[0].text)}}}],Rg={$setViewValue:C,$render:C},
	Sg=["$element","$scope",function(a,b){var d=this,c=new Ra;d.ngModelCtrl=Rg;d.unknownOption=B(v.document.createElement("option"));d.renderUnknownOption=function(b){b="? "+Fa(b)+" ?";d.unknownOption.val(b);a.prepend(d.unknownOption);a.val(b)};b.$on("$destroy",function(){d.renderUnknownOption=C});d.removeUnknownOption=function(){d.unknownOption.parent()&&d.unknownOption.remove()};d.readValue=function(){d.removeUnknownOption();return a.val()};d.writeValue=function(b){d.hasOption(b)?(d.removeUnknownOption(),
	a.val(b),""===b&&d.emptyOption.prop("selected",!0)):null==b&&d.emptyOption?(d.removeUnknownOption(),a.val("")):d.renderUnknownOption(b)};d.addOption=function(a,b){if(8!==b[0].nodeType){Qa(a,'"option value"');""===a&&(d.emptyOption=b);var g=c.get(a)||0;c.put(a,g+1);d.ngModelCtrl.$render();b[0].hasAttribute("selected")&&(b[0].selected=!0)}};d.removeOption=function(a){var b=c.get(a);b&&(1===b?(c.remove(a),""===a&&(d.emptyOption=void 0)):c.put(a,b-1))};d.hasOption=function(a){return!!c.get(a)};d.registerOption=
	function(a,b,c,h,k){if(h){var l;c.$observe("value",function(a){x(l)&&d.removeOption(l);l=a;d.addOption(a,b)})}else k?a.$watch(k,function(a,e){c.$set("value",a);e!==a&&d.removeOption(e);d.addOption(a,b)}):d.addOption(c.value,b);b.on("$destroy",function(){d.removeOption(c.value);d.ngModelCtrl.$render()})}}],qe=function(){return{restrict:"E",require:["select","?ngModel"],controller:Sg,priority:1,link:{pre:function(a,b,d,c){var e=c[1];if(e){var f=c[0];f.ngModelCtrl=e;b.on("change",function(){a.$apply(function(){e.$setViewValue(f.readValue())})});
	if(d.multiple){f.readValue=function(){var a=[];q(b.find("option"),function(b){b.selected&&a.push(b.value)});return a};f.writeValue=function(a){var c=new Ra(a);q(b.find("option"),function(a){a.selected=x(c.get(a.value))})};var g,h=NaN;a.$watch(function(){h!==e.$viewValue||pa(g,e.$viewValue)||(g=ha(e.$viewValue),e.$render());h=e.$viewValue});e.$isEmpty=function(a){return!a||0===a.length}}}},post:function(a,b,d,c){var e=c[1];if(e){var f=c[0];e.$render=function(){f.writeValue(e.$viewValue)}}}}}},se=["$interpolate",
	function(a){return{restrict:"E",priority:100,compile:function(b,d){if(x(d.value))var c=a(d.value,!0);else{var e=a(b.text(),!0);e||d.$set("value",b.text())}return function(a,b,d){var k=b.parent();(k=k.data("$selectController")||k.parent().data("$selectController"))&&k.registerOption(a,b,d,c,e)}}}}],re=da({restrict:"E",terminal:!1}),Fc=function(){return{restrict:"A",require:"?ngModel",link:function(a,b,d,c){c&&(d.required=!0,c.$validators.required=function(a,b){return!d.required||!c.$isEmpty(b)},d.$observe("required",
	function(){c.$validate()}))}}},Ec=function(){return{restrict:"A",require:"?ngModel",link:function(a,b,d,c){if(c){var e,f=d.ngPattern||d.pattern;d.$observe("pattern",function(a){F(a)&&0<a.length&&(a=new RegExp("^"+a+"$"));if(a&&!a.test)throw O("ngPattern")("noregexp",f,a,wa(b));e=a||void 0;c.$validate()});c.$validators.pattern=function(a,b){return c.$isEmpty(b)||y(e)||e.test(b)}}}}},Hc=function(){return{restrict:"A",require:"?ngModel",link:function(a,b,d,c){if(c){var e=-1;d.$observe("maxlength",function(a){a=
	X(a);e=isNaN(a)?-1:a;c.$validate()});c.$validators.maxlength=function(a,b){return 0>e||c.$isEmpty(b)||b.length<=e}}}}},Gc=function(){return{restrict:"A",require:"?ngModel",link:function(a,b,d,c){if(c){var e=0;d.$observe("minlength",function(a){e=X(a)||0;c.$validate()});c.$validators.minlength=function(a,b){return c.$isEmpty(b)||b.length>=e}}}}};v.angular.bootstrap?v.console&&console.log("WARNING: Tried to load angular more than once."):(ie(),ke(ea),ea.module("ngLocale",[],["$provide",function(a){function b(a){a+=
	"";var b=a.indexOf(".");return-1==b?0:a.length-b-1}a.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:"January February March April May June July August September October November December".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),STANDALONEMONTH:"January February March April May June July August September October November December".split(" "),
	WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-\u00a4",negSuf:"",posPre:"\u00a4",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(a,
	c){var e=a|0,f=c;void 0===f&&(f=Math.min(b(a),3));Math.pow(10,f);return 1==e&&0==f?"one":"other"}})}]),B(v.document).ready(function(){ee(v.document,yc)}))})(window);!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
	//# sourceMappingURL=angular.min.js.map


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	(function (angular) {

	    'use strict';

	    //Generic   

	    function makeArray(arr) {
	        if(!arr){
	            return [];
	        }
	        return angular.isArray(arr) ? arr : [arr];
	    }

	    //Angular

	    function provideRootElement(modules, element) {
	        element = angular.element(element);
	        modules.unshift(['$provide',
	            function ($provide) {
	                $provide.value('$rootElement', element);
	            }]);
	    }

	    function createInjector(injectorModules, element) {
	        var modules = ['ng'].concat(makeArray(injectorModules));
	        if (element) {
	            provideRootElement(modules, element);
	        }
	        return angular.injector(modules);
	    }

	    function bootstrapApplication(angularApp) {
	        angular.element(document).ready(function () {
	        	try{
		        	if(angular.isArray(angularApp)){
		        		angular.bootstrap(document, angularApp);
		        	}else{
		        		angular.bootstrap(document, [angularApp]);
		        	}
		        //if bootstrap fails then fall back to ui.bootstrap exclusively
	        	}catch(e){
	        		angular.bootstrap(document, ['ui.bootstrap']);
	        	}
	        });
	    }

	    angular.lazy = function (app, modules) {

	        var injector = createInjector(modules),
	            $q = injector.get('$q'),
	            promises = [],
	            errorCallback = angular.noop,
	            loadingCallback = angular.noop,
	            doneCallback = angular.noop;

	        return {

	            resolve: function (promise) {
	                promise = $q.when(injector.instantiate(promise));
	                promises.push(promise);
	                return this;
	            },

	            bootstrap: function () {

	                loadingCallback();

	                return $q.all(promises)
	                    .then(function () {
	                        bootstrapApplication(app);
	                    }, errorCallback)
	                    .finally(doneCallback);
	            },

	            loading: function(callback){
	                loadingCallback = callback;
	                return this;
	            },

	            done: function(callback){
	                doneCallback = callback;
	                return this;
	            },

	            error: function(callback){
	                errorCallback = callback;
	                return this;
	            }
	        };

	    };

	})(angular);

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	/*
	 * angular-ui-bootstrap
	 * http://angular-ui.github.io/bootstrap/

	 * Version: 0.11.2 - 2014-09-26
	 * License: MIT
	 */
	angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.transition",[]).factory("$transition",["$q","$timeout","$rootScope",function(a,b,c){function d(a){for(var b in a)if(void 0!==f.style[b])return a[b]}var e=function(d,f,g){g=g||{};var h=a.defer(),i=e[g.animation?"animationEndEventName":"transitionEndEventName"],j=function(){c.$apply(function(){d.unbind(i,j),h.resolve(d)})};return i&&d.bind(i,j),b(function(){angular.isString(f)?d.addClass(f):angular.isFunction(f)?f(d):angular.isObject(f)&&d.css(f),i||h.resolve(d)}),h.promise.cancel=function(){i&&d.unbind(i,j),h.reject("Transition cancelled")},h.promise},f=document.createElement("trans"),g={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},h={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return e.transitionEndEventName=d(g),e.animationEndEventName=d(h),e}]),angular.module("ui.bootstrap.collapse",["ui.bootstrap.transition"]).directive("collapse",["$transition",function(a){return{link:function(b,c,d){function e(b){function d(){j===e&&(j=void 0)}var e=a(c,b);return j&&j.cancel(),j=e,e.then(d,d),e}function f(){k?(k=!1,g()):(c.removeClass("collapse").addClass("collapsing"),e({height:c[0].scrollHeight+"px"}).then(g))}function g(){c.removeClass("collapsing"),c.addClass("collapse in"),c.css({height:"auto"})}function h(){if(k)k=!1,i(),c.css({height:0});else{c.css({height:c[0].scrollHeight+"px"});{c[0].offsetWidth}c.removeClass("collapse in").addClass("collapsing"),e({height:0}).then(i)}}function i(){c.removeClass("collapsing"),c.addClass("collapse")}var j,k=!0;b.$watch(d.collapse,function(a){a?h():f()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(a,b,c){this.groups=[],this.closeOthers=function(d){var e=angular.isDefined(b.closeOthers)?a.$eval(b.closeOthers):c.closeOthers;e&&angular.forEach(this.groups,function(a){a!==d&&(a.isOpen=!1)})},this.addGroup=function(a){var b=this;this.groups.push(a),a.$on("$destroy",function(){b.removeGroup(a)})},this.removeGroup=function(a){var b=this.groups.indexOf(a);-1!==b&&this.groups.splice(b,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",transclude:!0,replace:!1,templateUrl:"template/accordion/accordion.html"}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/accordion/accordion-group.html",scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(a){this.heading=a}},link:function(a,b,c,d){d.addGroup(a),a.$watch("isOpen",function(b){b&&d.closeOthers(a)}),a.toggleOpen=function(){a.isDisabled||(a.isOpen=!a.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(a,b,c,d,e){d.setHeading(e(a,function(){}))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(a,b,c,d){a.$watch(function(){return d[c.accordionTransclude]},function(a){a&&(b.html(""),b.append(a))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(a,b){a.closeable="close"in b}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",templateUrl:"template/alert/alert.html",transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.bindHtml",[]).directive("bindHtmlUnsafe",function(){return function(a,b,c){b.addClass("ng-binding").data("$binding",c.bindHtmlUnsafe),a.$watch(c.bindHtmlUnsafe,function(a){b.html(a||"")})}}),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(a){this.activeClass=a.activeClass||"active",this.toggleEvent=a.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",link:function(a,b,c,d){var e=d[0],f=d[1];f.$render=function(){b.toggleClass(e.activeClass,angular.equals(f.$modelValue,a.$eval(c.btnRadio)))},b.bind(e.toggleEvent,function(){var d=b.hasClass(e.activeClass);(!d||angular.isDefined(c.uncheckable))&&a.$apply(function(){f.$setViewValue(d?null:a.$eval(c.btnRadio)),f.$render()})})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",link:function(a,b,c,d){function e(){return g(c.btnCheckboxTrue,!0)}function f(){return g(c.btnCheckboxFalse,!1)}function g(b,c){var d=a.$eval(b);return angular.isDefined(d)?d:c}var h=d[0],i=d[1];i.$render=function(){b.toggleClass(h.activeClass,angular.equals(i.$modelValue,e()))},b.bind(h.toggleEvent,function(){a.$apply(function(){i.$setViewValue(b.hasClass(h.activeClass)?f():e()),i.$render()})})}}}),angular.module("ui.bootstrap.carousel",["ui.bootstrap.transition"]).controller("CarouselController",["$scope","$timeout","$transition",function(a,b,c){function d(){e();var c=+a.interval;!isNaN(c)&&c>=0&&(g=b(f,c))}function e(){g&&(b.cancel(g),g=null)}function f(){h?(a.next(),d()):a.pause()}var g,h,i=this,j=i.slides=a.slides=[],k=-1;i.currentSlide=null;var l=!1;i.select=a.select=function(e,f){function g(){if(!l){if(i.currentSlide&&angular.isString(f)&&!a.noTransition&&e.$element){e.$element.addClass(f);{e.$element[0].offsetWidth}angular.forEach(j,function(a){angular.extend(a,{direction:"",entering:!1,leaving:!1,active:!1})}),angular.extend(e,{direction:f,active:!0,entering:!0}),angular.extend(i.currentSlide||{},{direction:f,leaving:!0}),a.$currentTransition=c(e.$element,{}),function(b,c){a.$currentTransition.then(function(){h(b,c)},function(){h(b,c)})}(e,i.currentSlide)}else h(e,i.currentSlide);i.currentSlide=e,k=m,d()}}function h(b,c){angular.extend(b,{direction:"",active:!0,leaving:!1,entering:!1}),angular.extend(c||{},{direction:"",active:!1,leaving:!1,entering:!1}),a.$currentTransition=null}var m=j.indexOf(e);void 0===f&&(f=m>k?"next":"prev"),e&&e!==i.currentSlide&&(a.$currentTransition?(a.$currentTransition.cancel(),b(g)):g())},a.$on("$destroy",function(){l=!0}),i.indexOfSlide=function(a){return j.indexOf(a)},a.next=function(){var b=(k+1)%j.length;return a.$currentTransition?void 0:i.select(j[b],"next")},a.prev=function(){var b=0>k-1?j.length-1:k-1;return a.$currentTransition?void 0:i.select(j[b],"prev")},a.isActive=function(a){return i.currentSlide===a},a.$watch("interval",d),a.$on("$destroy",e),a.play=function(){h||(h=!0,d())},a.pause=function(){a.noPause||(h=!1,e())},i.addSlide=function(b,c){b.$element=c,j.push(b),1===j.length||b.active?(i.select(j[j.length-1]),1==j.length&&a.play()):b.active=!1},i.removeSlide=function(a){var b=j.indexOf(a);j.splice(b,1),j.length>0&&a.active?i.select(b>=j.length?j[b-1]:j[b]):k>b&&k--}}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",require:"carousel",templateUrl:"template/carousel/carousel.html",scope:{interval:"=",noTransition:"=",noPause:"="}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/carousel/slide.html",scope:{active:"=?"},link:function(a,b,c,d){d.addSlide(a,b),a.$on("$destroy",function(){d.removeSlide(a)}),a.$watch("active",function(b){b&&d.select(a)})}}}),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$locale","orderByFilter",function(a,b){function c(a){var c=[],d=a.split("");return angular.forEach(e,function(b,e){var f=a.indexOf(e);if(f>-1){a=a.split(""),d[f]="("+b.regex+")",a[f]="$";for(var g=f+1,h=f+e.length;h>g;g++)d[g]="",a[g]="$";a=a.join(""),c.push({index:f,apply:b.apply})}}),{regex:new RegExp("^"+d.join("")+"$"),map:b(c,"index")}}function d(a,b,c){return 1===b&&c>28?29===c&&(a%4===0&&a%100!==0||a%400===0):3===b||5===b||8===b||10===b?31>c:!0}this.parsers={};var e={yyyy:{regex:"\\d{4}",apply:function(a){this.year=+a}},yy:{regex:"\\d{2}",apply:function(a){this.year=+a+2e3}},y:{regex:"\\d{1,4}",apply:function(a){this.year=+a}},MMMM:{regex:a.DATETIME_FORMATS.MONTH.join("|"),apply:function(b){this.month=a.DATETIME_FORMATS.MONTH.indexOf(b)}},MMM:{regex:a.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(b){this.month=a.DATETIME_FORMATS.SHORTMONTH.indexOf(b)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(a){this.month=a-1}},M:{regex:"[1-9]|1[0-2]",apply:function(a){this.month=a-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a}},EEEE:{regex:a.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:a.DATETIME_FORMATS.SHORTDAY.join("|")}};this.parse=function(b,e){if(!angular.isString(b)||!e)return b;e=a.DATETIME_FORMATS[e]||e,this.parsers[e]||(this.parsers[e]=c(e));var f=this.parsers[e],g=f.regex,h=f.map,i=b.match(g);if(i&&i.length){for(var j,k={year:1900,month:0,date:1,hours:0},l=1,m=i.length;m>l;l++){var n=h[l-1];n.apply&&n.apply.call(k,i[l])}return d(k.year,k.month,k.date)&&(j=new Date(k.year,k.month,k.date,k.hours)),j}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(a,b){function c(a,c){return a.currentStyle?a.currentStyle[c]:b.getComputedStyle?b.getComputedStyle(a)[c]:a.style[c]}function d(a){return"static"===(c(a,"position")||"static")}var e=function(b){for(var c=a[0],e=b.offsetParent||c;e&&e!==c&&d(e);)e=e.offsetParent;return e||c};return{position:function(b){var c=this.offset(b),d={top:0,left:0},f=e(b[0]);f!=a[0]&&(d=this.offset(angular.element(f)),d.top+=f.clientTop-f.scrollTop,d.left+=f.clientLeft-f.scrollLeft);var g=b[0].getBoundingClientRect();return{width:g.width||b.prop("offsetWidth"),height:g.height||b.prop("offsetHeight"),top:c.top-d.top,left:c.left-d.left}},offset:function(c){var d=c[0].getBoundingClientRect();return{width:d.width||c.prop("offsetWidth"),height:d.height||c.prop("offsetHeight"),top:d.top+(b.pageYOffset||a[0].documentElement.scrollTop),left:d.left+(b.pageXOffset||a[0].documentElement.scrollLeft)}},positionElements:function(a,b,c,d){var e,f,g,h,i=c.split("-"),j=i[0],k=i[1]||"center";e=d?this.offset(a):this.position(a),f=b.prop("offsetWidth"),g=b.prop("offsetHeight");var l={center:function(){return e.left+e.width/2-f/2},left:function(){return e.left},right:function(){return e.left+e.width}},m={center:function(){return e.top+e.height/2-g/2},top:function(){return e.top},bottom:function(){return e.top+e.height}};switch(j){case"right":h={top:m[k](),left:l[j]()};break;case"left":h={top:m[k](),left:e.left-f};break;case"bottom":h={top:m[j](),left:l[k]()};break;default:h={top:e.top-g,left:l[k]()}}return h}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$timeout","$log","dateFilter","datepickerConfig",function(a,b,c,d,e,f,g,h){var i=this,j={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","minMode","maxMode","showWeeks","startingDay","yearRange"],function(c,e){i[c]=angular.isDefined(b[c])?8>e?d(b[c])(a.$parent):a.$parent.$eval(b[c]):h[c]}),angular.forEach(["minDate","maxDate"],function(d){b[d]?a.$parent.$watch(c(b[d]),function(a){i[d]=a?new Date(a):null,i.refreshView()}):i[d]=h[d]?new Date(h[d]):null}),a.datepickerMode=a.datepickerMode||h.datepickerMode,a.uniqueId="datepicker-"+a.$id+"-"+Math.floor(1e4*Math.random()),this.activeDate=angular.isDefined(b.initDate)?a.$parent.$eval(b.initDate):new Date,a.isActive=function(b){return 0===i.compare(b.date,i.activeDate)?(a.activeDateId=b.uid,!0):!1},this.init=function(a){j=a,j.$render=function(){i.render()}},this.render=function(){if(j.$modelValue){var a=new Date(j.$modelValue),b=!isNaN(a);b?this.activeDate=a:f.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'),j.$setValidity("date",b)}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var a=j.$modelValue?new Date(j.$modelValue):null;j.$setValidity("date-disabled",!a||this.element&&!this.isDisabled(a))}},this.createDateObject=function(a,b){var c=j.$modelValue?new Date(j.$modelValue):null;return{date:a,label:g(a,b),selected:c&&0===this.compare(a,c),disabled:this.isDisabled(a),current:0===this.compare(a,new Date)}},this.isDisabled=function(c){return this.minDate&&this.compare(c,this.minDate)<0||this.maxDate&&this.compare(c,this.maxDate)>0||b.dateDisabled&&a.dateDisabled({date:c,mode:a.datepickerMode})},this.split=function(a,b){for(var c=[];a.length>0;)c.push(a.splice(0,b));return c},a.select=function(b){if(a.datepickerMode===i.minMode){var c=j.$modelValue?new Date(j.$modelValue):new Date(0,0,0,0,0,0,0);c.setFullYear(b.getFullYear(),b.getMonth(),b.getDate()),j.$setViewValue(c),j.$render()}else i.activeDate=b,a.datepickerMode=i.modes[i.modes.indexOf(a.datepickerMode)-1]},a.move=function(a){var b=i.activeDate.getFullYear()+a*(i.step.years||0),c=i.activeDate.getMonth()+a*(i.step.months||0);i.activeDate.setFullYear(b,c,1),i.refreshView()},a.toggleMode=function(b){b=b||1,a.datepickerMode===i.maxMode&&1===b||a.datepickerMode===i.minMode&&-1===b||(a.datepickerMode=i.modes[i.modes.indexOf(a.datepickerMode)+b])},a.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var k=function(){e(function(){i.element[0].focus()},0,!1)};a.$on("datepicker.focus",k),a.keydown=function(b){var c=a.keys[b.which];if(c&&!b.shiftKey&&!b.altKey)if(b.preventDefault(),b.stopPropagation(),"enter"===c||"space"===c){if(i.isDisabled(i.activeDate))return;a.select(i.activeDate),k()}else!b.ctrlKey||"up"!==c&&"down"!==c?(i.handleKeyDown(c,b),i.refreshView()):(a.toggleMode("up"===c?1:-1),k())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/datepicker.html",scope:{datepickerMode:"=?",dateDisabled:"&"},require:["datepicker","?^ngModel"],controller:"DatepickerController",link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f)}}}).directive("daypicker",["dateFilter",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(b,c,d,e){function f(a,b){return 1!==b||a%4!==0||a%100===0&&a%400!==0?i[b]:29}function g(a,b){var c=new Array(b),d=new Date(a),e=0;for(d.setHours(12);b>e;)c[e++]=new Date(d),d.setDate(d.getDate()+1);return c}function h(a){var b=new Date(a);b.setDate(b.getDate()+4-(b.getDay()||7));var c=b.getTime();return b.setMonth(0),b.setDate(1),Math.floor(Math.round((c-b)/864e5)/7)+1}b.showWeeks=e.showWeeks,e.step={months:1},e.element=c;var i=[31,28,31,30,31,30,31,31,30,31,30,31];e._refreshView=function(){var c=e.activeDate.getFullYear(),d=e.activeDate.getMonth(),f=new Date(c,d,1),i=e.startingDay-f.getDay(),j=i>0?7-i:-i,k=new Date(f);j>0&&k.setDate(-j+1);for(var l=g(k,42),m=0;42>m;m++)l[m]=angular.extend(e.createDateObject(l[m],e.formatDay),{secondary:l[m].getMonth()!==d,uid:b.uniqueId+"-"+m});b.labels=new Array(7);for(var n=0;7>n;n++)b.labels[n]={abbr:a(l[n].date,e.formatDayHeader),full:a(l[n].date,"EEEE")};if(b.title=a(e.activeDate,e.formatDayTitle),b.rows=e.split(l,7),b.showWeeks){b.weekNumbers=[];for(var o=h(b.rows[0][0].date),p=b.rows.length;b.weekNumbers.push(o++)<p;);}},e.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth(),a.getDate())-new Date(b.getFullYear(),b.getMonth(),b.getDate())},e.handleKeyDown=function(a){var b=e.activeDate.getDate();if("left"===a)b-=1;else if("up"===a)b-=7;else if("right"===a)b+=1;else if("down"===a)b+=7;else if("pageup"===a||"pagedown"===a){var c=e.activeDate.getMonth()+("pageup"===a?-1:1);e.activeDate.setMonth(c,1),b=Math.min(f(e.activeDate.getFullYear(),e.activeDate.getMonth()),b)}else"home"===a?b=1:"end"===a&&(b=f(e.activeDate.getFullYear(),e.activeDate.getMonth()));e.activeDate.setDate(b)},e.refreshView()}}}]).directive("monthpicker",["dateFilter",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(b,c,d,e){e.step={years:1},e.element=c,e._refreshView=function(){for(var c=new Array(12),d=e.activeDate.getFullYear(),f=0;12>f;f++)c[f]=angular.extend(e.createDateObject(new Date(d,f,1),e.formatMonth),{uid:b.uniqueId+"-"+f});b.title=a(e.activeDate,e.formatMonthTitle),b.rows=e.split(c,3)},e.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth())-new Date(b.getFullYear(),b.getMonth())},e.handleKeyDown=function(a){var b=e.activeDate.getMonth();if("left"===a)b-=1;else if("up"===a)b-=3;else if("right"===a)b+=1;else if("down"===a)b+=3;else if("pageup"===a||"pagedown"===a){var c=e.activeDate.getFullYear()+("pageup"===a?-1:1);e.activeDate.setFullYear(c)}else"home"===a?b=0:"end"===a&&(b=11);e.activeDate.setMonth(b)},e.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(a,b,c,d){function e(a){return parseInt((a-1)/f,10)*f+1}var f=d.yearRange;d.step={years:f},d.element=b,d._refreshView=function(){for(var b=new Array(f),c=0,g=e(d.activeDate.getFullYear());f>c;c++)b[c]=angular.extend(d.createDateObject(new Date(g+c,0,1),d.formatYear),{uid:a.uniqueId+"-"+c});a.title=[b[0].label,b[f-1].label].join(" - "),a.rows=d.split(b,5)},d.compare=function(a,b){return a.getFullYear()-b.getFullYear()},d.handleKeyDown=function(a){var b=d.activeDate.getFullYear();"left"===a?b-=1:"up"===a?b-=5:"right"===a?b+=1:"down"===a?b+=5:"pageup"===a||"pagedown"===a?b+=("pageup"===a?-1:1)*d.step.years:"home"===a?b=e(d.activeDate.getFullYear()):"end"===a&&(b=e(d.activeDate.getFullYear())+f-1),d.activeDate.setFullYear(b)},d.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0}).directive("datepickerPopup",["$compile","$parse","$document","$position","dateFilter","dateParser","datepickerPopupConfig",function(a,b,c,d,e,f,g){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&"},link:function(h,i,j,k){function l(a){return a.replace(/([A-Z])/g,function(a){return"-"+a.toLowerCase()})}function m(a){if(a){if(angular.isDate(a)&&!isNaN(a))return k.$setValidity("date",!0),a;if(angular.isString(a)){var b=f.parse(a,n)||new Date(a);return isNaN(b)?void k.$setValidity("date",!1):(k.$setValidity("date",!0),b)}return void k.$setValidity("date",!1)}return k.$setValidity("date",!0),null}var n,o=angular.isDefined(j.closeOnDateSelection)?h.$parent.$eval(j.closeOnDateSelection):g.closeOnDateSelection,p=angular.isDefined(j.datepickerAppendToBody)?h.$parent.$eval(j.datepickerAppendToBody):g.appendToBody;h.showButtonBar=angular.isDefined(j.showButtonBar)?h.$parent.$eval(j.showButtonBar):g.showButtonBar,h.getText=function(a){return h[a+"Text"]||g[a+"Text"]},j.$observe("datepickerPopup",function(a){n=a||g.datepickerPopup,k.$render()});var q=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");q.attr({"ng-model":"date","ng-change":"dateSelection()"});var r=angular.element(q.children()[0]);j.datepickerOptions&&angular.forEach(h.$parent.$eval(j.datepickerOptions),function(a,b){r.attr(l(b),a)}),h.watchData={},angular.forEach(["minDate","maxDate","datepickerMode"],function(a){if(j[a]){var c=b(j[a]);if(h.$parent.$watch(c,function(b){h.watchData[a]=b}),r.attr(l(a),"watchData."+a),"datepickerMode"===a){var d=c.assign;h.$watch("watchData."+a,function(a,b){a!==b&&d(h.$parent,a)})}}}),j.dateDisabled&&r.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),k.$parsers.unshift(m),h.dateSelection=function(a){angular.isDefined(a)&&(h.date=a),k.$setViewValue(h.date),k.$render(),o&&(h.isOpen=!1,i[0].focus())},i.bind("input change keyup",function(){h.$apply(function(){h.date=k.$modelValue})}),k.$render=function(){var a=k.$viewValue?e(k.$viewValue,n):"";i.val(a),h.date=m(k.$modelValue)};var s=function(a){h.isOpen&&a.target!==i[0]&&h.$apply(function(){h.isOpen=!1})},t=function(a){h.keydown(a)};i.bind("keydown",t),h.keydown=function(a){27===a.which?(a.preventDefault(),a.stopPropagation(),h.close()):40!==a.which||h.isOpen||(h.isOpen=!0)},h.$watch("isOpen",function(a){a?(h.$broadcast("datepicker.focus"),h.position=p?d.offset(i):d.position(i),h.position.top=h.position.top+i.prop("offsetHeight"),c.bind("click",s)):c.unbind("click",s)}),h.select=function(a){if("today"===a){var b=new Date;angular.isDate(k.$modelValue)?(a=new Date(k.$modelValue),a.setFullYear(b.getFullYear(),b.getMonth(),b.getDate())):a=new Date(b.setHours(0,0,0,0))}h.dateSelection(a)},h.close=function(){h.isOpen=!1,i[0].focus()};var u=a(q)(h);q.remove(),p?c.find("body").append(u):i.after(u),h.$on("$destroy",function(){u.remove(),i.unbind("keydown",t),c.unbind("click",s)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:"template/datepicker/popup.html",link:function(a,b){b.bind("click",function(a){a.preventDefault(),a.stopPropagation()})}}}),angular.module("ui.bootstrap.dropdown",[]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document",function(a){var b=null;this.open=function(e){b||(a.bind("click",c),a.bind("keydown",d)),b&&b!==e&&(b.isOpen=!1),b=e},this.close=function(e){b===e&&(b=null,a.unbind("click",c),a.unbind("keydown",d))};var c=function(a){var c=b.getToggleElement();a&&c&&c[0].contains(a.target)||b.$apply(function(){b.isOpen=!1})},d=function(a){27===a.which&&(b.focusToggleElement(),c())}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate",function(a,b,c,d,e,f){var g,h=this,i=a.$new(),j=d.openClass,k=angular.noop,l=b.onToggle?c(b.onToggle):angular.noop;this.init=function(d){h.$element=d,b.isOpen&&(g=c(b.isOpen),k=g.assign,a.$watch(g,function(a){i.isOpen=!!a}))},this.toggle=function(a){return i.isOpen=arguments.length?!!a:!i.isOpen},this.isOpen=function(){return i.isOpen},i.getToggleElement=function(){return h.toggleElement},i.focusToggleElement=function(){h.toggleElement&&h.toggleElement[0].focus()},i.$watch("isOpen",function(b,c){f[b?"addClass":"removeClass"](h.$element,j),b?(i.focusToggleElement(),e.open(i)):e.close(i),k(a,b),angular.isDefined(b)&&b!==c&&l(a,{open:!!b})}),a.$on("$locationChangeSuccess",function(){i.isOpen=!1}),a.$on("$destroy",function(){i.$destroy()})}]).directive("dropdown",function(){return{restrict:"CA",controller:"DropdownController",link:function(a,b,c,d){d.init(b)}}}).directive("dropdownToggle",function(){return{restrict:"CA",require:"?^dropdown",link:function(a,b,c,d){if(d){d.toggleElement=b;var e=function(e){e.preventDefault(),b.hasClass("disabled")||c.disabled||a.$apply(function(){d.toggle()})};b.bind("click",e),b.attr({"aria-haspopup":!0,"aria-expanded":!1}),a.$watch(d.isOpen,function(a){b.attr("aria-expanded",!!a)}),a.$on("$destroy",function(){b.unbind("click",e)})}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.transition"]).factory("$$stackedMap",function(){return{createNew:function(){var a=[];return{add:function(b,c){a.push({key:b,value:c})},get:function(b){for(var c=0;c<a.length;c++)if(b==a[c].key)return a[c]},keys:function(){for(var b=[],c=0;c<a.length;c++)b.push(a[c].key);return b},top:function(){return a[a.length-1]},remove:function(b){for(var c=-1,d=0;d<a.length;d++)if(b==a[d].key){c=d;break}return a.splice(c,1)[0]},removeTop:function(){return a.splice(a.length-1,1)[0]},length:function(){return a.length}}}}}).directive("modalBackdrop",["$timeout",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",link:function(b,c,d){b.backdropClass=d.backdropClass||"",b.animate=!1,a(function(){b.animate=!0})}}}]).directive("modalWindow",["$modalStack","$timeout",function(a,b){return{restrict:"EA",scope:{index:"@",animate:"="},replace:!0,transclude:!0,templateUrl:function(a,b){return b.templateUrl||"template/modal/window.html"},link:function(c,d,e){d.addClass(e.windowClass||""),c.size=e.size,b(function(){c.animate=!0,d[0].querySelectorAll("[autofocus]").length||d[0].focus()}),c.close=function(b){var c=a.getTop();c&&c.value.backdrop&&"static"!=c.value.backdrop&&b.target===b.currentTarget&&(b.preventDefault(),b.stopPropagation(),a.dismiss(c.key,"backdrop click"))}}}}]).directive("modalTransclude",function(){return{link:function(a,b,c,d,e){e(a.$parent,function(a){b.empty(),b.append(a)})}}}).factory("$modalStack",["$transition","$timeout","$document","$compile","$rootScope","$$stackedMap",function(a,b,c,d,e,f){function g(){for(var a=-1,b=n.keys(),c=0;c<b.length;c++)n.get(b[c]).value.backdrop&&(a=c);return a}function h(a){var b=c.find("body").eq(0),d=n.get(a).value;n.remove(a),j(d.modalDomEl,d.modalScope,300,function(){d.modalScope.$destroy(),b.toggleClass(m,n.length()>0),i()})}function i(){if(k&&-1==g()){var a=l;j(k,l,150,function(){a.$destroy(),a=null}),k=void 0,l=void 0}}function j(c,d,e,f){function g(){g.done||(g.done=!0,c.remove(),f&&f())}d.animate=!1;var h=a.transitionEndEventName;if(h){var i=b(g,e);c.bind(h,function(){b.cancel(i),g(),d.$apply()})}else b(g)}var k,l,m="modal-open",n=f.createNew(),o={};return e.$watch(g,function(a){l&&(l.index=a)}),c.bind("keydown",function(a){var b;27===a.which&&(b=n.top(),b&&b.value.keyboard&&(a.preventDefault(),e.$apply(function(){o.dismiss(b.key,"escape key press")})))}),o.open=function(a,b){n.add(a,{deferred:b.deferred,modalScope:b.scope,backdrop:b.backdrop,keyboard:b.keyboard});var f=c.find("body").eq(0),h=g();if(h>=0&&!k){l=e.$new(!0),l.index=h;var i=angular.element("<div modal-backdrop></div>");i.attr("backdrop-class",b.backdropClass),k=d(i)(l),f.append(k)}var j=angular.element("<div modal-window></div>");j.attr({"template-url":b.windowTemplateUrl,"window-class":b.windowClass,size:b.size,index:n.length()-1,animate:"animate"}).html(b.content);var o=d(j)(b.scope);n.top().value.modalDomEl=o,f.append(o),f.addClass(m)},o.close=function(a,b){var c=n.get(a);c&&(c.value.deferred.resolve(b),h(a))},o.dismiss=function(a,b){var c=n.get(a);c&&(c.value.deferred.reject(b),h(a))},o.dismissAll=function(a){for(var b=this.getTop();b;)this.dismiss(b.key,a),b=this.getTop()},o.getTop=function(){return n.top()},o}]).provider("$modal",function(){var a={options:{backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$http","$templateCache","$controller","$modalStack",function(b,c,d,e,f,g,h){function i(a){return a.template?d.when(a.template):e.get(angular.isFunction(a.templateUrl)?a.templateUrl():a.templateUrl,{cache:f}).then(function(a){return a.data})}function j(a){var c=[];return angular.forEach(a,function(a){(angular.isFunction(a)||angular.isArray(a))&&c.push(d.when(b.invoke(a)))}),c}var k={};return k.open=function(b){var e=d.defer(),f=d.defer(),k={result:e.promise,opened:f.promise,close:function(a){h.close(k,a)},dismiss:function(a){h.dismiss(k,a)}};if(b=angular.extend({},a.options,b),b.resolve=b.resolve||{},!b.template&&!b.templateUrl)throw new Error("One of template or templateUrl options is required.");var l=d.all([i(b)].concat(j(b.resolve)));return l.then(function(a){var d=(b.scope||c).$new();d.$close=k.close,d.$dismiss=k.dismiss;var f,i={},j=1;b.controller&&(i.$scope=d,i.$modalInstance=k,angular.forEach(b.resolve,function(b,c){i[c]=a[j++]}),f=g(b.controller,i),b.controllerAs&&(d[b.controllerAs]=f)),h.open(k,{scope:d,deferred:e,content:a[0],backdrop:b.backdrop,keyboard:b.keyboard,backdropClass:b.backdropClass,windowClass:b.windowClass,windowTemplateUrl:b.windowTemplateUrl,size:b.size})},function(a){e.reject(a)}),l.then(function(){f.resolve(!0)},function(){f.reject(!1)}),k},k}]};return a}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(a,b,c){var d=this,e={$setViewValue:angular.noop},f=b.numPages?c(b.numPages).assign:angular.noop;this.init=function(f,g){e=f,this.config=g,e.$render=function(){d.render()},b.itemsPerPage?a.$parent.$watch(c(b.itemsPerPage),function(b){d.itemsPerPage=parseInt(b,10),a.totalPages=d.calculateTotalPages()}):this.itemsPerPage=g.itemsPerPage},this.calculateTotalPages=function(){var b=this.itemsPerPage<1?1:Math.ceil(a.totalItems/this.itemsPerPage);return Math.max(b||0,1)},this.render=function(){a.page=parseInt(e.$viewValue,10)||1},a.selectPage=function(b){a.page!==b&&b>0&&b<=a.totalPages&&(e.$setViewValue(b),e.$render())},a.getText=function(b){return a[b+"Text"]||d.config[b+"Text"]},a.noPrevious=function(){return 1===a.page},a.noNext=function(){return a.page===a.totalPages},a.$watch("totalItems",function(){a.totalPages=d.calculateTotalPages()}),a.$watch("totalPages",function(b){f(a.$parent,b),a.page>b?a.selectPage(b):e.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(a,b){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(c,d,e,f){function g(a,b,c){return{number:a,text:b,active:c}}function h(a,b){var c=[],d=1,e=b,f=angular.isDefined(k)&&b>k;f&&(l?(d=Math.max(a-Math.floor(k/2),1),e=d+k-1,e>b&&(e=b,d=e-k+1)):(d=(Math.ceil(a/k)-1)*k+1,e=Math.min(d+k-1,b)));for(var h=d;e>=h;h++){var i=g(h,h,h===a);c.push(i)}if(f&&!l){if(d>1){var j=g(d-1,"...",!1);c.unshift(j)}if(b>e){var m=g(e+1,"...",!1);c.push(m)}}return c}var i=f[0],j=f[1];if(j){var k=angular.isDefined(e.maxSize)?c.$parent.$eval(e.maxSize):b.maxSize,l=angular.isDefined(e.rotate)?c.$parent.$eval(e.rotate):b.rotate;c.boundaryLinks=angular.isDefined(e.boundaryLinks)?c.$parent.$eval(e.boundaryLinks):b.boundaryLinks,c.directionLinks=angular.isDefined(e.directionLinks)?c.$parent.$eval(e.directionLinks):b.directionLinks,i.init(j,b),e.maxSize&&c.$parent.$watch(a(e.maxSize),function(a){k=parseInt(a,10),i.render()
	});var m=i.render;i.render=function(){m(),c.page>0&&c.page<=c.totalPages&&(c.pages=h(c.page,c.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"Â« Previous",nextText:"Next Â»",align:!0}).directive("pager",["pagerConfig",function(a){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(b,c,d,e){var f=e[0],g=e[1];g&&(b.align=angular.isDefined(d.align)?b.$parent.$eval(d.align):a.align,f.init(g,a))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function a(a){var b=/[A-Z]/g,c="-";return a.replace(b,function(a,b){return(b?c:"")+a.toLowerCase()})}var b={placement:"top",animation:!0,popupDelay:0},c={mouseenter:"mouseleave",click:"click",focus:"blur"},d={};this.options=function(a){angular.extend(d,a)},this.setTriggers=function(a){angular.extend(c,a)},this.$get=["$window","$compile","$timeout","$parse","$document","$position","$interpolate",function(e,f,g,h,i,j,k){return function(e,l,m){function n(a){var b=a||o.trigger||m,d=c[b]||b;return{show:b,hide:d}}var o=angular.extend({},b,d),p=a(e),q=k.startSymbol(),r=k.endSymbol(),s="<div "+p+'-popup title="'+q+"tt_title"+r+'" content="'+q+"tt_content"+r+'" placement="'+q+"tt_placement"+r+'" animation="tt_animation" is-open="tt_isOpen"></div>';return{restrict:"EA",scope:!0,compile:function(){var a=f(s);return function(b,c,d){function f(){b.tt_isOpen?m():k()}function k(){(!y||b.$eval(d[l+"Enable"]))&&(b.tt_popupDelay?v||(v=g(p,b.tt_popupDelay,!1),v.then(function(a){a()})):p()())}function m(){b.$apply(function(){q()})}function p(){return v=null,u&&(g.cancel(u),u=null),b.tt_content?(r(),t.css({top:0,left:0,display:"block"}),w?i.find("body").append(t):c.after(t),z(),b.tt_isOpen=!0,b.$digest(),z):angular.noop}function q(){b.tt_isOpen=!1,g.cancel(v),v=null,b.tt_animation?u||(u=g(s,500)):s()}function r(){t&&s(),t=a(b,function(){}),b.$digest()}function s(){u=null,t&&(t.remove(),t=null)}var t,u,v,w=angular.isDefined(o.appendToBody)?o.appendToBody:!1,x=n(void 0),y=angular.isDefined(d[l+"Enable"]),z=function(){var a=j.positionElements(c,t,b.tt_placement,w);a.top+="px",a.left+="px",t.css(a)};b.tt_isOpen=!1,d.$observe(e,function(a){b.tt_content=a,!a&&b.tt_isOpen&&q()}),d.$observe(l+"Title",function(a){b.tt_title=a}),d.$observe(l+"Placement",function(a){b.tt_placement=angular.isDefined(a)?a:o.placement}),d.$observe(l+"PopupDelay",function(a){var c=parseInt(a,10);b.tt_popupDelay=isNaN(c)?o.popupDelay:c});var A=function(){c.unbind(x.show,k),c.unbind(x.hide,m)};d.$observe(l+"Trigger",function(a){A(),x=n(a),x.show===x.hide?c.bind(x.show,f):(c.bind(x.show,k),c.bind(x.hide,m))});var B=b.$eval(d[l+"Animation"]);b.tt_animation=angular.isDefined(B)?!!B:o.animation,d.$observe(l+"AppendToBody",function(a){w=angular.isDefined(a)?h(a)(b):w}),w&&b.$on("$locationChangeSuccess",function(){b.tt_isOpen&&q()}),b.$on("$destroy",function(){g.cancel(u),g.cancel(v),A(),s()})}}}}}]}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(a){return a("tooltip","tooltip","mouseenter")}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).directive("tooltipHtmlUnsafe",["$tooltip",function(a){return a("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(a){return a("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(a,b,c){var d=this,e=angular.isDefined(b.animate)?a.$parent.$eval(b.animate):c.animate;this.bars=[],a.max=angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max,this.addBar=function(b,c){e||c.css({transition:"none"}),this.bars.push(b),b.$watch("value",function(c){b.percent=+(100*c/a.max).toFixed(2)}),b.$on("$destroy",function(){c=null,d.removeBar(b)})},this.removeBar=function(a){this.bars.splice(this.bars.indexOf(a),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(a,b,c,d){d.addBar(a,b)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(a,b,c,d){d.addBar(a,angular.element(b.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null}).controller("RatingController",["$scope","$attrs","ratingConfig",function(a,b,c){var d={$setViewValue:angular.noop};this.init=function(e){d=e,d.$render=this.render,this.stateOn=angular.isDefined(b.stateOn)?a.$parent.$eval(b.stateOn):c.stateOn,this.stateOff=angular.isDefined(b.stateOff)?a.$parent.$eval(b.stateOff):c.stateOff;var f=angular.isDefined(b.ratingStates)?a.$parent.$eval(b.ratingStates):new Array(angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max);a.range=this.buildTemplateObjects(f)},this.buildTemplateObjects=function(a){for(var b=0,c=a.length;c>b;b++)a[b]=angular.extend({index:b},{stateOn:this.stateOn,stateOff:this.stateOff},a[b]);return a},a.rate=function(b){!a.readonly&&b>=0&&b<=a.range.length&&(d.$setViewValue(b),d.$render())},a.enter=function(b){a.readonly||(a.value=b),a.onHover({value:b})},a.reset=function(){a.value=d.$viewValue,a.onLeave()},a.onKeydown=function(b){/(37|38|39|40)/.test(b.which)&&(b.preventDefault(),b.stopPropagation(),a.rate(a.value+(38===b.which||39===b.which?1:-1)))},this.render=function(){a.value=d.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(a){var b=this,c=b.tabs=a.tabs=[];b.select=function(a){angular.forEach(c,function(b){b.active&&b!==a&&(b.active=!1,b.onDeselect())}),a.active=!0,a.onSelect()},b.addTab=function(a){c.push(a),1===c.length?a.active=!0:a.active&&b.select(a)},b.removeTab=function(a){var d=c.indexOf(a);if(a.active&&c.length>1){var e=d==c.length-1?d-1:d+1;b.select(c[e])}c.splice(d,1)}}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(a,b,c){a.vertical=angular.isDefined(c.vertical)?a.$parent.$eval(c.vertical):!1,a.justified=angular.isDefined(c.justified)?a.$parent.$eval(c.justified):!1}}}).directive("tab",["$parse",function(a){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},compile:function(b,c,d){return function(b,c,e,f){b.$watch("active",function(a){a&&f.select(b)}),b.disabled=!1,e.disabled&&b.$parent.$watch(a(e.disabled),function(a){b.disabled=!!a}),b.select=function(){b.disabled||(b.active=!0)},f.addTab(b),b.$on("$destroy",function(){f.removeTab(b)}),b.$transcludeFn=d}}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(a,b){a.$watch("headingElement",function(a){a&&(b.html(""),b.append(a))})}}}]).directive("tabContentTransclude",function(){function a(a){return a.tagName&&(a.hasAttribute("tab-heading")||a.hasAttribute("data-tab-heading")||"tab-heading"===a.tagName.toLowerCase()||"data-tab-heading"===a.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(b,c,d){var e=b.$eval(d.tabContentTransclude);e.$transcludeFn(e.$parent,function(b){angular.forEach(b,function(b){a(b)?e.headingElement=b:c.append(b)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(a,b,c,d,e,f){function g(){var b=parseInt(a.hours,10),c=a.showMeridian?b>0&&13>b:b>=0&&24>b;return c?(a.showMeridian&&(12===b&&(b=0),a.meridian===p[1]&&(b+=12)),b):void 0}function h(){var b=parseInt(a.minutes,10);return b>=0&&60>b?b:void 0}function i(a){return angular.isDefined(a)&&a.toString().length<2?"0"+a:a}function j(a){k(),o.$setViewValue(new Date(n)),l(a)}function k(){o.$setValidity("time",!0),a.invalidHours=!1,a.invalidMinutes=!1}function l(b){var c=n.getHours(),d=n.getMinutes();a.showMeridian&&(c=0===c||12===c?12:c%12),a.hours="h"===b?c:i(c),a.minutes="m"===b?d:i(d),a.meridian=n.getHours()<12?p[0]:p[1]}function m(a){var b=new Date(n.getTime()+6e4*a);n.setHours(b.getHours(),b.getMinutes()),j()}var n=new Date,o={$setViewValue:angular.noop},p=angular.isDefined(b.meridians)?a.$parent.$eval(b.meridians):f.meridians||e.DATETIME_FORMATS.AMPMS;this.init=function(c,d){o=c,o.$render=this.render;var e=d.eq(0),g=d.eq(1),h=angular.isDefined(b.mousewheel)?a.$parent.$eval(b.mousewheel):f.mousewheel;h&&this.setupMousewheelEvents(e,g),a.readonlyInput=angular.isDefined(b.readonlyInput)?a.$parent.$eval(b.readonlyInput):f.readonlyInput,this.setupInputEvents(e,g)};var q=f.hourStep;b.hourStep&&a.$parent.$watch(c(b.hourStep),function(a){q=parseInt(a,10)});var r=f.minuteStep;b.minuteStep&&a.$parent.$watch(c(b.minuteStep),function(a){r=parseInt(a,10)}),a.showMeridian=f.showMeridian,b.showMeridian&&a.$parent.$watch(c(b.showMeridian),function(b){if(a.showMeridian=!!b,o.$error.time){var c=g(),d=h();angular.isDefined(c)&&angular.isDefined(d)&&(n.setHours(c),j())}else l()}),this.setupMousewheelEvents=function(b,c){var d=function(a){a.originalEvent&&(a=a.originalEvent);var b=a.wheelDelta?a.wheelDelta:-a.deltaY;return a.detail||b>0};b.bind("mousewheel wheel",function(b){a.$apply(d(b)?a.incrementHours():a.decrementHours()),b.preventDefault()}),c.bind("mousewheel wheel",function(b){a.$apply(d(b)?a.incrementMinutes():a.decrementMinutes()),b.preventDefault()})},this.setupInputEvents=function(b,c){if(a.readonlyInput)return a.updateHours=angular.noop,void(a.updateMinutes=angular.noop);var d=function(b,c){o.$setViewValue(null),o.$setValidity("time",!1),angular.isDefined(b)&&(a.invalidHours=b),angular.isDefined(c)&&(a.invalidMinutes=c)};a.updateHours=function(){var a=g();angular.isDefined(a)?(n.setHours(a),j("h")):d(!0)},b.bind("blur",function(){!a.invalidHours&&a.hours<10&&a.$apply(function(){a.hours=i(a.hours)})}),a.updateMinutes=function(){var a=h();angular.isDefined(a)?(n.setMinutes(a),j("m")):d(void 0,!0)},c.bind("blur",function(){!a.invalidMinutes&&a.minutes<10&&a.$apply(function(){a.minutes=i(a.minutes)})})},this.render=function(){var a=o.$modelValue?new Date(o.$modelValue):null;isNaN(a)?(o.$setValidity("time",!1),d.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(a&&(n=a),k(),l())},a.incrementHours=function(){m(60*q)},a.decrementHours=function(){m(60*-q)},a.incrementMinutes=function(){m(r)},a.decrementMinutes=function(){m(-r)},a.toggleMeridian=function(){m(720*(n.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f,b.find("input"))}}}),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(a){var b=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(c){var d=c.match(b);if(!d)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+c+'".');return{itemName:d[3],source:a(d[4]),viewMapper:a(d[2]||d[1]),modelMapper:a(d[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$position","typeaheadParser",function(a,b,c,d,e,f,g){var h=[9,13,27,38,40];return{require:"ngModel",link:function(i,j,k,l){var m,n=i.$eval(k.typeaheadMinLength)||1,o=i.$eval(k.typeaheadWaitMs)||0,p=i.$eval(k.typeaheadEditable)!==!1,q=b(k.typeaheadLoading).assign||angular.noop,r=b(k.typeaheadOnSelect),s=k.typeaheadInputFormatter?b(k.typeaheadInputFormatter):void 0,t=k.typeaheadAppendToBody?i.$eval(k.typeaheadAppendToBody):!1,u=b(k.ngModel).assign,v=g.parse(k.typeahead),w=i.$new();i.$on("$destroy",function(){w.$destroy()});var x="typeahead-"+w.$id+"-"+Math.floor(1e4*Math.random());j.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":x});var y=angular.element("<div typeahead-popup></div>");y.attr({id:x,matches:"matches",active:"activeIdx",select:"select(activeIdx)",query:"query",position:"position"}),angular.isDefined(k.typeaheadTemplateUrl)&&y.attr("template-url",k.typeaheadTemplateUrl);var z=function(){w.matches=[],w.activeIdx=-1,j.attr("aria-expanded",!1)},A=function(a){return x+"-option-"+a};w.$watch("activeIdx",function(a){0>a?j.removeAttr("aria-activedescendant"):j.attr("aria-activedescendant",A(a))});var B=function(a){var b={$viewValue:a};q(i,!0),c.when(v.source(i,b)).then(function(c){var d=a===l.$viewValue;if(d&&m)if(c.length>0){w.activeIdx=0,w.matches.length=0;for(var e=0;e<c.length;e++)b[v.itemName]=c[e],w.matches.push({id:A(e),label:v.viewMapper(w,b),model:c[e]});w.query=a,w.position=t?f.offset(j):f.position(j),w.position.top=w.position.top+j.prop("offsetHeight"),j.attr("aria-expanded",!0)}else z();d&&q(i,!1)},function(){z(),q(i,!1)})};z(),w.query=void 0;var C,D=function(a){C=d(function(){B(a)},o)},E=function(){C&&d.cancel(C)};l.$parsers.unshift(function(a){return m=!0,a&&a.length>=n?o>0?(E(),D(a)):B(a):(q(i,!1),E(),z()),p?a:a?void l.$setValidity("editable",!1):(l.$setValidity("editable",!0),a)}),l.$formatters.push(function(a){var b,c,d={};return s?(d.$model=a,s(i,d)):(d[v.itemName]=a,b=v.viewMapper(i,d),d[v.itemName]=void 0,c=v.viewMapper(i,d),b!==c?b:a)}),w.select=function(a){var b,c,e={};e[v.itemName]=c=w.matches[a].model,b=v.modelMapper(i,e),u(i,b),l.$setValidity("editable",!0),r(i,{$item:c,$model:b,$label:v.viewMapper(i,e)}),z(),d(function(){j[0].focus()},0,!1)},j.bind("keydown",function(a){0!==w.matches.length&&-1!==h.indexOf(a.which)&&(a.preventDefault(),40===a.which?(w.activeIdx=(w.activeIdx+1)%w.matches.length,w.$digest()):38===a.which?(w.activeIdx=(w.activeIdx?w.activeIdx:w.matches.length)-1,w.$digest()):13===a.which||9===a.which?w.$apply(function(){w.select(w.activeIdx)}):27===a.which&&(a.stopPropagation(),z(),w.$digest()))}),j.bind("blur",function(){m=!1});var F=function(a){j[0]!==a.target&&(z(),w.$digest())};e.bind("click",F),i.$on("$destroy",function(){e.unbind("click",F)});var G=a(y)(w);t?e.find("body").append(G):j.after(G)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(a,b,c){a.templateUrl=c.templateUrl,a.isOpen=function(){return a.matches.length>0},a.isActive=function(b){return a.active==b},a.selectActive=function(b){a.active=b},a.selectMatch=function(b){a.select({activeIdx:b})}}}}).directive("typeaheadMatch",["$http","$templateCache","$compile","$parse",function(a,b,c,d){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(e,f,g){var h=d(g.templateUrl)(e.$parent)||"template/typeahead/typeahead-match.html";a.get(h,{cache:b}).success(function(a){f.replaceWith(c(a.trim())(e))})}}}]).filter("typeaheadHighlight",function(){function a(a){return a.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(b,c){return c?(""+b).replace(new RegExp(a(c),"gi"),"<strong>$&</strong>"):b}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(a){a.put("template/accordion/accordion-group.html",'<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(a){a.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(a){a.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissable\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(a){a.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(a){a.put("template/carousel/slide.html","<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n")}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(a){a.put("template/modal/backdrop.html",'<div class="modal-backdrop fade {{ backdropClass }}"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(a){a.put("template/modal/window.html",'<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="{\'modal-sm\': size == \'sm\', \'modal-lg\': size == \'lg\'}"><div class="modal-content" modal-transclude></div></div>\n</div>')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(a){a.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(a){a.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(a){a.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(a){a.put("template/tooltip/tooltip-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(a){a.put("template/popover/popover.html",'<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(a){a.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(a){a.put("template/timepicker/timepicker.html",'<table>\n	<tbody>\n		<tr class="text-center">\n			<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n		<tr>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n				<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td>:</td>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n				<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n		</tr>\n		<tr class="text-center">\n			<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n	</tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(a){a.put("template/typeahead/typeahead-match.html",'<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>')
	}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(a){a.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]);

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	/*
	 AngularJS v1.5.5
	 (c) 2010-2016 Google, Inc. http://angularjs.org
	 License: MIT
	*/
	(function(P,d){'use strict';function G(t,g){g=g||{};d.forEach(g,function(d,q){delete g[q]});for(var q in t)!t.hasOwnProperty(q)||"$"===q.charAt(0)&&"$"===q.charAt(1)||(g[q]=t[q]);return g}var z=d.$$minErr("$resource"),M=/^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;d.module("ngResource",["ng"]).provider("$resource",function(){var t=/^https?:\/\/[^\/]*/,g=this;this.defaults={stripTrailingSlashes:!0,actions:{get:{method:"GET"},save:{method:"POST"},query:{method:"GET",isArray:!0},remove:{method:"DELETE"},"delete":{method:"DELETE"}}};
	this.$get=["$http","$log","$q","$timeout",function(q,L,H,I){function A(d,h){return encodeURIComponent(d).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,h?"%20":"+")}function B(d,h){this.template=d;this.defaults=v({},g.defaults,h);this.urlParams={}}function J(e,h,n,k){function c(a,b){var c={};b=v({},h,b);u(b,function(b,h){x(b)&&(b=b());var f;if(b&&b.charAt&&"@"==b.charAt(0)){f=a;var l=b.substr(1);if(null==l||""===l||"hasOwnProperty"===l||!M.test("."+
	l))throw z("badmember",l);for(var l=l.split("."),m=0,k=l.length;m<k&&d.isDefined(f);m++){var r=l[m];f=null!==f?f[r]:void 0}}else f=b;c[h]=f});return c}function N(a){return a.resource}function m(a){G(a||{},this)}var t=new B(e,k);n=v({},g.defaults.actions,n);m.prototype.toJSON=function(){var a=v({},this);delete a.$promise;delete a.$resolved;return a};u(n,function(a,b){var h=/^(POST|PUT|PATCH)$/i.test(a.method),e=a.timeout,E=d.isDefined(a.cancellable)?a.cancellable:k&&d.isDefined(k.cancellable)?k.cancellable:
	g.defaults.cancellable;e&&!d.isNumber(e)&&(L.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option."),delete a.timeout,e=null);m[b]=function(f,l,k,g){var r={},n,w,C;switch(arguments.length){case 4:C=g,w=k;case 3:case 2:if(x(l)){if(x(f)){w=f;C=l;break}w=l;C=k}else{r=f;n=l;w=k;break}case 1:x(f)?
	w=f:h?n=f:r=f;break;case 0:break;default:throw z("badargs",arguments.length);}var D=this instanceof m,p=D?n:a.isArray?[]:new m(n),s={},A=a.interceptor&&a.interceptor.response||N,B=a.interceptor&&a.interceptor.responseError||void 0,y,F;u(a,function(a,b){switch(b){default:s[b]=O(a);case "params":case "isArray":case "interceptor":case "cancellable":}});!D&&E&&(y=H.defer(),s.timeout=y.promise,e&&(F=I(y.resolve,e)));h&&(s.data=n);t.setUrlParams(s,v({},c(n,a.params||{}),r),a.url);r=q(s).then(function(f){var c=
	f.data;if(c){if(d.isArray(c)!==!!a.isArray)throw z("badcfg",b,a.isArray?"array":"object",d.isArray(c)?"array":"object",s.method,s.url);if(a.isArray)p.length=0,u(c,function(b){"object"===typeof b?p.push(new m(b)):p.push(b)});else{var l=p.$promise;G(c,p);p.$promise=l}}f.resource=p;return f},function(b){(C||K)(b);return H.reject(b)});r["finally"](function(){p.$resolved=!0;!D&&E&&(p.$cancelRequest=d.noop,I.cancel(F),y=F=s.timeout=null)});r=r.then(function(b){var a=A(b);(w||K)(a,b.headers);return a},B);
	return D?r:(p.$promise=r,p.$resolved=!1,E&&(p.$cancelRequest=y.resolve),p)};m.prototype["$"+b]=function(a,c,d){x(a)&&(d=c,c=a,a={});a=m[b].call(this,a,this,c,d);return a.$promise||a}});m.bind=function(a){return J(e,v({},h,a),n)};return m}var K=d.noop,u=d.forEach,v=d.extend,O=d.copy,x=d.isFunction;B.prototype={setUrlParams:function(e,h,n){var k=this,c=n||k.template,g,m,q="",a=k.urlParams={};u(c.split(/\W/),function(b){if("hasOwnProperty"===b)throw z("badname");!/^\d+$/.test(b)&&b&&(new RegExp("(^|[^\\\\]):"+
	b+"(\\W|$)")).test(c)&&(a[b]={isQueryParamValue:(new RegExp("\\?.*=:"+b+"(?:\\W|$)")).test(c)})});c=c.replace(/\\:/g,":");c=c.replace(t,function(a){q=a;return""});h=h||{};u(k.urlParams,function(a,e){g=h.hasOwnProperty(e)?h[e]:k.defaults[e];d.isDefined(g)&&null!==g?(m=a.isQueryParamValue?A(g,!0):A(g,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+"),c=c.replace(new RegExp(":"+e+"(\\W|$)","g"),function(a,b){return m+b})):c=c.replace(new RegExp("(/?):"+e+"(\\W|$)","g"),function(a,b,c){return"/"==
	c.charAt(0)?c:b+c})});k.defaults.stripTrailingSlashes&&(c=c.replace(/\/+$/,"")||"/");c=c.replace(/\/\.(?=\w+($|\?))/,".");e.url=q+c.replace(/\/\\\./,"/.");u(h,function(a,c){k.urlParams[c]||(e.params=e.params||{},e.params[c]=a)})}};return J}]})})(window,window.angular);
	//# sourceMappingURL=angular-resource.min.js.map


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	/*
	 AngularJS v1.5.5
	 (c) 2010-2016 Google, Inc. http://angularjs.org
	 License: MIT
	*/
	(function(n,c){'use strict';function l(b,a,g){var d=g.baseHref(),k=b[0];return function(b,e,f){var g,h;f=f||{};h=f.expires;g=c.isDefined(f.path)?f.path:d;c.isUndefined(e)&&(h="Thu, 01 Jan 1970 00:00:00 GMT",e="");c.isString(h)&&(h=new Date(h));e=encodeURIComponent(b)+"="+encodeURIComponent(e);e=e+(g?";path="+g:"")+(f.domain?";domain="+f.domain:"");e+=h?";expires="+h.toUTCString():"";e+=f.secure?";secure":"";f=e.length+1;4096<f&&a.warn("Cookie '"+b+"' possibly not set or overflowed because it was too large ("+
	f+" > 4096 bytes)!");k.cookie=e}}c.module("ngCookies",["ng"]).provider("$cookies",[function(){var b=this.defaults={};this.$get=["$$cookieReader","$$cookieWriter",function(a,g){return{get:function(d){return a()[d]},getObject:function(d){return(d=this.get(d))?c.fromJson(d):d},getAll:function(){return a()},put:function(d,a,m){g(d,a,m?c.extend({},b,m):b)},putObject:function(d,b,a){this.put(d,c.toJson(b),a)},remove:function(a,k){g(a,void 0,k?c.extend({},b,k):b)}}}]}]);c.module("ngCookies").factory("$cookieStore",
	["$cookies",function(b){return{get:function(a){return b.getObject(a)},put:function(a,c){b.putObject(a,c)},remove:function(a){b.remove(a)}}}]);l.$inject=["$document","$log","$browser"];c.module("ngCookies").provider("$$cookieWriter",function(){this.$get=l})})(window,window.angular);
	//# sourceMappingURL=angular-cookies.min.js.map


/***/ }),
/* 7 */
/***/ (function(module, exports) {

	/*
	 AngularJS v1.5.5
	 (c) 2010-2016 Google, Inc. http://angularjs.org
	 License: MIT
	*/
	(function(C,d){'use strict';function z(r,h,g){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(a,c,b,f,y){function k(){n&&(g.cancel(n),n=null);l&&(l.$destroy(),l=null);m&&(n=g.leave(m),n.then(function(){n=null}),m=null)}function x(){var b=r.current&&r.current.locals;if(d.isDefined(b&&b.$template)){var b=a.$new(),f=r.current;m=y(b,function(b){g.enter(b,null,m||c).then(function(){!d.isDefined(t)||t&&!a.$eval(t)||h()});k()});l=f.scope=b;l.$emit("$viewContentLoaded");
	l.$eval(u)}else k()}var l,m,n,t=b.autoscroll,u=b.onload||"";a.$on("$routeChangeSuccess",x);x()}}}function A(d,h,g){return{restrict:"ECA",priority:-400,link:function(a,c){var b=g.current,f=b.locals;c.html(f.$template);var y=d(c.contents());if(b.controller){f.$scope=a;var k=h(b.controller,f);b.controllerAs&&(a[b.controllerAs]=k);c.data("$ngControllerController",k);c.children().data("$ngControllerController",k)}a[b.resolveAs||"$resolve"]=f;y(a)}}}var w=d.module("ngRoute",["ng"]).provider("$route",function(){function r(a,
	c){return d.extend(Object.create(a),c)}function h(a,d){var b=d.caseInsensitiveMatch,f={originalPath:a,regexp:a},g=f.keys=[];a=a.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)(\*\?|[\?\*])?/g,function(a,d,b,c){a="?"===c||"*?"===c?"?":null;c="*"===c||"*?"===c?"*":null;g.push({name:b,optional:!!a});d=d||"";return""+(a?"":d)+"(?:"+(a?d:"")+(c&&"(.+?)"||"([^/]+)")+(a||"")+")"+(a||"")}).replace(/([\/$\*])/g,"\\$1");f.regexp=new RegExp("^"+a+"$",b?"i":"");return f}var g={};this.when=function(a,c){var b=
	d.copy(c);d.isUndefined(b.reloadOnSearch)&&(b.reloadOnSearch=!0);d.isUndefined(b.caseInsensitiveMatch)&&(b.caseInsensitiveMatch=this.caseInsensitiveMatch);g[a]=d.extend(b,a&&h(a,b));if(a){var f="/"==a[a.length-1]?a.substr(0,a.length-1):a+"/";g[f]=d.extend({redirectTo:a},h(f,b))}return this};this.caseInsensitiveMatch=!1;this.otherwise=function(a){"string"===typeof a&&(a={redirectTo:a});this.when(null,a);return this};this.$get=["$rootScope","$location","$routeParams","$q","$injector","$templateRequest",
	"$sce",function(a,c,b,f,h,k,x){function l(b){var e=s.current;(w=(p=n())&&e&&p.$$route===e.$$route&&d.equals(p.pathParams,e.pathParams)&&!p.reloadOnSearch&&!u)||!e&&!p||a.$broadcast("$routeChangeStart",p,e).defaultPrevented&&b&&b.preventDefault()}function m(){var v=s.current,e=p;if(w)v.params=e.params,d.copy(v.params,b),a.$broadcast("$routeUpdate",v);else if(e||v)u=!1,(s.current=e)&&e.redirectTo&&(d.isString(e.redirectTo)?c.path(t(e.redirectTo,e.params)).search(e.params).replace():c.url(e.redirectTo(e.pathParams,
	c.path(),c.search())).replace()),f.when(e).then(function(){if(e){var a=d.extend({},e.resolve),b,c;d.forEach(a,function(b,e){a[e]=d.isString(b)?h.get(b):h.invoke(b,null,null,e)});d.isDefined(b=e.template)?d.isFunction(b)&&(b=b(e.params)):d.isDefined(c=e.templateUrl)&&(d.isFunction(c)&&(c=c(e.params)),d.isDefined(c)&&(e.loadedTemplateUrl=x.valueOf(c),b=k(c)));d.isDefined(b)&&(a.$template=b);return f.all(a)}}).then(function(c){e==s.current&&(e&&(e.locals=c,d.copy(e.params,b)),a.$broadcast("$routeChangeSuccess",
	e,v))},function(b){e==s.current&&a.$broadcast("$routeChangeError",e,v,b)})}function n(){var a,b;d.forEach(g,function(f,g){var q;if(q=!b){var h=c.path();q=f.keys;var l={};if(f.regexp)if(h=f.regexp.exec(h)){for(var k=1,n=h.length;k<n;++k){var m=q[k-1],p=h[k];m&&p&&(l[m.name]=p)}q=l}else q=null;else q=null;q=a=q}q&&(b=r(f,{params:d.extend({},c.search(),a),pathParams:a}),b.$$route=f)});return b||g[null]&&r(g[null],{params:{},pathParams:{}})}function t(a,b){var c=[];d.forEach((a||"").split(":"),function(a,
	d){if(0===d)c.push(a);else{var f=a.match(/(\w+)(?:[?*])?(.*)/),g=f[1];c.push(b[g]);c.push(f[2]||"");delete b[g]}});return c.join("")}var u=!1,p,w,s={routes:g,reload:function(){u=!0;var b={defaultPrevented:!1,preventDefault:function(){this.defaultPrevented=!0;u=!1}};a.$evalAsync(function(){l(b);b.defaultPrevented||m()})},updateParams:function(a){if(this.current&&this.current.$$route)a=d.extend({},this.current.params,a),c.path(t(this.current.$$route.originalPath,a)),c.search(a);else throw B("norout");
	}};a.$on("$locationChangeStart",l);a.$on("$locationChangeSuccess",m);return s}]}),B=d.$$minErr("ngRoute");w.provider("$routeParams",function(){this.$get=function(){return{}}});w.directive("ngView",z);w.directive("ngView",A);z.$inject=["$route","$anchorScroll","$animate"];A.$inject=["$compile","$controller","$route"]})(window,window.angular);
	//# sourceMappingURL=angular-route.min.js.map


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	/*
	 AngularJS v1.5.5
	 (c) 2010-2016 Google, Inc. http://angularjs.org
	 License: MIT
	*/
	(function(S,q){'use strict';function Aa(a,b,c){if(!a)throw Ma("areq",b||"?",c||"required");return a}function Ba(a,b){if(!a&&!b)return"";if(!a)return b;if(!b)return a;ba(a)&&(a=a.join(" "));ba(b)&&(b=b.join(" "));return a+" "+b}function Na(a){var b={};a&&(a.to||a.from)&&(b.to=a.to,b.from=a.from);return b}function X(a,b,c){var d="";a=ba(a)?a:a&&P(a)&&a.length?a.split(/\s+/):[];r(a,function(a,f){a&&0<a.length&&(d+=0<f?" ":"",d+=c?b+a:a+b)});return d}function Oa(a){if(a instanceof G)switch(a.length){case 0:return[];
	case 1:if(1===a[0].nodeType)return a;break;default:return G(ca(a))}if(1===a.nodeType)return G(a)}function ca(a){if(!a[0])return a;for(var b=0;b<a.length;b++){var c=a[b];if(1==c.nodeType)return c}}function Pa(a,b,c){r(b,function(b){a.addClass(b,c)})}function Qa(a,b,c){r(b,function(b){a.removeClass(b,c)})}function U(a){return function(b,c){c.addClass&&(Pa(a,b,c.addClass),c.addClass=null);c.removeClass&&(Qa(a,b,c.removeClass),c.removeClass=null)}}function pa(a){a=a||{};if(!a.$$prepared){var b=a.domOperation||
	Q;a.domOperation=function(){a.$$domOperationFired=!0;b();b=Q};a.$$prepared=!0}return a}function ga(a,b){Ca(a,b);Da(a,b)}function Ca(a,b){b.from&&(a.css(b.from),b.from=null)}function Da(a,b){b.to&&(a.css(b.to),b.to=null)}function V(a,b,c){var d=b.options||{};c=c.options||{};var e=(d.addClass||"")+" "+(c.addClass||""),f=(d.removeClass||"")+" "+(c.removeClass||"");a=Ra(a.attr("class"),e,f);c.preparationClasses&&(d.preparationClasses=Y(c.preparationClasses,d.preparationClasses),delete c.preparationClasses);
	e=d.domOperation!==Q?d.domOperation:null;Ea(d,c);e&&(d.domOperation=e);d.addClass=a.addClass?a.addClass:null;d.removeClass=a.removeClass?a.removeClass:null;b.addClass=d.addClass;b.removeClass=d.removeClass;return d}function Ra(a,b,c){function d(a){P(a)&&(a=a.split(" "));var b={};r(a,function(a){a.length&&(b[a]=!0)});return b}var e={};a=d(a);b=d(b);r(b,function(a,b){e[b]=1});c=d(c);r(c,function(a,b){e[b]=1===e[b]?null:-1});var f={addClass:"",removeClass:""};r(e,function(b,c){var d,e;1===b?(d="addClass",
	e=!a[c]):-1===b&&(d="removeClass",e=a[c]);e&&(f[d].length&&(f[d]+=" "),f[d]+=c)});return f}function D(a){return a instanceof q.element?a[0]:a}function Sa(a,b,c){var d="";b&&(d=X(b,"ng-",!0));c.addClass&&(d=Y(d,X(c.addClass,"-add")));c.removeClass&&(d=Y(d,X(c.removeClass,"-remove")));d.length&&(c.preparationClasses=d,a.addClass(d))}function qa(a,b){var c=b?"-"+b+"s":"";la(a,[ma,c]);return[ma,c]}function ta(a,b){var c=b?"paused":"",d=Z+"PlayState";la(a,[d,c]);return[d,c]}function la(a,b){a.style[b[0]]=
	b[1]}function Y(a,b){return a?b?a+" "+b:a:b}function Fa(a,b,c){var d=Object.create(null),e=a.getComputedStyle(b)||{};r(c,function(a,b){var c=e[a];if(c){var s=c.charAt(0);if("-"===s||"+"===s||0<=s)c=Ta(c);0===c&&(c=null);d[b]=c}});return d}function Ta(a){var b=0;a=a.split(/\s*,\s*/);r(a,function(a){"s"==a.charAt(a.length-1)&&(a=a.substring(0,a.length-1));a=parseFloat(a)||0;b=b?Math.max(a,b):a});return b}function ua(a){return 0===a||null!=a}function Ga(a,b){var c=T,d=a+"s";b?c+="Duration":d+=" linear all";
	return[c,d]}function Ha(){var a=Object.create(null);return{flush:function(){a=Object.create(null)},count:function(b){return(b=a[b])?b.total:0},get:function(b){return(b=a[b])&&b.value},put:function(b,c){a[b]?a[b].total++:a[b]={total:1,value:c}}}}function Ia(a,b,c){r(c,function(c){a[c]=da(a[c])?a[c]:b.style.getPropertyValue(c)})}var Q=q.noop,Ja=q.copy,Ea=q.extend,G=q.element,r=q.forEach,ba=q.isArray,P=q.isString,va=q.isObject,C=q.isUndefined,da=q.isDefined,Ka=q.isFunction,wa=q.isElement,T,xa,Z,ya;C(S.ontransitionend)&&
	da(S.onwebkittransitionend)?(T="WebkitTransition",xa="webkitTransitionEnd transitionend"):(T="transition",xa="transitionend");C(S.onanimationend)&&da(S.onwebkitanimationend)?(Z="WebkitAnimation",ya="webkitAnimationEnd animationend"):(Z="animation",ya="animationend");var ra=Z+"Delay",za=Z+"Duration",ma=T+"Delay",La=T+"Duration",Ma=q.$$minErr("ng"),Ua={transitionDuration:La,transitionDelay:ma,transitionProperty:T+"Property",animationDuration:za,animationDelay:ra,animationIterationCount:Z+"IterationCount"},
	Va={transitionDuration:La,transitionDelay:ma,animationDuration:za,animationDelay:ra};q.module("ngAnimate",[]).directive("ngAnimateSwap",["$animate","$rootScope",function(a,b){return{restrict:"A",transclude:"element",terminal:!0,priority:600,link:function(b,d,e,f,z){var B,s;b.$watchCollection(e.ngAnimateSwap||e["for"],function(e){B&&a.leave(B);s&&(s.$destroy(),s=null);if(e||0===e)s=b.$new(),z(s,function(b){B=b;a.enter(b,null,d)})})}}}]).directive("ngAnimateChildren",["$interpolate",function(a){return{link:function(b,
	c,d){function e(a){c.data("$$ngAnimateChildren","on"===a||"true"===a)}var f=d.ngAnimateChildren;q.isString(f)&&0===f.length?c.data("$$ngAnimateChildren",!0):(e(a(f)(b)),d.$observe("ngAnimateChildren",e))}}}]).factory("$$rAFScheduler",["$$rAF",function(a){function b(a){d=d.concat(a);c()}function c(){if(d.length){for(var b=d.shift(),z=0;z<b.length;z++)b[z]();e||a(function(){e||c()})}}var d,e;d=b.queue=[];b.waitUntilQuiet=function(b){e&&e();e=a(function(){e=null;b();c()})};return b}]).provider("$$animateQueue",
	["$animateProvider",function(a){function b(a){if(!a)return null;a=a.split(" ");var b=Object.create(null);r(a,function(a){b[a]=!0});return b}function c(a,c){if(a&&c){var d=b(c);return a.split(" ").some(function(a){return d[a]})}}function d(a,b,c,d){return f[a].some(function(a){return a(b,c,d)})}function e(a,b){var c=0<(a.addClass||"").length,d=0<(a.removeClass||"").length;return b?c&&d:c||d}var f=this.rules={skip:[],cancel:[],join:[]};f.join.push(function(a,b,c){return!b.structural&&e(b)});f.skip.push(function(a,
	b,c){return!b.structural&&!e(b)});f.skip.push(function(a,b,c){return"leave"==c.event&&b.structural});f.skip.push(function(a,b,c){return c.structural&&2===c.state&&!b.structural});f.cancel.push(function(a,b,c){return c.structural&&b.structural});f.cancel.push(function(a,b,c){return 2===c.state&&b.structural});f.cancel.push(function(a,b,d){if(d.structural)return!1;a=b.addClass;b=b.removeClass;var e=d.addClass;d=d.removeClass;return C(a)&&C(b)||C(e)&&C(d)?!1:c(a,d)||c(b,e)});this.$get=["$$rAF","$rootScope",
	"$rootElement","$document","$$HashMap","$$animation","$$AnimateRunner","$templateRequest","$$jqLite","$$forceReflow",function(b,c,f,v,I,Wa,u,sa,w,x){function R(){var a=!1;return function(b){a?b():c.$$postDigest(function(){a=!0;b()})}}function J(a,b,c){var g=D(b),d=D(a),k=[];(a=h[c])&&r(a,function(a){ia.call(a.node,g)?k.push(a.callback):"leave"===c&&ia.call(a.node,d)&&k.push(a.callback)});return k}function k(a,b,c){var g=ca(b);return a.filter(function(a){return!(a.node===g&&(!c||a.callback===c))})}
	function p(a,k,h){function l(c,g,d,h){f(function(){var c=J(oa,a,g);c.length?b(function(){r(c,function(b){b(a,d,h)});"close"!==d||a[0].parentNode||N.off(a)}):"close"!==d||a[0].parentNode||N.off(a)});c.progress(g,d,h)}function A(b){var c=a,g=m;g.preparationClasses&&(c.removeClass(g.preparationClasses),g.preparationClasses=null);g.activeClasses&&(c.removeClass(g.activeClasses),g.activeClasses=null);F(a,m);ga(a,m);m.domOperation();p.complete(!b)}var m=Ja(h),x,oa;if(a=Oa(a))x=D(a),oa=a.parent();var m=
	pa(m),p=new u,f=R();ba(m.addClass)&&(m.addClass=m.addClass.join(" "));m.addClass&&!P(m.addClass)&&(m.addClass=null);ba(m.removeClass)&&(m.removeClass=m.removeClass.join(" "));m.removeClass&&!P(m.removeClass)&&(m.removeClass=null);m.from&&!va(m.from)&&(m.from=null);m.to&&!va(m.to)&&(m.to=null);if(!x)return A(),p;h=[x.className,m.addClass,m.removeClass].join(" ");if(!Xa(h))return A(),p;var s=0<=["enter","move","leave"].indexOf(k),t=v[0].hidden,w=!g||t||H.get(x);h=!w&&y.get(x)||{};var I=!!h.state;w||
	I&&1==h.state||(w=!K(a,oa,k));if(w)return t&&l(p,k,"start"),A(),t&&l(p,k,"close"),p;s&&L(a);t={structural:s,element:a,event:k,addClass:m.addClass,removeClass:m.removeClass,close:A,options:m,runner:p};if(I){if(d("skip",a,t,h)){if(2===h.state)return A(),p;V(a,h,t);return h.runner}if(d("cancel",a,t,h))if(2===h.state)h.runner.end();else if(h.structural)h.close();else return V(a,h,t),h.runner;else if(d("join",a,t,h))if(2===h.state)V(a,t,{});else return Sa(a,s?k:null,m),k=t.event=h.event,m=V(a,h,t),h.runner}else V(a,
	t,{});(I=t.structural)||(I="animate"===t.event&&0<Object.keys(t.options.to||{}).length||e(t));if(!I)return A(),O(a),p;var ia=(h.counter||0)+1;t.counter=ia;M(a,1,t);c.$$postDigest(function(){var b=y.get(x),c=!b,b=b||{},g=0<(a.parent()||[]).length&&("animate"===b.event||b.structural||e(b));if(c||b.counter!==ia||!g){c&&(F(a,m),ga(a,m));if(c||s&&b.event!==k)m.domOperation(),p.end();g||O(a)}else k=!b.structural&&e(b,!0)?"setClass":b.event,M(a,2),b=Wa(a,k,b.options),p.setHost(b),l(p,k,"start",{}),b.done(function(b){A(!b);
	(b=y.get(x))&&b.counter===ia&&O(D(a));l(p,k,"close",{})})});return p}function L(a){a=D(a).querySelectorAll("[data-ng-animate]");r(a,function(a){var b=parseInt(a.getAttribute("data-ng-animate")),c=y.get(a);if(c)switch(b){case 2:c.runner.end();case 1:y.remove(a)}})}function O(a){a=D(a);a.removeAttribute("data-ng-animate");y.remove(a)}function l(a,b){return D(a)===D(b)}function K(a,b,c){c=G(v[0].body);var g=l(a,c)||"HTML"===a[0].nodeName,d=l(a,f),h=!1,k,e=H.get(D(a));(a=G.data(a[0],"$ngAnimatePin"))&&
	(b=a);for(b=D(b);b;){d||(d=l(b,f));if(1!==b.nodeType)break;a=y.get(b)||{};if(!h){var p=H.get(b);if(!0===p&&!1!==e){e=!0;break}else!1===p&&(e=!1);h=a.structural}if(C(k)||!0===k)a=G.data(b,"$$ngAnimateChildren"),da(a)&&(k=a);if(h&&!1===k)break;g||(g=l(b,c));if(g&&d)break;if(!d&&(a=G.data(b,"$ngAnimatePin"))){b=D(a);continue}b=b.parentNode}return(!h||k)&&!0!==e&&d&&g}function M(a,b,c){c=c||{};c.state=b;a=D(a);a.setAttribute("data-ng-animate",b);c=(b=y.get(a))?Ea(b,c):c;y.put(a,c)}var y=new I,H=new I,
	g=null,oa=c.$watch(function(){return 0===sa.totalPendingRequests},function(a){a&&(oa(),c.$$postDigest(function(){c.$$postDigest(function(){null===g&&(g=!0)})}))}),h={},A=a.classNameFilter(),Xa=A?function(a){return A.test(a)}:function(){return!0},F=U(w),ia=S.Node.prototype.contains||function(a){return this===a||!!(this.compareDocumentPosition(a)&16)},N={on:function(a,b,c){var g=ca(b);h[a]=h[a]||[];h[a].push({node:g,callback:c});G(b).on("$destroy",function(){y.get(g)||N.off(a,b,c)})},off:function(a,
	b,c){if(1!==arguments.length||q.isString(arguments[0])){var g=h[a];g&&(h[a]=1===arguments.length?null:k(g,b,c))}else for(g in b=arguments[0],h)h[g]=k(h[g],b)},pin:function(a,b){Aa(wa(a),"element","not an element");Aa(wa(b),"parentElement","not an element");a.data("$ngAnimatePin",b)},push:function(a,b,c,g){c=c||{};c.domOperation=g;return p(a,b,c)},enabled:function(a,b){var c=arguments.length;if(0===c)b=!!g;else if(wa(a)){var d=D(a),h=H.get(d);1===c?b=!h:H.put(d,!b)}else b=g=!!a;return b}};return N}]}]).provider("$$animation",
	["$animateProvider",function(a){function b(a){return a.data("$$animationRunner")}var c=this.drivers=[];this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$HashMap","$$rAFScheduler",function(a,e,f,z,B,s){function v(a){function b(a){if(a.processed)return a;a.processed=!0;var d=a.domNode,L=d.parentNode;e.put(d,a);for(var f;L;){if(f=e.get(L)){f.processed||(f=b(f));break}L=L.parentNode}(f||c).children.push(a);return a}var c={children:[]},d,e=new B;for(d=0;d<a.length;d++){var f=a[d];e.put(f.domNode,
	a[d]={domNode:f.domNode,fn:f.fn,children:[]})}for(d=0;d<a.length;d++)b(a[d]);return function(a){var b=[],c=[],d;for(d=0;d<a.children.length;d++)c.push(a.children[d]);a=c.length;var e=0,f=[];for(d=0;d<c.length;d++){var x=c[d];0>=a&&(a=e,e=0,b.push(f),f=[]);f.push(x.fn);x.children.forEach(function(a){e++;c.push(a)});a--}f.length&&b.push(f);return b}(c)}var I=[],q=U(a);return function(u,B,w){function x(a){a=a.hasAttribute("ng-animate-ref")?[a]:a.querySelectorAll("[ng-animate-ref]");var b=[];r(a,function(a){var c=
	a.getAttribute("ng-animate-ref");c&&c.length&&b.push(a)});return b}function R(a){var b=[],c={};r(a,function(a,g){var d=D(a.element),e=0<=["enter","move"].indexOf(a.event),d=a.structural?x(d):[];if(d.length){var k=e?"to":"from";r(d,function(a){var b=a.getAttribute("ng-animate-ref");c[b]=c[b]||{};c[b][k]={animationID:g,element:G(a)}})}else b.push(a)});var d={},e={};r(c,function(c,h){var k=c.from,f=c.to;if(k&&f){var p=a[k.animationID],y=a[f.animationID],l=k.animationID.toString();if(!e[l]){var x=e[l]=
	{structural:!0,beforeStart:function(){p.beforeStart();y.beforeStart()},close:function(){p.close();y.close()},classes:J(p.classes,y.classes),from:p,to:y,anchors:[]};x.classes.length?b.push(x):(b.push(p),b.push(y))}e[l].anchors.push({out:k.element,"in":f.element})}else k=k?k.animationID:f.animationID,f=k.toString(),d[f]||(d[f]=!0,b.push(a[k]))});return b}function J(a,b){a=a.split(" ");b=b.split(" ");for(var c=[],d=0;d<a.length;d++){var k=a[d];if("ng-"!==k.substring(0,3))for(var e=0;e<b.length;e++)if(k===
	b[e]){c.push(k);break}}return c.join(" ")}function k(a){for(var b=c.length-1;0<=b;b--){var d=c[b];if(f.has(d)&&(d=f.get(d)(a)))return d}}function p(a,c){a.from&&a.to?(b(a.from.element).setHost(c),b(a.to.element).setHost(c)):b(a.element).setHost(c)}function L(){var a=b(u);!a||"leave"===B&&w.$$domOperationFired||a.end()}function O(b){u.off("$destroy",L);u.removeData("$$animationRunner");q(u,w);ga(u,w);w.domOperation();y&&a.removeClass(u,y);u.removeClass("ng-animate");K.complete(!b)}w=pa(w);var l=0<=
	["enter","move","leave"].indexOf(B),K=new z({end:function(){O()},cancel:function(){O(!0)}});if(!c.length)return O(),K;u.data("$$animationRunner",K);var M=Ba(u.attr("class"),Ba(w.addClass,w.removeClass)),y=w.tempClasses;y&&(M+=" "+y,w.tempClasses=null);var H;l&&(H="ng-"+B+"-prepare",a.addClass(u,H));I.push({element:u,classes:M,event:B,structural:l,options:w,beforeStart:function(){u.addClass("ng-animate");y&&a.addClass(u,y);H&&(a.removeClass(u,H),H=null)},close:O});u.on("$destroy",L);if(1<I.length)return K;
	e.$$postDigest(function(){var a=[];r(I,function(c){b(c.element)?a.push(c):c.close()});I.length=0;var c=R(a),d=[];r(c,function(a){d.push({domNode:D(a.from?a.from.element:a.element),fn:function(){a.beforeStart();var c,d=a.close;if(b(a.anchors?a.from.element||a.to.element:a.element)){var g=k(a);g&&(c=g.start)}c?(c=c(),c.done(function(a){d(!a)}),p(a,c)):d()}})});s(v(d))});return K}}]}]).provider("$animateCss",["$animateProvider",function(a){var b=Ha(),c=Ha();this.$get=["$window","$$jqLite","$$AnimateRunner",
	"$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue",function(a,e,f,z,B,s,v,I){function q(a,b){var c=a.parentNode;return(c.$$ngAnimateParentKey||(c.$$ngAnimateParentKey=++R))+"-"+a.getAttribute("class")+"-"+b}function u(k,f,x,s){var l;0<b.count(x)&&(l=c.get(x),l||(f=X(f,"-stagger"),e.addClass(k,f),l=Fa(a,k,s),l.animationDuration=Math.max(l.animationDuration,0),l.transitionDuration=Math.max(l.transitionDuration,0),e.removeClass(k,f),c.put(x,l)));return l||{}}function sa(a){J.push(a);
	v.waitUntilQuiet(function(){b.flush();c.flush();for(var a=B(),d=0;d<J.length;d++)J[d](a);J.length=0})}function w(c,e,f){e=b.get(f);e||(e=Fa(a,c,Ua),"infinite"===e.animationIterationCount&&(e.animationIterationCount=1));b.put(f,e);c=e;f=c.animationDelay;e=c.transitionDelay;c.maxDelay=f&&e?Math.max(f,e):f||e;c.maxDuration=Math.max(c.animationDuration*c.animationIterationCount,c.transitionDuration);return c}var x=U(e),R=0,J=[];return function(a,c){function d(){l()}function v(){l(!0)}function l(b){if(!(R||
	G&&N)){R=!0;N=!1;g.$$skipPreparationClasses||e.removeClass(a,fa);e.removeClass(a,da);ta(h,!1);qa(h,!1);r(A,function(a){h.style[a[0]]=""});x(a,g);ga(a,g);Object.keys(J).length&&r(J,function(a,b){a?h.style.setProperty(b,a):h.style.removeProperty(b)});if(g.onDone)g.onDone();ea&&ea.length&&a.off(ea.join(" "),y);var c=a.data("$$animateCss");c&&(z.cancel(c[0].timer),a.removeData("$$animateCss"));C&&C.complete(!b)}}function K(a){n.blockTransition&&qa(h,a);n.blockKeyframeAnimation&&ta(h,!!a)}function M(){C=
	new f({end:d,cancel:v});sa(Q);l();return{$$willAnimate:!1,start:function(){return C},end:d}}function y(a){a.stopPropagation();var b=a.originalEvent||a;a=b.$manualTimeStamp||Date.now();b=parseFloat(b.elapsedTime.toFixed(3));Math.max(a-V,0)>=S&&b>=m&&(G=!0,l())}function H(){function b(){if(!R){K(!1);r(A,function(a){h.style[a[0]]=a[1]});x(a,g);e.addClass(a,da);if(n.recalculateTimingStyles){na=h.className+" "+fa;ja=q(h,na);E=w(h,na,ja);$=E.maxDelay;ha=Math.max($,0);m=E.maxDuration;if(0===m){l();return}n.hasTransitions=
	0<E.transitionDuration;n.hasAnimations=0<E.animationDuration}n.applyAnimationDelay&&($="boolean"!==typeof g.delay&&ua(g.delay)?parseFloat(g.delay):$,ha=Math.max($,0),E.animationDelay=$,aa=[ra,$+"s"],A.push(aa),h.style[aa[0]]=aa[1]);S=1E3*ha;U=1E3*m;if(g.easing){var d,f=g.easing;n.hasTransitions&&(d=T+"TimingFunction",A.push([d,f]),h.style[d]=f);n.hasAnimations&&(d=Z+"TimingFunction",A.push([d,f]),h.style[d]=f)}E.transitionDuration&&ea.push(xa);E.animationDuration&&ea.push(ya);V=Date.now();var H=S+
	1.5*U;d=V+H;var f=a.data("$$animateCss")||[],s=!0;if(f.length){var p=f[0];(s=d>p.expectedEndTime)?z.cancel(p.timer):f.push(l)}s&&(H=z(c,H,!1),f[0]={timer:H,expectedEndTime:d},f.push(l),a.data("$$animateCss",f));if(ea.length)a.on(ea.join(" "),y);g.to&&(g.cleanupStyles&&Ia(J,h,Object.keys(g.to)),Da(a,g))}}function c(){var b=a.data("$$animateCss");if(b){for(var d=1;d<b.length;d++)b[d]();a.removeData("$$animateCss")}}if(!R)if(h.parentNode){var d=function(a){if(G)N&&a&&(N=!1,l());else if(N=!a,E.animationDuration)if(a=
	ta(h,N),N)A.push(a);else{var b=A,c=b.indexOf(a);0<=a&&b.splice(c,1)}},f=0<ca&&(E.transitionDuration&&0===W.transitionDuration||E.animationDuration&&0===W.animationDuration)&&Math.max(W.animationDelay,W.transitionDelay);f?z(b,Math.floor(f*ca*1E3),!1):b();P.resume=function(){d(!0)};P.pause=function(){d(!1)}}else l()}var g=c||{};g.$$prepared||(g=pa(Ja(g)));var J={},h=D(a);if(!h||!h.parentNode||!I.enabled())return M();var A=[],B=a.attr("class"),F=Na(g),R,N,G,C,P,ha,S,m,U,V,ea=[];if(0===g.duration||!s.animations&&
	!s.transitions)return M();var ka=g.event&&ba(g.event)?g.event.join(" "):g.event,Y="",t="";ka&&g.structural?Y=X(ka,"ng-",!0):ka&&(Y=ka);g.addClass&&(t+=X(g.addClass,"-add"));g.removeClass&&(t.length&&(t+=" "),t+=X(g.removeClass,"-remove"));g.applyClassesEarly&&t.length&&x(a,g);var fa=[Y,t].join(" ").trim(),na=B+" "+fa,da=X(fa,"-active"),B=F.to&&0<Object.keys(F.to).length;if(!(0<(g.keyframeStyle||"").length||B||fa))return M();var ja,W;0<g.stagger?(F=parseFloat(g.stagger),W={transitionDelay:F,animationDelay:F,
	transitionDuration:0,animationDuration:0}):(ja=q(h,na),W=u(h,fa,ja,Va));g.$$skipPreparationClasses||e.addClass(a,fa);g.transitionStyle&&(F=[T,g.transitionStyle],la(h,F),A.push(F));0<=g.duration&&(F=0<h.style[T].length,F=Ga(g.duration,F),la(h,F),A.push(F));g.keyframeStyle&&(F=[Z,g.keyframeStyle],la(h,F),A.push(F));var ca=W?0<=g.staggerIndex?g.staggerIndex:b.count(ja):0;(ka=0===ca)&&!g.skipBlocking&&qa(h,9999);var E=w(h,na,ja),$=E.maxDelay;ha=Math.max($,0);m=E.maxDuration;var n={};n.hasTransitions=
	0<E.transitionDuration;n.hasAnimations=0<E.animationDuration;n.hasTransitionAll=n.hasTransitions&&"all"==E.transitionProperty;n.applyTransitionDuration=B&&(n.hasTransitions&&!n.hasTransitionAll||n.hasAnimations&&!n.hasTransitions);n.applyAnimationDuration=g.duration&&n.hasAnimations;n.applyTransitionDelay=ua(g.delay)&&(n.applyTransitionDuration||n.hasTransitions);n.applyAnimationDelay=ua(g.delay)&&n.hasAnimations;n.recalculateTimingStyles=0<t.length;if(n.applyTransitionDuration||n.applyAnimationDuration)m=
	g.duration?parseFloat(g.duration):m,n.applyTransitionDuration&&(n.hasTransitions=!0,E.transitionDuration=m,F=0<h.style[T+"Property"].length,A.push(Ga(m,F))),n.applyAnimationDuration&&(n.hasAnimations=!0,E.animationDuration=m,A.push([za,m+"s"]));if(0===m&&!n.recalculateTimingStyles)return M();if(null!=g.delay){var aa;"boolean"!==typeof g.delay&&(aa=parseFloat(g.delay),ha=Math.max(aa,0));n.applyTransitionDelay&&A.push([ma,aa+"s"]);n.applyAnimationDelay&&A.push([ra,aa+"s"])}null==g.duration&&0<E.transitionDuration&&
	(n.recalculateTimingStyles=n.recalculateTimingStyles||ka);S=1E3*ha;U=1E3*m;g.skipBlocking||(n.blockTransition=0<E.transitionDuration,n.blockKeyframeAnimation=0<E.animationDuration&&0<W.animationDelay&&0===W.animationDuration);g.from&&(g.cleanupStyles&&Ia(J,h,Object.keys(g.from)),Ca(a,g));n.blockTransition||n.blockKeyframeAnimation?K(m):g.skipBlocking||qa(h,!1);return{$$willAnimate:!0,end:d,start:function(){if(!R)return P={end:d,cancel:v,resume:null,pause:null},C=new f(P),sa(H),C}}}}]}]).provider("$$animateCssDriver",
	["$$animationProvider",function(a){a.drivers.push("$$animateCssDriver");this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$sniffer","$$jqLite","$document",function(a,c,d,e,f,z,B){function s(a){return a.replace(/\bng-\S+\b/g,"")}function v(a,b){P(a)&&(a=a.split(" "));P(b)&&(b=b.split(" "));return a.filter(function(a){return-1===b.indexOf(a)}).join(" ")}function I(c,e,f){function k(a){var b={},c=D(a).getBoundingClientRect();r(["width","height","top","left"],function(a){var d=c[a];
	switch(a){case "top":d+=C.scrollTop;break;case "left":d+=C.scrollLeft}b[a]=Math.floor(d)+"px"});return b}function p(){var c=s(f.attr("class")||""),d=v(c,l),c=v(l,c),d=a(z,{to:k(f),addClass:"ng-anchor-in "+d,removeClass:"ng-anchor-out "+c,delay:!0});return d.$$willAnimate?d:null}function B(){z.remove();e.removeClass("ng-animate-shim");f.removeClass("ng-animate-shim")}var z=G(D(e).cloneNode(!0)),l=s(z.attr("class")||"");e.addClass("ng-animate-shim");f.addClass("ng-animate-shim");z.addClass("ng-anchor");
	w.append(z);var K;c=function(){var c=a(z,{addClass:"ng-anchor-out",delay:!0,from:k(e)});return c.$$willAnimate?c:null}();if(!c&&(K=p(),!K))return B();var M=c||K;return{start:function(){function a(){c&&c.end()}var b,c=M.start();c.done(function(){c=null;if(!K&&(K=p()))return c=K.start(),c.done(function(){c=null;B();b.complete()}),c;B();b.complete()});return b=new d({end:a,cancel:a})}}}function q(a,b,c,e){var f=u(a,Q),s=u(b,Q),z=[];r(e,function(a){(a=I(c,a.out,a["in"]))&&z.push(a)});if(f||s||0!==z.length)return{start:function(){function a(){r(b,
	function(a){a.end()})}var b=[];f&&b.push(f.start());s&&b.push(s.start());r(z,function(a){b.push(a.start())});var c=new d({end:a,cancel:a});d.all(b,function(a){c.complete(a)});return c}}}function u(c){var d=c.element,e=c.options||{};c.structural&&(e.event=c.event,e.structural=!0,e.applyClassesEarly=!0,"leave"===c.event&&(e.onDone=e.domOperation));e.preparationClasses&&(e.event=Y(e.event,e.preparationClasses));c=a(d,e);return c.$$willAnimate?c:null}if(!f.animations&&!f.transitions)return Q;var C=B[0].body;
	c=D(e);var w=G(c.parentNode&&11===c.parentNode.nodeType||C.contains(c)?c:C);U(z);return function(a){return a.from&&a.to?q(a.from,a.to,a.classes,a.anchors):u(a)}}]}]).provider("$$animateJs",["$animateProvider",function(a){this.$get=["$injector","$$AnimateRunner","$$jqLite",function(b,c,d){function e(c){c=ba(c)?c:c.split(" ");for(var d=[],e={},f=0;f<c.length;f++){var r=c[f],q=a.$$registeredAnimations[r];q&&!e[r]&&(d.push(b.get(q)),e[r]=!0)}return d}var f=U(d);return function(a,b,d,v){function q(){v.domOperation();
	f(a,v)}function D(a,b,d,e,g){switch(d){case "animate":b=[b,e.from,e.to,g];break;case "setClass":b=[b,x,G,g];break;case "addClass":b=[b,x,g];break;case "removeClass":b=[b,G,g];break;default:b=[b,g]}b.push(e);if(a=a.apply(a,b))if(Ka(a.start)&&(a=a.start()),a instanceof c)a.done(g);else if(Ka(a))return a;return Q}function u(a,b,d,e,g){var f=[];r(e,function(e){var k=e[g];k&&f.push(function(){var e,g,f=!1,h=function(a){f||(f=!0,(g||Q)(a),e.complete(!a))};e=new c({end:function(){h()},cancel:function(){h(!0)}});
	g=D(k,a,b,d,function(a){h(!1===a)});return e})});return f}function C(a,b,d,e,g){var f=u(a,b,d,e,g);if(0===f.length){var h,k;"beforeSetClass"===g?(h=u(a,"removeClass",d,e,"beforeRemoveClass"),k=u(a,"addClass",d,e,"beforeAddClass")):"setClass"===g&&(h=u(a,"removeClass",d,e,"removeClass"),k=u(a,"addClass",d,e,"addClass"));h&&(f=f.concat(h));k&&(f=f.concat(k))}if(0!==f.length)return function(a){var b=[];f.length&&r(f,function(a){b.push(a())});b.length?c.all(b,a):a();return function(a){r(b,function(b){a?
	b.cancel():b.end()})}}}var w=!1;3===arguments.length&&va(d)&&(v=d,d=null);v=pa(v);d||(d=a.attr("class")||"",v.addClass&&(d+=" "+v.addClass),v.removeClass&&(d+=" "+v.removeClass));var x=v.addClass,G=v.removeClass,J=e(d),k,p;if(J.length){var L,O;"leave"==b?(O="leave",L="afterLeave"):(O="before"+b.charAt(0).toUpperCase()+b.substr(1),L=b);"enter"!==b&&"move"!==b&&(k=C(a,b,v,J,O));p=C(a,b,v,J,L)}if(k||p){var l;return{$$willAnimate:!0,end:function(){l?l.end():(w=!0,q(),ga(a,v),l=new c,l.complete(!0));return l},
	start:function(){function b(c){w=!0;q();ga(a,v);l.complete(c)}if(l)return l;l=new c;var d,e=[];k&&e.push(function(a){d=k(a)});e.length?e.push(function(a){q();a(!0)}):q();p&&e.push(function(a){d=p(a)});l.setHost({end:function(){w||((d||Q)(void 0),b(void 0))},cancel:function(){w||((d||Q)(!0),b(!0))}});c.chain(e,b);return l}}}}}]}]).provider("$$animateJsDriver",["$$animationProvider",function(a){a.drivers.push("$$animateJsDriver");this.$get=["$$animateJs","$$AnimateRunner",function(a,c){function d(c){return a(c.element,
	c.event,c.classes,c.options)}return function(a){if(a.from&&a.to){var b=d(a.from),q=d(a.to);if(b||q)return{start:function(){function a(){return function(){r(d,function(a){a.end()})}}var d=[];b&&d.push(b.start());q&&d.push(q.start());c.all(d,function(a){e.complete(a)});var e=new c({end:a(),cancel:a()});return e}}}else return d(a)}}]}])})(window,window.angular);
	//# sourceMappingURL=angular-animate.min.js.map


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	/*
	 AngularJS v1.5.5
	 (c) 2010-2016 Google, Inc. http://angularjs.org
	 License: MIT
	*/
	(function(n,e){'use strict';function B(a){var c=[];w(c,e.noop).chars(a);return c.join("")}function h(a,c){var b={},d=a.split(","),l;for(l=0;l<d.length;l++)b[c?e.lowercase(d[l]):d[l]]=!0;return b}function C(a,c){null===a||void 0===a?a="":"string"!==typeof a&&(a=""+a);g.innerHTML=a;var b=5;do{if(0===b)throw x("uinput");b--;n.document.documentMode&&t(g);a=g.innerHTML;g.innerHTML=a}while(a!==g.innerHTML);for(b=g.firstChild;b;){switch(b.nodeType){case 1:c.start(b.nodeName.toLowerCase(),D(b.attributes));
	break;case 3:c.chars(b.textContent)}var d;if(!(d=b.firstChild)&&(1==b.nodeType&&c.end(b.nodeName.toLowerCase()),d=b.nextSibling,!d))for(;null==d;){b=b.parentNode;if(b===g)break;d=b.nextSibling;1==b.nodeType&&c.end(b.nodeName.toLowerCase())}b=d}for(;b=g.firstChild;)g.removeChild(b)}function D(a){for(var c={},b=0,d=a.length;b<d;b++){var l=a[b];c[l.name]=l.value}return c}function y(a){return a.replace(/&/g,"&amp;").replace(E,function(a){var b=a.charCodeAt(0);a=a.charCodeAt(1);return"&#"+(1024*(b-55296)+
	(a-56320)+65536)+";"}).replace(F,function(a){return"&#"+a.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function w(a,c){var b=!1,d=e.bind(a,a.push);return{start:function(a,f){a=e.lowercase(a);!b&&G[a]&&(b=a);b||!0!==u[a]||(d("<"),d(a),e.forEach(f,function(b,f){var g=e.lowercase(f),h="img"===a&&"src"===g||"background"===g;!0!==H[g]||!0===z[g]&&!c(b,h)||(d(" "),d(f),d('="'),d(y(b)),d('"'))}),d(">"))},end:function(a){a=e.lowercase(a);b||!0!==u[a]||!0===A[a]||(d("</"),d(a),d(">"));a==
	b&&(b=!1)},chars:function(a){b||d(y(a))}}}function t(a){if(a.nodeType===n.Node.ELEMENT_NODE)for(var c=a.attributes,b=0,d=c.length;b<d;b++){var e=c[b],f=e.name.toLowerCase();if("xmlns:ns1"===f||0===f.indexOf("ns1:"))a.removeAttributeNode(e),b--,d--}(c=a.firstChild)&&t(c);(c=a.nextSibling)&&t(c)}var x=e.$$minErr("$sanitize"),E=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,F=/([^\#-~ |!])/g,A=h("area,br,col,hr,img,wbr"),q=h("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),k=h("rp,rt"),v=e.extend({},k,q),q=e.extend({},
	q,h("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul")),k=e.extend({},k,h("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),I=h("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan"),
	G=h("script,style"),u=e.extend({},A,q,k,v),z=h("background,cite,href,longdesc,src,xlink:href"),v=h("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),k=h("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",
	!0),H=e.extend({},z,k,v),g;(function(a){if(a.document&&a.document.implementation)a=a.document.implementation.createHTMLDocument("inert");else throw x("noinert");var c=(a.documentElement||a.getDocumentElement()).getElementsByTagName("body");1===c.length?g=c[0]:(c=a.createElement("html"),g=a.createElement("body"),c.appendChild(g),a.appendChild(c))})(n);e.module("ngSanitize",[]).provider("$sanitize",function(){var a=!1;this.$get=["$$sanitizeUri",function(c){a&&e.extend(u,I);return function(a){var d=
	[];C(a,w(d,function(a,b){return!/^unsafe:/.test(c(a,b))}));return d.join("")}}];this.enableSvg=function(c){return e.isDefined(c)?(a=c,this):a}});e.module("ngSanitize").filter("linky",["$sanitize",function(a){var c=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,b=/^mailto:/i,d=e.$$minErr("linky"),g=e.isString;return function(f,h,m){function k(a){a&&p.push(B(a))}function q(a,b){var c;p.push("<a ");e.isFunction(m)&&(m=m(a));if(e.isObject(m))for(c in m)p.push(c+
	'="'+m[c]+'" ');else m={};!e.isDefined(h)||"target"in m||p.push('target="',h,'" ');p.push('href="',a.replace(/"/g,"&quot;"),'">');k(b);p.push("</a>")}if(null==f||""===f)return f;if(!g(f))throw d("notstring",f);for(var r=f,p=[],s,n;f=r.match(c);)s=f[0],f[2]||f[4]||(s=(f[3]?"http://":"mailto:")+s),n=f.index,k(r.substr(0,n)),q(s,f[0].replace(b,"")),r=r.substring(n+f[0].length);k(r);return a(p.join(""))}}])})(window,window.angular);
	//# sourceMappingURL=angular-sanitize.min.js.map


/***/ }),
/* 10 */
/***/ (function(module, exports) {

	;(function($, window, document, undefined) {

	    var pluginName = "metisMenu",
	        defaults = {
	            toggle: true,
	            doubleTapToGo: false
	        };

	    function Plugin(element, options) {
	        this.element = $(element);
	        this.settings = $.extend({}, defaults, options);
	        this._defaults = defaults;
	        this._name = pluginName;
	        this.init();
	    }

	    Plugin.prototype = {
	        init: function() {

	            var $this = this.element,
	                $toggle = this.settings.toggle,
	                obj = this;

	            if (this.isIE() <= 9) {
	                $this.find("li.active").has("ul").children("ul").collapse("show");
	                $this.find("li").not(".active").has("ul").children("ul").collapse("hide");
	            } else {
	                $this.find("li.active").has("ul").children("ul").addClass("collapse in");
	                $this.find("li").not(".active").has("ul").children("ul").addClass("collapse");
	            }

	            //add the "doubleTapToGo" class to active items if needed
	            if (obj.settings.doubleTapToGo) {
	                $this.find("li.active").has("ul").children("a").addClass("doubleTapToGo");
	            }

	            $this.find("li").has("ul").children("a").on("click" + "." + pluginName, function(e) {
	                e.preventDefault();

	                //Do we need to enable the double tap
	                if (obj.settings.doubleTapToGo) {

	                    //if we hit a second time on the link and the href is valid, navigate to that url
	                    if (obj.doubleTapToGo($(this)) && $(this).attr("href") !== "#" && $(this).attr("href") !== "") {
	                        e.stopPropagation();
	                        document.location = $(this).attr("href");
	                        return;
	                    }
	                }

	                $(this).parent("li").toggleClass("active").children("ul").collapse("toggle");

	                if ($toggle) {
	                    $(this).parent("li").siblings().removeClass("active").children("ul.in").collapse("hide");
	                    $(this).find('.fa-angle-left').toggleClass('s-rotate');
	                }

	            });
	        },

	        isIE: function() { //https://gist.github.com/padolsey/527683
	            var undef,
	                v = 3,
	                div = document.createElement("div"),
	                all = div.getElementsByTagName("i");

	            while (
	                div.innerHTML = "<!--[if gt IE " + (++v) + "]><i></i><![endif]-->",
	                all[0]
	            ) {
	                return v > 4 ? v : undef;
	            }
	        },

	        //Enable the link on the second click.
	        doubleTapToGo: function(elem) {
	            var $this = this.element;

	            //if the class "doubleTapToGo" exists, remove it and return
	            if (elem.hasClass("doubleTapToGo")) {
	                elem.removeClass("doubleTapToGo");
	                return true;
	            }

	            //does not exists, add a new class and return false
	            if (elem.parent().children("ul").length) {
	                 //first remove all other class
	                $this.find(".doubleTapToGo").removeClass("doubleTapToGo");
	                //add the class on the current element
	                elem.addClass("doubleTapToGo");
	                return false;
	            }
	        },

	        remove: function() {
	            this.element.off("." + pluginName);
	            this.element.removeData(pluginName);
	        }

	    };

	    $.fn[pluginName] = function(options) {
	        this.each(function () {
	            var el = $(this);
	            if (el.data(pluginName)) {
	                el.data(pluginName).remove();
	            }
	            el.data(pluginName, new Plugin(this, options));
	        });
	        return this;
	    };

	})(jQuery, window, document);


/***/ }),
/* 11 */
/***/ (function(module, exports) {

	(function() {
	    'use strict'; 

	    angular.module('angularjs-datetime-picker', []);

	    var getTimezoneOffset = function(date) {
	        (typeof date == 'string')  && (date = new Date(date));
	        var jan = new Date(date.getFullYear(), 0, 1);
	        var jul = new Date(date.getFullYear(), 6, 1);
	        var stdTimezoneOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
	        var isDST = date.getTimezoneOffset() < stdTimezoneOffset;
	        var offset = isDST ? stdTimezoneOffset - 60 : stdTimezoneOffset;
	        var diff = offset >=0 ? '-' : '+';
	        return diff +
	            ("0"+ (offset / 60)).slice(-2) + ':' +
	            ("0"+ (offset % 60)).slice(-2);
	    };

	    var DatetimePicker = function($compile, $document, $controller){
	        var datetimePickerCtrl = $controller('DatetimePickerCtrl'); //directive controller
	        return {
	            open: function(options) {
	                datetimePickerCtrl.openDatetimePicker(options);
	            },
	            close: function() {
	                datetimePickerCtrl.closeDatetimePicker();
	            }
	        };
	    };
	    DatetimePicker.$inject = ['$compile', '$document', '$controller'];
	    angular.module('angularjs-datetime-picker').factory('DatetimePicker', DatetimePicker);

	    var DatetimePickerCtrl = function($compile, $document) {
	        var datetimePickerEl;
	        var _this = this;
	        var removeEl = function(el) {
	            el && el.remove();
	            $document[0].body.removeEventListener('click', _this.closeDatetimePicker);
	        };

	        this.openDatetimePicker = function(options) {
	            this.closeDatetimePicker();
	            var div = angular.element('<div datetime-picker-popup ng-cloak></div>');
	            options.dateFormat && div.attr('date-format', options.dateFormat);
	            options.ngModel  && div.attr('ng-model', options.ngModel);
	            options.year     && div.attr('year', parseInt(options.year));
	            options.month    && div.attr('month', parseInt(options.month));
	            options.day      && div.attr('day', parseInt(options.day));
	            options.hour     && div.attr('hour', parseInt(options.hour));
	            options.minute   && div.attr('minute', parseInt(options.minute));
	            if (options.dateOnly) {
	                div.attr('date-only', 'true');
	            }
	            if (options.timeOnly) {

	                div.attr('time-only', 'true');
	            }
	            if (options.closeOnSelect === 'false') {
	                div.attr('close-on-select', 'false');
	            }

	            var triggerEl = options.triggerEl;
	            options.scope = options.scope || angular.element(triggerEl).scope();
	            datetimePickerEl = $compile(div)(options.scope)[0];
	            datetimePickerEl.triggerEl = options.triggerEl;

	            $document[0].body.appendChild(datetimePickerEl);

	            //show datetimePicker below triggerEl
	            var bcr = triggerEl.getBoundingClientRect();


	            options.scope.$apply();

	            var datePickerElBcr = datetimePickerEl.getBoundingClientRect();

	            datetimePickerEl.style.position='absolute';
	            if(bcr.width > datePickerElBcr.width){
	                datetimePickerEl.style.left= (bcr.left + bcr.width - datePickerElBcr.width + window.scrollX) + 'px';
	            } else {
	                datetimePickerEl.style.left= (bcr.left + window.scrollX) + 'px';
	            }

	            if (bcr.top < 300 || window.innerHeight - bcr.bottom > 300) {
	                datetimePickerEl.style.top = (bcr.bottom + window.scrollY) + 'px';
	            } else {
	                datetimePickerEl.style.top = (bcr.top - datePickerElBcr.height + window.scrollY) + 'px';
	            }

	            $document[0].body.addEventListener('click', this.closeDatetimePicker);
	        };

	        this.closeDatetimePicker = function(evt) {
	            var target = evt && evt.target;
	            var popupEl = $document[0].querySelector('div[datetime-picker-popup]');
	            if (evt && target) {
	                if (target.hasAttribute('datetime-picker')) {  // element with datetimePicker behaviour
	                    // do nothing
	                } else if (popupEl && popupEl.contains(target)) { // datetimePicker itself
	                    // do nothing
	                } else {
	                    removeEl(popupEl);
	                }
	            } else {
	                removeEl(popupEl);
	            }
	        }
	    };
	    DatetimePickerCtrl.$inject = ['$compile', '$document'];
	    angular.module('angularjs-datetime-picker').controller('DatetimePickerCtrl', DatetimePickerCtrl);

	    var tmpl = [
	        '<div class="angularjs-datetime-picker">' ,
	        '  <div class="adp-month">',
	        '    <button type="button" class="adp-prev" ng-click="addMonth(-1)">&laquo;</button>',
	        '    <span title="{{months[mv.month].fullName}}">{{months[mv.month].shortName}}</span> {{mv.year}}',
	        '    <button type="button" class="adp-next" ng-click="addMonth(1)">&raquo;</button>',
	        '  </div>',
	        '  <div class="adp-days" ng-click="setDate($event)">',
	        '    <div class="adp-day-of-week" ng-repeat="dayOfWeek in ::daysOfWeek" title="{{dayOfWeek.fullName}}">{{::dayOfWeek.firstLetter}}</div>',
	        '    <div class="adp-day" ng-show="mv.leadingDays.length < 7" ng-repeat="day in mv.leadingDays">{{::day}}</div>',
	        '    <div class="adp-day selectable" ng-repeat="day in mv.days" ',
	        '      today="{{today}}" d2="{{mv.year + \'-\' + (mv.month + 1) + \'-\' + day}}"',
	        '      ng-class="{',
	        '        selected: (day == selectedDay),',
	        '        today: (today == (mv.year + \'-\' + (mv.month + 1) + \'-\' + day)),',
	        '        weekend: (mv.leadingDays.length + day)%7 == 1 || (mv.leadingDays.length + day)%7 == 0',
	        '      }">',
	        '      {{::day}}',
	        '    </div>',
	        '    <div class="adp-day" ng-show="mv.trailingDays.length < 7" ng-repeat="day in mv.trailingDays">{{::day}}</div>',
	        '  </div>',
	        '  <div class="adp-days" id="adp-time"> ',
	        '    <label class="timeLabel">Time:</label> <span class="timeValue">{{("0"+inputHour).slice(-2)}} : {{("0"+inputMinute).slice(-2)}}</span><br/>',
	        '    <label class="hourLabel">Hour:</label> <input class="hourInput" type="range" min="0" max="23" ng-model="inputHour" ng-change="updateNgModel()" />',
	        '    <label class="minutesLabel">Min:</label> <input class="minutesInput" type="range" min="0" max="59" ng-model="inputMinute"  ng-change="updateNgModel()"/> ',
	        '  </div> ',
	        '</div>'].join("\n");

	    var datetimePickerPopup = function($locale, dateFilter){
	        var days, months, daysOfWeek, firstDayOfWeek;

	        var initVars = function() {
	            days =[], months=[]; daysOfWeek=[], firstDayOfWeek=0;
	            for (var i = 1; i <= 31; i++) {
	                days.push(i);
	            }

	            for (var i = 0; i < 12; i++) { //jshint ignore:line
	                months.push({
	                    fullName: $locale.DATETIME_FORMATS.MONTH[i],
	                    shortName: $locale.DATETIME_FORMATS.SHORTMONTH[i]
	                });
	            }

	            for (var i = 0; i < 7; i++) { //jshint ignore:line
	                var day = $locale.DATETIME_FORMATS.DAY[(i + firstDayOfWeek) % 7];

	                daysOfWeek.push({
	                    fullName: day,
	                    firstLetter: day.substr(0, 1)
	                });
	            }
	            firstDayOfWeek = 0;
	        };

	        var getMonthView = function(year, month) {
	            if (month>11) {
	                year++;
	            } else if (month < 0) {
	                year--;
	            }
	            month = (month + 12) % 12;
	            var firstDayOfMonth = new Date(year, month, 1),
	                lastDayOfMonth = new Date(year, month + 1, 0),
	                lastDayOfPreviousMonth = new Date(year, month, 0),
	                daysInMonth = lastDayOfMonth.getDate(),
	                daysInLastMonth = lastDayOfPreviousMonth.getDate(),
	                dayOfWeek = firstDayOfMonth.getDay(),
	                leadingDays = (dayOfWeek - firstDayOfWeek + 7) % 7 || 7, // Ensure there are always leading days to give context
	                trailingDays = days.slice(0, 6 * 7 - (leadingDays + daysInMonth));
	            if (trailingDays.length > 7) {
	                trailingDays = trailingDays.slice(0, trailingDays.length-7);
	            }

	            return {
	                year: year,
	                month: month,
	                days: days.slice(0, daysInMonth),
	                leadingDays: days.slice(- leadingDays - (31 - daysInLastMonth), daysInLastMonth),
	                trailingDays: trailingDays
	            };
	        };

	        var linkFunc = function(scope, element, attrs, ctrl) { //jshint ignore:line
	            initVars(); //initialize days, months, daysOfWeek, and firstDayOfWeek;
	            var dateFormat = attrs.dateFormat || 'short';
	            scope.months = months;
	            scope.daysOfWeek = daysOfWeek;
	            scope.inputHour;
	            scope.inputMinute;

	            if (scope.dateOnly === true){
	                element[0].querySelector('#adp-time').style.display = 'none';
	            }

	            if (scope.timeOnly === true){
	                element[0].querySelector('.adp-month').style.display = 'none';
	                element[0].querySelector('.adp-days').style.display = 'none';
	            }

	            scope.$applyAsync( function() {
	                ctrl.triggerEl = angular.element(element[0].triggerEl);
	                if (attrs.ngModel) { // need to parse date string
	                    var dateStr = ''+ctrl.triggerEl.scope().$eval(attrs.ngModel);
	                    if (dateStr) {
	                        if (!dateStr.match(/[0-9]{2}:/)) {  // if no time is given, add 00:00:00 at the end
	                            dateStr += " 00:00:00";
	                        }
	                        dateStr = dateStr.replace(/([0-9]{2}-[0-9]{2})-([0-9]{4})/,'$2-$1');      //mm-dd-yyyy to yyyy-mm-dd
	                        dateStr = dateStr.replace(/([\/-][0-9]{2,4})\ ([0-9]{2}\:[0-9]{2}\:)/,'$1T$2'); //reformat for FF
	                        dateStr = dateStr.replace(/EDT|EST|CDT|CST|MDT|PDT|PST|UT|GMT/g,''); //remove timezone
	                        dateStr = dateStr.replace(/\s*\(\)\s*/,'');                          //remove timezone
	                        dateStr = dateStr.replace(/[\-\+][0-9]{2}:?[0-9]{2}$/,'');           //remove timezone
	                        dateStr += getTimezoneOffset(dateStr);
	                        var d = new Date(dateStr);
	                        scope.selectedDate = new Date(
	                            d.getFullYear(),
	                            d.getMonth(),
	                            d.getDate(),
	                            d.getHours(),
	                            d.getMinutes(),
	                            d.getSeconds()
	                        );
	                    }
	                }

	                if (!scope.selectedDate || isNaN(scope.selectedDate.getTime())) { // no predefined date
	                    var today = new Date();
	                    var year = scope.year || today.getFullYear();
	                    var month = scope.month ? (scope.month-1) : today.getMonth();
	                    var day = scope.day || today.getDate();
	                    var hour = scope.hour || today.getHours();
	                    var minute = scope.minute || today.getMinutes();
	                    scope.selectedDate = new Date(year, month, day, hour, minute, 0);
	                }
	                scope.inputHour   = scope.selectedDate.getHours();
	                scope.inputMinute = scope.selectedDate.getMinutes();

	                // Default to current year and month
	                scope.mv = getMonthView(scope.selectedDate.getFullYear(), scope.selectedDate.getMonth());
	                scope.today = dateFilter(new Date(), 'yyyy-M-d');
	                if (scope.mv.year == scope.selectedDate.getFullYear() && scope.mv.month == scope.selectedDate.getMonth()) {
	                    scope.selectedDay = scope.selectedDate.getDate();
	                } else {
	                    scope.selectedDay = null;
	                }
	            });

	            scope.addMonth = function (amount) {
	                scope.mv = getMonthView(scope.mv.year, scope.mv.month + amount);
	            };

	            scope.setDate = function (evt) {
	                var target = angular.element(evt.target)[0];
	                if (target.className.indexOf('selectable') !== -1) {
	                    scope.updateNgModel(parseInt(target.innerHTML));
	                    if (scope.closeOnSelect !== false) {
	                        ctrl.closeDatetimePicker();
	                    }
	                }
	            };

	            scope.updateNgModel = function(day) {
	                day = day ? day : scope.selectedDate.getDate();
	                scope.selectedDate = new Date(
	                    scope.mv.year, scope.mv.month, day, scope.inputHour, scope.inputMinute, 0
	                );
	                scope.selectedDay = scope.selectedDate.getDate();
	                if (attrs.ngModel) {
	                    var elScope = ctrl.triggerEl.scope(), dateValue;
	                    if (elScope.$eval(attrs.ngModel) && elScope.$eval(attrs.ngModel).constructor.name === 'Date') {
	                        dateValue = new Date(dateFilter(scope.selectedDate, dateFormat));
	                    } else {
	                        dateValue = dateFilter(scope.selectedDate, dateFormat);
	                    }
	                    elScope.$eval(attrs.ngModel + '= date', {date: dateValue});
	                }
	            };

	            scope.$on('$destroy', ctrl.closeDatetimePicker);
	        };

	        return {
	            restrict: 'A',
	            template: tmpl,
	            controller: 'DatetimePickerCtrl',
	            replace: true,
	            scope: {
	                year: '=',
	                month: '=',
	                day: '=',
	                hour: '=',
	                minute: '=',
	                dateOnly: '=',
	                timeOnly: '=',
	                closeOnSelect: '='
	            },
	            link: linkFunc
	        };
	    };
	    datetimePickerPopup.$inject = ['$locale', 'dateFilter'];
	    angular.module('angularjs-datetime-picker').directive('datetimePickerPopup', datetimePickerPopup);

	    var datetimePicker  = function($parse, DatetimePicker) {
	        return {
	            // An ngModel is required to get the controller argument
	            require: 'ngModel',
	            link: function(scope, element, attrs, ctrl) {
	                // Attach validation watcher
	                scope.$watch(attrs.ngModel, function(value) {
	                    if( !value || value == '' ){
	                        return;
	                    }
	                    // The value has already been cleaned by the above code
	                    var date = new Date(value);
	                    ctrl.$setValidity('date', !date? false : true);
	                    var now = new Date();
	                    if( attrs.hasOwnProperty('futureOnly') ){
	                        ctrl.$setValidity('future-only', date < now? false : true);
	                    }
	                });

	                element[0].addEventListener('click', function() {
	                    DatetimePicker.open({
	                        triggerEl: element[0],
	                        dateFormat: attrs.dateFormat,
	                        ngModel: attrs.ngModel,
	                        year: attrs.year,
	                        month: attrs.month,
	                        day: attrs.day,
	                        hour: attrs.hour,
	                        minute: attrs.minute,
	                        dateOnly: attrs.dateOnly,
	                        timeOnly: attrs.timeOnly,
	                        futureOnly: attrs.futureOnly,
	                        closeOnSelect: attrs.closeOnSelect
	                    });
	                });
	            }
	        };
	    };
	    datetimePicker.$inject=['$parse', 'DatetimePicker'];
	    angular.module('angularjs-datetime-picker').directive('datetimePicker', datetimePicker);

	})();

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	/*
	 * jQuery timepicker addon
	 * By: Trent Richardson [http://trentrichardson.com]
	 * Version 1.3.1
	 * Last Modified: 07/07/2013
	 *
	 * Copyright 2013 Trent Richardson
	 * You may use this project under MIT or GPL licenses.
	 * http://trentrichardson.com/Impromptu/GPL-LICENSE.txt
	 * http://trentrichardson.com/Impromptu/MIT-LICENSE.txt
	 */

	/*jslint evil: true, white: false, undef: false, nomen: false */

	(function($) {

		/*
		* Lets not redefine timepicker, Prevent "Uncaught RangeError: Maximum call stack size exceeded"
		*/
		$.ui.timepicker = $.ui.timepicker || {};
		if ($.ui.timepicker.version) {
			return;
		}

		/*
		* Extend jQueryUI, get it started with our version number
		*/
		$.extend($.ui, {
			timepicker: {
				version: "1.3.1"
			}
		});

		/* 
		* Timepicker manager.
		* Use the singleton instance of this class, $.timepicker, to interact with the time picker.
		* Settings for (groups of) time pickers are maintained in an instance object,
		* allowing multiple different settings on the same page.
		*/
		var Timepicker = function() {
			this.regional = []; // Available regional settings, indexed by language code
			this.regional[''] = { // Default regional settings
				currentText: 'Now',
				closeText: 'Done',
				amNames: ['AM', 'A'],
				pmNames: ['PM', 'P'],
				timeFormat: 'HH:mm',
				timeSuffix: '',
				timeOnlyTitle: 'Choose Time',
				timeText: 'Time',
				hourText: 'Hour',
				minuteText: 'Minute',
				secondText: 'Second',
				millisecText: 'Millisecond',
				microsecText: 'Microsecond',
				timezoneText: 'Time Zone',
				isRTL: false
			};
			this._defaults = { // Global defaults for all the datetime picker instances
				showButtonPanel: true,
				timeOnly: false,
				showHour: null,
				showMinute: null,
				showSecond: null,
				showMillisec: null,
				showMicrosec: null,
				showTimezone: null,
				showTime: true,
				stepHour: 1,
				stepMinute: 1,
				stepSecond: 1,
				stepMillisec: 1,
				stepMicrosec: 1,
				hour: 0,
				minute: 0,
				second: 0,
				millisec: 0,
				microsec: 0,
				timezone: null,
				hourMin: 0,
				minuteMin: 0,
				secondMin: 0,
				millisecMin: 0,
				microsecMin: 0,
				hourMax: 23,
				minuteMax: 59,
				secondMax: 59,
				millisecMax: 999,
				microsecMax: 999,
				minDateTime: null,
				maxDateTime: null,
				onSelect: null,
				hourGrid: 0,
				minuteGrid: 0,
				secondGrid: 0,
				millisecGrid: 0,
				microsecGrid: 0,
				alwaysSetTime: true,
				separator: ' ',
				altFieldTimeOnly: true,
				altTimeFormat: null,
				altSeparator: null,
				altTimeSuffix: null,
				pickerTimeFormat: null,
				pickerTimeSuffix: null,
				showTimepicker: true,
				timezoneList: null,
				addSliderAccess: false,
				sliderAccessArgs: null,
				controlType: 'slider',
				defaultValue: null,
				parse: 'strict'
			};
			$.extend(this._defaults, this.regional['']);
		};

		$.extend(Timepicker.prototype, {
			$input: null,
			$altInput: null,
			$timeObj: null,
			inst: null,
			hour_slider: null,
			minute_slider: null,
			second_slider: null,
			millisec_slider: null,
			microsec_slider: null,
			timezone_select: null,
			hour: 0,
			minute: 0,
			second: 0,
			millisec: 0,
			microsec: 0,
			timezone: null,
			hourMinOriginal: null,
			minuteMinOriginal: null,
			secondMinOriginal: null,
			millisecMinOriginal: null,
			microsecMinOriginal: null,
			hourMaxOriginal: null,
			minuteMaxOriginal: null,
			secondMaxOriginal: null,
			millisecMaxOriginal: null,
			microsecMaxOriginal: null,
			ampm: '',
			formattedDate: '',
			formattedTime: '',
			formattedDateTime: '',
			timezoneList: null,
			units: ['hour','minute','second','millisec', 'microsec'],
			support: {},
			control: null,

			/* 
			* Override the default settings for all instances of the time picker.
			* @param  settings  object - the new settings to use as defaults (anonymous object)
			* @return the manager object
			*/
			setDefaults: function(settings) {
				extendRemove(this._defaults, settings || {});
				return this;
			},

			/*
			* Create a new Timepicker instance
			*/
			_newInst: function($input, opts) {
				var tp_inst = new Timepicker(),
					inlineSettings = {},
	            	fns = {},
			    	overrides, i;

				for (var attrName in this._defaults) {
					if(this._defaults.hasOwnProperty(attrName)){
						var attrValue = $input.attr('time:' + attrName);
						if (attrValue) {
							try {
								inlineSettings[attrName] = eval(attrValue);
							} catch (err) {
								inlineSettings[attrName] = attrValue;
							}
						}
					}
				}

			    overrides = {
			        beforeShow: function (input, dp_inst) {
			            if ($.isFunction(tp_inst._defaults.evnts.beforeShow)) {
			                return tp_inst._defaults.evnts.beforeShow.call($input[0], input, dp_inst, tp_inst);
			            }
			        },
			        onChangeMonthYear: function (year, month, dp_inst) {
			            // Update the time as well : this prevents the time from disappearing from the $input field.
			            tp_inst._updateDateTime(dp_inst);
			            if ($.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)) {
			                tp_inst._defaults.evnts.onChangeMonthYear.call($input[0], year, month, dp_inst, tp_inst);
			            }
			        },
			        onClose: function (dateText, dp_inst) {
			            if (tp_inst.timeDefined === true && $input.val() !== '') {
			                tp_inst._updateDateTime(dp_inst);
			            }
			            if ($.isFunction(tp_inst._defaults.evnts.onClose)) {
			                tp_inst._defaults.evnts.onClose.call($input[0], dateText, dp_inst, tp_inst);
			            }
			        }
			    };
			    for (i in overrides) {
			        if (overrides.hasOwnProperty(i)) {
			            fns[i] = opts[i] || null;
			        }
			    }

			    tp_inst._defaults = $.extend({}, this._defaults, inlineSettings, opts, overrides, {
			        evnts:fns,
			        timepicker: tp_inst // add timepicker as a property of datepicker: $.datepicker._get(dp_inst, 'timepicker');
			    });
				tp_inst.amNames = $.map(tp_inst._defaults.amNames, function(val) {
					return val.toUpperCase();
				});
				tp_inst.pmNames = $.map(tp_inst._defaults.pmNames, function(val) {
					return val.toUpperCase();
				});

				// detect which units are supported
				tp_inst.support = detectSupport(
						tp_inst._defaults.timeFormat + 
						(tp_inst._defaults.pickerTimeFormat? tp_inst._defaults.pickerTimeFormat:'') + 
						(tp_inst._defaults.altTimeFormat? tp_inst._defaults.altTimeFormat:''));

				// controlType is string - key to our this._controls
				if(typeof(tp_inst._defaults.controlType) === 'string'){
					if(tp_inst._defaults.controlType == 'slider' && typeof(jQuery.ui.slider) === 'undefined'){
						tp_inst._defaults.controlType = 'select';
					}
					tp_inst.control = tp_inst._controls[tp_inst._defaults.controlType];
				}
				// controlType is an object and must implement create, options, value methods
				else{ 
					tp_inst.control = tp_inst._defaults.controlType;
				}

				// prep the timezone options
				var timezoneList = [-720,-660,-600,-570,-540,-480,-420,-360,-300,-270,-240,-210,-180,-120,-60,
						0,60,120,180,210,240,270,300,330,345,360,390,420,480,525,540,570,600,630,660,690,720,765,780,840];
				if (tp_inst._defaults.timezoneList !== null) {
					timezoneList = tp_inst._defaults.timezoneList;
				}
				var tzl=timezoneList.length,tzi=0,tzv=null;
				if (tzl > 0 && typeof timezoneList[0] !== 'object') {
					for(; tzi<tzl; tzi++){
						tzv = timezoneList[tzi];
						timezoneList[tzi] = { value: tzv, label: $.timepicker.timezoneOffsetString(tzv, tp_inst.support.iso8601) };
					}
				}
				tp_inst._defaults.timezoneList = timezoneList;

				// set the default units
				tp_inst.timezone = tp_inst._defaults.timezone !== null? $.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone) : 
								((new Date()).getTimezoneOffset()*-1);
				tp_inst.hour = tp_inst._defaults.hour < tp_inst._defaults.hourMin? tp_inst._defaults.hourMin : 
								tp_inst._defaults.hour > tp_inst._defaults.hourMax? tp_inst._defaults.hourMax : tp_inst._defaults.hour;
				tp_inst.minute = tp_inst._defaults.minute < tp_inst._defaults.minuteMin? tp_inst._defaults.minuteMin : 
								tp_inst._defaults.minute > tp_inst._defaults.minuteMax? tp_inst._defaults.minuteMax : tp_inst._defaults.minute;
				tp_inst.second = tp_inst._defaults.second < tp_inst._defaults.secondMin? tp_inst._defaults.secondMin : 
								tp_inst._defaults.second > tp_inst._defaults.secondMax? tp_inst._defaults.secondMax : tp_inst._defaults.second;
				tp_inst.millisec = tp_inst._defaults.millisec < tp_inst._defaults.millisecMin? tp_inst._defaults.millisecMin : 
								tp_inst._defaults.millisec > tp_inst._defaults.millisecMax? tp_inst._defaults.millisecMax : tp_inst._defaults.millisec;
				tp_inst.microsec = tp_inst._defaults.microsec < tp_inst._defaults.microsecMin? tp_inst._defaults.microsecMin : 
								tp_inst._defaults.microsec > tp_inst._defaults.microsecMax? tp_inst._defaults.microsecMax : tp_inst._defaults.microsec;
				tp_inst.ampm = '';
				tp_inst.$input = $input;

				if (tp_inst._defaults.altField) {
					tp_inst.$altInput = $(tp_inst._defaults.altField).css({
						cursor: 'pointer'
					}).focus(function() {
						$input.trigger("focus");
					});
				}

				if (tp_inst._defaults.minDate === 0 || tp_inst._defaults.minDateTime === 0) {
					tp_inst._defaults.minDate = new Date();
				}
				if (tp_inst._defaults.maxDate === 0 || tp_inst._defaults.maxDateTime === 0) {
					tp_inst._defaults.maxDate = new Date();
				}

				// datepicker needs minDate/maxDate, timepicker needs minDateTime/maxDateTime..
				if (tp_inst._defaults.minDate !== undefined && tp_inst._defaults.minDate instanceof Date) {
					tp_inst._defaults.minDateTime = new Date(tp_inst._defaults.minDate.getTime());
				}
				if (tp_inst._defaults.minDateTime !== undefined && tp_inst._defaults.minDateTime instanceof Date) {
					tp_inst._defaults.minDate = new Date(tp_inst._defaults.minDateTime.getTime());
				}
				if (tp_inst._defaults.maxDate !== undefined && tp_inst._defaults.maxDate instanceof Date) {
					tp_inst._defaults.maxDateTime = new Date(tp_inst._defaults.maxDate.getTime());
				}
				if (tp_inst._defaults.maxDateTime !== undefined && tp_inst._defaults.maxDateTime instanceof Date) {
					tp_inst._defaults.maxDate = new Date(tp_inst._defaults.maxDateTime.getTime());
				}
				tp_inst.$input.bind('focus', function() {
					tp_inst._onFocus();
				});

				return tp_inst;
			},

			/*
			* add our sliders to the calendar
			*/
			_addTimePicker: function(dp_inst) {
				var currDT = (this.$altInput && this._defaults.altFieldTimeOnly) ? this.$input.val() + ' ' + this.$altInput.val() : this.$input.val();

				this.timeDefined = this._parseTime(currDT);
				this._limitMinMaxDateTime(dp_inst, false);
				this._injectTimePicker();
			},

			/*
			* parse the time string from input value or _setTime
			*/
			_parseTime: function(timeString, withDate) {
				if (!this.inst) {
					this.inst = $.datepicker._getInst(this.$input[0]);
				}

				if (withDate || !this._defaults.timeOnly) {
					var dp_dateFormat = $.datepicker._get(this.inst, 'dateFormat');
					try {
						var parseRes = parseDateTimeInternal(dp_dateFormat, this._defaults.timeFormat, timeString, $.datepicker._getFormatConfig(this.inst), this._defaults);
						if (!parseRes.timeObj) {
							return false;
						}
						$.extend(this, parseRes.timeObj);
					} catch (err) {
						$.timepicker.log("Error parsing the date/time string: " + err +
										"\ndate/time string = " + timeString +
										"\ntimeFormat = " + this._defaults.timeFormat +
										"\ndateFormat = " + dp_dateFormat);
						return false;
					}
					return true;
				} else {
					var timeObj = $.datepicker.parseTime(this._defaults.timeFormat, timeString, this._defaults);
					if (!timeObj) {
						return false;
					}
					$.extend(this, timeObj);
					return true;
				}
			},

			/*
			* generate and inject html for timepicker into ui datepicker
			*/
			_injectTimePicker: function() {
				var $dp = this.inst.dpDiv,
					o = this.inst.settings,
					tp_inst = this,
					litem = '',
					uitem = '',
					show = null,
					max = {},
					gridSize = {},
					size = null,
					i=0,
					l=0;

				// Prevent displaying twice
				if ($dp.find("div.ui-timepicker-div").length === 0 && o.showTimepicker) {
					var noDisplay = ' style="display:none;"',
						html = '<div class="ui-timepicker-div'+ (o.isRTL? ' ui-timepicker-rtl' : '') +'"><dl>' + '<dt class="ui_tpicker_time_label"' + ((o.showTime) ? '' : noDisplay) + '>' + o.timeText + '</dt>' + 
									'<dd class="ui_tpicker_time"' + ((o.showTime) ? '' : noDisplay) + '></dd>';

					// Create the markup
					for(i=0,l=this.units.length; i<l; i++){
						litem = this.units[i];
						uitem = litem.substr(0,1).toUpperCase() + litem.substr(1);
						show = o['show'+uitem] !== null? o['show'+uitem] : this.support[litem];

						// Added by Peter Medeiros:
						// - Figure out what the hour/minute/second max should be based on the step values.
						// - Example: if stepMinute is 15, then minMax is 45.
						max[litem] = parseInt((o[litem+'Max'] - ((o[litem+'Max'] - o[litem+'Min']) % o['step'+uitem])), 10);
						gridSize[litem] = 0;

						html += '<dt class="ui_tpicker_'+ litem +'_label"' + (show ? '' : noDisplay) + '>' + o[litem +'Text'] + '</dt>' + 
									'<dd class="ui_tpicker_'+ litem +'"><div class="ui_tpicker_'+ litem +'_slider"' + (show ? '' : noDisplay) + '></div>';

						if (show && o[litem+'Grid'] > 0) {
							html += '<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>';

							if(litem == 'hour'){
								for (var h = o[litem+'Min']; h <= max[litem]; h += parseInt(o[litem+'Grid'], 10)) {
									gridSize[litem]++;
									var tmph = $.datepicker.formatTime(this.support.ampm? 'hht':'HH', {hour:h}, o);									
									html += '<td data-for="'+litem+'">' + tmph + '</td>';
								}
							}
							else{
								for (var m = o[litem+'Min']; m <= max[litem]; m += parseInt(o[litem+'Grid'], 10)) {
									gridSize[litem]++;
									html += '<td data-for="'+litem+'">' + ((m < 10) ? '0' : '') + m + '</td>';
								}
							}

							html += '</tr></table></div>';
						}
						html += '</dd>';
					}
					
					// Timezone
					var showTz = o.showTimezone !== null? o.showTimezone : this.support.timezone;
					html += '<dt class="ui_tpicker_timezone_label"' + (showTz ? '' : noDisplay) + '>' + o.timezoneText + '</dt>';
					html += '<dd class="ui_tpicker_timezone" ' + (showTz ? '' : noDisplay) + '></dd>';

					// Create the elements from string
					html += '</dl></div>';
					var $tp = $(html);

					// if we only want time picker...
					if (o.timeOnly === true) {
						$tp.prepend('<div class="ui-widget-header ui-helper-clearfix ui-corner-all">' + '<div class="ui-datepicker-title">' + o.timeOnlyTitle + '</div>' + '</div>');
						$dp.find('.ui-datepicker-header, .ui-datepicker-calendar').hide();
					}
					
					// add sliders, adjust grids, add events
					for(i=0,l=tp_inst.units.length; i<l; i++){
						litem = tp_inst.units[i];
						uitem = litem.substr(0,1).toUpperCase() + litem.substr(1);
						show = o['show'+uitem] !== null? o['show'+uitem] : this.support[litem];

						// add the slider
						tp_inst[litem+'_slider'] = tp_inst.control.create(tp_inst, $tp.find('.ui_tpicker_'+litem+'_slider'), litem, tp_inst[litem], o[litem+'Min'], max[litem], o['step'+uitem]);

						// adjust the grid and add click event
						if (show && o[litem+'Grid'] > 0) {
							size = 100 * gridSize[litem] * o[litem+'Grid'] / (max[litem] - o[litem+'Min']);
							$tp.find('.ui_tpicker_'+litem+' table').css({
								width: size + "%",
								marginLeft: o.isRTL? '0' : ((size / (-2 * gridSize[litem])) + "%"),
								marginRight: o.isRTL? ((size / (-2 * gridSize[litem])) + "%") : '0',
								borderCollapse: 'collapse'
							}).find("td").click(function(e){
									var $t = $(this),
										h = $t.html(),
										n = parseInt(h.replace(/[^0-9]/g),10),
										ap = h.replace(/[^apm]/ig),
										f = $t.data('for'); // loses scope, so we use data-for

									if(f == 'hour'){
										if(ap.indexOf('p') !== -1 && n < 12){
											n += 12;
										}
										else{
											if(ap.indexOf('a') !== -1 && n === 12){
												n = 0;
											}
										}
									}
									
									tp_inst.control.value(tp_inst, tp_inst[f+'_slider'], litem, n);

									tp_inst._onTimeChange();
									tp_inst._onSelectHandler();
								}).css({
									cursor: 'pointer',
									width: (100 / gridSize[litem]) + '%',
									textAlign: 'center',
									overflow: 'hidden'
								});
						} // end if grid > 0
					} // end for loop

					// Add timezone options
					this.timezone_select = $tp.find('.ui_tpicker_timezone').append('<select></select>').find("select");
					$.fn.append.apply(this.timezone_select,
					$.map(o.timezoneList, function(val, idx) {
						return $("<option />").val(typeof val == "object" ? val.value : val).text(typeof val == "object" ? val.label : val);
					}));
					if (typeof(this.timezone) != "undefined" && this.timezone !== null && this.timezone !== "") {
						var local_timezone = (new Date(this.inst.selectedYear, this.inst.selectedMonth, this.inst.selectedDay, 12)).getTimezoneOffset()*-1;
						if (local_timezone == this.timezone) {
							selectLocalTimezone(tp_inst);
						} else {
							this.timezone_select.val(this.timezone);
						}
					} else {
						if (typeof(this.hour) != "undefined" && this.hour !== null && this.hour !== "") {
							this.timezone_select.val(o.timezone);
						} else {
							selectLocalTimezone(tp_inst);
						}
					}
					this.timezone_select.change(function() {
						tp_inst._onTimeChange();
						tp_inst._onSelectHandler();
					});
					// End timezone options
					
					// inject timepicker into datepicker
					var $buttonPanel = $dp.find('.ui-datepicker-buttonpane');
					if ($buttonPanel.length) {
						$buttonPanel.before($tp);
					} else {
						$dp.append($tp);
					}

					this.$timeObj = $tp.find('.ui_tpicker_time');

					if (this.inst !== null) {
						var timeDefined = this.timeDefined;
						this._onTimeChange();
						this.timeDefined = timeDefined;
					}

					// slideAccess integration: http://trentrichardson.com/2011/11/11/jquery-ui-sliders-and-touch-accessibility/
					if (this._defaults.addSliderAccess) {
						var sliderAccessArgs = this._defaults.sliderAccessArgs,
							rtl = this._defaults.isRTL;
						sliderAccessArgs.isRTL = rtl;
							
						setTimeout(function() { // fix for inline mode
							if ($tp.find('.ui-slider-access').length === 0) {
								$tp.find('.ui-slider:visible').sliderAccess(sliderAccessArgs);

								// fix any grids since sliders are shorter
								var sliderAccessWidth = $tp.find('.ui-slider-access:eq(0)').outerWidth(true);
								if (sliderAccessWidth) {
									$tp.find('table:visible').each(function() {
										var $g = $(this),
											oldWidth = $g.outerWidth(),
											oldMarginLeft = $g.css(rtl? 'marginRight':'marginLeft').toString().replace('%', ''),
											newWidth = oldWidth - sliderAccessWidth,
											newMarginLeft = ((oldMarginLeft * newWidth) / oldWidth) + '%',
											css = { width: newWidth, marginRight: 0, marginLeft: 0 };
										css[rtl? 'marginRight':'marginLeft'] = newMarginLeft;
										$g.css(css);
									});
								}
							}
						}, 10);
					}
					// end slideAccess integration

					tp_inst._limitMinMaxDateTime(this.inst, true);
				}
			},

			/*
			* This function tries to limit the ability to go outside the
			* min/max date range
			*/
			_limitMinMaxDateTime: function(dp_inst, adjustSliders) {
				var o = this._defaults,
					dp_date = new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay);

				if (!this._defaults.showTimepicker) {
					return;
				} // No time so nothing to check here

				if ($.datepicker._get(dp_inst, 'minDateTime') !== null && $.datepicker._get(dp_inst, 'minDateTime') !== undefined && dp_date) {
					var minDateTime = $.datepicker._get(dp_inst, 'minDateTime'),
						minDateTimeDate = new Date(minDateTime.getFullYear(), minDateTime.getMonth(), minDateTime.getDate(), 0, 0, 0, 0);

					if (this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null || this.microsecMinOriginal === null) {
						this.hourMinOriginal = o.hourMin;
						this.minuteMinOriginal = o.minuteMin;
						this.secondMinOriginal = o.secondMin;
						this.millisecMinOriginal = o.millisecMin;
						this.microsecMinOriginal = o.microsecMin;
					}

					if (dp_inst.settings.timeOnly || minDateTimeDate.getTime() == dp_date.getTime()) {
						this._defaults.hourMin = minDateTime.getHours();
						if (this.hour <= this._defaults.hourMin) {
							this.hour = this._defaults.hourMin;
							this._defaults.minuteMin = minDateTime.getMinutes();
							if (this.minute <= this._defaults.minuteMin) {
								this.minute = this._defaults.minuteMin;
								this._defaults.secondMin = minDateTime.getSeconds();
								if (this.second <= this._defaults.secondMin) {
									this.second = this._defaults.secondMin;
									this._defaults.millisecMin = minDateTime.getMilliseconds();
									if(this.millisec <= this._defaults.millisecMin) {
										this.millisec = this._defaults.millisecMin;
										this._defaults.microsecMin = minDateTime.getMicroseconds();
									} else {
										if (this.microsec < this._defaults.microsecMin) {
											this.microsec = this._defaults.microsecMin;
										}
										this._defaults.microsecMin = this.microsecMinOriginal;
									}
								} else {
									this._defaults.millisecMin = this.millisecMinOriginal;
									this._defaults.microsecMin = this.microsecMinOriginal;
								}
							} else {
								this._defaults.secondMin = this.secondMinOriginal;
								this._defaults.millisecMin = this.millisecMinOriginal;
								this._defaults.microsecMin = this.microsecMinOriginal;
							}
						} else {
							this._defaults.minuteMin = this.minuteMinOriginal;
							this._defaults.secondMin = this.secondMinOriginal;
							this._defaults.millisecMin = this.millisecMinOriginal;
							this._defaults.microsecMin = this.microsecMinOriginal;
						}
					} else {
						this._defaults.hourMin = this.hourMinOriginal;
						this._defaults.minuteMin = this.minuteMinOriginal;
						this._defaults.secondMin = this.secondMinOriginal;
						this._defaults.millisecMin = this.millisecMinOriginal;
						this._defaults.microsecMin = this.microsecMinOriginal;
					}
				}

				if ($.datepicker._get(dp_inst, 'maxDateTime') !== null && $.datepicker._get(dp_inst, 'maxDateTime') !== undefined && dp_date) {
					var maxDateTime = $.datepicker._get(dp_inst, 'maxDateTime'),
						maxDateTimeDate = new Date(maxDateTime.getFullYear(), maxDateTime.getMonth(), maxDateTime.getDate(), 0, 0, 0, 0);

					if (this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null || this.millisecMaxOriginal === null) {
						this.hourMaxOriginal = o.hourMax;
						this.minuteMaxOriginal = o.minuteMax;
						this.secondMaxOriginal = o.secondMax;
						this.millisecMaxOriginal = o.millisecMax;
						this.microsecMaxOriginal = o.microsecMax;
					}

					if (dp_inst.settings.timeOnly || maxDateTimeDate.getTime() == dp_date.getTime()) {
						this._defaults.hourMax = maxDateTime.getHours();
						if (this.hour >= this._defaults.hourMax) {
							this.hour = this._defaults.hourMax;
							this._defaults.minuteMax = maxDateTime.getMinutes();
							if (this.minute >= this._defaults.minuteMax) {
								this.minute = this._defaults.minuteMax;
								this._defaults.secondMax = maxDateTime.getSeconds();
								if (this.second >= this._defaults.secondMax) {
									this.second = this._defaults.secondMax;
									this._defaults.millisecMax = maxDateTime.getMilliseconds();
									if (this.millisec >= this._defaults.millisecMax) {
										this.millisec = this._defaults.millisecMax;
										this._defaults.microsecMax = maxDateTime.getMicroseconds();
									} else {
										if (this.microsec > this._defaults.microsecMax) {
											this.microsec = this._defaults.microsecMax;
										}
										this._defaults.microsecMax = this.microsecMaxOriginal;
									}
								} else {
									this._defaults.millisecMax = this.millisecMaxOriginal;
									this._defaults.microsecMax = this.microsecMaxOriginal;
								}
							} else {
								this._defaults.secondMax = this.secondMaxOriginal;
								this._defaults.millisecMax = this.millisecMaxOriginal;
								this._defaults.microsecMax = this.microsecMaxOriginal;
							}
						} else {
							this._defaults.minuteMax = this.minuteMaxOriginal;
							this._defaults.secondMax = this.secondMaxOriginal;
							this._defaults.millisecMax = this.millisecMaxOriginal;
							this._defaults.microsecMax = this.microsecMaxOriginal;
						}
					} else {
						this._defaults.hourMax = this.hourMaxOriginal;
						this._defaults.minuteMax = this.minuteMaxOriginal;
						this._defaults.secondMax = this.secondMaxOriginal;
						this._defaults.millisecMax = this.millisecMaxOriginal;
						this._defaults.microsecMax = this.microsecMaxOriginal;
					}
				}

				if (adjustSliders !== undefined && adjustSliders === true) {
					var hourMax = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)), 10),
						minMax = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)), 10),
						secMax = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)), 10),
						millisecMax = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)), 10);
						microsecMax = parseInt((this._defaults.microsecMax - ((this._defaults.microsecMax - this._defaults.microsecMin) % this._defaults.stepMicrosec)), 10);

					if (this.hour_slider) {
						this.control.options(this, this.hour_slider, 'hour', { min: this._defaults.hourMin, max: hourMax });
						this.control.value(this, this.hour_slider, 'hour', this.hour - (this.hour % this._defaults.stepHour));
					}
					if (this.minute_slider) {
						this.control.options(this, this.minute_slider, 'minute', { min: this._defaults.minuteMin, max: minMax });
						this.control.value(this, this.minute_slider, 'minute', this.minute - (this.minute % this._defaults.stepMinute));
					}
					if (this.second_slider) {
						this.control.options(this, this.second_slider, 'second', { min: this._defaults.secondMin, max: secMax });
						this.control.value(this, this.second_slider, 'second', this.second - (this.second % this._defaults.stepSecond));
					}
					if (this.millisec_slider) {
						this.control.options(this, this.millisec_slider, 'millisec', { min: this._defaults.millisecMin, max: millisecMax });
						this.control.value(this, this.millisec_slider, 'millisec', this.millisec - (this.millisec % this._defaults.stepMillisec));
					}
					if (this.microsec_slider) {
						this.control.options(this, this.microsec_slider, 'microsec', { min: this._defaults.microsecMin, max: microsecMax });
						this.control.value(this, this.microsec_slider, 'microsec', this.microsec - (this.microsec % this._defaults.stepMicrosec));
					}
				}

			},

			/*
			* when a slider moves, set the internal time...
			* on time change is also called when the time is updated in the text field
			*/
			_onTimeChange: function() {
				var hour = (this.hour_slider) ? this.control.value(this, this.hour_slider, 'hour') : false,
					minute = (this.minute_slider) ? this.control.value(this, this.minute_slider, 'minute') : false,
					second = (this.second_slider) ? this.control.value(this, this.second_slider, 'second') : false,
					millisec = (this.millisec_slider) ? this.control.value(this, this.millisec_slider, 'millisec') : false,
					microsec = (this.microsec_slider) ? this.control.value(this, this.microsec_slider, 'microsec') : false,
					timezone = (this.timezone_select) ? this.timezone_select.val() : false,
					o = this._defaults,
					pickerTimeFormat = o.pickerTimeFormat || o.timeFormat,
					pickerTimeSuffix = o.pickerTimeSuffix || o.timeSuffix;

				if (typeof(hour) == 'object') {
					hour = false;
				}
				if (typeof(minute) == 'object') {
					minute = false;
				}
				if (typeof(second) == 'object') {
					second = false;
				}
				if (typeof(millisec) == 'object') {
					millisec = false;
				}
				if (typeof(microsec) == 'object') {
					microsec = false;
				}
				if (typeof(timezone) == 'object') {
					timezone = false;
				}

				if (hour !== false) {
					hour = parseInt(hour, 10);
				}
				if (minute !== false) {
					minute = parseInt(minute, 10);
				}
				if (second !== false) {
					second = parseInt(second, 10);
				}
				if (millisec !== false) {
					millisec = parseInt(millisec, 10);
				}
				if (microsec !== false) {
					microsec = parseInt(microsec, 10);
				}

				var ampm = o[hour < 12 ? 'amNames' : 'pmNames'][0];

				// If the update was done in the input field, the input field should not be updated.
				// If the update was done using the sliders, update the input field.
				var hasChanged = (hour != this.hour || minute != this.minute || second != this.second || millisec != this.millisec || microsec != this.microsec 
									|| (this.ampm.length > 0 && (hour < 12) != ($.inArray(this.ampm.toUpperCase(), this.amNames) !== -1)) 
									|| (this.timezone !== null && timezone != this.timezone));

				if (hasChanged) {

					if (hour !== false) {
						this.hour = hour;
					}
					if (minute !== false) {
						this.minute = minute;
					}
					if (second !== false) {
						this.second = second;
					}
					if (millisec !== false) {
						this.millisec = millisec;
					}
					if (microsec !== false) {
						this.microsec = microsec;
					}
					if (timezone !== false) {
						this.timezone = timezone;
					}

					if (!this.inst) {
						this.inst = $.datepicker._getInst(this.$input[0]);
					}

					this._limitMinMaxDateTime(this.inst, true);
				}
				if (this.support.ampm) {
					this.ampm = ampm;
				}

				// Updates the time within the timepicker
				this.formattedTime = $.datepicker.formatTime(o.timeFormat, this, o);
				if (this.$timeObj) {
					if(pickerTimeFormat === o.timeFormat){
						this.$timeObj.text(this.formattedTime + pickerTimeSuffix);
					}
					else{
						this.$timeObj.text($.datepicker.formatTime(pickerTimeFormat, this, o) + pickerTimeSuffix);
					}
				}

				this.timeDefined = true;
				if (hasChanged) {
					this._updateDateTime();
				}
			},

			/*
			* call custom onSelect.
			* bind to sliders slidestop, and grid click.
			*/
			_onSelectHandler: function() {
				var onSelect = this._defaults.onSelect || this.inst.settings.onSelect;
				var inputEl = this.$input ? this.$input[0] : null;
				if (onSelect && inputEl) {
					onSelect.apply(inputEl, [this.formattedDateTime, this]);
				}
			},

			/*
			* update our input with the new date time..
			*/
			_updateDateTime: function(dp_inst) {
				dp_inst = this.inst || dp_inst;
				//var dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),
				var dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay)),
					dateFmt = $.datepicker._get(dp_inst, 'dateFormat'),
					formatCfg = $.datepicker._getFormatConfig(dp_inst),
					timeAvailable = dt !== null && this.timeDefined;
				this.formattedDate = $.datepicker.formatDate(dateFmt, (dt === null ? new Date() : dt), formatCfg);
				var formattedDateTime = this.formattedDate;
				
				// if a slider was changed but datepicker doesn't have a value yet, set it
				if(dp_inst.lastVal===""){
	                dp_inst.currentYear=dp_inst.selectedYear;
	                dp_inst.currentMonth=dp_inst.selectedMonth;
	                dp_inst.currentDay=dp_inst.selectedDay;
	            }

				/*
				* remove following lines to force every changes in date picker to change the input value
				* Bug descriptions: when an input field has a default value, and click on the field to pop up the date picker. 
				* If the user manually empty the value in the input field, the date picker will never change selected value.
				*/
				//if (dp_inst.lastVal !== undefined && (dp_inst.lastVal.length > 0 && this.$input.val().length === 0)) {
				//	return;
				//}

				if (this._defaults.timeOnly === true) {
					formattedDateTime = this.formattedTime;
				} else if (this._defaults.timeOnly !== true && (this._defaults.alwaysSetTime || timeAvailable)) {
					formattedDateTime += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix;
				}

				this.formattedDateTime = formattedDateTime;

				if (!this._defaults.showTimepicker) {
					this.$input.val(this.formattedDate);
				} else if (this.$altInput && this._defaults.timeOnly === false && this._defaults.altFieldTimeOnly === true) {
					this.$altInput.val(this.formattedTime);
					this.$input.val(this.formattedDate);
				} else if (this.$altInput) {
					this.$input.val(formattedDateTime);
					var altFormattedDateTime = '',
						altSeparator = this._defaults.altSeparator ? this._defaults.altSeparator : this._defaults.separator,
						altTimeSuffix = this._defaults.altTimeSuffix ? this._defaults.altTimeSuffix : this._defaults.timeSuffix;
					
					if(!this._defaults.timeOnly){
						if (this._defaults.altFormat){
							altFormattedDateTime = $.datepicker.formatDate(this._defaults.altFormat, (dt === null ? new Date() : dt), formatCfg);
						}
						else{
							altFormattedDateTime = this.formattedDate;
						}

						if (altFormattedDateTime){
							altFormattedDateTime += altSeparator;
						}
					}

					if(this._defaults.altTimeFormat){
						altFormattedDateTime += $.datepicker.formatTime(this._defaults.altTimeFormat, this, this._defaults) + altTimeSuffix;
					}
					else{
						altFormattedDateTime += this.formattedTime + altTimeSuffix;
					}
					this.$altInput.val(altFormattedDateTime);
				} else {
					this.$input.val(formattedDateTime);
				}

				this.$input.trigger("change");
			},

			_onFocus: function() {
				if (!this.$input.val() && this._defaults.defaultValue) {
					this.$input.val(this._defaults.defaultValue);
					var inst = $.datepicker._getInst(this.$input.get(0)),
						tp_inst = $.datepicker._get(inst, 'timepicker');
					if (tp_inst) {
						if (tp_inst._defaults.timeOnly && (inst.input.val() != inst.lastVal)) {
							try {
								$.datepicker._updateDatepicker(inst);
							} catch (err) {
								$.timepicker.log(err);
							}
						}
					}
				}
			},

			/*
			* Small abstraction to control types
			* We can add more, just be sure to follow the pattern: create, options, value
			*/
			_controls: {
				// slider methods
				slider: {
					create: function(tp_inst, obj, unit, val, min, max, step){
						var rtl = tp_inst._defaults.isRTL; // if rtl go -60->0 instead of 0->60
						return obj.prop('slide', null).slider({
							orientation: "horizontal",
							value: rtl? val*-1 : val,
							min: rtl? max*-1 : min,
							max: rtl? min*-1 : max,
							step: step,
							slide: function(event, ui) {
								tp_inst.control.value(tp_inst, $(this), unit, rtl? ui.value*-1:ui.value);
								tp_inst._onTimeChange();
							},
							stop: function(event, ui) {
								tp_inst._onSelectHandler();
							}
						});	
					},
					options: function(tp_inst, obj, unit, opts, val){
						if(tp_inst._defaults.isRTL){
							if(typeof(opts) == 'string'){
								if(opts == 'min' || opts == 'max'){
									if(val !== undefined){
										return obj.slider(opts, val*-1);
									}
									return Math.abs(obj.slider(opts));
								}
								return obj.slider(opts);
							}
							var min = opts.min, 
								max = opts.max;
							opts.min = opts.max = null;
							if(min !== undefined){
								opts.max = min * -1;
							}
							if(max !== undefined){
								opts.min = max * -1;
							}
							return obj.slider(opts);
						}
						if(typeof(opts) == 'string' && val !== undefined){
								return obj.slider(opts, val);
						}
						return obj.slider(opts);
					},
					value: function(tp_inst, obj, unit, val){
						if(tp_inst._defaults.isRTL){
							if(val !== undefined){
								return obj.slider('value', val*-1);
							}
							return Math.abs(obj.slider('value'));
						}
						if(val !== undefined){
							return obj.slider('value', val);
						}
						return obj.slider('value');
					}
				},
				// select methods
				select: {
					create: function(tp_inst, obj, unit, val, min, max, step){
						var sel = '<select class="ui-timepicker-select" data-unit="'+ unit +'" data-min="'+ min +'" data-max="'+ max +'" data-step="'+ step +'">',
							format = tp_inst._defaults.pickerTimeFormat || tp_inst._defaults.timeFormat;

						for(var i=min; i<=max; i+=step){						
							sel += '<option value="'+ i +'"'+ (i==val? ' selected':'') +'>';
							if(unit == 'hour'){
								sel += $.datepicker.formatTime($.trim(format.replace(/[^ht ]/ig,'')), {hour:i}, tp_inst._defaults);
							}
							else if(unit == 'millisec' || unit == 'microsec' || i >= 10){ sel += i; }
							else {sel += '0'+ i.toString(); }
							sel += '</option>';
						}
						sel += '</select>';

						obj.children('select').remove();

						$(sel).appendTo(obj).change(function(e){
							tp_inst._onTimeChange();
							tp_inst._onSelectHandler();
						});

						return obj;
					},
					options: function(tp_inst, obj, unit, opts, val){
						var o = {},
							$t = obj.children('select');
						if(typeof(opts) == 'string'){
							if(val === undefined){
								return $t.data(opts);
							}
							o[opts] = val;	
						}
						else{ o = opts; }
						return tp_inst.control.create(tp_inst, obj, $t.data('unit'), $t.val(), o.min || $t.data('min'), o.max || $t.data('max'), o.step || $t.data('step'));
					},
					value: function(tp_inst, obj, unit, val){
						var $t = obj.children('select');
						if(val !== undefined){
							return $t.val(val);
						}
						return $t.val();
					}
				}
			} // end _controls

		});

		$.fn.extend({
			/*
			* shorthand just to use timepicker..
			*/
			timepicker: function(o) {
				o = o || {};
				var tmp_args = Array.prototype.slice.call(arguments);

				if (typeof o == 'object') {
					tmp_args[0] = $.extend(o, {
						timeOnly: true
					});
				}

				return $(this).each(function() {
					$.fn.datetimepicker.apply($(this), tmp_args);
				});
			},

			/*
			* extend timepicker to datepicker
			*/
			datetimepicker: function(o) {
				o = o || {};
				var tmp_args = arguments;

				if (typeof(o) == 'string') {
					if (o == 'getDate') {
						return $.fn.datepicker.apply($(this[0]), tmp_args);
					} else {
						return this.each(function() {
							var $t = $(this);
							$t.datepicker.apply($t, tmp_args);
						});
					}
				} else {
					return this.each(function() {
						var $t = $(this);
						$t.datepicker($.timepicker._newInst($t, o)._defaults);
					});
				}
			}
		});

		/*
		* Public Utility to parse date and time
		*/
		$.datepicker.parseDateTime = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {
			var parseRes = parseDateTimeInternal(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings);
			if (parseRes.timeObj) {
				var t = parseRes.timeObj;
				parseRes.date.setHours(t.hour, t.minute, t.second, t.millisec);
				parseRes.date.setMicroseconds(t.microsec);
			}

			return parseRes.date;
		};

		/*
		* Public utility to parse time
		*/
		$.datepicker.parseTime = function(timeFormat, timeString, options) {		
			var o = extendRemove(extendRemove({}, $.timepicker._defaults), options || {}),
				iso8601 = (timeFormat.replace(/\'.*?\'/g,'').indexOf('Z') !== -1);

			// Strict parse requires the timeString to match the timeFormat exactly
			var strictParse = function(f, s, o){

				// pattern for standard and localized AM/PM markers
				var getPatternAmpm = function(amNames, pmNames) {
					var markers = [];
					if (amNames) {
						$.merge(markers, amNames);
					}
					if (pmNames) {
						$.merge(markers, pmNames);
					}
					markers = $.map(markers, function(val) {
						return val.replace(/[.*+?|()\[\]{}\\]/g, '\\$&');
					});
					return '(' + markers.join('|') + ')?';
				};

				// figure out position of time elements.. cause js cant do named captures
				var getFormatPositions = function(timeFormat) {
					var finds = timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),
						orders = {
							h: -1,
							m: -1,
							s: -1,
							l: -1,
							c: -1,
							t: -1,
							z: -1
						};

					if (finds) {
						for (var i = 0; i < finds.length; i++) {
							if (orders[finds[i].toString().charAt(0)] == -1) {
								orders[finds[i].toString().charAt(0)] = i + 1;
							}
						}
					}
					return orders;
				};

				var regstr = '^' + f.toString()
						.replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function (match) {
								var ml = match.length;
								switch (match.charAt(0).toLowerCase()) {
									case 'h': return ml === 1? '(\\d?\\d)':'(\\d{'+ml+'})';
									case 'm': return ml === 1? '(\\d?\\d)':'(\\d{'+ml+'})';
									case 's': return ml === 1? '(\\d?\\d)':'(\\d{'+ml+'})';
									case 'l': return '(\\d?\\d?\\d)';
									case 'c': return '(\\d?\\d?\\d)';
									case 'z': return '(z|[-+]\\d\\d:?\\d\\d|\\S+)?';
									case 't': return getPatternAmpm(o.amNames, o.pmNames);
									default:    // literal escaped in quotes
										return '(' + match.replace(/\'/g, "").replace(/(\.|\$|\^|\\|\/|\(|\)|\[|\]|\?|\+|\*)/g, function (m) { return "\\" + m; }) + ')?';
								}
							})
						.replace(/\s/g, '\\s?') +
						o.timeSuffix + '$',
					order = getFormatPositions(f),
					ampm = '',
					treg;

				treg = s.match(new RegExp(regstr, 'i'));

				var resTime = {
					hour: 0,
					minute: 0,
					second: 0,
					millisec: 0,
					microsec: 0
				};

				if (treg) {
					if (order.t !== -1) {
						if (treg[order.t] === undefined || treg[order.t].length === 0) {
							ampm = '';
							resTime.ampm = '';
						} else {
							ampm = $.inArray(treg[order.t].toUpperCase(), o.amNames) !== -1 ? 'AM' : 'PM';
							resTime.ampm = o[ampm == 'AM' ? 'amNames' : 'pmNames'][0];
						}
					}

					if (order.h !== -1) {
						if (ampm == 'AM' && treg[order.h] == '12') {
							resTime.hour = 0; // 12am = 0 hour
						} else {
							if (ampm == 'PM' && treg[order.h] != '12') {
								resTime.hour = parseInt(treg[order.h], 10) + 12; // 12pm = 12 hour, any other pm = hour + 12
							} else {
								resTime.hour = Number(treg[order.h]);
							}
						}
					}

					if (order.m !== -1) {
						resTime.minute = Number(treg[order.m]);
					}
					if (order.s !== -1) {
						resTime.second = Number(treg[order.s]);
					}
					if (order.l !== -1) {
						resTime.millisec = Number(treg[order.l]);
					}
					if (order.c !== -1) {
						resTime.microsec = Number(treg[order.c]);
					}
					if (order.z !== -1 && treg[order.z] !== undefined) {
						resTime.timezone = $.timepicker.timezoneOffsetNumber(treg[order.z]);
					}


					return resTime;
				}
				return false;
			};// end strictParse

			// First try JS Date, if that fails, use strictParse
			var looseParse = function(f,s,o){
				try{
					var d = new Date('2012-01-01 '+ s);
					if(isNaN(d.getTime())){
						d = new Date('2012-01-01T'+ s);
						if(isNaN(d.getTime())){
							d = new Date('01/01/2012 '+ s);
							if(isNaN(d.getTime())){
								throw "Unable to parse time with native Date: "+ s;
							}
						}
					}

					return {
						hour: d.getHours(),
						minute: d.getMinutes(),
						second: d.getSeconds(),
						millisec: d.getMilliseconds(),
						microsec: d.getMicroseconds(),
						timezone: d.getTimezoneOffset()*-1
					};
				}
				catch(err){
					try{
						return strictParse(f,s,o);
					}
					catch(err2){
						$.timepicker.log("Unable to parse \ntimeString: "+ s +"\ntimeFormat: "+ f);
					}				
				}
				return false;
			}; // end looseParse
			
			if(typeof o.parse === "function"){
				return o.parse(timeFormat, timeString, o);
			}
			if(o.parse === 'loose'){
				return looseParse(timeFormat, timeString, o);
			}
			return strictParse(timeFormat, timeString, o);
		};

		/*
		* Public utility to format the time
		* format = string format of the time
		* time = a {}, not a Date() for timezones
		* options = essentially the regional[].. amNames, pmNames, ampm
		*/
		$.datepicker.formatTime = function(format, time, options) {
			options = options || {};
			options = $.extend({}, $.timepicker._defaults, options);
			time = $.extend({
				hour: 0,
				minute: 0,
				second: 0,
				millisec: 0,
				timezone: 0
			}, time);

			var tmptime = format,
				ampmName = options.amNames[0],
				hour = parseInt(time.hour, 10);

			if (hour > 11) {
				ampmName = options.pmNames[0];
			}

			tmptime = tmptime.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|('.*?'|".*?"))/g, function(match) {
			switch (match) {
				case 'HH':
					return ('0' + hour).slice(-2);
				case 'H':
					return hour;
				case 'hh':
					return ('0' + convert24to12(hour)).slice(-2);
				case 'h':
					return convert24to12(hour);
				case 'mm':
					return ('0' + time.minute).slice(-2);
				case 'm':
					return time.minute;
				case 'ss':
					return ('0' + time.second).slice(-2);
				case 's':
					return time.second;
				case 'l':
					return ('00' + time.millisec).slice(-3);
				case 'c':
					return ('00' + time.microsec).slice(-3);
				case 'z':
					return $.timepicker.timezoneOffsetString(time.timezone === null? options.timezone : time.timezone, false);
				case 'Z':
					return $.timepicker.timezoneOffsetString(time.timezone === null? options.timezone : time.timezone, true);
				case 'T': 
					return ampmName.charAt(0).toUpperCase();
				case 'TT': 
					return ampmName.toUpperCase();
				case 't':
					return ampmName.charAt(0).toLowerCase();
				case 'tt':
					return ampmName.toLowerCase();
				default:
					return match.replace(/\'/g, "") || "'";
				}
			});

			tmptime = $.trim(tmptime);
			return tmptime;
		};

		/*
		* the bad hack :/ override datepicker so it doesnt close on select
		// inspired: http://stackoverflow.com/questions/1252512/jquery-datepicker-prevent-closing-picker-when-clicking-a-date/1762378#1762378
		*/
		$.datepicker._base_selectDate = $.datepicker._selectDate;
		$.datepicker._selectDate = function(id, dateStr) {
			var inst = this._getInst($(id)[0]),
				tp_inst = this._get(inst, 'timepicker');

			if (tp_inst) {
				tp_inst._limitMinMaxDateTime(inst, true);
				inst.inline = inst.stay_open = true;
				//This way the onSelect handler called from calendarpicker get the full dateTime
				this._base_selectDate(id, dateStr);
				inst.inline = inst.stay_open = false;
				this._notifyChange(inst);
				this._updateDatepicker(inst);
			} else {
				this._base_selectDate(id, dateStr);
			}
		};

		/*
		* second bad hack :/ override datepicker so it triggers an event when changing the input field
		* and does not redraw the datepicker on every selectDate event
		*/
		$.datepicker._base_updateDatepicker = $.datepicker._updateDatepicker;
		$.datepicker._updateDatepicker = function(inst) {

			// don't popup the datepicker if there is another instance already opened
			var input = inst.input[0];
			if ($.datepicker._curInst && $.datepicker._curInst != inst && $.datepicker._datepickerShowing && $.datepicker._lastInput != input) {
				return;
			}

			if (typeof(inst.stay_open) !== 'boolean' || inst.stay_open === false) {

				this._base_updateDatepicker(inst);

				// Reload the time control when changing something in the input text field.
				var tp_inst = this._get(inst, 'timepicker');
				if (tp_inst) {
					tp_inst._addTimePicker(inst);
				}
			}
		};

		/*
		* third bad hack :/ override datepicker so it allows spaces and colon in the input field
		*/
		$.datepicker._base_doKeyPress = $.datepicker._doKeyPress;
		$.datepicker._doKeyPress = function(event) {
			var inst = $.datepicker._getInst(event.target),
				tp_inst = $.datepicker._get(inst, 'timepicker');

			if (tp_inst) {
				if ($.datepicker._get(inst, 'constrainInput')) {
					var ampm = tp_inst.support.ampm,
						tz = tp_inst._defaults.showTimezone !== null? tp_inst._defaults.showTimezone : tp_inst.support.timezone,					
						dateChars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat')),
						datetimeChars = tp_inst._defaults.timeFormat.toString()
												.replace(/[hms]/g, '')
												.replace(/TT/g, ampm ? 'APM' : '')
												.replace(/Tt/g, ampm ? 'AaPpMm' : '')
												.replace(/tT/g, ampm ? 'AaPpMm' : '')
												.replace(/T/g, ampm ? 'AP' : '')
												.replace(/tt/g, ampm ? 'apm' : '')
												.replace(/t/g, ampm ? 'ap' : '') + 
												" " + tp_inst._defaults.separator + 
												tp_inst._defaults.timeSuffix + 
												(tz ? tp_inst._defaults.timezoneList.join('') : '') + 
												(tp_inst._defaults.amNames.join('')) + (tp_inst._defaults.pmNames.join('')) + 
												dateChars,
						chr = String.fromCharCode(event.charCode === undefined ? event.keyCode : event.charCode);
					return event.ctrlKey || (chr < ' ' || !dateChars || datetimeChars.indexOf(chr) > -1);
				}
			}

			return $.datepicker._base_doKeyPress(event);
		};

		/*
		* Fourth bad hack :/ override _updateAlternate function used in inline mode to init altField
		*/
		$.datepicker._base_updateAlternate = $.datepicker._updateAlternate;
		/* Update any alternate field to synchronise with the main field. */
		$.datepicker._updateAlternate = function(inst) {
			var tp_inst = this._get(inst, 'timepicker');
			if(tp_inst){
				var altField = tp_inst._defaults.altField;
				if (altField) { // update alternate field too
					var altFormat = tp_inst._defaults.altFormat || tp_inst._defaults.dateFormat,
						date = this._getDate(inst),
						formatCfg = $.datepicker._getFormatConfig(inst),
						altFormattedDateTime = '', 
						altSeparator = tp_inst._defaults.altSeparator ? tp_inst._defaults.altSeparator : tp_inst._defaults.separator, 
						altTimeSuffix = tp_inst._defaults.altTimeSuffix ? tp_inst._defaults.altTimeSuffix : tp_inst._defaults.timeSuffix,
						altTimeFormat = tp_inst._defaults.altTimeFormat !== null ? tp_inst._defaults.altTimeFormat : tp_inst._defaults.timeFormat;
					
					altFormattedDateTime += $.datepicker.formatTime(altTimeFormat, tp_inst, tp_inst._defaults) + altTimeSuffix;
					if(!tp_inst._defaults.timeOnly && !tp_inst._defaults.altFieldTimeOnly && date !== null){
						if(tp_inst._defaults.altFormat){
							altFormattedDateTime = $.datepicker.formatDate(tp_inst._defaults.altFormat, date, formatCfg) + altSeparator + altFormattedDateTime;
						}
						else{
							altFormattedDateTime = tp_inst.formattedDate + altSeparator + altFormattedDateTime;
						}
					}
					$(altField).val(altFormattedDateTime);
				}
			}
			else{
				$.datepicker._base_updateAlternate(inst);
			}
		};

		/*
		* Override key up event to sync manual input changes.
		*/
		$.datepicker._base_doKeyUp = $.datepicker._doKeyUp;
		$.datepicker._doKeyUp = function(event) {
			var inst = $.datepicker._getInst(event.target),
				tp_inst = $.datepicker._get(inst, 'timepicker');

			if (tp_inst) {
				if (tp_inst._defaults.timeOnly && (inst.input.val() != inst.lastVal)) {
					try {
						$.datepicker._updateDatepicker(inst);
					} catch (err) {
						$.timepicker.log(err);
					}
				}
			}

			return $.datepicker._base_doKeyUp(event);
		};

		/*
		* override "Today" button to also grab the time.
		*/
		$.datepicker._base_gotoToday = $.datepicker._gotoToday;
		$.datepicker._gotoToday = function(id) {
			var inst = this._getInst($(id)[0]),
				$dp = inst.dpDiv;
			this._base_gotoToday(id);
			var tp_inst = this._get(inst, 'timepicker');
			selectLocalTimezone(tp_inst);
			var now = new Date();
			this._setTime(inst, now);
			$('.ui-datepicker-today', $dp).click();
		};

		/*
		* Disable & enable the Time in the datetimepicker
		*/
		$.datepicker._disableTimepickerDatepicker = function(target) {
			var inst = this._getInst(target);
			if (!inst) {
				return;
			}

			var tp_inst = this._get(inst, 'timepicker');
			$(target).datepicker('getDate'); // Init selected[Year|Month|Day]
			if (tp_inst) {
				tp_inst._defaults.showTimepicker = false;
				tp_inst._updateDateTime(inst);
			}
		};

		$.datepicker._enableTimepickerDatepicker = function(target) {
			var inst = this._getInst(target);
			if (!inst) {
				return;
			}

			var tp_inst = this._get(inst, 'timepicker');
			$(target).datepicker('getDate'); // Init selected[Year|Month|Day]
			if (tp_inst) {
				tp_inst._defaults.showTimepicker = true;
				tp_inst._addTimePicker(inst); // Could be disabled on page load
				tp_inst._updateDateTime(inst);
			}
		};

		/*
		* Create our own set time function
		*/
		$.datepicker._setTime = function(inst, date) {
			var tp_inst = this._get(inst, 'timepicker');
			if (tp_inst) {
				var defaults = tp_inst._defaults;

				// calling _setTime with no date sets time to defaults
				tp_inst.hour = date ? date.getHours() : defaults.hour;
				tp_inst.minute = date ? date.getMinutes() : defaults.minute;
				tp_inst.second = date ? date.getSeconds() : defaults.second;
				tp_inst.millisec = date ? date.getMilliseconds() : defaults.millisec;
				tp_inst.microsec = date ? date.getMicroseconds() : defaults.microsec;

				//check if within min/max times.. 
				tp_inst._limitMinMaxDateTime(inst, true);

				tp_inst._onTimeChange();
				tp_inst._updateDateTime(inst);
			}
		};

		/*
		* Create new public method to set only time, callable as $().datepicker('setTime', date)
		*/
		$.datepicker._setTimeDatepicker = function(target, date, withDate) {
			var inst = this._getInst(target);
			if (!inst) {
				return;
			}

			var tp_inst = this._get(inst, 'timepicker');

			if (tp_inst) {
				this._setDateFromField(inst);
				var tp_date;
				if (date) {
					if (typeof date == "string") {
						tp_inst._parseTime(date, withDate);
						tp_date = new Date();
						tp_date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
						tp_date.setMicroseconds(tp_inst.microsec);
					} else {
						tp_date = new Date(date.getTime());
						tp_date.setMicroseconds(date.getMicroseconds());
					}
					if (tp_date.toString() == 'Invalid Date') {
						tp_date = undefined;
					}
					this._setTime(inst, tp_date);
				}
			}

		};

		/*
		* override setDate() to allow setting time too within Date object
		*/
		$.datepicker._base_setDateDatepicker = $.datepicker._setDateDatepicker;
		$.datepicker._setDateDatepicker = function(target, date) {
			var inst = this._getInst(target);
			if (!inst) {
				return;
			}

			if(typeof(date) === 'string'){
				date = new Date(date);
				if(!date.getTime()){
					$.timepicker.log("Error creating Date object from string.");
				}
			}

			var tp_inst = this._get(inst, 'timepicker');
			var tp_date;
			if (date instanceof Date) {
				tp_date = new Date(date.getTime());
				tp_date.setMicroseconds(date.getMicroseconds());
			} else {
				tp_date = date;
			}
			
			// This is important if you are using the timezone option, javascript's Date 
			// object will only return the timezone offset for the current locale, so we 
			// adjust it accordingly.  If not using timezone option this won't matter..
			// If a timezone is different in tp, keep the timezone as is
			if(tp_inst){
				// look out for DST if tz wasn't specified
				if(!tp_inst.support.timezone && tp_inst._defaults.timezone === null){
					tp_inst.timezone = tp_date.getTimezoneOffset()*-1;
				}
				date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);
				tp_date = $.timepicker.timezoneAdjust(tp_date, tp_inst.timezone);
			}

			this._updateDatepicker(inst);
			this._base_setDateDatepicker.apply(this, arguments);
			this._setTimeDatepicker(target, tp_date, true);
		};

		/*
		* override getDate() to allow getting time too within Date object
		*/
		$.datepicker._base_getDateDatepicker = $.datepicker._getDateDatepicker;
		$.datepicker._getDateDatepicker = function(target, noDefault) {
			var inst = this._getInst(target);
			if (!inst) {
				return;
			}

			var tp_inst = this._get(inst, 'timepicker');

			if (tp_inst) {
				// if it hasn't yet been defined, grab from field
				if(inst.lastVal === undefined){
					this._setDateFromField(inst, noDefault);
				}

				var date = this._getDate(inst);
				if (date && tp_inst._parseTime($(target).val(), tp_inst.timeOnly)) {
					date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);
					date.setMicroseconds(tp_inst.microsec);

					// This is important if you are using the timezone option, javascript's Date 
					// object will only return the timezone offset for the current locale, so we 
					// adjust it accordingly.  If not using timezone option this won't matter..
					if(tp_inst.timezone != null){
						// look out for DST if tz wasn't specified
						if(!tp_inst.support.timezone && tp_inst._defaults.timezone === null){
							tp_inst.timezone = date.getTimezoneOffset()*-1;
						}
						date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);
					}
				}
				return date;
			}
			return this._base_getDateDatepicker(target, noDefault);
		};

		/*
		* override parseDate() because UI 1.8.14 throws an error about "Extra characters"
		* An option in datapicker to ignore extra format characters would be nicer.
		*/
		$.datepicker._base_parseDate = $.datepicker.parseDate;
		$.datepicker.parseDate = function(format, value, settings) {
			var date;
			try {
				date = this._base_parseDate(format, value, settings);
			} catch (err) {
				// Hack!  The error message ends with a colon, a space, and
				// the "extra" characters.  We rely on that instead of
				// attempting to perfectly reproduce the parsing algorithm.
				if (err.indexOf(":") >= 0) {
					date = this._base_parseDate(format, value.substring(0,value.length-(err.length-err.indexOf(':')-2)), settings);
					$.timepicker.log("Error parsing the date string: " + err + "\ndate string = " + value + "\ndate format = " + format);
				} else {
					throw err;
				}
			}
			return date;
		};

		/*
		* override formatDate to set date with time to the input
		*/
		$.datepicker._base_formatDate = $.datepicker._formatDate;
		$.datepicker._formatDate = function(inst, day, month, year) {
			var tp_inst = this._get(inst, 'timepicker');
			if (tp_inst) {
				tp_inst._updateDateTime(inst);
				return tp_inst.$input.val();
			}
			return this._base_formatDate(inst);
		};

		/*
		* override options setter to add time to maxDate(Time) and minDate(Time). MaxDate
		*/
		$.datepicker._base_optionDatepicker = $.datepicker._optionDatepicker;
		$.datepicker._optionDatepicker = function(target, name, value) {
			var inst = this._getInst(target),
		        name_clone;
			if (!inst) {
				return null;
			}

			var tp_inst = this._get(inst, 'timepicker');
			if (tp_inst) {
				var min = null,
					max = null,
					onselect = null,
					overrides = tp_inst._defaults.evnts,
					fns = {},
					prop;
			    if (typeof name == 'string') { // if min/max was set with the string
			        if (name === 'minDate' || name === 'minDateTime') {
			            min = value;
			        } else if (name === 'maxDate' || name === 'maxDateTime') {
			            max = value;
			        } else if (name === 'onSelect') {
			            onselect = value;
			        } else if (overrides.hasOwnProperty(name)) {
			            if (typeof (value) === 'undefined') {
			                return overrides[name];
			            }
			            fns[name] = value;
			            name_clone = {}; //empty results in exiting function after overrides updated
			        }
			    } else if (typeof name == 'object') { //if min/max was set with the JSON
			        if (name.minDate) {
			            min = name.minDate;
			        } else if (name.minDateTime) {
			            min = name.minDateTime;
			        } else if (name.maxDate) {
			            max = name.maxDate;
			        } else if (name.maxDateTime) {
			            max = name.maxDateTime;
			        }
			        for (prop in overrides) {
			            if (overrides.hasOwnProperty(prop) && name[prop]) {
			                fns[prop] = name[prop];
			            }
			        }
			    }
			    for (prop in fns) {
			        if (fns.hasOwnProperty(prop)) {
			            overrides[prop] = fns[prop];
			            if (!name_clone) { name_clone = $.extend({}, name);}
			            delete name_clone[prop];
			        }
			    }
			    if (name_clone && isEmptyObject(name_clone)) { return; }
			    if (min) { //if min was set
			        if (min === 0) {
			            min = new Date();
			        } else {
			            min = new Date(min);
			        }
			        tp_inst._defaults.minDate = min;
			        tp_inst._defaults.minDateTime = min;
			    } else if (max) { //if max was set
			        if (max === 0) {
			            max = new Date();
			        } else {
			            max = new Date(max);
			        }
			        tp_inst._defaults.maxDate = max;
			        tp_inst._defaults.maxDateTime = max;
			    } else if (onselect) {
			        tp_inst._defaults.onSelect = onselect;
			    }
			}
			if (value === undefined) {
				return this._base_optionDatepicker.call($.datepicker, target, name);
			}
			return this._base_optionDatepicker.call($.datepicker, target, name_clone || name, value);
		};
		
		/*
		* jQuery isEmptyObject does not check hasOwnProperty - if someone has added to the object prototype,
		* it will return false for all objects
		*/
		var isEmptyObject = function(obj) {
			var prop;
			for (prop in obj) {
				if (obj.hasOwnProperty(obj)) {
					return false;
				}
			}
			return true;
		};

		/*
		* jQuery extend now ignores nulls!
		*/
		var extendRemove = function(target, props) {
			$.extend(target, props);
			for (var name in props) {
				if (props[name] === null || props[name] === undefined) {
					target[name] = props[name];
				}
			}
			return target;
		};

		/*
		* Determine by the time format which units are supported
		* Returns an object of booleans for each unit
		*/
		var detectSupport = function(timeFormat){
			var tf = timeFormat.replace(/\'.*?\'/g,'').toLowerCase(), // removes literals
				isIn = function(f, t){ // does the format contain the token?
						return f.indexOf(t) !== -1? true:false; 
					};
			return {
					hour: isIn(tf,'h'),
					minute: isIn(tf,'m'),
					second: isIn(tf,'s'),
					millisec: isIn(tf,'l'),
					microsec: isIn(tf,'c'),
					timezone: isIn(tf,'z'),
					ampm: isIn(tf,'t') && isIn(timeFormat,'h'),
					iso8601: isIn(timeFormat, 'Z')
				};
		};

		/*
		* Converts 24 hour format into 12 hour
		* Returns 12 hour without leading 0
		*/
		var convert24to12 = function(hour) {
			if (hour > 12) {
				hour = hour - 12;
			}

			if (hour === 0) {
				hour = 12;
			}

			return String(hour);
		};

		/*
		* Splits datetime string into date ans time substrings.
		* Throws exception when date can't be parsed
		* Returns [dateString, timeString]
		*/
		var splitDateTime = function(dateFormat, dateTimeString, dateSettings, timeSettings) {
			try {
				// The idea is to get the number separator occurances in datetime and the time format requested (since time has 
				// fewer unknowns, mostly numbers and am/pm). We will use the time pattern to split.
				var separator = timeSettings && timeSettings.separator ? timeSettings.separator : $.timepicker._defaults.separator,
					format = timeSettings && timeSettings.timeFormat ? timeSettings.timeFormat : $.timepicker._defaults.timeFormat,
					timeParts = format.split(separator), // how many occurances of separator may be in our format?
					timePartsLen = timeParts.length,
					allParts = dateTimeString.split(separator),
					allPartsLen = allParts.length;

				if (allPartsLen > 1) {
					return [
							allParts.splice(0,allPartsLen-timePartsLen).join(separator),
							allParts.splice(0,timePartsLen).join(separator)
						];
				}

			} catch (err) {
				$.timepicker.log('Could not split the date from the time. Please check the following datetimepicker options' +
						"\nthrown error: " + err +
						"\ndateTimeString" + dateTimeString +
						"\ndateFormat = " + dateFormat +
						"\nseparator = " + timeSettings.separator +
						"\ntimeFormat = " + timeSettings.timeFormat);

				if (err.indexOf(":") >= 0) {
					// Hack!  The error message ends with a colon, a space, and
					// the "extra" characters.  We rely on that instead of
					// attempting to perfectly reproduce the parsing algorithm.
					var dateStringLength = dateTimeString.length - (err.length - err.indexOf(':') - 2),
						timeString = dateTimeString.substring(dateStringLength);

					return [$.trim(dateTimeString.substring(0, dateStringLength)), $.trim(dateTimeString.substring(dateStringLength))];

				} else {
					throw err;
				}
			}
			return [dateTimeString, ''];
		};

		/*
		* Internal function to parse datetime interval
		* Returns: {date: Date, timeObj: Object}, where
		*   date - parsed date without time (type Date)
		*   timeObj = {hour: , minute: , second: , millisec: , microsec: } - parsed time. Optional
		*/
		var parseDateTimeInternal = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {
			var date;
			var splitRes = splitDateTime(dateFormat, dateTimeString, dateSettings, timeSettings);
			date = $.datepicker._base_parseDate(dateFormat, splitRes[0], dateSettings);
			if (splitRes[1] !== '') {
				var timeString = splitRes[1],
					parsedTime = $.datepicker.parseTime(timeFormat, timeString, timeSettings);

				if (parsedTime === null) {
					throw 'Wrong time format';
				}
				return {
					date: date,
					timeObj: parsedTime
				};
			} else {
				return {
					date: date
				};
			}
		};

		/*
		* Internal function to set timezone_select to the local timezone
		*/
		var selectLocalTimezone = function(tp_inst, date) {
			if (tp_inst && tp_inst.timezone_select) {
				var now = typeof date !== 'undefined' ? date : new Date();
				tp_inst.timezone_select.val(now.getTimezoneOffset()*-1);
			}
		};

		/*
		* Create a Singleton Insance
		*/
		$.timepicker = new Timepicker();

		/**
		 * Get the timezone offset as string from a date object (eg '+0530' for UTC+5.5)
		 * @param  number if not a number this value is returned
		 * @param boolean if true formats in accordance to iso8601 "+12:45"
		 * @return string
		 */
		$.timepicker.timezoneOffsetString = function(tzMinutes, iso8601) {
			if(isNaN(tzMinutes) || tzMinutes > 840){
				return tzMinutes;
			}

			var off = tzMinutes,
				minutes = off % 60,
				hours = (off - minutes) / 60,
				iso = iso8601? ':':'',
				tz = (off >= 0 ? '+' : '-') + ('0' + (hours * 101).toString()).slice(-2) + iso + ('0' + (minutes * 101).toString()).slice(-2);
			
			if(tz == '+00:00'){
				return 'Z';
			}
			return tz;
		};

		/**
		 * Get the number in minutes that represents a timezone string
		 * @param  string formated like "+0500", "-1245"
		 * @return number
		 */
		$.timepicker.timezoneOffsetNumber = function(tzString) {
			tzString = tzString.toString().replace(':',''); // excuse any iso8601, end up with "+1245"

			if(tzString.toUpperCase() === 'Z'){ // if iso8601 with Z, its 0 minute offset
				return 0;
			}

			if(!/^(\-|\+)\d{4}$/.test(tzString)){ // possibly a user defined tz, so just give it back
				return tzString;
			}

			return ((tzString.substr(0,1) =='-'? -1 : 1) * // plus or minus
						((parseInt(tzString.substr(1,2),10)*60) + // hours (converted to minutes)
						parseInt(tzString.substr(3,2),10))); // minutes
		};

		/**
		 * No way to set timezone in js Date, so we must adjust the minutes to compensate. (think setDate, getDate)
		 * @param  date
		 * @param  string formated like "+0500", "-1245"
		 * @return date
		 */
		$.timepicker.timezoneAdjust = function(date, toTimezone) {
			var toTz = $.timepicker.timezoneOffsetNumber(toTimezone);
			if(!isNaN(toTz)){
				date.setMinutes(date.getMinutes()*1 + (date.getTimezoneOffset()*-1 - toTz*1) );
			}
			return date;
		};

		/**
		 * Calls `timepicker()` on the `startTime` and `endTime` elements, and configures them to
		 * enforce date range limits.
		 * n.b. The input value must be correctly formatted (reformatting is not supported)
		 * @param  Element startTime
		 * @param  Element endTime
		 * @param  obj options Options for the timepicker() call
		 * @return jQuery
		 */
		$.timepicker.timeRange = function(startTime, endTime, options) {
			return $.timepicker.handleRange('timepicker', startTime, endTime, options);
		};

		/**
		 * Calls `datetimepicker` on the `startTime` and `endTime` elements, and configures them to
		 * enforce date range limits.
		 * @param  Element startTime
		 * @param  Element endTime
		 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
		 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
		 * @param  string method Can be used to specify the type of picker to be added
		 * @return jQuery
		 */
		$.timepicker.datetimeRange = function(startTime, endTime, options) {
			$.timepicker.handleRange('datetimepicker', startTime, endTime, options);
		};

		/**
		 * Calls `method` on the `startTime` and `endTime` elements, and configures them to
		 * enforce date range limits.
		 * @param  Element startTime
		 * @param  Element endTime
		 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
		 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
		 * @return jQuery
		 */
		$.timepicker.dateRange = function(startTime, endTime, options) {
			$.timepicker.handleRange('datepicker', startTime, endTime, options);
		};

		/**
		 * Calls `method` on the `startTime` and `endTime` elements, and configures them to
		 * enforce date range limits.
		 * @param  string method Can be used to specify the type of picker to be added
		 * @param  Element startTime
		 * @param  Element endTime
		 * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,
		 *   a boolean value that can be used to reformat the input values to the `dateFormat`.
		 * @return jQuery
		 */
		$.timepicker.handleRange = function(method, startTime, endTime, options) {
			options = $.extend({}, {
				minInterval: 0, // min allowed interval in milliseconds
				maxInterval: 0, // max allowed interval in milliseconds
				start: {},      // options for start picker
				end: {}         // options for end picker
			}, options);

			$.fn[method].call(startTime, $.extend({
				onClose: function(dateText, inst) {
					checkDates($(this), endTime);
				},
				onSelect: function(selectedDateTime) {
					selected($(this), endTime, 'minDate');
				}
			}, options, options.start));
			$.fn[method].call(endTime, $.extend({
				onClose: function(dateText, inst) {
					checkDates($(this), startTime);
				},
				onSelect: function(selectedDateTime) {
					selected($(this), startTime, 'maxDate');
				}
			}, options, options.end));

			checkDates(startTime, endTime);
			selected(startTime, endTime, 'minDate');
			selected(endTime, startTime, 'maxDate');

			function checkDates(changed, other) {
				var startdt = startTime[method]('getDate'),
					enddt = endTime[method]('getDate'),
					changeddt = changed[method]('getDate');

				if(startdt !== null){
					var minDate = new Date(startdt.getTime()),
						maxDate = new Date(startdt.getTime());

					minDate.setMilliseconds(minDate.getMilliseconds() + options.minInterval);
					maxDate.setMilliseconds(maxDate.getMilliseconds() + options.maxInterval);

					if(options.minInterval > 0 && minDate > enddt){ // minInterval check
						endTime[method]('setDate',minDate);
					}
					else if(options.maxInterval > 0 && maxDate < enddt){ // max interval check
						endTime[method]('setDate',maxDate);
					}
					else if (startdt > enddt) {
						other[method]('setDate',changeddt);
					}
				}
			}

			function selected(changed, other, option) {
				if (!changed.val()) {
					return;
				}
				var date = changed[method].call(changed, 'getDate');
				if(date !== null && options.minInterval > 0){
					if(option == 'minDate'){
						date.setMilliseconds(date.getMilliseconds() + options.minInterval); 
					}
					if(option == 'maxDate'){
						date.setMilliseconds(date.getMilliseconds() - options.minInterval);
					}
				}
				if (date.getTime) {
					other[method].call(other, 'option', option, date);
				}
			}
			return $([startTime.get(0), endTime.get(0)]);
		};

		/**
		 * Log error or data to the console during error or debugging
		 * @param  Object err pass any type object to log to the console during error or debugging
		 * @return void
		 */
		$.timepicker.log = function(err){
			if(window.console){
				console.log(err);
			}
		};

		/*
		* Microsecond support
		*/
		if(!Date.prototype.getMicroseconds){
			Date.prototype.microseconds = 0;
			Date.prototype.getMicroseconds = function(){ return this.microseconds; };
			Date.prototype.setMicroseconds = function(m){ 
				this.setMilliseconds(this.getMilliseconds() + Math.floor(m/1000));
				this.microseconds = m%1000;
				return this;
			};
		}

		/*
		* Keep up with the version
		*/
		$.timepicker.version = "1.3.1";

	})(jQuery);


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	/**
	 * @depends /jquery-1.7.1.min.js
	 * 
	 */

	/*
	*	TypeWatch 2.0 - Original by Denny Ferrassoli / Refactored by Charles Christolini
	*
	*	Examples/Docs: github.com/dennyferra/TypeWatch
	*	
	*  Copyright(c) 2007 Denny Ferrassoli - DennyDotNet.com
	*  Coprright(c) 2008 Charles Christolini - BinaryPie.com
	*  
	*  Dual licensed under the MIT and GPL licenses:
	*  http://www.opensource.org/licenses/mit-license.php
	*  http://www.gnu.org/licenses/gpl.html
	*/

	(function(jQuery) {
		jQuery.fn.typeWatch = function(o) {
			// Options
			var options = jQuery.extend({
				wait: 750,
				callback: function() { },
				highlight: true,
				captureLength: 2
			}, o);

			function checkElement(timer, override) {
				var elTxt = jQuery(timer.el).val();

				// Fire if text >= options.captureLength AND text != saved txt OR if override AND text >= options.captureLength
				if ((elTxt.length >= options.captureLength && elTxt.toUpperCase() != timer.text)
				|| (override && elTxt.length >= options.captureLength)) {
					timer.text = elTxt.toUpperCase();
					timer.cb(elTxt);
				}
			};

			function watchElement(elem) {
				// Must be text or textarea
				if (elem.type.toUpperCase() == "TEXT" || elem.nodeName.toUpperCase() == "TEXTAREA") {

					// Allocate timer element
					var timer = {
						timer: null,
						text: jQuery(elem).val().toUpperCase(),
						cb: options.callback,
						el: elem,
						wait: options.wait
					};

					// Set focus action (highlight)
					if (options.highlight) {
						jQuery(elem).focus(
							function() {
								this.select();
							});
					}

					// Key watcher / clear and reset the timer
					var startWatch = function(evt) {
						var timerWait = timer.wait;
						var overrideBool = false;

						if (evt.keyCode == 13 && this.type.toUpperCase() == "TEXT") {
							timerWait = 1;
							overrideBool = true;
						}

						var timerCallbackFx = function() {
							checkElement(timer, overrideBool)
						}

						// Clear timer					
						clearTimeout(timer.timer);
						timer.timer = setTimeout(timerCallbackFx, timerWait);
					};

					jQuery(elem).keydown(startWatch);
				}
			};

			// Watch Each Element
			return this.each(function(index) {
				watchElement(this);
			});

		};
	})(jQuery);

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/// <reference path='../typings/slatwallTypescript.d.ts' />
	/// <reference path='../typings/tsd.d.ts' />
	/*jshint browser:true */
	var basebootstrap_1 = __webpack_require__(15);
	var slatwalladmin_module_1 = __webpack_require__(420);
	//custom bootstrapper
	var bootstrapper = (function (_super) {
	    __extends(bootstrapper, _super);
	    function bootstrapper() {
	        var _this = this;
	        var angular = _this = _super.call(this, slatwalladmin_module_1.slatwalladminmodule.name) || this;
	        angular.bootstrap();
	        return _this;
	    }
	    return bootstrapper;
	}(basebootstrap_1.BaseBootStrapper));
	module.exports = new bootstrapper();


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../typings/hibachiTypescript.d.ts' />
	/// <reference path='../typings/tsd.d.ts' />
	//angular 2 helpers
	Object.defineProperty(exports, "__esModule", { value: true });
	//core
	__webpack_require__(16);
	__webpack_require__(18);
	__webpack_require__(263);
	var core_module_1 = __webpack_require__(275);
	//upgrade healers
	var platform_browser_dynamic_1 = __webpack_require__(377);
	var static_1 = __webpack_require__(415);
	var app_module_1 = __webpack_require__(416);
	__webpack_require__(419);
	var md5 = __webpack_require__(347);
	//generic bootstrapper
	var BaseBootStrapper = (function () {
	    function BaseBootStrapper(myApplication) {
	        var _this = this;
	        this._resourceBundle = {};
	        this.getData = function (invalidCache) {
	            var promises = {};
	            for (var i in invalidCache) {
	                var invalidCacheName = invalidCache[i];
	                var functionName = invalidCacheName.charAt(0).toUpperCase() + invalidCacheName.slice(1);
	                promises[invalidCacheName] = _this['get' + functionName + 'Data']();
	            }
	            return _this.$q.all(promises).then(function (data) {
	            });
	        };
	        this.getAttributeCacheKeyData = function () {
	            var urlString = "";
	            if (!hibachiConfig) {
	                hibachiConfig = {};
	            }
	            if (!hibachiConfig.baseURL) {
	                hibachiConfig.baseURL = '';
	            }
	            urlString += hibachiConfig.baseURL;
	            if (urlString.length && urlString.slice(-1) !== '/') {
	                urlString += '/';
	            }
	            return _this.$http.get(urlString + '?' + hibachiConfig.action + '=api:main.getAttributeModel')
	                .then(function (resp) {
	                core_module_1.coremodule.constant('attributeMetaData', resp.data.data);
	                //for safari private mode which has no localStorage
	                try {
	                    localStorage.setItem('attributeMetaData', JSON.stringify(resp.data.data));
	                }
	                catch (e) { }
	                _this.attributeMetaData = resp.data.data;
	            }, function (response) {
	            });
	        };
	        this.getInstantiationKeyData = function () {
	            if (!_this.instantiationKey) {
	                var d = new Date();
	                var n = d.getTime();
	                _this.instantiationKey = n.toString();
	            }
	            var urlString = "";
	            if (!hibachiConfig) {
	                hibachiConfig = {};
	            }
	            if (!hibachiConfig.baseURL) {
	                hibachiConfig.baseURL = '';
	            }
	            urlString += hibachiConfig.baseURL;
	            if (hibachiConfig.baseURL.length && hibachiConfig.baseURL.charAt(hibachiConfig.baseURL.length - 1) != '/') {
	                urlString += '/';
	            }
	            return _this.$http.get(urlString + 'custom/config/config.json?instantiationKey=' + _this.instantiationKey)
	                .then(function (resp) {
	                var appConfig = resp.data.data;
	                if (hibachiConfig.baseURL.length) {
	                    appConfig.baseURL = urlString;
	                }
	                core_module_1.coremodule.constant('appConfig', resp.data.data);
	                _this.appConfig = appConfig;
	                return _this.getResourceBundles();
	            }, function (response) {
	            });
	        };
	        this.getResourceBundle = function (locale) {
	            var deferred = _this.$q.defer();
	            var locale = locale || _this.appConfig.rbLocale;
	            if (_this._resourceBundle[locale]) {
	                return _this._resourceBundle[locale];
	            }
	            var urlString = _this.appConfig.baseURL + '/custom/config/resourceBundles/' + locale + '.json?instantiationKey=' + _this.appConfig.instantiationKey;
	            _this.$http({
	                url: urlString,
	                method: "GET"
	            }).success(function (response, status, headersGetter) {
	                _this._resourceBundle[locale] = response;
	                deferred.resolve(response);
	            }).error(function (response, status) {
	                if (status === 404) {
	                    _this._resourceBundle[locale] = {};
	                    deferred.resolve(response);
	                }
	                else {
	                    deferred.reject(response);
	                }
	            });
	            return deferred.promise;
	        };
	        this.getResourceBundles = function () {
	            var rbLocale = _this.appConfig.rbLocale.split('_');
	            var localeListArray = rbLocale;
	            var rbPromise;
	            var rbPromises = [];
	            rbPromise = _this.getResourceBundle(_this.appConfig.rbLocale);
	            rbPromises.push(rbPromise);
	            if (localeListArray.length === 2) {
	                //$log.debug('has two');
	                rbPromise = _this.getResourceBundle(localeListArray[0]);
	                rbPromises.push(rbPromise);
	            }
	            if (localeListArray[0] !== 'en') {
	                //$log.debug('get english');
	                _this.getResourceBundle('en_us');
	                _this.getResourceBundle('en');
	            }
	            var resourceBundlePromises = _this.$q.all(rbPromises).then(function (data) {
	                core_module_1.coremodule.constant('resourceBundles', _this._resourceBundle);
	            }, function (error) {
	                //can enterhere due to 404
	                core_module_1.coremodule.constant('resourceBundles', _this._resourceBundle);
	            });
	            return resourceBundlePromises;
	        };
	        this.myApplication = myApplication;
	        //Kicks off the Angular upgrade to bootstrap the appModule which is the root component for the
	        //Angular side of the app.
	        platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule).then(function (platformRef) {
	            var upgradeAdaptor = platformRef.injector.get(static_1.UpgradeModule);
	        });
	        return angular.lazy(this.myApplication)
	            .resolve(['$http', '$q', '$timeout', function ($http, $q, $timeout) {
	                _this.$http = $http;
	                _this.$q = $q;
	                var baseURL = hibachiConfig.baseURL;
	                if (baseURL.length && baseURL.slice(-1) !== '/') {
	                    baseURL += '/';
	                }
	                return $http.get(baseURL + '?' + hibachiConfig.action + '=api:main.getInstantiationKey')
	                    .then(function (resp) {
	                    _this.instantiationKey = resp.data.data.instantiationKey;
	                    var invalidCache = [];
	                    try {
	                        var hashedData = md5(localStorage.getItem('attributeMetaData'));
	                        if (resp.data.data['attributeCacheKey'] === hashedData.toUpperCase()) {
	                            core_module_1.coremodule.constant('attributeMetaData', JSON.parse(localStorage.getItem('attributeMetaData')));
	                        }
	                        else {
	                            invalidCache.push('attributeCacheKey');
	                        }
	                    }
	                    catch (e) {
	                        invalidCache.push('attributeCacheKey');
	                    }
	                    invalidCache.push('instantiationKey');
	                    return _this.getData(invalidCache);
	                });
	            }])
	            .loading(function () {
	            //angular.element('#loading').show();
	        })
	            .error(function () {
	            //angular.element('#error').show();
	        })
	            .done(function () {
	            //angular.element('#loading').hide();
	        });
	    }
	    return BaseBootStrapper;
	}());
	exports.BaseBootStrapper = BaseBootStrapper;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	var Reflect;
	(function (Reflect) {
	    "use strict";
	    var hasOwn = Object.prototype.hasOwnProperty;
	    // feature test for Symbol support
	    var supportsSymbol = typeof Symbol === "function";
	    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
	    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
	    var HashMap;
	    (function (HashMap) {
	        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
	        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
	        var downLevel = !supportsCreate && !supportsProto;
	        // create an object in dictionary mode (a.k.a. "slow" mode in v8)
	        HashMap.create = supportsCreate
	            ? function () { return MakeDictionary(Object.create(null)); }
	            : supportsProto
	                ? function () { return MakeDictionary({ __proto__: null }); }
	                : function () { return MakeDictionary({}); };
	        HashMap.has = downLevel
	            ? function (map, key) { return hasOwn.call(map, key); }
	            : function (map, key) { return key in map; };
	        HashMap.get = downLevel
	            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
	            : function (map, key) { return map[key]; };
	    })(HashMap || (HashMap = {}));
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
	    var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
	    var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
	    var Metadata = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param propertyKey (Optional) The property key to decorate.
	      * @param attributes (Optional) The property descriptor for the target key.
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Example = Reflect.decorate(decoratorsArray, Example);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(Example, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(Example.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, propertyKey, attributes) {
	        if (!IsUndefined(propertyKey)) {
	            if (!IsArray(decorators))
	                throw new TypeError();
	            if (!IsObject(target))
	                throw new TypeError();
	            if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
	                throw new TypeError();
	            if (IsNull(attributes))
	                attributes = undefined;
	            propertyKey = ToPropertyKey(propertyKey);
	            return DecorateProperty(decorators, target, propertyKey, attributes);
	        }
	        else {
	            if (!IsArray(decorators))
	                throw new TypeError();
	            if (!IsConstructor(target))
	                throw new TypeError();
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
	    // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class Example {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, propertyKey) {
	            if (!IsObject(target))
	                throw new TypeError();
	            if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
	                throw new TypeError();
	            OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param propertyKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, Example);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryHasMetadata(metadataKey, target, propertyKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryGetMetadata(metadataKey, target, propertyKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(Example.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryMetadataKeys(target, propertyKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        return OrdinaryOwnMetadataKeys(target, propertyKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param propertyKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, propertyKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(propertyKey))
	            propertyKey = ToPropertyKey(propertyKey);
	        var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
	        if (IsUndefined(metadataMap))
	            return false;
	        if (!metadataMap.delete(metadataKey))
	            return false;
	        if (metadataMap.size > 0)
	            return true;
	        var targetMetadata = Metadata.get(target);
	        targetMetadata.delete(propertyKey);
	        if (targetMetadata.size > 0)
	            return true;
	        Metadata.delete(target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated) && !IsNull(decorated)) {
	                if (!IsConstructor(decorated))
	                    throw new TypeError();
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecorateProperty(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated) && !IsNull(decorated)) {
	                if (!IsObject(decorated))
	                    throw new TypeError();
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function GetOrCreateMetadataMap(O, P, Create) {
	        var targetMetadata = Metadata.get(O);
	        if (IsUndefined(targetMetadata)) {
	            if (!Create)
	                return undefined;
	            targetMetadata = new _Map();
	            Metadata.set(O, targetMetadata);
	        }
	        var metadataMap = targetMetadata.get(P);
	        if (IsUndefined(metadataMap)) {
	            if (!Create)
	                return undefined;
	            metadataMap = new _Map();
	            targetMetadata.set(P, metadataMap);
	        }
	        return metadataMap;
	    }
	    // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
	    function OrdinaryHasMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn)
	            return true;
	        var parent = OrdinaryGetPrototypeOf(O);
	        if (!IsNull(parent))
	            return OrdinaryHasMetadata(MetadataKey, parent, P);
	        return false;
	    }
	    // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
	        if (IsUndefined(metadataMap))
	            return false;
	        return ToBoolean(metadataMap.has(MetadataKey));
	    }
	    // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
	    function OrdinaryGetMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn)
	            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	        var parent = OrdinaryGetPrototypeOf(O);
	        if (!IsNull(parent))
	            return OrdinaryGetMetadata(MetadataKey, parent, P);
	        return undefined;
	    }
	    // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
	        if (IsUndefined(metadataMap))
	            return undefined;
	        return metadataMap.get(MetadataKey);
	    }
	    // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // 3.1.6.1 OrdinaryMetadataKeys(O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = OrdinaryGetPrototypeOf(O);
	        if (parent === null)
	            return ownKeys;
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0)
	            return ownKeys;
	        if (ownKeys.length <= 0)
	            return parentKeys;
	        var set = new _Set();
	        var keys = [];
	        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
	            var key = ownKeys_1[_i];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
	            var key = parentKeys_1[_a];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        return keys;
	    }
	    // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
	    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
	    function OrdinaryOwnMetadataKeys(O, P) {
	        var keys = [];
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
	        if (IsUndefined(metadataMap))
	            return keys;
	        var keysObj = metadataMap.keys();
	        var iterator = GetIterator(keysObj);
	        var k = 0;
	        while (true) {
	            var next = IteratorStep(iterator);
	            if (!next) {
	                keys.length = k;
	                return keys;
	            }
	            var nextValue = IteratorValue(next);
	            try {
	                keys[k] = nextValue;
	            }
	            catch (e) {
	                try {
	                    IteratorClose(iterator);
	                }
	                finally {
	                    throw e;
	                }
	            }
	            k++;
	        }
	    }
	    // 6 ECMAScript Data Typ0es and Values
	    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
	    function Type(x) {
	        if (x === null)
	            return 1 /* Null */;
	        switch (typeof x) {
	            case "undefined": return 0 /* Undefined */;
	            case "boolean": return 2 /* Boolean */;
	            case "string": return 3 /* String */;
	            case "symbol": return 4 /* Symbol */;
	            case "number": return 5 /* Number */;
	            case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
	            default: return 6 /* Object */;
	        }
	    }
	    // 6.1.1 The Undefined Type
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // 6.1.2 The Null Type
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
	    function IsNull(x) {
	        return x === null;
	    }
	    // 6.1.5 The Symbol Type
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // 6.1.7 The Object Type
	    // https://tc39.github.io/ecma262/#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // 7.1 Type Conversion
	    // https://tc39.github.io/ecma262/#sec-type-conversion
	    // 7.1.1 ToPrimitive(input [, PreferredType])
	    // https://tc39.github.io/ecma262/#sec-toprimitive
	    function ToPrimitive(input, PreferredType) {
	        switch (Type(input)) {
	            case 0 /* Undefined */: return input;
	            case 1 /* Null */: return input;
	            case 2 /* Boolean */: return input;
	            case 3 /* String */: return input;
	            case 4 /* Symbol */: return input;
	            case 5 /* Number */: return input;
	        }
	        var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
	        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
	        if (exoticToPrim !== undefined) {
	            var result = exoticToPrim.call(input, hint);
	            if (IsObject(result))
	                throw new TypeError();
	            return result;
	        }
	        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
	    }
	    // 7.1.1.1 OrdinaryToPrimitive(O, hint)
	    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
	    function OrdinaryToPrimitive(O, hint) {
	        if (hint === "string") {
	            var toString_1 = O.toString;
	            if (IsCallable(toString_1)) {
	                var result = toString_1.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	            var valueOf = O.valueOf;
	            if (IsCallable(valueOf)) {
	                var result = valueOf.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	        }
	        else {
	            var valueOf = O.valueOf;
	            if (IsCallable(valueOf)) {
	                var result = valueOf.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	            var toString_2 = O.toString;
	            if (IsCallable(toString_2)) {
	                var result = toString_2.call(O);
	                if (!IsObject(result))
	                    return result;
	            }
	        }
	        throw new TypeError();
	    }
	    // 7.1.2 ToBoolean(argument)
	    // https://tc39.github.io/ecma262/2016/#sec-toboolean
	    function ToBoolean(argument) {
	        return !!argument;
	    }
	    // 7.1.12 ToString(argument)
	    // https://tc39.github.io/ecma262/#sec-tostring
	    function ToString(argument) {
	        return "" + argument;
	    }
	    // 7.1.14 ToPropertyKey(argument)
	    // https://tc39.github.io/ecma262/#sec-topropertykey
	    function ToPropertyKey(argument) {
	        var key = ToPrimitive(argument, 3 /* String */);
	        if (IsSymbol(key))
	            return key;
	        return ToString(key);
	    }
	    // 7.2 Testing and Comparison Operations
	    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
	    // 7.2.2 IsArray(argument)
	    // https://tc39.github.io/ecma262/#sec-isarray
	    function IsArray(argument) {
	        return Array.isArray
	            ? Array.isArray(argument)
	            : argument instanceof Object
	                ? argument instanceof Array
	                : Object.prototype.toString.call(argument) === "[object Array]";
	    }
	    // 7.2.3 IsCallable(argument)
	    // https://tc39.github.io/ecma262/#sec-iscallable
	    function IsCallable(argument) {
	        // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
	        return typeof argument === "function";
	    }
	    // 7.2.4 IsConstructor(argument)
	    // https://tc39.github.io/ecma262/#sec-isconstructor
	    function IsConstructor(argument) {
	        // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
	        return typeof argument === "function";
	    }
	    // 7.2.7 IsPropertyKey(argument)
	    // https://tc39.github.io/ecma262/#sec-ispropertykey
	    function IsPropertyKey(argument) {
	        switch (Type(argument)) {
	            case 3 /* String */: return true;
	            case 4 /* Symbol */: return true;
	            default: return false;
	        }
	    }
	    // 7.3 Operations on Objects
	    // https://tc39.github.io/ecma262/#sec-operations-on-objects
	    // 7.3.9 GetMethod(V, P)
	    // https://tc39.github.io/ecma262/#sec-getmethod
	    function GetMethod(V, P) {
	        var func = V[P];
	        if (func === undefined || func === null)
	            return undefined;
	        if (!IsCallable(func))
	            throw new TypeError();
	        return func;
	    }
	    // 7.4 Operations on Iterator Objects
	    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
	    function GetIterator(obj) {
	        var method = GetMethod(obj, iteratorSymbol);
	        if (!IsCallable(method))
	            throw new TypeError(); // from Call
	        var iterator = method.call(obj);
	        if (!IsObject(iterator))
	            throw new TypeError();
	        return iterator;
	    }
	    // 7.4.4 IteratorValue(iterResult)
	    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
	    function IteratorValue(iterResult) {
	        return iterResult.value;
	    }
	    // 7.4.5 IteratorStep(iterator)
	    // https://tc39.github.io/ecma262/#sec-iteratorstep
	    function IteratorStep(iterator) {
	        var result = iterator.next();
	        return result.done ? false : result;
	    }
	    // 7.4.6 IteratorClose(iterator, completion)
	    // https://tc39.github.io/ecma262/#sec-iteratorclose
	    function IteratorClose(iterator) {
	        var f = iterator["return"];
	        if (f)
	            f.call(iterator);
	    }
	    // 9.1 Ordinary Object Internal Methods and Internal Slots
	    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
	    // 9.1.1.1 OrdinaryGetPrototypeOf(O)
	    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
	    function OrdinaryGetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype)
	            return proto;
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
	        // Try to determine the superclass constructor. Compatible implementations
	        // must either set __proto__ on a subclass constructor to the superclass constructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype)
	            return proto;
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype)
	            return proto;
	        // If the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function")
	            return proto;
	        // If we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O)
	            return proto;
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        var arraySentinel = [];
	        var MapIterator = (function () {
	            function MapIterator(keys, values, selector) {
	                this._index = 0;
	                this._keys = keys;
	                this._values = values;
	                this._selector = selector;
	            }
	            MapIterator.prototype["@@iterator"] = function () { return this; };
	            MapIterator.prototype[iteratorSymbol] = function () { return this; };
	            MapIterator.prototype.next = function () {
	                var index = this._index;
	                if (index >= 0 && index < this._keys.length) {
	                    var result = this._selector(this._keys[index], this._values[index]);
	                    if (index + 1 >= this._keys.length) {
	                        this._index = -1;
	                        this._keys = arraySentinel;
	                        this._values = arraySentinel;
	                    }
	                    else {
	                        this._index++;
	                    }
	                    return { value: result, done: false };
	                }
	                return { value: undefined, done: true };
	            };
	            MapIterator.prototype.throw = function (error) {
	                if (this._index >= 0) {
	                    this._index = -1;
	                    this._keys = arraySentinel;
	                    this._values = arraySentinel;
	                }
	                throw error;
	            };
	            MapIterator.prototype.return = function (value) {
	                if (this._index >= 0) {
	                    this._index = -1;
	                    this._keys = arraySentinel;
	                    this._values = arraySentinel;
	                }
	                return { value: value, done: true };
	            };
	            return MapIterator;
	        }());
	        return (function () {
	            function Map() {
	                this._keys = [];
	                this._values = [];
	                this._cacheKey = cacheSentinel;
	                this._cacheIndex = -2;
	            }
	            Object.defineProperty(Map.prototype, "size", {
	                get: function () { return this._keys.length; },
	                enumerable: true,
	                configurable: true
	            });
	            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
	            Map.prototype.get = function (key) {
	                var index = this._find(key, /*insert*/ false);
	                return index >= 0 ? this._values[index] : undefined;
	            };
	            Map.prototype.set = function (key, value) {
	                var index = this._find(key, /*insert*/ true);
	                this._values[index] = value;
	                return this;
	            };
	            Map.prototype.delete = function (key) {
	                var index = this._find(key, /*insert*/ false);
	                if (index >= 0) {
	                    var size = this._keys.length;
	                    for (var i = index + 1; i < size; i++) {
	                        this._keys[i - 1] = this._keys[i];
	                        this._values[i - 1] = this._values[i];
	                    }
	                    this._keys.length--;
	                    this._values.length--;
	                    if (key === this._cacheKey) {
	                        this._cacheKey = cacheSentinel;
	                        this._cacheIndex = -2;
	                    }
	                    return true;
	                }
	                return false;
	            };
	            Map.prototype.clear = function () {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cacheKey = cacheSentinel;
	                this._cacheIndex = -2;
	            };
	            Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
	            Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
	            Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
	            Map.prototype["@@iterator"] = function () { return this.entries(); };
	            Map.prototype[iteratorSymbol] = function () { return this.entries(); };
	            Map.prototype._find = function (key, insert) {
	                if (this._cacheKey !== key) {
	                    this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
	                }
	                if (this._cacheIndex < 0 && insert) {
	                    this._cacheIndex = this._keys.length;
	                    this._keys.push(key);
	                    this._values.push(undefined);
	                }
	                return this._cacheIndex;
	            };
	            return Map;
	        }());
	        function getKey(key, _) {
	            return key;
	        }
	        function getValue(_, value) {
	            return value;
	        }
	        function getEntry(key, value) {
	            return [key, value];
	        }
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        return (function () {
	            function Set() {
	                this._map = new _Map();
	            }
	            Object.defineProperty(Set.prototype, "size", {
	                get: function () { return this._map.size; },
	                enumerable: true,
	                configurable: true
	            });
	            Set.prototype.has = function (value) { return this._map.has(value); };
	            Set.prototype.add = function (value) { return this._map.set(value, value), this; };
	            Set.prototype.delete = function (value) { return this._map.delete(value); };
	            Set.prototype.clear = function () { this._map.clear(); };
	            Set.prototype.keys = function () { return this._map.keys(); };
	            Set.prototype.values = function () { return this._map.values(); };
	            Set.prototype.entries = function () { return this._map.entries(); };
	            Set.prototype["@@iterator"] = function () { return this.keys(); };
	            Set.prototype[iteratorSymbol] = function () { return this.keys(); };
	            return Set;
	        }());
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var keys = HashMap.create();
	        var rootKey = CreateUniqueKey();
	        return (function () {
	            function WeakMap() {
	                this._key = CreateUniqueKey();
	            }
	            WeakMap.prototype.has = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? HashMap.has(table, this._key) : false;
	            };
	            WeakMap.prototype.get = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? HashMap.get(table, this._key) : undefined;
	            };
	            WeakMap.prototype.set = function (target, value) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ true);
	                table[this._key] = value;
	                return this;
	            };
	            WeakMap.prototype.delete = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? delete table[this._key] : false;
	            };
	            WeakMap.prototype.clear = function () {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            };
	            return WeakMap;
	        }());
	        function CreateUniqueKey() {
	            var key;
	            do
	                key = "@@WeakMap@@" + CreateUUID();
	            while (HashMap.has(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create)
	                    return undefined;
	                Object.defineProperty(target, rootKey, { value: HashMap.create() });
	            }
	            return target[rootKey];
	        }
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i)
	                buffer[i] = Math.random() * 0xff | 0;
	            return buffer;
	        }
	        function GenRandomBytes(size) {
	            if (typeof Uint8Array === "function") {
	                if (typeof crypto !== "undefined")
	                    return crypto.getRandomValues(new Uint8Array(size));
	                if (typeof msCrypto !== "undefined")
	                    return msCrypto.getRandomValues(new Uint8Array(size));
	                return FillRandomBytes(new Uint8Array(size), size);
	            }
	            return FillRandomBytes(new Array(size), size);
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 § 4.4
	            data[6] = data[6] & 0x4f | 0x40;
	            data[8] = data[8] & 0xbf | 0x80;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8)
	                    result += "-";
	                if (byte < 16)
	                    result += "0";
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	    }
	    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
	    function MakeDictionary(obj) {
	        obj.__ = undefined;
	        delete obj.__;
	        return obj;
	    }
	    // patch global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    if (hasOwn.call(Reflect, p)) {
	                        __global.Reflect[p] = Reflect[p];
	                    }
	                }
	            }
	        }
	        else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof global !== "undefined" ? global :
	        typeof self !== "undefined" ? self :
	            Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURL=Reflect.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17), (function() { return this; }())))

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(19);
	__webpack_require__(68);
	__webpack_require__(69);
	__webpack_require__(70);
	__webpack_require__(71);
	__webpack_require__(73);
	__webpack_require__(76);
	__webpack_require__(77);
	__webpack_require__(78);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(82);
	__webpack_require__(83);
	__webpack_require__(84);
	__webpack_require__(86);
	__webpack_require__(88);
	__webpack_require__(90);
	__webpack_require__(92);
	__webpack_require__(95);
	__webpack_require__(96);
	__webpack_require__(97);
	__webpack_require__(101);
	__webpack_require__(103);
	__webpack_require__(105);
	__webpack_require__(108);
	__webpack_require__(109);
	__webpack_require__(110);
	__webpack_require__(111);
	__webpack_require__(113);
	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(127);
	__webpack_require__(129);
	__webpack_require__(130);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(133);
	__webpack_require__(134);
	__webpack_require__(135);
	__webpack_require__(136);
	__webpack_require__(137);
	__webpack_require__(138);
	__webpack_require__(139);
	__webpack_require__(140);
	__webpack_require__(141);
	__webpack_require__(142);
	__webpack_require__(147);
	__webpack_require__(148);
	__webpack_require__(152);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(157);
	__webpack_require__(158);
	__webpack_require__(159);
	__webpack_require__(160);
	__webpack_require__(161);
	__webpack_require__(162);
	__webpack_require__(163);
	__webpack_require__(164);
	__webpack_require__(165);
	__webpack_require__(166);
	__webpack_require__(167);
	__webpack_require__(168);
	__webpack_require__(169);
	__webpack_require__(170);
	__webpack_require__(171);
	__webpack_require__(172);
	__webpack_require__(173);
	__webpack_require__(175);
	__webpack_require__(176);
	__webpack_require__(182);
	__webpack_require__(183);
	__webpack_require__(185);
	__webpack_require__(186);
	__webpack_require__(187);
	__webpack_require__(191);
	__webpack_require__(192);
	__webpack_require__(193);
	__webpack_require__(194);
	__webpack_require__(195);
	__webpack_require__(197);
	__webpack_require__(198);
	__webpack_require__(199);
	__webpack_require__(200);
	__webpack_require__(203);
	__webpack_require__(205);
	__webpack_require__(206);
	__webpack_require__(207);
	__webpack_require__(209);
	__webpack_require__(211);
	__webpack_require__(213);
	__webpack_require__(214);
	__webpack_require__(215);
	__webpack_require__(217);
	__webpack_require__(218);
	__webpack_require__(219);
	__webpack_require__(220);
	__webpack_require__(227);
	__webpack_require__(230);
	__webpack_require__(231);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(237);
	__webpack_require__(238);
	__webpack_require__(240);
	__webpack_require__(241);
	__webpack_require__(242);
	__webpack_require__(243);
	__webpack_require__(244);
	__webpack_require__(245);
	__webpack_require__(246);
	__webpack_require__(247);
	__webpack_require__(248);
	__webpack_require__(249);
	__webpack_require__(250);
	__webpack_require__(251);
	__webpack_require__(252);
	__webpack_require__(253);
	__webpack_require__(254);
	__webpack_require__(255);
	__webpack_require__(256);
	__webpack_require__(257);
	__webpack_require__(258);
	__webpack_require__(260);
	__webpack_require__(261);
	__webpack_require__(262);
	module.exports = __webpack_require__(25);

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(20)
	  , has            = __webpack_require__(21)
	  , DESCRIPTORS    = __webpack_require__(22)
	  , $export        = __webpack_require__(24)
	  , redefine       = __webpack_require__(34)
	  , META           = __webpack_require__(38).KEY
	  , $fails         = __webpack_require__(23)
	  , shared         = __webpack_require__(39)
	  , setToStringTag = __webpack_require__(40)
	  , uid            = __webpack_require__(35)
	  , wks            = __webpack_require__(41)
	  , wksExt         = __webpack_require__(42)
	  , wksDefine      = __webpack_require__(43)
	  , keyOf          = __webpack_require__(45)
	  , enumKeys       = __webpack_require__(58)
	  , isArray        = __webpack_require__(61)
	  , anObject       = __webpack_require__(28)
	  , toIObject      = __webpack_require__(48)
	  , toPrimitive    = __webpack_require__(32)
	  , createDesc     = __webpack_require__(33)
	  , _create        = __webpack_require__(62)
	  , gOPNExt        = __webpack_require__(65)
	  , $GOPD          = __webpack_require__(67)
	  , $DP            = __webpack_require__(27)
	  , $keys          = __webpack_require__(46)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;

	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });

	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(66).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(60).f  = $propertyIsEnumerable;
	  __webpack_require__(59).f = $getOwnPropertySymbols;

	  if(DESCRIPTORS && !__webpack_require__(44)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});

	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(26)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(23)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ }),
/* 23 */
/***/ (function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(20)
	  , core      = __webpack_require__(25)
	  , hide      = __webpack_require__(26)
	  , redefine  = __webpack_require__(34)
	  , ctx       = __webpack_require__(36)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
	    , key, own, out, exp;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if(target)redefine(target, key, out, type & $export.U);
	    // export
	    if(exports[key] != out)hide(exports, key, exp);
	    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(27)
	  , createDesc = __webpack_require__(33);
	module.exports = __webpack_require__(22) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(28)
	  , IE8_DOM_DEFINE = __webpack_require__(30)
	  , toPrimitive    = __webpack_require__(32)
	  , dP             = Object.defineProperty;

	exports.f = __webpack_require__(22) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(29);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(22) && !__webpack_require__(23)(function(){
	  return Object.defineProperty(__webpack_require__(31)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(29)
	  , document = __webpack_require__(20).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(29);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(20)
	  , hide      = __webpack_require__(26)
	  , has       = __webpack_require__(21)
	  , SRC       = __webpack_require__(35)('src')
	  , TO_STRING = 'toString'
	  , $toString = Function[TO_STRING]
	  , TPL       = ('' + $toString).split(TO_STRING);

	__webpack_require__(25).inspectSource = function(it){
	  return $toString.call(it);
	};

	(module.exports = function(O, key, val, safe){
	  var isFunction = typeof val == 'function';
	  if(isFunction)has(val, 'name') || hide(val, 'name', key);
	  if(O[key] === val)return;
	  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if(O === global){
	    O[key] = val;
	  } else {
	    if(!safe){
	      delete O[key];
	      hide(O, key, val);
	    } else {
	      if(O[key])O[key] = val;
	      else hide(O, key, val);
	    }
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString(){
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(37);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(35)('meta')
	  , isObject = __webpack_require__(29)
	  , has      = __webpack_require__(21)
	  , setDesc  = __webpack_require__(27).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(23)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(20)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(27).f
	  , has = __webpack_require__(21)
	  , TAG = __webpack_require__(41)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(39)('wks')
	  , uid        = __webpack_require__(35)
	  , Symbol     = __webpack_require__(20).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(41);

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(20)
	  , core           = __webpack_require__(25)
	  , LIBRARY        = __webpack_require__(44)
	  , wksExt         = __webpack_require__(42)
	  , defineProperty = __webpack_require__(27).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ }),
/* 44 */
/***/ (function(module, exports) {

	module.exports = false;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(46)
	  , toIObject = __webpack_require__(48);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(47)
	  , enumBugKeys = __webpack_require__(57);

	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(21)
	  , toIObject    = __webpack_require__(48)
	  , arrayIndexOf = __webpack_require__(52)(false)
	  , IE_PROTO     = __webpack_require__(56)('IE_PROTO');

	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(49)
	  , defined = __webpack_require__(51);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(50);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ }),
/* 50 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ }),
/* 51 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(48)
	  , toLength  = __webpack_require__(53)
	  , toIndex   = __webpack_require__(55);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(54)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ }),
/* 54 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(54)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(39)('keys')
	  , uid    = __webpack_require__(35);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ }),
/* 57 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(46)
	  , gOPS    = __webpack_require__(59)
	  , pIE     = __webpack_require__(60);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ }),
/* 59 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 60 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(50);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(28)
	  , dPs         = __webpack_require__(63)
	  , enumBugKeys = __webpack_require__(57)
	  , IE_PROTO    = __webpack_require__(56)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(31)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(64).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(27)
	  , anObject = __webpack_require__(28)
	  , getKeys  = __webpack_require__(46);

	module.exports = __webpack_require__(22) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(20).document && document.documentElement;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(48)
	  , gOPN      = __webpack_require__(66).f
	  , toString  = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};

	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(47)
	  , hiddenKeys = __webpack_require__(57).concat('length', 'prototype');

	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(60)
	  , createDesc     = __webpack_require__(33)
	  , toIObject      = __webpack_require__(48)
	  , toPrimitive    = __webpack_require__(32)
	  , has            = __webpack_require__(21)
	  , IE8_DOM_DEFINE = __webpack_require__(30)
	  , gOPD           = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(22) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(24)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(62)});

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(24);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(22), 'Object', {defineProperty: __webpack_require__(27).f});

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(24);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(22), 'Object', {defineProperties: __webpack_require__(63)});

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject                 = __webpack_require__(48)
	  , $getOwnPropertyDescriptor = __webpack_require__(67).f;

	__webpack_require__(72)('getOwnPropertyDescriptor', function(){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(24)
	  , core    = __webpack_require__(25)
	  , fails   = __webpack_require__(23);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(74)
	  , $getPrototypeOf = __webpack_require__(75);

	__webpack_require__(72)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(51);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(21)
	  , toObject    = __webpack_require__(74)
	  , IE_PROTO    = __webpack_require__(56)('IE_PROTO')
	  , ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(74)
	  , $keys    = __webpack_require__(46);

	__webpack_require__(72)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(72)('getOwnPropertyNames', function(){
	  return __webpack_require__(65).f;
	});

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(29)
	  , meta     = __webpack_require__(38).onFreeze;

	__webpack_require__(72)('freeze', function($freeze){
	  return function freeze(it){
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(29)
	  , meta     = __webpack_require__(38).onFreeze;

	__webpack_require__(72)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(29)
	  , meta     = __webpack_require__(38).onFreeze;

	__webpack_require__(72)('preventExtensions', function($preventExtensions){
	  return function preventExtensions(it){
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(29);

	__webpack_require__(72)('isFrozen', function($isFrozen){
	  return function isFrozen(it){
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(29);

	__webpack_require__(72)('isSealed', function($isSealed){
	  return function isSealed(it){
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(29);

	__webpack_require__(72)('isExtensible', function($isExtensible){
	  return function isExtensible(it){
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(24);

	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(85)});

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(46)
	  , gOPS     = __webpack_require__(59)
	  , pIE      = __webpack_require__(60)
	  , toObject = __webpack_require__(74)
	  , IObject  = __webpack_require__(49)
	  , $assign  = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(23)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(24);
	$export($export.S, 'Object', {is: __webpack_require__(87)});

/***/ }),
/* 87 */
/***/ (function(module, exports) {

	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y){
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(24);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(89).set});

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(29)
	  , anObject = __webpack_require__(28);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(36)(Function.call, __webpack_require__(67).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(91)
	  , test    = {};
	test[__webpack_require__(41)('toStringTag')] = 'z';
	if(test + '' != '[object z]'){
	  __webpack_require__(34)(Object.prototype, 'toString', function toString(){
	    return '[object ' + classof(this) + ']';
	  }, true);
	}

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(50)
	  , TAG = __webpack_require__(41)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(24);

	$export($export.P, 'Function', {bind: __webpack_require__(93)});

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction  = __webpack_require__(37)
	  , isObject   = __webpack_require__(29)
	  , invoke     = __webpack_require__(94)
	  , arraySlice = [].slice
	  , factories  = {};

	var construct = function(F, len, args){
	  if(!(len in factories)){
	    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};

	module.exports = Function.bind || function bind(that /*, args... */){
	  var fn       = aFunction(this)
	    , partArgs = arraySlice.call(arguments, 1);
	  var bound = function(/* args... */){
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if(isObject(fn.prototype))bound.prototype = fn.prototype;
	  return bound;
	};

/***/ }),
/* 94 */
/***/ (function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(27).f
	  , createDesc = __webpack_require__(33)
	  , has        = __webpack_require__(21)
	  , FProto     = Function.prototype
	  , nameRE     = /^\s*function ([^ (]*)/
	  , NAME       = 'name';

	var isExtensible = Object.isExtensible || function(){
	  return true;
	};

	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(22) && dP(FProto, NAME, {
	  configurable: true,
	  get: function(){
	    try {
	      var that = this
	        , name = ('' + that).match(nameRE)[1];
	      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
	      return name;
	    } catch(e){
	      return '';
	    }
	  }
	});

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var isObject       = __webpack_require__(29)
	  , getPrototypeOf = __webpack_require__(75)
	  , HAS_INSTANCE   = __webpack_require__(41)('hasInstance')
	  , FunctionProto  = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if(!(HAS_INSTANCE in FunctionProto))__webpack_require__(27).f(FunctionProto, HAS_INSTANCE, {value: function(O){
	  if(typeof this != 'function' || !isObject(O))return false;
	  if(!isObject(this.prototype))return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
	  return false;
	}});

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(24)
	  , $parseInt = __webpack_require__(98);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(20).parseInt
	  , $trim     = __webpack_require__(99).trim
	  , ws        = __webpack_require__(100)
	  , hex       = /^[\-+]?0[xX]/;

	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(24)
	  , defined = __webpack_require__(51)
	  , fails   = __webpack_require__(23)
	  , spaces  = __webpack_require__(100)
	  , space   = '[' + spaces + ']'
	  , non     = '\u200b\u0085'
	  , ltrim   = RegExp('^' + space + space + '*')
	  , rtrim   = RegExp(space + space + '*$');

	var exporter = function(KEY, exec, ALIAS){
	  var exp   = {};
	  var FORCE = fails(function(){
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if(ALIAS)exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};

	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function(string, TYPE){
	  string = String(defined(string));
	  if(TYPE & 1)string = string.replace(ltrim, '');
	  if(TYPE & 2)string = string.replace(rtrim, '');
	  return string;
	};

	module.exports = exporter;

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(24)
	  , $parseFloat = __webpack_require__(102);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(20).parseFloat
	  , $trim       = __webpack_require__(99).trim;

	module.exports = 1 / $parseFloat(__webpack_require__(100) + '-0') !== -Infinity ? function parseFloat(str){
	  var string = $trim(String(str), 3)
	    , result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(20)
	  , has               = __webpack_require__(21)
	  , cof               = __webpack_require__(50)
	  , inheritIfRequired = __webpack_require__(104)
	  , toPrimitive       = __webpack_require__(32)
	  , fails             = __webpack_require__(23)
	  , gOPN              = __webpack_require__(66).f
	  , gOPD              = __webpack_require__(67).f
	  , dP                = __webpack_require__(27).f
	  , $trim             = __webpack_require__(99).trim
	  , NUMBER            = 'Number'
	  , $Number           = global[NUMBER]
	  , Base              = $Number
	  , proto             = $Number.prototype
	  // Opera ~12 has broken Object#toString
	  , BROKEN_COF        = cof(__webpack_require__(62)(proto)) == NUMBER
	  , TRIM              = 'trim' in String.prototype;

	// 7.1.3 ToNumber(argument)
	var toNumber = function(argument){
	  var it = toPrimitive(argument, false);
	  if(typeof it == 'string' && it.length > 2){
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0)
	      , third, radix, maxCode;
	    if(first === 43 || first === 45){
	      third = it.charCodeAt(2);
	      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if(first === 48){
	      switch(it.charCodeAt(1)){
	        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default : return +it;
	      }
	      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if(code < 48 || code > maxCode)return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
	  $Number = function Number(value){
	    var it = arguments.length < 1 ? 0 : value
	      , that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
	        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for(var keys = __webpack_require__(22) ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys.length > j; j++){
	    if(has(Base, key = keys[j]) && !has($Number, key)){
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(34)(global, NUMBER, $Number);
	}

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject       = __webpack_require__(29)
	  , setPrototypeOf = __webpack_require__(89).set;
	module.exports = function(that, target, C){
	  var P, S = target.constructor;
	  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
	    setPrototypeOf(that, P);
	  } return that;
	};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(24)
	  , toInteger    = __webpack_require__(54)
	  , aNumberValue = __webpack_require__(106)
	  , repeat       = __webpack_require__(107)
	  , $toFixed     = 1..toFixed
	  , floor        = Math.floor
	  , data         = [0, 0, 0, 0, 0, 0]
	  , ERROR        = 'Number.toFixed: incorrect invocation!'
	  , ZERO         = '0';

	var multiply = function(n, c){
	  var i  = -1
	    , c2 = c;
	  while(++i < 6){
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function(n){
	  var i = 6
	    , c = 0;
	  while(--i >= 0){
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function(){
	  var i = 6
	    , s = '';
	  while(--i >= 0){
	    if(s !== '' || i === 0 || data[i] !== 0){
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function(x, n, acc){
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function(x){
	  var n  = 0
	    , x2 = x;
	  while(x2 >= 4096){
	    n += 12;
	    x2 /= 4096;
	  }
	  while(x2 >= 2){
	    n  += 1;
	    x2 /= 2;
	  } return n;
	};

	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128..toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(23)(function(){
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits){
	    var x = aNumberValue(this, ERROR)
	      , f = toInteger(fractionDigits)
	      , s = ''
	      , m = ZERO
	      , e, z, j, k;
	    if(f < 0 || f > 20)throw RangeError(ERROR);
	    if(x != x)return 'NaN';
	    if(x <= -1e21 || x >= 1e21)return String(x);
	    if(x < 0){
	      s = '-';
	      x = -x;
	    }
	    if(x > 1e-21){
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if(e > 0){
	        multiply(0, z);
	        j = f;
	        while(j >= 7){
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while(j >= 23){
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if(f > 0){
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(50);
	module.exports = function(it, msg){
	  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
	  return +it;
	};

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(54)
	  , defined   = __webpack_require__(51);

	module.exports = function repeat(count){
	  var str = String(defined(this))
	    , res = ''
	    , n   = toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(24)
	  , $fails       = __webpack_require__(23)
	  , aNumberValue = __webpack_require__(106)
	  , $toPrecision = 1..toPrecision;

	$export($export.P + $export.F * ($fails(function(){
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function(){
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision){
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
	  }
	});

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(24);

	$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export   = __webpack_require__(24)
	  , _isFinite = __webpack_require__(20).isFinite;

	$export($export.S, 'Number', {
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(24);

	$export($export.S, 'Number', {isInteger: __webpack_require__(112)});

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(29)
	  , floor    = Math.floor;
	module.exports = function isInteger(it){
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(24);

	$export($export.S, 'Number', {
	  isNaN: function isNaN(number){
	    return number != number;
	  }
	});

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.5 Number.isSafeInteger(number)
	var $export   = __webpack_require__(24)
	  , isInteger = __webpack_require__(112)
	  , abs       = Math.abs;

	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number){
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(24);

	$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(24);

	$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(24)
	  , $parseFloat = __webpack_require__(102);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(24)
	  , $parseInt = __webpack_require__(98);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(24)
	  , log1p   = __webpack_require__(120)
	  , sqrt    = Math.sqrt
	  , $acosh  = Math.acosh;

	$export($export.S + $export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x){
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

/***/ }),
/* 120 */
/***/ (function(module, exports) {

	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x){
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(24)
	  , $asinh  = Math.asinh;

	function asinh(x){
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}

	// Tor Browser bug: Math.asinh(0) -> -0 
	$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(24)
	  , $atanh  = Math.atanh;

	// Tor Browser bug: Math.atanh(-0) -> 0 
	$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x){
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(24)
	  , sign    = __webpack_require__(124);

	$export($export.S, 'Math', {
	  cbrt: function cbrt(x){
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

/***/ }),
/* 124 */
/***/ (function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x){
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(24);

	$export($export.S, 'Math', {
	  clz32: function clz32(x){
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(24)
	  , exp     = Math.exp;

	$export($export.S, 'Math', {
	  cosh: function cosh(x){
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(24)
	  , $expm1  = __webpack_require__(128);

	$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});

/***/ }),
/* 128 */
/***/ (function(module, exports) {

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	module.exports = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x){
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var $export   = __webpack_require__(24)
	  , sign      = __webpack_require__(124)
	  , pow       = Math.pow
	  , EPSILON   = pow(2, -52)
	  , EPSILON32 = pow(2, -23)
	  , MAX32     = pow(2, 127) * (2 - EPSILON32)
	  , MIN32     = pow(2, -126);

	var roundTiesToEven = function(n){
	  return n + 1 / EPSILON - 1 / EPSILON;
	};


	$export($export.S, 'Math', {
	  fround: function fround(x){
	    var $abs  = Math.abs(x)
	      , $sign = sign(x)
	      , a, result;
	    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if(result > MAX32 || result != result)return $sign * Infinity;
	    return $sign * result;
	  }
	});

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(24)
	  , abs     = Math.abs;

	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
	    var sum  = 0
	      , i    = 0
	      , aLen = arguments.length
	      , larg = 0
	      , arg, div;
	    while(i < aLen){
	      arg = abs(arguments[i++]);
	      if(larg < arg){
	        div  = larg / arg;
	        sum  = sum * div * div + 1;
	        larg = arg;
	      } else if(arg > 0){
	        div  = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(24)
	  , $imul   = Math.imul;

	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(23)(function(){
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y){
	    var UINT16 = 0xffff
	      , xn = +x
	      , yn = +y
	      , xl = UINT16 & xn
	      , yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(24);

	$export($export.S, 'Math', {
	  log10: function log10(x){
	    return Math.log(x) / Math.LN10;
	  }
	});

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(24);

	$export($export.S, 'Math', {log1p: __webpack_require__(120)});

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(24);

	$export($export.S, 'Math', {
	  log2: function log2(x){
	    return Math.log(x) / Math.LN2;
	  }
	});

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(24);

	$export($export.S, 'Math', {sign: __webpack_require__(124)});

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(24)
	  , expm1   = __webpack_require__(128)
	  , exp     = Math.exp;

	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(23)(function(){
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x){
	    return Math.abs(x = +x) < 1
	      ? (expm1(x) - expm1(-x)) / 2
	      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(24)
	  , expm1   = __webpack_require__(128)
	  , exp     = Math.exp;

	$export($export.S, 'Math', {
	  tanh: function tanh(x){
	    var a = expm1(x = +x)
	      , b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(24);

	$export($export.S, 'Math', {
	  trunc: function trunc(it){
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	var $export        = __webpack_require__(24)
	  , toIndex        = __webpack_require__(55)
	  , fromCharCode   = String.fromCharCode
	  , $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
	    var res  = []
	      , aLen = arguments.length
	      , i    = 0
	      , code;
	    while(aLen > i){
	      code = +arguments[i++];
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(24)
	  , toIObject = __webpack_require__(48)
	  , toLength  = __webpack_require__(53);

	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite){
	    var tpl  = toIObject(callSite.raw)
	      , len  = toLength(tpl.length)
	      , aLen = arguments.length
	      , res  = []
	      , i    = 0;
	    while(len > i){
	      res.push(String(tpl[i++]));
	      if(i < aLen)res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(99)('trim', function($trim){
	  return function trim(){
	    return $trim(this, 3);
	  };
	});

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(143)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(144)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(54)
	  , defined   = __webpack_require__(51);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(44)
	  , $export        = __webpack_require__(24)
	  , redefine       = __webpack_require__(34)
	  , hide           = __webpack_require__(26)
	  , has            = __webpack_require__(21)
	  , Iterators      = __webpack_require__(145)
	  , $iterCreate    = __webpack_require__(146)
	  , setToStringTag = __webpack_require__(40)
	  , getPrototypeOf = __webpack_require__(75)
	  , ITERATOR       = __webpack_require__(41)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ }),
/* 145 */
/***/ (function(module, exports) {

	module.exports = {};

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(62)
	  , descriptor     = __webpack_require__(33)
	  , setToStringTag = __webpack_require__(40)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(26)(IteratorPrototype, __webpack_require__(41)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(24)
	  , $at     = __webpack_require__(143)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos){
	    return $at(this, pos);
	  }
	});

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export   = __webpack_require__(24)
	  , toLength  = __webpack_require__(53)
	  , context   = __webpack_require__(149)
	  , ENDS_WITH = 'endsWith'
	  , $endsWith = ''[ENDS_WITH];

	$export($export.P + $export.F * __webpack_require__(151)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    var that = context(this, searchString, ENDS_WITH)
	      , endPosition = arguments.length > 1 ? arguments[1] : undefined
	      , len    = toLength(that.length)
	      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
	      , search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(150)
	  , defined  = __webpack_require__(51);

	module.exports = function(that, searchString, NAME){
	  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(29)
	  , cof      = __webpack_require__(50)
	  , MATCH    = __webpack_require__(41)('match');
	module.exports = function(it){
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(41)('match');
	module.exports = function(KEY){
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch(e){
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch(f){ /* empty */ }
	  } return true;
	};

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export  = __webpack_require__(24)
	  , context  = __webpack_require__(149)
	  , INCLUDES = 'includes';

	$export($export.P + $export.F * __webpack_require__(151)(INCLUDES), 'String', {
	  includes: function includes(searchString /*, position = 0 */){
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(24);

	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(107)
	});

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	var $export     = __webpack_require__(24)
	  , toLength    = __webpack_require__(53)
	  , context     = __webpack_require__(149)
	  , STARTS_WITH = 'startsWith'
	  , $startsWith = ''[STARTS_WITH];

	$export($export.P + $export.F * __webpack_require__(151)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /*, position = 0 */){
	    var that   = context(this, searchString, STARTS_WITH)
	      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
	      , search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	__webpack_require__(156)('anchor', function(createHTML){
	  return function anchor(name){
	    return createHTML(this, 'a', 'name', name);
	  }
	});

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(24)
	  , fails   = __webpack_require__(23)
	  , defined = __webpack_require__(51)
	  , quot    = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function(string, tag, attribute, value) {
	  var S  = String(defined(string))
	    , p1 = '<' + tag;
	  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function(NAME, exec){
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function(){
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	__webpack_require__(156)('big', function(createHTML){
	  return function big(){
	    return createHTML(this, 'big', '', '');
	  }
	});

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	__webpack_require__(156)('blink', function(createHTML){
	  return function blink(){
	    return createHTML(this, 'blink', '', '');
	  }
	});

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	__webpack_require__(156)('bold', function(createHTML){
	  return function bold(){
	    return createHTML(this, 'b', '', '');
	  }
	});

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	__webpack_require__(156)('fixed', function(createHTML){
	  return function fixed(){
	    return createHTML(this, 'tt', '', '');
	  }
	});

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	__webpack_require__(156)('fontcolor', function(createHTML){
	  return function fontcolor(color){
	    return createHTML(this, 'font', 'color', color);
	  }
	});

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	__webpack_require__(156)('fontsize', function(createHTML){
	  return function fontsize(size){
	    return createHTML(this, 'font', 'size', size);
	  }
	});

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	__webpack_require__(156)('italics', function(createHTML){
	  return function italics(){
	    return createHTML(this, 'i', '', '');
	  }
	});

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	__webpack_require__(156)('link', function(createHTML){
	  return function link(url){
	    return createHTML(this, 'a', 'href', url);
	  }
	});

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	__webpack_require__(156)('small', function(createHTML){
	  return function small(){
	    return createHTML(this, 'small', '', '');
	  }
	});

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	__webpack_require__(156)('strike', function(createHTML){
	  return function strike(){
	    return createHTML(this, 'strike', '', '');
	  }
	});

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	__webpack_require__(156)('sub', function(createHTML){
	  return function sub(){
	    return createHTML(this, 'sub', '', '');
	  }
	});

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	__webpack_require__(156)('sup', function(createHTML){
	  return function sup(){
	    return createHTML(this, 'sup', '', '');
	  }
	});

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(24);

	$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export     = __webpack_require__(24)
	  , toObject    = __webpack_require__(74)
	  , toPrimitive = __webpack_require__(32);

	$export($export.P + $export.F * __webpack_require__(23)(function(){
	  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
	}), 'Date', {
	  toJSON: function toJSON(key){
	    var O  = toObject(this)
	      , pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(24)
	  , fails   = __webpack_require__(23)
	  , getTime = Date.prototype.getTime;

	var lz = function(num){
	  return num > 9 ? num : '0' + num;
	};

	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (fails(function(){
	  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
	}) || !fails(function(){
	  new Date(NaN).toISOString();
	})), 'Date', {
	  toISOString: function toISOString(){
	    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
	    var d = this
	      , y = d.getUTCFullYear()
	      , m = d.getUTCMilliseconds()
	      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	  }
	});

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	var DateProto    = Date.prototype
	  , INVALID_DATE = 'Invalid Date'
	  , TO_STRING    = 'toString'
	  , $toString    = DateProto[TO_STRING]
	  , getTime      = DateProto.getTime;
	if(new Date(NaN) + '' != INVALID_DATE){
	  __webpack_require__(34)(DateProto, TO_STRING, function toString(){
	    var value = getTime.call(this);
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	var TO_PRIMITIVE = __webpack_require__(41)('toPrimitive')
	  , proto        = Date.prototype;

	if(!(TO_PRIMITIVE in proto))__webpack_require__(26)(proto, TO_PRIMITIVE, __webpack_require__(174));

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var anObject    = __webpack_require__(28)
	  , toPrimitive = __webpack_require__(32)
	  , NUMBER      = 'number';

	module.exports = function(hint){
	  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
	  return toPrimitive(anObject(this), hint != NUMBER);
	};

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(24);

	$export($export.S, 'Array', {isArray: __webpack_require__(61)});

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(36)
	  , $export        = __webpack_require__(24)
	  , toObject       = __webpack_require__(74)
	  , call           = __webpack_require__(177)
	  , isArrayIter    = __webpack_require__(178)
	  , toLength       = __webpack_require__(53)
	  , createProperty = __webpack_require__(179)
	  , getIterFn      = __webpack_require__(180);

	$export($export.S + $export.F * !__webpack_require__(181)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(28);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(145)
	  , ITERATOR   = __webpack_require__(41)('iterator')
	  , ArrayProto = Array.prototype;

	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(27)
	  , createDesc      = __webpack_require__(33);

	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(91)
	  , ITERATOR  = __webpack_require__(41)('iterator')
	  , Iterators = __webpack_require__(145);
	module.exports = __webpack_require__(25).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(41)('iterator')
	  , SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }

	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export        = __webpack_require__(24)
	  , createProperty = __webpack_require__(179);

	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(23)(function(){
	  function F(){}
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */){
	    var index  = 0
	      , aLen   = arguments.length
	      , result = new (typeof this == 'function' ? this : Array)(aLen);
	    while(aLen > index)createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export   = __webpack_require__(24)
	  , toIObject = __webpack_require__(48)
	  , arrayJoin = [].join;

	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(49) != Object || !__webpack_require__(184)(arrayJoin)), 'Array', {
	  join: function join(separator){
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	var fails = __webpack_require__(23);

	module.exports = function(method, arg){
	  return !!method && fails(function(){
	    arg ? method.call(null, function(){}, 1) : method.call(null);
	  });
	};

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export    = __webpack_require__(24)
	  , html       = __webpack_require__(64)
	  , cof        = __webpack_require__(50)
	  , toIndex    = __webpack_require__(55)
	  , toLength   = __webpack_require__(53)
	  , arraySlice = [].slice;

	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(23)(function(){
	  if(html)arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return arraySlice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export   = __webpack_require__(24)
	  , aFunction = __webpack_require__(37)
	  , toObject  = __webpack_require__(74)
	  , fails     = __webpack_require__(23)
	  , $sort     = [].sort
	  , test      = [1, 2, 3];

	$export($export.P + $export.F * (fails(function(){
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function(){
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(184)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn){
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export  = __webpack_require__(24)
	  , $forEach = __webpack_require__(188)(0)
	  , STRICT   = __webpack_require__(184)([].forEach, true);

	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */){
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(36)
	  , IObject  = __webpack_require__(49)
	  , toObject = __webpack_require__(74)
	  , toLength = __webpack_require__(53)
	  , asc      = __webpack_require__(189);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(190);

	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(29)
	  , isArray  = __webpack_require__(61)
	  , SPECIES  = __webpack_require__(41)('species');

	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(24)
	  , $map    = __webpack_require__(188)(1);

	$export($export.P + $export.F * !__webpack_require__(184)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */){
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(24)
	  , $filter = __webpack_require__(188)(2);

	$export($export.P + $export.F * !__webpack_require__(184)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */){
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(24)
	  , $some   = __webpack_require__(188)(3);

	$export($export.P + $export.F * !__webpack_require__(184)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */){
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(24)
	  , $every  = __webpack_require__(188)(4);

	$export($export.P + $export.F * !__webpack_require__(184)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */){
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(24)
	  , $reduce = __webpack_require__(196);

	$export($export.P + $export.F * !__webpack_require__(184)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(37)
	  , toObject  = __webpack_require__(74)
	  , IObject   = __webpack_require__(49)
	  , toLength  = __webpack_require__(53);

	module.exports = function(that, callbackfn, aLen, memo, isRight){
	  aFunction(callbackfn);
	  var O      = toObject(that)
	    , self   = IObject(O)
	    , length = toLength(O.length)
	    , index  = isRight ? length - 1 : 0
	    , i      = isRight ? -1 : 1;
	  if(aLen < 2)for(;;){
	    if(index in self){
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if(isRight ? index < 0 : length <= index){
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(24)
	  , $reduce = __webpack_require__(196);

	$export($export.P + $export.F * !__webpack_require__(184)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(24)
	  , $indexOf      = __webpack_require__(52)(false)
	  , $native       = [].indexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(184)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(24)
	  , toIObject     = __webpack_require__(48)
	  , toInteger     = __webpack_require__(54)
	  , toLength      = __webpack_require__(53)
	  , $native       = [].lastIndexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(184)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
	    // convert -0 to +0
	    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
	    var O      = toIObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
	    if(index < 0)index = length + index;
	    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
	    return -1;
	  }
	});

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(24);

	$export($export.P, 'Array', {copyWithin: __webpack_require__(201)});

	__webpack_require__(202)('copyWithin');

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	var toObject = __webpack_require__(74)
	  , toIndex  = __webpack_require__(55)
	  , toLength = __webpack_require__(53);

	module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
	  var O     = toObject(this)
	    , len   = toLength(O.length)
	    , to    = toIndex(target, len)
	    , from  = toIndex(start, len)
	    , end   = arguments.length > 2 ? arguments[2] : undefined
	    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
	    , inc   = 1;
	  if(from < to && to < from + count){
	    inc  = -1;
	    from += count - 1;
	    to   += count - 1;
	  }
	  while(count-- > 0){
	    if(from in O)O[to] = O[from];
	    else delete O[to];
	    to   += inc;
	    from += inc;
	  } return O;
	};

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(41)('unscopables')
	  , ArrayProto  = Array.prototype;
	if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(26)(ArrayProto, UNSCOPABLES, {});
	module.exports = function(key){
	  ArrayProto[UNSCOPABLES][key] = true;
	};

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(24);

	$export($export.P, 'Array', {fill: __webpack_require__(204)});

	__webpack_require__(202)('fill');

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	var toObject = __webpack_require__(74)
	  , toIndex  = __webpack_require__(55)
	  , toLength = __webpack_require__(53);
	module.exports = function fill(value /*, start = 0, end = @length */){
	  var O      = toObject(this)
	    , length = toLength(O.length)
	    , aLen   = arguments.length
	    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
	    , end    = aLen > 2 ? arguments[2] : undefined
	    , endPos = end === undefined ? length : toIndex(end, length);
	  while(endPos > index)O[index++] = value;
	  return O;
	};

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(24)
	  , $find   = __webpack_require__(188)(5)
	  , KEY     = 'find'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(202)(KEY);

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(24)
	  , $find   = __webpack_require__(188)(6)
	  , KEY     = 'findIndex'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(202)(KEY);

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(208)('Array');

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(20)
	  , dP          = __webpack_require__(27)
	  , DESCRIPTORS = __webpack_require__(22)
	  , SPECIES     = __webpack_require__(41)('species');

	module.exports = function(KEY){
	  var C = global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(202)
	  , step             = __webpack_require__(210)
	  , Iterators        = __webpack_require__(145)
	  , toIObject        = __webpack_require__(48);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(144)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ }),
/* 210 */
/***/ (function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	var global            = __webpack_require__(20)
	  , inheritIfRequired = __webpack_require__(104)
	  , dP                = __webpack_require__(27).f
	  , gOPN              = __webpack_require__(66).f
	  , isRegExp          = __webpack_require__(150)
	  , $flags            = __webpack_require__(212)
	  , $RegExp           = global.RegExp
	  , Base              = $RegExp
	  , proto             = $RegExp.prototype
	  , re1               = /a/g
	  , re2               = /a/g
	  // "new" creates a new object, old webkit buggy here
	  , CORRECT_NEW       = new $RegExp(re1) !== re1;

	if(__webpack_require__(22) && (!CORRECT_NEW || __webpack_require__(23)(function(){
	  re2[__webpack_require__(41)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))){
	  $RegExp = function RegExp(p, f){
	    var tiRE = this instanceof $RegExp
	      , piRE = isRegExp(p)
	      , fiU  = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function(key){
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function(){ return Base[key]; },
	      set: function(it){ Base[key] = it; }
	    });
	  };
	  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(34)(global, 'RegExp', $RegExp);
	}

	__webpack_require__(208)('RegExp');

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(28);
	module.exports = function(){
	  var that   = anObject(this)
	    , result = '';
	  if(that.global)     result += 'g';
	  if(that.ignoreCase) result += 'i';
	  if(that.multiline)  result += 'm';
	  if(that.unicode)    result += 'u';
	  if(that.sticky)     result += 'y';
	  return result;
	};

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(214);
	var anObject    = __webpack_require__(28)
	  , $flags      = __webpack_require__(212)
	  , DESCRIPTORS = __webpack_require__(22)
	  , TO_STRING   = 'toString'
	  , $toString   = /./[TO_STRING];

	var define = function(fn){
	  __webpack_require__(34)(RegExp.prototype, TO_STRING, fn, true);
	};

	// 21.2.5.14 RegExp.prototype.toString()
	if(__webpack_require__(23)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
	  define(function toString(){
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if($toString.name != TO_STRING){
	  define(function toString(){
	    return $toString.call(this);
	  });
	}

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if(__webpack_require__(22) && /./g.flags != 'g')__webpack_require__(27).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(212)
	});

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	// @@match logic
	__webpack_require__(216)('match', 1, function(defined, MATCH, $match){
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var hide     = __webpack_require__(26)
	  , redefine = __webpack_require__(34)
	  , fails    = __webpack_require__(23)
	  , defined  = __webpack_require__(51)
	  , wks      = __webpack_require__(41);

	module.exports = function(KEY, length, exec){
	  var SYMBOL   = wks(KEY)
	    , fns      = exec(defined, SYMBOL, ''[KEY])
	    , strfn    = fns[0]
	    , rxfn     = fns[1];
	  if(fails(function(){
	    var O = {};
	    O[SYMBOL] = function(){ return 7; };
	    return ''[KEY](O) != 7;
	  })){
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function(string, arg){ return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function(string){ return rxfn.call(string, this); }
	    );
	  }
	};

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	// @@replace logic
	__webpack_require__(216)('replace', 2, function(defined, REPLACE, $replace){
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue){
	    'use strict';
	    var O  = defined(this)
	      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined
	      ? fn.call(searchValue, O, replaceValue)
	      : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	// @@search logic
	__webpack_require__(216)('search', 1, function(defined, SEARCH, $search){
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	// @@split logic
	__webpack_require__(216)('split', 2, function(defined, SPLIT, $split){
	  'use strict';
	  var isRegExp   = __webpack_require__(150)
	    , _split     = $split
	    , $push      = [].push
	    , $SPLIT     = 'split'
	    , LENGTH     = 'length'
	    , LAST_INDEX = 'lastIndex';
	  if(
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ){
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function(separator, limit){
	      var string = String(this);
	      if(separator === undefined && limit === 0)return [];
	      // If `separator` is not a regex, use native split
	      if(!isRegExp(separator))return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while(match = separatorCopy.exec(string)){
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if(lastIndex > lastLastIndex){
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
	            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
	          });
	          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if(output[LENGTH] >= splitLimit)break;
	        }
	        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if(lastLastIndex === string[LENGTH]){
	        if(lastLength || !separatorCopy.test(''))output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
	    $split = function(separator, limit){
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit){
	    var O  = defined(this)
	      , fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(44)
	  , global             = __webpack_require__(20)
	  , ctx                = __webpack_require__(36)
	  , classof            = __webpack_require__(91)
	  , $export            = __webpack_require__(24)
	  , isObject           = __webpack_require__(29)
	  , aFunction          = __webpack_require__(37)
	  , anInstance         = __webpack_require__(221)
	  , forOf              = __webpack_require__(222)
	  , speciesConstructor = __webpack_require__(223)
	  , task               = __webpack_require__(224).set
	  , microtask          = __webpack_require__(225)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;

	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(41)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();

	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};

	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(226)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(40)($Promise, PROMISE);
	__webpack_require__(208)(PROMISE);
	Wrapper = __webpack_require__(25)[PROMISE];

	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(181)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ }),
/* 221 */
/***/ (function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(36)
	  , call        = __webpack_require__(177)
	  , isArrayIter = __webpack_require__(178)
	  , anObject    = __webpack_require__(28)
	  , toLength    = __webpack_require__(53)
	  , getIterFn   = __webpack_require__(180)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(28)
	  , aFunction = __webpack_require__(37)
	  , SPECIES   = __webpack_require__(41)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(36)
	  , invoke             = __webpack_require__(94)
	  , html               = __webpack_require__(64)
	  , cel                = __webpack_require__(31)
	  , global             = __webpack_require__(20)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(50)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(20)
	  , macrotask = __webpack_require__(224).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(50)(process) == 'process';

	module.exports = function(){
	  var head, last, notify;

	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };

	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }

	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(34);
	module.exports = function(target, src, safe){
	  for(var key in src)redefine(target, key, src[key], safe);
	  return target;
	};

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(228);

	// 23.1 Map Objects
	module.exports = __webpack_require__(229)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(27).f
	  , create      = __webpack_require__(62)
	  , redefineAll = __webpack_require__(226)
	  , ctx         = __webpack_require__(36)
	  , anInstance  = __webpack_require__(221)
	  , defined     = __webpack_require__(51)
	  , forOf       = __webpack_require__(222)
	  , $iterDefine = __webpack_require__(144)
	  , step        = __webpack_require__(210)
	  , setSpecies  = __webpack_require__(208)
	  , DESCRIPTORS = __webpack_require__(22)
	  , fastKey     = __webpack_require__(38).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';

	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(20)
	  , $export           = __webpack_require__(24)
	  , redefine          = __webpack_require__(34)
	  , redefineAll       = __webpack_require__(226)
	  , meta              = __webpack_require__(38)
	  , forOf             = __webpack_require__(222)
	  , anInstance        = __webpack_require__(221)
	  , isObject          = __webpack_require__(29)
	  , fails             = __webpack_require__(23)
	  , $iterDetect       = __webpack_require__(181)
	  , setToStringTag    = __webpack_require__(40)
	  , inheritIfRequired = __webpack_require__(104);

	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  var fixMethod = function(KEY){
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a){
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance             = new C
	      // early implementations not supports chaining
	      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
	      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
	      // most early implementations doesn't supports iterables, most modern - not close it correctly
	      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
	      // for early implementations -0 and +0 not the same
	      , BUGGY_ZERO = !IS_WEAK && fails(function(){
	        // V8 ~ Chromium 42- fails only with 5+ elements
	        var $instance = new C()
	          , index     = 5;
	        while(index--)$instance[ADDER](index, index);
	        return !$instance.has(-0);
	      });
	    if(!ACCEPT_ITERABLES){ 
	      C = wrapper(function(target, iterable){
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base, target, C);
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if(IS_WEAK && proto.clear)delete proto.clear;
	  }

	  setToStringTag(C, NAME);

	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);

	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

	  return C;
	};

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(228);

	// 23.2 Set Objects
	module.exports = __webpack_require__(229)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var each         = __webpack_require__(188)(0)
	  , redefine     = __webpack_require__(34)
	  , meta         = __webpack_require__(38)
	  , assign       = __webpack_require__(85)
	  , weak         = __webpack_require__(232)
	  , isObject     = __webpack_require__(29)
	  , getWeak      = meta.getWeak
	  , isExtensible = Object.isExtensible
	  , uncaughtFrozenStore = weak.ufstore
	  , tmp          = {}
	  , InternalMap;

	var wrapper = function(get){
	  return function WeakMap(){
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};

	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      var data = getWeak(key);
	      if(data === true)return uncaughtFrozenStore(this).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	};

	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(229)('WeakMap', wrapper, methods, weak, true, true);

	// IE11 WeakMap frozen keys fix
	if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  InternalMap = weak.getConstructor(wrapper);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = $WeakMap.prototype
	      , method = proto[key];
	    redefine(proto, key, function(a, b){
	      // store frozen objects on internal weakmap shim
	      if(isObject(a) && !isExtensible(a)){
	        if(!this._f)this._f = new InternalMap;
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll       = __webpack_require__(226)
	  , getWeak           = __webpack_require__(38).getWeak
	  , anObject          = __webpack_require__(28)
	  , isObject          = __webpack_require__(29)
	  , anInstance        = __webpack_require__(221)
	  , forOf             = __webpack_require__(222)
	  , createArrayMethod = __webpack_require__(188)
	  , $has              = __webpack_require__(21)
	  , arrayFind         = createArrayMethod(5)
	  , arrayFindIndex    = createArrayMethod(6)
	  , id                = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function(that){
	  return that._l || (that._l = new UncaughtFrozenStore);
	};
	var UncaughtFrozenStore = function(){
	  this.a = [];
	};
	var findUncaughtFrozen = function(store, key){
	  return arrayFind(store.a, function(it){
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function(key){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)return entry[1];
	  },
	  has: function(key){
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function(key, value){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function(key){
	    var index = arrayFindIndex(this.a, function(it){
	      return it[0] === key;
	    });
	    if(~index)this.a.splice(index, 1);
	    return !!~index;
	  }
	};

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var data = getWeak(anObject(key), true);
	    if(data === true)uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(232);

	// 23.4 WeakSet Objects
	__webpack_require__(229)('WeakSet', function(get){
	  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value){
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(24)
	  , $typed       = __webpack_require__(235)
	  , buffer       = __webpack_require__(236)
	  , anObject     = __webpack_require__(28)
	  , toIndex      = __webpack_require__(55)
	  , toLength     = __webpack_require__(53)
	  , isObject     = __webpack_require__(29)
	  , ArrayBuffer  = __webpack_require__(20).ArrayBuffer
	  , speciesConstructor = __webpack_require__(223)
	  , $ArrayBuffer = buffer.ArrayBuffer
	  , $DataView    = buffer.DataView
	  , $isView      = $typed.ABV && ArrayBuffer.isView
	  , $slice       = $ArrayBuffer.prototype.slice
	  , VIEW         = $typed.VIEW
	  , ARRAY_BUFFER = 'ArrayBuffer';

	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it){
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});

	$export($export.P + $export.U + $export.F * __webpack_require__(23)(function(){
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end){
	    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
	    var len    = anObject(this).byteLength
	      , first  = toIndex(start, len)
	      , final  = toIndex(end === undefined ? len : end, len)
	      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
	      , viewS  = new $DataView(this)
	      , viewT  = new $DataView(result)
	      , index  = 0;
	    while(first < final){
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});

	__webpack_require__(208)(ARRAY_BUFFER);

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(20)
	  , hide   = __webpack_require__(26)
	  , uid    = __webpack_require__(35)
	  , TYPED  = uid('typed_array')
	  , VIEW   = uid('view')
	  , ABV    = !!(global.ArrayBuffer && global.DataView)
	  , CONSTR = ABV
	  , i = 0, l = 9, Typed;

	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');

	while(i < l){
	  if(Typed = global[TypedArrayConstructors[i++]]){
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}

	module.exports = {
	  ABV:    ABV,
	  CONSTR: CONSTR,
	  TYPED:  TYPED,
	  VIEW:   VIEW
	};

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(20)
	  , DESCRIPTORS    = __webpack_require__(22)
	  , LIBRARY        = __webpack_require__(44)
	  , $typed         = __webpack_require__(235)
	  , hide           = __webpack_require__(26)
	  , redefineAll    = __webpack_require__(226)
	  , fails          = __webpack_require__(23)
	  , anInstance     = __webpack_require__(221)
	  , toInteger      = __webpack_require__(54)
	  , toLength       = __webpack_require__(53)
	  , gOPN           = __webpack_require__(66).f
	  , dP             = __webpack_require__(27).f
	  , arrayFill      = __webpack_require__(204)
	  , setToStringTag = __webpack_require__(40)
	  , ARRAY_BUFFER   = 'ArrayBuffer'
	  , DATA_VIEW      = 'DataView'
	  , PROTOTYPE      = 'prototype'
	  , WRONG_LENGTH   = 'Wrong length!'
	  , WRONG_INDEX    = 'Wrong index!'
	  , $ArrayBuffer   = global[ARRAY_BUFFER]
	  , $DataView      = global[DATA_VIEW]
	  , Math           = global.Math
	  , RangeError     = global.RangeError
	  , Infinity       = global.Infinity
	  , BaseBuffer     = $ArrayBuffer
	  , abs            = Math.abs
	  , pow            = Math.pow
	  , floor          = Math.floor
	  , log            = Math.log
	  , LN2            = Math.LN2
	  , BUFFER         = 'buffer'
	  , BYTE_LENGTH    = 'byteLength'
	  , BYTE_OFFSET    = 'byteOffset'
	  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
	  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
	  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

	// IEEE754 conversions based on https://github.com/feross/ieee754
	var packIEEE754 = function(value, mLen, nBytes){
	  var buffer = Array(nBytes)
	    , eLen   = nBytes * 8 - mLen - 1
	    , eMax   = (1 << eLen) - 1
	    , eBias  = eMax >> 1
	    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
	    , i      = 0
	    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
	    , e, m, c;
	  value = abs(value)
	  if(value != value || value === Infinity){
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if(value * (c = pow(2, -e)) < 1){
	      e--;
	      c *= 2;
	    }
	    if(e + eBias >= 1){
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if(value * c >= 2){
	      e++;
	      c /= 2;
	    }
	    if(e + eBias >= eMax){
	      m = 0;
	      e = eMax;
	    } else if(e + eBias >= 1){
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	};
	var unpackIEEE754 = function(buffer, mLen, nBytes){
	  var eLen  = nBytes * 8 - mLen - 1
	    , eMax  = (1 << eLen) - 1
	    , eBias = eMax >> 1
	    , nBits = eLen - 7
	    , i     = nBytes - 1
	    , s     = buffer[i--]
	    , e     = s & 127
	    , m;
	  s >>= 7;
	  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if(e === 0){
	    e = 1 - eBias;
	  } else if(e === eMax){
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	};

	var unpackI32 = function(bytes){
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	};
	var packI8 = function(it){
	  return [it & 0xff];
	};
	var packI16 = function(it){
	  return [it & 0xff, it >> 8 & 0xff];
	};
	var packI32 = function(it){
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	};
	var packF64 = function(it){
	  return packIEEE754(it, 52, 8);
	};
	var packF32 = function(it){
	  return packIEEE754(it, 23, 4);
	};

	var addGetter = function(C, key, internal){
	  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
	};

	var get = function(view, bytes, index, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	};
	var set = function(view, bytes, index, conversion, value, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = conversion(+value);
	  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	};

	var validateArrayBufferArguments = function(that, length){
	  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
	  var numberLength = +length
	    , byteLength   = toLength(numberLength);
	  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
	  return byteLength;
	};

	if(!$typed.ABV){
	  $ArrayBuffer = function ArrayBuffer(length){
	    var byteLength = validateArrayBufferArguments(this, length);
	    this._b       = arrayFill.call(Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength){
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH]
	      , offset       = toInteger(byteOffset);
	    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };

	  if(DESCRIPTORS){
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }

	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset){
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset){
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if(!fails(function(){
	    new $ArrayBuffer;     // eslint-disable-line no-new
	  }) || !fails(function(){
	    new $ArrayBuffer(.5); // eslint-disable-line no-new
	  })){
	    $ArrayBuffer = function ArrayBuffer(length){
	      return new BaseBuffer(validateArrayBufferArguments(this, length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
	      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
	    };
	    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2))
	    , $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(24);
	$export($export.G + $export.W + $export.F * !__webpack_require__(235).ABV, {
	  DataView: __webpack_require__(236).DataView
	});

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(239)('Int8', 1, function(init){
	  return function Int8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	if(__webpack_require__(22)){
	  var LIBRARY             = __webpack_require__(44)
	    , global              = __webpack_require__(20)
	    , fails               = __webpack_require__(23)
	    , $export             = __webpack_require__(24)
	    , $typed              = __webpack_require__(235)
	    , $buffer             = __webpack_require__(236)
	    , ctx                 = __webpack_require__(36)
	    , anInstance          = __webpack_require__(221)
	    , propertyDesc        = __webpack_require__(33)
	    , hide                = __webpack_require__(26)
	    , redefineAll         = __webpack_require__(226)
	    , toInteger           = __webpack_require__(54)
	    , toLength            = __webpack_require__(53)
	    , toIndex             = __webpack_require__(55)
	    , toPrimitive         = __webpack_require__(32)
	    , has                 = __webpack_require__(21)
	    , same                = __webpack_require__(87)
	    , classof             = __webpack_require__(91)
	    , isObject            = __webpack_require__(29)
	    , toObject            = __webpack_require__(74)
	    , isArrayIter         = __webpack_require__(178)
	    , create              = __webpack_require__(62)
	    , getPrototypeOf      = __webpack_require__(75)
	    , gOPN                = __webpack_require__(66).f
	    , getIterFn           = __webpack_require__(180)
	    , uid                 = __webpack_require__(35)
	    , wks                 = __webpack_require__(41)
	    , createArrayMethod   = __webpack_require__(188)
	    , createArrayIncludes = __webpack_require__(52)
	    , speciesConstructor  = __webpack_require__(223)
	    , ArrayIterators      = __webpack_require__(209)
	    , Iterators           = __webpack_require__(145)
	    , $iterDetect         = __webpack_require__(181)
	    , setSpecies          = __webpack_require__(208)
	    , arrayFill           = __webpack_require__(204)
	    , arrayCopyWithin     = __webpack_require__(201)
	    , $DP                 = __webpack_require__(27)
	    , $GOPD               = __webpack_require__(67)
	    , dP                  = $DP.f
	    , gOPD                = $GOPD.f
	    , RangeError          = global.RangeError
	    , TypeError           = global.TypeError
	    , Uint8Array          = global.Uint8Array
	    , ARRAY_BUFFER        = 'ArrayBuffer'
	    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
	    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
	    , PROTOTYPE           = 'prototype'
	    , ArrayProto          = Array[PROTOTYPE]
	    , $ArrayBuffer        = $buffer.ArrayBuffer
	    , $DataView           = $buffer.DataView
	    , arrayForEach        = createArrayMethod(0)
	    , arrayFilter         = createArrayMethod(2)
	    , arraySome           = createArrayMethod(3)
	    , arrayEvery          = createArrayMethod(4)
	    , arrayFind           = createArrayMethod(5)
	    , arrayFindIndex      = createArrayMethod(6)
	    , arrayIncludes       = createArrayIncludes(true)
	    , arrayIndexOf        = createArrayIncludes(false)
	    , arrayValues         = ArrayIterators.values
	    , arrayKeys           = ArrayIterators.keys
	    , arrayEntries        = ArrayIterators.entries
	    , arrayLastIndexOf    = ArrayProto.lastIndexOf
	    , arrayReduce         = ArrayProto.reduce
	    , arrayReduceRight    = ArrayProto.reduceRight
	    , arrayJoin           = ArrayProto.join
	    , arraySort           = ArrayProto.sort
	    , arraySlice          = ArrayProto.slice
	    , arrayToString       = ArrayProto.toString
	    , arrayToLocaleString = ArrayProto.toLocaleString
	    , ITERATOR            = wks('iterator')
	    , TAG                 = wks('toStringTag')
	    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
	    , DEF_CONSTRUCTOR     = uid('def_constructor')
	    , ALL_CONSTRUCTORS    = $typed.CONSTR
	    , TYPED_ARRAY         = $typed.TYPED
	    , VIEW                = $typed.VIEW
	    , WRONG_LENGTH        = 'Wrong length!';

	  var $map = createArrayMethod(1, function(O, length){
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });

	  var LITTLE_ENDIAN = fails(function(){
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });

	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
	    new Uint8Array(1).set({});
	  });

	  var strictToLength = function(it, SAME){
	    if(it === undefined)throw TypeError(WRONG_LENGTH);
	    var number = +it
	      , length = toLength(it);
	    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
	    return length;
	  };

	  var toOffset = function(it, BYTES){
	    var offset = toInteger(it);
	    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
	    return offset;
	  };

	  var validate = function(it){
	    if(isObject(it) && TYPED_ARRAY in it)return it;
	    throw TypeError(it + ' is not a typed array!');
	  };

	  var allocate = function(C, length){
	    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };

	  var speciesFromList = function(O, list){
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };

	  var fromList = function(C, list){
	    var index  = 0
	      , length = list.length
	      , result = allocate(C, length);
	    while(length > index)result[index] = list[index++];
	    return result;
	  };

	  var addGetter = function(it, key, internal){
	    dP(it, key, {get: function(){ return this._d[internal]; }});
	  };

	  var $from = function from(source /*, mapfn, thisArg */){
	    var O       = toObject(source)
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , iterFn  = getIterFn(O)
	      , i, length, values, result, step, iterator;
	    if(iterFn != undefined && !isArrayIter(iterFn)){
	      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
	        values.push(step.value);
	      } O = values;
	    }
	    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
	    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };

	  var $of = function of(/*...items*/){
	    var index  = 0
	      , length = arguments.length
	      , result = allocate(this, length);
	    while(length > index)result[index] = arguments[index++];
	    return result;
	  };

	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

	  var $toLocaleString = function toLocaleString(){
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };

	  var proto = {
	    copyWithin: function copyWithin(target, start /*, end */){
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /*, thisArg */){
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /*, thisArg */){
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /*, thisArg */){
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /*, thisArg */){
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /*, thisArg */){
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /*, fromIndex */){
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /*, fromIndex */){
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator){ // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /*, thisArg */){
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse(){
	      var that   = this
	        , length = validate(that).length
	        , middle = Math.floor(length / 2)
	        , index  = 0
	        , value;
	      while(index < middle){
	        value         = that[index];
	        that[index++] = that[--length];
	        that[length]  = value;
	      } return that;
	    },
	    some: function some(callbackfn /*, thisArg */){
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn){
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end){
	      var O      = validate(this)
	        , length = O.length
	        , $begin = toIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
	      );
	    }
	  };

	  var $slice = function slice(start, end){
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };

	  var $set = function set(arrayLike /*, offset */){
	    validate(this);
	    var offset = toOffset(arguments[1], 1)
	      , length = this.length
	      , src    = toObject(arrayLike)
	      , len    = toLength(src.length)
	      , index  = 0;
	    if(len + offset > length)throw RangeError(WRONG_LENGTH);
	    while(index < len)this[offset + index] = src[index++];
	  };

	  var $iterators = {
	    entries: function entries(){
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys(){
	      return arrayKeys.call(validate(this));
	    },
	    values: function values(){
	      return arrayValues.call(validate(this));
	    }
	  };

	  var isTAIndex = function(target, key){
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key){
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc){
	    if(isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ){
	      target[key] = desc.value;
	      return target;
	    } else return dP(target, key, desc);
	  };

	  if(!ALL_CONSTRUCTORS){
	    $GOPD.f = $getDesc;
	    $DP.f   = $setDesc;
	  }

	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty:           $setDesc
	  });

	  if(fails(function(){ arrayToString.call({}); })){
	    arrayToString = arrayToLocaleString = function toString(){
	      return arrayJoin.call(this);
	    }
	  }

	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice:          $slice,
	    set:            $set,
	    constructor:    function(){ /* noop */ },
	    toString:       arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function(){ return this[TYPED_ARRAY]; }
	  });

	  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
	    CLAMPED = !!CLAMPED;
	    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
	      , ISNT_UINT8 = NAME != 'Uint8Array'
	      , GETTER     = 'get' + KEY
	      , SETTER     = 'set' + KEY
	      , TypedArray = global[NAME]
	      , Base       = TypedArray || {}
	      , TAC        = TypedArray && getPrototypeOf(TypedArray)
	      , FORCED     = !TypedArray || !$typed.ABV
	      , O          = {}
	      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function(that, index){
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function(that, index, value){
	      var data = that._d;
	      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function(that, index){
	      dP(that, index, {
	        get: function(){
	          return getter(this, index);
	        },
	        set: function(value){
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if(FORCED){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME, '_d');
	        var index  = 0
	          , offset = 0
	          , buffer, byteLength, length, klass;
	        if(!isObject(data)){
	          length     = strictToLength(data, true)
	          byteLength = length * BYTES;
	          buffer     = new $ArrayBuffer(byteLength);
	        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if($length === undefined){
	            if($len % BYTES)throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if(TYPED_ARRAY in data){
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while(index < length)addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if(!$iterDetect(function(iter){
	      // V8 works with iterators, but fails in many other cases
	      // https://code.google.com/p/v8/issues/detail?id=4552
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
	        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
	        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
	      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
	      , $iterator         = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

	    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
	      dP(TypedArrayPrototype, TAG, {
	        get: function(){ return NAME; }
	      });
	    }

	    O[NAME] = TypedArray;

	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES,
	      from: $from,
	      of: $of
	    });

	    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

	    $export($export.P, NAME, proto);

	    setSpecies(NAME);

	    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

	    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

	    $export($export.P + $export.F * fails(function(){
	      new TypedArray(1).slice();
	    }), NAME, {slice: $slice});

	    $export($export.P + $export.F * (fails(function(){
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
	    }) || !fails(function(){
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, {toLocaleString: $toLocaleString});

	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function(){ /* empty */ };

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(239)('Uint8', 1, function(init){
	  return function Uint8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(239)('Uint8', 1, function(init){
	  return function Uint8ClampedArray(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	}, true);

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(239)('Int16', 2, function(init){
	  return function Int16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(239)('Uint16', 2, function(init){
	  return function Uint16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(239)('Int32', 4, function(init){
	  return function Int32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(239)('Uint32', 4, function(init){
	  return function Uint32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(239)('Float32', 4, function(init){
	  return function Float32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(239)('Float64', 8, function(init){
	  return function Float64Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export   = __webpack_require__(24)
	  , aFunction = __webpack_require__(37)
	  , anObject  = __webpack_require__(28)
	  , rApply    = (__webpack_require__(20).Reflect || {}).apply
	  , fApply    = Function.apply;
	// MS Edge argumentsList argument is optional
	$export($export.S + $export.F * !__webpack_require__(23)(function(){
	  rApply(function(){});
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList){
	    var T = aFunction(target)
	      , L = anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export    = __webpack_require__(24)
	  , create     = __webpack_require__(62)
	  , aFunction  = __webpack_require__(37)
	  , anObject   = __webpack_require__(28)
	  , isObject   = __webpack_require__(29)
	  , fails      = __webpack_require__(23)
	  , bind       = __webpack_require__(93)
	  , rConstruct = (__webpack_require__(20).Reflect || {}).construct;

	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function(){
	  function F(){}
	  return !(rConstruct(function(){}, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function(){
	  rConstruct(function(){});
	});

	$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /*, newTarget*/){
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
	    if(Target == newTarget){
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch(args.length){
	        case 0: return new Target;
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args));
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto    = newTarget.prototype
	      , instance = create(isObject(proto) ? proto : Object.prototype)
	      , result   = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP          = __webpack_require__(27)
	  , $export     = __webpack_require__(24)
	  , anObject    = __webpack_require__(28)
	  , toPrimitive = __webpack_require__(32);

	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(23)(function(){
	  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes){
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export  = __webpack_require__(24)
	  , gOPD     = __webpack_require__(67).f
	  , anObject = __webpack_require__(28);

	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey){
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	var $export  = __webpack_require__(24)
	  , anObject = __webpack_require__(28);
	var Enumerate = function(iterated){
	  this._t = anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = []       // keys
	    , key;
	  for(key in iterated)keys.push(key);
	};
	__webpack_require__(146)(Enumerate, 'Object', function(){
	  var that = this
	    , keys = that._k
	    , key;
	  do {
	    if(that._i >= keys.length)return {value: undefined, done: true};
	  } while(!((key = keys[that._i++]) in that._t));
	  return {value: key, done: false};
	});

	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target){
	    return new Enumerate(target);
	  }
	});

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD           = __webpack_require__(67)
	  , getPrototypeOf = __webpack_require__(75)
	  , has            = __webpack_require__(21)
	  , $export        = __webpack_require__(24)
	  , isObject       = __webpack_require__(29)
	  , anObject       = __webpack_require__(28);

	function get(target, propertyKey/*, receiver*/){
	  var receiver = arguments.length < 3 ? target : arguments[2]
	    , desc, proto;
	  if(anObject(target) === receiver)return target[propertyKey];
	  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
	}

	$export($export.S, 'Reflect', {get: get});

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD     = __webpack_require__(67)
	  , $export  = __webpack_require__(24)
	  , anObject = __webpack_require__(28);

	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export  = __webpack_require__(24)
	  , getProto = __webpack_require__(75)
	  , anObject = __webpack_require__(28);

	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target){
	    return getProto(anObject(target));
	  }
	});

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(24);

	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey){
	    return propertyKey in target;
	  }
	});

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.10 Reflect.isExtensible(target)
	var $export       = __webpack_require__(24)
	  , anObject      = __webpack_require__(28)
	  , $isExtensible = Object.isExtensible;

	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target){
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(24);

	$export($export.S, 'Reflect', {ownKeys: __webpack_require__(259)});

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	// all object keys, includes non-enumerable and symbols
	var gOPN     = __webpack_require__(66)
	  , gOPS     = __webpack_require__(59)
	  , anObject = __webpack_require__(28)
	  , Reflect  = __webpack_require__(20).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
	  var keys       = gOPN.f(anObject(it))
	    , getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.12 Reflect.preventExtensions(target)
	var $export            = __webpack_require__(24)
	  , anObject           = __webpack_require__(28)
	  , $preventExtensions = Object.preventExtensions;

	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target){
	    anObject(target);
	    try {
	      if($preventExtensions)$preventExtensions(target);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP             = __webpack_require__(27)
	  , gOPD           = __webpack_require__(67)
	  , getPrototypeOf = __webpack_require__(75)
	  , has            = __webpack_require__(21)
	  , $export        = __webpack_require__(24)
	  , createDesc     = __webpack_require__(33)
	  , anObject       = __webpack_require__(28)
	  , isObject       = __webpack_require__(29);

	function set(target, propertyKey, V/*, receiver*/){
	  var receiver = arguments.length < 4 ? target : arguments[3]
	    , ownDesc  = gOPD.f(anObject(target), propertyKey)
	    , existingDescriptor, proto;
	  if(!ownDesc){
	    if(isObject(proto = getPrototypeOf(target))){
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if(has(ownDesc, 'value')){
	    if(ownDesc.writable === false || !isObject(receiver))return false;
	    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
	    existingDescriptor.value = V;
	    dP.f(receiver, propertyKey, existingDescriptor);
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}

	$export($export.S, 'Reflect', {set: set});

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export  = __webpack_require__(24)
	  , setProto = __webpack_require__(89);

	if(setProto)$export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto){
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(264);
	__webpack_require__(266);
	__webpack_require__(267);
	__webpack_require__(268);
	__webpack_require__(270);
	__webpack_require__(271);
	__webpack_require__(272);
	__webpack_require__(273);
	__webpack_require__(274);
	module.exports = __webpack_require__(25).Reflect;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(265)
	  , anObject                  = __webpack_require__(28)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;

	metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	}});

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	var Map     = __webpack_require__(227)
	  , $export = __webpack_require__(24)
	  , shared  = __webpack_require__(39)('metadata')
	  , store   = shared.store || (shared.store = new (__webpack_require__(231)));

	var getOrCreateMetadataMap = function(target, targetKey, create){
	  var targetMetadata = store.get(target);
	  if(!targetMetadata){
	    if(!create)return undefined;
	    store.set(target, targetMetadata = new Map);
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if(!keyMetadata){
	    if(!create)return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map);
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function(target, targetKey){
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
	    , keys        = [];
	  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
	  return keys;
	};
	var toMetaKey = function(it){
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function(O){
	  $export($export.S, 'Reflect', O);
	};

	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(265)
	  , anObject               = __webpack_require__(28)
	  , toMetaKey              = metadata.key
	  , getOrCreateMetadataMap = metadata.map
	  , store                  = metadata.store;

	metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
	  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
	    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
	  if(metadataMap.size)return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	}});

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(265)
	  , anObject               = __webpack_require__(28)
	  , getPrototypeOf         = __webpack_require__(75)
	  , ordinaryHasOwnMetadata = metadata.has
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;

	var ordinaryGetMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};

	metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	var Set                     = __webpack_require__(230)
	  , from                    = __webpack_require__(269)
	  , metadata                = __webpack_require__(265)
	  , anObject                = __webpack_require__(28)
	  , getPrototypeOf          = __webpack_require__(75)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;

	var ordinaryMetadataKeys = function(O, P){
	  var oKeys  = ordinaryOwnMetadataKeys(O, P)
	    , parent = getPrototypeOf(O);
	  if(parent === null)return oKeys;
	  var pKeys  = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};

	metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(222);

	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(265)
	  , anObject               = __webpack_require__(28)
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;

	metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata                = __webpack_require__(265)
	  , anObject                = __webpack_require__(28)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;

	metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(265)
	  , anObject               = __webpack_require__(28)
	  , getPrototypeOf         = __webpack_require__(75)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;

	var ordinaryHasMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};

	metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(265)
	  , anObject               = __webpack_require__(28)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;

	metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(265)
	  , anObject                  = __webpack_require__(28)
	  , aFunction                 = __webpack_require__(37)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;

	metadata.exp({metadata: function metadata(metadataKey, metadataValue){
	  return function decorator(target, targetKey){
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	}});

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var hibachiinterceptor_1 = __webpack_require__(276);
	//constant
	var hibachipathbuilder_1 = __webpack_require__(277);
	//services
	var cacheservice_1 = __webpack_require__(278);
	var publicservice_1 = __webpack_require__(279);
	var accountservice_1 = __webpack_require__(280);
	var cartservice_1 = __webpack_require__(295);
	var draggableservice_1 = __webpack_require__(296);
	var utilityservice_1 = __webpack_require__(297);
	var selectionservice_1 = __webpack_require__(299);
	var observerservice_1 = __webpack_require__(300);
	var orderservice_1 = __webpack_require__(301);
	var orderpaymentservice_1 = __webpack_require__(302);
	var formservice_1 = __webpack_require__(303);
	var filterservice_1 = __webpack_require__(304);
	var expandableservice_1 = __webpack_require__(305);
	var metadataservice_1 = __webpack_require__(306);
	var rbkeyservice_1 = __webpack_require__(307);
	var typeaheadservice_1 = __webpack_require__(308);
	var hibachiservice_1 = __webpack_require__(309);
	var historyservice_1 = __webpack_require__(310);
	var localstorageservice_1 = __webpack_require__(311);
	var hibachiservicedecorator_1 = __webpack_require__(312);
	var hibachiscope_1 = __webpack_require__(313);
	var requestservice_1 = __webpack_require__(314);
	var scopeservice_1 = __webpack_require__(318);
	var skuservice_1 = __webpack_require__(319);
	var hibachivalidationservice_1 = __webpack_require__(320);
	var entityservice_1 = __webpack_require__(321);
	//controllers
	var globalsearch_1 = __webpack_require__(322);
	//filters
	var percentage_1 = __webpack_require__(323);
	var entityrbkey_1 = __webpack_require__(324);
	var swtrim_1 = __webpack_require__(325);
	var swunique_1 = __webpack_require__(326);
	var datefilter_1 = __webpack_require__(327);
	//directives
	//  components
	var swactioncaller_1 = __webpack_require__(328);
	var swtypeaheadsearch_1 = __webpack_require__(329);
	var swtypeaheadinputfield_1 = __webpack_require__(330);
	var swtypeaheadmultiselect_1 = __webpack_require__(331);
	var swtypeaheadsearchlineitem_1 = __webpack_require__(332);
	var swtypeaheadremoveselection_1 = __webpack_require__(333);
	var swcollectionconfig_1 = __webpack_require__(334);
	var swcollectionfilter_1 = __webpack_require__(335);
	var swcollectionorderby_1 = __webpack_require__(336);
	var swcollectioncolumn_1 = __webpack_require__(337);
	var swactioncallerdropdown_1 = __webpack_require__(338);
	var swcolumnsorter_1 = __webpack_require__(339);
	var swconfirm_1 = __webpack_require__(340);
	var swdraggable_1 = __webpack_require__(341);
	var swdraggablecontainer_1 = __webpack_require__(342);
	var swentityactionbar_1 = __webpack_require__(343);
	var swentityactionbarbuttongroup_1 = __webpack_require__(344);
	var swexpandablerecord_1 = __webpack_require__(345);
	var swgravatar_1 = __webpack_require__(346);
	var swlogin_1 = __webpack_require__(351);
	var swmodallauncher_1 = __webpack_require__(352);
	var swmodalwindow_1 = __webpack_require__(353);
	var swnumbersonly_1 = __webpack_require__(354);
	var swloading_1 = __webpack_require__(355);
	var swscrolltrigger_1 = __webpack_require__(356);
	var swtabgroup_1 = __webpack_require__(357);
	var swtabcontent_1 = __webpack_require__(358);
	var swtooltip_1 = __webpack_require__(359);
	var swrbkey_1 = __webpack_require__(360);
	var swoptions_1 = __webpack_require__(361);
	var swselection_1 = __webpack_require__(362);
	var swclickoutside_1 = __webpack_require__(363);
	var swdirective_1 = __webpack_require__(364);
	var swexportaction_1 = __webpack_require__(365);
	var swhref_1 = __webpack_require__(366);
	var swprocesscaller_1 = __webpack_require__(367);
	var swsortable_1 = __webpack_require__(368);
	var sworderbycontrols_1 = __webpack_require__(369);
	var alert_module_1 = __webpack_require__(370);
	var dialog_module_1 = __webpack_require__(374);
	var coremodule = angular.module('hibachi.core', [
	    //Angular Modules
	    'ngAnimate',
	    'ngRoute',
	    'ngSanitize',
	    //3rdParty modules
	    'ui.bootstrap',
	    alert_module_1.alertmodule.name,
	    dialog_module_1.dialogmodule.name
	])
	    .config(['$httpProvider', '$logProvider', '$filterProvider', '$provide', 'hibachiPathBuilder', 'appConfig', function ($httpProvider, $logProvider, $filterProvider, $provide, hibachiPathBuilder, appConfig) {
	        hibachiPathBuilder.setBaseURL(appConfig.baseURL);
	        hibachiPathBuilder.setBasePartialsPath('/org/Hibachi/client/src/');
	        $logProvider.debugEnabled(appConfig.debugFlag);
	        $filterProvider.register('likeFilter', function () {
	            return function (text) {
	                if (angular.isDefined(text) && angular.isString(text)) {
	                    return text.replace(new RegExp('%', 'g'), '');
	                }
	            };
	        });
	        //This filter is used to shorten a string by removing the charecter count that is passed to it and ending it with "..."
	        $filterProvider.register('truncate', function () {
	            return function (input, chars, breakOnWord) {
	                if (isNaN(chars))
	                    return input;
	                if (chars <= 0)
	                    return '';
	                if (input && input.length > chars) {
	                    input = input.substring(0, chars);
	                    if (!breakOnWord) {
	                        var lastspace = input.lastIndexOf(' ');
	                        //get last space
	                        if (lastspace !== -1) {
	                            input = input.substr(0, lastspace);
	                        }
	                    }
	                    else {
	                        while (input.charAt(input.length - 1) === ' ') {
	                            input = input.substr(0, input.length - 1);
	                        }
	                    }
	                    return input + '...';
	                }
	                return input;
	            };
	        });
	        //This filter is used to shorten long string but unlike "truncate", it removes from the start of the string and prepends "..."
	        $filterProvider.register('pretruncate', function () {
	            return function (input, chars, breakOnWord) {
	                if (isNaN(chars))
	                    return input;
	                if (chars <= 0)
	                    return '';
	                if (input && input.length > chars) {
	                    input = input.slice('-' + chars);
	                    //  input = input.substring(0, chars);
	                    if (!breakOnWord) {
	                        var lastspace = input.lastIndexOf(' ');
	                        //get last space
	                        if (lastspace !== -1) {
	                            input = input.substr(0, lastspace);
	                        }
	                    }
	                    else {
	                        while (input.charAt(input.length - 1) === ' ') {
	                            input = input.substr(0, input.length - 1);
	                        }
	                    }
	                    return '...' + input;
	                }
	                return input;
	            };
	        });
	        hibachiPathBuilder.setBaseURL(appConfig.baseURL);
	        hibachiPathBuilder.setBasePartialsPath('/org/Hibachi/client/src/');
	        // $provide.decorator('$hibachi',
	        $httpProvider.interceptors.push('hibachiInterceptor');
	        //Pulls seperate http requests into a single digest cycle.
	        $httpProvider.useApplyAsync(true);
	    }])
	    .run(['$rootScope', '$hibachi', '$route', '$location', function ($rootScope, $hibachi, $route, $location) {
	        $rootScope.buildUrl = $hibachi.buildUrl;
	        var original = $location.path;
	        $location.path = function (path, reload) {
	            if (reload === false) {
	                var lastRoute = $route.current;
	                var un = $rootScope.$on('$locationChangeSuccess', function () {
	                    $route.current = lastRoute;
	                    un();
	                });
	            }
	            return original.apply($location, [path]);
	        };
	    }])
	    .constant('hibachiPathBuilder', new hibachipathbuilder_1.HibachiPathBuilder())
	    .constant('corePartialsPath', 'core/components/')
	    .service('cacheService', cacheservice_1.CacheService)
	    .service('publicService', publicservice_1.PublicService)
	    .service('utilityService', utilityservice_1.UtilityService)
	    .service('selectionService', selectionservice_1.SelectionService)
	    .service('observerService', observerservice_1.ObserverService)
	    .service('draggableService', draggableservice_1.DraggableService)
	    .service('expandableService', expandableservice_1.ExpandableService)
	    .service('filterService', filterservice_1.FilterService)
	    .service('formService', formservice_1.FormService)
	    .service('historyService', historyservice_1.HistoryService)
	    .service('metadataService', metadataservice_1.MetaDataService)
	    .service('rbkeyService', rbkeyservice_1.RbKeyService)
	    .service('typeaheadService', typeaheadservice_1.TypeaheadService)
	    .provider('$hibachi', hibachiservice_1.$Hibachi)
	    .decorator('$hibachi', hibachiservicedecorator_1.HibachiServiceDecorator)
	    .service('hibachiInterceptor', hibachiinterceptor_1.HibachiInterceptor.Factory())
	    .service('hibachiScope', hibachiscope_1.HibachiScope)
	    .service('scopeService', scopeservice_1.ScopeService)
	    .service('skuService', skuservice_1.SkuService)
	    .service('localStorageService', localstorageservice_1.LocalStorageService)
	    .service('requestService', requestservice_1.RequestService)
	    .service('accountService', accountservice_1.AccountService)
	    .service('orderService', orderservice_1.OrderService)
	    .service('orderPaymentService', orderpaymentservice_1.OrderPaymentService)
	    .service('cartService', cartservice_1.CartService)
	    .service('hibachiValidationService', hibachivalidationservice_1.HibachiValidationService)
	    .service('entityService', entityservice_1.EntityService)
	    .controller('globalSearch', globalsearch_1.GlobalSearchController)
	    .filter('dateFilter', ['$filter', datefilter_1.DateFilter.Factory])
	    .filter('percentage', [percentage_1.PercentageFilter.Factory])
	    .filter('trim', [swtrim_1.SWTrim.Factory])
	    .filter('entityRBKey', ['rbkeyService', entityrbkey_1.EntityRBKey.Factory])
	    .filter('swdate', ['$filter', datefilter_1.DateFilter.Factory])
	    .filter('unique', [swunique_1.SWUnique.Factory])
	    .directive('swCollectionConfig', swcollectionconfig_1.SWCollectionConfig.Factory())
	    .directive('swCollectionColumn', swcollectioncolumn_1.SWCollectionColumn.Factory())
	    .directive('swCollectionFilter', swcollectionfilter_1.SWCollectionFilter.Factory())
	    .directive('swCollectionOrderBy', swcollectionorderby_1.SWCollectionOrderBy.Factory())
	    .directive('swTypeaheadSearch', swtypeaheadsearch_1.SWTypeaheadSearch.Factory())
	    .directive('swTypeaheadInputField', swtypeaheadinputfield_1.SWTypeaheadInputField.Factory())
	    .directive('swTypeaheadMultiselect', swtypeaheadmultiselect_1.SWTypeaheadMultiselect.Factory())
	    .directive('swTypeaheadSearchLineItem', swtypeaheadsearchlineitem_1.SWTypeaheadSearchLineItem.Factory())
	    .directive('swTypeaheadRemoveSelection', swtypeaheadremoveselection_1.SWTypeaheadRemoveSelection.Factory())
	    .directive('swActionCaller', swactioncaller_1.SWActionCaller.Factory())
	    .directive('swActionCallerDropdown', swactioncallerdropdown_1.SWActionCallerDropdown.Factory())
	    .directive('swColumnSorter', swcolumnsorter_1.SWColumnSorter.Factory())
	    .directive('swConfirm', swconfirm_1.SWConfirm.Factory())
	    .directive('swEntityActionBar', swentityactionbar_1.SWEntityActionBar.Factory())
	    .directive('swEntityActionBarButtonGroup', swentityactionbarbuttongroup_1.SWEntityActionBarButtonGroup.Factory())
	    .directive('swExpandableRecord', swexpandablerecord_1.SWExpandableRecord.Factory())
	    .directive('swGravatar', swgravatar_1.SWGravatar.Factory())
	    .directive('swDraggable', swdraggable_1.SWDraggable.Factory())
	    .directive('swDraggableContainer', swdraggablecontainer_1.SWDraggableContainer.Factory())
	    .directive('swLogin', swlogin_1.SWLogin.Factory())
	    .directive('swModalLauncher', swmodallauncher_1.SWModalLauncher.Factory())
	    .directive('swModalWindow', swmodalwindow_1.SWModalWindow.Factory())
	    .directive('swNumbersOnly', swnumbersonly_1.SWNumbersOnly.Factory())
	    .directive('swLoading', swloading_1.SWLoading.Factory())
	    .directive('swScrollTrigger', swscrolltrigger_1.SWScrollTrigger.Factory())
	    .directive('swRbkey', swrbkey_1.SWRbKey.Factory())
	    .directive('swOptions', swoptions_1.SWOptions.Factory())
	    .directive('swSelection', swselection_1.SWSelection.Factory())
	    .directive('swTabGroup', swtabgroup_1.SWTabGroup.Factory())
	    .directive('swTabContent', swtabcontent_1.SWTabContent.Factory())
	    .directive('swTooltip', swtooltip_1.SWTooltip.Factory())
	    .directive('swClickOutside', swclickoutside_1.SWClickOutside.Factory())
	    .directive('swDirective', swdirective_1.SWDirective.Factory())
	    .directive('swExportAction', swexportaction_1.SWExportAction.Factory())
	    .directive('swHref', swhref_1.SWHref.Factory())
	    .directive('swProcessCaller', swprocesscaller_1.SWProcessCaller.Factory())
	    .directive('sw:sortable', swsortable_1.SWSortable.Factory())
	    .directive('swOrderByControls', sworderbycontrols_1.SWOrderByControls.Factory());
	exports.coremodule = coremodule;


/***/ }),
/* 276 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var HibachiInterceptor = (function () {
	    //@ngInject
	    function HibachiInterceptor($location, $q, $log, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder) {
	        var _this = this;
	        this.$location = $location;
	        this.$q = $q;
	        this.$log = $log;
	        this.$injector = $injector;
	        this.localStorageService = localStorageService;
	        this.alertService = alertService;
	        this.appConfig = appConfig;
	        this.dialogService = dialogService;
	        this.utilityService = utilityService;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.urlParam = null;
	        this.authHeader = 'Authorization';
	        this.authPrefix = 'Bearer ';
	        this.request = function (config) {
	            _this.$log.debug('request');
	            //bypass interceptor rules when checking template cache
	            if (config.url.charAt(0) !== '/') {
	                return config;
	            }
	            if (config.method == 'GET' && config.url.indexOf('.html') >= 0 && config.url.indexOf('/') >= 0) {
	                //all partials are bound to instantiation key
	                config.url = config.url + '?instantiationKey=' + _this.appConfig.instantiationKey;
	                return config;
	            }
	            config.cache = true;
	            config.headers = config.headers || {};
	            if (_this.localStorageService.hasItem('token')) {
	                config.headers['Auth-Token'] = 'Bearer ' + _this.localStorageService.getItem('token');
	            }
	            var queryParams = _this.utilityService.getQueryParamsFromUrl(config.url);
	            if (config.method == 'GET' && (queryParams[_this.appConfig.action] && queryParams[_this.appConfig.action] === 'api:main.get')) {
	                _this.$log.debug(config);
	                config.method = 'POST';
	                config.data = {};
	                var data = {};
	                if (angular.isDefined(config.params)) {
	                    data = config.params;
	                }
	                var params = {};
	                params.serializedJsonData = angular.toJson(data);
	                params.context = "GET";
	                config.data = $.param(params);
	                delete config.params;
	                config.headers['Content-Type'] = 'application/x-www-form-urlencoded';
	            }
	            return config;
	        };
	        this.requestError = function (rejection) {
	            return _this.$q.reject(rejection);
	        };
	        this.response = function (response) {
	            if (response.data.messages) {
	                var alerts = _this.alertService.formatMessagesToAlerts(response.data.messages);
	                _this.alertService.addAlerts(alerts);
	            }
	            return response;
	        };
	        this.responseError = function (rejection) {
	            if (angular.isDefined(rejection.status) && rejection.status !== 404 && rejection.status !== 403 && rejection.status !== 499) {
	                if (rejection.data && rejection.data.messages) {
	                    var alerts = _this.alertService.formatMessagesToAlerts(rejection.data.messages);
	                    _this.alertService.addAlerts(alerts);
	                }
	                else {
	                    var message = {
	                        msg: 'there was error retrieving data',
	                        type: 'error'
	                    };
	                    _this.alertService.addAlert(message);
	                }
	            }
	            if (rejection.status === 499) {
	                // handle the case where the user is not authenticated
	                if (rejection.data && rejection.data.messages) {
	                    //var deferred = $q.defer();
	                    var $http = _this.$injector.get('$http');
	                    if (rejection.data.messages[0].message === 'timeout') {
	                        //open dialog
	                        _this.dialogService.addPageDialog(_this.hibachiPathBuilder.buildPartialsPath('preprocesslogin'), {});
	                    }
	                    else if (rejection.data.messages[0].message === 'invalid_token') {
	                        return $http.get(_this.baseUrl + '?slataction=api:main.login').then(function (loginResponse) {
	                            if (loginResponse.status === 200) {
	                                _this.localStorageService.setItem('token', loginResponse.data.token);
	                                rejection.config.headers = rejection.config.headers || {};
	                                rejection.config.headers['Auth-Token'] = 'Bearer ' + loginResponse.data.token;
	                                return $http(rejection.config).then(function (response) {
	                                    return response;
	                                });
	                            }
	                        }, function (rejection) {
	                            return rejection;
	                        });
	                    }
	                }
	            }
	            return rejection;
	        };
	        this.$location = $location;
	        this.$q = $q;
	        this.$log = $log;
	        this.$injector = $injector;
	        this.alertService = alertService;
	        this.appConfig = appConfig;
	        this.baseUrl = appConfig.baseURL;
	        this.dialogService = dialogService;
	        this.utilityService = utilityService;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.localStorageService = localStorageService;
	    }
	    HibachiInterceptor.Factory = function () {
	        var eventHandler = function ($location, $q, $log, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder) { return new HibachiInterceptor($location, $q, $log, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder); };
	        eventHandler.$inject = [
	            '$location',
	            '$q',
	            '$log',
	            '$injector',
	            'localStorageService',
	            'alertService',
	            'appConfig',
	            'dialogService',
	            'utilityService',
	            'hibachiPathBuilder'
	        ];
	        return eventHandler;
	    };
	    return HibachiInterceptor;
	}());
	exports.HibachiInterceptor = HibachiInterceptor;


/***/ }),
/* 277 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/*services return promises which can be handled uniquely based on success or failure by the controller*/
	var HibachiPathBuilder = (function () {
	    //@ngInject
	    function HibachiPathBuilder() {
	        var _this = this;
	        this.setBaseURL = function (baseURL) {
	            _this.baseURL = baseURL;
	        };
	        this.setBasePartialsPath = function (basePartialsPath) {
	            _this.basePartialsPath = basePartialsPath;
	        };
	        this.setApiSubsystemName = function (apiSubsystemName) {
	            _this.apiSubsystemName = apiSubsystemName;
	        };
	        this.buildPartialsPath = function (componentsPath) {
	            if (angular.isDefined(_this.baseURL) && angular.isDefined(_this.basePartialsPath)) {
	                return _this.baseURL + _this.basePartialsPath + componentsPath;
	            }
	            else {
	                throw ('need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there');
	            }
	        };
	    }
	    return HibachiPathBuilder;
	}());
	exports.HibachiPathBuilder = HibachiPathBuilder;


/***/ }),
/* 278 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var CacheService = (function () {
	    //@ngInject
	    function CacheService(localStorageService) {
	        var _this = this;
	        this.localStorageService = localStorageService;
	        this.cacheData = {};
	        this.saveCacheData = function () {
	            _this.localStorageService.setItem("cacheData", _this.cacheData);
	        };
	        this.hasKey = function (key) {
	            if (angular.isDefined(_this.cacheData[key])) {
	                return true;
	            }
	            return false;
	        };
	        this.dateExpired = function (key) {
	            if (_this.cacheData[key].expiresTime == "forever") {
	                return false;
	            }
	            return _this.cacheData[key].expiresTime < Date.now();
	        };
	        this.put = function (key, dataPromise, dataTarget, expiresTime) {
	            if (expiresTime === void 0) { expiresTime = "forever"; }
	            _this.cacheData[key] = {};
	            _this.cacheData[key].expiresTime = expiresTime;
	            _this.cacheData[key].dataPromise = dataPromise;
	            _this.cacheData[key].dataTarget = dataTarget;
	            dataPromise.then(function (response) {
	                _this.localStorageService.setItem(key, response[dataTarget]);
	            }, function (reason) {
	                delete _this.cacheData[key];
	            });
	            _this.saveCacheData();
	            return dataPromise;
	        };
	        this.reload = function (key, expiresTime) {
	            if (expiresTime === void 0) { expiresTime = "forever"; }
	            _this.cacheData[key].expiresTime = expiresTime;
	            _this.cacheData[key].dataPromise.then(function (response) {
	                _this.localStorageService.setItem(key, response[_this.cacheData[key].dataTarget]);
	            }, function (reason) {
	                delete _this.cacheData[key];
	            });
	            _this.saveCacheData();
	            return _this.cacheData[key].dataPromise;
	        };
	        this.fetch = function (key) {
	            if (_this.hasKey(key) && !_this.dateExpired(key)) {
	                if (_this.localStorageService.hasItem(key)) {
	                    return _this.localStorageService.getItem(key);
	                }
	                _this.put(key, _this.cacheData[key].dataPromise, _this.cacheData[key].dataTarget, _this.cacheData[key].expiresTime).finally(function () {
	                    return _this.localStorageService.getItem(key);
	                });
	            }
	        };
	        this.fetchOrReload = function (key, expiresTime) {
	            if (angular.isDefined(_this.fetch(key))) {
	                return _this.fetch(key);
	            }
	            else {
	                _this.reload(key, expiresTime).then(function (response) {
	                    return _this.fetch(key);
	                }, function (reason) {
	                    //throw
	                });
	            }
	        };
	        if (localStorageService.hasItem("cacheData")) {
	            this.cacheData = localStorageService.getItem("cacheData");
	        }
	    }
	    return CacheService;
	}());
	exports.CacheService = CacheService;


/***/ }),
/* 279 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var PublicService = (function () {
	    ///index.cfm/api/scope/
	    //@ngInject
	    function PublicService($http, $q, $window, $location, $hibachi, $injector, requestService, accountService, cartService, orderService, observerService, appConfig) {
	        var _this = this;
	        this.$http = $http;
	        this.$q = $q;
	        this.$window = $window;
	        this.$location = $location;
	        this.$hibachi = $hibachi;
	        this.$injector = $injector;
	        this.requestService = requestService;
	        this.accountService = accountService;
	        this.cartService = cartService;
	        this.orderService = orderService;
	        this.observerService = observerService;
	        this.appConfig = appConfig;
	        this.requests = {};
	        this.errors = {};
	        this.baseActionPath = "";
	        this.months = [{ name: '01 - JAN', value: 1 }, { name: '02 - FEB', value: 2 }, { name: '03 - MAR', value: 3 }, { name: '04 - APR', value: 4 }, { name: '05 - MAY', value: 5 }, { name: '06 - JUN', value: 6 }, { name: '07 - JUL', value: 7 }, { name: '08 - AUG', value: 8 }, { name: '09 - SEP', value: 9 }, { name: '10 - OCT', value: 10 }, { name: '11 - NOV', value: 11 }, { name: '12 - DEC', value: 12 }];
	        this.years = [];
	        this.shippingAddress = "";
	        this.billingAddress = "";
	        this.imagePath = {};
	        // public hasErrors = ()=>{
	        //     return this.errors.length;
	        // }
	        /**
	         * Helper methods for getting errors from the cart
	         */
	        this.getErrors = function () {
	            _this.errors = {};
	            for (var key in _this.requests) {
	                var request = _this.requests[key];
	                if (Object.keys(request.errors).length) {
	                    _this.errors[key] = request.errors;
	                }
	            }
	            return _this.errors;
	        };
	        /** grab the valid expiration years for credit cards  */
	        this.getExpirationYears = function () {
	            var baseDate = new Date();
	            var today = baseDate.getFullYear();
	            var start = today;
	            for (var i = 0; i <= 15; i++) {
	                _this.years.push(start + i);
	            }
	        };
	        /** accessors for account */
	        this.getAccount = function (refresh) {
	            if (refresh === void 0) { refresh = false; }
	            var urlBase = _this.baseActionPath + 'getAccount/';
	            if (!_this.accountDataPromise || refresh) {
	                _this.accountDataPromise = _this.getData(urlBase, "account", "");
	            }
	            return _this.accountDataPromise;
	        };
	        /** accessors for cart */
	        this.getCart = function (refresh) {
	            if (refresh === void 0) { refresh = false; }
	            var urlBase = _this.baseActionPath + 'getCart/';
	            if (!_this.cartDataPromise || refresh) {
	                _this.cartDataPromise = _this.getData(urlBase, "cart", "");
	            }
	            return _this.cartDataPromise;
	        };
	        /** accessors for countries */
	        this.getCountries = function (refresh) {
	            if (refresh === void 0) { refresh = false; }
	            var urlBase = _this.baseActionPath + 'getCountries/';
	            if (!_this.countryDataPromise || refresh) {
	                _this.countryDataPromise = _this.getData(urlBase, "countries", "");
	            }
	            return _this.countryDataPromise;
	        };
	        /** accessors for states */
	        this.getStates = function (countryCode, refresh) {
	            if (refresh === void 0) { refresh = false; }
	            if (!angular.isDefined(countryCode))
	                countryCode = "US";
	            var urlBase = _this.baseActionPath + 'getStateCodeOptionsByCountryCode/';
	            if (!_this.stateDataPromise || refresh) {
	                _this.stateDataPromise = _this.getData(urlBase, "states", "?countryCode=" + countryCode);
	            }
	            return _this.stateDataPromise;
	        };
	        /** accessors for states */
	        this.getAddressOptions = function (countryCode, refresh) {
	            if (refresh === void 0) { refresh = false; }
	            if (!angular.isDefined(countryCode))
	                countryCode = "US";
	            var urlBase = _this.baseActionPath + 'getAddressOptionsByCountryCode/';
	            if (!_this.addressOptionData || refresh) {
	                _this.addressOptionData = _this.getData(urlBase, "addressOptions", "&countryCode=" + countryCode);
	            }
	            return _this.addressOptionData;
	        };
	        /** accessors for states */
	        this.getData = function (url, setter, param) {
	            var urlBase = url + param;
	            var request = _this.requestService.newPublicRequest(urlBase);
	            request.promise.then(function (result) {
	                //don't need account and cart for anything other than account and cart calls.
	                if (setter.indexOf('account') == -1 || setter.indexOf('cart') == -1) {
	                    if (result['account']) {
	                        delete result['account'];
	                    }
	                    if (result['cart']) {
	                        delete result['cart'];
	                    }
	                }
	                if (setter == 'cart' || setter == 'account') {
	                    //cart and account return cart and account info flat
	                    _this[setter].populate(result);
	                }
	                else {
	                    //other functions reutrn cart,account and then data
	                    _this[setter] = (result);
	                }
	            }).catch(function (reason) {
	            });
	            _this.requests[request.getAction()] = request;
	            return request.promise;
	        };
	        /** sets the current shipping address */
	        this.setShippingAddress = function (shippingAddress) {
	            _this.shippingAddress = shippingAddress;
	        };
	        /** sets the current shipping address */
	        this.setBillingAddress = function (billingAddress) {
	            _this.billingAddress = billingAddress;
	        };
	        /** this is the generic method used to call all server side actions.
	        *  @param action {string} the name of the action (method) to call in the public service.
	        *  @param data   {object} the params as key value pairs to pass in the post request.
	        *  @return a deferred promise that resolves server response or error. also includes updated account and cart.
	        */
	        this.doAction = function (action, data, method) {
	            if (!action) {
	                throw "Action is required exception";
	            }
	            var urlBase = "";
	            //check if the caller is defining a path to hit, otherwise use the public scope.
	            if (action.indexOf(":") !== -1) {
	                urlBase = action; //any path
	            }
	            else {
	                urlBase = "/index.cfm/api/scope/" + action; //public path
	            }
	            if (data) {
	                method = "post";
	                data.returnJsonObjects = "cart,account";
	            }
	            else {
	                urlBase += "&returnJsonObject=cart,account";
	            }
	            if (method == "post") {
	                data.returnJsonObjects = "cart,account";
	                //post
	                var request_1 = _this.requestService.newPublicRequest(urlBase, data, method);
	                request_1.promise.then(function (result) {
	                    _this.processAction(result, request_1);
	                }).catch(function (response) {
	                });
	                _this.requests[request_1.getAction()] = request_1;
	                return request_1.promise;
	            }
	            else {
	                //get
	                var url = urlBase + "&returnJsonObject=cart,account";
	                var request_2 = _this.requestService.newPublicRequest(url);
	                request_2.promise.then(function (result) {
	                    _this.processAction(result, request_2);
	                }).catch(function (reason) {
	                });
	                _this.requests[request_2.getAction()] = request_2;
	                return request_2.promise;
	            }
	        };
	        this.processAction = function (response, request) {
	            /** update the account and the cart */
	            _this.account.populate(response.account);
	            _this.account.request = request;
	            _this.cart.populate(response.cart);
	            _this.cart.request = request;
	            //if the action that was called was successful, then success is true.
	            if (request.hasSuccessfulAction()) {
	                for (var action in request.successfulActions) {
	                    if (request.successfulActions[action].indexOf('public:cart.placeOrder') !== -1) {
	                        _this.$window.location.href = _this.confirmationUrl;
	                    }
	                }
	            }
	            if (!request.hasSuccessfulAction()) {
	                //this.hasErrors = true;
	            }
	        };
	        this.getRequestByAction = function (action) {
	            return _this.requests[action];
	        };
	        /**
	         * Helper methods so that everything in account and cart can be accessed using getters.
	         */
	        this.userIsLoggedIn = function () {
	            return _this.account.userIsLoggedIn();
	        };
	        this.getActivePaymentMethods = function () {
	            var urlString = "/?slataction=admin:ajax.getActivePaymentMethods";
	            var request = _this.requestService.newPublicRequest(urlString)
	                .then(function (result) {
	                if (angular.isDefined(result.data.paymentMethods)) {
	                    _this.paymentMethods = result.data.paymentMethods;
	                }
	            });
	            _this.requests[request.getAction()] = request;
	        };
	        /**
	         * Given a payment method name, returns the id.
	         */
	        this.getPaymentMethodID = function (name) {
	            for (var method in _this.paymentMethods) {
	                if (_this.paymentMethods[method].paymentMethodName == name && _this.paymentMethods[method].activeFlag == "Yes ") {
	                    return _this.paymentMethods[method].paymentMethodID;
	                }
	            }
	        };
	        this.hasPaymentMethod = function (paymentMethodName) {
	            for (var method in _this.paymentMethods) {
	                if (_this.paymentMethods[method].paymentMethodName == paymentMethodName && _this.paymentMethods[method].activeFlag == "Yes ") {
	                    return true;
	                }
	            }
	            return false;
	        };
	        this.hasCreditCardPaymentMethod = function () {
	            return _this.hasPaymentMethod("Credit Card");
	        };
	        this.hasPaypalPaymentMethod = function () {
	            return _this.hasPaymentMethod("PayPal Express");
	        };
	        this.hasGiftCardPaymentMethod = function () {
	            return _this.hasPaymentMethod("Gift Card");
	        };
	        this.hasMoneyOrderPaymentMethod = function () {
	            return _this.hasPaymentMethod("Money Order");
	        };
	        this.hasCashPaymentMethod = function () {
	            return _this.hasPaymentMethod("Cash");
	        };
	        /** Returns true if the order requires a fulfillment */
	        this.orderRequiresFulfillment = function () {
	            return _this.cart.orderRequiresFulfillment();
	        };
	        /**
	         *  Returns true if the order requires a account
	         *  Either because the user is not logged in, or because they don't have one.
	         *
	         */
	        this.orderRequiresAccount = function () {
	            return _this.cart.orderRequiresAccount();
	        };
	        /** Returns true if the payment tab should be active */
	        this.hasShippingAddressAndMethod = function () {
	            return _this.cart.hasShippingAddressAndMethod();
	        };
	        /**
	         * Returns true if the user has an account and is logged in.
	         */
	        this.hasAccount = function () {
	            if (_this.account.accountID) {
	                return true;
	            }
	            return false;
	        };
	        /** Redirects to the order confirmation page if the order placed successfully
	        */
	        this.redirectExact = function (url) {
	            _this.$location.url(url);
	        };
	        // /** Returns true if a property on an object is undefined or empty. */
	        this.isUndefinedOrEmpty = function (object, property) {
	            if (!angular.isDefined(object[property]) || object[property] == "") {
	                return true;
	            }
	            return false;
	        };
	        /** A simple method to return the quantity sum of all orderitems in the cart. */
	        this.getOrderItemQuantitySum = function () {
	            var totalQuantity = 0;
	            if (angular.isDefined(_this.cart)) {
	                return _this.cart.getOrderItemQuantitySum();
	            }
	            return totalQuantity;
	        };
	        /** Returns the index of the state from the list of states */
	        this.getSelectedStateIndexFromStateCode = function (stateCode, states) {
	            for (var state in states) {
	                if (states[state].value == stateCode) {
	                    return state;
	                }
	            }
	        };
	        /**
	         * Returns true if on a mobile device. This is important for placeholders.
	         */
	        this.isMobile = function () {
	            if (this.$window.innerWidth <= 800 && this.$window.innerHeight <= 600) {
	                return true;
	            }
	            return false;
	        };
	        /** returns true if the shipping method is the selected shipping method
	        */
	        this.isSelectedShippingMethod = function (index, value) {
	            if (this.cart.fulfillmentTotal &&
	                value == this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethod.shippingMethodID ||
	                this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions.length == 1) {
	                return true;
	            }
	            return false;
	        };
	        /** returns the index of the selected shipping method.
	        */
	        this.getSelectedShippingIndex = function (index, value) {
	            for (var i = 0; i <= this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions.length; i++) {
	                if (this.cart.fulfillmentTotal == this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions[i].totalCharge) {
	                    return i;
	                }
	            }
	        };
	        /** simple validation just to ensure data is present and accounted for.
	        */
	        this.validateNewOrderPayment = function (newOrderPayment) {
	            var newOrderPaymentErrors = {};
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.streetAddress')) {
	                newOrderPaymentErrors['streetAddress'] = 'Required *';
	            }
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.countrycode')) {
	                newOrderPaymentErrors['countrycode'] = 'Required *';
	            }
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.statecode')) {
	                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.locality')) {
	                    newOrderPaymentErrors['statecode'] = 'Required *';
	                }
	            }
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.city')) {
	                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.city')) {
	                    newOrderPaymentErrors['city'] = 'Required *';
	                }
	            }
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.locality')) {
	                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.statecode')) {
	                    newOrderPaymentErrors['locality'] = 'Required *';
	                }
	            }
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.postalcode')) {
	                newOrderPaymentErrors['postalCode'] = 'Required *';
	            }
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.nameOnCreditCard')) {
	                newOrderPaymentErrors['nameOnCreditCard'] = 'Required *';
	            }
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.expirationMonth')) {
	                newOrderPaymentErrors['streetAddress'] = 'Required *';
	            }
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.expirationYear')) {
	                newOrderPaymentErrors['expirationYear'] = 'Required *';
	            }
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.creditCardNumber')) {
	                newOrderPaymentErrors['creditCardNumber'] = 'Required *';
	            }
	            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.securityCode')) {
	                newOrderPaymentErrors['securityCode'] = 'Required *';
	            }
	            if (Object.keys(newOrderPaymentErrors).length) {
	                //this.cart.orderPayments.hasErrors = true;
	                //this.cart.orderPayments.errors = newOrderPaymentErrors;
	            }
	        };
	        /** Allows an easy way to calling the service addOrderPayment.
	        */
	        this.addOrderPayment = function (formdata) {
	            //reset the form errors.
	            // this.cart.hasErrors=false;
	            // this.cart.orderPayments.errors = {};
	            // this.cart.orderPayments.hasErrors = false;
	            //Grab all the data
	            var billingAddress = _this.newBillingAddress;
	            var expirationMonth = formdata.month;
	            var expirationYear = formdata.year;
	            var country = formdata.country;
	            var state = formdata.state;
	            var accountFirst = _this.account.firstName;
	            var accountLast = _this.account.lastName;
	            var data = {};
	            var processObject = _this.orderService.newOrder_AddOrderPayment();
	            // processObject.newBillingAddress = this.newBillingAddress;
	            // processObject.newBillingAddress.expirationMonth = formdata.month;
	            // processObject.newBillingAddress.expirationYear = formdata.year;
	            // processObject.newBillingAddress.billingAddress.country = formdata.country || processObject.data.newOrderPayment.billingAddress.country;
	            // processObject.newBillingAddress.billingAddress.statecode = formdata.state || processObject.data.newOrderPayment.billingAddress.statecode;
	            // processObject.newBillingAddress.saveShippingAsBilling=(this.saveShippingAsBilling == true);
	            data = {
	                'newOrderPayment.billingAddress.addressID': '',
	                'newOrderPayment.billingAddress.streetAddress': billingAddress.streetAddress,
	                'newOrderPayment.billingAddress.street2Address': billingAddress.street2Address,
	                'newOrderPayment.nameOnCreditCard': billingAddress.nameOnCreditCard,
	                'newOrderPayment.billingAddress.name': billingAddress.nameOnCreditCard,
	                'newOrderPayment.expirationMonth': expirationMonth,
	                'newOrderPayment.expirationYear': expirationYear,
	                'newOrderPayment.billingAddress.countrycode': country || billingAddress.countrycode,
	                'newOrderPayment.billingAddress.city': '' + billingAddress.city,
	                'newOrderPayment.billingAddress.statecode': state || billingAddress.statecode,
	                'newOrderPayment.billingAddress.locality': billingAddress.locality || '',
	                'newOrderPayment.billingAddress.postalcode': billingAddress.postalcode,
	                'newOrderPayment.securityCode': billingAddress.cvv,
	                'newOrderPayment.creditCardNumber': billingAddress.cardNumber,
	                'newOrderPayment.saveShippingAsBilling': (_this.saveShippingAsBilling == true),
	            };
	            //processObject.populate(data);
	            //Make sure we have required fields for a newOrderPayment.
	            _this.validateNewOrderPayment(data);
	            if (_this.cart.orderPayments.hasErrors && Object.keys(_this.cart.orderPayments.errors).length) {
	                return -1;
	            }
	            //Post the new order payment and set errors as needed.
	            _this.doAction('addOrderPayment', data, 'post').then(function (result) {
	                var serverData = result;
	                if (serverData.cart.hasErrors || angular.isDefined(_this.cart.orderPayments[_this.cart.orderPayments.length - 1]['errors']) && !_this.cart.orderPayments[_this.cart.orderPayments.length - 1]['errors'].hasErrors) {
	                    _this.cart.hasErrors = true;
	                    _this.readyToPlaceOrder = true;
	                    _this.edit = '';
	                }
	                else {
	                    _this.editPayment = false;
	                    _this.readyToPlaceOrder = true;
	                    _this.edit = '';
	                }
	            });
	        };
	        /** Allows an easy way to calling the service addOrderPayment.
	        */
	        this.addGiftCardOrderPayments = function (redeemGiftCardToAccount) {
	            //reset the form errors.
	            _this.cart.hasErrors = false;
	            _this.cart.orderPayments.errors = {};
	            _this.cart.orderPayments.hasErrors = false;
	            //Grab all the data
	            var giftCards = _this.account.giftCards;
	            var data = {};
	            data = {
	                'newOrderPayment.paymentMethod.paymentMethodID': '50d8cd61009931554764385482347f3a',
	                'newOrderPayment.redeemGiftCardToAccount': redeemGiftCardToAccount,
	            };
	            //add the amounts from the gift cards
	            for (var card in giftCards) {
	                if (giftCards[card].applied == true) {
	                    data['newOrderPayment.giftCardNumber'] = giftCards[card].giftCardCode;
	                    if (giftCards[card].calculatedTotal < _this.cart.calculatedTotal) {
	                        data['newOrderPayment.amount'] = giftCards[card].calculatedBalanceAmount; //will use once we have amount implemented.
	                    }
	                    else {
	                        data['newOrderPayment.amount'] = _this.cart.calculatedTotal; //this is so it doesn't throw the 100% error
	                    }
	                    data['copyFromType'] = "";
	                    //Post the new order payment and set errors as needed.
	                    _this.$q.all([_this.doAction('addOrderPayment', data, 'post')]).then(function (result) {
	                        var serverData;
	                        if (angular.isDefined(result['0'])) {
	                            serverData = result['0'].data;
	                        }
	                        if (serverData.cart.hasErrors || angular.isDefined(this.cart.orderPayments[this.cart.orderPayments.length - 1]['errors']) && !this.cart.orderPayments['' + (this.cart.orderPayments.length - 1)]['errors'].hasErrors) {
	                            this.cart.hasErrors = true;
	                            this.readyToPlaceOrder = true;
	                            this.edit = '';
	                        }
	                        else {
	                        }
	                    });
	                }
	            }
	        };
	        /** returns the index of the last selected shipping method. This is used to get rid of the delay.
	        */
	        this.selectShippingMethod = function (index) {
	            for (var method in this.lastSelectedShippingMethod) {
	                if (method != index) {
	                    this.lastSelectedShippingMethod[method] = 'false';
	                }
	            }
	            this.lastSelectedShippingMethod[index] = 'true';
	        };
	        /** returns true if this was the last selected method
	        */
	        this.isLastSelectedShippingMethod = function (index) {
	            if (this.lastSelectedShippingMethod[index] === 'true') {
	                return true;
	            }
	            return false;
	        };
	        /** Allows an easy way to calling the service addOrderPayment.
	        */
	        this.addOrderPaymentAndPlaceOrder = function (formdata) {
	            //reset the form errors.
	            _this.orderPlaced = false;
	            //Grab all the data
	            var billingAddress = _this.newBillingAddress;
	            var expirationMonth = formdata.month;
	            var expirationYear = formdata.year;
	            var country = formdata.country;
	            var state = formdata.state;
	            var accountFirst = _this.account.firstName;
	            var accountLast = _this.account.lastName;
	            var data = {};
	            data = {
	                'orderid': _this.cart.orderID,
	                'newOrderPayment.billingAddress.streetAddress': billingAddress.streetAddress,
	                'newOrderPayment.billingAddress.street2Address': billingAddress.street2Address,
	                'newOrderPayment.nameOnCreditCard': billingAddress.nameOnCard || accountFirst + ' ' + accountLast,
	                'newOrderPayment.expirationMonth': expirationMonth,
	                'newOrderPayment.expirationYear': expirationYear,
	                'newOrderPayment.billingAddress.countrycode': country || billingAddress.countrycode,
	                'newOrderPayment.billingAddress.city': '' + billingAddress.city,
	                'newOrderPayment.billingAddress.statecode': state || billingAddress.statecode,
	                'newOrderPayment.billingAddress.locality': billingAddress.locality || '',
	                'newOrderPayment.billingAddress.postalcode': billingAddress.postalcode,
	                'newOrderPayment.securityCode': billingAddress.cvv,
	                'newOrderPayment.creditCardNumber': billingAddress.cardNumber,
	                'newOrderPayment.saveShippingAsBilling': (_this.saveShippingAsBilling == true),
	            };
	            //Make sure we have required fields for a newOrderPayment.
	            //this.validateNewOrderPayment( data );
	            if (_this.cart.orderPayments.hasErrors && Object.keys(_this.cart.orderPayments.errors).length) {
	                return -1;
	            }
	            //Post the new order payment and set errors as needed.
	            _this.$q.all([_this.doAction('addOrderPayment,placeOrder', data, 'post')]).then(function (result) {
	                var serverData;
	                if (angular.isDefined(result['0'])) {
	                    serverData = result['0'].data;
	                }
	                else {
	                } //|| angular.isDefined(serverData.cart.orderPayments[serverData.cart.orderPayments.length-1]['errors']) && slatwall.cart.orderPayments[''+slatwall.cart.orderPayments.length-1]['errors'].hasErrors
	                if (serverData.cart.hasErrors || (angular.isDefined(serverData.failureActions) && serverData.failureActions.length && serverData.failureActions[0] == "public:cart.addOrderPayment")) {
	                    if (serverData.failureActions.length) {
	                        for (var action in serverData.failureActions) {
	                            //
	                        }
	                    }
	                    this.edit = '';
	                    return true;
	                }
	                else if (serverData.successfulActions.length) {
	                    //
	                    this.cart.hasErrors = false;
	                    this.editPayment = false;
	                    this.edit = '';
	                    for (var action in serverData.successfulActions) {
	                        //
	                        if (serverData.successfulActions[action].indexOf("placeOrder") != -1) {
	                            //if there are no errors then redirect.
	                            this.orderPlaced = true;
	                            this.redirectExact('/order-confirmation/');
	                        }
	                    }
	                }
	                else {
	                    this.edit = '';
	                }
	            });
	        };
	        //Applies a giftcard from the user account onto the payment.
	        this.applyGiftCard = function (giftCardCode) {
	            _this.finding = true;
	            //find the code already on the account.
	            var found = false;
	            for (var giftCard in _this.account.giftCards) {
	                if (_this.account.giftCards[giftCard].balanceAmount == 0) {
	                    _this.account.giftCards[giftCard]['error'] = "The balance is $0.00 for this card.";
	                    found = false;
	                }
	                if (_this.account.giftCards[giftCard].giftCardCode == giftCardCode) {
	                    _this.account.giftCards[giftCard].applied = true;
	                    found = true;
	                }
	            }
	            if (found) {
	                _this.finding = false;
	                _this.addGiftCardOrderPayments(false);
	            }
	            else {
	                _this.finding = false;
	                _this.addGiftCardOrderPayments(true);
	            }
	        };
	        //returns the amount total of giftcards added to this account.
	        this.getAppliedGiftCardTotals = function () {
	            //
	            var total = 0;
	            for (var payment in _this.cart.orderPayments) {
	                if (_this.cart.orderPayments[payment].giftCardNumber != "") {
	                    total = total + parseInt(_this.cart.orderPayments[payment]['amount']);
	                }
	            }
	            return total;
	        };
	        //gets the calcuated total minus the applied gift cards.
	        this.getTotalMinusGiftCards = function () {
	            var total = _this.getAppliedGiftCardTotals();
	            return _this.cart.calculatedTotal - total;
	        };
	        //get estimated shipping rates given a weight, from to zips
	        this.getEstimatedRates = function (zipcode) {
	            var weight = 0;
	            for (var item in _this.cart.orderFulfillments) {
	                weight += _this.cart.orderFulfillments[item].totalShippingWeight;
	            }
	            var shipFromAddress = {
	                "postalcode": ""
	            };
	            var shipToAddress = {
	                "postalcode": zipcode
	            };
	            var totalWeight = weight;
	            //get the rates.
	            var urlString = "?slataction=admin:ajax.getEstimatedShippingRates&shipFromAddress=" + JSON.stringify(shipFromAddress)
	                + "&shipToAddress=" + JSON.stringify(shipToAddress) + "&totalWeight=" + JSON.stringify(weight);
	            var request = _this.requestService.newPublicRequest(urlString)
	                .then(function (result) {
	                _this.rates = result.data;
	            });
	        };
	        /** Returns the state from the list of states by stateCode */
	        this.getStateByStateCode = function (stateCode) {
	            for (var state in _this.states.stateCodeOptions) {
	                if (_this.states.stateCodeOptions[state].value == stateCode) {
	                    return _this.states.stateCodeOptions[state];
	                }
	            }
	        };
	        /** Returns the state from the list of states by stateCode */
	        this.resetRequests = function (request) {
	            delete _this.requests[request];
	        };
	        /** Returns true if the addresses match. */
	        this.addressesMatch = function (address1, address2) {
	            if (angular.isDefined(address1) && angular.isDefined(address2)) {
	                if ((address1.streetAddress == address2.streetAddress &&
	                    address1.street2Address == address2.street2Address &&
	                    address1.city == address2.city &&
	                    address1.postalcode == address2.postalcode &&
	                    address1.countrycode == address2.countrycode)) {
	                    return true;
	                }
	            }
	            return false;
	        };
	        /** Should be pushed down into core. Returns the profile image by name. */
	        this.getResizedImageByProfileName = function (profileName, skuIDList) {
	            _this.imagePath = {};
	            if (profileName == undefined) {
	                profileName = "medium";
	            }
	            _this.$http.get("/index.cfm/api/scope/?context=getResizedImageByProfileName&profileName=" + profileName + "&skuIds=" + skuIDList).success(function (result) {
	                _this.imagePath[skuIDList] = "";
	                result = angular.fromJson(result);
	                if (angular.isDefined(result.resizedImagePaths) && angular.isDefined(result.resizedImagePaths.resizedImagePaths) && result.resizedImagePaths.resizedImagePaths[0] != undefined) {
	                    _this.imagePath[skuIDList] = result.resizedImagePaths.resizedImagePaths[0];
	                    _this.loading = false;
	                    return _this.imagePath[skuIDList];
	                }
	                else {
	                    return "";
	                }
	            });
	        };
	        /**
	       *  Returns true when the fulfillment body should be showing
	       *  Show if we don't need an account but do need a fulfillment
	       *
	       */
	        this.showFulfillmentTabBody = function () {
	            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID &&
	                (_this.cart.orderRequirementsList.indexOf('fulfillment') != -1) ||
	                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
	                    (_this.edit == 'fulfillment')) {
	                return true;
	            }
	            return false;
	        };
	        /**
	         *  Returns true when the fulfillment body should be showing
	         *  Show if we don't need an account,fulfillment, and don't have a payment - or
	         *  we have a payment but are editting the payment AND nothing else is being edited
	         *
	         */
	        this.showPaymentTabBody = function () {
	            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID &&
	                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
	                (_this.cart.orderRequirementsList.indexOf('payment') != -1) && _this.edit == '' ||
	                (_this.cart.orderRequirementsList.indexOf('payment') == -1) &&
	                    (_this.edit == 'payment')) {
	                return true;
	            }
	            return false;
	        };
	        /**
	         *  Returns true if the review tab body should be showing.
	         *  Show if we don't need an account,fulfillment,payment, but not if something else is being edited
	         *
	         */
	        this.showReviewTabBody = function () {
	            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID &&
	                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
	                (_this.cart.orderRequirementsList.indexOf('payment') == -1) &&
	                (_this.edit == '') || (_this.edit == 'review')) {
	                return true;
	            }
	            return false;
	        };
	        /** Returns true if the fulfillment tab should be active */
	        this.fulfillmentTabIsActive = function () {
	            if ((_this.edit == 'fulfillment') ||
	                (_this.edit == '' && ((_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID) &&
	                    (_this.cart.orderRequirementsList.indexOf('fulfillment') != -1))) {
	                return true;
	            }
	            return false;
	        };
	        /** Returns true if the payment tab should be active */
	        this.paymentTabIsActive = function () {
	            if ((_this.edit == 'payment') ||
	                (_this.edit == '' &&
	                    (_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID &&
	                    (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&
	                    (_this.cart.orderRequirementsList.indexOf('payment') != -1))) {
	                return true;
	            }
	            return false;
	        };
	        this.orderService = orderService;
	        this.cartService = cartService;
	        this.accountService = accountService;
	        this.requestService = requestService;
	        this.appConfig = appConfig;
	        this.baseActionPath = this.appConfig.baseURL + "/index.cfm/api/scope/"; //default path
	        this.confirmationUrl = "/order-confirmation";
	        this.$http = $http;
	        this.$location = $location;
	        this.$q = $q;
	        this.$injector = $injector;
	        this.getExpirationYears();
	        this.$window = $window;
	        this.$hibachi = $hibachi;
	        this.cart = this.cartService.newCart();
	        this.account = this.accountService.newAccount();
	        this.observerService = observerService;
	    }
	    return PublicService;
	}());
	exports.PublicService = PublicService;


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseentityservice_1 = __webpack_require__(281);
	var AccountService = (function (_super) {
	    __extends(AccountService, _super);
	    //@ngInject
	    function AccountService($injector, $hibachi, utilityService) {
	        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Account') || this;
	        _this.$injector = $injector;
	        _this.$hibachi = $hibachi;
	        _this.utilityService = utilityService;
	        return _this;
	    }
	    return AccountService;
	}(baseentityservice_1.BaseEntityService));
	exports.AccountService = AccountService;


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var baseobject_1 = __webpack_require__(282);
	var Entities = __webpack_require__(283);
	var Processes = __webpack_require__(292);
	var BaseEntityService = (function (_super) {
	    __extends(BaseEntityService, _super);
	    //@ngInject
	    function BaseEntityService($injector, $hibachi, utilityService, baseObjectName, objectName) {
	        var _this = _super.call(this, $injector) || this;
	        _this.$injector = $injector;
	        _this.$hibachi = $hibachi;
	        _this.utilityService = utilityService;
	        _this.baseObjectName = baseObjectName;
	        _this.objectName = objectName;
	        _this.newEntity = function (baseObjectName, objectName) {
	            if (!objectName) {
	                objectName = baseObjectName;
	            }
	            return _this.newObject('Entity', baseObjectName, objectName);
	        };
	        _this.newProcessObject = function (baseObjectName, objectName) {
	            if (!objectName) {
	                objectName = baseObjectName;
	            }
	            return _this.newObject('Process', baseObjectName, objectName);
	        };
	        _this.newObject = function (type, baseObjectName, objectName) {
	            if (!objectName) {
	                objectName = baseObjectName;
	            }
	            var baseObject = _this.$hibachi.getEntityDefinition(baseObjectName);
	            var Barrell = {};
	            if (type === 'Entity') {
	                Barrell = Entities;
	            }
	            else if (type === 'Process') {
	                Barrell = Processes;
	            }
	            if (Barrell[objectName]) {
	                _this.utilityService.extend(Barrell[objectName], baseObject);
	                var entity = new Barrell[objectName](_this.$injector);
	            }
	            else {
	                var entity = new baseObject();
	                //throw('need to add '+ objectName+' class');
	            }
	            return entity;
	        };
	        _this.utilityService = utilityService;
	        _this.$hibachi = $hibachi;
	        _this.$injector = $injector;
	        if (!_this.objectName) {
	            _this.objectName = _this.baseObjectName;
	        }
	        _this['new' + _this.objectName] = function () {
	            return _this.newEntity(_this.baseObjectName, _this.objectName);
	        };
	        return _this;
	    }
	    return BaseEntityService;
	}(baseobject_1.BaseObject));
	exports.BaseEntityService = BaseEntityService;


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	__webpack_require__(2);
	var BaseObject = (function () {
	    //@ngInject
	    function BaseObject($injector) {
	        var _this = this;
	        this.getService = function (serviceName) {
	            //return;
	            if (_this.$injector.has(serviceName)) {
	                //returns a generic service
	                return _this.$injector.get(serviceName);
	            }
	        };
	        this.getHibachiScope = function () {
	            return _this.getService('publicService');
	        };
	        this.getAppConfig = function () {
	            return _this.getService('appConfig');
	        };
	        this.$injector = $injector;
	        var constructorString = this.constructor.toString();
	        this.className = constructorString.match(/\w+/g)[1];
	    }
	    return BaseObject;
	}());
	exports.BaseObject = BaseObject;


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var account_1 = __webpack_require__(284);
	exports.Account = account_1.Account;
	var address_1 = __webpack_require__(287);
	exports.Address = address_1.Address;
	var cart_1 = __webpack_require__(288);
	exports.Cart = cart_1.Cart;
	var orderitem_1 = __webpack_require__(289);
	exports.OrderItem = orderitem_1.OrderItem;
	var orderpayment_1 = __webpack_require__(290);
	exports.OrderPayment = orderpayment_1.OrderPayment;
	var sku_1 = __webpack_require__(291);
	exports.Sku = sku_1.Sku;


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseentity_1 = __webpack_require__(285);
	var Account = (function (_super) {
	    __extends(Account, _super);
	    function Account($injector) {
	        var _this = _super.call(this, $injector) || this;
	        _this.giftCards = [];
	        _this.userIsLoggedIn = function () {
	            if (_this.accountID !== '') {
	                return true;
	            }
	            return false;
	        };
	        return _this;
	    }
	    return Account;
	}(baseentity_1.BaseEntity));
	exports.Account = Account;


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var basetransient_1 = __webpack_require__(286);
	var BaseEntity = (function (_super) {
	    __extends(BaseEntity, _super);
	    function BaseEntity($injector) {
	        return _super.call(this, $injector) || this;
	    }
	    return BaseEntity;
	}(basetransient_1.BaseTransient));
	exports.BaseEntity = BaseEntity;


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseobject_1 = __webpack_require__(282);
	var BaseTransient = (function (_super) {
	    __extends(BaseTransient, _super);
	    function BaseTransient($injector) {
	        var _this = _super.call(this, $injector) || this;
	        _this.errors = {};
	        _this.messages = {};
	        _this.populate = function (response) {
	            var data = response;
	            if (response.data) {
	                data = response.data;
	            }
	            data = _this.utilityService.nvpToObject(data);
	            var _loop_1 = function () {
	                var propertyIdentifier = key.replace(_this.className.toLowerCase() + '.', '');
	                var propertyIdentifierArray = propertyIdentifier.split('.');
	                var propertyIdentifierKey = propertyIdentifier.replace(/\./g, '_');
	                var currentEntity = _this;
	                angular.forEach(propertyIdentifierArray, function (property, propertyKey) {
	                    if (currentEntity.metaData[property]) {
	                        //if we are on the last item in the array
	                        if (propertyKey === propertyIdentifierArray.length - 1) {
	                            //if is json
	                            //if(currentEntity.metaData[key]){
	                            //if propertyidentifier
	                            // }else{
	                            if (angular.isObject(data[key]) && currentEntity.metaData[property].fieldtype && currentEntity.metaData[property].fieldtype === 'many-to-one') {
	                                var relatedEntity = _this.entityService.newEntity(currentEntity.metaData[property].cfc);
	                                if (relatedEntity.populate) {
	                                    relatedEntity.populate(data[key]);
	                                    currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
	                                }
	                                else {
	                                    relatedEntity.$$init(data[key]);
	                                    currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
	                                }
	                            }
	                            else if (angular.isArray(data[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {
	                                currentEntity[property] = [];
	                                angular.forEach(data[key], function (arrayItem, propertyKey) {
	                                    var relatedEntity = _this.entityService.newEntity(currentEntity.metaData[property].cfc);
	                                    if (relatedEntity.populate) {
	                                        relatedEntity.populate(arrayItem);
	                                        var hasItem = false;
	                                        for (var item in currentEntity[property]) {
	                                            if (currentEntity[property][item].$$getID().length > 0 && currentEntity[property][item].$$getID() === relatedEntity.$$getID()) {
	                                                hasItem = true;
	                                                break;
	                                            }
	                                        }
	                                        if (!hasItem) {
	                                            currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
	                                        }
	                                    }
	                                    else {
	                                        relatedEntity.$$init(arrayItem);
	                                        currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
	                                    }
	                                });
	                            }
	                            else {
	                                currentEntity[property] = data[key];
	                            }
	                            //}
	                        }
	                        else {
	                            var propertyMetaData = currentEntity.metaData[property];
	                            if (angular.isUndefined(currentEntity.data[property]) || (currentEntity.data[property] && currentEntity.data[property] === null)) {
	                                if (propertyMetaData.fieldtype === 'one-to-many') {
	                                    relatedEntity = [];
	                                }
	                                else {
	                                    relatedEntity = _this.$hibachi['new' + propertyMetaData.cfc]();
	                                }
	                            }
	                            else {
	                                relatedEntity = currentEntity.data[property];
	                            }
	                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);
	                            currentEntity = relatedEntity;
	                        }
	                    }
	                    else {
	                        _this[key] = data[key];
	                    }
	                });
	            };
	            for (var key in data) {
	                _loop_1();
	            }
	            if (response.errors) {
	                _this.errors = response.errors;
	                _this.messages = response.messages;
	            }
	        };
	        _this.addError = function (errorName, errorMessage) {
	            if (!_this.errors[errorName]) {
	                _this.errors[errorName] = [];
	            }
	            if (angular.isArray(errorMessage)) {
	                _this.addErrorsByArray(errorName, errorMessage);
	            }
	            else if (angular.isObject(errorMessage)) {
	                _this.addErrorsByObject(errorName, errorMessage);
	            }
	            else {
	                _this.errors[errorName].push(errorMessage);
	            }
	        };
	        _this.addErrorsByArray = function (errorName, errorMessages) {
	            for (var i = 0; i < errorMessages.length; i++) {
	                var message = errorMessages[i];
	                _this.errors[errorName].push(message);
	            }
	        };
	        _this.addErrorsByObject = function (errorName, errorMessage) {
	            if (!_this.errors[errorName]) {
	                _this.errors[errorName] = [];
	            }
	            for (var key in errorMessage) {
	                for (var i = 0; i < errorMessage[key].length; i++) {
	                    var message = errorMessage[i];
	                    _this.errors[errorName].push(message);
	                }
	            }
	        };
	        _this.addErrors = function (errors) {
	            for (var key in errors) {
	                if (!_this.errors[key]) {
	                    _this.errors[key] = [];
	                }
	                for (var message in errors[key]) {
	                    _this.errors[key].push(message);
	                }
	            }
	        };
	        _this.getError = function (errorName) {
	            return _this.getErrorByErrorName(errorName);
	        };
	        _this.getErrorByErrorName = function (errorName) {
	            return _this.errors[errorName];
	        };
	        _this.hasError = function (errorName) {
	            return _this.hasErrorByErrorName(errorName);
	        };
	        _this.hasErrorByErrorName = function (errorName) {
	            return angular.isDefined(_this.errors[errorName]);
	        };
	        _this.hasErrors = function () {
	            return Object.keys(_this.errors).length;
	        };
	        _this.hasSuccessfulAction = function (action) {
	            return;
	        };
	        _this.$hibachi = _this.getService('$hibachi');
	        _this.hibachiValidationService = _this.getService('hibachiValidationService');
	        _this.utilityService = _this.getService('utilityService');
	        _this.entityService = _this.getService('entityService');
	        return _this;
	    }
	    return BaseTransient;
	}(baseobject_1.BaseObject));
	exports.BaseTransient = BaseTransient;


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseentity_1 = __webpack_require__(285);
	var Address = (function (_super) {
	    __extends(Address, _super);
	    function Address($injector) {
	        return _super.call(this, $injector) || this;
	    }
	    return Address;
	}(baseentity_1.BaseEntity));
	exports.Address = Address;


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseentity_1 = __webpack_require__(285);
	var Cart = (function (_super) {
	    __extends(Cart, _super);
	    //deprecated
	    function Cart($injector) {
	        var _this = _super.call(this, $injector) || this;
	        _this.requiresFulfillment = false;
	        _this.orderRequirementsList = "";
	        _this.orderPayments = [];
	        _this.orderItems = [];
	        _this.orderFulfillments = [];
	        _this.hasShippingAddressAndMethod = function () {
	            if (_this.orderRequirementsList.indexOf('fulfillment') == -1) {
	                return true;
	            }
	            return false;
	        };
	        _this.orderRequiresAccount = function () {
	            if (_this.orderRequirementsList.indexOf('account') != -1 || !_this.account.accountID) {
	                return true;
	            }
	            return false;
	        };
	        _this.orderRequiresFulfillment = function () {
	            return _this.requiresFulfillment;
	        };
	        _this.getOrderItemQuantitySum = function () {
	            var totalQuantity = 0;
	            if (angular.isDefined(_this.orderItems)) {
	                for (var orderItem in _this.orderItems) {
	                    totalQuantity = totalQuantity + _this.orderItems[orderItem].quantity;
	                }
	                return totalQuantity;
	            }
	            return totalQuantity;
	        };
	        return _this;
	    }
	    return Cart;
	}(baseentity_1.BaseEntity));
	exports.Cart = Cart;


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var baseentity_1 = __webpack_require__(285);
	var OrderItem = (function (_super) {
	    __extends(OrderItem, _super);
	    function OrderItem($injector) {
	        return _super.call(this, $injector) || this;
	    }
	    return OrderItem;
	}(baseentity_1.BaseEntity));
	exports.OrderItem = OrderItem;


/***/ }),
/* 290 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var OrderPayment = (function () {
	    function OrderPayment() {
	    }
	    return OrderPayment;
	}());
	exports.OrderPayment = OrderPayment;


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseentity_1 = __webpack_require__(285);
	var Sku = (function (_super) {
	    __extends(Sku, _super);
	    function Sku($injector) {
	        var _this = _super.call(this, $injector) || this;
	        _this.setNewQOH = function (value) {
	            _this.newQOH = value;
	        };
	        _this.getNewQOH = function () {
	            return _this.newQOH;
	        };
	        return _this;
	    }
	    return Sku;
	}(baseentity_1.BaseEntity));
	exports.Sku = Sku;


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var order_addorderpayment_1 = __webpack_require__(293);
	exports.Order_AddOrderPayment = order_addorderpayment_1.Order_AddOrderPayment;


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseprocess_1 = __webpack_require__(294);
	var Order_AddOrderPayment = (function (_super) {
	    __extends(Order_AddOrderPayment, _super);
	    function Order_AddOrderPayment($injector) {
	        var _this = _super.call(this, $injector) || this;
	        _this.$injector = $injector;
	        return _this;
	    }
	    return Order_AddOrderPayment;
	}(baseprocess_1.BaseProcess));
	exports.Order_AddOrderPayment = Order_AddOrderPayment;


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var basetransient_1 = __webpack_require__(286);
	var BaseProcess = (function (_super) {
	    __extends(BaseProcess, _super);
	    function BaseProcess($injector) {
	        return _super.call(this, $injector) || this;
	    }
	    return BaseProcess;
	}(basetransient_1.BaseTransient));
	exports.BaseProcess = BaseProcess;


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseentityservice_1 = __webpack_require__(281);
	var CartService = (function (_super) {
	    __extends(CartService, _super);
	    //@ngInject
	    //@ngInject
	    function CartService($injector, $hibachi, utilityService) {
	        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Order', 'Cart') || this;
	        _this.$injector = $injector;
	        _this.$hibachi = $hibachi;
	        _this.utilityService = utilityService;
	        return _this;
	    }
	    return CartService;
	}(baseentityservice_1.BaseEntityService));
	exports.CartService = CartService;


/***/ }),
/* 296 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var DraggableService = (function () {
	    //ngInject
	    function DraggableService() {
	        this.isDropAllowed = function (event) {
	            //todo implement
	            return true;
	        };
	        this.isMouseInFirstHalf = function (event, targetNode, relativeToParent, horizontal) {
	            var mousePointer = horizontal ? (event.offsetX || event.layerX)
	                : (event.offsetY || event.layerY);
	            var targetSize = horizontal ? targetNode.offsetWidth : targetNode.offsetHeight;
	            var targetPosition = horizontal ? targetNode.offsetLeft : targetNode.offsetTop;
	            targetPosition = relativeToParent ? targetPosition : 0;
	            return mousePointer < targetPosition + targetSize / 2;
	        };
	    }
	    return DraggableService;
	}());
	exports.DraggableService = DraggableService;


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/*services return promises which can be handled uniquely based on success or failure by the controller*/
	var baseservice_1 = __webpack_require__(298);
	var UtilityService = (function (_super) {
	    __extends(UtilityService, _super);
	    //@ngInject
	    function UtilityService($parse) {
	        var _this = _super.call(this) || this;
	        _this.$parse = $parse;
	        _this.structKeyExists = function (struct, key) {
	            return key in struct;
	        };
	        _this.keyToAttributeString = function (key) {
	            var attributeString = "data-";
	            for (var i = 0; i < key.length; i++) {
	                if (key.charAt(i) == "_") {
	                    attributeString += "-";
	                }
	                else if (_this.isUpperCase(key.charAt(i))) {
	                    //special case for ID and Acronyms because it doesn't follow naming conventions
	                    if (i + 1 <= key.length && _this.isUpperCase(key.charAt(i + 1))) {
	                        if (key.charAt(i) + key.charAt(i + 1) == "ID") {
	                            attributeString += "-id";
	                            i++; //skip ahead
	                        }
	                        else if (_this.isUpperCase(key.charAt(i + 1))) {
	                            attributeString += "-";
	                            //this handles acronyms IE QATS 
	                            while (i + 1 <= key.length && _this.isUpperCase(key.charAt(i + 1))) {
	                                attributeString += key.charAt(i).toLowerCase();
	                                i++;
	                            }
	                        }
	                    }
	                    else {
	                        attributeString += "-" + key.charAt(i).toLowerCase();
	                    }
	                }
	                else {
	                    attributeString += key.charAt(i);
	                }
	            }
	            return attributeString;
	        };
	        _this.isUpperCase = function (character) {
	            return character == character.toUpperCase();
	        };
	        _this.isLowerCase = function (character) {
	            return character == character.toLowerCase();
	        };
	        _this.snakeToCapitalCase = function (s) {
	            return s.charAt(0).toUpperCase() + s.replace(/(\-\w)/g, function (m) { return m[1].toUpperCase(); }).slice(1);
	        };
	        _this.camelCaseToSnakeCase = function (s) {
	            return s.replace(/([A-Z])/g, function ($1) { return "-" + $1.toLowerCase(); });
	        };
	        _this.replaceStringWithProperties = function (stringItem, context) {
	            var properties = _this.getPropertiesFromString(stringItem);
	            if (!properties)
	                return;
	            var data = [];
	            angular.forEach(properties, function (property) {
	                if (property.indexOf('.') != -1) {
	                    property = property.replace('.', '_');
	                }
	                var parseFunction = _this.$parse(property);
	                data.push(parseFunction(context));
	            });
	            return _this.replacePropertiesWithData(stringItem, data);
	        };
	        //used to do inheritance at runtime
	        _this.extend = function (ChildClass, ParentClass) {
	            ChildClass.prototype = new ParentClass();
	            ChildClass.prototype.constructor = ChildClass;
	        };
	        _this.getQueryParamsFromUrl = function (url) {
	            // This function is anonymous, is executed immediately and
	            // the return value is assigned to QueryString!
	            var query_string = {};
	            if (url && url.split) {
	                var spliturl = url.split('?');
	                if (spliturl.length) {
	                    url = spliturl[1];
	                    if (url && url.split) {
	                        var vars = url.split("&");
	                        if (vars && vars.length) {
	                            for (var i = 0; i < vars.length; i++) {
	                                var pair = vars[i].split("=");
	                                // If first entry with this name
	                                if (typeof query_string[pair[0]] === "undefined") {
	                                    query_string[pair[0]] = pair[1];
	                                    // If second entry with this name
	                                }
	                                else if (typeof query_string[pair[0]] === "string") {
	                                    var arr = [query_string[pair[0]], pair[1]];
	                                    query_string[pair[0]] = arr;
	                                    // If third or later entry with this name
	                                }
	                                else {
	                                    query_string[pair[0]].push(pair[1]);
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	            return query_string;
	        };
	        _this.isAngularRoute = function () {
	            return /[\?&]ng#!/.test(window.location.href);
	        };
	        _this.ArrayFindByPropertyValue = function (arr, property, value) {
	            var currentIndex = -1;
	            arr.forEach(function (arrItem, index) {
	                if (arrItem[property] && arrItem[property] === value) {
	                    currentIndex = index;
	                }
	            });
	            return currentIndex;
	        };
	        _this.listLast = function (list, delimiter) {
	            if (list === void 0) { list = ''; }
	            if (delimiter === void 0) { delimiter = ','; }
	            var listArray = list.split(delimiter);
	            return listArray[listArray.length - 1];
	        };
	        _this.listRest = function (list, delimiter) {
	            if (list === void 0) { list = ''; }
	            if (delimiter === void 0) { delimiter = ","; }
	            var listArray = list.split(delimiter);
	            if (listArray.length) {
	                listArray.splice(0, 1);
	            }
	            return listArray.join(delimiter);
	        };
	        _this.listFirst = function (list, delimiter) {
	            if (list === void 0) { list = ''; }
	            if (delimiter === void 0) { delimiter = ','; }
	            var listArray = list.split(delimiter);
	            return listArray[0];
	        };
	        _this.listPrepend = function (list, substring, delimiter) {
	            if (list === void 0) { list = ''; }
	            if (substring === void 0) { substring = ''; }
	            if (delimiter === void 0) { delimiter = ','; }
	            var listArray = list.split(delimiter);
	            if (listArray.length) {
	                return substring + delimiter + list;
	            }
	            else {
	                return substring;
	            }
	        };
	        _this.listAppend = function (list, substring, delimiter) {
	            if (list === void 0) { list = ''; }
	            if (substring === void 0) { substring = ''; }
	            if (delimiter === void 0) { delimiter = ','; }
	            var listArray = list.split(delimiter);
	            if (list.trim() != '' && listArray.length) {
	                return list + delimiter + substring;
	            }
	            else {
	                return substring;
	            }
	        };
	        _this.listAppendUnique = function (list, substring, delimiter) {
	            if (list === void 0) { list = ''; }
	            if (substring === void 0) { substring = ''; }
	            if (delimiter === void 0) { delimiter = ','; }
	            var listArray = list.split(delimiter);
	            if (list.trim() != '' && listArray.length && listArray.indexOf(substring) == -1) {
	                return list + delimiter + substring;
	            }
	            else {
	                return substring;
	            }
	        };
	        /**
	         * Removes a substring from a string.
	         * str: The original string.
	         * subStr: The string to remove.
	         * returns the modified string.
	         */
	        _this.listRemove = function (str, substring) {
	            if (str.indexOf(substring) != -1) {
	                //remove it cause its no longer selected.
	                str = str.replace(substring, "");
	                str = str.replace(",,", "");
	                if (str == ",") {
	                    str = "";
	                }
	                if (str.substring(0, 1) == ',') {
	                    str = str.substring(1);
	                }
	                str = str.substring(0, str.length - 1);
	            }
	            return str;
	        };
	        _this.formatValue = function (value, formatType, formatDetails, entityInstance) {
	            if (angular.isUndefined(formatDetails)) {
	                formatDetails = {};
	            }
	            var typeList = ["currency", "date", "datetime", "pixels", "percentage", "second", "time", "truefalse", "url", "weight", "yesno"];
	            if (typeList.indexOf(formatType)) {
	                _this['format_' + formatType](value, formatDetails, entityInstance);
	            }
	            return value;
	        };
	        _this.format_currency = function (value, formatDetails, entityInstance) {
	            if (angular.isUndefined) {
	                formatDetails = {};
	            }
	        };
	        _this.format_date = function (value, formatDetails, entityInstance) {
	            if (angular.isUndefined) {
	                formatDetails = {};
	            }
	        };
	        _this.format_datetime = function (value, formatDetails, entityInstance) {
	            if (angular.isUndefined) {
	                formatDetails = {};
	            }
	        };
	        _this.format_pixels = function (value, formatDetails, entityInstance) {
	            if (angular.isUndefined) {
	                formatDetails = {};
	            }
	        };
	        _this.format_yesno = function (value, formatDetails, entityInstance) {
	            if (angular.isUndefined) {
	                formatDetails = {};
	            }
	            if (Boolean(value) === true) {
	                return entityInstance.metaData.$$getRBKey("define.yes");
	            }
	            else if (value === false || value.trim() === 'No' || value.trim === 'NO' || value.trim() === '0') {
	                return entityInstance.metaData.$$getRBKey("define.no");
	            }
	        };
	        _this.left = function (stringItem, count) {
	            return stringItem.substring(0, count);
	        };
	        _this.right = function (stringItem, count) {
	            return stringItem.substring(stringItem.length - count, stringItem.length);
	        };
	        //this.utilityService.mid(propertyIdentifier,1,propertyIdentifier.lastIndexOf('.'));
	        _this.mid = function (stringItem, start, count) {
	            var end = start + count;
	            return stringItem.substring(start, end);
	        };
	        _this.getPropertiesFromString = function (stringItem) {
	            if (!stringItem)
	                return;
	            var capture = false;
	            var property = '';
	            var results = [];
	            for (var i = 0; i < stringItem.length; i++) {
	                if (!capture && stringItem.substr(i, 2) == "${") {
	                    property = '';
	                    capture = true;
	                    i = i + 1; //skip the ${
	                }
	                else if (capture && stringItem[i] != '}') {
	                    property = property.concat(stringItem[i]);
	                }
	                else if (capture) {
	                    results.push(property);
	                    capture = false;
	                }
	            }
	            return results;
	        };
	        _this.replacePropertiesWithData = function (stringItem, data) {
	            var results = _this.getPropertiesFromString(stringItem);
	            for (var i = 0; i < results.length; i++) {
	                stringItem = stringItem.replace('${' + results[i] + '}', data[i]);
	            }
	            return stringItem;
	        };
	        _this.replaceAll = function (stringItem, find, replace) {
	            return stringItem.replace(new RegExp(_this.escapeRegExp(find), 'g'), replace);
	        };
	        _this.escapeRegExp = function (stringItem) {
	            return stringItem.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
	        };
	        _this.createID = function (count) {
	            var count = count || 26;
	            var text = "";
	            var firstPossibleCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	            var nextPossibleCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	            var currentPossibleCharacters = "";
	            for (var i = 0; i < count; i++) {
	                if (i === 0) {
	                    currentPossibleCharacters = firstPossibleCharacters;
	                }
	                else {
	                    currentPossibleCharacters = nextPossibleCharacters;
	                }
	                text += currentPossibleCharacters.charAt(Math.floor(Math.random() * currentPossibleCharacters.length));
	            }
	            return text;
	        };
	        //list functions
	        _this.arrayToList = function (array, delimiter) {
	            if (delimiter != null) {
	                return array.join(delimiter);
	            }
	            else {
	                return array.join();
	            }
	        };
	        _this.getPropertyValue = function (object, propertyIdentifier) {
	            var keys = propertyIdentifier.split('.'), obj = object, keyPart;
	            while ((keyPart = keys.shift()) && keys.length) {
	                obj = obj[keyPart];
	            }
	            return obj[keyPart];
	        };
	        _this.setPropertyValue = function (object, propertyIdentifier, value) {
	            var keys = propertyIdentifier.split('.'), obj = object, keyPart;
	            while ((keyPart = keys.shift()) && keys.length) {
	                if (!obj[keyPart]) {
	                    obj[keyPart] = {};
	                }
	                obj = obj[keyPart];
	            }
	            obj[keyPart] = value;
	        };
	        _this.nvpToObject = function (NVPData) {
	            var object = {};
	            for (var key in NVPData) {
	                var value = NVPData[key];
	                var propertyIdentitifer = key.replace(/\_/g, '.');
	                _this.setPropertyValue(object, propertyIdentitifer, value);
	            }
	            return object;
	        };
	        _this.isDescendantElement = function (parent, child) {
	            var node = child.parentNode;
	            while (node != null) {
	                if (node == parent) {
	                    return true;
	                }
	                node = node.parentNode;
	            }
	            return false;
	        };
	        //utility service toJson avoids circular references
	        _this.toJson = function (obj) {
	            var seen = [];
	            return JSON.stringify(obj, function (key, val) {
	                if (val != null && typeof val == "object") {
	                    if (seen.indexOf(val) >= 0) {
	                        return;
	                    }
	                    seen.push(val);
	                }
	                return val;
	            });
	        };
	        _this.listFind = function (list, value, delimiter) {
	            if (list === void 0) { list = ''; }
	            if (value === void 0) { value = ''; }
	            if (delimiter === void 0) { delimiter = ','; }
	            var splitString = list.split(delimiter);
	            var stringFound = -1;
	            for (var i = 0; i < splitString.length; i++) {
	                var stringPart = splitString[i];
	                if (stringPart === value) {
	                    stringFound = i;
	                }
	            }
	            return stringFound;
	        };
	        _this.listLen = function (list, delimiter) {
	            if (list === void 0) { list = ''; }
	            if (delimiter === void 0) { delimiter = ','; }
	            var splitString = list.split(delimiter);
	            return splitString.length;
	        };
	        //This will enable you to sort by two separate keys in the order they are passed in
	        _this.arraySorter = function (array, keysToSortBy) {
	            var arrayOfTypes = [], returnArray = [], firstKey = keysToSortBy[0];
	            if (angular.isDefined(keysToSortBy[1])) {
	                var secondKey = keysToSortBy[1];
	            }
	            for (var itemIndex in array) {
	                if (!(arrayOfTypes.indexOf(array[itemIndex][firstKey]) > -1)) {
	                    arrayOfTypes.push(array[itemIndex][firstKey]);
	                }
	            }
	            arrayOfTypes.sort(function (a, b) {
	                if (a < b) {
	                    return -1;
	                }
	                else if (a > b) {
	                    return 1;
	                }
	                else {
	                    return 0;
	                }
	            });
	            for (var typeIndex in arrayOfTypes) {
	                var tempArray = [];
	                for (var itemIndex in array) {
	                    if (array[itemIndex][firstKey] == arrayOfTypes[typeIndex]) {
	                        tempArray.push(array[itemIndex]);
	                    }
	                }
	                if (keysToSortBy[1] != null) {
	                    tempArray.sort(function (a, b) {
	                        if (a[secondKey] < b[secondKey]) {
	                            return -1;
	                        }
	                        else if (a[secondKey] > b[secondKey]) {
	                            return 1;
	                        }
	                        else {
	                            return 0;
	                        }
	                    });
	                }
	                for (var finalIndex in tempArray) {
	                    returnArray.push(tempArray[finalIndex]);
	                }
	            }
	            return returnArray;
	        };
	        _this.minutesOfDay = function (m) {
	            return m.getMinutes() + m.getHours() * 60;
	        };
	        /**
	         * Returns true if the current page is running in single page mode.
	         */
	        _this.isSinglePageMode = function () {
	            var vars = {};
	            var parts = window.location.href.replace(/[?&]+([^=&]+)#([^/]*)/gi, function (m, key, value) {
	                vars[key] = value;
	            });
	            if (vars.ng) {
	                return true;
	            }
	            return false;
	        };
	        /**
	         * Returns true if the current page is running in multi-page mode.
	         */
	        _this.isMultiPageMode = function () {
	            return !_this.isSinglePageMode();
	        };
	        return _this;
	    }
	    return UtilityService;
	}(baseservice_1.BaseService));
	exports.UtilityService = UtilityService;


/***/ }),
/* 298 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var BaseService = (function () {
	    function BaseService() {
	    }
	    return BaseService;
	}());
	exports.BaseService = BaseService;


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/*services return promises which can be handled uniquely based on success or failure by the controller*/
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseservice_1 = __webpack_require__(298);
	var SelectionService = (function (_super) {
	    __extends(SelectionService, _super);
	    //@ngInject
	    function SelectionService(observerService) {
	        var _this = _super.call(this) || this;
	        _this.observerService = observerService;
	        _this._selection = {};
	        /* add current selectionid to main selection object*/
	        _this.createSelections = function (selectionid) {
	            _this._selection[selectionid] = {
	                allSelected: false,
	                ids: []
	            };
	        };
	        _this.radioSelection = function (selectionid, selection) {
	            _this.createSelections(selectionid);
	            _this._selection[selectionid].ids.push(selection);
	            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
	        };
	        _this.addSelection = function (selectionid, selection) {
	            /*if allSelected flag is true addSelection will remove selection*/
	            if (_this.isAllSelected(selectionid)) {
	                var index = _this._selection[selectionid].ids.indexOf(selection);
	                if (index > -1) {
	                    _this._selection[selectionid].ids.splice(index, 1);
	                    _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
	                }
	            }
	            else if (!_this.hasSelection(selectionid, selection)) {
	                _this._selection[selectionid].ids.push(selection);
	                _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });
	            }
	            console.info(_this._selection[selectionid]);
	        };
	        _this.setSelection = function (selectionid, selections) {
	            if (angular.isUndefined(_this._selection[selectionid])) {
	                _this.createSelections(selectionid);
	            }
	            _this._selection[selectionid].ids = selections;
	        };
	        _this.removeSelection = function (selectionid, selection) {
	            if (angular.isUndefined(_this._selection[selectionid])) {
	                return;
	            }
	            if (!_this.isAllSelected(selectionid)) {
	                var index = _this._selection[selectionid].ids.indexOf(selection);
	                if (index > -1) {
	                    _this._selection[selectionid].ids.splice(index, 1);
	                    _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'uncheck', selectionid: selectionid, selection: selection });
	                }
	                /*if allSelected flag is true removeSelection will add selection*/
	            }
	            else if (!_this.hasSelection(selectionid, selection)) {
	                _this._selection[selectionid].ids.push(selection);
	                _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'uncheck', selectionid: selectionid, selection: selection });
	            }
	            console.info(_this._selection[selectionid]);
	        };
	        _this.hasSelection = function (selectionid, selection) {
	            if (angular.isUndefined(_this._selection[selectionid])) {
	                return false;
	            }
	            return _this._selection[selectionid].ids.indexOf(selection) > -1;
	        };
	        _this.getSelections = function (selectionid) {
	            if (angular.isUndefined(_this._selection[selectionid])) {
	                _this.createSelections(selectionid);
	            }
	            return _this._selection[selectionid].ids;
	        };
	        _this.getSelectionCount = function (selectionid) {
	            if (angular.isUndefined(_this._selection[selectionid])) {
	                _this.createSelections(selectionid);
	            }
	            return _this._selection[selectionid].ids.length;
	        };
	        _this.clearSelection = function (selectionid) {
	            _this.createSelections(selectionid);
	            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'clear' });
	            console.info(_this._selection[selectionid]);
	        };
	        _this.selectAll = function (selectionid) {
	            _this._selection[selectionid] = {
	                allSelected: true,
	                ids: []
	            };
	            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'selectAll' });
	            console.info(_this._selection[selectionid]);
	        };
	        _this.isAllSelected = function (selectionid) {
	            if (angular.isUndefined(_this._selection[selectionid])) {
	                _this.createSelections(selectionid);
	            }
	            return _this._selection[selectionid].allSelected;
	        };
	        return _this;
	    }
	    return SelectionService;
	}(baseservice_1.BaseService));
	exports.SelectionService = SelectionService;


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/**
	 * @ngdoc service
	 * @name sdt.models:ObserverService
	 * @description
	 * # ObserverService
	 * Manages all events inside the application
	 *
	 */
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseservice_1 = __webpack_require__(298);
	var ObserverService = (function (_super) {
	    __extends(ObserverService, _super);
	    //@ngInject
	    function ObserverService($timeout, historyService, utilityService) {
	        var _this = 
	        /**
	         * @ngdoc property
	         * @name ObserverService#observers
	         * @propertyOf sdt.models:ObserverService
	         * @description object to store all observers in
	         * @returns {object} object
	         */
	        _super.call(this) || this;
	        _this.$timeout = $timeout;
	        _this.historyService = historyService;
	        _this.utilityService = utilityService;
	        /* Declare methods */
	        /**
	         * @ngdoc method
	         * @name ObserverService#attach
	         * @methodOf sdt.models:ObserverService
	         * @param {function} callback the callback function to fire
	         * @param {string} event name of the event
	         * @param {string} id unique id for the object that is listening i.e. namespace
	         * @description adds events listeners
	         */
	        _this.attach = function (callback, event, id) {
	            if (!id) {
	                id = _this.utilityService.createID();
	            }
	            event = event.toLowerCase();
	            id = id.toLowerCase();
	            if (!_this.observers[event]) {
	                _this.observers[event] = {};
	            }
	            if (!_this.observers[event][id])
	                _this.observers[event][id] = [];
	            _this.observers[event][id].push(callback);
	        };
	        /**
	         * @ngdoc method
	         * @name ObserverService#detachById
	         * @methodOf sdt.models:ObserverService
	         * @param {string} id unique id for the object that is listening i.e. namespace
	         * @description removes all events for a specific id from the observers object
	         */
	        _this.detachById = function (id) {
	            id = id.toLowerCase();
	            for (var event in _this.observers) {
	                _this.detachByEventAndId(event, id);
	            }
	        };
	        /**
	         * @ngdoc method
	         * @name ObserverService#detachById
	         * @methodOf sdt.models:ObserverService
	         * @param {string} event name of the event
	         * @description removes removes all the event from the observer object
	         */
	        _this.detachByEvent = function (event) {
	            event = event.toLowerCase();
	            if (event in _this.observers) {
	                delete _this.observers[event];
	            }
	        };
	        /**
	         * @ngdoc method
	         * @name ObserverService#detachByEventAndId
	         * @methodOf sdt.models:ObserverService
	         * @param {string} event name of the event
	         * @param {string} id unique id for the object that is listening i.e. namespace
	         * @description removes removes all callbacks for an id in a specific event from the observer object
	         */
	        _this.detachByEventAndId = function (event, id) {
	            event = event.toLowerCase();
	            id = id.toLowerCase();
	            if (event in _this.observers) {
	                if (id in _this.observers[event]) {
	                    delete _this.observers[event][id];
	                }
	            }
	        };
	        /**
	         * @ngdoc method
	         * @name ObserverService#notify
	         * @methodOf sdt.models:ObserverService
	         * @param {string} event name of the event
	         * @param {string|object|Array|number} parameters pass whatever your listener is expecting
	         * @description notifies all observers of a specific event
	         */
	        _this.notify = function (event, parameters) {
	            console.warn(event);
	            event = event.toLowerCase();
	            return _this.$timeout(function () {
	                for (var id in _this.observers[event]) {
	                    for (var _i = 0, _a = _this.observers[event][id]; _i < _a.length; _i++) {
	                        var callback = _a[_i];
	                        callback(parameters);
	                    }
	                }
	            });
	        };
	        /**
	         * @ngdoc method
	         * @name ObserverService#notifyById
	         * @methodOf sdt.models:ObserverService
	         * @param {string} event name of the event
	         * @param {string} eventId unique id for the object that is listening i.e. namespace
	         * @param {string|object|Array|number} parameters pass whatever your listener is expecting
	         * @description notifies observers of a specific event by id
	         */
	        _this.notifyById = function (event, eventId, parameters) {
	            event = event.toLowerCase();
	            eventId = eventId.toLowerCase();
	            return _this.$timeout(function () {
	                for (var id in _this.observers[event]) {
	                    if (id != eventId)
	                        continue;
	                    angular.forEach(_this.observers[event][id], function (callback) {
	                        callback(parameters);
	                    });
	                }
	            });
	        };
	        _this.notifyAndRecord = function (event, parameters) {
	            return _this.notify(event, parameters).then(function () {
	                _this.historyService.recordHistory(event, parameters, true);
	            });
	        };
	        _this.observers = {};
	        return _this;
	    }
	    return ObserverService;
	}(baseservice_1.BaseService));
	exports.ObserverService = ObserverService;


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseentityservice_1 = __webpack_require__(281);
	var OrderService = (function (_super) {
	    __extends(OrderService, _super);
	    //@ngInject
	    function OrderService($injector, $hibachi, utilityService) {
	        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Order') || this;
	        _this.$injector = $injector;
	        _this.$hibachi = $hibachi;
	        _this.utilityService = utilityService;
	        _this.newOrder_AddOrderPayment = function () {
	            return _this.newProcessObject('Order_AddOrderPayment');
	        };
	        return _this;
	    }
	    return OrderService;
	}(baseentityservice_1.BaseEntityService));
	exports.OrderService = OrderService;


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseentityservice_1 = __webpack_require__(281);
	var OrderPaymentService = (function (_super) {
	    __extends(OrderPaymentService, _super);
	    //@ngInject
	    function OrderPaymentService($injector, $hibachi, utilityService) {
	        var _this = _super.call(this, $injector, $hibachi, utilityService, 'OrderPayment') || this;
	        _this.$injector = $injector;
	        _this.$hibachi = $hibachi;
	        _this.utilityService = utilityService;
	        return _this;
	    }
	    return OrderPaymentService;
	}(baseentityservice_1.BaseEntityService));
	exports.OrderPaymentService = OrderPaymentService;


/***/ }),
/* 303 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var Form = (function () {
	    //@ngInject
	    function Form(name, object, editing) {
	        this.$addControl = function (control) { };
	        this.$removeControl = function (control) { };
	        this.$setValidity = function (validationErrorKey, isValid, control) { };
	        this.$setDirty = function () { };
	        this.$setPristine = function () { };
	        this.$commitViewValue = function () { };
	        this.$rollbackViewValue = function () { };
	        this.$setSubmitted = function () { };
	        this.$setUntouched = function () { };
	        this.name = name;
	        this.object = object;
	        this.editing = editing;
	    }
	    return Form;
	}());
	var FormService = (function () {
	    function FormService($log) {
	        var _this = this;
	        this.$log = $log;
	        this.setPristinePropertyValue = function (property, value) {
	            _this._pristinePropertyValue[property] = value;
	        };
	        this.getPristinePropertyValue = function (property) {
	            return _this._pristinePropertyValue[property];
	        };
	        this.setForm = function (form) {
	            _this._forms[form.name] = form;
	        };
	        this.getForm = function (formName) {
	            return _this._forms[formName];
	        };
	        this.getForms = function () {
	            return _this._forms;
	        };
	        this.getFormsByObjectName = function (objectName) {
	            var forms = [];
	            for (var f in _this._forms) {
	                if (angular.isDefined(_this._forms[f].$$swFormInfo.object) && _this._forms[f].$$swFormInfo.object.metaData.className === objectName) {
	                    forms.push(_this._forms[f]);
	                }
	            }
	            return forms;
	        };
	        this.createForm = function (name, object, editing) {
	            var _form = new Form(name, object, editing);
	            _this.setForm(_form);
	            return _form;
	        };
	        this.resetForm = function (form) {
	            _this.$log.debug('resetting form');
	            _this.$log.debug(form);
	            for (var key in form) {
	                if (angular.isDefined(form[key])
	                    && typeof form[key].$setViewValue == 'function'
	                    && angular.isDefined(form[key].$viewValue)) {
	                    _this.$log.debug(form[key]);
	                    if (angular.isDefined(_this.getPristinePropertyValue(key))) {
	                        form[key].$setViewValue(_this.getPristinePropertyValue(key));
	                    }
	                    else {
	                        form[key].$setViewValue('');
	                    }
	                    form[key].$setUntouched(true);
	                    form[key].$render();
	                    _this.$log.debug(form[key]);
	                }
	            }
	            form.$submitted = false;
	            form.$setPristine();
	            form.$setUntouched();
	        };
	        this.$log = $log;
	        this._forms = {};
	        this._pristinePropertyValue = {};
	    }
	    return FormService;
	}());
	FormService.$inject = ['$log'];
	exports.FormService = FormService;


/***/ }),
/* 304 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var FilterService = (function () {
	    //ngInject
	    function FilterService() {
	        this.filterMatch = function (valueToCompareAgainst, comparisonOperator, comparisonValue) {
	            switch (comparisonOperator) {
	                case "!=":
	                    if (valueToCompareAgainst != comparisonValue) {
	                        return true;
	                    }
	                    break;
	                case ">":
	                    if (valueToCompareAgainst > comparisonValue) {
	                        return true;
	                    }
	                    break;
	                case ">=":
	                    if (valueToCompareAgainst >= comparisonValue) {
	                        return true;
	                    }
	                    break;
	                case "<":
	                    if (valueToCompareAgainst < comparisonValue) {
	                        return true;
	                    }
	                    break;
	                case "<=":
	                    if (valueToCompareAgainst <= comparisonValue) {
	                        return true;
	                    }
	                    break;
	                case "is":
	                    if (valueToCompareAgainst == comparisonValue) {
	                        return true;
	                    }
	                    break;
	                case "is not":
	                    if (valueToCompareAgainst != comparisonValue) {
	                        return true;
	                    }
	                    break;
	                default:
	                    //= case
	                    if (valueToCompareAgainst == comparisonValue) {
	                        return true;
	                    }
	                    break;
	            }
	            return false;
	        };
	    }
	    return FilterService;
	}());
	exports.FilterService = FilterService;


/***/ }),
/* 305 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var ExpandableService = (function () {
	    //ngInject
	    function ExpandableService() {
	        var _this = this;
	        this.recordStates = {};
	        this.addRecord = function (recordID, state) {
	            if (angular.isUndefined(state)) {
	                state = { isLoaded: true };
	            }
	            _this.recordStates[recordID] = state;
	        };
	        this.updateState = function (recordID, state) {
	            if (angular.isUndefined(_this.recordStates[recordID])) {
	                _this.recordStates[recordID] = {};
	            }
	            for (var key in state) {
	                _this.recordStates[recordID][key] = state[key];
	            }
	        };
	        this.getState = function (recordID, key) {
	            if (angular.isDefined(_this.recordStates[recordID]) && angular.isDefined(key)) {
	                var dataToReturn = _this.recordStates[recordID][key];
	            }
	            else {
	                var dataToReturn = _this.recordStates[recordID];
	            }
	            if (angular.isDefined(dataToReturn)) {
	                return dataToReturn;
	            }
	            return false;
	        };
	    }
	    return ExpandableService;
	}());
	exports.ExpandableService = ExpandableService;


/***/ }),
/* 306 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var MetaDataService = (function () {
	    //@ngInject
	    function MetaDataService($filter, $log) {
	        var _this = this;
	        this.$filter = $filter;
	        this.$log = $log;
	        this.getPropertyHintByObjectAndPropertyIdentifier = function (object, propertyIdentifier) {
	            var hint = "";
	            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
	                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
	                    hint = object.metaData && object.metaData[propertyIdentifier].attributeHint;
	                }
	                else {
	                    hint = object.metaData.$$getPropertyHint(propertyIdentifier);
	                }
	            }
	            return hint;
	        };
	        this.getPropertyTitle = function (object, propertyIdentifier) {
	            var title = "";
	            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
	                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
	                    title = object.metaData && object.metaData[propertyIdentifier].attributeName;
	                }
	                else {
	                    title = object.metaData.$$getPropertyTitle(propertyIdentifier);
	                }
	            }
	            return title;
	        };
	        this.getPropertyFieldType = function (object, propertyIdentifier) {
	            var fieldType = "";
	            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {
	                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {
	                    fieldType = object.metaData && object.metaData[propertyIdentifier].attributeInputType;
	                }
	                else {
	                    fieldType = object.metaData.$$getPropertyFieldType(propertyIdentifier);
	                }
	            }
	            return fieldType;
	        };
	        this.isAttributePropertyByEntityAndPropertyIdentifier = function (object, propertyIdentifier) {
	            return object.metaData && object.metaData[propertyIdentifier] && object.metaData[propertyIdentifier].attributeCode == propertyIdentifier;
	        };
	        this.hasPropertyByEntityNameAndPropertyIdentifier = function (object, propertyIdentifier) {
	            return object.metaData && object.metaData[propertyIdentifier];
	        };
	        this.getPropertiesList = function () {
	            return _this._propertiesList;
	        };
	        this.getPropertiesListByBaseEntityAlias = function (baseEntityAlias) {
	            return _this._propertiesList[baseEntityAlias];
	        };
	        this.setPropertiesList = function (value, key) {
	            _this._propertiesList[key] = value;
	        };
	        this.formatPropertiesList = function (propertiesList, propertyIdentifier) {
	            if (!propertiesList) {
	                propertiesList = {};
	            }
	            if (!propertiesList.data) {
	                propertiesList.data = [];
	            }
	            var simpleGroup = {
	                $$group: 'simple',
	            };
	            propertiesList.data.push(simpleGroup);
	            var drillDownGroup = {
	                $$group: 'drilldown',
	            };
	            propertiesList.data.push(drillDownGroup);
	            var compareCollections = {
	                $$group: 'compareCollections',
	            };
	            propertiesList.data.push(compareCollections);
	            var attributeCollections = {
	                $$group: 'attribute',
	            };
	            propertiesList.data.push(attributeCollections);
	            for (var i in propertiesList.data) {
	                if (angular.isDefined(propertiesList.data[i].ormtype)) {
	                    if (angular.isDefined(propertiesList.data[i].attributeID)) {
	                        propertiesList.data[i].$$group = 'attribute';
	                    }
	                    else {
	                        propertiesList.data[i].$$group = 'simple';
	                    }
	                }
	                if (angular.isDefined(propertiesList.data[i].fieldtype)) {
	                    if (propertiesList.data[i].fieldtype === 'id') {
	                        propertiesList.data[i].$$group = 'simple';
	                    }
	                    if (propertiesList.data[i].fieldtype === 'many-to-one') {
	                        propertiesList.data[i].$$group = 'drilldown';
	                    }
	                    if (propertiesList.data[i].fieldtype === 'many-to-many' || propertiesList.data[i].fieldtype === 'one-to-many') {
	                        propertiesList.data[i].$$group = 'compareCollections';
	                    }
	                }
	                var divider = '_';
	                if (propertiesList.data[i].$$group == 'simple' || propertiesList.data[i].$$group == 'attribute') {
	                    divider = '.';
	                }
	                propertiesList.data[i].propertyIdentifier = propertyIdentifier + divider + propertiesList.data[i].name;
	            }
	            //propertiesList.data = _orderBy(propertiesList.data,['displayPropertyIdentifier'],false);
	            //--------------------------------Removes empty lines from dropdown.
	            var temp = [];
	            for (var i_1 = 0; i_1 <= propertiesList.data.length - 1; i_1++) {
	                if (propertiesList.data[i_1].propertyIdentifier.indexOf(".undefined") != -1 || propertiesList.data[i_1].propertyIdentifier.indexOf("_undefined") != -1) {
	                    _this.$log.debug("removing: " + propertiesList.data[i_1].displayPropertyIdentifier);
	                    propertiesList.data[i_1].displayPropertyIdentifier = "hide";
	                }
	                else {
	                    temp.push(propertiesList.data[i_1]);
	                    _this.$log.debug(propertiesList.data[i_1]);
	                }
	            }
	            temp.sort;
	            propertiesList.data = temp;
	            _this.$log.debug("----------------------PropertyList\n\n\n\n\n");
	            propertiesList.data = _this._orderBy(propertiesList.data, ['propertyIdentifier'], false);
	            //--------------------------------End remove empty lines.
	        };
	        this.orderBy = function (propertiesList, predicate, reverse) {
	            return _this._orderBy(propertiesList, predicate, reverse);
	        };
	        this.$filter = $filter;
	        this.$log = $log;
	        this._propertiesList = {};
	        this._orderBy = $filter('orderBy');
	    }
	    return MetaDataService;
	}());
	MetaDataService.$inject = [
	    '$filter',
	    '$log'
	];
	exports.MetaDataService = MetaDataService;


/***/ }),
/* 307 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var RbKeyService = (function () {
	    //@ngInject
	    function RbKeyService($http, $q, appConfig, resourceBundles) {
	        var _this = this;
	        this.$http = $http;
	        this.$q = $q;
	        this.appConfig = appConfig;
	        this.resourceBundles = resourceBundles;
	        this._resourceBundle = {};
	        this._resourceBundleLastModified = '';
	        this._loadingResourceBundle = false;
	        this._loadedResourceBundle = false;
	        this.getRBLoaded = function () {
	            return _this._loadedResourceBundle;
	        };
	        this.rbKey = function (key, replaceStringData) {
	            ////$log.debug('rbkey');
	            ////$log.debug(key);
	            ////$log.debug(this.getConfig().rbLocale);
	            var keyValue = _this.getRBKey(key, _this.appConfig.rbLocale);
	            ////$log.debug(keyValue);
	            return keyValue;
	        };
	        this.getRBKey = function (key, locale, checkedKeys, originalKey) {
	            ////$log.debug('getRBKey');
	            ////$log.debug('loading:'+this._loadingResourceBundle);
	            ////$log.debug('loaded'+this._loadedResourceBundle);
	            if (_this.resourceBundles) {
	                key = key.toLowerCase();
	                checkedKeys = checkedKeys || "";
	                locale = locale || 'en_us';
	                ////$log.debug('locale');
	                ////$log.debug(locale);
	                var keyListArray = key.split(',');
	                ////$log.debug('keylistAray');
	                ////$log.debug(keyListArray);
	                if (keyListArray.length > 1) {
	                    var keyValue = "";
	                    for (var i = 0; i < keyListArray.length; i++) {
	                        keyValue = _this.getRBKey(keyListArray[i], locale, keyValue);
	                        //$log.debug('keyvalue:'+keyValue);
	                        if (keyValue.slice(-8) != "_missing") {
	                            break;
	                        }
	                    }
	                    return keyValue;
	                }
	                var bundle = _this.resourceBundles[locale];
	                if (angular.isDefined(bundle[key])) {
	                    //$log.debug('rbkeyfound:'+bundle[key]);
	                    return bundle[key];
	                }
	                var checkedKeysListArray = checkedKeys.split(',');
	                checkedKeysListArray.push(key + '_' + locale + '_missing');
	                checkedKeys = checkedKeysListArray.join(",");
	                if (angular.isUndefined(originalKey)) {
	                    originalKey = key;
	                }
	                //$log.debug('originalKey:'+key);
	                //$log.debug(checkedKeysListArray);
	                var localeListArray = locale.split('_');
	                //$log.debug(localeListArray);
	                if (localeListArray.length === 2) {
	                    bundle = _this.resourceBundles[localeListArray[0]];
	                    if (angular.isDefined(bundle[key])) {
	                        //$log.debug('rbkey found:'+bundle[key]);
	                        return bundle[key];
	                    }
	                    checkedKeysListArray.push(key + '_' + localeListArray[0] + '_missing');
	                    checkedKeys = checkedKeysListArray.join(",");
	                }
	                var keyDotListArray = key.split('.');
	                if (keyDotListArray.length >= 3
	                    && keyDotListArray[keyDotListArray.length - 2] === 'define') {
	                    var newKey = key.replace(keyDotListArray[keyDotListArray.length - 3] + '.define', 'define');
	                    //$log.debug('newkey1:'+newKey);
	                    return _this.getRBKey(newKey, locale, checkedKeys, originalKey);
	                }
	                else if (keyDotListArray.length >= 2 && keyDotListArray[keyDotListArray.length - 2] !== 'define') {
	                    var newKey = key.replace(keyDotListArray[keyDotListArray.length - 2] + '.', 'define.');
	                    //$log.debug('newkey:'+newKey);
	                    return _this.getRBKey(newKey, locale, checkedKeys, originalKey);
	                }
	                //$log.debug(localeListArray);
	                if (localeListArray[0] !== "en") {
	                    return _this.getRBKey(originalKey, 'en', checkedKeys);
	                }
	                return checkedKeys;
	            }
	            return '';
	        };
	        this.$q = $q;
	        this.$http = $http;
	        this.appConfig = appConfig;
	        this.resourceBundles = resourceBundles;
	    }
	    return RbKeyService;
	}());
	exports.RbKeyService = RbKeyService;


/***/ }),
/* 308 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var TypeaheadService = (function () {
	    //public typeaheadStore:Observable<any>;
	    /**
	     * This will contain the stream of actions which I'm defining as an object
	     */
	    //public actionStream:any;
	    /**
	     * The reducer handles changes from one state to the next. Every state transition is defined as an action.
	     * @param Reducer
	     * @param observerService
	     */
	    //public reducer:any;
	    //@ngInject
	    function TypeaheadService($timeout, observerService) {
	        var _this = this;
	        this.$timeout = $timeout;
	        this.observerService = observerService;
	        this.typeaheadData = {};
	        this.typeaheadPromises = {};
	        this.typeaheadStates = {};
	        /**
	         * Note that message should have a type and a data field
	         */
	        this.notifyObservers = function (_message) {
	            for (var observer in _this.observers) {
	                _this.observers[observer].recieveNotification(_message);
	            }
	        };
	        /**
	         * This manages all the observer events without the need for setting ids etc.
	         */
	        this.registerObserver = function (_observer) {
	            if (!_observer) {
	                throw new Error('Observer required for registration');
	            }
	            _this.observers.push(_observer);
	        };
	        /**
	         * Removes the observer. Just pass in this
	         */
	        this.removeObserver = function (_observer) {
	            if (!_observer) {
	                throw new Error('Observer required for removal.');
	            }
	            for (var observer in _this.observers) {
	                if (_this.observers[observer] == (_observer)) {
	                    if (_this.observers.indexOf(_observer) > -1) {
	                        _this.observers.splice(_this.observers.indexOf(_observer), 1);
	                    }
	                }
	            }
	        };
	        this.getTypeaheadSelectionUpdateEvent = function (key) {
	            return "typeaheadSelectionUpdated" + key;
	        };
	        this.attachTypeaheadSelectionUpdateEvent = function (key, callback) {
	            _this.observerService.attach(callback, _this.getTypeaheadSelectionUpdateEvent(key));
	        };
	        this.notifyTypeaheadSelectionUpdateEvent = function (key) {
	            _this.observerService.notify(_this.getTypeaheadSelectionUpdateEvent(key));
	        };
	        this.setTypeaheadState = function (key, state) {
	            _this.typeaheadStates[key] = state;
	        };
	        this.getTypeaheadState = function (key) {
	            return _this.typeaheadStates[key];
	        };
	        this.getTypeaheadPrimaryIDPropertyName = function (key) {
	            return _this.getTypeaheadState(key).primaryIDPropertyName;
	        };
	        this.getIndexOfSelection = function (key, data) {
	            for (var j = 0; j < _this.getData(key).length; j++) {
	                if (angular.isDefined(data[_this.getTypeaheadPrimaryIDPropertyName(key)]) &&
	                    data[_this.getTypeaheadPrimaryIDPropertyName(key)] == _this.getData(key)[j][_this.getTypeaheadPrimaryIDPropertyName(key)]) {
	                    return j;
	                }
	                else if (_this.checkAgainstFallbackProperties(key, _this.getData(key)[j], data)) {
	                    return j;
	                }
	            }
	            return -1;
	        };
	        this.addSelection = function (key, data) {
	            if (angular.isUndefined(_this.typeaheadData[key])) {
	                _this.typeaheadData[key] = [];
	                _this.state['typeaheadData'][key] = [];
	            }
	            _this.typeaheadData[key].push(data);
	            _this.state['typeaheadData'][key].push(data);
	            _this.notifyTypeaheadSelectionUpdateEvent(key);
	        };
	        this.removeSelection = function (key, index, data) {
	            if (angular.isUndefined(index) &&
	                angular.isDefined(data)) {
	                index = _this.getIndexOfSelection(key, data);
	            }
	            if (angular.isDefined(index) &&
	                angular.isDefined(_this.typeaheadData[key]) &&
	                index != -1) {
	                _this.updateSelections(key);
	                var removedItem = _this.typeaheadData[key].splice(index, 1)[0]; //this will always be an array of 1 element
	                _this.notifyTypeaheadSelectionUpdateEvent(key);
	                return removedItem;
	            }
	        };
	        this.initializeSelections = function (key, selectedCollectionConfig) {
	            selectedCollectionConfig.setAllRecords(true);
	            _this.typeaheadPromises[key] = selectedCollectionConfig.getEntity();
	            _this.typeaheadPromises[key].then(function (data) {
	                for (var j = 0; j < data.records.length; j++) {
	                    _this.addSelection(key, data.records[j]);
	                }
	            }, function (reason) {
	                throw ("typeaheadservice had trouble intializing selections for " + key + " because " + reason);
	            });
	        };
	        this.updateSelections = function (key) {
	            if (angular.isDefined(_this.getData(key)) && _this.getData(key).length) {
	                for (var j = 0; j < _this.getTypeaheadState(key).results.length; j++) {
	                    for (var i = 0; i < _this.getData(key).length; i++) {
	                        if (_this.getData(key)[i][_this.getTypeaheadPrimaryIDPropertyName(key)] == _this.getTypeaheadState(key).results[j][_this.getTypeaheadPrimaryIDPropertyName(key)]) {
	                            _this.markResultSelected(_this.getTypeaheadState(key).results[j], i);
	                            break;
	                        }
	                        var found = _this.checkAgainstFallbackProperties(key, _this.getData(key)[i], _this.getTypeaheadState(key).results[j], i);
	                        if (found) {
	                            break;
	                        }
	                    }
	                }
	            }
	        };
	        this.markResultSelected = function (result, index) {
	            result.selected = true;
	            result.selectedIndex = index;
	        };
	        this.checkAgainstFallbackProperties = function (key, selection, result, selectionIndex) {
	            var resultPrimaryID = result[_this.getTypeaheadPrimaryIDPropertyName(key)];
	            //is there a singular property to compare against
	            if (angular.isDefined(_this.getTypeaheadState(key).propertyToCompare) &&
	                _this.getTypeaheadState(key).propertyToCompare.length) {
	                if (angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare]) &&
	                    selection[_this.getTypeaheadState(key).propertyToCompare] == resultPrimaryID) {
	                    if (angular.isDefined(selectionIndex)) {
	                        _this.markResultSelected(result, selectionIndex);
	                    }
	                    return true;
	                }
	                if (angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare]) &&
	                    angular.isDefined(result[_this.getTypeaheadState(key).propertyToCompare]) &&
	                    selection[_this.getTypeaheadState(key).propertyToCompare] == result[_this.getTypeaheadState(key).propertyToCompare]) {
	                    if (angular.isDefined(selectionIndex)) {
	                        _this.markResultSelected(result, selectionIndex);
	                    }
	                    return true;
	                }
	            }
	            //check the defined fallback properties to see if theres a match
	            if (_this.getTypeaheadState(key).fallbackPropertyArray.length > 0) {
	                for (var j = 0; j < _this.getTypeaheadState(key).fallbackPropertyArray.length; j++) {
	                    var property = _this.getTypeaheadState(key).fallbackPropertyArray[j];
	                    if (angular.isDefined(selection[property])) {
	                        if (selection[property] == resultPrimaryID) {
	                            if (angular.isDefined(selectionIndex)) {
	                                _this.markResultSelected(result, selectionIndex);
	                            }
	                            return true;
	                        }
	                        if (angular.isDefined(result[property]) &&
	                            selection[property] == result[property]) {
	                            if (angular.isDefined(selectionIndex)) {
	                                _this.markResultSelected(result, selectionIndex);
	                            }
	                            return true;
	                        }
	                    }
	                }
	            }
	            return false;
	        };
	        this.updateSelectionList = function (key) {
	            var selectionIDArray = [];
	            if (angular.isDefined(_this.getData(key))) {
	                for (var j = 0; j < _this.getData(key).length; j++) {
	                    var selection = _this.getData(key)[j];
	                    var primaryID = selection[_this.getTypeaheadPrimaryIDPropertyName(key)];
	                    if (angular.isDefined(primaryID)) {
	                        selectionIDArray.push(primaryID);
	                    }
	                    else if (angular.isDefined(_this.getTypeaheadState(key).propertyToCompare) &&
	                        angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare])) {
	                        selectionIDArray.push(selection[_this.getTypeaheadState(key).propertyToCompare]);
	                    }
	                    else if (angular.isDefined(_this.getTypeaheadState(key).fallbackPropertyArray)) {
	                        var fallbackPropertyArray = _this.getTypeaheadState(key).fallbackPropertyArray;
	                        for (var i = 0; i < fallbackPropertyArray.length; i++) {
	                            var fallbackProperty = fallbackPropertyArray[i];
	                            if (angular.isDefined(selection[fallbackProperty])) {
	                                selectionIDArray.push(selection[fallbackProperty]);
	                                break;
	                            }
	                        }
	                    }
	                }
	            }
	            return selectionIDArray.join(",");
	        };
	        this.getData = function (key) {
	            if (key in _this.typeaheadPromises) {
	                //wait until it's been intialized
	                _this.typeaheadPromises[key].then().finally(function () {
	                    return _this.typeaheadData[key] || [];
	                });
	                delete _this.typeaheadPromises[key];
	            }
	            else {
	                return _this.typeaheadData[key] || [];
	            }
	        };
	        //strips out dangerous directives that cause infinite compile errors 
	        // - this probably belongs in a different service but is used for typeahead only at the moment
	        this.stripTranscludedContent = function (transcludedContent) {
	            for (var i = 0; i < transcludedContent.length; i++) {
	                if (angular.isDefined(transcludedContent[i].localName) &&
	                    transcludedContent[i].localName == 'ng-transclude') {
	                    transcludedContent = transcludedContent.children();
	                }
	            }
	            //prevent collection config from being recompiled
	            for (var i = 0; i < transcludedContent.length; i++) {
	                if (angular.isDefined(transcludedContent[i].localName) &&
	                    transcludedContent[i].localName == 'sw-collection-config') {
	                    transcludedContent.splice(i, 1);
	                }
	            }
	            return transcludedContent;
	        };
	        this.observers = new Array();
	        //Setup the action stream
	        /*this.actionStream = new Subject();
	        this.state = {};

	        //Setup the basic reducer. This only handles adding a selection right now. ...state means any number of properties.
	        this.reducer = (state, action:Action) => {
	           switch(action.type) {
	               case 'ADD_SELECTION':
	                   console.log("ADD_SELECTION CALLED", state, action);
	                   this.addSelection(action.payload.id, action.payload.data );
	                   return {
	                       state: this.state,
	                       name: action.payload.name
	                   };
	               default:
	                   return state;
	           }
	       }

	       //Setup the store that will handle all state.
	       this.actionStream.startWith(this.state).scan(this.reducer);
	       console.log("Action Stream: ", this.actionStream);
	       console.log("Store", this.typeaheadStore);*/
	    }
	    return TypeaheadService;
	}());
	exports.TypeaheadService = TypeaheadService;


/***/ }),
/* 309 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	// interface ISlatwallRootScopeService extends ng.IRootScopeService{
	//     loadedResourceBundle:boolean;
	// 	loadingResourceBundle:boolean;
	// }
	var HibachiService = (function () {
	    //@ngInject
	    function HibachiService($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbkeyService, appConfig, _config, _jsEntities, _jsEntityInstances) {
	        var _this = this;
	        this.$window = $window;
	        this.$q = $q;
	        this.$http = $http;
	        this.$timeout = $timeout;
	        this.$log = $log;
	        this.$rootScope = $rootScope;
	        this.$location = $location;
	        this.$anchorScroll = $anchorScroll;
	        this.requestService = requestService;
	        this.utilityService = utilityService;
	        this.formService = formService;
	        this.rbkeyService = rbkeyService;
	        this.appConfig = appConfig;
	        this._config = _config;
	        this._jsEntities = _jsEntities;
	        this._jsEntityInstances = _jsEntityInstances;
	        this._deferred = {};
	        this._resourceBundle = {};
	        this.buildUrl = function (action, queryString) {
	            //actionName example: slatAction. defined in FW1 and populated to config
	            var actionName = _this.appConfig.action;
	            var baseUrl = _this.appConfig.baseURL;
	            queryString = queryString || '';
	            if (angular.isDefined(queryString) && queryString.length) {
	                if (queryString.indexOf('&') !== 0) {
	                    queryString = '&' + queryString;
	                }
	            }
	            return baseUrl + '?' + actionName + '=' + action + queryString;
	        };
	        this.getUrlWithActionPrefix = function () {
	            return _this.appConfig.baseURL + '/index.cfm/?' + _this.appConfig.action + "=";
	        };
	        this.getJsEntities = function () {
	            return _this._jsEntities;
	        };
	        this.setJsEntities = function (jsEntities) {
	            _this._jsEntities = jsEntities;
	        };
	        this.getJsEntityInstances = function () {
	            return _this._jsEntityInstances;
	        };
	        this.setJsEntityInstances = function (jsEntityInstances) {
	            _this._jsEntityInstances = jsEntityInstances;
	        };
	        this.getEntityExample = function (entityName) {
	            return _this._jsEntityInstances[entityName];
	        };
	        this.getEntityMetaData = function (entityName) {
	            return _this._jsEntityInstances[entityName].metaData;
	        };
	        this.getPropertyByEntityNameAndPropertyName = function (entityName, propertyName) {
	            return _this.getEntityMetaData(entityName)[propertyName];
	        };
	        this.getPrimaryIDPropertyNameByEntityName = function (entityName) {
	            return _this.getEntityExample(entityName).$$getIDName();
	        };
	        this.getEntityHasPropertyByEntityName = function (entityName, propertyName) {
	            return angular.isDefined(_this.getEntityMetaData(entityName)[propertyName]);
	        };
	        this.getBaseEntityAliasFromName = function (entityName) {
	            return '_' + entityName;
	        };
	        this.getPropertyIsObjectByEntityNameAndPropertyIdentifier = function (entityName, propertyIdentifier) {
	            var lastEntity = _this.getLastEntityNameInPropertyIdentifier(entityName, propertyIdentifier);
	            var entityMetaData = _this.getEntityMetaData(lastEntity);
	            return angular.isDefined(entityMetaData[_this.utilityService.listLast(propertyIdentifier, '.')].cfc);
	        };
	        this.getLastEntityNameInPropertyIdentifier = function (entityName, propertyIdentifier) {
	            if (!entityName) {
	                throw ('No entity name was supplied to getLastEntityNameInPropertyIdentifier in hibachi service.');
	            }
	            //strip alias if it exists and convert everything to be periods
	            if (propertyIdentifier.charAt(0) === '_') {
	                propertyIdentifier = _this.utilityService.listRest(propertyIdentifier.replace(/_/g, '.'), '.');
	            }
	            var propertyIdentifierArray = propertyIdentifier.split('.');
	            if (propertyIdentifierArray[0] === entityName.toLowerCase()) {
	                propertyIdentifierArray.shift();
	            }
	            if (propertyIdentifierArray.length > 1) {
	                var propertiesStruct = _this.getEntityMetaData(entityName);
	                var currentProperty = propertyIdentifierArray.shift();
	                if (!propertiesStruct[currentProperty] ||
	                    !propertiesStruct[currentProperty].cfc) {
	                    throw ("The Property Identifier " + propertyIdentifier + " is invalid for the entity " + entityName);
	                }
	                var currentEntityName = propertiesStruct[currentProperty].cfc;
	                var currentPropertyIdentifier = propertyIdentifierArray.join('.');
	                return _this.getLastEntityNameInPropertyIdentifier(currentEntityName, currentPropertyIdentifier);
	            }
	            return entityName;
	        };
	        //helper method to inflate a new entity with data
	        this.populateEntity = function (entityName, data) {
	            var newEntity = _this.newEntity(entityName);
	            angular.extend(newEntity.data, data);
	            return newEntity;
	        };
	        //service method used to transform collection data to collection objects based on a collectionconfig
	        this.populateCollection = function (collectionData, collectionConfig) {
	            //create array to hold objects
	            var entities = [];
	            //loop over all collection data to create objects
	            var hibachiService = _this;
	            angular.forEach(collectionData, function (collectionItemData, key) {
	                //create base Entity
	                var entity = hibachiService['new' + collectionConfig.baseEntityName.replace('Slatwall', '')]();
	                //populate entity with data based on the collectionConfig
	                angular.forEach(collectionConfig.columns, function (column, key) {
	                    //get objects base properties
	                    var propertyIdentifier = column.propertyIdentifier.replace(collectionConfig.baseEntityAlias.toLowerCase(), '');
	                    propertyIdentifier = _this.utilityService.replaceAll(propertyIdentifier, '_', '.');
	                    if (propertyIdentifier.charAt(0) === '.') {
	                        propertyIdentifier = propertyIdentifier.slice(1);
	                    }
	                    console.log(propertyIdentifier);
	                    var propertyIdentifierArray = propertyIdentifier.split('.');
	                    var propertyIdentifierKey = propertyIdentifier.replace(/\./g, '_');
	                    console.log(propertyIdentifierKey);
	                    var currentEntity = entity;
	                    angular.forEach(propertyIdentifierArray, function (property, key) {
	                        if (key === propertyIdentifierArray.length - 1) {
	                            //if we are on the last item in the array
	                            if (angular.isObject(collectionItemData[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype === 'many-to-one') {
	                                var relatedEntity = hibachiService['new' + currentEntity.metaData[property].cfc]();
	                                relatedEntity.$$init(collectionItemData[propertyIdentifierKey][0]);
	                                currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);
	                            }
	                            else if (angular.isArray(collectionItemData[propertyIdentifierKey]) && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {
	                                angular.forEach(collectionItemData[propertyIdentifierKey], function (arrayItem, key) {
	                                    var relatedEntity = hibachiService['new' + currentEntity.metaData[property].cfc]();
	                                    relatedEntity.$$init(arrayItem);
	                                    currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);
	                                });
	                            }
	                            else {
	                                currentEntity.data[property] = collectionItemData[propertyIdentifierKey];
	                            }
	                        }
	                        else {
	                            var propertyMetaData = currentEntity.metaData[property];
	                            if (angular.isUndefined(currentEntity.data[property])) {
	                                if (propertyMetaData.fieldtype === 'one-to-many') {
	                                    relatedEntity = [];
	                                }
	                                else {
	                                    relatedEntity = hibachiService['new' + propertyMetaData.cfc]();
	                                }
	                            }
	                            else {
	                                relatedEntity = currentEntity.data[property];
	                            }
	                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);
	                            currentEntity = relatedEntity;
	                        }
	                    });
	                });
	                entities.push(entity);
	            });
	            return entities;
	        };
	        /*basic entity getter where id is optional, returns a promise*/
	        this.getDefer = function (deferKey) {
	            return _this._deferred[deferKey];
	        };
	        this.cancelPromise = function (deferKey) {
	            var deferred = _this.getDefer(deferKey);
	            if (angular.isDefined(deferred)) {
	                deferred.resolve({ messages: [{ messageType: 'error', message: 'User Cancelled' }] });
	            }
	        };
	        this.newEntity = function (entityName) {
	            var entityServiceName = entityName.charAt(0).toLowerCase() + entityName.slice(1) + 'Service';
	            if (angular.element(document.body).injector().has(entityServiceName)) {
	                var entityService = angular.element(document.body).injector().get(entityServiceName);
	                return entityService['new' + entityName]();
	            }
	            return new _this._jsEntities[entityName];
	        };
	        this.getEntityDefinition = function (entityName) {
	            return _this._jsEntities[entityName];
	        };
	        /*basic entity getter where id is optional, returns a promise*/
	        this.getEntity = function (entityName, options) {
	            /*
	            *
	            * getEntity('Product', '12345-12345-12345-12345');
	            * getEntity('Product', {keywords='Hello'});
	            *
	            */
	            var apiSubsystemName = _this.appConfig.apiSubsystemName || "api";
	            if (angular.isUndefined(options)) {
	                options = {};
	            }
	            if (angular.isDefined(options.deferKey)) {
	                _this.cancelPromise(options.deferKey);
	            }
	            var params = {};
	            if (typeof options === 'string') {
	                var urlString = _this.getUrlWithActionPrefix() + apiSubsystemName + ':' + 'main.get&entityName=' + entityName + '&entityID=' + options;
	            }
	            else {
	                params['P:Current'] = options.currentPage || 1;
	                params['P:Show'] = options.pageShow || 10;
	                params.keywords = options.keywords || '';
	                params.columnsConfig = options.columnsConfig || '';
	                params.filterGroupsConfig = options.filterGroupsConfig || '';
	                params.joinsConfig = options.joinsConfig || '';
	                params.orderByConfig = options.orderByConfig || '';
	                params.groupBysConfig = options.groupBysConfig || '';
	                params.isDistinct = options.isDistinct || false;
	                params.propertyIdentifiersList = options.propertyIdentifiersList || '';
	                params.allRecords = options.allRecords || false;
	                params.defaultColumns = options.defaultColumns || true;
	                params.processContext = options.processContext || '';
	                var urlString = _this.getUrlWithActionPrefix() + apiSubsystemName + ':' + 'main.get&entityName=' + entityName;
	            }
	            if (angular.isDefined(options.id)) {
	                urlString += '&entityId=' + options.id;
	            }
	            var transformResponse = function (data) {
	                if (angular.isString(data)) {
	                    data = JSON.parse(data);
	                }
	                return data;
	            };
	            //check if we are using a service to transform the response
	            if (angular.isDefined(options.transformResponse)) {
	                transformResponse = function (data) {
	                    var data = JSON.parse(data);
	                    if (angular.isDefined(data.records)) {
	                        data = options.transformResponse(data.records);
	                    }
	                    return data;
	                };
	            }
	            var request = _this.requestService.newAdminRequest(urlString, params);
	            if (options.deferKey) {
	                _this._deferred[options.deferKey] = request;
	            }
	            return request.promise;
	        };
	        this.getResizedImageByProfileName = function (profileName, skuIDs) {
	            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getResizedImageByProfileName&context=getResizedImageByProfileName&profileName=' + profileName + '&skuIDs=' + skuIDs;
	            var request = _this.requestService.newPublicRequest(urlString);
	            return request.promise;
	        };
	        this.getEventOptions = function (entityName) {
	            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getEventOptionsByEntityName&entityName=' + entityName;
	            var request = _this.requestService.newAdminRequest(urlString);
	            return request.promise;
	        };
	        this.getProcessOptions = function (entityName) {
	            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getProcessMethodOptionsByEntityName&entityName=' + entityName;
	            var request = _this.requestService.newAdminRequest(urlString);
	            return request.promise;
	        };
	        this.checkUniqueOrNullValue = function (object, property, value) {
	            var objectName = object.metaData.className;
	            var objectID = object.$$getID();
	            return _this.$http.get(_this.getUrlWithActionPrefix() + 'api:main.getValidationPropertyStatus&object=' + objectName + '&objectID=' + objectID + '&propertyidentifier=' + property +
	                '&value=' + escape(value)).then(function (results) {
	                return results.data.uniqueStatus;
	            });
	        };
	        this.checkUniqueValue = function (object, property, value) {
	            var objectName = object.metaData.className;
	            var objectID = object.$$getID();
	            return _this.$http.get(_this.getUrlWithActionPrefix() + 'api:main.getValidationPropertyStatus&object=' + objectName + '&objectID=' + objectID + '&propertyidentifier=' + property +
	                '&value=' + escape(value)).then(function (results) {
	                return results.data.uniqueStatus;
	            });
	        };
	        this.getPropertyDisplayData = function (entityName, options) {
	            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getPropertyDisplayData&entityName=' + entityName;
	            var params = {};
	            params.propertyIdentifiersList = options.propertyIdentifiersList || '';
	            var request = _this.requestService.newAdminRequest(urlString, params);
	            return request.promise;
	        };
	        this.getPropertyDisplayOptions = function (entityName, options) {
	            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getPropertyDisplayOptions&entityName=' + entityName;
	            var params = {};
	            params.property = options.property || '';
	            if (angular.isDefined(options.argument1)) {
	                params.argument1 = options.argument1;
	            }
	            var request = _this.requestService.newAdminRequest(urlString, params);
	            return request.promise;
	        };
	        this.getPropertyTitle = function (propertyName, metaData) {
	            var propertyMetaData = metaData[propertyName];
	            if (angular.isDefined(propertyMetaData['hb_rbkey'])) {
	                return metaData.$$getRBKey(propertyMetaData['hb_rbkey']);
	            }
	            else if (angular.isUndefined(propertyMetaData['persistent'])) {
	                if (angular.isDefined(propertyMetaData['fieldtype'])
	                    && angular.isDefined(propertyMetaData['cfc'])
	                    && ["one-to-many", "many-to-many"].indexOf(propertyMetaData.fieldtype) > -1) {
	                    return metaData.$$getRBKey("entity." + metaData.className.toLowerCase() + "." + propertyName + ',entity.' + propertyMetaData.cfc + '_plural');
	                }
	                else if (angular.isDefined(propertyMetaData.fieldtype)
	                    && angular.isDefined(propertyMetaData.cfc)
	                    && ["many-to-one"].indexOf(propertyMetaData.fieldtype) > -1) {
	                    return metaData.$$getRBKey("entity." + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc);
	                }
	                return metaData.$$getRBKey('entity.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
	            }
	            else if (metaData.isProcessObject) {
	                if (angular.isDefined(propertyMetaData.fieldtype)
	                    && angular.isDefined(propertyMetaData.cfc)
	                    && ["one-to-many", "many-to-many"].indexOf(propertyMetaData.fieldtype) > -1) {
	                    return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc.toLowerCase() + '_plural');
	                }
	                else if (angular.isDefined(propertyMetaData.fieldtype)
	                    && angular.isDefined(propertyMetaData.cfc)) {
	                    return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc.toLowerCase());
	                }
	                return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
	            }
	            return metaData.$$getRBKey('object.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
	        };
	        this.saveEntity = function (entityName, id, params, context) {
	            var urlString = _this.getUrlWithActionPrefix() + 'api:main.post';
	            if (angular.isDefined(entityName)) {
	                params.entityName = entityName;
	            }
	            if (angular.isDefined(id)) {
	                params.entityID = id;
	            }
	            if (angular.isDefined(context)) {
	                params.context = context;
	            }
	            var request = _this.requestService.newAdminRequest(urlString, params);
	            return request.promise;
	        };
	        this.getExistingCollectionsByBaseEntity = function (entityName) {
	            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getExistingCollectionsByBaseEntity&entityName=' + entityName;
	            var request = _this.requestService.newAdminRequest(urlString);
	            return request.promise;
	        };
	        this.getFilterPropertiesByBaseEntityName = function (entityName, includeNonPersistent) {
	            if (includeNonPersistent === void 0) { includeNonPersistent = false; }
	            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getFilterPropertiesByBaseEntityName&EntityName=' + entityName + '&includeNonPersistent=' + includeNonPersistent;
	            var request = _this.requestService.newAdminRequest(urlString);
	            return request.promise;
	        };
	        this.login = function (emailAddress, password) {
	            var urlString = _this.appConfig.baseURL + '/index.cfm/api/auth/login';
	            var params = {
	                emailAddress: emailAddress,
	                password: password
	            };
	            var request = _this.requestService.newAdminRequest(urlString, params);
	            return request.promise;
	        };
	        this.getResourceBundle = function (locale) {
	            var locale = locale || _this.appConfig.rbLocale;
	            if (_this._resourceBundle[locale]) {
	                return _this._resourceBundle[locale];
	            }
	            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getResourceBundle&instantiationKey=' + _this.appConfig.instantiationKey + '&locale=' + locale;
	            var request = _this.requestService.newAdminRequest(urlString);
	            return request.promise;
	        };
	        this.getCurrencies = function () {
	            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getCurrencies&instantiationKey=' + _this.appConfig.instantiationKey;
	            var request = _this.requestService.newAdminRequest(urlString);
	            return request.promise;
	        };
	        this.getConfig = function () {
	            return _this._config;
	        };
	        this.getConfigValue = function (key) {
	            return _this._config[key];
	        };
	        this.setConfigValue = function (key, value) {
	            _this._config[key] = value;
	        };
	        this.setConfig = function (config) {
	            _this._config = config;
	        };
	        this.$window = $window;
	        this.$q = $q;
	        this.$http = $http;
	        this.$timeout = $timeout;
	        this.$log = $log;
	        this.$rootScope = $rootScope;
	        this.$location = $location;
	        this.$anchorScroll = $anchorScroll;
	        this.requestService = requestService;
	        this.utilityService = utilityService;
	        this.formService = formService;
	        this.rbkeyService = rbkeyService;
	        this.appConfig = appConfig;
	        this._config = _config;
	        this._jsEntities = _jsEntities;
	        this._jsEntityInstances = _jsEntityInstances;
	    }
	    return HibachiService;
	}());
	exports.HibachiService = HibachiService;
	var $Hibachi = (function () {
	    //@ngInject
	    function $Hibachi(appConfig) {
	        var _this = this;
	        this._config = {};
	        this.angular = angular;
	        this.setJsEntities = function (jsEntities) {
	            _this._jsEntities = jsEntities;
	        };
	        this.getConfig = function () {
	            return _this._config;
	        };
	        this.getConfigValue = function (key) {
	            return _this._config[key];
	        };
	        this.setConfigValue = function (key, value) {
	            _this._config[key] = value;
	        };
	        this.setConfig = function (config) {
	            _this._config = config;
	        };
	        this._config = appConfig;
	        this.$get.$inject = [
	            '$window',
	            '$q',
	            '$http',
	            '$timeout',
	            '$log',
	            '$rootScope',
	            '$location',
	            '$anchorScroll',
	            'requestService',
	            'utilityService',
	            'formService',
	            'rbkeyService',
	            'appConfig'
	        ];
	    }
	    $Hibachi.prototype.$get = function ($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbkeyService, appConfig) {
	        return new HibachiService($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, requestService, utilityService, formService, rbkeyService, appConfig, this._config, this._jsEntities, this._jsEntityInstances);
	    };
	    return $Hibachi;
	}());
	exports.$Hibachi = $Hibachi;


/***/ }),
/* 310 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var HistoryService = (function () {
	    //ngInject
	    function HistoryService() {
	        var _this = this;
	        this.histories = {};
	        this.recordHistory = function (key, data, overwrite) {
	            if (overwrite === void 0) { overwrite = false; }
	            if (angular.isUndefined(_this.histories[key]) || overwrite) {
	                _this.histories[key] = [];
	            }
	            _this.histories[key].push(data);
	        };
	        this.hasHistory = function (key) {
	            return angular.isDefined(_this.histories[key]);
	        };
	        this.getHistory = function (key) {
	            if (angular.isDefined(_this.histories[key])) {
	                return _this.histories[key];
	            }
	        };
	        this.deleteHistory = function (key) {
	            _this.histories[key] = [];
	        };
	    }
	    return HistoryService;
	}());
	exports.HistoryService = HistoryService;


/***/ }),
/* 311 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var LocalStorageService = (function () {
	    //@ngInject
	    function LocalStorageService($window) {
	        var _this = this;
	        this.$window = $window;
	        this.hasItem = function (key) {
	            //try catch to handle safari in private mode which does not allow localstorage
	            try {
	                return (_this.$window.localStorage.getItem(key)
	                    && _this.$window.localStorage.getItem(key) !== null
	                    && _this.$window.localStorage.getItem(key) !== "undefined");
	            }
	            catch (e) {
	                return false;
	            }
	        };
	        this.getItem = function (key) {
	            var value = _this.$window.localStorage.getItem(key);
	            if (value.charAt(0) === '{' || value.charAt(0) === '[') {
	                value = angular.fromJson(value);
	            }
	            return value;
	        };
	        this.setItem = function (key, data) {
	            //try catch to handle safari in private mode which does not allow localstorage
	            try {
	                if (angular.isObject(data) || angular.isArray(data)) {
	                    data = angular.toJson(data);
	                }
	                _this.$window.localStorage.setItem(key, data);
	            }
	            catch (e) {
	            }
	        };
	        this.$window = $window;
	    }
	    return LocalStorageService;
	}());
	exports.LocalStorageService = LocalStorageService;


/***/ }),
/* 312 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var HibachiServiceDecorator = (function () {
	    //@ngInject
	    function HibachiServiceDecorator($delegate, $http, $timeout, $log, $rootScope, $location, $anchorScroll, $q, utilityService, formService, rbkeyService, appConfig, observerService, hibachiValidationService, attributeMetaData) {
	        var _deferred = {};
	        var _config = appConfig;
	        var _jsEntities = {};
	        var _jsEntityInstances = {};
	        var entities = appConfig.modelConfig.entities, validations = appConfig.modelConfig.validations, defaultValues = appConfig.modelConfig.defaultValues;
	        angular.forEach(entities, function (entity) {
	            if (attributeMetaData[entity.className]) {
	                var relatedAttributes = attributeMetaData[entity.className];
	                for (var attributeSetCode in relatedAttributes) {
	                    var attributeSet = relatedAttributes[attributeSetCode];
	                    for (var attributeCode in attributeSet.attributes) {
	                        var attribute = attributeSet.attributes[attributeCode];
	                        attribute.attributeSet = attributeSet;
	                        attribute.isAttribute = true;
	                        entity[attributeCode] = attribute;
	                    }
	                }
	            }
	            $delegate['get' + entity.className] = function (options) {
	                var entityInstance = $delegate.newEntity(entity.className);
	                var entityDataPromise = $delegate.getEntity(entity.className, options);
	                entityDataPromise.then(function (response) {
	                    if (angular.isDefined(response.processData)) {
	                        entityInstance.$$init(response.data);
	                        var processObjectInstance = $delegate['new' + entity.className + '_' + options.processContext.charAt(0).toUpperCase() + options.processContext.slice(1)]();
	                        processObjectInstance.$$init(response.processData);
	                        processObjectInstance.data[entity.className.charAt(0).toLowerCase() + entity.className.slice(1)] = entityInstance;
	                        entityInstance.processObject = processObjectInstance;
	                    }
	                    else {
	                        if (entityInstance.populate) {
	                            entityInstance.populate(response);
	                        }
	                        else {
	                            entityInstance.$$init(response);
	                        }
	                    }
	                });
	                return {
	                    promise: entityDataPromise,
	                    value: entityInstance
	                };
	            };
	            $delegate['new' + entity.className] = function () {
	                //if we have the service then get the new instance from that
	                var entityName = entity.className;
	                var serviceName = entityName.charAt(0).toLowerCase() + entityName.slice(1) + 'Service';
	                if (angular.element(document.body).injector().has(serviceName)) {
	                    var entityService = angular.element(document.body).injector().get(serviceName);
	                    return entityService['new' + entity.className]();
	                }
	                return $delegate.newEntity(entity.className);
	            };
	            entity.isProcessObject = entity.className.indexOf('_') >= 0;
	            _jsEntities[entity.className] = function () {
	                this.validations = validations[entity.className];
	                this.metaData = entity;
	                this.metaData.className = entity.className;
	                if (relatedAttributes) {
	                    this.attributeMetaData = relatedAttributes;
	                }
	                if (entity.hb_parentPropertyName) {
	                    this.metaData.hb_parentPropertyName = entity.hb_parentPropertyName;
	                }
	                if (entity.hb_childPropertyName) {
	                    this.metaData.hb_childPropertyName = entity.hb_childPropertyName;
	                }
	                this.metaData.$$getRBKey = function (rbKey, replaceStringData) {
	                    return rbkeyService.rbKey(rbKey, replaceStringData);
	                };
	                this.metaData.$$getPropertyTitle = function (propertyName) {
	                    return _getPropertyTitle(propertyName, this);
	                };
	                this.metaData.$$getPropertyHint = function (propertyName) {
	                    return _getPropertyHint(propertyName, this);
	                };
	                this.metaData.$$getManyToManyName = function (singularname) {
	                    var metaData = this;
	                    for (var i in metaData) {
	                        if (metaData[i].singularname === singularname) {
	                            return metaData[i].name;
	                        }
	                    }
	                };
	                this.metaData.$$getPropertyFieldType = function (propertyName) {
	                    return _getPropertyFieldType(propertyName, this);
	                };
	                this.metaData.$$getPropertyFormatType = function (propertyName) {
	                    if (this[propertyName])
	                        return _getPropertyFormatType(propertyName, this);
	                };
	                this.metaData.$$getDetailTabs = function () {
	                    var deferred = $q.defer();
	                    var urlString = _config.baseURL + '/index.cfm/?' + appConfig.action + '=api:main.getDetailTabs&entityName=' + this.className;
	                    var detailTabs = [];
	                    $http.get(urlString)
	                        .success(function (data) {
	                        deferred.resolve(data);
	                    }).error(function (reason) {
	                        deferred.reject(reason);
	                    });
	                    return deferred.promise;
	                };
	                this.$$getFormattedValue = function (propertyName, formatType) {
	                    return _getFormattedValue(propertyName, formatType, this);
	                };
	                this.data = {};
	                this.modifiedData = {};
	                var jsEntity = this;
	                if (entity.isProcessObject) {
	                    (function (entity) {
	                        _jsEntities[entity.className].prototype = {
	                            $$getID: function () {
	                                return '';
	                            },
	                            $$getIDName: function () {
	                                var IDNameString = '';
	                                return IDNameString;
	                            }
	                        };
	                    })(entity);
	                }
	                angular.forEach(entity, function (property) {
	                    if (angular.isObject(property) && angular.isDefined(property.name)) {
	                        if (angular.isDefined(defaultValues[entity.className][property.name])) {
	                            jsEntity.data[property.name] = angular.copy(defaultValues[entity.className][property.name]);
	                        }
	                        else {
	                            jsEntity.data[property.name] = undefined;
	                        }
	                    }
	                });
	            };
	            _jsEntities[entity.className].prototype = {
	                $$getPropertyByName: function (propertyName) {
	                    return this['$$get' + propertyName.charAt(0).toUpperCase() + propertyName.slice(1)]();
	                },
	                $$isPersisted: function () {
	                    return this.$$getID() !== '';
	                },
	                $$init: function (data) {
	                    _init(this, data);
	                },
	                $$save: function () {
	                    return _save(this);
	                },
	                $$delete: function () {
	                    return _delete(this);
	                },
	                $$getValidationsByProperty: function (property) {
	                    return _getValidationsByProperty(this, property);
	                },
	                $$getValidationByPropertyAndContext: function (property, context) {
	                    return _getValidationByPropertyAndContext(this, property, context);
	                },
	                $$getTitleByPropertyIdentifier: function (propertyIdentifier) {
	                    if (propertyIdentifier.split('.').length > 1) {
	                        var listFirst = utilityService.listFirst(propertyIdentifier, '.');
	                        var relatedEntityName = this.metaData[listFirst].cfc;
	                        var exampleEntity = $delegate.newEntity(relatedEntityName);
	                        return exampleEntity.$$getTitleByPropertyIdentifier(propertyIdentifier.replace(listFirst, ''));
	                    }
	                    return this.metaData.$$getPropertyTitle(propertyIdentifier);
	                },
	                $$getMetaData: function (propertyName) {
	                    if (propertyName === undefined) {
	                        return this.metaData;
	                    }
	                    else {
	                        if (angular.isDefined(this.metaData[propertyName].name) && angular.isUndefined(this.metaData[propertyName].nameCapitalCase)) {
	                            this.metaData[propertyName].nameCapitalCase = this.metaData[propertyName].name.charAt(0).toUpperCase() + this.metaData[propertyName].name.slice(1);
	                        }
	                        if (angular.isDefined(this.metaData[propertyName].cfc) && angular.isUndefined(this.metaData[propertyName].cfcProperCase)) {
	                            this.metaData[propertyName].cfcProperCase = this.metaData[propertyName].cfc.charAt(0).toLowerCase() + this.metaData[propertyName].cfc.slice(1);
	                        }
	                        return this.metaData[propertyName];
	                    }
	                }
	            };
	            angular.forEach(relatedAttributes, function (attributeSet) {
	                angular.forEach(attributeSet.attributes, function (attribute) {
	                    if (attribute && attribute.attributeCode) {
	                        Object.defineProperty(_jsEntities[entity.className].prototype, attribute.attributeCode, {
	                            configurable: true,
	                            enumerable: false,
	                            get: function () {
	                                if (attribute != null && this.data[attribute.attributeCode] == null) {
	                                    return undefined;
	                                }
	                                return this.data[attribute.attributeCode];
	                            },
	                            set: function (value) {
	                                this.data[attribute.attributeCode] = value;
	                            }
	                        });
	                    }
	                });
	            });
	            angular.forEach(entity, function (property) {
	                if (angular.isObject(property) && angular.isDefined(property.name)) {
	                    //if(angular.isUndefined(property.persistent)){
	                    if (angular.isDefined(property.fieldtype)) {
	                        if (['many-to-one'].indexOf(property.fieldtype) >= 0) {
	                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
	                                var thisEntityInstance = this;
	                                if (angular.isDefined(this['$$get' + this.$$getIDName().charAt(0).toUpperCase() + this.$$getIDName().slice(1)]())) {
	                                    var options = {
	                                        columnsConfig: angular.toJson([
	                                            {
	                                                "propertyIdentifier": "_" + this.metaData.className.toLowerCase() + "_" + property.name
	                                            }
	                                        ]),
	                                        joinsConfig: angular.toJson([
	                                            {
	                                                "associationName": property.name,
	                                                "alias": "_" + this.metaData.className.toLowerCase() + "_" + property.name
	                                            }
	                                        ]),
	                                        filterGroupsConfig: angular.toJson([{
	                                                "filterGroup": [
	                                                    {
	                                                        "propertyIdentifier": "_" + this.metaData.className.toLowerCase() + "." + this.$$getIDName(),
	                                                        "comparisonOperator": "=",
	                                                        "value": this.$$getID()
	                                                    }
	                                                ]
	                                            }]),
	                                        allRecords: true
	                                    };
	                                    var collectionPromise = $delegate.getEntity(entity.className, options);
	                                    collectionPromise.then(function (response) {
	                                        for (var i in response.records) {
	                                            var entityInstance = $delegate.newEntity(thisEntityInstance.metaData[property.name].cfc);
	                                            //Removed the array index here at the end of local.property.name.
	                                            if (angular.isArray(response.records[i][property.name])) {
	                                                entityInstance.$$init(response.records[i][property.name][0]);
	                                            }
	                                            else {
	                                                entityInstance.$$init(response.records[i][property.name]); //Shouldn't have the array index'
	                                            }
	                                            thisEntityInstance['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)](entityInstance);
	                                        }
	                                    });
	                                    return collectionPromise;
	                                }
	                                return null;
	                            };
	                            _jsEntities[entity.className].prototype['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function (entityInstance) {
	                                var thisEntityInstance = this;
	                                var metaData = this.metaData;
	                                var manyToManyName = '';
	                                //if entityInstance is not passed in, clear related object
	                                if (angular.isUndefined(entityInstance)) {
	                                    if (angular.isDefined(thisEntityInstance.data[property.name])) {
	                                        delete thisEntityInstance.data[property.name];
	                                    }
	                                    if (!thisEntityInstance.parents) {
	                                        return;
	                                    }
	                                    for (var i = 0; i <= thisEntityInstance.parents.length; i++) {
	                                        if (angular.isDefined(thisEntityInstance.parents[i]) && thisEntityInstance.parents[i].name == property.name.charAt(0).toLowerCase() + property.name.slice(1)) {
	                                            thisEntityInstance.parents.splice(i, 1);
	                                        }
	                                    }
	                                    return;
	                                }
	                                if (property.name === 'parent' + this.metaData.className) {
	                                    var childName = 'child' + this.metaData.className;
	                                    manyToManyName = entityInstance.metaData.$$getManyToManyName(childName);
	                                }
	                                else if (entityInstance.metaData) {
	                                    manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + metaData.className.slice(1));
	                                }
	                                // else{
	                                //     manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + metaData.className.slice(1));
	                                // }
	                                if (angular.isUndefined(thisEntityInstance.parents)) {
	                                    thisEntityInstance.parents = [];
	                                }
	                                thisEntityInstance.parents.push(thisEntityInstance.metaData[property.name]);
	                                if (angular.isDefined(manyToManyName) && manyToManyName.length) {
	                                    if (angular.isUndefined(entityInstance.children)) {
	                                        entityInstance.children = [];
	                                    }
	                                    var child = entityInstance.metaData[manyToManyName];
	                                    if (entityInstance.children.indexOf(child) === -1) {
	                                        entityInstance.children.push(child);
	                                    }
	                                    if (angular.isUndefined(entityInstance.data[manyToManyName])) {
	                                        entityInstance.data[manyToManyName] = [];
	                                    }
	                                    entityInstance.data[manyToManyName].push(thisEntityInstance);
	                                }
	                                thisEntityInstance.data[property.name] = entityInstance;
	                            };
	                            if (property.name !== 'data' && property.name !== 'validations') {
	                                Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
	                                    configurable: true,
	                                    enumerable: false,
	                                    get: function () {
	                                        if (this.data[property.name] == null) {
	                                            return undefined;
	                                        }
	                                        return this.data[property.name];
	                                    },
	                                    set: function (value) {
	                                        this['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)](value);
	                                    }
	                                });
	                            }
	                        }
	                        else if (['one-to-many', 'many-to-many'].indexOf(property.fieldtype) >= 0) {
	                            _jsEntities[entity.className].prototype['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)] = function (entityInstance) {
	                                if (angular.isUndefined(entityInstance)) {
	                                    var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
	                                }
	                                var metaData = this.metaData;
	                                if (metaData[property.name].fieldtype === 'one-to-many') {
	                                    entityInstance.data[metaData[property.name].fkcolumn.slice(0, -2)] = this;
	                                }
	                                else if (metaData[property.name].fieldtype === 'many-to-many') {
	                                    var manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + this.metaData.className.slice(1));
	                                    if (angular.isUndefined(entityInstance.data[manyToManyName])) {
	                                        entityInstance.data[manyToManyName] = [];
	                                    }
	                                    entityInstance.data[manyToManyName].push(this);
	                                }
	                                if (angular.isDefined(metaData[property.name])) {
	                                    if (angular.isDefined(entityInstance.metaData[metaData[property.name].fkcolumn.slice(0, -2)])) {
	                                        if (angular.isUndefined(entityInstance.parents)) {
	                                            entityInstance.parents = [];
	                                        }
	                                        entityInstance.parents.push(entityInstance.metaData[metaData[property.name].fkcolumn.slice(0, -2)]);
	                                    }
	                                    if (angular.isUndefined(this.children)) {
	                                        this.children = [];
	                                    }
	                                    var child = metaData[property.name];
	                                    if (this.children.indexOf(child) === -1) {
	                                        this.children.push(child);
	                                    }
	                                }
	                                if (angular.isUndefined(this.data[property.name])) {
	                                    this.data[property.name] = [];
	                                }
	                                this.data[property.name].push(entityInstance);
	                                return entityInstance;
	                            };
	                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
	                                var thisEntityInstance = this;
	                                if (angular.isDefined(this['$$get' + this.$$getIDName().charAt(0).toUpperCase() + this.$$getIDName().slice(1)])) {
	                                    var options = {
	                                        filterGroupsConfig: angular.toJson([{
	                                                "filterGroup": [
	                                                    {
	                                                        "propertyIdentifier": "_" + property.cfc.toLowerCase() + "." + property.fkcolumn.replace('ID', '') + "." + this.$$getIDName(),
	                                                        "comparisonOperator": "=",
	                                                        "value": this.$$getID()
	                                                    }
	                                                ]
	                                            }]),
	                                        allRecords: true
	                                    };
	                                    var collectionPromise = $delegate.getEntity(property.cfc, options);
	                                    collectionPromise.then(function (response) {
	                                        var entityInstances = [];
	                                        for (var i in response.records) {
	                                            var entityInstance = thisEntityInstance['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)]();
	                                            entityInstance.$$init(response.records[i]);
	                                            if (angular.isUndefined(thisEntityInstance[property.name])) {
	                                                thisEntityInstance[property.name] = [];
	                                            }
	                                            entityInstances.push(entityInstance);
	                                        }
	                                        thisEntityInstance.data[property.name] = entityInstances;
	                                    });
	                                    return collectionPromise;
	                                }
	                            };
	                            Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
	                                configurable: true,
	                                enumerable: false,
	                                get: function () {
	                                    if (this.data[property.name] == null) {
	                                        return undefined;
	                                    }
	                                    return this.data[property.name];
	                                },
	                                set: function (value) {
	                                    this.data[property.name] = [];
	                                    if (angular.isArray(value)) {
	                                        for (var i = 0; i < value.length; i++) {
	                                            var item = value[i];
	                                            var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
	                                            entityInstance.$$init(item);
	                                            this['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)](entityInstance);
	                                        }
	                                    }
	                                    else {
	                                        var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);
	                                        entityInstance.$$init(value);
	                                        this['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)](entityInstance);
	                                    }
	                                }
	                            });
	                        }
	                        else {
	                            if (['id'].indexOf(property.fieldtype) >= 0) {
	                                _jsEntities[entity.className].prototype['$$getID'] = function () {
	                                    //this should retreive id from the metadata
	                                    return this.data[this.$$getIDName()];
	                                };
	                                _jsEntities[entity.className].prototype['$$getIDName'] = function () {
	                                    var IDNameString = property.name;
	                                    return IDNameString;
	                                };
	                            }
	                            if (property.name !== 'data' && property.name !== 'validations') {
	                                Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
	                                    configurable: true,
	                                    enumerable: false,
	                                    get: function () {
	                                        if (this.data[property.name] == null) {
	                                            return undefined;
	                                        }
	                                        return this.data[property.name];
	                                    },
	                                    set: function (value) {
	                                        this.data[property.name] = value;
	                                    }
	                                });
	                            }
	                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
	                                return this.data[property.name];
	                            };
	                        }
	                    }
	                    else {
	                        if (property.name !== 'data' && property.name !== 'validations') {
	                            Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {
	                                configurable: true,
	                                enumerable: false,
	                                get: function () {
	                                    if (this.data[property.name] == null) {
	                                        return undefined;
	                                    }
	                                    return this.data[property.name];
	                                },
	                                set: function (value) {
	                                    this.data[property.name] = value;
	                                }
	                            });
	                        }
	                        _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {
	                            return this.data[property.name];
	                        };
	                    }
	                    //}
	                }
	            });
	        });
	        $delegate.setJsEntities(_jsEntities);
	        angular.forEach(_jsEntities, function (jsEntity) {
	            var jsEntityInstance = new jsEntity;
	            _jsEntityInstances[jsEntityInstance.metaData.className] = jsEntityInstance;
	        });
	        $delegate.setJsEntityInstances(_jsEntityInstances);
	        var _init = function (entityInstance, data) {
	            hibachiValidationService.init(entityInstance, data);
	        };
	        var _getPropertyTitle = function (propertyName, metaData) {
	            return $delegate.getPropertyTitle(propertyName, metaData);
	        };
	        var _getPropertyHint = function (propertyName, metaData) {
	            var propertyMetaData = metaData[propertyName];
	            var keyValue = '';
	            if (angular.isDefined(propertyMetaData['hb_rbkey'])) {
	                keyValue = metaData.$$getRBKey(propertyMetaData['hb_rbkey'] + '_hint');
	            }
	            else if (angular.isUndefined(propertyMetaData['persistent']) || (angular.isDefined(propertyMetaData['persistent']) && propertyMetaData['persistent'] === true)) {
	                keyValue = metaData.$$getRBKey('entity.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + '_hint');
	            }
	            else {
	                keyValue = metaData.$$getRBKey('object.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());
	            }
	            if (keyValue.slice(-8) !== '_missing') {
	                return keyValue;
	            }
	            return '';
	        };
	        var _getPropertyFieldType = function (propertyName, metaData) {
	            var propertyMetaData = metaData[propertyName];
	            if (angular.isDefined(propertyMetaData['hb_formfieldtype'])) {
	                return propertyMetaData['hb_formfieldtype'];
	            }
	            if (angular.isUndefined(propertyMetaData.fieldtype) || propertyMetaData.fieldtype === 'column') {
	                var dataType = "";
	                if (angular.isDefined(propertyMetaData.ormtype)) {
	                    dataType = propertyMetaData.ormtype;
	                }
	                else if (angular.isDefined(propertyMetaData.type)) {
	                    dataType = propertyMetaData.type;
	                }
	                if (["boolean", "yes_no", "true_false"].indexOf(dataType) > -1) {
	                    return "yesno";
	                }
	                else if (["date", "timestamp"].indexOf(dataType) > -1) {
	                    return "dateTime";
	                }
	                else if ("array" === dataType) {
	                    return "select";
	                }
	                else if ("struct" === dataType) {
	                    return "checkboxgroup";
	                }
	                else if (propertyName.indexOf('password') > -1) {
	                    return "password";
	                }
	            }
	            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'many-to-one') {
	                return 'select';
	            }
	            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'one-to-many') {
	                return 'There is no property field type for one-to-many relationship properties, which means that you cannot get a fieldtype for ' + propertyName;
	            }
	            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'many-to-many') {
	                return "listingMultiselect";
	            }
	            return "text";
	        };
	        var _getPropertyFormatType = function (propertyName, metaData) {
	            if (!propertyName || !metaData) {
	                return 'none';
	            }
	            var propertyMetaData = metaData[propertyName];
	            if (propertyMetaData['hb_formattype']) {
	                return propertyMetaData['hb_formattype'];
	            }
	            else if (angular.isUndefined(propertyMetaData.fieldtype) || propertyMetaData.fieldtype === 'column') {
	                var dataType = "";
	                if (angular.isDefined(propertyMetaData.ormtype)) {
	                    dataType = propertyMetaData.ormtype;
	                }
	                else if (angular.isDefined(propertyMetaData.type)) {
	                    dataType = propertyMetaData.type;
	                }
	                if (["boolean", "yes_no", "true_false"].indexOf(dataType) > -1) {
	                    return "yesno";
	                }
	                else if (["date", "timestamp"].indexOf(dataType) > -1) {
	                    return "dateTime";
	                }
	                else if (["big_decimal"].indexOf(dataType) > -1 && propertyName.slice(-6) === 'weight') {
	                    return "weight";
	                }
	                else if (["big_decimal"].indexOf(dataType) > -1) {
	                    return "currency";
	                }
	            }
	            return 'none';
	        };
	        var _isSimpleValue = function (value) {
	            return !!(angular.isString(value) || angular.isNumber(value)
	                || angular.isDate(value) || value === false || value === true);
	        };
	        var _getFormattedValue = function (propertyName, formatType, entityInstance) {
	            var value = entityInstance.$$getPropertyByName(propertyName);
	            if (angular.isUndefined(formatType)) {
	                formatType = entityInstance.metaData.$$getPropertyFormatType(propertyName);
	            }
	            if (formatType === "custom") {
	                //to be implemented
	                //return entityInstance['$$get'+propertyName+Formatted]();
	            }
	            else if (formatType === "rbkey") {
	                if (angular.isDefined(value)) {
	                    return entityInstance.$$getRBKey('entity.' + entityInstance.metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + '.' + value);
	                }
	                else {
	                    return '';
	                }
	            }
	            if (angular.isUndefined(value)) {
	                var propertyMeta = entityInstance.metaData[propertyName];
	                if (angular.isDefined(propertyMeta['hb_nullRBKey'])) {
	                    return entityInstance.$$getRbKey(propertyMeta['hb_nullRBKey']);
	                }
	                return "";
	            }
	            else if (_isSimpleValue(value)) {
	                var formatDetails = {};
	                if (angular.isDefined(entityInstance.data['currencyCode'])) {
	                    formatDetails.currencyCode = entityInstance.$$getCurrencyCode();
	                }
	                return utilityService.formatValue(value, formatType, formatDetails, entityInstance);
	            }
	        };
	        var _delete = function (entityInstance) {
	            var entityName = entityInstance.metaData.className;
	            var entityID = entityInstance.$$getID();
	            var context = 'delete';
	            return $delegate.saveEntity(entityName, entityID, {}, context);
	        };
	        var _setValueByPropertyPath = function (obj, path, value) {
	            var a = path.split('.');
	            var context = obj;
	            var selector;
	            var myregexp = /([a-zA-Z]+)(\[(\d)\])+/; // matches:  item[0]
	            var match = null;
	            for (var i = 0; i < a.length - 1; i += 1) {
	                match = myregexp.exec(a[i]);
	                if (match !== null)
	                    context = context[match[1]][match[3]];
	                else
	                    context = context[a[i]];
	            }
	            // check for ending item[xx] syntax
	            match = myregexp.exec([a[a.length - 1]]);
	            if (match !== null)
	                context[match[1]][match[3]] = value;
	            else
	                context[a[a.length - 1]] = value;
	        };
	        var _getValueByPropertyPath = function (obj, path) {
	            var paths = path.split('.'), current = obj, i;
	            for (i = 0; i < paths.length; ++i) {
	                if (current[paths[i]] == undefined) {
	                    return undefined;
	                }
	                else {
	                    current = current[paths[i]];
	                }
	            }
	            return current;
	        };
	        var _addReturnedIDs = function (returnedIDs, entityInstance) {
	            for (var key in returnedIDs) {
	                if (angular.isArray(returnedIDs[key])) {
	                    var arrayItems = returnedIDs[key];
	                    var entityInstanceArray = entityInstance.data[key];
	                    for (var i in arrayItems) {
	                        var arrayItem = arrayItems[i];
	                        var entityInstanceArrayItem = entityInstance.data[key][i];
	                        _addReturnedIDs(arrayItem, entityInstanceArrayItem);
	                    }
	                }
	                else if (angular.isObject(returnedIDs[key])) {
	                    for (var k in returnedIDs[key]) {
	                        _addReturnedIDs(returnedIDs[key][k], entityInstance.data[key][k]);
	                    }
	                }
	                else {
	                    entityInstance.data[key] = returnedIDs[key];
	                }
	            }
	        };
	        var _save = function (entityInstance) {
	            var deferred = $q.defer();
	            $timeout(function () {
	                //$log.debug('save begin');
	                //$log.debug(entityInstance);
	                var entityID = entityInstance.$$getID();
	                var modifiedData = _getModifiedData(entityInstance);
	                //$log.debug('modifiedData complete');
	                //$log.debug(modifiedData);
	                //timeoutPromise.valid = modifiedData.valid;
	                if (modifiedData.valid) {
	                    var params = {};
	                    params.serializedJsonData = utilityService.toJson(modifiedData.value);
	                    //if we have a process object then the context is different from the standard save
	                    var entityName = '';
	                    var context = 'save';
	                    if (entityInstance.metaData.isProcessObject === 1) {
	                        var processStruct = modifiedData.objectLevel.metaData.className.split('_');
	                        entityName = processStruct[0];
	                        context = processStruct[1];
	                    }
	                    else {
	                        entityName = modifiedData.objectLevel.metaData.className;
	                    }
	                    var savePromise = $delegate.saveEntity(entityName, entityID, params, context);
	                    savePromise.then(function (response) {
	                        var returnedIDs = response.data;
	                        if ((angular.isDefined(response.SUCCESS) && response.SUCCESS === true)
	                            || (angular.isDefined(response.success) && response.success === true)) {
	                            if ($location.url() == '/entity/' + entityName + '/create' && response.data[modifiedData.objectLevel.$$getIDName()]) {
	                                $location.path('/entity/' + entityName + '/' + response.data[modifiedData.objectLevel.$$getIDName()], false);
	                            }
	                            _addReturnedIDs(returnedIDs, modifiedData.objectLevel);
	                            deferred.resolve(returnedIDs);
	                            observerService.notify('saveSuccess', returnedIDs);
	                            observerService.notify('saveSuccess' + entityName, returnedIDs);
	                        }
	                        else {
	                            deferred.reject(angular.isDefined(response.messages) ? response.messages : response);
	                            observerService.notify('saveFailed', response);
	                            observerService.notify('saveFailed' + entityName, response);
	                        }
	                    }, function (reason) {
	                        deferred.reject(reason);
	                        observerService.notify('saveFailed', reason);
	                        observerService.notify('saveFailed' + entityName, reason);
	                    });
	                }
	                else {
	                    //select first, visible, and enabled input with a class of ng-invalid
	                    var target = $('input.ng-invalid:first:visible:enabled');
	                    if (angular.isDefined(target)) {
	                        target.focus();
	                        var targetID = target.attr('id');
	                        $anchorScroll();
	                    }
	                    deferred.reject('Input is invalid.');
	                    observerService.notify('validationFailed');
	                    observerService.notify('validationFailed' + entityName);
	                }
	            });
	            //return timeoutPromise;
	            return deferred.promise;
	            /*

	            */
	        };
	        var _getModifiedData = function (entityInstance) {
	            var modifiedData = {};
	            modifiedData = getModifiedDataByInstance(entityInstance);
	            return modifiedData;
	        };
	        var getObjectSaveLevel = function (entityInstance) {
	            return hibachiValidationService.getObjectSaveLevel(entityInstance);
	        };
	        var validateObject = function (entityInstance) {
	            return hibachiValidationService.validateObject;
	        };
	        var validateChildren = function (entityInstance) {
	            return hibachiValidationService.validateChildren(entityInstance);
	        };
	        var processChild = function (entityInstance, entityInstanceParent) {
	            return hibachiValidationService.processChild(entityInstance, entityInstanceParent);
	        };
	        var processParent = function (entityInstance) {
	            return hibachiValidationService.processParent(entityInstance);
	        };
	        var processForm = function (form, entityInstance) {
	            return hibachiValidationService.processForm(form, entityInstance);
	        };
	        var getDataFromParents = function (entityInstance, entityInstanceParents) {
	            return hibachiValidationService.getDataFromParents(entityInstance, entityInstanceParents);
	        };
	        var getDataFromChildren = function (entityInstance) {
	            return hibachiValidationService.getDataFromChildren(entityInstance);
	        };
	        var getModifiedDataByInstance = function (entityInstance) {
	            return hibachiValidationService.getModifiedDataByInstance(entityInstance);
	        };
	        var _getValidationsByProperty = function (entityInstance, property) {
	            return hibachiValidationService.getValidationsByProperty(entityInstance, property);
	        };
	        var _getValidationByPropertyAndContext = function (entityInstance, property, context) {
	            return hibachiValidationService.getValidationByPropertyAndContext(entityInstance, property, context);
	        };
	        return $delegate;
	    }
	    return HibachiServiceDecorator;
	}());
	exports.HibachiServiceDecorator = HibachiServiceDecorator;


/***/ }),
/* 313 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var HibachiScope = (function () {
	    //@ngInject
	    function HibachiScope(appConfig) {
	        var _this = this;
	        this.loginDisplayed = false;
	        this.isValidToken = true;
	        this.setToken = function (token) {
	            _this.token = token;
	            var stringArray = token.split('.');
	            try {
	                _this.jwtInfo = angular.fromJson(window.atob(stringArray[0]).trim());
	                _this.session = angular.fromJson(window.atob(stringArray[1]).trim());
	            }
	            catch (err) {
	                _this.isValidToken = false;
	            }
	        };
	        this.config = appConfig;
	    }
	    return HibachiScope;
	}());
	exports.HibachiScope = HibachiScope;


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var adminrequest_1 = __webpack_require__(315);
	var publicrequest_1 = __webpack_require__(317);
	var RequestService = (function () {
	    //@ngInject
	    function RequestService($injector, observerService) {
	        var _this = this;
	        this.$injector = $injector;
	        this.observerService = observerService;
	        this.newAdminRequest = function (url, data, method, headers, $injector, observerService) {
	            if (method === void 0) { method = "post"; }
	            if (headers === void 0) { headers = { 'Content-Type': "application/json" }; }
	            if ($injector === void 0) { $injector = _this.$injector; }
	            if (observerService === void 0) { observerService = _this.observerService; }
	            return new adminrequest_1.AdminRequest(url, data, method, headers, $injector, observerService);
	        };
	        this.newPublicRequest = function (url, data, method, headers, $injector, observerService) {
	            if (method === void 0) { method = "post"; }
	            if (headers === void 0) { headers = { 'Content-Type': "application/x-www-form-urlencoded" }; }
	            if ($injector === void 0) { $injector = _this.$injector; }
	            if (observerService === void 0) { observerService = _this.observerService; }
	            return new publicrequest_1.PublicRequest(url, data, method, headers, $injector, observerService);
	        };
	        this.$injector = $injector;
	        this.observerService = observerService;
	    }
	    return RequestService;
	}());
	exports.RequestService = RequestService;


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var request_1 = __webpack_require__(316);
	var AdminRequest = (function (_super) {
	    __extends(AdminRequest, _super);
	    function AdminRequest(url, data, method, headers, $injector, observerService) {
	        if (method === void 0) { method = "post"; }
	        if (headers === void 0) { headers = { 'Content-Type': "application/json" }; }
	        var _this = _super.call(this, url, data, method, headers, $injector) || this;
	        _this.observerService = observerService;
	        _this.observerService = observerService;
	        _this.promise.then(function (result) {
	            //identify that it is an object save
	            if (url.indexOf('api:main.post') != -1 && data.entityName) {
	                var eventNameBase = data.entityName + data.context.charAt(0).toUpperCase() + data.context.slice(0);
	                if (result.errors) {
	                    _this.observerService.notify(eventNameBase + 'Failure', result.data);
	                }
	                else {
	                    _this.observerService.notify(eventNameBase + 'Success', result.data);
	                }
	            }
	            _this.messages = result.messages;
	        }).catch(function (response) {
	        });
	        return _this;
	    }
	    return AdminRequest;
	}(request_1.Request));
	exports.AdminRequest = AdminRequest;


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var basetransient_1 = __webpack_require__(286);
	var Request = (function (_super) {
	    __extends(Request, _super);
	    function Request(url, data, method, headers, $injector) {
	        var _this = _super.call(this, $injector) || this;
	        _this.loading = true;
	        _this.errors = {};
	        _this.processResponse = function (response) {
	            _this.loading = false;
	            if (response.errors) {
	                _this.errors = response.errors;
	            }
	            if (response.messages) {
	                _this.messages = response.messages;
	            }
	        };
	        //returns hibachiAction value from url and data;
	        _this.getAction = function () {
	            var config = _this.getAppConfig();
	            //typically hibachiAction
	            var actionName = config.action;
	            var params = _this.utilityService.getQueryParamsFromUrl(_this.url);
	            if (params[actionName]) {
	                return params[actionName];
	            }
	            if (_this.data && _this.data[actionName]) {
	                return _this.data[actionName];
	            }
	            if (_this.url.indexOf('api/scope/') > 0) {
	                return _this.extractPublicAction(_this.url);
	            }
	        };
	        _this.extractPublicAction = function (url) {
	            //get in between api/scope and / or ? or end of word
	            var regex = /\api\/scope\/(.*?)(?=\/|\?|$)/;
	            var arr = regex.exec(url);
	            return arr[1];
	        };
	        _this.processSuccess = function (response) {
	            _this.processResponse(response);
	        };
	        _this.processError = function (response) {
	            _this.processResponse(response);
	        };
	        /** used to turn data into a correct format for the post */
	        _this.toFormParams = function (data) {
	            if (data) {
	                return $.param(data);
	            }
	            else {
	                return "";
	            }
	            //return data = this.serializeData(data) || "";
	        };
	        _this.serializeData = function (data) {
	            // If this is not an object, defer to native stringification.
	            if (!angular.isObject(data)) {
	                return ((data == null) ? "" : data.toString());
	            }
	            var buffer = [];
	            // Serialize each key in the object.
	            for (var name in data) {
	                if (!data.hasOwnProperty(name)) {
	                    continue;
	                }
	                var value = data[name];
	                buffer.push(encodeURIComponent(name) + "=" + encodeURIComponent((value == null) ? "" : value));
	            }
	            // Serialize the buffer and clean it up for transportation.
	            var source = buffer.join("&").replace(/%20/g, "+");
	            return (source);
	        };
	        _this.headers = headers;
	        _this.$q = _this.getService('$q');
	        _this.$http = _this.getService('$http');
	        _this.$window = _this.getService('$window');
	        _this.url = url;
	        _this.data = data;
	        _this.method = method;
	        _this.utilityService = _this.getService('utilityService');
	        if (!method) {
	            if (data == undefined) {
	                method = "get";
	            }
	            else {
	                method = "post";
	            }
	        }
	        var deferred = _this.$q.defer();
	        if (method == "post") {
	            if (_this.headers['Content-Type'] !== "application/json") {
	                data = _this.toFormParams(data);
	            }
	            //post
	            var promise = _this.$http({
	                url: url, data: data, headers: _this.headers, method: 'post'
	            })
	                .success(function (result) {
	                _this.processSuccess(result);
	                deferred.resolve(result);
	            }).error(function (response) {
	                _this.processError(response);
	                deferred.reject(response);
	            });
	            _this.promise = deferred.promise;
	        }
	        else {
	            //get
	            _this.$http({ url: url, method: 'get' })
	                .success(function (result) {
	                _this.processSuccess(result);
	                deferred.resolve(result);
	            }).error(function (reason) {
	                _this.processError(reason);
	                deferred.reject(reason);
	            });
	            _this.promise = deferred.promise;
	        }
	        return _this;
	    }
	    return Request;
	}(basetransient_1.BaseTransient));
	exports.Request = Request;


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../../typings/tsd.d.ts' />
	var request_1 = __webpack_require__(316);
	var PublicRequest = (function (_super) {
	    __extends(PublicRequest, _super);
	    function PublicRequest(url, data, method, headers, $injector, observerService) {
	        if (headers === void 0) { headers = { 'Content-Type': "application/x-www-form-urlencoded" }; }
	        var _this = _super.call(this, url, data, method, headers, $injector) || this;
	        _this.observerService = observerService;
	        _this.failureActions = [];
	        _this.successfulActions = [];
	        _this.messages = [];
	        _this.hasSuccessfulAction = function () {
	            return _this.successfulActions.length > 0;
	        };
	        _this.hasFailureAction = function () {
	            return _this.failureActions.length > 0;
	        };
	        _this.observerService = observerService;
	        _this.promise.then(function (result) {
	            _this.successfulActions = result.successfulActions;
	            for (var i in _this.successfulActions) {
	                var successfulAction = _this.successfulActions[i];
	                _this.observerService.notify(successfulAction.split('.')[1] + 'Success', result.data);
	            }
	            _this.failureActions = result.failureActions;
	            for (var i in _this.failureActions) {
	                var failureAction = _this.failureActions[i];
	                _this.observerService.notify(failureAction.split('.')[1] + 'Failure', result.data);
	            }
	            _this.messages = result.messages;
	        }).catch(function (response) {
	        });
	        return _this;
	    }
	    return PublicRequest;
	}(request_1.Request));
	exports.PublicRequest = PublicRequest;


/***/ }),
/* 318 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ScopeService = (function () {
	    //ngInject
	    function ScopeService() {
	        var _this = this;
	        this.getRootParentScope = function (scope, targetScopeName) {
	            var currentScope = scope;
	            while (currentScope != null && angular.isUndefined(currentScope[targetScopeName])) {
	                if (angular.isDefined(currentScope.$parent)) {
	                    currentScope = currentScope.$parent;
	                }
	                else {
	                    break;
	                }
	            }
	            if (currentScope != null && angular.isDefined(currentScope[targetScopeName])) {
	                return currentScope;
	            }
	        };
	        this.hasParentScope = function (scope, targetScopeName) {
	            if (_this.getRootParentScope(scope, targetScopeName) != null) {
	                return true;
	            }
	            return false;
	        };
	    }
	    return ScopeService;
	}());
	exports.ScopeService = ScopeService;


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseentityservice_1 = __webpack_require__(281);
	var SkuService = (function (_super) {
	    __extends(SkuService, _super);
	    //@ngInject
	    function SkuService($injector, $hibachi, utilityService) {
	        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Sku') || this;
	        _this.$injector = $injector;
	        _this.$hibachi = $hibachi;
	        _this.utilityService = utilityService;
	        return _this;
	    }
	    return SkuService;
	}(baseentityservice_1.BaseEntityService));
	exports.SkuService = SkuService;


/***/ }),
/* 320 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var HibachiValidationService = (function () {
	    //@ngInject
	    function HibachiValidationService($log) {
	        var _this = this;
	        this.$log = $log;
	        this.getObjectSaveLevel = function (entityInstance) {
	            var objectLevel = entityInstance;
	            var entityID = entityInstance.$$getID();
	            angular.forEach(entityInstance.parents, function (parentObject) {
	                if (angular.isDefined(entityInstance.data[parentObject.name]) && entityInstance.data[parentObject.name].$$getID() === '' && (angular.isUndefined(entityID) || !entityID.trim().length)) {
	                    var parentEntityInstance = entityInstance.data[parentObject.name];
	                    var parentEntityID = parentEntityInstance.$$getID();
	                    if (parentEntityID === '' && parentEntityInstance.forms) {
	                        objectLevel = _this.getObjectSaveLevel(parentEntityInstance);
	                    }
	                }
	            });
	            return objectLevel;
	        };
	        this.getModifiedDataByInstance = function (entityInstance) {
	            var modifiedData = {};
	            var objectSaveLevel = _this.getObjectSaveLevel(entityInstance);
	            _this.$log.debug('objectSaveLevel : ' + objectSaveLevel);
	            var valueStruct = _this.validateObject(objectSaveLevel);
	            _this.$log.debug('validateObject data');
	            _this.$log.debug(valueStruct.value);
	            modifiedData = {
	                objectLevel: objectSaveLevel,
	                value: valueStruct.value,
	                valid: valueStruct.valid
	            };
	            return modifiedData;
	        };
	        this.getValidationByPropertyAndContext = function (entityInstance, property, context) {
	            var validations = _this.getValidationsByProperty(entityInstance, property);
	            for (var i in validations) {
	                var contexts = validations[i].contexts.split(',');
	                for (var j in contexts) {
	                    if (contexts[j] === context) {
	                        return validations[i];
	                    }
	                }
	            }
	        };
	        this.getValidationsByProperty = function (entityInstance, property) {
	            return entityInstance.validations.properties[property];
	        };
	        this.validateObject = function (entityInstance) {
	            var modifiedData = {};
	            var valid = true;
	            var forms = entityInstance.forms;
	            _this.$log.debug('process base level data');
	            for (var f in forms) {
	                var form = forms[f];
	                form.$setSubmitted(); //Sets the form to submitted for the validation errors to pop up.
	                if (form.$dirty && form.$valid) {
	                    for (var key in form) {
	                        _this.$log.debug('key:' + key);
	                        if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
	                            var inputField = form[key];
	                            if (typeof inputField.$modelValue != 'undefined' && inputField.$modelValue !== '') {
	                                inputField.$dirty = true;
	                            }
	                            if (angular.isDefined(inputField.$valid) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
	                                if (angular.isDefined(entityInstance.metaData[key])
	                                    && angular.isDefined(entityInstance.metaData[key].hb_formfieldtype)
	                                    && entityInstance.metaData[key].hb_formfieldtype === 'json') {
	                                    modifiedData[key] = angular.toJson(inputField.$modelValue);
	                                }
	                                else {
	                                    modifiedData[key] = inputField.$modelValue;
	                                }
	                            }
	                        }
	                    }
	                }
	                else {
	                    if (!form.$valid) {
	                        valid = false;
	                    }
	                }
	            }
	            modifiedData[entityInstance.$$getIDName()] = entityInstance.$$getID();
	            _this.$log.debug(modifiedData);
	            _this.$log.debug('process parent data');
	            if (angular.isDefined(entityInstance.parents)) {
	                for (var p in entityInstance.parents) {
	                    var parentObject = entityInstance.parents[p];
	                    var parentInstance = entityInstance.data[parentObject.name];
	                    if (angular.isUndefined(modifiedData[parentObject.name])) {
	                        modifiedData[parentObject.name] = {};
	                    }
	                    var forms = parentInstance.forms;
	                    for (var f in forms) {
	                        var form = forms[f];
	                        form.$setSubmitted();
	                        if (form.$dirty && form.$valid) {
	                            for (var key in form) {
	                                if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
	                                    var inputField = form[key];
	                                    if (typeof inputField.$modelValue != 'undefined' && inputField.$modelValue !== '') {
	                                        inputField.$dirty = true;
	                                    }
	                                    if (angular.isDefined(inputField) && angular.isDefined(inputField.$valid) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
	                                        if (angular.isDefined(parentInstance.metaData[key])
	                                            && angular.isDefined(parentInstance.metaData[key].hb_formfieldtype)
	                                            && parentInstance.metaData[key].hb_formfieldtype === 'json') {
	                                            modifiedData[parentObject.name][key] = angular.toJson(inputField.$modelValue);
	                                        }
	                                        else {
	                                            modifiedData[parentObject.name][key] = inputField.$modelValue;
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        else {
	                            if (!form.$valid) {
	                                valid = false;
	                            }
	                        }
	                    }
	                    modifiedData[parentObject.name][parentInstance.$$getIDName()] = parentInstance.$$getID();
	                }
	            }
	            _this.$log.debug(modifiedData);
	            _this.$log.debug('begin child data');
	            var childrenData = _this.validateChildren(entityInstance);
	            _this.$log.debug('child Data');
	            _this.$log.debug(childrenData);
	            angular.extend(modifiedData, childrenData);
	            return {
	                valid: valid,
	                value: modifiedData
	            };
	        };
	        this.validateChildren = function (entityInstance) {
	            var data = {};
	            if (angular.isDefined(entityInstance.children) && entityInstance.children.length) {
	                data = _this.getDataFromChildren(entityInstance);
	            }
	            return data;
	        };
	        this.init = function (entityInstance, data) {
	            for (var key in data) {
	                if (key.charAt(0) !== '$' && angular.isDefined(entityInstance.metaData[key])) {
	                    var propertyMetaData = entityInstance.metaData[key];
	                    if (angular.isDefined(propertyMetaData) && angular.isDefined(propertyMetaData.hb_formfieldtype) && propertyMetaData.hb_formfieldtype === 'json') {
	                        if (data[key].trim() !== '') {
	                            entityInstance.data[key] = angular.fromJson(data[key]);
	                        }
	                    }
	                    else {
	                        entityInstance.data[key] = data[key];
	                    }
	                }
	            }
	        };
	        this.processForm = function (form, entityInstance) {
	            _this.$log.debug('begin process form');
	            var data = {};
	            form.$setSubmitted();
	            for (var key in form) {
	                if (key.charAt(0) !== '$' && angular.isObject(form[key])) {
	                    var inputField = form[key];
	                    if (inputField.$modelValue) {
	                        inputField.$dirty = true;
	                    }
	                    if (angular.isDefined(inputField) && angular.isDefined(inputField) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {
	                        if (angular.isDefined(entityInstance.metaData[key]) && angular.isDefined(entityInstance.metaData[key].hb_formfieldtype) && entityInstance.metaData[key].hb_formfieldtype === 'json') {
	                            data[key] = angular.toJson(inputField.$modelValue);
	                        }
	                        else {
	                            data[key] = inputField.$modelValue;
	                        }
	                    }
	                }
	            }
	            data[entityInstance.$$getIDName()] = entityInstance.$$getID();
	            _this.$log.debug('process form data');
	            _this.$log.debug(data);
	            return data;
	        };
	        this.processParent = function (entityInstance) {
	            var data = {};
	            if (entityInstance.$$getID() !== '') {
	                data[entityInstance.$$getIDName()] = entityInstance.$$getID();
	            }
	            _this.$log.debug('processParent');
	            _this.$log.debug(entityInstance);
	            var forms = entityInstance.forms;
	            for (var f in forms) {
	                var form = forms[f];
	                data = angular.extend(data, _this.processForm(form, entityInstance));
	            }
	            return data;
	        };
	        this.processChild = function (entityInstance, entityInstanceParent) {
	            var data = {};
	            var forms = entityInstance.forms;
	            for (var f in forms) {
	                var form = forms[f];
	                angular.extend(data, _this.processForm(form, entityInstance));
	            }
	            if (angular.isDefined(entityInstance.children) && entityInstance.children.length) {
	                var childData = _this.getDataFromChildren(entityInstance);
	                angular.extend(data, childData);
	            }
	            if (angular.isDefined(entityInstance.parents) && entityInstance.parents.length) {
	                var parentData = _this.getDataFromParents(entityInstance, entityInstanceParent);
	                angular.extend(data, parentData);
	            }
	            return data;
	        };
	        this.getDataFromParents = function (entityInstance, entityInstanceParent) {
	            var data = {};
	            for (var c in entityInstance.parents) {
	                var parentMetaData = entityInstance.parents[c];
	                if (angular.isDefined(parentMetaData)) {
	                    var parent = entityInstance.data[parentMetaData.name];
	                    if (angular.isObject(parent) && entityInstanceParent !== parent && parent.$$getID() !== '') {
	                        if (angular.isUndefined(data[parentMetaData.name])) {
	                            data[parentMetaData.name] = {};
	                        }
	                        var parentData = _this.processParent(parent);
	                        _this.$log.debug('parentData:' + parentMetaData.name);
	                        _this.$log.debug(parentData);
	                        angular.extend(data[parentMetaData.name], parentData);
	                    }
	                    else {
	                    }
	                }
	            }
	            ;
	            return data;
	        };
	        this.getDataFromChildren = function (entityInstance) {
	            var data = {};
	            _this.$log.debug('childrenFound');
	            _this.$log.debug(entityInstance.children);
	            for (var c in entityInstance.children) {
	                var childMetaData = entityInstance.children[c];
	                var children = entityInstance.data[childMetaData.name];
	                _this.$log.debug(childMetaData);
	                _this.$log.debug(children);
	                if (angular.isArray(entityInstance.data[childMetaData.name])) {
	                    if (angular.isUndefined(data[childMetaData.name])) {
	                        data[childMetaData.name] = [];
	                    }
	                    angular.forEach(entityInstance.data[childMetaData.name], function (child, key) {
	                        _this.$log.debug('process child array item');
	                        var childData = _this.processChild(child, entityInstance);
	                        _this.$log.debug('process child return');
	                        _this.$log.debug(childData);
	                        data[childMetaData.name].push(childData);
	                    });
	                }
	                else {
	                    if (angular.isUndefined(data[childMetaData.name])) {
	                        data[childMetaData.name] = {};
	                    }
	                    var child = entityInstance.data[childMetaData.name];
	                    _this.$log.debug('begin process child');
	                    var childData = _this.processChild(child, entityInstance);
	                    _this.$log.debug('process child return');
	                    _this.$log.debug(childData);
	                    angular.extend(data, childData);
	                }
	            }
	            _this.$log.debug('returning child data');
	            _this.$log.debug(data);
	            return data;
	        };
	        this.$log = $log;
	    }
	    return HibachiValidationService;
	}());
	exports.HibachiValidationService = HibachiValidationService;


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var baseentityservice_1 = __webpack_require__(281);
	var EntityService = (function (_super) {
	    __extends(EntityService, _super);
	    //@ngInject
	    function EntityService($injector, $hibachi, utilityService) {
	        var _this = _super.call(this, $injector, $hibachi, utilityService) || this;
	        _this.$injector = $injector;
	        _this.$hibachi = $hibachi;
	        _this.utilityService = utilityService;
	        return _this;
	    }
	    return EntityService;
	}(baseentityservice_1.BaseEntityService));
	exports.EntityService = EntityService;


/***/ }),
/* 322 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var GlobalSearchController = (function () {
	    //@ngInject
	    function GlobalSearchController($scope, $log, $window, $timeout, $hibachi, rbkeyService) {
	        $scope.keywords = '';
	        $scope.searchResultsOpen = false;
	        $scope.sidebarClass = 'sidebar';
	        $scope.loading = false; //Set loading wheel to false
	        $scope.resultsFound = true; // Set the results Found to true because no search has been done yet
	        $scope.searchResults = {
	            'product': {
	                'title': 'Products',
	                'resultNameFilter': function (data) {
	                    return data['productName'];
	                },
	                'results': [],
	                'id': function (data) {
	                    return data['productID'];
	                }
	            },
	            'order': {
	                'title': rbkeyService.getRBKey('entity.order_plural'),
	                'resultNameFilter': function (data) {
	                    return data['orderNumber'];
	                },
	                'results': [],
	                'id': function (data) {
	                    return data['orderID'];
	                }
	            },
	            'brand': {
	                'title': rbkeyService.getRBKey('entity.brand_plural'),
	                'resultNameFilter': function (data) {
	                    return data['brandName'];
	                },
	                'results': [],
	                'id': function (data) {
	                    return data['brandID'];
	                }
	            },
	            'account': {
	                'title': 'Accounts',
	                'resultNameFilter': function (data) {
	                    return data['firstName'] + ' ' + data['lastName'];
	                },
	                'results': [],
	                'id': function (data) {
	                    return data['accountID'];
	                }
	            },
	            'vendor': {
	                'title': 'Vendors',
	                'resultNameFilter': function (data) {
	                    return data['vendorName'];
	                },
	                'results': [],
	                'id': function (data) {
	                    return data['vendorID'];
	                }
	            }
	        };
	        var _timeoutPromise;
	        var _loadingCount = 0;
	        $scope.updateSearchResults = function () {
	            $scope.loading = true;
	            $scope.showResults();
	            if (_timeoutPromise) {
	                $timeout.cancel(_timeoutPromise);
	            }
	            _timeoutPromise = $timeout(function () {
	                // If no keywords, then set everything back to their defaults
	                if ($scope.keywords === '') {
	                    $scope.hideResults();
	                    // Otherwise performe the search
	                }
	                else {
	                    $scope.showResults();
	                    // Set the loadingCount to the number of AJAX Calls we are about to do
	                    _loadingCount = Object.keys($scope.searchResults).length;
	                    for (var entityName in $scope.searchResults) {
	                        (function (entityName) {
	                            var searchPromise = $hibachi.getEntity(entityName, { keywords: $scope.keywords, pageShow: 4, deferkey: 'global-search-' + entityName });
	                            searchPromise.then(function (data) {
	                                // Clear out the old Results
	                                $scope.searchResults[entityName].results = [];
	                                $scope.searchResults[entityName].title = rbkeyService.getRBKey('entity.' + entityName.toLowerCase() + '_plural');
	                                // push in the new results
	                                for (var i in data.pageRecords) {
	                                    $scope.searchResults[entityName].results.push({
	                                        'name': $scope.searchResults[entityName].resultNameFilter(data.pageRecords[i]),
	                                        'link': $hibachi.buildUrl('entity.detail' + entityName) + '&' + entityName + 'ID=' + $scope.searchResults[entityName].id(data.pageRecords[i]),
	                                    });
	                                }
	                                // Increment Down The Loading Count
	                                _loadingCount--;
	                                // If the loadingCount drops to 0, then we can update scope
	                                if (_loadingCount == 0) {
	                                    $scope.loading = false;
	                                    var _foundResults = false;
	                                    for (var _thisEntityName in $scope.searchResults) {
	                                        if ($scope.searchResults[_thisEntityName].results.length) {
	                                            _foundResults = true;
	                                            break;
	                                        }
	                                    }
	                                    $scope.resultsFound = _foundResults;
	                                }
	                            });
	                        })(entityName);
	                    }
	                }
	            }, 500);
	        };
	        $scope.showResults = function () {
	            $scope.searchResultsOpen = true;
	            $scope.sidebarClass = 'sidebar s-search-width';
	            $window.onclick = function (event) {
	                var _targetClassOfSearch = event.target.parentElement.offsetParent.classList.contains('sidebar');
	                if (!_targetClassOfSearch) {
	                    $scope.hideResults();
	                    $scope.$apply();
	                }
	            };
	        };
	        $scope.hideResults = function () {
	            $scope.searchResultsOpen = false;
	            $scope.sidebarClass = 'sidebar';
	            $scope.search.$setPristine();
	            $scope.keywords = "";
	            $window.onclick = null;
	            $scope.loading = false;
	            $scope.resultsFound = true;
	            for (var entityName in $scope.searchResults) {
	                $scope.searchResults[entityName].results = [];
	            }
	        };
	    }
	    return GlobalSearchController;
	}());
	exports.GlobalSearchController = GlobalSearchController;


/***/ }),
/* 323 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var PercentageFilter = (function () {
	    function PercentageFilter() {
	    }
	    PercentageFilter.Factory = function () {
	        return function (input, decimals, suffix) {
	            decimals = angular.isNumber(decimals) ? decimals : 3;
	            suffix = suffix || '%';
	            if (isNaN(input)) {
	                return '';
	            }
	            return Math.round(input * Math.pow(10, decimals + 2)) / Math.pow(10, decimals) + suffix;
	        };
	    };
	    return PercentageFilter;
	}());
	exports.PercentageFilter = PercentageFilter;


/***/ }),
/* 324 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var EntityRBKey = (function () {
	    function EntityRBKey() {
	    }
	    //@ngInject
	    EntityRBKey.Factory = function (rbkeyService) {
	        return function (text) {
	            if (angular.isDefined(text) && angular.isString(text)) {
	                text = text.replace('_', '').toLowerCase();
	                text = rbkeyService.getRBKey('entity.' + text);
	            }
	            return text;
	        };
	    };
	    return EntityRBKey;
	}());
	exports.EntityRBKey = EntityRBKey;


/***/ }),
/* 325 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWTrim = (function () {
	    function SWTrim() {
	    }
	    //@ngInject
	    SWTrim.Factory = function (rbkeyService) {
	        return function (text, max, wordwise, tail) {
	            if (wordwise === void 0) { wordwise = true; }
	            if (tail === void 0) { tail = "..."; }
	            if (angular.isDefined(text) && angular.isString(text)) {
	                if (!text)
	                    return '';
	                max = parseInt(max, 10);
	                if (!max)
	                    return text;
	                if (text.length <= max)
	                    return text;
	                text = text.substr(0, max);
	                if (wordwise) {
	                    var lastSpace = text.lastIndexOf(' ');
	                    if (lastSpace != -1) {
	                        text = text.substr(0, lastSpace);
	                    }
	                }
	                return text + tail;
	            }
	            return text;
	        };
	    };
	    return SWTrim;
	}());
	exports.SWTrim = SWTrim;


/***/ }),
/* 326 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWUnique = (function () {
	    function SWUnique() {
	    }
	    //@ngInject
	    SWUnique.Factory = function () {
	        var filterStub;
	        filterStub = function (items, filterOn) {
	            if (filterOn === false) {
	                return items;
	            }
	            if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
	                var hashCheck = {}, newItems = [];
	                var extractValueToCompare = function (item) {
	                    if (angular.isDefined(item) && item[filterOn] != null) {
	                        return item[filterOn];
	                    }
	                    return item;
	                };
	                angular.forEach(items, function (item) {
	                    var isDuplicate = false;
	                    for (var i = 0; i < newItems.length; i++) {
	                        if (extractValueToCompare(newItems[i]) == extractValueToCompare(item)) {
	                            isDuplicate = true;
	                            break;
	                        }
	                    }
	                    if (!isDuplicate) {
	                        newItems.push(item);
	                    }
	                });
	            }
	            return newItems;
	        };
	        //filterStub.$stateful = true;
	        return filterStub;
	    };
	    return SWUnique;
	}());
	exports.SWUnique = SWUnique;


/***/ }),
/* 327 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var DateFilter = (function () {
	    function DateFilter() {
	    }
	    //@ngInject
	    DateFilter.Factory = function ($filter) {
	        return function (date, dateString) {
	            return $filter('date')(Date.parse(date), dateString);
	        };
	    };
	    return DateFilter;
	}());
	exports.DateFilter = DateFilter;


/***/ }),
/* 328 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWActionCallerController = (function () {
	    //@ngInject
	    function SWActionCallerController($scope, $element, $templateRequest, $compile, $timeout, corePartialsPath, utilityService, $hibachi, rbkeyService, hibachiPathBuilder) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$templateRequest = $templateRequest;
	        this.$compile = $compile;
	        this.$timeout = $timeout;
	        this.corePartialsPath = corePartialsPath;
	        this.utilityService = utilityService;
	        this.$hibachi = $hibachi;
	        this.rbkeyService = rbkeyService;
	        this.$onInit = function () {
	            //Check if is NOT a ngRouter
	            if (angular.isUndefined(_this.isAngularRoute)) {
	                _this.isAngularRoute = _this.utilityService.isAngularRoute();
	            }
	            if (!_this.isAngularRoute) {
	                _this.actionUrl = _this.$hibachi.buildUrl(_this.action, _this.queryString);
	            }
	            else {
	                _this.actionUrl = '#!/entity/' + _this.action + '/' + _this.queryString.split('=')[1];
	            }
	            //			this.class = this.utilityService.replaceAll(this.utilityService.replaceAll(this.getAction(),':',''),'.','') + ' ' + this.class;
	            _this.type = _this.type || 'link';
	            if (angular.isDefined(_this.titleRbKey)) {
	                _this.title = _this.rbkeyService.getRBKey(_this.titleRbKey);
	            }
	            if (angular.isUndefined(_this.text)) {
	                _this.text = _this.title;
	            }
	            if (_this.type == "button") {
	                //handle submit.
	                /** in order to attach the correct controller to local vm, we need a watch to bind */
	                var unbindWatcher = _this.$scope.$watch(function () { return _this.formController; }, function (newValue, oldValue) {
	                    if (newValue !== undefined) {
	                        _this.formController = newValue;
	                    }
	                    unbindWatcher();
	                });
	            }
	            //			this.actionItem = this.getActionItem();
	            //			this.actionItemEntityName = this.getActionItemEntityName();
	            //			this.text = this.getText();
	            //			if(this.getDisabled()){
	            //				this.getDisabledText();
	            //			}else if(this.getConfirm()){
	            //				this.getConfirmText();
	            //			}
	            //
	            //			if(this.modalFullWidth && !this.getDisabled()){
	            //				this.class = this.class + " modalload-fullwidth";
	            //			}
	            //
	            //			if(this.modal && !this.getDisabled() && !this.modalFullWidth){
	            //				this.class = this.class + " modalload";
	            //			}
	            /*need authentication lookup by api to disable
	            <cfif not attributes.hibachiScope.authenticateAction(action=attributes.action)>
	                <cfset attributes.class &= " disabled" />
	            </cfif>
	            */
	        };
	        this.submit = function () {
	            _this.$timeout(function () {
	                if (_this.form.$valid) {
	                    _this.formController.submit(_this.action);
	                }
	                _this.form.$submitted = true;
	            });
	        };
	        this.getAction = function () {
	            return _this.action || '';
	        };
	        this.getActionItem = function () {
	            return _this.utilityService.listLast(_this.getAction(), '.');
	        };
	        this.getActionItemEntityName = function () {
	            var firstFourLetters = _this.utilityService.left(_this.actionItem, 4);
	            var firstSixLetters = _this.utilityService.left(_this.actionItem, 6);
	            var minus4letters = _this.utilityService.right(_this.actionItem, 4);
	            var minus6letters = _this.utilityService.right(_this.actionItem, 6);
	            var actionItemEntityName = "";
	            if (firstFourLetters === 'list' && _this.actionItem.length > 4) {
	                actionItemEntityName = minus4letters;
	            }
	            else if (firstFourLetters === 'edit' && _this.actionItem.length > 4) {
	                actionItemEntityName = minus4letters;
	            }
	            else if (firstFourLetters === 'save' && _this.actionItem.length > 4) {
	                actionItemEntityName = minus4letters;
	            }
	            else if (firstSixLetters === 'create' && _this.actionItem.length > 6) {
	                actionItemEntityName = minus6letters;
	            }
	            else if (firstSixLetters === 'detail' && _this.actionItem.length > 6) {
	                actionItemEntityName = minus6letters;
	            }
	            else if (firstSixLetters === 'delete' && _this.actionItem.length > 6) {
	                actionItemEntityName = minus6letters;
	            }
	            return actionItemEntityName;
	        };
	        this.getTitle = function () {
	            //if title is undefined then use text
	            if (angular.isUndefined(_this.title) || !_this.title.length) {
	                _this.title = _this.getText();
	            }
	            return _this.title;
	        };
	        this.getTextByRBKeyByAction = function (actionItemType, plural) {
	            if (plural === void 0) { plural = false; }
	            var navRBKey = _this.rbkeyService.getRBKey('admin.define.' + actionItemType + '_nav');
	            var entityRBKey = '';
	            var replaceKey = '';
	            if (plural) {
	                entityRBKey = _this.rbkeyService.getRBKey('entity.' + _this.actionItemEntityName + '_plural');
	                replaceKey = '${itemEntityNamePlural}';
	            }
	            else {
	                entityRBKey = _this.rbkeyService.getRBKey('entity.' + _this.actionItemEntityName);
	                replaceKey = '${itemEntityName}';
	            }
	            return _this.utilityService.replaceAll(navRBKey, replaceKey, entityRBKey);
	        };
	        this.getText = function () {
	            //if we don't have text then make it up based on rbkeys
	            if (angular.isUndefined(_this.text) || (angular.isDefined(_this.text) && !_this.text.length)) {
	                _this.text = _this.rbkeyService.getRBKey(_this.utilityService.replaceAll(_this.getAction(), ":", ".") + '_nav');
	                var minus8letters = _this.utilityService.right(_this.text, 8);
	                //if rbkey is still missing. then can we infer it
	                if (minus8letters === '_missing') {
	                    var firstFourLetters = _this.utilityService.left(_this.actionItem, 4);
	                    var firstSixLetters = _this.utilityService.left(_this.actionItem, 6);
	                    var minus4letters = _this.utilityService.right(_this.actionItem, 4);
	                    var minus6letters = _this.utilityService.right(_this.actionItem, 6);
	                    if (firstFourLetters === 'list' && _this.actionItem.length > 4) {
	                        _this.text = _this.getTextByRBKeyByAction('list', true);
	                    }
	                    else if (firstFourLetters === 'edit' && _this.actionItem.length > 4) {
	                        _this.text = _this.getTextByRBKeyByAction('edit', false);
	                    }
	                    else if (firstFourLetters === 'save' && _this.actionItem.length > 4) {
	                        _this.text = _this.getTextByRBKeyByAction('save', false);
	                    }
	                    else if (firstSixLetters === 'create' && _this.actionItem.length > 6) {
	                        _this.text = _this.getTextByRBKeyByAction('create', false);
	                    }
	                    else if (firstSixLetters === 'detail' && _this.actionItem.length > 6) {
	                        _this.text = _this.getTextByRBKeyByAction('detail', false);
	                    }
	                    else if (firstSixLetters === 'delete' && _this.actionItem.length > 6) {
	                        _this.text = _this.getTextByRBKeyByAction('delete', false);
	                    }
	                }
	                if (_this.utilityService.right(_this.text, 8)) {
	                    _this.text = _this.rbkeyService.getRBKey(_this.utilityService.replaceAll(_this.getAction(), ":", "."));
	                }
	            }
	            if (!_this.title || (_this.title && !_this.title.length)) {
	                _this.title = _this.text;
	            }
	            return _this.text;
	        };
	        this.getDisabled = function () {
	            //if item is disabled
	            if (angular.isDefined(_this.disabled) && _this.disabled) {
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        this.getDisabledText = function () {
	            if (_this.getDisabled()) {
	                //and no disabled text specified
	                if (angular.isUndefined(_this.disabledtext) || !_this.disabledtext.length) {
	                    var disabledrbkey = _this.utilityService.replaceAll(_this.action, ':', '.') + '_disabled';
	                    _this.disabledtext = _this.rbkeyService.getRBKey(disabledrbkey);
	                }
	                //add disabled class
	                _this.class += " btn-disabled";
	                _this.confirm = false;
	                return _this.disabledtext;
	            }
	            return "";
	        };
	        this.getConfirm = function () {
	            if (angular.isDefined(_this.confirm) && _this.confirm) {
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        this.getConfirmText = function () {
	            if (_this.getConfirm()) {
	                if (angular.isUndefined(_this.confirmtext) && _this.confirmtext.length) {
	                    var confirmrbkey = _this.utilityService.replaceAll(_this.action, ':', '.') + '_confirm';
	                    _this.confirmtext = _this.rbkeyService.getRBKey(confirmrbkey);
	                    /*<cfif right(attributes.confirmtext, "8") eq "_missing">
	                        <cfset attributes.confirmtext = replace(attributes.hibachiScope.rbKey("admin.define.delete_confirm"),'${itemEntityName}', attributes.hibachiScope.rbKey('entity.#actionItemEntityName#'), "all") />
	                    </cfif>*/
	                }
	                _this.class += " alert-confirm";
	                return _this.confirm;
	            }
	            return "";
	        };
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$timeout = $timeout;
	        this.$templateRequest = $templateRequest;
	        this.$compile = $compile;
	        this.rbkeyService = rbkeyService;
	        this.$hibachi = $hibachi;
	        this.utilityService = utilityService;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.$templateRequest(this.hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "actioncaller.html").then(function (html) {
	            var template = angular.element(html);
	            _this.$element.parent().append(template);
	            $compile(template)($scope);
	            //need to perform init after promise completes
	            //this.init();
	        });
	    }
	    return SWActionCallerController;
	}());
	exports.SWActionCallerController = SWActionCallerController;
	var SWActionCaller = (function () {
	    function SWActionCaller(partialsPath, utiltiyService, $hibachi) {
	        this.partialsPath = partialsPath;
	        this.utiltiyService = utiltiyService;
	        this.$hibachi = $hibachi;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            action: "@",
	            text: "@",
	            type: "@",
	            queryString: "@",
	            title: "@?",
	            titleRbKey: "@?",
	            'class': "@",
	            icon: "@",
	            iconOnly: "=",
	            name: "@",
	            confirm: "=",
	            confirmtext: "@",
	            disabled: "=",
	            disabledtext: "@",
	            modal: "=",
	            modalFullWidth: "=",
	            id: "@",
	            isAngularRoute: "=?"
	        };
	        this.require = { formController: "^?swForm", form: "^?form" };
	        this.controller = SWActionCallerController;
	        this.controllerAs = "swActionCaller";
	        this.link = function (scope, element, attrs) {
	            if (angular.isDefined(scope.swActionCaller.formController)) {
	                scope.formController = scope.swActionCaller.formController;
	            }
	        };
	    }
	    SWActionCaller.Factory = function () {
	        var directive = function (partialsPath, utiltiyService, $hibachi) { return new SWActionCaller(partialsPath, utiltiyService, $hibachi); };
	        directive.$inject = [
	            'partialsPath',
	            'utilityService',
	            '$hibachi'
	        ];
	        return directive;
	    };
	    return SWActionCaller;
	}());
	exports.SWActionCaller = SWActionCaller;


/***/ }),
/* 329 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWTypeaheadSearchController = (function () {
	    // @ngInject
	    function SWTypeaheadSearchController($scope, $q, $transclude, $hibachi, $timeout, utilityService, observerService, rbkeyService, collectionConfigService, typeaheadService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$q = $q;
	        this.$transclude = $transclude;
	        this.$hibachi = $hibachi;
	        this.$timeout = $timeout;
	        this.utilityService = utilityService;
	        this.observerService = observerService;
	        this.rbkeyService = rbkeyService;
	        this.collectionConfigService = collectionConfigService;
	        this.typeaheadService = typeaheadService;
	        this.results = [];
	        this.columns = [];
	        this.filters = [];
	        this.searchableColumns = [];
	        this.initialSearchableColumnsState = [];
	        this.searchableColumnSelection = 'All';
	        this.fallbackPropertyArray = [];
	        this.clearSearch = function () {
	            _this.searchText = "";
	            _this.hideSearch = true;
	            if (angular.isDefined(_this.addFunction)) {
	                _this.addFunction()(undefined);
	            }
	        };
	        this.toggleOptions = function () {
	            if (_this.hideSearch && !_this.searchText.length) {
	                _this.search(_this.searchText);
	            }
	            _this.hideSearch = !_this.hideSearch;
	        };
	        this.search = function (search) {
	            if (_this._timeoutPromise) {
	                _this.$timeout.cancel(_this._timeoutPromise);
	            }
	            _this.collectionConfig.setKeywords(search);
	            if (angular.isDefined(_this.filterGroupsConfig)) {
	                //allows for filtering on search text
	                var filterConfig = _this.filterGroupsConfig.replace("replaceWithSearchString", search);
	                filterConfig = filterConfig.trim();
	                _this.collectionConfig.loadFilterGroups(JSON.parse(filterConfig));
	            }
	            _this._timeoutPromise = _this.$timeout(function () {
	                var promise = _this.collectionConfig.getEntity();
	                promise.then(function (response) {
	                    _this.results = response.pageRecords || response.records;
	                    _this.updateSelections();
	                }).finally(function () {
	                    _this.resultsDeferred.resolve();
	                    _this.hideSearch = (_this.results.length == 0);
	                });
	            }, 500);
	        };
	        this.updateSelections = function () {
	            _this.typeaheadService.updateSelections(_this.typeaheadDataKey);
	        };
	        this.updateSearchableProperties = function (column) {
	            if (angular.isString(column) && column == 'all') {
	                angular.copy(_this.initialSearchableColumnsState, _this.searchableColumns); //need to insure that these changes are actually on the collectionconfig
	                _this.searchableColumnSelection = 'All';
	            }
	            else {
	                angular.forEach(_this.searchableColumns, function (value, key) {
	                    value.isSearchable = false;
	                });
	                column.isSearchable = true;
	                _this.searchableColumnSelection = column.title;
	            }
	            //probably need to refetch the collection
	        };
	        this.addOrRemoveItem = function (item) {
	            var remove = item.selected || false;
	            if (!_this.hideSearch && !_this.multiselectMode) {
	                _this.hideSearch = true;
	            }
	            if (!_this.multiselectMode) {
	                if (angular.isDefined(_this.propertyToShow)) {
	                    _this.searchText = item[_this.propertyToShow];
	                }
	                else if (angular.isDefined(_this.columns) &&
	                    _this.columns.length &&
	                    angular.isDefined(_this.columns[0].propertyIdentifier)) {
	                    _this.searchText = item[_this.columns[0].propertyIdentifier];
	                }
	            }
	            if (!remove && angular.isDefined(_this.addFunction)) {
	                _this.addFunction()(item);
	            }
	            if (remove && angular.isDefined(_this.removeFunction)) {
	                _this.removeFunction()(item.selectedIndex);
	                item.selected = false;
	                item.selectedIndex = undefined;
	            }
	            _this.updateSelections();
	        };
	        this.addButtonItem = function () {
	            if (!_this.hideSearch) {
	                _this.hideSearch = true;
	            }
	            if (angular.isDefined(_this.addButtonFunction)) {
	                _this.addButtonFunction()(_this.searchText);
	            }
	        };
	        this.viewButtonClick = function () {
	            _this.viewFunction()();
	        };
	        this.closeThis = function (clickOutsideArgs) {
	            _this.hideSearch = true;
	            if (angular.isDefined(clickOutsideArgs)) {
	                for (var callBackAction in clickOutsideArgs.callBackActions) {
	                    clickOutsideArgs.callBackActions[callBackAction]();
	                }
	            }
	        };
	        this.getSelections = function () {
	            return _this.typeaheadService.getData(_this.typeaheadDataKey);
	        };
	        //populates all needed variables
	        this.$transclude($scope, function () { });
	        this.resultsDeferred = $q.defer();
	        this.resultsPromise = this.resultsDeferred.promise;
	        if (angular.isUndefined(this.typeaheadDataKey)) {
	            this.typeaheadDataKey = this.utilityService.createID(32);
	        }
	        if (angular.isUndefined(this.disabled)) {
	            this.disabled = false;
	        }
	        if (angular.isUndefined(this.multiselectMode)) {
	            this.multiselectMode = false;
	        }
	        if (angular.isUndefined(this.searchText) || this.searchText == null) {
	            this.searchText = "";
	        }
	        else {
	            this.search(this.searchText);
	        }
	        if (angular.isUndefined(this.validateRequired)) {
	            this.validateRequired = false;
	        }
	        if (angular.isUndefined(this.hideSearch)) {
	            this.hideSearch = true;
	        }
	        if (angular.isUndefined(this.collectionConfig)) {
	            if (angular.isDefined(this.entity)) {
	                this.collectionConfig = collectionConfigService.newCollectionConfig(this.entity);
	            }
	            else {
	                throw ("You did not pass the correct collection config data to swTypeaheadSearch");
	            }
	        }
	        if (angular.isDefined(this.collectionConfig)) {
	            this.primaryIDPropertyName = $hibachi.getPrimaryIDPropertyNameByEntityName(this.collectionConfig.baseEntityName);
	        }
	        if (angular.isDefined(this.fallbackPropertiesToCompare) &&
	            this.fallbackPropertiesToCompare.length) {
	            this.fallbackPropertyArray = this.fallbackPropertiesToCompare.split(",");
	        }
	        if (angular.isDefined(this.placeholderRbKey)) {
	            this.placeholderText = this.rbkeyService.getRBKey(this.placeholderRbKey);
	        }
	        else if (angular.isUndefined(this.placeholderText)) {
	            this.placeholderText = this.rbkeyService.getRBKey('define.search');
	        }
	        //init timeoutPromise for link
	        this._timeoutPromise = this.$timeout(function () { }, 500);
	        if (angular.isDefined(this.propertiesToDisplay)) {
	            this.collectionConfig.addDisplayProperty(this.propertiesToDisplay.split(","));
	        }
	        angular.forEach(this.columns, function (column) {
	            _this.collectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
	        });
	        angular.forEach(this.filters, function (filter) {
	            _this.collectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
	        });
	        if (angular.isUndefined(this.allRecords)) {
	            this.allRecords = this.collectionConfig.allRecords;
	        }
	        this.collectionConfig.setAllRecords(this.allRecords);
	        if (angular.isDefined(this.maxRecords)) {
	            this.collectionConfig.setPageShow(this.maxRecords);
	        }
	        if (angular.isDefined(this.initialEntityId) && this.initialEntityId.length) {
	            this.initialEntityCollectionConfig = collectionConfigService.newCollectionConfig(this.collectionConfig.baseEntityName);
	            this.initialEntityCollectionConfig.loadColumns(this.collectionConfig.columns);
	            var primaryIDProperty = $hibachi.getPrimaryIDPropertyNameByEntityName(this.initialEntityCollectionConfig.baseEntityName);
	            this.initialEntityCollectionConfig.addFilter(primaryIDProperty, this.initialEntityId, "=");
	            var promise = this.initialEntityCollectionConfig.getEntity();
	            promise.then(function (response) {
	                _this.results = response.pageRecords;
	                if (_this.results.length) {
	                    _this.addOrRemoveItem(_this.results[0]);
	                }
	            });
	        }
	        angular.forEach(this.collectionConfig.columns, function (value, key) {
	            if (value.isSearchable) {
	                _this.searchableColumns.push(value);
	            }
	        });
	        //need to insure that these changes are actually on the collectionconfig
	        angular.copy(this.searchableColumns, this.initialSearchableColumnsState);
	        this.typeaheadService.setTypeaheadState(this.typeaheadDataKey, this);
	        this.observerService.attach(this.clearSearch, this.typeaheadDataKey + 'clearSearch');
	    }
	    return SWTypeaheadSearchController;
	}());
	exports.SWTypeaheadSearchController = SWTypeaheadSearchController;
	var SWTypeaheadSearch = (function () {
	    // @ngInject
	    function SWTypeaheadSearch($compile, typeaheadService, corePartialsPath, hibachiPathBuilder) {
	        var _this = this;
	        this.$compile = $compile;
	        this.typeaheadService = typeaheadService;
	        this.corePartialsPath = corePartialsPath;
	        this.transclude = true;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            collectionConfig: "=?",
	            entity: "@?",
	            properties: "@?",
	            propertiesToDisplay: "@?",
	            filterGroupsConfig: "@?",
	            placeholderText: "@?",
	            placeholderRbKey: "@?",
	            propertyToCompare: "@?",
	            fallbackPropertiesToCompare: "@?",
	            searchText: "=?",
	            results: "=?",
	            addFunction: "&?",
	            removeFunction: "&?",
	            addButtonFunction: "&?",
	            viewFunction: "&?",
	            showAddButton: "=?",
	            showViewButton: "=?",
	            validateRequired: "=?",
	            clickOutsideArguments: "=?",
	            propertyToShow: "=?",
	            hideSearch: "=?",
	            allRecords: "=?",
	            maxRecords: "=?",
	            disabled: "=?",
	            initialEntityId: "@",
	            multiselectMode: "=?",
	            typeaheadDataKey: "@?",
	            rightContentPropertyIdentifier: "@?"
	        };
	        this.controller = SWTypeaheadSearchController;
	        this.controllerAs = "swTypeaheadSearch";
	        this.compile = function (element, attrs, transclude) {
	            return {
	                pre: function ($scope, element, attrs) {
	                    if (angular.isDefined(attrs.addButtonFunction) && angular.isUndefined(attrs.showAddButton)) {
	                        $scope.swTypeaheadSearch.showAddButton = true;
	                    }
	                    else if (angular.isUndefined(attrs.showAddButton)) {
	                        $scope.swTypeaheadSearch.showAddButton = false;
	                    }
	                    if (angular.isDefined(attrs.viewFunction) && angular.isUndefined(attrs.showViewButton)) {
	                        $scope.swTypeaheadSearch.showViewButton = true;
	                    }
	                    else if (angular.isUndefined(attrs.showViewButton)) {
	                        $scope.swTypeaheadSearch.showViewButton = false;
	                    }
	                },
	                post: function ($scope, element, attrs) {
	                    var target = element.find(".dropdown-menu");
	                    var listItemTemplateString = "\n                    <li ng-repeat=\"item in swTypeaheadSearch.results\" ng-class=\"{'s-selected':item.selected}\"></li>\n                ";
	                    var anchorTemplateString = "\n                    <a ng-click=\"swTypeaheadSearch.addOrRemoveItem(item)\">\n                ";
	                    if (angular.isDefined($scope.swTypeaheadSearch.rightContentPropertyIdentifier)) {
	                        var rightContentTemplateString = "<span class=\"s-right-content\" ng-bind=\"item[swTypeaheadSearch.rightContentPropertyIdentifier]\"></span></a>";
	                    }
	                    else {
	                        var rightContentTemplateString = "</a>";
	                    }
	                    anchorTemplateString = anchorTemplateString + rightContentTemplateString;
	                    var listItemTemplate = angular.element(listItemTemplateString);
	                    var anchorTemplate = angular.element(anchorTemplateString);
	                    anchorTemplate.append(_this.typeaheadService.stripTranscludedContent(transclude($scope, function () { })));
	                    listItemTemplate.append(anchorTemplate);
	                    $scope.swTypeaheadSearch.resultsPromise.then(function () {
	                        target.append(_this.$compile(listItemTemplate)($scope));
	                    });
	                }
	            };
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadsearch.html";
	    }
	    SWTypeaheadSearch.Factory = function () {
	        var directive = function ($compile, typeaheadService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadSearch($compile, typeaheadService, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["$compile", "typeaheadService", "corePartialsPath",
	            'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWTypeaheadSearch;
	}());
	exports.SWTypeaheadSearch = SWTypeaheadSearch;


/***/ }),
/* 330 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWTypeaheadInputFieldController = (function () {
	    // @ngInject
	    function SWTypeaheadInputFieldController($scope, $transclude, collectionConfigService, typeaheadService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$transclude = $transclude;
	        this.collectionConfigService = collectionConfigService;
	        this.typeaheadService = typeaheadService;
	        this.columns = [];
	        this.filters = [];
	        this.addFunction = function (value) {
	            _this.typeaheadService.notifyObservers({
	                name: _this.fieldName || "",
	                data: value[_this.propertyToSave] || ""
	            });
	            _this.modelValue = value[_this.propertyToSave];
	        };
	        if (angular.isUndefined(this.typeaheadCollectionConfig)) {
	            if (angular.isDefined(this.entityName)) {
	                this.typeaheadCollectionConfig = collectionConfigService.newCollectionConfig(this.entityName);
	            }
	            else {
	                throw ("You did not pass the correct collection config data to swTypeaheadInputField");
	            }
	        }
	        if (angular.isUndefined(this.validateRequired)) {
	            this.validateRequired = false;
	        }
	        //get the collection config
	        this.$transclude($scope, function () { });
	        if (angular.isUndefined(this.propertyToSave)) {
	            throw ("You must select a property to save for the input field directive");
	        }
	        if (angular.isDefined(this.propertiesToLoad)) {
	            this.typeaheadCollectionConfig.addDisplayProperty(this.propertiesToLoad);
	        }
	        angular.forEach(this.columns, function (column) {
	            _this.typeaheadCollectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
	        });
	        angular.forEach(this.filters, function (filter) {
	            _this.typeaheadCollectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
	        });
	        if (angular.isDefined(this.initialEntityId) && this.initialEntityId.length) {
	            this.modelValue = this.initialEntityId;
	        }
	    }
	    return SWTypeaheadInputFieldController;
	}());
	exports.SWTypeaheadInputFieldController = SWTypeaheadInputFieldController;
	var SWTypeaheadInputField = (function () {
	    // @ngInject
	    function SWTypeaheadInputField(corePartialsPath, hibachiPathBuilder) {
	        this.corePartialsPath = corePartialsPath;
	        this.transclude = true;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            name: "@",
	            fieldName: "@",
	            entityName: "@",
	            typeaheadCollectionConfig: "=?",
	            propertiesToLoad: "@?",
	            placeholderRbKey: "@?",
	            propertyToShow: "@",
	            propertyToSave: "@",
	            initialEntityId: "@",
	            allRecords: "=?",
	            validateRequired: "=?",
	            maxRecords: "@"
	        };
	        this.controller = SWTypeaheadInputFieldController;
	        this.controllerAs = "swTypeaheadInputField";
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadinputfield.html";
	    }
	    SWTypeaheadInputField.Factory = function () {
	        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadInputField(corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["corePartialsPath", 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWTypeaheadInputField;
	}());
	exports.SWTypeaheadInputField = SWTypeaheadInputField;


/***/ }),
/* 331 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWTypeaheadMultiselectController = (function () {
	    // @ngInject
	    function SWTypeaheadMultiselectController($scope, $transclude, $hibachi, listingService, typeaheadService, utilityService, collectionConfigService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$transclude = $transclude;
	        this.$hibachi = $hibachi;
	        this.listingService = listingService;
	        this.typeaheadService = typeaheadService;
	        this.utilityService = utilityService;
	        this.collectionConfigService = collectionConfigService;
	        this.addSelection = function (item) {
	            _this.typeaheadService.addSelection(_this.typeaheadDataKey, item);
	            if (_this.inListingDisplay) {
	                _this.listingService.insertListingPageRecord(_this.listingId, item);
	            }
	        };
	        this.removeSelection = function (index) {
	            var itemRemoved = _this.typeaheadService.removeSelection(_this.typeaheadDataKey, index);
	            if (_this.inListingDisplay) {
	                _this.listingService.removeListingPageRecord(_this.listingId, itemRemoved);
	            }
	        };
	        this.getSelections = function () {
	            return _this.typeaheadService.getData(_this.typeaheadDataKey);
	        };
	        this.updateSelectionList = function () {
	            _this.selectionList = _this.typeaheadService.updateSelectionList(_this.typeaheadDataKey);
	        };
	        if (angular.isUndefined(this.typeaheadDataKey)) {
	            this.typeaheadDataKey = this.utilityService.createID(32);
	        }
	        if (angular.isUndefined(this.disabled)) {
	            this.disabled = false;
	        }
	        if (angular.isUndefined(this.showSelections)) {
	            this.showSelections = false;
	        }
	        if (angular.isUndefined(this.multiselectMode)) {
	            this.multiselectMode = true;
	        }
	        if (angular.isUndefined(this.hasAddButtonFunction)) {
	            this.hasAddButtonFunction = false;
	        }
	        if (angular.isUndefined(this.hasViewFunction)) {
	            this.hasViewFunction = false;
	        }
	        if (angular.isDefined(this.selectedCollectionConfig)) {
	            this.typeaheadService.initializeSelections(this.typeaheadDataKey, this.selectedCollectionConfig);
	        }
	        this.typeaheadService.attachTypeaheadSelectionUpdateEvent(this.typeaheadDataKey, this.updateSelectionList);
	    }
	    return SWTypeaheadMultiselectController;
	}());
	exports.SWTypeaheadMultiselectController = SWTypeaheadMultiselectController;
	var SWTypeaheadMultiselect = (function () {
	    // @ngInject
	    function SWTypeaheadMultiselect($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder) {
	        var _this = this;
	        this.$compile = $compile;
	        this.scopeService = scopeService;
	        this.typeaheadService = typeaheadService;
	        this.corePartialsPath = corePartialsPath;
	        this.transclude = true;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            placeholderRbKey: "@",
	            collectionConfig: "=?",
	            selectedCollectionConfig: "=?",
	            typeaheadDataKey: "@?",
	            multiselectModeOn: "=?multiselectMode",
	            showSelections: "=?",
	            dataTarget: "=?",
	            dataTargetIndex: "=?",
	            addButtonFunction: "&?",
	            viewFunction: "&?",
	            inListingDisplay: "=?",
	            listingId: "@?",
	            propertyToCompare: "@?",
	            fallbackPropertiesToCompare: "@?",
	            rightContentPropertyIdentifier: "@?",
	            selectionFieldName: "@?",
	            disabled: "=?"
	        };
	        this.controller = SWTypeaheadMultiselectController;
	        this.controllerAs = "swTypeaheadMultiselect";
	        this.compile = function (element, attrs, transclude) {
	            return {
	                pre: function ($scope, element, attrs) {
	                    //because callbacks are defined even when they're not passed in, this needs to be communicated to the typeahead
	                    if (angular.isDefined(attrs.addButtonFunction)) {
	                        $scope.swTypeaheadMultiselect.hasAddButtonFunction = true;
	                    }
	                    else {
	                        $scope.swTypeaheadMultiselect.hasAddButtonFunction = false;
	                    }
	                    if (angular.isDefined(attrs.viewFunction)) {
	                        $scope.swTypeaheadMultiselect.viewFunction = true;
	                    }
	                    else {
	                        $scope.swTypeaheadMultiselect.viewFunction = false;
	                    }
	                    if (angular.isUndefined($scope.swTypeaheadMultiselect.inListingDisplay)) {
	                        $scope.swTypeaheadMultiselect.inListingDisplay = false;
	                    }
	                    if ($scope.swTypeaheadMultiselect.inListingDisplay && _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
	                        var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
	                        $scope.swTypeaheadMultiselect.listingId = listingDisplayScope.tableID;
	                        listingDisplayScope.typeaheadDataKey = $scope.swTypeaheadMultiselect.typeaheadDataKey;
	                    }
	                },
	                post: function ($scope, element, attrs) {
	                    var target = element.find(".s-selected-list");
	                    var selectedItemTemplate = angular.element('<div class="alert s-selected-item" ng-repeat="item in swTypeaheadMultiselect.getSelections() track by $index">');
	                    var closeButton = angular.element('<button ng-click="swTypeaheadMultiselect.removeSelection($index)" type="button" class="close"><span>×</span><span class="sr-only" sw-rbkey="&apos;define.close&apos;"></span></button>');
	                    selectedItemTemplate.append(closeButton);
	                    selectedItemTemplate.append(_this.typeaheadService.stripTranscludedContent(transclude($scope, function () { })));
	                    target.append(_this.$compile(selectedItemTemplate)($scope));
	                }
	            };
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadmultiselect.html";
	    }
	    SWTypeaheadMultiselect.Factory = function () {
	        var directive = function ($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadMultiselect($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["$compile", "scopeService", "typeaheadService", "corePartialsPath", 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWTypeaheadMultiselect;
	}());
	exports.SWTypeaheadMultiselect = SWTypeaheadMultiselect;


/***/ }),
/* 332 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWTypeaheadSearchLineItemController = (function () {
	    function SWTypeaheadSearchLineItemController() {
	    }
	    return SWTypeaheadSearchLineItemController;
	}());
	exports.SWTypeaheadSearchLineItemController = SWTypeaheadSearchLineItemController;
	var SWTypeaheadSearchLineItem = (function () {
	    //@ngInject
	    function SWTypeaheadSearchLineItem($compile) {
	        this.$compile = $compile;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.bindToController = {
	            propertyIdentifier: "@",
	            isSearchable: "@?",
	        };
	        this.controller = SWTypeaheadSearchLineItemController;
	        this.controllerAs = "swTypeaheadSearchLineItem";
	        this.compile = function (element, attrs, transclude) {
	            return {
	                pre: function (scope, element, attrs) {
	                    var innerHTML = '<span ng-bind="item.' + scope.swTypeaheadSearchLineItem.propertyIdentifier + '"></span>';
	                    element.append(innerHTML);
	                },
	                post: function (scope, element, attrs) { }
	            };
	        };
	    }
	    SWTypeaheadSearchLineItem.Factory = function () {
	        var directive = function ($compile) { return new SWTypeaheadSearchLineItem($compile); };
	        directive.$inject = [
	            '$compile'
	        ];
	        return directive;
	    };
	    return SWTypeaheadSearchLineItem;
	}());
	exports.SWTypeaheadSearchLineItem = SWTypeaheadSearchLineItem;


/***/ }),
/* 333 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWTypeaheadRemoveSelectionController = (function () {
	    function SWTypeaheadRemoveSelectionController($scope, listingService, scopeService, typeaheadService, utilityService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.listingService = listingService;
	        this.scopeService = scopeService;
	        this.typeaheadService = typeaheadService;
	        this.utilityService = utilityService;
	        this.updatePageRecord = function () {
	            if (_this.scopeService.hasParentScope(_this.$scope, "pageRecord")) {
	                var pageRecordScope = _this.scopeService.getRootParentScope(_this.$scope, "pageRecord")["pageRecord"];
	                _this.pageRecord = pageRecordScope;
	            }
	        };
	        this.removeSelection = function () {
	            if (!_this.disabled) {
	                _this.typeaheadService.removeSelection(_this.typeaheadDataKey, undefined, _this.pageRecord);
	                _this.listingService.removeListingPageRecord(_this.listingId, _this.pageRecord);
	            }
	        };
	        this.listingService.attachToListingPageRecordsUpdate(this.listingId, this.updatePageRecord, this.utilityService.createID(32));
	        if (angular.isUndefined(this.disabled)) {
	            this.disabled = false;
	        }
	    }
	    return SWTypeaheadRemoveSelectionController;
	}());
	exports.SWTypeaheadRemoveSelectionController = SWTypeaheadRemoveSelectionController;
	var SWTypeaheadRemoveSelection = (function () {
	    // @ngInject
	    function SWTypeaheadRemoveSelection(scopeService, corePartialsPath, hibachiPathBuilder) {
	        var _this = this;
	        this.scopeService = scopeService;
	        this.corePartialsPath = corePartialsPath;
	        this.transclude = true;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            typeaheadDataKey: "@?",
	            index: "@?",
	            disabled: "=?"
	        };
	        this.controller = SWTypeaheadRemoveSelectionController;
	        this.controllerAs = "swTypeaheadRemoveSelection";
	        this.link = function (scope, element, attrs) {
	            if (_this.scopeService.hasParentScope(scope, "swListingDisplay")) {
	                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay")["swListingDisplay"];
	                scope.swTypeaheadRemoveSelection.typeaheadDataKey = listingDisplayScope.typeaheadDataKey;
	                scope.swTypeaheadRemoveSelection.listingId = listingDisplayScope.tableID;
	            }
	            if (_this.scopeService.hasParentScope(scope, "pageRecord")) {
	                var pageRecordScope = _this.scopeService.getRootParentScope(scope, "pageRecord")["pageRecord"];
	                scope.swTypeaheadRemoveSelection.pageRecord = pageRecordScope;
	            }
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadremoveselection.html";
	    }
	    SWTypeaheadRemoveSelection.Factory = function () {
	        var directive = function (scopeService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadRemoveSelection(scopeService, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["scopeService", "corePartialsPath", 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWTypeaheadRemoveSelection;
	}());
	exports.SWTypeaheadRemoveSelection = SWTypeaheadRemoveSelection;


/***/ }),
/* 334 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCollectionConfigController = (function () {
	    //@ngInject
	    function SWCollectionConfigController($transclude, $q, collectionConfigService) {
	        this.$transclude = $transclude;
	        this.$q = $q;
	        this.collectionConfigService = collectionConfigService;
	        this.filters = [];
	        this.columns = [];
	        this.orderBys = [];
	        this.keywordColumns = [];
	        this.columnsDeferred = this.$q.defer();
	        this.columnsPromise = this.columnsDeferred.promise;
	        this.filtersDeferred = this.$q.defer();
	        this.filtersPromise = this.filtersDeferred.promise;
	        this.orderBysDeferred = this.$q.defer();
	        this.orderBysPromise = this.columnsDeferred.promise;
	    }
	    return SWCollectionConfigController;
	}());
	exports.SWCollectionConfigController = SWCollectionConfigController;
	var SWCollectionConfig = (function () {
	    // @ngInject
	    function SWCollectionConfig(collectionConfigService, listingService, scopeService, $q) {
	        var _this = this;
	        this.collectionConfigService = collectionConfigService;
	        this.listingService = listingService;
	        this.scopeService = scopeService;
	        this.$q = $q;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.transclude = {
	            columns: "?swCollectionColumns",
	            filters: "?swCollectionFilters",
	            orderBys: "?swCollectionOrderBys"
	        };
	        this.bindToController = {
	            allRecords: "=?",
	            collectionConfigProperty: "@?",
	            distinct: "=?",
	            entityName: "@",
	            filterFlag: "=?",
	            inListingDisplay: "=?",
	            multiCollectionConfigProperty: "@?",
	            pageShow: "@?",
	            parentDirectiveControllerAsName: "@?",
	            parentDeferredProperty: "@?"
	        };
	        this.controller = SWCollectionConfigController;
	        this.controllerAs = "swCollectionConfig";
	        this.template = " \n        <div ng-transclude=\"columns\"></div>\n        <div ng-transclude=\"filters\"></div>\n        <div ng-transclude=\"orderBys\"></div>\n    ";
	        this.link = function (scope, element, attrs) {
	            //some automatic configuration for listing display
	            if (angular.isUndefined(scope.swCollectionConfig.inListingDisplay)) {
	                scope.swCollectionConfig.inListingDisplay = false;
	            }
	            if (scope.swCollectionConfig.inListingDisplay) {
	                scope.swCollectionConfig.parentDirectiveControllerAsName = "swListingDisplay";
	                scope.swCollectionConfig.parentDeferredProperty = "singleCollectionDeferred";
	            }
	            if (angular.isUndefined(scope.swCollectionConfig.entityName)) {
	                throw ("You must provide an entityname to swCollectionConfig");
	            }
	            if (angular.isUndefined(scope.swCollectionConfig.parentDirectiveControllerAsName) && !scope.swCollectionConfig.inListingDisplay) {
	                throw ("You must provide the parent directives Controller-As Name to swCollectionConfig");
	            }
	            if (angular.isUndefined(scope.swCollectionConfig.collectionConfigProperty)) {
	                scope.swCollectionConfig.collectionConfigProperty = "collectionConfig";
	            }
	            if (angular.isUndefined(scope.swCollectionConfig.allRecords)) {
	                scope.swCollectionConfig.allRecords = false;
	            }
	            if (angular.isUndefined(scope.swCollectionConfig.pageShow)) {
	                scope.swCollectionConfig.pageShow = 10;
	            }
	            if (angular.isUndefined(scope.swCollectionConfig.distinct)) {
	                scope.swCollectionConfig.distinct = false;
	            }
	            if (angular.isUndefined(scope.swCollectionConfig.filterFlag)) {
	                scope.swCollectionConfig.filterFlag = true; //assume there are filters
	            }
	            var allCollectionConfigPromises = [];
	            var currentScope = scope;
	            //we want to wait for all sibling scopes before pushing the collection config
	            while (angular.isDefined(currentScope)) {
	                if (angular.isDefined(currentScope.swCollectionConfig)) {
	                    allCollectionConfigPromises.push(currentScope.swCollectionConfig.columnsPromise);
	                    if (scope.swCollectionConfig.filterFlag) {
	                        allCollectionConfigPromises.push(currentScope.swCollectionConfig.filtersPromise);
	                    }
	                }
	                currentScope = currentScope.$$nextSibling;
	                if (currentScope == null) {
	                    break;
	                }
	            }
	            var newCollectionConfig = _this.collectionConfigService.newCollectionConfig(scope.swCollectionConfig.entityName);
	            newCollectionConfig.setAllRecords(scope.swCollectionConfig.allRecords);
	            newCollectionConfig.setDistinct(scope.swCollectionConfig.distinct);
	            newCollectionConfig.setPageShow(scope.swCollectionConfig.pageShow);
	            var currentScope = _this.scopeService.getRootParentScope(scope, scope.swCollectionConfig.parentDirectiveControllerAsName);
	            if (currentScope[scope.swCollectionConfig.parentDirectiveControllerAsName]) {
	                var parentDirective = currentScope[scope.swCollectionConfig.parentDirectiveControllerAsName];
	            }
	            else {
	                throw ("swCollectionConfig was unable to find a parent scope");
	            }
	            scope.swCollectionConfig.columnsPromise.then(function () {
	                angular.forEach(scope.swCollectionConfig.columns, function (column) {
	                    newCollectionConfig.addDisplayProperty(column.propertyIdentifier, '', column);
	                });
	            });
	            scope.swCollectionConfig.filtersPromise.then(function () {
	                angular.forEach(scope.swCollectionConfig.filters, function (filter) {
	                    newCollectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
	                });
	            });
	            scope.swCollectionConfig.orderBysPromise.then(function () {
	                angular.forEach(scope.swCollectionConfig.orderBys, function (orderBy) {
	                    newCollectionConfig.addOrderBy(orderBy);
	                });
	            });
	            _this.$q.all(allCollectionConfigPromises).then(function () {
	                if (angular.isDefined(parentDirective)) {
	                    if (angular.isDefined(scope.swCollectionConfig.multiCollectionConfigProperty)
	                        && angular.isDefined(parentDirective[scope.swCollectionConfig.multiCollectionConfigProperty])) {
	                        parentDirective[scope.swCollectionConfig.multiCollectionConfigProperty].push(newCollectionConfig);
	                    }
	                    else if (angular.isDefined(parentDirective[scope.swCollectionConfig.collectionConfigProperty])) {
	                        parentDirective[scope.swCollectionConfig.collectionConfigProperty] = newCollectionConfig;
	                    }
	                    else {
	                        throw ("swCollectionConfig could not locate a collection config property to bind it's collection to");
	                    }
	                    if (angular.isDefined(parentDirective[scope.swCollectionConfig.parentDeferredProperty])) {
	                        parentDirective[scope.swCollectionConfig.parentDeferredProperty].resolve();
	                    }
	                    else {
	                        //throw("SWCollectionConfig cannot resolve rule");
	                    }
	                }
	            }, function (reason) {
	                throw ("SWCollectionConfig is having some issues.");
	            });
	        };
	    }
	    SWCollectionConfig.Factory = function () {
	        var directive = function (collectionConfigService, listingService, scopeService, $q) { return new SWCollectionConfig(collectionConfigService, listingService, scopeService, $q); };
	        directive.$inject = [
	            'collectionConfigService',
	            'listingService',
	            'scopeService',
	            '$q'
	        ];
	        return directive;
	    };
	    return SWCollectionConfig;
	}());
	exports.SWCollectionConfig = SWCollectionConfig;


/***/ }),
/* 335 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCollectionFilterController = (function () {
	    function SWCollectionFilterController() {
	    }
	    return SWCollectionFilterController;
	}());
	exports.SWCollectionFilterController = SWCollectionFilterController;
	var SWCollectionFilter = (function () {
	    //@ngInject
	    function SWCollectionFilter(scopeService, utilityService) {
	        var _this = this;
	        this.scopeService = scopeService;
	        this.utilityService = utilityService;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.bindToController = {
	            propertyIdentifier: "@",
	            comparisonOperator: "@?",
	            comparisonValue: "@?",
	            logicalOperator: "@?",
	            hidden: "@?"
	        };
	        this.controller = SWCollectionFilterController;
	        this.controllerAs = "SWCollectionFilter";
	        this.template = "";
	        this.link = function (scope, element, attrs) {
	            var filter = {
	                propertyIdentifier: scope.SWCollectionFilter.propertyIdentifier,
	                comparisonOperator: scope.SWCollectionFilter.comparisonOperator,
	                comparisonValue: scope.SWCollectionFilter.comparisonValue,
	                logicalOperator: scope.SWCollectionFilter.logicalOperator,
	                hidden: scope.SWCollectionFilter.hidden
	            };
	            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
	            if (angular.isDefined(currentScope.swCollectionConfig)) {
	                currentScope.swCollectionConfig.filters.push(filter);
	                currentScope.swCollectionConfig.filtersDeferred.resolve();
	            }
	            else {
	                throw ("could not find swCollectionConfig in the parent scope from swcollectionfilter");
	            }
	        };
	    }
	    SWCollectionFilter.Factory = function () {
	        var directive = function (scopeService, utilityService) { return new SWCollectionFilter(scopeService, utilityService); };
	        directive.$inject = [
	            'scopeService',
	            'utilityService'
	        ];
	        return directive;
	    };
	    return SWCollectionFilter;
	}());
	exports.SWCollectionFilter = SWCollectionFilter;


/***/ }),
/* 336 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCollectionOrderByController = (function () {
	    function SWCollectionOrderByController() {
	    }
	    return SWCollectionOrderByController;
	}());
	exports.SWCollectionOrderByController = SWCollectionOrderByController;
	var SWCollectionOrderBy = (function () {
	    //@ngInject
	    function SWCollectionOrderBy(scopeService) {
	        var _this = this;
	        this.scopeService = scopeService;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.bindToController = {
	            orderBy: "@"
	        };
	        this.controller = SWCollectionOrderByController;
	        this.controllerAs = "SWCollectionOrderBy";
	        this.template = "";
	        this.link = function (scope, element, attrs) {
	            var orderBy = scope.SWCollectionOrderBy.orderBy;
	            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
	            if (angular.isDefined(currentScope.swCollectionConfig)) {
	                currentScope.swCollectionConfig.orderBys.push(orderBy);
	                currentScope.swCollectionConfig.orderBysDeferred.resolve();
	            }
	            else {
	                throw ("could not find swCollectionConfig in the parent scope from swcollectionorderby");
	            }
	        };
	    }
	    SWCollectionOrderBy.Factory = function () {
	        var directive = function (scopeService) { return new SWCollectionOrderBy(scopeService); };
	        directive.$inject = [
	            'scopeService'
	        ];
	        return directive;
	    };
	    return SWCollectionOrderBy;
	}());
	exports.SWCollectionOrderBy = SWCollectionOrderBy;


/***/ }),
/* 337 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCollectionColumnController = (function () {
	    function SWCollectionColumnController() {
	    }
	    return SWCollectionColumnController;
	}());
	exports.SWCollectionColumnController = SWCollectionColumnController;
	var SWCollectionColumn = (function () {
	    //@ngInject
	    function SWCollectionColumn(scopeService, utilityService) {
	        var _this = this;
	        this.scopeService = scopeService;
	        this.utilityService = utilityService;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.bindToController = {
	            propertyIdentifier: "@",
	            fallbackPropertyIdentifiers: "@?",
	            isVisible: "=?",
	            isSearchable: "=?",
	            isDeletable: "=?",
	            isExportable: "=?",
	            isKeywordColumn: "=?",
	            isOnlyKeywordColumn: "=?",
	            tdclass: "@?",
	            hidden: "=?"
	        };
	        this.controller = SWCollectionColumn;
	        this.controllerAs = "swCollectionColumn";
	        this.template = "";
	        this.link = function (scope, element, attrs) {
	            if (angular.isUndefined(scope.swCollectionColumn.isKeywordColumn)) {
	                scope.swCollectionColumn.isKeywordColumn = false;
	            }
	            if (angular.isUndefined(scope.swCollectionColumn.isOnlyKeywordColumn)) {
	                scope.swCollectionColumn.isOnlyKeywordColumn = scope.swCollectionColumn.isKeywordColumn;
	            }
	            if (angular.isUndefined(scope.swCollectionColumn.isVisible)) {
	                scope.swCollectionColumn.isVisible = true;
	            }
	            if (angular.isUndefined(scope.swCollectionColumn.isSearchable)) {
	                scope.swCollectionColumn.isSearchable = false;
	            }
	            if (angular.isUndefined(scope.swCollectionColumn.isDeletable)) {
	                scope.swCollectionColumn.isDeletable = false;
	            }
	            if (angular.isUndefined(scope.swCollectionColumn.isExportable)) {
	                scope.swCollectionColumn.isExportable = true;
	            }
	            var column = {
	                propertyIdentifier: scope.swCollectionColumn.propertyIdentifier,
	                fallbackPropertyIdentifiers: scope.swCollectionColumn.fallbackPropertyIdentifiers,
	                isVisible: scope.swCollectionColumn.isVisible,
	                isSearchable: scope.swCollectionColumn.isSearchable,
	                isDeletable: scope.swCollectionColumn.isDeletable,
	                isExportable: scope.swCollectionColumn.isExportable,
	                hidden: scope.swCollectionColumn.hidden,
	                tdclass: scope.swCollectionColumn.tdclass,
	                isKeywordColumn: scope.swCollectionColumn.isKeywordColumn,
	                isOnlyKeywordColumn: scope.swCollectionColumn.isOnlyKeywordColumn
	            };
	            console.log("column", column);
	            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");
	            if (angular.isDefined(currentScope.swCollectionConfig)) {
	                //push directly here because we've already built the column object
	                currentScope.swCollectionConfig.columns.push(column);
	                currentScope.swCollectionConfig.columnsDeferred.resolve();
	            }
	            else {
	                throw ("Could not find swCollectionConfig in the parent scope from swcollectioncolumn");
	            }
	        };
	    }
	    SWCollectionColumn.Factory = function () {
	        var directive = function (scopeService, utilityService) { return new SWCollectionColumn(scopeService, utilityService); };
	        directive.$inject = [
	            'scopeService',
	            'utilityService'
	        ];
	        return directive;
	    };
	    return SWCollectionColumn;
	}());
	exports.SWCollectionColumn = SWCollectionColumn;


/***/ }),
/* 338 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWActionCallerDropdownController = (function () {
	    function SWActionCallerDropdownController() {
	        this.title = this.title || '';
	        this.icon = this.icon || 'plus';
	        this.type = this.type || 'button';
	        this.dropdownClass = this.dropdownClass || '';
	        this.dropdownId = this.dropdownId || '';
	        this.buttonClass = this.buttonClass || 'btn-primary';
	    }
	    return SWActionCallerDropdownController;
	}());
	exports.SWActionCallerDropdownController = SWActionCallerDropdownController;
	var SWActionCallerDropdown = (function () {
	    function SWActionCallerDropdown(corePartialsPath, hibachiPathBuilder) {
	        this.corePartialsPath = corePartialsPath;
	        this.restrict = 'E';
	        this.scope = {};
	        this.transclude = true;
	        this.bindToController = {
	            title: "@",
	            icon: "@",
	            type: "=",
	            dropdownClass: "@",
	            dropdownId: "@",
	            buttonClass: "@"
	        };
	        this.controller = SWActionCallerDropdownController;
	        this.controllerAs = "swActionCallerDropdown";
	        this.link = function (scope, element, attrs) {
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'actioncallerdropdown.html';
	    }
	    SWActionCallerDropdown.Factory = function () {
	        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWActionCallerDropdown(corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWActionCallerDropdown;
	}());
	exports.SWActionCallerDropdown = SWActionCallerDropdown;


/***/ }),
/* 339 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWColumnSorter = (function () {
	    //@ngInject
	    function SWColumnSorter($log, observerService, corePartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'AE',
	            scope: {
	                column: "=",
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "columnsorter.html",
	            link: function (scope, element, attrs) {
	                var orderBy = {
	                    "propertyIdentifier": scope.column.propertyIdentifier,
	                };
	                scope.sortAsc = function () {
	                    orderBy.direction = 'Asc';
	                    this.observerService.notify('sortByColumn', orderBy);
	                };
	                scope.sortDesc = function () {
	                    orderBy.direction = 'Desc';
	                    observerService.notify('sortByColumn', orderBy);
	                };
	            }
	        };
	    }
	    SWColumnSorter.Factory = function () {
	        var directive = function ($log, observerService, corePartialsPath, hibachiPathBuilder) { return new SWColumnSorter($log, observerService, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            'observerService',
	            'corePartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWColumnSorter;
	}());
	exports.SWColumnSorter = SWColumnSorter;


/***/ }),
/* 340 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/**
	 * <------------------------------------------------------------------------------------------------------------------------------------>
	 *   This directive can be used to prompt the user with a confirmation dialog.
	 *
	 *   Example Usage 1:
	 *   <a swconfirm
	 *   						use-rb-key=true
	 * 							yes-text="define.yes"
	 * 							no-text="define.no"
	 * 							confirm-text="define.confirm"
	 * 							message-text="define.delete.message"
	 * 							callback="someFunction()">
	 *   </a>
	 *   Alternate Version (No Rbkeys):
	 *   <a swconfirm
	 *   						use-rb-key=false
	 * 							yes-text="Sure"
	 * 							no-text="Not Sure!"
	 * 							confirm-text="Sure"
	 * 							message-text="Are you sure?"
	 * 							callback="sure()">
	 *   </a>
	 *
	 *   Note: Because the template is dynamic, the following keywords can not be used anywhere in the text for this modal.
	 *
	 *   [yes] [no] [confirm] [message] [callback]
	 *
	 *   The above words in upper-case can be used - just not those words inside square brackets.
	 *   Note: Your callback function on-confirm should return true;
	 *<------------------------------------------------------------------------------------------------------------------------------------->
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWConfirm = (function () {
	    //@ngInject
	    function SWConfirm($hibachi, $log, $compile, $modal, partialsPath) {
	        var buildConfirmationModal = function (simple, useRbKey, confirmText, messageText, noText, yesText) {
	            /* Keys */
	            var confirmKey = "[confirm]";
	            var messageKey = "[message]";
	            var noKey = "[no]";
	            var yesKey = "[yes]";
	            var swRbKey = "sw-rbkey=";
	            /* Values */
	            var confirmVal = "<confirm>";
	            var messageVal = "<message>";
	            var noVal = "<no>";
	            var yesVal = "<yes>";
	            /* Parse Tags */
	            var startTag = "\"'";
	            var endTag = "'\"";
	            var startParen = "'";
	            var endParen = "'";
	            var empty = "";
	            /* Modal String */
	            var parsedKeyString = "";
	            var finishedString = "";
	            //Figure out which version of this tag we are using
	            var templateString = "<div>" +
	                "<div class='modal-header'><a class='close' data-dismiss='modal' ng-click='cancel()'>×</a><h3 [confirm]><confirm></h3></div>" +
	                "<div class='modal-body' [message]>" + "<message>" + "</div>" +
	                "<div class='modal-footer'>" +
	                "<button class='btn btn-sm btn-default btn-inverse' ng-click='cancel()' [no]><no></button>" +
	                "<button class='btn btn-sm btn-default btn-primary' ng-click='fireCallback(callback)' [yes]><yes></button></div></div></div>";
	            /* Use RbKeys or Not? */
	            if (useRbKey === "true") {
	                $log.debug("Using RbKey? " + useRbKey);
	                /* Then decorate the template with the keys. */
	                confirmText = swRbKey + startTag + confirmText + endTag;
	                messageText = swRbKey + startTag + messageText + endTag;
	                yesText = swRbKey + startTag + yesText + endTag;
	                noText = swRbKey + startTag + noText + endTag;
	                parsedKeyString = templateString.replace(confirmKey, confirmText)
	                    .replace(messageText, messageText)
	                    .replace(noKey, noText)
	                    .replace(yesKey, yesText);
	                $log.debug(finishedString);
	                finishedString = parsedKeyString.replace(confirmKey, empty)
	                    .replace(messageVal, empty)
	                    .replace(noVal, empty)
	                    .replace(yesVal, empty);
	                $log.debug(finishedString);
	                return finishedString;
	            }
	            else {
	                /* Then decorate the template without the keys. */
	                $log.debug("Using RbKey? " + useRbKey);
	                parsedKeyString = templateString.replace(confirmVal, confirmText)
	                    .replace(messageVal, messageText)
	                    .replace(noVal, noText)
	                    .replace(yesVal, yesText);
	                finishedString = parsedKeyString.replace(confirmKey, empty)
	                    .replace(messageKey, empty)
	                    .replace(noKey, empty)
	                    .replace(yesKey, empty);
	                $log.debug(finishedString);
	                return finishedString;
	            }
	        };
	        return {
	            restrict: 'EA',
	            scope: {
	                callback: "&",
	                entity: "="
	            },
	            link: function (scope, element, attr) {
	                /* Grab the template and build the modal on click */
	                $log.debug("Modal is: ");
	                $log.debug($modal);
	                element.bind('click', function () {
	                    /* Default Values */
	                    var useRbKey = attr.useRbKey || "false";
	                    var simple = attr.simple || false;
	                    var yesText = attr.yesText || "define.yes";
	                    var noText = attr.noText || "define.no";
	                    var confirmText = attr.confirmText || "define.delete";
	                    var messageText = attr.messageText || "define.delete_message";
	                    var templateString = buildConfirmationModal(simple, useRbKey, confirmText, messageText, noText, yesText);
	                    var modalInstance = $modal.open({
	                        template: templateString,
	                        controller: 'confirmationController',
	                        scope: scope
	                    });
	                    /**
	                        * Handles the result - callback or dismissed
	                        */
	                    modalInstance.result.then(function (result) {
	                        $log.debug("Result:" + result);
	                        return true;
	                    }, function () {
	                        //There was an error
	                    });
	                }); //<--end bind
	            }
	        };
	    }
	    SWConfirm.Factory = function () {
	        var directive = function ($hibachi, $log, $compile, $modal, partialsPath) { return new SWConfirm($hibachi, $log, $compile, $modal, partialsPath); };
	        directive.$inject = ['$hibachi', '$log', '$compile', '$modal', 'partialsPath'];
	        return directive;
	    };
	    return SWConfirm;
	}());
	exports.SWConfirm = SWConfirm;


/***/ }),
/* 341 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWDraggableController = (function () {
	    //@ngInject
	    function SWDraggableController() {
	        if (angular.isUndefined(this.draggable)) {
	            this.draggable = false;
	        }
	    }
	    return SWDraggableController;
	}());
	var SWDraggable = (function () {
	    //@ngInject
	    function SWDraggable(corePartialsPath, utilityService, draggableService, hibachiPathBuilder) {
	        var _this = this;
	        this.corePartialsPath = corePartialsPath;
	        this.utilityService = utilityService;
	        this.draggableService = draggableService;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            //all fields required
	            draggable: "=",
	            draggableRecord: "=",
	            draggableKey: "="
	        };
	        this.controller = SWDraggableController;
	        this.controllerAs = "swDraggable";
	        this.link = function (scope, element, attrs) {
	            angular.element(element).attr("draggable", "true");
	            var id = angular.element(element).attr("id");
	            if (!id) {
	                id = _this.utilityService.createID(32);
	            }
	            element.bind("dragstart", function (e) {
	                e = e.originalEvent || e;
	                e.stopPropagation();
	                if (!scope.swDraggable.draggable)
	                    return false;
	                element.addClass("s-dragging");
	                scope.swDraggable.draggableRecord.draggableStartKey = scope.swDraggable.draggableKey;
	                e.dataTransfer.setData("application/json", angular.toJson(scope.swDraggable.draggableRecord));
	                e.dataTransfer.effectAllowed = "move";
	                e.dataTransfer.setDragImage(element[0], 0, 0);
	            });
	            element.bind("dragend", function (e) {
	                e = e.originalEvent || e;
	                e.stopPropagation();
	                element.removeClass("s-dragging");
	            });
	            /*element.on('dragenter', function (e) {
	                e = e.originalEvent || e;
	                e.stopPropagation();
	            });
	    
	            element.on('dragover', function(e) {
	                e = e.originalEvent || e;
	                e.stopPropagation();
	            });
	    
	            element.on('drop', function(e) {
	                e = e.originalEvent || e;
	                e.stopPropagation();
	            });
	    
	            element.on('dragleave', function(e) {
	                e = e.originalEvent || e;
	                e.stopPropagation();
	            });*/
	        };
	    }
	    SWDraggable.Factory = function () {
	        var directive = function (corePartialsPath, utilityService, draggableService, hibachiPathBuilder) { return new SWDraggable(corePartialsPath, utilityService, draggableService, hibachiPathBuilder); };
	        directive.$inject = [
	            'corePartialsPath',
	            'utilityService',
	            'draggableService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWDraggable;
	}());
	exports.SWDraggable = SWDraggable;


/***/ }),
/* 342 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWDraggableContainerController = (function () {
	    //@ngInject
	    function SWDraggableContainerController(draggableService) {
	        this.draggableService = draggableService;
	        if (angular.isUndefined(this.draggable)) {
	            this.draggable = false;
	        }
	    }
	    return SWDraggableContainerController;
	}());
	var SWDraggableContainer = (function () {
	    //@ngInject
	    function SWDraggableContainer($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder) {
	        var _this = this;
	        this.$timeout = $timeout;
	        this.corePartialsPath = corePartialsPath;
	        this.utilityService = utilityService;
	        this.listingService = listingService;
	        this.observerService = observerService;
	        this.draggableService = draggableService;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            draggable: "=?",
	            draggableRecords: "=?",
	            dropEventName: "@?",
	            listingId: "@?"
	        };
	        this.controller = SWDraggableContainerController;
	        this.controllerAs = "swDraggableContainer";
	        this.link = function (scope, element, attrs) {
	            angular.element(element).attr("draggable", "true");
	            var placeholderElement = angular.element("<tr class='s-placeholder'><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td></td></tr>"); //temporarirly hardcoding tds so it will show up
	            var id = angular.element(element).attr("id");
	            if (!id) {
	                id = _this.utilityService.createID(32);
	            }
	            var listNode = element[0];
	            var placeholderNode = placeholderElement[0];
	            placeholderElement.remove();
	            element.on('drop', function (e) {
	                e = e.originalEvent || e;
	                e.preventDefault();
	                if (!_this.draggableService.isDropAllowed(e))
	                    return true;
	                var record = e.dataTransfer.getData("application/json") || e.dataTransfer.getData("text/plain");
	                var parsedRecord = JSON.parse(record);
	                var index = Array.prototype.indexOf.call(listNode.children, placeholderNode);
	                if (index < parsedRecord.draggableStartKey) {
	                    parsedRecord.draggableStartKey++;
	                }
	                _this.$timeout(function () {
	                    scope.swDraggableContainer.draggableRecords.splice(index, 0, parsedRecord);
	                    scope.swDraggableContainer.draggableRecords.splice(parsedRecord.draggableStartKey, 1);
	                }, 0);
	                if (angular.isDefined(scope.swDraggableContainer.listingId)) {
	                    _this.listingService.notifyListingPageRecordsUpdate(scope.swDraggableContainer.listingId);
	                }
	                else if (angular.isDefined(scope.swDraggableContainer.dropEventName)) {
	                    _this.observerService.notify(scope.swDraggableContainer.dropEventName);
	                }
	                placeholderElement.remove();
	                e.stopPropagation();
	                return false;
	            });
	            element.on('dragenter', function (e) {
	                e = e.originalEvent || e;
	                if (!_this.draggableService.isDropAllowed(e))
	                    return true;
	                e.preventDefault();
	            });
	            element.on('dragleave', function (e) {
	                e = e.originalEvent || e;
	                if (e.pageX != 0 || e.pageY != 0) {
	                    return false;
	                }
	                return false;
	            });
	            element.on('dragover', function (e) {
	                e = e.originalEvent || e;
	                e.stopPropagation();
	                if (placeholderNode.parentNode != listNode) {
	                    element.append(placeholderElement);
	                }
	                if (e.target !== listNode) {
	                    var listItemNode = e.target;
	                    while (listItemNode.parentNode !== listNode && listItemNode.parentNode) {
	                        listItemNode = listItemNode.parentNode;
	                    }
	                    if (listItemNode.parentNode === listNode && listItemNode !== placeholderNode) {
	                        if (_this.draggableService.isMouseInFirstHalf(e, listItemNode)) {
	                            listNode.insertBefore(placeholderNode, listItemNode);
	                        }
	                        else {
	                            listNode.insertBefore(placeholderNode, listItemNode.nextSibling);
	                        }
	                    }
	                }
	                element.addClass("s-dragged-over");
	                return false;
	            });
	        };
	    }
	    SWDraggableContainer.Factory = function () {
	        var directive = function ($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder) { return new SWDraggableContainer($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder); };
	        directive.$inject = [
	            '$timeout',
	            'corePartialsPath',
	            'utilityService',
	            'listingService',
	            'observerService',
	            'draggableService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWDraggableContainer;
	}());
	exports.SWDraggableContainer = SWDraggableContainer;


/***/ }),
/* 343 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWEntityActionBarController = (function () {
	    //@ngInject
	    function SWEntityActionBarController(rbkeyService) {
	        var _this = this;
	        this.rbkeyService = rbkeyService;
	        this.init = function () {
	            if (angular.isDefined(_this.pageTitleRbKey)) {
	                _this.pageTitle = _this.rbkeyService.getRBKey(_this.pageTitleRbKey);
	            }
	        };
	        this.init();
	    }
	    return SWEntityActionBarController;
	}());
	var SWEntityActionBar = (function () {
	    //@ngInject
	    function SWEntityActionBar(corePartialsPath, hibachiPathBuilder) {
	        this.corePartialsPath = corePartialsPath;
	        this.restrict = 'E';
	        this.scope = {};
	        this.transclude = true;
	        this.bindToController = {
	            /*Core settings*/
	            type: "@",
	            object: "=",
	            pageTitle: "@?",
	            pageTitleRbKey: "@?",
	            edit: "=",
	            /*Action Callers (top buttons)*/
	            showcancel: "=",
	            showcreate: "=",
	            showedit: "=",
	            showdelete: "=",
	            /*Basic Action Caller Overrides*/
	            createModal: "=",
	            createAction: "=",
	            createQueryString: "=",
	            backAction: "=",
	            backQueryString: "=",
	            cancelAction: "=",
	            cancelQueryString: "=",
	            deleteAction: "=",
	            deleteQueryString: "=",
	            /*Process Specific Values*/
	            processAction: "=",
	            processContext: "="
	        };
	        this.controller = SWEntityActionBarController;
	        this.controllerAs = "swEntityActionBar";
	        this.link = function (scope, element, attrs) {
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'entityactionbar.html';
	    }
	    SWEntityActionBar.Factory = function () {
	        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWEntityActionBar(corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWEntityActionBar;
	}());
	exports.SWEntityActionBar = SWEntityActionBar;
	//	angular.module('slatwalladmin').directive('swEntityActionBar',['corePartialsPath',(corePartialsPath) => new SWEntityActionBar(corePartialsPath)]);


/***/ }),
/* 344 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWEntityActionBarButtonGroupController = (function () {
	    function SWEntityActionBarButtonGroupController() {
	    }
	    return SWEntityActionBarButtonGroupController;
	}());
	var SWEntityActionBarButtonGroup = (function () {
	    //@ngInject
	    function SWEntityActionBarButtonGroup(corePartialsPath, hibachiPathBuilder) {
	        this.corePartialsPath = corePartialsPath;
	        this.restrict = 'E';
	        this.scope = {};
	        this.transclude = true;
	        this.bindToController = {};
	        this.controller = SWEntityActionBarButtonGroupController;
	        this.controllerAs = "swEntityActionBarButtonGroup";
	        this.link = function (scope, element, attrs) {
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'entityactionbarbuttongroup.html';
	    }
	    SWEntityActionBarButtonGroup.Factory = function () {
	        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWEntityActionBarButtonGroup(corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ['corePartialsPath',
	            'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWEntityActionBarButtonGroup;
	}());
	exports.SWEntityActionBarButtonGroup = SWEntityActionBarButtonGroup;


/***/ }),
/* 345 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWExpandableRecordController = (function () {
	    //@ngInject
	    function SWExpandableRecordController($timeout, $hibachi, utilityService, collectionConfigService, expandableService, listingService, observerService) {
	        var _this = this;
	        this.$timeout = $timeout;
	        this.$hibachi = $hibachi;
	        this.utilityService = utilityService;
	        this.collectionConfigService = collectionConfigService;
	        this.expandableService = expandableService;
	        this.listingService = listingService;
	        this.observerService = observerService;
	        this.childrenLoaded = false;
	        this.childrenOpen = false;
	        this.children = [];
	        this.refreshChildren = function () {
	            _this.getEntity();
	        };
	        this.setupChildCollectionConfig = function () {
	            _this.childCollectionConfig = _this.collectionConfigService.newCollectionConfig(_this.entity.metaData.className);
	            //set up parent
	            var parentName = _this.entity.metaData.hb_parentPropertyName;
	            var parentCFC = _this.entity.metaData[parentName].cfc;
	            _this.parentIDName = _this.$hibachi.getEntityExample(parentCFC).$$getIDName();
	            //set up child
	            var childName = _this.entity.metaData.hb_childPropertyName;
	            var childCFC = _this.entity.metaData[childName].cfc;
	            var childIDName = _this.$hibachi.getEntityExample(childCFC).$$getIDName();
	            _this.childCollectionConfig.clearFilterGroups();
	            _this.childCollectionConfig.collection = _this.entity;
	            _this.childCollectionConfig.addFilter(parentName + '.' + _this.parentIDName, _this.parentId);
	            _this.childCollectionConfig.setAllRecords(true);
	            angular.forEach(_this.collectionConfig.columns, function (column) {
	                _this.childCollectionConfig.addColumn(column.propertyIdentifier, column.title, column);
	            });
	            angular.forEach(_this.collectionConfig.joins, function (join) {
	                _this.childCollectionConfig.addJoin(join);
	            });
	            _this.childCollectionConfig.groupBys = _this.collectionConfig.groupBys;
	        };
	        this.getEntity = function () {
	            _this.collectionPromise.then(function (data) {
	                _this.collectionData = data;
	                _this.collectionData.pageRecords = _this.collectionData.pageRecords || _this.collectionData.records;
	                if (_this.collectionData.pageRecords.length) {
	                    angular.forEach(_this.collectionData.pageRecords, function (pageRecord) {
	                        _this.expandableService.addRecord(pageRecord[_this.parentIDName], true);
	                        pageRecord.dataparentID = _this.recordID;
	                        pageRecord.depth = _this.recordDepth || 0;
	                        pageRecord.depth++;
	                        //push the children into the listing display
	                        _this.children.push(pageRecord);
	                        _this.records.splice(_this.recordIndex + 1, 0, pageRecord);
	                    });
	                }
	                _this.childrenLoaded = true;
	            });
	        };
	        this.toggleChild = function () {
	            _this.$timeout(function () {
	                _this.childrenOpen = !_this.childrenOpen;
	                _this.expandableService.updateState(_this.recordID, { isOpen: _this.childrenOpen });
	                if (!_this.childrenLoaded) {
	                    if (_this.childCollectionConfig == null) {
	                        _this.setupChildCollectionConfig();
	                    }
	                    if (angular.isFunction(_this.childCollectionConfig.getEntity)) {
	                        _this.collectionPromise = _this.childCollectionConfig.getEntity();
	                    }
	                    _this.getEntity();
	                }
	                angular.forEach(_this.children, function (child) {
	                    child.dataIsVisible = _this.childrenOpen;
	                    var entityPrimaryIDName = _this.entity.$$getIDName();
	                    var idsToCheck = [];
	                    idsToCheck.push(child[entityPrimaryIDName]);
	                    _this.expandableService.updateState(child[entityPrimaryIDName], { isOpen: _this.childrenOpen });
	                    //close all children of the child if we are closing
	                    var childrenTraversed = false;
	                    var recordLength = _this.records.length;
	                    while (!childrenTraversed && idsToCheck.length > 0) {
	                        var found = false;
	                        var idToCheck = idsToCheck.pop();
	                        for (var i = 0; i < recordLength; i++) {
	                            var record = _this.records[i];
	                            if (record['dataparentID'] == idToCheck) {
	                                idsToCheck.push(record[entityPrimaryIDName]);
	                                _this.expandableService.updateState(record[entityPrimaryIDName], { isOpen: _this.childrenOpen });
	                                record.dataIsVisible = _this.childrenOpen;
	                                found = true;
	                            }
	                        }
	                        if (!found) {
	                            childrenTraversed = true;
	                        }
	                    }
	                });
	            });
	        };
	        this.recordID = this.parentId; //this is what parent is initalized to in the listing display
	        expandableService.addRecord(this.recordID);
	        if (angular.isDefined(this.refreshChildrenEvent) && this.refreshChildrenEvent.length) {
	            this.observerService.attach(this.refreshChildren, this.refreshChildrenEvent);
	        }
	    }
	    return SWExpandableRecordController;
	}());
	var SWExpandableRecord = (function () {
	    //@ngInject
	    function SWExpandableRecord($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder) {
	        var _this = this;
	        this.$compile = $compile;
	        this.$templateRequest = $templateRequest;
	        this.$timeout = $timeout;
	        this.corePartialsPath = corePartialsPath;
	        this.utilityService = utilityService;
	        this.expandableService = expandableService;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            recordValue: "=",
	            link: "@",
	            expandable: "=?",
	            parentId: "=",
	            entity: "=",
	            collectionConfig: "=?",
	            childCollectionConfig: "=?",
	            refreshChildrenEvent: "=?",
	            listingId: "@?",
	            records: "=",
	            pageRecord: "=",
	            recordIndex: "=",
	            recordDepth: "=",
	            childCount: "=",
	            autoOpen: "=",
	            multiselectIdPaths: "=",
	            expandableRules: "="
	        };
	        this.controller = SWExpandableRecordController;
	        this.controllerAs = "swExpandableRecord";
	        this.link = function (scope, element, attrs) {
	            if (scope.swExpandableRecord.expandable && scope.swExpandableRecord.childCount) {
	                if (scope.swExpandableRecord.recordValue) {
	                    var id = scope.swExpandableRecord.records[scope.swExpandableRecord.recordIndex][scope.swExpandableRecord.entity.$$getIDName()];
	                    if (scope.swExpandableRecord.multiselectIdPaths && scope.swExpandableRecord.multiselectIdPaths.length) {
	                        var multiselectIdPathsArray = scope.swExpandableRecord.multiselectIdPaths.split(',');
	                        if (!scope.swExpandableRecord.childrenLoaded) {
	                            angular.forEach(multiselectIdPathsArray, function (multiselectIdPath) {
	                                var position = _this.utilityService.listFind(multiselectIdPath, id, '/');
	                                var multiSelectIDs = multiselectIdPath.split('/');
	                                var multiselectPathLength = multiSelectIDs.length;
	                                if (position !== -1 && position < multiselectPathLength - 1 && !_this.expandableService.getState(id, "isOpen")) {
	                                    _this.expandableService.updateState(id, { isOpen: true });
	                                    scope.swExpandableRecord.toggleChild();
	                                }
	                            });
	                        }
	                    }
	                }
	                _this.$templateRequest(_this.hibachiPathBuilder.buildPartialsPath(_this.corePartialsPath) + "expandablerecord.html").then(function (html) {
	                    var template = angular.element(html);
	                    //get autoopen reference to ensure only the root is autoopenable
	                    var autoOpen = angular.copy(scope.swExpandableRecord.autoOpen);
	                    scope.swExpandableRecord.autoOpen = false;
	                    template = _this.$compile(template)(scope);
	                    element.html(template);
	                    element.on('click', scope.swExpandableRecord.toggleChild);
	                    if (autoOpen) {
	                        scope.swExpandableRecord.toggleChild();
	                    }
	                });
	            }
	        };
	        this.$compile = $compile;
	        this.$templateRequest = $templateRequest;
	        this.corePartialsPath = corePartialsPath;
	        this.$timeout = $timeout;
	        this.utilityService = utilityService;
	        this.expandableService = expandableService;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	    }
	    SWExpandableRecord.Factory = function () {
	        var directive = function ($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder) { return new SWExpandableRecord($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder); };
	        directive.$inject = [
	            '$compile',
	            '$templateRequest',
	            '$timeout',
	            'corePartialsPath',
	            'utilityService',
	            'expandableService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWExpandableRecord;
	}());
	exports.SWExpandableRecord = SWExpandableRecord;


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var md5 = __webpack_require__(347);
	var SWGravatarController = (function () {
	    // @ngInject
	    function SWGravatarController() {
	        this.gravatarURL = "http://www.gravatar.com/avatar/" + md5(this.emailAddress.toLowerCase().trim());
	    }
	    return SWGravatarController;
	}());
	exports.SWGravatarController = SWGravatarController;
	var SWGravatar = (function () {
	    function SWGravatar() {
	        this.template = "<img src='{{swGravatar.gravatarURL}}' />";
	        this.transclude = false;
	        this.restrict = "E";
	        this.scope = {};
	        this.bindToController = {
	            emailAddress: "@"
	        };
	        this.controller = SWGravatarController;
	        this.controllerAs = "swGravatar";
	        this.link = function (scope, element, attrs, controller, transclude) {
	        };
	    }
	    SWGravatar.Factory = function () {
	        var directive = function () { return new SWGravatar(); };
	        directive.$inject = [];
	        return directive;
	    };
	    return SWGravatar;
	}());
	SWGravatar.$inject = ["$hibachi", "$timeout", "collectionConfigService", "corePartialsPath",
	    'hibachiPathBuilder'];
	exports.SWGravatar = SWGravatar;


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	(function(){
	  var crypt = __webpack_require__(348),
	      utf8 = __webpack_require__(349).utf8,
	      isBuffer = __webpack_require__(350),
	      bin = __webpack_require__(349).bin,

	  // The core
	  md5 = function (message, options) {
	    // Convert to byte array
	    if (message.constructor == String)
	      if (options && options.encoding === 'binary')
	        message = bin.stringToBytes(message);
	      else
	        message = utf8.stringToBytes(message);
	    else if (isBuffer(message))
	      message = Array.prototype.slice.call(message, 0);
	    else if (!Array.isArray(message))
	      message = message.toString();
	    // else, assume byte array already

	    var m = crypt.bytesToWords(message),
	        l = message.length * 8,
	        a =  1732584193,
	        b = -271733879,
	        c = -1732584194,
	        d =  271733878;

	    // Swap endian
	    for (var i = 0; i < m.length; i++) {
	      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
	             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
	    }

	    // Padding
	    m[l >>> 5] |= 0x80 << (l % 32);
	    m[(((l + 64) >>> 9) << 4) + 14] = l;

	    // Method shortcuts
	    var FF = md5._ff,
	        GG = md5._gg,
	        HH = md5._hh,
	        II = md5._ii;

	    for (var i = 0; i < m.length; i += 16) {

	      var aa = a,
	          bb = b,
	          cc = c,
	          dd = d;

	      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
	      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
	      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
	      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
	      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
	      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
	      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
	      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
	      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
	      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
	      c = FF(c, d, a, b, m[i+10], 17, -42063);
	      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
	      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
	      d = FF(d, a, b, c, m[i+13], 12, -40341101);
	      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
	      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

	      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
	      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
	      c = GG(c, d, a, b, m[i+11], 14,  643717713);
	      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
	      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
	      d = GG(d, a, b, c, m[i+10],  9,  38016083);
	      c = GG(c, d, a, b, m[i+15], 14, -660478335);
	      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
	      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
	      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
	      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
	      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
	      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
	      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
	      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
	      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

	      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
	      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
	      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
	      b = HH(b, c, d, a, m[i+14], 23, -35309556);
	      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
	      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
	      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
	      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
	      a = HH(a, b, c, d, m[i+13],  4,  681279174);
	      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
	      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
	      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
	      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
	      d = HH(d, a, b, c, m[i+12], 11, -421815835);
	      c = HH(c, d, a, b, m[i+15], 16,  530742520);
	      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

	      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
	      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
	      c = II(c, d, a, b, m[i+14], 15, -1416354905);
	      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
	      a = II(a, b, c, d, m[i+12],  6,  1700485571);
	      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
	      c = II(c, d, a, b, m[i+10], 15, -1051523);
	      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
	      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
	      d = II(d, a, b, c, m[i+15], 10, -30611744);
	      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
	      b = II(b, c, d, a, m[i+13], 21,  1309151649);
	      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
	      d = II(d, a, b, c, m[i+11], 10, -1120210379);
	      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
	      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

	      a = (a + aa) >>> 0;
	      b = (b + bb) >>> 0;
	      c = (c + cc) >>> 0;
	      d = (d + dd) >>> 0;
	    }

	    return crypt.endian([a, b, c, d]);
	  };

	  // Auxiliary functions
	  md5._ff  = function (a, b, c, d, x, s, t) {
	    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };
	  md5._gg  = function (a, b, c, d, x, s, t) {
	    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };
	  md5._hh  = function (a, b, c, d, x, s, t) {
	    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };
	  md5._ii  = function (a, b, c, d, x, s, t) {
	    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };

	  // Package private blocksize
	  md5._blocksize = 16;
	  md5._digestsize = 16;

	  module.exports = function (message, options) {
	    if (message === undefined || message === null)
	      throw new Error('Illegal argument ' + message);

	    var digestbytes = crypt.wordsToBytes(md5(message, options));
	    return options && options.asBytes ? digestbytes :
	        options && options.asString ? bin.bytesToString(digestbytes) :
	        crypt.bytesToHex(digestbytes);
	  };

	})();


/***/ }),
/* 348 */
/***/ (function(module, exports) {

	(function() {
	  var base64map
	      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

	  crypt = {
	    // Bit-wise rotation left
	    rotl: function(n, b) {
	      return (n << b) | (n >>> (32 - b));
	    },

	    // Bit-wise rotation right
	    rotr: function(n, b) {
	      return (n << (32 - b)) | (n >>> b);
	    },

	    // Swap big-endian to little-endian and vice versa
	    endian: function(n) {
	      // If number given, swap endian
	      if (n.constructor == Number) {
	        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
	      }

	      // Else, assume array and swap all items
	      for (var i = 0; i < n.length; i++)
	        n[i] = crypt.endian(n[i]);
	      return n;
	    },

	    // Generate an array of any length of random bytes
	    randomBytes: function(n) {
	      for (var bytes = []; n > 0; n--)
	        bytes.push(Math.floor(Math.random() * 256));
	      return bytes;
	    },

	    // Convert a byte array to big-endian 32-bit words
	    bytesToWords: function(bytes) {
	      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
	        words[b >>> 5] |= bytes[i] << (24 - b % 32);
	      return words;
	    },

	    // Convert big-endian 32-bit words to a byte array
	    wordsToBytes: function(words) {
	      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
	        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	      return bytes;
	    },

	    // Convert a byte array to a hex string
	    bytesToHex: function(bytes) {
	      for (var hex = [], i = 0; i < bytes.length; i++) {
	        hex.push((bytes[i] >>> 4).toString(16));
	        hex.push((bytes[i] & 0xF).toString(16));
	      }
	      return hex.join('');
	    },

	    // Convert a hex string to a byte array
	    hexToBytes: function(hex) {
	      for (var bytes = [], c = 0; c < hex.length; c += 2)
	        bytes.push(parseInt(hex.substr(c, 2), 16));
	      return bytes;
	    },

	    // Convert a byte array to a base-64 string
	    bytesToBase64: function(bytes) {
	      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
	        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
	        for (var j = 0; j < 4; j++)
	          if (i * 8 + j * 6 <= bytes.length * 8)
	            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
	          else
	            base64.push('=');
	      }
	      return base64.join('');
	    },

	    // Convert a base-64 string to a byte array
	    base64ToBytes: function(base64) {
	      // Remove non-base-64 characters
	      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

	      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
	          imod4 = ++i % 4) {
	        if (imod4 == 0) continue;
	        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
	            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
	            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
	      }
	      return bytes;
	    }
	  };

	  module.exports = crypt;
	})();


/***/ }),
/* 349 */
/***/ (function(module, exports) {

	var charenc = {
	  // UTF-8 encoding
	  utf8: {
	    // Convert a string to a byte array
	    stringToBytes: function(str) {
	      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
	    },

	    // Convert a byte array to a string
	    bytesToString: function(bytes) {
	      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
	    }
	  },

	  // Binary encoding
	  bin: {
	    // Convert a string to a byte array
	    stringToBytes: function(str) {
	      for (var bytes = [], i = 0; i < str.length; i++)
	        bytes.push(str.charCodeAt(i) & 0xFF);
	      return bytes;
	    },

	    // Convert a byte array to a string
	    bytesToString: function(bytes) {
	      for (var str = [], i = 0; i < bytes.length; i++)
	        str.push(String.fromCharCode(bytes[i]));
	      return str.join('');
	    }
	  }
	};

	module.exports = charenc;


/***/ }),
/* 350 */
/***/ (function(module, exports) {

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	module.exports = function (obj) {
	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
	}

	function isBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
	}


/***/ }),
/* 351 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWLoginController = (function () {
	    //@ngInject
	    function SWLoginController($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiScope) {
	        var _this = this;
	        this.$route = $route;
	        this.$log = $log;
	        this.$window = $window;
	        this.corePartialsPath = corePartialsPath;
	        this.$hibachi = $hibachi;
	        this.dialogService = dialogService;
	        this.hibachiScope = hibachiScope;
	        this.login = function () {
	            var loginPromise = _this.$hibachi.login(_this.account_login.data.emailAddress, _this.account_login.data.password);
	            loginPromise.then(function (loginResponse) {
	                if (loginResponse && loginResponse.data && loginResponse.data.token) {
	                    _this.$window.localStorage.setItem('token', loginResponse.data.token);
	                    _this.hibachiScope.loginDisplayed = false;
	                    _this.$route.reload();
	                    _this.dialogService.removeCurrentDialog();
	                }
	            }, function (rejection) {
	            });
	        };
	        this.$hibachi = $hibachi;
	        this.$window = $window;
	        this.$route = $route;
	        this.hibachiScope = hibachiScope;
	        this.account_login = $hibachi.newEntity('Account_Login');
	    }
	    return SWLoginController;
	}());
	var SWLogin = (function () {
	    //@ngInject
	    function SWLogin($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder) {
	        this.$route = $route;
	        this.$log = $log;
	        this.$window = $window;
	        this.corePartialsPath = corePartialsPath;
	        this.$hibachi = $hibachi;
	        this.dialogService = dialogService;
	        this.restrict = 'E';
	        this.scope = {};
	        this.bindToController = {};
	        this.controller = SWLoginController;
	        this.controllerAs = "SwLogin";
	        this.link = function (scope, element, attrs) {
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.corePartialsPath + '/login.html');
	    }
	    SWLogin.Factory = function () {
	        var directive = function ($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder) { return new SWLogin($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder); };
	        directive.$inject = [
	            '$route',
	            '$log',
	            '$window',
	            'corePartialsPath',
	            '$hibachi',
	            'dialogService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWLogin;
	}());
	exports.SWLogin = SWLogin;


/***/ }),
/* 352 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWModalLauncherController = (function () {
	    // @ngInject
	    function SWModalLauncherController() {
	        var _this = this;
	        this.hasSaveAction = false;
	        this.hasCancelAction = false;
	        this.hasDeleteAction = false;
	        this.launchModal = function () {
	            //activate the necessary modal
	            _this.showModal = true;
	        };
	        this.saveCallback = function () {
	            //the passed save action must return a promise
	            if (_this.hasSaveAction) {
	                var savePromise = _this.saveAction()();
	            }
	            savePromise.then(function (response) {
	                //if the action was sucessful
	                $("#" + _this.modalName).modal('hide');
	            }, function (reason) {
	                //if the action failed
	            });
	        };
	        this.deleteCallback = function () {
	            //the passed save action must return a promise
	            if (_this.hasDeleteAction) {
	                var deletePromise = _this.saveAction()();
	            }
	            deletePromise.then(function (response) {
	                //if the action was sucessful
	                $("#" + _this.modalName).modal('hide');
	            }, function (reason) {
	                //if the action failed
	            });
	        };
	        this.cancelCallback = function () {
	            if (_this.hasCancelAction) {
	                _this.cancelAction()();
	            }
	        };
	        if (angular.isUndefined(this.showModal)) {
	            this.showModal = false;
	        }
	    }
	    return SWModalLauncherController;
	}());
	exports.SWModalLauncherController = SWModalLauncherController;
	var SWModalLauncher = (function () {
	    // @ngInject
	    function SWModalLauncher($compile, corePartialsPath, hibachiPathBuilder) {
	        this.$compile = $compile;
	        this.corePartialsPath = corePartialsPath;
	        this.transclude = {
	            button: '?swModalButton',
	            staticButton: '?swModalStaticButton',
	            content: '?swModalContent'
	        };
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            showModal: "=?",
	            modalName: "@",
	            title: "@",
	            saveAction: "&?",
	            deleteAction: "&?",
	            cancelAction: "&?"
	        };
	        this.controller = SWModalLauncherController;
	        this.controllerAs = "swModalLauncher";
	        this.compile = function (element, attrs, transclude) {
	            return {
	                pre: function ($scope, element, attrs) {
	                    if (angular.isDefined(attrs.saveAction)) {
	                        $scope.swModalLauncher.hasSaveAction = true;
	                    }
	                    if (angular.isDefined(attrs.deleteAction)) {
	                        $scope.swModalLauncher.hasDeleteAction = true;
	                    }
	                    if (angular.isDefined(attrs.cancelAction)) {
	                        $scope.swModalLauncher.hasCancelAction = true;
	                    }
	                },
	                post: function ($scope, element, attrs) {
	                }
	            };
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "modallauncher.html";
	    }
	    SWModalLauncher.Factory = function () {
	        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWModalLauncher($compile, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["$compile", "corePartialsPath",
	            'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWModalLauncher;
	}());
	exports.SWModalLauncher = SWModalLauncher;


/***/ }),
/* 353 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWModalWindowController = (function () {
	    // @ngInject
	    function SWModalWindowController() {
	        if (angular.isUndefined(this.modalName)) {
	            console.warn("You did not pass a modal title to SWModalWindowController");
	            this.modalName = "";
	        }
	    }
	    return SWModalWindowController;
	}());
	exports.SWModalWindowController = SWModalWindowController;
	var SWModalWindow = (function () {
	    // @ngInject
	    function SWModalWindow($compile, corePartialsPath, hibachiPathBuilder) {
	        this.$compile = $compile;
	        this.corePartialsPath = corePartialsPath;
	        this.transclude = {
	            modalBody: "?swModalBody"
	        };
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            modalName: "@",
	            title: "@",
	            hasSaveAction: "=?",
	            saveAction: "&?",
	            hasDeleteAction: "=?",
	            deleteAction: "&?",
	            hasCancelAction: "=?",
	            cancelAction: "&?"
	        };
	        this.controller = SWModalWindowController;
	        this.controllerAs = "swModalWindow";
	        this.compile = function (element, attrs, transclude) {
	            return {
	                pre: function ($scope, element, attrs) {
	                },
	                post: function ($scope, element, attrs) {
	                }
	            };
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "modalwindow.html";
	    }
	    SWModalWindow.Factory = function () {
	        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWModalWindow($compile, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["$compile", "corePartialsPath",
	            'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWModalWindow;
	}());
	exports.SWModalWindow = SWModalWindow;


/***/ }),
/* 354 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWNumbersOnly = (function () {
	    function SWNumbersOnly() {
	        this.restrict = "A";
	        this.require = "ngModel";
	        this.scope = {
	            ngModel: '=',
	            minNumber: '=?',
	            maxNumber: '=?'
	        };
	        this.link = function ($scope, element, attrs, modelCtrl) {
	            modelCtrl.$parsers.unshift(function (inputValue) {
	                var modelValue = modelCtrl.$modelValue;
	                if (inputValue != "" && !isNaN(Number(inputValue))) {
	                    if (angular.isDefined($scope.minNumber)) {
	                        if (Number(inputValue) >= $scope.minNumber || !angular.isDefined($scope.minNumber)) {
	                            modelCtrl.$setValidity("minNumber", true);
	                        }
	                        else if (angular.isDefined($scope.minNumber)) {
	                            modelCtrl.$setValidity("minNumber", false);
	                        }
	                    }
	                    if (angular.isDefined($scope.maxNumber)) {
	                        if (Number(inputValue) <= $scope.maxNumber || !angular.isDefined($scope.maxNumber)) {
	                            modelCtrl.$setValidity("maxNumber", true);
	                        }
	                        else if (angular.isDefined($scope.maxNumber)) {
	                            modelCtrl.$setValidity("maxNumber", false);
	                        }
	                    }
	                    if (modelCtrl.$valid) {
	                        modelValue = Number(inputValue);
	                    }
	                    else {
	                        modelValue = $scope.minNumber;
	                    }
	                }
	                return modelValue;
	            });
	        };
	    }
	    SWNumbersOnly.Factory = function () {
	        var directive = function () { return new SWNumbersOnly(); };
	        directive.$inject = [];
	        return directive;
	    };
	    return SWNumbersOnly;
	}());
	exports.SWNumbersOnly = SWNumbersOnly;


/***/ }),
/* 355 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWLoading = (function () {
	    function SWLoading($log, corePartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'A',
	            transclude: true,
	            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'loading.html',
	            scope: {
	                swLoading: '='
	            },
	            link: function (scope, attrs, element) {
	            }
	        };
	    }
	    SWLoading.Factory = function () {
	        var directive = function ($log, corePartialsPath, hibachiPathBuilder) { return new SWLoading($log, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            'corePartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWLoading;
	}());
	exports.SWLoading = SWLoading;


/***/ }),
/* 356 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWScrollTrigger = (function () {
	    function SWScrollTrigger($rootScope, $window, $timeout) {
	        return {
	            link: function (scope, elem, attrs) {
	                var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
	                $window = angular.element($window);
	                scrollDistance = 0;
	                if (attrs.infiniteScrollDistance != null) {
	                    scope
	                        .$watch(attrs.infiniteScrollDistance, function (value) {
	                        return scrollDistance = parseInt(value, 10);
	                    });
	                }
	                scrollEnabled = true;
	                checkWhenEnabled = false;
	                if (attrs.infiniteScrollDisabled != null) {
	                    scope
	                        .$watch(attrs.infiniteScrollDisabled, function (value) {
	                        scrollEnabled = !value;
	                        if (scrollEnabled
	                            && checkWhenEnabled) {
	                            checkWhenEnabled = false;
	                            return handler();
	                        }
	                    });
	                }
	                handler = function () {
	                    var elementBottom, remaining, shouldScroll, windowBottom;
	                    windowBottom = $window.height()
	                        + $window.scrollTop();
	                    elementBottom = elem.offset().top
	                        + elem.height();
	                    remaining = elementBottom
	                        - windowBottom;
	                    shouldScroll = remaining <= $window
	                        .height()
	                        * scrollDistance;
	                    if (shouldScroll && scrollEnabled) {
	                        if ($rootScope.$$phase) {
	                            return scope
	                                .$eval(attrs.infiniteScroll);
	                        }
	                        else {
	                            return scope
	                                .$apply(attrs.infiniteScroll);
	                        }
	                    }
	                    else if (shouldScroll) {
	                        return checkWhenEnabled = true;
	                    }
	                };
	                $window.on('scroll', handler);
	                scope.$on('$destroy', function () {
	                    return $window.off('scroll', handler);
	                });
	                return $timeout((function () {
	                    if (attrs.infiniteScrollImmediateCheck) {
	                        if (scope
	                            .$eval(attrs.infiniteScrollImmediateCheck)) {
	                            return handler();
	                        }
	                    }
	                    else {
	                        return handler();
	                    }
	                }), 0);
	            }
	        };
	    }
	    SWScrollTrigger.Factory = function () {
	        var directive = function ($rootScope, $window, $timeout) { return new SWScrollTrigger($rootScope, $window, $timeout); };
	        directive.$inject = [
	            '$rootScope',
	            '$window',
	            '$timeout'
	        ];
	        return directive;
	    };
	    return SWScrollTrigger;
	}());
	exports.SWScrollTrigger = SWScrollTrigger;


/***/ }),
/* 357 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWTabGroupController = (function () {
	    // @ngInject
	    function SWTabGroupController(utilityService, rbkeyService, observerService) {
	        var _this = this;
	        this.utilityService = utilityService;
	        this.rbkeyService = rbkeyService;
	        this.observerService = observerService;
	        this.hasActiveTab = false;
	        this.initTab = function () {
	            for (var i = 0; i < _this.tabs.length; i++) {
	                if (!_this.tabs[i].hide) {
	                    _this.tabs[i].active = true;
	                    _this.tabs[i].loaded = true;
	                    break;
	                }
	            }
	        };
	        this.switchTab = function (tabToActivate) {
	            _this.observerService.notify(_this.switchTabGroupEventName);
	            for (var i = 0; i < _this.tabs.length; i++) {
	                _this.tabs[i].active = false;
	            }
	            tabToActivate.active = true;
	            tabToActivate.loaded = true;
	        };
	        this.getTabByName = function (name) {
	            for (var i = 0; i < _this.tabs.length; i++) {
	                if (_this.tabs[i].name == name) {
	                    return _this.tabs[i];
	                }
	            }
	        };
	        if (angular.isUndefined(this.tabs)) {
	            this.tabs = [];
	        }
	        this.tabGroupID = "TG" + this.utilityService.createID(30);
	        this.switchTabGroupEventName = "SwitchTabGroup" + this.tabGroupID;
	        this.initTabEventName = "InitTabForTabGroup" + this.tabGroupID;
	        this.observerService.attach(this.initTab, this.initTabEventName);
	        if (angular.isUndefined(this.switchTabEventName)) {
	            this.switchTabEventName = this.tabGroupID + "SwitchTabTo";
	        }
	        this.observerService.attach(this.switchTab, this.switchTabEventName);
	    }
	    return SWTabGroupController;
	}());
	exports.SWTabGroupController = SWTabGroupController;
	var SWTabGroup = (function () {
	    // @ngInject
	    function SWTabGroup($compile, corePartialsPath, hibachiPathBuilder) {
	        this.$compile = $compile;
	        this.corePartialsPath = corePartialsPath;
	        this.transclude = true;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            switchTabEventName: "@?"
	        };
	        this.controller = SWTabGroupController;
	        this.controllerAs = "swTabGroup";
	        this.compile = function (element, attrs, transclude) {
	            return {
	                pre: function ($scope, element, attrs) { },
	                post: function ($scope, element, attrs) { }
	            };
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tabgroup.html";
	    }
	    SWTabGroup.Factory = function () {
	        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWTabGroup($compile, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["$compile", "corePartialsPath",
	            'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWTabGroup;
	}());
	exports.SWTabGroup = SWTabGroup;


/***/ }),
/* 358 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWTabContentController = (function () {
	    // @ngInject
	    function SWTabContentController($scope, $q, $transclude, $hibachi, $timeout, utilityService, rbkeyService, collectionConfigService) {
	        this.$scope = $scope;
	        this.$q = $q;
	        this.$transclude = $transclude;
	        this.$hibachi = $hibachi;
	        this.$timeout = $timeout;
	        this.utilityService = utilityService;
	        this.rbkeyService = rbkeyService;
	        this.collectionConfigService = collectionConfigService;
	        if (angular.isUndefined(this.active)) {
	            this.active = false;
	        }
	        if (angular.isUndefined(this.loaded)) {
	            this.loaded = false;
	        }
	        if (angular.isUndefined(this.hide)) {
	            this.hide = false;
	        }
	        if (angular.isUndefined(this.id)) {
	            this.id = utilityService.createID(16);
	        }
	        if (angular.isUndefined(this.name)) {
	            this.name = this.id;
	        }
	        //make a tab service? 
	    }
	    return SWTabContentController;
	}());
	exports.SWTabContentController = SWTabContentController;
	var SWTabContent = (function () {
	    // @ngInject
	    function SWTabContent($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder) {
	        var _this = this;
	        this.$compile = $compile;
	        this.scopeService = scopeService;
	        this.observerService = observerService;
	        this.corePartialsPath = corePartialsPath;
	        this.transclude = true;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            active: "=?",
	            loaded: "=?",
	            hide: "=?",
	            name: "@?"
	        };
	        this.controller = SWTabContentController;
	        this.controllerAs = "swTabContent";
	        this.compile = function (element, attrs, transclude) {
	            return {
	                pre: function ($scope, element, attrs) {
	                },
	                post: function ($scope, element, attrs) {
	                    var parentDirective = _this.scopeService.getRootParentScope($scope, "swTabGroup")["swTabGroup"];
	                    if (angular.isDefined(parentDirective) && angular.isDefined(parentDirective.tabs)) {
	                        parentDirective.tabs.push($scope.swTabContent);
	                        _this.observerService.notify(parentDirective.initTabEventName);
	                    }
	                }
	            };
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tabcontent.html";
	    }
	    SWTabContent.Factory = function () {
	        var directive = function ($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder) { return new SWTabContent($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["$compile",
	            "scopeService",
	            "observerService",
	            "corePartialsPath",
	            "hibachiPathBuilder"];
	        return directive;
	    };
	    return SWTabContent;
	}());
	exports.SWTabContent = SWTabContent;


/***/ }),
/* 359 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWTooltipController = (function () {
	    // @ngInject
	    function SWTooltipController(rbkeyService) {
	        var _this = this;
	        this.rbkeyService = rbkeyService;
	        this.showTooltip = false;
	        this.show = function () {
	            _this.showTooltip = true;
	        };
	        this.hide = function () {
	            _this.showTooltip = false;
	        };
	        if (angular.isDefined(this.rbKey)) {
	            this.text = rbkeyService.getRBKey(this.rbKey);
	        }
	        if (angular.isUndefined(this.position)) {
	            this.position = "top";
	        }
	    }
	    return SWTooltipController;
	}());
	exports.SWTooltipController = SWTooltipController;
	var SWTooltip = (function () {
	    // @ngInject
	    function SWTooltip($document, corePartialsPath, hibachiPathBuilder) {
	        this.$document = $document;
	        this.corePartialsPath = corePartialsPath;
	        this.transclude = true;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            rbKey: "@?",
	            text: "@?",
	            position: "@?",
	            showTooltip: "=?"
	        };
	        this.controller = SWTooltipController;
	        this.controllerAs = "swTooltip";
	        this.link = function (scope, element, attrs, controller, transclude) {
	            var tooltip = element.find(".tooltip");
	            var elementPosition = element.position();
	            var tooltipStyle = tooltip[0].style;
	            if (attrs && attrs.position) {
	                switch (attrs.position.toLowerCase()) {
	                    case 'top':
	                        tooltipStyle.top = "0px";
	                        tooltipStyle.left = "0px";
	                        break;
	                    case 'bottom':
	                        //where the element is rendered to begin with
	                        break;
	                    case 'left':
	                        tooltipStyle.top = (elementPosition.top + element[0].offsetHeight - 5) + "px";
	                        tooltipStyle.left = (-1 * (elementPosition.left + element[0].offsetLeft - 5)) + "px";
	                        element.find(".tooltip-inner")[0].style.maxWidth = "none";
	                        break;
	                    default:
	                        //right is the default
	                        tooltipStyle.top = (elementPosition.top + element[0].offsetHeight - 5) + "px";
	                        tooltipStyle.left = (elementPosition.left + element[0].offsetWidth - 5) + "px";
	                }
	            }
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tooltip.html";
	    }
	    SWTooltip.Factory = function () {
	        var directive = function ($document, corePartialsPath, hibachiPathBuilder) { return new SWTooltip($document, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["$document", "corePartialsPath", "hibachiPathBuilder"];
	        return directive;
	    };
	    return SWTooltip;
	}());
	exports.SWTooltip = SWTooltip;


/***/ }),
/* 360 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWRbKey = (function () {
	    function SWRbKey($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService) {
	        return {
	            restrict: 'A',
	            scope: {
	                swRbkey: "="
	            },
	            link: function (scope, element, attrs) {
	                var rbKeyValue = scope.swRbkey;
	                var bindRBKey = function () {
	                    if (angular.isDefined(rbKeyValue) && angular.isString(rbKeyValue)) {
	                        element.text(rbkeyService.getRBKey(rbKeyValue));
	                    }
	                };
	                bindRBKey();
	            }
	        };
	    }
	    SWRbKey.Factory = function () {
	        var directive = function ($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService) { return new SWRbKey($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService); };
	        directive.$inject = [
	            '$hibachi',
	            'observerService',
	            'utilityService',
	            '$rootScope',
	            '$log',
	            'rbkeyService'
	        ];
	        return directive;
	    };
	    return SWRbKey;
	}());
	exports.SWRbKey = SWRbKey;


/***/ }),
/* 361 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWOptions = (function () {
	    function SWOptions($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'AE',
	            scope: {
	                objectName: '@'
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "options.html",
	            link: function (scope, element, attrs) {
	                scope.swOptions = {};
	                scope.swOptions.objectName = scope.objectName;
	                //sets up drop down options via collections
	                scope.getOptions = function () {
	                    scope.swOptions.object = $hibachi['new' + scope.swOptions.objectName]();
	                    var columnsConfig = [
	                        {
	                            "propertyIdentifier": scope.swOptions.objectName.charAt(0).toLowerCase() + scope.swOptions.objectName.slice(1) + 'Name'
	                        },
	                        {
	                            "propertyIdentifier": scope.swOptions.object.$$getIDName()
	                        }
	                    ];
	                    $hibachi.getEntity(scope.swOptions.objectName, { allRecords: true, columnsConfig: angular.toJson(columnsConfig) })
	                        .then(function (value) {
	                        scope.swOptions.options = value.records;
	                        observerService.notify('optionsLoaded');
	                    });
	                };
	                scope.getOptions();
	                var selectOption = function (option) {
	                    if (option) {
	                        scope.swOptions.selectOption(option);
	                    }
	                    else {
	                        scope.swOptions.selectOption(scope.swOptions.options[0]);
	                    }
	                };
	                observerService.attach(selectOption, 'selectOption', 'selectOption');
	                //use by ng-change to record changes
	                scope.swOptions.selectOption = function (selectedOption) {
	                    scope.swOptions.selectedOption = selectedOption;
	                    observerService.notify('optionsChanged', selectedOption);
	                };
	            }
	        };
	    }
	    SWOptions.Factory = function () {
	        var directive = function ($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder) { return new SWOptions($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            'observerService',
	            'corePartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWOptions;
	}());
	exports.SWOptions = SWOptions;


/***/ }),
/* 362 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWSelectionController = (function () {
	    //@ngInject
	    function SWSelectionController(selectionService, observerService) {
	        var _this = this;
	        this.selectionService = selectionService;
	        this.observerService = observerService;
	        this.updateSelectValue = function (res) {
	            if (_this.isRadio && (res.action == 'check')) {
	                _this.toggleValue == _this.selection;
	            }
	            else if (res.action == 'clear') {
	                _this.toggleValue = false;
	            }
	            else if (res.action == 'selectAll') {
	                _this.toggleValue = true;
	            }
	            else if (res.selection == _this.selection) {
	                _this.toggleValue = (res.action == 'check');
	            }
	        };
	        this.toggleSelection = function (toggleValue, selectionid, selection) {
	            if (_this.isRadio) {
	                _this.selectionService.radioSelection(selectionid, selection);
	                _this.toggleValue = toggleValue;
	            }
	            else {
	                if (toggleValue) {
	                    _this.selectionService.addSelection(selectionid, selection);
	                }
	                else {
	                    _this.selectionService.removeSelection(selectionid, selection);
	                }
	            }
	        };
	        if (angular.isUndefined(this.name)) {
	            this.name = 'selection';
	        }
	        if (selectionService.isAllSelected(this.selectionid)) {
	            this.toggleValue = !selectionService.hasSelection(this.selectionid, this.selection);
	        }
	        else {
	            this.toggleValue = selectionService.hasSelection(this.selectionid, this.selection);
	        }
	        //attach observer so we know when a selection occurs
	        observerService.attach(this.updateSelectValue, 'swSelectionToggleSelection' + this.selectionid);
	        if (angular.isDefined(this.initSelected) && this.initSelected) {
	            this.toggleValue = this.selection;
	            this.toggleSelection(this.toggleValue, this.selectionid, this.selection);
	        }
	    }
	    return SWSelectionController;
	}());
	var SWSelection = (function () {
	    function SWSelection(collectionPartialsPath, hibachiPathBuilder) {
	        this.collectionPartialsPath = collectionPartialsPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.restrict = 'E';
	        this.scope = {};
	        this.bindToController = {
	            selection: "=",
	            selectionid: "@",
	            id: "=",
	            isRadio: "=",
	            name: "@",
	            disabled: "=",
	            initSelected: "="
	        };
	        this.controller = SWSelectionController;
	        this.controllerAs = 'swSelection';
	        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "selection.html";
	    }
	    SWSelection.Factory = function () {
	        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWSelection(corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWSelection;
	}());
	SWSelection.$inject = ['corePartialsPath', 'hibachiPathBuilder'];
	exports.SWSelection = SWSelection;


/***/ }),
/* 363 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWClickOutside = (function () {
	    //@ngInject
	    function SWClickOutside($document, $timeout, utilityService) {
	        var _this = this;
	        this.$document = $document;
	        this.$timeout = $timeout;
	        this.utilityService = utilityService;
	        this.restrict = 'A';
	        this.scope = {
	            swClickOutside: '&'
	        };
	        this.link = function (scope, elem, attr) {
	            _this.$document.on('click', function (e) {
	                if (!e || !e.target)
	                    return;
	                //check if our element already hidden
	                if (angular.element(elem).hasClass("ng-hide")) {
	                    return;
	                }
	                if (e.target !== elem && elem && elem[0] && !_this.utilityService.isDescendantElement(elem[0], e.target)) {
	                    _this.$timeout(function () {
	                        scope.swClickOutside();
	                    });
	                }
	            });
	        };
	        this.$document = $document;
	        this.$timeout = $timeout;
	        this.utilityService = utilityService;
	    }
	    SWClickOutside.Factory = function () {
	        var directive = function ($document, $timeout, utilityService) { return new SWClickOutside($document, $timeout, utilityService); };
	        directive.$inject = [
	            '$document', '$timeout', 'utilityService'
	        ];
	        return directive;
	    };
	    return SWClickOutside;
	}());
	exports.SWClickOutside = SWClickOutside;


/***/ }),
/* 364 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWDirective = (function () {
	    //@ngInject
	    function SWDirective($compile, utilityService) {
	        return {
	            restrict: 'AE',
	            //replace:true,
	            scope: {
	                variables: "=",
	                directiveTemplate: "="
	            },
	            controllerAs: "swDirective",
	            link: function (scope, element, attrs) {
	                var tempVariables = {};
	                angular.forEach(scope.variables, function (value, key) {
	                    if (key.toString().charAt(0) != "$" && value !== " ") {
	                        tempVariables[utilityService.keyToAttributeString(key)] = value;
	                    }
	                });
	                scope.variables = tempVariables;
	                var template = '<' + scope.directiveTemplate + ' ';
	                if (angular.isDefined(scope.variables)) {
	                    angular.forEach(scope.variables, function (value, key) {
	                        if (!angular.isString(value) && !angular.isNumber(value)) {
	                            template += ' ' + key + '="swDirective.' + 'variables.' + key + '" ';
	                        }
	                        else {
	                            template += ' ' + key + '="' + value + '" ';
	                        }
	                    });
	                }
	                template += '>';
	                template += '</' + scope.directiveTemplate + '>';
	                // Render the template.
	                element.html($compile(template)(scope));
	            }
	        };
	    }
	    SWDirective.Factory = function () {
	        var directive = function ($compile, utilityService) { return new SWDirective($compile, utilityService); };
	        directive.$inject = [
	            '$compile',
	            'utilityService'
	        ];
	        return directive;
	    };
	    return SWDirective;
	}());
	exports.SWDirective = SWDirective;


/***/ }),
/* 365 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWExportAction = (function () {
	    //@ngInject
	    function SWExportAction($log, corePartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'A',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'exportaction.html',
	            scope: {},
	            link: function (scope, element, attrs) {
	            }
	        };
	    }
	    SWExportAction.Factory = function () {
	        var directive = function ($log, corePartialsPath, hibachiPathBuilder) { return new SWExportAction($log, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            'corePartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWExportAction;
	}());
	exports.SWExportAction = SWExportAction;


/***/ }),
/* 366 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWHref = (function () {
	    function SWHref() {
	        return {
	            restrict: 'A',
	            scope: {
	                swHref: "@"
	            },
	            link: function (scope, element, attrs) {
	                /*convert link to use hashbang*/
	                var hrefValue = attrs.swHref;
	                hrefValue = '?ng#!' + hrefValue;
	                element.attr('href', hrefValue);
	            }
	        };
	    }
	    SWHref.Factory = function () {
	        var directive = function () { return new SWHref(); };
	        directive.$inject = [];
	        return directive;
	    };
	    return SWHref;
	}());
	exports.SWHref = SWHref;


/***/ }),
/* 367 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWProcessCallerController = (function () {
	    //@ngInject
	    function SWProcessCallerController(rbkeyService, $templateRequest, $compile, corePartialsPath, $scope, $element, $transclude, utilityService, hibachiPathBuilder) {
	        var _this = this;
	        this.rbkeyService = rbkeyService;
	        this.$templateRequest = $templateRequest;
	        this.$compile = $compile;
	        this.corePartialsPath = corePartialsPath;
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$transclude = $transclude;
	        this.$templateRequest = $templateRequest;
	        this.$compile = $compile;
	        this.corePartialsPath = corePartialsPath;
	        this.utilityService = utilityService;
	        this.type = this.type || 'link';
	        this.queryString = this.queryString || '';
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$transclude = this.$transclude;
	        this.$templateRequest(hibachiPathBuilder.buildPartialsPath(this.corePartialsPath) + "processcaller.html").then(function (html) {
	            var template = angular.element(html);
	            _this.$element.parent().append(template);
	            $compile(template)(_this.$scope);
	        });
	        if (angular.isDefined(this.titleRbKey)) {
	            this.title = this.rbkeyService.getRBKey(this.titleRbKey);
	        }
	        if (angular.isUndefined(this.text)) {
	            this.text = this.title;
	        }
	    }
	    return SWProcessCallerController;
	}());
	var SWProcessCaller = (function () {
	    function SWProcessCaller(corePartialsPath, utilityService) {
	        this.corePartialsPath = corePartialsPath;
	        this.utilityService = utilityService;
	        this.restrict = 'E';
	        this.scope = {};
	        this.bindToController = {
	            action: "@",
	            entity: "@",
	            processContext: "@",
	            hideDisabled: "=",
	            type: "@",
	            queryString: "@",
	            text: "@",
	            title: "@?",
	            titleRbKey: "@?",
	            'class': "@",
	            icon: "=",
	            iconOnly: "=",
	            submit: "=",
	            confirm: "=",
	            disabled: "=",
	            disabledText: "@",
	            modal: "="
	        };
	        this.controller = SWProcessCallerController;
	        this.controllerAs = "swProcessCaller";
	        this.link = function (scope, element, attrs) {
	        };
	        this.corePartialsPath = corePartialsPath;
	        this.utilityService = utilityService;
	    }
	    SWProcessCaller.Factory = function () {
	        var directive = function (corePartialsPath, utilityService) { return new SWProcessCaller(corePartialsPath, utilityService); };
	        directive.$inject = [
	            'corePartialsPath', 'utilityService'
	        ];
	        return directive;
	    };
	    return SWProcessCaller;
	}());
	SWProcessCaller.$inject = ['corePartialsPath', 'utilityService'];
	exports.SWProcessCaller = SWProcessCaller;


/***/ }),
/* 368 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWSortable = (function () {
	    function SWSortable(expression, compiledElement) {
	        return function (linkElement) {
	            var scope = this;
	            linkElement.sortable({
	                placeholder: "placeholder",
	                opacity: 0.8,
	                axis: "y",
	                update: function (event, ui) {
	                    // get model
	                    var model = scope.$apply(expression);
	                    // remember its length
	                    var modelLength = model.length;
	                    // rember html nodes
	                    var items = [];
	                    // loop through items in new order
	                    linkElement.children().each(function (index) {
	                        var item = $(this);
	                        // get old item index
	                        var oldIndex = parseInt(item.attr("sw:sortable-index"), 10);
	                        // add item to the end of model
	                        model.push(model[oldIndex]);
	                        if (item.attr("sw:sortable-index")) {
	                            // items in original order to restore dom
	                            items[oldIndex] = item;
	                            // and remove item from dom
	                            item.detach();
	                        }
	                    });
	                    model.splice(0, modelLength);
	                    // restore original dom order, so angular does not get confused
	                    linkElement.append.apply(linkElement, items);
	                    // notify angular of the change
	                    scope.$digest();
	                }
	            });
	        };
	    }
	    SWSortable.Factory = function () {
	        var directive = function (expression, compiledElement) { return new SWSortable(expression, compiledElement); };
	        directive.$inject = ['expression', 'compiledElement'];
	        return directive;
	    };
	    return SWSortable;
	}());
	exports.SWSortable = SWSortable;


/***/ }),
/* 369 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWOrderByControlsController = (function () {
	    // @ngInject
	    function SWOrderByControlsController(listingService, observerService, utilityService) {
	        var _this = this;
	        this.listingService = listingService;
	        this.observerService = observerService;
	        this.utilityService = utilityService;
	        this.sortCode = "ASC";
	        this.updateSortOrderProperty = function () {
	            if (angular.isDefined(_this.selectedPropertyIdentifier)) {
	                _this.propertyNotChosen = false;
	            }
	            else {
	                _this.propertyNotChosen = true;
	            }
	            _this.updateOrderBy();
	        };
	        this.updateOrderBy = function () {
	            if (angular.isDefined(_this.selectedPropertyIdentifier) && _this.selectedPropertyIdentifier.length > 0) {
	                var propertyIdentifier = _this.selectedPropertyIdentifier;
	            }
	            switch (_this.sortCode) {
	                case "ASC":
	                    _this.disabled = false;
	                    if (propertyIdentifier != null) {
	                        if (angular.isDefined(_this.collectionConfig)) {
	                            _this.collectionConfig.toggleOrderBy(propertyIdentifier, true); //single column mode true
	                        }
	                        if (_this.inListingDisplay) {
	                            _this.listingService.setSingleColumnOrderBy(_this.listingId, propertyIdentifier, "ASC");
	                        }
	                    }
	                    if (_this.inListingDisplay)
	                        _this.listingService.setManualSort(_this.listingId, false);
	                    break;
	                case "DESC":
	                    _this.disabled = false;
	                    if (propertyIdentifier != null) {
	                        if (angular.isDefined(_this.collectionConfig)) {
	                            _this.collectionConfig.toggleOrderBy(propertyIdentifier, true); //single column mode true
	                        }
	                        if (_this.inListingDisplay) {
	                            _this.listingService.setSingleColumnOrderBy(_this.listingId, propertyIdentifier, "DESC");
	                        }
	                        if (_this.inListingDisplay)
	                            _this.listingService.setManualSort(_this.listingId, false);
	                    }
	                    break;
	                case "MANUAL":
	                    //flip listing
	                    _this.disabled = true;
	                    if (_this.inListingDisplay) {
	                        _this.listingService.setManualSort(_this.listingId, true);
	                    }
	                    break;
	            }
	        };
	        this.sortAscending = function () {
	            _this.sortCode = 'ASC';
	            _this.updateOrderBy();
	        };
	        this.sortDescending = function () {
	            _this.sortCode = 'DESC';
	            _this.updateOrderBy();
	        };
	        this.manualSort = function () {
	            _this.sortCode = 'MANUAL';
	            _this.updateOrderBy();
	        };
	        if (angular.isUndefined(this.edit)) {
	            this.edit = true;
	        }
	        if (angular.isDefined(this.collectionConfig)) {
	            this.columns = this.collectionConfig.columns;
	        }
	        if (angular.isDefined(this.initialSortDefaultDirection) && this.initialSortDefaultDirection.length > 0) {
	            this.sortCode = this.initialSortDefaultDirection;
	        }
	        if (angular.isDefined(this.initialSortProperty) && this.initialSortProperty.length > 0) {
	            this.selectedPropertyIdentifier = this.initialSortProperty;
	        }
	        this.id = this.utilityService.createID(32);
	    }
	    return SWOrderByControlsController;
	}());
	exports.SWOrderByControlsController = SWOrderByControlsController;
	var SWOrderByControls = (function () {
	    // @ngInject
	    function SWOrderByControls($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder) {
	        var _this = this;
	        this.$compile = $compile;
	        this.scopeService = scopeService;
	        this.listingService = listingService;
	        this.corePartialsPath = corePartialsPath;
	        this.transclude = true;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            collectionConfig: "=?",
	            selectedOrderByColumn: "=?",
	            inListingDisplay: "=?",
	            toggleCollectionConfig: "=?",
	            initialSortProperty: "@?",
	            initialSortDefaultDirection: "@?",
	            sortPropertyFieldName: "@?",
	            sortDefaultDirectionFieldName: "@?",
	            edit: "=?"
	        };
	        this.controller = SWOrderByControlsController;
	        this.controllerAs = "swOrderByControls";
	        this.compile = function (element, attrs, transclude) {
	            return {
	                pre: function ($scope, element, attrs) {
	                    if ($scope.swOrderByControls.inListingDisplay &&
	                        _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
	                        var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
	                        $scope.swOrderByControls.listingId = listingDisplayScope.tableID;
	                        _this.listingService.attachToListingInitiated($scope.swOrderByControls.listingId, $scope.swOrderByControls.updateOrderBy);
	                        if ($scope.swOrderByControls.collectionConfig == null &&
	                            listingDisplayScope.collectionConfig != null) {
	                            $scope.swOrderByControls.collectionConfig = listingDisplayScope.collectionConfig;
	                        }
	                    }
	                },
	                post: function ($scope, element, attrs) {
	                }
	            };
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "orderbycontrols.html";
	    }
	    SWOrderByControls.Factory = function () {
	        var directive = function ($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder) { return new SWOrderByControls($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["$compile", "scopeService", "listingService", "corePartialsPath",
	            "hibachiPathBuilder"];
	        return directive;
	    };
	    return SWOrderByControls;
	}());
	exports.SWOrderByControls = SWOrderByControls;


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//controllers
	var alertcontroller_1 = __webpack_require__(371);
	//services
	var alertservice_1 = __webpack_require__(372);
	var alertmodule = angular.module('hibachi.alert', [])
	    .controller('alertController', alertcontroller_1.AlertController)
	    .service('alertService', alertservice_1.AlertService);
	exports.alertmodule = alertmodule;


/***/ }),
/* 371 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var AlertController = (function () {
	    //@ngInject
	    function AlertController($scope, alertService) {
	        $scope.$id = "alertController";
	        $scope.alerts = alertService.getAlerts();
	    }
	    return AlertController;
	}());
	exports.AlertController = AlertController;


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	//import Alert = require('../model/alert');
	var alert_1 = __webpack_require__(373);
	var AlertService = (function () {
	    function AlertService($timeout, alerts) {
	        var _this = this;
	        this.$timeout = $timeout;
	        this.alerts = alerts;
	        this.newAlert = function () {
	            return new alert_1.Alert();
	        };
	        this.get = function () {
	            return _this.alerts || [];
	        };
	        this.addAlert = function (alert) {
	            _this.alerts.push(alert);
	            _this.$timeout(function () {
	                _this.removeAlert(alert);
	            }, 3500);
	        };
	        this.addAlerts = function (alerts) {
	            angular.forEach(alerts, function (alert) {
	                _this.addAlert(alert);
	            });
	        };
	        this.removeAlert = function (alert) {
	            var index = _this.alerts.indexOf(alert, 0);
	            if (index != undefined) {
	                _this.alerts.splice(index, 1);
	            }
	        };
	        this.getAlerts = function () {
	            return _this.alerts;
	        };
	        this.formatMessagesToAlerts = function (messages) {
	            var alerts = [];
	            if (messages && messages.length) {
	                for (var message in messages) {
	                    var alert = new alert_1.Alert(messages[message].message, messages[message].messageType);
	                    alerts.push(alert);
	                    if (alert.type === 'success' || alert.type === 'error') {
	                        _this.$timeout(function () {
	                            alert.fade = true;
	                        }, 3500);
	                        alert.dismissable = false;
	                    }
	                    else {
	                        alert.fade = false;
	                        alert.dismissable = true;
	                    }
	                }
	            }
	            return alerts;
	        };
	        this.removeOldestAlert = function () {
	            _this.alerts.splice(0, 1);
	        };
	        this.alerts = [];
	    }
	    return AlertService;
	}());
	AlertService.$inject = [
	    '$timeout'
	];
	exports.AlertService = AlertService;


/***/ }),
/* 373 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	//model
	var Alert = (function () {
	    function Alert(msg, type, fade, dismissable) {
	        this.fade = false;
	        this.dismissable = false;
	        this.msg = msg;
	        this.type = type;
	        this.fade = fade;
	        this.dismissable = dismissable;
	    }
	    return Alert;
	}());
	exports.Alert = Alert;


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	//services
	var dialogservice_1 = __webpack_require__(375);
	//controllers
	var pagedialog_1 = __webpack_require__(376);
	var dialogmodule = angular.module('hibachi.dialog', []).config(function () {
	})
	    .service('dialogService', dialogservice_1.DialogService)
	    .controller('pageDialog', pagedialog_1.PageDialogController)
	    .constant('dialogPartials', 'dialog/components/');
	exports.dialogmodule = dialogmodule;


/***/ }),
/* 375 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var DialogService = (function () {
	    function DialogService(hibachiPathBuilder) {
	        var _this = this;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.get = function () {
	            return _this._pageDialogs || [];
	        };
	        this.addPageDialog = function (name, params) {
	            var newDialog = {
	                'path': name + '.html',
	                'params': params
	            };
	            _this._pageDialogs.push(newDialog);
	        };
	        this.removePageDialog = function (index) {
	            _this._pageDialogs.splice(index, 1);
	        };
	        this.getPageDialogs = function () {
	            return _this._pageDialogs;
	        };
	        this.removeCurrentDialog = function () {
	            _this._pageDialogs.splice(_this._pageDialogs.length - 1, 1);
	        };
	        this.getCurrentDialog = function () {
	            return _this._pageDialogs[_this._pageDialogs.length - 1];
	        };
	        this._pageDialogs = [];
	        this.hibachiPathBuilder = hibachiPathBuilder;
	    }
	    return DialogService;
	}());
	DialogService.$inject = [
	    'hibachiPathBuilder'
	];
	exports.DialogService = DialogService;


/***/ }),
/* 376 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var PageDialogController = (function () {
	    //@ngInject
	    function PageDialogController($scope, $location, $log, $anchorScroll, $hibachi, dialogService) {
	        $scope.$id = 'pageDialogController';
	        //get url param to retrieve collection listing
	        $scope.pageDialogs = dialogService.getPageDialogs();
	        $scope.scrollToTopOfDialog = function () {
	            $location.hash('/#topOfPageDialog');
	            $anchorScroll();
	        };
	        $scope.pageDialogStyle = { "z-index": 3000 };
	    }
	    return PageDialogController;
	}());
	exports.PageDialogController = PageDialogController;


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(378), __webpack_require__(379), __webpack_require__(413), __webpack_require__(414)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/compiler', '@angular/core', '@angular/common', '@angular/platform-browser'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}),global.ng.compiler,global.ng.core,global.ng.common,global.ng.platformBrowser));
	}(this, (function (exports,_angular_compiler,_angular_core,_angular_common,_angular_platformBrowser) { 'use strict';

	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ResourceLoaderImpl = (function (_super) {
	    __extends(ResourceLoaderImpl, _super);
	    function ResourceLoaderImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ResourceLoaderImpl.prototype.get = function (url) {
	        var resolve;
	        var reject;
	        var promise = new Promise(function (res, rej) {
	            resolve = res;
	            reject = rej;
	        });
	        var xhr = new XMLHttpRequest();
	        xhr.open('GET', url, true);
	        xhr.responseType = 'text';
	        xhr.onload = function () {
	            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	            // response/responseType properties were introduced in ResourceLoader Level2 spec (supported
	            // by IE10)
	            var response = xhr.response || xhr.responseText;
	            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	            var status = xhr.status === 1223 ? 204 : xhr.status;
	            // fix status code when it is 0 (0 status is undocumented).
	            // Occurs when accessing file resources or on Android 4.1 stock browser
	            // while retrieving files from application cache.
	            if (status === 0) {
	                status = response ? 200 : 0;
	            }
	            if (200 <= status && status <= 300) {
	                resolve(response);
	            }
	            else {
	                reject("Failed to load " + url);
	            }
	        };
	        xhr.onerror = function () { reject("Failed to load " + url); };
	        xhr.send();
	        return promise;
	    };
	    return ResourceLoaderImpl;
	}(_angular_compiler.ResourceLoader));
	ResourceLoaderImpl.decorators = [
	    { type: _angular_core.Injectable },
	];
	/** @nocollapse */
	ResourceLoaderImpl.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [
	    _angular_platformBrowser.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS,
	    {
	        provide: _angular_core.COMPILER_OPTIONS,
	        useValue: { providers: [{ provide: _angular_compiler.ResourceLoader, useClass: ResourceLoaderImpl }] },
	        multi: true
	    },
	    { provide: _angular_core.PLATFORM_ID, useValue: _angular_common.ɵPLATFORM_BROWSER_ID },
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
	 * ResourceLoader.
	 *
	 * The template cache needs to be built and loaded into window.$templateCache
	 * via a separate mechanism.
	 */
	var CachedResourceLoader = (function (_super) {
	    __extends(CachedResourceLoader, _super);
	    function CachedResourceLoader() {
	        var _this = _super.call(this) || this;
	        _this._cache = _angular_core.ɵglobal.$templateCache;
	        if (_this._cache == null) {
	            throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
	        }
	        return _this;
	    }
	    CachedResourceLoader.prototype.get = function (url) {
	        if (this._cache.hasOwnProperty(url)) {
	            return Promise.resolve(this._cache[url]);
	        }
	        else {
	            return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
	        }
	    };
	    return CachedResourceLoader;
	}(_angular_compiler.ResourceLoader));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * @stable
	 */
	var VERSION = new _angular_core.Version('4.1.0');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @experimental
	 */
	var RESOURCE_CACHE_PROVIDER = [{ provide: _angular_compiler.ResourceLoader, useClass: CachedResourceLoader }];
	/**
	 * @stable
	 */
	var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);

	exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
	exports.platformBrowserDynamic = platformBrowserDynamic;
	exports.VERSION = VERSION;
	exports.ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS;
	exports.ɵResourceLoaderImpl = ResourceLoaderImpl;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=platform-browser-dynamic.umd.js.map


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(379)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}),global.ng.core));
	}(this, (function (exports,_angular_core) { 'use strict';

	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * \@stable
	 */
	var VERSION = new _angular_core.Version('4.1.0');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A segment of text within the template.
	 */
	var TextAst = (function () {
	    /**
	     * @param {?} value
	     * @param {?} ngContentIndex
	     * @param {?} sourceSpan
	     */
	    function TextAst(value, ngContentIndex, sourceSpan) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return TextAst;
	}());
	/**
	 * A bound expression within the text of a template.
	 */
	var BoundTextAst = (function () {
	    /**
	     * @param {?} value
	     * @param {?} ngContentIndex
	     * @param {?} sourceSpan
	     */
	    function BoundTextAst(value, ngContentIndex, sourceSpan) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BoundTextAst.prototype.visit = function (visitor, context) {
	        return visitor.visitBoundText(this, context);
	    };
	    return BoundTextAst;
	}());
	/**
	 * A plain attribute on an element.
	 */
	var AttrAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function AttrAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	    return AttrAst;
	}());
	/**
	 * A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
	 * `[\@trigger]="stateExp"`)
	 */
	var BoundElementPropertyAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} type
	     * @param {?} securityContext
	     * @param {?} value
	     * @param {?} unit
	     * @param {?} sourceSpan
	     */
	    function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
	        this.name = name;
	        this.type = type;
	        this.securityContext = securityContext;
	        this.value = value;
	        this.unit = unit;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElementProperty(this, context);
	    };
	    Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.type === PropertyBindingType.Animation; },
	        enumerable: true,
	        configurable: true
	    });
	    return BoundElementPropertyAst;
	}());
	/**
	 * A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
	 * `(\@trigger.phase)="callback($event)"`).
	 */
	var BoundEventAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} target
	     * @param {?} phase
	     * @param {?} handler
	     * @param {?} sourceSpan
	     */
	    function BoundEventAst(name, target, phase, handler, sourceSpan) {
	        this.name = name;
	        this.target = target;
	        this.phase = phase;
	        this.handler = handler;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} name
	     * @param {?} target
	     * @param {?} phase
	     * @return {?}
	     */
	    BoundEventAst.calcFullName = function (name, target, phase) {
	        if (target) {
	            return target + ":" + name;
	        }
	        else if (phase) {
	            return "@" + name + "." + phase;
	        }
	        else {
	            return name;
	        }
	    };
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BoundEventAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEvent(this, context);
	    };
	    Object.defineProperty(BoundEventAst.prototype, "fullName", {
	        /**
	         * @return {?}
	         */
	        get: function () { return BoundEventAst.calcFullName(this.name, this.target, this.phase); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
	        /**
	         * @return {?}
	         */
	        get: function () { return !!this.phase; },
	        enumerable: true,
	        configurable: true
	    });
	    return BoundEventAst;
	}());
	/**
	 * A reference declaration on an element (e.g. `let someName="expression"`).
	 */
	var ReferenceAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function ReferenceAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ReferenceAst.prototype.visit = function (visitor, context) {
	        return visitor.visitReference(this, context);
	    };
	    return ReferenceAst;
	}());
	/**
	 * A variable declaration on a <ng-template> (e.g. `var-someName="someLocalName"`).
	 */
	var VariableAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function VariableAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    VariableAst.prototype.visit = function (visitor, context) {
	        return visitor.visitVariable(this, context);
	    };
	    return VariableAst;
	}());
	/**
	 * An element declaration in a template.
	 */
	var ElementAst = (function () {
	    /**
	     * @param {?} name
	     * @param {?} attrs
	     * @param {?} inputs
	     * @param {?} outputs
	     * @param {?} references
	     * @param {?} directives
	     * @param {?} providers
	     * @param {?} hasViewContainer
	     * @param {?} queryMatches
	     * @param {?} children
	     * @param {?} ngContentIndex
	     * @param {?} sourceSpan
	     * @param {?} endSourceSpan
	     */
	    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {
	        this.name = name;
	        this.attrs = attrs;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.references = references;
	        this.directives = directives;
	        this.providers = providers;
	        this.hasViewContainer = hasViewContainer;
	        this.queryMatches = queryMatches;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	        this.endSourceSpan = endSourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ElementAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElement(this, context);
	    };
	    return ElementAst;
	}());
	/**
	 * A `<ng-template>` element included in an Angular template.
	 */
	var EmbeddedTemplateAst = (function () {
	    /**
	     * @param {?} attrs
	     * @param {?} outputs
	     * @param {?} references
	     * @param {?} variables
	     * @param {?} directives
	     * @param {?} providers
	     * @param {?} hasViewContainer
	     * @param {?} queryMatches
	     * @param {?} children
	     * @param {?} ngContentIndex
	     * @param {?} sourceSpan
	     */
	    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {
	        this.attrs = attrs;
	        this.outputs = outputs;
	        this.references = references;
	        this.variables = variables;
	        this.directives = directives;
	        this.providers = providers;
	        this.hasViewContainer = hasViewContainer;
	        this.queryMatches = queryMatches;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEmbeddedTemplate(this, context);
	    };
	    return EmbeddedTemplateAst;
	}());
	/**
	 * A directive property with a bound value (e.g. `*ngIf="condition").
	 */
	var BoundDirectivePropertyAst = (function () {
	    /**
	     * @param {?} directiveName
	     * @param {?} templateName
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
	        this.directiveName = directiveName;
	        this.templateName = templateName;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirectiveProperty(this, context);
	    };
	    return BoundDirectivePropertyAst;
	}());
	/**
	 * A directive declared on an element.
	 */
	var DirectiveAst = (function () {
	    /**
	     * @param {?} directive
	     * @param {?} inputs
	     * @param {?} hostProperties
	     * @param {?} hostEvents
	     * @param {?} contentQueryStartId
	     * @param {?} sourceSpan
	     */
	    function DirectiveAst(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {
	        this.directive = directive;
	        this.inputs = inputs;
	        this.hostProperties = hostProperties;
	        this.hostEvents = hostEvents;
	        this.contentQueryStartId = contentQueryStartId;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    DirectiveAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirective(this, context);
	    };
	    return DirectiveAst;
	}());
	/**
	 * A provider declared on an element
	 */
	var ProviderAst = (function () {
	    /**
	     * @param {?} token
	     * @param {?} multiProvider
	     * @param {?} eager
	     * @param {?} providers
	     * @param {?} providerType
	     * @param {?} lifecycleHooks
	     * @param {?} sourceSpan
	     */
	    function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
	        this.token = token;
	        this.multiProvider = multiProvider;
	        this.eager = eager;
	        this.providers = providers;
	        this.providerType = providerType;
	        this.lifecycleHooks = lifecycleHooks;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ProviderAst.prototype.visit = function (visitor, context) {
	        // No visit method in the visitor for now...
	        return null;
	    };
	    return ProviderAst;
	}());
	var ProviderAstType = {};
	ProviderAstType.PublicService = 0;
	ProviderAstType.PrivateService = 1;
	ProviderAstType.Component = 2;
	ProviderAstType.Directive = 3;
	ProviderAstType.Builtin = 4;
	ProviderAstType[ProviderAstType.PublicService] = "PublicService";
	ProviderAstType[ProviderAstType.PrivateService] = "PrivateService";
	ProviderAstType[ProviderAstType.Component] = "Component";
	ProviderAstType[ProviderAstType.Directive] = "Directive";
	ProviderAstType[ProviderAstType.Builtin] = "Builtin";
	/**
	 * Position where content is to be projected (instance of `<ng-content>` in a template).
	 */
	var NgContentAst = (function () {
	    /**
	     * @param {?} index
	     * @param {?} ngContentIndex
	     * @param {?} sourceSpan
	     */
	    function NgContentAst(index, ngContentIndex, sourceSpan) {
	        this.index = index;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    NgContentAst.prototype.visit = function (visitor, context) {
	        return visitor.visitNgContent(this, context);
	    };
	    return NgContentAst;
	}());
	var PropertyBindingType = {};
	PropertyBindingType.Property = 0;
	PropertyBindingType.Attribute = 1;
	PropertyBindingType.Class = 2;
	PropertyBindingType.Style = 3;
	PropertyBindingType.Animation = 4;
	PropertyBindingType[PropertyBindingType.Property] = "Property";
	PropertyBindingType[PropertyBindingType.Attribute] = "Attribute";
	PropertyBindingType[PropertyBindingType.Class] = "Class";
	PropertyBindingType[PropertyBindingType.Style] = "Style";
	PropertyBindingType[PropertyBindingType.Animation] = "Animation";
	/**
	 * Visit every node in a list of {\@link TemplateAst}s with the given {\@link TemplateAstVisitor}.
	 * @param {?} visitor
	 * @param {?} asts
	 * @param {?=} context
	 * @return {?}
	 */
	function templateVisitAll(visitor, asts, context) {
	    if (context === void 0) { context = null; }
	    var /** @type {?} */ result = [];
	    var /** @type {?} */ visit = visitor.visit ?
	        function (ast) { return ((visitor.visit))(ast, context) || ast.visit(visitor, context); } :
	        function (ast) { return ast.visit(visitor, context); };
	    asts.forEach(function (ast) {
	        var /** @type {?} */ astResult = visit(ast);
	        if (astResult) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	/**
	 * A token representing the a reference to a static type.
	 *
	 * This token is unique for a filePath and name and can be used as a hash table key.
	 */
	var StaticSymbol = (function () {
	    /**
	     * @param {?} filePath
	     * @param {?} name
	     * @param {?} members
	     */
	    function StaticSymbol(filePath, name, members) {
	        this.filePath = filePath;
	        this.name = name;
	        this.members = members;
	    }
	    /**
	     * @return {?}
	     */
	    StaticSymbol.prototype.assertNoMembers = function () {
	        if (this.members.length) {
	            throw new Error("Illegal state: symbol without members expected, but got " + JSON.stringify(this) + ".");
	        }
	    };
	    return StaticSymbol;
	}());
	/**
	 * A cache of static symbol used by the StaticReflector to return the same symbol for the
	 * same symbol values.
	 */
	var StaticSymbolCache = (function () {
	    function StaticSymbolCache() {
	        this.cache = new Map();
	    }
	    /**
	     * @param {?} declarationFile
	     * @param {?} name
	     * @param {?=} members
	     * @return {?}
	     */
	    StaticSymbolCache.prototype.get = function (declarationFile, name, members) {
	        members = members || [];
	        var /** @type {?} */ memberSuffix = members.length ? "." + members.join('.') : '';
	        var /** @type {?} */ key = "\"" + declarationFile + "\"." + name + memberSuffix;
	        var /** @type {?} */ result = this.cache.get(key);
	        if (!result) {
	            result = new StaticSymbol(declarationFile, name, members);
	            this.cache.set(key, result);
	        }
	        return result;
	    };
	    return StaticSymbolCache;
	}());
	var TagContentType = {};
	TagContentType.RAW_TEXT = 0;
	TagContentType.ESCAPABLE_RAW_TEXT = 1;
	TagContentType.PARSABLE_DATA = 2;
	TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT";
	TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
	TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA";
	/**
	 * @param {?} elementName
	 * @return {?}
	 */
	function splitNsName(elementName) {
	    if (elementName[0] != ':') {
	        return [null, elementName];
	    }
	    var /** @type {?} */ colonIndex = elementName.indexOf(':', 1);
	    if (colonIndex == -1) {
	        throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
	    }
	    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
	}
	/**
	 * @param {?} tagName
	 * @return {?}
	 */
	function isNgContainer(tagName) {
	    return splitNsName(tagName)[1] === 'ng-container';
	}
	/**
	 * @param {?} tagName
	 * @return {?}
	 */
	function isNgContent(tagName) {
	    return splitNsName(tagName)[1] === 'ng-content';
	}
	/**
	 * @param {?} tagName
	 * @return {?}
	 */
	function isNgTemplate(tagName) {
	    return splitNsName(tagName)[1] === 'ng-template';
	}
	/**
	 * @param {?} fullName
	 * @return {?}
	 */
	function getNsPrefix(fullName) {
	    return fullName === null ? null : splitNsName(fullName)[0];
	}
	/**
	 * @param {?} prefix
	 * @param {?} localName
	 * @return {?}
	 */
	function mergeNsAndName(prefix, localName) {
	    return prefix ? ":" + prefix + ":" + localName : localName;
	}
	// see http://www.w3.org/TR/html51/syntax.html#named-character-references
	// see https://html.spec.whatwg.org/multipage/entities.json
	// This list is not exhaustive to keep the compiler footprint low.
	// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not
	// exist.
	var NAMED_ENTITIES = {
	    'Aacute': '\u00C1',
	    'aacute': '\u00E1',
	    'Acirc': '\u00C2',
	    'acirc': '\u00E2',
	    'acute': '\u00B4',
	    'AElig': '\u00C6',
	    'aelig': '\u00E6',
	    'Agrave': '\u00C0',
	    'agrave': '\u00E0',
	    'alefsym': '\u2135',
	    'Alpha': '\u0391',
	    'alpha': '\u03B1',
	    'amp': '&',
	    'and': '\u2227',
	    'ang': '\u2220',
	    'apos': '\u0027',
	    'Aring': '\u00C5',
	    'aring': '\u00E5',
	    'asymp': '\u2248',
	    'Atilde': '\u00C3',
	    'atilde': '\u00E3',
	    'Auml': '\u00C4',
	    'auml': '\u00E4',
	    'bdquo': '\u201E',
	    'Beta': '\u0392',
	    'beta': '\u03B2',
	    'brvbar': '\u00A6',
	    'bull': '\u2022',
	    'cap': '\u2229',
	    'Ccedil': '\u00C7',
	    'ccedil': '\u00E7',
	    'cedil': '\u00B8',
	    'cent': '\u00A2',
	    'Chi': '\u03A7',
	    'chi': '\u03C7',
	    'circ': '\u02C6',
	    'clubs': '\u2663',
	    'cong': '\u2245',
	    'copy': '\u00A9',
	    'crarr': '\u21B5',
	    'cup': '\u222A',
	    'curren': '\u00A4',
	    'dagger': '\u2020',
	    'Dagger': '\u2021',
	    'darr': '\u2193',
	    'dArr': '\u21D3',
	    'deg': '\u00B0',
	    'Delta': '\u0394',
	    'delta': '\u03B4',
	    'diams': '\u2666',
	    'divide': '\u00F7',
	    'Eacute': '\u00C9',
	    'eacute': '\u00E9',
	    'Ecirc': '\u00CA',
	    'ecirc': '\u00EA',
	    'Egrave': '\u00C8',
	    'egrave': '\u00E8',
	    'empty': '\u2205',
	    'emsp': '\u2003',
	    'ensp': '\u2002',
	    'Epsilon': '\u0395',
	    'epsilon': '\u03B5',
	    'equiv': '\u2261',
	    'Eta': '\u0397',
	    'eta': '\u03B7',
	    'ETH': '\u00D0',
	    'eth': '\u00F0',
	    'Euml': '\u00CB',
	    'euml': '\u00EB',
	    'euro': '\u20AC',
	    'exist': '\u2203',
	    'fnof': '\u0192',
	    'forall': '\u2200',
	    'frac12': '\u00BD',
	    'frac14': '\u00BC',
	    'frac34': '\u00BE',
	    'frasl': '\u2044',
	    'Gamma': '\u0393',
	    'gamma': '\u03B3',
	    'ge': '\u2265',
	    'gt': '>',
	    'harr': '\u2194',
	    'hArr': '\u21D4',
	    'hearts': '\u2665',
	    'hellip': '\u2026',
	    'Iacute': '\u00CD',
	    'iacute': '\u00ED',
	    'Icirc': '\u00CE',
	    'icirc': '\u00EE',
	    'iexcl': '\u00A1',
	    'Igrave': '\u00CC',
	    'igrave': '\u00EC',
	    'image': '\u2111',
	    'infin': '\u221E',
	    'int': '\u222B',
	    'Iota': '\u0399',
	    'iota': '\u03B9',
	    'iquest': '\u00BF',
	    'isin': '\u2208',
	    'Iuml': '\u00CF',
	    'iuml': '\u00EF',
	    'Kappa': '\u039A',
	    'kappa': '\u03BA',
	    'Lambda': '\u039B',
	    'lambda': '\u03BB',
	    'lang': '\u27E8',
	    'laquo': '\u00AB',
	    'larr': '\u2190',
	    'lArr': '\u21D0',
	    'lceil': '\u2308',
	    'ldquo': '\u201C',
	    'le': '\u2264',
	    'lfloor': '\u230A',
	    'lowast': '\u2217',
	    'loz': '\u25CA',
	    'lrm': '\u200E',
	    'lsaquo': '\u2039',
	    'lsquo': '\u2018',
	    'lt': '<',
	    'macr': '\u00AF',
	    'mdash': '\u2014',
	    'micro': '\u00B5',
	    'middot': '\u00B7',
	    'minus': '\u2212',
	    'Mu': '\u039C',
	    'mu': '\u03BC',
	    'nabla': '\u2207',
	    'nbsp': '\u00A0',
	    'ndash': '\u2013',
	    'ne': '\u2260',
	    'ni': '\u220B',
	    'not': '\u00AC',
	    'notin': '\u2209',
	    'nsub': '\u2284',
	    'Ntilde': '\u00D1',
	    'ntilde': '\u00F1',
	    'Nu': '\u039D',
	    'nu': '\u03BD',
	    'Oacute': '\u00D3',
	    'oacute': '\u00F3',
	    'Ocirc': '\u00D4',
	    'ocirc': '\u00F4',
	    'OElig': '\u0152',
	    'oelig': '\u0153',
	    'Ograve': '\u00D2',
	    'ograve': '\u00F2',
	    'oline': '\u203E',
	    'Omega': '\u03A9',
	    'omega': '\u03C9',
	    'Omicron': '\u039F',
	    'omicron': '\u03BF',
	    'oplus': '\u2295',
	    'or': '\u2228',
	    'ordf': '\u00AA',
	    'ordm': '\u00BA',
	    'Oslash': '\u00D8',
	    'oslash': '\u00F8',
	    'Otilde': '\u00D5',
	    'otilde': '\u00F5',
	    'otimes': '\u2297',
	    'Ouml': '\u00D6',
	    'ouml': '\u00F6',
	    'para': '\u00B6',
	    'permil': '\u2030',
	    'perp': '\u22A5',
	    'Phi': '\u03A6',
	    'phi': '\u03C6',
	    'Pi': '\u03A0',
	    'pi': '\u03C0',
	    'piv': '\u03D6',
	    'plusmn': '\u00B1',
	    'pound': '\u00A3',
	    'prime': '\u2032',
	    'Prime': '\u2033',
	    'prod': '\u220F',
	    'prop': '\u221D',
	    'Psi': '\u03A8',
	    'psi': '\u03C8',
	    'quot': '\u0022',
	    'radic': '\u221A',
	    'rang': '\u27E9',
	    'raquo': '\u00BB',
	    'rarr': '\u2192',
	    'rArr': '\u21D2',
	    'rceil': '\u2309',
	    'rdquo': '\u201D',
	    'real': '\u211C',
	    'reg': '\u00AE',
	    'rfloor': '\u230B',
	    'Rho': '\u03A1',
	    'rho': '\u03C1',
	    'rlm': '\u200F',
	    'rsaquo': '\u203A',
	    'rsquo': '\u2019',
	    'sbquo': '\u201A',
	    'Scaron': '\u0160',
	    'scaron': '\u0161',
	    'sdot': '\u22C5',
	    'sect': '\u00A7',
	    'shy': '\u00AD',
	    'Sigma': '\u03A3',
	    'sigma': '\u03C3',
	    'sigmaf': '\u03C2',
	    'sim': '\u223C',
	    'spades': '\u2660',
	    'sub': '\u2282',
	    'sube': '\u2286',
	    'sum': '\u2211',
	    'sup': '\u2283',
	    'sup1': '\u00B9',
	    'sup2': '\u00B2',
	    'sup3': '\u00B3',
	    'supe': '\u2287',
	    'szlig': '\u00DF',
	    'Tau': '\u03A4',
	    'tau': '\u03C4',
	    'there4': '\u2234',
	    'Theta': '\u0398',
	    'theta': '\u03B8',
	    'thetasym': '\u03D1',
	    'thinsp': '\u2009',
	    'THORN': '\u00DE',
	    'thorn': '\u00FE',
	    'tilde': '\u02DC',
	    'times': '\u00D7',
	    'trade': '\u2122',
	    'Uacute': '\u00DA',
	    'uacute': '\u00FA',
	    'uarr': '\u2191',
	    'uArr': '\u21D1',
	    'Ucirc': '\u00DB',
	    'ucirc': '\u00FB',
	    'Ugrave': '\u00D9',
	    'ugrave': '\u00F9',
	    'uml': '\u00A8',
	    'upsih': '\u03D2',
	    'Upsilon': '\u03A5',
	    'upsilon': '\u03C5',
	    'Uuml': '\u00DC',
	    'uuml': '\u00FC',
	    'weierp': '\u2118',
	    'Xi': '\u039E',
	    'xi': '\u03BE',
	    'Yacute': '\u00DD',
	    'yacute': '\u00FD',
	    'yen': '\u00A5',
	    'yuml': '\u00FF',
	    'Yuml': '\u0178',
	    'Zeta': '\u0396',
	    'zeta': '\u03B6',
	    'zwj': '\u200D',
	    'zwnj': '\u200C',
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var HtmlTagDefinition = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function HtmlTagDefinition(_a) {
	        var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
	        var _this = this;
	        this.closedByChildren = {};
	        this.closedByParent = false;
	        this.canSelfClose = false;
	        if (closedByChildren && closedByChildren.length > 0) {
	            closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
	        }
	        this.isVoid = isVoid;
	        this.closedByParent = closedByParent || isVoid;
	        if (requiredParents && requiredParents.length > 0) {
	            this.requiredParents = {};
	            // The first parent is the list is automatically when none of the listed parents are present
	            this.parentToAdd = requiredParents[0];
	            requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
	        }
	        this.implicitNamespacePrefix = implicitNamespacePrefix || null;
	        this.contentType = contentType;
	        this.ignoreFirstLf = ignoreFirstLf;
	    }
	    /**
	     * @param {?} currentParent
	     * @return {?}
	     */
	    HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
	        if (!this.requiredParents) {
	            return false;
	        }
	        if (!currentParent) {
	            return true;
	        }
	        var /** @type {?} */ lcParent = currentParent.toLowerCase();
	        var /** @type {?} */ isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';
	        return !isParentTemplate && this.requiredParents[lcParent] != true;
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    HtmlTagDefinition.prototype.isClosedByChild = function (name) {
	        return this.isVoid || name.toLowerCase() in this.closedByChildren;
	    };
	    return HtmlTagDefinition;
	}());
	// see http://www.w3.org/TR/html51/syntax.html#optional-tags
	// This implementation does not fully conform to the HTML5 spec.
	var TAG_DEFINITIONS = {
	    'base': new HtmlTagDefinition({ isVoid: true }),
	    'meta': new HtmlTagDefinition({ isVoid: true }),
	    'area': new HtmlTagDefinition({ isVoid: true }),
	    'embed': new HtmlTagDefinition({ isVoid: true }),
	    'link': new HtmlTagDefinition({ isVoid: true }),
	    'img': new HtmlTagDefinition({ isVoid: true }),
	    'input': new HtmlTagDefinition({ isVoid: true }),
	    'param': new HtmlTagDefinition({ isVoid: true }),
	    'hr': new HtmlTagDefinition({ isVoid: true }),
	    'br': new HtmlTagDefinition({ isVoid: true }),
	    'source': new HtmlTagDefinition({ isVoid: true }),
	    'track': new HtmlTagDefinition({ isVoid: true }),
	    'wbr': new HtmlTagDefinition({ isVoid: true }),
	    'p': new HtmlTagDefinition({
	        closedByChildren: [
	            'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',
	            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',
	            'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'
	        ],
	        closedByParent: true
	    }),
	    'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
	    'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
	    'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
	    'tr': new HtmlTagDefinition({
	        closedByChildren: ['tr'],
	        requiredParents: ['tbody', 'tfoot', 'thead'],
	        closedByParent: true
	    }),
	    'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	    'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	    'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
	    'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
	    'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
	    'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
	    'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
	    'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
	    'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
	    'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
	    'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
	    'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
	    'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
	    'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	    'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	    'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
	    'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
	};
	var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
	/**
	 * @param {?} tagName
	 * @return {?}
	 */
	function getHtmlTagDefinition(tagName) {
	    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' +
	    '([-\\w]+)|' +
	    '(?:\\.([-\\w]+))|' +
	    // "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
	    '(?:\\[([-.\\w*]+)(?:=([\"\']?)([^\\]\"\']*)\\5)?\\])|' +
	    // "[name="value"]",
	    // "[name='value']"
	    '(\\))|' +
	    '(\\s*,\\s*)', // ","
	'g');
	/**
	 * A css selector contains an element name,
	 * css classes and attribute/value pairs with the purpose
	 * of selecting subsets out of them.
	 */
	var CssSelector = (function () {
	    function CssSelector() {
	        this.element = null;
	        this.classNames = [];
	        this.attrs = [];
	        this.notSelectors = [];
	    }
	    /**
	     * @param {?} selector
	     * @return {?}
	     */
	    CssSelector.parse = function (selector) {
	        var /** @type {?} */ results = [];
	        var /** @type {?} */ _addResult = function (res, cssSel) {
	            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&
	                cssSel.attrs.length == 0) {
	                cssSel.element = '*';
	            }
	            res.push(cssSel);
	        };
	        var /** @type {?} */ cssSelector = new CssSelector();
	        var /** @type {?} */ match;
	        var /** @type {?} */ current = cssSelector;
	        var /** @type {?} */ inNot = false;
	        _SELECTOR_REGEXP.lastIndex = 0;
	        while (match = _SELECTOR_REGEXP.exec(selector)) {
	            if (match[1]) {
	                if (inNot) {
	                    throw new Error('Nesting :not is not allowed in a selector');
	                }
	                inNot = true;
	                current = new CssSelector();
	                cssSelector.notSelectors.push(current);
	            }
	            if (match[2]) {
	                current.setElement(match[2]);
	            }
	            if (match[3]) {
	                current.addClassName(match[3]);
	            }
	            if (match[4]) {
	                current.addAttribute(match[4], match[6]);
	            }
	            if (match[7]) {
	                inNot = false;
	                current = cssSelector;
	            }
	            if (match[8]) {
	                if (inNot) {
	                    throw new Error('Multiple selectors in :not are not supported');
	                }
	                _addResult(results, cssSelector);
	                cssSelector = current = new CssSelector();
	            }
	        }
	        _addResult(results, cssSelector);
	        return results;
	    };
	    /**
	     * @return {?}
	     */
	    CssSelector.prototype.isElementSelector = function () {
	        return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&
	            this.notSelectors.length === 0;
	    };
	    /**
	     * @return {?}
	     */
	    CssSelector.prototype.hasElementSelector = function () { return !!this.element; };
	    /**
	     * @param {?=} element
	     * @return {?}
	     */
	    CssSelector.prototype.setElement = function (element) {
	        if (element === void 0) { element = null; }
	        this.element = element;
	    };
	    /**
	     * Gets a template string for an element that matches the selector.
	     * @return {?}
	     */
	    CssSelector.prototype.getMatchingElementTemplate = function () {
	        var /** @type {?} */ tagName = this.element || 'div';
	        var /** @type {?} */ classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	        var /** @type {?} */ attrs = '';
	        for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {
	            var /** @type {?} */ attrName = this.attrs[i];
	            var /** @type {?} */ attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	            attrs += " " + attrName + attrValue;
	        }
	        return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" :
	            "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	    };
	    /**
	     * @param {?} name
	     * @param {?=} value
	     * @return {?}
	     */
	    CssSelector.prototype.addAttribute = function (name, value) {
	        if (value === void 0) { value = ''; }
	        this.attrs.push(name, value && value.toLowerCase() || '');
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	    /**
	     * @return {?}
	     */
	    CssSelector.prototype.toString = function () {
	        var /** @type {?} */ res = this.element || '';
	        if (this.classNames) {
	            this.classNames.forEach(function (klass) { return res += "." + klass; });
	        }
	        if (this.attrs) {
	            for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {
	                var /** @type {?} */ name = this.attrs[i];
	                var /** @type {?} */ value = this.attrs[i + 1];
	                res += "[" + name + (value ? '=' + value : '') + "]";
	            }
	        }
	        this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	        return res;
	    };
	    return CssSelector;
	}());
	/**
	 * Reads a list of CssSelectors and allows to calculate which ones
	 * are contained in a given CssSelector.
	 */
	var SelectorMatcher = (function () {
	    function SelectorMatcher() {
	        this._elementMap = new Map();
	        this._elementPartialMap = new Map();
	        this._classMap = new Map();
	        this._classPartialMap = new Map();
	        this._attrValueMap = new Map();
	        this._attrValuePartialMap = new Map();
	        this._listContexts = [];
	    }
	    /**
	     * @param {?} notSelectors
	     * @return {?}
	     */
	    SelectorMatcher.createNotMatcher = function (notSelectors) {
	        var /** @type {?} */ notMatcher = new SelectorMatcher();
	        notMatcher.addSelectables(notSelectors, null);
	        return notMatcher;
	    };
	    /**
	     * @param {?} cssSelectors
	     * @param {?=} callbackCtxt
	     * @return {?}
	     */
	    SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	        var /** @type {?} */ listContext = ((null));
	        if (cssSelectors.length > 1) {
	            listContext = new SelectorListContext(cssSelectors);
	            this._listContexts.push(listContext);
	        }
	        for (var /** @type {?} */ i = 0; i < cssSelectors.length; i++) {
	            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	        }
	    };
	    /**
	     * Add an object that can be found later on by calling `match`.
	     * @param {?} cssSelector A css selector
	     * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function
	     * @param {?} listContext
	     * @return {?}
	     */
	    SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	        var /** @type {?} */ matcher = this;
	        var /** @type {?} */ element = cssSelector.element;
	        var /** @type {?} */ classNames = cssSelector.classNames;
	        var /** @type {?} */ attrs = cssSelector.attrs;
	        var /** @type {?} */ selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	        if (element) {
	            var /** @type {?} */ isTerminal = attrs.length === 0 && classNames.length === 0;
	            if (isTerminal) {
	                this._addTerminal(matcher._elementMap, element, selectable);
	            }
	            else {
	                matcher = this._addPartial(matcher._elementPartialMap, element);
	            }
	        }
	        if (classNames) {
	            for (var /** @type {?} */ i = 0; i < classNames.length; i++) {
	                var /** @type {?} */ isTerminal = attrs.length === 0 && i === classNames.length - 1;
	                var /** @type {?} */ className = classNames[i];
	                if (isTerminal) {
	                    this._addTerminal(matcher._classMap, className, selectable);
	                }
	                else {
	                    matcher = this._addPartial(matcher._classPartialMap, className);
	                }
	            }
	        }
	        if (attrs) {
	            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                var /** @type {?} */ isTerminal = i === attrs.length - 2;
	                var /** @type {?} */ name = attrs[i];
	                var /** @type {?} */ value = attrs[i + 1];
	                if (isTerminal) {
	                    var /** @type {?} */ terminalMap = matcher._attrValueMap;
	                    var /** @type {?} */ terminalValuesMap = terminalMap.get(name);
	                    if (!terminalValuesMap) {
	                        terminalValuesMap = new Map();
	                        terminalMap.set(name, terminalValuesMap);
	                    }
	                    this._addTerminal(terminalValuesMap, value, selectable);
	                }
	                else {
	                    var /** @type {?} */ partialMap = matcher._attrValuePartialMap;
	                    var /** @type {?} */ partialValuesMap = partialMap.get(name);
	                    if (!partialValuesMap) {
	                        partialValuesMap = new Map();
	                        partialMap.set(name, partialValuesMap);
	                    }
	                    matcher = this._addPartial(partialValuesMap, value);
	                }
	            }
	        }
	    };
	    /**
	     * @param {?} map
	     * @param {?} name
	     * @param {?} selectable
	     * @return {?}
	     */
	    SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	        var /** @type {?} */ terminalList = map.get(name);
	        if (!terminalList) {
	            terminalList = [];
	            map.set(name, terminalList);
	        }
	        terminalList.push(selectable);
	    };
	    /**
	     * @param {?} map
	     * @param {?} name
	     * @return {?}
	     */
	    SelectorMatcher.prototype._addPartial = function (map, name) {
	        var /** @type {?} */ matcher = map.get(name);
	        if (!matcher) {
	            matcher = new SelectorMatcher();
	            map.set(name, matcher);
	        }
	        return matcher;
	    };
	    /**
	     * Find the objects that have been added via `addSelectable`
	     * whose css selector is contained in the given css selector.
	     * @param {?} cssSelector A css selector
	     * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`
	     * @return {?} boolean true if a match was found
	     */
	    SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	        var /** @type {?} */ result = false;
	        var /** @type {?} */ element = ((cssSelector.element));
	        var /** @type {?} */ classNames = cssSelector.classNames;
	        var /** @type {?} */ attrs = cssSelector.attrs;
	        for (var /** @type {?} */ i = 0; i < this._listContexts.length; i++) {
	            this._listContexts[i].alreadyMatched = false;
	        }
	        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	            result;
	        if (classNames) {
	            for (var /** @type {?} */ i = 0; i < classNames.length; i++) {
	                var /** @type {?} */ className = classNames[i];
	                result =
	                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                result =
	                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                        result;
	            }
	        }
	        if (attrs) {
	            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                var /** @type {?} */ name = attrs[i];
	                var /** @type {?} */ value = attrs[i + 1];
	                var /** @type {?} */ terminalValuesMap = ((this._attrValueMap.get(name)));
	                if (value) {
	                    result =
	                        this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
	                }
	                result =
	                    this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
	                var /** @type {?} */ partialValuesMap = ((this._attrValuePartialMap.get(name)));
	                if (value) {
	                    result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
	                }
	                result =
	                    this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
	            }
	        }
	        return result;
	    };
	    /**
	     * \@internal
	     * @param {?} map
	     * @param {?} name
	     * @param {?} cssSelector
	     * @param {?} matchedCallback
	     * @return {?}
	     */
	    SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	        if (!map || typeof name !== 'string') {
	            return false;
	        }
	        var /** @type {?} */ selectables = map.get(name) || [];
	        var /** @type {?} */ starSelectables = ((map.get('*')));
	        if (starSelectables) {
	            selectables = selectables.concat(starSelectables);
	        }
	        if (selectables.length === 0) {
	            return false;
	        }
	        var /** @type {?} */ selectable;
	        var /** @type {?} */ result = false;
	        for (var /** @type {?} */ i = 0; i < selectables.length; i++) {
	            selectable = selectables[i];
	            result = selectable.finalize(cssSelector, matchedCallback) || result;
	        }
	        return result;
	    };
	    /**
	     * \@internal
	     * @param {?} map
	     * @param {?} name
	     * @param {?} cssSelector
	     * @param {?} matchedCallback
	     * @return {?}
	     */
	    SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
	        if (!map || typeof name !== 'string') {
	            return false;
	        }
	        var /** @type {?} */ nestedSelector = map.get(name);
	        if (!nestedSelector) {
	            return false;
	        }
	        // TODO(perf): get rid of recursion and measure again
	        // TODO(perf): don't pass the whole selector into the recursion,
	        // but only the not processed parts
	        return nestedSelector.match(cssSelector, matchedCallback);
	    };
	    return SelectorMatcher;
	}());
	var SelectorListContext = (function () {
	    /**
	     * @param {?} selectors
	     */
	    function SelectorListContext(selectors) {
	        this.selectors = selectors;
	        this.alreadyMatched = false;
	    }
	    return SelectorListContext;
	}());
	var SelectorContext = (function () {
	    /**
	     * @param {?} selector
	     * @param {?} cbContext
	     * @param {?} listContext
	     */
	    function SelectorContext(selector, cbContext, listContext) {
	        this.selector = selector;
	        this.cbContext = cbContext;
	        this.listContext = listContext;
	        this.notSelectors = selector.notSelectors;
	    }
	    /**
	     * @param {?} cssSelector
	     * @param {?} callback
	     * @return {?}
	     */
	    SelectorContext.prototype.finalize = function (cssSelector, callback) {
	        var /** @type {?} */ result = true;
	        if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
	            var /** @type {?} */ notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	            result = !notMatcher.match(cssSelector, null);
	        }
	        if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
	            if (this.listContext) {
	                this.listContext.alreadyMatched = true;
	            }
	            callback(this.selector, this.cbContext);
	        }
	        return result;
	    };
	    return SelectorContext;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MODULE_SUFFIX = '';
	var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function dashCaseToCamelCase(input) {
	    return input.replace(DASH_CASE_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        return m[1].toUpperCase();
	    });
	}
	/**
	 * @param {?} input
	 * @param {?} defaultValues
	 * @return {?}
	 */
	function splitAtColon(input, defaultValues) {
	    return _splitAt(input, ':', defaultValues);
	}
	/**
	 * @param {?} input
	 * @param {?} defaultValues
	 * @return {?}
	 */
	function splitAtPeriod(input, defaultValues) {
	    return _splitAt(input, '.', defaultValues);
	}
	/**
	 * @param {?} input
	 * @param {?} character
	 * @param {?} defaultValues
	 * @return {?}
	 */
	function _splitAt(input, character, defaultValues) {
	    var /** @type {?} */ characterIndex = input.indexOf(character);
	    if (characterIndex == -1)
	        return defaultValues;
	    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
	}
	/**
	 * @param {?} value
	 * @param {?} visitor
	 * @param {?} context
	 * @return {?}
	 */
	function visitValue(value, visitor, context) {
	    if (Array.isArray(value)) {
	        return visitor.visitArray(/** @type {?} */ (value), context);
	    }
	    if (isStrictStringMap(value)) {
	        return visitor.visitStringMap(/** @type {?} */ (value), context);
	    }
	    if (value == null || typeof value == 'string' || typeof value == 'number' ||
	        typeof value == 'boolean') {
	        return visitor.visitPrimitive(value, context);
	    }
	    return visitor.visitOther(value, context);
	}
	/**
	 * @param {?} val
	 * @return {?}
	 */
	function isDefined(val) {
	    return val !== null && val !== undefined;
	}
	/**
	 * @template T
	 * @param {?} val
	 * @return {?}
	 */
	function noUndefined(val) {
	    return val === undefined ? ((null)) : val;
	}
	var ValueTransformer = (function () {
	    function ValueTransformer() {
	    }
	    /**
	     * @param {?} arr
	     * @param {?} context
	     * @return {?}
	     */
	    ValueTransformer.prototype.visitArray = function (arr, context) {
	        var _this = this;
	        return arr.map(function (value) { return visitValue(value, _this, context); });
	    };
	    /**
	     * @param {?} map
	     * @param {?} context
	     * @return {?}
	     */
	    ValueTransformer.prototype.visitStringMap = function (map, context) {
	        var _this = this;
	        var /** @type {?} */ result = {};
	        Object.keys(map).forEach(function (key) { result[key] = visitValue(map[key], _this, context); });
	        return result;
	    };
	    /**
	     * @param {?} value
	     * @param {?} context
	     * @return {?}
	     */
	    ValueTransformer.prototype.visitPrimitive = function (value, context) { return value; };
	    /**
	     * @param {?} value
	     * @param {?} context
	     * @return {?}
	     */
	    ValueTransformer.prototype.visitOther = function (value, context) { return value; };
	    return ValueTransformer;
	}());
	var SyncAsyncResult = (function () {
	    /**
	     * @param {?} syncResult
	     * @param {?=} asyncResult
	     */
	    function SyncAsyncResult(syncResult, asyncResult) {
	        if (asyncResult === void 0) { asyncResult = null; }
	        this.syncResult = syncResult;
	        this.asyncResult = asyncResult;
	        if (!asyncResult) {
	            this.asyncResult = Promise.resolve(syncResult);
	        }
	    }
	    return SyncAsyncResult;
	}());
	/**
	 * @param {?} msg
	 * @return {?}
	 */
	function syntaxError(msg) {
	    var /** @type {?} */ error = Error(msg);
	    ((error))[ERROR_SYNTAX_ERROR] = true;
	    return error;
	}
	var ERROR_SYNTAX_ERROR = 'ngSyntaxError';
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function isSyntaxError(error) {
	    return ((error))[ERROR_SYNTAX_ERROR];
	}
	/**
	 * @param {?} s
	 * @return {?}
	 */
	function escapeRegExp(s) {
	    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	}
	var STRING_MAP_PROTO = Object.getPrototypeOf({});
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isStrictStringMap(obj) {
	    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
	}
	/**
	 * @param {?} str
	 * @return {?}
	 */
	function utf8Encode(str) {
	    var /** @type {?} */ encoded = '';
	    for (var /** @type {?} */ index = 0; index < str.length; index++) {
	        var /** @type {?} */ codePoint = str.charCodeAt(index);
	        // decode surrogate
	        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > (index + 1)) {
	            var /** @type {?} */ low = str.charCodeAt(index + 1);
	            if (low >= 0xdc00 && low <= 0xdfff) {
	                index++;
	                codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;
	            }
	        }
	        if (codePoint <= 0x7f) {
	            encoded += String.fromCharCode(codePoint);
	        }
	        else if (codePoint <= 0x7ff) {
	            encoded += String.fromCharCode(((codePoint >> 6) & 0x1F) | 0xc0, (codePoint & 0x3f) | 0x80);
	        }
	        else if (codePoint <= 0xffff) {
	            encoded += String.fromCharCode((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
	        }
	        else if (codePoint <= 0x1fffff) {
	            encoded += String.fromCharCode(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
	        }
	    }
	    return encoded;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// group 0: "[prop] or (event) or @trigger"
	// group 1: "prop" from "[prop]"
	// group 2: "event" from "(event)"
	// group 3: "@trigger" from "@trigger"
	var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
	var CompileAnimationEntryMetadata = (function () {
	    /**
	     * @param {?=} name
	     * @param {?=} definitions
	     */
	    function CompileAnimationEntryMetadata(name, definitions) {
	        if (name === void 0) { name = null; }
	        if (definitions === void 0) { definitions = null; }
	        this.name = name;
	        this.definitions = definitions;
	    }
	    return CompileAnimationEntryMetadata;
	}());
	/**
	 * @abstract
	 */
	var CompileAnimationStateMetadata = (function () {
	    function CompileAnimationStateMetadata() {
	    }
	    return CompileAnimationStateMetadata;
	}());
	var CompileAnimationStateDeclarationMetadata = (function (_super) {
	    __extends(CompileAnimationStateDeclarationMetadata, _super);
	    /**
	     * @param {?} stateNameExpr
	     * @param {?} styles
	     */
	    function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
	        var _this = _super.call(this) || this;
	        _this.stateNameExpr = stateNameExpr;
	        _this.styles = styles;
	        return _this;
	    }
	    return CompileAnimationStateDeclarationMetadata;
	}(CompileAnimationStateMetadata));
	var CompileAnimationStateTransitionMetadata = (function (_super) {
	    __extends(CompileAnimationStateTransitionMetadata, _super);
	    /**
	     * @param {?} stateChangeExpr
	     * @param {?} steps
	     */
	    function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
	        var _this = _super.call(this) || this;
	        _this.stateChangeExpr = stateChangeExpr;
	        _this.steps = steps;
	        return _this;
	    }
	    return CompileAnimationStateTransitionMetadata;
	}(CompileAnimationStateMetadata));
	/**
	 * @abstract
	 */
	var CompileAnimationMetadata = (function () {
	    function CompileAnimationMetadata() {
	    }
	    return CompileAnimationMetadata;
	}());
	var CompileAnimationKeyframesSequenceMetadata = (function (_super) {
	    __extends(CompileAnimationKeyframesSequenceMetadata, _super);
	    /**
	     * @param {?=} steps
	     */
	    function CompileAnimationKeyframesSequenceMetadata(steps) {
	        if (steps === void 0) { steps = []; }
	        var _this = _super.call(this) || this;
	        _this.steps = steps;
	        return _this;
	    }
	    return CompileAnimationKeyframesSequenceMetadata;
	}(CompileAnimationMetadata));
	var CompileAnimationStyleMetadata = (function (_super) {
	    __extends(CompileAnimationStyleMetadata, _super);
	    /**
	     * @param {?} offset
	     * @param {?=} styles
	     */
	    function CompileAnimationStyleMetadata(offset, styles) {
	        if (styles === void 0) { styles = null; }
	        var _this = _super.call(this) || this;
	        _this.offset = offset;
	        _this.styles = styles;
	        return _this;
	    }
	    return CompileAnimationStyleMetadata;
	}(CompileAnimationMetadata));
	var CompileAnimationAnimateMetadata = (function (_super) {
	    __extends(CompileAnimationAnimateMetadata, _super);
	    /**
	     * @param {?=} timings
	     * @param {?=} styles
	     */
	    function CompileAnimationAnimateMetadata(timings, styles) {
	        if (timings === void 0) { timings = 0; }
	        if (styles === void 0) { styles = null; }
	        var _this = _super.call(this) || this;
	        _this.timings = timings;
	        _this.styles = styles;
	        return _this;
	    }
	    return CompileAnimationAnimateMetadata;
	}(CompileAnimationMetadata));
	/**
	 * @abstract
	 */
	var CompileAnimationWithStepsMetadata = (function (_super) {
	    __extends(CompileAnimationWithStepsMetadata, _super);
	    /**
	     * @param {?=} steps
	     */
	    function CompileAnimationWithStepsMetadata(steps) {
	        if (steps === void 0) { steps = null; }
	        var _this = _super.call(this) || this;
	        _this.steps = steps;
	        return _this;
	    }
	    return CompileAnimationWithStepsMetadata;
	}(CompileAnimationMetadata));
	var CompileAnimationSequenceMetadata = (function (_super) {
	    __extends(CompileAnimationSequenceMetadata, _super);
	    /**
	     * @param {?=} steps
	     */
	    function CompileAnimationSequenceMetadata(steps) {
	        if (steps === void 0) { steps = null; }
	        return _super.call(this, steps) || this;
	    }
	    return CompileAnimationSequenceMetadata;
	}(CompileAnimationWithStepsMetadata));
	var CompileAnimationGroupMetadata = (function (_super) {
	    __extends(CompileAnimationGroupMetadata, _super);
	    /**
	     * @param {?=} steps
	     */
	    function CompileAnimationGroupMetadata(steps) {
	        if (steps === void 0) { steps = null; }
	        return _super.call(this, steps) || this;
	    }
	    return CompileAnimationGroupMetadata;
	}(CompileAnimationWithStepsMetadata));
	/**
	 * @param {?} name
	 * @return {?}
	 */
	function _sanitizeIdentifier(name) {
	    return name.replace(/\W/g, '_');
	}
	var _anonymousTypeIndex = 0;
	/**
	 * @param {?} compileIdentifier
	 * @return {?}
	 */
	function identifierName(compileIdentifier) {
	    if (!compileIdentifier || !compileIdentifier.reference) {
	        return null;
	    }
	    var /** @type {?} */ ref = compileIdentifier.reference;
	    if (ref instanceof StaticSymbol) {
	        return ref.name;
	    }
	    if (ref['__anonymousType']) {
	        return ref['__anonymousType'];
	    }
	    var /** @type {?} */ identifier = _angular_core.ɵstringify(ref);
	    if (identifier.indexOf('(') >= 0) {
	        // case: anonymous functions!
	        identifier = "anonymous_" + _anonymousTypeIndex++;
	        ref['__anonymousType'] = identifier;
	    }
	    else {
	        identifier = _sanitizeIdentifier(identifier);
	    }
	    return identifier;
	}
	/**
	 * @param {?} compileIdentifier
	 * @return {?}
	 */
	function identifierModuleUrl(compileIdentifier) {
	    var /** @type {?} */ ref = compileIdentifier.reference;
	    if (ref instanceof StaticSymbol) {
	        return ref.filePath;
	    }
	    return _angular_core.ɵreflector.importUri(ref);
	}
	/**
	 * @param {?} compType
	 * @param {?} embeddedTemplateIndex
	 * @return {?}
	 */
	function viewClassName(compType, embeddedTemplateIndex) {
	    return "View_" + identifierName({ reference: compType }) + "_" + embeddedTemplateIndex;
	}
	/**
	 * @param {?} compType
	 * @return {?}
	 */
	function rendererTypeName(compType) {
	    return "RenderType_" + identifierName({ reference: compType });
	}
	/**
	 * @param {?} compType
	 * @return {?}
	 */
	function hostViewClassName(compType) {
	    return "HostView_" + identifierName({ reference: compType });
	}
	/**
	 * @param {?} dirType
	 * @return {?}
	 */
	function dirWrapperClassName(dirType) {
	    return "Wrapper_" + identifierName({ reference: dirType });
	}
	/**
	 * @param {?} compType
	 * @return {?}
	 */
	function componentFactoryName(compType) {
	    return identifierName({ reference: compType }) + "NgFactory";
	}
	var CompileSummaryKind = {};
	CompileSummaryKind.Pipe = 0;
	CompileSummaryKind.Directive = 1;
	CompileSummaryKind.NgModule = 2;
	CompileSummaryKind.Injectable = 3;
	CompileSummaryKind[CompileSummaryKind.Pipe] = "Pipe";
	CompileSummaryKind[CompileSummaryKind.Directive] = "Directive";
	CompileSummaryKind[CompileSummaryKind.NgModule] = "NgModule";
	CompileSummaryKind[CompileSummaryKind.Injectable] = "Injectable";
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function tokenName(token) {
	    return token.value != null ? _sanitizeIdentifier(token.value) : identifierName(token.identifier);
	}
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function tokenReference(token) {
	    if (token.identifier != null) {
	        return token.identifier.reference;
	    }
	    else {
	        return token.value;
	    }
	}
	/**
	 * Metadata about a stylesheet
	 */
	var CompileStylesheetMetadata = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function CompileStylesheetMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;
	        this.moduleUrl = moduleUrl || null;
	        this.styles = _normalizeArray(styles);
	        this.styleUrls = _normalizeArray(styleUrls);
	    }
	    return CompileStylesheetMetadata;
	}());
	/**
	 * Metadata regarding compilation of a template.
	 */
	var CompileTemplateMetadata = (function () {
	    /**
	     * @param {?} __0
	     */
	    function CompileTemplateMetadata(_a) {
	        var encapsulation = _a.encapsulation, template = _a.template, templateUrl = _a.templateUrl, styles = _a.styles, styleUrls = _a.styleUrls, externalStylesheets = _a.externalStylesheets, animations = _a.animations, ngContentSelectors = _a.ngContentSelectors, interpolation = _a.interpolation, isInline = _a.isInline;
	        this.encapsulation = encapsulation;
	        this.template = template;
	        this.templateUrl = templateUrl;
	        this.styles = _normalizeArray(styles);
	        this.styleUrls = _normalizeArray(styleUrls);
	        this.externalStylesheets = _normalizeArray(externalStylesheets);
	        this.animations = animations ? flatten(animations) : [];
	        this.ngContentSelectors = ngContentSelectors || [];
	        if (interpolation && interpolation.length != 2) {
	            throw new Error("'interpolation' should have a start and an end symbol.");
	        }
	        this.interpolation = interpolation;
	        this.isInline = isInline;
	    }
	    /**
	     * @return {?}
	     */
	    CompileTemplateMetadata.prototype.toSummary = function () {
	        return {
	            animations: this.animations.map(function (anim) { return anim.name; }),
	            ngContentSelectors: this.ngContentSelectors,
	            encapsulation: this.encapsulation,
	        };
	    };
	    return CompileTemplateMetadata;
	}());
	/**
	 * Metadata regarding compilation of a directive.
	 */
	var CompileDirectiveMetadata = (function () {
	    /**
	     * @param {?} __0
	     */
	    function CompileDirectiveMetadata(_a) {
	        var isHost = _a.isHost, type = _a.type, isComponent = _a.isComponent, selector = _a.selector, exportAs = _a.exportAs, changeDetection = _a.changeDetection, inputs = _a.inputs, outputs = _a.outputs, hostListeners = _a.hostListeners, hostProperties = _a.hostProperties, hostAttributes = _a.hostAttributes, providers = _a.providers, viewProviders = _a.viewProviders, queries = _a.queries, viewQueries = _a.viewQueries, entryComponents = _a.entryComponents, template = _a.template, componentViewType = _a.componentViewType, rendererType = _a.rendererType, componentFactory = _a.componentFactory;
	        this.isHost = !!isHost;
	        this.type = type;
	        this.isComponent = isComponent;
	        this.selector = selector;
	        this.exportAs = exportAs;
	        this.changeDetection = changeDetection;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.hostListeners = hostListeners;
	        this.hostProperties = hostProperties;
	        this.hostAttributes = hostAttributes;
	        this.providers = _normalizeArray(providers);
	        this.viewProviders = _normalizeArray(viewProviders);
	        this.queries = _normalizeArray(queries);
	        this.viewQueries = _normalizeArray(viewQueries);
	        this.entryComponents = _normalizeArray(entryComponents);
	        this.template = template;
	        this.componentViewType = componentViewType;
	        this.rendererType = rendererType;
	        this.componentFactory = componentFactory;
	    }
	    /**
	     * @param {?} __0
	     * @return {?}
	     */
	    CompileDirectiveMetadata.create = function (_a) {
	        var isHost = _a.isHost, type = _a.type, isComponent = _a.isComponent, selector = _a.selector, exportAs = _a.exportAs, changeDetection = _a.changeDetection, inputs = _a.inputs, outputs = _a.outputs, host = _a.host, providers = _a.providers, viewProviders = _a.viewProviders, queries = _a.queries, viewQueries = _a.viewQueries, entryComponents = _a.entryComponents, template = _a.template, componentViewType = _a.componentViewType, rendererType = _a.rendererType, componentFactory = _a.componentFactory;
	        var /** @type {?} */ hostListeners = {};
	        var /** @type {?} */ hostProperties = {};
	        var /** @type {?} */ hostAttributes = {};
	        if (host != null) {
	            Object.keys(host).forEach(function (key) {
	                var /** @type {?} */ value = host[key];
	                var /** @type {?} */ matches = key.match(HOST_REG_EXP);
	                if (matches === null) {
	                    hostAttributes[key] = value;
	                }
	                else if (matches[1] != null) {
	                    hostProperties[matches[1]] = value;
	                }
	                else if (matches[2] != null) {
	                    hostListeners[matches[2]] = value;
	                }
	            });
	        }
	        var /** @type {?} */ inputsMap = {};
	        if (inputs != null) {
	            inputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                inputsMap[parts[0]] = parts[1];
	            });
	        }
	        var /** @type {?} */ outputsMap = {};
	        if (outputs != null) {
	            outputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                outputsMap[parts[0]] = parts[1];
	            });
	        }
	        return new CompileDirectiveMetadata({
	            isHost: isHost,
	            type: type,
	            isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection,
	            inputs: inputsMap,
	            outputs: outputsMap,
	            hostListeners: hostListeners,
	            hostProperties: hostProperties,
	            hostAttributes: hostAttributes,
	            providers: providers,
	            viewProviders: viewProviders,
	            queries: queries,
	            viewQueries: viewQueries,
	            entryComponents: entryComponents,
	            template: template,
	            componentViewType: componentViewType,
	            rendererType: rendererType,
	            componentFactory: componentFactory,
	        });
	    };
	    /**
	     * @return {?}
	     */
	    CompileDirectiveMetadata.prototype.toSummary = function () {
	        return {
	            summaryKind: CompileSummaryKind.Directive,
	            type: this.type,
	            isComponent: this.isComponent,
	            selector: this.selector,
	            exportAs: this.exportAs,
	            inputs: this.inputs,
	            outputs: this.outputs,
	            hostListeners: this.hostListeners,
	            hostProperties: this.hostProperties,
	            hostAttributes: this.hostAttributes,
	            providers: this.providers,
	            viewProviders: this.viewProviders,
	            queries: this.queries,
	            viewQueries: this.viewQueries,
	            entryComponents: this.entryComponents,
	            changeDetection: this.changeDetection,
	            template: this.template && this.template.toSummary(),
	            componentViewType: this.componentViewType,
	            rendererType: this.rendererType,
	            componentFactory: this.componentFactory
	        };
	    };
	    return CompileDirectiveMetadata;
	}());
	/**
	 * Construct {\@link CompileDirectiveMetadata} from {\@link ComponentTypeMetadata} and a selector.
	 * @param {?} hostTypeReference
	 * @param {?} compMeta
	 * @param {?} hostViewType
	 * @return {?}
	 */
	function createHostComponentMeta(hostTypeReference, compMeta, hostViewType) {
	    var /** @type {?} */ template = CssSelector.parse(/** @type {?} */ ((compMeta.selector)))[0].getMatchingElementTemplate();
	    return CompileDirectiveMetadata.create({
	        isHost: true,
	        type: { reference: hostTypeReference, diDeps: [], lifecycleHooks: [] },
	        template: new CompileTemplateMetadata({
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            template: template,
	            templateUrl: '',
	            styles: [],
	            styleUrls: [],
	            ngContentSelectors: [],
	            animations: [],
	            isInline: true,
	            externalStylesheets: [],
	            interpolation: null
	        }),
	        exportAs: null,
	        changeDetection: _angular_core.ChangeDetectionStrategy.Default,
	        inputs: [],
	        outputs: [],
	        host: {},
	        isComponent: true,
	        selector: '*',
	        providers: [],
	        viewProviders: [],
	        queries: [],
	        viewQueries: [],
	        componentViewType: hostViewType,
	        rendererType: { id: '__Host__', encapsulation: _angular_core.ViewEncapsulation.None, styles: [], data: {} },
	        entryComponents: [],
	        componentFactory: null
	    });
	}
	var CompilePipeMetadata = (function () {
	    /**
	     * @param {?} __0
	     */
	    function CompilePipeMetadata(_a) {
	        var type = _a.type, name = _a.name, pure = _a.pure;
	        this.type = type;
	        this.name = name;
	        this.pure = !!pure;
	    }
	    /**
	     * @return {?}
	     */
	    CompilePipeMetadata.prototype.toSummary = function () {
	        return {
	            summaryKind: CompileSummaryKind.Pipe,
	            type: this.type,
	            name: this.name,
	            pure: this.pure
	        };
	    };
	    return CompilePipeMetadata;
	}());
	/**
	 * Metadata regarding compilation of a module.
	 */
	var CompileNgModuleMetadata = (function () {
	    /**
	     * @param {?} __0
	     */
	    function CompileNgModuleMetadata(_a) {
	        var type = _a.type, providers = _a.providers, declaredDirectives = _a.declaredDirectives, exportedDirectives = _a.exportedDirectives, declaredPipes = _a.declaredPipes, exportedPipes = _a.exportedPipes, entryComponents = _a.entryComponents, bootstrapComponents = _a.bootstrapComponents, importedModules = _a.importedModules, exportedModules = _a.exportedModules, schemas = _a.schemas, transitiveModule = _a.transitiveModule, id = _a.id;
	        this.type = type || null;
	        this.declaredDirectives = _normalizeArray(declaredDirectives);
	        this.exportedDirectives = _normalizeArray(exportedDirectives);
	        this.declaredPipes = _normalizeArray(declaredPipes);
	        this.exportedPipes = _normalizeArray(exportedPipes);
	        this.providers = _normalizeArray(providers);
	        this.entryComponents = _normalizeArray(entryComponents);
	        this.bootstrapComponents = _normalizeArray(bootstrapComponents);
	        this.importedModules = _normalizeArray(importedModules);
	        this.exportedModules = _normalizeArray(exportedModules);
	        this.schemas = _normalizeArray(schemas);
	        this.id = id || null;
	        this.transitiveModule = transitiveModule || null;
	    }
	    /**
	     * @return {?}
	     */
	    CompileNgModuleMetadata.prototype.toSummary = function () {
	        var /** @type {?} */ module = ((this.transitiveModule));
	        return {
	            summaryKind: CompileSummaryKind.NgModule,
	            type: this.type,
	            entryComponents: module.entryComponents,
	            providers: module.providers,
	            modules: module.modules,
	            exportedDirectives: module.exportedDirectives,
	            exportedPipes: module.exportedPipes
	        };
	    };
	    return CompileNgModuleMetadata;
	}());
	var TransitiveCompileNgModuleMetadata = (function () {
	    function TransitiveCompileNgModuleMetadata() {
	        this.directivesSet = new Set();
	        this.directives = [];
	        this.exportedDirectivesSet = new Set();
	        this.exportedDirectives = [];
	        this.pipesSet = new Set();
	        this.pipes = [];
	        this.exportedPipesSet = new Set();
	        this.exportedPipes = [];
	        this.modulesSet = new Set();
	        this.modules = [];
	        this.entryComponentsSet = new Set();
	        this.entryComponents = [];
	        this.providers = [];
	    }
	    /**
	     * @param {?} provider
	     * @param {?} module
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addProvider = function (provider, module) {
	        this.providers.push({ provider: provider, module: module });
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addDirective = function (id) {
	        if (!this.directivesSet.has(id.reference)) {
	            this.directivesSet.add(id.reference);
	            this.directives.push(id);
	        }
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function (id) {
	        if (!this.exportedDirectivesSet.has(id.reference)) {
	            this.exportedDirectivesSet.add(id.reference);
	            this.exportedDirectives.push(id);
	        }
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addPipe = function (id) {
	        if (!this.pipesSet.has(id.reference)) {
	            this.pipesSet.add(id.reference);
	            this.pipes.push(id);
	        }
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function (id) {
	        if (!this.exportedPipesSet.has(id.reference)) {
	            this.exportedPipesSet.add(id.reference);
	            this.exportedPipes.push(id);
	        }
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addModule = function (id) {
	        if (!this.modulesSet.has(id.reference)) {
	            this.modulesSet.add(id.reference);
	            this.modules.push(id);
	        }
	    };
	    /**
	     * @param {?} ec
	     * @return {?}
	     */
	    TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function (ec) {
	        if (!this.entryComponentsSet.has(ec.componentType)) {
	            this.entryComponentsSet.add(ec.componentType);
	            this.entryComponents.push(ec);
	        }
	    };
	    return TransitiveCompileNgModuleMetadata;
	}());
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function _normalizeArray(obj) {
	    return obj || [];
	}
	var ProviderMeta = (function () {
	    /**
	     * @param {?} token
	     * @param {?} __1
	     */
	    function ProviderMeta(token, _a) {
	        var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	        this.token = token;
	        this.useClass = useClass || null;
	        this.useValue = useValue;
	        this.useExisting = useExisting;
	        this.useFactory = useFactory || null;
	        this.dependencies = deps || null;
	        this.multi = !!multi;
	    }
	    return ProviderMeta;
	}());
	/**
	 * @template T
	 * @param {?} list
	 * @return {?}
	 */
	function flatten(list) {
	    return list.reduce(function (flat, item) {
	        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;
	        return ((flat)).concat(flatItem);
	    }, []);
	}
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function sourceUrl(url) {
	    // Note: We need 3 "/" so that ng shows up as a separate domain
	    // in the chrome dev tools.
	    return url.replace(/(\w+:\/\/[\w:-]+)?(\/+)?/, 'ng:///');
	}
	/**
	 * @param {?} ngModuleType
	 * @param {?} compMeta
	 * @param {?} templateMeta
	 * @return {?}
	 */
	function templateSourceUrl(ngModuleType, compMeta, templateMeta) {
	    var /** @type {?} */ url;
	    if (templateMeta.isInline) {
	        if (compMeta.type.reference instanceof StaticSymbol) {
	            // Note: a .ts file might contain multiple components with inline templates,
	            // so we need to give them unique urls, as these will be used for sourcemaps.
	            url = compMeta.type.reference.filePath + "." + compMeta.type.reference.name + ".html";
	        }
	        else {
	            url = identifierName(ngModuleType) + "/" + identifierName(compMeta.type) + ".html";
	        }
	    }
	    else {
	        url = ((templateMeta.templateUrl));
	    }
	    // always prepend ng:// to make angular resources easy to find and not clobber
	    // user resources.
	    return sourceUrl(url);
	}
	/**
	 * @param {?} meta
	 * @param {?} id
	 * @return {?}
	 */
	function sharedStylesheetJitUrl(meta, id) {
	    var /** @type {?} */ pathParts = ((meta.moduleUrl)).split(/\/\\/g);
	    var /** @type {?} */ baseName = pathParts[pathParts.length - 1];
	    return sourceUrl("css/" + id + baseName + ".ngstyle.js");
	}
	/**
	 * @param {?} moduleMeta
	 * @return {?}
	 */
	function ngModuleJitUrl(moduleMeta) {
	    return sourceUrl(identifierName(moduleMeta.type) + "/module.ngfactory.js");
	}
	/**
	 * @param {?} ngModuleType
	 * @param {?} compMeta
	 * @return {?}
	 */
	function templateJitUrl(ngModuleType, compMeta) {
	    return sourceUrl(identifierName(ngModuleType) + "/" + identifierName(compMeta.type) + ".ngfactory.js");
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CompilerConfig = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function CompilerConfig(_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.defaultEncapsulation, defaultEncapsulation = _c === void 0 ? _angular_core.ViewEncapsulation.Emulated : _c, _d = _b.useJit, useJit = _d === void 0 ? true : _d, missingTranslation = _b.missingTranslation, enableLegacyTemplate = _b.enableLegacyTemplate;
	        this.defaultEncapsulation = defaultEncapsulation;
	        this.useJit = !!useJit;
	        this.missingTranslation = missingTranslation || null;
	        this.enableLegacyTemplate = enableLegacyTemplate !== false;
	    }
	    return CompilerConfig;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ParserError = (function () {
	    /**
	     * @param {?} message
	     * @param {?} input
	     * @param {?} errLocation
	     * @param {?=} ctxLocation
	     */
	    function ParserError(message, input, errLocation, ctxLocation) {
	        this.input = input;
	        this.errLocation = errLocation;
	        this.ctxLocation = ctxLocation;
	        this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
	    }
	    return ParserError;
	}());
	var ParseSpan = (function () {
	    /**
	     * @param {?} start
	     * @param {?} end
	     */
	    function ParseSpan(start, end) {
	        this.start = start;
	        this.end = end;
	    }
	    return ParseSpan;
	}());
	var AST = (function () {
	    /**
	     * @param {?} span
	     */
	    function AST(span) {
	        this.span = span;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    AST.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return null;
	    };
	    /**
	     * @return {?}
	     */
	    AST.prototype.toString = function () { return 'AST'; };
	    return AST;
	}());
	/**
	 * Represents a quoted expression of the form:
	 *
	 * quote = prefix `:` uninterpretedExpression
	 * prefix = identifier
	 * uninterpretedExpression = arbitrary string
	 *
	 * A quoted expression is meant to be pre-processed by an AST transformer that
	 * converts it into another AST that no longer contains quoted expressions.
	 * It is meant to allow third-party developers to extend Angular template
	 * expression language. The `uninterpretedExpression` part of the quote is
	 * therefore not interpreted by the Angular's own expression parser.
	 */
	var Quote = (function (_super) {
	    __extends(Quote, _super);
	    /**
	     * @param {?} span
	     * @param {?} prefix
	     * @param {?} uninterpretedExpression
	     * @param {?} location
	     */
	    function Quote(span, prefix, uninterpretedExpression, location) {
	        var _this = _super.call(this, span) || this;
	        _this.prefix = prefix;
	        _this.uninterpretedExpression = uninterpretedExpression;
	        _this.location = location;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Quote.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitQuote(this, context);
	    };
	    /**
	     * @return {?}
	     */
	    Quote.prototype.toString = function () { return 'Quote'; };
	    return Quote;
	}(AST));
	var EmptyExpr = (function (_super) {
	    __extends(EmptyExpr, _super);
	    function EmptyExpr() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    EmptyExpr.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        // do nothing
	    };
	    return EmptyExpr;
	}(AST));
	var ImplicitReceiver = (function (_super) {
	    __extends(ImplicitReceiver, _super);
	    function ImplicitReceiver() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    ImplicitReceiver.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitImplicitReceiver(this, context);
	    };
	    return ImplicitReceiver;
	}(AST));
	/**
	 * Multiple expressions separated by a semicolon.
	 */
	var Chain = (function (_super) {
	    __extends(Chain, _super);
	    /**
	     * @param {?} span
	     * @param {?} expressions
	     */
	    function Chain(span, expressions) {
	        var _this = _super.call(this, span) || this;
	        _this.expressions = expressions;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Chain.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitChain(this, context);
	    };
	    return Chain;
	}(AST));
	var Conditional = (function (_super) {
	    __extends(Conditional, _super);
	    /**
	     * @param {?} span
	     * @param {?} condition
	     * @param {?} trueExp
	     * @param {?} falseExp
	     */
	    function Conditional(span, condition, trueExp, falseExp) {
	        var _this = _super.call(this, span) || this;
	        _this.condition = condition;
	        _this.trueExp = trueExp;
	        _this.falseExp = falseExp;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Conditional.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitConditional(this, context);
	    };
	    return Conditional;
	}(AST));
	var PropertyRead = (function (_super) {
	    __extends(PropertyRead, _super);
	    /**
	     * @param {?} span
	     * @param {?} receiver
	     * @param {?} name
	     */
	    function PropertyRead(span, receiver, name) {
	        var _this = _super.call(this, span) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    PropertyRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPropertyRead(this, context);
	    };
	    return PropertyRead;
	}(AST));
	var PropertyWrite = (function (_super) {
	    __extends(PropertyWrite, _super);
	    /**
	     * @param {?} span
	     * @param {?} receiver
	     * @param {?} name
	     * @param {?} value
	     */
	    function PropertyWrite(span, receiver, name, value) {
	        var _this = _super.call(this, span) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    PropertyWrite.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPropertyWrite(this, context);
	    };
	    return PropertyWrite;
	}(AST));
	var SafePropertyRead = (function (_super) {
	    __extends(SafePropertyRead, _super);
	    /**
	     * @param {?} span
	     * @param {?} receiver
	     * @param {?} name
	     */
	    function SafePropertyRead(span, receiver, name) {
	        var _this = _super.call(this, span) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    SafePropertyRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitSafePropertyRead(this, context);
	    };
	    return SafePropertyRead;
	}(AST));
	var KeyedRead = (function (_super) {
	    __extends(KeyedRead, _super);
	    /**
	     * @param {?} span
	     * @param {?} obj
	     * @param {?} key
	     */
	    function KeyedRead(span, obj, key) {
	        var _this = _super.call(this, span) || this;
	        _this.obj = obj;
	        _this.key = key;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    KeyedRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitKeyedRead(this, context);
	    };
	    return KeyedRead;
	}(AST));
	var KeyedWrite = (function (_super) {
	    __extends(KeyedWrite, _super);
	    /**
	     * @param {?} span
	     * @param {?} obj
	     * @param {?} key
	     * @param {?} value
	     */
	    function KeyedWrite(span, obj, key, value) {
	        var _this = _super.call(this, span) || this;
	        _this.obj = obj;
	        _this.key = key;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    KeyedWrite.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitKeyedWrite(this, context);
	    };
	    return KeyedWrite;
	}(AST));
	var BindingPipe = (function (_super) {
	    __extends(BindingPipe, _super);
	    /**
	     * @param {?} span
	     * @param {?} exp
	     * @param {?} name
	     * @param {?} args
	     */
	    function BindingPipe(span, exp, name, args) {
	        var _this = _super.call(this, span) || this;
	        _this.exp = exp;
	        _this.name = name;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    BindingPipe.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPipe(this, context);
	    };
	    return BindingPipe;
	}(AST));
	var LiteralPrimitive = (function (_super) {
	    __extends(LiteralPrimitive, _super);
	    /**
	     * @param {?} span
	     * @param {?} value
	     */
	    function LiteralPrimitive(span, value) {
	        var _this = _super.call(this, span) || this;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    LiteralPrimitive.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralPrimitive(this, context);
	    };
	    return LiteralPrimitive;
	}(AST));
	var LiteralArray = (function (_super) {
	    __extends(LiteralArray, _super);
	    /**
	     * @param {?} span
	     * @param {?} expressions
	     */
	    function LiteralArray(span, expressions) {
	        var _this = _super.call(this, span) || this;
	        _this.expressions = expressions;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    LiteralArray.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralArray(this, context);
	    };
	    return LiteralArray;
	}(AST));
	var LiteralMap = (function (_super) {
	    __extends(LiteralMap, _super);
	    /**
	     * @param {?} span
	     * @param {?} keys
	     * @param {?} values
	     */
	    function LiteralMap(span, keys, values) {
	        var _this = _super.call(this, span) || this;
	        _this.keys = keys;
	        _this.values = values;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    LiteralMap.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralMap(this, context);
	    };
	    return LiteralMap;
	}(AST));
	var Interpolation = (function (_super) {
	    __extends(Interpolation, _super);
	    /**
	     * @param {?} span
	     * @param {?} strings
	     * @param {?} expressions
	     */
	    function Interpolation(span, strings, expressions) {
	        var _this = _super.call(this, span) || this;
	        _this.strings = strings;
	        _this.expressions = expressions;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Interpolation.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitInterpolation(this, context);
	    };
	    return Interpolation;
	}(AST));
	var Binary = (function (_super) {
	    __extends(Binary, _super);
	    /**
	     * @param {?} span
	     * @param {?} operation
	     * @param {?} left
	     * @param {?} right
	     */
	    function Binary(span, operation, left, right) {
	        var _this = _super.call(this, span) || this;
	        _this.operation = operation;
	        _this.left = left;
	        _this.right = right;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Binary.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitBinary(this, context);
	    };
	    return Binary;
	}(AST));
	var PrefixNot = (function (_super) {
	    __extends(PrefixNot, _super);
	    /**
	     * @param {?} span
	     * @param {?} expression
	     */
	    function PrefixNot(span, expression) {
	        var _this = _super.call(this, span) || this;
	        _this.expression = expression;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    PrefixNot.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPrefixNot(this, context);
	    };
	    return PrefixNot;
	}(AST));
	var MethodCall = (function (_super) {
	    __extends(MethodCall, _super);
	    /**
	     * @param {?} span
	     * @param {?} receiver
	     * @param {?} name
	     * @param {?} args
	     */
	    function MethodCall(span, receiver, name, args) {
	        var _this = _super.call(this, span) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    MethodCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitMethodCall(this, context);
	    };
	    return MethodCall;
	}(AST));
	var SafeMethodCall = (function (_super) {
	    __extends(SafeMethodCall, _super);
	    /**
	     * @param {?} span
	     * @param {?} receiver
	     * @param {?} name
	     * @param {?} args
	     */
	    function SafeMethodCall(span, receiver, name, args) {
	        var _this = _super.call(this, span) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    SafeMethodCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitSafeMethodCall(this, context);
	    };
	    return SafeMethodCall;
	}(AST));
	var FunctionCall = (function (_super) {
	    __extends(FunctionCall, _super);
	    /**
	     * @param {?} span
	     * @param {?} target
	     * @param {?} args
	     */
	    function FunctionCall(span, target, args) {
	        var _this = _super.call(this, span) || this;
	        _this.target = target;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    FunctionCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitFunctionCall(this, context);
	    };
	    return FunctionCall;
	}(AST));
	var ASTWithSource = (function (_super) {
	    __extends(ASTWithSource, _super);
	    /**
	     * @param {?} ast
	     * @param {?} source
	     * @param {?} location
	     * @param {?} errors
	     */
	    function ASTWithSource(ast, source, location, errors) {
	        var _this = _super.call(this, new ParseSpan(0, source == null ? 0 : source.length)) || this;
	        _this.ast = ast;
	        _this.source = source;
	        _this.location = location;
	        _this.errors = errors;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    ASTWithSource.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return this.ast.visit(visitor, context);
	    };
	    /**
	     * @return {?}
	     */
	    ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	    return ASTWithSource;
	}(AST));
	var TemplateBinding = (function () {
	    /**
	     * @param {?} span
	     * @param {?} key
	     * @param {?} keyIsVar
	     * @param {?} name
	     * @param {?} expression
	     */
	    function TemplateBinding(span, key, keyIsVar, name, expression) {
	        this.span = span;
	        this.key = key;
	        this.keyIsVar = keyIsVar;
	        this.name = name;
	        this.expression = expression;
	    }
	    return TemplateBinding;
	}());
	var RecursiveAstVisitor = (function () {
	    function RecursiveAstVisitor() {
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
	        ast.left.visit(this);
	        ast.right.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
	        ast.condition.visit(this);
	        ast.trueExp.visit(this);
	        ast.falseExp.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
	        ast.exp.visit(this);
	        this.visitAll(ast.args, context);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
	        ((ast.target)).visit(this);
	        this.visitAll(ast.args, context);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
	        return this.visitAll(ast.expressions, context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
	        ast.obj.visit(this);
	        ast.key.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
	        ast.obj.visit(this);
	        ast.key.visit(this);
	        ast.value.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
	        return this.visitAll(ast.expressions, context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
	        ast.receiver.visit(this);
	        return this.visitAll(ast.args, context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
	        ast.expression.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
	        ast.receiver.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
	        ast.receiver.visit(this);
	        ast.value.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
	        ast.receiver.visit(this);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
	        ast.receiver.visit(this);
	        return this.visitAll(ast.args, context);
	    };
	    /**
	     * @param {?} asts
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
	        var _this = this;
	        asts.forEach(function (ast) { return ast.visit(_this, context); });
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null; };
	    return RecursiveAstVisitor;
	}());
	var AstTransformer = (function () {
	    function AstTransformer() {
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitImplicitReceiver = function (ast, context) { return ast; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitInterpolation = function (ast, context) {
	        return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitLiteralPrimitive = function (ast, context) {
	        return new LiteralPrimitive(ast.span, ast.value);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitPropertyRead = function (ast, context) {
	        return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitPropertyWrite = function (ast, context) {
	        return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitSafePropertyRead = function (ast, context) {
	        return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitMethodCall = function (ast, context) {
	        return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitSafeMethodCall = function (ast, context) {
	        return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitFunctionCall = function (ast, context) {
	        return new FunctionCall(ast.span, /** @type {?} */ ((ast.target)).visit(this), this.visitAll(ast.args));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitLiteralArray = function (ast, context) {
	        return new LiteralArray(ast.span, this.visitAll(ast.expressions));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitLiteralMap = function (ast, context) {
	        return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitBinary = function (ast, context) {
	        return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitPrefixNot = function (ast, context) {
	        return new PrefixNot(ast.span, ast.expression.visit(this));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitConditional = function (ast, context) {
	        return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitPipe = function (ast, context) {
	        return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitKeyedRead = function (ast, context) {
	        return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitKeyedWrite = function (ast, context) {
	        return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
	    };
	    /**
	     * @param {?} asts
	     * @return {?}
	     */
	    AstTransformer.prototype.visitAll = function (asts) {
	        var /** @type {?} */ res = new Array(asts.length);
	        for (var /** @type {?} */ i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitChain = function (ast, context) {
	        return new Chain(ast.span, this.visitAll(ast.expressions));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer.prototype.visitQuote = function (ast, context) {
	        return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);
	    };
	    return AstTransformer;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var $EOF = 0;
	var $TAB = 9;
	var $LF = 10;
	var $VTAB = 11;
	var $FF = 12;
	var $CR = 13;
	var $SPACE = 32;
	var $BANG = 33;
	var $DQ = 34;
	var $HASH = 35;
	var $$ = 36;
	var $PERCENT = 37;
	var $AMPERSAND = 38;
	var $SQ = 39;
	var $LPAREN = 40;
	var $RPAREN = 41;
	var $STAR = 42;
	var $PLUS = 43;
	var $COMMA = 44;
	var $MINUS = 45;
	var $PERIOD = 46;
	var $SLASH = 47;
	var $COLON = 58;
	var $SEMICOLON = 59;
	var $LT = 60;
	var $EQ = 61;
	var $GT = 62;
	var $QUESTION = 63;
	var $0 = 48;
	var $9 = 57;
	var $A = 65;
	var $E = 69;
	var $F = 70;
	var $X = 88;
	var $Z = 90;
	var $LBRACKET = 91;
	var $BACKSLASH = 92;
	var $RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	var $a = 97;
	var $e = 101;
	var $f = 102;
	var $n = 110;
	var $r = 114;
	var $t = 116;
	var $u = 117;
	var $v = 118;
	var $x = 120;
	var $z = 122;
	var $LBRACE = 123;
	var $BAR = 124;
	var $RBRACE = 125;
	var $NBSP = 160;
	var $BT = 96;
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isWhitespace(code) {
	    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isDigit(code) {
	    return $0 <= code && code <= $9;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isAsciiLetter(code) {
	    return code >= $a && code <= $z || code >= $A && code <= $Z;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isAsciiHexDigit(code) {
	    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
	}
	/**
	 * A replacement for \@Injectable to be used in the compiler, so that
	 * we don't try to evaluate the metadata in the compiler during AoT.
	 * This decorator is enough to make the compiler work with the ReflectiveInjector though.
	 * \@Annotation
	 * @return {?}
	 */
	function CompilerInjectable() {
	    return function (x) { return x; };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} identifier
	 * @param {?} value
	 * @return {?}
	 */
	function assertArrayOfStrings(identifier, value) {
	    if (!_angular_core.isDevMode() || value == null) {
	        return;
	    }
	    if (!Array.isArray(value)) {
	        throw new Error("Expected '" + identifier + "' to be an array of strings.");
	    }
	    for (var /** @type {?} */ i = 0; i < value.length; i += 1) {
	        if (typeof value[i] !== 'string') {
	            throw new Error("Expected '" + identifier + "' to be an array of strings.");
	        }
	    }
	}
	var INTERPOLATION_BLACKLIST_REGEXPS = [
	    /^\s*$/,
	    /[<>]/,
	    /^[{}]$/,
	    /&(#|[a-z])/i,
	    /^\/\//,
	];
	/**
	 * @param {?} identifier
	 * @param {?} value
	 * @return {?}
	 */
	function assertInterpolationSymbols(identifier, value) {
	    if (value != null && !(Array.isArray(value) && value.length == 2)) {
	        throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
	    }
	    else if (_angular_core.isDevMode() && value != null) {
	        var /** @type {?} */ start_1 = (value[0]);
	        var /** @type {?} */ end_1 = (value[1]);
	        // black list checking
	        INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
	            if (regexp.test(start_1) || regexp.test(end_1)) {
	                throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
	            }
	        });
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var InterpolationConfig = (function () {
	    /**
	     * @param {?} start
	     * @param {?} end
	     */
	    function InterpolationConfig(start, end) {
	        this.start = start;
	        this.end = end;
	    }
	    /**
	     * @param {?} markers
	     * @return {?}
	     */
	    InterpolationConfig.fromArray = function (markers) {
	        if (!markers) {
	            return DEFAULT_INTERPOLATION_CONFIG;
	        }
	        assertInterpolationSymbols('interpolation', markers);
	        return new InterpolationConfig(markers[0], markers[1]);
	    };
	    
	    return InterpolationConfig;
	}());
	var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TokenType = {};
	TokenType.Character = 0;
	TokenType.Identifier = 1;
	TokenType.Keyword = 2;
	TokenType.String = 3;
	TokenType.Operator = 4;
	TokenType.Number = 5;
	TokenType.Error = 6;
	TokenType[TokenType.Character] = "Character";
	TokenType[TokenType.Identifier] = "Identifier";
	TokenType[TokenType.Keyword] = "Keyword";
	TokenType[TokenType.String] = "String";
	TokenType[TokenType.Operator] = "Operator";
	TokenType[TokenType.Number] = "Number";
	TokenType[TokenType.Error] = "Error";
	var KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
	var Lexer = (function () {
	    function Lexer() {
	    }
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    Lexer.prototype.tokenize = function (text) {
	        var /** @type {?} */ scanner = new _Scanner(text);
	        var /** @type {?} */ tokens = [];
	        var /** @type {?} */ token = scanner.scanToken();
	        while (token != null) {
	            tokens.push(token);
	            token = scanner.scanToken();
	        }
	        return tokens;
	    };
	    return Lexer;
	}());
	Lexer.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	Lexer.ctorParameters = function () { return []; };
	var Token = (function () {
	    /**
	     * @param {?} index
	     * @param {?} type
	     * @param {?} numValue
	     * @param {?} strValue
	     */
	    function Token(index, type, numValue, strValue) {
	        this.index = index;
	        this.type = type;
	        this.numValue = numValue;
	        this.strValue = strValue;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    Token.prototype.isCharacter = function (code) {
	        return this.type == TokenType.Character && this.numValue == code;
	    };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isNumber = function () { return this.type == TokenType.Number; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isString = function () { return this.type == TokenType.String; };
	    /**
	     * @param {?} operater
	     * @return {?}
	     */
	    Token.prototype.isOperator = function (operater) {
	        return this.type == TokenType.Operator && this.strValue == operater;
	    };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isIdentifier = function () { return this.type == TokenType.Identifier; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeyword = function () { return this.type == TokenType.Keyword; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordLet = function () { return this.type == TokenType.Keyword && this.strValue == 'let'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordAs = function () { return this.type == TokenType.Keyword && this.strValue == 'as'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordNull = function () { return this.type == TokenType.Keyword && this.strValue == 'null'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordUndefined = function () {
	        return this.type == TokenType.Keyword && this.strValue == 'undefined';
	    };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordTrue = function () { return this.type == TokenType.Keyword && this.strValue == 'true'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordFalse = function () { return this.type == TokenType.Keyword && this.strValue == 'false'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isKeywordThis = function () { return this.type == TokenType.Keyword && this.strValue == 'this'; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.isError = function () { return this.type == TokenType.Error; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.toNumber = function () { return this.type == TokenType.Number ? this.numValue : -1; };
	    /**
	     * @return {?}
	     */
	    Token.prototype.toString = function () {
	        switch (this.type) {
	            case TokenType.Character:
	            case TokenType.Identifier:
	            case TokenType.Keyword:
	            case TokenType.Operator:
	            case TokenType.String:
	            case TokenType.Error:
	                return this.strValue;
	            case TokenType.Number:
	                return this.numValue.toString();
	            default:
	                return null;
	        }
	    };
	    return Token;
	}());
	/**
	 * @param {?} index
	 * @param {?} code
	 * @return {?}
	 */
	function newCharacterToken(index, code) {
	    return new Token(index, TokenType.Character, code, String.fromCharCode(code));
	}
	/**
	 * @param {?} index
	 * @param {?} text
	 * @return {?}
	 */
	function newIdentifierToken(index, text) {
	    return new Token(index, TokenType.Identifier, 0, text);
	}
	/**
	 * @param {?} index
	 * @param {?} text
	 * @return {?}
	 */
	function newKeywordToken(index, text) {
	    return new Token(index, TokenType.Keyword, 0, text);
	}
	/**
	 * @param {?} index
	 * @param {?} text
	 * @return {?}
	 */
	function newOperatorToken(index, text) {
	    return new Token(index, TokenType.Operator, 0, text);
	}
	/**
	 * @param {?} index
	 * @param {?} text
	 * @return {?}
	 */
	function newStringToken(index, text) {
	    return new Token(index, TokenType.String, 0, text);
	}
	/**
	 * @param {?} index
	 * @param {?} n
	 * @return {?}
	 */
	function newNumberToken(index, n) {
	    return new Token(index, TokenType.Number, n, '');
	}
	/**
	 * @param {?} index
	 * @param {?} message
	 * @return {?}
	 */
	function newErrorToken(index, message) {
	    return new Token(index, TokenType.Error, 0, message);
	}
	var EOF = new Token(-1, TokenType.Character, 0, '');
	var _Scanner = (function () {
	    /**
	     * @param {?} input
	     */
	    function _Scanner(input) {
	        this.input = input;
	        this.peek = 0;
	        this.index = -1;
	        this.length = input.length;
	        this.advance();
	    }
	    /**
	     * @return {?}
	     */
	    _Scanner.prototype.advance = function () {
	        this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
	    };
	    /**
	     * @return {?}
	     */
	    _Scanner.prototype.scanToken = function () {
	        var /** @type {?} */ input = this.input, /** @type {?} */ length = this.length;
	        var /** @type {?} */ peek = this.peek, /** @type {?} */ index = this.index;
	        // Skip whitespace.
	        while (peek <= $SPACE) {
	            if (++index >= length) {
	                peek = $EOF;
	                break;
	            }
	            else {
	                peek = input.charCodeAt(index);
	            }
	        }
	        this.peek = peek;
	        this.index = index;
	        if (index >= length) {
	            return null;
	        }
	        // Handle identifiers and numbers.
	        if (isIdentifierStart(peek))
	            return this.scanIdentifier();
	        if (isDigit(peek))
	            return this.scanNumber(index);
	        var /** @type {?} */ start = index;
	        switch (peek) {
	            case $PERIOD:
	                this.advance();
	                return isDigit(this.peek) ? this.scanNumber(start) :
	                    newCharacterToken(start, $PERIOD);
	            case $LPAREN:
	            case $RPAREN:
	            case $LBRACE:
	            case $RBRACE:
	            case $LBRACKET:
	            case $RBRACKET:
	            case $COMMA:
	            case $COLON:
	            case $SEMICOLON:
	                return this.scanCharacter(start, peek);
	            case $SQ:
	            case $DQ:
	                return this.scanString();
	            case $HASH:
	            case $PLUS:
	            case $MINUS:
	            case $STAR:
	            case $SLASH:
	            case $PERCENT:
	            case $CARET:
	                return this.scanOperator(start, String.fromCharCode(peek));
	            case $QUESTION:
	                return this.scanComplexOperator(start, '?', $PERIOD, '.');
	            case $LT:
	            case $GT:
	                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
	            case $BANG:
	            case $EQ:
	                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
	            case $AMPERSAND:
	                return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
	            case $BAR:
	                return this.scanComplexOperator(start, '|', $BAR, '|');
	            case $NBSP:
	                while (isWhitespace(this.peek))
	                    this.advance();
	                return this.scanToken();
	        }
	        this.advance();
	        return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
	    };
	    /**
	     * @param {?} start
	     * @param {?} code
	     * @return {?}
	     */
	    _Scanner.prototype.scanCharacter = function (start, code) {
	        this.advance();
	        return newCharacterToken(start, code);
	    };
	    /**
	     * @param {?} start
	     * @param {?} str
	     * @return {?}
	     */
	    _Scanner.prototype.scanOperator = function (start, str) {
	        this.advance();
	        return newOperatorToken(start, str);
	    };
	    /**
	     * Tokenize a 2/3 char long operator
	     *
	     * @param {?} start start index in the expression
	     * @param {?} one first symbol (always part of the operator)
	     * @param {?} twoCode code point for the second symbol
	     * @param {?} two second symbol (part of the operator when the second code point matches)
	     * @param {?=} threeCode code point for the third symbol
	     * @param {?=} three third symbol (part of the operator when provided and matches source expression)
	     * @return {?}
	     */
	    _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	        this.advance();
	        var /** @type {?} */ str = one;
	        if (this.peek == twoCode) {
	            this.advance();
	            str += two;
	        }
	        if (threeCode != null && this.peek == threeCode) {
	            this.advance();
	            str += three;
	        }
	        return newOperatorToken(start, str);
	    };
	    /**
	     * @return {?}
	     */
	    _Scanner.prototype.scanIdentifier = function () {
	        var /** @type {?} */ start = this.index;
	        this.advance();
	        while (isIdentifierPart(this.peek))
	            this.advance();
	        var /** @type {?} */ str = this.input.substring(start, this.index);
	        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :
	            newIdentifierToken(start, str);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Scanner.prototype.scanNumber = function (start) {
	        var /** @type {?} */ simple = (this.index === start);
	        this.advance(); // Skip initial digit.
	        while (true) {
	            if (isDigit(this.peek)) {
	            }
	            else if (this.peek == $PERIOD) {
	                simple = false;
	            }
	            else if (isExponentStart(this.peek)) {
	                this.advance();
	                if (isExponentSign(this.peek))
	                    this.advance();
	                if (!isDigit(this.peek))
	                    return this.error('Invalid exponent', -1);
	                simple = false;
	            }
	            else {
	                break;
	            }
	            this.advance();
	        }
	        var /** @type {?} */ str = this.input.substring(start, this.index);
	        var /** @type {?} */ value = simple ? parseIntAutoRadix(str) : parseFloat(str);
	        return newNumberToken(start, value);
	    };
	    /**
	     * @return {?}
	     */
	    _Scanner.prototype.scanString = function () {
	        var /** @type {?} */ start = this.index;
	        var /** @type {?} */ quote = this.peek;
	        this.advance(); // Skip initial quote.
	        var /** @type {?} */ buffer = '';
	        var /** @type {?} */ marker = this.index;
	        var /** @type {?} */ input = this.input;
	        while (this.peek != quote) {
	            if (this.peek == $BACKSLASH) {
	                buffer += input.substring(marker, this.index);
	                this.advance();
	                var /** @type {?} */ unescapedCode = void 0;
	                // Workaround for TS2.1-introduced type strictness
	                this.peek = this.peek;
	                if (this.peek == $u) {
	                    // 4 character hex code for unicode character.
	                    var /** @type {?} */ hex = input.substring(this.index + 1, this.index + 5);
	                    if (/^[0-9a-f]+$/i.test(hex)) {
	                        unescapedCode = parseInt(hex, 16);
	                    }
	                    else {
	                        return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                    }
	                    for (var /** @type {?} */ i = 0; i < 5; i++) {
	                        this.advance();
	                    }
	                }
	                else {
	                    unescapedCode = unescape(this.peek);
	                    this.advance();
	                }
	                buffer += String.fromCharCode(unescapedCode);
	                marker = this.index;
	            }
	            else if (this.peek == $EOF) {
	                return this.error('Unterminated quote', 0);
	            }
	            else {
	                this.advance();
	            }
	        }
	        var /** @type {?} */ last = input.substring(marker, this.index);
	        this.advance(); // Skip terminating quote.
	        return newStringToken(start, buffer + last);
	    };
	    /**
	     * @param {?} message
	     * @param {?} offset
	     * @return {?}
	     */
	    _Scanner.prototype.error = function (message, offset) {
	        var /** @type {?} */ position = this.index + offset;
	        return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	    };
	    return _Scanner;
	}());
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isIdentifierStart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||
	        (code == $_) || (code == $$);
	}
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function isIdentifier(input) {
	    if (input.length == 0)
	        return false;
	    var /** @type {?} */ scanner = new _Scanner(input);
	    if (!isIdentifierStart(scanner.peek))
	        return false;
	    scanner.advance();
	    while (scanner.peek !== $EOF) {
	        if (!isIdentifierPart(scanner.peek))
	            return false;
	        scanner.advance();
	    }
	    return true;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isIdentifierPart(code) {
	    return isAsciiLetter(code) || isDigit(code) || (code == $_) ||
	        (code == $$);
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isExponentStart(code) {
	    return code == $e || code == $E;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isExponentSign(code) {
	    return code == $MINUS || code == $PLUS;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isQuote(code) {
	    return code === $SQ || code === $DQ || code === $BT;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function unescape(code) {
	    switch (code) {
	        case $n:
	            return $LF;
	        case $f:
	            return $FF;
	        case $r:
	            return $CR;
	        case $t:
	            return $TAB;
	        case $v:
	            return $VTAB;
	        default:
	            return code;
	    }
	}
	/**
	 * @param {?} text
	 * @return {?}
	 */
	function parseIntAutoRadix(text) {
	    var /** @type {?} */ result = parseInt(text);
	    if (isNaN(result)) {
	        throw new Error('Invalid integer literal when parsing ' + text);
	    }
	    return result;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SplitInterpolation = (function () {
	    /**
	     * @param {?} strings
	     * @param {?} expressions
	     * @param {?} offsets
	     */
	    function SplitInterpolation(strings, expressions, offsets) {
	        this.strings = strings;
	        this.expressions = expressions;
	        this.offsets = offsets;
	    }
	    return SplitInterpolation;
	}());
	var TemplateBindingParseResult = (function () {
	    /**
	     * @param {?} templateBindings
	     * @param {?} warnings
	     * @param {?} errors
	     */
	    function TemplateBindingParseResult(templateBindings, warnings, errors) {
	        this.templateBindings = templateBindings;
	        this.warnings = warnings;
	        this.errors = errors;
	    }
	    return TemplateBindingParseResult;
	}());
	/**
	 * @param {?} config
	 * @return {?}
	 */
	function _createInterpolateRegExp(config) {
	    var /** @type {?} */ pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
	    return new RegExp(pattern, 'g');
	}
	var Parser = (function () {
	    /**
	     * @param {?} _lexer
	     */
	    function Parser(_lexer) {
	        this._lexer = _lexer;
	        this.errors = [];
	    }
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype.parseAction = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        this._checkNoInterpolation(input, location, interpolationConfig);
	        var /** @type {?} */ sourceToLex = this._stripComments(input);
	        var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));
	        var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)
	            .parseChain();
	        return new ASTWithSource(ast, input, location, this.errors);
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
	        return new ASTWithSource(ast, input, location, this.errors);
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
	        var /** @type {?} */ errors = SimpleExpressionChecker.check(ast);
	        if (errors.length > 0) {
	            this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
	        }
	        return new ASTWithSource(ast, input, location, this.errors);
	    };
	    /**
	     * @param {?} message
	     * @param {?} input
	     * @param {?} errLocation
	     * @param {?=} ctxLocation
	     * @return {?}
	     */
	    Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
	        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
	        // Quotes expressions use 3rd-party expression language. We don't want to use
	        // our lexer or parser for that, so we check for that ahead of time.
	        var /** @type {?} */ quote = this._parseQuote(input, location);
	        if (quote != null) {
	            return quote;
	        }
	        this._checkNoInterpolation(input, location, interpolationConfig);
	        var /** @type {?} */ sourceToLex = this._stripComments(input);
	        var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);
	        return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)
	            .parseChain();
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @return {?}
	     */
	    Parser.prototype._parseQuote = function (input, location) {
	        if (input == null)
	            return null;
	        var /** @type {?} */ prefixSeparatorIndex = input.indexOf(':');
	        if (prefixSeparatorIndex == -1)
	            return null;
	        var /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();
	        if (!isIdentifier(prefix))
	            return null;
	        var /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
	        return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
	    };
	    /**
	     * @param {?} prefixToken
	     * @param {?} input
	     * @param {?} location
	     * @return {?}
	     */
	    Parser.prototype.parseTemplateBindings = function (prefixToken, input, location) {
	        var /** @type {?} */ tokens = this._lexer.tokenize(input);
	        if (prefixToken) {
	            // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).
	            var /** @type {?} */ prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {
	                t.index = 0;
	                return t;
	            });
	            tokens.unshift.apply(tokens, prefixTokens);
	        }
	        return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)
	            .parseTemplateBindings();
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ split = this.splitInterpolation(input, location, interpolationConfig);
	        if (split == null)
	            return null;
	        var /** @type {?} */ expressions = [];
	        for (var /** @type {?} */ i = 0; i < split.expressions.length; ++i) {
	            var /** @type {?} */ expressionText = split.expressions[i];
	            var /** @type {?} */ sourceToLex = this._stripComments(expressionText);
	            var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
	            var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))
	                .parseChain();
	            expressions.push(ast);
	        }
	        return new ASTWithSource(new Interpolation(new ParseSpan(0, input == null ? 0 : input.length), split.strings, expressions), input, location, this.errors);
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
	        var /** @type {?} */ parts = input.split(regexp);
	        if (parts.length <= 1) {
	            return null;
	        }
	        var /** @type {?} */ strings = [];
	        var /** @type {?} */ expressions = [];
	        var /** @type {?} */ offsets = [];
	        var /** @type {?} */ offset = 0;
	        for (var /** @type {?} */ i = 0; i < parts.length; i++) {
	            var /** @type {?} */ part = parts[i];
	            if (i % 2 === 0) {
	                // fixed string
	                strings.push(part);
	                offset += part.length;
	            }
	            else if (part.trim().length > 0) {
	                offset += interpolationConfig.start.length;
	                expressions.push(part);
	                offsets.push(offset);
	                offset += part.length + interpolationConfig.end.length;
	            }
	            else {
	                this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
	                expressions.push('$implict');
	                offsets.push(offset);
	            }
	        }
	        return new SplitInterpolation(strings, expressions, offsets);
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @return {?}
	     */
	    Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	        return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, input == null ? 0 : input.length), input), input, location, this.errors);
	    };
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    Parser.prototype._stripComments = function (input) {
	        var /** @type {?} */ i = this._commentStart(input);
	        return i != null ? input.substring(0, i).trim() : input;
	    };
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    Parser.prototype._commentStart = function (input) {
	        var /** @type {?} */ outerQuote = null;
	        for (var /** @type {?} */ i = 0; i < input.length - 1; i++) {
	            var /** @type {?} */ char = input.charCodeAt(i);
	            var /** @type {?} */ nextChar = input.charCodeAt(i + 1);
	            if (char === $SLASH && nextChar == $SLASH && outerQuote == null)
	                return i;
	            if (outerQuote === char) {
	                outerQuote = null;
	            }
	            else if (outerQuote == null && isQuote(char)) {
	                outerQuote = char;
	            }
	        }
	        return null;
	    };
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
	        var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
	        var /** @type {?} */ parts = input.split(regexp);
	        if (parts.length > 1) {
	            this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
	        }
	    };
	    /**
	     * @param {?} parts
	     * @param {?} partInErrIdx
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
	        var /** @type {?} */ errLocation = '';
	        for (var /** @type {?} */ j = 0; j < partInErrIdx; j++) {
	            errLocation += j % 2 === 0 ?
	                parts[j] :
	                "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
	        }
	        return errLocation.length;
	    };
	    return Parser;
	}());
	Parser.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	Parser.ctorParameters = function () { return [
	    { type: Lexer, },
	]; };
	var _ParseAST = (function () {
	    /**
	     * @param {?} input
	     * @param {?} location
	     * @param {?} tokens
	     * @param {?} inputLength
	     * @param {?} parseAction
	     * @param {?} errors
	     * @param {?} offset
	     */
	    function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
	        this.input = input;
	        this.location = location;
	        this.tokens = tokens;
	        this.inputLength = inputLength;
	        this.parseAction = parseAction;
	        this.errors = errors;
	        this.offset = offset;
	        this.rparensExpected = 0;
	        this.rbracketsExpected = 0;
	        this.rbracesExpected = 0;
	        this.index = 0;
	    }
	    /**
	     * @param {?} offset
	     * @return {?}
	     */
	    _ParseAST.prototype.peek = function (offset) {
	        var /** @type {?} */ i = this.index + offset;
	        return i < this.tokens.length ? this.tokens[i] : EOF;
	    };
	    Object.defineProperty(_ParseAST.prototype, "next", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.peek(0); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return (this.index < this.tokens.length) ? this.next.index + this.offset :
	                this.inputLength + this.offset;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _ParseAST.prototype.span = function (start) { return new ParseSpan(start, this.inputIndex); };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.advance = function () { this.index++; };
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    _ParseAST.prototype.optionalCharacter = function (code) {
	        if (this.next.isCharacter(code)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet(); };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.peekKeywordAs = function () { return this.next.isKeywordAs(); };
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    _ParseAST.prototype.expectCharacter = function (code) {
	        if (this.optionalCharacter(code))
	            return;
	        this.error("Missing expected " + String.fromCharCode(code));
	    };
	    /**
	     * @param {?} op
	     * @return {?}
	     */
	    _ParseAST.prototype.optionalOperator = function (op) {
	        if (this.next.isOperator(op)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    /**
	     * @param {?} operator
	     * @return {?}
	     */
	    _ParseAST.prototype.expectOperator = function (operator) {
	        if (this.optionalOperator(operator))
	            return;
	        this.error("Missing expected operator " + operator);
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	        var /** @type {?} */ n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword()) {
	            this.error("Unexpected token " + n + ", expected identifier or keyword");
	            return '';
	        }
	        this.advance();
	        return n.toString();
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	        var /** @type {?} */ n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	            return '';
	        }
	        this.advance();
	        return n.toString();
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseChain = function () {
	        var /** @type {?} */ exprs = [];
	        var /** @type {?} */ start = this.inputIndex;
	        while (this.index < this.tokens.length) {
	            var /** @type {?} */ expr = this.parsePipe();
	            exprs.push(expr);
	            if (this.optionalCharacter($SEMICOLON)) {
	                if (!this.parseAction) {
	                    this.error('Binding expression cannot contain chained expression');
	                }
	                while (this.optionalCharacter($SEMICOLON)) {
	                } // read all semicolons
	            }
	            else if (this.index < this.tokens.length) {
	                this.error("Unexpected token '" + this.next + "'");
	            }
	        }
	        if (exprs.length == 0)
	            return new EmptyExpr(this.span(start));
	        if (exprs.length == 1)
	            return exprs[0];
	        return new Chain(this.span(start), exprs);
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parsePipe = function () {
	        var /** @type {?} */ result = this.parseExpression();
	        if (this.optionalOperator('|')) {
	            if (this.parseAction) {
	                this.error('Cannot have a pipe in an action expression');
	            }
	            do {
	                var /** @type {?} */ name = ((this.expectIdentifierOrKeyword()));
	                var /** @type {?} */ args = [];
	                while (this.optionalCharacter($COLON)) {
	                    args.push(this.parseExpression());
	                }
	                result = new BindingPipe(this.span(result.span.start), result, name, args);
	            } while (this.optionalOperator('|'));
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseConditional = function () {
	        var /** @type {?} */ start = this.inputIndex;
	        var /** @type {?} */ result = this.parseLogicalOr();
	        if (this.optionalOperator('?')) {
	            var /** @type {?} */ yes = this.parsePipe();
	            var /** @type {?} */ no = void 0;
	            if (!this.optionalCharacter($COLON)) {
	                var /** @type {?} */ end = this.inputIndex;
	                var /** @type {?} */ expression = this.input.substring(start, end);
	                this.error("Conditional expression " + expression + " requires all 3 expressions");
	                no = new EmptyExpr(this.span(start));
	            }
	            else {
	                no = this.parsePipe();
	            }
	            return new Conditional(this.span(start), result, yes, no);
	        }
	        else {
	            return result;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseLogicalOr = function () {
	        // '||'
	        var /** @type {?} */ result = this.parseLogicalAnd();
	        while (this.optionalOperator('||')) {
	            var /** @type {?} */ right = this.parseLogicalAnd();
	            result = new Binary(this.span(result.span.start), '||', result, right);
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseLogicalAnd = function () {
	        // '&&'
	        var /** @type {?} */ result = this.parseEquality();
	        while (this.optionalOperator('&&')) {
	            var /** @type {?} */ right = this.parseEquality();
	            result = new Binary(this.span(result.span.start), '&&', result, right);
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseEquality = function () {
	        // '==','!=','===','!=='
	        var /** @type {?} */ result = this.parseRelational();
	        while (this.next.type == TokenType.Operator) {
	            var /** @type {?} */ operator = this.next.strValue;
	            switch (operator) {
	                case '==':
	                case '===':
	                case '!=':
	                case '!==':
	                    this.advance();
	                    var /** @type {?} */ right = this.parseRelational();
	                    result = new Binary(this.span(result.span.start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseRelational = function () {
	        // '<', '>', '<=', '>='
	        var /** @type {?} */ result = this.parseAdditive();
	        while (this.next.type == TokenType.Operator) {
	            var /** @type {?} */ operator = this.next.strValue;
	            switch (operator) {
	                case '<':
	                case '>':
	                case '<=':
	                case '>=':
	                    this.advance();
	                    var /** @type {?} */ right = this.parseAdditive();
	                    result = new Binary(this.span(result.span.start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseAdditive = function () {
	        // '+', '-'
	        var /** @type {?} */ result = this.parseMultiplicative();
	        while (this.next.type == TokenType.Operator) {
	            var /** @type {?} */ operator = this.next.strValue;
	            switch (operator) {
	                case '+':
	                case '-':
	                    this.advance();
	                    var /** @type {?} */ right = this.parseMultiplicative();
	                    result = new Binary(this.span(result.span.start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseMultiplicative = function () {
	        // '*', '%', '/'
	        var /** @type {?} */ result = this.parsePrefix();
	        while (this.next.type == TokenType.Operator) {
	            var /** @type {?} */ operator = this.next.strValue;
	            switch (operator) {
	                case '*':
	                case '%':
	                case '/':
	                    this.advance();
	                    var /** @type {?} */ right = this.parsePrefix();
	                    result = new Binary(this.span(result.span.start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parsePrefix = function () {
	        if (this.next.type == TokenType.Operator) {
	            var /** @type {?} */ start = this.inputIndex;
	            var /** @type {?} */ operator = this.next.strValue;
	            var /** @type {?} */ result = void 0;
	            switch (operator) {
	                case '+':
	                    this.advance();
	                    return this.parsePrefix();
	                case '-':
	                    this.advance();
	                    result = this.parsePrefix();
	                    return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
	                case '!':
	                    this.advance();
	                    result = this.parsePrefix();
	                    return new PrefixNot(this.span(start), result);
	            }
	        }
	        return this.parseCallChain();
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseCallChain = function () {
	        var /** @type {?} */ result = this.parsePrimary();
	        while (true) {
	            if (this.optionalCharacter($PERIOD)) {
	                result = this.parseAccessMemberOrMethodCall(result, false);
	            }
	            else if (this.optionalOperator('?.')) {
	                result = this.parseAccessMemberOrMethodCall(result, true);
	            }
	            else if (this.optionalCharacter($LBRACKET)) {
	                this.rbracketsExpected++;
	                var /** @type {?} */ key = this.parsePipe();
	                this.rbracketsExpected--;
	                this.expectCharacter($RBRACKET);
	                if (this.optionalOperator('=')) {
	                    var /** @type {?} */ value = this.parseConditional();
	                    result = new KeyedWrite(this.span(result.span.start), result, key, value);
	                }
	                else {
	                    result = new KeyedRead(this.span(result.span.start), result, key);
	                }
	            }
	            else if (this.optionalCharacter($LPAREN)) {
	                this.rparensExpected++;
	                var /** @type {?} */ args = this.parseCallArguments();
	                this.rparensExpected--;
	                this.expectCharacter($RPAREN);
	                result = new FunctionCall(this.span(result.span.start), result, args);
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parsePrimary = function () {
	        var /** @type {?} */ start = this.inputIndex;
	        if (this.optionalCharacter($LPAREN)) {
	            this.rparensExpected++;
	            var /** @type {?} */ result = this.parsePipe();
	            this.rparensExpected--;
	            this.expectCharacter($RPAREN);
	            return result;
	        }
	        else if (this.next.isKeywordNull()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), null);
	        }
	        else if (this.next.isKeywordUndefined()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), void 0);
	        }
	        else if (this.next.isKeywordTrue()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), true);
	        }
	        else if (this.next.isKeywordFalse()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), false);
	        }
	        else if (this.next.isKeywordThis()) {
	            this.advance();
	            return new ImplicitReceiver(this.span(start));
	        }
	        else if (this.optionalCharacter($LBRACKET)) {
	            this.rbracketsExpected++;
	            var /** @type {?} */ elements = this.parseExpressionList($RBRACKET);
	            this.rbracketsExpected--;
	            this.expectCharacter($RBRACKET);
	            return new LiteralArray(this.span(start), elements);
	        }
	        else if (this.next.isCharacter($LBRACE)) {
	            return this.parseLiteralMap();
	        }
	        else if (this.next.isIdentifier()) {
	            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
	        }
	        else if (this.next.isNumber()) {
	            var /** @type {?} */ value = this.next.toNumber();
	            this.advance();
	            return new LiteralPrimitive(this.span(start), value);
	        }
	        else if (this.next.isString()) {
	            var /** @type {?} */ literalValue = this.next.toString();
	            this.advance();
	            return new LiteralPrimitive(this.span(start), literalValue);
	        }
	        else if (this.index >= this.tokens.length) {
	            this.error("Unexpected end of expression: " + this.input);
	            return new EmptyExpr(this.span(start));
	        }
	        else {
	            this.error("Unexpected token " + this.next);
	            return new EmptyExpr(this.span(start));
	        }
	    };
	    /**
	     * @param {?} terminator
	     * @return {?}
	     */
	    _ParseAST.prototype.parseExpressionList = function (terminator) {
	        var /** @type {?} */ result = [];
	        if (!this.next.isCharacter(terminator)) {
	            do {
	                result.push(this.parsePipe());
	            } while (this.optionalCharacter($COMMA));
	        }
	        return result;
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseLiteralMap = function () {
	        var /** @type {?} */ keys = [];
	        var /** @type {?} */ values = [];
	        var /** @type {?} */ start = this.inputIndex;
	        this.expectCharacter($LBRACE);
	        if (!this.optionalCharacter($RBRACE)) {
	            this.rbracesExpected++;
	            do {
	                var /** @type {?} */ key = ((this.expectIdentifierOrKeywordOrString()));
	                keys.push(key);
	                this.expectCharacter($COLON);
	                values.push(this.parsePipe());
	            } while (this.optionalCharacter($COMMA));
	            this.rbracesExpected--;
	            this.expectCharacter($RBRACE);
	        }
	        return new LiteralMap(this.span(start), keys, values);
	    };
	    /**
	     * @param {?} receiver
	     * @param {?=} isSafe
	     * @return {?}
	     */
	    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	        if (isSafe === void 0) { isSafe = false; }
	        var /** @type {?} */ start = receiver.span.start;
	        var /** @type {?} */ id = ((this.expectIdentifierOrKeyword()));
	        if (this.optionalCharacter($LPAREN)) {
	            this.rparensExpected++;
	            var /** @type {?} */ args = this.parseCallArguments();
	            this.expectCharacter($RPAREN);
	            this.rparensExpected--;
	            var /** @type {?} */ span = this.span(start);
	            return isSafe ? new SafeMethodCall(span, receiver, id, args) :
	                new MethodCall(span, receiver, id, args);
	        }
	        else {
	            if (isSafe) {
	                if (this.optionalOperator('=')) {
	                    this.error('The \'?.\' operator cannot be used in the assignment');
	                    return new EmptyExpr(this.span(start));
	                }
	                else {
	                    return new SafePropertyRead(this.span(start), receiver, id);
	                }
	            }
	            else {
	                if (this.optionalOperator('=')) {
	                    if (!this.parseAction) {
	                        this.error('Bindings cannot contain assignments');
	                        return new EmptyExpr(this.span(start));
	                    }
	                    var /** @type {?} */ value = this.parseConditional();
	                    return new PropertyWrite(this.span(start), receiver, id, value);
	                }
	                else {
	                    return new PropertyRead(this.span(start), receiver, id);
	                }
	            }
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseCallArguments = function () {
	        if (this.next.isCharacter($RPAREN))
	            return [];
	        var /** @type {?} */ positionals = [];
	        do {
	            positionals.push(this.parsePipe());
	        } while (this.optionalCharacter($COMMA));
	        return (positionals);
	    };
	    /**
	     * An identifier, a keyword, a string with an optional `-` inbetween.
	     * @return {?}
	     */
	    _ParseAST.prototype.expectTemplateBindingKey = function () {
	        var /** @type {?} */ result = '';
	        var /** @type {?} */ operatorFound = false;
	        do {
	            result += this.expectIdentifierOrKeywordOrString();
	            operatorFound = this.optionalOperator('-');
	            if (operatorFound) {
	                result += '-';
	            }
	        } while (operatorFound);
	        return result.toString();
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.parseTemplateBindings = function () {
	        var /** @type {?} */ bindings = [];
	        var /** @type {?} */ prefix = ((null));
	        var /** @type {?} */ warnings = [];
	        while (this.index < this.tokens.length) {
	            var /** @type {?} */ start = this.inputIndex;
	            var /** @type {?} */ keyIsVar = this.peekKeywordLet();
	            if (keyIsVar) {
	                this.advance();
	            }
	            var /** @type {?} */ rawKey = this.expectTemplateBindingKey();
	            var /** @type {?} */ key = rawKey;
	            if (!keyIsVar) {
	                if (prefix == null) {
	                    prefix = key;
	                }
	                else {
	                    key = prefix + key[0].toUpperCase() + key.substring(1);
	                }
	            }
	            this.optionalCharacter($COLON);
	            var /** @type {?} */ name = ((null));
	            var /** @type {?} */ expression = ((null));
	            if (keyIsVar) {
	                if (this.optionalOperator('=')) {
	                    name = this.expectTemplateBindingKey();
	                }
	                else {
	                    name = '\$implicit';
	                }
	            }
	            else if (this.peekKeywordAs()) {
	                var /** @type {?} */ letStart = this.inputIndex;
	                this.advance(); // consume `as`
	                name = rawKey;
	                key = this.expectTemplateBindingKey(); // read local var name
	                keyIsVar = true;
	            }
	            else if (this.next !== EOF && !this.peekKeywordLet()) {
	                var /** @type {?} */ start_2 = this.inputIndex;
	                var /** @type {?} */ ast = this.parsePipe();
	                var /** @type {?} */ source = this.input.substring(start_2 - this.offset, this.inputIndex - this.offset);
	                expression = new ASTWithSource(ast, source, this.location, this.errors);
	            }
	            bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name, expression));
	            if (this.peekKeywordAs() && !keyIsVar) {
	                var /** @type {?} */ letStart = this.inputIndex;
	                this.advance(); // consume `as`
	                var /** @type {?} */ letName = this.expectTemplateBindingKey(); // read local var name
	                bindings.push(new TemplateBinding(this.span(letStart), letName, true, key, /** @type {?} */ ((null))));
	            }
	            if (!this.optionalCharacter($SEMICOLON)) {
	                this.optionalCharacter($COMMA);
	            }
	        }
	        return new TemplateBindingParseResult(bindings, warnings, this.errors);
	    };
	    /**
	     * @param {?} message
	     * @param {?=} index
	     * @return {?}
	     */
	    _ParseAST.prototype.error = function (message, index) {
	        if (index === void 0) { index = null; }
	        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
	        this.skip();
	    };
	    /**
	     * @param {?=} index
	     * @return {?}
	     */
	    _ParseAST.prototype.locationText = function (index) {
	        if (index === void 0) { index = null; }
	        if (index == null)
	            index = this.index;
	        return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	            "at the end of the expression";
	    };
	    /**
	     * @return {?}
	     */
	    _ParseAST.prototype.skip = function () {
	        var /** @type {?} */ n = this.next;
	        while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&
	            (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&
	            (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&
	            (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
	            if (this.next.isError()) {
	                this.errors.push(new ParserError(/** @type {?} */ ((this.next.toString())), this.input, this.locationText(), this.location));
	            }
	            this.advance();
	            n = this.next;
	        }
	    };
	    return _ParseAST;
	}());
	var SimpleExpressionChecker = (function () {
	    function SimpleExpressionChecker() {
	        this.errors = [];
	    }
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    SimpleExpressionChecker.check = function (ast) {
	        var /** @type {?} */ s = new SimpleExpressionChecker();
	        ast.visit(s);
	        return s.errors;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.errors.push('pipes'); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { };
	    /**
	     * @param {?} asts
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitAll = function (asts) {
	        var _this = this;
	        return asts.map(function (node) { return node.visit(_this); });
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitChain = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { };
	    return SimpleExpressionChecker;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ParseLocation = (function () {
	    /**
	     * @param {?} file
	     * @param {?} offset
	     * @param {?} line
	     * @param {?} col
	     */
	    function ParseLocation(file, offset, line, col) {
	        this.file = file;
	        this.offset = offset;
	        this.line = line;
	        this.col = col;
	    }
	    /**
	     * @return {?}
	     */
	    ParseLocation.prototype.toString = function () {
	        return this.offset != null ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
	    };
	    /**
	     * @param {?} delta
	     * @return {?}
	     */
	    ParseLocation.prototype.moveBy = function (delta) {
	        var /** @type {?} */ source = this.file.content;
	        var /** @type {?} */ len = source.length;
	        var /** @type {?} */ offset = this.offset;
	        var /** @type {?} */ line = this.line;
	        var /** @type {?} */ col = this.col;
	        while (offset > 0 && delta < 0) {
	            offset--;
	            delta++;
	            var /** @type {?} */ ch = source.charCodeAt(offset);
	            if (ch == $LF) {
	                line--;
	                var /** @type {?} */ priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
	                col = priorLine > 0 ? offset - priorLine : offset;
	            }
	            else {
	                col--;
	            }
	        }
	        while (offset < len && delta > 0) {
	            var /** @type {?} */ ch = source.charCodeAt(offset);
	            offset++;
	            delta--;
	            if (ch == $LF) {
	                line++;
	                col = 0;
	            }
	            else {
	                col++;
	            }
	        }
	        return new ParseLocation(this.file, offset, line, col);
	    };
	    /**
	     * @param {?} maxChars
	     * @param {?} maxLines
	     * @return {?}
	     */
	    ParseLocation.prototype.getContext = function (maxChars, maxLines) {
	        var /** @type {?} */ content = this.file.content;
	        var /** @type {?} */ startOffset = this.offset;
	        if (startOffset != null) {
	            if (startOffset > content.length - 1) {
	                startOffset = content.length - 1;
	            }
	            var /** @type {?} */ endOffset = startOffset;
	            var /** @type {?} */ ctxChars = 0;
	            var /** @type {?} */ ctxLines = 0;
	            while (ctxChars < maxChars && startOffset > 0) {
	                startOffset--;
	                ctxChars++;
	                if (content[startOffset] == '\n') {
	                    if (++ctxLines == maxLines) {
	                        break;
	                    }
	                }
	            }
	            ctxChars = 0;
	            ctxLines = 0;
	            while (ctxChars < maxChars && endOffset < content.length - 1) {
	                endOffset++;
	                ctxChars++;
	                if (content[endOffset] == '\n') {
	                    if (++ctxLines == maxLines) {
	                        break;
	                    }
	                }
	            }
	            return {
	                before: content.substring(startOffset, this.offset),
	                after: content.substring(this.offset, endOffset + 1),
	            };
	        }
	        return null;
	    };
	    return ParseLocation;
	}());
	var ParseSourceFile = (function () {
	    /**
	     * @param {?} content
	     * @param {?} url
	     */
	    function ParseSourceFile(content, url) {
	        this.content = content;
	        this.url = url;
	    }
	    return ParseSourceFile;
	}());
	var ParseSourceSpan = (function () {
	    /**
	     * @param {?} start
	     * @param {?} end
	     * @param {?=} details
	     */
	    function ParseSourceSpan(start, end, details) {
	        if (details === void 0) { details = null; }
	        this.start = start;
	        this.end = end;
	        this.details = details;
	    }
	    /**
	     * @return {?}
	     */
	    ParseSourceSpan.prototype.toString = function () {
	        return this.start.file.content.substring(this.start.offset, this.end.offset);
	    };
	    return ParseSourceSpan;
	}());
	var ParseErrorLevel = {};
	ParseErrorLevel.WARNING = 0;
	ParseErrorLevel.ERROR = 1;
	ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING";
	ParseErrorLevel[ParseErrorLevel.ERROR] = "ERROR";
	var ParseError = (function () {
	    /**
	     * @param {?} span
	     * @param {?} msg
	     * @param {?=} level
	     */
	    function ParseError(span, msg, level) {
	        if (level === void 0) { level = ParseErrorLevel.ERROR; }
	        this.span = span;
	        this.msg = msg;
	        this.level = level;
	    }
	    /**
	     * @return {?}
	     */
	    ParseError.prototype.toString = function () {
	        var /** @type {?} */ ctx = this.span.start.getContext(100, 3);
	        var /** @type {?} */ contextStr = ctx ? " (\"" + ctx.before + "[" + ParseErrorLevel[this.level] + " ->]" + ctx.after + "\")" : '';
	        var /** @type {?} */ details = this.span.details ? ", " + this.span.details : '';
	        return "" + this.msg + contextStr + ": " + this.span.start + details;
	    };
	    return ParseError;
	}());
	/**
	 * @param {?} kind
	 * @param {?} type
	 * @return {?}
	 */
	function typeSourceSpan(kind, type) {
	    var /** @type {?} */ moduleUrl = identifierModuleUrl(type);
	    var /** @type {?} */ sourceFileName = moduleUrl != null ? "in " + kind + " " + identifierName(type) + " in " + moduleUrl :
	        "in " + kind + " " + identifierName(type);
	    var /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);
	    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Text = (function () {
	    /**
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function Text(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return Text;
	}());
	var Expansion = (function () {
	    /**
	     * @param {?} switchValue
	     * @param {?} type
	     * @param {?} cases
	     * @param {?} sourceSpan
	     * @param {?} switchValueSourceSpan
	     */
	    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
	        this.switchValue = switchValue;
	        this.type = type;
	        this.cases = cases;
	        this.sourceSpan = sourceSpan;
	        this.switchValueSourceSpan = switchValueSourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Expansion.prototype.visit = function (visitor, context) { return visitor.visitExpansion(this, context); };
	    return Expansion;
	}());
	var ExpansionCase = (function () {
	    /**
	     * @param {?} value
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} valueSourceSpan
	     * @param {?} expSourceSpan
	     */
	    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
	        this.value = value;
	        this.expression = expression;
	        this.sourceSpan = sourceSpan;
	        this.valueSourceSpan = valueSourceSpan;
	        this.expSourceSpan = expSourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ExpansionCase.prototype.visit = function (visitor, context) { return visitor.visitExpansionCase(this, context); };
	    return ExpansionCase;
	}());
	var Attribute$1 = (function () {
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?=} valueSpan
	     */
	    function Attribute$1(name, value, sourceSpan, valueSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	        this.valueSpan = valueSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Attribute$1.prototype.visit = function (visitor, context) { return visitor.visitAttribute(this, context); };
	    return Attribute$1;
	}());
	var Element = (function () {
	    /**
	     * @param {?} name
	     * @param {?} attrs
	     * @param {?} children
	     * @param {?} sourceSpan
	     * @param {?=} startSourceSpan
	     * @param {?=} endSourceSpan
	     */
	    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
	        if (startSourceSpan === void 0) { startSourceSpan = null; }
	        if (endSourceSpan === void 0) { endSourceSpan = null; }
	        this.name = name;
	        this.attrs = attrs;
	        this.children = children;
	        this.sourceSpan = sourceSpan;
	        this.startSourceSpan = startSourceSpan;
	        this.endSourceSpan = endSourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Element.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
	    return Element;
	}());
	var Comment = (function () {
	    /**
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function Comment(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Comment.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };
	    return Comment;
	}());
	/**
	 * @param {?} visitor
	 * @param {?} nodes
	 * @param {?=} context
	 * @return {?}
	 */
	function visitAll(visitor, nodes, context) {
	    if (context === void 0) { context = null; }
	    var /** @type {?} */ result = [];
	    var /** @type {?} */ visit = visitor.visit ?
	        function (ast) { return ((visitor.visit))(ast, context) || ast.visit(visitor, context); } :
	        function (ast) { return ast.visit(visitor, context); };
	    nodes.forEach(function (ast) {
	        var /** @type {?} */ astResult = visit(ast);
	        if (astResult) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TokenType$1 = {};
	TokenType$1.TAG_OPEN_START = 0;
	TokenType$1.TAG_OPEN_END = 1;
	TokenType$1.TAG_OPEN_END_VOID = 2;
	TokenType$1.TAG_CLOSE = 3;
	TokenType$1.TEXT = 4;
	TokenType$1.ESCAPABLE_RAW_TEXT = 5;
	TokenType$1.RAW_TEXT = 6;
	TokenType$1.COMMENT_START = 7;
	TokenType$1.COMMENT_END = 8;
	TokenType$1.CDATA_START = 9;
	TokenType$1.CDATA_END = 10;
	TokenType$1.ATTR_NAME = 11;
	TokenType$1.ATTR_VALUE = 12;
	TokenType$1.DOC_TYPE = 13;
	TokenType$1.EXPANSION_FORM_START = 14;
	TokenType$1.EXPANSION_CASE_VALUE = 15;
	TokenType$1.EXPANSION_CASE_EXP_START = 16;
	TokenType$1.EXPANSION_CASE_EXP_END = 17;
	TokenType$1.EXPANSION_FORM_END = 18;
	TokenType$1.EOF = 19;
	TokenType$1[TokenType$1.TAG_OPEN_START] = "TAG_OPEN_START";
	TokenType$1[TokenType$1.TAG_OPEN_END] = "TAG_OPEN_END";
	TokenType$1[TokenType$1.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID";
	TokenType$1[TokenType$1.TAG_CLOSE] = "TAG_CLOSE";
	TokenType$1[TokenType$1.TEXT] = "TEXT";
	TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
	TokenType$1[TokenType$1.RAW_TEXT] = "RAW_TEXT";
	TokenType$1[TokenType$1.COMMENT_START] = "COMMENT_START";
	TokenType$1[TokenType$1.COMMENT_END] = "COMMENT_END";
	TokenType$1[TokenType$1.CDATA_START] = "CDATA_START";
	TokenType$1[TokenType$1.CDATA_END] = "CDATA_END";
	TokenType$1[TokenType$1.ATTR_NAME] = "ATTR_NAME";
	TokenType$1[TokenType$1.ATTR_VALUE] = "ATTR_VALUE";
	TokenType$1[TokenType$1.DOC_TYPE] = "DOC_TYPE";
	TokenType$1[TokenType$1.EXPANSION_FORM_START] = "EXPANSION_FORM_START";
	TokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE";
	TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START";
	TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END";
	TokenType$1[TokenType$1.EXPANSION_FORM_END] = "EXPANSION_FORM_END";
	TokenType$1[TokenType$1.EOF] = "EOF";
	var Token$1 = (function () {
	    /**
	     * @param {?} type
	     * @param {?} parts
	     * @param {?} sourceSpan
	     */
	    function Token$1(type, parts, sourceSpan) {
	        this.type = type;
	        this.parts = parts;
	        this.sourceSpan = sourceSpan;
	    }
	    return Token$1;
	}());
	var TokenError = (function (_super) {
	    __extends(TokenError, _super);
	    /**
	     * @param {?} errorMsg
	     * @param {?} tokenType
	     * @param {?} span
	     */
	    function TokenError(errorMsg, tokenType, span) {
	        var _this = _super.call(this, span, errorMsg) || this;
	        _this.tokenType = tokenType;
	        return _this;
	    }
	    return TokenError;
	}(ParseError));
	var TokenizeResult = (function () {
	    /**
	     * @param {?} tokens
	     * @param {?} errors
	     */
	    function TokenizeResult(tokens, errors) {
	        this.tokens = tokens;
	        this.errors = errors;
	    }
	    return TokenizeResult;
	}());
	/**
	 * @param {?} source
	 * @param {?} url
	 * @param {?} getTagDefinition
	 * @param {?=} tokenizeExpansionForms
	 * @param {?=} interpolationConfig
	 * @return {?}
	 */
	function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
	    if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }
	    if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)
	        .tokenize();
	}
	var _CR_OR_CRLF_REGEXP = /\r\n?/g;
	/**
	 * @param {?} charCode
	 * @return {?}
	 */
	function _unexpectedCharacterErrorMsg(charCode) {
	    var /** @type {?} */ char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
	    return "Unexpected character \"" + char + "\"";
	}
	/**
	 * @param {?} entitySrc
	 * @return {?}
	 */
	function _unknownEntityErrorMsg(entitySrc) {
	    return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
	}
	var _ControlFlowError = (function () {
	    /**
	     * @param {?} error
	     */
	    function _ControlFlowError(error) {
	        this.error = error;
	    }
	    return _ControlFlowError;
	}());
	var _Tokenizer = (function () {
	    /**
	     * @param {?} _file The html source
	     * @param {?} _getTagDefinition
	     * @param {?} _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
	     * @param {?=} _interpolationConfig
	     */
	    function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
	        if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        this._file = _file;
	        this._getTagDefinition = _getTagDefinition;
	        this._tokenizeIcu = _tokenizeIcu;
	        this._interpolationConfig = _interpolationConfig;
	        this._peek = -1;
	        this._nextPeek = -1;
	        this._index = -1;
	        this._line = 0;
	        this._column = -1;
	        this._expansionCaseStack = [];
	        this._inInterpolation = false;
	        this.tokens = [];
	        this.errors = [];
	        this._input = _file.content;
	        this._length = _file.content.length;
	        this._advance();
	    }
	    /**
	     * @param {?} content
	     * @return {?}
	     */
	    _Tokenizer.prototype._processCarriageReturns = function (content) {
	        // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
	        // In order to keep the original position in the source, we can not
	        // pre-process it.
	        // Instead CRs are processed right before instantiating the tokens.
	        return content.replace(_CR_OR_CRLF_REGEXP, '\n');
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype.tokenize = function () {
	        while (this._peek !== $EOF) {
	            var /** @type {?} */ start = this._getLocation();
	            try {
	                if (this._attemptCharCode($LT)) {
	                    if (this._attemptCharCode($BANG)) {
	                        if (this._attemptCharCode($LBRACKET)) {
	                            this._consumeCdata(start);
	                        }
	                        else if (this._attemptCharCode($MINUS)) {
	                            this._consumeComment(start);
	                        }
	                        else {
	                            this._consumeDocType(start);
	                        }
	                    }
	                    else if (this._attemptCharCode($SLASH)) {
	                        this._consumeTagClose(start);
	                    }
	                    else {
	                        this._consumeTagOpen(start);
	                    }
	                }
	                else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
	                    this._consumeText();
	                }
	            }
	            catch (e) {
	                if (e instanceof _ControlFlowError) {
	                    this.errors.push(e.error);
	                }
	                else {
	                    throw e;
	                }
	            }
	        }
	        this._beginToken(TokenType$1.EOF);
	        this._endToken([]);
	        return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
	    };
	    /**
	     * \@internal
	     * @return {?}
	     */
	    _Tokenizer.prototype._tokenizeExpansionForm = function () {
	        if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	            this._consumeExpansionFormStart();
	            return true;
	        }
	        if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
	            this._consumeExpansionCaseStart();
	            return true;
	        }
	        if (this._peek === $RBRACE) {
	            if (this._isInExpansionCase()) {
	                this._consumeExpansionCaseEnd();
	                return true;
	            }
	            if (this._isInExpansionForm()) {
	                this._consumeExpansionFormEnd();
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._getLocation = function () {
	        return new ParseLocation(this._file, this._index, this._line, this._column);
	    };
	    /**
	     * @param {?=} start
	     * @param {?=} end
	     * @return {?}
	     */
	    _Tokenizer.prototype._getSpan = function (start, end) {
	        if (start === void 0) { start = this._getLocation(); }
	        if (end === void 0) { end = this._getLocation(); }
	        return new ParseSourceSpan(start, end);
	    };
	    /**
	     * @param {?} type
	     * @param {?=} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._beginToken = function (type, start) {
	        if (start === void 0) { start = this._getLocation(); }
	        this._currentTokenStart = start;
	        this._currentTokenType = type;
	    };
	    /**
	     * @param {?} parts
	     * @param {?=} end
	     * @return {?}
	     */
	    _Tokenizer.prototype._endToken = function (parts, end) {
	        if (end === void 0) { end = this._getLocation(); }
	        var /** @type {?} */ token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
	        this.tokens.push(token);
	        this._currentTokenStart = ((null));
	        this._currentTokenType = ((null));
	        return token;
	    };
	    /**
	     * @param {?} msg
	     * @param {?} span
	     * @return {?}
	     */
	    _Tokenizer.prototype._createError = function (msg, span) {
	        if (this._isInExpansionForm()) {
	            msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
	        }
	        var /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);
	        this._currentTokenStart = ((null));
	        this._currentTokenType = ((null));
	        return new _ControlFlowError(error);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._advance = function () {
	        if (this._index >= this._length) {
	            throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
	        }
	        if (this._peek === $LF) {
	            this._line++;
	            this._column = 0;
	        }
	        else if (this._peek !== $LF && this._peek !== $CR) {
	            this._column++;
	        }
	        this._index++;
	        this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
	        this._nextPeek =
	            this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
	    };
	    /**
	     * @param {?} charCode
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptCharCode = function (charCode) {
	        if (this._peek === charCode) {
	            this._advance();
	            return true;
	        }
	        return false;
	    };
	    /**
	     * @param {?} charCode
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
	        if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
	            this._advance();
	            return true;
	        }
	        return false;
	    };
	    /**
	     * @param {?} charCode
	     * @return {?}
	     */
	    _Tokenizer.prototype._requireCharCode = function (charCode) {
	        var /** @type {?} */ location = this._getLocation();
	        if (!this._attemptCharCode(charCode)) {
	            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
	        }
	    };
	    /**
	     * @param {?} chars
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptStr = function (chars) {
	        var /** @type {?} */ len = chars.length;
	        if (this._index + len > this._length) {
	            return false;
	        }
	        var /** @type {?} */ initialPosition = this._savePosition();
	        for (var /** @type {?} */ i = 0; i < len; i++) {
	            if (!this._attemptCharCode(chars.charCodeAt(i))) {
	                // If attempting to parse the string fails, we want to reset the parser
	                // to where it was before the attempt
	                this._restorePosition(initialPosition);
	                return false;
	            }
	        }
	        return true;
	    };
	    /**
	     * @param {?} chars
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
	        for (var /** @type {?} */ i = 0; i < chars.length; i++) {
	            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
	                return false;
	            }
	        }
	        return true;
	    };
	    /**
	     * @param {?} chars
	     * @return {?}
	     */
	    _Tokenizer.prototype._requireStr = function (chars) {
	        var /** @type {?} */ location = this._getLocation();
	        if (!this._attemptStr(chars)) {
	            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
	        }
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
	        while (!predicate(this._peek)) {
	            this._advance();
	        }
	    };
	    /**
	     * @param {?} predicate
	     * @param {?} len
	     * @return {?}
	     */
	    _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
	        var /** @type {?} */ start = this._getLocation();
	        this._attemptCharCodeUntilFn(predicate);
	        if (this._index - start.offset < len) {
	            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
	        }
	    };
	    /**
	     * @param {?} char
	     * @return {?}
	     */
	    _Tokenizer.prototype._attemptUntilChar = function (char) {
	        while (this._peek !== char) {
	            this._advance();
	        }
	    };
	    /**
	     * @param {?} decodeEntities
	     * @return {?}
	     */
	    _Tokenizer.prototype._readChar = function (decodeEntities) {
	        if (decodeEntities && this._peek === $AMPERSAND) {
	            return this._decodeEntity();
	        }
	        else {
	            var /** @type {?} */ index = this._index;
	            this._advance();
	            return this._input[index];
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._decodeEntity = function () {
	        var /** @type {?} */ start = this._getLocation();
	        this._advance();
	        if (this._attemptCharCode($HASH)) {
	            var /** @type {?} */ isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
	            var /** @type {?} */ numberStart = this._getLocation().offset;
	            this._attemptCharCodeUntilFn(isDigitEntityEnd);
	            if (this._peek != $SEMICOLON) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	            }
	            this._advance();
	            var /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);
	            try {
	                var /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);
	                return String.fromCharCode(charCode);
	            }
	            catch (e) {
	                var /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);
	                throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
	            }
	        }
	        else {
	            var /** @type {?} */ startPosition = this._savePosition();
	            this._attemptCharCodeUntilFn(isNamedEntityEnd);
	            if (this._peek != $SEMICOLON) {
	                this._restorePosition(startPosition);
	                return '&';
	            }
	            this._advance();
	            var /** @type {?} */ name = this._input.substring(start.offset + 1, this._index - 1);
	            var /** @type {?} */ char = NAMED_ENTITIES[name];
	            if (!char) {
	                throw this._createError(_unknownEntityErrorMsg(name), this._getSpan(start));
	            }
	            return char;
	        }
	    };
	    /**
	     * @param {?} decodeEntities
	     * @param {?} firstCharOfEnd
	     * @param {?} attemptEndRest
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
	        var /** @type {?} */ tagCloseStart;
	        var /** @type {?} */ textStart = this._getLocation();
	        this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
	        var /** @type {?} */ parts = [];
	        while (true) {
	            tagCloseStart = this._getLocation();
	            if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
	                break;
	            }
	            if (this._index > tagCloseStart.offset) {
	                // add the characters consumed by the previous if statement to the output
	                parts.push(this._input.substring(tagCloseStart.offset, this._index));
	            }
	            while (this._peek !== firstCharOfEnd) {
	                parts.push(this._readChar(decodeEntities));
	            }
	        }
	        return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeComment = function (start) {
	        var _this = this;
	        this._beginToken(TokenType$1.COMMENT_START, start);
	        this._requireCharCode($MINUS);
	        this._endToken([]);
	        var /** @type {?} */ textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });
	        this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
	        this._endToken([]);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeCdata = function (start) {
	        var _this = this;
	        this._beginToken(TokenType$1.CDATA_START, start);
	        this._requireStr('CDATA[');
	        this._endToken([]);
	        var /** @type {?} */ textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });
	        this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
	        this._endToken([]);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeDocType = function (start) {
	        this._beginToken(TokenType$1.DOC_TYPE, start);
	        this._attemptUntilChar($GT);
	        this._advance();
	        this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumePrefixAndName = function () {
	        var /** @type {?} */ nameOrPrefixStart = this._index;
	        var /** @type {?} */ prefix = ((null));
	        while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
	            this._advance();
	        }
	        var /** @type {?} */ nameStart;
	        if (this._peek === $COLON) {
	            this._advance();
	            prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
	            nameStart = this._index;
	        }
	        else {
	            nameStart = nameOrPrefixStart;
	        }
	        this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
	        var /** @type {?} */ name = this._input.substring(nameStart, this._index);
	        return [prefix, name];
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeTagOpen = function (start) {
	        var /** @type {?} */ savedPos = this._savePosition();
	        var /** @type {?} */ tagName;
	        var /** @type {?} */ lowercaseTagName;
	        try {
	            if (!isAsciiLetter(this._peek)) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	            }
	            var /** @type {?} */ nameStart = this._index;
	            this._consumeTagOpenStart(start);
	            tagName = this._input.substring(nameStart, this._index);
	            lowercaseTagName = tagName.toLowerCase();
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            while (this._peek !== $SLASH && this._peek !== $GT) {
	                this._consumeAttributeName();
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	                if (this._attemptCharCode($EQ)) {
	                    this._attemptCharCodeUntilFn(isNotWhitespace);
	                    this._consumeAttributeValue();
	                }
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	            }
	            this._consumeTagOpenEnd();
	        }
	        catch (e) {
	            if (e instanceof _ControlFlowError) {
	                // When the start tag is invalid, assume we want a "<"
	                this._restorePosition(savedPos);
	                // Back to back text tokens are merged at the end
	                this._beginToken(TokenType$1.TEXT, start);
	                this._endToken(['<']);
	                return;
	            }
	            throw e;
	        }
	        var /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;
	        if (contentTokenType === TagContentType.RAW_TEXT) {
	            this._consumeRawTextWithTagClose(lowercaseTagName, false);
	        }
	        else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
	            this._consumeRawTextWithTagClose(lowercaseTagName, true);
	        }
	    };
	    /**
	     * @param {?} lowercaseTagName
	     * @param {?} decodeEntities
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
	        var _this = this;
	        var /** @type {?} */ textToken = this._consumeRawText(decodeEntities, $LT, function () {
	            if (!_this._attemptCharCode($SLASH))
	                return false;
	            _this._attemptCharCodeUntilFn(isNotWhitespace);
	            if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
	                return false;
	            _this._attemptCharCodeUntilFn(isNotWhitespace);
	            return _this._attemptCharCode($GT);
	        });
	        this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
	        this._endToken([/** @type {?} */ ((null)), lowercaseTagName]);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeTagOpenStart = function (start) {
	        this._beginToken(TokenType$1.TAG_OPEN_START, start);
	        var /** @type {?} */ parts = this._consumePrefixAndName();
	        this._endToken(parts);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeAttributeName = function () {
	        this._beginToken(TokenType$1.ATTR_NAME);
	        var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
	        this._endToken(prefixAndName);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeAttributeValue = function () {
	        this._beginToken(TokenType$1.ATTR_VALUE);
	        var /** @type {?} */ value;
	        if (this._peek === $SQ || this._peek === $DQ) {
	            var /** @type {?} */ quoteChar = this._peek;
	            this._advance();
	            var /** @type {?} */ parts = [];
	            while (this._peek !== quoteChar) {
	                parts.push(this._readChar(true));
	            }
	            value = parts.join('');
	            this._advance();
	        }
	        else {
	            var /** @type {?} */ valueStart = this._index;
	            this._requireCharCodeUntilFn(isNameEnd, 1);
	            value = this._input.substring(valueStart, this._index);
	        }
	        this._endToken([this._processCarriageReturns(value)]);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeTagOpenEnd = function () {
	        var /** @type {?} */ tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
	        this._beginToken(tokenType);
	        this._requireCharCode($GT);
	        this._endToken([]);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeTagClose = function (start) {
	        this._beginToken(TokenType$1.TAG_CLOSE, start);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._requireCharCode($GT);
	        this._endToken(prefixAndName);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeExpansionFormStart = function () {
	        this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
	        this._requireCharCode($LBRACE);
	        this._endToken([]);
	        this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
	        this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	        var /** @type {?} */ condition = this._readUntil($COMMA);
	        this._endToken([condition], this._getLocation());
	        this._requireCharCode($COMMA);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	        var /** @type {?} */ type = this._readUntil($COMMA);
	        this._endToken([type], this._getLocation());
	        this._requireCharCode($COMMA);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeExpansionCaseStart = function () {
	        this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
	        var /** @type {?} */ value = this._readUntil($LBRACE).trim();
	        this._endToken([value], this._getLocation());
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
	        this._requireCharCode($LBRACE);
	        this._endToken([], this._getLocation());
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
	        this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
	        this._requireCharCode($RBRACE);
	        this._endToken([], this._getLocation());
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._expansionCaseStack.pop();
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeExpansionFormEnd = function () {
	        this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
	        this._requireCharCode($RBRACE);
	        this._endToken([]);
	        this._expansionCaseStack.pop();
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._consumeText = function () {
	        var /** @type {?} */ start = this._getLocation();
	        this._beginToken(TokenType$1.TEXT, start);
	        var /** @type {?} */ parts = [];
	        do {
	            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
	                parts.push(this._interpolationConfig.start);
	                this._inInterpolation = true;
	            }
	            else if (this._interpolationConfig && this._inInterpolation &&
	                this._attemptStr(this._interpolationConfig.end)) {
	                parts.push(this._interpolationConfig.end);
	                this._inInterpolation = false;
	            }
	            else {
	                parts.push(this._readChar(true));
	            }
	        } while (!this._isTextEnd());
	        this._endToken([this._processCarriageReturns(parts.join(''))]);
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._isTextEnd = function () {
	        if (this._peek === $LT || this._peek === $EOF) {
	            return true;
	        }
	        if (this._tokenizeIcu && !this._inInterpolation) {
	            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	                // start of an expansion form
	                return true;
	            }
	            if (this._peek === $RBRACE && this._isInExpansionCase()) {
	                // end of and expansion case
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._savePosition = function () {
	        return [this._peek, this._index, this._column, this._line, this.tokens.length];
	    };
	    /**
	     * @param {?} char
	     * @return {?}
	     */
	    _Tokenizer.prototype._readUntil = function (char) {
	        var /** @type {?} */ start = this._index;
	        this._attemptUntilChar(char);
	        return this._input.substring(start, this._index);
	    };
	    /**
	     * @param {?} position
	     * @return {?}
	     */
	    _Tokenizer.prototype._restorePosition = function (position) {
	        this._peek = position[0];
	        this._index = position[1];
	        this._column = position[2];
	        this._line = position[3];
	        var /** @type {?} */ nbTokens = position[4];
	        if (nbTokens < this.tokens.length) {
	            // remove any extra tokens
	            this.tokens = this.tokens.slice(0, nbTokens);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._isInExpansionCase = function () {
	        return this._expansionCaseStack.length > 0 &&
	            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                TokenType$1.EXPANSION_CASE_EXP_START;
	    };
	    /**
	     * @return {?}
	     */
	    _Tokenizer.prototype._isInExpansionForm = function () {
	        return this._expansionCaseStack.length > 0 &&
	            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                TokenType$1.EXPANSION_FORM_START;
	    };
	    return _Tokenizer;
	}());
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isNotWhitespace(code) {
	    return !isWhitespace(code) || code === $EOF;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isNameEnd(code) {
	    return isWhitespace(code) || code === $GT || code === $SLASH ||
	        code === $SQ || code === $DQ || code === $EQ;
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isPrefixEnd(code) {
	    return (code < $a || $z < code) && (code < $A || $Z < code) &&
	        (code < $0 || code > $9);
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isDigitEntityEnd(code) {
	    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function isNamedEntityEnd(code) {
	    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
	}
	/**
	 * @param {?} input
	 * @param {?} offset
	 * @param {?} interpolationConfig
	 * @return {?}
	 */
	function isExpansionFormStart(input, offset, interpolationConfig) {
	    var /** @type {?} */ isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
	    return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
	}
	/**
	 * @param {?} peek
	 * @return {?}
	 */
	function isExpansionCaseStart(peek) {
	    return peek === $EQ || isAsciiLetter(peek);
	}
	/**
	 * @param {?} code1
	 * @param {?} code2
	 * @return {?}
	 */
	function compareCharCodeCaseInsensitive(code1, code2) {
	    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
	}
	/**
	 * @param {?} code
	 * @return {?}
	 */
	function toUpperCaseCharCode(code) {
	    return code >= $a && code <= $z ? code - $a + $A : code;
	}
	/**
	 * @param {?} srcTokens
	 * @return {?}
	 */
	function mergeTextTokens(srcTokens) {
	    var /** @type {?} */ dstTokens = [];
	    var /** @type {?} */ lastDstToken = undefined;
	    for (var /** @type {?} */ i = 0; i < srcTokens.length; i++) {
	        var /** @type {?} */ token = srcTokens[i];
	        if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
	            lastDstToken.parts[0] += token.parts[0];
	            lastDstToken.sourceSpan.end = token.sourceSpan.end;
	        }
	        else {
	            lastDstToken = token;
	            dstTokens.push(lastDstToken);
	        }
	    }
	    return dstTokens;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TreeError = (function (_super) {
	    __extends(TreeError, _super);
	    /**
	     * @param {?} elementName
	     * @param {?} span
	     * @param {?} msg
	     */
	    function TreeError(elementName, span, msg) {
	        var _this = _super.call(this, span, msg) || this;
	        _this.elementName = elementName;
	        return _this;
	    }
	    /**
	     * @param {?} elementName
	     * @param {?} span
	     * @param {?} msg
	     * @return {?}
	     */
	    TreeError.create = function (elementName, span, msg) {
	        return new TreeError(elementName, span, msg);
	    };
	    return TreeError;
	}(ParseError));
	var ParseTreeResult = (function () {
	    /**
	     * @param {?} rootNodes
	     * @param {?} errors
	     */
	    function ParseTreeResult(rootNodes, errors) {
	        this.rootNodes = rootNodes;
	        this.errors = errors;
	    }
	    return ParseTreeResult;
	}());
	var Parser$1 = (function () {
	    /**
	     * @param {?} getTagDefinition
	     */
	    function Parser$1(getTagDefinition) {
	        this.getTagDefinition = getTagDefinition;
	    }
	    /**
	     * @param {?} source
	     * @param {?} url
	     * @param {?=} parseExpansionForms
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    Parser$1.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	        if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
	        var /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
	        return new ParseTreeResult(treeAndErrors.rootNodes, ((tokensAndErrors.errors)).concat(treeAndErrors.errors));
	    };
	    return Parser$1;
	}());
	var _TreeBuilder = (function () {
	    /**
	     * @param {?} tokens
	     * @param {?} getTagDefinition
	     */
	    function _TreeBuilder(tokens, getTagDefinition) {
	        this.tokens = tokens;
	        this.getTagDefinition = getTagDefinition;
	        this._index = -1;
	        this._rootNodes = [];
	        this._errors = [];
	        this._elementStack = [];
	        this._advance();
	    }
	    /**
	     * @return {?}
	     */
	    _TreeBuilder.prototype.build = function () {
	        while (this._peek.type !== TokenType$1.EOF) {
	            if (this._peek.type === TokenType$1.TAG_OPEN_START) {
	                this._consumeStartTag(this._advance());
	            }
	            else if (this._peek.type === TokenType$1.TAG_CLOSE) {
	                this._consumeEndTag(this._advance());
	            }
	            else if (this._peek.type === TokenType$1.CDATA_START) {
	                this._closeVoidElement();
	                this._consumeCdata(this._advance());
	            }
	            else if (this._peek.type === TokenType$1.COMMENT_START) {
	                this._closeVoidElement();
	                this._consumeComment(this._advance());
	            }
	            else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||
	                this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
	                this._closeVoidElement();
	                this._consumeText(this._advance());
	            }
	            else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
	                this._consumeExpansion(this._advance());
	            }
	            else {
	                // Skip all other tokens...
	                this._advance();
	            }
	        }
	        return new ParseTreeResult(this._rootNodes, this._errors);
	    };
	    /**
	     * @return {?}
	     */
	    _TreeBuilder.prototype._advance = function () {
	        var /** @type {?} */ prev = this._peek;
	        if (this._index < this.tokens.length - 1) {
	            // Note: there is always an EOF token at the end
	            this._index++;
	        }
	        this._peek = this.tokens[this._index];
	        return prev;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    _TreeBuilder.prototype._advanceIf = function (type) {
	        if (this._peek.type === type) {
	            return this._advance();
	        }
	        return null;
	    };
	    /**
	     * @param {?} startToken
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeCdata = function (startToken) {
	        this._consumeText(this._advance());
	        this._advanceIf(TokenType$1.CDATA_END);
	    };
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeComment = function (token) {
	        var /** @type {?} */ text = this._advanceIf(TokenType$1.RAW_TEXT);
	        this._advanceIf(TokenType$1.COMMENT_END);
	        var /** @type {?} */ value = text != null ? text.parts[0].trim() : null;
	        this._addToParent(new Comment(value, token.sourceSpan));
	    };
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeExpansion = function (token) {
	        var /** @type {?} */ switchValue = this._advance();
	        var /** @type {?} */ type = this._advance();
	        var /** @type {?} */ cases = [];
	        // read =
	        while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
	            var /** @type {?} */ expCase = this._parseExpansionCase();
	            if (!expCase)
	                return; // error
	            cases.push(expCase);
	        }
	        // read the final }
	        if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
	            this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
	            return;
	        }
	        var /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
	        this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
	        this._advance();
	    };
	    /**
	     * @return {?}
	     */
	    _TreeBuilder.prototype._parseExpansionCase = function () {
	        var /** @type {?} */ value = this._advance();
	        // read {
	        if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
	            this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
	            return null;
	        }
	        // read until }
	        var /** @type {?} */ start = this._advance();
	        var /** @type {?} */ exp = this._collectExpansionExpTokens(start);
	        if (!exp)
	            return null;
	        var /** @type {?} */ end = this._advance();
	        exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
	        // parse everything in between { and }
	        var /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
	        if (parsedExp.errors.length > 0) {
	            this._errors = this._errors.concat(/** @type {?} */ (parsedExp.errors));
	            return null;
	        }
	        var /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
	        var /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
	        return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
	    };
	    /**
	     * @param {?} start
	     * @return {?}
	     */
	    _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
	        var /** @type {?} */ exp = [];
	        var /** @type {?} */ expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
	        while (true) {
	            if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||
	                this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
	                expansionFormStack.push(this._peek.type);
	            }
	            if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
	                if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
	                    expansionFormStack.pop();
	                    if (expansionFormStack.length == 0)
	                        return exp;
	                }
	                else {
	                    this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                    return null;
	                }
	            }
	            if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
	                if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
	                    expansionFormStack.pop();
	                }
	                else {
	                    this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                    return null;
	                }
	            }
	            if (this._peek.type === TokenType$1.EOF) {
	                this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                return null;
	            }
	            exp.push(this._advance());
	        }
	    };
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeText = function (token) {
	        var /** @type {?} */ text = token.parts[0];
	        if (text.length > 0 && text[0] == '\n') {
	            var /** @type {?} */ parent = this._getParentElement();
	            if (parent != null && parent.children.length == 0 &&
	                this.getTagDefinition(parent.name).ignoreFirstLf) {
	                text = text.substring(1);
	            }
	        }
	        if (text.length > 0) {
	            this._addToParent(new Text(text, token.sourceSpan));
	        }
	    };
	    /**
	     * @return {?}
	     */
	    _TreeBuilder.prototype._closeVoidElement = function () {
	        if (this._elementStack.length > 0) {
	            var /** @type {?} */ el = this._elementStack[this._elementStack.length - 1];
	            if (this.getTagDefinition(el.name).isVoid) {
	                this._elementStack.pop();
	            }
	        }
	    };
	    /**
	     * @param {?} startTagToken
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
	        var /** @type {?} */ prefix = startTagToken.parts[0];
	        var /** @type {?} */ name = startTagToken.parts[1];
	        var /** @type {?} */ attrs = [];
	        while (this._peek.type === TokenType$1.ATTR_NAME) {
	            attrs.push(this._consumeAttr(this._advance()));
	        }
	        var /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());
	        var /** @type {?} */ selfClosing = false;
	        // Note: There could have been a tokenizer error
	        // so that we don't get a token for the end tag...
	        if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
	            this._advance();
	            selfClosing = true;
	            var /** @type {?} */ tagDef = this.getTagDefinition(fullName);
	            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
	                this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
	            }
	        }
	        else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
	            this._advance();
	            selfClosing = false;
	        }
	        var /** @type {?} */ end = this._peek.sourceSpan.start;
	        var /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
	        var /** @type {?} */ el = new Element(fullName, attrs, [], span, span, undefined);
	        this._pushElement(el);
	        if (selfClosing) {
	            this._popElement(fullName);
	            el.endSourceSpan = span;
	        }
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    _TreeBuilder.prototype._pushElement = function (el) {
	        if (this._elementStack.length > 0) {
	            var /** @type {?} */ parentEl = this._elementStack[this._elementStack.length - 1];
	            if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
	                this._elementStack.pop();
	            }
	        }
	        var /** @type {?} */ tagDef = this.getTagDefinition(el.name);
	        var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
	        if (parent && tagDef.requireExtraParent(parent.name)) {
	            var /** @type {?} */ newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	            this._insertBeforeContainer(parent, container, newParent);
	        }
	        this._addToParent(el);
	        this._elementStack.push(el);
	    };
	    /**
	     * @param {?} endTagToken
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
	        var /** @type {?} */ fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
	        if (this._getParentElement()) {
	            ((this._getParentElement())).endSourceSpan = endTagToken.sourceSpan;
	        }
	        if (this.getTagDefinition(fullName).isVoid) {
	            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
	        }
	        else if (!this._popElement(fullName)) {
	            var /** @type {?} */ errMsg = "Unexpected closing tag \"" + fullName + "\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags";
	            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
	        }
	    };
	    /**
	     * @param {?} fullName
	     * @return {?}
	     */
	    _TreeBuilder.prototype._popElement = function (fullName) {
	        for (var /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
	            var /** @type {?} */ el = this._elementStack[stackIndex];
	            if (el.name == fullName) {
	                this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
	                return true;
	            }
	            if (!this.getTagDefinition(el.name).closedByParent) {
	                return false;
	            }
	        }
	        return false;
	    };
	    /**
	     * @param {?} attrName
	     * @return {?}
	     */
	    _TreeBuilder.prototype._consumeAttr = function (attrName) {
	        var /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
	        var /** @type {?} */ end = attrName.sourceSpan.end;
	        var /** @type {?} */ value = '';
	        var /** @type {?} */ valueSpan = ((undefined));
	        if (this._peek.type === TokenType$1.ATTR_VALUE) {
	            var /** @type {?} */ valueToken = this._advance();
	            value = valueToken.parts[0];
	            end = valueToken.sourceSpan.end;
	            valueSpan = valueToken.sourceSpan;
	        }
	        return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
	    };
	    /**
	     * @return {?}
	     */
	    _TreeBuilder.prototype._getParentElement = function () {
	        return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
	    };
	    /**
	     * Returns the parent in the DOM and the container.
	     *
	     * `<ng-container>` elements are skipped as they are not rendered as DOM element.
	     * @return {?}
	     */
	    _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
	        var /** @type {?} */ container = null;
	        for (var /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {
	            if (!isNgContainer(this._elementStack[i].name)) {
	                return { parent: this._elementStack[i], container: container };
	            }
	            container = this._elementStack[i];
	        }
	        return { parent: this._elementStack[this._elementStack.length - 1], container: container };
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    _TreeBuilder.prototype._addToParent = function (node) {
	        var /** @type {?} */ parent = this._getParentElement();
	        if (parent != null) {
	            parent.children.push(node);
	        }
	        else {
	            this._rootNodes.push(node);
	        }
	    };
	    /**
	     * Insert a node between the parent and the container.
	     * When no container is given, the node is appended as a child of the parent.
	     * Also updates the element stack accordingly.
	     *
	     * \@internal
	     * @param {?} parent
	     * @param {?} container
	     * @param {?} node
	     * @return {?}
	     */
	    _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
	        if (!container) {
	            this._addToParent(node);
	            this._elementStack.push(node);
	        }
	        else {
	            if (parent) {
	                // replace the container with the new node in the children
	                var /** @type {?} */ index = parent.children.indexOf(container);
	                parent.children[index] = node;
	            }
	            else {
	                this._rootNodes.push(node);
	            }
	            node.children.push(container);
	            this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
	        }
	    };
	    /**
	     * @param {?} prefix
	     * @param {?} localName
	     * @param {?} parentElement
	     * @return {?}
	     */
	    _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
	        if (prefix == null) {
	            prefix = ((this.getTagDefinition(localName).implicitNamespacePrefix));
	            if (prefix == null && parentElement != null) {
	                prefix = getNsPrefix(parentElement.name);
	            }
	        }
	        return mergeNsAndName(prefix, localName);
	    };
	    return _TreeBuilder;
	}());
	/**
	 * @param {?} stack
	 * @param {?} element
	 * @return {?}
	 */
	function lastOnStack(stack, element) {
	    return stack.length > 0 && stack[stack.length - 1] === element;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Message = (function () {
	    /**
	     * @param {?} nodes message AST
	     * @param {?} placeholders maps placeholder names to static content
	     * @param {?} placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
	     * @param {?} meaning
	     * @param {?} description
	     * @param {?} id
	     */
	    function Message(nodes, placeholders, placeholderToMessage, meaning, description, id) {
	        this.nodes = nodes;
	        this.placeholders = placeholders;
	        this.placeholderToMessage = placeholderToMessage;
	        this.meaning = meaning;
	        this.description = description;
	        this.id = id;
	        if (nodes.length) {
	            this.sources = [{
	                    filePath: nodes[0].sourceSpan.start.file.url,
	                    startLine: nodes[0].sourceSpan.start.line + 1,
	                    startCol: nodes[0].sourceSpan.start.col + 1,
	                    endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
	                    endCol: nodes[0].sourceSpan.start.col + 1
	                }];
	        }
	        else {
	            this.sources = [];
	        }
	    }
	    return Message;
	}());
	var Text$1 = (function () {
	    /**
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function Text$1(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Text$1.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return Text$1;
	}());
	var Container = (function () {
	    /**
	     * @param {?} children
	     * @param {?} sourceSpan
	     */
	    function Container(children, sourceSpan) {
	        this.children = children;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Container.prototype.visit = function (visitor, context) { return visitor.visitContainer(this, context); };
	    return Container;
	}());
	var Icu = (function () {
	    /**
	     * @param {?} expression
	     * @param {?} type
	     * @param {?} cases
	     * @param {?} sourceSpan
	     */
	    function Icu(expression, type, cases, sourceSpan) {
	        this.expression = expression;
	        this.type = type;
	        this.cases = cases;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Icu.prototype.visit = function (visitor, context) { return visitor.visitIcu(this, context); };
	    return Icu;
	}());
	var TagPlaceholder = (function () {
	    /**
	     * @param {?} tag
	     * @param {?} attrs
	     * @param {?} startName
	     * @param {?} closeName
	     * @param {?} children
	     * @param {?} isVoid
	     * @param {?} sourceSpan
	     */
	    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
	        this.tag = tag;
	        this.attrs = attrs;
	        this.startName = startName;
	        this.closeName = closeName;
	        this.children = children;
	        this.isVoid = isVoid;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    TagPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };
	    return TagPlaceholder;
	}());
	var Placeholder = (function () {
	    /**
	     * @param {?} value
	     * @param {?} name
	     * @param {?} sourceSpan
	     */
	    function Placeholder(value, name, sourceSpan) {
	        this.value = value;
	        this.name = name;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    Placeholder.prototype.visit = function (visitor, context) { return visitor.visitPlaceholder(this, context); };
	    return Placeholder;
	}());
	var IcuPlaceholder = (function () {
	    /**
	     * @param {?} value
	     * @param {?} name
	     * @param {?} sourceSpan
	     */
	    function IcuPlaceholder(value, name, sourceSpan) {
	        this.value = value;
	        this.name = name;
	        this.sourceSpan = sourceSpan;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?=} context
	     * @return {?}
	     */
	    IcuPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };
	    return IcuPlaceholder;
	}());
	var CloneVisitor = (function () {
	    function CloneVisitor() {
	    }
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	    /**
	     * @param {?} container
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var /** @type {?} */ children = container.children.map(function (n) { return n.visit(_this, context); });
	        return new Container(children, container.sourceSpan);
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ cases = {};
	        Object.keys(icu.cases).forEach(function (key) { return cases[key] = icu.cases[key].visit(_this, context); });
	        var /** @type {?} */ msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);
	        msg.expressionPlaceholder = icu.expressionPlaceholder;
	        return msg;
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        var /** @type {?} */ children = ph.children.map(function (n) { return n.visit(_this, context); });
	        return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitPlaceholder = function (ph, context) {
	        return new Placeholder(ph.value, ph.name, ph.sourceSpan);
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    CloneVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);
	    };
	    return CloneVisitor;
	}());
	var RecurseVisitor = (function () {
	    function RecurseVisitor() {
	    }
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitText = function (text, context) { };
	    
	    /**
	     * @param {?} container
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        container.children.forEach(function (child) { return child.visit(_this); });
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        Object.keys(icu.cases).forEach(function (k) { icu.cases[k].visit(_this); });
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        ph.children.forEach(function (child) { return child.visit(_this); });
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitPlaceholder = function (ph, context) { };
	    
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    RecurseVisitor.prototype.visitIcuPlaceholder = function (ph, context) { };
	    
	    return RecurseVisitor;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TAG_TO_PLACEHOLDER_NAMES = {
	    'A': 'LINK',
	    'B': 'BOLD_TEXT',
	    'BR': 'LINE_BREAK',
	    'EM': 'EMPHASISED_TEXT',
	    'H1': 'HEADING_LEVEL1',
	    'H2': 'HEADING_LEVEL2',
	    'H3': 'HEADING_LEVEL3',
	    'H4': 'HEADING_LEVEL4',
	    'H5': 'HEADING_LEVEL5',
	    'H6': 'HEADING_LEVEL6',
	    'HR': 'HORIZONTAL_RULE',
	    'I': 'ITALIC_TEXT',
	    'LI': 'LIST_ITEM',
	    'LINK': 'MEDIA_LINK',
	    'OL': 'ORDERED_LIST',
	    'P': 'PARAGRAPH',
	    'Q': 'QUOTATION',
	    'S': 'STRIKETHROUGH_TEXT',
	    'SMALL': 'SMALL_TEXT',
	    'SUB': 'SUBSTRIPT',
	    'SUP': 'SUPERSCRIPT',
	    'TBODY': 'TABLE_BODY',
	    'TD': 'TABLE_CELL',
	    'TFOOT': 'TABLE_FOOTER',
	    'TH': 'TABLE_HEADER_CELL',
	    'THEAD': 'TABLE_HEADER',
	    'TR': 'TABLE_ROW',
	    'TT': 'MONOSPACED_TEXT',
	    'U': 'UNDERLINED_TEXT',
	    'UL': 'UNORDERED_LIST',
	};
	/**
	 * Creates unique names for placeholder with different content.
	 *
	 * Returns the same placeholder name when the content is identical.
	 *
	 * \@internal
	 */
	var PlaceholderRegistry = (function () {
	    function PlaceholderRegistry() {
	        this._placeHolderNameCounts = {};
	        this._signatureToName = {};
	    }
	    /**
	     * @param {?} tag
	     * @param {?} attrs
	     * @param {?} isVoid
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
	        var /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);
	        if (this._signatureToName[signature]) {
	            return this._signatureToName[signature];
	        }
	        var /** @type {?} */ upperTag = tag.toUpperCase();
	        var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	        var /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
	        this._signatureToName[signature] = name;
	        return name;
	    };
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
	        var /** @type {?} */ signature = this._hashClosingTag(tag);
	        if (this._signatureToName[signature]) {
	            return this._signatureToName[signature];
	        }
	        var /** @type {?} */ upperTag = tag.toUpperCase();
	        var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	        var /** @type {?} */ name = this._generateUniqueName("CLOSE_" + baseName);
	        this._signatureToName[signature] = name;
	        return name;
	    };
	    /**
	     * @param {?} name
	     * @param {?} content
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
	        var /** @type {?} */ upperName = name.toUpperCase();
	        var /** @type {?} */ signature = "PH: " + upperName + "=" + content;
	        if (this._signatureToName[signature]) {
	            return this._signatureToName[signature];
	        }
	        var /** @type {?} */ uniqueName = this._generateUniqueName(upperName);
	        this._signatureToName[signature] = uniqueName;
	        return uniqueName;
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype.getUniquePlaceholder = function (name) {
	        return this._generateUniqueName(name.toUpperCase());
	    };
	    /**
	     * @param {?} tag
	     * @param {?} attrs
	     * @param {?} isVoid
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
	        var /** @type {?} */ start = "<" + tag;
	        var /** @type {?} */ strAttrs = Object.keys(attrs).sort().map(function (name) { return " " + name + "=" + attrs[name]; }).join('');
	        var /** @type {?} */ end = isVoid ? '/>' : "></" + tag + ">";
	        return start + strAttrs + end;
	    };
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype._hashClosingTag = function (tag) { return this._hashTag("/" + tag, {}, false); };
	    /**
	     * @param {?} base
	     * @return {?}
	     */
	    PlaceholderRegistry.prototype._generateUniqueName = function (base) {
	        var /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);
	        if (!seen) {
	            this._placeHolderNameCounts[base] = 1;
	            return base;
	        }
	        var /** @type {?} */ id = this._placeHolderNameCounts[base];
	        this._placeHolderNameCounts[base] = id + 1;
	        return base + "_" + id;
	    };
	    return PlaceholderRegistry;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _expParser = new Parser(new Lexer());
	/**
	 * Returns a function converting html nodes to an i18n Message given an interpolationConfig
	 * @param {?} interpolationConfig
	 * @return {?}
	 */
	function createI18nMessageFactory(interpolationConfig) {
	    var /** @type {?} */ visitor = new _I18nVisitor(_expParser, interpolationConfig);
	    return function (nodes, meaning, description, id) { return visitor.toI18nMessage(nodes, meaning, description, id); };
	}
	var _I18nVisitor = (function () {
	    /**
	     * @param {?} _expressionParser
	     * @param {?} _interpolationConfig
	     */
	    function _I18nVisitor(_expressionParser, _interpolationConfig) {
	        this._expressionParser = _expressionParser;
	        this._interpolationConfig = _interpolationConfig;
	    }
	    /**
	     * @param {?} nodes
	     * @param {?} meaning
	     * @param {?} description
	     * @param {?} id
	     * @return {?}
	     */
	    _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description, id) {
	        this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
	        this._icuDepth = 0;
	        this._placeholderRegistry = new PlaceholderRegistry();
	        this._placeholderToContent = {};
	        this._placeholderToMessage = {};
	        var /** @type {?} */ i18nodes = visitAll(this, nodes, {});
	        return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);
	    };
	    /**
	     * @param {?} el
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitElement = function (el, context) {
	        var /** @type {?} */ children = visitAll(this, el.children);
	        var /** @type {?} */ attrs = {};
	        el.attrs.forEach(function (attr) {
	            // Do not visit the attributes, translatable ones are top-level ASTs
	            attrs[attr.name] = attr.value;
	        });
	        var /** @type {?} */ isVoid = getHtmlTagDefinition(el.name).isVoid;
	        var /** @type {?} */ startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
	        this._placeholderToContent[startPhName] = ((el.sourceSpan)).toString();
	        var /** @type {?} */ closePhName = '';
	        if (!isVoid) {
	            closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
	            this._placeholderToContent[closePhName] = "</" + el.name + ">";
	        }
	        return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, /** @type {?} */ ((el.sourceSpan)));
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
	        return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
	    };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitText = function (text, context) {
	        return this._visitTextWithInterpolation(text.value, /** @type {?} */ ((text.sourceSpan)));
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitComment = function (comment, context) { return null; };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitExpansion = function (icu, context) {
	        var _this = this;
	        this._icuDepth++;
	        var /** @type {?} */ i18nIcuCases = {};
	        var /** @type {?} */ i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
	        icu.cases.forEach(function (caze) {
	            i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);
	        });
	        this._icuDepth--;
	        if (this._isIcu || this._icuDepth > 0) {
	            // Returns an ICU node when:
	            // - the message (vs a part of the message) is an ICU message, or
	            // - the ICU message is nested.
	            var /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type);
	            i18nIcu.expressionPlaceholder = expPh;
	            this._placeholderToContent[expPh] = icu.switchValue;
	            return i18nIcu;
	        }
	        // Else returns a placeholder
	        // ICU placeholders should not be replaced with their original content but with the their
	        // translations. We need to create a new visitor (they are not re-entrant) to compute the
	        // message id.
	        // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
	        var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
	        var /** @type {?} */ visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
	        this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');
	        return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
	    };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {
	        throw new Error('Unreachable code');
	    };
	    /**
	     * @param {?} text
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {
	        var /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
	        if (!splitInterpolation) {
	            // No expression, return a single text
	            return new Text$1(text, sourceSpan);
	        }
	        // Return a group of text + expressions
	        var /** @type {?} */ nodes = [];
	        var /** @type {?} */ container = new Container(nodes, sourceSpan);
	        var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
	        for (var /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {
	            var /** @type {?} */ expression = splitInterpolation.expressions[i];
	            var /** @type {?} */ baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
	            var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
	            if (splitInterpolation.strings[i].length) {
	                // No need to add empty strings
	                nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
	            }
	            nodes.push(new Placeholder(expression, phName, sourceSpan));
	            this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
	        }
	        // The last index contains no expression
	        var /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;
	        if (splitInterpolation.strings[lastStringIdx].length) {
	            nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
	        }
	        return container;
	    };
	    return _I18nVisitor;
	}());
	var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function _extractPlaceholderName(input) {
	    return input.split(_CUSTOM_PH_EXP)[2];
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An i18n error.
	 */
	var I18nError = (function (_super) {
	    __extends(I18nError, _super);
	    /**
	     * @param {?} span
	     * @param {?} msg
	     */
	    function I18nError(span, msg) {
	        return _super.call(this, span, msg) || this;
	    }
	    return I18nError;
	}(ParseError));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _I18N_ATTR = 'i18n';
	var _I18N_ATTR_PREFIX = 'i18n-';
	var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
	var MEANING_SEPARATOR = '|';
	var ID_SEPARATOR = '@@';
	/**
	 * Extract translatable messages from an html AST
	 * @param {?} nodes
	 * @param {?} interpolationConfig
	 * @param {?} implicitTags
	 * @param {?} implicitAttrs
	 * @return {?}
	 */
	function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
	    var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);
	    return visitor.extract(nodes, interpolationConfig);
	}
	/**
	 * @param {?} nodes
	 * @param {?} translations
	 * @param {?} interpolationConfig
	 * @param {?} implicitTags
	 * @param {?} implicitAttrs
	 * @return {?}
	 */
	function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
	    var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);
	    return visitor.merge(nodes, translations, interpolationConfig);
	}
	var ExtractionResult = (function () {
	    /**
	     * @param {?} messages
	     * @param {?} errors
	     */
	    function ExtractionResult(messages, errors) {
	        this.messages = messages;
	        this.errors = errors;
	    }
	    return ExtractionResult;
	}());
	var _VisitorMode = {};
	_VisitorMode.Extract = 0;
	_VisitorMode.Merge = 1;
	_VisitorMode[_VisitorMode.Extract] = "Extract";
	_VisitorMode[_VisitorMode.Merge] = "Merge";
	/**
	 * This Visitor is used:
	 * 1. to extract all the translatable strings from an html AST (see `extract()`),
	 * 2. to replace the translatable strings with the actual translations (see `merge()`)
	 *
	 * \@internal
	 */
	var _Visitor = (function () {
	    /**
	     * @param {?} _implicitTags
	     * @param {?} _implicitAttrs
	     */
	    function _Visitor(_implicitTags, _implicitAttrs) {
	        this._implicitTags = _implicitTags;
	        this._implicitAttrs = _implicitAttrs;
	    }
	    /**
	     * Extracts the messages from the tree
	     * @param {?} nodes
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    _Visitor.prototype.extract = function (nodes, interpolationConfig) {
	        var _this = this;
	        this._init(_VisitorMode.Extract, interpolationConfig);
	        nodes.forEach(function (node) { return node.visit(_this, null); });
	        if (this._inI18nBlock) {
	            this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	        }
	        return new ExtractionResult(this._messages, this._errors);
	    };
	    /**
	     * Returns a tree where all translatable nodes are translated
	     * @param {?} nodes
	     * @param {?} translations
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
	        this._init(_VisitorMode.Merge, interpolationConfig);
	        this._translations = translations;
	        // Construct a single fake root element
	        var /** @type {?} */ wrapper = new Element('wrapper', [], nodes, /** @type {?} */ ((undefined)), undefined, undefined);
	        var /** @type {?} */ translatedNode = wrapper.visit(this, null);
	        if (this._inI18nBlock) {
	            this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	        }
	        return new ParseTreeResult(translatedNode.children, this._errors);
	    };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
	        // Parse cases for translatable html attributes
	        var /** @type {?} */ expression = visitAll(this, icuCase.expression, context);
	        if (this._mode === _VisitorMode.Merge) {
	            return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
	        }
	    };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitExpansion = function (icu, context) {
	        this._mayBeAddBlockChildren(icu);
	        var /** @type {?} */ wasInIcu = this._inIcu;
	        if (!this._inIcu) {
	            // nested ICU messages should not be extracted but top-level translated as a whole
	            if (this._isInTranslatableSection) {
	                this._addMessage([icu]);
	            }
	            this._inIcu = true;
	        }
	        var /** @type {?} */ cases = visitAll(this, icu.cases, context);
	        if (this._mode === _VisitorMode.Merge) {
	            icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
	        }
	        this._inIcu = wasInIcu;
	        return icu;
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitComment = function (comment, context) {
	        var /** @type {?} */ isOpening = _isOpeningComment(comment);
	        if (isOpening && this._isInTranslatableSection) {
	            this._reportError(comment, 'Could not start a block inside a translatable section');
	            return;
	        }
	        var /** @type {?} */ isClosing = _isClosingComment(comment);
	        if (isClosing && !this._inI18nBlock) {
	            this._reportError(comment, 'Trying to close an unopened block');
	            return;
	        }
	        if (!this._inI18nNode && !this._inIcu) {
	            if (!this._inI18nBlock) {
	                if (isOpening) {
	                    this._inI18nBlock = true;
	                    this._blockStartDepth = this._depth;
	                    this._blockChildren = [];
	                    this._blockMeaningAndDesc = ((comment.value)).replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
	                    this._openTranslatableSection(comment);
	                }
	            }
	            else {
	                if (isClosing) {
	                    if (this._depth == this._blockStartDepth) {
	                        this._closeTranslatableSection(comment, this._blockChildren);
	                        this._inI18nBlock = false;
	                        var /** @type {?} */ message = ((this._addMessage(this._blockChildren, this._blockMeaningAndDesc)));
	                        // merge attributes in sections
	                        var /** @type {?} */ nodes = this._translateMessage(comment, message);
	                        return visitAll(this, nodes);
	                    }
	                    else {
	                        this._reportError(comment, 'I18N blocks should not cross element boundaries');
	                        return;
	                    }
	                }
	            }
	        }
	    };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitText = function (text, context) {
	        if (this._isInTranslatableSection) {
	            this._mayBeAddBlockChildren(text);
	        }
	        return text;
	    };
	    /**
	     * @param {?} el
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitElement = function (el, context) {
	        var _this = this;
	        this._mayBeAddBlockChildren(el);
	        this._depth++;
	        var /** @type {?} */ wasInI18nNode = this._inI18nNode;
	        var /** @type {?} */ wasInImplicitNode = this._inImplicitNode;
	        var /** @type {?} */ childNodes = [];
	        var /** @type {?} */ translatedChildNodes = ((undefined));
	        // Extract:
	        // - top level nodes with the (implicit) "i18n" attribute if not already in a section
	        // - ICU messages
	        var /** @type {?} */ i18nAttr = _getI18nAttr(el);
	        var /** @type {?} */ i18nMeta = i18nAttr ? i18nAttr.value : '';
	        var /** @type {?} */ isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this._inIcu &&
	            !this._isInTranslatableSection;
	        var /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;
	        this._inImplicitNode = wasInImplicitNode || isImplicit;
	        if (!this._isInTranslatableSection && !this._inIcu) {
	            if (i18nAttr || isTopLevelImplicit) {
	                this._inI18nNode = true;
	                var /** @type {?} */ message = ((this._addMessage(el.children, i18nMeta)));
	                translatedChildNodes = this._translateMessage(el, message);
	            }
	            if (this._mode == _VisitorMode.Extract) {
	                var /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;
	                if (isTranslatable)
	                    this._openTranslatableSection(el);
	                visitAll(this, el.children);
	                if (isTranslatable)
	                    this._closeTranslatableSection(el, el.children);
	            }
	        }
	        else {
	            if (i18nAttr || isTopLevelImplicit) {
	                this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
	            }
	            if (this._mode == _VisitorMode.Extract) {
	                // Descend into child nodes for extraction
	                visitAll(this, el.children);
	            }
	        }
	        if (this._mode === _VisitorMode.Merge) {
	            var /** @type {?} */ visitNodes = translatedChildNodes || el.children;
	            visitNodes.forEach(function (child) {
	                var /** @type {?} */ visited = child.visit(_this, context);
	                if (visited && !_this._isInTranslatableSection) {
	                    // Do not add the children from translatable sections (= i18n blocks here)
	                    // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
	                    childNodes = childNodes.concat(visited);
	                }
	            });
	        }
	        this._visitAttributesOf(el);
	        this._depth--;
	        this._inI18nNode = wasInI18nNode;
	        this._inImplicitNode = wasInImplicitNode;
	        if (this._mode === _VisitorMode.Merge) {
	            var /** @type {?} */ translatedAttrs = this._translateAttributes(el);
	            return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	        }
	        return null;
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor.prototype.visitAttribute = function (attribute, context) {
	        throw new Error('unreachable code');
	    };
	    /**
	     * @param {?} mode
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    _Visitor.prototype._init = function (mode, interpolationConfig) {
	        this._mode = mode;
	        this._inI18nBlock = false;
	        this._inI18nNode = false;
	        this._depth = 0;
	        this._inIcu = false;
	        this._msgCountAtSectionStart = undefined;
	        this._errors = [];
	        this._messages = [];
	        this._inImplicitNode = false;
	        this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    _Visitor.prototype._visitAttributesOf = function (el) {
	        var _this = this;
	        var /** @type {?} */ explicitAttrNameToValue = {};
	        var /** @type {?} */ implicitAttrNames = this._implicitAttrs[el.name] || [];
	        el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })
	            .forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	            attr.value; });
	        el.attrs.forEach(function (attr) {
	            if (attr.name in explicitAttrNameToValue) {
	                _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
	            }
	            else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {
	                _this._addMessage([attr]);
	            }
	        });
	    };
	    /**
	     * @param {?} ast
	     * @param {?=} msgMeta
	     * @return {?}
	     */
	    _Visitor.prototype._addMessage = function (ast, msgMeta) {
	        if (ast.length == 0 ||
	            ast.length == 1 && ast[0] instanceof Attribute$1 && !((ast[0])).value) {
	            // Do not create empty messages
	            return null;
	        }
	        var _a = _parseMessageMeta(msgMeta), meaning = _a.meaning, description = _a.description, id = _a.id;
	        var /** @type {?} */ message = this._createI18nMessage(ast, meaning, description, id);
	        this._messages.push(message);
	        return message;
	    };
	    /**
	     * @param {?} el
	     * @param {?} message
	     * @return {?}
	     */
	    _Visitor.prototype._translateMessage = function (el, message) {
	        if (message && this._mode === _VisitorMode.Merge) {
	            var /** @type {?} */ nodes = this._translations.get(message);
	            if (nodes) {
	                return nodes;
	            }
	            this._reportError(el, "Translation unavailable for message id=\"" + this._translations.digest(message) + "\"");
	        }
	        return [];
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    _Visitor.prototype._translateAttributes = function (el) {
	        var _this = this;
	        var /** @type {?} */ attributes = el.attrs;
	        var /** @type {?} */ i18nParsedMessageMeta = {};
	        attributes.forEach(function (attr) {
	            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	                    _parseMessageMeta(attr.value);
	            }
	        });
	        var /** @type {?} */ translatedAttributes = [];
	        attributes.forEach(function (attr) {
	            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                // strip i18n specific attributes
	                return;
	            }
	            if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {
	                var _a = i18nParsedMessageMeta[attr.name], meaning = _a.meaning, description = _a.description, id = _a.id;
	                var /** @type {?} */ message = _this._createI18nMessage([attr], meaning, description, id);
	                var /** @type {?} */ nodes = _this._translations.get(message);
	                if (nodes) {
	                    if (nodes.length == 0) {
	                        translatedAttributes.push(new Attribute$1(attr.name, '', attr.sourceSpan));
	                    }
	                    else if (nodes[0] instanceof Text) {
	                        var /** @type {?} */ value = ((nodes[0])).value;
	                        translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
	                    }
	                    else {
	                        _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + (id || _this._translations.digest(message)) + "\")");
	                    }
	                }
	                else {
	                    _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + (id || _this._translations.digest(message)) + "\")");
	                }
	            }
	            else {
	                translatedAttributes.push(attr);
	            }
	        });
	        return translatedAttributes;
	    };
	    /**
	     * Add the node as a child of the block when:
	     * - we are in a block,
	     * - we are not inside a ICU message (those are handled separately),
	     * - the node is a "direct child" of the block
	     * @param {?} node
	     * @return {?}
	     */
	    _Visitor.prototype._mayBeAddBlockChildren = function (node) {
	        if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
	            this._blockChildren.push(node);
	        }
	    };
	    /**
	     * Marks the start of a section, see `_closeTranslatableSection`
	     * @param {?} node
	     * @return {?}
	     */
	    _Visitor.prototype._openTranslatableSection = function (node) {
	        if (this._isInTranslatableSection) {
	            this._reportError(node, 'Unexpected section start');
	        }
	        else {
	            this._msgCountAtSectionStart = this._messages.length;
	        }
	    };
	    Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
	        /**
	         * A translatable section could be:
	         * - the content of translatable element,
	         * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
	         * @return {?}
	         */
	        get: function () {
	            return this._msgCountAtSectionStart !== void 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Terminates a section.
	     *
	     * If a section has only one significant children (comments not significant) then we should not
	     * keep the message from this children:
	     *
	     * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
	     * - one for the <p> content with meaning and description,
	     * - another one for the ICU message.
	     *
	     * In this case the last message is discarded as it contains less information (the AST is
	     * otherwise identical).
	     *
	     * Note that we should still keep messages extracted from attributes inside the section (ie in the
	     * ICU message here)
	     * @param {?} node
	     * @param {?} directChildren
	     * @return {?}
	     */
	    _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
	        if (!this._isInTranslatableSection) {
	            this._reportError(node, 'Unexpected section end');
	            return;
	        }
	        var /** @type {?} */ startIndex = this._msgCountAtSectionStart;
	        var /** @type {?} */ significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1); }, 0);
	        if (significantChildren == 1) {
	            for (var /** @type {?} */ i = this._messages.length - 1; i >= startIndex; i--) {
	                var /** @type {?} */ ast = this._messages[i].nodes;
	                if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
	                    this._messages.splice(i, 1);
	                    break;
	                }
	            }
	        }
	        this._msgCountAtSectionStart = undefined;
	    };
	    /**
	     * @param {?} node
	     * @param {?} msg
	     * @return {?}
	     */
	    _Visitor.prototype._reportError = function (node, msg) {
	        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), msg));
	    };
	    return _Visitor;
	}());
	/**
	 * @param {?} n
	 * @return {?}
	 */
	function _isOpeningComment(n) {
	    return !!(n instanceof Comment && n.value && n.value.startsWith('i18n'));
	}
	/**
	 * @param {?} n
	 * @return {?}
	 */
	function _isClosingComment(n) {
	    return !!(n instanceof Comment && n.value && n.value === '/i18n');
	}
	/**
	 * @param {?} p
	 * @return {?}
	 */
	function _getI18nAttr(p) {
	    return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;
	}
	/**
	 * @param {?=} i18n
	 * @return {?}
	 */
	function _parseMessageMeta(i18n) {
	    if (!i18n)
	        return { meaning: '', description: '', id: '' };
	    var /** @type {?} */ idIndex = i18n.indexOf(ID_SEPARATOR);
	    var /** @type {?} */ descIndex = i18n.indexOf(MEANING_SEPARATOR);
	    var _a = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''], meaningAndDesc = _a[0], id = _a[1];
	    var _b = (descIndex > -1) ?
	        [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :
	        ['', meaningAndDesc], meaning = _b[0], description = _b[1];
	    return { meaning: meaning, description: description, id: id };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var XmlTagDefinition = (function () {
	    function XmlTagDefinition() {
	        this.closedByParent = false;
	        this.contentType = TagContentType.PARSABLE_DATA;
	        this.isVoid = false;
	        this.ignoreFirstLf = false;
	        this.canSelfClose = true;
	    }
	    /**
	     * @param {?} currentParent
	     * @return {?}
	     */
	    XmlTagDefinition.prototype.requireExtraParent = function (currentParent) { return false; };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    XmlTagDefinition.prototype.isClosedByChild = function (name) { return false; };
	    return XmlTagDefinition;
	}());
	var _TAG_DEFINITION = new XmlTagDefinition();
	/**
	 * @param {?} tagName
	 * @return {?}
	 */
	function getXmlTagDefinition(tagName) {
	    return _TAG_DEFINITION;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var XmlParser = (function (_super) {
	    __extends(XmlParser, _super);
	    function XmlParser() {
	        return _super.call(this, getXmlTagDefinition) || this;
	    }
	    /**
	     * @param {?} source
	     * @param {?} url
	     * @param {?=} parseExpansionForms
	     * @return {?}
	     */
	    XmlParser.prototype.parse = function (source, url, parseExpansionForms) {
	        if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	        return _super.prototype.parse.call(this, source, url, parseExpansionForms);
	    };
	    return XmlParser;
	}(Parser$1));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} message
	 * @return {?}
	 */
	function digest(message) {
	    return message.id || sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
	}
	/**
	 * @param {?} message
	 * @return {?}
	 */
	function decimalDigest(message) {
	    if (message.id) {
	        return message.id;
	    }
	    var /** @type {?} */ visitor = new _SerializerIgnoreIcuExpVisitor();
	    var /** @type {?} */ parts = message.nodes.map(function (a) { return a.visit(visitor, null); });
	    return computeMsgId(parts.join(''), message.meaning);
	}
	/**
	 * Serialize the i18n ast to something xml-like in order to generate an UID.
	 *
	 * The visitor is also used in the i18n parser tests
	 *
	 * \@internal
	 */
	var _SerializerVisitor = (function () {
	    function _SerializerVisitor() {
	    }
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitText = function (text, context) { return text.value; };
	    /**
	     * @param {?} container
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        return "[" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + "]";
	    };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
	        return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
	    };
	    /**
	     * @param {?} ph
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        return ph.isVoid ?
	            "<ph tag name=\"" + ph.startName + "\"/>" :
	            "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
	    };
	    /**
	     * @param {?} ph
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
	        return ph.value ? "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>" : "<ph name=\"" + ph.name + "\"/>";
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
	    };
	    return _SerializerVisitor;
	}());
	var serializerVisitor = new _SerializerVisitor();
	/**
	 * @param {?} nodes
	 * @return {?}
	 */
	function serializeNodes(nodes) {
	    return nodes.map(function (a) { return a.visit(serializerVisitor, null); });
	}
	/**
	 * Serialize the i18n ast to something xml-like in order to generate an UID.
	 *
	 * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
	 *
	 * \@internal
	 */
	var _SerializerIgnoreIcuExpVisitor = (function (_super) {
	    __extends(_SerializerIgnoreIcuExpVisitor, _super);
	    function _SerializerIgnoreIcuExpVisitor() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
	        // Do not take the expression into account
	        return "{" + icu.type + ", " + strCases.join(', ') + "}";
	    };
	    return _SerializerIgnoreIcuExpVisitor;
	}(_SerializerVisitor));
	/**
	 * Compute the SHA1 of the given string
	 *
	 * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
	 *
	 * WARNING: this function has not been designed not tested with security in mind.
	 *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
	 * @param {?} str
	 * @return {?}
	 */
	function sha1(str) {
	    var /** @type {?} */ utf8 = utf8Encode(str);
	    var /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);
	    var /** @type {?} */ len = utf8.length * 8;
	    var /** @type {?} */ w = new Array(80);
	    var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];
	    words32[len >> 5] |= 0x80 << (24 - len % 32);
	    words32[((len + 64 >> 9) << 4) + 15] = len;
	    for (var /** @type {?} */ i = 0; i < words32.length; i += 16) {
	        var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];
	        for (var /** @type {?} */ j = 0; j < 80; j++) {
	            if (j < 16) {
	                w[j] = words32[i + j];
	            }
	            else {
	                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
	            }
	            var _c = fk(j, b, c, d), f = _c[0], k = _c[1];
	            var /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
	            _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
	        }
	        _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
	    }
	    return byteStringToHexString(words32ToByteString([a, b, c, d, e]));
	    var _d, _e;
	}
	/**
	 * @param {?} index
	 * @param {?} b
	 * @param {?} c
	 * @param {?} d
	 * @return {?}
	 */
	function fk(index, b, c, d) {
	    if (index < 20) {
	        return [(b & c) | (~b & d), 0x5a827999];
	    }
	    if (index < 40) {
	        return [b ^ c ^ d, 0x6ed9eba1];
	    }
	    if (index < 60) {
	        return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
	    }
	    return [b ^ c ^ d, 0xca62c1d6];
	}
	/**
	 * Compute the fingerprint of the given string
	 *
	 * The output is 64 bit number encoded as a decimal string
	 *
	 * based on:
	 * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
	 * @param {?} str
	 * @return {?}
	 */
	function fingerprint(str) {
	    var /** @type {?} */ utf8 = utf8Encode(str);
	    var _a = [hash32(utf8, 0), hash32(utf8, 102072)], hi = _a[0], lo = _a[1];
	    if (hi == 0 && (lo == 0 || lo == 1)) {
	        hi = hi ^ 0x130f9bef;
	        lo = lo ^ -0x6b5f56d8;
	    }
	    return [hi, lo];
	}
	/**
	 * @param {?} msg
	 * @param {?} meaning
	 * @return {?}
	 */
	function computeMsgId(msg, meaning) {
	    var _a = fingerprint(msg), hi = _a[0], lo = _a[1];
	    if (meaning) {
	        var _b = fingerprint(meaning), him = _b[0], lom = _b[1];
	        _c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1];
	    }
	    return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));
	    var _c;
	}
	/**
	 * @param {?} str
	 * @param {?} c
	 * @return {?}
	 */
	function hash32(str, c) {
	    var _a = [0x9e3779b9, 0x9e3779b9], a = _a[0], b = _a[1];
	    var /** @type {?} */ i;
	    var /** @type {?} */ len = str.length;
	    for (i = 0; i + 12 <= len; i += 12) {
	        a = add32(a, wordAt(str, i, Endian.Little));
	        b = add32(b, wordAt(str, i + 4, Endian.Little));
	        c = add32(c, wordAt(str, i + 8, Endian.Little));
	        _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2];
	    }
	    a = add32(a, wordAt(str, i, Endian.Little));
	    b = add32(b, wordAt(str, i + 4, Endian.Little));
	    // the first byte of c is reserved for the length
	    c = add32(c, len);
	    c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
	    return mix([a, b, c])[2];
	    var _b;
	}
	/**
	 * @param {?} __0
	 * @return {?}
	 */
	function mix(_a) {
	    var a = _a[0], b = _a[1], c = _a[2];
	    a = sub32(a, b);
	    a = sub32(a, c);
	    a ^= c >>> 13;
	    b = sub32(b, c);
	    b = sub32(b, a);
	    b ^= a << 8;
	    c = sub32(c, a);
	    c = sub32(c, b);
	    c ^= b >>> 13;
	    a = sub32(a, b);
	    a = sub32(a, c);
	    a ^= c >>> 12;
	    b = sub32(b, c);
	    b = sub32(b, a);
	    b ^= a << 16;
	    c = sub32(c, a);
	    c = sub32(c, b);
	    c ^= b >>> 5;
	    a = sub32(a, b);
	    a = sub32(a, c);
	    a ^= c >>> 3;
	    b = sub32(b, c);
	    b = sub32(b, a);
	    b ^= a << 10;
	    c = sub32(c, a);
	    c = sub32(c, b);
	    c ^= b >>> 15;
	    return [a, b, c];
	}
	var Endian = {};
	Endian.Little = 0;
	Endian.Big = 1;
	Endian[Endian.Little] = "Little";
	Endian[Endian.Big] = "Big";
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function add32(a, b) {
	    return add32to64(a, b)[1];
	}
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function add32to64(a, b) {
	    var /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);
	    var /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);
	    return [high >>> 16, (high << 16) | (low & 0xffff)];
	}
	/**
	 * @param {?} __0
	 * @param {?} __1
	 * @return {?}
	 */
	function add64(_a, _b) {
	    var ah = _a[0], al = _a[1];
	    var bh = _b[0], bl = _b[1];
	    var _c = add32to64(al, bl), carry = _c[0], l = _c[1];
	    var /** @type {?} */ h = add32(add32(ah, bh), carry);
	    return [h, l];
	}
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function sub32(a, b) {
	    var /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);
	    var /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);
	    return (high << 16) | (low & 0xffff);
	}
	/**
	 * @param {?} a
	 * @param {?} count
	 * @return {?}
	 */
	function rol32(a, count) {
	    return (a << count) | (a >>> (32 - count));
	}
	/**
	 * @param {?} __0
	 * @param {?} count
	 * @return {?}
	 */
	function rol64(_a, count) {
	    var hi = _a[0], lo = _a[1];
	    var /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));
	    var /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));
	    return [h, l];
	}
	/**
	 * @param {?} str
	 * @param {?} endian
	 * @return {?}
	 */
	function stringToWords32(str, endian) {
	    var /** @type {?} */ words32 = Array((str.length + 3) >>> 2);
	    for (var /** @type {?} */ i = 0; i < words32.length; i++) {
	        words32[i] = wordAt(str, i * 4, endian);
	    }
	    return words32;
	}
	/**
	 * @param {?} str
	 * @param {?} index
	 * @return {?}
	 */
	function byteAt(str, index) {
	    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;
	}
	/**
	 * @param {?} str
	 * @param {?} index
	 * @param {?} endian
	 * @return {?}
	 */
	function wordAt(str, index, endian) {
	    var /** @type {?} */ word = 0;
	    if (endian === Endian.Big) {
	        for (var /** @type {?} */ i = 0; i < 4; i++) {
	            word += byteAt(str, index + i) << (24 - 8 * i);
	        }
	    }
	    else {
	        for (var /** @type {?} */ i = 0; i < 4; i++) {
	            word += byteAt(str, index + i) << 8 * i;
	        }
	    }
	    return word;
	}
	/**
	 * @param {?} words32
	 * @return {?}
	 */
	function words32ToByteString(words32) {
	    return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, '');
	}
	/**
	 * @param {?} word
	 * @return {?}
	 */
	function word32ToByteString(word) {
	    var /** @type {?} */ str = '';
	    for (var /** @type {?} */ i = 0; i < 4; i++) {
	        str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);
	    }
	    return str;
	}
	/**
	 * @param {?} str
	 * @return {?}
	 */
	function byteStringToHexString(str) {
	    var /** @type {?} */ hex = '';
	    for (var /** @type {?} */ i = 0; i < str.length; i++) {
	        var /** @type {?} */ b = byteAt(str, i);
	        hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
	    }
	    return hex.toLowerCase();
	}
	/**
	 * @param {?} str
	 * @return {?}
	 */
	function byteStringToDecString(str) {
	    var /** @type {?} */ decimal = '';
	    var /** @type {?} */ toThePower = '1';
	    for (var /** @type {?} */ i = str.length - 1; i >= 0; i--) {
	        decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
	        toThePower = numberTimesBigInt(256, toThePower);
	    }
	    return decimal.split('').reverse().join('');
	}
	/**
	 * @param {?} x
	 * @param {?} y
	 * @return {?}
	 */
	function addBigInt(x, y) {
	    var /** @type {?} */ sum = '';
	    var /** @type {?} */ len = Math.max(x.length, y.length);
	    for (var /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {
	        var /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
	        if (tmpSum >= 10) {
	            carry = 1;
	            sum += tmpSum - 10;
	        }
	        else {
	            carry = 0;
	            sum += tmpSum;
	        }
	    }
	    return sum;
	}
	/**
	 * @param {?} num
	 * @param {?} b
	 * @return {?}
	 */
	function numberTimesBigInt(num, b) {
	    var /** @type {?} */ product = '';
	    var /** @type {?} */ bToThePower = b;
	    for (; num !== 0; num = num >>> 1) {
	        if (num & 1)
	            product = addBigInt(product, bToThePower);
	        bToThePower = addBigInt(bToThePower, bToThePower);
	    }
	    return product;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @abstract
	 */
	var Serializer = (function () {
	    function Serializer() {
	    }
	    /**
	     * @abstract
	     * @param {?} messages
	     * @param {?} locale
	     * @return {?}
	     */
	    Serializer.prototype.write = function (messages, locale) { };
	    /**
	     * @abstract
	     * @param {?} content
	     * @param {?} url
	     * @return {?}
	     */
	    Serializer.prototype.load = function (content, url) { };
	    /**
	     * @abstract
	     * @param {?} message
	     * @return {?}
	     */
	    Serializer.prototype.digest = function (message) { };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Serializer.prototype.createNameMapper = function (message) { return null; };
	    return Serializer;
	}());
	/**
	 * A simple mapper that take a function to transform an internal name to a public name
	 */
	var SimplePlaceholderMapper = (function (_super) {
	    __extends(SimplePlaceholderMapper, _super);
	    /**
	     * @param {?} message
	     * @param {?} mapName
	     */
	    function SimplePlaceholderMapper(message, mapName) {
	        var _this = _super.call(this) || this;
	        _this.mapName = mapName;
	        _this.internalToPublic = {};
	        _this.publicToNextId = {};
	        _this.publicToInternal = {};
	        message.nodes.forEach(function (node) { return node.visit(_this); });
	        return _this;
	    }
	    /**
	     * @param {?} internalName
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.toPublicName = function (internalName) {
	        return this.internalToPublic.hasOwnProperty(internalName) ?
	            this.internalToPublic[internalName] :
	            null;
	    };
	    /**
	     * @param {?} publicName
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.toInternalName = function (publicName) {
	        return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :
	            null;
	    };
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.visitText = function (text, context) { return null; };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.visitTagPlaceholder = function (ph, context) {
	        this.visitPlaceholderName(ph.startName);
	        _super.prototype.visitTagPlaceholder.call(this, ph, context);
	        this.visitPlaceholderName(ph.closeName);
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.visitPlaceholder = function (ph, context) { this.visitPlaceholderName(ph.name); };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.visitIcuPlaceholder = function (ph, context) {
	        this.visitPlaceholderName(ph.name);
	    };
	    /**
	     * @param {?} internalName
	     * @return {?}
	     */
	    SimplePlaceholderMapper.prototype.visitPlaceholderName = function (internalName) {
	        if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {
	            return;
	        }
	        var /** @type {?} */ publicName = this.mapName(internalName);
	        if (this.publicToInternal.hasOwnProperty(publicName)) {
	            // Create a new XMB when it has already been used
	            var /** @type {?} */ nextId = this.publicToNextId[publicName];
	            this.publicToNextId[publicName] = nextId + 1;
	            publicName = publicName + "_" + nextId;
	        }
	        else {
	            this.publicToNextId[publicName] = 1;
	        }
	        this.internalToPublic[internalName] = publicName;
	        this.publicToInternal[publicName] = internalName;
	    };
	    return SimplePlaceholderMapper;
	}(RecurseVisitor));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _Visitor$1 = (function () {
	    function _Visitor$1() {
	    }
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    _Visitor$1.prototype.visitTag = function (tag) {
	        var _this = this;
	        var /** @type {?} */ strAttrs = this._serializeAttributes(tag.attrs);
	        if (tag.children.length == 0) {
	            return "<" + tag.name + strAttrs + "/>";
	        }
	        var /** @type {?} */ strChildren = tag.children.map(function (node) { return node.visit(_this); });
	        return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
	    };
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    _Visitor$1.prototype.visitText = function (text) { return text.value; };
	    /**
	     * @param {?} decl
	     * @return {?}
	     */
	    _Visitor$1.prototype.visitDeclaration = function (decl) {
	        return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
	    };
	    /**
	     * @param {?} attrs
	     * @return {?}
	     */
	    _Visitor$1.prototype._serializeAttributes = function (attrs) {
	        var /** @type {?} */ strAttrs = Object.keys(attrs).map(function (name) { return name + "=\"" + attrs[name] + "\""; }).join(' ');
	        return strAttrs.length > 0 ? ' ' + strAttrs : '';
	    };
	    /**
	     * @param {?} doctype
	     * @return {?}
	     */
	    _Visitor$1.prototype.visitDoctype = function (doctype) {
	        return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
	    };
	    return _Visitor$1;
	}());
	var _visitor = new _Visitor$1();
	/**
	 * @param {?} nodes
	 * @return {?}
	 */
	function serialize(nodes) {
	    return nodes.map(function (node) { return node.visit(_visitor); }).join('');
	}
	var Declaration = (function () {
	    /**
	     * @param {?} unescapedAttrs
	     */
	    function Declaration(unescapedAttrs) {
	        var _this = this;
	        this.attrs = {};
	        Object.keys(unescapedAttrs).forEach(function (k) {
	            _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	        });
	    }
	    /**
	     * @param {?} visitor
	     * @return {?}
	     */
	    Declaration.prototype.visit = function (visitor) { return visitor.visitDeclaration(this); };
	    return Declaration;
	}());
	var Doctype = (function () {
	    /**
	     * @param {?} rootTag
	     * @param {?} dtd
	     */
	    function Doctype(rootTag, dtd) {
	        this.rootTag = rootTag;
	        this.dtd = dtd;
	    }
	    
	    /**
	     * @param {?} visitor
	     * @return {?}
	     */
	    Doctype.prototype.visit = function (visitor) { return visitor.visitDoctype(this); };
	    return Doctype;
	}());
	var Tag = (function () {
	    /**
	     * @param {?} name
	     * @param {?=} unescapedAttrs
	     * @param {?=} children
	     */
	    function Tag(name, unescapedAttrs, children) {
	        if (unescapedAttrs === void 0) { unescapedAttrs = {}; }
	        if (children === void 0) { children = []; }
	        var _this = this;
	        this.name = name;
	        this.children = children;
	        this.attrs = {};
	        Object.keys(unescapedAttrs).forEach(function (k) {
	            _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	        });
	    }
	    /**
	     * @param {?} visitor
	     * @return {?}
	     */
	    Tag.prototype.visit = function (visitor) { return visitor.visitTag(this); };
	    return Tag;
	}());
	var Text$2 = (function () {
	    /**
	     * @param {?} unescapedValue
	     */
	    function Text$2(unescapedValue) {
	        this.value = _escapeXml(unescapedValue);
	    }
	    
	    /**
	     * @param {?} visitor
	     * @return {?}
	     */
	    Text$2.prototype.visit = function (visitor) { return visitor.visitText(this); };
	    return Text$2;
	}());
	var CR = (function (_super) {
	    __extends(CR, _super);
	    /**
	     * @param {?=} ws
	     */
	    function CR(ws) {
	        if (ws === void 0) { ws = 0; }
	        return _super.call(this, "\n" + new Array(ws + 1).join(' ')) || this;
	    }
	    return CR;
	}(Text$2));
	var _ESCAPED_CHARS = [
	    [/&/g, '&amp;'],
	    [/"/g, '&quot;'],
	    [/'/g, '&apos;'],
	    [/</g, '&lt;'],
	    [/>/g, '&gt;'],
	];
	/**
	 * @param {?} text
	 * @return {?}
	 */
	function _escapeXml(text) {
	    return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _VERSION = '1.2';
	var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
	// TODO(vicb): make this a param (s/_/-/)
	var _DEFAULT_SOURCE_LANG = 'en';
	var _PLACEHOLDER_TAG = 'x';
	var _FILE_TAG = 'file';
	var _SOURCE_TAG = 'source';
	var _TARGET_TAG = 'target';
	var _UNIT_TAG = 'trans-unit';
	var _CONTEXT_GROUP_TAG = 'context-group';
	var _CONTEXT_TAG = 'context';
	var Xliff = (function (_super) {
	    __extends(Xliff, _super);
	    function Xliff() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} messages
	     * @param {?} locale
	     * @return {?}
	     */
	    Xliff.prototype.write = function (messages, locale) {
	        var /** @type {?} */ visitor = new _WriteVisitor();
	        var /** @type {?} */ transUnits = [];
	        messages.forEach(function (message) {
	            var /** @type {?} */ contextTags = [];
	            message.sources.forEach(function (source) {
	                var /** @type {?} */ contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, { purpose: 'location' });
	                contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'sourcefile' }, [new Text$2(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'linenumber' }, [new Text$2("" + source.startLine)]), new CR(8));
	                contextTags.push(new CR(8), contextGroupTag);
	            });
	            var /** @type {?} */ transUnit = new Tag(_UNIT_TAG, { id: message.id, datatype: 'html' });
	            (_a = transUnit.children).push.apply(_a, [new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG)].concat(contextTags));
	            if (message.description) {
	                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));
	            }
	            if (message.meaning) {
	                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));
	            }
	            transUnit.children.push(new CR(6));
	            transUnits.push(new CR(6), transUnit);
	            var _a;
	        });
	        var /** @type {?} */ body = new Tag('body', {}, transUnits.concat([new CR(4)]));
	        var /** @type {?} */ file = new Tag('file', {
	            'source-language': locale || _DEFAULT_SOURCE_LANG,
	            datatype: 'plaintext',
	            original: 'ng2.template',
	        }, [new CR(4), body, new CR(2)]);
	        var /** @type {?} */ xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);
	        return serialize([
	            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()
	        ]);
	    };
	    /**
	     * @param {?} content
	     * @param {?} url
	     * @return {?}
	     */
	    Xliff.prototype.load = function (content, url) {
	        // xliff to xml nodes
	        var /** @type {?} */ xliffParser = new XliffParser();
	        var _a = xliffParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
	        // xml nodes to i18n nodes
	        var /** @type {?} */ i18nNodesByMsgId = {};
	        var /** @type {?} */ converter = new XmlToI18n();
	        Object.keys(msgIdToHtml).forEach(function (msgId) {
	            var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, e = _a.errors;
	            errors.push.apply(errors, e);
	            i18nNodesByMsgId[msgId] = i18nNodes;
	        });
	        if (errors.length) {
	            throw new Error("xliff parse errors:\n" + errors.join('\n'));
	        }
	        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId: i18nNodesByMsgId };
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xliff.prototype.digest = function (message) { return digest(message); };
	    return Xliff;
	}(Serializer));
	var _WriteVisitor = (function () {
	    function _WriteVisitor() {
	    }
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	    /**
	     * @param {?} container
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var /** @type {?} */ nodes = [];
	        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	        return nodes;
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
	        Object.keys(icu.cases).forEach(function (c) {
	            nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
	        });
	        nodes.push(new Text$2("}"));
	        return nodes;
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var /** @type {?} */ ctype = getCtypeForTag(ph.tag);
	        var /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype });
	        if (ph.isVoid) {
	            // void tags have no children nor closing tags
	            return [startTagPh];
	        }
	        var /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype });
	        return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	    };
	    /**
	     * @param {?} nodes
	     * @return {?}
	     */
	    _WriteVisitor.prototype.serialize = function (nodes) {
	        var _this = this;
	        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));
	    };
	    return _WriteVisitor;
	}());
	var XliffParser = (function () {
	    function XliffParser() {
	        this._locale = null;
	    }
	    /**
	     * @param {?} xliff
	     * @param {?} url
	     * @return {?}
	     */
	    XliffParser.prototype.parse = function (xliff, url) {
	        this._unitMlString = null;
	        this._msgIdToHtml = {};
	        var /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);
	        this._errors = xml.errors;
	        visitAll(this, xml.rootNodes, null);
	        return {
	            msgIdToHtml: this._msgIdToHtml,
	            errors: this._errors,
	            locale: this._locale,
	        };
	    };
	    /**
	     * @param {?} element
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitElement = function (element, context) {
	        switch (element.name) {
	            case _UNIT_TAG:
	                this._unitMlString = ((null));
	                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                if (!idAttr) {
	                    this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
	                }
	                else {
	                    var /** @type {?} */ id = idAttr.value;
	                    if (this._msgIdToHtml.hasOwnProperty(id)) {
	                        this._addError(element, "Duplicated translations for msg " + id);
	                    }
	                    else {
	                        visitAll(this, element.children, null);
	                        if (typeof this._unitMlString === 'string') {
	                            this._msgIdToHtml[id] = this._unitMlString;
	                        }
	                        else {
	                            this._addError(element, "Message " + id + " misses a translation");
	                        }
	                    }
	                }
	                break;
	            case _SOURCE_TAG:
	                // ignore source message
	                break;
	            case _TARGET_TAG:
	                var /** @type {?} */ innerTextStart = ((element.startSourceSpan)).end.offset;
	                var /** @type {?} */ innerTextEnd = ((element.endSourceSpan)).start.offset;
	                var /** @type {?} */ content = ((element.startSourceSpan)).start.file.content;
	                var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);
	                this._unitMlString = innerText;
	                break;
	            case _FILE_TAG:
	                var /** @type {?} */ localeAttr = element.attrs.find(function (attr) { return attr.name === 'target-language'; });
	                if (localeAttr) {
	                    this._locale = localeAttr.value;
	                }
	                visitAll(this, element.children, null);
	                break;
	            default:
	                // TODO(vicb): assert file structure, xliff version
	                // For now only recurse on unhandled nodes
	                visitAll(this, element.children, null);
	        }
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitAttribute = function (attribute, context) { };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitText = function (text, context) { };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitComment = function (comment, context) { };
	    /**
	     * @param {?} expansion
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitExpansion = function (expansion, context) { };
	    /**
	     * @param {?} expansionCase
	     * @param {?} context
	     * @return {?}
	     */
	    XliffParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	    /**
	     * @param {?} node
	     * @param {?} message
	     * @return {?}
	     */
	    XliffParser.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));
	    };
	    return XliffParser;
	}());
	var XmlToI18n = (function () {
	    function XmlToI18n() {
	    }
	    /**
	     * @param {?} message
	     * @param {?} url
	     * @return {?}
	     */
	    XmlToI18n.prototype.convert = function (message, url) {
	        var /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);
	        this._errors = xmlIcu.errors;
	        var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?
	            [] :
	            visitAll(this, xmlIcu.rootNodes);
	        return {
	            i18nNodes: i18nNodes,
	            errors: this._errors,
	        };
	    };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, /** @type {?} */ ((text.sourceSpan))); };
	    /**
	     * @param {?} el
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitElement = function (el, context) {
	        if (el.name === _PLACEHOLDER_TAG) {
	            var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'id'; });
	            if (nameAttr) {
	                return new Placeholder('', nameAttr.value, /** @type {?} */ ((el.sourceSpan)));
	            }
	            this._addError(el, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
	        }
	        else {
	            this._addError(el, "Unexpected tag");
	        }
	        return null;
	    };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitExpansion = function (icu, context) {
	        var /** @type {?} */ caseMap = {};
	        visitAll(this, icu.cases).forEach(function (c) {
	            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
	        });
	        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
	    };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) {
	        return {
	            value: icuCase.value,
	            nodes: visitAll(this, icuCase.expression),
	        };
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitComment = function (comment, context) { };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	    /**
	     * @param {?} node
	     * @param {?} message
	     * @return {?}
	     */
	    XmlToI18n.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));
	    };
	    return XmlToI18n;
	}());
	/**
	 * @param {?} tag
	 * @return {?}
	 */
	function getCtypeForTag(tag) {
	    switch (tag.toLowerCase()) {
	        case 'br':
	            return 'lb';
	        case 'img':
	            return 'image';
	        default:
	            return "x-" + tag;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _VERSION$1 = '2.0';
	var _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:2.0';
	// TODO(vicb): make this a param (s/_/-/)
	var _DEFAULT_SOURCE_LANG$1 = 'en';
	var _PLACEHOLDER_TAG$1 = 'ph';
	var _PLACEHOLDER_SPANNING_TAG = 'pc';
	var _XLIFF_TAG = 'xliff';
	var _SOURCE_TAG$1 = 'source';
	var _TARGET_TAG$1 = 'target';
	var _UNIT_TAG$1 = 'unit';
	var Xliff2 = (function (_super) {
	    __extends(Xliff2, _super);
	    function Xliff2() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} messages
	     * @param {?} locale
	     * @return {?}
	     */
	    Xliff2.prototype.write = function (messages, locale) {
	        var /** @type {?} */ visitor = new _WriteVisitor$1();
	        var /** @type {?} */ units = [];
	        messages.forEach(function (message) {
	            var /** @type {?} */ unit = new Tag(_UNIT_TAG$1, { id: message.id });
	            if (message.description || message.meaning) {
	                var /** @type {?} */ notes = new Tag('notes');
	                if (message.description) {
	                    notes.children.push(new CR(8), new Tag('note', { category: 'description' }, [new Text$2(message.description)]));
	                }
	                if (message.meaning) {
	                    notes.children.push(new CR(8), new Tag('note', { category: 'meaning' }, [new Text$2(message.meaning)]));
	                }
	                notes.children.push(new CR(6));
	                unit.children.push(new CR(6), notes);
	            }
	            var /** @type {?} */ segment = new Tag('segment');
	            segment.children.push(new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes)), new CR(6));
	            unit.children.push(new CR(6), segment, new CR(4));
	            units.push(new CR(4), unit);
	        });
	        var /** @type {?} */ file = new Tag('file', { 'original': 'ng.template', id: 'ngi18n' }, units.concat([new CR(2)]));
	        var /** @type {?} */ xliff = new Tag(_XLIFF_TAG, { version: _VERSION$1, xmlns: _XMLNS$1, srcLang: locale || _DEFAULT_SOURCE_LANG$1 }, [new CR(2), file, new CR()]);
	        return serialize([
	            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()
	        ]);
	    };
	    /**
	     * @param {?} content
	     * @param {?} url
	     * @return {?}
	     */
	    Xliff2.prototype.load = function (content, url) {
	        // xliff to xml nodes
	        var /** @type {?} */ xliff2Parser = new Xliff2Parser();
	        var _a = xliff2Parser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
	        // xml nodes to i18n nodes
	        var /** @type {?} */ i18nNodesByMsgId = {};
	        var /** @type {?} */ converter = new XmlToI18n$1();
	        Object.keys(msgIdToHtml).forEach(function (msgId) {
	            var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, e = _a.errors;
	            errors.push.apply(errors, e);
	            i18nNodesByMsgId[msgId] = i18nNodes;
	        });
	        if (errors.length) {
	            throw new Error("xliff2 parse errors:\n" + errors.join('\n'));
	        }
	        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId: i18nNodesByMsgId };
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xliff2.prototype.digest = function (message) { return decimalDigest(message); };
	    return Xliff2;
	}(Serializer));
	var _WriteVisitor$1 = (function () {
	    function _WriteVisitor$1() {
	    }
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor$1.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	    /**
	     * @param {?} container
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor$1.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var /** @type {?} */ nodes = [];
	        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	        return nodes;
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor$1.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
	        Object.keys(icu.cases).forEach(function (c) {
	            nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
	        });
	        nodes.push(new Text$2("}"));
	        return nodes;
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor$1.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        var /** @type {?} */ type = getTypeForTag(ph.tag);
	        if (ph.isVoid) {
	            var /** @type {?} */ tagPh = new Tag(_PLACEHOLDER_TAG$1, {
	                id: (this._nextPlaceholderId++).toString(),
	                equiv: ph.startName,
	                type: type,
	                disp: "<" + ph.tag + "/>",
	            });
	            return [tagPh];
	        }
	        var /** @type {?} */ tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {
	            id: (this._nextPlaceholderId++).toString(),
	            equivStart: ph.startName,
	            equivEnd: ph.closeName,
	            type: type,
	            dispStart: "<" + ph.tag + ">",
	            dispEnd: "</" + ph.tag + ">",
	        });
	        var /** @type {?} */ nodes = [].concat.apply([], ph.children.map(function (node) { return node.visit(_this); }));
	        if (nodes.length) {
	            nodes.forEach(function (node) { return tagPc.children.push(node); });
	        }
	        else {
	            tagPc.children.push(new Text$2(''));
	        }
	        return [tagPc];
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor$1.prototype.visitPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG$1, {
	                id: (this._nextPlaceholderId++).toString(),
	                equiv: ph.name,
	                disp: "{{" + ph.value + "}}",
	            })];
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _WriteVisitor$1.prototype.visitIcuPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG$1, { id: (this._nextPlaceholderId++).toString() })];
	    };
	    /**
	     * @param {?} nodes
	     * @return {?}
	     */
	    _WriteVisitor$1.prototype.serialize = function (nodes) {
	        var _this = this;
	        this._nextPlaceholderId = 0;
	        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));
	    };
	    return _WriteVisitor$1;
	}());
	var Xliff2Parser = (function () {
	    function Xliff2Parser() {
	        this._locale = null;
	    }
	    /**
	     * @param {?} xliff
	     * @param {?} url
	     * @return {?}
	     */
	    Xliff2Parser.prototype.parse = function (xliff, url) {
	        this._unitMlString = null;
	        this._msgIdToHtml = {};
	        var /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);
	        this._errors = xml.errors;
	        visitAll(this, xml.rootNodes, null);
	        return {
	            msgIdToHtml: this._msgIdToHtml,
	            errors: this._errors,
	            locale: this._locale,
	        };
	    };
	    /**
	     * @param {?} element
	     * @param {?} context
	     * @return {?}
	     */
	    Xliff2Parser.prototype.visitElement = function (element, context) {
	        switch (element.name) {
	            case _UNIT_TAG$1:
	                this._unitMlString = null;
	                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                if (!idAttr) {
	                    this._addError(element, "<" + _UNIT_TAG$1 + "> misses the \"id\" attribute");
	                }
	                else {
	                    var /** @type {?} */ id = idAttr.value;
	                    if (this._msgIdToHtml.hasOwnProperty(id)) {
	                        this._addError(element, "Duplicated translations for msg " + id);
	                    }
	                    else {
	                        visitAll(this, element.children, null);
	                        if (typeof this._unitMlString === 'string') {
	                            this._msgIdToHtml[id] = this._unitMlString;
	                        }
	                        else {
	                            this._addError(element, "Message " + id + " misses a translation");
	                        }
	                    }
	                }
	                break;
	            case _SOURCE_TAG$1:
	                // ignore source message
	                break;
	            case _TARGET_TAG$1:
	                var /** @type {?} */ innerTextStart = ((element.startSourceSpan)).end.offset;
	                var /** @type {?} */ innerTextEnd = ((element.endSourceSpan)).start.offset;
	                var /** @type {?} */ content = ((element.startSourceSpan)).start.file.content;
	                var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);
	                this._unitMlString = innerText;
	                break;
	            case _XLIFF_TAG:
	                var /** @type {?} */ localeAttr = element.attrs.find(function (attr) { return attr.name === 'trgLang'; });
	                if (localeAttr) {
	                    this._locale = localeAttr.value;
	                }
	                var /** @type {?} */ versionAttr = element.attrs.find(function (attr) { return attr.name === 'version'; });
	                if (versionAttr) {
	                    var /** @type {?} */ version = versionAttr.value;
	                    if (version !== '2.0') {
	                        this._addError(element, "The XLIFF file version " + version + " is not compatible with XLIFF 2.0 serializer");
	                    }
	                    else {
	                        visitAll(this, element.children, null);
	                    }
	                }
	                break;
	            default:
	                visitAll(this, element.children, null);
	        }
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    Xliff2Parser.prototype.visitAttribute = function (attribute, context) { };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    Xliff2Parser.prototype.visitText = function (text, context) { };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    Xliff2Parser.prototype.visitComment = function (comment, context) { };
	    /**
	     * @param {?} expansion
	     * @param {?} context
	     * @return {?}
	     */
	    Xliff2Parser.prototype.visitExpansion = function (expansion, context) { };
	    /**
	     * @param {?} expansionCase
	     * @param {?} context
	     * @return {?}
	     */
	    Xliff2Parser.prototype.visitExpansionCase = function (expansionCase, context) { };
	    /**
	     * @param {?} node
	     * @param {?} message
	     * @return {?}
	     */
	    Xliff2Parser.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return Xliff2Parser;
	}());
	var XmlToI18n$1 = (function () {
	    function XmlToI18n$1() {
	    }
	    /**
	     * @param {?} message
	     * @param {?} url
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.convert = function (message, url) {
	        var /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);
	        this._errors = xmlIcu.errors;
	        var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?
	            [] : [].concat.apply([], visitAll(this, xmlIcu.rootNodes));
	        return {
	            i18nNodes: i18nNodes,
	            errors: this._errors,
	        };
	    };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	    /**
	     * @param {?} el
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitElement = function (el, context) {
	        var _this = this;
	        switch (el.name) {
	            case _PLACEHOLDER_TAG$1:
	                var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'equiv'; });
	                if (nameAttr) {
	                    return [new Placeholder('', nameAttr.value, el.sourceSpan)];
	                }
	                this._addError(el, "<" + _PLACEHOLDER_TAG$1 + "> misses the \"equiv\" attribute");
	                break;
	            case _PLACEHOLDER_SPANNING_TAG:
	                var /** @type {?} */ startAttr = el.attrs.find(function (attr) { return attr.name === 'equivStart'; });
	                var /** @type {?} */ endAttr = el.attrs.find(function (attr) { return attr.name === 'equivEnd'; });
	                if (!startAttr) {
	                    this._addError(el, "<" + _PLACEHOLDER_TAG$1 + "> misses the \"equivStart\" attribute");
	                }
	                else if (!endAttr) {
	                    this._addError(el, "<" + _PLACEHOLDER_TAG$1 + "> misses the \"equivEnd\" attribute");
	                }
	                else {
	                    var /** @type {?} */ startId = startAttr.value;
	                    var /** @type {?} */ endId = endAttr.value;
	                    var /** @type {?} */ nodes = [];
	                    return nodes.concat.apply(nodes, [new Placeholder('', startId, el.sourceSpan)].concat(el.children.map(function (node) { return node.visit(_this, null); }), [new Placeholder('', endId, el.sourceSpan)]));
	                }
	                break;
	            default:
	                this._addError(el, "Unexpected tag");
	        }
	        return null;
	    };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitExpansion = function (icu, context) {
	        var /** @type {?} */ caseMap = {};
	        visitAll(this, icu.cases).forEach(function (c) {
	            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
	        });
	        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
	    };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitExpansionCase = function (icuCase, context) {
	        return {
	            value: icuCase.value,
	            nodes: [].concat.apply([], visitAll(this, icuCase.expression)),
	        };
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitComment = function (comment, context) { };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$1.prototype.visitAttribute = function (attribute, context) { };
	    /**
	     * @param {?} node
	     * @param {?} message
	     * @return {?}
	     */
	    XmlToI18n$1.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return XmlToI18n$1;
	}());
	/**
	 * @param {?} tag
	 * @return {?}
	 */
	function getTypeForTag(tag) {
	    switch (tag.toLowerCase()) {
	        case 'br':
	        case 'b':
	        case 'i':
	        case 'u':
	            return 'fmt';
	        case 'img':
	            return 'image';
	        case 'a':
	            return 'link';
	        default:
	            return 'other';
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _MESSAGES_TAG = 'messagebundle';
	var _MESSAGE_TAG = 'msg';
	var _PLACEHOLDER_TAG$2 = 'ph';
	var _EXEMPLE_TAG = 'ex';
	var _SOURCE_TAG$2 = 'source';
	var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
	var Xmb = (function (_super) {
	    __extends(Xmb, _super);
	    function Xmb() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} messages
	     * @param {?} locale
	     * @return {?}
	     */
	    Xmb.prototype.write = function (messages, locale) {
	        var /** @type {?} */ exampleVisitor = new ExampleVisitor();
	        var /** @type {?} */ visitor = new _Visitor$2();
	        var /** @type {?} */ rootNode = new Tag(_MESSAGES_TAG);
	        messages.forEach(function (message) {
	            var /** @type {?} */ attrs = { id: message.id };
	            if (message.description) {
	                attrs['desc'] = message.description;
	            }
	            if (message.meaning) {
	                attrs['meaning'] = message.meaning;
	            }
	            var /** @type {?} */ sourceTags = [];
	            message.sources.forEach(function (source) {
	                sourceTags.push(new Tag(_SOURCE_TAG$2, {}, [
	                    new Text$2(source.filePath + ":" + source.startLine + (source.endLine !== source.startLine ? ',' + source.endLine : ''))
	                ]));
	            });
	            rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, sourceTags.concat(visitor.serialize(message.nodes))));
	        });
	        rootNode.children.push(new CR());
	        return serialize([
	            new Declaration({ version: '1.0', encoding: 'UTF-8' }),
	            new CR(),
	            new Doctype(_MESSAGES_TAG, _DOCTYPE),
	            new CR(),
	            exampleVisitor.addDefaultExamples(rootNode),
	            new CR(),
	        ]);
	    };
	    /**
	     * @param {?} content
	     * @param {?} url
	     * @return {?}
	     */
	    Xmb.prototype.load = function (content, url) {
	        throw new Error('Unsupported');
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xmb.prototype.digest = function (message) { return digest$1(message); };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xmb.prototype.createNameMapper = function (message) {
	        return new SimplePlaceholderMapper(message, toPublicName);
	    };
	    return Xmb;
	}(Serializer));
	var _Visitor$2 = (function () {
	    function _Visitor$2() {
	    }
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	    /**
	     * @param {?} container
	     * @param {?} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var /** @type {?} */ nodes = [];
	        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	        return nodes;
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
	        Object.keys(icu.cases).forEach(function (c) {
	            nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
	        });
	        nodes.push(new Text$2("}"));
	        return nodes;
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitTagPlaceholder = function (ph, context) {
	        var /** @type {?} */ startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
	        var /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG$2, { name: ph.startName }, [startEx]);
	        if (ph.isVoid) {
	            // void tags have no children nor closing tags
	            return [startTagPh];
	        }
	        var /** @type {?} */ closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
	        var /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG$2, { name: ph.closeName }, [closeEx]);
	        return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG$2, { name: ph.name })];
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    _Visitor$2.prototype.visitIcuPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG$2, { name: ph.name })];
	    };
	    /**
	     * @param {?} nodes
	     * @return {?}
	     */
	    _Visitor$2.prototype.serialize = function (nodes) {
	        var _this = this;
	        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));
	    };
	    return _Visitor$2;
	}());
	/**
	 * @param {?} message
	 * @return {?}
	 */
	function digest$1(message) {
	    return decimalDigest(message);
	}
	var ExampleVisitor = (function () {
	    function ExampleVisitor() {
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    ExampleVisitor.prototype.addDefaultExamples = function (node) {
	        node.visit(this);
	        return node;
	    };
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    ExampleVisitor.prototype.visitTag = function (tag) {
	        var _this = this;
	        if (tag.name === _PLACEHOLDER_TAG$2) {
	            if (!tag.children || tag.children.length == 0) {
	                var /** @type {?} */ exText = new Text$2(tag.attrs['name'] || '...');
	                tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])];
	            }
	        }
	        else if (tag.children) {
	            tag.children.forEach(function (node) { return node.visit(_this); });
	        }
	    };
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    ExampleVisitor.prototype.visitText = function (text) { };
	    /**
	     * @param {?} decl
	     * @return {?}
	     */
	    ExampleVisitor.prototype.visitDeclaration = function (decl) { };
	    /**
	     * @param {?} doctype
	     * @return {?}
	     */
	    ExampleVisitor.prototype.visitDoctype = function (doctype) { };
	    return ExampleVisitor;
	}());
	/**
	 * @param {?} internalName
	 * @return {?}
	 */
	function toPublicName(internalName) {
	    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _TRANSLATIONS_TAG = 'translationbundle';
	var _TRANSLATION_TAG = 'translation';
	var _PLACEHOLDER_TAG$3 = 'ph';
	var Xtb = (function (_super) {
	    __extends(Xtb, _super);
	    function Xtb() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} messages
	     * @param {?} locale
	     * @return {?}
	     */
	    Xtb.prototype.write = function (messages, locale) { throw new Error('Unsupported'); };
	    /**
	     * @param {?} content
	     * @param {?} url
	     * @return {?}
	     */
	    Xtb.prototype.load = function (content, url) {
	        // xtb to xml nodes
	        var /** @type {?} */ xtbParser = new XtbParser();
	        var _a = xtbParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
	        // xml nodes to i18n nodes
	        var /** @type {?} */ i18nNodesByMsgId = {};
	        var /** @type {?} */ converter = new XmlToI18n$2();
	        // Because we should be able to load xtb files that rely on features not supported by angular,
	        // we need to delay the conversion of html to i18n nodes so that non angular messages are not
	        // converted
	        Object.keys(msgIdToHtml).forEach(function (msgId) {
	            var /** @type {?} */ valueFn = function () {
	                var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, errors = _a.errors;
	                if (errors.length) {
	                    throw new Error("xtb parse errors:\n" + errors.join('\n'));
	                }
	                return i18nNodes;
	            };
	            createLazyProperty(i18nNodesByMsgId, msgId, valueFn);
	        });
	        if (errors.length) {
	            throw new Error("xtb parse errors:\n" + errors.join('\n'));
	        }
	        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId: i18nNodesByMsgId };
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xtb.prototype.digest = function (message) { return digest$1(message); };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Xtb.prototype.createNameMapper = function (message) {
	        return new SimplePlaceholderMapper(message, toPublicName);
	    };
	    return Xtb;
	}(Serializer));
	/**
	 * @param {?} messages
	 * @param {?} id
	 * @param {?} valueFn
	 * @return {?}
	 */
	function createLazyProperty(messages, id, valueFn) {
	    Object.defineProperty(messages, id, {
	        configurable: true,
	        enumerable: true,
	        get: function () {
	            var /** @type {?} */ value = valueFn();
	            Object.defineProperty(messages, id, { enumerable: true, value: value });
	            return value;
	        },
	        set: function (_) { throw new Error('Could not overwrite an XTB translation'); },
	    });
	}
	var XtbParser = (function () {
	    function XtbParser() {
	        this._locale = null;
	    }
	    /**
	     * @param {?} xtb
	     * @param {?} url
	     * @return {?}
	     */
	    XtbParser.prototype.parse = function (xtb, url) {
	        this._bundleDepth = 0;
	        this._msgIdToHtml = {};
	        // We can not parse the ICU messages at this point as some messages might not originate
	        // from Angular that could not be lex'd.
	        var /** @type {?} */ xml = new XmlParser().parse(xtb, url, false);
	        this._errors = xml.errors;
	        visitAll(this, xml.rootNodes);
	        return {
	            msgIdToHtml: this._msgIdToHtml,
	            errors: this._errors,
	            locale: this._locale,
	        };
	    };
	    /**
	     * @param {?} element
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitElement = function (element, context) {
	        switch (element.name) {
	            case _TRANSLATIONS_TAG:
	                this._bundleDepth++;
	                if (this._bundleDepth > 1) {
	                    this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
	                }
	                var /** @type {?} */ langAttr = element.attrs.find(function (attr) { return attr.name === 'lang'; });
	                if (langAttr) {
	                    this._locale = langAttr.value;
	                }
	                visitAll(this, element.children, null);
	                this._bundleDepth--;
	                break;
	            case _TRANSLATION_TAG:
	                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                if (!idAttr) {
	                    this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
	                }
	                else {
	                    var /** @type {?} */ id = idAttr.value;
	                    if (this._msgIdToHtml.hasOwnProperty(id)) {
	                        this._addError(element, "Duplicated translations for msg " + id);
	                    }
	                    else {
	                        var /** @type {?} */ innerTextStart = ((element.startSourceSpan)).end.offset;
	                        var /** @type {?} */ innerTextEnd = ((element.endSourceSpan)).start.offset;
	                        var /** @type {?} */ content = ((element.startSourceSpan)).start.file.content;
	                        var /** @type {?} */ innerText = content.slice(/** @type {?} */ ((innerTextStart)), /** @type {?} */ ((innerTextEnd)));
	                        this._msgIdToHtml[id] = innerText;
	                    }
	                }
	                break;
	            default:
	                this._addError(element, 'Unexpected tag');
	        }
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitAttribute = function (attribute, context) { };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitText = function (text, context) { };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitComment = function (comment, context) { };
	    /**
	     * @param {?} expansion
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitExpansion = function (expansion, context) { };
	    /**
	     * @param {?} expansionCase
	     * @param {?} context
	     * @return {?}
	     */
	    XtbParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	    /**
	     * @param {?} node
	     * @param {?} message
	     * @return {?}
	     */
	    XtbParser.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));
	    };
	    return XtbParser;
	}());
	var XmlToI18n$2 = (function () {
	    function XmlToI18n$2() {
	    }
	    /**
	     * @param {?} message
	     * @param {?} url
	     * @return {?}
	     */
	    XmlToI18n$2.prototype.convert = function (message, url) {
	        var /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);
	        this._errors = xmlIcu.errors;
	        var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?
	            [] :
	            visitAll(this, xmlIcu.rootNodes);
	        return {
	            i18nNodes: i18nNodes,
	            errors: this._errors,
	        };
	    };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$2.prototype.visitText = function (text, context) { return new Text$1(text.value, /** @type {?} */ ((text.sourceSpan))); };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$2.prototype.visitExpansion = function (icu, context) {
	        var /** @type {?} */ caseMap = {};
	        visitAll(this, icu.cases).forEach(function (c) {
	            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
	        });
	        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
	    };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$2.prototype.visitExpansionCase = function (icuCase, context) {
	        return {
	            value: icuCase.value,
	            nodes: visitAll(this, icuCase.expression),
	        };
	    };
	    /**
	     * @param {?} el
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$2.prototype.visitElement = function (el, context) {
	        if (el.name === _PLACEHOLDER_TAG$3) {
	            var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'name'; });
	            if (nameAttr) {
	                return new Placeholder('', nameAttr.value, /** @type {?} */ ((el.sourceSpan)));
	            }
	            this._addError(el, "<" + _PLACEHOLDER_TAG$3 + "> misses the \"name\" attribute");
	        }
	        else {
	            this._addError(el, "Unexpected tag");
	        }
	        return null;
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$2.prototype.visitComment = function (comment, context) { };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    XmlToI18n$2.prototype.visitAttribute = function (attribute, context) { };
	    /**
	     * @param {?} node
	     * @param {?} message
	     * @return {?}
	     */
	    XmlToI18n$2.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));
	    };
	    return XmlToI18n$2;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var HtmlParser = (function (_super) {
	    __extends(HtmlParser, _super);
	    function HtmlParser() {
	        return _super.call(this, getHtmlTagDefinition) || this;
	    }
	    /**
	     * @param {?} source
	     * @param {?} url
	     * @param {?=} parseExpansionForms
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	        if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
	    };
	    return HtmlParser;
	}(Parser$1));
	HtmlParser.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	HtmlParser.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A container for translated messages
	 */
	var TranslationBundle = (function () {
	    /**
	     * @param {?=} _i18nNodesByMsgId
	     * @param {?=} locale
	     * @param {?=} digest
	     * @param {?=} mapperFactory
	     * @param {?=} missingTranslationStrategy
	     * @param {?=} console
	     */
	    function TranslationBundle(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console) {
	        if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	        if (missingTranslationStrategy === void 0) { missingTranslationStrategy = _angular_core.MissingTranslationStrategy.Warning; }
	        this._i18nNodesByMsgId = _i18nNodesByMsgId;
	        this.digest = digest;
	        this.mapperFactory = mapperFactory;
	        this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);
	    }
	    /**
	     * @param {?} content
	     * @param {?} url
	     * @param {?} serializer
	     * @param {?} missingTranslationStrategy
	     * @param {?=} console
	     * @return {?}
	     */
	    TranslationBundle.load = function (content, url, serializer, missingTranslationStrategy, console) {
	        var _a = serializer.load(content, url), locale = _a.locale, i18nNodesByMsgId = _a.i18nNodesByMsgId;
	        var /** @type {?} */ digestFn = function (m) { return serializer.digest(m); };
	        var /** @type {?} */ mapperFactory = function (m) { return ((serializer.createNameMapper(m))); };
	        return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);
	    };
	    /**
	     * @param {?} srcMsg
	     * @return {?}
	     */
	    TranslationBundle.prototype.get = function (srcMsg) {
	        var /** @type {?} */ html = this._i18nToHtml.convert(srcMsg);
	        if (html.errors.length) {
	            throw new Error(html.errors.join('\n'));
	        }
	        return html.nodes;
	    };
	    /**
	     * @param {?} srcMsg
	     * @return {?}
	     */
	    TranslationBundle.prototype.has = function (srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; };
	    return TranslationBundle;
	}());
	var I18nToHtmlVisitor = (function () {
	    /**
	     * @param {?=} _i18nNodesByMsgId
	     * @param {?=} _locale
	     * @param {?=} _digest
	     * @param {?=} _mapperFactory
	     * @param {?=} _missingTranslationStrategy
	     * @param {?=} _console
	     */
	    function I18nToHtmlVisitor(_i18nNodesByMsgId, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {
	        if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	        this._i18nNodesByMsgId = _i18nNodesByMsgId;
	        this._locale = _locale;
	        this._digest = _digest;
	        this._mapperFactory = _mapperFactory;
	        this._missingTranslationStrategy = _missingTranslationStrategy;
	        this._console = _console;
	        this._contextStack = [];
	        this._errors = [];
	    }
	    /**
	     * @param {?} srcMsg
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.convert = function (srcMsg) {
	        this._contextStack.length = 0;
	        this._errors.length = 0;
	        // i18n to text
	        var /** @type {?} */ text = this._convertToText(srcMsg);
	        // text to html
	        var /** @type {?} */ url = srcMsg.nodes[0].sourceSpan.start.file.url;
	        var /** @type {?} */ html = new HtmlParser().parse(text, url, true);
	        return {
	            nodes: html.rootNodes,
	            errors: this._errors.concat(html.errors),
	        };
	    };
	    /**
	     * @param {?} text
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitText = function (text, context) { return text.value; };
	    /**
	     * @param {?} container
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        return container.children.map(function (n) { return n.visit(_this); }).join('');
	    };
	    /**
	     * @param {?} icu
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var /** @type {?} */ cases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
	        // TODO(vicb): Once all format switch to using expression placeholders
	        // we should throw when the placeholder is not in the source message
	        var /** @type {?} */ exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?
	            this._srcMsg.placeholders[icu.expression] :
	            icu.expression;
	        return "{" + exp + ", " + icu.type + ", " + cases.join(' ') + "}";
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitPlaceholder = function (ph, context) {
	        var /** @type {?} */ phName = this._mapper(ph.name);
	        if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
	            return this._srcMsg.placeholders[phName];
	        }
	        if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
	            return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
	        }
	        this._addError(ph, "Unknown placeholder \"" + ph.name + "\"");
	        return '';
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        var /** @type {?} */ tag = "" + ph.tag;
	        var /** @type {?} */ attrs = Object.keys(ph.attrs).map(function (name) { return name + "=\"" + ph.attrs[name] + "\""; }).join(' ');
	        if (ph.isVoid) {
	            return "<" + tag + " " + attrs + "/>";
	        }
	        var /** @type {?} */ children = ph.children.map(function (c) { return c.visit(_this); }).join('');
	        return "<" + tag + " " + attrs + ">" + children + "</" + tag + ">";
	    };
	    /**
	     * @param {?} ph
	     * @param {?=} context
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        // An ICU placeholder references the source message to be serialized
	        return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);
	    };
	    /**
	     * Convert a source message to a translated text string:
	     * - text nodes are replaced with their translation,
	     * - placeholders are replaced with their content,
	     * - ICU nodes are converted to ICU expressions.
	     * @param {?} srcMsg
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype._convertToText = function (srcMsg) {
	        var _this = this;
	        var /** @type {?} */ id = this._digest(srcMsg);
	        var /** @type {?} */ mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
	        var /** @type {?} */ nodes;
	        this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });
	        this._srcMsg = srcMsg;
	        if (this._i18nNodesByMsgId.hasOwnProperty(id)) {
	            // When there is a translation use its nodes as the source
	            // And create a mapper to convert serialized placeholder names to internal names
	            nodes = this._i18nNodesByMsgId[id];
	            this._mapper = function (name) { return mapper ? ((mapper.toInternalName(name))) : name; };
	        }
	        else {
	            // When no translation has been found
	            // - report an error / a warning / nothing,
	            // - use the nodes from the original message
	            // - placeholders are already internal and need no mapper
	            if (this._missingTranslationStrategy === _angular_core.MissingTranslationStrategy.Error) {
	                var /** @type {?} */ ctx = this._locale ? " for locale \"" + this._locale + "\"" : '';
	                this._addError(srcMsg.nodes[0], "Missing translation for message \"" + id + "\"" + ctx);
	            }
	            else if (this._console &&
	                this._missingTranslationStrategy === _angular_core.MissingTranslationStrategy.Warning) {
	                var /** @type {?} */ ctx = this._locale ? " for locale \"" + this._locale + "\"" : '';
	                this._console.warn("Missing translation for message \"" + id + "\"" + ctx);
	            }
	            nodes = srcMsg.nodes;
	            this._mapper = function (name) { return name; };
	        }
	        var /** @type {?} */ text = nodes.map(function (node) { return node.visit(_this); }).join('');
	        var /** @type {?} */ context = ((this._contextStack.pop()));
	        this._srcMsg = context.msg;
	        this._mapper = context.mapper;
	        return text;
	    };
	    /**
	     * @param {?} el
	     * @param {?} msg
	     * @return {?}
	     */
	    I18nToHtmlVisitor.prototype._addError = function (el, msg) {
	        this._errors.push(new I18nError(el.sourceSpan, msg));
	    };
	    return I18nToHtmlVisitor;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var I18NHtmlParser = (function () {
	    /**
	     * @param {?} _htmlParser
	     * @param {?=} translations
	     * @param {?=} translationsFormat
	     * @param {?=} missingTranslation
	     * @param {?=} console
	     */
	    function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {
	        if (missingTranslation === void 0) { missingTranslation = _angular_core.MissingTranslationStrategy.Warning; }
	        this._htmlParser = _htmlParser;
	        if (translations) {
	            var serializer = createSerializer(translationsFormat);
	            this._translationBundle =
	                TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);
	        }
	    }
	    /**
	     * @param {?} source
	     * @param {?} url
	     * @param {?=} parseExpansionForms
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	        if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var /** @type {?} */ parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
	        if (!this._translationBundle) {
	            // Do not enable i18n when no translation bundle is provided
	            return parseResult;
	        }
	        if (parseResult.errors.length) {
	            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
	        }
	        return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});
	    };
	    return I18NHtmlParser;
	}());
	/**
	 * @param {?=} format
	 * @return {?}
	 */
	function createSerializer(format) {
	    format = (format || 'xlf').toLowerCase();
	    switch (format) {
	        case 'xmb':
	            return new Xmb();
	        case 'xtb':
	            return new Xtb();
	        case 'xliff2':
	        case 'xlf2':
	            return new Xliff2();
	        case 'xliff':
	        case 'xlf':
	        default:
	            return new Xliff();
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CORE = assetUrl('core');
	var Identifiers = (function () {
	    function Identifiers() {
	    }
	    return Identifiers;
	}());
	Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
	    name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
	    moduleUrl: CORE,
	    runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
	};
	Identifiers.ElementRef = { name: 'ElementRef', moduleUrl: CORE, runtime: _angular_core.ElementRef };
	Identifiers.NgModuleRef = { name: 'NgModuleRef', moduleUrl: CORE, runtime: _angular_core.NgModuleRef };
	Identifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleUrl: CORE, runtime: _angular_core.ViewContainerRef };
	Identifiers.ChangeDetectorRef = { name: 'ChangeDetectorRef', moduleUrl: CORE, runtime: _angular_core.ChangeDetectorRef };
	Identifiers.QueryList = { name: 'QueryList', moduleUrl: CORE, runtime: _angular_core.QueryList };
	Identifiers.TemplateRef = { name: 'TemplateRef', moduleUrl: CORE, runtime: _angular_core.TemplateRef };
	Identifiers.CodegenComponentFactoryResolver = {
	    name: 'ɵCodegenComponentFactoryResolver',
	    moduleUrl: CORE,
	    runtime: _angular_core.ɵCodegenComponentFactoryResolver
	};
	Identifiers.ComponentFactoryResolver = {
	    name: 'ComponentFactoryResolver',
	    moduleUrl: CORE,
	    runtime: _angular_core.ComponentFactoryResolver
	};
	Identifiers.ComponentFactory = { name: 'ComponentFactory', moduleUrl: CORE, runtime: _angular_core.ComponentFactory };
	Identifiers.ComponentRef = { name: 'ComponentRef', moduleUrl: CORE, runtime: _angular_core.ComponentRef };
	Identifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleUrl: CORE, runtime: _angular_core.NgModuleFactory };
	Identifiers.NgModuleInjector = {
	    name: 'ɵNgModuleInjector',
	    moduleUrl: CORE,
	    runtime: _angular_core.ɵNgModuleInjector,
	};
	Identifiers.RegisterModuleFactoryFn = {
	    name: 'ɵregisterModuleFactory',
	    moduleUrl: CORE,
	    runtime: _angular_core.ɵregisterModuleFactory,
	};
	Identifiers.Injector = { name: 'Injector', moduleUrl: CORE, runtime: _angular_core.Injector };
	Identifiers.ViewEncapsulation = { name: 'ViewEncapsulation', moduleUrl: CORE, runtime: _angular_core.ViewEncapsulation };
	Identifiers.ChangeDetectionStrategy = {
	    name: 'ChangeDetectionStrategy',
	    moduleUrl: CORE,
	    runtime: _angular_core.ChangeDetectionStrategy
	};
	Identifiers.SecurityContext = {
	    name: 'SecurityContext',
	    moduleUrl: CORE,
	    runtime: _angular_core.SecurityContext,
	};
	Identifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleUrl: CORE, runtime: _angular_core.LOCALE_ID };
	Identifiers.TRANSLATIONS_FORMAT = { name: 'TRANSLATIONS_FORMAT', moduleUrl: CORE, runtime: _angular_core.TRANSLATIONS_FORMAT };
	Identifiers.inlineInterpolate = { name: 'ɵinlineInterpolate', moduleUrl: CORE, runtime: _angular_core.ɵinlineInterpolate };
	Identifiers.interpolate = { name: 'ɵinterpolate', moduleUrl: CORE, runtime: _angular_core.ɵinterpolate };
	Identifiers.EMPTY_ARRAY = { name: 'ɵEMPTY_ARRAY', moduleUrl: CORE, runtime: _angular_core.ɵEMPTY_ARRAY };
	Identifiers.EMPTY_MAP = { name: 'ɵEMPTY_MAP', moduleUrl: CORE, runtime: _angular_core.ɵEMPTY_MAP };
	Identifiers.Renderer = { name: 'Renderer', moduleUrl: CORE, runtime: _angular_core.Renderer };
	Identifiers.viewDef = { name: 'ɵvid', moduleUrl: CORE, runtime: _angular_core.ɵvid };
	Identifiers.elementDef = { name: 'ɵeld', moduleUrl: CORE, runtime: _angular_core.ɵeld };
	Identifiers.anchorDef = { name: 'ɵand', moduleUrl: CORE, runtime: _angular_core.ɵand };
	Identifiers.textDef = { name: 'ɵted', moduleUrl: CORE, runtime: _angular_core.ɵted };
	Identifiers.directiveDef = { name: 'ɵdid', moduleUrl: CORE, runtime: _angular_core.ɵdid };
	Identifiers.providerDef = { name: 'ɵprd', moduleUrl: CORE, runtime: _angular_core.ɵprd };
	Identifiers.queryDef = { name: 'ɵqud', moduleUrl: CORE, runtime: _angular_core.ɵqud };
	Identifiers.pureArrayDef = { name: 'ɵpad', moduleUrl: CORE, runtime: _angular_core.ɵpad };
	Identifiers.pureObjectDef = { name: 'ɵpod', moduleUrl: CORE, runtime: _angular_core.ɵpod };
	Identifiers.purePipeDef = { name: 'ɵppd', moduleUrl: CORE, runtime: _angular_core.ɵppd };
	Identifiers.pipeDef = { name: 'ɵpid', moduleUrl: CORE, runtime: _angular_core.ɵpid };
	Identifiers.nodeValue = { name: 'ɵnov', moduleUrl: CORE, runtime: _angular_core.ɵnov };
	Identifiers.ngContentDef = { name: 'ɵncd', moduleUrl: CORE, runtime: _angular_core.ɵncd };
	Identifiers.unwrapValue = { name: 'ɵunv', moduleUrl: CORE, runtime: _angular_core.ɵunv };
	Identifiers.createRendererType2 = { name: 'ɵcrt', moduleUrl: CORE, runtime: _angular_core.ɵcrt };
	Identifiers.RendererType2 = {
	    name: 'RendererType2',
	    moduleUrl: CORE,
	    // type only
	    runtime: null
	};
	Identifiers.ViewDefinition = {
	    name: 'ɵViewDefinition',
	    moduleUrl: CORE,
	    // type only
	    runtime: null
	};
	Identifiers.createComponentFactory = { name: 'ɵccf', moduleUrl: CORE, runtime: _angular_core.ɵccf };
	/**
	 * @param {?} pkg
	 * @param {?=} path
	 * @param {?=} type
	 * @return {?}
	 */
	function assetUrl(pkg, path, type) {
	    if (path === void 0) { path = null; }
	    if (type === void 0) { type = 'src'; }
	    if (path == null) {
	        return "@angular/" + pkg;
	    }
	    else {
	        return "@angular/" + pkg + "/" + type + "/" + path;
	    }
	}
	/**
	 * @param {?} identifier
	 * @return {?}
	 */
	function resolveIdentifier(identifier) {
	    var /** @type {?} */ name = identifier.name;
	    return _angular_core.ɵreflector.resolveIdentifier(name, identifier.moduleUrl, null, identifier.runtime);
	}
	/**
	 * @param {?} identifier
	 * @return {?}
	 */
	function createIdentifier(identifier) {
	    return { reference: resolveIdentifier(identifier) };
	}
	/**
	 * @param {?} identifier
	 * @return {?}
	 */
	function identifierToken(identifier) {
	    return { identifier: identifier };
	}
	/**
	 * @param {?} identifier
	 * @return {?}
	 */
	function createIdentifierToken(identifier) {
	    return identifierToken(createIdentifier(identifier));
	}
	/**
	 * @param {?} enumType
	 * @param {?} name
	 * @return {?}
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// http://cldr.unicode.org/index/cldr-spec/plural-rules
	var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
	/**
	 * Expands special forms into elements.
	 *
	 * For example,
	 *
	 * ```
	 * { messages.length, plural,
	 *   =0 {zero}
	 *   =1 {one}
	 *   other {more than one}
	 * }
	 * ```
	 *
	 * will be expanded into
	 *
	 * ```
	 * <ng-container [ngPlural]="messages.length">
	 *   <ng-template ngPluralCase="=0">zero</ng-template>
	 *   <ng-template ngPluralCase="=1">one</ng-template>
	 *   <ng-template ngPluralCase="other">more than one</ng-template>
	 * </ng-container>
	 * ```
	 * @param {?} nodes
	 * @return {?}
	 */
	function expandNodes(nodes) {
	    var /** @type {?} */ expander = new _Expander();
	    return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
	}
	var ExpansionResult = (function () {
	    /**
	     * @param {?} nodes
	     * @param {?} expanded
	     * @param {?} errors
	     */
	    function ExpansionResult(nodes, expanded, errors) {
	        this.nodes = nodes;
	        this.expanded = expanded;
	        this.errors = errors;
	    }
	    return ExpansionResult;
	}());
	var ExpansionError = (function (_super) {
	    __extends(ExpansionError, _super);
	    /**
	     * @param {?} span
	     * @param {?} errorMsg
	     */
	    function ExpansionError(span, errorMsg) {
	        return _super.call(this, span, errorMsg) || this;
	    }
	    return ExpansionError;
	}(ParseError));
	/**
	 * Expand expansion forms (plural, select) to directives
	 *
	 * \@internal
	 */
	var _Expander = (function () {
	    function _Expander() {
	        this.isExpanded = false;
	        this.errors = [];
	    }
	    /**
	     * @param {?} element
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitElement = function (element, context) {
	        return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitAttribute = function (attribute, context) { return attribute; };
	    /**
	     * @param {?} text
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitText = function (text, context) { return text; };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitComment = function (comment, context) { return comment; };
	    /**
	     * @param {?} icu
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitExpansion = function (icu, context) {
	        this.isExpanded = true;
	        return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :
	            _expandDefaultForm(icu, this.errors);
	    };
	    /**
	     * @param {?} icuCase
	     * @param {?} context
	     * @return {?}
	     */
	    _Expander.prototype.visitExpansionCase = function (icuCase, context) {
	        throw new Error('Should not be reached');
	    };
	    return _Expander;
	}());
	/**
	 * @param {?} ast
	 * @param {?} errors
	 * @return {?}
	 */
	function _expandPluralForm(ast, errors) {
	    var /** @type {?} */ children = ast.cases.map(function (c) {
	        if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
	            errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
	        }
	        var /** @type {?} */ expansionResult = expandNodes(c.expression);
	        errors.push.apply(errors, expansionResult.errors);
	        return new Element("ng-template", [new Attribute$1('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	    });
	    var /** @type {?} */ switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
	    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	}
	/**
	 * @param {?} ast
	 * @param {?} errors
	 * @return {?}
	 */
	function _expandDefaultForm(ast, errors) {
	    var /** @type {?} */ children = ast.cases.map(function (c) {
	        var /** @type {?} */ expansionResult = expandNodes(c.expression);
	        errors.push.apply(errors, expansionResult.errors);
	        if (c.value === 'other') {
	            // other is the default case when no values match
	            return new Element("ng-template", [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	        }
	        return new Element("ng-template", [new Attribute$1('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	    });
	    var /** @type {?} */ switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
	    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ProviderError = (function (_super) {
	    __extends(ProviderError, _super);
	    /**
	     * @param {?} message
	     * @param {?} span
	     */
	    function ProviderError(message, span) {
	        return _super.call(this, span, message) || this;
	    }
	    return ProviderError;
	}(ParseError));
	var ProviderViewContext = (function () {
	    /**
	     * @param {?} component
	     */
	    function ProviderViewContext(component) {
	        var _this = this;
	        this.component = component;
	        this.errors = [];
	        this.viewQueries = _getViewQueries(component);
	        this.viewProviders = new Map();
	        component.viewProviders.forEach(function (provider) {
	            if (_this.viewProviders.get(tokenReference(provider.token)) == null) {
	                _this.viewProviders.set(tokenReference(provider.token), true);
	            }
	        });
	    }
	    return ProviderViewContext;
	}());
	var ProviderElementContext = (function () {
	    /**
	     * @param {?} viewContext
	     * @param {?} _parent
	     * @param {?} _isViewRoot
	     * @param {?} _directiveAsts
	     * @param {?} attrs
	     * @param {?} refs
	     * @param {?} isTemplate
	     * @param {?} contentQueryStartId
	     * @param {?} _sourceSpan
	     */
	    function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {
	        var _this = this;
	        this.viewContext = viewContext;
	        this._parent = _parent;
	        this._isViewRoot = _isViewRoot;
	        this._directiveAsts = _directiveAsts;
	        this._sourceSpan = _sourceSpan;
	        this._transformedProviders = new Map();
	        this._seenProviders = new Map();
	        this._hasViewContainer = false;
	        this._queriedTokens = new Map();
	        this._attrs = {};
	        attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });
	        var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });
	        this._allProviders =
	            _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
	        this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            _this._addQueryReadsTo(provider.token, provider.token, _this._queriedTokens);
	        });
	        if (isTemplate) {
	            var templateRefId = createIdentifierToken(Identifiers.TemplateRef);
	            this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);
	        }
	        refs.forEach(function (refAst) {
	            var defaultQueryValue = refAst.value || createIdentifierToken(Identifiers.ElementRef);
	            _this._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, _this._queriedTokens);
	        });
	        if (this._queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef))) {
	            this._hasViewContainer = true;
	        }
	        // create the providers that we know are eager first
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            var eager = provider.eager || _this._queriedTokens.get(tokenReference(provider.token));
	            if (eager) {
	                _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
	            }
	        });
	    }
	    /**
	     * @return {?}
	     */
	    ProviderElementContext.prototype.afterElement = function () {
	        var _this = this;
	        // collect lazy providers
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
	        });
	    };
	    Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return Array.from(this._transformedProviders.values());
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });
	            var /** @type {?} */ sortedDirectives = this._directiveAsts.slice();
	            sortedDirectives.sort(function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -
	                sortedProviderTypes.indexOf(dir2.directive.type); });
	            return sortedDirectives;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._hasViewContainer; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProviderElementContext.prototype, "queryMatches", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ allMatches = [];
	            this._queriedTokens.forEach(function (matches) { allMatches.push.apply(allMatches, matches); });
	            return allMatches;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} token
	     * @param {?} defaultValue
	     * @param {?} queryReadTokens
	     * @return {?}
	     */
	    ProviderElementContext.prototype._addQueryReadsTo = function (token, defaultValue, queryReadTokens) {
	        this._getQueriesFor(token).forEach(function (query) {
	            var /** @type {?} */ queryValue = query.meta.read || defaultValue;
	            var /** @type {?} */ tokenRef = tokenReference(queryValue);
	            var /** @type {?} */ queryMatches = queryReadTokens.get(tokenRef);
	            if (!queryMatches) {
	                queryMatches = [];
	                queryReadTokens.set(tokenRef, queryMatches);
	            }
	            queryMatches.push({ queryId: query.queryId, value: queryValue });
	        });
	    };
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    ProviderElementContext.prototype._getQueriesFor = function (token) {
	        var /** @type {?} */ result = [];
	        var /** @type {?} */ currentEl = this;
	        var /** @type {?} */ distance = 0;
	        var /** @type {?} */ queries;
	        while (currentEl !== null) {
	            queries = currentEl._contentQueries.get(tokenReference(token));
	            if (queries) {
	                result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));
	            }
	            if (currentEl._directiveAsts.length > 0) {
	                distance++;
	            }
	            currentEl = currentEl._parent;
	        }
	        queries = this.viewContext.viewQueries.get(tokenReference(token));
	        if (queries) {
	            result.push.apply(result, queries);
	        }
	        return result;
	    };
	    /**
	     * @param {?} requestingProviderType
	     * @param {?} token
	     * @param {?} eager
	     * @return {?}
	     */
	    ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
	        var _this = this;
	        var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));
	        if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||
	            requestingProviderType === ProviderAstType.PublicService) &&
	            resolvedProvider.providerType === ProviderAstType.PrivateService) ||
	            ((requestingProviderType === ProviderAstType.PrivateService ||
	                requestingProviderType === ProviderAstType.PublicService) &&
	                resolvedProvider.providerType === ProviderAstType.Builtin)) {
	            return null;
	        }
	        var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	        if (transformedProviderAst) {
	            return transformedProviderAst;
	        }
	        if (this._seenProviders.get(tokenReference(token)) != null) {
	            this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), this._sourceSpan));
	            return null;
	        }
	        this._seenProviders.set(tokenReference(token), true);
	        var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {
	            var /** @type {?} */ transformedUseValue = provider.useValue;
	            var /** @type {?} */ transformedUseExisting = ((provider.useExisting));
	            var /** @type {?} */ transformedDeps = ((undefined));
	            if (provider.useExisting != null) {
	                var /** @type {?} */ existingDiDep = ((_this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager)));
	                if (existingDiDep.token != null) {
	                    transformedUseExisting = existingDiDep.token;
	                }
	                else {
	                    transformedUseExisting = ((null));
	                    transformedUseValue = existingDiDep.value;
	                }
	            }
	            else if (provider.useFactory) {
	                var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return ((_this._getDependency(resolvedProvider.providerType, dep, eager))); });
	            }
	            else if (provider.useClass) {
	                var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return ((_this._getDependency(resolvedProvider.providerType, dep, eager))); });
	            }
	            return _transformProvider(provider, {
	                useExisting: transformedUseExisting,
	                useValue: transformedUseValue,
	                deps: transformedDeps
	            });
	        });
	        transformedProviderAst =
	            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	        this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	        return transformedProviderAst;
	    };
	    /**
	     * @param {?} requestingProviderType
	     * @param {?} dep
	     * @param {?=} eager
	     * @return {?}
	     */
	    ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
	        if (eager === void 0) { eager = false; }
	        if (dep.isAttribute) {
	            var /** @type {?} */ attrValue = this._attrs[((dep.token)).value];
	            return { isValue: true, value: attrValue == null ? null : attrValue };
	        }
	        if (dep.token != null) {
	            // access builtints
	            if ((requestingProviderType === ProviderAstType.Directive ||
	                requestingProviderType === ProviderAstType.Component)) {
	                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) ||
	                    tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) ||
	                    tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) ||
	                    tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {
	                    return dep;
	                }
	                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {
	                    this._hasViewContainer = true;
	                }
	            }
	            // access the injector
	            if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
	                return dep;
	            }
	            // access providers
	            if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {
	                return dep;
	            }
	        }
	        return null;
	    };
	    /**
	     * @param {?} requestingProviderType
	     * @param {?} dep
	     * @param {?=} eager
	     * @return {?}
	     */
	    ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
	        if (eager === void 0) { eager = false; }
	        var /** @type {?} */ currElement = this;
	        var /** @type {?} */ currEager = eager;
	        var /** @type {?} */ result = null;
	        if (!dep.isSkipSelf) {
	            result = this._getLocalDependency(requestingProviderType, dep, eager);
	        }
	        if (dep.isSelf) {
	            if (!result && dep.isOptional) {
	                result = { isValue: true, value: null };
	            }
	        }
	        else {
	            // check parent elements
	            while (!result && currElement._parent) {
	                var /** @type {?} */ prevElement = currElement;
	                currElement = currElement._parent;
	                if (prevElement._isViewRoot) {
	                    currEager = false;
	                }
	                result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
	            }
	            // check @Host restriction
	            if (!result) {
	                if (!dep.isHost || this.viewContext.component.isHost ||
	                    this.viewContext.component.type.reference === tokenReference(/** @type {?} */ ((dep.token))) ||
	                    this.viewContext.viewProviders.get(tokenReference(/** @type {?} */ ((dep.token)))) != null) {
	                    result = dep;
	                }
	                else {
	                    result = dep.isOptional ? result = { isValue: true, value: null } : null;
	                }
	            }
	        }
	        if (!result) {
	            this.viewContext.errors.push(new ProviderError("No provider for " + tokenName(/** @type {?} */ ((dep.token))), this._sourceSpan));
	        }
	        return result;
	    };
	    return ProviderElementContext;
	}());
	var NgModuleProviderAnalyzer = (function () {
	    /**
	     * @param {?} ngModule
	     * @param {?} extraProviders
	     * @param {?} sourceSpan
	     */
	    function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
	        var _this = this;
	        this._transformedProviders = new Map();
	        this._seenProviders = new Map();
	        this._errors = [];
	        this._allProviders = new Map();
	        ngModule.transitiveModule.modules.forEach(function (ngModuleType) {
	            var ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };
	            _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
	        });
	        _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) { return entry.provider; }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
	    }
	    /**
	     * @return {?}
	     */
	    NgModuleProviderAnalyzer.prototype.parse = function () {
	        var _this = this;
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            _this._getOrCreateLocalProvider(provider.token, provider.eager);
	        });
	        if (this._errors.length > 0) {
	            var /** @type {?} */ errorString = this._errors.join('\n');
	            throw new Error("Provider parse errors:\n" + errorString);
	        }
	        return Array.from(this._transformedProviders.values());
	    };
	    /**
	     * @param {?} token
	     * @param {?} eager
	     * @return {?}
	     */
	    NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
	        var _this = this;
	        var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));
	        if (!resolvedProvider) {
	            return null;
	        }
	        var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	        if (transformedProviderAst) {
	            return transformedProviderAst;
	        }
	        if (this._seenProviders.get(tokenReference(token)) != null) {
	            this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), resolvedProvider.sourceSpan));
	            return null;
	        }
	        this._seenProviders.set(tokenReference(token), true);
	        var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {
	            var /** @type {?} */ transformedUseValue = provider.useValue;
	            var /** @type {?} */ transformedUseExisting = ((provider.useExisting));
	            var /** @type {?} */ transformedDeps = ((undefined));
	            if (provider.useExisting != null) {
	                var /** @type {?} */ existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);
	                if (existingDiDep.token != null) {
	                    transformedUseExisting = existingDiDep.token;
	                }
	                else {
	                    transformedUseExisting = ((null));
	                    transformedUseValue = existingDiDep.value;
	                }
	            }
	            else if (provider.useFactory) {
	                var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	            }
	            else if (provider.useClass) {
	                var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	            }
	            return _transformProvider(provider, {
	                useExisting: transformedUseExisting,
	                useValue: transformedUseValue,
	                deps: transformedDeps
	            });
	        });
	        transformedProviderAst =
	            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	        this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	        return transformedProviderAst;
	    };
	    /**
	     * @param {?} dep
	     * @param {?=} eager
	     * @param {?=} requestorSourceSpan
	     * @return {?}
	     */
	    NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
	        if (eager === void 0) { eager = false; }
	        var /** @type {?} */ foundLocal = false;
	        if (!dep.isSkipSelf && dep.token != null) {
	            // access the injector
	            if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||
	                tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
	                foundLocal = true;
	            }
	            else if (this._getOrCreateLocalProvider(dep.token, eager) != null) {
	                foundLocal = true;
	            }
	        }
	        var /** @type {?} */ result = dep;
	        if (dep.isSelf && !foundLocal) {
	            if (dep.isOptional) {
	                result = { isValue: true, value: null };
	            }
	            else {
	                this._errors.push(new ProviderError("No provider for " + tokenName(/** @type {?} */ ((dep.token))), requestorSourceSpan));
	            }
	        }
	        return result;
	    };
	    return NgModuleProviderAnalyzer;
	}());
	/**
	 * @param {?} provider
	 * @param {?} __1
	 * @return {?}
	 */
	function _transformProvider(provider, _a) {
	    var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
	    return {
	        token: provider.token,
	        useClass: provider.useClass,
	        useExisting: useExisting,
	        useFactory: provider.useFactory,
	        useValue: useValue,
	        deps: deps,
	        multi: provider.multi
	    };
	}
	/**
	 * @param {?} provider
	 * @param {?} __1
	 * @return {?}
	 */
	function _transformProviderAst(provider, _a) {
	    var eager = _a.eager, providers = _a.providers;
	    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
	}
	/**
	 * @param {?} directives
	 * @param {?} sourceSpan
	 * @param {?} targetErrors
	 * @return {?}
	 */
	function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
	    var /** @type {?} */ providersByToken = new Map();
	    directives.forEach(function (directive) {
	        var /** @type {?} */ dirProvider = { token: { identifier: directive.type }, useClass: directive.type };
	        _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
	    });
	    // Note: directives need to be able to overwrite providers of a component!
	    var /** @type {?} */ directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));
	    directivesWithComponentFirst.forEach(function (directive) {
	        _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
	        _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
	    });
	    return providersByToken;
	}
	/**
	 * @param {?} providers
	 * @param {?} providerType
	 * @param {?} eager
	 * @param {?} sourceSpan
	 * @param {?} targetErrors
	 * @param {?} targetProvidersByToken
	 * @return {?}
	 */
	function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
	    providers.forEach(function (provider) {
	        var /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));
	        if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {
	            targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + tokenName(resolvedProvider.token), sourceSpan));
	        }
	        if (!resolvedProvider) {
	            var /** @type {?} */ lifecycleHooks = provider.token.identifier &&
	                ((provider.token.identifier)).lifecycleHooks ?
	                ((provider.token.identifier)).lifecycleHooks :
	                [];
	            var /** @type {?} */ isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);
	            resolvedProvider = new ProviderAst(provider.token, !!provider.multi, eager || isUseValue, [provider], providerType, lifecycleHooks, sourceSpan);
	            targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
	        }
	        else {
	            if (!provider.multi) {
	                resolvedProvider.providers.length = 0;
	            }
	            resolvedProvider.providers.push(provider);
	        }
	    });
	}
	/**
	 * @param {?} component
	 * @return {?}
	 */
	function _getViewQueries(component) {
	    // Note: queries start with id 1 so we can use the number in a Bloom filter!
	    var /** @type {?} */ viewQueryId = 1;
	    var /** @type {?} */ viewQueries = new Map();
	    if (component.viewQueries) {
	        component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ }); });
	    }
	    return viewQueries;
	}
	/**
	 * @param {?} contentQueryStartId
	 * @param {?} directives
	 * @return {?}
	 */
	function _getContentQueries(contentQueryStartId, directives) {
	    var /** @type {?} */ contentQueryId = contentQueryStartId;
	    var /** @type {?} */ contentQueries = new Map();
	    directives.forEach(function (directive, directiveIndex) {
	        if (directive.queries) {
	            directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ }); });
	        }
	    });
	    return contentQueries;
	}
	/**
	 * @param {?} map
	 * @param {?} query
	 * @return {?}
	 */
	function _addQueryToTokenMap(map, query) {
	    query.meta.selectors.forEach(function (token) {
	        var /** @type {?} */ entry = map.get(tokenReference(token));
	        if (!entry) {
	            entry = [];
	            map.set(tokenReference(token), entry);
	        }
	        entry.push(query);
	    });
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @abstract
	 */
	var ElementSchemaRegistry = (function () {
	    function ElementSchemaRegistry() {
	    }
	    /**
	     * @abstract
	     * @param {?} tagName
	     * @param {?} propName
	     * @param {?} schemaMetas
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) { };
	    /**
	     * @abstract
	     * @param {?} tagName
	     * @param {?} schemaMetas
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) { };
	    /**
	     * @abstract
	     * @param {?} elementName
	     * @param {?} propName
	     * @param {?} isAttribute
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.securityContext = function (elementName, propName, isAttribute) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.allKnownElementNames = function () { };
	    /**
	     * @abstract
	     * @param {?} propName
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.getMappedPropName = function (propName) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.validateProperty = function (name) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.validateAttribute = function (name) { };
	    /**
	     * @abstract
	     * @param {?} propName
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { };
	    /**
	     * @abstract
	     * @param {?} camelCaseProp
	     * @param {?} userProvidedProp
	     * @param {?} val
	     * @return {?}
	     */
	    ElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) { };
	    return ElementSchemaRegistry;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var StyleWithImports = (function () {
	    /**
	     * @param {?} style
	     * @param {?} styleUrls
	     */
	    function StyleWithImports(style$$1, styleUrls) {
	        this.style = style$$1;
	        this.styleUrls = styleUrls;
	    }
	    return StyleWithImports;
	}());
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function isStyleUrlResolvable(url) {
	    if (url == null || url.length === 0 || url[0] == '/')
	        return false;
	    var /** @type {?} */ schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
	    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	}
	/**
	 * Rewrites stylesheets by resolving and removing the \@import urls that
	 * are either relative or don't have a `package:` scheme
	 * @param {?} resolver
	 * @param {?} baseUrl
	 * @param {?} cssText
	 * @return {?}
	 */
	function extractStyleUrls(resolver, baseUrl, cssText) {
	    var /** @type {?} */ foundUrls = [];
	    var /** @type {?} */ modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        var /** @type {?} */ url = m[1] || m[2];
	        if (!isStyleUrlResolvable(url)) {
	            // Do not attempt to resolve non-package absolute URLs with URI scheme
	            return m[0];
	        }
	        foundUrls.push(resolver.resolve(baseUrl, url));
	        return '';
	    });
	    return new StyleWithImports(modifiedCssText, foundUrls);
	}
	var CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	var CSS_COMMENT_REGEXP = /\/\*.+?\*\//g;
	var URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PROPERTY_PARTS_SEPARATOR = '.';
	var ATTRIBUTE_PREFIX = 'attr';
	var CLASS_PREFIX = 'class';
	var STYLE_PREFIX = 'style';
	var ANIMATE_PROP_PREFIX = 'animate-';
	var BoundPropertyType = {};
	BoundPropertyType.DEFAULT = 0;
	BoundPropertyType.LITERAL_ATTR = 1;
	BoundPropertyType.ANIMATION = 2;
	BoundPropertyType[BoundPropertyType.DEFAULT] = "DEFAULT";
	BoundPropertyType[BoundPropertyType.LITERAL_ATTR] = "LITERAL_ATTR";
	BoundPropertyType[BoundPropertyType.ANIMATION] = "ANIMATION";
	/**
	 * Represents a parsed property.
	 */
	var BoundProperty = (function () {
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} type
	     * @param {?} sourceSpan
	     */
	    function BoundProperty(name, expression, type, sourceSpan) {
	        this.name = name;
	        this.expression = expression;
	        this.type = type;
	        this.sourceSpan = sourceSpan;
	    }
	    Object.defineProperty(BoundProperty.prototype, "isLiteral", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.type === BoundPropertyType.LITERAL_ATTR; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BoundProperty.prototype, "isAnimation", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.type === BoundPropertyType.ANIMATION; },
	        enumerable: true,
	        configurable: true
	    });
	    return BoundProperty;
	}());
	/**
	 * Parses bindings in templates and in the directive host area.
	 */
	var BindingParser = (function () {
	    /**
	     * @param {?} _exprParser
	     * @param {?} _interpolationConfig
	     * @param {?} _schemaRegistry
	     * @param {?} pipes
	     * @param {?} _targetErrors
	     */
	    function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
	        var _this = this;
	        this._exprParser = _exprParser;
	        this._interpolationConfig = _interpolationConfig;
	        this._schemaRegistry = _schemaRegistry;
	        this._targetErrors = _targetErrors;
	        this.pipesByName = new Map();
	        this._usedPipes = new Map();
	        pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });
	    }
	    /**
	     * @return {?}
	     */
	    BindingParser.prototype.getUsedPipes = function () { return Array.from(this._usedPipes.values()); };
	    /**
	     * @param {?} dirMeta
	     * @param {?} elementSelector
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, elementSelector, sourceSpan) {
	        var _this = this;
	        if (dirMeta.hostProperties) {
	            var /** @type {?} */ boundProps_1 = [];
	            Object.keys(dirMeta.hostProperties).forEach(function (propName) {
	                var /** @type {?} */ expression = dirMeta.hostProperties[propName];
	                if (typeof expression === 'string') {
	                    _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
	                }
	                else {
	                    _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                }
	            });
	            return boundProps_1.map(function (prop) { return _this.createElementPropertyAst(elementSelector, prop); });
	        }
	        return null;
	    };
	    /**
	     * @param {?} dirMeta
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) {
	        var _this = this;
	        if (dirMeta.hostListeners) {
	            var /** @type {?} */ targetEventAsts_1 = [];
	            Object.keys(dirMeta.hostListeners).forEach(function (propName) {
	                var /** @type {?} */ expression = dirMeta.hostListeners[propName];
	                if (typeof expression === 'string') {
	                    _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
	                }
	                else {
	                    _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                }
	            });
	            return targetEventAsts_1;
	        }
	        return null;
	    };
	    /**
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype.parseInterpolation = function (value, sourceSpan) {
	        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	        try {
	            var /** @type {?} */ ast = ((this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig)));
	            if (ast)
	                this._reportExpressionParserErrors(ast.errors, sourceSpan);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    /**
	     * @param {?} prefixToken
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @param {?} targetVars
	     * @return {?}
	     */
	    BindingParser.prototype.parseInlineTemplateBinding = function (prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
	        var /** @type {?} */ bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
	        for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	            var /** @type {?} */ binding = bindings[i];
	            if (binding.keyIsVar) {
	                targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
	            }
	            else if (binding.expression) {
	                this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
	            }
	            else {
	                targetMatchableAttrs.push([binding.key, '']);
	                this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
	            }
	        }
	    };
	    /**
	     * @param {?} prefixToken
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype._parseTemplateBindings = function (prefixToken, value, sourceSpan) {
	        var _this = this;
	        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	        try {
	            var /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
	            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
	            bindingsResult.templateBindings.forEach(function (binding) {
	                if (binding.expression) {
	                    _this._checkPipes(binding.expression, sourceSpan);
	                }
	            });
	            bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });
	            return bindingsResult.templateBindings;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return [];
	        }
	    };
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @return {?}
	     */
	    BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	        if (_isAnimationLabel(name)) {
	            name = name.substring(1);
	            if (value) {
	                this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." +
	                    " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, ParseErrorLevel.ERROR);
	            }
	            this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
	        }
	        else {
	            targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
	        }
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} isHost
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @return {?}
	     */
	    BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
	        var /** @type {?} */ isAnimationProp = false;
	        if (name.startsWith(ANIMATE_PROP_PREFIX)) {
	            isAnimationProp = true;
	            name = name.substring(ANIMATE_PROP_PREFIX.length);
	        }
	        else if (_isAnimationLabel(name)) {
	            isAnimationProp = true;
	            name = name.substring(1);
	        }
	        if (isAnimationProp) {
	            this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
	        }
	        else {
	            this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
	        }
	    };
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @return {?}
	     */
	    BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	        var /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);
	        if (expr) {
	            this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
	            return true;
	        }
	        return false;
	    };
	    /**
	     * @param {?} name
	     * @param {?} ast
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @return {?}
	     */
	    BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
	        targetMatchableAttrs.push([name, /** @type {?} */ ((ast.source))]);
	        targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @return {?}
	     */
	    BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
	        // This will occur when a @trigger is not paired with an expression.
	        // For animations it is valid to not have an expression since */void
	        // states will be applied by angular when the element is attached/detached
	        var /** @type {?} */ ast = this._parseBinding(expression || 'null', false, sourceSpan);
	        targetMatchableAttrs.push([name, /** @type {?} */ ((ast.source))]);
	        targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
	    };
	    /**
	     * @param {?} value
	     * @param {?} isHostBinding
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan) {
	        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	        try {
	            var /** @type {?} */ ast = isHostBinding ?
	                this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :
	                this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
	            if (ast)
	                this._reportExpressionParserErrors(ast.errors, sourceSpan);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    /**
	     * @param {?} elementSelector
	     * @param {?} boundProp
	     * @return {?}
	     */
	    BindingParser.prototype.createElementPropertyAst = function (elementSelector, boundProp) {
	        if (boundProp.isAnimation) {
	            return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan);
	        }
	        var /** @type {?} */ unit = null;
	        var /** @type {?} */ bindingType = ((undefined));
	        var /** @type {?} */ boundPropertyName = null;
	        var /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
	        var /** @type {?} */ securityContexts = ((undefined));
	        // Check check for special cases (prefix style, attr, class)
	        if (parts.length > 1) {
	            if (parts[0] == ATTRIBUTE_PREFIX) {
	                boundPropertyName = parts[1];
	                this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
	                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
	                var /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');
	                if (nsSeparatorIdx > -1) {
	                    var /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);
	                    var /** @type {?} */ name = boundPropertyName.substring(nsSeparatorIdx + 1);
	                    boundPropertyName = mergeNsAndName(ns, name);
	                }
	                bindingType = PropertyBindingType.Attribute;
	            }
	            else if (parts[0] == CLASS_PREFIX) {
	                boundPropertyName = parts[1];
	                bindingType = PropertyBindingType.Class;
	                securityContexts = [_angular_core.SecurityContext.NONE];
	            }
	            else if (parts[0] == STYLE_PREFIX) {
	                unit = parts.length > 2 ? parts[2] : null;
	                boundPropertyName = parts[1];
	                bindingType = PropertyBindingType.Style;
	                securityContexts = [_angular_core.SecurityContext.STYLE];
	            }
	        }
	        // If not a special case, use the full property name
	        if (boundPropertyName === null) {
	            boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);
	            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
	            bindingType = PropertyBindingType.Property;
	            this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
	        }
	        return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan);
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetEvents
	     * @return {?}
	     */
	    BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	        if (_isAnimationLabel(name)) {
	            name = name.substr(1);
	            this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
	        }
	        else {
	            this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
	        }
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} targetEvents
	     * @return {?}
	     */
	    BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, targetEvents) {
	        var /** @type {?} */ matches = splitAtPeriod(name, [name, '']);
	        var /** @type {?} */ eventName = matches[0];
	        var /** @type {?} */ phase = matches[1].toLowerCase();
	        if (phase) {
	            switch (phase) {
	                case 'start':
	                case 'done':
	                    var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);
	                    targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
	                    break;
	                default:
	                    this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
	                    break;
	            }
	        }
	        else {
	            this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
	        }
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetEvents
	     * @return {?}
	     */
	    BindingParser.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	        // long format: 'target: eventName'
	        var _a = splitAtColon(name, [/** @type {?} */ ((null)), name]), target = _a[0], eventName = _a[1];
	        var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);
	        targetMatchableAttrs.push([/** @type {?} */ ((name)), /** @type {?} */ ((ast.source))]);
	        targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
	        // Don't detect directives for event names for now,
	        // so don't add the event name to the matchableAttrs
	    };
	    /**
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype._parseAction = function (value, sourceSpan) {
	        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	        try {
	            var /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
	            if (ast) {
	                this._reportExpressionParserErrors(ast.errors, sourceSpan);
	            }
	            if (!ast || ast.ast instanceof EmptyExpr) {
	                this._reportError("Empty expressions are not allowed", sourceSpan);
	                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	            }
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    /**
	     * @param {?} message
	     * @param {?} sourceSpan
	     * @param {?=} level
	     * @return {?}
	     */
	    BindingParser.prototype._reportError = function (message, sourceSpan, level) {
	        if (level === void 0) { level = ParseErrorLevel.ERROR; }
	        this._targetErrors.push(new ParseError(sourceSpan, message, level));
	    };
	    /**
	     * @param {?} errors
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) {
	        for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
	            var error = errors_1[_i];
	            this._reportError(error.message, sourceSpan);
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    BindingParser.prototype._checkPipes = function (ast, sourceSpan) {
	        var _this = this;
	        if (ast) {
	            var /** @type {?} */ collector = new PipeCollector();
	            ast.visit(collector);
	            collector.pipes.forEach(function (ast, pipeName) {
	                var /** @type {?} */ pipeMeta = _this.pipesByName.get(pipeName);
	                if (!pipeMeta) {
	                    _this._reportError("The pipe '" + pipeName + "' could not be found", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
	                }
	                else {
	                    _this._usedPipes.set(pipeName, pipeMeta);
	                }
	            });
	        }
	    };
	    /**
	     * @param {?} propName the name of the property / attribute
	     * @param {?} sourceSpan
	     * @param {?} isAttr true when binding to an attribute
	     * @return {?}
	     */
	    BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) {
	        var /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :
	            this._schemaRegistry.validateProperty(propName);
	        if (report.error) {
	            this._reportError(/** @type {?} */ ((report.msg)), sourceSpan, ParseErrorLevel.ERROR);
	        }
	    };
	    return BindingParser;
	}());
	var PipeCollector = (function (_super) {
	    __extends(PipeCollector, _super);
	    function PipeCollector() {
	        var _this = _super.apply(this, arguments) || this;
	        _this.pipes = new Map();
	        return _this;
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    PipeCollector.prototype.visitPipe = function (ast, context) {
	        this.pipes.set(ast.name, ast);
	        ast.exp.visit(this);
	        this.visitAll(ast.args, context);
	        return null;
	    };
	    return PipeCollector;
	}(RecursiveAstVisitor));
	/**
	 * @param {?} name
	 * @return {?}
	 */
	function _isAnimationLabel(name) {
	    return name[0] == '@';
	}
	/**
	 * @param {?} registry
	 * @param {?} selector
	 * @param {?} propName
	 * @param {?} isAttribute
	 * @return {?}
	 */
	function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
	    var /** @type {?} */ ctxs = [];
	    CssSelector.parse(selector).forEach(function (selector) {
	        var /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
	        var /** @type {?} */ notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector(); })
	            .map(function (selector) { return selector.element; }));
	        var /** @type {?} */ possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName); });
	        ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute); }));
	    });
	    return ctxs.length === 0 ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NG_CONTENT_SELECT_ATTR = 'select';
	var LINK_ELEMENT = 'link';
	var LINK_STYLE_REL_ATTR = 'rel';
	var LINK_STYLE_HREF_ATTR = 'href';
	var LINK_STYLE_REL_VALUE = 'stylesheet';
	var STYLE_ELEMENT = 'style';
	var SCRIPT_ELEMENT = 'script';
	var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
	var NG_PROJECT_AS = 'ngProjectAs';
	/**
	 * @param {?} ast
	 * @return {?}
	 */
	function preparseElement(ast) {
	    var /** @type {?} */ selectAttr = ((null));
	    var /** @type {?} */ hrefAttr = ((null));
	    var /** @type {?} */ relAttr = ((null));
	    var /** @type {?} */ nonBindable = false;
	    var /** @type {?} */ projectAs = ((null));
	    ast.attrs.forEach(function (attr) {
	        var /** @type {?} */ lcAttrName = attr.name.toLowerCase();
	        if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
	            selectAttr = attr.value;
	        }
	        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
	            hrefAttr = attr.value;
	        }
	        else if (lcAttrName == LINK_STYLE_REL_ATTR) {
	            relAttr = attr.value;
	        }
	        else if (attr.name == NG_NON_BINDABLE_ATTR) {
	            nonBindable = true;
	        }
	        else if (attr.name == NG_PROJECT_AS) {
	            if (attr.value.length > 0) {
	                projectAs = attr.value;
	            }
	        }
	    });
	    selectAttr = normalizeNgContentSelect(selectAttr);
	    var /** @type {?} */ nodeName = ast.name.toLowerCase();
	    var /** @type {?} */ type = PreparsedElementType.OTHER;
	    if (isNgContent(nodeName)) {
	        type = PreparsedElementType.NG_CONTENT;
	    }
	    else if (nodeName == STYLE_ELEMENT) {
	        type = PreparsedElementType.STYLE;
	    }
	    else if (nodeName == SCRIPT_ELEMENT) {
	        type = PreparsedElementType.SCRIPT;
	    }
	    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	        type = PreparsedElementType.STYLESHEET;
	    }
	    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
	}
	var PreparsedElementType = {};
	PreparsedElementType.NG_CONTENT = 0;
	PreparsedElementType.STYLE = 1;
	PreparsedElementType.STYLESHEET = 2;
	PreparsedElementType.SCRIPT = 3;
	PreparsedElementType.OTHER = 4;
	PreparsedElementType[PreparsedElementType.NG_CONTENT] = "NG_CONTENT";
	PreparsedElementType[PreparsedElementType.STYLE] = "STYLE";
	PreparsedElementType[PreparsedElementType.STYLESHEET] = "STYLESHEET";
	PreparsedElementType[PreparsedElementType.SCRIPT] = "SCRIPT";
	PreparsedElementType[PreparsedElementType.OTHER] = "OTHER";
	var PreparsedElement = (function () {
	    /**
	     * @param {?} type
	     * @param {?} selectAttr
	     * @param {?} hrefAttr
	     * @param {?} nonBindable
	     * @param {?} projectAs
	     */
	    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
	        this.type = type;
	        this.selectAttr = selectAttr;
	        this.hrefAttr = hrefAttr;
	        this.nonBindable = nonBindable;
	        this.projectAs = projectAs;
	    }
	    return PreparsedElement;
	}());
	/**
	 * @param {?} selectAttr
	 * @return {?}
	 */
	function normalizeNgContentSelect(selectAttr) {
	    if (selectAttr === null || selectAttr.length === 0) {
	        return '*';
	    }
	    return selectAttr;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
	// Group 1 = "bind-"
	var KW_BIND_IDX = 1;
	// Group 2 = "let-"
	var KW_LET_IDX = 2;
	// Group 3 = "ref-/#"
	var KW_REF_IDX = 3;
	// Group 4 = "on-"
	var KW_ON_IDX = 4;
	// Group 5 = "bindon-"
	var KW_BINDON_IDX = 5;
	// Group 6 = "@"
	var KW_AT_IDX = 6;
	// Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
	var IDENT_KW_IDX = 7;
	// Group 8 = identifier inside [()]
	var IDENT_BANANA_BOX_IDX = 8;
	// Group 9 = identifier inside []
	var IDENT_PROPERTY_IDX = 9;
	// Group 10 = identifier inside ()
	var IDENT_EVENT_IDX = 10;
	// deprecated in 4.x
	var TEMPLATE_ELEMENT = 'template';
	// deprecated in 4.x
	var TEMPLATE_ATTR = 'template';
	var TEMPLATE_ATTR_PREFIX = '*';
	var CLASS_ATTR = 'class';
	var TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
	var TEMPLATE_ELEMENT_DEPRECATION_WARNING = 'The <template> element is deprecated. Use <ng-template> instead';
	var TEMPLATE_ATTR_DEPRECATION_WARNING = 'The template attribute is deprecated. Use an ng-template element instead.';
	var warningCounts = {};
	/**
	 * @param {?} warnings
	 * @return {?}
	 */
	function warnOnlyOnce(warnings) {
	    return function (error) {
	        if (warnings.indexOf(error.msg) !== -1) {
	            warningCounts[error.msg] = (warningCounts[error.msg] || 0) + 1;
	            return warningCounts[error.msg] <= 1;
	        }
	        return true;
	    };
	}
	/**
	 * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
	 * parsed templates before compilation is invoked, allowing custom expression syntax
	 * and other advanced transformations.
	 *
	 * This is currently an internal-only feature and not meant for general use.
	 */
	var TEMPLATE_TRANSFORMS = new _angular_core.InjectionToken('TemplateTransforms');
	var TemplateParseError = (function (_super) {
	    __extends(TemplateParseError, _super);
	    /**
	     * @param {?} message
	     * @param {?} span
	     * @param {?} level
	     */
	    function TemplateParseError(message, span, level) {
	        return _super.call(this, span, message, level) || this;
	    }
	    return TemplateParseError;
	}(ParseError));
	var TemplateParseResult = (function () {
	    /**
	     * @param {?=} templateAst
	     * @param {?=} usedPipes
	     * @param {?=} errors
	     */
	    function TemplateParseResult(templateAst, usedPipes, errors) {
	        this.templateAst = templateAst;
	        this.usedPipes = usedPipes;
	        this.errors = errors;
	    }
	    return TemplateParseResult;
	}());
	var TemplateParser = (function () {
	    /**
	     * @param {?} _config
	     * @param {?} _exprParser
	     * @param {?} _schemaRegistry
	     * @param {?} _htmlParser
	     * @param {?} _console
	     * @param {?} transforms
	     */
	    function TemplateParser(_config, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
	        this._config = _config;
	        this._exprParser = _exprParser;
	        this._schemaRegistry = _schemaRegistry;
	        this._htmlParser = _htmlParser;
	        this._console = _console;
	        this.transforms = transforms;
	    }
	    /**
	     * @param {?} component
	     * @param {?} template
	     * @param {?} directives
	     * @param {?} pipes
	     * @param {?} schemas
	     * @param {?} templateUrl
	     * @return {?}
	     */
	    TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {
	        var /** @type {?} */ result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
	        var /** @type {?} */ warnings = ((result.errors)).filter(function (error) { return error.level === ParseErrorLevel.WARNING; })
	            .filter(warnOnlyOnce([TEMPLATE_ATTR_DEPRECATION_WARNING, TEMPLATE_ELEMENT_DEPRECATION_WARNING]));
	        var /** @type {?} */ errors = ((result.errors)).filter(function (error) { return error.level === ParseErrorLevel.ERROR; });
	        if (warnings.length > 0) {
	            this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
	        }
	        if (errors.length > 0) {
	            var /** @type {?} */ errorString = errors.join('\n');
	            throw syntaxError("Template parse errors:\n" + errorString);
	        }
	        return { template: /** @type {?} */ ((result.templateAst)), pipes: /** @type {?} */ ((result.usedPipes)) };
	    };
	    /**
	     * @param {?} component
	     * @param {?} template
	     * @param {?} directives
	     * @param {?} pipes
	     * @param {?} schemas
	     * @param {?} templateUrl
	     * @return {?}
	     */
	    TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {
	        return this.tryParseHtml(this.expandHtml(/** @type {?} */ ((this._htmlParser)).parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, directives, pipes, schemas);
	    };
	    /**
	     * @param {?} htmlAstWithErrors
	     * @param {?} component
	     * @param {?} directives
	     * @param {?} pipes
	     * @param {?} schemas
	     * @return {?}
	     */
	    TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, directives, pipes, schemas) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ errors = htmlAstWithErrors.errors;
	        var /** @type {?} */ usedPipes = [];
	        if (htmlAstWithErrors.rootNodes.length > 0) {
	            var /** @type {?} */ uniqDirectives = removeSummaryDuplicates(directives);
	            var /** @type {?} */ uniqPipes = removeSummaryDuplicates(pipes);
	            var /** @type {?} */ providerViewContext = new ProviderViewContext(component);
	            var /** @type {?} */ interpolationConfig = ((undefined));
	            if (component.template && component.template.interpolation) {
	                interpolationConfig = {
	                    start: component.template.interpolation[0],
	                    end: component.template.interpolation[1]
	                };
	            }
	            var /** @type {?} */ bindingParser = new BindingParser(this._exprParser, /** @type {?} */ ((interpolationConfig)), this._schemaRegistry, uniqPipes, errors);
	            var /** @type {?} */ parseVisitor = new TemplateParseVisitor(this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
	            result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
	            errors.push.apply(errors, providerViewContext.errors);
	            usedPipes.push.apply(usedPipes, bindingParser.getUsedPipes());
	        }
	        else {
	            result = [];
	        }
	        this._assertNoReferenceDuplicationOnTemplate(result, errors);
	        if (errors.length > 0) {
	            return new TemplateParseResult(result, usedPipes, errors);
	        }
	        if (this.transforms) {
	            this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result); });
	        }
	        return new TemplateParseResult(result, usedPipes, errors);
	    };
	    /**
	     * @param {?} htmlAstWithErrors
	     * @param {?=} forced
	     * @return {?}
	     */
	    TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) {
	        if (forced === void 0) { forced = false; }
	        var /** @type {?} */ errors = htmlAstWithErrors.errors;
	        if (errors.length == 0 || forced) {
	            // Transform ICU messages to angular directives
	            var /** @type {?} */ expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
	            errors.push.apply(errors, expandedHtmlAst.errors);
	            htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
	        }
	        return htmlAstWithErrors;
	    };
	    /**
	     * @param {?} component
	     * @return {?}
	     */
	    TemplateParser.prototype.getInterpolationConfig = function (component) {
	        if (component.template) {
	            return InterpolationConfig.fromArray(component.template.interpolation);
	        }
	        return undefined;
	    };
	    /**
	     * \@internal
	     * @param {?} result
	     * @param {?} errors
	     * @return {?}
	     */
	    TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
	        var /** @type {?} */ existingReferences = [];
	        result.filter(function (element) { return !!((element)).references; })
	            .forEach(function (element) { return ((element)).references.forEach(function (reference) {
	            var /** @type {?} */ name = reference.name;
	            if (existingReferences.indexOf(name) < 0) {
	                existingReferences.push(name);
	            }
	            else {
	                var /** @type {?} */ error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, ParseErrorLevel.ERROR);
	                errors.push(error);
	            }
	        }); });
	    };
	    return TemplateParser;
	}());
	TemplateParser.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	TemplateParser.ctorParameters = function () { return [
	    { type: CompilerConfig, },
	    { type: Parser, },
	    { type: ElementSchemaRegistry, },
	    { type: I18NHtmlParser, },
	    { type: _angular_core.ɵConsole, },
	    { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS,] },] },
	]; };
	var TemplateParseVisitor = (function () {
	    /**
	     * @param {?} config
	     * @param {?} providerViewContext
	     * @param {?} directives
	     * @param {?} _bindingParser
	     * @param {?} _schemaRegistry
	     * @param {?} _schemas
	     * @param {?} _targetErrors
	     */
	    function TemplateParseVisitor(config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
	        var _this = this;
	        this.config = config;
	        this.providerViewContext = providerViewContext;
	        this._bindingParser = _bindingParser;
	        this._schemaRegistry = _schemaRegistry;
	        this._schemas = _schemas;
	        this._targetErrors = _targetErrors;
	        this.selectorMatcher = new SelectorMatcher();
	        this.directivesIndex = new Map();
	        this.ngContentCount = 0;
	        // Note: queries start with id 1 so we can use the number in a Bloom filter!
	        this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;
	        directives.forEach(function (directive, index) {
	            var selector = CssSelector.parse(directive.selector);
	            _this.selectorMatcher.addSelectables(selector, directive);
	            _this.directivesIndex.set(directive, index);
	        });
	    }
	    /**
	     * @param {?} expansion
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) { return null; };
	    /**
	     * @param {?} expansionCase
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return null; };
	    /**
	     * @param {?} text
	     * @param {?} parent
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitText = function (text, parent) {
	        var /** @type {?} */ ngContentIndex = ((parent.findNgContentIndex(TEXT_CSS_SELECTOR)));
	        var /** @type {?} */ expr = this._bindingParser.parseInterpolation(text.value, /** @type {?} */ ((text.sourceSpan)));
	        return expr ? new BoundTextAst(expr, ngContentIndex, /** @type {?} */ ((text.sourceSpan))) :
	            new TextAst(text.value, ngContentIndex, /** @type {?} */ ((text.sourceSpan)));
	    };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
	        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitComment = function (comment, context) { return null; };
	    /**
	     * @param {?} element
	     * @param {?} parent
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype.visitElement = function (element, parent) {
	        var _this = this;
	        var /** @type {?} */ queryStartIndex = this.contentQueryStartId;
	        var /** @type {?} */ nodeName = element.name;
	        var /** @type {?} */ preparsedElement = preparseElement(element);
	        if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	            preparsedElement.type === PreparsedElementType.STYLE) {
	            // Skipping <script> for security reasons
	            // Skipping <style> as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        if (preparsedElement.type === PreparsedElementType.STYLESHEET &&
	            isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	            // Skipping stylesheets with either relative urls or package scheme as we already processed
	            // them in the StyleCompiler
	            return null;
	        }
	        var /** @type {?} */ matchableAttrs = [];
	        var /** @type {?} */ elementOrDirectiveProps = [];
	        var /** @type {?} */ elementOrDirectiveRefs = [];
	        var /** @type {?} */ elementVars = [];
	        var /** @type {?} */ events = [];
	        var /** @type {?} */ templateElementOrDirectiveProps = [];
	        var /** @type {?} */ templateMatchableAttrs = [];
	        var /** @type {?} */ templateElementVars = [];
	        var /** @type {?} */ hasInlineTemplates = false;
	        var /** @type {?} */ attrs = [];
	        var /** @type {?} */ isTemplateElement = isTemplate(element, this.config.enableLegacyTemplate, function (m, span) { return _this._reportError(m, span, ParseErrorLevel.WARNING); });
	        element.attrs.forEach(function (attr) {
	            var /** @type {?} */ hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
	            var /** @type {?} */ templateBindingsSource;
	            var /** @type {?} */ prefixToken;
	            var /** @type {?} */ normalizedName = _this._normalizeAttributeName(attr.name);
	            if (_this.config.enableLegacyTemplate && normalizedName == TEMPLATE_ATTR) {
	                _this._reportError(TEMPLATE_ATTR_DEPRECATION_WARNING, attr.sourceSpan, ParseErrorLevel.WARNING);
	                templateBindingsSource = attr.value;
	            }
	            else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
	                templateBindingsSource = attr.value;
	                prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';
	            }
	            var /** @type {?} */ hasTemplateBinding = templateBindingsSource != null;
	            if (hasTemplateBinding) {
	                if (hasInlineTemplates) {
	                    _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
	                }
	                hasInlineTemplates = true;
	                _this._bindingParser.parseInlineTemplateBinding(/** @type {?} */ ((prefixToken)), /** @type {?} */ ((templateBindingsSource)), attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
	            }
	            if (!hasBinding && !hasTemplateBinding) {
	                // don't include the bindings as attributes as well in the AST
	                attrs.push(_this.visitAttribute(attr, null));
	                matchableAttrs.push([attr.name, attr.value]);
	            }
	        });
	        var /** @type {?} */ elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
	        var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;
	        var /** @type {?} */ references = [];
	        var /** @type {?} */ boundDirectivePropNames = new Set();
	        var /** @type {?} */ directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, /** @type {?} */ ((element.sourceSpan)), references, boundDirectivePropNames);
	        var /** @type {?} */ elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);
	        var /** @type {?} */ isViewRoot = parent.isTemplateElement || hasInlineTemplates;
	        var /** @type {?} */ providerContext = new ProviderElementContext(this.providerViewContext, /** @type {?} */ ((parent.providerContext)), isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, /** @type {?} */ ((element.sourceSpan)));
	        var /** @type {?} */ children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? ((parent.providerContext)) : providerContext));
	        providerContext.afterElement();
	        // Override the actual selector when the `ngProjectAs` attribute is provided
	        var /** @type {?} */ projectionSelector = preparsedElement.projectAs != null ?
	            CssSelector.parse(preparsedElement.projectAs)[0] :
	            elementCssSelector;
	        var /** @type {?} */ ngContentIndex = ((parent.findNgContentIndex(projectionSelector)));
	        var /** @type {?} */ parsedElement;
	        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
	            if (element.children && !element.children.every(_isEmptyTextNode)) {
	                this._reportError("<ng-content> element cannot have content.", /** @type {?} */ ((element.sourceSpan)));
	            }
	            parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? ((null)) : ngContentIndex, /** @type {?} */ ((element.sourceSpan)));
	        }
	        else if (isTemplateElement) {
	            this._assertAllEventsPublishedByDirectives(directiveAsts, events);
	            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, /** @type {?} */ ((element.sourceSpan)));
	            parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? ((null)) : ngContentIndex, /** @type {?} */ ((element.sourceSpan)));
	        }
	        else {
	            this._assertElementExists(matchElement, element);
	            this._assertOnlyOneComponent(directiveAsts, /** @type {?} */ ((element.sourceSpan)));
	            var /** @type {?} */ ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
	            parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan || null);
	        }
	        if (hasInlineTemplates) {
	            var /** @type {?} */ templateQueryStartIndex = this.contentQueryStartId;
	            var /** @type {?} */ templateSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
	            var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateSelector).directives;
	            var /** @type {?} */ templateBoundDirectivePropNames = new Set();
	            var /** @type {?} */ templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], /** @type {?} */ ((element.sourceSpan)), [], templateBoundDirectivePropNames);
	            var /** @type {?} */ templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);
	            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, /** @type {?} */ ((element.sourceSpan)));
	            var /** @type {?} */ templateProviderContext = new ProviderElementContext(this.providerViewContext, /** @type {?} */ ((parent.providerContext)), parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, /** @type {?} */ ((element.sourceSpan)));
	            templateProviderContext.afterElement();
	            parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, /** @type {?} */ ((element.sourceSpan)));
	        }
	        return parsedElement;
	    };
	    /**
	     * @param {?} isTemplateElement
	     * @param {?} attr
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetProps
	     * @param {?} targetEvents
	     * @param {?} targetRefs
	     * @param {?} targetVars
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
	        var /** @type {?} */ name = this._normalizeAttributeName(attr.name);
	        var /** @type {?} */ value = attr.value;
	        var /** @type {?} */ srcSpan = attr.sourceSpan;
	        var /** @type {?} */ bindParts = name.match(BIND_NAME_REGEXP);
	        var /** @type {?} */ hasBinding = false;
	        if (bindParts !== null) {
	            hasBinding = true;
	            if (bindParts[KW_BIND_IDX] != null) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (bindParts[KW_LET_IDX]) {
	                if (isTemplateElement) {
	                    var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];
	                    this._parseVariable(identifier, value, srcSpan, targetVars);
	                }
	                else {
	                    this._reportError("\"let-\" is only supported on template elements.", srcSpan);
	                }
	            }
	            else if (bindParts[KW_REF_IDX]) {
	                var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];
	                this._parseReference(identifier, value, srcSpan, targetRefs);
	            }
	            else if (bindParts[KW_ON_IDX]) {
	                this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (bindParts[KW_BINDON_IDX]) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (bindParts[KW_AT_IDX]) {
	                this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (bindParts[IDENT_BANANA_BOX_IDX]) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (bindParts[IDENT_PROPERTY_IDX]) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (bindParts[IDENT_EVENT_IDX]) {
	                this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	            }
	        }
	        else {
	            hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
	        }
	        if (!hasBinding) {
	            this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	        }
	        return hasBinding;
	    };
	    /**
	     * @param {?} attrName
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	        return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
	    };
	    /**
	     * @param {?} identifier
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?} targetVars
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
	        if (identifier.indexOf('-') > -1) {
	            this._reportError("\"-\" is not allowed in variable names", sourceSpan);
	        }
	        targetVars.push(new VariableAst(identifier, value, sourceSpan));
	    };
	    /**
	     * @param {?} identifier
	     * @param {?} value
	     * @param {?} sourceSpan
	     * @param {?} targetRefs
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
	        if (identifier.indexOf('-') > -1) {
	            this._reportError("\"-\" is not allowed in reference names", sourceSpan);
	        }
	        targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
	    };
	    /**
	     * @param {?} name
	     * @param {?} expression
	     * @param {?} sourceSpan
	     * @param {?} targetMatchableAttrs
	     * @param {?} targetEvents
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	        this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
	    };
	    /**
	     * @param {?} selectorMatcher
	     * @param {?} elementCssSelector
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	        var _this = this;
	        // Need to sort the directives so that we get consistent results throughout,
	        // as selectorMatcher uses Maps inside.
	        // Also deduplicate directives as they might match more than one time!
	        var /** @type {?} */ directives = new Array(this.directivesIndex.size);
	        // Whether any directive selector matches on the element name
	        var /** @type {?} */ matchElement = false;
	        selectorMatcher.match(elementCssSelector, function (selector, directive) {
	            directives[((_this.directivesIndex.get(directive)))] = directive;
	            matchElement = matchElement || selector.hasElementSelector();
	        });
	        return {
	            directives: directives.filter(function (dir) { return !!dir; }),
	            matchElement: matchElement,
	        };
	    };
	    /**
	     * @param {?} isTemplateElement
	     * @param {?} elementName
	     * @param {?} directives
	     * @param {?} props
	     * @param {?} elementOrDirectiveRefs
	     * @param {?} elementSourceSpan
	     * @param {?} targetReferences
	     * @param {?} targetBoundDirectivePropNames
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {
	        var _this = this;
	        var /** @type {?} */ matchedReferences = new Set();
	        var /** @type {?} */ component = ((null));
	        var /** @type {?} */ directiveAsts = directives.map(function (directive) {
	            var /** @type {?} */ sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + identifierName(directive.type));
	            if (directive.isComponent) {
	                component = directive;
	            }
	            var /** @type {?} */ directiveProperties = [];
	            var /** @type {?} */ hostProperties = ((_this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan)));
	            // Note: We need to check the host properties here as well,
	            // as we don't know the element name in the DirectiveWrapperCompiler yet.
	            hostProperties = _this._checkPropertiesInSchema(elementName, hostProperties);
	            var /** @type {?} */ hostEvents = ((_this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan)));
	            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);
	            elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                if ((elOrDirRef.value.length === 0 && directive.isComponent) ||
	                    (directive.exportAs == elOrDirRef.value)) {
	                    targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
	                    matchedReferences.add(elOrDirRef.name);
	                }
	            });
	            var /** @type {?} */ contentQueryStartId = _this.contentQueryStartId;
	            _this.contentQueryStartId += directive.queries.length;
	            return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);
	        });
	        elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	            if (elOrDirRef.value.length > 0) {
	                if (!matchedReferences.has(elOrDirRef.name)) {
	                    _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
	                }
	            }
	            else if (!component) {
	                var /** @type {?} */ refToken = ((null));
	                if (isTemplateElement) {
	                    refToken = createIdentifierToken(Identifiers.TemplateRef);
	                }
	                targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
	            }
	        });
	        return directiveAsts;
	    };
	    /**
	     * @param {?} directiveProperties
	     * @param {?} boundProps
	     * @param {?} targetBoundDirectiveProps
	     * @param {?} targetBoundDirectivePropNames
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {
	        if (directiveProperties) {
	            var /** @type {?} */ boundPropsByName_1 = new Map();
	            boundProps.forEach(function (boundProp) {
	                var /** @type {?} */ prevValue = boundPropsByName_1.get(boundProp.name);
	                if (!prevValue || prevValue.isLiteral) {
	                    // give [a]="b" a higher precedence than a="b" on the same element
	                    boundPropsByName_1.set(boundProp.name, boundProp);
	                }
	            });
	            Object.keys(directiveProperties).forEach(function (dirProp) {
	                var /** @type {?} */ elProp = directiveProperties[dirProp];
	                var /** @type {?} */ boundProp = boundPropsByName_1.get(elProp);
	                // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                if (boundProp) {
	                    targetBoundDirectivePropNames.add(boundProp.name);
	                    if (!isEmptyExpression(boundProp.expression)) {
	                        targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
	                    }
	                }
	            });
	        }
	    };
	    /**
	     * @param {?} elementName
	     * @param {?} props
	     * @param {?} boundDirectivePropNames
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, boundDirectivePropNames) {
	        var _this = this;
	        var /** @type {?} */ boundElementProps = [];
	        props.forEach(function (prop) {
	            if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {
	                boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
	            }
	        });
	        return this._checkPropertiesInSchema(elementName, boundElementProps);
	    };
	    /**
	     * @param {?} directives
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._findComponentDirectives = function (directives) {
	        return directives.filter(function (directive) { return directive.directive.isComponent; });
	    };
	    /**
	     * @param {?} directives
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	        return this._findComponentDirectives(directives)
	            .map(function (directive) { return ((identifierName(directive.directive.type))); });
	    };
	    /**
	     * @param {?} directives
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
	        var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 1) {
	            this._reportError("More than one component matched on this element.\n" +
	                "Make sure that only one component's selector can match a given element.\n" +
	                ("Conflicting components: " + componentTypeNames.join(',')), sourceSpan);
	        }
	    };
	    /**
	     * Make sure that non-angular tags conform to the schemas.
	     *
	     * Note: An element is considered an angular tag when at least one directive selector matches the
	     * tag name.
	     *
	     * @param {?} matchElement Whether any directive has matched on the tag name
	     * @param {?} element the html element
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {
	        var /** @type {?} */ elName = element.name.replace(/^:xhtml:/, '');
	        if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
	            var /** @type {?} */ errorMsg = "'" + elName + "' is not a known element:\n";
	            errorMsg +=
	                "1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n";
	            if (elName.indexOf('-') > -1) {
	                errorMsg +=
	                    "2. If '" + elName + "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.";
	            }
	            else {
	                errorMsg +=
	                    "2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
	            }
	            this._reportError(errorMsg, /** @type {?} */ ((element.sourceSpan)));
	        }
	    };
	    /**
	     * @param {?} directives
	     * @param {?} elementProps
	     * @param {?} sourceSpan
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
	        var _this = this;
	        var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 0) {
	            this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
	        }
	        elementProps.forEach(function (prop) {
	            _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", sourceSpan);
	        });
	    };
	    /**
	     * @param {?} directives
	     * @param {?} events
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
	        var _this = this;
	        var /** @type {?} */ allDirectiveEvents = new Set();
	        directives.forEach(function (directive) {
	            Object.keys(directive.directive.outputs).forEach(function (k) {
	                var /** @type {?} */ eventName = directive.directive.outputs[k];
	                allDirectiveEvents.add(eventName);
	            });
	        });
	        events.forEach(function (event) {
	            if (event.target != null || !allDirectiveEvents.has(event.name)) {
	                _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", event.sourceSpan);
	            }
	        });
	    };
	    /**
	     * @param {?} elementName
	     * @param {?} boundProps
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) {
	        var _this = this;
	        // Note: We can't filter out empty expressions before this method,
	        // as we still want to validate them!
	        return boundProps.filter(function (boundProp) {
	            if (boundProp.type === PropertyBindingType.Property &&
	                !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
	                var /** @type {?} */ errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
	                if (elementName.startsWith('ng-')) {
	                    errorMsg +=
	                        "\n1. If '" + boundProp.name + "' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component." +
	                            "\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
	                }
	                else if (elementName.indexOf('-') > -1) {
	                    errorMsg +=
	                        "\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module." +
	                            ("\n2. If '" + elementName + "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.") +
	                            "\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
	                }
	                _this._reportError(errorMsg, boundProp.sourceSpan);
	            }
	            return !isEmptyExpression(boundProp.value);
	        });
	    };
	    /**
	     * @param {?} message
	     * @param {?} sourceSpan
	     * @param {?=} level
	     * @return {?}
	     */
	    TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
	        if (level === void 0) { level = ParseErrorLevel.ERROR; }
	        this._targetErrors.push(new ParseError(sourceSpan, message, level));
	    };
	    return TemplateParseVisitor;
	}());
	var NonBindableVisitor = (function () {
	    function NonBindableVisitor() {
	    }
	    /**
	     * @param {?} ast
	     * @param {?} parent
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitElement = function (ast, parent) {
	        var /** @type {?} */ preparsedElement = preparseElement(ast);
	        if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	            preparsedElement.type === PreparsedElementType.STYLE ||
	            preparsedElement.type === PreparsedElementType.STYLESHEET) {
	            // Skipping <script> for security reasons
	            // Skipping <style> and stylesheets as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        var /** @type {?} */ attrNameAndValues = ast.attrs.map(function (attr) { return [attr.name, attr.value]; });
	        var /** @type {?} */ selector = createElementCssSelector(ast.name, attrNameAndValues);
	        var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(selector);
	        var /** @type {?} */ children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
	        return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
	    };
	    /**
	     * @param {?} comment
	     * @param {?} context
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitComment = function (comment, context) { return null; };
	    /**
	     * @param {?} attribute
	     * @param {?} context
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
	        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	    };
	    /**
	     * @param {?} text
	     * @param {?} parent
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitText = function (text, parent) {
	        var /** @type {?} */ ngContentIndex = ((parent.findNgContentIndex(TEXT_CSS_SELECTOR)));
	        return new TextAst(text.value, ngContentIndex, /** @type {?} */ ((text.sourceSpan)));
	    };
	    /**
	     * @param {?} expansion
	     * @param {?} context
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitExpansion = function (expansion, context) { return expansion; };
	    /**
	     * @param {?} expansionCase
	     * @param {?} context
	     * @return {?}
	     */
	    NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return expansionCase; };
	    return NonBindableVisitor;
	}());
	var ElementOrDirectiveRef = (function () {
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?} sourceSpan
	     */
	    function ElementOrDirectiveRef(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    return ElementOrDirectiveRef;
	}());
	/**
	 * @param {?} classAttrValue
	 * @return {?}
	 */
	function splitClasses(classAttrValue) {
	    return classAttrValue.trim().split(/\s+/g);
	}
	var ElementContext = (function () {
	    /**
	     * @param {?} isTemplateElement
	     * @param {?} _ngContentIndexMatcher
	     * @param {?} _wildcardNgContentIndex
	     * @param {?} providerContext
	     */
	    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
	        this.isTemplateElement = isTemplateElement;
	        this._ngContentIndexMatcher = _ngContentIndexMatcher;
	        this._wildcardNgContentIndex = _wildcardNgContentIndex;
	        this.providerContext = providerContext;
	    }
	    /**
	     * @param {?} isTemplateElement
	     * @param {?} directives
	     * @param {?} providerContext
	     * @return {?}
	     */
	    ElementContext.create = function (isTemplateElement, directives, providerContext) {
	        var /** @type {?} */ matcher = new SelectorMatcher();
	        var /** @type {?} */ wildcardNgContentIndex = ((null));
	        var /** @type {?} */ component = directives.find(function (directive) { return directive.directive.isComponent; });
	        if (component) {
	            var /** @type {?} */ ngContentSelectors = ((component.directive.template)).ngContentSelectors;
	            for (var /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {
	                var /** @type {?} */ selector = ngContentSelectors[i];
	                if (selector === '*') {
	                    wildcardNgContentIndex = i;
	                }
	                else {
	                    matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
	                }
	            }
	        }
	        return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
	    };
	    /**
	     * @param {?} selector
	     * @return {?}
	     */
	    ElementContext.prototype.findNgContentIndex = function (selector) {
	        var /** @type {?} */ ngContentIndices = [];
	        this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
	        ngContentIndices.sort();
	        if (this._wildcardNgContentIndex != null) {
	            ngContentIndices.push(this._wildcardNgContentIndex);
	        }
	        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	    };
	    return ElementContext;
	}());
	/**
	 * @param {?} elementName
	 * @param {?} attributes
	 * @return {?}
	 */
	function createElementCssSelector(elementName, attributes) {
	    var /** @type {?} */ cssSelector = new CssSelector();
	    var /** @type {?} */ elNameNoNs = splitNsName(elementName)[1];
	    cssSelector.setElement(elNameNoNs);
	    for (var /** @type {?} */ i = 0; i < attributes.length; i++) {
	        var /** @type {?} */ attrName = attributes[i][0];
	        var /** @type {?} */ attrNameNoNs = splitNsName(attrName)[1];
	        var /** @type {?} */ attrValue = attributes[i][1];
	        cssSelector.addAttribute(attrNameNoNs, attrValue);
	        if (attrName.toLowerCase() == CLASS_ATTR) {
	            var /** @type {?} */ classes = splitClasses(attrValue);
	            classes.forEach(function (className) { return cssSelector.addClassName(className); });
	        }
	    }
	    return cssSelector;
	}
	var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
	var NON_BINDABLE_VISITOR = new NonBindableVisitor();
	/**
	 * @param {?} node
	 * @return {?}
	 */
	function _isEmptyTextNode(node) {
	    return node instanceof Text && node.value.trim().length == 0;
	}
	/**
	 * @template T
	 * @param {?} items
	 * @return {?}
	 */
	function removeSummaryDuplicates(items) {
	    var /** @type {?} */ map = new Map();
	    items.forEach(function (item) {
	        if (!map.get(item.type.reference)) {
	            map.set(item.type.reference, item);
	        }
	    });
	    return Array.from(map.values());
	}
	/**
	 * @param {?} ast
	 * @return {?}
	 */
	function isEmptyExpression(ast) {
	    if (ast instanceof ASTWithSource) {
	        ast = ast.ast;
	    }
	    return ast instanceof EmptyExpr;
	}
	/**
	 * @param {?} el
	 * @param {?} enableLegacyTemplate
	 * @param {?} reportDeprecation
	 * @return {?}
	 */
	function isTemplate(el, enableLegacyTemplate, reportDeprecation) {
	    if (isNgTemplate(el.name))
	        return true;
	    var /** @type {?} */ tagNoNs = splitNsName(el.name)[1];
	    // `<template>` is HTML and case insensitive
	    if (tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {
	        if (enableLegacyTemplate && tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {
	            reportDeprecation(TEMPLATE_ELEMENT_DEPRECATION_WARNING, /** @type {?} */ ((el.sourceSpan)));
	            return true;
	        }
	    }
	    return false;
	}
	/**
	 * An interface for retrieving documents by URL that the compiler uses
	 * to load templates.
	 */
	var ResourceLoader = (function () {
	    function ResourceLoader() {
	    }
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    ResourceLoader.prototype.get = function (url) { return null; };
	    return ResourceLoader;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Create a {\@link UrlResolver} with no package prefix.
	 * @return {?}
	 */
	function createUrlResolverWithoutPackagePrefix() {
	    return new UrlResolver();
	}
	/**
	 * @return {?}
	 */
	function createOfflineCompileUrlResolver() {
	    return new UrlResolver('.');
	}
	/**
	 * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
	 */
	var DEFAULT_PACKAGE_URL_PROVIDER = {
	    provide: _angular_core.PACKAGE_ROOT_URL,
	    useValue: '/'
	};
	/**
	 * Used by the {\@link Compiler} when resolving HTML and CSS template URLs.
	 *
	 * This class can be overridden by the application developer to create custom behavior.
	 *
	 * See {\@link Compiler}
	 *
	 * ## Example
	 *
	 * {\@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
	 *
	 * \@security When compiling templates at runtime, you must
	 * ensure that the entire template comes from a trusted source.
	 * Attacker-controlled data introduced by a template could expose your
	 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	 */
	var UrlResolver = (function () {
	    /**
	     * @param {?=} _packagePrefix
	     */
	    function UrlResolver(_packagePrefix) {
	        if (_packagePrefix === void 0) { _packagePrefix = null; }
	        this._packagePrefix = _packagePrefix;
	    }
	    /**
	     * Resolves the `url` given the `baseUrl`:
	     * - when the `url` is null, the `baseUrl` is returned,
	     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	     * `baseUrl` and `url`,
	     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	     * returned as is (ignoring the `baseUrl`)
	     * @param {?} baseUrl
	     * @param {?} url
	     * @return {?}
	     */
	    UrlResolver.prototype.resolve = function (baseUrl, url) {
	        var /** @type {?} */ resolvedUrl = url;
	        if (baseUrl != null && baseUrl.length > 0) {
	            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
	        }
	        var /** @type {?} */ resolvedParts = _split(resolvedUrl);
	        var /** @type {?} */ prefix = this._packagePrefix;
	        if (prefix != null && resolvedParts != null &&
	            resolvedParts[_ComponentIndex.Scheme] == 'package') {
	            var /** @type {?} */ path = resolvedParts[_ComponentIndex.Path];
	            prefix = prefix.replace(/\/+$/, '');
	            path = path.replace(/^\/+/, '');
	            return prefix + "/" + path;
	        }
	        return resolvedUrl;
	    };
	    return UrlResolver;
	}());
	UrlResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	UrlResolver.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL,] },] },
	]; };
	/**
	 * Extract the scheme of a URL.
	 * @param {?} url
	 * @return {?}
	 */
	function getUrlScheme(url) {
	    var /** @type {?} */ match = _split(url);
	    return (match && match[_ComponentIndex.Scheme]) || '';
	}
	/**
	 * Builds a URI string from already-encoded parts.
	 *
	 * No encoding is performed.  Any component may be omitted as either null or
	 * undefined.
	 *
	 * @param {?=} opt_scheme The scheme such as 'http'.
	 * @param {?=} opt_userInfo The user name before the '\@'.
	 * @param {?=} opt_domain The domain such as 'www.google.com', already
	 *     URI-encoded.
	 * @param {?=} opt_port The port number.
	 * @param {?=} opt_path The path, already URI-encoded.  If it is not
	 *     empty, it must begin with a slash.
	 * @param {?=} opt_queryData The URI-encoded query data.
	 * @param {?=} opt_fragment The URI-encoded fragment identifier.
	 * @return {?} The fully combined URI.
	 */
	function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	    var /** @type {?} */ out = [];
	    if (opt_scheme != null) {
	        out.push(opt_scheme + ':');
	    }
	    if (opt_domain != null) {
	        out.push('//');
	        if (opt_userInfo != null) {
	            out.push(opt_userInfo + '@');
	        }
	        out.push(opt_domain);
	        if (opt_port != null) {
	            out.push(':' + opt_port);
	        }
	    }
	    if (opt_path != null) {
	        out.push(opt_path);
	    }
	    if (opt_queryData != null) {
	        out.push('?' + opt_queryData);
	    }
	    if (opt_fragment != null) {
	        out.push('#' + opt_fragment);
	    }
	    return out.join('');
	}
	/**
	 * A regular expression for breaking a URI into its component parts.
	 *
	 * {\@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	 * As the "first-match-wins" algorithm is identical to the "greedy"
	 * disambiguation method used by POSIX regular expressions, it is natural and
	 * commonplace to use a regular expression for parsing the potential five
	 * components of a URI reference.
	 *
	 * The following line is the regular expression for breaking-down a
	 * well-formed URI reference into its components.
	 *
	 * <pre>
	 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	 *  12            3  4          5       6  7        8 9
	 * </pre>
	 *
	 * The numbers in the second line above are only to assist readability; they
	 * indicate the reference points for each subexpression (i.e., each paired
	 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	 * For example, matching the above expression to
	 * <pre>
	 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	 * </pre>
	 * results in the following subexpression matches:
	 * <pre>
	 *    $1 = http:
	 *    $2 = http
	 *    $3 = //www.ics.uci.edu
	 *    $4 = www.ics.uci.edu
	 *    $5 = /pub/ietf/uri/
	 *    $6 = <undefined>
	 *    $7 = <undefined>
	 *    $8 = #Related
	 *    $9 = Related
	 * </pre>
	 * where <undefined> indicates that the component is not present, as is the
	 * case for the query component in the above example. Therefore, we can
	 * determine the value of the five components as
	 * <pre>
	 *    scheme    = $2
	 *    authority = $4
	 *    path      = $5
	 *    query     = $7
	 *    fragment  = $9
	 * </pre>
	 *
	 * The regular expression has been modified slightly to expose the
	 * userInfo, domain, and port separately from the authority.
	 * The modified version yields
	 * <pre>
	 *    $1 = http              scheme
	 *    $2 = <undefined>       userInfo -\
	 *    $3 = www.ics.uci.edu   domain     | authority
	 *    $4 = <undefined>       port     -/
	 *    $5 = /pub/ietf/uri/    path
	 *    $6 = <undefined>       query without ?
	 *    $7 = Related           fragment without #
	 * </pre>
	 * \@internal
	 */
	var _splitRe = new RegExp('^' +
	    '(?:' +
	    '([^:/?#.]+)' +
	    // used by other URL parts such as :,
	    // ?, /, #, and .
	    ':)?' +
	    '(?://' +
	    '(?:([^/?#]*)@)?' +
	    '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	    // digits, dashes, dots, percent
	    // escapes, and unicode characters.
	    '(?::([0-9]+))?' +
	    ')?' +
	    '([^?#]+)?' +
	    '(?:\\?([^#]*))?' +
	    '(?:#(.*))?' +
	    '$');
	var _ComponentIndex = {};
	_ComponentIndex.Scheme = 1;
	_ComponentIndex.UserInfo = 2;
	_ComponentIndex.Domain = 3;
	_ComponentIndex.Port = 4;
	_ComponentIndex.Path = 5;
	_ComponentIndex.QueryData = 6;
	_ComponentIndex.Fragment = 7;
	_ComponentIndex[_ComponentIndex.Scheme] = "Scheme";
	_ComponentIndex[_ComponentIndex.UserInfo] = "UserInfo";
	_ComponentIndex[_ComponentIndex.Domain] = "Domain";
	_ComponentIndex[_ComponentIndex.Port] = "Port";
	_ComponentIndex[_ComponentIndex.Path] = "Path";
	_ComponentIndex[_ComponentIndex.QueryData] = "QueryData";
	_ComponentIndex[_ComponentIndex.Fragment] = "Fragment";
	/**
	 * Splits a URI into its component parts.
	 *
	 * Each component can be accessed via the component indices; for example:
	 * <pre>
	 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	 * </pre>
	 *
	 * @param {?} uri The URI string to examine.
	 * @return {?} Each component still URI-encoded.
	 *     Each component that is present will contain the encoded value, whereas
	 *     components that are not present will be undefined or empty, depending
	 *     on the browser's regular expression implementation.  Never null, since
	 *     arbitrary strings may still look like path names.
	 */
	function _split(uri) {
	    return ((uri.match(_splitRe)));
	}
	/**
	 * Removes dot segments in given path component, as described in
	 * RFC 3986, section 5.2.4.
	 *
	 * @param {?} path A non-empty path component.
	 * @return {?} Path component with removed dot segments.
	 */
	function _removeDotSegments(path) {
	    if (path == '/')
	        return '/';
	    var /** @type {?} */ leadingSlash = path[0] == '/' ? '/' : '';
	    var /** @type {?} */ trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	    var /** @type {?} */ segments = path.split('/');
	    var /** @type {?} */ out = [];
	    var /** @type {?} */ up = 0;
	    for (var /** @type {?} */ pos = 0; pos < segments.length; pos++) {
	        var /** @type {?} */ segment = segments[pos];
	        switch (segment) {
	            case '':
	            case '.':
	                break;
	            case '..':
	                if (out.length > 0) {
	                    out.pop();
	                }
	                else {
	                    up++;
	                }
	                break;
	            default:
	                out.push(segment);
	        }
	    }
	    if (leadingSlash == '') {
	        while (up-- > 0) {
	            out.unshift('..');
	        }
	        if (out.length === 0)
	            out.push('.');
	    }
	    return leadingSlash + out.join('/') + trailingSlash;
	}
	/**
	 * Takes an array of the parts from split and canonicalizes the path part
	 * and then joins all the parts.
	 * @param {?} parts
	 * @return {?}
	 */
	function _joinAndCanonicalizePath(parts) {
	    var /** @type {?} */ path = parts[_ComponentIndex.Path];
	    path = path == null ? '' : _removeDotSegments(path);
	    parts[_ComponentIndex.Path] = path;
	    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	}
	/**
	 * Resolves a URL.
	 * @param {?} base The URL acting as the base URL.
	 * @param {?} url
	 * @return {?}
	 */
	function _resolveUrl(base, url) {
	    var /** @type {?} */ parts = _split(encodeURI(url));
	    var /** @type {?} */ baseParts = _split(base);
	    if (parts[_ComponentIndex.Scheme] != null) {
	        return _joinAndCanonicalizePath(parts);
	    }
	    else {
	        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	    }
	    for (var /** @type {?} */ i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	        if (parts[i] == null) {
	            parts[i] = baseParts[i];
	        }
	    }
	    if (parts[_ComponentIndex.Path][0] == '/') {
	        return _joinAndCanonicalizePath(parts);
	    }
	    var /** @type {?} */ path = baseParts[_ComponentIndex.Path];
	    if (path == null)
	        path = '/';
	    var /** @type {?} */ index = path.lastIndexOf('/');
	    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	    parts[_ComponentIndex.Path] = path;
	    return _joinAndCanonicalizePath(parts);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DirectiveNormalizer = (function () {
	    /**
	     * @param {?} _resourceLoader
	     * @param {?} _urlResolver
	     * @param {?} _htmlParser
	     * @param {?} _config
	     */
	    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
	        this._resourceLoader = _resourceLoader;
	        this._urlResolver = _urlResolver;
	        this._htmlParser = _htmlParser;
	        this._config = _config;
	        this._resourceLoaderCache = new Map();
	    }
	    /**
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.clearCache = function () { this._resourceLoaderCache.clear(); };
	    /**
	     * @param {?} normalizedDirective
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
	        var _this = this;
	        if (!normalizedDirective.isComponent) {
	            return;
	        }
	        var /** @type {?} */ template = ((normalizedDirective.template));
	        this._resourceLoaderCache.delete(/** @type {?} */ ((template.templateUrl)));
	        template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(/** @type {?} */ ((stylesheet.moduleUrl))); });
	    };
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype._fetch = function (url) {
	        var /** @type {?} */ result = this._resourceLoaderCache.get(url);
	        if (!result) {
	            result = ((this._resourceLoader.get(url)));
	            this._resourceLoaderCache.set(url, result);
	        }
	        return result;
	    };
	    /**
	     * @param {?} prenormData
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {
	        var _this = this;
	        var /** @type {?} */ normalizedTemplateSync = ((null));
	        var /** @type {?} */ normalizedTemplateAsync = ((undefined));
	        if (isDefined(prenormData.template)) {
	            if (isDefined(prenormData.templateUrl)) {
	                throw syntaxError("'" + _angular_core.ɵstringify(prenormData.componentType) + "' component cannot define both template and templateUrl");
	            }
	            if (typeof prenormData.template !== 'string') {
	                throw syntaxError("The template specified for component " + _angular_core.ɵstringify(prenormData.componentType) + " is not a string");
	            }
	            normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
	            normalizedTemplateAsync = Promise.resolve(/** @type {?} */ ((normalizedTemplateSync)));
	        }
	        else if (isDefined(prenormData.templateUrl)) {
	            if (typeof prenormData.templateUrl !== 'string') {
	                throw syntaxError("The templateUrl specified for component " + _angular_core.ɵstringify(prenormData.componentType) + " is not a string");
	            }
	            normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
	        }
	        else {
	            throw syntaxError("No template specified for component " + _angular_core.ɵstringify(prenormData.componentType));
	        }
	        if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
	            // sync case
	            return new SyncAsyncResult(normalizedTemplateSync);
	        }
	        else {
	            // async case
	            return new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) { return _this.normalizeExternalStylesheets(normalizedTemplate); }));
	        }
	    };
	    /**
	     * @param {?} prenomData
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeTemplateSync = function (prenomData) {
	        return this.normalizeLoadedTemplate(prenomData, /** @type {?} */ ((prenomData.template)), prenomData.moduleUrl);
	    };
	    /**
	     * @param {?} prenomData
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeTemplateAsync = function (prenomData) {
	        var _this = this;
	        var /** @type {?} */ templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, /** @type {?} */ ((prenomData.templateUrl)));
	        return this._fetch(templateUrl)
	            .then(function (value) { return _this.normalizeLoadedTemplate(prenomData, value, templateUrl); });
	    };
	    /**
	     * @param {?} prenormData
	     * @param {?} template
	     * @param {?} templateAbsUrl
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (prenormData, template, templateAbsUrl) {
	        var /** @type {?} */ isInline = !!prenormData.template;
	        var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((prenormData.interpolation)));
	        var /** @type {?} */ rootNodesAndErrors = this._htmlParser.parse(template, templateSourceUrl({ reference: prenormData.ngModuleType }, { type: { reference: prenormData.componentType } }, { isInline: isInline, templateUrl: templateAbsUrl }), true, interpolationConfig);
	        if (rootNodesAndErrors.errors.length > 0) {
	            var /** @type {?} */ errorString = rootNodesAndErrors.errors.join('\n');
	            throw syntaxError("Template parse errors:\n" + errorString);
	        }
	        var /** @type {?} */ templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
	            styles: prenormData.styles,
	            styleUrls: prenormData.styleUrls,
	            moduleUrl: prenormData.moduleUrl
	        }));
	        var /** @type {?} */ visitor = new TemplatePreparseVisitor();
	        visitAll(visitor, rootNodesAndErrors.rootNodes);
	        var /** @type {?} */ templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
	        var /** @type {?} */ encapsulation = prenormData.encapsulation;
	        if (encapsulation == null) {
	            encapsulation = this._config.defaultEncapsulation;
	        }
	        var /** @type {?} */ styles = templateMetadataStyles.styles.concat(templateStyles.styles);
	        var /** @type {?} */ styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
	        if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 &&
	            styleUrls.length === 0) {
	            encapsulation = _angular_core.ViewEncapsulation.None;
	        }
	        return new CompileTemplateMetadata({
	            encapsulation: encapsulation,
	            template: template,
	            templateUrl: templateAbsUrl, styles: styles, styleUrls: styleUrls,
	            ngContentSelectors: visitor.ngContentSelectors,
	            animations: prenormData.animations,
	            interpolation: prenormData.interpolation, isInline: isInline,
	            externalStylesheets: []
	        });
	    };
	    /**
	     * @param {?} templateMeta
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {
	        return this._loadMissingExternalStylesheets(templateMeta.styleUrls)
	            .then(function (externalStylesheets) { return new CompileTemplateMetadata({
	            encapsulation: templateMeta.encapsulation,
	            template: templateMeta.template,
	            templateUrl: templateMeta.templateUrl,
	            styles: templateMeta.styles,
	            styleUrls: templateMeta.styleUrls,
	            externalStylesheets: externalStylesheets,
	            ngContentSelectors: templateMeta.ngContentSelectors,
	            animations: templateMeta.animations,
	            interpolation: templateMeta.interpolation,
	            isInline: templateMeta.isInline,
	        }); });
	    };
	    /**
	     * @param {?} styleUrls
	     * @param {?=} loadedStylesheets
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
	        var _this = this;
	        if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }
	        return Promise
	            .all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })
	            .map(function (styleUrl) { return _this._fetch(styleUrl).then(function (loadedStyle) {
	            var /** @type {?} */ stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
	            loadedStylesheets.set(styleUrl, stylesheet);
	            return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
	        }); }))
	            .then(function (_) { return Array.from(loadedStylesheets.values()); });
	    };
	    /**
	     * @param {?} stylesheet
	     * @return {?}
	     */
	    DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {
	        var _this = this;
	        var /** @type {?} */ moduleUrl = ((stylesheet.moduleUrl));
	        var /** @type {?} */ allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)
	            .map(function (url) { return _this._urlResolver.resolve(moduleUrl, url); });
	        var /** @type {?} */ allStyles = stylesheet.styles.map(function (style$$1) {
	            var /** @type {?} */ styleWithImports = extractStyleUrls(_this._urlResolver, moduleUrl, style$$1);
	            allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
	            return styleWithImports.style;
	        });
	        return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl });
	    };
	    return DirectiveNormalizer;
	}());
	DirectiveNormalizer.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	DirectiveNormalizer.ctorParameters = function () { return [
	    { type: ResourceLoader, },
	    { type: UrlResolver, },
	    { type: HtmlParser, },
	    { type: CompilerConfig, },
	]; };
	var TemplatePreparseVisitor = (function () {
	    function TemplatePreparseVisitor() {
	        this.ngContentSelectors = [];
	        this.styles = [];
	        this.styleUrls = [];
	        this.ngNonBindableStackCount = 0;
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	        var /** @type {?} */ preparsedElement = preparseElement(ast);
	        switch (preparsedElement.type) {
	            case PreparsedElementType.NG_CONTENT:
	                if (this.ngNonBindableStackCount === 0) {
	                    this.ngContentSelectors.push(preparsedElement.selectAttr);
	                }
	                break;
	            case PreparsedElementType.STYLE:
	                var /** @type {?} */ textContent_1 = '';
	                ast.children.forEach(function (child) {
	                    if (child instanceof Text) {
	                        textContent_1 += child.value;
	                    }
	                });
	                this.styles.push(textContent_1);
	                break;
	            case PreparsedElementType.STYLESHEET:
	                this.styleUrls.push(preparsedElement.hrefAttr);
	                break;
	            default:
	                break;
	        }
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount++;
	        }
	        visitAll(this, ast.children);
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount--;
	        }
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { visitAll(this, ast.cases); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {
	        visitAll(this, ast.expression);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) { return null; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
	    return TemplatePreparseVisitor;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __assign = (undefined && undefined.__assign) || Object.assign || function (t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s)
	            if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	    }
	    return t;
	};
	var DirectiveResolver = (function () {
	    /**
	     * @param {?=} _reflector
	     */
	    function DirectiveResolver(_reflector) {
	        if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }
	        this._reflector = _reflector;
	    }
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    DirectiveResolver.prototype.isDirective = function (type) {
	        var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	        return typeMetadata && typeMetadata.some(isDirectiveMetadata);
	    };
	    /**
	     * @param {?} type
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	        if (typeMetadata) {
	            var /** @type {?} */ metadata = findLast(typeMetadata, isDirectiveMetadata);
	            if (metadata) {
	                var /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);
	                return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
	            }
	        }
	        if (throwIfNotFound) {
	            throw new Error("No Directive annotation found on " + _angular_core.ɵstringify(type));
	        }
	        return null;
	    };
	    /**
	     * @param {?} dm
	     * @param {?} propertyMetadata
	     * @param {?} directiveType
	     * @return {?}
	     */
	    DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
	        var /** @type {?} */ inputs = [];
	        var /** @type {?} */ outputs = [];
	        var /** @type {?} */ host = {};
	        var /** @type {?} */ queries = {};
	        Object.keys(propertyMetadata).forEach(function (propName) {
	            var /** @type {?} */ input = findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Input; });
	            if (input) {
	                if (input.bindingPropertyName) {
	                    inputs.push(propName + ": " + input.bindingPropertyName);
	                }
	                else {
	                    inputs.push(propName);
	                }
	            }
	            var /** @type {?} */ output = findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Output; });
	            if (output) {
	                if (output.bindingPropertyName) {
	                    outputs.push(propName + ": " + output.bindingPropertyName);
	                }
	                else {
	                    outputs.push(propName);
	                }
	            }
	            var /** @type {?} */ hostBindings = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostBinding; });
	            hostBindings.forEach(function (hostBinding) {
	                if (hostBinding.hostPropertyName) {
	                    var /** @type {?} */ startWith = hostBinding.hostPropertyName[0];
	                    if (startWith === '(') {
	                        throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
	                    }
	                    else if (startWith === '[') {
	                        throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
	                    }
	                    host["[" + hostBinding.hostPropertyName + "]"] = propName;
	                }
	                else {
	                    host["[" + propName + "]"] = propName;
	                }
	            });
	            var /** @type {?} */ hostListeners = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostListener; });
	            hostListeners.forEach(function (hostListener) {
	                var /** @type {?} */ args = hostListener.args || [];
	                host["(" + hostListener.eventName + ")"] = propName + "(" + args.join(',') + ")";
	            });
	            var /** @type {?} */ query = findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Query; });
	            if (query) {
	                queries[propName] = query;
	            }
	        });
	        return this._merge(dm, inputs, outputs, host, queries, directiveType);
	    };
	    /**
	     * @param {?} def
	     * @return {?}
	     */
	    DirectiveResolver.prototype._extractPublicName = function (def) { return splitAtColon(def, [/** @type {?} */ ((null)), def])[1].trim(); };
	    /**
	     * @param {?} bindings
	     * @return {?}
	     */
	    DirectiveResolver.prototype._dedupeBindings = function (bindings) {
	        var /** @type {?} */ names = new Set();
	        var /** @type {?} */ reversedResult = [];
	        // go last to first to allow later entries to overwrite previous entries
	        for (var /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {
	            var /** @type {?} */ binding = bindings[i];
	            var /** @type {?} */ name = this._extractPublicName(binding);
	            if (!names.has(name)) {
	                names.add(name);
	                reversedResult.push(binding);
	            }
	        }
	        return reversedResult.reverse();
	    };
	    /**
	     * @param {?} directive
	     * @param {?} inputs
	     * @param {?} outputs
	     * @param {?} host
	     * @param {?} queries
	     * @param {?} directiveType
	     * @return {?}
	     */
	    DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, directiveType) {
	        var /** @type {?} */ mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);
	        var /** @type {?} */ mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);
	        var /** @type {?} */ mergedHost = directive.host ? __assign({}, directive.host, host) : host;
	        var /** @type {?} */ mergedQueries = directive.queries ? __assign({}, directive.queries, queries) : queries;
	        if (directive instanceof _angular_core.Component) {
	            return new _angular_core.Component({
	                selector: directive.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: directive.exportAs,
	                moduleId: directive.moduleId,
	                queries: mergedQueries,
	                changeDetection: directive.changeDetection,
	                providers: directive.providers,
	                viewProviders: directive.viewProviders,
	                entryComponents: directive.entryComponents,
	                template: directive.template,
	                templateUrl: directive.templateUrl,
	                styles: directive.styles,
	                styleUrls: directive.styleUrls,
	                encapsulation: directive.encapsulation,
	                animations: directive.animations,
	                interpolation: directive.interpolation
	            });
	        }
	        else {
	            return new _angular_core.Directive({
	                selector: directive.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: directive.exportAs,
	                queries: mergedQueries,
	                providers: directive.providers
	            });
	        }
	    };
	    return DirectiveResolver;
	}());
	DirectiveResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	DirectiveResolver.ctorParameters = function () { return [
	    { type: _angular_core.ɵReflectorReader, },
	]; };
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function isDirectiveMetadata(type) {
	    return type instanceof _angular_core.Directive;
	}
	/**
	 * @template T
	 * @param {?} arr
	 * @param {?} condition
	 * @return {?}
	 */
	function findLast(arr, condition) {
	    for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
	        if (condition(arr[i])) {
	            return arr[i];
	        }
	    }
	    return null;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
	var NG_FACTORY = /\.ngfactory\./;
	/**
	 * @param {?} filePath
	 * @return {?}
	 */
	function ngfactoryFilePath(filePath) {
	    var /** @type {?} */ urlWithSuffix = splitTypescriptSuffix(filePath);
	    return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
	}
	/**
	 * @param {?} filePath
	 * @return {?}
	 */
	function stripNgFactory(filePath) {
	    return filePath.replace(NG_FACTORY, '.');
	}
	/**
	 * @param {?} filePath
	 * @return {?}
	 */
	function isNgFactoryFile(filePath) {
	    return NG_FACTORY.test(filePath);
	}
	/**
	 * @param {?} path
	 * @return {?}
	 */
	function splitTypescriptSuffix(path) {
	    if (path.endsWith('.d.ts')) {
	        return [path.slice(0, -5), '.ts'];
	    }
	    var /** @type {?} */ lastDot = path.lastIndexOf('.');
	    if (lastDot !== -1) {
	        return [path.substring(0, lastDot), path.substring(lastDot)];
	    }
	    return [path, ''];
	}
	/**
	 * @param {?} fileName
	 * @return {?}
	 */
	function summaryFileName(fileName) {
	    var /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');
	    return fileNameWithoutSuffix + ".ngsummary.json";
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} hook
	 * @param {?} token
	 * @return {?}
	 */
	function hasLifecycleHook(hook, token) {
	    return _angular_core.ɵreflector.hasLifecycleHook(token, getHookName(hook));
	}
	/**
	 * @param {?} hook
	 * @return {?}
	 */
	function getHookName(hook) {
	    switch (hook) {
	        case _angular_core.ɵLifecycleHooks.OnInit:
	            return 'ngOnInit';
	        case _angular_core.ɵLifecycleHooks.OnDestroy:
	            return 'ngOnDestroy';
	        case _angular_core.ɵLifecycleHooks.DoCheck:
	            return 'ngDoCheck';
	        case _angular_core.ɵLifecycleHooks.OnChanges:
	            return 'ngOnChanges';
	        case _angular_core.ɵLifecycleHooks.AfterContentInit:
	            return 'ngAfterContentInit';
	        case _angular_core.ɵLifecycleHooks.AfterContentChecked:
	            return 'ngAfterContentChecked';
	        case _angular_core.ɵLifecycleHooks.AfterViewInit:
	            return 'ngAfterViewInit';
	        case _angular_core.ɵLifecycleHooks.AfterViewChecked:
	            return 'ngAfterViewChecked';
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function _isNgModuleMetadata(obj) {
	    return obj instanceof _angular_core.NgModule;
	}
	/**
	 * Resolves types to {\@link NgModule}.
	 */
	var NgModuleResolver = (function () {
	    /**
	     * @param {?=} _reflector
	     */
	    function NgModuleResolver(_reflector) {
	        if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }
	        this._reflector = _reflector;
	    }
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    NgModuleResolver.prototype.isNgModule = function (type) { return this._reflector.annotations(type).some(_isNgModuleMetadata); };
	    /**
	     * @param {?} type
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var /** @type {?} */ ngModuleMeta = findLast(this._reflector.annotations(type), _isNgModuleMetadata);
	        if (ngModuleMeta) {
	            return ngModuleMeta;
	        }
	        else {
	            if (throwIfNotFound) {
	                throw new Error("No NgModule metadata found for '" + _angular_core.ɵstringify(type) + "'.");
	            }
	            return null;
	        }
	    };
	    return NgModuleResolver;
	}());
	NgModuleResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	NgModuleResolver.ctorParameters = function () { return [
	    { type: _angular_core.ɵReflectorReader, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function _isPipeMetadata(type) {
	    return type instanceof _angular_core.Pipe;
	}
	/**
	 * Resolve a `Type` for {\@link Pipe}.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {\@link Compiler}
	 */
	var PipeResolver = (function () {
	    /**
	     * @param {?=} _reflector
	     */
	    function PipeResolver(_reflector) {
	        if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }
	        this._reflector = _reflector;
	    }
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    PipeResolver.prototype.isPipe = function (type) {
	        var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	        return typeMetadata && typeMetadata.some(_isPipeMetadata);
	    };
	    /**
	     * Return {\@link Pipe} for a given `Type`.
	     * @param {?} type
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var /** @type {?} */ metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	        if (metas) {
	            var /** @type {?} */ annotation = findLast(metas, _isPipeMetadata);
	            if (annotation) {
	                return annotation;
	            }
	        }
	        if (throwIfNotFound) {
	            throw new Error("No Pipe decorator found on " + _angular_core.ɵstringify(type));
	        }
	        return null;
	    };
	    return PipeResolver;
	}());
	PipeResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	PipeResolver.ctorParameters = function () { return [
	    { type: _angular_core.ɵReflectorReader, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SummaryResolver = (function () {
	    function SummaryResolver() {
	    }
	    /**
	     * @param {?} fileName
	     * @return {?}
	     */
	    SummaryResolver.prototype.isLibraryFile = function (fileName) { return false; };
	    
	    /**
	     * @param {?} fileName
	     * @return {?}
	     */
	    SummaryResolver.prototype.getLibraryFileName = function (fileName) { return null; };
	    /**
	     * @param {?} reference
	     * @return {?}
	     */
	    SummaryResolver.prototype.resolveSummary = function (reference) { return null; };
	    
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    SummaryResolver.prototype.getSymbolsOf = function (filePath) { return []; };
	    /**
	     * @param {?} reference
	     * @return {?}
	     */
	    SummaryResolver.prototype.getImportAs = function (reference) { return reference; };
	    return SummaryResolver;
	}());
	SummaryResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	SummaryResolver.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ERROR_COLLECTOR_TOKEN = new _angular_core.InjectionToken('ErrorCollector');
	var CompileMetadataResolver = (function () {
	    /**
	     * @param {?} _config
	     * @param {?} _ngModuleResolver
	     * @param {?} _directiveResolver
	     * @param {?} _pipeResolver
	     * @param {?} _summaryResolver
	     * @param {?} _schemaRegistry
	     * @param {?} _directiveNormalizer
	     * @param {?} _console
	     * @param {?} _staticSymbolCache
	     * @param {?=} _reflector
	     * @param {?=} _errorCollector
	     */
	    function CompileMetadataResolver(_config, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {
	        if (_reflector === void 0) { _reflector = _angular_core.ɵreflector; }
	        this._config = _config;
	        this._ngModuleResolver = _ngModuleResolver;
	        this._directiveResolver = _directiveResolver;
	        this._pipeResolver = _pipeResolver;
	        this._summaryResolver = _summaryResolver;
	        this._schemaRegistry = _schemaRegistry;
	        this._directiveNormalizer = _directiveNormalizer;
	        this._console = _console;
	        this._staticSymbolCache = _staticSymbolCache;
	        this._reflector = _reflector;
	        this._errorCollector = _errorCollector;
	        this._nonNormalizedDirectiveCache = new Map();
	        this._directiveCache = new Map();
	        this._summaryCache = new Map();
	        this._pipeCache = new Map();
	        this._ngModuleCache = new Map();
	        this._ngModuleOfTypes = new Map();
	    }
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.clearCacheFor = function (type) {
	        var /** @type {?} */ dirMeta = this._directiveCache.get(type);
	        this._directiveCache.delete(type);
	        this._nonNormalizedDirectiveCache.delete(type);
	        this._summaryCache.delete(type);
	        this._pipeCache.delete(type);
	        this._ngModuleOfTypes.delete(type);
	        // Clear all of the NgModule as they contain transitive information!
	        this._ngModuleCache.clear();
	        if (dirMeta) {
	            this._directiveNormalizer.clearCacheFor(dirMeta);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.clearCache = function () {
	        this._directiveCache.clear();
	        this._nonNormalizedDirectiveCache.clear();
	        this._summaryCache.clear();
	        this._pipeCache.clear();
	        this._ngModuleCache.clear();
	        this._ngModuleOfTypes.clear();
	        this._directiveNormalizer.clearCache();
	    };
	    /**
	     * @param {?} baseType
	     * @param {?} name
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._createProxyClass = function (baseType, name) {
	        var /** @type {?} */ delegate = null;
	        var /** @type {?} */ proxyClass = (function () {
	            if (!delegate) {
	                throw new Error("Illegal state: Class " + name + " for type " + _angular_core.ɵstringify(baseType) + " is not compiled yet!");
	            }
	            return delegate.apply(this, arguments);
	        });
	        proxyClass.setDelegate = function (d) {
	            delegate = d;
	            ((proxyClass)).prototype = d.prototype;
	        };
	        // Make stringify work correctly
	        ((proxyClass)).overriddenName = name;
	        return proxyClass;
	    };
	    /**
	     * @param {?} dirType
	     * @param {?} name
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getGeneratedClass = function (dirType, name) {
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);
	        }
	        else {
	            return this._createProxyClass(dirType, name);
	        }
	    };
	    /**
	     * @param {?} dirType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getComponentViewClass = function (dirType) {
	        return this.getGeneratedClass(dirType, viewClassName(dirType, 0));
	    };
	    /**
	     * @param {?} dirType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getHostComponentViewClass = function (dirType) {
	        return this.getGeneratedClass(dirType, hostViewClassName(dirType));
	    };
	    /**
	     * @param {?} dirType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getHostComponentType = function (dirType) {
	        var /** @type {?} */ name = identifierName({ reference: dirType }) + "_Host";
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(dirType.filePath, name);
	        }
	        else {
	            var /** @type {?} */ HostClass = (function HostClass() { });
	            HostClass.overriddenName = name;
	            return HostClass;
	        }
	    };
	    /**
	     * @param {?} dirType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getRendererType = function (dirType) {
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));
	        }
	        else {
	            // returning an object as proxy,
	            // that we fill later during runtime compilation.
	            return ({});
	        }
	    };
	    /**
	     * @param {?} selector
	     * @param {?} dirType
	     * @param {?} inputs
	     * @param {?} outputs
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getComponentFactory = function (selector, dirType, inputs, outputs) {
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));
	        }
	        else {
	            var /** @type {?} */ hostView = this.getHostComponentViewClass(dirType);
	            // Note: ngContentSelectors will be filled later once the template is
	            // loaded.
	            return _angular_core.ɵccf(selector, dirType, /** @type {?} */ (hostView), inputs, outputs, []);
	        }
	    };
	    /**
	     * @param {?} factory
	     * @param {?} ngContentSelectors
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.initComponentFactory = function (factory, ngContentSelectors) {
	        if (!(factory instanceof StaticSymbol)) {
	            (_a = factory.ngContentSelectors).push.apply(_a, ngContentSelectors);
	        }
	        var _a;
	    };
	    /**
	     * @param {?} type
	     * @param {?} kind
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._loadSummary = function (type, kind) {
	        var /** @type {?} */ typeSummary = this._summaryCache.get(type);
	        if (!typeSummary) {
	            var /** @type {?} */ summary = this._summaryResolver.resolveSummary(type);
	            typeSummary = summary ? summary.type : null;
	            this._summaryCache.set(type, typeSummary || null);
	        }
	        return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
	    };
	    /**
	     * @param {?} ngModuleType
	     * @param {?} directiveType
	     * @param {?} isSync
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._loadDirectiveMetadata = function (ngModuleType, directiveType, isSync) {
	        var _this = this;
	        if (this._directiveCache.has(directiveType)) {
	            return null;
	        }
	        directiveType = _angular_core.resolveForwardRef(directiveType);
	        var _a = ((this.getNonNormalizedDirectiveMetadata(directiveType))), annotation = _a.annotation, metadata = _a.metadata;
	        var /** @type {?} */ createDirectiveMetadata = function (templateMetadata) {
	            var /** @type {?} */ normalizedDirMeta = new CompileDirectiveMetadata({
	                isHost: false,
	                type: metadata.type,
	                isComponent: metadata.isComponent,
	                selector: metadata.selector,
	                exportAs: metadata.exportAs,
	                changeDetection: metadata.changeDetection,
	                inputs: metadata.inputs,
	                outputs: metadata.outputs,
	                hostListeners: metadata.hostListeners,
	                hostProperties: metadata.hostProperties,
	                hostAttributes: metadata.hostAttributes,
	                providers: metadata.providers,
	                viewProviders: metadata.viewProviders,
	                queries: metadata.queries,
	                viewQueries: metadata.viewQueries,
	                entryComponents: metadata.entryComponents,
	                componentViewType: metadata.componentViewType,
	                rendererType: metadata.rendererType,
	                componentFactory: metadata.componentFactory,
	                template: templateMetadata
	            });
	            if (templateMetadata) {
	                _this.initComponentFactory(/** @type {?} */ ((metadata.componentFactory)), templateMetadata.ngContentSelectors);
	            }
	            _this._directiveCache.set(directiveType, normalizedDirMeta);
	            _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());
	            return normalizedDirMeta;
	        };
	        if (metadata.isComponent) {
	            var /** @type {?} */ template = ((metadata.template));
	            var /** @type {?} */ templateMeta = this._directiveNormalizer.normalizeTemplate({
	                ngModuleType: ngModuleType,
	                componentType: directiveType,
	                moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation),
	                encapsulation: template.encapsulation,
	                template: template.template,
	                templateUrl: template.templateUrl,
	                styles: template.styles,
	                styleUrls: template.styleUrls,
	                animations: template.animations,
	                interpolation: template.interpolation
	            });
	            if (templateMeta.syncResult) {
	                createDirectiveMetadata(templateMeta.syncResult);
	                return null;
	            }
	            else {
	                if (isSync) {
	                    this._reportError(componentStillLoadingError(directiveType), directiveType);
	                    return null;
	                }
	                return ((templateMeta.asyncResult)).then(createDirectiveMetadata);
	            }
	        }
	        else {
	            // directive
	            createDirectiveMetadata(null);
	            return null;
	        }
	    };
	    /**
	     * @param {?} directiveType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {
	        var _this = this;
	        directiveType = _angular_core.resolveForwardRef(directiveType);
	        if (!directiveType) {
	            return null;
	        }
	        var /** @type {?} */ cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);
	        if (cacheEntry) {
	            return cacheEntry;
	        }
	        var /** @type {?} */ dirMeta = this._directiveResolver.resolve(directiveType, false);
	        if (!dirMeta) {
	            return null;
	        }
	        var /** @type {?} */ nonNormalizedTemplateMetadata = ((undefined));
	        if (dirMeta instanceof _angular_core.Component) {
	            // component
	            assertArrayOfStrings('styles', dirMeta.styles);
	            assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
	            assertInterpolationSymbols('interpolation', dirMeta.interpolation);
	            var /** @type {?} */ animations = dirMeta.animations;
	            nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
	                encapsulation: noUndefined(dirMeta.encapsulation),
	                template: noUndefined(dirMeta.template),
	                templateUrl: noUndefined(dirMeta.templateUrl),
	                styles: dirMeta.styles || [],
	                styleUrls: dirMeta.styleUrls || [],
	                animations: animations || [],
	                interpolation: noUndefined(dirMeta.interpolation),
	                isInline: !!dirMeta.template,
	                externalStylesheets: [],
	                ngContentSelectors: []
	            });
	        }
	        var /** @type {?} */ changeDetectionStrategy = ((null));
	        var /** @type {?} */ viewProviders = [];
	        var /** @type {?} */ entryComponentMetadata = [];
	        var /** @type {?} */ selector = dirMeta.selector;
	        if (dirMeta instanceof _angular_core.Component) {
	            // Component
	            changeDetectionStrategy = ((dirMeta.changeDetection));
	            if (dirMeta.viewProviders) {
	                viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringifyType(directiveType) + "\"", [], directiveType);
	            }
	            if (dirMeta.entryComponents) {
	                entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents)
	                    .map(function (type) { return ((_this._getEntryComponentMetadata(type))); })
	                    .concat(entryComponentMetadata);
	            }
	            if (!selector) {
	                selector = this._schemaRegistry.getDefaultComponentElementName();
	            }
	        }
	        else {
	            // Directive
	            if (!selector) {
	                this._reportError(syntaxError("Directive " + stringifyType(directiveType) + " has no selector, please add it!"), directiveType);
	                selector = 'error';
	            }
	        }
	        var /** @type {?} */ providers = [];
	        if (dirMeta.providers != null) {
	            providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringifyType(directiveType) + "\"", [], directiveType);
	        }
	        var /** @type {?} */ queries = [];
	        var /** @type {?} */ viewQueries = [];
	        if (dirMeta.queries != null) {
	            queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
	            viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
	        }
	        var /** @type {?} */ metadata = CompileDirectiveMetadata.create({
	            isHost: false,
	            selector: selector,
	            exportAs: noUndefined(dirMeta.exportAs),
	            isComponent: !!nonNormalizedTemplateMetadata,
	            type: this._getTypeMetadata(directiveType),
	            template: nonNormalizedTemplateMetadata,
	            changeDetection: changeDetectionStrategy,
	            inputs: dirMeta.inputs || [],
	            outputs: dirMeta.outputs || [],
	            host: dirMeta.host || {},
	            providers: providers || [],
	            viewProviders: viewProviders || [],
	            queries: queries || [],
	            viewQueries: viewQueries || [],
	            entryComponents: entryComponentMetadata,
	            componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :
	                null,
	            rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,
	            componentFactory: null
	        });
	        if (nonNormalizedTemplateMetadata) {
	            metadata.componentFactory =
	                this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);
	        }
	        cacheEntry = { metadata: metadata, annotation: dirMeta };
	        this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);
	        return cacheEntry;
	    };
	    /**
	     * Gets the metadata for the given directive.
	     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
	     * @param {?} directiveType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
	        var /** @type {?} */ dirMeta = ((this._directiveCache.get(directiveType)));
	        if (!dirMeta) {
	            this._reportError(syntaxError("Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive " + stringifyType(directiveType) + "."), directiveType);
	        }
	        return dirMeta;
	    };
	    /**
	     * @param {?} dirType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {
	        var /** @type {?} */ dirSummary = (this._loadSummary(dirType, CompileSummaryKind.Directive));
	        if (!dirSummary) {
	            this._reportError(syntaxError("Illegal state: Could not load the summary for directive " + stringifyType(dirType) + "."), dirType);
	        }
	        return dirSummary;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.isDirective = function (type) { return this._directiveResolver.isDirective(type); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.isPipe = function (type) { return this._pipeResolver.isPipe(type); };
	    /**
	     * @param {?} moduleType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType) {
	        var /** @type {?} */ moduleSummary = (this._loadSummary(moduleType, CompileSummaryKind.NgModule));
	        if (!moduleSummary) {
	            var /** @type {?} */ moduleMeta = this.getNgModuleMetadata(moduleType, false);
	            moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;
	            if (moduleSummary) {
	                this._summaryCache.set(moduleType, moduleSummary);
	            }
	        }
	        return moduleSummary;
	    };
	    /**
	     * Loads the declared directives and pipes of an NgModule.
	     * @param {?} moduleType
	     * @param {?} isSync
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) {
	        var _this = this;
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var /** @type {?} */ ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
	        var /** @type {?} */ loading = [];
	        if (ngModule) {
	            ngModule.declaredDirectives.forEach(function (id) {
	                var /** @type {?} */ promise = _this._loadDirectiveMetadata(moduleType, id.reference, isSync);
	                if (promise) {
	                    loading.push(promise);
	                }
	            });
	            ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference); });
	        }
	        return Promise.all(loading);
	    };
	    /**
	     * @param {?} moduleType
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) {
	        var _this = this;
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        moduleType = _angular_core.resolveForwardRef(moduleType);
	        var /** @type {?} */ compileMeta = this._ngModuleCache.get(moduleType);
	        if (compileMeta) {
	            return compileMeta;
	        }
	        var /** @type {?} */ meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
	        if (!meta) {
	            return null;
	        }
	        var /** @type {?} */ declaredDirectives = [];
	        var /** @type {?} */ exportedNonModuleIdentifiers = [];
	        var /** @type {?} */ declaredPipes = [];
	        var /** @type {?} */ importedModules = [];
	        var /** @type {?} */ exportedModules = [];
	        var /** @type {?} */ providers = [];
	        var /** @type {?} */ entryComponents = [];
	        var /** @type {?} */ bootstrapComponents = [];
	        var /** @type {?} */ schemas = [];
	        if (meta.imports) {
	            flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
	                var /** @type {?} */ importedModuleType = ((undefined));
	                if (isValidType(importedType)) {
	                    importedModuleType = importedType;
	                }
	                else if (importedType && importedType.ngModule) {
	                    var /** @type {?} */ moduleWithProviders = importedType;
	                    importedModuleType = moduleWithProviders.ngModule;
	                    if (moduleWithProviders.providers) {
	                        providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringifyType(importedModuleType) + "'", [], importedType));
	                    }
	                }
	                if (importedModuleType) {
	                    if (_this._checkSelfImport(moduleType, importedModuleType))
	                        return;
	                    var /** @type {?} */ importedModuleSummary = _this.getNgModuleSummary(importedModuleType);
	                    if (!importedModuleSummary) {
	                        _this._reportError(syntaxError("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'. Please add a @NgModule annotation."), moduleType);
	                        return;
	                    }
	                    importedModules.push(importedModuleSummary);
	                }
	                else {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	            });
	        }
	        if (meta.exports) {
	            flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
	                if (!isValidType(exportedType)) {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(exportedType) + "' exported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	                var /** @type {?} */ exportedModuleSummary = _this.getNgModuleSummary(exportedType);
	                if (exportedModuleSummary) {
	                    exportedModules.push(exportedModuleSummary);
	                }
	                else {
	                    exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));
	                }
	            });
	        }
	        // Note: This will be modified later, so we rely on
	        // getting a new instance every time!
	        var /** @type {?} */ transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
	        if (meta.declarations) {
	            flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
	                if (!isValidType(declaredType)) {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	                var /** @type {?} */ declaredIdentifier = _this._getIdentifierMetadata(declaredType);
	                if (_this._directiveResolver.isDirective(declaredType)) {
	                    transitiveModule.addDirective(declaredIdentifier);
	                    declaredDirectives.push(declaredIdentifier);
	                    _this._addTypeToModule(declaredType, moduleType);
	                }
	                else if (_this._pipeResolver.isPipe(declaredType)) {
	                    transitiveModule.addPipe(declaredIdentifier);
	                    transitiveModule.pipes.push(declaredIdentifier);
	                    declaredPipes.push(declaredIdentifier);
	                    _this._addTypeToModule(declaredType, moduleType);
	                }
	                else {
	                    _this._reportError(syntaxError("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'. Please add a @Pipe/@Directive/@Component annotation."), moduleType);
	                    return;
	                }
	            });
	        }
	        var /** @type {?} */ exportedDirectives = [];
	        var /** @type {?} */ exportedPipes = [];
	        exportedNonModuleIdentifiers.forEach(function (exportedId) {
	            if (transitiveModule.directivesSet.has(exportedId.reference)) {
	                exportedDirectives.push(exportedId);
	                transitiveModule.addExportedDirective(exportedId);
	            }
	            else if (transitiveModule.pipesSet.has(exportedId.reference)) {
	                exportedPipes.push(exportedId);
	                transitiveModule.addExportedPipe(exportedId);
	            }
	            else {
	                _this._reportError(syntaxError("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringifyType(exportedId.reference) + " from " + stringifyType(moduleType) + " as it was neither declared nor imported!"), moduleType);
	                return;
	            }
	        });
	        // The providers of the module have to go last
	        // so that they overwrite any other provider we already added.
	        if (meta.providers) {
	            providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringifyType(moduleType) + "'", [], moduleType));
	        }
	        if (meta.entryComponents) {
	            entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents)
	                .map(function (type) { return ((_this._getEntryComponentMetadata(type))); }));
	        }
	        if (meta.bootstrap) {
	            flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {
	                if (!isValidType(type)) {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(type) + "' used in the bootstrap property of module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	                bootstrapComponents.push(_this._getIdentifierMetadata(type));
	            });
	        }
	        entryComponents.push.apply(entryComponents, bootstrapComponents.map(function (type) { return ((_this._getEntryComponentMetadata(type.reference))); }));
	        if (meta.schemas) {
	            schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
	        }
	        compileMeta = new CompileNgModuleMetadata({
	            type: this._getTypeMetadata(moduleType),
	            providers: providers,
	            entryComponents: entryComponents,
	            bootstrapComponents: bootstrapComponents,
	            schemas: schemas,
	            declaredDirectives: declaredDirectives,
	            exportedDirectives: exportedDirectives,
	            declaredPipes: declaredPipes,
	            exportedPipes: exportedPipes,
	            importedModules: importedModules,
	            exportedModules: exportedModules,
	            transitiveModule: transitiveModule,
	            id: meta.id || null,
	        });
	        entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id); });
	        providers.forEach(function (provider) { return transitiveModule.addProvider(provider, /** @type {?} */ ((compileMeta)).type); });
	        transitiveModule.addModule(compileMeta.type);
	        this._ngModuleCache.set(moduleType, compileMeta);
	        return compileMeta;
	    };
	    /**
	     * @param {?} moduleType
	     * @param {?} importedModuleType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._checkSelfImport = function (moduleType, importedModuleType) {
	        if (moduleType === importedModuleType) {
	            this._reportError(syntaxError("'" + stringifyType(moduleType) + "' module can't import itself"), moduleType);
	            return true;
	        }
	        return false;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {
	        if (this._directiveResolver.isDirective(type)) {
	            return 'directive';
	        }
	        if (this._pipeResolver.isPipe(type)) {
	            return 'pipe';
	        }
	        if (this._ngModuleResolver.isNgModule(type)) {
	            return 'module';
	        }
	        if (((type)).provide) {
	            return 'provider';
	        }
	        return 'value';
	    };
	    /**
	     * @param {?} type
	     * @param {?} moduleType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
	        var /** @type {?} */ oldModule = this._ngModuleOfTypes.get(type);
	        if (oldModule && oldModule !== moduleType) {
	            this._reportError(syntaxError("Type " + stringifyType(type) + " is part of the declarations of 2 modules: " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + "! " +
	                ("Please consider moving " + stringifyType(type) + " to a higher module that imports " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ". ") +
	                ("You can also create a new NgModule that exports and includes " + stringifyType(type) + " then import that NgModule in " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ".")), moduleType);
	            return;
	        }
	        this._ngModuleOfTypes.set(type, moduleType);
	    };
	    /**
	     * @param {?} importedModules
	     * @param {?} exportedModules
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
	        // collect `providers` / `entryComponents` from all imported and all exported modules
	        var /** @type {?} */ result = new TransitiveCompileNgModuleMetadata();
	        var /** @type {?} */ modulesByToken = new Map();
	        importedModules.concat(exportedModules).forEach(function (modSummary) {
	            modSummary.modules.forEach(function (mod) { return result.addModule(mod); });
	            modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp); });
	            var /** @type {?} */ addedTokens = new Set();
	            modSummary.providers.forEach(function (entry) {
	                var /** @type {?} */ tokenRef = tokenReference(entry.provider.token);
	                var /** @type {?} */ prevModules = modulesByToken.get(tokenRef);
	                if (!prevModules) {
	                    prevModules = new Set();
	                    modulesByToken.set(tokenRef, prevModules);
	                }
	                var /** @type {?} */ moduleRef = entry.module.reference;
	                // Note: the providers of one module may still contain multiple providers
	                // per token (e.g. for multi providers), and we need to preserve these.
	                if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
	                    prevModules.add(moduleRef);
	                    addedTokens.add(tokenRef);
	                    result.addProvider(entry.provider, entry.module);
	                }
	            });
	        });
	        exportedModules.forEach(function (modSummary) {
	            modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id); });
	            modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id); });
	        });
	        importedModules.forEach(function (modSummary) {
	            modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id); });
	            modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id); });
	        });
	        return result;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) {
	        type = _angular_core.resolveForwardRef(type);
	        return { reference: type };
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.isInjectable = function (type) {
	        var /** @type {?} */ annotations = this._reflector.annotations(type);
	        // Note: We need an exact check here as @Component / @Directive / ... inherit
	        // from @CompilerInjectable!
	        return annotations.some(function (ann) { return ann.constructor === _angular_core.Injectable; });
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getInjectableSummary = function (type) {
	        return {
	            summaryKind: CompileSummaryKind.Injectable,
	            type: this._getTypeMetadata(type, null, false)
	        };
	    };
	    /**
	     * @param {?} type
	     * @param {?=} dependencies
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getInjectableMetadata = function (type, dependencies) {
	        if (dependencies === void 0) { dependencies = null; }
	        var /** @type {?} */ typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);
	        if (typeSummary) {
	            return typeSummary.type;
	        }
	        return this._getTypeMetadata(type, dependencies);
	    };
	    /**
	     * @param {?} type
	     * @param {?=} dependencies
	     * @param {?=} throwOnUnknownDeps
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies, throwOnUnknownDeps) {
	        if (dependencies === void 0) { dependencies = null; }
	        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }
	        var /** @type {?} */ identifier = this._getIdentifierMetadata(type);
	        return {
	            reference: identifier.reference,
	            diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),
	            lifecycleHooks: _angular_core.ɵLIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(hook, identifier.reference); }),
	        };
	    };
	    /**
	     * @param {?} factory
	     * @param {?=} dependencies
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) {
	        if (dependencies === void 0) { dependencies = null; }
	        factory = _angular_core.resolveForwardRef(factory);
	        return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };
	    };
	    /**
	     * Gets the metadata for the given pipe.
	     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
	     * @param {?} pipeType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
	        var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);
	        if (!pipeMeta) {
	            this._reportError(syntaxError("Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe " + stringifyType(pipeType) + "."), pipeType);
	        }
	        return pipeMeta || null;
	    };
	    /**
	     * @param {?} pipeType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {
	        var /** @type {?} */ pipeSummary = (this._loadSummary(pipeType, CompileSummaryKind.Pipe));
	        if (!pipeSummary) {
	            this._reportError(syntaxError("Illegal state: Could not load the summary for pipe " + stringifyType(pipeType) + "."), pipeType);
	        }
	        return pipeSummary;
	    };
	    /**
	     * @param {?} pipeType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {
	        var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);
	        if (!pipeMeta) {
	            pipeMeta = this._loadPipeMetadata(pipeType);
	        }
	        return pipeMeta;
	    };
	    /**
	     * @param {?} pipeType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {
	        pipeType = _angular_core.resolveForwardRef(pipeType);
	        var /** @type {?} */ pipeAnnotation = ((this._pipeResolver.resolve(pipeType)));
	        var /** @type {?} */ pipeMeta = new CompilePipeMetadata({
	            type: this._getTypeMetadata(pipeType),
	            name: pipeAnnotation.name,
	            pure: !!pipeAnnotation.pure
	        });
	        this._pipeCache.set(pipeType, pipeMeta);
	        this._summaryCache.set(pipeType, pipeMeta.toSummary());
	        return pipeMeta;
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} dependencies
	     * @param {?=} throwOnUnknownDeps
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies, throwOnUnknownDeps) {
	        var _this = this;
	        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }
	        var /** @type {?} */ hasUnknownDeps = false;
	        var /** @type {?} */ params = dependencies || this._reflector.parameters(typeOrFunc) || [];
	        var /** @type {?} */ dependenciesMetadata = params.map(function (param) {
	            var /** @type {?} */ isAttribute = false;
	            var /** @type {?} */ isHost = false;
	            var /** @type {?} */ isSelf = false;
	            var /** @type {?} */ isSkipSelf = false;
	            var /** @type {?} */ isOptional = false;
	            var /** @type {?} */ token = null;
	            if (Array.isArray(param)) {
	                param.forEach(function (paramEntry) {
	                    if (paramEntry instanceof _angular_core.Host) {
	                        isHost = true;
	                    }
	                    else if (paramEntry instanceof _angular_core.Self) {
	                        isSelf = true;
	                    }
	                    else if (paramEntry instanceof _angular_core.SkipSelf) {
	                        isSkipSelf = true;
	                    }
	                    else if (paramEntry instanceof _angular_core.Optional) {
	                        isOptional = true;
	                    }
	                    else if (paramEntry instanceof _angular_core.Attribute) {
	                        isAttribute = true;
	                        token = paramEntry.attributeName;
	                    }
	                    else if (paramEntry instanceof _angular_core.Inject) {
	                        token = paramEntry.token;
	                    }
	                    else if (paramEntry instanceof _angular_core.InjectionToken) {
	                        token = paramEntry;
	                    }
	                    else if (isValidType(paramEntry) && token == null) {
	                        token = paramEntry;
	                    }
	                });
	            }
	            else {
	                token = param;
	            }
	            if (token == null) {
	                hasUnknownDeps = true;
	                return ((null));
	            }
	            return {
	                isAttribute: isAttribute,
	                isHost: isHost,
	                isSelf: isSelf,
	                isSkipSelf: isSkipSelf,
	                isOptional: isOptional,
	                token: _this._getTokenMetadata(token)
	            };
	        });
	        if (hasUnknownDeps) {
	            var /** @type {?} */ depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringifyType(dep.token) : '?'; }).join(', ');
	            var /** @type {?} */ message = "Can't resolve all parameters for " + stringifyType(typeOrFunc) + ": (" + depsTokens + ").";
	            if (throwOnUnknownDeps) {
	                this._reportError(syntaxError(message), typeOrFunc);
	            }
	            else {
	                this._console.warn("Warning: " + message + " This will become an error in Angular v5.x");
	            }
	        }
	        return dependenciesMetadata;
	    };
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getTokenMetadata = function (token) {
	        token = _angular_core.resolveForwardRef(token);
	        var /** @type {?} */ compileToken;
	        if (typeof token === 'string') {
	            compileToken = { value: token };
	        }
	        else {
	            compileToken = { identifier: { reference: token } };
	        }
	        return compileToken;
	    };
	    /**
	     * @param {?} providers
	     * @param {?} targetEntryComponents
	     * @param {?=} debugInfo
	     * @param {?=} compileProviders
	     * @param {?=} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) {
	        var _this = this;
	        if (compileProviders === void 0) { compileProviders = []; }
	        providers.forEach(function (provider, providerIdx) {
	            if (Array.isArray(provider)) {
	                _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
	            }
	            else {
	                provider = _angular_core.resolveForwardRef(provider);
	                var /** @type {?} */ providerMeta = ((undefined));
	                if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {
	                    _this._validateProvider(provider);
	                    providerMeta = new ProviderMeta(provider.provide, provider);
	                }
	                else if (isValidType(provider)) {
	                    providerMeta = new ProviderMeta(provider, { useClass: provider });
	                }
	                else if (provider === void 0) {
	                    _this._reportError(syntaxError("Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using 'barrel' index.ts files."));
	                    return;
	                }
	                else {
	                    var /** @type {?} */ providersInfo = ((providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
	                        if (seenProviderIdx < providerIdx) {
	                            soFar.push("" + stringifyType(seenProvider));
	                        }
	                        else if (seenProviderIdx == providerIdx) {
	                            soFar.push("?" + stringifyType(seenProvider) + "?");
	                        }
	                        else if (seenProviderIdx == providerIdx + 1) {
	                            soFar.push('...');
	                        }
	                        return soFar;
	                    }, [])))
	                        .join(', ');
	                    _this._reportError(syntaxError("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]"), type);
	                    return;
	                }
	                if (providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
	                    targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type));
	                }
	                else {
	                    compileProviders.push(_this.getProviderMetadata(providerMeta));
	                }
	            }
	        });
	        return compileProviders;
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._validateProvider = function (provider) {
	        if (provider.hasOwnProperty('useClass') && provider.useClass == null) {
	            this._reportError(syntaxError("Invalid provider for " + stringifyType(provider.provide) + ". useClass cannot be " + provider.useClass + ".\n           Usually it happens when:\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case."));
	        }
	    };
	    /**
	     * @param {?} provider
	     * @param {?=} type
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) {
	        var _this = this;
	        var /** @type {?} */ components = [];
	        var /** @type {?} */ collectedIdentifiers = [];
	        if (provider.useFactory || provider.useExisting || provider.useClass) {
	            this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type);
	            return [];
	        }
	        if (!provider.multi) {
	            this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type);
	            return [];
	        }
	        extractIdentifiers(provider.useValue, collectedIdentifiers);
	        collectedIdentifiers.forEach(function (identifier) {
	            var /** @type {?} */ entry = _this._getEntryComponentMetadata(identifier.reference, false);
	            if (entry) {
	                components.push(entry);
	            }
	        });
	        return components;
	    };
	    /**
	     * @param {?} dirType
	     * @param {?=} throwIfNotFound
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getEntryComponentMetadata = function (dirType, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var /** @type {?} */ dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);
	        if (dirMeta && dirMeta.metadata.isComponent) {
	            return { componentType: dirType, componentFactory: /** @type {?} */ ((dirMeta.metadata.componentFactory)) };
	        }
	        var /** @type {?} */ dirSummary = (this._loadSummary(dirType, CompileSummaryKind.Directive));
	        if (dirSummary && dirSummary.isComponent) {
	            return { componentType: dirType, componentFactory: /** @type {?} */ ((dirSummary.componentFactory)) };
	        }
	        if (throwIfNotFound) {
	            throw syntaxError(dirType.name + " cannot be used as an entry component.");
	        }
	        return null;
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
	        var /** @type {?} */ compileDeps = ((undefined));
	        var /** @type {?} */ compileTypeMetadata = ((null));
	        var /** @type {?} */ compileFactoryMetadata = ((null));
	        var /** @type {?} */ token = this._getTokenMetadata(provider.token);
	        if (provider.useClass) {
	            compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies);
	            compileDeps = compileTypeMetadata.diDeps;
	            if (provider.token === provider.useClass) {
	                // use the compileTypeMetadata as it contains information about lifecycleHooks...
	                token = { identifier: compileTypeMetadata };
	            }
	        }
	        else if (provider.useFactory) {
	            compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
	            compileDeps = compileFactoryMetadata.diDeps;
	        }
	        return {
	            token: token,
	            useClass: compileTypeMetadata,
	            useValue: provider.useValue,
	            useFactory: compileFactoryMetadata,
	            useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,
	            deps: compileDeps,
	            multi: provider.multi
	        };
	    };
	    /**
	     * @param {?} queries
	     * @param {?} isViewQuery
	     * @param {?} directiveType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {
	        var _this = this;
	        var /** @type {?} */ res = [];
	        Object.keys(queries).forEach(function (propertyName) {
	            var /** @type {?} */ query = queries[propertyName];
	            if (query.isViewQuery === isViewQuery) {
	                res.push(_this._getQueryMetadata(query, propertyName, directiveType));
	            }
	        });
	        return res;
	    };
	    /**
	     * @param {?} selector
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._queryVarBindings = function (selector) { return selector.split(/\s*,\s*/); };
	    /**
	     * @param {?} q
	     * @param {?} propertyName
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {
	        var _this = this;
	        var /** @type {?} */ selectors;
	        if (typeof q.selector === 'string') {
	            selectors =
	                this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });
	        }
	        else {
	            if (!q.selector) {
	                this._reportError(syntaxError("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringifyType(typeOrFunc) + "\" since the query selector wasn't defined."), typeOrFunc);
	                selectors = [];
	            }
	            else {
	                selectors = [this._getTokenMetadata(q.selector)];
	            }
	        }
	        return {
	            selectors: selectors,
	            first: q.first,
	            descendants: q.descendants, propertyName: propertyName,
	            read: q.read ? this._getTokenMetadata(q.read) : ((null))
	        };
	    };
	    /**
	     * @param {?} error
	     * @param {?=} type
	     * @param {?=} otherType
	     * @return {?}
	     */
	    CompileMetadataResolver.prototype._reportError = function (error, type, otherType) {
	        if (this._errorCollector) {
	            this._errorCollector(error, type);
	            if (otherType) {
	                this._errorCollector(error, otherType);
	            }
	        }
	        else {
	            throw error;
	        }
	    };
	    return CompileMetadataResolver;
	}());
	CompileMetadataResolver.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	CompileMetadataResolver.ctorParameters = function () { return [
	    { type: CompilerConfig, },
	    { type: NgModuleResolver, },
	    { type: DirectiveResolver, },
	    { type: PipeResolver, },
	    { type: SummaryResolver, },
	    { type: ElementSchemaRegistry, },
	    { type: DirectiveNormalizer, },
	    { type: _angular_core.ɵConsole, },
	    { type: StaticSymbolCache, decorators: [{ type: _angular_core.Optional },] },
	    { type: _angular_core.ɵReflectorReader, },
	    { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ERROR_COLLECTOR_TOKEN,] },] },
	]; };
	/**
	 * @param {?} tree
	 * @param {?=} out
	 * @return {?}
	 */
	function flattenArray(tree, out) {
	    if (out === void 0) { out = []; }
	    if (tree) {
	        for (var /** @type {?} */ i = 0; i < tree.length; i++) {
	            var /** @type {?} */ item = _angular_core.resolveForwardRef(tree[i]);
	            if (Array.isArray(item)) {
	                flattenArray(item, out);
	            }
	            else {
	                out.push(item);
	            }
	        }
	    }
	    return out;
	}
	/**
	 * @param {?} array
	 * @return {?}
	 */
	function dedupeArray(array) {
	    if (array) {
	        return Array.from(new Set(array));
	    }
	    return [];
	}
	/**
	 * @param {?} tree
	 * @return {?}
	 */
	function flattenAndDedupeArray(tree) {
	    return dedupeArray(flattenArray(tree));
	}
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function isValidType(value) {
	    return (value instanceof StaticSymbol) || (value instanceof _angular_core.Type);
	}
	/**
	 * @param {?} reflector
	 * @param {?} type
	 * @param {?} cmpMetadata
	 * @return {?}
	 */
	function componentModuleUrl(reflector, type, cmpMetadata) {
	    if (type instanceof StaticSymbol) {
	        return reflector.resourceUri(type);
	    }
	    var /** @type {?} */ moduleId = cmpMetadata.moduleId;
	    if (typeof moduleId === 'string') {
	        var /** @type {?} */ scheme = getUrlScheme(moduleId);
	        return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
	    }
	    else if (moduleId !== null && moduleId !== void 0) {
	        throw syntaxError("moduleId should be a string in \"" + stringifyType(type) + "\". See https://goo.gl/wIDDiL for more information.\n" +
	            "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
	    }
	    return ((reflector.importUri(type)));
	}
	/**
	 * @param {?} value
	 * @param {?} targetIdentifiers
	 * @return {?}
	 */
	function extractIdentifiers(value, targetIdentifiers) {
	    visitValue(value, new _CompileValueConverter(), targetIdentifiers);
	}
	var _CompileValueConverter = (function (_super) {
	    __extends(_CompileValueConverter, _super);
	    function _CompileValueConverter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} value
	     * @param {?} targetIdentifiers
	     * @return {?}
	     */
	    _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
	        targetIdentifiers.push({ reference: value });
	    };
	    return _CompileValueConverter;
	}(ValueTransformer));
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function stringifyType(type) {
	    if (type instanceof StaticSymbol) {
	        return type.name + " in " + type.filePath;
	    }
	    else {
	        return _angular_core.ɵstringify(type);
	    }
	}
	/**
	 * Indicates that a component is still being loaded in a synchronous compile.
	 * @param {?} compType
	 * @return {?}
	 */
	function componentStillLoadingError(compType) {
	    var /** @type {?} */ error = Error("Can't compile synchronously as " + _angular_core.ɵstringify(compType) + " is still being loaded!");
	    ((error))[_angular_core.ɵERROR_COMPONENT_TYPE] = compType;
	    return error;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TypeModifier = {};
	TypeModifier.Const = 0;
	TypeModifier[TypeModifier.Const] = "Const";
	/**
	 * @abstract
	 */
	var Type$1 = (function () {
	    /**
	     * @param {?=} modifiers
	     */
	    function Type$1(modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        this.modifiers = modifiers;
	        if (!modifiers) {
	            this.modifiers = [];
	        }
	    }
	    /**
	     * @abstract
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Type$1.prototype.visitType = function (visitor, context) { };
	    /**
	     * @param {?} modifier
	     * @return {?}
	     */
	    Type$1.prototype.hasModifier = function (modifier) { return ((this.modifiers)).indexOf(modifier) !== -1; };
	    return Type$1;
	}());
	var BuiltinTypeName = {};
	BuiltinTypeName.Dynamic = 0;
	BuiltinTypeName.Bool = 1;
	BuiltinTypeName.String = 2;
	BuiltinTypeName.Int = 3;
	BuiltinTypeName.Number = 4;
	BuiltinTypeName.Function = 5;
	BuiltinTypeName.Inferred = 6;
	BuiltinTypeName[BuiltinTypeName.Dynamic] = "Dynamic";
	BuiltinTypeName[BuiltinTypeName.Bool] = "Bool";
	BuiltinTypeName[BuiltinTypeName.String] = "String";
	BuiltinTypeName[BuiltinTypeName.Int] = "Int";
	BuiltinTypeName[BuiltinTypeName.Number] = "Number";
	BuiltinTypeName[BuiltinTypeName.Function] = "Function";
	BuiltinTypeName[BuiltinTypeName.Inferred] = "Inferred";
	var BuiltinType = (function (_super) {
	    __extends(BuiltinType, _super);
	    /**
	     * @param {?} name
	     * @param {?=} modifiers
	     */
	    function BuiltinType(name, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.name = name;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BuiltinType.prototype.visitType = function (visitor, context) {
	        return visitor.visitBuiltintType(this, context);
	    };
	    return BuiltinType;
	}(Type$1));
	var ExpressionType = (function (_super) {
	    __extends(ExpressionType, _super);
	    /**
	     * @param {?} value
	     * @param {?=} modifiers
	     */
	    function ExpressionType(value, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ExpressionType.prototype.visitType = function (visitor, context) {
	        return visitor.visitExpressionType(this, context);
	    };
	    return ExpressionType;
	}(Type$1));
	var ArrayType = (function (_super) {
	    __extends(ArrayType, _super);
	    /**
	     * @param {?} of
	     * @param {?=} modifiers
	     */
	    function ArrayType(of, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.of = of;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ArrayType.prototype.visitType = function (visitor, context) {
	        return visitor.visitArrayType(this, context);
	    };
	    return ArrayType;
	}(Type$1));
	var MapType = (function (_super) {
	    __extends(MapType, _super);
	    /**
	     * @param {?} valueType
	     * @param {?=} modifiers
	     */
	    function MapType(valueType, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.valueType = valueType || null;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context); };
	    return MapType;
	}(Type$1));
	var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
	var INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
	var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
	var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
	var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
	var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
	var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
	var BinaryOperator = {};
	BinaryOperator.Equals = 0;
	BinaryOperator.NotEquals = 1;
	BinaryOperator.Identical = 2;
	BinaryOperator.NotIdentical = 3;
	BinaryOperator.Minus = 4;
	BinaryOperator.Plus = 5;
	BinaryOperator.Divide = 6;
	BinaryOperator.Multiply = 7;
	BinaryOperator.Modulo = 8;
	BinaryOperator.And = 9;
	BinaryOperator.Or = 10;
	BinaryOperator.Lower = 11;
	BinaryOperator.LowerEquals = 12;
	BinaryOperator.Bigger = 13;
	BinaryOperator.BiggerEquals = 14;
	BinaryOperator[BinaryOperator.Equals] = "Equals";
	BinaryOperator[BinaryOperator.NotEquals] = "NotEquals";
	BinaryOperator[BinaryOperator.Identical] = "Identical";
	BinaryOperator[BinaryOperator.NotIdentical] = "NotIdentical";
	BinaryOperator[BinaryOperator.Minus] = "Minus";
	BinaryOperator[BinaryOperator.Plus] = "Plus";
	BinaryOperator[BinaryOperator.Divide] = "Divide";
	BinaryOperator[BinaryOperator.Multiply] = "Multiply";
	BinaryOperator[BinaryOperator.Modulo] = "Modulo";
	BinaryOperator[BinaryOperator.And] = "And";
	BinaryOperator[BinaryOperator.Or] = "Or";
	BinaryOperator[BinaryOperator.Lower] = "Lower";
	BinaryOperator[BinaryOperator.LowerEquals] = "LowerEquals";
	BinaryOperator[BinaryOperator.Bigger] = "Bigger";
	BinaryOperator[BinaryOperator.BiggerEquals] = "BiggerEquals";
	/**
	 * @abstract
	 */
	var Expression = (function () {
	    /**
	     * @param {?} type
	     * @param {?=} sourceSpan
	     */
	    function Expression(type, sourceSpan) {
	        this.type = type || null;
	        this.sourceSpan = sourceSpan || null;
	    }
	    /**
	     * @abstract
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Expression.prototype.visitExpression = function (visitor, context) { };
	    /**
	     * @param {?} name
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.prop = function (name, sourceSpan) {
	        return new ReadPropExpr(this, name, null, sourceSpan);
	    };
	    /**
	     * @param {?} index
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.key = function (index, type, sourceSpan) {
	        return new ReadKeyExpr(this, index, type, sourceSpan);
	    };
	    /**
	     * @param {?} name
	     * @param {?} params
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.callMethod = function (name, params, sourceSpan) {
	        return new InvokeMethodExpr(this, name, params, null, sourceSpan);
	    };
	    /**
	     * @param {?} params
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.callFn = function (params, sourceSpan) {
	        return new InvokeFunctionExpr(this, params, null, sourceSpan);
	    };
	    /**
	     * @param {?} params
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.instantiate = function (params, type, sourceSpan) {
	        return new InstantiateExpr(this, params, type, sourceSpan);
	    };
	    /**
	     * @param {?} trueCase
	     * @param {?=} falseCase
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.conditional = function (trueCase, falseCase, sourceSpan) {
	        if (falseCase === void 0) { falseCase = null; }
	        return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.equals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.notEquals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.identical = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.notIdentical = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.minus = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.plus = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.divide = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.multiply = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.modulo = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.and = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.or = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.lower = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.lowerEquals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.bigger = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?} rhs
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.biggerEquals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
	    };
	    /**
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.isBlank = function (sourceSpan) {
	        // Note: We use equals by purpose here to compare to null and undefined in JS.
	        // We use the typed null to allow strictNullChecks to narrow types.
	        return this.equals(TYPED_NULL_EXPR, sourceSpan);
	    };
	    /**
	     * @param {?} type
	     * @param {?=} sourceSpan
	     * @return {?}
	     */
	    Expression.prototype.cast = function (type, sourceSpan) {
	        return new CastExpr(this, type, sourceSpan);
	    };
	    /**
	     * @return {?}
	     */
	    Expression.prototype.toStmt = function () { return new ExpressionStatement(this, null); };
	    return Expression;
	}());
	var BuiltinVar = {};
	BuiltinVar.This = 0;
	BuiltinVar.Super = 1;
	BuiltinVar.CatchError = 2;
	BuiltinVar.CatchStack = 3;
	BuiltinVar[BuiltinVar.This] = "This";
	BuiltinVar[BuiltinVar.Super] = "Super";
	BuiltinVar[BuiltinVar.CatchError] = "CatchError";
	BuiltinVar[BuiltinVar.CatchStack] = "CatchStack";
	var ReadVarExpr = (function (_super) {
	    __extends(ReadVarExpr, _super);
	    /**
	     * @param {?} name
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function ReadVarExpr(name, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        if (typeof name === 'string') {
	            _this.name = name;
	            _this.builtin = null;
	        }
	        else {
	            _this.name = null;
	            _this.builtin = name;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ReadVarExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadVarExpr(this, context);
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    ReadVarExpr.prototype.set = function (value) {
	        if (!this.name) {
	            throw new Error("Built in variable " + this.builtin + " can not be assigned to.");
	        }
	        return new WriteVarExpr(this.name, value, null, this.sourceSpan);
	    };
	    return ReadVarExpr;
	}(Expression));
	var WriteVarExpr = (function (_super) {
	    __extends(WriteVarExpr, _super);
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function WriteVarExpr(name, value, type, sourceSpan) {
	        var _this = _super.call(this, type || value.type, sourceSpan) || this;
	        _this.name = name;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    WriteVarExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWriteVarExpr(this, context);
	    };
	    /**
	     * @param {?=} type
	     * @param {?=} modifiers
	     * @return {?}
	     */
	    WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
	        return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
	    };
	    return WriteVarExpr;
	}(Expression));
	var WriteKeyExpr = (function (_super) {
	    __extends(WriteKeyExpr, _super);
	    /**
	     * @param {?} receiver
	     * @param {?} index
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function WriteKeyExpr(receiver, index, value, type, sourceSpan) {
	        var _this = _super.call(this, type || value.type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.index = index;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWriteKeyExpr(this, context);
	    };
	    return WriteKeyExpr;
	}(Expression));
	var WritePropExpr = (function (_super) {
	    __extends(WritePropExpr, _super);
	    /**
	     * @param {?} receiver
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function WritePropExpr(receiver, name, value, type, sourceSpan) {
	        var _this = _super.call(this, type || value.type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    WritePropExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWritePropExpr(this, context);
	    };
	    return WritePropExpr;
	}(Expression));
	var BuiltinMethod = {};
	BuiltinMethod.ConcatArray = 0;
	BuiltinMethod.SubscribeObservable = 1;
	BuiltinMethod.Bind = 2;
	BuiltinMethod[BuiltinMethod.ConcatArray] = "ConcatArray";
	BuiltinMethod[BuiltinMethod.SubscribeObservable] = "SubscribeObservable";
	BuiltinMethod[BuiltinMethod.Bind] = "Bind";
	var InvokeMethodExpr = (function (_super) {
	    __extends(InvokeMethodExpr, _super);
	    /**
	     * @param {?} receiver
	     * @param {?} method
	     * @param {?} args
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function InvokeMethodExpr(receiver, method, args, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.args = args;
	        if (typeof method === 'string') {
	            _this.name = method;
	            _this.builtin = null;
	        }
	        else {
	            _this.name = null;
	            _this.builtin = method;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInvokeMethodExpr(this, context);
	    };
	    return InvokeMethodExpr;
	}(Expression));
	var InvokeFunctionExpr = (function (_super) {
	    __extends(InvokeFunctionExpr, _super);
	    /**
	     * @param {?} fn
	     * @param {?} args
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function InvokeFunctionExpr(fn, args, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.fn = fn;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInvokeFunctionExpr(this, context);
	    };
	    return InvokeFunctionExpr;
	}(Expression));
	var InstantiateExpr = (function (_super) {
	    __extends(InstantiateExpr, _super);
	    /**
	     * @param {?} classExpr
	     * @param {?} args
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function InstantiateExpr(classExpr, args, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.classExpr = classExpr;
	        _this.args = args;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    InstantiateExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInstantiateExpr(this, context);
	    };
	    return InstantiateExpr;
	}(Expression));
	var LiteralExpr = (function (_super) {
	    __extends(LiteralExpr, _super);
	    /**
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function LiteralExpr(value, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    LiteralExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralExpr(this, context);
	    };
	    return LiteralExpr;
	}(Expression));
	var ExternalExpr = (function (_super) {
	    __extends(ExternalExpr, _super);
	    /**
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} typeParams
	     * @param {?=} sourceSpan
	     */
	    function ExternalExpr(value, type, typeParams, sourceSpan) {
	        if (typeParams === void 0) { typeParams = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.value = value;
	        _this.typeParams = typeParams;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ExternalExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitExternalExpr(this, context);
	    };
	    return ExternalExpr;
	}(Expression));
	var ConditionalExpr = (function (_super) {
	    __extends(ConditionalExpr, _super);
	    /**
	     * @param {?} condition
	     * @param {?} trueCase
	     * @param {?=} falseCase
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function ConditionalExpr(condition, trueCase, falseCase, type, sourceSpan) {
	        if (falseCase === void 0) { falseCase = null; }
	        var _this = _super.call(this, type || trueCase.type, sourceSpan) || this;
	        _this.condition = condition;
	        _this.falseCase = falseCase;
	        _this.trueCase = trueCase;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ConditionalExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitConditionalExpr(this, context);
	    };
	    return ConditionalExpr;
	}(Expression));
	var NotExpr = (function (_super) {
	    __extends(NotExpr, _super);
	    /**
	     * @param {?} condition
	     * @param {?=} sourceSpan
	     */
	    function NotExpr(condition, sourceSpan) {
	        var _this = _super.call(this, BOOL_TYPE, sourceSpan) || this;
	        _this.condition = condition;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    NotExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitNotExpr(this, context);
	    };
	    return NotExpr;
	}(Expression));
	var CastExpr = (function (_super) {
	    __extends(CastExpr, _super);
	    /**
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function CastExpr(value, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    CastExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitCastExpr(this, context);
	    };
	    return CastExpr;
	}(Expression));
	var FnParam = (function () {
	    /**
	     * @param {?} name
	     * @param {?=} type
	     */
	    function FnParam(name, type) {
	        if (type === void 0) { type = null; }
	        this.name = name;
	        this.type = type;
	    }
	    return FnParam;
	}());
	var FunctionExpr = (function (_super) {
	    __extends(FunctionExpr, _super);
	    /**
	     * @param {?} params
	     * @param {?} statements
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function FunctionExpr(params, statements, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.params = params;
	        _this.statements = statements;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    FunctionExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitFunctionExpr(this, context);
	    };
	    /**
	     * @param {?} name
	     * @param {?=} modifiers
	     * @return {?}
	     */
	    FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
	    };
	    return FunctionExpr;
	}(Expression));
	var BinaryOperatorExpr = (function (_super) {
	    __extends(BinaryOperatorExpr, _super);
	    /**
	     * @param {?} operator
	     * @param {?} lhs
	     * @param {?} rhs
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function BinaryOperatorExpr(operator, lhs, rhs, type, sourceSpan) {
	        var _this = _super.call(this, type || lhs.type, sourceSpan) || this;
	        _this.operator = operator;
	        _this.rhs = rhs;
	        _this.lhs = lhs;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitBinaryOperatorExpr(this, context);
	    };
	    return BinaryOperatorExpr;
	}(Expression));
	var ReadPropExpr = (function (_super) {
	    __extends(ReadPropExpr, _super);
	    /**
	     * @param {?} receiver
	     * @param {?} name
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function ReadPropExpr(receiver, name, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ReadPropExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadPropExpr(this, context);
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    ReadPropExpr.prototype.set = function (value) {
	        return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
	    };
	    return ReadPropExpr;
	}(Expression));
	var ReadKeyExpr = (function (_super) {
	    __extends(ReadKeyExpr, _super);
	    /**
	     * @param {?} receiver
	     * @param {?} index
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function ReadKeyExpr(receiver, index, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.index = index;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadKeyExpr(this, context);
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    ReadKeyExpr.prototype.set = function (value) {
	        return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
	    };
	    return ReadKeyExpr;
	}(Expression));
	var LiteralArrayExpr = (function (_super) {
	    __extends(LiteralArrayExpr, _super);
	    /**
	     * @param {?} entries
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function LiteralArrayExpr(entries, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.entries = entries;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralArrayExpr(this, context);
	    };
	    return LiteralArrayExpr;
	}(Expression));
	var LiteralMapEntry = (function () {
	    /**
	     * @param {?} key
	     * @param {?} value
	     * @param {?=} quoted
	     */
	    function LiteralMapEntry(key, value, quoted) {
	        if (quoted === void 0) { quoted = false; }
	        this.key = key;
	        this.value = value;
	        this.quoted = quoted;
	    }
	    return LiteralMapEntry;
	}());
	var LiteralMapExpr = (function (_super) {
	    __extends(LiteralMapExpr, _super);
	    /**
	     * @param {?} entries
	     * @param {?=} type
	     * @param {?=} sourceSpan
	     */
	    function LiteralMapExpr(entries, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.entries = entries;
	        _this.valueType = null;
	        if (type) {
	            _this.valueType = type.valueType;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralMapExpr(this, context);
	    };
	    return LiteralMapExpr;
	}(Expression));
	var CommaExpr = (function (_super) {
	    __extends(CommaExpr, _super);
	    /**
	     * @param {?} parts
	     * @param {?=} sourceSpan
	     */
	    function CommaExpr(parts, sourceSpan) {
	        var _this = _super.call(this, parts[parts.length - 1].type, sourceSpan) || this;
	        _this.parts = parts;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    CommaExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitCommaExpr(this, context);
	    };
	    return CommaExpr;
	}(Expression));
	var THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);
	var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);
	var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError, null, null);
	var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack, null, null);
	var NULL_EXPR = new LiteralExpr(null, null, null);
	var TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);
	var StmtModifier = {};
	StmtModifier.Final = 0;
	StmtModifier.Private = 1;
	StmtModifier[StmtModifier.Final] = "Final";
	StmtModifier[StmtModifier.Private] = "Private";
	/**
	 * @abstract
	 */
	var Statement = (function () {
	    /**
	     * @param {?=} modifiers
	     * @param {?=} sourceSpan
	     */
	    function Statement(modifiers, sourceSpan) {
	        this.modifiers = modifiers || [];
	        this.sourceSpan = sourceSpan || null;
	    }
	    /**
	     * @abstract
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    Statement.prototype.visitStatement = function (visitor, context) { };
	    /**
	     * @param {?} modifier
	     * @return {?}
	     */
	    Statement.prototype.hasModifier = function (modifier) { return ((this.modifiers)).indexOf(modifier) !== -1; };
	    return Statement;
	}());
	var DeclareVarStmt = (function (_super) {
	    __extends(DeclareVarStmt, _super);
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} type
	     * @param {?=} modifiers
	     * @param {?=} sourceSpan
	     */
	    function DeclareVarStmt(name, value, type, modifiers, sourceSpan) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers, sourceSpan) || this;
	        _this.name = name;
	        _this.value = value;
	        _this.type = type || value.type;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareVarStmt(this, context);
	    };
	    return DeclareVarStmt;
	}(Statement));
	var DeclareFunctionStmt = (function (_super) {
	    __extends(DeclareFunctionStmt, _super);
	    /**
	     * @param {?} name
	     * @param {?} params
	     * @param {?} statements
	     * @param {?=} type
	     * @param {?=} modifiers
	     * @param {?=} sourceSpan
	     */
	    function DeclareFunctionStmt(name, params, statements, type, modifiers, sourceSpan) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers, sourceSpan) || this;
	        _this.name = name;
	        _this.params = params;
	        _this.statements = statements;
	        _this.type = type || null;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareFunctionStmt(this, context);
	    };
	    return DeclareFunctionStmt;
	}(Statement));
	var ExpressionStatement = (function (_super) {
	    __extends(ExpressionStatement, _super);
	    /**
	     * @param {?} expr
	     * @param {?=} sourceSpan
	     */
	    function ExpressionStatement(expr, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.expr = expr;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ExpressionStatement.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitExpressionStmt(this, context);
	    };
	    return ExpressionStatement;
	}(Statement));
	var ReturnStatement = (function (_super) {
	    __extends(ReturnStatement, _super);
	    /**
	     * @param {?} value
	     * @param {?=} sourceSpan
	     */
	    function ReturnStatement(value, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.value = value;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ReturnStatement.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitReturnStmt(this, context);
	    };
	    return ReturnStatement;
	}(Statement));
	var AbstractClassPart = (function () {
	    /**
	     * @param {?} type
	     * @param {?} modifiers
	     */
	    function AbstractClassPart(type, modifiers) {
	        this.modifiers = modifiers;
	        if (!modifiers) {
	            this.modifiers = [];
	        }
	        this.type = type || null;
	    }
	    /**
	     * @param {?} modifier
	     * @return {?}
	     */
	    AbstractClassPart.prototype.hasModifier = function (modifier) { return ((this.modifiers)).indexOf(modifier) !== -1; };
	    return AbstractClassPart;
	}());
	var ClassField = (function (_super) {
	    __extends(ClassField, _super);
	    /**
	     * @param {?} name
	     * @param {?=} type
	     * @param {?=} modifiers
	     */
	    function ClassField(name, type, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, type, modifiers) || this;
	        _this.name = name;
	        return _this;
	    }
	    return ClassField;
	}(AbstractClassPart));
	var ClassMethod = (function (_super) {
	    __extends(ClassMethod, _super);
	    /**
	     * @param {?} name
	     * @param {?} params
	     * @param {?} body
	     * @param {?=} type
	     * @param {?=} modifiers
	     */
	    function ClassMethod(name, params, body, type, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, type, modifiers) || this;
	        _this.name = name;
	        _this.params = params;
	        _this.body = body;
	        return _this;
	    }
	    return ClassMethod;
	}(AbstractClassPart));
	var ClassGetter = (function (_super) {
	    __extends(ClassGetter, _super);
	    /**
	     * @param {?} name
	     * @param {?} body
	     * @param {?=} type
	     * @param {?=} modifiers
	     */
	    function ClassGetter(name, body, type, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, type, modifiers) || this;
	        _this.name = name;
	        _this.body = body;
	        return _this;
	    }
	    return ClassGetter;
	}(AbstractClassPart));
	var ClassStmt = (function (_super) {
	    __extends(ClassStmt, _super);
	    /**
	     * @param {?} name
	     * @param {?} parent
	     * @param {?} fields
	     * @param {?} getters
	     * @param {?} constructorMethod
	     * @param {?} methods
	     * @param {?=} modifiers
	     * @param {?=} sourceSpan
	     */
	    function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers, sourceSpan) || this;
	        _this.name = name;
	        _this.parent = parent;
	        _this.fields = fields;
	        _this.getters = getters;
	        _this.constructorMethod = constructorMethod;
	        _this.methods = methods;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ClassStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareClassStmt(this, context);
	    };
	    return ClassStmt;
	}(Statement));
	var IfStmt = (function (_super) {
	    __extends(IfStmt, _super);
	    /**
	     * @param {?} condition
	     * @param {?} trueCase
	     * @param {?=} falseCase
	     * @param {?=} sourceSpan
	     */
	    function IfStmt(condition, trueCase, falseCase, sourceSpan) {
	        if (falseCase === void 0) { falseCase = []; }
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.condition = condition;
	        _this.trueCase = trueCase;
	        _this.falseCase = falseCase;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    IfStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitIfStmt(this, context);
	    };
	    return IfStmt;
	}(Statement));
	var TryCatchStmt = (function (_super) {
	    __extends(TryCatchStmt, _super);
	    /**
	     * @param {?} bodyStmts
	     * @param {?} catchStmts
	     * @param {?=} sourceSpan
	     */
	    function TryCatchStmt(bodyStmts, catchStmts, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.bodyStmts = bodyStmts;
	        _this.catchStmts = catchStmts;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    TryCatchStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitTryCatchStmt(this, context);
	    };
	    return TryCatchStmt;
	}(Statement));
	var ThrowStmt = (function (_super) {
	    __extends(ThrowStmt, _super);
	    /**
	     * @param {?} error
	     * @param {?=} sourceSpan
	     */
	    function ThrowStmt(error, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.error = error;
	        return _this;
	    }
	    /**
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    ThrowStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitThrowStmt(this, context);
	    };
	    return ThrowStmt;
	}(Statement));
	var AstTransformer$1 = (function () {
	    function AstTransformer$1() {
	    }
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.transformExpr = function (expr, context) { return expr; };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.transformStmt = function (stmt, context) { return stmt; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitReadVarExpr = function (ast, context) { return this.transformExpr(ast, context); };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitWriteVarExpr = function (expr, context) {
	        return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
	    };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitWriteKeyExpr = function (expr, context) {
	        return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
	    };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitWritePropExpr = function (expr, context) {
	        return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitInvokeMethodExpr = function (ast, context) {
	        var /** @type {?} */ method = ast.builtin || ast.name;
	        return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), /** @type {?} */ ((method)), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitInvokeFunctionExpr = function (ast, context) {
	        return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitInstantiateExpr = function (ast, context) {
	        return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitLiteralExpr = function (ast, context) { return this.transformExpr(ast, context); };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitExternalExpr = function (ast, context) {
	        return this.transformExpr(ast, context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitConditionalExpr = function (ast, context) {
	        return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), /** @type {?} */ ((ast.falseCase)).visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitNotExpr = function (ast, context) {
	        return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitCastExpr = function (ast, context) {
	        return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitFunctionExpr = function (ast, context) {
	        return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitBinaryOperatorExpr = function (ast, context) {
	        return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitReadPropExpr = function (ast, context) {
	        return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitReadKeyExpr = function (ast, context) {
	        return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitLiteralArrayExpr = function (ast, context) {
	        return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitLiteralMapExpr = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ entries = ast.entries.map(function (entry) { return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted); });
	        var /** @type {?} */ mapType = new MapType(ast.valueType, null);
	        return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitCommaExpr = function (ast, context) {
	        return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);
	    };
	    /**
	     * @param {?} exprs
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitAllExpressions = function (exprs, context) {
	        var _this = this;
	        return exprs.map(function (expr) { return expr.visitExpression(_this, context); });
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitDeclareVarStmt = function (stmt, context) {
	        return this.transformStmt(new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitExpressionStmt = function (stmt, context) {
	        return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitReturnStmt = function (stmt, context) {
	        return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitDeclareClassStmt = function (stmt, context) {
	        var _this = this;
	        var /** @type {?} */ parent = ((stmt.parent)).visitExpression(this, context);
	        var /** @type {?} */ getters = stmt.getters.map(function (getter) { return new ClassGetter(getter.name, _this.visitAllStatements(getter.body, context), getter.type, getter.modifiers); });
	        var /** @type {?} */ ctorMethod = stmt.constructorMethod &&
	            new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);
	        var /** @type {?} */ methods = stmt.methods.map(function (method) { return new ClassMethod(method.name, method.params, _this.visitAllStatements(method.body, context), method.type, method.modifiers); });
	        return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitIfStmt = function (stmt, context) {
	        return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitTryCatchStmt = function (stmt, context) {
	        return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitThrowStmt = function (stmt, context) {
	        return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan), context);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitCommentStmt = function (stmt, context) {
	        return this.transformStmt(stmt, context);
	    };
	    /**
	     * @param {?} stmts
	     * @param {?} context
	     * @return {?}
	     */
	    AstTransformer$1.prototype.visitAllStatements = function (stmts, context) {
	        var _this = this;
	        return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });
	    };
	    return AstTransformer$1;
	}());
	var RecursiveAstVisitor$1 = (function () {
	    function RecursiveAstVisitor$1() {
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitWriteVarExpr = function (expr, context) {
	        expr.value.visitExpression(this, context);
	        return expr;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitWriteKeyExpr = function (expr, context) {
	        expr.receiver.visitExpression(this, context);
	        expr.index.visitExpression(this, context);
	        expr.value.visitExpression(this, context);
	        return expr;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitWritePropExpr = function (expr, context) {
	        expr.receiver.visitExpression(this, context);
	        expr.value.visitExpression(this, context);
	        return expr;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitInvokeMethodExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitInvokeFunctionExpr = function (ast, context) {
	        ast.fn.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitInstantiateExpr = function (ast, context) {
	        ast.classExpr.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitExternalExpr = function (ast, context) { return ast; };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitConditionalExpr = function (ast, context) {
	        ast.condition.visitExpression(this, context);
	        ast.trueCase.visitExpression(this, context); /** @type {?} */
	        ((ast.falseCase)).visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitNotExpr = function (ast, context) {
	        ast.condition.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitCastExpr = function (ast, context) {
	        ast.value.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitFunctionExpr = function (ast, context) {
	        this.visitAllStatements(ast.statements, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitBinaryOperatorExpr = function (ast, context) {
	        ast.lhs.visitExpression(this, context);
	        ast.rhs.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitReadPropExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitReadKeyExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        ast.index.visitExpression(this, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitLiteralArrayExpr = function (ast, context) {
	        this.visitAllExpressions(ast.entries, context);
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitLiteralMapExpr = function (ast, context) {
	        var _this = this;
	        ast.entries.forEach(function (entry) { return entry.value.visitExpression(_this, context); });
	        return ast;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitCommaExpr = function (ast, context) {
	        this.visitAllExpressions(ast.parts, context);
	    };
	    /**
	     * @param {?} exprs
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitAllExpressions = function (exprs, context) {
	        var _this = this;
	        exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitDeclareVarStmt = function (stmt, context) {
	        stmt.value.visitExpression(this, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        this.visitAllStatements(stmt.statements, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitExpressionStmt = function (stmt, context) {
	        stmt.expr.visitExpression(this, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitReturnStmt = function (stmt, context) {
	        stmt.value.visitExpression(this, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitDeclareClassStmt = function (stmt, context) {
	        var _this = this;
	        ((stmt.parent)).visitExpression(this, context);
	        stmt.getters.forEach(function (getter) { return _this.visitAllStatements(getter.body, context); });
	        if (stmt.constructorMethod) {
	            this.visitAllStatements(stmt.constructorMethod.body, context);
	        }
	        stmt.methods.forEach(function (method) { return _this.visitAllStatements(method.body, context); });
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitIfStmt = function (stmt, context) {
	        stmt.condition.visitExpression(this, context);
	        this.visitAllStatements(stmt.trueCase, context);
	        this.visitAllStatements(stmt.falseCase, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitTryCatchStmt = function (stmt, context) {
	        this.visitAllStatements(stmt.bodyStmts, context);
	        this.visitAllStatements(stmt.catchStmts, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitThrowStmt = function (stmt, context) {
	        stmt.error.visitExpression(this, context);
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	    /**
	     * @param {?} stmts
	     * @param {?} context
	     * @return {?}
	     */
	    RecursiveAstVisitor$1.prototype.visitAllStatements = function (stmts, context) {
	        var _this = this;
	        stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });
	    };
	    return RecursiveAstVisitor$1;
	}());
	/**
	 * @param {?} stmts
	 * @return {?}
	 */
	function findReadVarNames(stmts) {
	    var /** @type {?} */ visitor = new _ReadVarVisitor();
	    visitor.visitAllStatements(stmts, null);
	    return visitor.varNames;
	}
	var _ReadVarVisitor = (function (_super) {
	    __extends(_ReadVarVisitor, _super);
	    function _ReadVarVisitor() {
	        var _this = _super.apply(this, arguments) || this;
	        _this.varNames = new Set();
	        return _this;
	    }
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    _ReadVarVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        // Don't descend into nested functions
	        return stmt;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    _ReadVarVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
	        // Don't descend into nested classes
	        return stmt;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    _ReadVarVisitor.prototype.visitReadVarExpr = function (ast, context) {
	        if (ast.name) {
	            this.varNames.add(ast.name);
	        }
	        return null;
	    };
	    return _ReadVarVisitor;
	}(RecursiveAstVisitor$1));
	/**
	 * @param {?} stmt
	 * @param {?} sourceSpan
	 * @return {?}
	 */
	function applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {
	    if (!sourceSpan) {
	        return stmt;
	    }
	    var /** @type {?} */ transformer = new _ApplySourceSpanTransformer(sourceSpan);
	    return stmt.visitStatement(transformer, null);
	}
	/**
	 * @param {?} expr
	 * @param {?} sourceSpan
	 * @return {?}
	 */
	function applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {
	    if (!sourceSpan) {
	        return expr;
	    }
	    var /** @type {?} */ transformer = new _ApplySourceSpanTransformer(sourceSpan);
	    return expr.visitExpression(transformer, null);
	}
	var _ApplySourceSpanTransformer = (function (_super) {
	    __extends(_ApplySourceSpanTransformer, _super);
	    /**
	     * @param {?} sourceSpan
	     */
	    function _ApplySourceSpanTransformer(sourceSpan) {
	        var _this = _super.call(this) || this;
	        _this.sourceSpan = sourceSpan;
	        return _this;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    _ApplySourceSpanTransformer.prototype._clone = function (obj) {
	        var /** @type {?} */ clone = Object.create(obj.constructor.prototype);
	        for (var /** @type {?} */ prop in obj) {
	            clone[prop] = obj[prop];
	        }
	        return clone;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} context
	     * @return {?}
	     */
	    _ApplySourceSpanTransformer.prototype.transformExpr = function (expr, context) {
	        if (!expr.sourceSpan) {
	            expr = this._clone(expr);
	            expr.sourceSpan = this.sourceSpan;
	        }
	        return expr;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    _ApplySourceSpanTransformer.prototype.transformStmt = function (stmt, context) {
	        if (!stmt.sourceSpan) {
	            stmt = this._clone(stmt);
	            stmt.sourceSpan = this.sourceSpan;
	        }
	        return stmt;
	    };
	    return _ApplySourceSpanTransformer;
	}(AstTransformer$1));
	/**
	 * @param {?} name
	 * @param {?=} type
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function variable(name, type, sourceSpan) {
	    return new ReadVarExpr(name, type, sourceSpan);
	}
	/**
	 * @param {?} id
	 * @param {?=} typeParams
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function importExpr(id, typeParams, sourceSpan) {
	    if (typeParams === void 0) { typeParams = null; }
	    return new ExternalExpr(id, null, typeParams, sourceSpan);
	}
	/**
	 * @param {?} id
	 * @param {?=} typeParams
	 * @param {?=} typeModifiers
	 * @return {?}
	 */
	function importType(id, typeParams, typeModifiers) {
	    if (typeParams === void 0) { typeParams = null; }
	    if (typeModifiers === void 0) { typeModifiers = null; }
	    return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;
	}
	/**
	 * @param {?} expr
	 * @param {?=} typeModifiers
	 * @return {?}
	 */
	function expressionType(expr, typeModifiers) {
	    if (typeModifiers === void 0) { typeModifiers = null; }
	    return expr != null ? ((new ExpressionType(expr, typeModifiers))) : null;
	}
	/**
	 * @param {?} values
	 * @param {?=} type
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function literalArr(values, type, sourceSpan) {
	    return new LiteralArrayExpr(values, type, sourceSpan);
	}
	/**
	 * @param {?} values
	 * @param {?=} type
	 * @param {?=} quoted
	 * @return {?}
	 */
	function literalMap(values, type, quoted) {
	    if (type === void 0) { type = null; }
	    if (quoted === void 0) { quoted = false; }
	    return new LiteralMapExpr(values.map(function (entry) { return new LiteralMapEntry(entry[0], entry[1], quoted); }), type, null);
	}
	/**
	 * @param {?} expr
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function not(expr, sourceSpan) {
	    return new NotExpr(expr, sourceSpan);
	}
	/**
	 * @param {?} params
	 * @param {?} body
	 * @param {?=} type
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function fn(params, body, type, sourceSpan) {
	    return new FunctionExpr(params, body, type, sourceSpan);
	}
	/**
	 * @param {?} value
	 * @param {?=} type
	 * @param {?=} sourceSpan
	 * @return {?}
	 */
	function literal(value, type, sourceSpan) {
	    return new LiteralExpr(value, type, sourceSpan);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Create a new class stmts based on the given data.
	 * @param {?} config
	 * @return {?}
	 */
	function createClassStmt(config) {
	    var /** @type {?} */ parentArgs = config.parentArgs || [];
	    var /** @type {?} */ superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
	    var /** @type {?} */ builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
	    var /** @type {?} */ ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
	    return new ClassStmt(config.name, config.parent || null, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || [], config.sourceSpan);
	}
	/**
	 * @param {?} builders
	 * @return {?}
	 */
	function concatClassBuilderParts(builders) {
	    return {
	        fields: [].concat.apply([], ((builders.map((function (builder) { return builder.fields || []; }))))),
	        methods: [].concat.apply([], ((builders.map(function (builder) { return builder.methods || []; })))),
	        getters: [].concat.apply([], ((builders.map(function (builder) { return builder.getters || []; })))),
	        ctorStmts: [].concat.apply([], ((builders.map(function (builder) { return builder.ctorStmts || []; })))),
	    };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var QUOTED_KEYS = '$quoted$';
	/**
	 * @param {?} value
	 * @param {?=} type
	 * @return {?}
	 */
	function convertValueToOutputAst(value, type) {
	    if (type === void 0) { type = null; }
	    return visitValue(value, new _ValueOutputAstTransformer(), type);
	}
	var _ValueOutputAstTransformer = (function () {
	    function _ValueOutputAstTransformer() {
	    }
	    /**
	     * @param {?} arr
	     * @param {?} type
	     * @return {?}
	     */
	    _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
	        var _this = this;
	        return literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);
	    };
	    /**
	     * @param {?} map
	     * @param {?} type
	     * @return {?}
	     */
	    _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
	        var _this = this;
	        var /** @type {?} */ entries = [];
	        var /** @type {?} */ quotedSet = new Set(map && map[QUOTED_KEYS]);
	        Object.keys(map).forEach(function (key) {
	            entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));
	        });
	        return new LiteralMapExpr(entries, type);
	    };
	    /**
	     * @param {?} value
	     * @param {?} type
	     * @return {?}
	     */
	    _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) { return literal(value, type); };
	    /**
	     * @param {?} value
	     * @param {?} type
	     * @return {?}
	     */
	    _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
	        if (value instanceof Expression) {
	            return value;
	        }
	        else {
	            return importExpr({ reference: value });
	        }
	    };
	    return _ValueOutputAstTransformer;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This is currently not read, but will probably be used in the future.
	 * We keep it as we already pass it through all the rigth places...
	 */
	var ComponentFactoryDependency = (function () {
	    /**
	     * @param {?} compType
	     */
	    function ComponentFactoryDependency(compType) {
	        this.compType = compType;
	    }
	    return ComponentFactoryDependency;
	}());
	var NgModuleCompileResult = (function () {
	    /**
	     * @param {?} statements
	     * @param {?} ngModuleFactoryVar
	     * @param {?} dependencies
	     */
	    function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
	        this.statements = statements;
	        this.ngModuleFactoryVar = ngModuleFactoryVar;
	        this.dependencies = dependencies;
	    }
	    return NgModuleCompileResult;
	}());
	var NgModuleCompiler = (function () {
	    function NgModuleCompiler() {
	    }
	    /**
	     * @param {?} ngModuleMeta
	     * @param {?} extraProviders
	     * @return {?}
	     */
	    NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {
	        var /** @type {?} */ sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);
	        var /** @type {?} */ deps = [];
	        var /** @type {?} */ bootstrapComponentFactories = [];
	        var /** @type {?} */ entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
	            if (ngModuleMeta.bootstrapComponents.some(function (id) { return id.reference === entryComponent.componentType; })) {
	                bootstrapComponentFactories.push({ reference: entryComponent.componentFactory });
	            }
	            deps.push(new ComponentFactoryDependency(entryComponent.componentType));
	            return { reference: entryComponent.componentFactory };
	        });
	        var /** @type {?} */ builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
	        var /** @type {?} */ providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
	        providerParser.parse().forEach(function (provider) { return builder.addProvider(provider); });
	        var /** @type {?} */ injectorClass = builder.build();
	        var /** @type {?} */ ngModuleFactoryVar = identifierName(ngModuleMeta.type) + "NgFactory";
	        var /** @type {?} */ ngModuleFactoryStmt = variable(ngModuleFactoryVar)
	            .set(importExpr(createIdentifier(Identifiers.NgModuleFactory))
	            .instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [/** @type {?} */ ((importType(ngModuleMeta.type)))], [TypeModifier.Const])))
	            .toDeclStmt(null, [StmtModifier.Final]);
	        var /** @type {?} */ stmts = [injectorClass, ngModuleFactoryStmt];
	        if (ngModuleMeta.id) {
	            var /** @type {?} */ registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn))
	                .callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)])
	                .toStmt();
	            stmts.push(registerFactoryStmt);
	        }
	        return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
	    };
	    return NgModuleCompiler;
	}());
	NgModuleCompiler.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	NgModuleCompiler.ctorParameters = function () { return []; };
	var _InjectorBuilder = (function () {
	    /**
	     * @param {?} _ngModuleMeta
	     * @param {?} _entryComponentFactories
	     * @param {?} _bootstrapComponentFactories
	     * @param {?} _sourceSpan
	     */
	    function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
	        this._ngModuleMeta = _ngModuleMeta;
	        this._entryComponentFactories = _entryComponentFactories;
	        this._bootstrapComponentFactories = _bootstrapComponentFactories;
	        this._sourceSpan = _sourceSpan;
	        this.fields = [];
	        this.getters = [];
	        this.methods = [];
	        this.ctorStmts = [];
	        this._lazyProps = new Map();
	        this._tokens = [];
	        this._instances = new Map();
	        this._createStmts = [];
	        this._destroyStmts = [];
	    }
	    /**
	     * @param {?} resolvedProvider
	     * @return {?}
	     */
	    _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
	        var _this = this;
	        var /** @type {?} */ providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider); });
	        var /** @type {?} */ propName = "_" + tokenName(resolvedProvider.token) + "_" + this._instances.size;
	        var /** @type {?} */ instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
	        if (resolvedProvider.lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnDestroy) !== -1) {
	            var /** @type {?} */ callNgOnDestroy = instance.callMethod('ngOnDestroy', []);
	            if (!resolvedProvider.eager) {
	                callNgOnDestroy = ((this._lazyProps.get(instance.name))).and(callNgOnDestroy);
	            }
	            this._destroyStmts.push(callNgOnDestroy.toStmt());
	        }
	        this._tokens.push(resolvedProvider.token);
	        this._instances.set(tokenReference(resolvedProvider.token), instance);
	    };
	    /**
	     * @return {?}
	     */
	    _InjectorBuilder.prototype.build = function () {
	        var _this = this;
	        var /** @type {?} */ getMethodStmts = this._tokens.map(function (token) {
	            var /** @type {?} */ providerExpr = ((_this._instances.get(tokenReference(token))));
	            return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
	        });
	        var /** @type {?} */ methods = [
	            new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(/** @type {?} */ ((this._instances.get(this._ngModuleMeta.type.reference))))), importType(this._ngModuleMeta.type)),
	            new ClassMethod('getInternal', [
	                new FnParam(/** @type {?} */ ((InjectMethodVars.token.name)), DYNAMIC_TYPE),
	                new FnParam(/** @type {?} */ ((InjectMethodVars.notFoundResult.name)), DYNAMIC_TYPE)
	            ], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE),
	            new ClassMethod('destroyInternal', [], this._destroyStmts),
	        ];
	        var /** @type {?} */ parentArgs = [
	            variable(InjectorProps.parent.name),
	            literalArr(this._entryComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); })),
	            literalArr(this._bootstrapComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); }))
	        ];
	        var /** @type {?} */ injClassName = identifierName(this._ngModuleMeta.type) + "Injector";
	        return createClassStmt({
	            name: injClassName,
	            ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))],
	            parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [/** @type {?} */ ((importType(this._ngModuleMeta.type)))]),
	            parentArgs: parentArgs,
	            builders: [{ methods: methods }, this]
	        });
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    _InjectorBuilder.prototype._getProviderValue = function (provider) {
	        var _this = this;
	        var /** @type {?} */ result;
	        if (provider.useExisting != null) {
	            result = this._getDependency({ token: provider.useExisting });
	        }
	        else if (provider.useFactory != null) {
	            var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	            var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	            result = importExpr(provider.useFactory).callFn(depsExpr);
	        }
	        else if (provider.useClass != null) {
	            var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	            var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	            result =
	                importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
	        }
	        else {
	            result = convertValueToOutputAst(provider.useValue);
	        }
	        return result;
	    };
	    /**
	     * @param {?} propName
	     * @param {?} provider
	     * @param {?} providerValueExpressions
	     * @param {?} isMulti
	     * @param {?} isEager
	     * @return {?}
	     */
	    _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
	        var /** @type {?} */ resolvedProviderValueExpr;
	        var /** @type {?} */ type;
	        if (isMulti) {
	            resolvedProviderValueExpr = literalArr(providerValueExpressions);
	            type = new ArrayType(DYNAMIC_TYPE);
	        }
	        else {
	            resolvedProviderValueExpr = providerValueExpressions[0];
	            type = ((providerValueExpressions[0].type));
	        }
	        if (!type) {
	            type = DYNAMIC_TYPE;
	        }
	        if (isEager) {
	            this.fields.push(new ClassField(propName, type));
	            this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	        }
	        else {
	            var /** @type {?} */ internalFieldProp = THIS_EXPR.prop("_" + propName);
	            this.fields.push(new ClassField(internalFieldProp.name, type));
	            // Note: Equals is important for JS so that it also checks the undefined case!
	            var /** @type {?} */ getterStmts = [
	                new IfStmt(internalFieldProp.isBlank(), [internalFieldProp.set(resolvedProviderValueExpr).toStmt()]),
	                new ReturnStatement(internalFieldProp)
	            ];
	            this.getters.push(new ClassGetter(propName, getterStmts, type));
	            this._lazyProps.set(propName, internalFieldProp);
	        }
	        return THIS_EXPR.prop(propName);
	    };
	    /**
	     * @param {?} dep
	     * @return {?}
	     */
	    _InjectorBuilder.prototype._getDependency = function (dep) {
	        var /** @type {?} */ result = ((null));
	        if (dep.isValue) {
	            result = literal(dep.value);
	        }
	        if (!dep.isSkipSelf) {
	            if (dep.token) {
	                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
	                    result = THIS_EXPR;
	                }
	                else if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
	                    result = THIS_EXPR.prop('componentFactoryResolver');
	                }
	            }
	            if (!result) {
	                result = ((this._instances.get(tokenReference(/** @type {?} */ ((dep.token))))));
	            }
	        }
	        if (!result) {
	            var /** @type {?} */ args = [createDiTokenExpression(/** @type {?} */ ((dep.token)))];
	            if (dep.isOptional) {
	                args.push(NULL_EXPR);
	            }
	            result = InjectorProps.parent.callMethod('get', args);
	        }
	        return result;
	    };
	    return _InjectorBuilder;
	}());
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function createDiTokenExpression(token) {
	    if (token.value != null) {
	        return literal(token.value);
	    }
	    else {
	        return importExpr(/** @type {?} */ ((token.identifier)));
	    }
	}
	var InjectorProps = (function () {
	    function InjectorProps() {
	    }
	    return InjectorProps;
	}());
	InjectorProps.parent = THIS_EXPR.prop('parent');
	var InjectMethodVars = (function () {
	    function InjectMethodVars() {
	    }
	    return InjectMethodVars;
	}());
	InjectMethodVars.token = variable('token');
	InjectMethodVars.notFoundResult = variable('notFoundResult');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit
	var VERSION$1 = 3;
	var JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';
	var SourceMapGenerator = (function () {
	    /**
	     * @param {?=} file
	     */
	    function SourceMapGenerator(file) {
	        if (file === void 0) { file = null; }
	        this.file = file;
	        this.sourcesContent = new Map();
	        this.lines = [];
	        this.lastCol0 = 0;
	        this.hasMappings = false;
	    }
	    /**
	     * @param {?} url
	     * @param {?=} content
	     * @return {?}
	     */
	    SourceMapGenerator.prototype.addSource = function (url, content) {
	        if (content === void 0) { content = null; }
	        if (!this.sourcesContent.has(url)) {
	            this.sourcesContent.set(url, content);
	        }
	        return this;
	    };
	    /**
	     * @return {?}
	     */
	    SourceMapGenerator.prototype.addLine = function () {
	        this.lines.push([]);
	        this.lastCol0 = 0;
	        return this;
	    };
	    /**
	     * @param {?} col0
	     * @param {?=} sourceUrl
	     * @param {?=} sourceLine0
	     * @param {?=} sourceCol0
	     * @return {?}
	     */
	    SourceMapGenerator.prototype.addMapping = function (col0, sourceUrl, sourceLine0, sourceCol0) {
	        if (!this.currentLine) {
	            throw new Error("A line must be added before mappings can be added");
	        }
	        if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
	            throw new Error("Unknown source file \"" + sourceUrl + "\"");
	        }
	        if (col0 == null) {
	            throw new Error("The column in the generated code must be provided");
	        }
	        if (col0 < this.lastCol0) {
	            throw new Error("Mapping should be added in output order");
	        }
	        if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
	            throw new Error("The source location must be provided when a source url is provided");
	        }
	        this.hasMappings = true;
	        this.lastCol0 = col0;
	        this.currentLine.push({ col0: col0, sourceUrl: sourceUrl, sourceLine0: sourceLine0, sourceCol0: sourceCol0 });
	        return this;
	    };
	    Object.defineProperty(SourceMapGenerator.prototype, "currentLine", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.lines.slice(-1)[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    SourceMapGenerator.prototype.toJSON = function () {
	        var _this = this;
	        if (!this.hasMappings) {
	            return null;
	        }
	        var /** @type {?} */ sourcesIndex = new Map();
	        var /** @type {?} */ sources = [];
	        var /** @type {?} */ sourcesContent = [];
	        Array.from(this.sourcesContent.keys()).forEach(function (url, i) {
	            sourcesIndex.set(url, i);
	            sources.push(url);
	            sourcesContent.push(_this.sourcesContent.get(url) || null);
	        });
	        var /** @type {?} */ mappings = '';
	        var /** @type {?} */ lastCol0 = 0;
	        var /** @type {?} */ lastSourceIndex = 0;
	        var /** @type {?} */ lastSourceLine0 = 0;
	        var /** @type {?} */ lastSourceCol0 = 0;
	        this.lines.forEach(function (segments) {
	            lastCol0 = 0;
	            mappings += segments
	                .map(function (segment) {
	                // zero-based starting column of the line in the generated code
	                var /** @type {?} */ segAsStr = toBase64VLQ(segment.col0 - lastCol0);
	                lastCol0 = segment.col0;
	                if (segment.sourceUrl != null) {
	                    // zero-based index into the “sources” list
	                    segAsStr +=
	                        toBase64VLQ(/** @type {?} */ ((sourcesIndex.get(segment.sourceUrl))) - lastSourceIndex);
	                    lastSourceIndex = ((sourcesIndex.get(segment.sourceUrl)));
	                    // the zero-based starting line in the original source
	                    segAsStr += toBase64VLQ(/** @type {?} */ ((segment.sourceLine0)) - lastSourceLine0);
	                    lastSourceLine0 = ((segment.sourceLine0));
	                    // the zero-based starting column in the original source
	                    segAsStr += toBase64VLQ(/** @type {?} */ ((segment.sourceCol0)) - lastSourceCol0);
	                    lastSourceCol0 = ((segment.sourceCol0));
	                }
	                return segAsStr;
	            })
	                .join(',');
	            mappings += ';';
	        });
	        mappings = mappings.slice(0, -1);
	        return {
	            'file': this.file || '',
	            'version': VERSION$1,
	            'sourceRoot': '',
	            'sources': sources,
	            'sourcesContent': sourcesContent,
	            'mappings': mappings,
	        };
	    };
	    /**
	     * @return {?}
	     */
	    SourceMapGenerator.prototype.toJsComment = function () {
	        return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :
	            '';
	    };
	    return SourceMapGenerator;
	}());
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function toBase64String(value) {
	    var /** @type {?} */ b64 = '';
	    value = utf8Encode(value);
	    for (var /** @type {?} */ i = 0; i < value.length;) {
	        var /** @type {?} */ i1 = value.charCodeAt(i++);
	        var /** @type {?} */ i2 = value.charCodeAt(i++);
	        var /** @type {?} */ i3 = value.charCodeAt(i++);
	        b64 += toBase64Digit(i1 >> 2);
	        b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));
	        b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));
	        b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);
	    }
	    return b64;
	}
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function toBase64VLQ(value) {
	    value = value < 0 ? ((-value) << 1) + 1 : value << 1;
	    var /** @type {?} */ out = '';
	    do {
	        var /** @type {?} */ digit = value & 31;
	        value = value >> 5;
	        if (value > 0) {
	            digit = digit | 32;
	        }
	        out += toBase64Digit(digit);
	    } while (value > 0);
	    return out;
	}
	var B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function toBase64Digit(value) {
	    if (value < 0 || value >= 64) {
	        throw new Error("Can only encode value in the range [0, 63]");
	    }
	    return B64_DIGITS[value];
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
	var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
	var _INDENT_WITH = '  ';
	var CATCH_ERROR_VAR$1 = variable('error', null, null);
	var CATCH_STACK_VAR$1 = variable('stack', null, null);
	/**
	 * @abstract
	 */
	var _EmittedLine = (function () {
	    /**
	     * @param {?} indent
	     */
	    function _EmittedLine(indent) {
	        this.indent = indent;
	        this.parts = [];
	        this.srcSpans = [];
	    }
	    return _EmittedLine;
	}());
	var EmitterVisitorContext = (function () {
	    /**
	     * @param {?} _exportedVars
	     * @param {?} _indent
	     */
	    function EmitterVisitorContext(_exportedVars, _indent) {
	        this._exportedVars = _exportedVars;
	        this._indent = _indent;
	        this._classes = [];
	        this._lines = [new _EmittedLine(_indent)];
	    }
	    /**
	     * @param {?} exportedVars
	     * @return {?}
	     */
	    EmitterVisitorContext.createRoot = function (exportedVars) {
	        return new EmitterVisitorContext(exportedVars, 0);
	    };
	    Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._lines[this._lines.length - 1]; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} varName
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1; };
	    /**
	     * @param {?=} from
	     * @param {?=} lastPart
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.println = function (from, lastPart) {
	        if (lastPart === void 0) { lastPart = ''; }
	        this.print(from || null, lastPart, true);
	    };
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.lineIsEmpty = function () { return this._currentLine.parts.length === 0; };
	    /**
	     * @param {?} from
	     * @param {?} part
	     * @param {?=} newLine
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.print = function (from, part, newLine) {
	        if (newLine === void 0) { newLine = false; }
	        if (part.length > 0) {
	            this._currentLine.parts.push(part);
	            this._currentLine.srcSpans.push(from && from.sourceSpan || null);
	        }
	        if (newLine) {
	            this._lines.push(new _EmittedLine(this._indent));
	        }
	    };
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
	        if (this.lineIsEmpty()) {
	            this._lines.pop();
	        }
	    };
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.incIndent = function () {
	        this._indent++;
	        this._currentLine.indent = this._indent;
	    };
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.decIndent = function () {
	        this._indent--;
	        this._currentLine.indent = this._indent;
	    };
	    /**
	     * @param {?} clazz
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz); };
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.popClass = function () { return ((this._classes.pop())); };
	    Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.toSource = function () {
	        return this.sourceLines
	            .map(function (l) { return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : ''; })
	            .join('\n');
	    };
	    /**
	     * @param {?} sourceFilePath
	     * @param {?} genFilePath
	     * @param {?=} startsAtLine
	     * @return {?}
	     */
	    EmitterVisitorContext.prototype.toSourceMapGenerator = function (sourceFilePath, genFilePath, startsAtLine) {
	        if (startsAtLine === void 0) { startsAtLine = 0; }
	        var /** @type {?} */ map = new SourceMapGenerator(genFilePath);
	        var /** @type {?} */ firstOffsetMapped = false;
	        var /** @type {?} */ mapFirstOffsetIfNeeded = function () {
	            if (!firstOffsetMapped) {
	                // Add a single space so that tools won't try to load the file from disk.
	                // Note: We are using virtual urls like `ng:///`, so we have to
	                // provide a content here.
	                map.addSource(sourceFilePath, ' ').addMapping(0, sourceFilePath, 0, 0);
	                firstOffsetMapped = true;
	            }
	        };
	        for (var /** @type {?} */ i = 0; i < startsAtLine; i++) {
	            map.addLine();
	            mapFirstOffsetIfNeeded();
	        }
	        this.sourceLines.forEach(function (line, lineIdx) {
	            map.addLine();
	            var /** @type {?} */ spans = line.srcSpans;
	            var /** @type {?} */ parts = line.parts;
	            var /** @type {?} */ col0 = line.indent * _INDENT_WITH.length;
	            var /** @type {?} */ spanIdx = 0;
	            // skip leading parts without source spans
	            while (spanIdx < spans.length && !spans[spanIdx]) {
	                col0 += parts[spanIdx].length;
	                spanIdx++;
	            }
	            if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {
	                firstOffsetMapped = true;
	            }
	            else {
	                mapFirstOffsetIfNeeded();
	            }
	            while (spanIdx < spans.length) {
	                var /** @type {?} */ span = ((spans[spanIdx]));
	                var /** @type {?} */ source = span.start.file;
	                var /** @type {?} */ sourceLine = span.start.line;
	                var /** @type {?} */ sourceCol = span.start.col;
	                map.addSource(source.url, source.content)
	                    .addMapping(col0, source.url, sourceLine, sourceCol);
	                col0 += parts[spanIdx].length;
	                spanIdx++;
	                // assign parts without span or the same span to the previous segment
	                while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
	                    col0 += parts[spanIdx].length;
	                    spanIdx++;
	                }
	            }
	        });
	        return map;
	    };
	    Object.defineProperty(EmitterVisitorContext.prototype, "sourceLines", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
	                return this._lines.slice(0, -1);
	            }
	            return this._lines;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return EmitterVisitorContext;
	}());
	/**
	 * @abstract
	 */
	var AbstractEmitterVisitor = (function () {
	    /**
	     * @param {?} _escapeDollarInStrings
	     */
	    function AbstractEmitterVisitor(_escapeDollarInStrings) {
	        this._escapeDollarInStrings = _escapeDollarInStrings;
	    }
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
	        stmt.expr.visitExpression(this, ctx);
	        ctx.println(stmt, ';');
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
	        ctx.print(stmt, "return ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(stmt, ';');
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitCastExpr = function (ast, context) { };
	    /**
	     * @abstract
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) { };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
	        ctx.print(stmt, "if (");
	        stmt.condition.visitExpression(this, ctx);
	        ctx.print(stmt, ") {");
	        var /** @type {?} */ hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;
	        if (stmt.trueCase.length <= 1 && !hasElseCase) {
	            ctx.print(stmt, " ");
	            this.visitAllStatements(stmt.trueCase, ctx);
	            ctx.removeEmptyLastLine();
	            ctx.print(stmt, " ");
	        }
	        else {
	            ctx.println();
	            ctx.incIndent();
	            this.visitAllStatements(stmt.trueCase, ctx);
	            ctx.decIndent();
	            if (hasElseCase) {
	                ctx.println(stmt, "} else {");
	                ctx.incIndent();
	                this.visitAllStatements(stmt.falseCase, ctx);
	                ctx.decIndent();
	            }
	        }
	        ctx.println(stmt, "}");
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) { };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
	        ctx.print(stmt, "throw ");
	        stmt.error.visitExpression(this, ctx);
	        ctx.println(stmt, ";");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
	        var /** @type {?} */ lines = stmt.comment.split('\n');
	        lines.forEach(function (line) { ctx.println(stmt, "// " + line); });
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) { };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
	        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print(expr, '(');
	        }
	        ctx.print(expr, expr.name + " = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(expr, ')');
	        }
	        return null;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
	        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print(expr, '(');
	        }
	        expr.receiver.visitExpression(this, ctx);
	        ctx.print(expr, "[");
	        expr.index.visitExpression(this, ctx);
	        ctx.print(expr, "] = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(expr, ')');
	        }
	        return null;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
	        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print(expr, '(');
	        }
	        expr.receiver.visitExpression(this, ctx);
	        ctx.print(expr, "." + expr.name + " = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(expr, ')');
	        }
	        return null;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	        expr.receiver.visitExpression(this, ctx);
	        var /** @type {?} */ name = expr.name;
	        if (expr.builtin != null) {
	            name = this.getBuiltinMethodName(expr.builtin);
	            if (name == null) {
	                // some builtins just mean to skip the call.
	                return null;
	            }
	        }
	        ctx.print(expr, "." + name + "(");
	        this.visitAllExpressions(expr.args, ctx, ",");
	        ctx.print(expr, ")");
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} method
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.getBuiltinMethodName = function (method) { };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	        expr.fn.visitExpression(this, ctx);
	        ctx.print(expr, "(");
	        this.visitAllExpressions(expr.args, ctx, ',');
	        ctx.print(expr, ")");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	        var /** @type {?} */ varName = ((ast.name));
	        if (ast.builtin != null) {
	            switch (ast.builtin) {
	                case BuiltinVar.Super:
	                    varName = 'super';
	                    break;
	                case BuiltinVar.This:
	                    varName = 'this';
	                    break;
	                case BuiltinVar.CatchError:
	                    varName = ((CATCH_ERROR_VAR$1.name));
	                    break;
	                case BuiltinVar.CatchStack:
	                    varName = ((CATCH_STACK_VAR$1.name));
	                    break;
	                default:
	                    throw new Error("Unknown builtin variable " + ast.builtin);
	            }
	        }
	        ctx.print(ast, varName);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	        ctx.print(ast, "new ");
	        ast.classExpr.visitExpression(this, ctx);
	        ctx.print(ast, "(");
	        this.visitAllExpressions(ast.args, ctx, ',');
	        ctx.print(ast, ")");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	        var /** @type {?} */ value = ast.value;
	        if (typeof value === 'string') {
	            ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
	        }
	        else {
	            ctx.print(ast, "" + value);
	        }
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) { };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
	        ctx.print(ast, "(");
	        ast.condition.visitExpression(this, ctx);
	        ctx.print(ast, '? ');
	        ast.trueCase.visitExpression(this, ctx);
	        ctx.print(ast, ': '); /** @type {?} */
	        ((ast.falseCase)).visitExpression(this, ctx);
	        ctx.print(ast, ")");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
	        ctx.print(ast, '!');
	        ast.condition.visitExpression(this, ctx);
	        return null;
	    };
	    /**
	     * @abstract
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) { };
	    /**
	     * @abstract
	     * @param {?} stmt
	     * @param {?} context
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	        var /** @type {?} */ opStr;
	        switch (ast.operator) {
	            case BinaryOperator.Equals:
	                opStr = '==';
	                break;
	            case BinaryOperator.Identical:
	                opStr = '===';
	                break;
	            case BinaryOperator.NotEquals:
	                opStr = '!=';
	                break;
	            case BinaryOperator.NotIdentical:
	                opStr = '!==';
	                break;
	            case BinaryOperator.And:
	                opStr = '&&';
	                break;
	            case BinaryOperator.Or:
	                opStr = '||';
	                break;
	            case BinaryOperator.Plus:
	                opStr = '+';
	                break;
	            case BinaryOperator.Minus:
	                opStr = '-';
	                break;
	            case BinaryOperator.Divide:
	                opStr = '/';
	                break;
	            case BinaryOperator.Multiply:
	                opStr = '*';
	                break;
	            case BinaryOperator.Modulo:
	                opStr = '%';
	                break;
	            case BinaryOperator.Lower:
	                opStr = '<';
	                break;
	            case BinaryOperator.LowerEquals:
	                opStr = '<=';
	                break;
	            case BinaryOperator.Bigger:
	                opStr = '>';
	                break;
	            case BinaryOperator.BiggerEquals:
	                opStr = '>=';
	                break;
	            default:
	                throw new Error("Unknown operator " + ast.operator);
	        }
	        ctx.print(ast, "(");
	        ast.lhs.visitExpression(this, ctx);
	        ctx.print(ast, " " + opStr + " ");
	        ast.rhs.visitExpression(this, ctx);
	        ctx.print(ast, ")");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
	        ast.receiver.visitExpression(this, ctx);
	        ctx.print(ast, ".");
	        ctx.print(ast, ast.name);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
	        ast.receiver.visitExpression(this, ctx);
	        ctx.print(ast, "[");
	        ast.index.visitExpression(this, ctx);
	        ctx.print(ast, "]");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        var /** @type {?} */ useNewLine = ast.entries.length > 1;
	        ctx.print(ast, "[", useNewLine);
	        ctx.incIndent();
	        this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
	        ctx.decIndent();
	        ctx.print(ast, "]", useNewLine);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
	        var _this = this;
	        var /** @type {?} */ useNewLine = ast.entries.length > 1;
	        ctx.print(ast, "{", useNewLine);
	        ctx.incIndent();
	        this.visitAllObjects(function (entry) {
	            ctx.print(ast, escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + ": ");
	            entry.value.visitExpression(_this, ctx);
	        }, ast.entries, ctx, ',', useNewLine);
	        ctx.decIndent();
	        ctx.print(ast, "}", useNewLine);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitCommaExpr = function (ast, ctx) {
	        ctx.print(ast, '(');
	        this.visitAllExpressions(ast.parts, ctx, ',');
	        ctx.print(ast, ')');
	        return null;
	    };
	    /**
	     * @param {?} expressions
	     * @param {?} ctx
	     * @param {?} separator
	     * @param {?=} newLine
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
	        var _this = this;
	        if (newLine === void 0) { newLine = false; }
	        this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator, newLine);
	    };
	    /**
	     * @template T
	     * @param {?} handler
	     * @param {?} expressions
	     * @param {?} ctx
	     * @param {?} separator
	     * @param {?=} newLine
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
	        if (newLine === void 0) { newLine = false; }
	        for (var /** @type {?} */ i = 0; i < expressions.length; i++) {
	            if (i > 0) {
	                ctx.print(null, separator, newLine);
	            }
	            handler(expressions[i]);
	        }
	        if (newLine) {
	            ctx.println();
	        }
	    };
	    /**
	     * @param {?} statements
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
	        var _this = this;
	        statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });
	    };
	    return AbstractEmitterVisitor;
	}());
	/**
	 * @param {?} input
	 * @param {?} escapeDollar
	 * @param {?=} alwaysQuote
	 * @return {?}
	 */
	function escapeIdentifier(input, escapeDollar, alwaysQuote) {
	    if (alwaysQuote === void 0) { alwaysQuote = true; }
	    if (input == null) {
	        return null;
	    }
	    var /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
	        var match = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            match[_i] = arguments[_i];
	        }
	        if (match[0] == '$') {
	            return escapeDollar ? '\\$' : '$';
	        }
	        else if (match[0] == '\n') {
	            return '\\n';
	        }
	        else if (match[0] == '\r') {
	            return '\\r';
	        }
	        else {
	            return "\\" + match[0];
	        }
	    });
	    var /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
	    return requiresQuotes ? "'" + body + "'" : body;
	}
	/**
	 * @param {?} count
	 * @return {?}
	 */
	function _createIndent(count) {
	    var /** @type {?} */ res = '';
	    for (var /** @type {?} */ i = 0; i < count; i++) {
	        res += _INDENT_WITH;
	    }
	    return res;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _debugFilePath = '/debug/lib';
	/**
	 * @param {?} ast
	 * @return {?}
	 */
	function debugOutputAstAsTypeScript(ast) {
	    var /** @type {?} */ converter = new _TsEmitterVisitor(_debugFilePath, {
	        /**
	         * @param {?} filePath
	         * @param {?} containingFilePath
	         * @return {?}
	         */
	        fileNameToModuleName: function (filePath, containingFilePath) { return filePath; },
	        /**
	         * @param {?} symbol
	         * @return {?}
	         */
	        getImportAs: function (symbol) { return null; },
	        getTypeArity: function (symbol) { return null; }
	    });
	    var /** @type {?} */ ctx = EmitterVisitorContext.createRoot([]);
	    var /** @type {?} */ asts = Array.isArray(ast) ? ast : [ast];
	    asts.forEach(function (ast) {
	        if (ast instanceof Statement) {
	            ast.visitStatement(converter, ctx);
	        }
	        else if (ast instanceof Expression) {
	            ast.visitExpression(converter, ctx);
	        }
	        else if (ast instanceof Type$1) {
	            ast.visitType(converter, ctx);
	        }
	        else {
	            throw new Error("Don't know how to print debug info for " + ast);
	        }
	    });
	    return ctx.toSource();
	}
	var TypeScriptEmitter = (function () {
	    /**
	     * @param {?} _importResolver
	     */
	    function TypeScriptEmitter(_importResolver) {
	        this._importResolver = _importResolver;
	    }
	    /**
	     * @param {?} srcFilePath
	     * @param {?} genFilePath
	     * @param {?} stmts
	     * @param {?} exportedVars
	     * @param {?=} preamble
	     * @return {?}
	     */
	    TypeScriptEmitter.prototype.emitStatements = function (srcFilePath, genFilePath, stmts, exportedVars, preamble) {
	        var _this = this;
	        if (preamble === void 0) { preamble = ''; }
	        var /** @type {?} */ converter = new _TsEmitterVisitor(genFilePath, this._importResolver);
	        var /** @type {?} */ ctx = EmitterVisitorContext.createRoot(exportedVars);
	        converter.visitAllStatements(stmts, ctx);
	        var /** @type {?} */ preambleLines = preamble ? preamble.split('\n') : [];
	        converter.reexports.forEach(function (reexports, exportedFilePath) {
	            var /** @type {?} */ reexportsCode = reexports.map(function (reexport) { return reexport.name + " as " + reexport.as; }).join(',');
	            preambleLines.push("export {" + reexportsCode + "} from '" + _this._importResolver.fileNameToModuleName(exportedFilePath, genFilePath) + "';");
	        });
	        converter.importsWithPrefixes.forEach(function (prefix, importedFilePath) {
	            // Note: can't write the real word for import as it screws up system.js auto detection...
	            preambleLines.push("imp" +
	                ("ort * as " + prefix + " from '" + _this._importResolver.fileNameToModuleName(importedFilePath, genFilePath) + "';"));
	        });
	        var /** @type {?} */ sm = ctx.toSourceMapGenerator(srcFilePath, genFilePath, preambleLines.length).toJsComment();
	        var /** @type {?} */ lines = preambleLines.concat([ctx.toSource(), sm]);
	        if (sm) {
	            // always add a newline at the end, as some tools have bugs without it.
	            lines.push('');
	        }
	        return lines.join('\n');
	    };
	    return TypeScriptEmitter;
	}());
	var _TsEmitterVisitor = (function (_super) {
	    __extends(_TsEmitterVisitor, _super);
	    /**
	     * @param {?} _genFilePath
	     * @param {?} _importResolver
	     */
	    function _TsEmitterVisitor(_genFilePath, _importResolver) {
	        var _this = _super.call(this, false) || this;
	        _this._genFilePath = _genFilePath;
	        _this._importResolver = _importResolver;
	        _this.typeExpression = 0;
	        _this.importsWithPrefixes = new Map();
	        _this.reexports = new Map();
	        return _this;
	    }
	    /**
	     * @param {?} t
	     * @param {?} ctx
	     * @param {?=} defaultType
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
	        if (defaultType === void 0) { defaultType = 'any'; }
	        if (t) {
	            this.typeExpression++;
	            t.visitType(this, ctx);
	            this.typeExpression--;
	        }
	        else {
	            ctx.print(null, defaultType);
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	        var /** @type {?} */ value = ast.value;
	        if (value == null && ast.type != INFERRED_TYPE) {
	            ctx.print(ast, "(" + value + " as any)");
	            return null;
	        }
	        return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        if (ast.entries.length === 0) {
	            ctx.print(ast, '(');
	        }
	        var /** @type {?} */ result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
	        if (ast.entries.length === 0) {
	            ctx.print(ast, ' as any[])');
	        }
	        return result;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	        this._visitIdentifier(ast.value, ast.typeParams, ctx);
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        if (ctx.isExportedVar(stmt.name) && stmt.value instanceof ExternalExpr && !stmt.type) {
	            // check for a reexport
	            var _a = this._resolveStaticSymbol(stmt.value.value), name = _a.name, filePath = _a.filePath, members = _a.members;
	            if (((members)).length === 0 && filePath !== this._genFilePath) {
	                var /** @type {?} */ reexports = this.reexports.get(filePath);
	                if (!reexports) {
	                    reexports = [];
	                    this.reexports.set(filePath, reexports);
	                }
	                reexports.push({ name: name, as: stmt.name });
	                return null;
	            }
	        }
	        if (ctx.isExportedVar(stmt.name)) {
	            ctx.print(stmt, "export ");
	        }
	        if (stmt.hasModifier(StmtModifier.Final)) {
	            ctx.print(stmt, "const");
	        }
	        else {
	            ctx.print(stmt, "var");
	        }
	        ctx.print(stmt, " " + stmt.name);
	        this._printColonType(stmt.type, ctx);
	        ctx.print(stmt, " = ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(stmt, ";");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	        ctx.print(ast, "(<"); /** @type {?} */
	        ((ast.type)).visitType(this, ctx);
	        ctx.print(ast, ">");
	        ast.value.visitExpression(this, ctx);
	        ctx.print(ast, ")");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	        ctx.print(ast, "new ");
	        this.typeExpression++;
	        ast.classExpr.visitExpression(this, ctx);
	        this.typeExpression--;
	        ctx.print(ast, "(");
	        this.visitAllExpressions(ast.args, ctx, ',');
	        ctx.print(ast, ")");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var _this = this;
	        ctx.pushClass(stmt);
	        if (ctx.isExportedVar(stmt.name)) {
	            ctx.print(stmt, "export ");
	        }
	        ctx.print(stmt, "class " + stmt.name);
	        if (stmt.parent != null) {
	            ctx.print(stmt, " extends ");
	            this.typeExpression++;
	            stmt.parent.visitExpression(this, ctx);
	            this.typeExpression--;
	        }
	        ctx.println(stmt, " {");
	        ctx.incIndent();
	        stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });
	        if (stmt.constructorMethod != null) {
	            this._visitClassConstructor(stmt, ctx);
	        }
	        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });
	        stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        ctx.popClass();
	        return null;
	    };
	    /**
	     * @param {?} field
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
	        if (field.hasModifier(StmtModifier.Private)) {
	            // comment out as a workaround for #10967
	            ctx.print(null, "/*private*/ ");
	        }
	        ctx.print(null, field.name);
	        this._printColonType(field.type, ctx);
	        ctx.println(null, ";");
	    };
	    /**
	     * @param {?} getter
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
	        if (getter.hasModifier(StmtModifier.Private)) {
	            ctx.print(null, "private ");
	        }
	        ctx.print(null, "get " + getter.name + "()");
	        this._printColonType(getter.type, ctx);
	        ctx.println(null, " {");
	        ctx.incIndent();
	        this.visitAllStatements(getter.body, ctx);
	        ctx.decIndent();
	        ctx.println(null, "}");
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	        ctx.print(stmt, "constructor(");
	        this._visitParams(stmt.constructorMethod.params, ctx);
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.constructorMethod.body, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	    };
	    /**
	     * @param {?} method
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
	        if (method.hasModifier(StmtModifier.Private)) {
	            ctx.print(null, "private ");
	        }
	        ctx.print(null, method.name + "(");
	        this._visitParams(method.params, ctx);
	        ctx.print(null, ")");
	        this._printColonType(method.type, ctx, 'void');
	        ctx.println(null, " {");
	        ctx.incIndent();
	        this.visitAllStatements(method.body, ctx);
	        ctx.decIndent();
	        ctx.println(null, "}");
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	        ctx.print(ast, "(");
	        this._visitParams(ast.params, ctx);
	        ctx.print(ast, ")");
	        this._printColonType(ast.type, ctx, 'void');
	        ctx.println(ast, " => {");
	        ctx.incIndent();
	        this.visitAllStatements(ast.statements, ctx);
	        ctx.decIndent();
	        ctx.print(ast, "}");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        if (ctx.isExportedVar(stmt.name)) {
	            ctx.print(stmt, "export ");
	        }
	        ctx.print(stmt, "function " + stmt.name + "(");
	        this._visitParams(stmt.params, ctx);
	        ctx.print(stmt, ")");
	        this._printColonType(stmt.type, ctx, 'void');
	        ctx.println(stmt, " {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.statements, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        ctx.println(stmt, "try {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.bodyStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	        ctx.incIndent();
	        var /** @type {?} */ catchStmts = [/** @type {?} */ (CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack', null)).toDeclStmt(null, [
	                StmtModifier.Final
	            ]))].concat(stmt.catchStmts);
	        this.visitAllStatements(catchStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    /**
	     * @param {?} type
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
	        var /** @type {?} */ typeStr;
	        switch (type.name) {
	            case BuiltinTypeName.Bool:
	                typeStr = 'boolean';
	                break;
	            case BuiltinTypeName.Dynamic:
	                typeStr = 'any';
	                break;
	            case BuiltinTypeName.Function:
	                typeStr = 'Function';
	                break;
	            case BuiltinTypeName.Number:
	                typeStr = 'number';
	                break;
	            case BuiltinTypeName.Int:
	                typeStr = 'number';
	                break;
	            case BuiltinTypeName.String:
	                typeStr = 'string';
	                break;
	            default:
	                throw new Error("Unsupported builtin type " + type.name);
	        }
	        ctx.print(null, typeStr);
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitExpressionType = function (ast, ctx) {
	        ast.value.visitExpression(this, ctx);
	        return null;
	    };
	    /**
	     * @param {?} type
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
	        this.visitType(type.of, ctx);
	        ctx.print(null, "[]");
	        return null;
	    };
	    /**
	     * @param {?} type
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
	        ctx.print(null, "{[key: string]:");
	        this.visitType(type.valueType, ctx);
	        ctx.print(null, "}");
	        return null;
	    };
	    /**
	     * @param {?} method
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	        var /** @type {?} */ name;
	        switch (method) {
	            case BuiltinMethod.ConcatArray:
	                name = 'concat';
	                break;
	            case BuiltinMethod.SubscribeObservable:
	                name = 'subscribe';
	                break;
	            case BuiltinMethod.Bind:
	                name = 'bind';
	                break;
	            default:
	                throw new Error("Unknown builtin method: " + method);
	        }
	        return name;
	    };
	    /**
	     * @param {?} params
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	        var _this = this;
	        this.visitAllObjects(function (param) {
	            ctx.print(null, param.name);
	            _this._printColonType(param.type, ctx);
	        }, params, ctx, ',');
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._resolveStaticSymbol = function (value) {
	        var /** @type {?} */ reference = value.reference;
	        if (!(reference instanceof StaticSymbol)) {
	            throw new Error("Internal error: unknown identifier " + JSON.stringify(value));
	        }
	        var /** @type {?} */ arity = this._importResolver.getTypeArity(reference) || undefined;
	        var /** @type {?} */ importReference = this._importResolver.getImportAs(reference) || reference;
	        return {
	            name: importReference.name,
	            filePath: importReference.filePath,
	            members: importReference.members, arity: arity
	        };
	    };
	    /**
	     * @param {?} value
	     * @param {?} typeParams
	     * @param {?} ctx
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
	        var _this = this;
	        var _a = this._resolveStaticSymbol(value), name = _a.name, filePath = _a.filePath, members = _a.members, arity = _a.arity;
	        if (filePath != this._genFilePath) {
	            var /** @type {?} */ prefix = this.importsWithPrefixes.get(filePath);
	            if (prefix == null) {
	                prefix = "import" + this.importsWithPrefixes.size;
	                this.importsWithPrefixes.set(filePath, prefix);
	            }
	            ctx.print(null, prefix + ".");
	        }
	        if (((members)).length) {
	            ctx.print(null, name);
	            ctx.print(null, '.');
	            ctx.print(null, /** @type {?} */ ((members)).join('.'));
	        }
	        else {
	            ctx.print(null, name);
	        }
	        if (this.typeExpression > 0) {
	            // If we are in a type expression that refers to a generic type then supply
	            // the required type parameters. If there were not enough type parameters
	            // supplied, supply any as the type. Outside a type expression the reference
	            // should not supply type parameters and be treated as a simple value reference
	            // to the constructor function itself.
	            var /** @type {?} */ suppliedParameters = (typeParams && typeParams.length) || 0;
	            var /** @type {?} */ additionalParameters = (arity || 0) - suppliedParameters;
	            if (suppliedParameters > 0 || additionalParameters > 0) {
	                ctx.print(null, "<");
	                if (suppliedParameters > 0) {
	                    this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, /** @type {?} */ ((typeParams)), ctx, ',');
	                }
	                if (additionalParameters > 0) {
	                    for (var /** @type {?} */ i = 0; i < additionalParameters; i++) {
	                        if (i > 0 || suppliedParameters > 0)
	                            ctx.print(null, ',');
	                        ctx.print(null, 'any');
	                    }
	                }
	                ctx.print(null, ">");
	            }
	        }
	    };
	    /**
	     * @param {?} type
	     * @param {?} ctx
	     * @param {?=} defaultType
	     * @return {?}
	     */
	    _TsEmitterVisitor.prototype._printColonType = function (type, ctx, defaultType) {
	        if (type !== INFERRED_TYPE) {
	            ctx.print(null, ':');
	            this.visitType(type, ctx, defaultType);
	        }
	    };
	    return _TsEmitterVisitor;
	}(AbstractEmitterVisitor));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// =================================================================================================
	// =================================================================================================
	// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	// =================================================================================================
	// =================================================================================================
	//
	//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
	//                               Reach out to mprobst for details.
	//
	// =================================================================================================
	/** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
	var SECURITY_SCHEMA = {};
	/**
	 * @param {?} ctx
	 * @param {?} specs
	 * @return {?}
	 */
	function registerContext(ctx, specs) {
	    for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
	        var spec = specs_1[_i];
	        SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
	    }
	}
	// Case is insignificant below, all element and attribute names are lower-cased for lookup.
	registerContext(_angular_core.SecurityContext.HTML, [
	    'iframe|srcdoc',
	    '*|innerHTML',
	    '*|outerHTML',
	]);
	registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
	// NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
	registerContext(_angular_core.SecurityContext.URL, [
	    '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',
	    'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',
	    'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',
	    'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',
	]);
	registerContext(_angular_core.SecurityContext.RESOURCE_URL, [
	    'applet|code',
	    'applet|codebase',
	    'base|href',
	    'embed|src',
	    'frame|src',
	    'head|profile',
	    'html|manifest',
	    'iframe|src',
	    'link|href',
	    'media|src',
	    'object|codebase',
	    'object|data',
	    'script|src',
	]);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BOOLEAN = 'boolean';
	var NUMBER = 'number';
	var STRING = 'string';
	var OBJECT = 'object';
	/**
	 * This array represents the DOM schema. It encodes inheritance, properties, and events.
	 *
	 * ## Overview
	 *
	 * Each line represents one kind of element. The `element_inheritance` and properties are joined
	 * using `element_inheritance|properties` syntax.
	 *
	 * ## Element Inheritance
	 *
	 * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
	 * Here the individual elements are separated by `,` (commas). Every element in the list
	 * has identical properties.
	 *
	 * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
	 * specified then `""` (blank) element is assumed.
	 *
	 * NOTE: The blank element inherits from root `[Element]` element, the super element of all
	 * elements.
	 *
	 * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
	 *
	 * ## Properties
	 *
	 * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
	 * by a special character designating its type:
	 *
	 * - (no prefix): property is a string.
	 * - `*`: property represents an event.
	 * - `!`: property is a boolean.
	 * - `#`: property is a number.
	 * - `%`: property is an object.
	 *
	 * ## Query
	 *
	 * The class creates an internal squas representation which allows to easily answer the query of
	 * if a given property exist on a given element.
	 *
	 * NOTE: We don't yet support querying for types or events.
	 * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
	 *       see dom_element_schema_registry_spec.ts
	 */
	// =================================================================================================
	// =================================================================================================
	// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	// =================================================================================================
	// =================================================================================================
	//
	//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
	//
	// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
	// dom_security_schema.ts. Reach out to mprobst & rjamet for details.
	//
	// =================================================================================================
	var SCHEMA = [
	    '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',
	    '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	    'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	    'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',
	    ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
	    ':svg:graphics^:svg:|',
	    ':svg:animation^:svg:|*begin,*end,*repeat',
	    ':svg:geometry^:svg:|',
	    ':svg:componentTransferFunction^:svg:|',
	    ':svg:gradient^:svg:|',
	    ':svg:textContent^:svg:graphics|',
	    ':svg:textPositioning^:svg:textContent|',
	    'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',
	    'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',
	    'audio^media|',
	    'br^[HTMLElement]|clear',
	    'base^[HTMLElement]|href,target',
	    'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
	    'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
	    'canvas^[HTMLElement]|#height,#width',
	    'content^[HTMLElement]|select',
	    'dl^[HTMLElement]|!compact',
	    'datalist^[HTMLElement]|',
	    'details^[HTMLElement]|!open',
	    'dialog^[HTMLElement]|!open,returnValue',
	    'dir^[HTMLElement]|!compact',
	    'div^[HTMLElement]|align',
	    'embed^[HTMLElement]|align,height,name,src,type,width',
	    'fieldset^[HTMLElement]|!disabled,name',
	    'font^[HTMLElement]|color,face,size',
	    'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
	    'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
	    'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
	    'hr^[HTMLElement]|align,color,!noShade,size,width',
	    'head^[HTMLElement]|',
	    'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',
	    'html^[HTMLElement]|version',
	    'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',
	    'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',
	    'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
	    'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',
	    'li^[HTMLElement]|type,#value',
	    'label^[HTMLElement]|htmlFor',
	    'legend^[HTMLElement]|align',
	    'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',
	    'map^[HTMLElement]|name',
	    'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
	    'menu^[HTMLElement]|!compact',
	    'meta^[HTMLElement]|content,httpEquiv,name,scheme',
	    'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',
	    'ins,del^[HTMLElement]|cite,dateTime',
	    'ol^[HTMLElement]|!compact,!reversed,#start,type',
	    'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
	    'optgroup^[HTMLElement]|!disabled,label',
	    'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',
	    'output^[HTMLElement]|defaultValue,%htmlFor,name,value',
	    'p^[HTMLElement]|align',
	    'param^[HTMLElement]|name,type,value,valueType',
	    'picture^[HTMLElement]|',
	    'pre^[HTMLElement]|#width',
	    'progress^[HTMLElement]|#max,#value',
	    'q,blockquote,cite^[HTMLElement]|',
	    'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
	    'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
	    'shadow^[HTMLElement]|',
	    'source^[HTMLElement]|media,sizes,src,srcset,type',
	    'span^[HTMLElement]|',
	    'style^[HTMLElement]|!disabled,media,type',
	    'caption^[HTMLElement]|align',
	    'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
	    'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',
	    'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
	    'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',
	    'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',
	    'template^[HTMLElement]|',
	    'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
	    'title^[HTMLElement]|text',
	    'track^[HTMLElement]|!default,kind,label,src,srclang',
	    'ul^[HTMLElement]|!compact,type',
	    'unknown^[HTMLElement]|',
	    'video^media|#height,poster,#width',
	    ':svg:a^:svg:graphics|',
	    ':svg:animate^:svg:animation|',
	    ':svg:animateMotion^:svg:animation|',
	    ':svg:animateTransform^:svg:animation|',
	    ':svg:circle^:svg:geometry|',
	    ':svg:clipPath^:svg:graphics|',
	    ':svg:cursor^:svg:|',
	    ':svg:defs^:svg:graphics|',
	    ':svg:desc^:svg:|',
	    ':svg:discard^:svg:|',
	    ':svg:ellipse^:svg:geometry|',
	    ':svg:feBlend^:svg:|',
	    ':svg:feColorMatrix^:svg:|',
	    ':svg:feComponentTransfer^:svg:|',
	    ':svg:feComposite^:svg:|',
	    ':svg:feConvolveMatrix^:svg:|',
	    ':svg:feDiffuseLighting^:svg:|',
	    ':svg:feDisplacementMap^:svg:|',
	    ':svg:feDistantLight^:svg:|',
	    ':svg:feDropShadow^:svg:|',
	    ':svg:feFlood^:svg:|',
	    ':svg:feFuncA^:svg:componentTransferFunction|',
	    ':svg:feFuncB^:svg:componentTransferFunction|',
	    ':svg:feFuncG^:svg:componentTransferFunction|',
	    ':svg:feFuncR^:svg:componentTransferFunction|',
	    ':svg:feGaussianBlur^:svg:|',
	    ':svg:feImage^:svg:|',
	    ':svg:feMerge^:svg:|',
	    ':svg:feMergeNode^:svg:|',
	    ':svg:feMorphology^:svg:|',
	    ':svg:feOffset^:svg:|',
	    ':svg:fePointLight^:svg:|',
	    ':svg:feSpecularLighting^:svg:|',
	    ':svg:feSpotLight^:svg:|',
	    ':svg:feTile^:svg:|',
	    ':svg:feTurbulence^:svg:|',
	    ':svg:filter^:svg:|',
	    ':svg:foreignObject^:svg:graphics|',
	    ':svg:g^:svg:graphics|',
	    ':svg:image^:svg:graphics|',
	    ':svg:line^:svg:geometry|',
	    ':svg:linearGradient^:svg:gradient|',
	    ':svg:mpath^:svg:|',
	    ':svg:marker^:svg:|',
	    ':svg:mask^:svg:|',
	    ':svg:metadata^:svg:|',
	    ':svg:path^:svg:geometry|',
	    ':svg:pattern^:svg:|',
	    ':svg:polygon^:svg:geometry|',
	    ':svg:polyline^:svg:geometry|',
	    ':svg:radialGradient^:svg:gradient|',
	    ':svg:rect^:svg:geometry|',
	    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
	    ':svg:script^:svg:|type',
	    ':svg:set^:svg:animation|',
	    ':svg:stop^:svg:|',
	    ':svg:style^:svg:|!disabled,media,title,type',
	    ':svg:switch^:svg:graphics|',
	    ':svg:symbol^:svg:|',
	    ':svg:tspan^:svg:textPositioning|',
	    ':svg:text^:svg:textPositioning|',
	    ':svg:textPath^:svg:textContent|',
	    ':svg:title^:svg:|',
	    ':svg:use^:svg:graphics|',
	    ':svg:view^:svg:|#zoomAndPan',
	    'data^[HTMLElement]|value',
	    'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',
	    'summary^[HTMLElement]|',
	    'time^[HTMLElement]|dateTime',
	];
	var _ATTR_TO_PROP = {
	    'class': 'className',
	    'for': 'htmlFor',
	    'formaction': 'formAction',
	    'innerHtml': 'innerHTML',
	    'readonly': 'readOnly',
	    'tabindex': 'tabIndex',
	};
	var DomElementSchemaRegistry = (function (_super) {
	    __extends(DomElementSchemaRegistry, _super);
	    function DomElementSchemaRegistry() {
	        var _this = _super.call(this) || this;
	        _this._schema = {};
	        SCHEMA.forEach(function (encodedType) {
	            var type = {};
	            var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];
	            var properties = strProperties.split(',');
	            var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];
	            typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });
	            var superType = superName && _this._schema[superName.toLowerCase()];
	            if (superType) {
	                Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });
	            }
	            properties.forEach(function (property) {
	                if (property.length > 0) {
	                    switch (property[0]) {
	                        case '*':
	                            // We don't yet support events.
	                            // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
	                            // will
	                            // almost certainly introduce bad XSS vulnerabilities.
	                            // type[property.substring(1)] = EVENT;
	                            break;
	                        case '!':
	                            type[property.substring(1)] = BOOLEAN;
	                            break;
	                        case '#':
	                            type[property.substring(1)] = NUMBER;
	                            break;
	                        case '%':
	                            type[property.substring(1)] = OBJECT;
	                            break;
	                        default:
	                            type[property] = STRING;
	                    }
	                }
	            });
	        });
	        return _this;
	    }
	    /**
	     * @param {?} tagName
	     * @param {?} propName
	     * @param {?} schemaMetas
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
	        if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	            return true;
	        }
	        if (tagName.indexOf('-') > -1) {
	            if (isNgContainer(tagName) || isNgContent(tagName)) {
	                return false;
	            }
	            if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                // Can't tell now as we don't know which properties a custom element will get
	                // once it is instantiated
	                return true;
	            }
	        }
	        var /** @type {?} */ elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
	        return !!elementProperties[propName];
	    };
	    /**
	     * @param {?} tagName
	     * @param {?} schemaMetas
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
	        if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	            return true;
	        }
	        if (tagName.indexOf('-') > -1) {
	            if (isNgContainer(tagName) || isNgContent(tagName)) {
	                return true;
	            }
	            if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                // Allow any custom elements
	                return true;
	            }
	        }
	        return !!this._schema[tagName.toLowerCase()];
	    };
	    /**
	     * securityContext returns the security context for the given property on the given DOM tag.
	     *
	     * Tag and property name are statically known and cannot change at runtime, i.e. it is not
	     * possible to bind a value into a changing attribute or tag name.
	     *
	     * The filtering is white list based. All attributes in the schema above are assumed to have the
	     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
	     * attack vectors are assigned their appropriate context.
	     * @param {?} tagName
	     * @param {?} propName
	     * @param {?} isAttribute
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) {
	        if (isAttribute) {
	            // NB: For security purposes, use the mapped property name, not the attribute name.
	            propName = this.getMappedPropName(propName);
	        }
	        // Make sure comparisons are case insensitive, so that case differences between attribute and
	        // property names do not have a security impact.
	        tagName = tagName.toLowerCase();
	        propName = propName.toLowerCase();
	        var /** @type {?} */ ctx = SECURITY_SCHEMA[tagName + '|' + propName];
	        if (ctx) {
	            return ctx;
	        }
	        ctx = SECURITY_SCHEMA['*|' + propName];
	        return ctx ? ctx : _angular_core.SecurityContext.NONE;
	    };
	    /**
	     * @param {?} propName
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return _ATTR_TO_PROP[propName] || propName; };
	    /**
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.validateProperty = function (name) {
	        if (name.toLowerCase().startsWith('on')) {
	            var /** @type {?} */ msg = "Binding to event property '" + name + "' is disallowed for security reasons, " +
	                ("please use (" + name.slice(2) + ")=...") +
	                ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") +
	                " current module.";
	            return { error: true, msg: msg };
	        }
	        else {
	            return { error: false };
	        }
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.validateAttribute = function (name) {
	        if (name.toLowerCase().startsWith('on')) {
	            var /** @type {?} */ msg = "Binding to event attribute '" + name + "' is disallowed for security reasons, " +
	                ("please use (" + name.slice(2) + ")=...");
	            return { error: true, msg: msg };
	        }
	        else {
	            return { error: false };
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this._schema); };
	    /**
	     * @param {?} propName
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {
	        return dashCaseToCamelCase(propName);
	    };
	    /**
	     * @param {?} camelCaseProp
	     * @param {?} userProvidedProp
	     * @param {?} val
	     * @return {?}
	     */
	    DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {
	        var /** @type {?} */ unit = '';
	        var /** @type {?} */ strVal = val.toString().trim();
	        var /** @type {?} */ errorMsg = ((null));
	        if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
	            if (typeof val === 'number') {
	                unit = 'px';
	            }
	            else {
	                var /** @type {?} */ valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
	                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
	                    errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
	                }
	            }
	        }
	        return { error: errorMsg, value: strVal + unit };
	    };
	    return DomElementSchemaRegistry;
	}(ElementSchemaRegistry));
	DomElementSchemaRegistry.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	DomElementSchemaRegistry.ctorParameters = function () { return []; };
	/**
	 * @param {?} prop
	 * @return {?}
	 */
	function _isPixelDimensionStyle(prop) {
	    switch (prop) {
	        case 'width':
	        case 'height':
	        case 'minWidth':
	        case 'minHeight':
	        case 'maxWidth':
	        case 'maxHeight':
	        case 'left':
	        case 'top':
	        case 'bottom':
	        case 'right':
	        case 'fontSize':
	        case 'outlineWidth':
	        case 'outlineOffset':
	        case 'paddingTop':
	        case 'paddingLeft':
	        case 'paddingBottom':
	        case 'paddingRight':
	        case 'marginTop':
	        case 'marginLeft':
	        case 'marginBottom':
	        case 'marginRight':
	        case 'borderRadius':
	        case 'borderWidth':
	        case 'borderTopWidth':
	        case 'borderLeftWidth':
	        case 'borderRightWidth':
	        case 'borderBottomWidth':
	        case 'textIndent':
	            return true;
	        default:
	            return false;
	    }
	}
	var ShadowCss = (function () {
	    function ShadowCss() {
	        this.strictStyling = true;
	    }
	    /**
	     * @param {?} cssText
	     * @param {?} selector
	     * @param {?=} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	        if (hostSelector === void 0) { hostSelector = ''; }
	        var /** @type {?} */ sourceMappingUrl = extractSourceMappingUrl(cssText);
	        cssText = stripComments(cssText);
	        cssText = this._insertDirectives(cssText);
	        return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._insertDirectives = function (cssText) {
	        cssText = this._insertPolyfillDirectivesInCssText(cssText);
	        return this._insertPolyfillRulesInCssText(cssText);
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return cssText.replace(_cssContentNextSelectorRe, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i] = arguments[_i];
	            }
	            return m[2] + '{';
	        });
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return cssText.replace(_cssContentRuleRe, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i] = arguments[_i];
	            }
	            var /** @type {?} */ rule = m[0].replace(m[1], '').replace(m[2], '');
	            return m[4] + rule;
	        });
	    };
	    /**
	     * @param {?} cssText
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	        var /** @type {?} */ unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
	        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
	        cssText = this._insertPolyfillHostInCssText(cssText);
	        cssText = this._convertColonHost(cssText);
	        cssText = this._convertColonHostContext(cssText);
	        cssText = this._convertShadowDOMSelectors(cssText);
	        if (scopeSelector) {
	            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	        }
	        cssText = cssText + '\n' + unscopedRules;
	        return cssText.trim();
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        var /** @type {?} */ r = '';
	        var /** @type {?} */ m;
	        _cssContentUnscopedRuleRe.lastIndex = 0;
	        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
	            var /** @type {?} */ rule = m[0].replace(m[2], '').replace(m[1], m[4]);
	            r += rule + '\n\n';
	        }
	        return r;
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._convertColonHost = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._convertColonHostContext = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	    };
	    /**
	     * @param {?} cssText
	     * @param {?} regExp
	     * @param {?} partReplacer
	     * @return {?}
	     */
	    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule
	        return cssText.replace(regExp, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i] = arguments[_i];
	            }
	            if (m[2]) {
	                var /** @type {?} */ parts = m[2].split(',');
	                var /** @type {?} */ r = [];
	                for (var /** @type {?} */ i = 0; i < parts.length; i++) {
	                    var /** @type {?} */ p = parts[i].trim();
	                    if (!p)
	                        break;
	                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                }
	                return r.join(',');
	            }
	            else {
	                return _polyfillHostNoCombinator + m[3];
	            }
	        });
	    };
	    /**
	     * @param {?} host
	     * @param {?} part
	     * @param {?} suffix
	     * @return {?}
	     */
	    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	        if (part.indexOf(_polyfillHost) > -1) {
	            return this._colonHostPartReplacer(host, part, suffix);
	        }
	        else {
	            return host + part + suffix + ', ' + part + ' ' + host + suffix;
	        }
	    };
	    /**
	     * @param {?} host
	     * @param {?} part
	     * @param {?} suffix
	     * @return {?}
	     */
	    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	        return host + part.replace(_polyfillHost, '') + suffix;
	    };
	    /**
	     * @param {?} cssText
	     * @return {?}
	     */
	    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	        return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);
	    };
	    /**
	     * @param {?} cssText
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	        var _this = this;
	        return processRules(cssText, function (rule) {
	            var /** @type {?} */ selector = rule.selector;
	            var /** @type {?} */ content = rule.content;
	            if (rule.selector[0] != '@') {
	                selector =
	                    _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	            }
	            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||
	                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
	                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	            }
	            return new CssRule(selector, content);
	        });
	    };
	    /**
	     * @param {?} selector
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @param {?} strict
	     * @return {?}
	     */
	    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	        var _this = this;
	        return selector.split(',')
	            .map(function (part) { return part.trim().split(_shadowDeepSelectors); })
	            .map(function (deepParts) {
	            var shallowPart = deepParts[0], otherParts = deepParts.slice(1);
	            var /** @type {?} */ applyScope = function (shallowPart) {
	                if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
	                    return strict ?
	                        _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :
	                        _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
	                }
	                else {
	                    return shallowPart;
	                }
	            };
	            return [applyScope(shallowPart)].concat(otherParts).join(' ');
	        })
	            .join(', ');
	    };
	    /**
	     * @param {?} selector
	     * @param {?} scopeSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	        var /** @type {?} */ re = this._makeScopeMatcher(scopeSelector);
	        return !re.test(selector);
	    };
	    /**
	     * @param {?} scopeSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	        var /** @type {?} */ lre = /\[/g;
	        var /** @type {?} */ rre = /\]/g;
	        scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
	        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	    };
	    /**
	     * @param {?} selector
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	        // Difference from webcomponents.js: scopeSelector could not be an array
	        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	    };
	    /**
	     * @param {?} selector
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
	        _polyfillHostRe.lastIndex = 0;
	        if (_polyfillHostRe.test(selector)) {
	            var /** @type {?} */ replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	            return selector
	                .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
	                return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
	                    return before + replaceBy_1 + colon + after;
	                });
	            })
	                .replace(_polyfillHostRe, replaceBy_1 + ' ');
	        }
	        return scopeSelector + ' ' + selector;
	    };
	    /**
	     * @param {?} selector
	     * @param {?} scopeSelector
	     * @param {?} hostSelector
	     * @return {?}
	     */
	    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {
	        var _this = this;
	        var /** @type {?} */ isRe = /\[is=([^\]]*)\]/g;
	        scopeSelector = scopeSelector.replace(isRe, function (_) {
	            var parts = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                parts[_i - 1] = arguments[_i];
	            }
	            return parts[0];
	        });
	        var /** @type {?} */ attrName = '[' + scopeSelector + ']';
	        var /** @type {?} */ _scopeSelectorPart = function (p) {
	            var /** @type {?} */ scopedP = p.trim();
	            if (!scopedP) {
	                return '';
	            }
	            if (p.indexOf(_polyfillHostNoCombinator) > -1) {
	                scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
	            }
	            else {
	                // remove :host since it should be unnecessary
	                var /** @type {?} */ t = p.replace(_polyfillHostRe, '');
	                if (t.length > 0) {
	                    var /** @type {?} */ matches = t.match(/([^:]*)(:*)(.*)/);
	                    if (matches) {
	                        scopedP = matches[1] + attrName + matches[2] + matches[3];
	                    }
	                }
	            }
	            return scopedP;
	        };
	        var /** @type {?} */ safeContent = new SafeSelector(selector);
	        selector = safeContent.content();
	        var /** @type {?} */ scopedSelector = '';
	        var /** @type {?} */ startIndex = 0;
	        var /** @type {?} */ res;
	        var /** @type {?} */ sep = /( |>|\+|~(?!=))\s*/g;
	        var /** @type {?} */ scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
	        while ((res = sep.exec(selector)) !== null) {
	            var /** @type {?} */ separator = res[1];
	            var /** @type {?} */ part = selector.slice(startIndex, res.index).trim();
	            // if a selector appears before :host-context it should not be shimmed as it
	            // matches on ancestor elements and not on elements in the host's shadow
	            var /** @type {?} */ scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
	            scopedSelector += scopedPart + " " + separator + " ";
	            startIndex = sep.lastIndex;
	        }
	        scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
	        // replace the placeholders with their original values
	        return safeContent.restore(scopedSelector);
	    };
	    /**
	     * @param {?} selector
	     * @return {?}
	     */
	    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	        return selector.replace(_colonHostContextRe, _polyfillHostContext)
	            .replace(_colonHostRe, _polyfillHost);
	    };
	    return ShadowCss;
	}());
	var SafeSelector = (function () {
	    /**
	     * @param {?} selector
	     */
	    function SafeSelector(selector) {
	        var _this = this;
	        this.placeholders = [];
	        this.index = 0;
	        // Replaces attribute selectors with placeholders.
	        // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
	        selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) {
	            var replaceBy = "__ph-" + _this.index + "__";
	            _this.placeholders.push(keep);
	            _this.index++;
	            return replaceBy;
	        });
	        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
	        // WS and "+" would otherwise be interpreted as selector separators.
	        this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
	            var replaceBy = "__ph-" + _this.index + "__";
	            _this.placeholders.push(exp);
	            _this.index++;
	            return pseudo + replaceBy;
	        });
	    }
	    
	    /**
	     * @param {?} content
	     * @return {?}
	     */
	    SafeSelector.prototype.restore = function (content) {
	        var _this = this;
	        return content.replace(/__ph-(\d+)__/g, function (ph, index) { return _this.placeholders[+index]; });
	    };
	    /**
	     * @return {?}
	     */
	    SafeSelector.prototype.content = function () { return this._content; };
	    return SafeSelector;
	}());
	var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
	var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	var _polyfillHost = '-shadowcsshost';
	// note: :host-context pre-processed to -shadowcsshostcontext.
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' +
	    '(?:\\([^)(]*\\)|[^)(]*)+?' +
	    ')\\))?([^,{]*)';
	var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
	var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
	var _shadowDOMSelectorsRe = [
	    /::shadow/g,
	    /::content/g,
	    // Deprecated selectors
	    /\/shadow-deep\//g,
	    /\/shadow\//g,
	];
	var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
	var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = /-shadowcsshost/gim;
	var _colonHostRe = /:host/gim;
	var _colonHostContextRe = /:host-context/gim;
	var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function stripComments(input) {
	    return input.replace(_commentRe, '');
	}
	// all comments except inline source mapping
	var _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function extractSourceMappingUrl(input) {
	    var /** @type {?} */ matcher = input.match(_sourceMappingUrlRe);
	    return matcher ? matcher[0] : '';
	}
	var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	var _curlyRe = /([{}])/g;
	var OPEN_CURLY = '{';
	var CLOSE_CURLY = '}';
	var BLOCK_PLACEHOLDER = '%BLOCK%';
	var CssRule = (function () {
	    /**
	     * @param {?} selector
	     * @param {?} content
	     */
	    function CssRule(selector, content) {
	        this.selector = selector;
	        this.content = content;
	    }
	    return CssRule;
	}());
	/**
	 * @param {?} input
	 * @param {?} ruleCallback
	 * @return {?}
	 */
	function processRules(input, ruleCallback) {
	    var /** @type {?} */ inputWithEscapedBlocks = escapeBlocks(input);
	    var /** @type {?} */ nextBlockIndex = 0;
	    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        var /** @type {?} */ selector = m[2];
	        var /** @type {?} */ content = '';
	        var /** @type {?} */ suffix = m[4];
	        var /** @type {?} */ contentPrefix = '';
	        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
	            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
	            contentPrefix = '{';
	        }
	        var /** @type {?} */ rule = ruleCallback(new CssRule(selector, content));
	        return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	    });
	}
	var StringWithEscapedBlocks = (function () {
	    /**
	     * @param {?} escapedString
	     * @param {?} blocks
	     */
	    function StringWithEscapedBlocks(escapedString, blocks) {
	        this.escapedString = escapedString;
	        this.blocks = blocks;
	    }
	    return StringWithEscapedBlocks;
	}());
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function escapeBlocks(input) {
	    var /** @type {?} */ inputParts = input.split(_curlyRe);
	    var /** @type {?} */ resultParts = [];
	    var /** @type {?} */ escapedBlocks = [];
	    var /** @type {?} */ bracketCount = 0;
	    var /** @type {?} */ currentBlockParts = [];
	    for (var /** @type {?} */ partIndex = 0; partIndex < inputParts.length; partIndex++) {
	        var /** @type {?} */ part = inputParts[partIndex];
	        if (part == CLOSE_CURLY) {
	            bracketCount--;
	        }
	        if (bracketCount > 0) {
	            currentBlockParts.push(part);
	        }
	        else {
	            if (currentBlockParts.length > 0) {
	                escapedBlocks.push(currentBlockParts.join(''));
	                resultParts.push(BLOCK_PLACEHOLDER);
	                currentBlockParts = [];
	            }
	            resultParts.push(part);
	        }
	        if (part == OPEN_CURLY) {
	            bracketCount++;
	        }
	    }
	    if (currentBlockParts.length > 0) {
	        escapedBlocks.push(currentBlockParts.join(''));
	        resultParts.push(BLOCK_PLACEHOLDER);
	    }
	    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var COMPONENT_VARIABLE = '%COMP%';
	var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	var StylesCompileDependency = (function () {
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} isShimmed
	     * @param {?} valuePlaceholder
	     */
	    function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) {
	        this.name = name;
	        this.moduleUrl = moduleUrl;
	        this.isShimmed = isShimmed;
	        this.valuePlaceholder = valuePlaceholder;
	    }
	    return StylesCompileDependency;
	}());
	var StylesCompileResult = (function () {
	    /**
	     * @param {?} componentStylesheet
	     * @param {?} externalStylesheets
	     */
	    function StylesCompileResult(componentStylesheet, externalStylesheets) {
	        this.componentStylesheet = componentStylesheet;
	        this.externalStylesheets = externalStylesheets;
	    }
	    return StylesCompileResult;
	}());
	var CompiledStylesheet = (function () {
	    /**
	     * @param {?} statements
	     * @param {?} stylesVar
	     * @param {?} dependencies
	     * @param {?} isShimmed
	     * @param {?} meta
	     */
	    function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
	        this.statements = statements;
	        this.stylesVar = stylesVar;
	        this.dependencies = dependencies;
	        this.isShimmed = isShimmed;
	        this.meta = meta;
	    }
	    return CompiledStylesheet;
	}());
	var StyleCompiler = (function () {
	    /**
	     * @param {?} _urlResolver
	     */
	    function StyleCompiler(_urlResolver) {
	        this._urlResolver = _urlResolver;
	        this._shadowCss = new ShadowCss();
	    }
	    /**
	     * @param {?} comp
	     * @return {?}
	     */
	    StyleCompiler.prototype.compileComponent = function (comp) {
	        var _this = this;
	        var /** @type {?} */ template = ((comp.template));
	        var /** @type {?} */ externalStylesheets = [];
	        var /** @type {?} */ componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
	            styles: template.styles,
	            styleUrls: template.styleUrls,
	            moduleUrl: identifierModuleUrl(comp.type)
	        }), true);
	        template.externalStylesheets.forEach(function (stylesheetMeta) {
	            var /** @type {?} */ compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
	            externalStylesheets.push(compiledStylesheet);
	        });
	        return new StylesCompileResult(componentStylesheet, externalStylesheets);
	    };
	    /**
	     * @param {?} comp
	     * @param {?} stylesheet
	     * @param {?} isComponentStylesheet
	     * @return {?}
	     */
	    StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {
	        var _this = this;
	        var /** @type {?} */ shim = ((comp.template)).encapsulation === _angular_core.ViewEncapsulation.Emulated;
	        var /** @type {?} */ styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)); });
	        var /** @type {?} */ dependencies = [];
	        for (var /** @type {?} */ i = 0; i < stylesheet.styleUrls.length; i++) {
	            var /** @type {?} */ identifier = { reference: null };
	            dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier));
	            styleExpressions.push(new ExternalExpr(identifier));
	        }
	        // styles variable contains plain strings and arrays of other styles arrays (recursive),
	        // so we set its type to dynamic.
	        var /** @type {?} */ stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
	        var /** @type {?} */ stmt = variable(stylesVar)
	            .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))
	            .toDeclStmt(null, [StmtModifier.Final]);
	        return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
	    };
	    /**
	     * @param {?} style
	     * @param {?} shim
	     * @return {?}
	     */
	    StyleCompiler.prototype._shimIfNeeded = function (style$$1, shim) {
	        return shim ? this._shadowCss.shimCssText(style$$1, CONTENT_ATTR, HOST_ATTR) : style$$1;
	    };
	    return StyleCompiler;
	}());
	StyleCompiler.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	StyleCompiler.ctorParameters = function () { return [
	    { type: UrlResolver, },
	]; };
	/**
	 * @param {?} component
	 * @return {?}
	 */
	function getStylesVarName(component) {
	    var /** @type {?} */ result = "styles";
	    if (component) {
	        result += "_" + identifierName(component.type);
	    }
	    return result;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EventHandlerVars = (function () {
	    function EventHandlerVars() {
	    }
	    return EventHandlerVars;
	}());
	EventHandlerVars.event = variable('$event');
	var ConvertActionBindingResult = (function () {
	    /**
	     * @param {?} stmts
	     * @param {?} allowDefault
	     */
	    function ConvertActionBindingResult(stmts, allowDefault) {
	        this.stmts = stmts;
	        this.allowDefault = allowDefault;
	    }
	    return ConvertActionBindingResult;
	}());
	/**
	 * Converts the given expression AST into an executable output AST, assuming the expression is
	 * used in an action binding (e.g. an event handler).
	 * @param {?} localResolver
	 * @param {?} implicitReceiver
	 * @param {?} action
	 * @param {?} bindingId
	 * @return {?}
	 */
	function convertActionBinding(localResolver, implicitReceiver, action, bindingId) {
	    if (!localResolver) {
	        localResolver = new DefaultLocalResolver();
	    }
	    var /** @type {?} */ actionWithoutBuiltins = convertPropertyBindingBuiltins({
	        createLiteralArrayConverter: function (argCount) {
	            // Note: no caching for literal arrays in actions.
	            return function (args) { return literalArr(args); };
	        },
	        createLiteralMapConverter: function (keys) {
	            // Note: no caching for literal maps in actions.
	            return function (args) { return literalMap(/** @type {?} */ (keys.map(function (key, i) { return [key, args[i]]; }))); };
	        },
	        createPipeConverter: function (name) {
	            throw new Error("Illegal State: Actions are not allowed to contain pipes. Pipe: " + name);
	        }
	    }, action);
	    var /** @type {?} */ visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);
	    var /** @type {?} */ actionStmts = [];
	    flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);
	    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
	    var /** @type {?} */ lastIndex = actionStmts.length - 1;
	    var /** @type {?} */ preventDefaultVar = ((null));
	    if (lastIndex >= 0) {
	        var /** @type {?} */ lastStatement = actionStmts[lastIndex];
	        var /** @type {?} */ returnExpr = convertStmtIntoExpression(lastStatement);
	        if (returnExpr) {
	            // Note: We need to cast the result of the method call to dynamic,
	            // as it might be a void method!
	            preventDefaultVar = createPreventDefaultVar(bindingId);
	            actionStmts[lastIndex] =
	                preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))
	                    .toDeclStmt(null, [StmtModifier.Final]);
	        }
	    }
	    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
	}
	/**
	 * @param {?} converterFactory
	 * @param {?} ast
	 * @return {?}
	 */
	function convertPropertyBindingBuiltins(converterFactory, ast) {
	    return convertBuiltins(converterFactory, ast);
	}
	var ConvertPropertyBindingResult = (function () {
	    /**
	     * @param {?} stmts
	     * @param {?} currValExpr
	     */
	    function ConvertPropertyBindingResult(stmts, currValExpr) {
	        this.stmts = stmts;
	        this.currValExpr = currValExpr;
	    }
	    return ConvertPropertyBindingResult;
	}());
	/**
	 * Converts the given expression AST into an executable output AST, assuming the expression
	 * is used in property binding. The expression has to be preprocessed via
	 * `convertPropertyBindingBuiltins`.
	 * @param {?} localResolver
	 * @param {?} implicitReceiver
	 * @param {?} expressionWithoutBuiltins
	 * @param {?} bindingId
	 * @return {?}
	 */
	function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {
	    if (!localResolver) {
	        localResolver = new DefaultLocalResolver();
	    }
	    var /** @type {?} */ currValExpr = createCurrValueExpr(bindingId);
	    var /** @type {?} */ stmts = [];
	    var /** @type {?} */ visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);
	    var /** @type {?} */ outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);
	    if (visitor.temporaryCount) {
	        for (var /** @type {?} */ i = 0; i < visitor.temporaryCount; i++) {
	            stmts.push(temporaryDeclaration(bindingId, i));
	        }
	    }
	    stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
	    return new ConvertPropertyBindingResult(stmts, currValExpr);
	}
	/**
	 * @param {?} converterFactory
	 * @param {?} ast
	 * @return {?}
	 */
	function convertBuiltins(converterFactory, ast) {
	    var /** @type {?} */ visitor = new _BuiltinAstConverter(converterFactory);
	    return ast.visit(visitor);
	}
	/**
	 * @param {?} bindingId
	 * @param {?} temporaryNumber
	 * @return {?}
	 */
	function temporaryName(bindingId, temporaryNumber) {
	    return "tmp_" + bindingId + "_" + temporaryNumber;
	}
	/**
	 * @param {?} bindingId
	 * @param {?} temporaryNumber
	 * @return {?}
	 */
	function temporaryDeclaration(bindingId, temporaryNumber) {
	    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
	}
	/**
	 * @param {?} temporaryCount
	 * @param {?} bindingId
	 * @param {?} statements
	 * @return {?}
	 */
	function prependTemporaryDecls(temporaryCount, bindingId, statements) {
	    for (var /** @type {?} */ i = temporaryCount - 1; i >= 0; i--) {
	        statements.unshift(temporaryDeclaration(bindingId, i));
	    }
	}
	var _Mode = {};
	_Mode.Statement = 0;
	_Mode.Expression = 1;
	_Mode[_Mode.Statement] = "Statement";
	_Mode[_Mode.Expression] = "Expression";
	/**
	 * @param {?} mode
	 * @param {?} ast
	 * @return {?}
	 */
	function ensureStatementMode(mode, ast) {
	    if (mode !== _Mode.Statement) {
	        throw new Error("Expected a statement, but saw " + ast);
	    }
	}
	/**
	 * @param {?} mode
	 * @param {?} ast
	 * @return {?}
	 */
	function ensureExpressionMode(mode, ast) {
	    if (mode !== _Mode.Expression) {
	        throw new Error("Expected an expression, but saw " + ast);
	    }
	}
	/**
	 * @param {?} mode
	 * @param {?} expr
	 * @return {?}
	 */
	function convertToStatementIfNeeded(mode, expr) {
	    if (mode === _Mode.Statement) {
	        return expr.toStmt();
	    }
	    else {
	        return expr;
	    }
	}
	var _BuiltinAstConverter = (function (_super) {
	    __extends(_BuiltinAstConverter, _super);
	    /**
	     * @param {?} _converterFactory
	     */
	    function _BuiltinAstConverter(_converterFactory) {
	        var _this = _super.call(this) || this;
	        _this._converterFactory = _converterFactory;
	        return _this;
	    }
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    _BuiltinAstConverter.prototype.visitPipe = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ args = [ast.exp].concat(ast.args).map(function (ast) { return ast.visit(_this, context); });
	        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    _BuiltinAstConverter.prototype.visitLiteralArray = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ args = ast.expressions.map(function (ast) { return ast.visit(_this, context); });
	        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    _BuiltinAstConverter.prototype.visitLiteralMap = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ args = ast.values.map(function (ast) { return ast.visit(_this, context); });
	        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));
	    };
	    return _BuiltinAstConverter;
	}(AstTransformer));
	var _AstToIrVisitor = (function () {
	    /**
	     * @param {?} _localResolver
	     * @param {?} _implicitReceiver
	     * @param {?} bindingId
	     */
	    function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId) {
	        this._localResolver = _localResolver;
	        this._implicitReceiver = _implicitReceiver;
	        this.bindingId = bindingId;
	        this._nodeMap = new Map();
	        this._resultMap = new Map();
	        this._currentTemporary = 0;
	        this.temporaryCount = 0;
	    }
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
	        var /** @type {?} */ op;
	        switch (ast.operation) {
	            case '+':
	                op = BinaryOperator.Plus;
	                break;
	            case '-':
	                op = BinaryOperator.Minus;
	                break;
	            case '*':
	                op = BinaryOperator.Multiply;
	                break;
	            case '/':
	                op = BinaryOperator.Divide;
	                break;
	            case '%':
	                op = BinaryOperator.Modulo;
	                break;
	            case '&&':
	                op = BinaryOperator.And;
	                break;
	            case '||':
	                op = BinaryOperator.Or;
	                break;
	            case '==':
	                op = BinaryOperator.Equals;
	                break;
	            case '!=':
	                op = BinaryOperator.NotEquals;
	                break;
	            case '===':
	                op = BinaryOperator.Identical;
	                break;
	            case '!==':
	                op = BinaryOperator.NotIdentical;
	                break;
	            case '<':
	                op = BinaryOperator.Lower;
	                break;
	            case '>':
	                op = BinaryOperator.Bigger;
	                break;
	            case '<=':
	                op = BinaryOperator.LowerEquals;
	                break;
	            case '>=':
	                op = BinaryOperator.BiggerEquals;
	                break;
	            default:
	                throw new Error("Unsupported operation " + ast.operation);
	        }
	        return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
	        ensureStatementMode(mode, ast);
	        return this.visitAll(ast.expressions, mode);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
	        var /** @type {?} */ value = this.visit(ast.condition, _Mode.Expression);
	        return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
	        throw new Error("Illegal state: Pipes should have been converted into functions. Pipe: " + ast.name);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
	        var /** @type {?} */ convertedArgs = this.visitAll(ast.args, _Mode.Expression);
	        var /** @type {?} */ fnResult;
	        if (ast instanceof BuiltinFunctionCall) {
	            fnResult = ast.converter(convertedArgs);
	        }
	        else {
	            fnResult = this.visit(/** @type {?} */ ((ast.target)), _Mode.Expression).callFn(convertedArgs);
	        }
	        return convertToStatementIfNeeded(mode, fnResult);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
	        ensureExpressionMode(mode, ast);
	        return this._implicitReceiver;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
	        ensureExpressionMode(mode, ast);
	        var /** @type {?} */ args = [literal(ast.expressions.length)];
	        for (var /** @type {?} */ i = 0; i < ast.strings.length - 1; i++) {
	            args.push(literal(ast.strings[i]));
	            args.push(this.visit(ast.expressions[i], _Mode.Expression));
	        }
	        args.push(literal(ast.strings[ast.strings.length - 1]));
	        return ast.expressions.length <= 9 ?
	            importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) :
	            importExpr(createIdentifier(Identifiers.interpolate)).callFn([
	                args[0], literalArr(args.slice(1))
	            ]);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
	        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	        if (leftMostSafe) {
	            return this.convertSafeAccess(ast, leftMostSafe, mode);
	        }
	        else {
	            return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
	        var /** @type {?} */ obj = this.visit(ast.obj, _Mode.Expression);
	        var /** @type {?} */ key = this.visit(ast.key, _Mode.Expression);
	        var /** @type {?} */ value = this.visit(ast.value, _Mode.Expression);
	        return convertToStatementIfNeeded(mode, obj.key(key).set(value));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
	        throw new Error("Illegal State: literal arrays should have been converted into functions");
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
	        throw new Error("Illegal State: literal maps should have been converted into functions");
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, literal(ast.value));
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype._getLocal = function (name) { return this._localResolver.getLocal(name); };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
	        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	        if (leftMostSafe) {
	            return this.convertSafeAccess(ast, leftMostSafe, mode);
	        }
	        else {
	            var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);
	            var /** @type {?} */ result = null;
	            var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	            if (receiver === this._implicitReceiver) {
	                var /** @type {?} */ varExpr = this._getLocal(ast.name);
	                if (varExpr) {
	                    result = varExpr.callFn(args);
	                }
	            }
	            if (result == null) {
	                result = receiver.callMethod(ast.name, args);
	            }
	            return convertToStatementIfNeeded(mode, result);
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
	        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	        if (leftMostSafe) {
	            return this.convertSafeAccess(ast, leftMostSafe, mode);
	        }
	        else {
	            var /** @type {?} */ result = null;
	            var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	            if (receiver === this._implicitReceiver) {
	                result = this._getLocal(ast.name);
	            }
	            if (result == null) {
	                result = receiver.prop(ast.name);
	            }
	            return convertToStatementIfNeeded(mode, result);
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
	        var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	        if (receiver === this._implicitReceiver) {
	            var /** @type {?} */ varExpr = this._getLocal(ast.name);
	            if (varExpr) {
	                throw new Error('Cannot assign to a reference or variable!');
	            }
	        }
	        return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
	        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
	        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	    };
	    /**
	     * @param {?} asts
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
	        var _this = this;
	        return asts.map(function (ast) { return _this.visit(ast, mode); });
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
	        throw new Error("Quotes are not supported for evaluation!\n        Statement: " + ast.uninterpretedExpression + " located at " + ast.location);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.visit = function (ast, mode) {
	        var /** @type {?} */ result = this._resultMap.get(ast);
	        if (result)
	            return result;
	        return (this._nodeMap.get(ast) || ast).visit(this, mode);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} leftMostSafe
	     * @param {?} mode
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
	        // If the expression contains a safe access node on the left it needs to be converted to
	        // an expression that guards the access to the member by checking the receiver for blank. As
	        // execution proceeds from left to right, the left most part of the expression must be guarded
	        // first but, because member access is left associative, the right side of the expression is at
	        // the top of the AST. The desired result requires lifting a copy of the the left part of the
	        // expression up to test it for blank before generating the unguarded version.
	        // Consider, for example the following expression: a?.b.c?.d.e
	        // This results in the ast:
	        //         .
	        //        / \
	        //       ?.   e
	        //      /  \
	        //     .    d
	        //    / \
	        //   ?.  c
	        //  /  \
	        // a    b
	        // The following tree should be generated:
	        //
	        //        /---- ? ----\
	        //       /      |      \
	        //     a   /--- ? ---\  null
	        //        /     |     \
	        //       .      .     null
	        //      / \    / \
	        //     .  c   .   e
	        //    / \    / \
	        //   a   b  ,   d
	        //         / \
	        //        .   c
	        //       / \
	        //      a   b
	        //
	        // Notice that the first guard condition is the left hand of the left most safe access node
	        // which comes in as leftMostSafe to this routine.
	        var /** @type {?} */ guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
	        var /** @type {?} */ temporary = ((undefined));
	        if (this.needsTemporary(leftMostSafe.receiver)) {
	            // If the expression has method calls or pipes then we need to save the result into a
	            // temporary variable to avoid calling stateful or impure code more than once.
	            temporary = this.allocateTemporary();
	            // Preserve the result in the temporary variable
	            guardedExpression = temporary.set(guardedExpression);
	            // Ensure all further references to the guarded expression refer to the temporary instead.
	            this._resultMap.set(leftMostSafe.receiver, temporary);
	        }
	        var /** @type {?} */ condition = guardedExpression.isBlank();
	        // Convert the ast to an unguarded access to the receiver's member. The map will substitute
	        // leftMostNode with its unguarded version in the call to `this.visit()`.
	        if (leftMostSafe instanceof SafeMethodCall) {
	            this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
	        }
	        else {
	            this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
	        }
	        // Recursively convert the node now without the guarded member access.
	        var /** @type {?} */ access = this.visit(ast, _Mode.Expression);
	        // Remove the mapping. This is not strictly required as the converter only traverses each node
	        // once but is safer if the conversion is changed to traverse the nodes more than once.
	        this._nodeMap.delete(leftMostSafe);
	        // If we allocated a temporary, release it.
	        if (temporary) {
	            this.releaseTemporary(temporary);
	        }
	        // Produce the conditional
	        return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
	    };
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
	        var _this = this;
	        var /** @type {?} */ visit = function (visitor, ast) {
	            return (_this._nodeMap.get(ast) || ast).visit(visitor);
	        };
	        return ast.visit({
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitBinary: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitChain: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitConditional: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitFunctionCall: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitImplicitReceiver: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitInterpolation: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitKeyedRead: function (ast) { return visit(this, ast.obj); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitKeyedWrite: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralArray: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralMap: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralPrimitive: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitMethodCall: function (ast) { return visit(this, ast.receiver); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPipe: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPrefixNot: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPropertyRead: function (ast) { return visit(this, ast.receiver); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPropertyWrite: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitQuote: function (ast) { return null; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitSafeMethodCall: function (ast) { return visit(this, ast.receiver) || ast; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitSafePropertyRead: function (ast) {
	                return visit(this, ast.receiver) || ast;
	            }
	        });
	    };
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.needsTemporary = function (ast) {
	        var _this = this;
	        var /** @type {?} */ visit = function (visitor, ast) {
	            return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
	        };
	        var /** @type {?} */ visitSome = function (visitor, ast) {
	            return ast.some(function (ast) { return visit(visitor, ast); });
	        };
	        return ast.visit({
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitBinary: function (ast) { return visit(this, ast.left) || visit(this, ast.right); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitChain: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitConditional: function (ast) {
	                return visit(this, ast.condition) || visit(this, ast.trueExp) ||
	                    visit(this, ast.falseExp);
	            },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitFunctionCall: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitImplicitReceiver: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitInterpolation: function (ast) { return visitSome(this, ast.expressions); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitKeyedRead: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitKeyedWrite: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralArray: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralMap: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitLiteralPrimitive: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitMethodCall: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPipe: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPrefixNot: function (ast) { return visit(this, ast.expression); },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPropertyRead: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitPropertyWrite: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitQuote: function (ast) { return false; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitSafeMethodCall: function (ast) { return true; },
	            /**
	             * @param {?} ast
	             * @return {?}
	             */
	            visitSafePropertyRead: function (ast) { return false; }
	        });
	    };
	    /**
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.allocateTemporary = function () {
	        var /** @type {?} */ tempNumber = this._currentTemporary++;
	        this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
	        return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
	    };
	    /**
	     * @param {?} temporary
	     * @return {?}
	     */
	    _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {
	        this._currentTemporary--;
	        if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
	            throw new Error("Temporary " + temporary.name + " released out of order");
	        }
	    };
	    return _AstToIrVisitor;
	}());
	/**
	 * @param {?} arg
	 * @param {?} output
	 * @return {?}
	 */
	function flattenStatements(arg, output) {
	    if (Array.isArray(arg)) {
	        ((arg)).forEach(function (entry) { return flattenStatements(entry, output); });
	    }
	    else {
	        output.push(arg);
	    }
	}
	var DefaultLocalResolver = (function () {
	    function DefaultLocalResolver() {
	    }
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    DefaultLocalResolver.prototype.getLocal = function (name) {
	        if (name === EventHandlerVars.event.name) {
	            return EventHandlerVars.event;
	        }
	        return null;
	    };
	    return DefaultLocalResolver;
	}());
	/**
	 * @param {?} bindingId
	 * @return {?}
	 */
	function createCurrValueExpr(bindingId) {
	    return variable("currVal_" + bindingId); // fix syntax highlighting: `
	}
	/**
	 * @param {?} bindingId
	 * @return {?}
	 */
	function createPreventDefaultVar(bindingId) {
	    return variable("pd_" + bindingId);
	}
	/**
	 * @param {?} stmt
	 * @return {?}
	 */
	function convertStmtIntoExpression(stmt) {
	    if (stmt instanceof ExpressionStatement) {
	        return stmt.expr;
	    }
	    else if (stmt instanceof ReturnStatement) {
	        return stmt.value;
	    }
	    return null;
	}
	var BuiltinFunctionCall = (function (_super) {
	    __extends(BuiltinFunctionCall, _super);
	    /**
	     * @param {?} span
	     * @param {?} args
	     * @param {?} converter
	     */
	    function BuiltinFunctionCall(span, args, converter) {
	        var _this = _super.call(this, span, null, args) || this;
	        _this.args = args;
	        _this.converter = converter;
	        return _this;
	    }
	    return BuiltinFunctionCall;
	}(FunctionCall));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CLASS_ATTR$1 = 'class';
	var STYLE_ATTR = 'style';
	var IMPLICIT_TEMPLATE_VAR = '\$implicit';
	var ViewCompileResult = (function () {
	    /**
	     * @param {?} statements
	     * @param {?} viewClassVar
	     * @param {?} rendererTypeVar
	     */
	    function ViewCompileResult(statements, viewClassVar, rendererTypeVar) {
	        this.statements = statements;
	        this.viewClassVar = viewClassVar;
	        this.rendererTypeVar = rendererTypeVar;
	    }
	    return ViewCompileResult;
	}());
	var ViewCompiler = (function () {
	    /**
	     * @param {?} _genConfigNext
	     * @param {?} _schemaRegistry
	     */
	    function ViewCompiler(_genConfigNext, _schemaRegistry) {
	        this._genConfigNext = _genConfigNext;
	        this._schemaRegistry = _schemaRegistry;
	    }
	    /**
	     * @param {?} component
	     * @param {?} template
	     * @param {?} styles
	     * @param {?} usedPipes
	     * @return {?}
	     */
	    ViewCompiler.prototype.compileComponent = function (component, template, styles, usedPipes) {
	        var /** @type {?} */ embeddedViewCount = 0;
	        var /** @type {?} */ staticQueryIds = findStaticQueryIds(template);
	        var /** @type {?} */ statements = [];
	        var /** @type {?} */ renderComponentVarName = ((undefined));
	        if (!component.isHost) {
	            var /** @type {?} */ template_1 = ((component.template));
	            var /** @type {?} */ customRenderData = [];
	            if (template_1.animations && template_1.animations.length) {
	                customRenderData.push(new LiteralMapEntry('animation', convertValueToOutputAst(template_1.animations), true));
	            }
	            var /** @type {?} */ renderComponentVar = variable(rendererTypeName(component.type.reference));
	            renderComponentVarName = ((renderComponentVar.name));
	            statements.push(renderComponentVar
	                .set(importExpr(createIdentifier(Identifiers.createRendererType2))
	                .callFn([new LiteralMapExpr([
	                    new LiteralMapEntry('encapsulation', literal(template_1.encapsulation)),
	                    new LiteralMapEntry('styles', styles),
	                    new LiteralMapEntry('data', new LiteralMapExpr(customRenderData))
	                ])]))
	                .toDeclStmt(importType(createIdentifier(Identifiers.RendererType2)), [StmtModifier.Final]));
	        }
	        var /** @type {?} */ viewBuilderFactory = function (parent) {
	            var /** @type {?} */ embeddedViewIndex = embeddedViewCount++;
	            return new ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);
	        };
	        var /** @type {?} */ visitor = viewBuilderFactory(null);
	        visitor.visitAll([], template);
	        statements.push.apply(statements, visitor.build());
	        return new ViewCompileResult(statements, visitor.viewName, renderComponentVarName);
	    };
	    return ViewCompiler;
	}());
	ViewCompiler.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	ViewCompiler.ctorParameters = function () { return [
	    { type: CompilerConfig, },
	    { type: ElementSchemaRegistry, },
	]; };
	var LOG_VAR = variable('l');
	var VIEW_VAR = variable('v');
	var CHECK_VAR = variable('ck');
	var COMP_VAR = variable('co');
	var EVENT_NAME_VAR = variable('en');
	var ALLOW_DEFAULT_VAR = variable("ad");
	var ViewBuilder = (function () {
	    /**
	     * @param {?} parent
	     * @param {?} component
	     * @param {?} embeddedViewIndex
	     * @param {?} usedPipes
	     * @param {?} staticQueryIds
	     * @param {?} viewBuilderFactory
	     */
	    function ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {
	        this.parent = parent;
	        this.component = component;
	        this.embeddedViewIndex = embeddedViewIndex;
	        this.usedPipes = usedPipes;
	        this.staticQueryIds = staticQueryIds;
	        this.viewBuilderFactory = viewBuilderFactory;
	        this.nodes = [];
	        this.purePipeNodeIndices = Object.create(null);
	        this.refNodeIndices = Object.create(null);
	        this.variables = [];
	        this.children = [];
	        // TODO(tbosch): The old view compiler used to use an `any` type
	        // for the context in any embedded view. We keep this behaivor for now
	        // to be able to introduce the new view compiler without too many errors.
	        this.compType =
	            this.embeddedViewIndex > 0 ? DYNAMIC_TYPE : importType(this.component.type);
	    }
	    Object.defineProperty(ViewBuilder.prototype, "viewName", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return viewClassName(this.component.type.reference, this.embeddedViewIndex);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} variables
	     * @param {?} astNodes
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitAll = function (variables, astNodes) {
	        var _this = this;
	        this.variables = variables;
	        // create the pipes for the pure pipes immediately, so that we know their indices.
	        if (!this.parent) {
	            this.usedPipes.forEach(function (pipe) {
	                if (pipe.pure) {
	                    _this.purePipeNodeIndices[pipe.name] = _this._createPipe(null, pipe);
	                }
	            });
	        }
	        if (!this.parent) {
	            var /** @type {?} */ queryIds_1 = staticViewQueryIds(this.staticQueryIds);
	            this.component.viewQueries.forEach(function (query, queryIndex) {
	                // Note: queries start with id 1 so we can use the number in a Bloom filter!
	                var /** @type {?} */ queryId = queryIndex + 1;
	                var /** @type {?} */ bindingType = query.first ? 0 /* First */ : 1;
	                var /** @type {?} */ flags = 67108864 /* TypeViewQuery */ | calcStaticDynamicQueryFlags(queryIds_1, queryId, query.first);
	                _this.nodes.push(function () { return ({
	                    sourceSpan: null,
	                    nodeFlags: flags,
	                    nodeDef: importExpr(createIdentifier(Identifiers.queryDef)).callFn([
	                        literal(flags), literal(queryId),
	                        new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])
	                    ])
	                }); });
	            });
	        }
	        templateVisitAll(this, astNodes);
	        if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {
	            // if the view is an embedded view, then we need to add an additional root node in some cases
	            this.nodes.push(function () { return ({
	                sourceSpan: null,
	                nodeFlags: 1 /* TypeElement */,
	                nodeDef: importExpr(createIdentifier(Identifiers.anchorDef)).callFn([
	                    literal(0 /* None */), NULL_EXPR, NULL_EXPR, literal(0)
	                ])
	            }); });
	        }
	    };
	    /**
	     * @param {?=} targetStatements
	     * @return {?}
	     */
	    ViewBuilder.prototype.build = function (targetStatements) {
	        if (targetStatements === void 0) { targetStatements = []; }
	        this.children.forEach(function (child) { return child.build(targetStatements); });
	        var _a = this._createNodeExpressions(), updateRendererStmts = _a.updateRendererStmts, updateDirectivesStmts = _a.updateDirectivesStmts, nodeDefExprs = _a.nodeDefExprs;
	        var /** @type {?} */ updateRendererFn = this._createUpdateFn(updateRendererStmts);
	        var /** @type {?} */ updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);
	        var /** @type {?} */ viewFlags = 0;
	        if (!this.parent && this.component.changeDetection === _angular_core.ChangeDetectionStrategy.OnPush) {
	            viewFlags |= 2 /* OnPush */;
	        }
	        var /** @type {?} */ viewFactory = new DeclareFunctionStmt(this.viewName, [new FnParam(/** @type {?} */ ((LOG_VAR.name)))], [new ReturnStatement(importExpr(createIdentifier(Identifiers.viewDef)).callFn([
	                literal(viewFlags),
	                literalArr(nodeDefExprs),
	                updateDirectivesFn,
	                updateRendererFn,
	            ]))], importType(createIdentifier(Identifiers.ViewDefinition)));
	        targetStatements.push(viewFactory);
	        return targetStatements;
	    };
	    /**
	     * @param {?} updateStmts
	     * @return {?}
	     */
	    ViewBuilder.prototype._createUpdateFn = function (updateStmts) {
	        var /** @type {?} */ updateFn;
	        if (updateStmts.length > 0) {
	            var /** @type {?} */ preStmts = [];
	            if (!this.component.isHost && findReadVarNames(updateStmts).has(/** @type {?} */ ((COMP_VAR.name)))) {
	                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));
	            }
	            updateFn = fn([
	                new FnParam(/** @type {?} */ ((CHECK_VAR.name)), INFERRED_TYPE),
	                new FnParam(/** @type {?} */ ((VIEW_VAR.name)), INFERRED_TYPE)
	            ], preStmts.concat(updateStmts), INFERRED_TYPE);
	        }
	        else {
	            updateFn = NULL_EXPR;
	        }
	        return updateFn;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitNgContent = function (ast, context) {
	        // ngContentDef(ngContentIndex: number, index: number): NodeDef;
	        this.nodes.push(function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 4 /* TypeNgContent */,
	            nodeDef: importExpr(createIdentifier(Identifiers.ngContentDef)).callFn([
	                literal(ast.ngContentIndex), literal(ast.index)
	            ])
	        }); });
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitText = function (ast, context) {
	        // textDef(ngContentIndex: number, constants: string[]): NodeDef;
	        this.nodes.push(function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 2 /* TypeText */,
	            nodeDef: importExpr(createIdentifier(Identifiers.textDef)).callFn([
	                literal(ast.ngContentIndex), literalArr([literal(ast.value)])
	            ])
	        }); });
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitBoundText = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array
	        this.nodes.push(/** @type {?} */ ((null)));
	        var /** @type {?} */ astWithSource = (ast.value);
	        var /** @type {?} */ inter = (astWithSource.ast);
	        var /** @type {?} */ updateRendererExpressions = inter.expressions.map(function (expr, bindingIndex) { return _this._preprocessUpdateExpression({ nodeIndex: nodeIndex, bindingIndex: bindingIndex, sourceSpan: ast.sourceSpan, context: COMP_VAR, value: expr }); });
	        // textDef(ngContentIndex: number, constants: string[]): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 2 /* TypeText */,
	            nodeDef: importExpr(createIdentifier(Identifiers.textDef)).callFn([
	                literal(ast.ngContentIndex), literalArr(inter.strings.map(function (s) { return literal(s); }))
	            ]),
	            updateRenderer: updateRendererExpressions
	        }); };
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitEmbeddedTemplate = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array
	        this.nodes.push(/** @type {?} */ ((null)));
	        var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, queryMatchesExpr = _a.queryMatchesExpr, hostEvents = _a.hostEvents;
	        var /** @type {?} */ childVisitor = this.viewBuilderFactory(this);
	        this.children.push(childVisitor);
	        childVisitor.visitAll(ast.variables, ast.children);
	        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;
	        // anchorDef(
	        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,
	        //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:
	        //   ViewDefinitionFactory): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 1 /* TypeElement */ | flags,
	            nodeDef: importExpr(createIdentifier(Identifiers.anchorDef)).callFn([
	                literal(flags),
	                queryMatchesExpr,
	                literal(ast.ngContentIndex),
	                literal(childCount),
	                _this._createElementHandleEventFn(nodeIndex, hostEvents),
	                variable(childVisitor.viewName),
	            ])
	        }); };
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitElement = function (ast, context) {
	        var _this = this;
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array so we can add children
	        this.nodes.push(/** @type {?} */ ((null)));
	        // Using a null element name creates an anchor.
	        var /** @type {?} */ elName = isNgContainer(ast.name) ? null : ast.name;
	        var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, usedEvents = _a.usedEvents, queryMatchesExpr = _a.queryMatchesExpr, dirHostBindings = _a.hostBindings, hostEvents = _a.hostEvents;
	        var /** @type {?} */ inputDefs = [];
	        var /** @type {?} */ updateRendererExpressions = [];
	        var /** @type {?} */ outputDefs = [];
	        if (elName) {
	            var /** @type {?} */ hostBindings = ast.inputs
	                .map(function (inputAst) { return ({
	                context: /** @type {?} */ (COMP_VAR),
	                inputAst: inputAst,
	                dirAst: /** @type {?} */ (null),
	            }); })
	                .concat(dirHostBindings);
	            if (hostBindings.length) {
	                updateRendererExpressions =
	                    hostBindings.map(function (hostBinding, bindingIndex) { return _this._preprocessUpdateExpression({
	                        context: hostBinding.context,
	                        nodeIndex: nodeIndex,
	                        bindingIndex: bindingIndex,
	                        sourceSpan: hostBinding.inputAst.sourceSpan,
	                        value: hostBinding.inputAst.value
	                    }); });
	                inputDefs = hostBindings.map(function (hostBinding) { return elementBindingDef(hostBinding.inputAst, hostBinding.dirAst); });
	            }
	            outputDefs = usedEvents.map(function (_a) {
	                var target = _a[0], eventName = _a[1];
	                return literalArr([literal(target), literal(eventName)]);
	            });
	        }
	        templateVisitAll(this, ast.children);
	        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;
	        var /** @type {?} */ compAst = ast.directives.find(function (dirAst) { return dirAst.directive.isComponent; });
	        var /** @type {?} */ compRendererType = NULL_EXPR;
	        var /** @type {?} */ compView = NULL_EXPR;
	        if (compAst) {
	            compView = importExpr({ reference: compAst.directive.componentViewType });
	            compRendererType = importExpr({ reference: compAst.directive.rendererType });
	        }
	        // elementDef(
	        //   flags: NodeFlags, matchedQueriesDsl: [string | number, QueryValueType][],
	        //   ngContentIndex: number, childCount: number, namespaceAndName: string,
	        //   fixedAttrs: [string, string][] = [],
	        //   bindings?: [BindingFlags, string, string | SecurityContext][],
	        //   outputs?: ([OutputType.ElementOutput | OutputType.DirectiveHostOutput, string, string])[],
	        //   handleEvent?: ElementHandleEventFn,
	        //   componentView?: () => ViewDefinition, componentRendererType?: RendererType2): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 1 /* TypeElement */ | flags,
	            nodeDef: importExpr(createIdentifier(Identifiers.elementDef)).callFn([
	                literal(flags),
	                queryMatchesExpr,
	                literal(ast.ngContentIndex),
	                literal(childCount),
	                literal(elName),
	                elName ? fixedAttrsDef(ast) : NULL_EXPR,
	                inputDefs.length ? literalArr(inputDefs) : NULL_EXPR,
	                outputDefs.length ? literalArr(outputDefs) : NULL_EXPR,
	                _this._createElementHandleEventFn(nodeIndex, hostEvents),
	                compView,
	                compRendererType,
	            ]),
	            updateRenderer: updateRendererExpressions
	        }); };
	    };
	    /**
	     * @param {?} nodeIndex
	     * @param {?} ast
	     * @return {?}
	     */
	    ViewBuilder.prototype._visitElementOrTemplate = function (nodeIndex, ast) {
	        var _this = this;
	        var /** @type {?} */ flags = 0;
	        if (ast.hasViewContainer) {
	            flags |= 8388608 /* EmbeddedViews */;
	        }
	        var /** @type {?} */ usedEvents = new Map();
	        ast.outputs.forEach(function (event) {
	            var _a = elementEventNameAndTarget(event, null), name = _a.name, target = _a.target;
	            usedEvents.set(_angular_core.ɵelementEventFullName(target, name), [target, name]);
	        });
	        ast.directives.forEach(function (dirAst) {
	            dirAst.hostEvents.forEach(function (event) {
	                var _a = elementEventNameAndTarget(event, dirAst), name = _a.name, target = _a.target;
	                usedEvents.set(_angular_core.ɵelementEventFullName(target, name), [target, name]);
	            });
	        });
	        var /** @type {?} */ hostBindings = [];
	        var /** @type {?} */ hostEvents = [];
	        var /** @type {?} */ componentFactoryResolverProvider = createComponentFactoryResolver(ast.directives);
	        if (componentFactoryResolverProvider) {
	            this._visitProvider(componentFactoryResolverProvider, ast.queryMatches);
	        }
	        ast.providers.forEach(function (providerAst, providerIndex) {
	            var /** @type {?} */ dirAst = ((undefined));
	            var /** @type {?} */ dirIndex = ((undefined));
	            ast.directives.forEach(function (localDirAst, i) {
	                if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {
	                    dirAst = localDirAst;
	                    dirIndex = i;
	                }
	            });
	            if (dirAst) {
	                var _a = _this._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, /** @type {?} */ ((_this.staticQueryIds.get(/** @type {?} */ (ast))))), dirHostBindings = _a.hostBindings, dirHostEvents = _a.hostEvents;
	                hostBindings.push.apply(hostBindings, dirHostBindings);
	                hostEvents.push.apply(hostEvents, dirHostEvents);
	            }
	            else {
	                _this._visitProvider(providerAst, ast.queryMatches);
	            }
	        });
	        var /** @type {?} */ queryMatchExprs = [];
	        ast.queryMatches.forEach(function (match) {
	            var /** @type {?} */ valueType = ((undefined));
	            if (tokenReference(match.value) === resolveIdentifier(Identifiers.ElementRef)) {
	                valueType = 0 /* ElementRef */;
	            }
	            else if (tokenReference(match.value) === resolveIdentifier(Identifiers.ViewContainerRef)) {
	                valueType = 3 /* ViewContainerRef */;
	            }
	            else if (tokenReference(match.value) === resolveIdentifier(Identifiers.TemplateRef)) {
	                valueType = 2 /* TemplateRef */;
	            }
	            if (valueType != null) {
	                queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));
	            }
	        });
	        ast.references.forEach(function (ref) {
	            var /** @type {?} */ valueType = ((undefined));
	            if (!ref.value) {
	                valueType = 1 /* RenderElement */;
	            }
	            else if (tokenReference(ref.value) === resolveIdentifier(Identifiers.TemplateRef)) {
	                valueType = 2 /* TemplateRef */;
	            }
	            if (valueType != null) {
	                _this.refNodeIndices[ref.name] = nodeIndex;
	                queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)]));
	            }
	        });
	        ast.outputs.forEach(function (outputAst) {
	            hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: /** @type {?} */ ((null)) });
	        });
	        return {
	            flags: flags,
	            usedEvents: Array.from(usedEvents.values()),
	            queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
	            hostBindings: hostBindings,
	            hostEvents: hostEvents
	        };
	    };
	    /**
	     * @param {?} providerAst
	     * @param {?} dirAst
	     * @param {?} directiveIndex
	     * @param {?} elementNodeIndex
	     * @param {?} refs
	     * @param {?} queryMatches
	     * @param {?} usedEvents
	     * @param {?} queryIds
	     * @return {?}
	     */
	    ViewBuilder.prototype._visitDirective = function (providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {
	        var _this = this;
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array so we can add children
	        this.nodes.push(/** @type {?} */ ((null)));
	        dirAst.directive.queries.forEach(function (query, queryIndex) {
	            var /** @type {?} */ queryId = dirAst.contentQueryStartId + queryIndex;
	            var /** @type {?} */ flags = 33554432 /* TypeContentQuery */ | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);
	            var /** @type {?} */ bindingType = query.first ? 0 /* First */ : 1;
	            _this.nodes.push(function () { return ({
	                sourceSpan: dirAst.sourceSpan,
	                nodeFlags: flags,
	                nodeDef: importExpr(createIdentifier(Identifiers.queryDef)).callFn([
	                    literal(flags), literal(queryId),
	                    new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])
	                ]),
	            }); });
	        });
	        // Note: the operation below might also create new nodeDefs,
	        // but we don't want them to be a child of a directive,
	        // as they might be a provider/pipe on their own.
	        // I.e. we only allow queries as children of directives nodes.
	        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;
	        var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, depsExpr = _a.depsExpr;
	        refs.forEach(function (ref) {
	            if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {
	                _this.refNodeIndices[ref.name] = nodeIndex;
	                queryMatchExprs.push(literalArr([literal(ref.name), literal(4 /* Provider */)]));
	            }
	        });
	        if (dirAst.directive.isComponent) {
	            flags |= 16384 /* Component */;
	        }
	        var /** @type {?} */ inputDefs = dirAst.inputs.map(function (inputAst, inputIndex) {
	            var /** @type {?} */ mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]);
	            // Note: it's important to not quote the key so that we can capture renames by minifiers!
	            return new LiteralMapEntry(inputAst.directiveName, mapValue, false);
	        });
	        var /** @type {?} */ outputDefs = [];
	        var /** @type {?} */ dirMeta = dirAst.directive;
	        Object.keys(dirMeta.outputs).forEach(function (propName) {
	            var /** @type {?} */ eventName = dirMeta.outputs[propName];
	            if (usedEvents.has(eventName)) {
	                // Note: it's important to not quote the key so that we can capture renames by minifiers!
	                outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));
	            }
	        });
	        var /** @type {?} */ updateDirectiveExpressions = [];
	        if (dirAst.inputs.length || (flags & (131072 /* DoCheck */ | 32768 /* OnInit */)) > 0) {
	            updateDirectiveExpressions =
	                dirAst.inputs.map(function (input, bindingIndex) { return _this._preprocessUpdateExpression({
	                    nodeIndex: nodeIndex,
	                    bindingIndex: bindingIndex,
	                    sourceSpan: input.sourceSpan,
	                    context: COMP_VAR,
	                    value: input.value
	                }); });
	        }
	        var /** @type {?} */ dirContextExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
	            VIEW_VAR, literal(nodeIndex)
	        ]);
	        var /** @type {?} */ hostBindings = dirAst.hostProperties.map(function (inputAst) { return ({
	            context: dirContextExpr,
	            dirAst: dirAst,
	            inputAst: inputAst,
	        }); });
	        var /** @type {?} */ hostEvents = dirAst.hostEvents.map(function (hostEventAst) { return ({
	            context: dirContextExpr,
	            eventAst: hostEventAst, dirAst: dirAst,
	        }); });
	        // directiveDef(
	        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], childCount: number, ctor:
	        //   any,
	        //   deps: ([DepFlags, any] | any)[], props?: {[name: string]: [number, string]},
	        //   outputs?: {[name: string]: string}, component?: () => ViewDefinition): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: dirAst.sourceSpan,
	            nodeFlags: 8192 /* TypeDirective */ | flags,
	            nodeDef: importExpr(createIdentifier(Identifiers.directiveDef)).callFn([
	                literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
	                literal(childCount), providerExpr, depsExpr,
	                inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR,
	                outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR
	            ]),
	            updateDirectives: updateDirectiveExpressions,
	            directive: dirAst.directive.type,
	        }); };
	        return { hostBindings: hostBindings, hostEvents: hostEvents };
	    };
	    /**
	     * @param {?} providerAst
	     * @param {?} queryMatches
	     * @return {?}
	     */
	    ViewBuilder.prototype._visitProvider = function (providerAst, queryMatches) {
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array so we can add children
	        this.nodes.push(/** @type {?} */ ((null)));
	        var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, depsExpr = _a.depsExpr;
	        // providerDef(
	        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,
	        //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: providerAst.sourceSpan,
	            nodeFlags: flags,
	            nodeDef: importExpr(createIdentifier(Identifiers.providerDef)).callFn([
	                literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
	                tokenExpr(providerAst.token), providerExpr, depsExpr
	            ])
	        }); };
	    };
	    /**
	     * @param {?} providerAst
	     * @param {?} queryMatches
	     * @return {?}
	     */
	    ViewBuilder.prototype._visitProviderOrDirective = function (providerAst, queryMatches) {
	        var /** @type {?} */ flags = 0;
	        if (!providerAst.eager) {
	            flags |= 2048 /* LazyProvider */;
	        }
	        if (providerAst.providerType === ProviderAstType.PrivateService) {
	            flags |= 4096 /* PrivateProvider */;
	        }
	        providerAst.lifecycleHooks.forEach(function (lifecycleHook) {
	            // for regular providers, we only support ngOnDestroy
	            if (lifecycleHook === _angular_core.ɵLifecycleHooks.OnDestroy ||
	                providerAst.providerType === ProviderAstType.Directive ||
	                providerAst.providerType === ProviderAstType.Component) {
	                flags |= lifecycleHookToNodeFlag(lifecycleHook);
	            }
	        });
	        var /** @type {?} */ queryMatchExprs = [];
	        queryMatches.forEach(function (match) {
	            if (tokenReference(match.value) === tokenReference(providerAst.token)) {
	                queryMatchExprs.push(literalArr([literal(match.queryId), literal(4 /* Provider */)]));
	            }
	        });
	        var _a = providerDef(providerAst), providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, providerType = _a.flags;
	        return { flags: flags | providerType, queryMatchExprs: queryMatchExprs, providerExpr: providerExpr, depsExpr: depsExpr };
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ViewBuilder.prototype.getLocal = function (name) {
	        if (name == EventHandlerVars.event.name) {
	            return EventHandlerVars.event;
	        }
	        var /** @type {?} */ currViewExpr = VIEW_VAR;
	        for (var /** @type {?} */ currBuilder = this; currBuilder; currBuilder = currBuilder.parent,
	            currViewExpr = currViewExpr.prop('parent').cast(DYNAMIC_TYPE)) {
	            // check references
	            var /** @type {?} */ refNodeIndex = currBuilder.refNodeIndices[name];
	            if (refNodeIndex != null) {
	                return importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
	                    currViewExpr, literal(refNodeIndex)
	                ]);
	            }
	            // check variables
	            var /** @type {?} */ varAst = currBuilder.variables.find(function (varAst) { return varAst.name === name; });
	            if (varAst) {
	                var /** @type {?} */ varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;
	                return currViewExpr.prop('context').prop(varValue);
	            }
	        }
	        return null;
	    };
	    /**
	     * @param {?} sourceSpan
	     * @param {?} argCount
	     * @return {?}
	     */
	    ViewBuilder.prototype.createLiteralArrayConverter = function (sourceSpan, argCount) {
	        if (argCount === 0) {
	            var /** @type {?} */ valueExpr_1 = importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));
	            return function () { return valueExpr_1; };
	        }
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // pureArrayDef(argCount: number): NodeDef;
	        this.nodes.push(function () { return ({
	            sourceSpan: sourceSpan,
	            nodeFlags: 16 /* TypePureArray */,
	            nodeDef: importExpr(createIdentifier(Identifiers.pureArrayDef)).callFn([literal(argCount)])
	        }); });
	        return function (args) { return callCheckStmt(nodeIndex, args); };
	    };
	    /**
	     * @param {?} sourceSpan
	     * @param {?} keys
	     * @return {?}
	     */
	    ViewBuilder.prototype.createLiteralMapConverter = function (sourceSpan, keys) {
	        if (keys.length === 0) {
	            var /** @type {?} */ valueExpr_2 = importExpr(createIdentifier(Identifiers.EMPTY_MAP));
	            return function () { return valueExpr_2; };
	        }
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        // function pureObjectDef(propertyNames: string[]): NodeDef
	        this.nodes.push(function () { return ({
	            sourceSpan: sourceSpan,
	            nodeFlags: 32 /* TypePureObject */,
	            nodeDef: importExpr(createIdentifier(Identifiers.pureObjectDef))
	                .callFn([literalArr(keys.map(function (key) { return literal(key); }))])
	        }); });
	        return function (args) { return callCheckStmt(nodeIndex, args); };
	    };
	    /**
	     * @param {?} expression
	     * @param {?} name
	     * @param {?} argCount
	     * @return {?}
	     */
	    ViewBuilder.prototype.createPipeConverter = function (expression, name, argCount) {
	        var /** @type {?} */ pipe = ((this.usedPipes.find(function (pipeSummary) { return pipeSummary.name === name; })));
	        if (pipe.pure) {
	            var /** @type {?} */ nodeIndex_1 = this.nodes.length;
	            // function purePipeDef(argCount: number): NodeDef;
	            this.nodes.push(function () { return ({
	                sourceSpan: expression.sourceSpan,
	                nodeFlags: 64 /* TypePurePipe */,
	                nodeDef: importExpr(createIdentifier(Identifiers.purePipeDef))
	                    .callFn([literal(argCount)])
	            }); });
	            // find underlying pipe in the component view
	            var /** @type {?} */ compViewExpr = VIEW_VAR;
	            var /** @type {?} */ compBuilder = this;
	            while (compBuilder.parent) {
	                compBuilder = compBuilder.parent;
	                compViewExpr = compViewExpr.prop('parent').cast(DYNAMIC_TYPE);
	            }
	            var /** @type {?} */ pipeNodeIndex = compBuilder.purePipeNodeIndices[name];
	            var /** @type {?} */ pipeValueExpr_1 = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
	                compViewExpr, literal(pipeNodeIndex)
	            ]);
	            return function (args) { return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(nodeIndex_1, [pipeValueExpr_1].concat(args))); };
	        }
	        else {
	            var /** @type {?} */ nodeIndex = this._createPipe(expression.sourceSpan, pipe);
	            var /** @type {?} */ nodeValueExpr_1 = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([
	                VIEW_VAR, literal(nodeIndex)
	            ]);
	            return function (args) { return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr_1.callMethod('transform', args)); };
	        }
	    };
	    /**
	     * @param {?} sourceSpan
	     * @param {?} pipe
	     * @return {?}
	     */
	    ViewBuilder.prototype._createPipe = function (sourceSpan, pipe) {
	        var /** @type {?} */ nodeIndex = this.nodes.length;
	        var /** @type {?} */ flags = 0;
	        pipe.type.lifecycleHooks.forEach(function (lifecycleHook) {
	            // for pipes, we only support ngOnDestroy
	            if (lifecycleHook === _angular_core.ɵLifecycleHooks.OnDestroy) {
	                flags |= lifecycleHookToNodeFlag(lifecycleHook);
	            }
	        });
	        var /** @type {?} */ depExprs = pipe.type.diDeps.map(depDef);
	        // function pipeDef(
	        //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef
	        this.nodes.push(function () { return ({
	            sourceSpan: sourceSpan,
	            nodeFlags: 8 /* TypePipe */,
	            nodeDef: importExpr(createIdentifier(Identifiers.pipeDef)).callFn([
	                literal(flags), importExpr(pipe.type), literalArr(depExprs)
	            ])
	        }); });
	        return nodeIndex;
	    };
	    /**
	     * @param {?} expression
	     * @return {?}
	     */
	    ViewBuilder.prototype._preprocessUpdateExpression = function (expression) {
	        var _this = this;
	        return {
	            nodeIndex: expression.nodeIndex,
	            bindingIndex: expression.bindingIndex,
	            sourceSpan: expression.sourceSpan,
	            context: expression.context,
	            value: convertPropertyBindingBuiltins({
	                createLiteralArrayConverter: function (argCount) { return _this.createLiteralArrayConverter(expression.sourceSpan, argCount); },
	                createLiteralMapConverter: function (keys) { return _this.createLiteralMapConverter(expression.sourceSpan, keys); },
	                createPipeConverter: function (name, argCount) { return _this.createPipeConverter(expression, name, argCount); }
	            }, expression.value)
	        };
	    };
	    /**
	     * @return {?}
	     */
	    ViewBuilder.prototype._createNodeExpressions = function () {
	        var /** @type {?} */ self = this;
	        var /** @type {?} */ updateBindingCount = 0;
	        var /** @type {?} */ updateRendererStmts = [];
	        var /** @type {?} */ updateDirectivesStmts = [];
	        var /** @type {?} */ nodeDefExprs = this.nodes.map(function (factory, nodeIndex) {
	            var _a = factory(), nodeDef = _a.nodeDef, nodeFlags = _a.nodeFlags, updateDirectives = _a.updateDirectives, updateRenderer = _a.updateRenderer, sourceSpan = _a.sourceSpan;
	            if (updateRenderer) {
	                updateRendererStmts.push.apply(updateRendererStmts, createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false));
	            }
	            if (updateDirectives) {
	                updateDirectivesStmts.push.apply(updateDirectivesStmts, createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (nodeFlags & (131072 /* DoCheck */ | 32768 /* OnInit */)) > 0));
	            }
	            // We use a comma expression to call the log function before
	            // the nodeDef function, but still use the result of the nodeDef function
	            // as the value.
	            // Note: We only add the logger to elements / text nodes,
	            // so we don't generate too much code.
	            var /** @type {?} */ logWithNodeDef = nodeFlags & 3 /* CatRenderNode */ ?
	                new CommaExpr([LOG_VAR.callFn([]).callFn([]), nodeDef]) :
	                nodeDef;
	            return applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);
	        });
	        return { updateRendererStmts: updateRendererStmts, updateDirectivesStmts: updateDirectivesStmts, nodeDefExprs: nodeDefExprs };
	        /**
	         * @param {?} nodeIndex
	         * @param {?} sourceSpan
	         * @param {?} expressions
	         * @param {?} allowEmptyExprs
	         * @return {?}
	         */
	        function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {
	            var /** @type {?} */ updateStmts = [];
	            var /** @type {?} */ exprs = expressions.map(function (_a) {
	                var sourceSpan = _a.sourceSpan, context = _a.context, value = _a.value;
	                var /** @type {?} */ bindingId = "" + updateBindingCount++;
	                var /** @type {?} */ nameResolver = context === COMP_VAR ? self : null;
	                var _b = convertPropertyBinding(nameResolver, context, value, bindingId), stmts = _b.stmts, currValExpr = _b.currValExpr;
	                updateStmts.push.apply(updateStmts, stmts.map(function (stmt) { return applySourceSpanToStatementIfNeeded(stmt, sourceSpan); }));
	                return applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);
	            });
	            if (expressions.length || allowEmptyExprs) {
	                updateStmts.push(applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));
	            }
	            return updateStmts;
	        }
	    };
	    /**
	     * @param {?} nodeIndex
	     * @param {?} handlers
	     * @return {?}
	     */
	    ViewBuilder.prototype._createElementHandleEventFn = function (nodeIndex, handlers) {
	        var _this = this;
	        var /** @type {?} */ handleEventStmts = [];
	        var /** @type {?} */ handleEventBindingCount = 0;
	        handlers.forEach(function (_a) {
	            var context = _a.context, eventAst = _a.eventAst, dirAst = _a.dirAst;
	            var /** @type {?} */ bindingId = "" + handleEventBindingCount++;
	            var /** @type {?} */ nameResolver = context === COMP_VAR ? _this : null;
	            var _b = convertActionBinding(nameResolver, context, eventAst.handler, bindingId), stmts = _b.stmts, allowDefault = _b.allowDefault;
	            var /** @type {?} */ trueStmts = stmts;
	            if (allowDefault) {
	                trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());
	            }
	            var _c = elementEventNameAndTarget(eventAst, dirAst), eventTarget = _c.target, eventName = _c.name;
	            var /** @type {?} */ fullEventName = _angular_core.ɵelementEventFullName(eventTarget, eventName);
	            handleEventStmts.push(applySourceSpanToStatementIfNeeded(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));
	        });
	        var /** @type {?} */ handleEventFn;
	        if (handleEventStmts.length > 0) {
	            var /** @type {?} */ preStmts = [ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];
	            if (!this.component.isHost && findReadVarNames(handleEventStmts).has(/** @type {?} */ ((COMP_VAR.name)))) {
	                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));
	            }
	            handleEventFn = fn([
	                new FnParam(/** @type {?} */ ((VIEW_VAR.name)), INFERRED_TYPE),
	                new FnParam(/** @type {?} */ ((EVENT_NAME_VAR.name)), INFERRED_TYPE),
	                new FnParam(/** @type {?} */ ((EventHandlerVars.event.name)), INFERRED_TYPE)
	            ], preStmts.concat(handleEventStmts, [new ReturnStatement(ALLOW_DEFAULT_VAR)]), INFERRED_TYPE);
	        }
	        else {
	            handleEventFn = NULL_EXPR;
	        }
	        return handleEventFn;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitDirective = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitDirectiveProperty = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitReference = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitVariable = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitEvent = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitElementProperty = function (ast, context) { };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    ViewBuilder.prototype.visitAttr = function (ast, context) { };
	    return ViewBuilder;
	}());
	/**
	 * @param {?} providerAst
	 * @return {?}
	 */
	function providerDef(providerAst) {
	    return providerAst.multiProvider ?
	        multiProviderDef(providerAst.providers) :
	        singleProviderDef(providerAst.providerType, providerAst.providers[0]);
	}
	/**
	 * @param {?} providers
	 * @return {?}
	 */
	function multiProviderDef(providers) {
	    var /** @type {?} */ allDepDefs = [];
	    var /** @type {?} */ allParams = [];
	    var /** @type {?} */ exprs = providers.map(function (provider, providerIndex) {
	        var /** @type {?} */ expr;
	        if (provider.useClass) {
	            var /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);
	            expr = importExpr(provider.useClass).instantiate(depExprs);
	        }
	        else if (provider.useFactory) {
	            var /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);
	            expr = importExpr(provider.useFactory).callFn(depExprs);
	        }
	        else if (provider.useExisting) {
	            var /** @type {?} */ depExprs = convertDeps(providerIndex, [{ token: provider.useExisting }]);
	            expr = depExprs[0];
	        }
	        else {
	            expr = convertValueToOutputAst(provider.useValue);
	        }
	        return expr;
	    });
	    var /** @type {?} */ providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);
	    return { providerExpr: providerExpr, flags: 512 /* TypeFactoryProvider */, depsExpr: literalArr(allDepDefs) };
	    /**
	     * @param {?} providerIndex
	     * @param {?} deps
	     * @return {?}
	     */
	    function convertDeps(providerIndex, deps) {
	        return deps.map(function (dep, depIndex) {
	            var /** @type {?} */ paramName = "p" + providerIndex + "_" + depIndex;
	            allParams.push(new FnParam(paramName, DYNAMIC_TYPE));
	            allDepDefs.push(depDef(dep));
	            return variable(paramName);
	        });
	    }
	}
	/**
	 * @param {?} providerType
	 * @param {?} providerMeta
	 * @return {?}
	 */
	function singleProviderDef(providerType, providerMeta) {
	    var /** @type {?} */ providerExpr;
	    var /** @type {?} */ flags;
	    var /** @type {?} */ deps;
	    if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {
	        providerExpr = importExpr(/** @type {?} */ ((providerMeta.useClass)));
	        flags = 8192 /* TypeDirective */;
	        deps = providerMeta.deps || ((providerMeta.useClass)).diDeps;
	    }
	    else {
	        if (providerMeta.useClass) {
	            providerExpr = importExpr(providerMeta.useClass);
	            flags = 256 /* TypeClassProvider */;
	            deps = providerMeta.deps || providerMeta.useClass.diDeps;
	        }
	        else if (providerMeta.useFactory) {
	            providerExpr = importExpr(providerMeta.useFactory);
	            flags = 512 /* TypeFactoryProvider */;
	            deps = providerMeta.deps || providerMeta.useFactory.diDeps;
	        }
	        else if (providerMeta.useExisting) {
	            providerExpr = NULL_EXPR;
	            flags = 1024 /* TypeUseExistingProvider */;
	            deps = [{ token: providerMeta.useExisting }];
	        }
	        else {
	            providerExpr = convertValueToOutputAst(providerMeta.useValue);
	            flags = 128 /* TypeValueProvider */;
	            deps = [];
	        }
	    }
	    var /** @type {?} */ depsExpr = literalArr(deps.map(function (dep) { return depDef(dep); }));
	    return { providerExpr: providerExpr, flags: flags, depsExpr: depsExpr };
	}
	/**
	 * @param {?} tokenMeta
	 * @return {?}
	 */
	function tokenExpr(tokenMeta) {
	    return tokenMeta.identifier ? importExpr(tokenMeta.identifier) : literal(tokenMeta.value);
	}
	/**
	 * @param {?} dep
	 * @return {?}
	 */
	function depDef(dep) {
	    // Note: the following fields have already been normalized out by provider_analyzer:
	    // - isAttribute, isSelf, isHost
	    var /** @type {?} */ expr = dep.isValue ? convertValueToOutputAst(dep.value) : tokenExpr(/** @type {?} */ ((dep.token)));
	    var /** @type {?} */ flags = 0;
	    if (dep.isSkipSelf) {
	        flags |= 1 /* SkipSelf */;
	    }
	    if (dep.isOptional) {
	        flags |= 2 /* Optional */;
	    }
	    if (dep.isValue) {
	        flags |= 8 /* Value */;
	    }
	    return flags === 0 /* None */ ? expr : literalArr([literal(flags), expr]);
	}
	/**
	 * @param {?} astNodes
	 * @return {?}
	 */
	function needsAdditionalRootNode(astNodes) {
	    var /** @type {?} */ lastAstNode = astNodes[astNodes.length - 1];
	    if (lastAstNode instanceof EmbeddedTemplateAst) {
	        return lastAstNode.hasViewContainer;
	    }
	    if (lastAstNode instanceof ElementAst) {
	        if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {
	            return needsAdditionalRootNode(lastAstNode.children);
	        }
	        return lastAstNode.hasViewContainer;
	    }
	    return lastAstNode instanceof NgContentAst;
	}
	/**
	 * @param {?} lifecycleHook
	 * @return {?}
	 */
	function lifecycleHookToNodeFlag(lifecycleHook) {
	    var /** @type {?} */ nodeFlag = 0;
	    switch (lifecycleHook) {
	        case _angular_core.ɵLifecycleHooks.AfterContentChecked:
	            nodeFlag = 1048576 /* AfterContentChecked */;
	            break;
	        case _angular_core.ɵLifecycleHooks.AfterContentInit:
	            nodeFlag = 524288 /* AfterContentInit */;
	            break;
	        case _angular_core.ɵLifecycleHooks.AfterViewChecked:
	            nodeFlag = 4194304 /* AfterViewChecked */;
	            break;
	        case _angular_core.ɵLifecycleHooks.AfterViewInit:
	            nodeFlag = 2097152 /* AfterViewInit */;
	            break;
	        case _angular_core.ɵLifecycleHooks.DoCheck:
	            nodeFlag = 131072 /* DoCheck */;
	            break;
	        case _angular_core.ɵLifecycleHooks.OnChanges:
	            nodeFlag = 262144 /* OnChanges */;
	            break;
	        case _angular_core.ɵLifecycleHooks.OnDestroy:
	            nodeFlag = 65536 /* OnDestroy */;
	            break;
	        case _angular_core.ɵLifecycleHooks.OnInit:
	            nodeFlag = 32768 /* OnInit */;
	            break;
	    }
	    return nodeFlag;
	}
	/**
	 * @param {?} inputAst
	 * @param {?} dirAst
	 * @return {?}
	 */
	function elementBindingDef(inputAst, dirAst) {
	    switch (inputAst.type) {
	        case PropertyBindingType.Attribute:
	            return literalArr([
	                literal(1 /* TypeElementAttribute */), literal(inputAst.name),
	                literal(inputAst.securityContext)
	            ]);
	        case PropertyBindingType.Property:
	            return literalArr([
	                literal(8 /* TypeProperty */), literal(inputAst.name),
	                literal(inputAst.securityContext)
	            ]);
	        case PropertyBindingType.Animation:
	            var /** @type {?} */ bindingType = 8 /* TypeProperty */ |
	                (dirAst && dirAst.directive.isComponent ? 32 /* SyntheticHostProperty */ :
	                    16 /* SyntheticProperty */);
	            return literalArr([
	                literal(bindingType), literal('@' + inputAst.name), literal(inputAst.securityContext)
	            ]);
	        case PropertyBindingType.Class:
	            return literalArr([literal(2 /* TypeElementClass */), literal(inputAst.name), NULL_EXPR]);
	        case PropertyBindingType.Style:
	            return literalArr([
	                literal(4 /* TypeElementStyle */), literal(inputAst.name), literal(inputAst.unit)
	            ]);
	    }
	}
	/**
	 * @param {?} elementAst
	 * @return {?}
	 */
	function fixedAttrsDef(elementAst) {
	    var /** @type {?} */ mapResult = Object.create(null);
	    elementAst.attrs.forEach(function (attrAst) { mapResult[attrAst.name] = attrAst.value; });
	    elementAst.directives.forEach(function (dirAst) {
	        Object.keys(dirAst.directive.hostAttributes).forEach(function (name) {
	            var /** @type {?} */ value = dirAst.directive.hostAttributes[name];
	            var /** @type {?} */ prevValue = mapResult[name];
	            mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;
	        });
	    });
	    // Note: We need to sort to get a defined output order
	    // for tests and for caching generated artifacts...
	    return literalArr(Object.keys(mapResult).sort().map(function (attrName) { return literalArr([literal(attrName), literal(mapResult[attrName])]); }));
	}
	/**
	 * @param {?} attrName
	 * @param {?} attrValue1
	 * @param {?} attrValue2
	 * @return {?}
	 */
	function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	    if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
	        return attrValue1 + " " + attrValue2;
	    }
	    else {
	        return attrValue2;
	    }
	}
	/**
	 * @param {?} nodeIndex
	 * @param {?} exprs
	 * @return {?}
	 */
	function callCheckStmt(nodeIndex, exprs) {
	    if (exprs.length > 10) {
	        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(1 /* Dynamic */), literalArr(exprs)]);
	    }
	    else {
	        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(0 /* Inline */)].concat(exprs));
	    }
	}
	/**
	 * @param {?} nodeIndex
	 * @param {?} bindingIdx
	 * @param {?} expr
	 * @return {?}
	 */
	function callUnwrapValue(nodeIndex, bindingIdx, expr) {
	    return importExpr(createIdentifier(Identifiers.unwrapValue)).callFn([
	        VIEW_VAR, literal(nodeIndex), literal(bindingIdx), expr
	    ]);
	}
	/**
	 * @param {?} nodes
	 * @param {?=} result
	 * @return {?}
	 */
	function findStaticQueryIds(nodes, result) {
	    if (result === void 0) { result = new Map(); }
	    nodes.forEach(function (node) {
	        var /** @type {?} */ staticQueryIds = new Set();
	        var /** @type {?} */ dynamicQueryIds = new Set();
	        var /** @type {?} */ queryMatches = ((undefined));
	        if (node instanceof ElementAst) {
	            findStaticQueryIds(node.children, result);
	            node.children.forEach(function (child) {
	                var /** @type {?} */ childData = ((result.get(child)));
	                childData.staticQueryIds.forEach(function (queryId) { return staticQueryIds.add(queryId); });
	                childData.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });
	            });
	            queryMatches = node.queryMatches;
	        }
	        else if (node instanceof EmbeddedTemplateAst) {
	            findStaticQueryIds(node.children, result);
	            node.children.forEach(function (child) {
	                var /** @type {?} */ childData = ((result.get(child)));
	                childData.staticQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });
	                childData.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });
	            });
	            queryMatches = node.queryMatches;
	        }
	        if (queryMatches) {
	            queryMatches.forEach(function (match) { return staticQueryIds.add(match.queryId); });
	        }
	        dynamicQueryIds.forEach(function (queryId) { return staticQueryIds.delete(queryId); });
	        result.set(node, { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds });
	    });
	    return result;
	}
	/**
	 * @param {?} nodeStaticQueryIds
	 * @return {?}
	 */
	function staticViewQueryIds(nodeStaticQueryIds) {
	    var /** @type {?} */ staticQueryIds = new Set();
	    var /** @type {?} */ dynamicQueryIds = new Set();
	    Array.from(nodeStaticQueryIds.values()).forEach(function (entry) {
	        entry.staticQueryIds.forEach(function (queryId) { return staticQueryIds.add(queryId); });
	        entry.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });
	    });
	    dynamicQueryIds.forEach(function (queryId) { return staticQueryIds.delete(queryId); });
	    return { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds };
	}
	/**
	 * @param {?} directives
	 * @return {?}
	 */
	function createComponentFactoryResolver(directives) {
	    var /** @type {?} */ componentDirMeta = directives.find(function (dirAst) { return dirAst.directive.isComponent; });
	    if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {
	        var /** @type {?} */ entryComponentFactories = componentDirMeta.directive.entryComponents.map(function (entryComponent) { return importExpr({ reference: entryComponent.componentFactory }); });
	        var /** @type {?} */ token = createIdentifierToken(Identifiers.ComponentFactoryResolver);
	        var /** @type {?} */ classMeta = {
	            diDeps: [
	                { isValue: true, value: literalArr(entryComponentFactories) },
	                { token: token, isSkipSelf: true, isOptional: true },
	                { token: createIdentifierToken(Identifiers.NgModuleRef) },
	            ],
	            lifecycleHooks: [],
	            reference: resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)
	        };
	        return new ProviderAst(token, false, true, [{ token: token, multi: false, useClass: classMeta }], ProviderAstType.PrivateService, [], componentDirMeta.sourceSpan);
	    }
	    return null;
	}
	/**
	 * @param {?} eventAst
	 * @param {?} dirAst
	 * @return {?}
	 */
	function elementEventNameAndTarget(eventAst, dirAst) {
	    if (eventAst.isAnimation) {
	        return {
	            name: "@" + eventAst.name + "." + eventAst.phase,
	            target: dirAst && dirAst.directive.isComponent ? 'component' : null
	        };
	    }
	    else {
	        return eventAst;
	    }
	}
	/**
	 * @param {?} queryIds
	 * @param {?} queryId
	 * @param {?} isFirst
	 * @return {?}
	 */
	function calcStaticDynamicQueryFlags(queryIds, queryId, isFirst) {
	    var /** @type {?} */ flags = 0;
	    // Note: We only make queries static that query for a single item.
	    // This is because of backwards compatibility with the old view compiler...
	    if (isFirst && (queryIds.staticQueryIds.has(queryId) || !queryIds.dynamicQueryIds.has(queryId))) {
	        flags |= 134217728 /* StaticQuery */;
	    }
	    else {
	        flags |= 268435456 /* DynamicQuery */;
	    }
	    return flags;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var GeneratedFile = (function () {
	    /**
	     * @param {?} srcFileUrl
	     * @param {?} genFileUrl
	     * @param {?} source
	     */
	    function GeneratedFile(srcFileUrl, genFileUrl, source) {
	        this.srcFileUrl = srcFileUrl;
	        this.genFileUrl = genFileUrl;
	        this.source = source;
	    }
	    return GeneratedFile;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} summaryResolver
	 * @param {?} symbolResolver
	 * @param {?} symbols
	 * @param {?} types
	 * @return {?}
	 */
	function serializeSummaries(summaryResolver, symbolResolver, symbols, types) {
	    var /** @type {?} */ serializer = new Serializer$1(symbolResolver, summaryResolver);
	    // for symbols, we use everything except for the class metadata itself
	    // (we keep the statics though), as the class metadata is contained in the
	    // CompileTypeSummary.
	    symbols.forEach(function (resolvedSymbol) { return serializer.addOrMergeSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata }); });
	    // Add summaries that are referenced by the given symbols (transitively)
	    // Note: the serializer.symbols array might be growing while
	    // we execute the loop!
	    for (var /** @type {?} */ processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {
	        var /** @type {?} */ symbol = serializer.symbols[processedIndex];
	        if (summaryResolver.isLibraryFile(symbol.filePath)) {
	            var /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);
	            if (!summary) {
	                // some symbols might originate from a plain typescript library
	                // that just exported .d.ts and .metadata.json files, i.e. where no summary
	                // files were created.
	                var /** @type {?} */ resolvedSymbol = symbolResolver.resolveSymbol(symbol);
	                if (resolvedSymbol) {
	                    summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };
	                }
	            }
	            if (summary) {
	                serializer.addOrMergeSummary(summary);
	            }
	        }
	    }
	    // Add type summaries.
	    // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,
	    // as the type summaries already contain the transitive data that they require
	    // (in a minimal way).
	    types.forEach(function (typeSummary) {
	        serializer.addOrMergeSummary({ symbol: typeSummary.type.reference, metadata: null, type: typeSummary });
	        if (typeSummary.summaryKind === CompileSummaryKind.NgModule) {
	            var /** @type {?} */ ngModuleSummary = (typeSummary);
	            ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {
	                var /** @type {?} */ symbol = id.reference;
	                if (summaryResolver.isLibraryFile(symbol.filePath)) {
	                    var /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);
	                    if (summary) {
	                        serializer.addOrMergeSummary(summary);
	                    }
	                }
	            });
	        }
	    });
	    return serializer.serialize();
	}
	/**
	 * @param {?} symbolCache
	 * @param {?} json
	 * @return {?}
	 */
	function deserializeSummaries(symbolCache, json) {
	    var /** @type {?} */ deserializer = new Deserializer(symbolCache);
	    return deserializer.deserialize(json);
	}
	var Serializer$1 = (function (_super) {
	    __extends(Serializer$1, _super);
	    /**
	     * @param {?} symbolResolver
	     * @param {?} summaryResolver
	     */
	    function Serializer$1(symbolResolver, summaryResolver) {
	        var _this = _super.call(this) || this;
	        _this.symbolResolver = symbolResolver;
	        _this.summaryResolver = summaryResolver;
	        // Note: This only contains symbols without members.
	        _this.symbols = [];
	        _this.indexBySymbol = new Map();
	        _this.processedSummaryBySymbol = new Map();
	        _this.processedSummaries = [];
	        return _this;
	    }
	    /**
	     * @param {?} summary
	     * @return {?}
	     */
	    Serializer$1.prototype.addOrMergeSummary = function (summary) {
	        var /** @type {?} */ symbolMeta = summary.metadata;
	        if (symbolMeta && symbolMeta.__symbolic === 'class') {
	            // For classes, we keep everything except their class decorators.
	            // We need to keep e.g. the ctor args, method names, method decorators
	            // so that the class can be extended in another compilation unit.
	            // We don't keep the class decorators as
	            // 1) they refer to data
	            //   that should not cause a rebuild of downstream compilation units
	            //   (e.g. inline templates of @Component, or @NgModule.declarations)
	            // 2) their data is already captured in TypeSummaries, e.g. DirectiveSummary.
	            var /** @type {?} */ clone_1 = {};
	            Object.keys(symbolMeta).forEach(function (propName) {
	                if (propName !== 'decorators') {
	                    clone_1[propName] = symbolMeta[propName];
	                }
	            });
	            symbolMeta = clone_1;
	        }
	        var /** @type {?} */ processedSummary = this.processedSummaryBySymbol.get(summary.symbol);
	        if (!processedSummary) {
	            processedSummary = this.processValue({ symbol: summary.symbol });
	            this.processedSummaries.push(processedSummary);
	            this.processedSummaryBySymbol.set(summary.symbol, processedSummary);
	        }
	        // Note: == on purpose to compare with undefined!
	        if (processedSummary.metadata == null && symbolMeta != null) {
	            processedSummary.metadata = this.processValue(symbolMeta);
	        }
	        // Note: == on purpose to compare with undefined!
	        if (processedSummary.type == null && summary.type != null) {
	            processedSummary.type = this.processValue(summary.type);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    Serializer$1.prototype.serialize = function () {
	        var _this = this;
	        var /** @type {?} */ exportAs = [];
	        var /** @type {?} */ json = JSON.stringify({
	            summaries: this.processedSummaries,
	            symbols: this.symbols.map(function (symbol, index) {
	                symbol.assertNoMembers();
	                var /** @type {?} */ importAs = ((undefined));
	                if (_this.summaryResolver.isLibraryFile(symbol.filePath)) {
	                    importAs = symbol.name + "_" + index;
	                    exportAs.push({ symbol: symbol, exportAs: importAs });
	                }
	                return {
	                    __symbol: index,
	                    name: symbol.name,
	                    // We convert the source filenames tinto output filenames,
	                    // as the generated summary file will be used when teh current
	                    // compilation unit is used as a library
	                    filePath: _this.summaryResolver.getLibraryFileName(symbol.filePath),
	                    importAs: importAs
	                };
	            })
	        });
	        return { json: json, exportAs: exportAs };
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    Serializer$1.prototype.processValue = function (value) { return visitValue(value, this, null); };
	    /**
	     * @param {?} value
	     * @param {?} context
	     * @return {?}
	     */
	    Serializer$1.prototype.visitOther = function (value, context) {
	        if (value instanceof StaticSymbol) {
	            var /** @type {?} */ baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);
	            var /** @type {?} */ index = this.indexBySymbol.get(baseSymbol);
	            // Note: == on purpose to compare with undefined!
	            if (index == null) {
	                index = this.indexBySymbol.size;
	                this.indexBySymbol.set(baseSymbol, index);
	                this.symbols.push(baseSymbol);
	            }
	            return { __symbol: index, members: value.members };
	        }
	    };
	    return Serializer$1;
	}(ValueTransformer));
	var Deserializer = (function (_super) {
	    __extends(Deserializer, _super);
	    /**
	     * @param {?} symbolCache
	     */
	    function Deserializer(symbolCache) {
	        var _this = _super.call(this) || this;
	        _this.symbolCache = symbolCache;
	        return _this;
	    }
	    /**
	     * @param {?} json
	     * @return {?}
	     */
	    Deserializer.prototype.deserialize = function (json) {
	        var _this = this;
	        var /** @type {?} */ data = JSON.parse(json);
	        var /** @type {?} */ importAs = [];
	        this.symbols = [];
	        data.symbols.forEach(function (serializedSymbol) {
	            var /** @type {?} */ symbol = _this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name);
	            _this.symbols.push(symbol);
	            if (serializedSymbol.importAs) {
	                importAs.push({ symbol: symbol, importAs: serializedSymbol.importAs });
	            }
	        });
	        var /** @type {?} */ summaries = visitValue(data.summaries, this, null);
	        return { summaries: summaries, importAs: importAs };
	    };
	    /**
	     * @param {?} map
	     * @param {?} context
	     * @return {?}
	     */
	    Deserializer.prototype.visitStringMap = function (map, context) {
	        if ('__symbol' in map) {
	            var /** @type {?} */ baseSymbol = this.symbols[map['__symbol']];
	            var /** @type {?} */ members = map['members'];
	            return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :
	                baseSymbol;
	        }
	        else {
	            return _super.prototype.visitStringMap.call(this, map, context);
	        }
	    };
	    return Deserializer;
	}(ValueTransformer));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var AotCompiler = (function () {
	    /**
	     * @param {?} _config
	     * @param {?} _host
	     * @param {?} _metadataResolver
	     * @param {?} _templateParser
	     * @param {?} _styleCompiler
	     * @param {?} _viewCompiler
	     * @param {?} _ngModuleCompiler
	     * @param {?} _outputEmitter
	     * @param {?} _summaryResolver
	     * @param {?} _localeId
	     * @param {?} _translationFormat
	     * @param {?} _genFilePreamble
	     * @param {?} _symbolResolver
	     */
	    function AotCompiler(_config, _host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _genFilePreamble, _symbolResolver) {
	        this._config = _config;
	        this._host = _host;
	        this._metadataResolver = _metadataResolver;
	        this._templateParser = _templateParser;
	        this._styleCompiler = _styleCompiler;
	        this._viewCompiler = _viewCompiler;
	        this._ngModuleCompiler = _ngModuleCompiler;
	        this._outputEmitter = _outputEmitter;
	        this._summaryResolver = _summaryResolver;
	        this._localeId = _localeId;
	        this._translationFormat = _translationFormat;
	        this._genFilePreamble = _genFilePreamble;
	        this._symbolResolver = _symbolResolver;
	    }
	    /**
	     * @return {?}
	     */
	    AotCompiler.prototype.clearCache = function () { this._metadataResolver.clearCache(); };
	    /**
	     * @param {?} rootFiles
	     * @return {?}
	     */
	    AotCompiler.prototype.compileAll = function (rootFiles) {
	        var _this = this;
	        var /** @type {?} */ programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);
	        var _a = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules;
	        return Promise
	            .all(ngModules.map(function (ngModule) { return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
	            .then(function () {
	            var /** @type {?} */ sourceModules = files.map(function (file) { return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables); });
	            return flatten(sourceModules);
	        });
	    };
	    /**
	     * @param {?} srcFileUrl
	     * @param {?} ngModuleByPipeOrDirective
	     * @param {?} directives
	     * @param {?} pipes
	     * @param {?} ngModules
	     * @param {?} injectables
	     * @return {?}
	     */
	    AotCompiler.prototype._compileSrcFile = function (srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {
	        var _this = this;
	        var /** @type {?} */ fileSuffix = splitTypescriptSuffix(srcFileUrl)[1];
	        var /** @type {?} */ statements = [];
	        var /** @type {?} */ exportedVars = [];
	        var /** @type {?} */ generatedFiles = [];
	        generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, statements, exportedVars));
	        // compile all ng modules
	        exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) { return _this._compileModule(ngModuleType, statements); }));
	        // compile components
	        directives.forEach(function (dirType) {
	            var /** @type {?} */ compMeta = _this._metadataResolver.getDirectiveMetadata(/** @type {?} */ (dirType));
	            if (!compMeta.isComponent) {
	                return Promise.resolve(null);
	            }
	            var /** @type {?} */ ngModule = ngModuleByPipeOrDirective.get(dirType);
	            if (!ngModule) {
	                throw new Error("Internal Error: cannot determine the module for component " + identifierName(compMeta.type) + "!");
	            }
	            _assertComponent(compMeta);
	            // compile styles
	            var /** @type {?} */ stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
	            stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
	                generatedFiles.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
	            });
	            // compile components
	            var /** @type {?} */ compViewVars = _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements);
	            exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), compViewVars.viewClassVar, compViewVars.compRenderTypeVar);
	        });
	        if (statements.length > 0) {
	            var /** @type {?} */ srcModule = this._codegenSourceModule(srcFileUrl, ngfactoryFilePath(srcFileUrl), statements, exportedVars);
	            generatedFiles.unshift(srcModule);
	        }
	        return generatedFiles;
	    };
	    /**
	     * @param {?} srcFileUrl
	     * @param {?} directives
	     * @param {?} pipes
	     * @param {?} ngModules
	     * @param {?} injectables
	     * @param {?} targetStatements
	     * @param {?} targetExportedVars
	     * @return {?}
	     */
	    AotCompiler.prototype._createSummary = function (srcFileUrl, directives, pipes, ngModules, injectables, targetStatements, targetExportedVars) {
	        var _this = this;
	        var /** @type {?} */ symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl)
	            .map(function (symbol) { return _this._symbolResolver.resolveSymbol(symbol); });
	        var /** @type {?} */ typeSummaries = ngModules.map(function (ref) { return ((_this._metadataResolver.getNgModuleSummary(ref))); }).concat(directives.map(function (ref) { return ((_this._metadataResolver.getDirectiveSummary(ref))); }), pipes.map(function (ref) { return ((_this._metadataResolver.getPipeSummary(ref))); }), injectables.map(function (ref) { return ((_this._metadataResolver.getInjectableSummary(ref))); }));
	        var _a = serializeSummaries(this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries), json = _a.json, exportAs = _a.exportAs;
	        exportAs.forEach(function (entry) {
	            targetStatements.push(variable(entry.exportAs).set(importExpr({ reference: entry.symbol })).toDeclStmt());
	            targetExportedVars.push(entry.exportAs);
	        });
	        return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);
	    };
	    /**
	     * @param {?} ngModuleType
	     * @param {?} targetStatements
	     * @return {?}
	     */
	    AotCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {
	        var /** @type {?} */ ngModule = ((this._metadataResolver.getNgModuleMetadata(ngModuleType)));
	        var /** @type {?} */ providers = [];
	        if (this._localeId) {
	            providers.push({
	                token: createIdentifierToken(Identifiers.LOCALE_ID),
	                useValue: this._localeId,
	            });
	        }
	        if (this._translationFormat) {
	            providers.push({
	                token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
	                useValue: this._translationFormat
	            });
	        }
	        var /** @type {?} */ appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
	        targetStatements.push.apply(targetStatements, appCompileResult.statements);
	        return appCompileResult.ngModuleFactoryVar;
	    };
	    /**
	     * @param {?} compMeta
	     * @param {?} ngModule
	     * @param {?} fileSuffix
	     * @param {?} targetStatements
	     * @return {?}
	     */
	    AotCompiler.prototype._compileComponentFactory = function (compMeta, ngModule, fileSuffix, targetStatements) {
	        var /** @type {?} */ hostType = this._metadataResolver.getHostComponentType(compMeta.type.reference);
	        var /** @type {?} */ hostMeta = createHostComponentMeta(hostType, compMeta, this._metadataResolver.getHostComponentViewClass(hostType));
	        var /** @type {?} */ hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements)
	            .viewClassVar;
	        var /** @type {?} */ compFactoryVar = componentFactoryName(compMeta.type.reference);
	        var /** @type {?} */ inputsExprs = [];
	        for (var /** @type {?} */ propName in compMeta.inputs) {
	            var /** @type {?} */ templateName = compMeta.inputs[propName];
	            // Don't quote so that the key gets minified...
	            inputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));
	        }
	        var /** @type {?} */ outputsExprs = [];
	        for (var /** @type {?} */ propName in compMeta.outputs) {
	            var /** @type {?} */ templateName = compMeta.outputs[propName];
	            // Don't quote so that the key gets minified...
	            outputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));
	        }
	        targetStatements.push(variable(compFactoryVar)
	            .set(importExpr(createIdentifier(Identifiers.createComponentFactory)).callFn([
	            literal(compMeta.selector), importExpr(compMeta.type),
	            variable(hostViewFactoryVar), new LiteralMapExpr(inputsExprs),
	            new LiteralMapExpr(outputsExprs),
	            literalArr(/** @type {?} */ ((compMeta.template)).ngContentSelectors.map(function (selector) { return literal(selector); }))
	        ]))
	            .toDeclStmt(importType(createIdentifier(Identifiers.ComponentFactory), [/** @type {?} */ ((importType(compMeta.type)))], [TypeModifier.Const]), [StmtModifier.Final]));
	        return compFactoryVar;
	    };
	    /**
	     * @param {?} compMeta
	     * @param {?} ngModule
	     * @param {?} directiveIdentifiers
	     * @param {?} componentStyles
	     * @param {?} fileSuffix
	     * @param {?} targetStatements
	     * @return {?}
	     */
	    AotCompiler.prototype._compileComponent = function (compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
	        var _this = this;
	        var /** @type {?} */ directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	        var /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	        var _a = this._templateParser.parse(compMeta, /** @type {?} */ ((((compMeta.template)).template)), directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, /** @type {?} */ ((compMeta.template)))), parsedTemplate = _a.template, usedPipes = _a.pipes;
	        var /** @type {?} */ stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
	        var /** @type {?} */ viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, usedPipes);
	        if (componentStyles) {
	            targetStatements.push.apply(targetStatements, _resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix));
	        }
	        targetStatements.push.apply(targetStatements, viewResult.statements);
	        return { viewClassVar: viewResult.viewClassVar, compRenderTypeVar: viewResult.rendererTypeVar };
	    };
	    /**
	     * @param {?} fileUrl
	     * @param {?} stylesCompileResult
	     * @param {?} fileSuffix
	     * @return {?}
	     */
	    AotCompiler.prototype._codgenStyles = function (fileUrl, stylesCompileResult, fileSuffix) {
	        _resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix);
	        return this._codegenSourceModule(fileUrl, _stylesModuleUrl(/** @type {?} */ ((stylesCompileResult.meta.moduleUrl)), stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
	    };
	    /**
	     * @param {?} srcFileUrl
	     * @param {?} genFileUrl
	     * @param {?} statements
	     * @param {?} exportedVars
	     * @return {?}
	     */
	    AotCompiler.prototype._codegenSourceModule = function (srcFileUrl, genFileUrl, statements, exportedVars) {
	        return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(sourceUrl(srcFileUrl), genFileUrl, statements, exportedVars, this._genFilePreamble));
	    };
	    return AotCompiler;
	}());
	/**
	 * @param {?} reflector
	 * @param {?} compileResult
	 * @param {?} fileSuffix
	 * @return {?}
	 */
	function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
	    compileResult.dependencies.forEach(function (dep) {
	        dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
	    });
	    return compileResult.statements;
	}
	/**
	 * @param {?} stylesheetUrl
	 * @param {?} shim
	 * @param {?} suffix
	 * @return {?}
	 */
	function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
	    return "" + stylesheetUrl + (shim ? '.shim' : '') + ".ngstyle" + suffix;
	}
	/**
	 * @param {?} meta
	 * @return {?}
	 */
	function _assertComponent(meta) {
	    if (!meta.isComponent) {
	        throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	    }
	}
	/**
	 * @param {?} programStaticSymbols
	 * @param {?} host
	 * @param {?} metadataResolver
	 * @return {?}
	 */
	function analyzeNgModules(programStaticSymbols, host, metadataResolver) {
	    var _a = _createNgModules(programStaticSymbols, host, metadataResolver), ngModules = _a.ngModules, symbolsMissingModule = _a.symbolsMissingModule;
	    return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);
	}
	/**
	 * @param {?} programStaticSymbols
	 * @param {?} host
	 * @param {?} metadataResolver
	 * @return {?}
	 */
	function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) {
	    var /** @type {?} */ result = analyzeNgModules(programStaticSymbols, host, metadataResolver);
	    if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
	        var /** @type {?} */ messages = result.symbolsMissingModule.map(function (s) { return "Cannot determine the module for class " + s.name + " in " + s.filePath + "! Add " + s.name + " to the NgModule to fix it."; });
	        throw syntaxError(messages.join('\n'));
	    }
	    return result;
	}
	/**
	 * @param {?} programSymbols
	 * @param {?} ngModuleMetas
	 * @param {?} symbolsMissingModule
	 * @param {?} metadataResolver
	 * @return {?}
	 */
	function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) {
	    var /** @type {?} */ moduleMetasByRef = new Map();
	    ngModuleMetas.forEach(function (ngModule) { return moduleMetasByRef.set(ngModule.type.reference, ngModule); });
	    var /** @type {?} */ ngModuleByPipeOrDirective = new Map();
	    var /** @type {?} */ ngModulesByFile = new Map();
	    var /** @type {?} */ ngDirectivesByFile = new Map();
	    var /** @type {?} */ ngPipesByFile = new Map();
	    var /** @type {?} */ ngInjectablesByFile = new Map();
	    var /** @type {?} */ filePaths = new Set();
	    // Make sure we produce an analyzed file for each input file
	    programSymbols.forEach(function (symbol) {
	        var /** @type {?} */ filePath = symbol.filePath;
	        filePaths.add(filePath);
	        if (metadataResolver.isInjectable(symbol)) {
	            ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));
	        }
	    });
	    // Looping over all modules to construct:
	    // - a map from file to modules `ngModulesByFile`,
	    // - a map from file to directives `ngDirectivesByFile`,
	    // - a map from file to pipes `ngPipesByFile`,
	    // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.
	    ngModuleMetas.forEach(function (ngModuleMeta) {
	        var /** @type {?} */ srcFileUrl = ngModuleMeta.type.reference.filePath;
	        filePaths.add(srcFileUrl);
	        ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
	        ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	            var /** @type {?} */ fileUrl = dirIdentifier.reference.filePath;
	            filePaths.add(fileUrl);
	            ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
	            ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
	        });
	        ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) {
	            var /** @type {?} */ fileUrl = pipeIdentifier.reference.filePath;
	            filePaths.add(fileUrl);
	            ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));
	            ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
	        });
	    });
	    var /** @type {?} */ files = [];
	    filePaths.forEach(function (srcUrl) {
	        var /** @type {?} */ directives = ngDirectivesByFile.get(srcUrl) || [];
	        var /** @type {?} */ pipes = ngPipesByFile.get(srcUrl) || [];
	        var /** @type {?} */ ngModules = ngModulesByFile.get(srcUrl) || [];
	        var /** @type {?} */ injectables = ngInjectablesByFile.get(srcUrl) || [];
	        files.push({ srcUrl: srcUrl, directives: directives, pipes: pipes, ngModules: ngModules, injectables: injectables });
	    });
	    return {
	        // map directive/pipe to module
	        ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
	        // list modules and directives for every source file
	        files: files,
	        ngModules: ngModuleMetas, symbolsMissingModule: symbolsMissingModule
	    };
	}
	/**
	 * @param {?} staticSymbolResolver
	 * @param {?} files
	 * @param {?} host
	 * @return {?}
	 */
	function extractProgramSymbols(staticSymbolResolver, files, host) {
	    var /** @type {?} */ staticSymbols = [];
	    files.filter(function (fileName) { return host.isSourceFile(fileName); }).forEach(function (sourceFile) {
	        staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function (symbol) {
	            var /** @type {?} */ resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);
	            var /** @type {?} */ symbolMeta = resolvedSymbol.metadata;
	            if (symbolMeta) {
	                if (symbolMeta.__symbolic != 'error') {
	                    // Ignore symbols that are only included to record error information.
	                    staticSymbols.push(resolvedSymbol.symbol);
	                }
	            }
	        });
	    });
	    return staticSymbols;
	}
	/**
	 * @param {?} programStaticSymbols
	 * @param {?} host
	 * @param {?} metadataResolver
	 * @return {?}
	 */
	function _createNgModules(programStaticSymbols, host, metadataResolver) {
	    var /** @type {?} */ ngModules = new Map();
	    var /** @type {?} */ programPipesAndDirectives = [];
	    var /** @type {?} */ ngModulePipesAndDirective = new Set();
	    var /** @type {?} */ addNgModule = function (staticSymbol) {
	        if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) {
	            return false;
	        }
	        var /** @type {?} */ ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);
	        if (ngModule) {
	            ngModules.set(ngModule.type.reference, ngModule);
	            ngModule.declaredDirectives.forEach(function (dir) { return ngModulePipesAndDirective.add(dir.reference); });
	            ngModule.declaredPipes.forEach(function (pipe) { return ngModulePipesAndDirective.add(pipe.reference); });
	            // For every input module add the list of transitively included modules
	            ngModule.transitiveModule.modules.forEach(function (modMeta) { return addNgModule(modMeta.reference); });
	        }
	        return !!ngModule;
	    };
	    programStaticSymbols.forEach(function (staticSymbol) {
	        if (!addNgModule(staticSymbol) &&
	            (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
	            programPipesAndDirectives.push(staticSymbol);
	        }
	    });
	    // Throw an error if any of the program pipe or directives is not declared by a module
	    var /** @type {?} */ symbolsMissingModule = programPipesAndDirectives.filter(function (s) { return !ngModulePipesAndDirective.has(s); });
	    return { ngModules: Array.from(ngModules.values()), symbolsMissingModule: symbolsMissingModule };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var StaticAndDynamicReflectionCapabilities = (function () {
	    /**
	     * @param {?} staticDelegate
	     */
	    function StaticAndDynamicReflectionCapabilities(staticDelegate) {
	        this.staticDelegate = staticDelegate;
	        this.dynamicDelegate = new _angular_core.ɵReflectionCapabilities();
	    }
	    /**
	     * @param {?} staticDelegate
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.install = function (staticDelegate) {
	        _angular_core.ɵreflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));
	    };
	    /**
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.factory = function (type) { return this.dynamicDelegate.factory(type); };
	    /**
	     * @param {?} type
	     * @param {?} lcProperty
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) :
	            this.dynamicDelegate.hasLifecycleHook(type, lcProperty);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.parameters = function (type) {
	        return isStaticType(type) ? this.staticDelegate.parameters(type) :
	            this.dynamicDelegate.parameters(type);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.annotations = function (type) {
	        return isStaticType(type) ? this.staticDelegate.annotations(type) :
	            this.dynamicDelegate.annotations(type);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	        return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) :
	            this.dynamicDelegate.propMetadata(typeOrFunc);
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.getter = function (name) { return this.dynamicDelegate.getter(name); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.setter = function (name) { return this.dynamicDelegate.setter(name); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.method = function (name) { return this.dynamicDelegate.method(name); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.importUri = function (type) { return ((this.staticDelegate.importUri(type))); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.resourceUri = function (type) { return this.staticDelegate.resourceUri(type); };
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return this.staticDelegate.resolveIdentifier(name, moduleUrl, members);
	    };
	    /**
	     * @param {?} enumIdentifier
	     * @param {?} name
	     * @return {?}
	     */
	    StaticAndDynamicReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) {
	        if (isStaticType(enumIdentifier)) {
	            return this.staticDelegate.resolveEnum(enumIdentifier, name);
	        }
	        else {
	            return null;
	        }
	    };
	    return StaticAndDynamicReflectionCapabilities;
	}());
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function isStaticType(type) {
	    return typeof type === 'object' && type.name && type.filePath;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ANGULAR_CORE = '@angular/core';
	var HIDDEN_KEY = /^\$.*\$$/;
	var IGNORE = {
	    __symbolic: 'ignore'
	};
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function shouldIgnore(value) {
	    return value && value.__symbolic == 'ignore';
	}
	/**
	 * A static reflector implements enough of the Reflector API that is necessary to compile
	 * templates statically.
	 */
	var StaticReflector = (function () {
	    /**
	     * @param {?} summaryResolver
	     * @param {?} symbolResolver
	     * @param {?=} knownMetadataClasses
	     * @param {?=} knownMetadataFunctions
	     * @param {?=} errorRecorder
	     */
	    function StaticReflector(summaryResolver, symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {
	        if (knownMetadataClasses === void 0) { knownMetadataClasses = []; }
	        if (knownMetadataFunctions === void 0) { knownMetadataFunctions = []; }
	        var _this = this;
	        this.summaryResolver = summaryResolver;
	        this.symbolResolver = symbolResolver;
	        this.errorRecorder = errorRecorder;
	        this.annotationCache = new Map();
	        this.propertyCache = new Map();
	        this.parameterCache = new Map();
	        this.methodCache = new Map();
	        this.conversionMap = new Map();
	        this.annotationForParentClassWithSummaryKind = new Map();
	        this.annotationNames = new Map();
	        this.initializeConversionMap();
	        knownMetadataClasses.forEach(function (kc) { return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor); });
	        knownMetadataFunctions.forEach(function (kf) { return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn); });
	        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Directive, [_angular_core.Directive, _angular_core.Component]);
	        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [_angular_core.Pipe]);
	        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [_angular_core.NgModule]);
	        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Injectable, [_angular_core.Injectable, _angular_core.Pipe, _angular_core.Directive, _angular_core.Component, _angular_core.NgModule]);
	        this.annotationNames.set(_angular_core.Directive, 'Directive');
	        this.annotationNames.set(_angular_core.Component, 'Component');
	        this.annotationNames.set(_angular_core.Pipe, 'Pipe');
	        this.annotationNames.set(_angular_core.NgModule, 'NgModule');
	        this.annotationNames.set(_angular_core.Injectable, 'Injectable');
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    StaticReflector.prototype.importUri = function (typeOrFunc) {
	        var /** @type {?} */ staticSymbol = this.findSymbolDeclaration(typeOrFunc);
	        return staticSymbol ? staticSymbol.filePath : null;
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    StaticReflector.prototype.resourceUri = function (typeOrFunc) {
	        var /** @type {?} */ staticSymbol = this.findSymbolDeclaration(typeOrFunc);
	        return this.symbolResolver.getResourcePath(staticSymbol);
	    };
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @return {?}
	     */
	    StaticReflector.prototype.resolveIdentifier = function (name, moduleUrl, members) {
	        var /** @type {?} */ importSymbol = this.getStaticSymbol(moduleUrl, name);
	        var /** @type {?} */ rootSymbol = this.findDeclaration(moduleUrl, name);
	        if (importSymbol != rootSymbol) {
	            this.symbolResolver.recordImportAs(rootSymbol, importSymbol);
	        }
	        if (members && members.length) {
	            return this.getStaticSymbol(rootSymbol.filePath, rootSymbol.name, members);
	        }
	        return rootSymbol;
	    };
	    /**
	     * @param {?} moduleUrl
	     * @param {?} name
	     * @param {?=} containingFile
	     * @return {?}
	     */
	    StaticReflector.prototype.findDeclaration = function (moduleUrl, name, containingFile) {
	        return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));
	    };
	    /**
	     * @param {?} symbol
	     * @return {?}
	     */
	    StaticReflector.prototype.findSymbolDeclaration = function (symbol) {
	        var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);
	        if (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
	            return this.findSymbolDeclaration(resolvedSymbol.metadata);
	        }
	        else {
	            return symbol;
	        }
	    };
	    /**
	     * @param {?} enumIdentifier
	     * @param {?} name
	     * @return {?}
	     */
	    StaticReflector.prototype.resolveEnum = function (enumIdentifier, name) {
	        var /** @type {?} */ staticSymbol = enumIdentifier;
	        var /** @type {?} */ members = (staticSymbol.members || []).concat(name);
	        return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, members);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticReflector.prototype.annotations = function (type) {
	        var _this = this;
	        var /** @type {?} */ annotations = this.annotationCache.get(type);
	        if (!annotations) {
	            annotations = [];
	            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	            var /** @type {?} */ parentType = this.findParentType(type, classMetadata);
	            if (parentType) {
	                var /** @type {?} */ parentAnnotations = this.annotations(parentType);
	                annotations.push.apply(annotations, parentAnnotations);
	            }
	            var /** @type {?} */ ownAnnotations_1 = [];
	            if (classMetadata['decorators']) {
	                ownAnnotations_1 = this.simplify(type, classMetadata['decorators']);
	                annotations.push.apply(annotations, ownAnnotations_1);
	            }
	            if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) &&
	                this.summaryResolver.isLibraryFile(parentType.filePath)) {
	                var /** @type {?} */ summary = this.summaryResolver.resolveSummary(parentType);
	                if (summary && summary.type) {
	                    var /** @type {?} */ requiredAnnotationTypes = ((this.annotationForParentClassWithSummaryKind.get(/** @type {?} */ ((summary.type.summaryKind)))));
	                    var /** @type {?} */ typeHasRequiredAnnotation = requiredAnnotationTypes.some(function (requiredType) { return ownAnnotations_1.some(function (ann) { return ann instanceof requiredType; }); });
	                    if (!typeHasRequiredAnnotation) {
	                        this.reportError(syntaxError("Class " + type.name + " in " + type.filePath + " extends from a " + CompileSummaryKind[((summary.type.summaryKind))] + " in another compilation unit without duplicating the decorator. " +
	                            ("Please add a " + requiredAnnotationTypes.map(function (type) { return _this.annotationNames.get(type); }).join(' or ') + " decorator to the class.")), type);
	                    }
	                }
	            }
	            this.annotationCache.set(type, annotations.filter(function (ann) { return !!ann; }));
	        }
	        return annotations;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticReflector.prototype.propMetadata = function (type) {
	        var _this = this;
	        var /** @type {?} */ propMetadata = this.propertyCache.get(type);
	        if (!propMetadata) {
	            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	            propMetadata = {};
	            var /** @type {?} */ parentType = this.findParentType(type, classMetadata);
	            if (parentType) {
	                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentType);
	                Object.keys(parentPropMetadata_1).forEach(function (parentProp) {
	                    ((propMetadata))[parentProp] = parentPropMetadata_1[parentProp];
	                });
	            }
	            var /** @type {?} */ members_1 = classMetadata['members'] || {};
	            Object.keys(members_1).forEach(function (propName) {
	                var /** @type {?} */ propData = members_1[propName];
	                var /** @type {?} */ prop = ((propData))
	                    .find(function (a) { return a['__symbolic'] == 'property' || a['__symbolic'] == 'method'; });
	                var /** @type {?} */ decorators = [];
	                if (((propMetadata))[propName]) {
	                    decorators.push.apply(decorators, ((propMetadata))[propName]);
	                } /** @type {?} */
	                ((propMetadata))[propName] = decorators;
	                if (prop && prop['decorators']) {
	                    decorators.push.apply(decorators, _this.simplify(type, prop['decorators']));
	                }
	            });
	            this.propertyCache.set(type, propMetadata);
	        }
	        return propMetadata;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticReflector.prototype.parameters = function (type) {
	        if (!(type instanceof StaticSymbol)) {
	            this.reportError(new Error("parameters received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
	            return [];
	        }
	        try {
	            var /** @type {?} */ parameters_1 = this.parameterCache.get(type);
	            if (!parameters_1) {
	                var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                var /** @type {?} */ parentType = this.findParentType(type, classMetadata);
	                var /** @type {?} */ members = classMetadata ? classMetadata['members'] : null;
	                var /** @type {?} */ ctorData = members ? members['__ctor__'] : null;
	                if (ctorData) {
	                    var /** @type {?} */ ctor = ((ctorData)).find(function (a) { return a['__symbolic'] == 'constructor'; });
	                    var /** @type {?} */ parameterTypes = (this.simplify(type, ctor['parameters'] || []));
	                    var /** @type {?} */ parameterDecorators_1 = (this.simplify(type, ctor['parameterDecorators'] || []));
	                    parameters_1 = [];
	                    parameterTypes.forEach(function (paramType, index) {
	                        var /** @type {?} */ nestedResult = [];
	                        if (paramType) {
	                            nestedResult.push(paramType);
	                        }
	                        var /** @type {?} */ decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;
	                        if (decorators) {
	                            nestedResult.push.apply(nestedResult, decorators);
	                        } /** @type {?} */
	                        ((parameters_1)).push(nestedResult);
	                    });
	                }
	                else if (parentType) {
	                    parameters_1 = this.parameters(parentType);
	                }
	                if (!parameters_1) {
	                    parameters_1 = [];
	                }
	                this.parameterCache.set(type, parameters_1);
	            }
	            return parameters_1;
	        }
	        catch (e) {
	            console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
	            throw e;
	        }
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticReflector.prototype._methodNames = function (type) {
	        var /** @type {?} */ methodNames = this.methodCache.get(type);
	        if (!methodNames) {
	            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	            methodNames = {};
	            var /** @type {?} */ parentType = this.findParentType(type, classMetadata);
	            if (parentType) {
	                var /** @type {?} */ parentMethodNames_1 = this._methodNames(parentType);
	                Object.keys(parentMethodNames_1).forEach(function (parentProp) {
	                    ((methodNames))[parentProp] = parentMethodNames_1[parentProp];
	                });
	            }
	            var /** @type {?} */ members_2 = classMetadata['members'] || {};
	            Object.keys(members_2).forEach(function (propName) {
	                var /** @type {?} */ propData = members_2[propName];
	                var /** @type {?} */ isMethod = ((propData)).some(function (a) { return a['__symbolic'] == 'method'; }); /** @type {?} */
	                ((methodNames))[propName] = ((methodNames))[propName] || isMethod;
	            });
	            this.methodCache.set(type, methodNames);
	        }
	        return methodNames;
	    };
	    /**
	     * @param {?} type
	     * @param {?} classMetadata
	     * @return {?}
	     */
	    StaticReflector.prototype.findParentType = function (type, classMetadata) {
	        var /** @type {?} */ parentType = this.trySimplify(type, classMetadata['extends']);
	        if (parentType instanceof StaticSymbol) {
	            return parentType;
	        }
	    };
	    /**
	     * @param {?} type
	     * @param {?} lcProperty
	     * @return {?}
	     */
	    StaticReflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	        if (!(type instanceof StaticSymbol)) {
	            this.reportError(new Error("hasLifecycleHook received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
	        }
	        try {
	            return !!this._methodNames(type)[lcProperty];
	        }
	        catch (e) {
	            console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
	            throw e;
	        }
	    };
	    /**
	     * @param {?} type
	     * @param {?} ctor
	     * @return {?}
	     */
	    StaticReflector.prototype._registerDecoratorOrConstructor = function (type, ctor) {
	        this.conversionMap.set(type, function (context, args) { return new (ctor.bind.apply(ctor, [void 0].concat(args)))(); });
	    };
	    /**
	     * @param {?} type
	     * @param {?} fn
	     * @return {?}
	     */
	    StaticReflector.prototype._registerFunction = function (type, fn) {
	        this.conversionMap.set(type, function (context, args) { return fn.apply(undefined, args); });
	    };
	    /**
	     * @return {?}
	     */
	    StaticReflector.prototype.initializeConversionMap = function () {
	        this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');
	        this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), _angular_core.Host);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), _angular_core.Injectable);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), _angular_core.Self);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), _angular_core.SkipSelf);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), _angular_core.Inject);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), _angular_core.Optional);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), _angular_core.Attribute);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), _angular_core.ContentChild);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), _angular_core.ContentChildren);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), _angular_core.ViewChild);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), _angular_core.ViewChildren);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), _angular_core.Input);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), _angular_core.Output);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), _angular_core.Pipe);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), _angular_core.HostBinding);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), _angular_core.HostListener);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), _angular_core.Directive);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), _angular_core.Component);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), _angular_core.NgModule);
	        // Note: Some metadata classes can be used directly with Provider.deps.
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), _angular_core.Host);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), _angular_core.Self);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), _angular_core.SkipSelf);
	        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), _angular_core.Optional);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'trigger'), _angular_core.trigger);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'state'), _angular_core.state);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'transition'), _angular_core.transition);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'style'), _angular_core.style);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'animate'), _angular_core.animate);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'keyframes'), _angular_core.keyframes);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'sequence'), _angular_core.sequence);
	        this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'group'), _angular_core.group);
	    };
	    /**
	     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
	     * All types passed to the StaticResolver should be pseudo-types returned by this method.
	     *
	     * @param {?} declarationFile the absolute path of the file where the symbol is declared
	     * @param {?} name the name of the type.
	     * @param {?=} members
	     * @return {?}
	     */
	    StaticReflector.prototype.getStaticSymbol = function (declarationFile, name, members) {
	        return this.symbolResolver.getStaticSymbol(declarationFile, name, members);
	    };
	    /**
	     * @param {?} error
	     * @param {?} context
	     * @param {?=} path
	     * @return {?}
	     */
	    StaticReflector.prototype.reportError = function (error, context, path) {
	        if (this.errorRecorder) {
	            this.errorRecorder(error, (context && context.filePath) || path);
	        }
	        else {
	            throw error;
	        }
	    };
	    /**
	     * Simplify but discard any errors
	     * @param {?} context
	     * @param {?} value
	     * @return {?}
	     */
	    StaticReflector.prototype.trySimplify = function (context, value) {
	        var /** @type {?} */ originalRecorder = this.errorRecorder;
	        this.errorRecorder = function (error, fileName) { };
	        var /** @type {?} */ result = this.simplify(context, value);
	        this.errorRecorder = originalRecorder;
	        return result;
	    };
	    /**
	     * \@internal
	     * @param {?} context
	     * @param {?} value
	     * @return {?}
	     */
	    StaticReflector.prototype.simplify = function (context, value) {
	        var _this = this;
	        var /** @type {?} */ self = this;
	        var /** @type {?} */ scope = BindingScope.empty;
	        var /** @type {?} */ calling = new Map();
	        /**
	         * @param {?} context
	         * @param {?} value
	         * @param {?} depth
	         * @return {?}
	         */
	        function simplifyInContext(context, value, depth) {
	            /**
	             * @param {?} staticSymbol
	             * @return {?}
	             */
	            function resolveReferenceValue(staticSymbol) {
	                var /** @type {?} */ resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);
	                return resolvedSymbol ? resolvedSymbol.metadata : null;
	            }
	            /**
	             * @param {?} functionSymbol
	             * @param {?} targetFunction
	             * @param {?} args
	             * @return {?}
	             */
	            function simplifyCall(functionSymbol, targetFunction, args) {
	                if (targetFunction && targetFunction['__symbolic'] == 'function') {
	                    if (calling.get(functionSymbol)) {
	                        throw new Error('Recursion not supported');
	                    }
	                    calling.set(functionSymbol, true);
	                    try {
	                        var /** @type {?} */ value_1 = targetFunction['value'];
	                        if (value_1 && (depth != 0 || value_1.__symbolic != 'error')) {
	                            var /** @type {?} */ parameters = targetFunction['parameters'];
	                            var /** @type {?} */ defaults = targetFunction.defaults;
	                            args = args.map(function (arg) { return simplifyInContext(context, arg, depth + 1); })
	                                .map(function (arg) { return shouldIgnore(arg) ? undefined : arg; });
	                            if (defaults && defaults.length > args.length) {
	                                args.push.apply(args, defaults.slice(args.length).map(function (value) { return simplify(value); }));
	                            }
	                            var /** @type {?} */ functionScope = BindingScope.build();
	                            for (var /** @type {?} */ i = 0; i < parameters.length; i++) {
	                                functionScope.define(parameters[i], args[i]);
	                            }
	                            var /** @type {?} */ oldScope = scope;
	                            var /** @type {?} */ result_1;
	                            try {
	                                scope = functionScope.done();
	                                result_1 = simplifyInContext(functionSymbol, value_1, depth + 1);
	                            }
	                            finally {
	                                scope = oldScope;
	                            }
	                            return result_1;
	                        }
	                    }
	                    finally {
	                        calling.delete(functionSymbol);
	                    }
	                }
	                if (depth === 0) {
	                    // If depth is 0 we are evaluating the top level expression that is describing element
	                    // decorator. In this case, it is a decorator we don't understand, such as a custom
	                    // non-angular decorator, and we should just ignore it.
	                    return IGNORE;
	                }
	                return simplify({ __symbolic: 'error', message: 'Function call not supported', context: functionSymbol });
	            }
	            /**
	             * @param {?} expression
	             * @return {?}
	             */
	            function simplify(expression) {
	                if (isPrimitive(expression)) {
	                    return expression;
	                }
	                if (expression instanceof Array) {
	                    var /** @type {?} */ result_2 = [];
	                    for (var _i = 0, _a = ((expression)); _i < _a.length; _i++) {
	                        var item = _a[_i];
	                        // Check for a spread expression
	                        if (item && item.__symbolic === 'spread') {
	                            var /** @type {?} */ spreadArray = simplify(item.expression);
	                            if (Array.isArray(spreadArray)) {
	                                for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {
	                                    var spreadItem = spreadArray_1[_b];
	                                    result_2.push(spreadItem);
	                                }
	                                continue;
	                            }
	                        }
	                        var /** @type {?} */ value_2 = simplify(item);
	                        if (shouldIgnore(value_2)) {
	                            continue;
	                        }
	                        result_2.push(value_2);
	                    }
	                    return result_2;
	                }
	                if (expression instanceof StaticSymbol) {
	                    // Stop simplification at builtin symbols
	                    if (expression === self.injectionToken || expression === self.opaqueToken ||
	                        self.conversionMap.has(expression)) {
	                        return expression;
	                    }
	                    else {
	                        var /** @type {?} */ staticSymbol = expression;
	                        var /** @type {?} */ declarationValue = resolveReferenceValue(staticSymbol);
	                        if (declarationValue) {
	                            return simplifyInContext(staticSymbol, declarationValue, depth + 1);
	                        }
	                        else {
	                            return staticSymbol;
	                        }
	                    }
	                }
	                if (expression) {
	                    if (expression['__symbolic']) {
	                        var /** @type {?} */ staticSymbol = void 0;
	                        switch (expression['__symbolic']) {
	                            case 'binop':
	                                var /** @type {?} */ left = simplify(expression['left']);
	                                if (shouldIgnore(left))
	                                    return left;
	                                var /** @type {?} */ right = simplify(expression['right']);
	                                if (shouldIgnore(right))
	                                    return right;
	                                switch (expression['operator']) {
	                                    case '&&':
	                                        return left && right;
	                                    case '||':
	                                        return left || right;
	                                    case '|':
	                                        return left | right;
	                                    case '^':
	                                        return left ^ right;
	                                    case '&':
	                                        return left & right;
	                                    case '==':
	                                        return left == right;
	                                    case '!=':
	                                        return left != right;
	                                    case '===':
	                                        return left === right;
	                                    case '!==':
	                                        return left !== right;
	                                    case '<':
	                                        return left < right;
	                                    case '>':
	                                        return left > right;
	                                    case '<=':
	                                        return left <= right;
	                                    case '>=':
	                                        return left >= right;
	                                    case '<<':
	                                        return left << right;
	                                    case '>>':
	                                        return left >> right;
	                                    case '+':
	                                        return left + right;
	                                    case '-':
	                                        return left - right;
	                                    case '*':
	                                        return left * right;
	                                    case '/':
	                                        return left / right;
	                                    case '%':
	                                        return left % right;
	                                }
	                                return null;
	                            case 'if':
	                                var /** @type {?} */ condition = simplify(expression['condition']);
	                                return condition ? simplify(expression['thenExpression']) :
	                                    simplify(expression['elseExpression']);
	                            case 'pre':
	                                var /** @type {?} */ operand = simplify(expression['operand']);
	                                if (shouldIgnore(operand))
	                                    return operand;
	                                switch (expression['operator']) {
	                                    case '+':
	                                        return operand;
	                                    case '-':
	                                        return -operand;
	                                    case '!':
	                                        return !operand;
	                                    case '~':
	                                        return ~operand;
	                                }
	                                return null;
	                            case 'index':
	                                var /** @type {?} */ indexTarget = simplify(expression['expression']);
	                                var /** @type {?} */ index = simplify(expression['index']);
	                                if (indexTarget && isPrimitive(index))
	                                    return indexTarget[index];
	                                return null;
	                            case 'select':
	                                var /** @type {?} */ member = expression['member'];
	                                var /** @type {?} */ selectContext = context;
	                                var /** @type {?} */ selectTarget = simplify(expression['expression']);
	                                if (selectTarget instanceof StaticSymbol) {
	                                    var /** @type {?} */ members = selectTarget.members.concat(member);
	                                    selectContext =
	                                        self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);
	                                    var /** @type {?} */ declarationValue = resolveReferenceValue(selectContext);
	                                    if (declarationValue) {
	                                        return simplifyInContext(selectContext, declarationValue, depth + 1);
	                                    }
	                                    else {
	                                        return selectContext;
	                                    }
	                                }
	                                if (selectTarget && isPrimitive(member))
	                                    return simplifyInContext(selectContext, selectTarget[member], depth + 1);
	                                return null;
	                            case 'reference':
	                                // Note: This only has to deal with variable references,
	                                // as symbol references have been converted into StaticSymbols already
	                                // in the StaticSymbolResolver!
	                                var /** @type {?} */ name = expression['name'];
	                                var /** @type {?} */ localValue = scope.resolve(name);
	                                if (localValue != BindingScope.missing) {
	                                    return localValue;
	                                }
	                                break;
	                            case 'class':
	                                return context;
	                            case 'function':
	                                return context;
	                            case 'new':
	                            case 'call':
	                                // Determine if the function is a built-in conversion
	                                staticSymbol = simplifyInContext(context, expression['expression'], depth + 1);
	                                if (staticSymbol instanceof StaticSymbol) {
	                                    if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {
	                                        // if somebody calls new InjectionToken, don't create an InjectionToken,
	                                        // but rather return the symbol to which the InjectionToken is assigned to.
	                                        return context;
	                                    }
	                                    var /** @type {?} */ argExpressions = expression['arguments'] || [];
	                                    var /** @type {?} */ converter = self.conversionMap.get(staticSymbol);
	                                    if (converter) {
	                                        var /** @type {?} */ args = argExpressions.map(function (arg) { return simplifyInContext(context, arg, depth + 1); })
	                                            .map(function (arg) { return shouldIgnore(arg) ? undefined : arg; });
	                                        return converter(context, args);
	                                    }
	                                    else {
	                                        // Determine if the function is one we can simplify.
	                                        var /** @type {?} */ targetFunction = resolveReferenceValue(staticSymbol);
	                                        return simplifyCall(staticSymbol, targetFunction, argExpressions);
	                                    }
	                                }
	                                return IGNORE;
	                            case 'error':
	                                var /** @type {?} */ message = produceErrorMessage(expression);
	                                if (expression['line']) {
	                                    message =
	                                        message + " (position " + (expression['line'] + 1) + ":" + (expression['character'] + 1) + " in the original .ts file)";
	                                    self.reportError(positionalError(message, context.filePath, expression['line'], expression['character']), context);
	                                }
	                                else {
	                                    self.reportError(new Error(message), context);
	                                }
	                                return IGNORE;
	                            case 'ignore':
	                                return expression;
	                        }
	                        return null;
	                    }
	                    return mapStringMap(expression, function (value, name) { return simplify(value); });
	                }
	                return IGNORE;
	            }
	            try {
	                return simplify(value);
	            }
	            catch (e) {
	                var /** @type {?} */ members = context.members.length ? "." + context.members.join('.') : '';
	                var /** @type {?} */ message = e.message + ", resolving symbol " + context.name + members + " in " + context.filePath;
	                if (e.fileName) {
	                    throw positionalError(message, e.fileName, e.line, e.column);
	                }
	                throw syntaxError(message);
	            }
	        }
	        var /** @type {?} */ recordedSimplifyInContext = function (context, value, depth) {
	            try {
	                return simplifyInContext(context, value, depth);
	            }
	            catch (e) {
	                _this.reportError(e, context);
	            }
	        };
	        var /** @type {?} */ result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) :
	            simplifyInContext(context, value, 0);
	        if (shouldIgnore(result)) {
	            return undefined;
	        }
	        return result;
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    StaticReflector.prototype.getTypeMetadata = function (type) {
	        var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(type);
	        return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :
	            { __symbolic: 'class' };
	    };
	    return StaticReflector;
	}());
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function expandedMessage(error) {
	    switch (error.message) {
	        case 'Reference to non-exported class':
	            if (error.context && error.context.className) {
	                return "Reference to a non-exported class " + error.context.className + ". Consider exporting the class";
	            }
	            break;
	        case 'Variable not initialized':
	            return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';
	        case 'Destructuring not supported':
	            return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';
	        case 'Could not resolve type':
	            if (error.context && error.context.typeName) {
	                return "Could not resolve type " + error.context.typeName;
	            }
	            break;
	        case 'Function call not supported':
	            var /** @type {?} */ prefix = error.context && error.context.name ? "Calling function '" + error.context.name + "', f" : 'F';
	            return prefix +
	                'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';
	        case 'Reference to a local symbol':
	            if (error.context && error.context.name) {
	                return "Reference to a local (non-exported) symbol '" + error.context.name + "'. Consider exporting the symbol";
	            }
	            break;
	    }
	    return error.message;
	}
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function produceErrorMessage(error) {
	    return "Error encountered resolving symbol values statically. " + expandedMessage(error);
	}
	/**
	 * @param {?} input
	 * @param {?} transform
	 * @return {?}
	 */
	function mapStringMap(input, transform) {
	    if (!input)
	        return {};
	    var /** @type {?} */ result = {};
	    Object.keys(input).forEach(function (key) {
	        var /** @type {?} */ value = transform(input[key], key);
	        if (!shouldIgnore(value)) {
	            if (HIDDEN_KEY.test(key)) {
	                Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });
	            }
	            else {
	                result[key] = value;
	            }
	        }
	    });
	    return result;
	}
	/**
	 * @param {?} o
	 * @return {?}
	 */
	function isPrimitive(o) {
	    return o === null || (typeof o !== 'function' && typeof o !== 'object');
	}
	/**
	 * @abstract
	 */
	var BindingScope = (function () {
	    function BindingScope() {
	    }
	    /**
	     * @abstract
	     * @param {?} name
	     * @return {?}
	     */
	    BindingScope.prototype.resolve = function (name) { };
	    /**
	     * @return {?}
	     */
	    BindingScope.build = function () {
	        var /** @type {?} */ current = new Map();
	        return {
	            define: function (name, value) {
	                current.set(name, value);
	                return this;
	            },
	            done: function () {
	                return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
	            }
	        };
	    };
	    return BindingScope;
	}());
	BindingScope.missing = {};
	BindingScope.empty = { resolve: function (name) { return BindingScope.missing; } };
	var PopulatedScope = (function (_super) {
	    __extends(PopulatedScope, _super);
	    /**
	     * @param {?} bindings
	     */
	    function PopulatedScope(bindings) {
	        var _this = _super.call(this) || this;
	        _this.bindings = bindings;
	        return _this;
	    }
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    PopulatedScope.prototype.resolve = function (name) {
	        return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;
	    };
	    return PopulatedScope;
	}(BindingScope));
	/**
	 * @param {?} message
	 * @param {?} fileName
	 * @param {?} line
	 * @param {?} column
	 * @return {?}
	 */
	function positionalError(message, fileName, line, column) {
	    var /** @type {?} */ result = new Error(message);
	    ((result)).fileName = fileName;
	    ((result)).line = line;
	    ((result)).column = column;
	    return result;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ResolvedStaticSymbol = (function () {
	    /**
	     * @param {?} symbol
	     * @param {?} metadata
	     */
	    function ResolvedStaticSymbol(symbol, metadata) {
	        this.symbol = symbol;
	        this.metadata = metadata;
	    }
	    return ResolvedStaticSymbol;
	}());
	var SUPPORTED_SCHEMA_VERSION = 3;
	/**
	 * This class is responsible for loading metadata per symbol,
	 * and normalizing references between symbols.
	 *
	 * Internally, it only uses symbols without members,
	 * and deduces the values for symbols with members based
	 * on these symbols.
	 */
	var StaticSymbolResolver = (function () {
	    /**
	     * @param {?} host
	     * @param {?} staticSymbolCache
	     * @param {?} summaryResolver
	     * @param {?=} errorRecorder
	     */
	    function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {
	        this.host = host;
	        this.staticSymbolCache = staticSymbolCache;
	        this.summaryResolver = summaryResolver;
	        this.errorRecorder = errorRecorder;
	        this.metadataCache = new Map();
	        this.resolvedSymbols = new Map();
	        this.resolvedFilePaths = new Set();
	        this.importAs = new Map();
	        this.symbolResourcePaths = new Map();
	        this.symbolFromFile = new Map();
	    }
	    /**
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.resolveSymbol = function (staticSymbol) {
	        if (staticSymbol.members.length > 0) {
	            return ((this._resolveSymbolMembers(staticSymbol)));
	        }
	        var /** @type {?} */ result = this.resolvedSymbols.get(staticSymbol);
	        if (result) {
	            return result;
	        }
	        result = ((this._resolveSymbolFromSummary(staticSymbol)));
	        if (result) {
	            return result;
	        }
	        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
	        // have summaries, only .d.ts files. So we always need to check both, the summary
	        // and metadata.
	        this._createSymbolsOf(staticSymbol.filePath);
	        result = ((this.resolvedSymbols.get(staticSymbol)));
	        return result;
	    };
	    /**
	     * getImportAs produces a symbol that can be used to import the given symbol.
	     * The import might be different than the symbol if the symbol is exported from
	     * a library with a summary; in which case we want to import the symbol from the
	     * ngfactory re-export instead of directly to avoid introducing a direct dependency
	     * on an otherwise indirect dependency.
	     *
	     * @param {?} staticSymbol the symbol for which to generate a import symbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getImportAs = function (staticSymbol) {
	        if (staticSymbol.members.length) {
	            var /** @type {?} */ baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);
	            var /** @type {?} */ baseImportAs = this.getImportAs(baseSymbol);
	            return baseImportAs ?
	                this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) :
	                null;
	        }
	        var /** @type {?} */ result = this.summaryResolver.getImportAs(staticSymbol);
	        if (!result) {
	            result = ((this.importAs.get(staticSymbol)));
	        }
	        return result;
	    };
	    /**
	     * getResourcePath produces the path to the original location of the symbol and should
	     * be used to determine the relative location of resource references recorded in
	     * symbol metadata.
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getResourcePath = function (staticSymbol) {
	        return this.symbolResourcePaths.get(staticSymbol) || staticSymbol.filePath;
	    };
	    /**
	     * getTypeArity returns the number of generic type parameters the given symbol
	     * has. If the symbol is not a type the result is null.
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getTypeArity = function (staticSymbol) {
	        // If the file is a factory file, don't resolve the symbol as doing so would
	        // cause the metadata for an factory file to be loaded which doesn't exist.
	        // All references to generated classes must include the correct arity whenever
	        // generating code.
	        if (isNgFactoryFile(staticSymbol.filePath)) {
	            return null;
	        }
	        var /** @type {?} */ resolvedSymbol = this.resolveSymbol(staticSymbol);
	        while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
	            resolvedSymbol = this.resolveSymbol(resolvedSymbol.metadata);
	        }
	        return (resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity) || null;
	    };
	    /**
	     * @param {?} sourceSymbol
	     * @param {?} targetSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.recordImportAs = function (sourceSymbol, targetSymbol) {
	        sourceSymbol.assertNoMembers();
	        targetSymbol.assertNoMembers();
	        this.importAs.set(sourceSymbol, targetSymbol);
	    };
	    /**
	     * Invalidate all information derived from the given file.
	     *
	     * @param {?} fileName the file to invalidate
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.invalidateFile = function (fileName) {
	        this.metadataCache.delete(fileName);
	        this.resolvedFilePaths.delete(fileName);
	        var /** @type {?} */ symbols = this.symbolFromFile.get(fileName);
	        if (symbols) {
	            this.symbolFromFile.delete(fileName);
	            for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
	                var symbol = symbols_1[_i];
	                this.resolvedSymbols.delete(symbol);
	                this.importAs.delete(symbol);
	                this.symbolResourcePaths.delete(symbol);
	            }
	        }
	    };
	    /**
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype._resolveSymbolMembers = function (staticSymbol) {
	        var /** @type {?} */ members = staticSymbol.members;
	        var /** @type {?} */ baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));
	        if (!baseResolvedSymbol) {
	            return null;
	        }
	        var /** @type {?} */ baseMetadata = baseResolvedSymbol.metadata;
	        if (baseMetadata instanceof StaticSymbol) {
	            return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));
	        }
	        else if (baseMetadata && baseMetadata.__symbolic === 'class') {
	            if (baseMetadata.statics && members.length === 1) {
	                return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);
	            }
	        }
	        else {
	            var /** @type {?} */ value = baseMetadata;
	            for (var /** @type {?} */ i = 0; i < members.length && value; i++) {
	                value = value[members[i]];
	            }
	            return new ResolvedStaticSymbol(staticSymbol, value);
	        }
	        return null;
	    };
	    /**
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype._resolveSymbolFromSummary = function (staticSymbol) {
	        var /** @type {?} */ summary = this.summaryResolver.resolveSummary(staticSymbol);
	        return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;
	    };
	    /**
	     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
	     * All types passed to the StaticResolver should be pseudo-types returned by this method.
	     *
	     * @param {?} declarationFile the absolute path of the file where the symbol is declared
	     * @param {?} name the name of the type.
	     * @param {?=} members a symbol for a static member of the named type
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getStaticSymbol = function (declarationFile, name, members) {
	        return this.staticSymbolCache.get(declarationFile, name, members);
	    };
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getSymbolsOf = function (filePath) {
	        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
	        // have summaries, only .d.ts files. So we always need to check both, the summary
	        // and metadata.
	        var /** @type {?} */ symbols = new Set(this.summaryResolver.getSymbolsOf(filePath));
	        this._createSymbolsOf(filePath);
	        this.resolvedSymbols.forEach(function (resolvedSymbol) {
	            if (resolvedSymbol.symbol.filePath === filePath) {
	                symbols.add(resolvedSymbol.symbol);
	            }
	        });
	        return Array.from(symbols);
	    };
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype._createSymbolsOf = function (filePath) {
	        var _this = this;
	        if (this.resolvedFilePaths.has(filePath)) {
	            return;
	        }
	        this.resolvedFilePaths.add(filePath);
	        var /** @type {?} */ resolvedSymbols = [];
	        var /** @type {?} */ metadata = this.getModuleMetadata(filePath);
	        if (metadata['metadata']) {
	            // handle direct declarations of the symbol
	            var /** @type {?} */ topLevelSymbolNames_1 = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));
	            var /** @type {?} */ origins_1 = metadata['origins'] || {};
	            Object.keys(metadata['metadata']).forEach(function (metadataKey) {
	                var /** @type {?} */ symbolMeta = metadata['metadata'][metadataKey];
	                var /** @type {?} */ name = unescapeIdentifier(metadataKey);
	                var /** @type {?} */ symbol = _this.getStaticSymbol(filePath, name);
	                var /** @type {?} */ importSymbol = undefined;
	                if (metadata['importAs']) {
	                    // Index bundle indexes should use the importAs module name instead of a reference
	                    // to the .d.ts file directly.
	                    importSymbol = _this.getStaticSymbol(metadata['importAs'], name);
	                    _this.recordImportAs(symbol, importSymbol);
	                }
	                var /** @type {?} */ origin = origins_1.hasOwnProperty(metadataKey) && origins_1[metadataKey];
	                if (origin) {
	                    // If the symbol is from a bundled index, use the declaration location of the
	                    // symbol so relative references (such as './my.html') will be calculated
	                    // correctly.
	                    var /** @type {?} */ originFilePath = _this.resolveModule(origin, filePath);
	                    if (!originFilePath) {
	                        _this.reportError(new Error("Couldn't resolve original symbol for " + origin + " from " + filePath));
	                    }
	                    else {
	                        _this.symbolResourcePaths.set(symbol, originFilePath);
	                    }
	                }
	                resolvedSymbols.push(_this.createResolvedSymbol(symbol, filePath, topLevelSymbolNames_1, symbolMeta));
	            });
	        }
	        // handle the symbols in one of the re-export location
	        if (metadata['exports']) {
	            var _loop_1 = function (moduleExport) {
	                // handle the symbols in the list of explicitly re-exported symbols.
	                if (moduleExport.export) {
	                    moduleExport.export.forEach(function (exportSymbol) {
	                        var /** @type {?} */ symbolName;
	                        if (typeof exportSymbol === 'string') {
	                            symbolName = exportSymbol;
	                        }
	                        else {
	                            symbolName = exportSymbol.as;
	                        }
	                        symbolName = unescapeIdentifier(symbolName);
	                        var /** @type {?} */ symName = symbolName;
	                        if (typeof exportSymbol !== 'string') {
	                            symName = unescapeIdentifier(exportSymbol.name);
	                        }
	                        var /** @type {?} */ resolvedModule = _this.resolveModule(moduleExport.from, filePath);
	                        if (resolvedModule) {
	                            var /** @type {?} */ targetSymbol = _this.getStaticSymbol(resolvedModule, symName);
	                            var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, symbolName);
	                            resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));
	                        }
	                    });
	                }
	                else {
	                    // handle the symbols via export * directives.
	                    var /** @type {?} */ resolvedModule = this_1.resolveModule(moduleExport.from, filePath);
	                    if (resolvedModule) {
	                        var /** @type {?} */ nestedExports = this_1.getSymbolsOf(resolvedModule);
	                        nestedExports.forEach(function (targetSymbol) {
	                            var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name);
	                            resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));
	                        });
	                    }
	                }
	            };
	            var this_1 = this;
	            for (var _i = 0, _a = metadata['exports']; _i < _a.length; _i++) {
	                var moduleExport = _a[_i];
	                _loop_1(/** @type {?} */ moduleExport);
	            }
	        }
	        resolvedSymbols.forEach(function (resolvedSymbol) { return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol); });
	        this.symbolFromFile.set(filePath, resolvedSymbols.map(function (resolvedSymbol) { return resolvedSymbol.symbol; }));
	    };
	    /**
	     * @param {?} sourceSymbol
	     * @param {?} topLevelPath
	     * @param {?} topLevelSymbolNames
	     * @param {?} metadata
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.createResolvedSymbol = function (sourceSymbol, topLevelPath, topLevelSymbolNames, metadata) {
	        // For classes that don't have Angular summaries / metadata,
	        // we only keep their arity, but nothing else
	        // (e.g. their constructor parameters).
	        // We do this to prevent introducing deep imports
	        // as we didn't generate .ngfactory.ts files with proper reexports.
	        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && metadata &&
	            metadata['__symbolic'] === 'class') {
	            var /** @type {?} */ transformedMeta_1 = { __symbolic: 'class', arity: metadata.arity };
	            return new ResolvedStaticSymbol(sourceSymbol, transformedMeta_1);
	        }
	        var /** @type {?} */ self = this;
	        var ReferenceTransformer = (function (_super) {
	            __extends(ReferenceTransformer, _super);
	            function ReferenceTransformer() {
	                return _super !== null && _super.apply(this, arguments) || this;
	            }
	            /**
	             * @param {?} map
	             * @param {?} functionParams
	             * @return {?}
	             */
	            ReferenceTransformer.prototype.visitStringMap = function (map, functionParams) {
	                var /** @type {?} */ symbolic = map['__symbolic'];
	                if (symbolic === 'function') {
	                    var /** @type {?} */ oldLen = functionParams.length;
	                    functionParams.push.apply(functionParams, (map['parameters'] || []));
	                    var /** @type {?} */ result = _super.prototype.visitStringMap.call(this, map, functionParams);
	                    functionParams.length = oldLen;
	                    return result;
	                }
	                else if (symbolic === 'reference') {
	                    var /** @type {?} */ module_1 = map['module'];
	                    var /** @type {?} */ name = map['name'] ? unescapeIdentifier(map['name']) : map['name'];
	                    if (!name) {
	                        return null;
	                    }
	                    var /** @type {?} */ filePath = void 0;
	                    if (module_1) {
	                        filePath = ((self.resolveModule(module_1, sourceSymbol.filePath)));
	                        if (!filePath) {
	                            return {
	                                __symbolic: 'error',
	                                message: "Could not resolve " + module_1 + " relative to " + sourceSymbol.filePath + "."
	                            };
	                        }
	                        return self.getStaticSymbol(filePath, name);
	                    }
	                    else if (functionParams.indexOf(name) >= 0) {
	                        // reference to a function parameter
	                        return { __symbolic: 'reference', name: name };
	                    }
	                    else {
	                        if (topLevelSymbolNames.has(name)) {
	                            return self.getStaticSymbol(topLevelPath, name);
	                        }
	                        // ambient value
	                        null;
	                    }
	                }
	                else {
	                    return _super.prototype.visitStringMap.call(this, map, functionParams);
	                }
	            };
	            return ReferenceTransformer;
	        }(ValueTransformer));
	        var /** @type {?} */ transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);
	        if (transformedMeta instanceof StaticSymbol) {
	            return this.createExport(sourceSymbol, transformedMeta);
	        }
	        return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);
	    };
	    /**
	     * @param {?} sourceSymbol
	     * @param {?} targetSymbol
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.createExport = function (sourceSymbol, targetSymbol) {
	        sourceSymbol.assertNoMembers();
	        targetSymbol.assertNoMembers();
	        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath)) {
	            // This case is for an ng library importing symbols from a plain ts library
	            // transitively.
	            // Note: We rely on the fact that we discover symbols in the direction
	            // from source files to library files
	            this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);
	        }
	        return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);
	    };
	    /**
	     * @param {?} error
	     * @param {?=} context
	     * @param {?=} path
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.reportError = function (error, context, path) {
	        if (this.errorRecorder) {
	            this.errorRecorder(error, (context && context.filePath) || path);
	        }
	        else {
	            throw error;
	        }
	    };
	    /**
	     * @param {?} module an absolute path to a module file.
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getModuleMetadata = function (module) {
	        var /** @type {?} */ moduleMetadata = this.metadataCache.get(module);
	        if (!moduleMetadata) {
	            var /** @type {?} */ moduleMetadatas = this.host.getMetadataFor(module);
	            if (moduleMetadatas) {
	                var /** @type {?} */ maxVersion_1 = -1;
	                moduleMetadatas.forEach(function (md) {
	                    if (md['version'] > maxVersion_1) {
	                        maxVersion_1 = md['version'];
	                        moduleMetadata = md;
	                    }
	                });
	            }
	            if (!moduleMetadata) {
	                moduleMetadata =
	                    { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };
	            }
	            if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {
	                var /** @type {?} */ errorMessage = moduleMetadata['version'] == 2 ?
	                    "Unsupported metadata version " + moduleMetadata['version'] + " for module " + module + ". This module should be compiled with a newer version of ngc" :
	                    "Metadata version mismatch for module " + module + ", found version " + moduleMetadata['version'] + ", expected " + SUPPORTED_SCHEMA_VERSION;
	                this.reportError(new Error(errorMessage));
	            }
	            this.metadataCache.set(module, moduleMetadata);
	        }
	        return moduleMetadata;
	    };
	    /**
	     * @param {?} module
	     * @param {?} symbolName
	     * @param {?=} containingFile
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.getSymbolByModule = function (module, symbolName, containingFile) {
	        var /** @type {?} */ filePath = this.resolveModule(module, containingFile);
	        if (!filePath) {
	            this.reportError(new Error("Could not resolve module " + module + (containingFile ? " relative to $ {\n            containingFile\n          } " : '')));
	            return this.getStaticSymbol("ERROR:" + module, symbolName);
	        }
	        return this.getStaticSymbol(filePath, symbolName);
	    };
	    /**
	     * @param {?} module
	     * @param {?=} containingFile
	     * @return {?}
	     */
	    StaticSymbolResolver.prototype.resolveModule = function (module, containingFile) {
	        try {
	            return this.host.moduleNameToFileName(module, containingFile);
	        }
	        catch (e) {
	            console.error("Could not resolve module '" + module + "' relative to file " + containingFile);
	            this.reportError(e, undefined, containingFile);
	        }
	        return null;
	    };
	    return StaticSymbolResolver;
	}());
	/**
	 * @param {?} identifier
	 * @return {?}
	 */
	function unescapeIdentifier(identifier) {
	    return identifier.startsWith('___') ? identifier.substr(1) : identifier;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var AotSummaryResolver = (function () {
	    /**
	     * @param {?} host
	     * @param {?} staticSymbolCache
	     */
	    function AotSummaryResolver(host, staticSymbolCache) {
	        this.host = host;
	        this.staticSymbolCache = staticSymbolCache;
	        this.summaryCache = new Map();
	        this.loadedFilePaths = new Set();
	        this.importAs = new Map();
	    }
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    AotSummaryResolver.prototype.isLibraryFile = function (filePath) {
	        // Note: We need to strip the .ngfactory. file path,
	        // so this method also works for generated files
	        // (for which host.isSourceFile will always return false).
	        return !this.host.isSourceFile(stripNgFactory(filePath));
	    };
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    AotSummaryResolver.prototype.getLibraryFileName = function (filePath) { return this.host.getOutputFileName(filePath); };
	    /**
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    AotSummaryResolver.prototype.resolveSummary = function (staticSymbol) {
	        staticSymbol.assertNoMembers();
	        var /** @type {?} */ summary = this.summaryCache.get(staticSymbol);
	        if (!summary) {
	            this._loadSummaryFile(staticSymbol.filePath);
	            summary = ((this.summaryCache.get(staticSymbol)));
	        }
	        return summary;
	    };
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    AotSummaryResolver.prototype.getSymbolsOf = function (filePath) {
	        this._loadSummaryFile(filePath);
	        return Array.from(this.summaryCache.keys()).filter(function (symbol) { return symbol.filePath === filePath; });
	    };
	    /**
	     * @param {?} staticSymbol
	     * @return {?}
	     */
	    AotSummaryResolver.prototype.getImportAs = function (staticSymbol) {
	        staticSymbol.assertNoMembers();
	        return ((this.importAs.get(staticSymbol)));
	    };
	    /**
	     * @param {?} filePath
	     * @return {?}
	     */
	    AotSummaryResolver.prototype._loadSummaryFile = function (filePath) {
	        var _this = this;
	        if (this.loadedFilePaths.has(filePath)) {
	            return;
	        }
	        this.loadedFilePaths.add(filePath);
	        if (this.isLibraryFile(filePath)) {
	            var /** @type {?} */ summaryFilePath = summaryFileName(filePath);
	            var /** @type {?} */ json = void 0;
	            try {
	                json = this.host.loadSummary(summaryFilePath);
	            }
	            catch (e) {
	                console.error("Error loading summary file " + summaryFilePath);
	                throw e;
	            }
	            if (json) {
	                var _a = deserializeSummaries(this.staticSymbolCache, json), summaries = _a.summaries, importAs = _a.importAs;
	                summaries.forEach(function (summary) { return _this.summaryCache.set(summary.symbol, summary); });
	                importAs.forEach(function (importAs) {
	                    _this.importAs.set(importAs.symbol, _this.staticSymbolCache.get(ngfactoryFilePath(filePath), importAs.importAs));
	                });
	            }
	        }
	    };
	    return AotSummaryResolver;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Creates a new AotCompiler based on options and a host.
	 * @param {?} compilerHost
	 * @param {?} options
	 * @return {?}
	 */
	function createAotCompiler(compilerHost, options) {
	    var /** @type {?} */ translations = options.translations || '';
	    var /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();
	    var /** @type {?} */ symbolCache = new StaticSymbolCache();
	    var /** @type {?} */ summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);
	    var /** @type {?} */ symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);
	    var /** @type {?} */ staticReflector = new StaticReflector(summaryResolver, symbolResolver);
	    StaticAndDynamicReflectionCapabilities.install(staticReflector);
	    var /** @type {?} */ console = new _angular_core.ɵConsole();
	    var /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, _angular_core.MissingTranslationStrategy.Warning, console);
	    var /** @type {?} */ config = new CompilerConfig({
	        defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
	        useJit: false,
	        enableLegacyTemplate: options.enableLegacyTemplate !== false,
	    });
	    var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return compilerHost.loadResource(url); } }, urlResolver, htmlParser, config);
	    var /** @type {?} */ expressionParser = new Parser(new Lexer());
	    var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();
	    var /** @type {?} */ tmplParser = new TemplateParser(config, expressionParser, elementSchemaRegistry, htmlParser, console, []);
	    var /** @type {?} */ resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector);
	    // TODO(vicb): do not pass options.i18nFormat here
	    var /** @type {?} */ importResolver = {
	        getImportAs: function (symbol) { return ((symbolResolver.getImportAs(symbol))); },
	        fileNameToModuleName: function (fileName, containingFilePath) { return compilerHost.fileNameToModuleName(fileName, containingFilePath); },
	        getTypeArity: function (symbol) { return ((symbolResolver.getTypeArity(symbol))); }
	    };
	    var /** @type {?} */ viewCompiler = new ViewCompiler(config, elementSchemaRegistry);
	    var /** @type {?} */ compiler = new AotCompiler(config, compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, new NgModuleCompiler(), new TypeScriptEmitter(importResolver), summaryResolver, options.locale || null, options.i18nFormat || null, options.genFilePreamble || null, symbolResolver);
	    return { compiler: compiler, reflector: staticReflector };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} statements
	 * @param {?} resultVars
	 * @return {?}
	 */
	function interpretStatements(statements, resultVars) {
	    var /** @type {?} */ stmtsWithReturn = statements.concat([new ReturnStatement(literalArr(resultVars.map(function (resultVar) { return variable(resultVar); })))]);
	    var /** @type {?} */ ctx = new _ExecutionContext(null, null, null, new Map());
	    var /** @type {?} */ visitor = new StatementInterpreter();
	    var /** @type {?} */ result = visitor.visitAllStatements(stmtsWithReturn, ctx);
	    return result != null ? result.value : null;
	}
	/**
	 * @param {?} varNames
	 * @param {?} varValues
	 * @param {?} statements
	 * @param {?} ctx
	 * @param {?} visitor
	 * @return {?}
	 */
	function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
	    var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();
	    for (var /** @type {?} */ i = 0; i < varNames.length; i++) {
	        childCtx.vars.set(varNames[i], varValues[i]);
	    }
	    var /** @type {?} */ result = visitor.visitAllStatements(statements, childCtx);
	    return result ? result.value : null;
	}
	var _ExecutionContext = (function () {
	    /**
	     * @param {?} parent
	     * @param {?} instance
	     * @param {?} className
	     * @param {?} vars
	     */
	    function _ExecutionContext(parent, instance, className, vars) {
	        this.parent = parent;
	        this.instance = instance;
	        this.className = className;
	        this.vars = vars;
	    }
	    /**
	     * @return {?}
	     */
	    _ExecutionContext.prototype.createChildWihtLocalVars = function () {
	        return new _ExecutionContext(this, this.instance, this.className, new Map());
	    };
	    return _ExecutionContext;
	}());
	var ReturnValue = (function () {
	    /**
	     * @param {?} value
	     */
	    function ReturnValue(value) {
	        this.value = value;
	    }
	    return ReturnValue;
	}());
	/**
	 * @param {?} _classStmt
	 * @param {?} _ctx
	 * @param {?} _visitor
	 * @return {?}
	 */
	function createDynamicClass(_classStmt, _ctx, _visitor) {
	    var /** @type {?} */ propertyDescriptors = {};
	    _classStmt.getters.forEach(function (getter) {
	        // Note: use `function` instead of arrow function to capture `this`
	        propertyDescriptors[getter.name] = {
	            configurable: false,
	            get: function () {
	                var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
	            }
	        };
	    });
	    _classStmt.methods.forEach(function (method) {
	        var /** @type {?} */ paramNames = method.params.map(function (param) { return param.name; });
	        // Note: use `function` instead of arrow function to capture `this`
	        propertyDescriptors[((method.name))] = {
	            writable: false,
	            configurable: false,
	            value: function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
	            }
	        };
	    });
	    var /** @type {?} */ ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });
	    // Note: use `function` instead of arrow function to capture `this`
	    var /** @type {?} */ ctor = function () {
	        var _this = this;
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	        _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });
	        _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
	    };
	    var /** @type {?} */ superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
	    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
	    return ctor;
	}
	var StatementInterpreter = (function () {
	    function StatementInterpreter() {
	    }
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    StatementInterpreter.prototype.debugAst = function (ast) { return debugOutputAstAsTypeScript(ast); };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
	        return null;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
	        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	        var /** @type {?} */ currCtx = ctx;
	        while (currCtx != null) {
	            if (currCtx.vars.has(expr.name)) {
	                currCtx.vars.set(expr.name, value);
	                return value;
	            }
	            currCtx = ((currCtx.parent));
	        }
	        throw new Error("Not declared variable " + expr.name);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
	        var /** @type {?} */ varName = ((ast.name));
	        if (ast.builtin != null) {
	            switch (ast.builtin) {
	                case BuiltinVar.Super:
	                    return ctx.instance.__proto__;
	                case BuiltinVar.This:
	                    return ctx.instance;
	                case BuiltinVar.CatchError:
	                    varName = CATCH_ERROR_VAR$2;
	                    break;
	                case BuiltinVar.CatchStack:
	                    varName = CATCH_STACK_VAR$2;
	                    break;
	                default:
	                    throw new Error("Unknown builtin variable " + ast.builtin);
	            }
	        }
	        var /** @type {?} */ currCtx = ctx;
	        while (currCtx != null) {
	            if (currCtx.vars.has(varName)) {
	                return currCtx.vars.get(varName);
	            }
	            currCtx = ((currCtx.parent));
	        }
	        throw new Error("Not declared variable " + varName);
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
	        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	        var /** @type {?} */ index = expr.index.visitExpression(this, ctx);
	        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	        receiver[index] = value;
	        return value;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
	        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	        receiver[expr.name] = value;
	        return value;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	        var /** @type {?} */ args = this.visitAllExpressions(expr.args, ctx);
	        var /** @type {?} */ result;
	        if (expr.builtin != null) {
	            switch (expr.builtin) {
	                case BuiltinMethod.ConcatArray:
	                    result = receiver.concat.apply(receiver, args);
	                    break;
	                case BuiltinMethod.SubscribeObservable:
	                    result = receiver.subscribe({ next: args[0] });
	                    break;
	                case BuiltinMethod.Bind:
	                    result = receiver.bind.apply(receiver, args);
	                    break;
	                default:
	                    throw new Error("Unknown builtin method " + expr.builtin);
	            }
	        }
	        else {
	            result = receiver[((expr.name))].apply(receiver, args);
	        }
	        return result;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
	        var /** @type {?} */ args = this.visitAllExpressions(stmt.args, ctx);
	        var /** @type {?} */ fnExpr = stmt.fn;
	        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	            ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
	            return null;
	        }
	        else {
	            var /** @type {?} */ fn$$1 = stmt.fn.visitExpression(this, ctx);
	            return fn$$1.apply(null, args);
	        }
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
	        return new ReturnValue(stmt.value.visitExpression(this, ctx));
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var /** @type {?} */ clazz = createDynamicClass(stmt, ctx, this);
	        ctx.vars.set(stmt.name, clazz);
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
	        return stmt.expr.visitExpression(this, ctx);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
	        var /** @type {?} */ condition = stmt.condition.visitExpression(this, ctx);
	        if (condition) {
	            return this.visitAllStatements(stmt.trueCase, ctx);
	        }
	        else if (stmt.falseCase != null) {
	            return this.visitAllStatements(stmt.falseCase, ctx);
	        }
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        try {
	            return this.visitAllStatements(stmt.bodyStmts, ctx);
	        }
	        catch (e) {
	            var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();
	            childCtx.vars.set(CATCH_ERROR_VAR$2, e);
	            childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
	            return this.visitAllStatements(stmt.catchStmts, childCtx);
	        }
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
	        throw stmt.error.visitExpression(this, ctx);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?=} context
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null; };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
	        var /** @type {?} */ args = this.visitAllExpressions(ast.args, ctx);
	        var /** @type {?} */ clazz = ast.classExpr.visitExpression(this, ctx);
	        return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value; };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
	        return ast.value.reference;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
	        if (ast.condition.visitExpression(this, ctx)) {
	            return ast.trueCase.visitExpression(this, ctx);
	        }
	        else if (ast.falseCase != null) {
	            return ast.falseCase.visitExpression(this, ctx);
	        }
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
	        return !ast.condition.visitExpression(this, ctx);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
	        return ast.value.visitExpression(this, ctx);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
	        var /** @type {?} */ paramNames = ast.params.map(function (param) { return param.name; });
	        return _declareFn(paramNames, ast.statements, ctx, this);
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        var /** @type {?} */ paramNames = stmt.params.map(function (param) { return param.name; });
	        ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	        var _this = this;
	        var /** @type {?} */ lhs = function () { return ast.lhs.visitExpression(_this, ctx); };
	        var /** @type {?} */ rhs = function () { return ast.rhs.visitExpression(_this, ctx); };
	        switch (ast.operator) {
	            case BinaryOperator.Equals:
	                return lhs() == rhs();
	            case BinaryOperator.Identical:
	                return lhs() === rhs();
	            case BinaryOperator.NotEquals:
	                return lhs() != rhs();
	            case BinaryOperator.NotIdentical:
	                return lhs() !== rhs();
	            case BinaryOperator.And:
	                return lhs() && rhs();
	            case BinaryOperator.Or:
	                return lhs() || rhs();
	            case BinaryOperator.Plus:
	                return lhs() + rhs();
	            case BinaryOperator.Minus:
	                return lhs() - rhs();
	            case BinaryOperator.Divide:
	                return lhs() / rhs();
	            case BinaryOperator.Multiply:
	                return lhs() * rhs();
	            case BinaryOperator.Modulo:
	                return lhs() % rhs();
	            case BinaryOperator.Lower:
	                return lhs() < rhs();
	            case BinaryOperator.LowerEquals:
	                return lhs() <= rhs();
	            case BinaryOperator.Bigger:
	                return lhs() > rhs();
	            case BinaryOperator.BiggerEquals:
	                return lhs() >= rhs();
	            default:
	                throw new Error("Unknown operator " + ast.operator);
	        }
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);
	        result = receiver[ast.name];
	        return result;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
	        var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);
	        var /** @type {?} */ prop = ast.index.visitExpression(this, ctx);
	        return receiver[prop];
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        return this.visitAllExpressions(ast.entries, ctx);
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
	        var _this = this;
	        var /** @type {?} */ result = {};
	        ast.entries.forEach(function (entry) { return ((result))[entry.key] = entry.value.visitExpression(_this, ctx); });
	        return result;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} context
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitCommaExpr = function (ast, context) {
	        var /** @type {?} */ values = this.visitAllExpressions(ast.parts, context);
	        return values[values.length - 1];
	    };
	    /**
	     * @param {?} expressions
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
	        var _this = this;
	        return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });
	    };
	    /**
	     * @param {?} statements
	     * @param {?} ctx
	     * @return {?}
	     */
	    StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
	        for (var /** @type {?} */ i = 0; i < statements.length; i++) {
	            var /** @type {?} */ stmt = statements[i];
	            var /** @type {?} */ val = stmt.visitStatement(this, ctx);
	            if (val instanceof ReturnValue) {
	                return val;
	            }
	        }
	        return null;
	    };
	    return StatementInterpreter;
	}());
	/**
	 * @param {?} varNames
	 * @param {?} statements
	 * @param {?} ctx
	 * @param {?} visitor
	 * @return {?}
	 */
	function _declareFn(varNames, statements, ctx, visitor) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
	    };
	}
	var CATCH_ERROR_VAR$2 = 'error';
	var CATCH_STACK_VAR$2 = 'stack';
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @abstract
	 */
	var AbstractJsEmitterVisitor = (function (_super) {
	    __extends(AbstractJsEmitterVisitor, _super);
	    function AbstractJsEmitterVisitor() {
	        return _super.call(this, false) || this;
	    }
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var _this = this;
	        ctx.pushClass(stmt);
	        this._visitClassConstructor(stmt, ctx);
	        if (stmt.parent != null) {
	            ctx.print(stmt, stmt.name + ".prototype = Object.create(");
	            stmt.parent.visitExpression(this, ctx);
	            ctx.println(stmt, ".prototype);");
	        }
	        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });
	        stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });
	        ctx.popClass();
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	        ctx.print(stmt, "function " + stmt.name + "(");
	        if (stmt.constructorMethod != null) {
	            this._visitParams(stmt.constructorMethod.params, ctx);
	        }
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        if (stmt.constructorMethod != null) {
	            if (stmt.constructorMethod.body.length > 0) {
	                ctx.println(stmt, "var self = this;");
	                this.visitAllStatements(stmt.constructorMethod.body, ctx);
	            }
	        }
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} getter
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
	        ctx.println(stmt, "Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
	        ctx.incIndent();
	        if (getter.body.length > 0) {
	            ctx.println(stmt, "var self = this;");
	            this.visitAllStatements(getter.body, ctx);
	        }
	        ctx.decIndent();
	        ctx.println(stmt, "}});");
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} method
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
	        ctx.print(stmt, stmt.name + ".prototype." + method.name + " = function(");
	        this._visitParams(method.params, ctx);
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        if (method.body.length > 0) {
	            ctx.println(stmt, "var self = this;");
	            this.visitAllStatements(method.body, ctx);
	        }
	        ctx.decIndent();
	        ctx.println(stmt, "};");
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	        if (ast.builtin === BuiltinVar.This) {
	            ctx.print(ast, 'self');
	        }
	        else if (ast.builtin === BuiltinVar.Super) {
	            throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
	        }
	        else {
	            _super.prototype.visitReadVarExpr.call(this, ast, ctx);
	        }
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        ctx.print(stmt, "var " + stmt.name + " = ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(stmt, ";");
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	        ast.value.visitExpression(this, ctx);
	        return null;
	    };
	    /**
	     * @param {?} expr
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	        var /** @type {?} */ fnExpr = expr.fn;
	        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	            ((((ctx.currentClass)).parent)).visitExpression(this, ctx);
	            ctx.print(expr, ".call(this");
	            if (expr.args.length > 0) {
	                ctx.print(expr, ", ");
	                this.visitAllExpressions(expr.args, ctx, ',');
	            }
	            ctx.print(expr, ")");
	        }
	        else {
	            _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
	        }
	        return null;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	        ctx.print(ast, "function(");
	        this._visitParams(ast.params, ctx);
	        ctx.println(ast, ") {");
	        ctx.incIndent();
	        this.visitAllStatements(ast.statements, ctx);
	        ctx.decIndent();
	        ctx.print(ast, "}");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        ctx.print(stmt, "function " + stmt.name + "(");
	        this._visitParams(stmt.params, ctx);
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.statements, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    /**
	     * @param {?} stmt
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        ctx.println(stmt, "try {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.bodyStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	        ctx.incIndent();
	        var /** @type {?} */ catchStmts = [/** @type {?} */ (CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
	                StmtModifier.Final
	            ]))].concat(stmt.catchStmts);
	        this.visitAllStatements(catchStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    /**
	     * @param {?} params
	     * @param {?} ctx
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	        this.visitAllObjects(function (param) { return ctx.print(null, param.name); }, params, ctx, ',');
	    };
	    /**
	     * @param {?} method
	     * @return {?}
	     */
	    AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	        var /** @type {?} */ name;
	        switch (method) {
	            case BuiltinMethod.ConcatArray:
	                name = 'concat';
	                break;
	            case BuiltinMethod.SubscribeObservable:
	                name = 'subscribe';
	                break;
	            case BuiltinMethod.Bind:
	                name = 'bind';
	                break;
	            default:
	                throw new Error("Unknown builtin method: " + method);
	        }
	        return name;
	    };
	    return AbstractJsEmitterVisitor;
	}(AbstractEmitterVisitor));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} sourceUrl
	 * @param {?} ctx
	 * @param {?} vars
	 * @return {?}
	 */
	function evalExpression(sourceUrl$$1, ctx, vars) {
	    var /** @type {?} */ fnBody = ctx.toSource() + "\n//# sourceURL=" + sourceUrl$$1;
	    var /** @type {?} */ fnArgNames = [];
	    var /** @type {?} */ fnArgValues = [];
	    for (var /** @type {?} */ argName in vars) {
	        fnArgNames.push(argName);
	        fnArgValues.push(vars[argName]);
	    }
	    if (_angular_core.isDevMode()) {
	        // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise
	        // E.g. ```
	        // function anonymous(a,b,c
	        // /**/) { ... }```
	        // We don't want to hard code this fact, so we auto detect it via an empty function first.
	        var /** @type {?} */ emptyFn = new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat('return null;'))))().toString();
	        var /** @type {?} */ headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\n').length - 1;
	        fnBody += "\n" + ctx.toSourceMapGenerator(sourceUrl$$1, sourceUrl$$1, headerLines).toJsComment();
	    }
	    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
	}
	/**
	 * @param {?} sourceUrl
	 * @param {?} statements
	 * @param {?} resultVars
	 * @return {?}
	 */
	function jitStatements(sourceUrl$$1, statements, resultVars) {
	    var /** @type {?} */ converter = new JitEmitterVisitor();
	    var /** @type {?} */ ctx = EmitterVisitorContext.createRoot(resultVars);
	    var /** @type {?} */ returnStmt = new ReturnStatement(literalArr(resultVars.map(function (resultVar) { return variable(resultVar); })));
	    converter.visitAllStatements(statements.concat([returnStmt]), ctx);
	    return evalExpression(sourceUrl$$1, ctx, converter.getArgs());
	}
	var JitEmitterVisitor = (function (_super) {
	    __extends(JitEmitterVisitor, _super);
	    function JitEmitterVisitor() {
	        var _this = _super.apply(this, arguments) || this;
	        _this._evalArgNames = [];
	        _this._evalArgValues = [];
	        return _this;
	    }
	    /**
	     * @return {?}
	     */
	    JitEmitterVisitor.prototype.getArgs = function () {
	        var /** @type {?} */ result = {};
	        for (var /** @type {?} */ i = 0; i < this._evalArgNames.length; i++) {
	            result[this._evalArgNames[i]] = this._evalArgValues[i];
	        }
	        return result;
	    };
	    /**
	     * @param {?} ast
	     * @param {?} ctx
	     * @return {?}
	     */
	    JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	        var /** @type {?} */ value = ast.value.reference;
	        var /** @type {?} */ id = this._evalArgValues.indexOf(value);
	        if (id === -1) {
	            id = this._evalArgValues.length;
	            this._evalArgValues.push(value);
	            var /** @type {?} */ name = identifierName(ast.value) || 'val';
	            this._evalArgNames.push("jit_" + name + id);
	        }
	        ctx.print(ast, this._evalArgNames[id]);
	        return null;
	    };
	    return JitEmitterVisitor;
	}(AbstractJsEmitterVisitor));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An internal module of the Angular compiler that begins with component types,
	 * extracts templates, and eventually produces a compiled version of the component
	 * ready for linking into an application.
	 *
	 * \@security When compiling templates at runtime, you must ensure that the entire template comes
	 * from a trusted source. Attacker-controlled data introduced by a template could expose your
	 * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
	 */
	var JitCompiler = (function () {
	    /**
	     * @param {?} _injector
	     * @param {?} _metadataResolver
	     * @param {?} _templateParser
	     * @param {?} _styleCompiler
	     * @param {?} _viewCompiler
	     * @param {?} _ngModuleCompiler
	     * @param {?} _compilerConfig
	     * @param {?} _console
	     */
	    function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _compilerConfig, _console) {
	        this._injector = _injector;
	        this._metadataResolver = _metadataResolver;
	        this._templateParser = _templateParser;
	        this._styleCompiler = _styleCompiler;
	        this._viewCompiler = _viewCompiler;
	        this._ngModuleCompiler = _ngModuleCompiler;
	        this._compilerConfig = _compilerConfig;
	        this._console = _console;
	        this._compiledTemplateCache = new Map();
	        this._compiledHostTemplateCache = new Map();
	        this._compiledDirectiveWrapperCache = new Map();
	        this._compiledNgModuleCache = new Map();
	        this._sharedStylesheetCount = 0;
	    }
	    Object.defineProperty(JitCompiler.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    JitCompiler.prototype.compileModuleSync = function (moduleType) {
	        return ((this._compileModuleAndComponents(moduleType, true).syncResult));
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    JitCompiler.prototype.compileModuleAsync = function (moduleType) {
	        return ((this._compileModuleAndComponents(moduleType, false).asyncResult));
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    JitCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        return ((this._compileModuleAndAllComponents(moduleType, true).syncResult));
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    JitCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        return ((this._compileModuleAndAllComponents(moduleType, false).asyncResult));
	    };
	    /**
	     * @param {?} component
	     * @return {?}
	     */
	    JitCompiler.prototype.getNgContentSelectors = function (component) {
	        this._console.warn('Compiler.getNgContentSelectors is deprecated. Use ComponentFactory.ngContentSelectors instead!');
	        var /** @type {?} */ template = this._compiledTemplateCache.get(component);
	        if (!template) {
	            throw new Error("The component " + _angular_core.ɵstringify(component) + " is not yet compiled!");
	        }
	        return ((template.compMeta.template)).ngContentSelectors;
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @param {?} isSync
	     * @return {?}
	     */
	    JitCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
	        var _this = this;
	        var /** @type {?} */ loadingPromise = this._loadModules(moduleType, isSync);
	        var /** @type {?} */ createResult = function () {
	            _this._compileComponents(moduleType, null);
	            return _this._compileModule(moduleType);
	        };
	        if (isSync) {
	            return new SyncAsyncResult(createResult());
	        }
	        else {
	            return new SyncAsyncResult(null, loadingPromise.then(createResult));
	        }
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @param {?} isSync
	     * @return {?}
	     */
	    JitCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
	        var _this = this;
	        var /** @type {?} */ loadingPromise = this._loadModules(moduleType, isSync);
	        var /** @type {?} */ createResult = function () {
	            var /** @type {?} */ componentFactories = [];
	            _this._compileComponents(moduleType, componentFactories);
	            return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
	        };
	        if (isSync) {
	            return new SyncAsyncResult(createResult());
	        }
	        else {
	            return new SyncAsyncResult(null, loadingPromise.then(createResult));
	        }
	    };
	    /**
	     * @param {?} mainModule
	     * @param {?} isSync
	     * @return {?}
	     */
	    JitCompiler.prototype._loadModules = function (mainModule, isSync) {
	        var _this = this;
	        var /** @type {?} */ loadingPromises = [];
	        var /** @type {?} */ ngModule = ((this._metadataResolver.getNgModuleMetadata(mainModule)));
	        // Note: the loadingPromise for a module only includes the loading of the exported directives
	        // of imported modules.
	        // However, for runtime compilation, we want to transitively compile all modules,
	        // so we also need to call loadNgModuleDirectiveAndPipeMetadata for all nested modules.
	        ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
	            loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));
	        });
	        return Promise.all(loadingPromises);
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    JitCompiler.prototype._compileModule = function (moduleType) {
	        var _this = this;
	        var /** @type {?} */ ngModuleFactory = ((this._compiledNgModuleCache.get(moduleType)));
	        if (!ngModuleFactory) {
	            var /** @type {?} */ moduleMeta_1 = ((this._metadataResolver.getNgModuleMetadata(moduleType)));
	            // Always provide a bound Compiler
	            var /** @type {?} */ extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () { return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference); } }))];
	            var /** @type {?} */ compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
	            if (!this._compilerConfig.useJit) {
	                ngModuleFactory =
	                    interpretStatements(compileResult.statements, [compileResult.ngModuleFactoryVar])[0];
	            }
	            else {
	                ngModuleFactory = jitStatements(ngModuleJitUrl(moduleMeta_1), compileResult.statements, [compileResult.ngModuleFactoryVar])[0];
	            }
	            this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
	        }
	        return ngModuleFactory;
	    };
	    /**
	     * \@internal
	     * @param {?} mainModule
	     * @param {?} allComponentFactories
	     * @return {?}
	     */
	    JitCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) {
	        var _this = this;
	        var /** @type {?} */ ngModule = ((this._metadataResolver.getNgModuleMetadata(mainModule)));
	        var /** @type {?} */ moduleByDirective = new Map();
	        var /** @type {?} */ templates = new Set();
	        ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	            var /** @type {?} */ localModuleMeta = ((_this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference)));
	            localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
	                var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                if (dirMeta.isComponent) {
	                    templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
	                    if (allComponentFactories) {
	                        var /** @type {?} */ template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
	                        templates.add(template);
	                        allComponentFactories.push(/** @type {?} */ (dirMeta.componentFactory));
	                    }
	                }
	            });
	        });
	        ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	            var /** @type {?} */ localModuleMeta = ((_this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference)));
	            localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                if (dirMeta.isComponent) {
	                    dirMeta.entryComponents.forEach(function (entryComponentType) {
	                        var /** @type {?} */ moduleMeta = ((moduleByDirective.get(entryComponentType.componentType)));
	                        templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
	                    });
	                }
	            });
	            localModuleMeta.entryComponents.forEach(function (entryComponentType) {
	                var /** @type {?} */ moduleMeta = ((moduleByDirective.get(entryComponentType.componentType)));
	                templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
	            });
	        });
	        templates.forEach(function (template) { return _this._compileTemplate(template); });
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    JitCompiler.prototype.clearCacheFor = function (type) {
	        this._compiledNgModuleCache.delete(type);
	        this._metadataResolver.clearCacheFor(type);
	        this._compiledHostTemplateCache.delete(type);
	        var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(type);
	        if (compiledTemplate) {
	            this._compiledTemplateCache.delete(type);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    JitCompiler.prototype.clearCache = function () {
	        this._metadataResolver.clearCache();
	        this._compiledTemplateCache.clear();
	        this._compiledHostTemplateCache.clear();
	        this._compiledNgModuleCache.clear();
	    };
	    /**
	     * @param {?} compType
	     * @param {?} ngModule
	     * @return {?}
	     */
	    JitCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) {
	        if (!ngModule) {
	            throw new Error("Component " + _angular_core.ɵstringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
	        }
	        var /** @type {?} */ compiledTemplate = this._compiledHostTemplateCache.get(compType);
	        if (!compiledTemplate) {
	            var /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata(compType);
	            assertComponent(compMeta);
	            var /** @type {?} */ componentFactory = (compMeta.componentFactory);
	            var /** @type {?} */ hostClass = this._metadataResolver.getHostComponentType(compType);
	            var /** @type {?} */ hostMeta = createHostComponentMeta(hostClass, compMeta, /** @type {?} */ (_angular_core.ɵgetComponentViewDefinitionFactory(componentFactory)));
	            compiledTemplate =
	                new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);
	            this._compiledHostTemplateCache.set(compType, compiledTemplate);
	        }
	        return compiledTemplate;
	    };
	    /**
	     * @param {?} compMeta
	     * @param {?} ngModule
	     * @return {?}
	     */
	    JitCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
	        var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
	        if (!compiledTemplate) {
	            assertComponent(compMeta);
	            compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
	            this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
	        }
	        return compiledTemplate;
	    };
	    /**
	     * @param {?} template
	     * @return {?}
	     */
	    JitCompiler.prototype._compileTemplate = function (template) {
	        var _this = this;
	        if (template.isCompiled) {
	            return;
	        }
	        var /** @type {?} */ compMeta = template.compMeta;
	        var /** @type {?} */ externalStylesheetsByModuleUrl = new Map();
	        var /** @type {?} */ stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
	        stylesCompileResult.externalStylesheets.forEach(function (r) { externalStylesheetsByModuleUrl.set(/** @type {?} */ ((r.meta.moduleUrl)), r); });
	        this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
	        var /** @type {?} */ directives = template.directives.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	        var /** @type {?} */ pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	        var _a = this._templateParser.parse(compMeta, /** @type {?} */ ((((compMeta.template)).template)), directives, pipes, template.ngModule.schemas, templateSourceUrl(template.ngModule.type, template.compMeta, /** @type {?} */ ((template.compMeta.template)))), parsedTemplate = _a.template, usedPipes = _a.pipes;
	        var /** @type {?} */ compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), usedPipes);
	        var /** @type {?} */ statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);
	        var /** @type {?} */ viewClassAndRendererTypeVars = compMeta.isHost ?
	            [compileResult.viewClassVar] :
	            [compileResult.viewClassVar, compileResult.rendererTypeVar];
	        var /** @type {?} */ viewClass;
	        var /** @type {?} */ rendererType;
	        if (!this._compilerConfig.useJit) {
	            _b = interpretStatements(statements, viewClassAndRendererTypeVars), viewClass = _b[0], rendererType = _b[1];
	        }
	        else {
	            _c = jitStatements(templateJitUrl(template.ngModule.type, template.compMeta), statements, viewClassAndRendererTypeVars), viewClass = _c[0], rendererType = _c[1];
	        }
	        template.compiled(viewClass, rendererType);
	        var _b, _c;
	    };
	    /**
	     * @param {?} result
	     * @param {?} externalStylesheetsByModuleUrl
	     * @return {?}
	     */
	    JitCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	        var _this = this;
	        result.dependencies.forEach(function (dep, i) {
	            var /** @type {?} */ nestedCompileResult = ((externalStylesheetsByModuleUrl.get(dep.moduleUrl)));
	            var /** @type {?} */ nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
	            dep.valuePlaceholder.reference = nestedStylesArr;
	        });
	    };
	    /**
	     * @param {?} result
	     * @param {?} externalStylesheetsByModuleUrl
	     * @return {?}
	     */
	    JitCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	        this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
	        if (!this._compilerConfig.useJit) {
	            return interpretStatements(result.statements, [result.stylesVar])[0];
	        }
	        else {
	            return jitStatements(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.statements, [result.stylesVar])[0];
	        }
	    };
	    return JitCompiler;
	}());
	JitCompiler.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	JitCompiler.ctorParameters = function () { return [
	    { type: _angular_core.Injector, },
	    { type: CompileMetadataResolver, },
	    { type: TemplateParser, },
	    { type: StyleCompiler, },
	    { type: ViewCompiler, },
	    { type: NgModuleCompiler, },
	    { type: CompilerConfig, },
	    { type: _angular_core.ɵConsole, },
	]; };
	var CompiledTemplate = (function () {
	    /**
	     * @param {?} isHost
	     * @param {?} compType
	     * @param {?} compMeta
	     * @param {?} ngModule
	     * @param {?} directives
	     */
	    function CompiledTemplate(isHost, compType, compMeta, ngModule, directives) {
	        this.isHost = isHost;
	        this.compType = compType;
	        this.compMeta = compMeta;
	        this.ngModule = ngModule;
	        this.directives = directives;
	        this._viewClass = ((null));
	        this.isCompiled = false;
	    }
	    /**
	     * @param {?} viewClass
	     * @param {?} rendererType
	     * @return {?}
	     */
	    CompiledTemplate.prototype.compiled = function (viewClass, rendererType) {
	        this._viewClass = viewClass;
	        ((this.compMeta.componentViewType)).setDelegate(viewClass);
	        for (var /** @type {?} */ prop in rendererType) {
	            ((this.compMeta.rendererType))[prop] = rendererType[prop];
	        }
	        this.isCompiled = true;
	    };
	    return CompiledTemplate;
	}());
	/**
	 * @param {?} meta
	 * @return {?}
	 */
	function assertComponent(meta) {
	    if (!meta.isComponent) {
	        throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	    }
	}
	/**
	 * Implements `Compiler` by delegating to the JitCompiler using a known module.
	 */
	var ModuleBoundCompiler = (function () {
	    /**
	     * @param {?} _delegate
	     * @param {?} _ngModule
	     */
	    function ModuleBoundCompiler(_delegate, _ngModule) {
	        this._delegate = _delegate;
	        this._ngModule = _ngModule;
	    }
	    Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._delegate.injector; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {
	        return this._delegate.compileModuleSync(moduleType);
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {
	        return this._delegate.compileModuleAsync(moduleType);
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        return this._delegate.compileModuleAndAllComponentsSync(moduleType);
	    };
	    /**
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
	    };
	    /**
	     * @param {?} component
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.getNgContentSelectors = function (component) {
	        return this._delegate.getNgContentSelectors(component);
	    };
	    /**
	     * Clears all caches
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.clearCache = function () { this._delegate.clearCache(); };
	    /**
	     * Clears the cache for the given component/ngModule.
	     * @param {?} type
	     * @return {?}
	     */
	    ModuleBoundCompiler.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type); };
	    return ModuleBoundCompiler;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A container for message extracted from the templates.
	 */
	var MessageBundle = (function () {
	    /**
	     * @param {?} _htmlParser
	     * @param {?} _implicitTags
	     * @param {?} _implicitAttrs
	     * @param {?=} _locale
	     */
	    function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs, _locale) {
	        if (_locale === void 0) { _locale = null; }
	        this._htmlParser = _htmlParser;
	        this._implicitTags = _implicitTags;
	        this._implicitAttrs = _implicitAttrs;
	        this._locale = _locale;
	        this._messages = [];
	    }
	    /**
	     * @param {?} html
	     * @param {?} url
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {
	        var /** @type {?} */ htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
	        if (htmlParserResult.errors.length) {
	            return htmlParserResult.errors;
	        }
	        var /** @type {?} */ i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
	        if (i18nParserResult.errors.length) {
	            return i18nParserResult.errors;
	        }
	        (_a = this._messages).push.apply(_a, i18nParserResult.messages);
	        return null;
	        var _a;
	    };
	    /**
	     * @return {?}
	     */
	    MessageBundle.prototype.getMessages = function () { return this._messages; };
	    /**
	     * @param {?} serializer
	     * @param {?=} filterSources
	     * @return {?}
	     */
	    MessageBundle.prototype.write = function (serializer, filterSources) {
	        var /** @type {?} */ messages = {};
	        var /** @type {?} */ mapperVisitor = new MapPlaceholderNames();
	        // Deduplicate messages based on their ID
	        this._messages.forEach(function (message) {
	            var /** @type {?} */ id = serializer.digest(message);
	            if (!messages.hasOwnProperty(id)) {
	                messages[id] = message;
	            }
	            else {
	                (_a = messages[id].sources).push.apply(_a, message.sources);
	            }
	            var _a;
	        });
	        // Transform placeholder names using the serializer mapping
	        var /** @type {?} */ msgList = Object.keys(messages).map(function (id) {
	            var /** @type {?} */ mapper = serializer.createNameMapper(messages[id]);
	            var /** @type {?} */ src = messages[id];
	            var /** @type {?} */ nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;
	            var /** @type {?} */ transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);
	            transformedMessage.sources = src.sources;
	            if (filterSources) {
	                transformedMessage.sources.forEach(function (source) { return source.filePath = filterSources(source.filePath); });
	            }
	            return transformedMessage;
	        });
	        return serializer.write(msgList, this._locale);
	    };
	    return MessageBundle;
	}());
	var MapPlaceholderNames = (function (_super) {
	    __extends(MapPlaceholderNames, _super);
	    function MapPlaceholderNames() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} nodes
	     * @param {?} mapper
	     * @return {?}
	     */
	    MapPlaceholderNames.prototype.convert = function (nodes, mapper) {
	        var _this = this;
	        return mapper ? nodes.map(function (n) { return n.visit(_this, mapper); }) : nodes;
	    };
	    /**
	     * @param {?} ph
	     * @param {?} mapper
	     * @return {?}
	     */
	    MapPlaceholderNames.prototype.visitTagPlaceholder = function (ph, mapper) {
	        var _this = this;
	        var /** @type {?} */ startName = ((mapper.toPublicName(ph.startName)));
	        var /** @type {?} */ closeName = ph.closeName ? ((mapper.toPublicName(ph.closeName))) : ph.closeName;
	        var /** @type {?} */ children = ph.children.map(function (n) { return n.visit(_this, mapper); });
	        return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);
	    };
	    /**
	     * @param {?} ph
	     * @param {?} mapper
	     * @return {?}
	     */
	    MapPlaceholderNames.prototype.visitPlaceholder = function (ph, mapper) {
	        return new Placeholder(ph.value, /** @type {?} */ ((mapper.toPublicName(ph.name))), ph.sourceSpan);
	    };
	    /**
	     * @param {?} ph
	     * @param {?} mapper
	     * @return {?}
	     */
	    MapPlaceholderNames.prototype.visitIcuPlaceholder = function (ph, mapper) {
	        return new IcuPlaceholder(ph.value, /** @type {?} */ ((mapper.toPublicName(ph.name))), ph.sourceSpan);
	    };
	    return MapPlaceholderNames;
	}(CloneVisitor));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Extract i18n messages from source code
	 */
	var Extractor = (function () {
	    /**
	     * @param {?} host
	     * @param {?} staticSymbolResolver
	     * @param {?} messageBundle
	     * @param {?} metadataResolver
	     */
	    function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {
	        this.host = host;
	        this.staticSymbolResolver = staticSymbolResolver;
	        this.messageBundle = messageBundle;
	        this.metadataResolver = metadataResolver;
	    }
	    /**
	     * @param {?} rootFiles
	     * @return {?}
	     */
	    Extractor.prototype.extract = function (rootFiles) {
	        var _this = this;
	        var /** @type {?} */ programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);
	        var _a = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver), files = _a.files, ngModules = _a.ngModules;
	        return Promise
	            .all(ngModules.map(function (ngModule) { return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
	            .then(function () {
	            var /** @type {?} */ errors = [];
	            files.forEach(function (file) {
	                var /** @type {?} */ compMetas = [];
	                file.directives.forEach(function (directiveType) {
	                    var /** @type {?} */ dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);
	                    if (dirMeta && dirMeta.isComponent) {
	                        compMetas.push(dirMeta);
	                    }
	                });
	                compMetas.forEach(function (compMeta) {
	                    var /** @type {?} */ html = ((((compMeta.template)).template));
	                    var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((compMeta.template)).interpolation);
	                    errors.push.apply(errors, ((_this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig))));
	                });
	            });
	            if (errors.length) {
	                throw new Error(errors.map(function (e) { return e.toString(); }).join('\n'));
	            }
	            return _this.messageBundle;
	        });
	    };
	    /**
	     * @param {?} host
	     * @param {?} locale
	     * @return {?}
	     */
	    Extractor.create = function (host, locale) {
	        var /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser());
	        var /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();
	        var /** @type {?} */ symbolCache = new StaticSymbolCache();
	        var /** @type {?} */ summaryResolver = new AotSummaryResolver(host, symbolCache);
	        var /** @type {?} */ staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);
	        var /** @type {?} */ staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);
	        StaticAndDynamicReflectionCapabilities.install(staticReflector);
	        var /** @type {?} */ config = new CompilerConfig({ defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated, useJit: false });
	        var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return host.loadResource(url); } }, urlResolver, htmlParser, config);
	        var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();
	        var /** @type {?} */ resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, new _angular_core.ɵConsole(), symbolCache, staticReflector);
	        // TODO(vicb): implicit tags & attributes
	        var /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {}, locale);
	        var /** @type {?} */ extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);
	        return { extractor: extractor, staticReflector: staticReflector };
	    };
	    return Extractor;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _NO_RESOURCE_LOADER = {
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    get: function (url) {
	        throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
	    }
	};
	var baseHtmlParser = new _angular_core.InjectionToken('HtmlParser');
	/**
	 * @param {?} parser
	 * @param {?} translations
	 * @param {?} format
	 * @param {?} config
	 * @param {?} console
	 * @return {?}
	 */
	function i18nHtmlParserFactory(parser, translations, format, config, console) {
	    return new I18NHtmlParser(parser, translations, format, /** @type {?} */ ((config.missingTranslation)), console);
	}
	/**
	 * A set of providers that provide `JitCompiler` and its dependencies to use for
	 * template compilation.
	 */
	var COMPILER_PROVIDERS = [
	    { provide: _angular_core.ɵReflector, useValue: _angular_core.ɵreflector },
	    { provide: _angular_core.ɵReflectorReader, useExisting: _angular_core.ɵReflector },
	    { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },
	    SummaryResolver,
	    _angular_core.ɵConsole,
	    Lexer,
	    Parser,
	    {
	        provide: baseHtmlParser,
	        useClass: HtmlParser,
	    },
	    {
	        provide: I18NHtmlParser,
	        useFactory: i18nHtmlParserFactory,
	        deps: [
	            baseHtmlParser,
	            [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)],
	            [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)],
	            [CompilerConfig],
	            [_angular_core.ɵConsole],
	        ]
	    },
	    {
	        provide: HtmlParser,
	        useExisting: I18NHtmlParser,
	    },
	    TemplateParser,
	    DirectiveNormalizer,
	    CompileMetadataResolver,
	    DEFAULT_PACKAGE_URL_PROVIDER,
	    StyleCompiler,
	    ViewCompiler,
	    NgModuleCompiler,
	    { provide: CompilerConfig, useValue: new CompilerConfig() },
	    JitCompiler,
	    { provide: _angular_core.Compiler, useExisting: JitCompiler },
	    DomElementSchemaRegistry,
	    { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },
	    UrlResolver,
	    DirectiveResolver,
	    PipeResolver,
	    NgModuleResolver,
	];
	var JitCompilerFactory = (function () {
	    /**
	     * @param {?} defaultOptions
	     */
	    function JitCompilerFactory(defaultOptions) {
	        var compilerOptions = {
	            useDebug: _angular_core.isDevMode(),
	            useJit: true,
	            defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
	            missingTranslation: _angular_core.MissingTranslationStrategy.Warning,
	            enableLegacyTemplate: true,
	        };
	        this._defaultOptions = [compilerOptions].concat(defaultOptions);
	    }
	    /**
	     * @param {?=} options
	     * @return {?}
	     */
	    JitCompilerFactory.prototype.createCompiler = function (options) {
	        if (options === void 0) { options = []; }
	        var /** @type {?} */ opts = _mergeOptions(this._defaultOptions.concat(options));
	        var /** @type {?} */ injector = _angular_core.ReflectiveInjector.resolveAndCreate([
	            COMPILER_PROVIDERS, {
	                provide: CompilerConfig,
	                useFactory: function () {
	                    return new CompilerConfig({
	                        // let explicit values from the compiler options overwrite options
	                        // from the app providers
	                        useJit: opts.useJit,
	                        // let explicit values from the compiler options overwrite options
	                        // from the app providers
	                        defaultEncapsulation: opts.defaultEncapsulation,
	                        missingTranslation: opts.missingTranslation,
	                        enableLegacyTemplate: opts.enableLegacyTemplate,
	                    });
	                },
	                deps: []
	            }, /** @type {?} */ ((opts.providers))
	        ]);
	        return injector.get(_angular_core.Compiler);
	    };
	    return JitCompilerFactory;
	}());
	JitCompilerFactory.decorators = [
	    { type: CompilerInjectable },
	];
	/**
	 * @nocollapse
	 */
	JitCompilerFactory.ctorParameters = function () { return [
	    { type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS,] },] },
	]; };
	/**
	 * @return {?}
	 */
	function _initReflector() {
	    _angular_core.ɵreflector.reflectionCapabilities = new _angular_core.ɵReflectionCapabilities();
	}
	/**
	 * A platform that included corePlatform and the compiler.
	 *
	 * \@experimental
	 */
	var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [
	    { provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: true },
	    { provide: _angular_core.CompilerFactory, useClass: JitCompilerFactory },
	    { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },
	]);
	/**
	 * @param {?} optionsArr
	 * @return {?}
	 */
	function _mergeOptions(optionsArr) {
	    return {
	        useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),
	        defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),
	        providers: _mergeArrays(optionsArr.map(function (options) { return ((options.providers)); })),
	        missingTranslation: _lastDefined(optionsArr.map(function (options) { return options.missingTranslation; })),
	    };
	}
	/**
	 * @template T
	 * @param {?} args
	 * @return {?}
	 */
	function _lastDefined(args) {
	    for (var /** @type {?} */ i = args.length - 1; i >= 0; i--) {
	        if (args[i] !== undefined) {
	            return args[i];
	        }
	    }
	    return undefined;
	}
	/**
	 * @param {?} parts
	 * @return {?}
	 */
	function _mergeArrays(parts) {
	    var /** @type {?} */ result = [];
	    parts.forEach(function (part) { return part && result.push.apply(result, part); });
	    return result;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Interface that defines how import statements should be generated.
	 * @abstract
	 */
	var ImportResolver = (function () {
	    function ImportResolver() {
	    }
	    /**
	     * Converts a file path to a module name that can be used as an `import.
	     * I.e. `path/to/importedFile.ts` should be imported by `path/to/containingFile.ts`.
	     * @abstract
	     * @param {?} importedFilePath
	     * @param {?} containingFilePath
	     * @return {?}
	     */
	    ImportResolver.prototype.fileNameToModuleName = function (importedFilePath, containingFilePath) { };
	    /**
	     * Converts the given StaticSymbol into another StaticSymbol that should be used
	     * to generate the import from.
	     * @abstract
	     * @param {?} symbol
	     * @return {?}
	     */
	    ImportResolver.prototype.getImportAs = function (symbol) { };
	    /**
	     * Determine the arity of a type.
	     * @abstract
	     * @param {?} symbol
	     * @return {?}
	     */
	    ImportResolver.prototype.getTypeArity = function (symbol) { };
	    return ImportResolver;
	}());

	exports.VERSION = VERSION;
	exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
	exports.CompilerConfig = CompilerConfig;
	exports.JitCompiler = JitCompiler;
	exports.DirectiveResolver = DirectiveResolver;
	exports.PipeResolver = PipeResolver;
	exports.NgModuleResolver = NgModuleResolver;
	exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
	exports.InterpolationConfig = InterpolationConfig;
	exports.NgModuleCompiler = NgModuleCompiler;
	exports.ViewCompiler = ViewCompiler;
	exports.isSyntaxError = isSyntaxError;
	exports.syntaxError = syntaxError;
	exports.TextAst = TextAst;
	exports.BoundTextAst = BoundTextAst;
	exports.AttrAst = AttrAst;
	exports.BoundElementPropertyAst = BoundElementPropertyAst;
	exports.BoundEventAst = BoundEventAst;
	exports.ReferenceAst = ReferenceAst;
	exports.VariableAst = VariableAst;
	exports.ElementAst = ElementAst;
	exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
	exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
	exports.DirectiveAst = DirectiveAst;
	exports.ProviderAst = ProviderAst;
	exports.ProviderAstType = ProviderAstType;
	exports.NgContentAst = NgContentAst;
	exports.PropertyBindingType = PropertyBindingType;
	exports.templateVisitAll = templateVisitAll;
	exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
	exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
	exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
	exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
	exports.CompileAnimationMetadata = CompileAnimationMetadata;
	exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
	exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
	exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
	exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
	exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
	exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
	exports.identifierName = identifierName;
	exports.identifierModuleUrl = identifierModuleUrl;
	exports.viewClassName = viewClassName;
	exports.rendererTypeName = rendererTypeName;
	exports.hostViewClassName = hostViewClassName;
	exports.dirWrapperClassName = dirWrapperClassName;
	exports.componentFactoryName = componentFactoryName;
	exports.CompileSummaryKind = CompileSummaryKind;
	exports.tokenName = tokenName;
	exports.tokenReference = tokenReference;
	exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
	exports.CompileTemplateMetadata = CompileTemplateMetadata;
	exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
	exports.createHostComponentMeta = createHostComponentMeta;
	exports.CompilePipeMetadata = CompilePipeMetadata;
	exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
	exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
	exports.ProviderMeta = ProviderMeta;
	exports.flatten = flatten;
	exports.sourceUrl = sourceUrl;
	exports.templateSourceUrl = templateSourceUrl;
	exports.sharedStylesheetJitUrl = sharedStylesheetJitUrl;
	exports.ngModuleJitUrl = ngModuleJitUrl;
	exports.templateJitUrl = templateJitUrl;
	exports.createAotCompiler = createAotCompiler;
	exports.AotCompiler = AotCompiler;
	exports.analyzeNgModules = analyzeNgModules;
	exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
	exports.extractProgramSymbols = extractProgramSymbols;
	exports.GeneratedFile = GeneratedFile;
	exports.StaticReflector = StaticReflector;
	exports.StaticAndDynamicReflectionCapabilities = StaticAndDynamicReflectionCapabilities;
	exports.StaticSymbol = StaticSymbol;
	exports.StaticSymbolCache = StaticSymbolCache;
	exports.ResolvedStaticSymbol = ResolvedStaticSymbol;
	exports.StaticSymbolResolver = StaticSymbolResolver;
	exports.unescapeIdentifier = unescapeIdentifier;
	exports.AotSummaryResolver = AotSummaryResolver;
	exports.SummaryResolver = SummaryResolver;
	exports.i18nHtmlParserFactory = i18nHtmlParserFactory;
	exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
	exports.JitCompilerFactory = JitCompilerFactory;
	exports.platformCoreDynamic = platformCoreDynamic;
	exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
	exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
	exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
	exports.UrlResolver = UrlResolver;
	exports.getUrlScheme = getUrlScheme;
	exports.ResourceLoader = ResourceLoader;
	exports.ElementSchemaRegistry = ElementSchemaRegistry;
	exports.Extractor = Extractor;
	exports.I18NHtmlParser = I18NHtmlParser;
	exports.MessageBundle = MessageBundle;
	exports.Serializer = Serializer;
	exports.Xliff = Xliff;
	exports.Xliff2 = Xliff2;
	exports.Xmb = Xmb;
	exports.Xtb = Xtb;
	exports.DirectiveNormalizer = DirectiveNormalizer;
	exports.ParserError = ParserError;
	exports.ParseSpan = ParseSpan;
	exports.AST = AST;
	exports.Quote = Quote;
	exports.EmptyExpr = EmptyExpr;
	exports.ImplicitReceiver = ImplicitReceiver;
	exports.Chain = Chain;
	exports.Conditional = Conditional;
	exports.PropertyRead = PropertyRead;
	exports.PropertyWrite = PropertyWrite;
	exports.SafePropertyRead = SafePropertyRead;
	exports.KeyedRead = KeyedRead;
	exports.KeyedWrite = KeyedWrite;
	exports.BindingPipe = BindingPipe;
	exports.LiteralPrimitive = LiteralPrimitive;
	exports.LiteralArray = LiteralArray;
	exports.LiteralMap = LiteralMap;
	exports.Interpolation = Interpolation;
	exports.Binary = Binary;
	exports.PrefixNot = PrefixNot;
	exports.MethodCall = MethodCall;
	exports.SafeMethodCall = SafeMethodCall;
	exports.FunctionCall = FunctionCall;
	exports.ASTWithSource = ASTWithSource;
	exports.TemplateBinding = TemplateBinding;
	exports.RecursiveAstVisitor = RecursiveAstVisitor;
	exports.AstTransformer = AstTransformer;
	exports.TokenType = TokenType;
	exports.Lexer = Lexer;
	exports.Token = Token;
	exports.EOF = EOF;
	exports.isIdentifier = isIdentifier;
	exports.isQuote = isQuote;
	exports.SplitInterpolation = SplitInterpolation;
	exports.TemplateBindingParseResult = TemplateBindingParseResult;
	exports.Parser = Parser;
	exports._ParseAST = _ParseAST;
	exports.ERROR_COLLECTOR_TOKEN = ERROR_COLLECTOR_TOKEN;
	exports.CompileMetadataResolver = CompileMetadataResolver;
	exports.componentModuleUrl = componentModuleUrl;
	exports.Text = Text;
	exports.Expansion = Expansion;
	exports.ExpansionCase = ExpansionCase;
	exports.Attribute = Attribute$1;
	exports.Element = Element;
	exports.Comment = Comment;
	exports.visitAll = visitAll;
	exports.ParseTreeResult = ParseTreeResult;
	exports.TreeError = TreeError;
	exports.HtmlParser = HtmlParser;
	exports.HtmlTagDefinition = HtmlTagDefinition;
	exports.getHtmlTagDefinition = getHtmlTagDefinition;
	exports.TagContentType = TagContentType;
	exports.splitNsName = splitNsName;
	exports.isNgContainer = isNgContainer;
	exports.isNgContent = isNgContent;
	exports.isNgTemplate = isNgTemplate;
	exports.getNsPrefix = getNsPrefix;
	exports.mergeNsAndName = mergeNsAndName;
	exports.NAMED_ENTITIES = NAMED_ENTITIES;
	exports.ImportResolver = ImportResolver;
	exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
	exports.TypeScriptEmitter = TypeScriptEmitter;
	exports.ParseLocation = ParseLocation;
	exports.ParseSourceFile = ParseSourceFile;
	exports.ParseSourceSpan = ParseSourceSpan;
	exports.ParseErrorLevel = ParseErrorLevel;
	exports.ParseError = ParseError;
	exports.typeSourceSpan = typeSourceSpan;
	exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
	exports.CssSelector = CssSelector;
	exports.SelectorMatcher = SelectorMatcher;
	exports.SelectorListContext = SelectorListContext;
	exports.SelectorContext = SelectorContext;
	exports.StylesCompileDependency = StylesCompileDependency;
	exports.StylesCompileResult = StylesCompileResult;
	exports.CompiledStylesheet = CompiledStylesheet;
	exports.StyleCompiler = StyleCompiler;
	exports.TemplateParseError = TemplateParseError;
	exports.TemplateParseResult = TemplateParseResult;
	exports.TemplateParser = TemplateParser;
	exports.splitClasses = splitClasses;
	exports.createElementCssSelector = createElementCssSelector;
	exports.removeSummaryDuplicates = removeSummaryDuplicates;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=compiler.umd.js.map


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(380), __webpack_require__(394), __webpack_require__(407), __webpack_require__(410)) :
		typeof define === 'function' && define.amd ? define(['exports', 'rxjs/Observable', 'rxjs/observable/merge', 'rxjs/operator/share', 'rxjs/Subject'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.Rx,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx));
	}(this, (function (exports,rxjs_Observable,rxjs_observable_merge,rxjs_operator_share,rxjs_Subject) { 'use strict';

	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * Creates a token that can be used in a DI Provider.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
	 *
	 * ```typescript
	 * var t = new OpaqueToken("value");
	 *
	 * var injector = Injector.resolveAndCreate([
	 *   {provide: t, useValue: "bindingValue"}
	 * ]);
	 *
	 * expect(injector.get(t)).toEqual("bindingValue");
	 * ```
	 *
	 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
	 * caused by multiple providers using the same string as two different tokens.
	 *
	 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
	 * error messages.
	 * @deprecated since v4.0.0 because it does not support type information, use `InjectionToken<?>`
	 * instead.
	 */
	var OpaqueToken = (function () {
	    /**
	     * @param {?} _desc
	     */
	    function OpaqueToken(_desc) {
	        this._desc = _desc;
	    }
	    /**
	     * @return {?}
	     */
	    OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
	    return OpaqueToken;
	}());
	/**
	 * Creates a token that can be used in a DI Provider.
	 *
	 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
	 * runtime representation) such as when injecting an interface, callable type, array or
	 * parametrized type.
	 *
	 * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
	 * the `Injector`. This provides additional level of type safety.
	 *
	 * ```
	 * interface MyInterface {...}
	 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
	 * // myInterface is inferred to be MyInterface.
	 * ```
	 *
	 * ### Example
	 *
	 * {\@example core/di/ts/injector_spec.ts region='InjectionToken'}
	 *
	 * \@stable
	 */
	var InjectionToken = (function (_super) {
	    __extends(InjectionToken, _super);
	    /**
	     * @param {?} desc
	     */
	    function InjectionToken(desc) {
	        return _super.call(this, desc) || this;
	    }
	    /**
	     * @return {?}
	     */
	    InjectionToken.prototype.toString = function () { return "InjectionToken " + this._desc; };
	    return InjectionToken;
	}(OpaqueToken));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __window = typeof window !== 'undefined' && window;
	var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
	    self instanceof WorkerGlobalScope && self;
	var __global = typeof global !== 'undefined' && global;
	var _global = __window || __global || __self;
	var _symbolIterator = null;
	/**
	 * @return {?}
	 */
	function getSymbolIterator() {
	    if (!_symbolIterator) {
	        var /** @type {?} */ Symbol = _global['Symbol'];
	        if (Symbol && Symbol.iterator) {
	            _symbolIterator = Symbol.iterator;
	        }
	        else {
	            // es6-shim specific logic
	            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
	            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	                var /** @type {?} */ key = keys[i];
	                if (key !== 'entries' && key !== 'size' &&
	                    ((Map)).prototype[key] === Map.prototype['entries']) {
	                    _symbolIterator = key;
	                }
	            }
	        }
	    }
	    return _symbolIterator;
	}
	/**
	 * @param {?} fn
	 * @return {?}
	 */
	function scheduleMicroTask(fn) {
	    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	}
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function looseIdentical(a, b) {
	    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	}
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token == null) {
	        return '' + token;
	    }
	    if (token.overriddenName) {
	        return "" + token.overriddenName;
	    }
	    if (token.name) {
	        return "" + token.name;
	    }
	    var /** @type {?} */ res = token.toString();
	    if (res == null) {
	        return '' + res;
	    }
	    var /** @type {?} */ newLineIndex = res.indexOf('\n');
	    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _nextClassId = 0;
	var Reflect = _global['Reflect'];
	/**
	 * @param {?} annotation
	 * @return {?}
	 */
	function extractAnnotation(annotation) {
	    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
	        // it is a decorator, extract annotation
	        annotation = annotation.annotation;
	    }
	    return annotation;
	}
	/**
	 * @param {?} fnOrArray
	 * @param {?} key
	 * @return {?}
	 */
	function applyParams(fnOrArray, key) {
	    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	        fnOrArray === Number || fnOrArray === Array) {
	        throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
	    }
	    if (typeof fnOrArray === 'function') {
	        return fnOrArray;
	    }
	    if (Array.isArray(fnOrArray)) {
	        var /** @type {?} */ annotations = (fnOrArray);
	        var /** @type {?} */ annoLength = annotations.length - 1;
	        var /** @type {?} */ fn = fnOrArray[annoLength];
	        if (typeof fn !== 'function') {
	            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
	        }
	        if (annoLength != fn.length) {
	            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
	        }
	        var /** @type {?} */ paramsAnnotations = [];
	        for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {
	            var /** @type {?} */ paramAnnotations = [];
	            paramsAnnotations.push(paramAnnotations);
	            var /** @type {?} */ annotation = annotations[i];
	            if (Array.isArray(annotation)) {
	                for (var /** @type {?} */ j = 0; j < annotation.length; j++) {
	                    paramAnnotations.push(extractAnnotation(annotation[j]));
	                }
	            }
	            else if (typeof annotation === 'function') {
	                paramAnnotations.push(extractAnnotation(annotation));
	            }
	            else {
	                paramAnnotations.push(annotation);
	            }
	        }
	        Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	        return fn;
	    }
	    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
	}
	/**
	 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
	 *
	 * ## Basic Example
	 *
	 * ```
	 * var Greeter = ng.Class({
	 *   constructor: function(name) {
	 *     this.name = name;
	 *   },
	 *
	 *   greet: function() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class Greeter {
	 *   constructor(name) {
	 *     this.name = name;
	 *   }
	 *
	 *   greet() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * }
	 * ```
	 *
	 * or equivalent to ES5:
	 *
	 * ```
	 * var Greeter = function (name) {
	 *   this.name = name;
	 * }
	 *
	 * Greeter.prototype.greet = function () {
	 *   alert('Hello ' + this.name + '!');
	 * }
	 * ```
	 *
	 * ### Example with parameter annotations
	 *
	 * ```
	 * var MyService = ng.Class({
	 *   constructor: [String, [new Optional(), Service], function(name, myService) {
	 *     ...
	 *   }]
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class MyService {
	 *   constructor(name: string, \@Optional() myService: Service) {
	 *     ...
	 *   }
	 * }
	 * ```
	 *
	 * ### Example with inheritance
	 *
	 * ```
	 * var Shape = ng.Class({
	 *   constructor: (color) {
	 *     this.color = color;
	 *   }
	 * });
	 *
	 * var Square = ng.Class({
	 *   extends: Shape,
	 *   constructor: function(color, size) {
	 *     Shape.call(this, color);
	 *     this.size = size;
	 *   }
	 * });
	 * ```
	 * @suppress {globalThis}
	 * \@stable
	 * @param {?} clsDef
	 * @return {?}
	 */
	function Class(clsDef) {
	    var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	    var /** @type {?} */ proto = constructor.prototype;
	    if (clsDef.hasOwnProperty('extends')) {
	        if (typeof clsDef.extends === 'function') {
	            ((constructor)).prototype = proto =
	                Object.create(((clsDef.extends)).prototype);
	        }
	        else {
	            throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
	        }
	    }
	    for (var /** @type {?} */ key in clsDef) {
	        if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
	            proto[key] = applyParams(clsDef[key], key);
	        }
	    }
	    if (this && this.annotations instanceof Array) {
	        Reflect.defineMetadata('annotations', this.annotations, constructor);
	    }
	    var /** @type {?} */ constructorName = constructor['name'];
	    if (!constructorName || constructorName === 'constructor') {
	        ((constructor))['overriddenName'] = "class" + _nextClassId++;
	    }
	    return (constructor);
	}
	/**
	 * @suppress {globalThis}
	 * @param {?} name
	 * @param {?} props
	 * @param {?=} parentClass
	 * @param {?=} chainFn
	 * @return {?}
	 */
	function makeDecorator(name, props, parentClass, chainFn) {
	    var /** @type {?} */ metaCtor = makeMetadataCtor([props]);
	    /**
	     * @param {?} objOrType
	     * @return {?}
	     */
	    function DecoratorFactory(objOrType) {
	        if (!(Reflect && Reflect.getOwnMetadata)) {
	            throw 'reflect-metadata shim is required when using class decorators';
	        }
	        if (this instanceof DecoratorFactory) {
	            metaCtor.call(this, objOrType);
	            return this;
	        }
	        var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);
	        var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
	        chainAnnotation.push(annotationInstance);
	        var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {
	            var /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];
	            annotations.push(annotationInstance);
	            Reflect.defineMetadata('annotations', annotations, cls);
	            return cls;
	        });
	        TypeDecorator.annotations = chainAnnotation;
	        TypeDecorator.Class = Class;
	        if (chainFn)
	            chainFn(TypeDecorator);
	        return TypeDecorator;
	    }
	    if (parentClass) {
	        DecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    DecoratorFactory.prototype.toString = function () { return "@" + name; };
	    ((DecoratorFactory)).annotationCls = DecoratorFactory;
	    return DecoratorFactory;
	}
	/**
	 * @param {?} props
	 * @return {?}
	 */
	function makeMetadataCtor(props) {
	    return function ctor() {
	        var _this = this;
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        props.forEach(function (prop, i) {
	            var /** @type {?} */ argVal = args[i];
	            if (Array.isArray(prop)) {
	                // plain parameter
	                _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
	            }
	            else {
	                for (var /** @type {?} */ propName in prop) {
	                    _this[propName] =
	                        argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
	                }
	            }
	        });
	    };
	}
	/**
	 * @param {?} name
	 * @param {?} props
	 * @param {?=} parentClass
	 * @return {?}
	 */
	function makeParamDecorator(name, props, parentClass) {
	    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	    /**
	     * @param {...?} args
	     * @return {?}
	     */
	    function ParamDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (this instanceof ParamDecoratorFactory) {
	            metaCtor.apply(this, args);
	            return this;
	        }
	        var /** @type {?} */ annotationInstance = new (((ParamDecoratorFactory)).bind.apply(((ParamDecoratorFactory)), [void 0].concat(args)))();
	        ((ParamDecorator)).annotation = annotationInstance;
	        return ParamDecorator;
	        /**
	         * @param {?} cls
	         * @param {?} unusedKey
	         * @param {?} index
	         * @return {?}
	         */
	        function ParamDecorator(cls, unusedKey, index) {
	            var /** @type {?} */ parameters = Reflect.getOwnMetadata('parameters', cls) || [];
	            // there might be gaps if some in between parameters do not have annotations.
	            // we pad with nulls.
	            while (parameters.length <= index) {
	                parameters.push(null);
	            }
	            parameters[index] = parameters[index] || []; /** @type {?} */
	            ((parameters[index])).push(annotationInstance);
	            Reflect.defineMetadata('parameters', parameters, cls);
	            return cls;
	        }
	    }
	    if (parentClass) {
	        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    ParamDecoratorFactory.prototype.toString = function () { return "@" + name; };
	    ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
	    return ParamDecoratorFactory;
	}
	/**
	 * @param {?} name
	 * @param {?} props
	 * @param {?=} parentClass
	 * @return {?}
	 */
	function makePropDecorator(name, props, parentClass) {
	    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	    /**
	     * @param {...?} args
	     * @return {?}
	     */
	    function PropDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (this instanceof PropDecoratorFactory) {
	            metaCtor.apply(this, args);
	            return this;
	        }
	        var /** @type {?} */ decoratorInstance = new (((PropDecoratorFactory)).bind.apply(((PropDecoratorFactory)), [void 0].concat(args)))();
	        return function PropDecorator(target, name) {
	            var /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
	            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
	            meta[name].unshift(decoratorInstance);
	            Reflect.defineMetadata('propMetadata', meta, target.constructor);
	        };
	    }
	    if (parentClass) {
	        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    PropDecoratorFactory.prototype.toString = function () { return "@" + name; };
	    ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
	    return PropDecoratorFactory;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This token can be used to create a virtual provider that will populate the
	 * `entryComponents` fields of components and ng modules based on its `useValue`.
	 * All components that are referenced in the `useValue` value (either directly
	 * or in a nested array or map) will be added to the `entryComponents` property.
	 *
	 * ### Example
	 * The following example shows how the router can populate the `entryComponents`
	 * field of an NgModule based on the router configuration which refers
	 * to components.
	 *
	 * ```typescript
	 * // helper function inside the router
	 * function provideRoutes(routes) {
	 *   return [
	 *     {provide: ROUTES, useValue: routes},
	 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
	 *   ];
	 * }
	 *
	 * // user code
	 * let routes = [
	 *   {path: '/root', component: RootComp},
	 *   {path: '/teams', component: TeamsComp}
	 * ];
	 *
	 * \@NgModule({
	 *   providers: [provideRoutes(routes)]
	 * })
	 * class ModuleWithRoutes {}
	 * ```
	 *
	 * \@experimental
	 */
	var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
	/**
	 * Attribute decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
	/**
	 * Base class for query metadata.
	 *
	 * See {\@link ContentChildren}, {\@link ContentChild}, {\@link ViewChildren}, {\@link ViewChild} for
	 * more information.
	 *
	 * \@stable
	 * @abstract
	 */
	var Query = (function () {
	    function Query() {
	    }
	    return Query;
	}());
	/**
	 * ContentChildren decorator and metadata.
	 *
	 *  \@stable
	 *  \@Annotation
	 */
	var ContentChildren = makePropDecorator('ContentChildren', [
	    ['selector', undefined], {
	        first: false,
	        isViewQuery: false,
	        descendants: false,
	        read: undefined,
	    }
	], Query);
	/**
	 * ContentChild decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var ContentChild = makePropDecorator('ContentChild', [
	    ['selector', undefined], {
	        first: true,
	        isViewQuery: false,
	        descendants: true,
	        read: undefined,
	    }
	], Query);
	/**
	 * ViewChildren decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var ViewChildren = makePropDecorator('ViewChildren', [
	    ['selector', undefined], {
	        first: false,
	        isViewQuery: true,
	        descendants: true,
	        read: undefined,
	    }
	], Query);
	/**
	 * ViewChild decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var ViewChild = makePropDecorator('ViewChild', [
	    ['selector', undefined], {
	        first: true,
	        isViewQuery: true,
	        descendants: true,
	        read: undefined,
	    }
	], Query);
	var ChangeDetectionStrategy = {};
	ChangeDetectionStrategy.OnPush = 0;
	ChangeDetectionStrategy.Default = 1;
	ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
	ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
	var ChangeDetectorStatus = {};
	ChangeDetectorStatus.CheckOnce = 0;
	ChangeDetectorStatus.Checked = 1;
	ChangeDetectorStatus.CheckAlways = 2;
	ChangeDetectorStatus.Detached = 3;
	ChangeDetectorStatus.Errored = 4;
	ChangeDetectorStatus.Destroyed = 5;
	ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
	ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
	ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
	ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
	ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
	ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
	/**
	 * @param {?} changeDetectionStrategy
	 * @return {?}
	 */
	function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	    return changeDetectionStrategy == null ||
	        changeDetectionStrategy === ChangeDetectionStrategy.Default;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Directive decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Directive = makeDecorator('Directive', {
	    selector: undefined,
	    inputs: undefined,
	    outputs: undefined,
	    host: undefined,
	    providers: undefined,
	    exportAs: undefined,
	    queries: undefined
	});
	/**
	 * Component decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Component = makeDecorator('Component', {
	    selector: undefined,
	    inputs: undefined,
	    outputs: undefined,
	    host: undefined,
	    exportAs: undefined,
	    moduleId: undefined,
	    providers: undefined,
	    viewProviders: undefined,
	    changeDetection: ChangeDetectionStrategy.Default,
	    queries: undefined,
	    templateUrl: undefined,
	    template: undefined,
	    styleUrls: undefined,
	    styles: undefined,
	    animations: undefined,
	    encapsulation: undefined,
	    interpolation: undefined,
	    entryComponents: undefined
	}, Directive);
	/**
	 * Pipe decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Pipe = makeDecorator('Pipe', {
	    name: undefined,
	    pure: true,
	});
	/**
	 * Input decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
	/**
	 * Output decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
	/**
	 * HostBinding decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
	/**
	 * HostListener decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Defines a schema that will allow:
	 * - any non-Angular elements with a `-` in their name,
	 * - any properties on elements with a `-` in their name which is the common rule for custom
	 * elements.
	 *
	 * \@stable
	 */
	var CUSTOM_ELEMENTS_SCHEMA = {
	    name: 'custom-elements'
	};
	/**
	 * Defines a schema that will allow any property on any element.
	 *
	 * \@experimental
	 */
	var NO_ERRORS_SCHEMA = {
	    name: 'no-errors-schema'
	};
	/**
	 * NgModule decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var NgModule = makeDecorator('NgModule', {
	    providers: undefined,
	    declarations: undefined,
	    imports: undefined,
	    exports: undefined,
	    entryComponents: undefined,
	    bootstrap: undefined,
	    schemas: undefined,
	    id: undefined,
	});
	var ViewEncapsulation = {};
	ViewEncapsulation.Emulated = 0;
	ViewEncapsulation.Native = 1;
	ViewEncapsulation.None = 2;
	ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
	ViewEncapsulation[ViewEncapsulation.Native] = "Native";
	ViewEncapsulation[ViewEncapsulation.None] = "None";
	/**
	 * Metadata properties available for configuring Views.
	 *
	 * For details on the `\@Component` annotation, see {\@link Component}.
	 *
	 * ### Example
	 *
	 * ```
	 * \@Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!',
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 * @deprecated Use Component instead.
	 *
	 * {\@link Component}
	 */
	var ViewMetadata = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function ViewMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.styleUrls = styleUrls;
	        this.styles = styles;
	        this.encapsulation = encapsulation;
	        this.animations = animations;
	        this.interpolation = interpolation;
	    }
	    return ViewMetadata;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Represents the version of Angular
	 *
	 * \@stable
	 */
	var Version = (function () {
	    /**
	     * @param {?} full
	     */
	    function Version(full) {
	        this.full = full;
	    }
	    Object.defineProperty(Version.prototype, "major", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.full.split('.')[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Version.prototype, "minor", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.full.split('.')[1]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Version.prototype, "patch", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.full.split('.').slice(2).join('.'); },
	        enumerable: true,
	        configurable: true
	    });
	    return Version;
	}());
	/**
	 * \@stable
	 */
	var VERSION = new Version('4.1.0');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Inject decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Inject = makeParamDecorator('Inject', [['token', undefined]]);
	/**
	 * Optional decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Optional = makeParamDecorator('Optional', []);
	/**
	 * Injectable decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Injectable = makeDecorator('Injectable', []);
	/**
	 * Self decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Self = makeParamDecorator('Self', []);
	/**
	 * SkipSelf decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var SkipSelf = makeParamDecorator('SkipSelf', []);
	/**
	 * Host decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Host = makeParamDecorator('Host', []);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Allows to refer to references which are not yet defined.
	 *
	 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	 * DI is declared,
	 * but not yet defined. It is also used when the `token` which we use when creating a query is not
	 * yet defined.
	 *
	 * ### Example
	 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
	 * \@experimental
	 * @param {?} forwardRefFn
	 * @return {?}
	 */
	function forwardRef(forwardRefFn) {
	    ((forwardRefFn)).__forward_ref__ = forwardRef;
	    ((forwardRefFn)).toString = function () { return stringify(this()); };
	    return (((forwardRefFn)));
	}
	/**
	 * Lazily retrieves the reference value from a forwardRef.
	 *
	 * Acts as the identity function when given a non-forward-ref value.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
	 *
	 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
	 *
	 * See: {\@link forwardRef}
	 * \@experimental
	 * @param {?} type
	 * @return {?}
	 */
	function resolveForwardRef(type) {
	    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
	        type.__forward_ref__ === forwardRef) {
	        return ((type))();
	    }
	    else {
	        return type;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _THROW_IF_NOT_FOUND = new Object();
	var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	var _NullInjector = (function () {
	    function _NullInjector() {
	    }
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    _NullInjector.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
	        if (notFoundValue === _THROW_IF_NOT_FOUND) {
	            throw new Error("No provider for " + stringify(token) + "!");
	        }
	        return notFoundValue;
	    };
	    return _NullInjector;
	}());
	/**
	 * \@whatItDoes Injector interface
	 * \@howToUse
	 * ```
	 * const injector: Injector = ...;
	 * injector.get(...);
	 * ```
	 *
	 * \@description
	 * For more details, see the {\@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
	 *
	 * ### Example
	 *
	 * {\@example core/di/ts/injector_spec.ts region='Injector'}
	 *
	 * `Injector` returns itself when given `Injector` as a token:
	 * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
	 *
	 * \@stable
	 * @abstract
	 */
	var Injector = (function () {
	    function Injector() {
	    }
	    /**
	     * Retrieves an instance from the injector based on the provided token.
	     * If not found:
	     * - Throws {\@link NoProviderError} if no `notFoundValue` that is not equal to
	     * Injector.THROW_IF_NOT_FOUND is given
	     * - Returns the `notFoundValue` otherwise
	     * @abstract
	     * @template T
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    Injector.prototype.get = function (token, notFoundValue) { };
	    /**
	     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>
	     * @suppress {duplicate}
	     * @abstract
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    Injector.prototype.get = function (token, notFoundValue) { };
	    return Injector;
	}());
	Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	Injector.NULL = new _NullInjector();
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ERROR_COMPONENT_TYPE = 'ngComponentType';
	var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
	var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
	var ERROR_LOGGER = 'ngErrorLogger';
	/**
	 * @param {?} error
	 * @return {?}
	 */
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function getDebugContext(error) {
	    return ((error))[ERROR_DEBUG_CONTEXT];
	}
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function getOriginalError(error) {
	    return ((error))[ERROR_ORIGINAL_ERROR];
	}
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function getErrorLogger(error) {
	    return ((error))[ERROR_LOGGER] || defaultErrorLogger;
	}
	/**
	 * @param {?} console
	 * @param {...?} values
	 * @return {?}
	 */
	function defaultErrorLogger(console) {
	    var values = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        values[_i - 1] = arguments[_i];
	    }
	    console.error.apply(console, values);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Provides a hook for centralized exception handling.
	 *
	 * \@description
	 *
	 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
	 * intercept error handling, write a custom exception handler that replaces this default as
	 * appropriate for your app.
	 *
	 * ### Example
	 *
	 * ```
	 * class MyErrorHandler implements ErrorHandler {
	 *   handleError(error) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * \@NgModule({
	 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	 * })
	 * class MyModule {}
	 * ```
	 *
	 * \@stable
	 */
	var ErrorHandler = (function () {
	    /**
	     * @param {?=} deprecatedParameter
	     */
	    function ErrorHandler(
	        /**
	         * @deprecated since v4.0 parameter no longer has an effect, as ErrorHandler will never
	         * rethrow.
	         */
	        deprecatedParameter) {
	        /**
	         * \@internal
	         */
	        this._console = console;
	    }
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    ErrorHandler.prototype.handleError = function (error) {
	        var /** @type {?} */ originalError = this._findOriginalError(error);
	        var /** @type {?} */ context = this._findContext(error);
	        // Note: Browser consoles show the place from where console.error was called.
	        // We can use this to give users additional information about the error.
	        var /** @type {?} */ errorLogger = getErrorLogger(error);
	        errorLogger(this._console, "ERROR", error);
	        if (originalError) {
	            errorLogger(this._console, "ORIGINAL ERROR", originalError);
	        }
	        if (context) {
	            errorLogger(this._console, 'ERROR CONTEXT', context);
	        }
	    };
	    /**
	     * \@internal
	     * @param {?} error
	     * @return {?}
	     */
	    ErrorHandler.prototype._findContext = function (error) {
	        if (error) {
	            return getDebugContext(error) ? getDebugContext(error) :
	                this._findContext(getOriginalError(error));
	        }
	        return null;
	    };
	    /**
	     * \@internal
	     * @param {?} error
	     * @return {?}
	     */
	    ErrorHandler.prototype._findOriginalError = function (error) {
	        var /** @type {?} */ e = getOriginalError(error);
	        while (e && getOriginalError(e)) {
	            e = getOriginalError(e);
	        }
	        return e;
	    };
	    return ErrorHandler;
	}());
	/**
	 * @param {?} message
	 * @param {?} originalError
	 * @return {?}
	 */
	function wrappedError(message, originalError) {
	    var /** @type {?} */ msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError);
	    var /** @type {?} */ error = Error(msg);
	    ((error))[ERROR_ORIGINAL_ERROR] = originalError;
	    return error;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} keys
	 * @return {?}
	 */
	function findFirstClosedCycle(keys) {
	    var /** @type {?} */ res = [];
	    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	        if (res.indexOf(keys[i]) > -1) {
	            res.push(keys[i]);
	            return res;
	        }
	        res.push(keys[i]);
	    }
	    return res;
	}
	/**
	 * @param {?} keys
	 * @return {?}
	 */
	function constructResolvingPath(keys) {
	    if (keys.length > 1) {
	        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
	        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
	        return ' (' + tokenStrs.join(' -> ') + ')';
	    }
	    return '';
	}
	/**
	 * @param {?} injector
	 * @param {?} key
	 * @param {?} constructResolvingMessage
	 * @param {?=} originalError
	 * @return {?}
	 */
	function injectionError(injector, key, constructResolvingMessage, originalError) {
	    var /** @type {?} */ error = ((originalError ? wrappedError('', originalError) : Error()));
	    error.addKey = addKey;
	    error.keys = [key];
	    error.injectors = [injector];
	    error.constructResolvingMessage = constructResolvingMessage;
	    error.message = error.constructResolvingMessage();
	    ((error))[ERROR_ORIGINAL_ERROR] = originalError;
	    return error;
	}
	/**
	 * @this {?}
	 * @param {?} injector
	 * @param {?} key
	 * @return {?}
	 */
	function addKey(injector, key) {
	    this.injectors.push(injector);
	    this.keys.push(key);
	    this.message = this.constructResolvingMessage();
	}
	/**
	 * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
	 * {\@link Injector} does not have a {\@link Provider} for the given key.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b:B) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 * @param {?} injector
	 * @param {?} key
	 * @return {?}
	 */
	function noProviderError(injector, key) {
	    return injectionError(injector, key, function () {
	        var /** @type {?} */ first = stringify(this.keys[0].token);
	        return "No provider for " + first + "!" + constructResolvingPath(this.keys);
	    });
	}
	/**
	 * Thrown when dependencies form a cycle.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
	 *
	 * ```typescript
	 * var injector = Injector.resolveAndCreate([
	 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
	 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
	 * ]);
	 *
	 * expect(() => injector.get("one")).toThrowError();
	 * ```
	 *
	 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	 * @param {?} injector
	 * @param {?} key
	 * @return {?}
	 */
	function cyclicDependencyError(injector, key) {
	    return injectionError(injector, key, function () {
	        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(this.keys);
	    });
	}
	/**
	 * Thrown when a constructing type returns with an Error.
	 *
	 * The `InstantiationError` class contains the original error plus the dependency graph which caused
	 * this object to be instantiated.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor() {
	 *     throw new Error('message');
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([A]);
	 * try {
	 *   injector.get(A);
	 * } catch (e) {
	 *   expect(e instanceof InstantiationError).toBe(true);
	 *   expect(e.originalException.message).toEqual("message");
	 *   expect(e.originalStack).toBeDefined();
	 * }
	 * ```
	 * @param {?} injector
	 * @param {?} originalException
	 * @param {?} originalStack
	 * @param {?} key
	 * @return {?}
	 */
	function instantiationError(injector, originalException, originalStack, key) {
	    return injectionError(injector, key, function () {
	        var /** @type {?} */ first = stringify(this.keys[0].token);
	        return getOriginalError(this).message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
	    }, originalException);
	}
	/**
	 * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
	 * creation.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	 * ```
	 * @param {?} provider
	 * @return {?}
	 */
	function invalidProviderError(provider) {
	    return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
	}
	/**
	 * Thrown when the class has no annotation information.
	 *
	 * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
	 * need to be injected into the constructor.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 *
	 * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
	 *
	 * ```typescript
	 * class B {}
	 *
	 * class A {
	 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	 * ```
	 * \@stable
	 * @param {?} typeOrFunc
	 * @param {?} params
	 * @return {?}
	 */
	function noAnnotationError(typeOrFunc, params) {
	    var /** @type {?} */ signature = [];
	    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
	        var /** @type {?} */ parameter = params[i];
	        if (!parameter || parameter.length == 0) {
	            signature.push('?');
	        }
	        else {
	            signature.push(parameter.map(stringify).join(' '));
	        }
	    }
	    return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
	        signature.join(', ') + '). ' +
	        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
	        stringify(typeOrFunc) + '\' is decorated with Injectable.');
	}
	/**
	 * Thrown when getting an object by index.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	 *
	 * ```typescript
	 * class A {}
	 *
	 * var injector = Injector.resolveAndCreate([A]);
	 *
	 * expect(() => injector.getAt(100)).toThrowError();
	 * ```
	 * \@stable
	 * @param {?} index
	 * @return {?}
	 */
	function outOfBoundsError(index) {
	    return Error("Index " + index + " is out-of-bounds.");
	}
	/**
	 * Thrown when a multi provider and a regular provider are bound to the same token.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate([
	 *   { provide: "Strings", useValue: "string1", multi: true},
	 *   { provide: "Strings", useValue: "string2", multi: false}
	 * ])).toThrowError();
	 * ```
	 * @param {?} provider1
	 * @param {?} provider2
	 * @return {?}
	 */
	function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	    return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
	 *
	 * Keys have:
	 * - a system-wide unique `id`.
	 * - a `token`.
	 *
	 * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
	 * the
	 * injector to store created objects in a more efficient way.
	 *
	 * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
	 * resolving
	 * providers.
	 * \@experimental
	 */
	var ReflectiveKey = (function () {
	    /**
	     * Private
	     * @param {?} token
	     * @param {?} id
	     */
	    function ReflectiveKey(token, id) {
	        this.token = token;
	        this.id = id;
	        if (!token) {
	            throw new Error('Token must be defined!');
	        }
	    }
	    Object.defineProperty(ReflectiveKey.prototype, "displayName", {
	        /**
	         * Returns a stringified token.
	         * @return {?}
	         */
	        get: function () { return stringify(this.token); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieves a `Key` for a token.
	     * @param {?} token
	     * @return {?}
	     */
	    ReflectiveKey.get = function (token) {
	        return _globalKeyRegistry.get(resolveForwardRef(token));
	    };
	    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
	        /**
	         * @return {?} the number of keys registered in the system.
	         */
	        get: function () { return _globalKeyRegistry.numberOfKeys; },
	        enumerable: true,
	        configurable: true
	    });
	    return ReflectiveKey;
	}());
	/**
	 * \@internal
	 */
	var KeyRegistry = (function () {
	    function KeyRegistry() {
	        this._allKeys = new Map();
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    KeyRegistry.prototype.get = function (token) {
	        if (token instanceof ReflectiveKey)
	            return token;
	        if (this._allKeys.has(token)) {
	            return ((this._allKeys.get(token)));
	        }
	        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
	        this._allKeys.set(token, newKey);
	        return newKey;
	    };
	    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._allKeys.size; },
	        enumerable: true,
	        configurable: true
	    });
	    return KeyRegistry;
	}());
	var _globalKeyRegistry = new KeyRegistry();
	/**
	 * \@whatItDoes Represents a type that a Component or other object is instances of.
	 *
	 * \@description
	 *
	 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
	 * the `MyCustomComponent` constructor function.
	 *
	 * \@stable
	 */
	var Type = Function;
	/**
	 * @param {?} v
	 * @return {?}
	 */
	function isType(v) {
	    return typeof v === 'function';
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Attention: This regex has to hold even if the code is minified!
	 */
	var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/;
	var ReflectionCapabilities = (function () {
	    /**
	     * @param {?=} reflect
	     */
	    function ReflectionCapabilities(reflect) {
	        this._reflect = reflect || _global['Reflect'];
	    }
	    /**
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	    /**
	     * @template T
	     * @param {?} t
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.factory = function (t) { return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return new (t.bind.apply(t, [void 0].concat(args)))();
	    }; };
	    /**
	     * \@internal
	     * @param {?} paramTypes
	     * @param {?} paramAnnotations
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
	        var /** @type {?} */ result;
	        if (typeof paramTypes === 'undefined') {
	            result = new Array(paramAnnotations.length);
	        }
	        else {
	            result = new Array(paramTypes.length);
	        }
	        for (var /** @type {?} */ i = 0; i < result.length; i++) {
	            // TS outputs Object for parameters without types, while Traceur omits
	            // the annotations. For now we preserve the Traceur behavior to aid
	            // migration, but this can be revisited.
	            if (typeof paramTypes === 'undefined') {
	                result[i] = [];
	            }
	            else if (paramTypes[i] != Object) {
	                result[i] = [paramTypes[i]];
	            }
	            else {
	                result[i] = [];
	            }
	            if (paramAnnotations && paramAnnotations[i] != null) {
	                result[i] = result[i].concat(paramAnnotations[i]);
	            }
	        }
	        return result;
	    };
	    /**
	     * @param {?} type
	     * @param {?} parentCtor
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
	        // If we have no decorators, we only have function.length as metadata.
	        // In that case, to detect whether a child class declared an own constructor or not,
	        // we need to look inside of that constructor to check whether it is
	        // just calling the parent.
	        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
	        // that sets 'design:paramtypes' to []
	        // if a class inherits from another class but has no ctor declared itself.
	        if (DELEGATE_CTOR.exec(type.toString())) {
	            return null;
	        }
	        // Prefer the direct API.
	        if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
	            return ((type)).parameters;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;
	        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
	            // Newer tsickle uses a function closure
	            // Retain the non-function case for compatibility with older tsickle
	            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
	            var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
	            var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) { return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators); });
	            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	        }
	        // API for metadata created by invoking the decorators.
	        if (this._reflect != null && this._reflect.getOwnMetadata != null) {
	            var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
	            var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
	            if (paramTypes || paramAnnotations) {
	                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	            }
	        }
	        // If a class has no decorators, at least create metadata
	        // based on function.length.
	        // Note: We know that this is a real constructor as we checked
	        // the content of the constructor above.
	        return new Array(((type.length))).fill(undefined);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.parameters = function (type) {
	        // Note: only report metadata if we have at least one class decorator
	        // to stay in sync with the static reflector.
	        if (!isType(type)) {
	            return [];
	        }
	        var /** @type {?} */ parentCtor = getParentCtor(type);
	        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
	        if (!parameters && parentCtor !== Object) {
	            parameters = this.parameters(parentCtor);
	        }
	        return parameters || [];
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} parentCtor
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
	        // Prefer the direct API.
	        if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
	            var /** @type {?} */ annotations = ((typeOrFunc)).annotations;
	            if (typeof annotations === 'function' && annotations.annotations) {
	                annotations = annotations.annotations;
	            }
	            return annotations;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
	            return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
	        }
	        // API for metadata created by invoking the decorators.
	        if (this._reflect && this._reflect.getOwnMetadata) {
	            return this._reflect.getOwnMetadata('annotations', typeOrFunc);
	        }
	        return null;
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return [];
	        }
	        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
	        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
	        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
	        return parentAnnotations.concat(ownAnnotations);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} parentCtor
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
	        // Prefer the direct API.
	        if (((typeOrFunc)).propMetadata &&
	            ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
	            var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;
	            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
	                propMetadata = propMetadata.propMetadata;
	            }
	            return propMetadata;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        if (((typeOrFunc)).propDecorators &&
	            ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
	            var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;
	            var /** @type {?} */ propMetadata_1 = ({});
	            Object.keys(propDecorators_1).forEach(function (prop) {
	                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
	            });
	            return propMetadata_1;
	        }
	        // API for metadata created by invoking the decorators.
	        if (this._reflect && this._reflect.getOwnMetadata) {
	            return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
	        }
	        return null;
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return {};
	        }
	        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
	        var /** @type {?} */ propMetadata = {};
	        if (parentCtor !== Object) {
	            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
	            Object.keys(parentPropMetadata_1).forEach(function (propName) {
	                propMetadata[propName] = parentPropMetadata_1[propName];
	            });
	        }
	        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
	        if (ownPropMetadata) {
	            Object.keys(ownPropMetadata).forEach(function (propName) {
	                var /** @type {?} */ decorators = [];
	                if (propMetadata.hasOwnProperty(propName)) {
	                    decorators.push.apply(decorators, propMetadata[propName]);
	                }
	                decorators.push.apply(decorators, ownPropMetadata[propName]);
	                propMetadata[propName] = decorators;
	            });
	        }
	        return propMetadata;
	    };
	    /**
	     * @param {?} type
	     * @param {?} lcProperty
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return type instanceof Type && lcProperty in type.prototype;
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.getter = function (name) { return (new Function('o', 'return o.' + name + ';')); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.setter = function (name) {
	        return (new Function('o', 'v', 'return o.' + name + ' = v;'));
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.method = function (name) {
	        var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	        return (new Function('o', 'args', functionBody));
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.importUri = function (type) {
	        // StaticSymbol
	        if (typeof type === 'object' && type['filePath']) {
	            return type['filePath'];
	        }
	        // Runtime type
	        return "./" + stringify(type);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.resourceUri = function (type) { return "./" + stringify(type); };
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return runtime;
	    };
	    /**
	     * @param {?} enumIdentifier
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
	    return ReflectionCapabilities;
	}());
	/**
	 * @param {?} decoratorInvocations
	 * @return {?}
	 */
	function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
	    if (!decoratorInvocations) {
	        return [];
	    }
	    return decoratorInvocations.map(function (decoratorInvocation) {
	        var /** @type {?} */ decoratorType = decoratorInvocation.type;
	        var /** @type {?} */ annotationCls = decoratorType.annotationCls;
	        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
	        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
	    });
	}
	/**
	 * @param {?} ctor
	 * @return {?}
	 */
	function getParentCtor(ctor) {
	    var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);
	    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;
	    // Note: We always use `Object` as the null value
	    // to simplify checking later on.
	    return parentCtor || Object;
	}
	/**
	 * Provides read-only access to reflection data about symbols. Used internally by Angular
	 * to power dependency injection and compilation.
	 * @abstract
	 */
	var ReflectorReader = (function () {
	    function ReflectorReader() {
	    }
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.parameters = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.annotations = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.importUri = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.resourceUri = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) { };
	    /**
	     * @abstract
	     * @param {?} identifier
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectorReader.prototype.resolveEnum = function (identifier, name) { };
	    return ReflectorReader;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides access to reflection data about symbols. Used internally by Angular
	 * to power dependency injection and compilation.
	 */
	var Reflector = (function (_super) {
	    __extends(Reflector, _super);
	    /**
	     * @param {?} reflectionCapabilities
	     */
	    function Reflector(reflectionCapabilities) {
	        var _this = _super.call(this) || this;
	        _this.reflectionCapabilities = reflectionCapabilities;
	        return _this;
	    }
	    /**
	     * @param {?} caps
	     * @return {?}
	     */
	    Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    Reflector.prototype.parameters = function (typeOrFunc) {
	        return this.reflectionCapabilities.parameters(typeOrFunc);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    Reflector.prototype.annotations = function (typeOrFunc) {
	        return this.reflectionCapabilities.annotations(typeOrFunc);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    Reflector.prototype.propMetadata = function (typeOrFunc) {
	        return this.reflectionCapabilities.propMetadata(typeOrFunc);
	    };
	    /**
	     * @param {?} type
	     * @param {?} lcProperty
	     * @return {?}
	     */
	    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
	    };
	    /**
	     * @param {?} identifier
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.resolveEnum = function (identifier, name) {
	        return this.reflectionCapabilities.resolveEnum(identifier, name);
	    };
	    return Reflector;
	}(ReflectorReader));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The {@link Reflector} used internally in Angular to access metadata
	 * about symbols.
	 */
	var reflector = new Reflector(new ReflectionCapabilities());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `Dependency` is used by the framework to extend DI.
	 * This is internal to Angular and should not be used directly.
	 */
	var ReflectiveDependency = (function () {
	    /**
	     * @param {?} key
	     * @param {?} optional
	     * @param {?} visibility
	     */
	    function ReflectiveDependency(key, optional, visibility) {
	        this.key = key;
	        this.optional = optional;
	        this.visibility = visibility;
	    }
	    /**
	     * @param {?} key
	     * @return {?}
	     */
	    ReflectiveDependency.fromKey = function (key) {
	        return new ReflectiveDependency(key, false, null);
	    };
	    return ReflectiveDependency;
	}());
	var _EMPTY_LIST = [];
	var ResolvedReflectiveProvider_ = (function () {
	    /**
	     * @param {?} key
	     * @param {?} resolvedFactories
	     * @param {?} multiProvider
	     */
	    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
	        this.key = key;
	        this.resolvedFactories = resolvedFactories;
	        this.multiProvider = multiProvider;
	    }
	    Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.resolvedFactories[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    return ResolvedReflectiveProvider_;
	}());
	/**
	 * An internal resolved representation of a factory function created by resolving {\@link
	 * Provider}.
	 * \@experimental
	 */
	var ResolvedReflectiveFactory = (function () {
	    /**
	     * @param {?} factory
	     * @param {?} dependencies
	     */
	    function ResolvedReflectiveFactory(factory, dependencies) {
	        this.factory = factory;
	        this.dependencies = dependencies;
	    }
	    return ResolvedReflectiveFactory;
	}());
	/**
	 * Resolve a single provider.
	 * @param {?} provider
	 * @return {?}
	 */
	function resolveReflectiveFactory(provider) {
	    var /** @type {?} */ factoryFn;
	    var /** @type {?} */ resolvedDeps;
	    if (provider.useClass) {
	        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
	        factoryFn = reflector.factory(useClass);
	        resolvedDeps = _dependenciesFor(useClass);
	    }
	    else if (provider.useExisting) {
	        factoryFn = function (aliasInstance) { return aliasInstance; };
	        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
	    }
	    else if (provider.useFactory) {
	        factoryFn = provider.useFactory;
	        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
	    }
	    else {
	        factoryFn = function () { return provider.useValue; };
	        resolvedDeps = _EMPTY_LIST;
	    }
	    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
	}
	/**
	 * Converts the {\@link Provider} into {\@link ResolvedProvider}.
	 *
	 * {\@link Injector} internally only uses {\@link ResolvedProvider}, {\@link Provider} contains
	 * convenience provider syntax.
	 * @param {?} provider
	 * @return {?}
	 */
	function resolveReflectiveProvider(provider) {
	    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
	}
	/**
	 * Resolve a list of Providers.
	 * @param {?} providers
	 * @return {?}
	 */
	function resolveReflectiveProviders(providers) {
	    var /** @type {?} */ normalized = _normalizeProviders(providers, []);
	    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
	    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
	    return Array.from(resolvedProviderMap.values());
	}
	/**
	 * Merges a list of ResolvedProviders into a list where
	 * each key is contained exactly once and multi providers
	 * have been merged.
	 * @param {?} providers
	 * @param {?} normalizedProvidersMap
	 * @return {?}
	 */
	function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
	    for (var /** @type {?} */ i = 0; i < providers.length; i++) {
	        var /** @type {?} */ provider = providers[i];
	        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
	        if (existing) {
	            if (provider.multiProvider !== existing.multiProvider) {
	                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
	            }
	            if (provider.multiProvider) {
	                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
	                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                }
	            }
	            else {
	                normalizedProvidersMap.set(provider.key.id, provider);
	            }
	        }
	        else {
	            var /** @type {?} */ resolvedProvider = void 0;
	            if (provider.multiProvider) {
	                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
	            }
	            else {
	                resolvedProvider = provider;
	            }
	            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	        }
	    }
	    return normalizedProvidersMap;
	}
	/**
	 * @param {?} providers
	 * @param {?} res
	 * @return {?}
	 */
	function _normalizeProviders(providers, res) {
	    providers.forEach(function (b) {
	        if (b instanceof Type) {
	            res.push({ provide: b, useClass: b });
	        }
	        else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
	            res.push(/** @type {?} */ (b));
	        }
	        else if (b instanceof Array) {
	            _normalizeProviders(b, res);
	        }
	        else {
	            throw invalidProviderError(b);
	        }
	    });
	    return res;
	}
	/**
	 * @param {?} typeOrFunc
	 * @param {?=} dependencies
	 * @return {?}
	 */
	function constructDependencies(typeOrFunc, dependencies) {
	    if (!dependencies) {
	        return _dependenciesFor(typeOrFunc);
	    }
	    else {
	        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
	        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
	    }
	}
	/**
	 * @param {?} typeOrFunc
	 * @return {?}
	 */
	function _dependenciesFor(typeOrFunc) {
	    var /** @type {?} */ params = reflector.parameters(typeOrFunc);
	    if (!params)
	        return [];
	    if (params.some(function (p) { return p == null; })) {
	        throw noAnnotationError(typeOrFunc, params);
	    }
	    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	}
	/**
	 * @param {?} typeOrFunc
	 * @param {?} metadata
	 * @param {?} params
	 * @return {?}
	 */
	function _extractToken(typeOrFunc, metadata, params) {
	    var /** @type {?} */ token = null;
	    var /** @type {?} */ optional = false;
	    if (!Array.isArray(metadata)) {
	        if (metadata instanceof Inject) {
	            return _createDependency(metadata['token'], optional, null);
	        }
	        else {
	            return _createDependency(metadata, optional, null);
	        }
	    }
	    var /** @type {?} */ visibility = null;
	    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
	        var /** @type {?} */ paramMetadata = metadata[i];
	        if (paramMetadata instanceof Type) {
	            token = paramMetadata;
	        }
	        else if (paramMetadata instanceof Inject) {
	            token = paramMetadata['token'];
	        }
	        else if (paramMetadata instanceof Optional) {
	            optional = true;
	        }
	        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
	            visibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof InjectionToken) {
	            token = paramMetadata;
	        }
	    }
	    token = resolveForwardRef(token);
	    if (token != null) {
	        return _createDependency(token, optional, visibility);
	    }
	    else {
	        throw noAnnotationError(typeOrFunc, params);
	    }
	}
	/**
	 * @param {?} token
	 * @param {?} optional
	 * @param {?} visibility
	 * @return {?}
	 */
	function _createDependency(token, optional, visibility) {
	    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Threshold for the dynamic version
	var UNDEFINED = new Object();
	/**
	 * A ReflectiveDependency injection container used for instantiating objects and resolving
	 * dependencies.
	 *
	 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	 * constructor dependencies.
	 *
	 * In typical use, application code asks for the dependencies in the constructor and they are
	 * resolved by the `Injector`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
	 *
	 * The following example creates an `Injector` configured to create `Engine` and `Car`.
	 *
	 * ```typescript
	 * \@Injectable()
	 * class Engine {
	 * }
	 *
	 * \@Injectable()
	 * class Car {
	 *   constructor(public engine:Engine) {}
	 * }
	 *
	 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	 * var car = injector.get(Car);
	 * expect(car instanceof Car).toBe(true);
	 * expect(car.engine instanceof Engine).toBe(true);
	 * ```
	 *
	 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	 * resolve all of the object's dependencies automatically.
	 *
	 * \@stable
	 * @abstract
	 */
	var ReflectiveInjector = (function () {
	    function ReflectiveInjector() {
	    }
	    /**
	     * Turns an array of provider definitions into an array of resolved providers.
	     *
	     * A resolution is a process of flattening multiple nested arrays and converting individual
	     * providers into an array of {\@link ResolvedReflectiveProvider}s.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
	     *
	     * expect(providers.length).toEqual(2);
	     *
	     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
	     * expect(providers[0].key.displayName).toBe("Car");
	     * expect(providers[0].dependencies.length).toEqual(1);
	     * expect(providers[0].factory).toBeDefined();
	     *
	     * expect(providers[1].key.displayName).toBe("Engine");
	     * });
	     * ```
	     *
	     * See {\@link ReflectiveInjector#fromResolvedProviders} for more info.
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector.resolve = function (providers) {
	        return resolveReflectiveProviders(providers);
	    };
	    /**
	     * Resolves an array of providers and creates an injector from those providers.
	     *
	     * The passed-in providers can be an array of `Type`, {\@link Provider},
	     * or a recursive array of more providers.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     *
	     * This function is slower than the corresponding `fromResolvedProviders`
	     * because it needs to resolve the passed-in providers first.
	     * See {\@link Injector#resolve} and {\@link Injector#fromResolvedProviders}.
	     * @param {?} providers
	     * @param {?=} parent
	     * @return {?}
	     */
	    ReflectiveInjector.resolveAndCreate = function (providers, parent) {
	        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
	    };
	    /**
	     * Creates an injector from previously resolved providers.
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = ReflectiveInjector.resolve([Car, Engine]);
	     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     * \@experimental
	     * @param {?} providers
	     * @param {?=} parent
	     * @return {?}
	     */
	    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
	        return new ReflectiveInjector_(providers, parent);
	    };
	    /**
	     * Parent of this injector.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
	     *
	     * ```typescript
	     * var parent = ReflectiveInjector.resolveAndCreate([]);
	     * var child = parent.resolveAndCreateChild([]);
	     * expect(child.parent).toBe(parent);
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.parent = function () { };
	    /**
	     * Resolves an array of providers and creates a child injector from those providers.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * The passed-in providers can be an array of `Type`, {\@link Provider},
	     * or a recursive array of more providers.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
	     *
	     * ```typescript
	     * class ParentProvider {}
	     * class ChildProvider {}
	     *
	     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
	     * var child = parent.resolveAndCreateChild([ChildProvider]);
	     *
	     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	     * ```
	     *
	     * This function is slower than the corresponding `createChildFromResolved`
	     * because it needs to resolve the passed-in providers first.
	     * See {\@link Injector#resolve} and {\@link Injector#createChildFromResolved}.
	     * @abstract
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };
	    /**
	     * Creates a child injector from previously resolved providers.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
	     *
	     * ```typescript
	     * class ParentProvider {}
	     * class ChildProvider {}
	     *
	     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
	     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
	     *
	     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
	     * var child = parent.createChildFromResolved(childProviders);
	     *
	     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	     * ```
	     * @abstract
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };
	    /**
	     * Resolves a provider and instantiates an object in the context of the injector.
	     *
	     * The created object does not get cached by the injector.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	     *
	     * var car = injector.resolveAndInstantiate(Car);
	     * expect(car.engine).toBe(injector.get(Engine));
	     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
	     * ```
	     * @abstract
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };
	    /**
	     * Instantiates an object using a resolved provider in the context of the injector.
	     *
	     * The created object does not get cached by the injector.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	     * var carProvider = ReflectiveInjector.resolve([Car])[0];
	     * var car = injector.instantiateResolved(carProvider);
	     * expect(car.engine).toBe(injector.get(Engine));
	     * expect(car).not.toBe(injector.instantiateResolved(carProvider));
	     * ```
	     * @abstract
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };
	    /**
	     * @abstract
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
	    return ReflectiveInjector;
	}());
	var ReflectiveInjector_ = (function () {
	    /**
	     * Private
	     * @param {?} _providers
	     * @param {?=} _parent
	     */
	    function ReflectiveInjector_(_providers, _parent) {
	        /**
	         * \@internal
	         */
	        this._constructionCounter = 0;
	        this._providers = _providers;
	        this._parent = _parent || null;
	        var len = _providers.length;
	        this.keyIds = new Array(len);
	        this.objs = new Array(len);
	        for (var i = 0; i < len; i++) {
	            this.keyIds[i] = _providers[i].key.id;
	            this.objs[i] = UNDEFINED;
	        }
	    }
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
	    };
	    Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._parent; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
	        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	        return this.createChildFromResolved(ResolvedReflectiveProviders);
	    };
	    /**
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
	        var /** @type {?} */ inj = new ReflectiveInjector_(providers);
	        inj._parent = this;
	        return inj;
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
	        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
	        return this._instantiateProvider(provider);
	    };
	    /**
	     * @param {?} index
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
	        if (index < 0 || index >= this._providers.length) {
	            throw outOfBoundsError(index);
	        }
	        return this._providers[index];
	    };
	    /**
	     * \@internal
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._new = function (provider) {
	        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
	            throw cyclicDependencyError(this, provider.key);
	        }
	        return this._instantiateProvider(provider);
	    };
	    /**
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
	        if (provider.multiProvider) {
	            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
	            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
	                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
	            }
	            return res;
	        }
	        else {
	            return this._instantiate(provider, provider.resolvedFactories[0]);
	        }
	    };
	    /**
	     * @param {?} provider
	     * @param {?} ResolvedReflectiveFactory
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {
	        var _this = this;
	        var /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;
	        var /** @type {?} */ deps;
	        try {
	            deps =
	                ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
	        }
	        catch (e) {
	            if (e.addKey) {
	                e.addKey(this, provider.key);
	            }
	            throw e;
	        }
	        var /** @type {?} */ obj;
	        try {
	            obj = factory.apply(void 0, deps);
	        }
	        catch (e) {
	            throw instantiationError(this, e, e.stack, provider.key);
	        }
	        return obj;
	    };
	    /**
	     * @param {?} dep
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
	        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
	    };
	    /**
	     * @param {?} key
	     * @param {?} visibility
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
	        if (key === INJECTOR_KEY) {
	            return this;
	        }
	        if (visibility instanceof Self) {
	            return this._getByKeySelf(key, notFoundValue);
	        }
	        else {
	            return this._getByKeyDefault(key, notFoundValue, visibility);
	        }
	    };
	    /**
	     * @param {?} keyId
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
	        for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {
	            if (this.keyIds[i] === keyId) {
	                if (this.objs[i] === UNDEFINED) {
	                    this.objs[i] = this._new(this._providers[i]);
	                }
	                return this.objs[i];
	            }
	        }
	        return UNDEFINED;
	    };
	    /**
	     * \@internal
	     * @param {?} key
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
	        if (notFoundValue !== THROW_IF_NOT_FOUND) {
	            return notFoundValue;
	        }
	        else {
	            throw noProviderError(this, key);
	        }
	    };
	    /**
	     * \@internal
	     * @param {?} key
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
	        var /** @type {?} */ obj = this._getObjByKeyId(key.id);
	        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
	    };
	    /**
	     * \@internal
	     * @param {?} key
	     * @param {?} notFoundValue
	     * @param {?} visibility
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
	        var /** @type {?} */ inj;
	        if (visibility instanceof SkipSelf) {
	            inj = this._parent;
	        }
	        else {
	            inj = this;
	        }
	        while (inj instanceof ReflectiveInjector_) {
	            var /** @type {?} */ inj_ = (inj);
	            var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);
	            if (obj !== UNDEFINED)
	                return obj;
	            inj = inj_._parent;
	        }
	        if (inj !== null) {
	            return inj.get(key.token, notFoundValue);
	        }
	        else {
	            return this._throwOrNull(key, notFoundValue);
	        }
	    };
	    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
	                .join(', ');
	            return "ReflectiveInjector(providers: [" + providers + "])";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
	    return ReflectiveInjector_;
	}());
	var INJECTOR_KEY = ReflectiveKey.get(Injector);
	/**
	 * @param {?} injector
	 * @param {?} fn
	 * @return {?}
	 */
	function _mapProviders(injector, fn) {
	    var /** @type {?} */ res = new Array(injector._providers.length);
	    for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {
	        res[i] = fn(injector.getProviderAtIndex(i));
	    }
	    return res;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * The `di` module provides dependency injection container services.
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Determine if the argument is shaped like a Promise
	 * @param {?} obj
	 * @return {?}
	 */
	function isPromise(obj) {
	    // allow any Promise/A+ compliant thenable.
	    // It's up to the caller to ensure that obj.then conforms to the spec
	    return !!obj && typeof obj.then === 'function';
	}
	/**
	 * Determine if the argument is an Observable
	 * @param {?} obj
	 * @return {?}
	 */
	function isObservable(obj) {
	    // TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved
	    return !!obj && typeof obj.subscribe === 'function';
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A function that will be executed when an application is initialized.
	 * \@experimental
	 */
	var APP_INITIALIZER = new InjectionToken('Application Initializer');
	/**
	 * A class that reflects the state of running {\@link APP_INITIALIZER}s.
	 *
	 * \@experimental
	 */
	var ApplicationInitStatus = (function () {
	    /**
	     * @param {?} appInits
	     */
	    function ApplicationInitStatus(appInits) {
	        var _this = this;
	        this._done = false;
	        var asyncInitPromises = [];
	        if (appInits) {
	            for (var i = 0; i < appInits.length; i++) {
	                var initResult = appInits[i]();
	                if (isPromise(initResult)) {
	                    asyncInitPromises.push(initResult);
	                }
	            }
	        }
	        this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
	        if (asyncInitPromises.length === 0) {
	            this._done = true;
	        }
	    }
	    Object.defineProperty(ApplicationInitStatus.prototype, "done", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._done; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._donePromise; },
	        enumerable: true,
	        configurable: true
	    });
	    return ApplicationInitStatus;
	}());
	ApplicationInitStatus.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	ApplicationInitStatus.ctorParameters = function () { return [
	    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A DI Token representing a unique string id assigned to the application by Angular and used
	 * primarily for prefixing application attributes and CSS styles when
	 * {\@link ViewEncapsulation#Emulated} is being used.
	 *
	 * If you need to avoid randomly generated value to be used as an application id, you can provide
	 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\@link Injector}
	 * using this token.
	 * \@experimental
	 */
	var APP_ID = new InjectionToken('AppId');
	/**
	 * @return {?}
	 */
	function _appIdRandomProviderFactory() {
	    return "" + _randomChar() + _randomChar() + _randomChar();
	}
	/**
	 * Providers that will generate a random APP_ID_TOKEN.
	 * \@experimental
	 */
	var APP_ID_RANDOM_PROVIDER = {
	    provide: APP_ID,
	    useFactory: _appIdRandomProviderFactory,
	    deps: [],
	};
	/**
	 * @return {?}
	 */
	function _randomChar() {
	    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	}
	/**
	 * A function that will be executed when a platform is initialized.
	 * \@experimental
	 */
	var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
	/**
	 * A token that indicates an opaque platform id.
	 * \@experimental
	 */
	var PLATFORM_ID = new InjectionToken('Platform ID');
	/**
	 * All callbacks provided via this token will be called for every component that is bootstrapped.
	 * Signature of the callback:
	 *
	 * `(componentRef: ComponentRef) => void`.
	 *
	 * \@experimental
	 */
	var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
	/**
	 * A token which indicates the root directory of the application
	 * \@experimental
	 */
	var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Console = (function () {
	    function Console() {
	    }
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Console.prototype.log = function (message) {
	        // tslint:disable-next-line:no-console
	        console.log(message);
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Console.prototype.warn = function (message) {
	        // tslint:disable-next-line:no-console
	        console.warn(message);
	    };
	    return Console;
	}());
	Console.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	Console.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Combination of NgModuleFactory and ComponentFactorys.
	 *
	 * \@experimental
	 */
	var ModuleWithComponentFactories = (function () {
	    /**
	     * @param {?} ngModuleFactory
	     * @param {?} componentFactories
	     */
	    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
	        this.ngModuleFactory = ngModuleFactory;
	        this.componentFactories = componentFactories;
	    }
	    return ModuleWithComponentFactories;
	}());
	/**
	 * @return {?}
	 */
	function _throwError() {
	    throw new Error("Runtime compiler is not loaded");
	}
	/**
	 * Low-level service for running the angular compiler during runtime
	 * to create {\@link ComponentFactory}s, which
	 * can later be used to create and render a Component instance.
	 *
	 * Each `\@NgModule` provides an own `Compiler` to its injector,
	 * that will use the directives/pipes of the ng module for compilation
	 * of components.
	 * \@stable
	 */
	var Compiler = (function () {
	    function Compiler() {
	    }
	    /**
	     * Compiles the given NgModule and all of its components. All templates of the components listed
	     * in `entryComponents` have to be inlined.
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
	    /**
	     * Compiles the given NgModule and all of its components
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
	    /**
	     * Same as {\@link compileModuleSync} but also creates ComponentFactories for all components.
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        throw _throwError();
	    };
	    /**
	     * Same as {\@link compileModuleAsync} but also creates ComponentFactories for all components.
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        throw _throwError();
	    };
	    /**
	     * Exposes the CSS-style selectors that have been used in `ngContent` directives within
	     * the template of the given component.
	     * This is used by the `upgrade` library to compile the appropriate transclude content
	     * in the AngularJS wrapper component.
	     *
	     * @deprecated since v4. Use ComponentFactory.ngContentSelectors instead.
	     * @param {?} component
	     * @return {?}
	     */
	    Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
	    /**
	     * Clears all caches.
	     * @return {?}
	     */
	    Compiler.prototype.clearCache = function () { };
	    /**
	     * Clears the cache for the given component/ngModule.
	     * @param {?} type
	     * @return {?}
	     */
	    Compiler.prototype.clearCacheFor = function (type) { };
	    return Compiler;
	}());
	Compiler.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	Compiler.ctorParameters = function () { return []; };
	/**
	 * Token to provide CompilerOptions in the platform injector.
	 *
	 * \@experimental
	 */
	var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
	/**
	 * A factory for creating a Compiler
	 *
	 * \@experimental
	 * @abstract
	 */
	var CompilerFactory = (function () {
	    function CompilerFactory() {
	    }
	    /**
	     * @abstract
	     * @param {?=} options
	     * @return {?}
	     */
	    CompilerFactory.prototype.createCompiler = function (options) { };
	    return CompilerFactory;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an instance of a Component created via a {\@link ComponentFactory}.
	 *
	 * `ComponentRef` provides access to the Component Instance as well other objects related to this
	 * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
	 * method.
	 * \@stable
	 * @abstract
	 */
	var ComponentRef = (function () {
	    function ComponentRef() {
	    }
	    /**
	     * Location of the Host Element of this Component Instance.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.location = function () { };
	    /**
	     * The injector on which the component instance exists.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.injector = function () { };
	    /**
	     * The instance of the Component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.instance = function () { };
	    /**
	     * The {\@link ViewRef} of the Host View of this Component instance.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.hostView = function () { };
	    /**
	     * The {\@link ChangeDetectorRef} of the Component instance.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.changeDetectorRef = function () { };
	    /**
	     * The component type.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.componentType = function () { };
	    /**
	     * Destroys the component instance and all of the data structures associated with it.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.destroy = function () { };
	    /**
	     * Allows to register a callback that will be called when the component is destroyed.
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    ComponentRef.prototype.onDestroy = function (callback) { };
	    return ComponentRef;
	}());
	/**
	 * \@stable
	 * @abstract
	 */
	var ComponentFactory = (function () {
	    function ComponentFactory() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.selector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.componentType = function () { };
	    /**
	     * selector for all <ng-content> elements in the component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.ngContentSelectors = function () { };
	    /**
	     * the inputs of the component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.inputs = function () { };
	    /**
	     * the outputs of the component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.outputs = function () { };
	    /**
	     * Creates a new component.
	     * @abstract
	     * @param {?} injector
	     * @param {?=} projectableNodes
	     * @param {?=} rootSelectorOrNode
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) { };
	    return ComponentFactory;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} component
	 * @return {?}
	 */
	function noComponentFactoryError(component) {
	    var /** @type {?} */ error = Error("No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
	    ((error))[ERROR_COMPONENT] = component;
	    return error;
	}
	var ERROR_COMPONENT = 'ngComponent';
	/**
	 * @param {?} error
	 * @return {?}
	 */
	var _NullComponentFactoryResolver = (function () {
	    function _NullComponentFactoryResolver() {
	    }
	    /**
	     * @template T
	     * @param {?} component
	     * @return {?}
	     */
	    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        throw noComponentFactoryError(component);
	    };
	    return _NullComponentFactoryResolver;
	}());
	/**
	 * \@stable
	 * @abstract
	 */
	var ComponentFactoryResolver = (function () {
	    function ComponentFactoryResolver() {
	    }
	    /**
	     * @abstract
	     * @template T
	     * @param {?} component
	     * @return {?}
	     */
	    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
	    return ComponentFactoryResolver;
	}());
	ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
	var CodegenComponentFactoryResolver = (function () {
	    /**
	     * @param {?} factories
	     * @param {?} _parent
	     * @param {?} _ngModule
	     */
	    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
	        this._parent = _parent;
	        this._ngModule = _ngModule;
	        this._factories = new Map();
	        for (var i = 0; i < factories.length; i++) {
	            var factory = factories[i];
	            this._factories.set(factory.componentType, factory);
	        }
	    }
	    /**
	     * @template T
	     * @param {?} component
	     * @return {?}
	     */
	    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        var /** @type {?} */ factory = this._factories.get(component) || this._parent.resolveComponentFactory(component);
	        return new ComponentFactoryBoundToModule(factory, this._ngModule);
	    };
	    return CodegenComponentFactoryResolver;
	}());
	var ComponentFactoryBoundToModule = (function (_super) {
	    __extends(ComponentFactoryBoundToModule, _super);
	    /**
	     * @param {?} factory
	     * @param {?} ngModule
	     */
	    function ComponentFactoryBoundToModule(factory, ngModule) {
	        var _this = _super.call(this) || this;
	        _this.factory = factory;
	        _this.ngModule = ngModule;
	        return _this;
	    }
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "selector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.selector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "componentType", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.componentType; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "ngContentSelectors", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.ngContentSelectors; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "inputs", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.inputs; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "outputs", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.outputs; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} injector
	     * @param {?=} projectableNodes
	     * @param {?=} rootSelectorOrNode
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
	    };
	    return ComponentFactoryBoundToModule;
	}(ComponentFactory));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
	 *
	 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	 * NgModule Instance.
	 *
	 * \@stable
	 * @abstract
	 */
	var NgModuleRef = (function () {
	    function NgModuleRef() {
	    }
	    /**
	     * The injector that contains all of the providers of the NgModule.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.injector = function () { };
	    /**
	     * The ComponentFactoryResolver to get hold of the ComponentFactories
	     * declared in the `entryComponents` property of the module.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.componentFactoryResolver = function () { };
	    /**
	     * The NgModule instance.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.instance = function () { };
	    /**
	     * Destroys the module instance and all of the data structures associated with it.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.destroy = function () { };
	    /**
	     * Allows to register a callback that will be called when the module is destroyed.
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    NgModuleRef.prototype.onDestroy = function (callback) { };
	    return NgModuleRef;
	}());
	/**
	 * \@experimental
	 */
	var NgModuleFactory = (function () {
	    /**
	     * @param {?} _injectorClass
	     * @param {?} _moduleType
	     */
	    function NgModuleFactory(_injectorClass, _moduleType) {
	        this._injectorClass = _injectorClass;
	        this._moduleType = _moduleType;
	    }
	    Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._moduleType; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} parentInjector
	     * @return {?}
	     */
	    NgModuleFactory.prototype.create = function (parentInjector) {
	        var /** @type {?} */ instance = new this._injectorClass(parentInjector || Injector.NULL);
	        instance.create();
	        return instance;
	    };
	    return NgModuleFactory;
	}());
	var _UNDEFINED = new Object();
	/**
	 * @abstract
	 */
	var NgModuleInjector = (function () {
	    /**
	     * @param {?} parent
	     * @param {?} factories
	     * @param {?} bootstrapFactories
	     */
	    function NgModuleInjector(parent, factories, bootstrapFactories) {
	        var _this = this;
	        this.parent = parent;
	        this._destroyListeners = [];
	        this._destroyed = false;
	        this.bootstrapFactories =
	            bootstrapFactories.map(function (f) { return new ComponentFactoryBoundToModule(f, _this); });
	        this._cmpFactoryResolver = new CodegenComponentFactoryResolver(factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL), this);
	    }
	    /**
	     * @return {?}
	     */
	    NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    NgModuleInjector.prototype.createInternal = function () { };
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    NgModuleInjector.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        if (token === Injector || token === NgModuleRef) {
	            return this;
	        }
	        if (token === ComponentFactoryResolver) {
	            return this._cmpFactoryResolver;
	        }
	        var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);
	        return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
	    };
	    /**
	     * @abstract
	     * @param {?} token
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };
	    Object.defineProperty(NgModuleInjector.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._cmpFactoryResolver; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgModuleInjector.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
	        }
	        this._destroyed = true;
	        this.destroyInternal();
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	    };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    NgModuleInjector.prototype.destroyInternal = function () { };
	    return NgModuleInjector;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var trace;
	var events;
	/**
	 * @return {?}
	 */
	function detectWTF() {
	    var /** @type {?} */ wtf = ((_global) /** TODO #9100 */)['wtf'];
	    if (wtf) {
	        trace = wtf['trace'];
	        if (trace) {
	            events = trace['events'];
	            return true;
	        }
	    }
	    return false;
	}
	/**
	 * @param {?} signature
	 * @param {?=} flags
	 * @return {?}
	 */
	function createScope$1(signature, flags) {
	    if (flags === void 0) { flags = null; }
	    return events.createScope(signature, flags);
	}
	/**
	 * @template T
	 * @param {?} scope
	 * @param {?=} returnValue
	 * @return {?}
	 */
	function leave(scope, returnValue) {
	    trace.leaveScope(scope, returnValue);
	    return returnValue;
	}
	/**
	 * @param {?} rangeType
	 * @param {?} action
	 * @return {?}
	 */
	function startTimeRange(rangeType, action) {
	    return trace.beginTimeRange(rangeType, action);
	}
	/**
	 * @param {?} range
	 * @return {?}
	 */
	function endTimeRange(range) {
	    trace.endTimeRange(range);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * True if WTF is enabled.
	 */
	var wtfEnabled = detectWTF();
	/**
	 * @param {?=} arg0
	 * @param {?=} arg1
	 * @return {?}
	 */
	function noopScope(arg0, arg1) {
	    return null;
	}
	/**
	 * Create trace scope.
	 *
	 * Scopes must be strictly nested and are analogous to stack frames, but
	 * do not have to follow the stack frames. Instead it is recommended that they follow logical
	 * nesting. You may want to use
	 * [Event
	 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	 * as they are defined in WTF.
	 *
	 * Used to mark scope entry. The return value is used to leave the scope.
	 *
	 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	 *
	 *     someMethod() {
	 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	 *        // DO SOME WORK HERE
	 *        return wtfLeave(s, 123); // Return value 123
	 *     }
	 *
	 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	 * negatively impact the performance of your application. For this reason we recommend that
	 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	 * exception, will produce incorrect trace, but presence of exception signifies logic error which
	 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	 * an exception is expected during normal execution while profiling.
	 *
	 * \@experimental
	 */
	var wtfCreateScope = wtfEnabled ? createScope$1 : function (signature, flags) { return noopScope; };
	/**
	 * Used to mark end of Scope.
	 *
	 * - `scope` to end.
	 * - `returnValue` (optional) to be passed to the WTF.
	 *
	 * Returns the `returnValue for easy chaining.
	 * \@experimental
	 */
	var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
	/**
	 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	 * enabled.
	 *
	 *     someMethod() {
	 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	 *        var future = new Future.delay(5).then((_) {
	 *          wtfEndTimeRange(s);
	 *        });
	 *     }
	 * \@experimental
	 */
	var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
	/**
	 * Ends a async time range operation.
	 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	 * enabled.
	 * \@experimental
	 */
	var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Use by directives and components to emit custom Events.
	 *
	 * ### Examples
	 *
	 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	 * title gets clicked:
	 *
	 * ```
	 * \@Component({
	 *   selector: 'zippy',
	 *   template: `
	 *   <div class="zippy">
	 *     <div (click)="toggle()">Toggle</div>
	 *     <div [hidden]="!visible">
	 *       <ng-content></ng-content>
	 *     </div>
	 *  </div>`})
	 * export class Zippy {
	 *   visible: boolean = true;
	 *   \@Output() open: EventEmitter<any> = new EventEmitter();
	 *   \@Output() close: EventEmitter<any> = new EventEmitter();
	 *
	 *   toggle() {
	 *     this.visible = !this.visible;
	 *     if (this.visible) {
	 *       this.open.emit(null);
	 *     } else {
	 *       this.close.emit(null);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * The events payload can be accessed by the parameter `$event` on the components output event
	 * handler:
	 *
	 * ```
	 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	 * ```
	 *
	 * Uses Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 * \@stable
	 */
	var EventEmitter = (function (_super) {
	    __extends(EventEmitter, _super);
	    /**
	     * Creates an instance of [EventEmitter], which depending on [isAsync],
	     * delivers events synchronously or asynchronously.
	     * @param {?=} isAsync
	     */
	    function EventEmitter(isAsync) {
	        if (isAsync === void 0) { isAsync = false; }
	        var _this = _super.call(this) || this;
	        _this.__isAsync = isAsync;
	        return _this;
	    }
	    /**
	     * @param {?=} value
	     * @return {?}
	     */
	    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	    /**
	     * @param {?=} generatorOrNext
	     * @param {?=} error
	     * @param {?=} complete
	     * @return {?}
	     */
	    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	        var /** @type {?} */ schedulerFn;
	        var /** @type {?} */ errorFn = function (err) { return null; };
	        var /** @type {?} */ completeFn = function () { return null; };
	        if (generatorOrNext && typeof generatorOrNext === 'object') {
	            schedulerFn = this.__isAsync ? function (value) {
	                setTimeout(function () { return generatorOrNext.next(value); });
	            } : function (value) { generatorOrNext.next(value); };
	            if (generatorOrNext.error) {
	                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                    function (err) { generatorOrNext.error(err); };
	            }
	            if (generatorOrNext.complete) {
	                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                    function () { generatorOrNext.complete(); };
	            }
	        }
	        else {
	            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                function (value) { generatorOrNext(value); };
	            if (error) {
	                errorFn =
	                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	            }
	            if (complete) {
	                completeFn =
	                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	            }
	        }
	        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	    };
	    return EventEmitter;
	}(rxjs_Subject.Subject));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An injectable service for executing work inside or outside of the Angular zone.
	 *
	 * The most common use of this service is to optimize performance when starting a work consisting of
	 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	 * Angular. Such tasks can be kicked off via {\@link runOutsideAngular} and if needed, these tasks
	 * can reenter the Angular zone via {\@link run}.
	 *
	 * <!-- TODO: add/fix links to:
	 *   - docs explaining zones and the use of zones in Angular and change-detection
	 *   - link to runOutsideAngular/run (throughout this file!)
	 *   -->
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component, NgZone} from '\@angular/core';
	 * import {NgIf} from '\@angular/common';
	 *
	 * \@Component({
	 *   selector: 'ng-zone-demo'.
	 *   template: `
	 *     <h2>Demo: NgZone</h2>
	 *
	 *     <p>Progress: {{progress}}%</p>
	 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	 *
	 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	 *   `,
	 * })
	 * export class NgZoneDemo {
	 *   progress: number = 0;
	 *   label: string;
	 *
	 *   constructor(private _ngZone: NgZone) {}
	 *
	 *   // Loop inside the Angular zone
	 *   // so the UI DOES refresh after each setTimeout cycle
	 *   processWithinAngularZone() {
	 *     this.label = 'inside';
	 *     this.progress = 0;
	 *     this._increaseProgress(() => console.log('Inside Done!'));
	 *   }
	 *
	 *   // Loop outside of the Angular zone
	 *   // so the UI DOES NOT refresh after each setTimeout cycle
	 *   processOutsideOfAngularZone() {
	 *     this.label = 'outside';
	 *     this.progress = 0;
	 *     this._ngZone.runOutsideAngular(() => {
	 *       this._increaseProgress(() => {
	 *       // reenter the Angular zone and display done
	 *       this._ngZone.run(() => {console.log('Outside Done!') });
	 *     }}));
	 *   }
	 *
	 *   _increaseProgress(doneCallback: () => void) {
	 *     this.progress += 1;
	 *     console.log(`Current progress: ${this.progress}%`);
	 *
	 *     if (this.progress < 100) {
	 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	 *     } else {
	 *       doneCallback();
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * \@experimental
	 */
	var NgZone = (function () {
	    /**
	     * @param {?} __0
	     */
	    function NgZone(_a) {
	        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
	        this._hasPendingMicrotasks = false;
	        this._hasPendingMacrotasks = false;
	        this._isStable = true;
	        this._nesting = 0;
	        this._onUnstable = new EventEmitter(false);
	        this._onMicrotaskEmpty = new EventEmitter(false);
	        this._onStable = new EventEmitter(false);
	        this._onErrorEvents = new EventEmitter(false);
	        if (typeof Zone == 'undefined') {
	            throw new Error('Angular requires Zone.js prolyfill.');
	        }
	        Zone.assertZonePatched();
	        this.outer = this.inner = Zone.current;
	        if (Zone['wtfZoneSpec']) {
	            this.inner = this.inner.fork(Zone['wtfZoneSpec']);
	        }
	        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
	            this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
	        }
	        this.forkInnerZoneWithAngularBehavior();
	    }
	    /**
	     * @return {?}
	     */
	    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
	    /**
	     * @return {?}
	     */
	    NgZone.assertInAngularZone = function () {
	        if (!NgZone.isInAngularZone()) {
	            throw new Error('Expected to be in Angular Zone, but it is not!');
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.assertNotInAngularZone = function () {
	        if (NgZone.isInAngularZone()) {
	            throw new Error('Expected to not be in Angular Zone, but it is!');
	        }
	    };
	    /**
	     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	     * outside of the Angular zone (typically started via {\@link runOutsideAngular}).
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * within the Angular zone.
	     *
	     * If a synchronous error happens it will be rethrown and not reported via `onError`.
	     * @param {?} fn
	     * @return {?}
	     */
	    NgZone.prototype.run = function (fn) { return this.inner.run(fn); };
	    /**
	     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
	     * rethrown.
	     * @param {?} fn
	     * @return {?}
	     */
	    NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
	    /**
	     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * outside of the Angular zone.
	     *
	     * Use {\@link run} to reenter the Angular zone and do work that updates the application model.
	     * @param {?} fn
	     * @return {?}
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
	    Object.defineProperty(NgZone.prototype, "onUnstable", {
	        /**
	         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	         * @return {?}
	         */
	        get: function () { return this._onUnstable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
	        /**
	         * Notifies when there is no more microtasks enqueue in the current VM Turn.
	         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	         * For this reason this event can fire multiple times per VM Turn.
	         * @return {?}
	         */
	        get: function () { return this._onMicrotaskEmpty; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onStable", {
	        /**
	         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	         * implies we are about to relinquish VM turn.
	         * This event gets called just once.
	         * @return {?}
	         */
	        get: function () { return this._onStable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onError", {
	        /**
	         * Notify that an error has been delivered.
	         * @return {?}
	         */
	        get: function () { return this._onErrorEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "isStable", {
	        /**
	         * Whether there are no outstanding microtasks or macrotasks.
	         * @return {?}
	         */
	        get: function () { return this._isStable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._hasPendingMicrotasks; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._hasPendingMacrotasks; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.checkStable = function () {
	        var _this = this;
	        if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
	            try {
	                this._nesting++;
	                this._onMicrotaskEmpty.emit(null);
	            }
	            finally {
	                this._nesting--;
	                if (!this._hasPendingMicrotasks) {
	                    try {
	                        this.runOutsideAngular(function () { return _this._onStable.emit(null); });
	                    }
	                    finally {
	                        this._isStable = true;
	                    }
	                }
	            }
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
	        var _this = this;
	        this.inner = this.inner.fork({
	            name: 'angular',
	            properties: /** @type {?} */ ({ 'isAngularZone': true }),
	            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	                try {
	                    _this.onEnter();
	                    return delegate.invokeTask(target, task, applyThis, applyArgs);
	                }
	                finally {
	                    _this.onLeave();
	                }
	            },
	            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	                try {
	                    _this.onEnter();
	                    return delegate.invoke(target, callback, applyThis, applyArgs, source);
	                }
	                finally {
	                    _this.onLeave();
	                }
	            },
	            onHasTask: function (delegate, current, target, hasTaskState) {
	                delegate.hasTask(target, hasTaskState);
	                if (current === target) {
	                    // We are only interested in hasTask events which originate from our zone
	                    // (A child hasTask event is not interesting to us)
	                    if (hasTaskState.change == 'microTask') {
	                        _this.setHasMicrotask(hasTaskState.microTask);
	                    }
	                    else if (hasTaskState.change == 'macroTask') {
	                        _this.setHasMacrotask(hasTaskState.macroTask);
	                    }
	                }
	            },
	            onHandleError: function (delegate, current, target, error) {
	                delegate.handleError(target, error);
	                _this.triggerError(error);
	                return false;
	            }
	        });
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.onEnter = function () {
	        this._nesting++;
	        if (this._isStable) {
	            this._isStable = false;
	            this._onUnstable.emit(null);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.onLeave = function () {
	        this._nesting--;
	        this.checkStable();
	    };
	    /**
	     * @param {?} hasMicrotasks
	     * @return {?}
	     */
	    NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
	        this._hasPendingMicrotasks = hasMicrotasks;
	        this.checkStable();
	    };
	    /**
	     * @param {?} hasMacrotasks
	     * @return {?}
	     */
	    NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
	    return NgZone;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 * \@experimental
	 */
	var Testability = (function () {
	    /**
	     * @param {?} _ngZone
	     */
	    function Testability(_ngZone) {
	        this._ngZone = _ngZone;
	        /**
	         * \@internal
	         */
	        this._pendingCount = 0;
	        /**
	         * \@internal
	         */
	        this._isZoneStable = true;
	        /**
	         * Whether any work was done since the last 'whenStable' callback. This is
	         * useful to detect if this could have potentially destabilized another
	         * component while it is stabilizing.
	         * \@internal
	         */
	        this._didWork = false;
	        /**
	         * \@internal
	         */
	        this._callbacks = [];
	        this._watchAngularEvents();
	    }
	    /**
	     * \@internal
	     * @return {?}
	     */
	    Testability.prototype._watchAngularEvents = function () {
	        var _this = this;
	        this._ngZone.onUnstable.subscribe({
	            next: function () {
	                _this._didWork = true;
	                _this._isZoneStable = false;
	            }
	        });
	        this._ngZone.runOutsideAngular(function () {
	            _this._ngZone.onStable.subscribe({
	                next: function () {
	                    NgZone.assertNotInAngularZone();
	                    scheduleMicroTask(function () {
	                        _this._isZoneStable = true;
	                        _this._runCallbacksIfReady();
	                    });
	                }
	            });
	        });
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.increasePendingRequestCount = function () {
	        this._pendingCount += 1;
	        this._didWork = true;
	        return this._pendingCount;
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.decreasePendingRequestCount = function () {
	        this._pendingCount -= 1;
	        if (this._pendingCount < 0) {
	            throw new Error('pending async requests below zero');
	        }
	        this._runCallbacksIfReady();
	        return this._pendingCount;
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.isStable = function () {
	        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
	    };
	    /**
	     * \@internal
	     * @return {?}
	     */
	    Testability.prototype._runCallbacksIfReady = function () {
	        var _this = this;
	        if (this.isStable()) {
	            // Schedules the call backs in a new frame so that it is always async.
	            scheduleMicroTask(function () {
	                while (_this._callbacks.length !== 0) {
	                    (((_this._callbacks.pop())))(_this._didWork);
	                }
	                _this._didWork = false;
	            });
	        }
	        else {
	            // Not Ready
	            this._didWork = true;
	        }
	    };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    Testability.prototype.whenStable = function (callback) {
	        this._callbacks.push(callback);
	        this._runCallbacksIfReady();
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	    /**
	     * @deprecated use findProviders
	     * @param {?} using
	     * @param {?} provider
	     * @param {?} exactMatch
	     * @return {?}
	     */
	    Testability.prototype.findBindings = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    /**
	     * @param {?} using
	     * @param {?} provider
	     * @param {?} exactMatch
	     * @return {?}
	     */
	    Testability.prototype.findProviders = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    return Testability;
	}());
	Testability.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	Testability.ctorParameters = function () { return [
	    { type: NgZone, },
	]; };
	/**
	 * A global registry of {\@link Testability} instances for specific elements.
	 * \@experimental
	 */
	var TestabilityRegistry = (function () {
	    function TestabilityRegistry() {
	        /**
	         * \@internal
	         */
	        this._applications = new Map();
	        _testabilityGetter.addToWindow(this);
	    }
	    /**
	     * @param {?} token
	     * @param {?} testability
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        this._applications.set(token, testability);
	    };
	    /**
	     * @param {?} elem
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };
	    /**
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
	    /**
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
	    /**
	     * @param {?} elem
	     * @param {?=} findInAncestors
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	        if (findInAncestors === void 0) { findInAncestors = true; }
	        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	    };
	    return TestabilityRegistry;
	}());
	TestabilityRegistry.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	TestabilityRegistry.ctorParameters = function () { return []; };
	var _NoopGetTestability = (function () {
	    function _NoopGetTestability() {
	    }
	    /**
	     * @param {?} registry
	     * @return {?}
	     */
	    _NoopGetTestability.prototype.addToWindow = function (registry) { };
	    /**
	     * @param {?} registry
	     * @param {?} elem
	     * @param {?} findInAncestors
	     * @return {?}
	     */
	    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        return null;
	    };
	    return _NoopGetTestability;
	}());
	/**
	 * Set the {\@link GetTestability} implementation used by the Angular testing framework.
	 * \@experimental
	 * @param {?} getter
	 * @return {?}
	 */
	function setTestabilityGetter(getter) {
	    _testabilityGetter = getter;
	}
	var _testabilityGetter = new _NoopGetTestability();
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _devMode = true;
	var _runModeLocked = false;
	var _platform;
	var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
	/**
	 * Disable Angular's development mode, which turns off assertions and other
	 * checks within the framework.
	 *
	 * One important assertion this disables verifies that a change detection pass
	 * does not result in additional changes to any bindings (also known as
	 * unidirectional data flow).
	 *
	 * \@stable
	 * @return {?}
	 */
	function enableProdMode() {
	    if (_runModeLocked) {
	        throw new Error('Cannot enable prod mode after platform setup.');
	    }
	    _devMode = false;
	}
	/**
	 * Returns whether Angular is in development mode. After called once,
	 * the value is locked and won't change any more.
	 *
	 * By default, this is true, unless a user calls `enableProdMode` before calling this.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @return {?}
	 */
	function isDevMode() {
	    _runModeLocked = true;
	    return _devMode;
	}
	/**
	 * A token for third-party components that can register themselves with NgProbe.
	 *
	 * \@experimental
	 */
	var NgProbeToken = (function () {
	    /**
	     * @param {?} name
	     * @param {?} token
	     */
	    function NgProbeToken(name, token) {
	        this.name = name;
	        this.token = token;
	    }
	    return NgProbeToken;
	}());
	/**
	 * Creates a platform.
	 * Platforms have to be eagerly created via this function.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @param {?} injector
	 * @return {?}
	 */
	function createPlatform(injector) {
	    if (_platform && !_platform.destroyed &&
	        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
	        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	    }
	    _platform = injector.get(PlatformRef);
	    var /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);
	    if (inits)
	        inits.forEach(function (init) { return init(); });
	    return _platform;
	}
	/**
	 * Creates a factory for a platform
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @param {?} parentPlatformFactory
	 * @param {?} name
	 * @param {?=} providers
	 * @return {?}
	 */
	function createPlatformFactory(parentPlatformFactory, name, providers) {
	    if (providers === void 0) { providers = []; }
	    var /** @type {?} */ marker = new InjectionToken("Platform: " + name);
	    return function (extraProviders) {
	        if (extraProviders === void 0) { extraProviders = []; }
	        var /** @type {?} */ platform = getPlatform();
	        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
	            if (parentPlatformFactory) {
	                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	            }
	            else {
	                createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
	            }
	        }
	        return assertPlatform(marker);
	    };
	}
	/**
	 * Checks that there currently is a platform which contains the given token as a provider.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @param {?} requiredToken
	 * @return {?}
	 */
	function assertPlatform(requiredToken) {
	    var /** @type {?} */ platform = getPlatform();
	    if (!platform) {
	        throw new Error('No platform exists!');
	    }
	    if (!platform.injector.get(requiredToken, null)) {
	        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	    }
	    return platform;
	}
	/**
	 * Destroy the existing platform.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @return {?}
	 */
	function destroyPlatform() {
	    if (_platform && !_platform.destroyed) {
	        _platform.destroy();
	    }
	}
	/**
	 * Returns the current platform.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @return {?}
	 */
	function getPlatform() {
	    return _platform && !_platform.destroyed ? _platform : null;
	}
	/**
	 * The Angular platform is the entry point for Angular on a web page. Each page
	 * has exactly one platform, and services (such as reflection) which are common
	 * to every Angular application running on the page are bound in its scope.
	 *
	 * A page's platform is initialized implicitly when {\@link bootstrap}() is called, or
	 * explicitly by calling {\@link createPlatform}().
	 *
	 * \@stable
	 * @abstract
	 */
	var PlatformRef = (function () {
	    function PlatformRef() {
	    }
	    /**
	     * Creates an instance of an `\@NgModule` for the given platform
	     * for offline compilation.
	     *
	     * ## Simple Example
	     *
	     * ```typescript
	     * my_module.ts:
	     *
	     * \@NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * main.ts:
	     * import {MyModuleNgFactory} from './my_module.ngfactory';
	     * import {platformBrowser} from '\@angular/platform-browser';
	     *
	     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	     * ```
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @abstract
	     * @template M
	     * @param {?} moduleFactory
	     * @return {?}
	     */
	    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };
	    /**
	     * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
	     *
	     * ## Simple Example
	     *
	     * ```typescript
	     * \@NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	     * ```
	     * \@stable
	     * @abstract
	     * @template M
	     * @param {?} moduleType
	     * @param {?=} compilerOptions
	     * @return {?}
	     */
	    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };
	    /**
	     * Register a listener to be called when the platform is disposed.
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    PlatformRef.prototype.onDestroy = function (callback) { };
	    /**
	     * Retrieve the platform {\@link Injector}, which is the parent injector for
	     * every Angular application on the page and provides singleton providers.
	     * @abstract
	     * @return {?}
	     */
	    PlatformRef.prototype.injector = function () { };
	    /**
	     * Destroy the Angular platform and all Angular applications on the page.
	     * @abstract
	     * @return {?}
	     */
	    PlatformRef.prototype.destroy = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformRef.prototype.destroyed = function () { };
	    return PlatformRef;
	}());
	/**
	 * @param {?} errorHandler
	 * @param {?} callback
	 * @return {?}
	 */
	function _callAndReportToErrorHandler(errorHandler, callback) {
	    try {
	        var /** @type {?} */ result = callback();
	        if (isPromise(result)) {
	            return result.catch(function (e) {
	                errorHandler.handleError(e);
	                // rethrow as the exception handler might not do it
	                throw e;
	            });
	        }
	        return result;
	    }
	    catch (e) {
	        errorHandler.handleError(e);
	        // rethrow as the exception handler might not do it
	        throw e;
	    }
	}
	/**
	 * workaround https://github.com/angular/tsickle/issues/350
	 * @suppress {checkTypes}
	 */
	var PlatformRef_ = (function (_super) {
	    __extends(PlatformRef_, _super);
	    /**
	     * @param {?} _injector
	     */
	    function PlatformRef_(_injector) {
	        var _this = _super.call(this) || this;
	        _this._injector = _injector;
	        _this._modules = [];
	        _this._destroyListeners = [];
	        _this._destroyed = false;
	        return _this;
	    }
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	    Object.defineProperty(PlatformRef_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PlatformRef_.prototype, "destroyed", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._destroyed; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    PlatformRef_.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error('The platform has already been destroyed!');
	        }
	        this._modules.slice().forEach(function (module) { return module.destroy(); });
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	        this._destroyed = true;
	    };
	    /**
	     * @template M
	     * @param {?} moduleFactory
	     * @return {?}
	     */
	    PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
	        return this._bootstrapModuleFactoryWithZone(moduleFactory);
	    };
	    /**
	     * @template M
	     * @param {?} moduleFactory
	     * @param {?=} ngZone
	     * @return {?}
	     */
	    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
	        var _this = this;
	        // Note: We need to create the NgZone _before_ we instantiate the module,
	        // as instantiating the module creates some providers eagerly.
	        // So we create a mini parent injector that just contains the new NgZone and
	        // pass that as parent to the NgModuleFactory.
	        if (!ngZone)
	            ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
	        // Attention: Don't use ApplicationRef.run here,
	        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	        return ngZone.run(function () {
	            var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
	            var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));
	            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	            if (!exceptionHandler) {
	                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	            }
	            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */
	            ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
	            return _callAndReportToErrorHandler(exceptionHandler, function () {
	                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                return initStatus.donePromise.then(function () {
	                    _this._moduleDoBootstrap(moduleRef);
	                    return moduleRef;
	                });
	            });
	        });
	    };
	    /**
	     * @template M
	     * @param {?} moduleType
	     * @param {?=} compilerOptions
	     * @return {?}
	     */
	    PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        return this._bootstrapModuleWithZone(moduleType, compilerOptions);
	    };
	    /**
	     * @template M
	     * @param {?} moduleType
	     * @param {?=} compilerOptions
	     * @param {?=} ngZone
	     * @return {?}
	     */
	    PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone) {
	        var _this = this;
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
	        var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
	        return compiler.compileModuleAsync(moduleType)
	            .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
	    };
	    /**
	     * @param {?} moduleRef
	     * @return {?}
	     */
	    PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
	        var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);
	        if (moduleRef.bootstrapFactories.length > 0) {
	            moduleRef.bootstrapFactories.forEach(function (f) { return appRef.bootstrap(f); });
	        }
	        else if (moduleRef.instance.ngDoBootstrap) {
	            moduleRef.instance.ngDoBootstrap(appRef);
	        }
	        else {
	            throw new Error("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " +
	                "Please define one of these.");
	        }
	        this._modules.push(moduleRef);
	    };
	    return PlatformRef_;
	}(PlatformRef));
	PlatformRef_.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	PlatformRef_.ctorParameters = function () { return [
	    { type: Injector, },
	]; };
	/**
	 * A reference to an Angular application running on a page.
	 *
	 * For more about Angular applications, see the documentation for {\@link bootstrap}.
	 *
	 * \@stable
	 * @abstract
	 */
	var ApplicationRef = (function () {
	    function ApplicationRef() {
	    }
	    /**
	     * Bootstrap a new component at the root level of the application.
	     *
	     * ### Bootstrap process
	     *
	     * When bootstrapping a new root component into an application, Angular mounts the
	     * specified application component onto DOM elements identified by the [componentType]'s
	     * selector and kicks off automatic change detection to finish initializing the component.
	     *
	     * ### Example
	     * {\@example core/ts/platform/platform.ts region='longform'}
	     * @abstract
	     * @template C
	     * @param {?} componentFactory
	     * @return {?}
	     */
	    ApplicationRef.prototype.bootstrap = function (componentFactory) { };
	    /**
	     * Invoke this method to explicitly process change detection and its side-effects.
	     *
	     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
	     * further changes are detected. If additional changes are picked up during this second cycle,
	     * bindings in the app have side-effects that cannot be resolved in a single change detection
	     * pass.
	     * In this case, Angular throws an error, since an Angular application can only have one change
	     * detection pass during which all change detection must complete.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.tick = function () { };
	    /**
	     * Get a list of component types registered to this application.
	     * This list is populated even before the component is created.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.componentTypes = function () { };
	    /**
	     * Get a list of components registered to this application.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.components = function () { };
	    /**
	     * Attaches a view so that it will be dirty checked.
	     * The view will be automatically detached when it is destroyed.
	     * This will throw if the view is already attached to a ViewContainer.
	     * @abstract
	     * @param {?} view
	     * @return {?}
	     */
	    ApplicationRef.prototype.attachView = function (view) { };
	    /**
	     * Detaches a view from dirty checking again.
	     * @abstract
	     * @param {?} view
	     * @return {?}
	     */
	    ApplicationRef.prototype.detachView = function (view) { };
	    /**
	     * Returns the number of attached views.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.viewCount = function () { };
	    /**
	     * Returns an Observable that indicates when the application is stable or unstable.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.isStable = function () { };
	    return ApplicationRef;
	}());
	/**
	 * workaround https://github.com/angular/tsickle/issues/350
	 * @suppress {checkTypes}
	 */
	var ApplicationRef_ = (function (_super) {
	    __extends(ApplicationRef_, _super);
	    /**
	     * @param {?} _zone
	     * @param {?} _console
	     * @param {?} _injector
	     * @param {?} _exceptionHandler
	     * @param {?} _componentFactoryResolver
	     * @param {?} _initStatus
	     */
	    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
	        var _this = _super.call(this) || this;
	        _this._zone = _zone;
	        _this._console = _console;
	        _this._injector = _injector;
	        _this._exceptionHandler = _exceptionHandler;
	        _this._componentFactoryResolver = _componentFactoryResolver;
	        _this._initStatus = _initStatus;
	        _this._bootstrapListeners = [];
	        _this._rootComponents = [];
	        _this._rootComponentTypes = [];
	        _this._views = [];
	        _this._runningTick = false;
	        _this._enforceNoNewChanges = false;
	        _this._stable = true;
	        _this._enforceNoNewChanges = isDevMode();
	        _this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
	        var isCurrentlyStable = new rxjs_Observable.Observable(function (observer) {
	            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&
	                !_this._zone.hasPendingMicrotasks;
	            _this._zone.runOutsideAngular(function () {
	                observer.next(_this._stable);
	                observer.complete();
	            });
	        });
	        var isStable = new rxjs_Observable.Observable(function (observer) {
	            var stableSub = _this._zone.onStable.subscribe(function () {
	                NgZone.assertNotInAngularZone();
	                // Check whether there are no pending macro/micro tasks in the next tick
	                // to allow for NgZone to update the state.
	                scheduleMicroTask(function () {
	                    if (!_this._stable && !_this._zone.hasPendingMacrotasks &&
	                        !_this._zone.hasPendingMicrotasks) {
	                        _this._stable = true;
	                        observer.next(true);
	                    }
	                });
	            });
	            var unstableSub = _this._zone.onUnstable.subscribe(function () {
	                NgZone.assertInAngularZone();
	                if (_this._stable) {
	                    _this._stable = false;
	                    _this._zone.runOutsideAngular(function () { observer.next(false); });
	                }
	            });
	            return function () {
	                stableSub.unsubscribe();
	                unstableSub.unsubscribe();
	            };
	        });
	        _this._isStable = rxjs_observable_merge.merge(isCurrentlyStable, rxjs_operator_share.share.call(isStable));
	        return _this;
	    }
	    /**
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype.attachView = function (viewRef) {
	        var /** @type {?} */ view = ((viewRef));
	        this._views.push(view);
	        view.attachToAppRef(this);
	    };
	    /**
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype.detachView = function (viewRef) {
	        var /** @type {?} */ view = ((viewRef));
	        remove(this._views, view);
	        view.detachFromAppRef();
	    };
	    /**
	     * @template C
	     * @param {?} componentOrFactory
	     * @return {?}
	     */
	    ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
	        var _this = this;
	        if (!this._initStatus.done) {
	            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	        }
	        var /** @type {?} */ componentFactory;
	        if (componentOrFactory instanceof ComponentFactory) {
	            componentFactory = componentOrFactory;
	        }
	        else {
	            componentFactory = ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));
	        }
	        this._rootComponentTypes.push(componentFactory.componentType);
	        // Create a factory associated with the current module if it's not bound to some other
	        var /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?
	            null :
	            this._injector.get(NgModuleRef);
	        var /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], componentFactory.selector, ngModule);
	        compRef.onDestroy(function () { _this._unloadComponent(compRef); });
	        var /** @type {?} */ testability = compRef.injector.get(Testability, null);
	        if (testability) {
	            compRef.injector.get(TestabilityRegistry)
	                .registerApplication(compRef.location.nativeElement, testability);
	        }
	        this._loadComponent(compRef);
	        if (isDevMode()) {
	            this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
	        }
	        return compRef;
	    };
	    /**
	     * @param {?} componentRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype._loadComponent = function (componentRef) {
	        this.attachView(componentRef.hostView);
	        this.tick();
	        this._rootComponents.push(componentRef);
	        // Get the listeners lazily to prevent DI cycles.
	        var /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
	        listeners.forEach(function (listener) { return listener(componentRef); });
	    };
	    /**
	     * @param {?} componentRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype._unloadComponent = function (componentRef) {
	        this.detachView(componentRef.hostView);
	        remove(this._rootComponents, componentRef);
	    };
	    /**
	     * @return {?}
	     */
	    ApplicationRef_.prototype.tick = function () {
	        if (this._runningTick) {
	            throw new Error('ApplicationRef.tick is called recursively');
	        }
	        var /** @type {?} */ scope = ApplicationRef_._tickScope();
	        try {
	            this._runningTick = true;
	            this._views.forEach(function (view) { return view.detectChanges(); });
	            if (this._enforceNoNewChanges) {
	                this._views.forEach(function (view) { return view.checkNoChanges(); });
	            }
	        }
	        finally {
	            this._runningTick = false;
	            wtfLeave(scope);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    ApplicationRef_.prototype.ngOnDestroy = function () {
	        // TODO(alxhub): Dispose of the NgZone.
	        this._views.slice().forEach(function (view) { return view.destroy(); });
	    };
	    Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._views.length; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._rootComponentTypes; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "components", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._rootComponents; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "isStable", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._isStable; },
	        enumerable: true,
	        configurable: true
	    });
	    return ApplicationRef_;
	}(ApplicationRef));
	/**
	 * \@internal
	 */
	ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
	ApplicationRef_.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	ApplicationRef_.ctorParameters = function () { return [
	    { type: NgZone, },
	    { type: Console, },
	    { type: Injector, },
	    { type: ErrorHandler, },
	    { type: ComponentFactoryResolver, },
	    { type: ApplicationInitStatus, },
	]; };
	/**
	 * @template T
	 * @param {?} list
	 * @param {?} el
	 * @return {?}
	 */
	function remove(list, el) {
	    var /** @type {?} */ index = list.indexOf(el);
	    if (index > -1) {
	        list.splice(index, 1);
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Public API for Zone
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @deprecated Use `RendererType2` (and `Renderer2`) instead.
	 */
	var RenderComponentType = (function () {
	    /**
	     * @param {?} id
	     * @param {?} templateUrl
	     * @param {?} slotCount
	     * @param {?} encapsulation
	     * @param {?} styles
	     * @param {?} animations
	     */
	    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
	        this.id = id;
	        this.templateUrl = templateUrl;
	        this.slotCount = slotCount;
	        this.encapsulation = encapsulation;
	        this.styles = styles;
	        this.animations = animations;
	    }
	    return RenderComponentType;
	}());
	/**
	 * @deprecated Debug info is handeled internally in the view engine now.
	 * @abstract
	 */
	var RenderDebugInfo = (function () {
	    function RenderDebugInfo() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.injector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.component = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.providerTokens = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.references = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.context = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.source = function () { };
	    return RenderDebugInfo;
	}());
	/**
	 * @deprecated Use the `Renderer2` instead.
	 * @abstract
	 */
	var Renderer = (function () {
	    function Renderer() {
	    }
	    /**
	     * @abstract
	     * @param {?} selectorOrNode
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?} name
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} hostElement
	     * @return {?}
	     */
	    Renderer.prototype.createViewRoot = function (hostElement) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?} value
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?} nodes
	     * @return {?}
	     */
	    Renderer.prototype.projectNodes = function (parentElement, nodes) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };
	    /**
	     * @abstract
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    Renderer.prototype.detachView = function (viewRootNodes) { };
	    /**
	     * @abstract
	     * @param {?} hostElement
	     * @param {?} viewAllNodes
	     * @return {?}
	     */
	    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    Renderer.prototype.listen = function (renderElement, name, callback) { };
	    /**
	     * @abstract
	     * @param {?} target
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    Renderer.prototype.listenGlobal = function (target, name, callback) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} attributeName
	     * @param {?} attributeValue
	     * @return {?}
	     */
	    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
	    /**
	     * Used only in debug mode to serialize property changes to dom nodes as attributes.
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} className
	     * @param {?} isAdd
	     * @return {?}
	     */
	    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} methodName
	     * @param {?=} args
	     * @return {?}
	     */
	    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
	    /**
	     * @abstract
	     * @param {?} renderNode
	     * @param {?} text
	     * @return {?}
	     */
	    Renderer.prototype.setText = function (renderNode, text) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} startingStyles
	     * @param {?} keyframes
	     * @param {?} duration
	     * @param {?} delay
	     * @param {?} easing
	     * @param {?=} previousPlayers
	     * @return {?}
	     */
	    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
	    return Renderer;
	}());
	var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
	/**
	 * Injectable service that provides a low-level interface for modifying the UI.
	 *
	 * Use this service to bypass Angular's templating and make custom UI changes that can't be
	 * expressed declaratively. For example if you need to set a property or an attribute whose name is
	 * not statically known, use {\@link #setElementProperty} or {\@link #setElementAttribute}
	 * respectively.
	 *
	 * If you are implementing a custom renderer, you must implement this interface.
	 *
	 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	 *
	 * @deprecated Use `RendererFactory2` instead.
	 * @abstract
	 */
	var RootRenderer = (function () {
	    function RootRenderer() {
	    }
	    /**
	     * @abstract
	     * @param {?} componentType
	     * @return {?}
	     */
	    RootRenderer.prototype.renderComponent = function (componentType) { };
	    return RootRenderer;
	}());
	/**
	 * \@experimental
	 * @abstract
	 */
	var RendererFactory2 = (function () {
	    function RendererFactory2() {
	    }
	    /**
	     * @abstract
	     * @param {?} hostElement
	     * @param {?} type
	     * @return {?}
	     */
	    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };
	    return RendererFactory2;
	}());
	var RendererStyleFlags2 = {};
	RendererStyleFlags2.Important = 1;
	RendererStyleFlags2.DashCase = 2;
	RendererStyleFlags2[RendererStyleFlags2.Important] = "Important";
	RendererStyleFlags2[RendererStyleFlags2.DashCase] = "DashCase";
	/**
	 * \@experimental
	 * @abstract
	 */
	var Renderer2 = (function () {
	    function Renderer2() {
	    }
	    /**
	     * This field can be used to store arbitrary data on this renderer instance.
	     * This is useful for renderers that delegate to other renderers.
	     * @abstract
	     * @return {?}
	     */
	    Renderer2.prototype.data = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    Renderer2.prototype.destroy = function () { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    Renderer2.prototype.createElement = function (name, namespace) { };
	    /**
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.createComment = function (value) { };
	    /**
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.createText = function (value) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    Renderer2.prototype.appendChild = function (parent, newChild) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    Renderer2.prototype.removeChild = function (parent, oldChild) { };
	    /**
	     * @abstract
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    Renderer2.prototype.selectRootElement = function (selectorOrNode) { };
	    /**
	     * Attention: On WebWorkers, this will always return a value,
	     * as we are asking for a result synchronously. I.e.
	     * the caller can't rely on checking whether this is null or not.
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    Renderer2.prototype.parentNode = function (node) { };
	    /**
	     * Attention: On WebWorkers, this will always return a value,
	     * as we are asking for a result synchronously. I.e.
	     * the caller can't rely on checking whether this is null or not.
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    Renderer2.prototype.nextSibling = function (node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} namespace
	     * @return {?}
	     */
	    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    Renderer2.prototype.addClass = function (el, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    Renderer2.prototype.removeClass = function (el, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} style
	     * @param {?} value
	     * @param {?=} flags
	     * @return {?}
	     */
	    Renderer2.prototype.setStyle = function (el, style, value, flags) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} style
	     * @param {?=} flags
	     * @return {?}
	     */
	    Renderer2.prototype.removeStyle = function (el, style, flags) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.setProperty = function (el, name, value) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.setValue = function (node, value) { };
	    /**
	     * @abstract
	     * @param {?} target
	     * @param {?} eventName
	     * @param {?} callback
	     * @return {?}
	     */
	    Renderer2.prototype.listen = function (target, eventName, callback) { };
	    return Renderer2;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Public API for render
	var ElementRef = (function () {
	    /**
	     * @param {?} nativeElement
	     */
	    function ElementRef(nativeElement) {
	        this.nativeElement = nativeElement;
	    }
	    return ElementRef;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Used to load ng module factories.
	 * \@stable
	 * @abstract
	 */
	var NgModuleFactoryLoader = (function () {
	    function NgModuleFactoryLoader() {
	    }
	    /**
	     * @abstract
	     * @param {?} path
	     * @return {?}
	     */
	    NgModuleFactoryLoader.prototype.load = function (path) { };
	    return NgModuleFactoryLoader;
	}());
	var moduleFactories = new Map();
	/**
	 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
	 * \@experimental
	 * @param {?} id
	 * @param {?} factory
	 * @return {?}
	 */
	function registerModuleFactory(id, factory) {
	    var /** @type {?} */ existing = moduleFactories.get(id);
	    if (existing) {
	        throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
	    }
	    moduleFactories.set(id, factory);
	}
	/**
	 * @return {?}
	 */
	/**
	 * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
	 * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
	 * cannot be found.
	 * \@experimental
	 * @param {?} id
	 * @return {?}
	 */
	function getModuleFactory(id) {
	    var /** @type {?} */ factory = moduleFactories.get(id);
	    if (!factory)
	        throw new Error("No module with ID " + id + " loaded");
	    return factory;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An unmodifiable list of items that Angular keeps up to date when the state
	 * of the application changes.
	 *
	 * The type of object that {\@link Query} and {\@link ViewQueryMetadata} provide.
	 *
	 * Implements an iterable interface, therefore it can be used in both ES6
	 * javascript `for (var i of items)` loops as well as in Angular templates with
	 * `*ngFor="let i of myList"`.
	 *
	 * Changes can be observed by subscribing to the changes `Observable`.
	 *
	 * NOTE: In the future this class will implement an `Observable` interface.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
	 * ```typescript
	 * \@Component({...})
	 * class Container {
	 *   \@ViewChildren(Item) items:QueryList<Item>;
	 * }
	 * ```
	 * \@stable
	 */
	var QueryList = (function () {
	    function QueryList() {
	        this._dirty = true;
	        this._results = [];
	        this._emitter = new EventEmitter();
	    }
	    Object.defineProperty(QueryList.prototype, "changes", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._emitter; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "length", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._results.length; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "first", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._results[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "last", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._results[this.length - 1]; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * See
	     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	     * @template U
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	    /**
	     * See
	     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.filter = function (fn) {
	        return this._results.filter(fn);
	    };
	    /**
	     * See
	     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.find = function (fn) {
	        return this._results.find(fn);
	    };
	    /**
	     * See
	     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	     * @template U
	     * @param {?} fn
	     * @param {?} init
	     * @return {?}
	     */
	    QueryList.prototype.reduce = function (fn, init) {
	        return this._results.reduce(fn, init);
	    };
	    /**
	     * See
	     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
	    /**
	     * See
	     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.some = function (fn) {
	        return this._results.some(fn);
	    };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype.toArray = function () { return this._results.slice(); };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype.toString = function () { return this._results.toString(); };
	    /**
	     * @param {?} res
	     * @return {?}
	     */
	    QueryList.prototype.reset = function (res) {
	        this._results = flatten(res);
	        this._dirty = false;
	    };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
	    /**
	     * internal
	     * @return {?}
	     */
	    QueryList.prototype.setDirty = function () { this._dirty = true; };
	    Object.defineProperty(QueryList.prototype, "dirty", {
	        /**
	         * internal
	         * @return {?}
	         */
	        get: function () { return this._dirty; },
	        enumerable: true,
	        configurable: true
	    });
	    return QueryList;
	}());
	/**
	 * @template T
	 * @param {?} list
	 * @return {?}
	 */
	function flatten(list) {
	    return list.reduce(function (flat, item) {
	        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;
	        return ((flat)).concat(flatItem);
	    }, []);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SEPARATOR = '#';
	var FACTORY_CLASS_SUFFIX = 'NgFactory';
	/**
	 * Configuration for SystemJsNgModuleLoader.
	 * token.
	 *
	 * \@experimental
	 * @abstract
	 */
	var SystemJsNgModuleLoaderConfig = (function () {
	    function SystemJsNgModuleLoaderConfig() {
	    }
	    return SystemJsNgModuleLoaderConfig;
	}());
	var DEFAULT_CONFIG = {
	    factoryPathPrefix: '',
	    factoryPathSuffix: '.ngfactory',
	};
	/**
	 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
	 * \@experimental
	 */
	var SystemJsNgModuleLoader = (function () {
	    /**
	     * @param {?} _compiler
	     * @param {?=} config
	     */
	    function SystemJsNgModuleLoader(_compiler, config) {
	        this._compiler = _compiler;
	        this._config = config || DEFAULT_CONFIG;
	    }
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    SystemJsNgModuleLoader.prototype.load = function (path) {
	        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
	        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
	    };
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
	        var _this = this;
	        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	        if (exportName === undefined) {
	            exportName = 'default';
	        }
	        return System.import(module)
	            .then(function (module) { return module[exportName]; })
	            .then(function (type) { return checkNotEmpty(type, module, exportName); })
	            .then(function (type) { return _this._compiler.compileModuleAsync(type); });
	    };
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
	        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
	        if (exportName === undefined) {
	            exportName = 'default';
	            factoryClassSuffix = '';
	        }
	        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
	            .then(function (module) { return module[exportName + factoryClassSuffix]; })
	            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
	    };
	    return SystemJsNgModuleLoader;
	}());
	SystemJsNgModuleLoader.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	SystemJsNgModuleLoader.ctorParameters = function () { return [
	    { type: Compiler, },
	    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
	]; };
	/**
	 * @param {?} value
	 * @param {?} modulePath
	 * @param {?} exportName
	 * @return {?}
	 */
	function checkNotEmpty(value, modulePath, exportName) {
	    if (!value) {
	        throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
	    }
	    return value;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an Embedded Template that can be used to instantiate Embedded Views.
	 *
	 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element
	 * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into
	 * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for
	 * the `TemplateRef` from a Component or a Directive via {\@link Query}.
	 *
	 * To instantiate Embedded Views based on a Template, use
	 * {\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
	 * View Container.
	 * \@stable
	 * @abstract
	 */
	var TemplateRef = (function () {
	    function TemplateRef() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    TemplateRef.prototype.elementRef = function () { };
	    /**
	     * @abstract
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateRef.prototype.createEmbeddedView = function (context) { };
	    return TemplateRef;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents a container where one or more Views can be attached.
	 *
	 * The container can contain two kinds of Views. Host Views, created by instantiating a
	 * {\@link Component} via {\@link #createComponent}, and Embedded Views, created by instantiating an
	 * {\@link TemplateRef Embedded Template} via {\@link #createEmbeddedView}.
	 *
	 * The location of the View Container within the containing View is specified by the Anchor
	 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	 * have a single View Container.
	 *
	 * Root elements of Views attached to this container become siblings of the Anchor Element in
	 * the Rendered View.
	 *
	 * To access a `ViewContainerRef` of an Element, you can either place a {\@link Directive} injected
	 * with `ViewContainerRef` on the Element, or you obtain it via a {\@link ViewChild} query.
	 * \@stable
	 * @abstract
	 */
	var ViewContainerRef = (function () {
	    function ViewContainerRef() {
	    }
	    /**
	     * Anchor element that specifies the location of this container in the containing View.
	     * <!-- TODO: rename to anchorElement -->
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.element = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.injector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.parentInjector = function () { };
	    /**
	     * Destroys all Views in this container.
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.clear = function () { };
	    /**
	     * Returns the {\@link ViewRef} for the View located in this container at the specified index.
	     * @abstract
	     * @param {?} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.get = function (index) { };
	    /**
	     * Returns the number of Views currently attached to this container.
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.length = function () { };
	    /**
	     * Instantiates an Embedded View based on the {\@link TemplateRef `templateRef`} and inserts it
	     * into this container at the specified `index`.
	     *
	     * If `index` is not specified, the new View will be inserted as the last View in the container.
	     *
	     * Returns the {\@link ViewRef} for the newly created View.
	     * @abstract
	     * @template C
	     * @param {?} templateRef
	     * @param {?=} context
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };
	    /**
	     * Instantiates a single {\@link Component} and inserts its Host View into this container at the
	     * specified `index`.
	     *
	     * The component is instantiated using its {\@link ComponentFactory} which can be
	     * obtained via {\@link ComponentFactoryResolver#resolveComponentFactory}.
	     *
	     * If `index` is not specified, the new View will be inserted as the last View in the container.
	     *
	     * You can optionally specify the {\@link Injector} that will be used as parent for the Component.
	     *
	     * Returns the {\@link ComponentRef} of the Host View created for the newly instantiated Component.
	     * @abstract
	     * @template C
	     * @param {?} componentFactory
	     * @param {?=} index
	     * @param {?=} injector
	     * @param {?=} projectableNodes
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };
	    /**
	     * Inserts a View identified by a {\@link ViewRef} into the container at the specified `index`.
	     *
	     * If `index` is not specified, the new View will be inserted as the last View in the container.
	     *
	     * Returns the inserted {\@link ViewRef}.
	     * @abstract
	     * @param {?} viewRef
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.insert = function (viewRef, index) { };
	    /**
	     * Moves a View identified by a {\@link ViewRef} into the container at the specified `index`.
	     *
	     * Returns the inserted {\@link ViewRef}.
	     * @abstract
	     * @param {?} viewRef
	     * @param {?} currentIndex
	     * @return {?}
	     */
	    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };
	    /**
	     * Returns the index of the View, specified via {\@link ViewRef}, within the current container or
	     * `-1` if this container doesn't contain the View.
	     * @abstract
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ViewContainerRef.prototype.indexOf = function (viewRef) { };
	    /**
	     * Destroys a View attached to this container at the specified `index`.
	     *
	     * If `index` is not specified, the last View in the container will be removed.
	     * @abstract
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.remove = function (index) { };
	    /**
	     * Use along with {\@link #insert} to move a View within the current container.
	     *
	     * If the `index` param is omitted, the last {\@link ViewRef} is detached.
	     * @abstract
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.detach = function (index) { };
	    return ViewContainerRef;
	}());
	/**
	 * \@stable
	 * @abstract
	 */
	var ChangeDetectorRef = (function () {
	    function ChangeDetectorRef() {
	    }
	    /**
	     * Marks all {\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
	     *
	     * <!-- TODO: Add a link to a chapter on OnPush components -->
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
	     *
	     * ```typescript
	     * \@Component({
	     *   selector: 'cmp',
	     *   changeDetection: ChangeDetectionStrategy.OnPush,
	     *   template: `Number of ticks: {{numberOfTicks}}`
	     * })
	     * class Cmp {
	     *   numberOfTicks = 0;
	     *
	     *   constructor(ref: ChangeDetectorRef) {
	     *     setInterval(() => {
	     *       this.numberOfTicks ++
	     *       // the following is required, otherwise the view will not be updated
	     *       this.ref.markForCheck();
	     *     }, 1000);
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'app',
	     *   changeDetection: ChangeDetectionStrategy.OnPush,
	     *   template: `
	     *     <cmp><cmp>
	     *   `,
	     * })
	     * class App {
	     * }
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.markForCheck = function () { };
	    /**
	     * Detaches the change detector from the change detector tree.
	     *
	     * The detached change detector will not be checked until it is reattached.
	     *
	     * This can also be used in combination with {\@link ChangeDetectorRef#detectChanges} to implement
	     * local change
	     * detection checks.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	     *
	     * ### Example
	     *
	     * The following example defines a component with a large list of readonly data.
	     * Imagine the data changes constantly, many times per second. For performance reasons,
	     * we want to check and update the list every five seconds. We can do that by detaching
	     * the component's change detector and doing a local check every five seconds.
	     *
	     * ```typescript
	     * class DataProvider {
	     *   // in a real application the returned data will be different every time
	     *   get data() {
	     *     return [1,2,3,4,5];
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'giant-list',
	     *   template: `
	     *     <li *ngFor="let d of dataProvider.data">Data {{d}}</lig>
	     *   `,
	     * })
	     * class GiantList {
	     *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {
	     *     ref.detach();
	     *     setInterval(() => {
	     *       this.ref.detectChanges();
	     *     }, 5000);
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'app',
	     *   providers: [DataProvider],
	     *   template: `
	     *     <giant-list><giant-list>
	     *   `,
	     * })
	     * class App {
	     * }
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.detach = function () { };
	    /**
	     * Checks the change detector and its children.
	     *
	     * This can also be used in combination with {\@link ChangeDetectorRef#detach} to implement local
	     * change detection
	     * checks.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	     *
	     * ### Example
	     *
	     * The following example defines a component with a large list of readonly data.
	     * Imagine, the data changes constantly, many times per second. For performance reasons,
	     * we want to check and update the list every five seconds.
	     *
	     * We can do that by detaching the component's change detector and doing a local change detection
	     * check
	     * every five seconds.
	     *
	     * See {\@link ChangeDetectorRef#detach} for more information.
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.detectChanges = function () { };
	    /**
	     * Checks the change detector and its children, and throws if any changes are detected.
	     *
	     * This is used in development mode to verify that running change detection doesn't introduce
	     * other changes.
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.checkNoChanges = function () { };
	    /**
	     * Reattach the change detector to the change detector tree.
	     *
	     * This also marks OnPush ancestors as to be checked. This reattached change detector will be
	     * checked during the next change detection run.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
	     *
	     * The following example creates a component displaying `live` data. The component will detach
	     * its change detector from the main change detector tree when the component's live property
	     * is set to false.
	     *
	     * ```typescript
	     * class DataProvider {
	     *   data = 1;
	     *
	     *   constructor() {
	     *     setInterval(() => {
	     *       this.data = this.data * 2;
	     *     }, 500);
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'live-data',
	     *   inputs: ['live'],
	     *   template: 'Data: {{dataProvider.data}}'
	     * })
	     * class LiveData {
	     *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}
	     *
	     *   set live(value) {
	     *     if (value)
	     *       this.ref.reattach();
	     *     else
	     *       this.ref.detach();
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'app',
	     *   providers: [DataProvider],
	     *   template: `
	     *     Live Update: <input type="checkbox" [(ngModel)]="live">
	     *     <live-data [live]="live"><live-data>
	     *   `,
	     * })
	     * class App {
	     *   live = true;
	     * }
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.reattach = function () { };
	    return ChangeDetectorRef;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@stable
	 * @abstract
	 */
	var ViewRef = (function (_super) {
	    __extends(ViewRef, _super);
	    function ViewRef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * Destroys the view and all of the data structures associated with it.
	     * @abstract
	     * @return {?}
	     */
	    ViewRef.prototype.destroy = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ViewRef.prototype.destroyed = function () { };
	    /**
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    ViewRef.prototype.onDestroy = function (callback) { };
	    return ViewRef;
	}(ChangeDetectorRef));
	/**
	 * Represents an Angular View.
	 *
	 * <!-- TODO: move the next two paragraphs to the dev guide -->
	 * A View is a fundamental building block of the application UI. It is the smallest grouping of
	 * Elements which are created and destroyed together.
	 *
	 * Properties of elements in a View can change, but the structure (number and order) of elements in
	 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	 * removing nested Views via a {\@link ViewContainerRef}. Each View can contain many View Containers.
	 * <!-- /TODO -->
	 *
	 * ### Example
	 *
	 * Given this template...
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <li *ngFor="let  item of items">{{item}}</li>
	 * </ul>
	 * ```
	 *
	 * We have two {\@link TemplateRef}s:
	 *
	 * Outer {\@link TemplateRef}:
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
	 * </ul>
	 * ```
	 *
	 * Inner {\@link TemplateRef}:
	 * ```
	 *   <li>{{item}}</li>
	 * ```
	 *
	 * Notice that the original template is broken down into two separate {\@link TemplateRef}s.
	 *
	 * The outer/inner {\@link TemplateRef}s are then assembled into views like so:
	 *
	 * ```
	 * <!-- ViewRef: outer-0 -->
	 * Count: 2
	 * <ul>
	 *   <ng-template view-container-ref></ng-template>
	 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	 * </ul>
	 * <!-- /ViewRef: outer-0 -->
	 * ```
	 * \@experimental
	 * @abstract
	 */
	var EmbeddedViewRef = (function (_super) {
	    __extends(EmbeddedViewRef, _super);
	    function EmbeddedViewRef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    EmbeddedViewRef.prototype.context = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    EmbeddedViewRef.prototype.rootNodes = function () { };
	    return EmbeddedViewRef;
	}(ViewRef));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Public API for compiler
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EventListener = (function () {
	    /**
	     * @param {?} name
	     * @param {?} callback
	     */
	    function EventListener(name, callback) {
	        this.name = name;
	        this.callback = callback;
	    }
	    
	    return EventListener;
	}());
	/**
	 * \@experimental All debugging apis are currently experimental.
	 */
	var DebugNode = (function () {
	    /**
	     * @param {?} nativeNode
	     * @param {?} parent
	     * @param {?} _debugContext
	     */
	    function DebugNode(nativeNode, parent, _debugContext) {
	        this._debugContext = _debugContext;
	        this.nativeNode = nativeNode;
	        if (parent && parent instanceof DebugElement) {
	            parent.addChild(this);
	        }
	        else {
	            this.parent = null;
	        }
	        this.listeners = [];
	    }
	    Object.defineProperty(DebugNode.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext.injector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "componentInstance", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext.component; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "context", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext.context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "references", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext.references; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "providerTokens", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext.providerTokens; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "source", {
	        /**
	         * @deprecated since v4
	         * @return {?}
	         */
	        get: function () { return 'Deprecated since v4'; },
	        enumerable: true,
	        configurable: true
	    });
	    return DebugNode;
	}());
	/**
	 * \@experimental All debugging apis are currently experimental.
	 */
	var DebugElement = (function (_super) {
	    __extends(DebugElement, _super);
	    /**
	     * @param {?} nativeNode
	     * @param {?} parent
	     * @param {?} _debugContext
	     */
	    function DebugElement(nativeNode, parent, _debugContext) {
	        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;
	        _this.properties = {};
	        _this.attributes = {};
	        _this.classes = {};
	        _this.styles = {};
	        _this.childNodes = [];
	        _this.nativeElement = nativeNode;
	        return _this;
	    }
	    /**
	     * @param {?} child
	     * @return {?}
	     */
	    DebugElement.prototype.addChild = function (child) {
	        if (child) {
	            this.childNodes.push(child);
	            child.parent = this;
	        }
	    };
	    /**
	     * @param {?} child
	     * @return {?}
	     */
	    DebugElement.prototype.removeChild = function (child) {
	        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
	        if (childIndex !== -1) {
	            child.parent = null;
	            this.childNodes.splice(childIndex, 1);
	        }
	    };
	    /**
	     * @param {?} child
	     * @param {?} newChildren
	     * @return {?}
	     */
	    DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
	        var _this = this;
	        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
	        if (siblingIndex !== -1) {
	            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));
	            newChildren.forEach(function (c) {
	                if (c.parent) {
	                    c.parent.removeChild(c);
	                }
	                c.parent = _this;
	            });
	        }
	        var _a;
	    };
	    /**
	     * @param {?} refChild
	     * @param {?} newChild
	     * @return {?}
	     */
	    DebugElement.prototype.insertBefore = function (refChild, newChild) {
	        var /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);
	        if (refIndex === -1) {
	            this.addChild(newChild);
	        }
	        else {
	            if (newChild.parent) {
	                newChild.parent.removeChild(newChild);
	            }
	            newChild.parent = this;
	            this.childNodes.splice(refIndex, 0, newChild);
	        }
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    DebugElement.prototype.query = function (predicate) {
	        var /** @type {?} */ results = this.queryAll(predicate);
	        return results[0] || null;
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    DebugElement.prototype.queryAll = function (predicate) {
	        var /** @type {?} */ matches = [];
	        _queryElementChildren(this, predicate, matches);
	        return matches;
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    DebugElement.prototype.queryAllNodes = function (predicate) {
	        var /** @type {?} */ matches = [];
	        _queryNodeChildren(this, predicate, matches);
	        return matches;
	    };
	    Object.defineProperty(DebugElement.prototype, "children", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} eventName
	     * @param {?} eventObj
	     * @return {?}
	     */
	    DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
	        this.listeners.forEach(function (listener) {
	            if (listener.name == eventName) {
	                listener.callback(eventObj);
	            }
	        });
	    };
	    return DebugElement;
	}(DebugNode));
	/**
	 * \@experimental
	 * @param {?} debugEls
	 * @return {?}
	 */
	function asNativeElements(debugEls) {
	    return debugEls.map(function (el) { return el.nativeElement; });
	}
	/**
	 * @param {?} element
	 * @param {?} predicate
	 * @param {?} matches
	 * @return {?}
	 */
	function _queryElementChildren(element, predicate, matches) {
	    element.childNodes.forEach(function (node) {
	        if (node instanceof DebugElement) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            _queryElementChildren(node, predicate, matches);
	        }
	    });
	}
	/**
	 * @param {?} parentNode
	 * @param {?} predicate
	 * @param {?} matches
	 * @return {?}
	 */
	function _queryNodeChildren(parentNode, predicate, matches) {
	    if (parentNode instanceof DebugElement) {
	        parentNode.childNodes.forEach(function (node) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            if (node instanceof DebugElement) {
	                _queryNodeChildren(node, predicate, matches);
	            }
	        });
	    }
	}
	// Need to keep the nodes in a global Map so that multiple angular apps are supported.
	var _nativeNodeToDebugNode = new Map();
	/**
	 * \@experimental
	 * @param {?} nativeNode
	 * @return {?}
	 */
	function getDebugNode(nativeNode) {
	    return _nativeNodeToDebugNode.get(nativeNode) || null;
	}
	/**
	 * @return {?}
	 */
	/**
	 * @param {?} node
	 * @return {?}
	 */
	function indexDebugNode(node) {
	    _nativeNodeToDebugNode.set(node.nativeNode, node);
	}
	/**
	 * @param {?} node
	 * @return {?}
	 */
	function removeDebugNodeFromIndex(node) {
	    _nativeNodeToDebugNode.delete(node.nativeNode);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function devModeEqual(a, b) {
	    var /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);
	    var /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);
	    if (isListLikeIterableA && isListLikeIterableB) {
	        return areIterablesEqual(a, b, devModeEqual);
	    }
	    else {
	        var /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');
	        var /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');
	        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
	            return true;
	        }
	        else {
	            return looseIdentical(a, b);
	        }
	    }
	}
	/**
	 * Indicates that the result of a {\@link Pipe} transformation has changed even though the
	 * reference
	 * has not changed.
	 *
	 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	 *
	 * Example:
	 *
	 * ```
	 * if (this._latestValue === this._latestReturnedValue) {
	 *    return this._latestReturnedValue;
	 *  } else {
	 *    this._latestReturnedValue = this._latestValue;
	 *    return WrappedValue.wrap(this._latestValue); // this will force update
	 *  }
	 * ```
	 * \@stable
	 */
	var WrappedValue = (function () {
	    /**
	     * @param {?} wrapped
	     */
	    function WrappedValue(wrapped) {
	        this.wrapped = wrapped;
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    WrappedValue.wrap = function (value) { return new WrappedValue(value); };
	    return WrappedValue;
	}());
	/**
	 * Helper class for unwrapping WrappedValue s
	 */
	var ValueUnwrapper = (function () {
	    function ValueUnwrapper() {
	        this.hasWrappedValue = false;
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    ValueUnwrapper.prototype.unwrap = function (value) {
	        if (value instanceof WrappedValue) {
	            this.hasWrappedValue = true;
	            return value.wrapped;
	        }
	        return value;
	    };
	    /**
	     * @return {?}
	     */
	    ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
	    return ValueUnwrapper;
	}());
	/**
	 * Represents a basic change from a previous to a new value.
	 * \@stable
	 */
	var SimpleChange = (function () {
	    /**
	     * @param {?} previousValue
	     * @param {?} currentValue
	     * @param {?} firstChange
	     */
	    function SimpleChange(previousValue, currentValue, firstChange) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	        this.firstChange = firstChange;
	    }
	    /**
	     * Check whether the new value is the first value assigned.
	     * @return {?}
	     */
	    SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };
	    return SimpleChange;
	}());
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isListLikeIterable(obj) {
	    if (!isJsObject(obj))
	        return false;
	    return Array.isArray(obj) ||
	        (!(obj instanceof Map) &&
	            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	}
	/**
	 * @param {?} a
	 * @param {?} b
	 * @param {?} comparator
	 * @return {?}
	 */
	function areIterablesEqual(a, b, comparator) {
	    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
	    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
	    while (true) {
	        var /** @type {?} */ item1 = iterator1.next();
	        var /** @type {?} */ item2 = iterator2.next();
	        if (item1.done && item2.done)
	            return true;
	        if (item1.done || item2.done)
	            return false;
	        if (!comparator(item1.value, item2.value))
	            return false;
	    }
	}
	/**
	 * @param {?} obj
	 * @param {?} fn
	 * @return {?}
	 */
	function iterateListLike(obj, fn) {
	    if (Array.isArray(obj)) {
	        for (var /** @type {?} */ i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var /** @type {?} */ iterator = obj[getSymbolIterator()]();
	        var /** @type {?} */ item = void 0;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	/**
	 * @param {?} o
	 * @return {?}
	 */
	function isJsObject(o) {
	    return o !== null && (typeof o === 'function' || typeof o === 'object');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DefaultIterableDifferFactory = (function () {
	    function DefaultIterableDifferFactory() {
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
	    /**
	     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
	     * @template V
	     * @param {?=} cdRefOrTrackBy
	     * @param {?=} trackByFn
	     * @return {?}
	     */
	    DefaultIterableDifferFactory.prototype.create = function (cdRefOrTrackBy, trackByFn) {
	        return new DefaultIterableDiffer(trackByFn || (cdRefOrTrackBy));
	    };
	    return DefaultIterableDifferFactory;
	}());
	var trackByIdentity = function (index, item) { return item; };
	/**
	 * @deprecated v4.0.0 - Should not be part of public API.
	 */
	var DefaultIterableDiffer = (function () {
	    /**
	     * @param {?=} trackByFn
	     */
	    function DefaultIterableDiffer(trackByFn) {
	        this._length = 0;
	        this._collection = null;
	        this._linkedRecords = null;
	        this._unlinkedRecords = null;
	        this._previousItHead = null;
	        this._itHead = null;
	        this._itTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._movesHead = null;
	        this._movesTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	        this._identityChangesHead = null;
	        this._identityChangesTail = null;
	        this._trackByFn = trackByFn || trackByIdentity;
	    }
	    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._collection; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._length; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._itHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
	        var /** @type {?} */ nextIt = this._itHead;
	        var /** @type {?} */ nextRemove = this._removalsHead;
	        var /** @type {?} */ addRemoveOffset = 0;
	        var /** @type {?} */ moveOffsets = null;
	        while (nextIt || nextRemove) {
	            // Figure out which is the next record to process
	            // Order: remove, add, move
	            var /** @type {?} */ record = !nextRemove ||
	                nextIt && ((nextIt.currentIndex)) <
	                    getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? ((nextIt)) :
	                nextRemove;
	            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
	            var /** @type {?} */ currentIndex = record.currentIndex;
	            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
	            if (record === nextRemove) {
	                addRemoveOffset--;
	                nextRemove = nextRemove._nextRemoved;
	            }
	            else {
	                nextIt = ((nextIt))._next;
	                if (record.previousIndex == null) {
	                    addRemoveOffset++;
	                }
	                else {
	                    // INVARIANT:  currentIndex < previousIndex
	                    if (!moveOffsets)
	                        moveOffsets = [];
	                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
	                    var /** @type {?} */ localCurrentIndex = ((currentIndex)) - addRemoveOffset;
	                    if (localMovePreviousIndex != localCurrentIndex) {
	                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
	                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
	                            var /** @type {?} */ index = offset + i;
	                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {
	                                moveOffsets[i] = offset + 1;
	                            }
	                        }
	                        var /** @type {?} */ previousIndex = record.previousIndex;
	                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
	                    }
	                }
	            }
	            if (adjPreviousIndex !== currentIndex) {
	                fn(record, adjPreviousIndex, currentIndex);
	            }
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} collection
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.diff = function (collection) {
	        if (collection == null)
	            collection = [];
	        if (!isListLikeIterable(collection)) {
	            throw new Error("Error trying to diff '" + stringify(collection) + "'. Only arrays and iterables are allowed");
	        }
	        if (this.check(collection)) {
	            return this;
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.onDestroy = function () { };
	    /**
	     * @param {?} collection
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.check = function (collection) {
	        var _this = this;
	        this._reset();
	        var /** @type {?} */ record = this._itHead;
	        var /** @type {?} */ mayBeDirty = false;
	        var /** @type {?} */ index;
	        var /** @type {?} */ item;
	        var /** @type {?} */ itemTrackBy;
	        if (Array.isArray(collection)) {
	            this._length = collection.length;
	            for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {
	                item = collection[index_1];
	                itemTrackBy = this._trackByFn(index_1, item);
	                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                    record = this._mismatch(record, item, itemTrackBy, index_1);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
	                    }
	                    if (!looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                }
	                record = record._next;
	            }
	        }
	        else {
	            index = 0;
	            iterateListLike(collection, function (item) {
	                itemTrackBy = _this._trackByFn(index, item);
	                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                    record = _this._mismatch(record, item, itemTrackBy, index);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                    }
	                    if (!looseIdentical(record.item, item))
	                        _this._addIdentityChange(record, item);
	                }
	                record = record._next;
	                index++;
	            });
	            this._length = index;
	        }
	        this._truncate(record);
	        this._collection = collection;
	        return this.isDirty;
	    };
	    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._additionsHead !== null || this._movesHead !== null ||
	                this._removalsHead !== null || this._identityChangesHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reset the state of the change objects to show no changes. This means set previousKey to
	     * currentKey, and clear all of the queues (additions, moves, removals).
	     * Set the previousIndexes of moved and added items to their currentIndexes
	     * Reset the list of additions, moves and removals
	     *
	     * \@internal
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var /** @type {?} */ record = void 0;
	            var /** @type {?} */ nextRecord = void 0;
	            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                record.previousIndex = record.currentIndex;
	            }
	            this._additionsHead = this._additionsTail = null;
	            for (record = this._movesHead; record !== null; record = nextRecord) {
	                record.previousIndex = record.currentIndex;
	                nextRecord = record._nextMoved;
	            }
	            this._movesHead = this._movesTail = null;
	            this._removalsHead = this._removalsTail = null;
	            this._identityChangesHead = this._identityChangesTail = null;
	        }
	    };
	    /**
	     * This is the core function which handles differences between collections.
	     *
	     * - `record` is the record which we saw at this position last time. If null then it is a new
	     *   item.
	     * - `item` is the current item in the collection
	     * - `index` is the position of the item in the collection
	     *
	     * \@internal
	     * @param {?} record
	     * @param {?} item
	     * @param {?} itemTrackBy
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	        // The previous record after which we will append the current one.
	        var /** @type {?} */ previousRecord;
	        if (record === null) {
	            previousRecord = ((this._itTail));
	        }
	        else {
	            previousRecord = ((record._prev));
	            // Remove the record from the collection since we know it does not match the item.
	            this._remove(record);
	        }
	        // Attempt to see if we have seen the item before.
	        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	        if (record !== null) {
	            // We have seen this before, we need to move it forward in the collection.
	            // But first we need to check if identity changed, so we can update in view if necessary
	            if (!looseIdentical(record.item, item))
	                this._addIdentityChange(record, item);
	            this._moveAfter(record, previousRecord, index);
	        }
	        else {
	            // Never seen it, check evicted list.
	            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
	            if (record !== null) {
	                // It is an item which we have evicted earlier: reinsert it back into the list.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._reinsertAfter(record, previousRecord, index);
	            }
	            else {
	                // It is a new item: add it.
	                record =
	                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
	            }
	        }
	        return record;
	    };
	    /**
	     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	     *
	     * Use case: `[a, a]` => `[b, a, a]`
	     *
	     * If we did not have this check then the insertion of `b` would:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) leave `a` at index `1` as is. <-- this is wrong!
	     *   3) reinsert `a` at index 2. <-- this is wrong!
	     *
	     * The correct behavior is:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) reinsert `a` at index 1.
	     *   3) move `a` at from `1` to `2`.
	     *
	     *
	     * Double check that we have not evicted a duplicate item. We need to check if the item type may
	     * have already been removed:
	     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	     * at the end.
	     *
	     * \@internal
	     * @param {?} record
	     * @param {?} item
	     * @param {?} itemTrackBy
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
	        if (reinsertRecord !== null) {
	            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);
	        }
	        else if (record.currentIndex != index) {
	            record.currentIndex = index;
	            this._addToMoves(record, index);
	        }
	        return record;
	    };
	    /**
	     * Get rid of any excess {\@link IterableChangeRecord_}s from the previous collection
	     *
	     * - `record` The first excess {\@link IterableChangeRecord_}.
	     *
	     * \@internal
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._truncate = function (record) {
	        // Anything after that needs to be removed;
	        while (record !== null) {
	            var /** @type {?} */ nextRecord = record._next;
	            this._addToRemovals(this._unlink(record));
	            record = nextRecord;
	        }
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.clear();
	        }
	        if (this._additionsTail !== null) {
	            this._additionsTail._nextAdded = null;
	        }
	        if (this._movesTail !== null) {
	            this._movesTail._nextMoved = null;
	        }
	        if (this._itTail !== null) {
	            this._itTail._next = null;
	        }
	        if (this._removalsTail !== null) {
	            this._removalsTail._nextRemoved = null;
	        }
	        if (this._identityChangesTail !== null) {
	            this._identityChangesTail._nextIdentityChange = null;
	        }
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.remove(record);
	        }
	        var /** @type {?} */ prev = record._prevRemoved;
	        var /** @type {?} */ next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	        this._unlink(record);
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	        this._insertAfter(record, prevRecord, index);
	        if (this._additionsTail === null) {
	            // todo(vicb)
	            // assert(this._additionsHead === null);
	            this._additionsTail = this._additionsHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_additionsTail._nextAdded === null);
	            // assert(record._nextAdded === null);
	            this._additionsTail = this._additionsTail._nextAdded = record;
	        }
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	        // todo(vicb)
	        // assert(record != prevRecord);
	        // assert(record._next === null);
	        // assert(record._prev === null);
	        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
	        // todo(vicb)
	        // assert(next != record);
	        // assert(prevRecord != record);
	        record._next = next;
	        record._prev = prevRecord;
	        if (next === null) {
	            this._itTail = record;
	        }
	        else {
	            next._prev = record;
	        }
	        if (prevRecord === null) {
	            this._itHead = record;
	        }
	        else {
	            prevRecord._next = record;
	        }
	        if (this._linkedRecords === null) {
	            this._linkedRecords = new _DuplicateMap();
	        }
	        this._linkedRecords.put(record);
	        record.currentIndex = index;
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._remove = function (record) {
	        return this._addToRemovals(this._unlink(record));
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._unlink = function (record) {
	        if (this._linkedRecords !== null) {
	            this._linkedRecords.remove(record);
	        }
	        var /** @type {?} */ prev = record._prev;
	        var /** @type {?} */ next = record._next;
	        // todo(vicb)
	        // assert((record._prev = null) === null);
	        // assert((record._next = null) === null);
	        if (prev === null) {
	            this._itHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        if (next === null) {
	            this._itTail = prev;
	        }
	        else {
	            next._prev = prev;
	        }
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} toIndex
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	        // todo(vicb)
	        // assert(record._nextMoved === null);
	        if (record.previousIndex === toIndex) {
	            return record;
	        }
	        if (this._movesTail === null) {
	            // todo(vicb)
	            // assert(_movesHead === null);
	            this._movesTail = this._movesHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_movesTail._nextMoved === null);
	            this._movesTail = this._movesTail._nextMoved = record;
	        }
	        return record;
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	        if (this._unlinkedRecords === null) {
	            this._unlinkedRecords = new _DuplicateMap();
	        }
	        this._unlinkedRecords.put(record);
	        record.currentIndex = null;
	        record._nextRemoved = null;
	        if (this._removalsTail === null) {
	            // todo(vicb)
	            // assert(_removalsHead === null);
	            this._removalsTail = this._removalsHead = record;
	            record._prevRemoved = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(_removalsTail._nextRemoved === null);
	            // assert(record._nextRemoved === null);
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = this._removalsTail._nextRemoved = record;
	        }
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} item
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	        record.item = item;
	        if (this._identityChangesTail === null) {
	            this._identityChangesTail = this._identityChangesHead = record;
	        }
	        else {
	            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	        }
	        return record;
	    };
	    /**
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.toString = function () {
	        var /** @type {?} */ list = [];
	        this.forEachItem(function (record) { return list.push(record); });
	        var /** @type {?} */ previous = [];
	        this.forEachPreviousItem(function (record) { return previous.push(record); });
	        var /** @type {?} */ additions = [];
	        this.forEachAddedItem(function (record) { return additions.push(record); });
	        var /** @type {?} */ moves = [];
	        this.forEachMovedItem(function (record) { return moves.push(record); });
	        var /** @type {?} */ removals = [];
	        this.forEachRemovedItem(function (record) { return removals.push(record); });
	        var /** @type {?} */ identityChanges = [];
	        this.forEachIdentityChange(function (record) { return identityChanges.push(record); });
	        return 'collection: ' + list.join(', ') + '\n' +
	            'previous: ' + previous.join(', ') + '\n' +
	            'additions: ' + additions.join(', ') + '\n' +
	            'moves: ' + moves.join(', ') + '\n' +
	            'removals: ' + removals.join(', ') + '\n' +
	            'identityChanges: ' + identityChanges.join(', ') + '\n';
	    };
	    return DefaultIterableDiffer;
	}());
	/**
	 * \@stable
	 */
	var IterableChangeRecord_ = (function () {
	    /**
	     * @param {?} item
	     * @param {?} trackById
	     */
	    function IterableChangeRecord_(item, trackById) {
	        this.item = item;
	        this.trackById = trackById;
	        this.currentIndex = null;
	        this.previousIndex = null;
	        /**
	         * \@internal
	         */
	        this._nextPrevious = null;
	        /**
	         * \@internal
	         */
	        this._prev = null;
	        /**
	         * \@internal
	         */
	        this._next = null;
	        /**
	         * \@internal
	         */
	        this._prevDup = null;
	        /**
	         * \@internal
	         */
	        this._nextDup = null;
	        /**
	         * \@internal
	         */
	        this._prevRemoved = null;
	        /**
	         * \@internal
	         */
	        this._nextRemoved = null;
	        /**
	         * \@internal
	         */
	        this._nextAdded = null;
	        /**
	         * \@internal
	         */
	        this._nextMoved = null;
	        /**
	         * \@internal
	         */
	        this._nextIdentityChange = null;
	    }
	    /**
	     * @return {?}
	     */
	    IterableChangeRecord_.prototype.toString = function () {
	        return this.previousIndex === this.currentIndex ? stringify(this.item) :
	            stringify(this.item) + '[' +
	                stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
	    };
	    return IterableChangeRecord_;
	}());
	var _DuplicateItemRecordList = (function () {
	    function _DuplicateItemRecordList() {
	        /**
	         * \@internal
	         */
	        this._head = null;
	        /**
	         * \@internal
	         */
	        this._tail = null;
	    }
	    /**
	     * Append the record to the list of duplicates.
	     *
	     * Note: by design all records in the list of duplicates hold the same value in record.item.
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateItemRecordList.prototype.add = function (record) {
	        if (this._head === null) {
	            this._head = this._tail = record;
	            record._nextDup = null;
	            record._prevDup = null;
	        }
	        else {
	            ((
	            // todo(vicb)
	            // assert(record.item ==  _head.item ||
	            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	            this._tail))._nextDup = record;
	            record._prevDup = this._tail;
	            record._nextDup = null;
	            this._tail = record;
	        }
	    };
	    /**
	     * @param {?} trackById
	     * @param {?} afterIndex
	     * @return {?}
	     */
	    _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
	        var /** @type {?} */ record;
	        for (record = this._head; record !== null; record = record._nextDup) {
	            if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                looseIdentical(record.trackById, trackById)) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove one {\@link IterableChangeRecord_} from the list of duplicates.
	     *
	     * Returns whether the list of duplicates is empty.
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateItemRecordList.prototype.remove = function (record) {
	        // todo(vicb)
	        // assert(() {
	        //  // verify that the record being removed is in the list.
	        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
	        //    if (identical(cursor, record)) return true;
	        //  }
	        //  return false;
	        //});
	        var /** @type {?} */ prev = record._prevDup;
	        var /** @type {?} */ next = record._nextDup;
	        if (prev === null) {
	            this._head = next;
	        }
	        else {
	            prev._nextDup = next;
	        }
	        if (next === null) {
	            this._tail = prev;
	        }
	        else {
	            next._prevDup = prev;
	        }
	        return this._head === null;
	    };
	    return _DuplicateItemRecordList;
	}());
	var _DuplicateMap = (function () {
	    function _DuplicateMap() {
	        this.map = new Map();
	    }
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateMap.prototype.put = function (record) {
	        var /** @type {?} */ key = record.trackById;
	        var /** @type {?} */ duplicates = this.map.get(key);
	        if (!duplicates) {
	            duplicates = new _DuplicateItemRecordList();
	            this.map.set(key, duplicates);
	        }
	        duplicates.add(record);
	    };
	    /**
	     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
	     * have already iterated over, we use the afterIndex to pretend it is not there.
	     *
	     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	     * have any more `a`s needs to return the last `a` not the first or second.
	     * @param {?} trackById
	     * @param {?} afterIndex
	     * @return {?}
	     */
	    _DuplicateMap.prototype.get = function (trackById, afterIndex) {
	        var /** @type {?} */ key = trackById;
	        var /** @type {?} */ recordList = this.map.get(key);
	        return recordList ? recordList.get(trackById, afterIndex) : null;
	    };
	    /**
	     * Removes a {\@link IterableChangeRecord_} from the list of duplicates.
	     *
	     * The list of duplicates also is removed from the map if it gets empty.
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateMap.prototype.remove = function (record) {
	        var /** @type {?} */ key = record.trackById;
	        var /** @type {?} */ recordList = ((this.map.get(key)));
	        // Remove the list of duplicates when it gets empty
	        if (recordList.remove(record)) {
	            this.map.delete(key);
	        }
	        return record;
	    };
	    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.map.size === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	    /**
	     * @return {?}
	     */
	    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
	    return _DuplicateMap;
	}());
	/**
	 * @param {?} item
	 * @param {?} addRemoveOffset
	 * @param {?} moveOffsets
	 * @return {?}
	 */
	function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
	    var /** @type {?} */ previousIndex = item.previousIndex;
	    if (previousIndex === null)
	        return previousIndex;
	    var /** @type {?} */ moveOffset = 0;
	    if (moveOffsets && previousIndex < moveOffsets.length) {
	        moveOffset = moveOffsets[previousIndex];
	    }
	    return previousIndex + addRemoveOffset + moveOffset;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DefaultKeyValueDifferFactory = (function () {
	    function DefaultKeyValueDifferFactory() {
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
	    /**
	     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
	     * @template K, V
	     * @param {?=} cd
	     * @return {?}
	     */
	    DefaultKeyValueDifferFactory.prototype.create = function (cd) {
	        return new DefaultKeyValueDiffer();
	    };
	    return DefaultKeyValueDifferFactory;
	}());
	var DefaultKeyValueDiffer = (function () {
	    function DefaultKeyValueDiffer() {
	        this._records = new Map();
	        this._mapHead = null;
	        this._appendAfter = null;
	        this._previousMapHead = null;
	        this._changesHead = null;
	        this._changesTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._additionsHead !== null || this._changesHead !== null ||
	                this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?=} map
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.diff = function (map) {
	        if (!map) {
	            map = new Map();
	        }
	        else if (!(map instanceof Map || isJsObject(map))) {
	            throw new Error("Error trying to diff '" + stringify(map) + "'. Only maps and objects are allowed");
	        }
	        return this.check(map) ? this : null;
	    };
	    /**
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	    /**
	     * Check the current state of the map vs the previous.
	     * The algorithm is optimised for when the keys do no change.
	     * @param {?} map
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.check = function (map) {
	        var _this = this;
	        this._reset();
	        var /** @type {?} */ insertBefore = this._mapHead;
	        this._appendAfter = null;
	        this._forEach(map, function (value, key) {
	            if (insertBefore && insertBefore.key === key) {
	                _this._maybeAddToChanges(insertBefore, value);
	                _this._appendAfter = insertBefore;
	                insertBefore = insertBefore._next;
	            }
	            else {
	                var /** @type {?} */ record = _this._getOrCreateRecordForKey(key, value);
	                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);
	            }
	        });
	        // Items remaining at the end of the list have been deleted
	        if (insertBefore) {
	            if (insertBefore._prev) {
	                insertBefore._prev._next = null;
	            }
	            this._removalsHead = insertBefore;
	            for (var /** @type {?} */ record = insertBefore; record !== null; record = record._nextRemoved) {
	                if (record === this._mapHead) {
	                    this._mapHead = null;
	                }
	                this._records.delete(record.key);
	                record._nextRemoved = record._next;
	                record.previousValue = record.currentValue;
	                record.currentValue = null;
	                record._prev = null;
	                record._next = null;
	            }
	        }
	        // Make sure tails have no next records from previous runs
	        if (this._changesTail)
	            this._changesTail._nextChanged = null;
	        if (this._additionsTail)
	            this._additionsTail._nextAdded = null;
	        return this.isDirty;
	    };
	    /**
	     * Inserts a record before `before` or append at the end of the list when `before` is null.
	     *
	     * Notes:
	     * - This method appends at `this._appendAfter`,
	     * - This method updates `this._appendAfter`,
	     * - The return value is the new value for the insertion pointer.
	     * @param {?} before
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {
	        if (before) {
	            var /** @type {?} */ prev = before._prev;
	            record._next = before;
	            record._prev = prev;
	            before._prev = record;
	            if (prev) {
	                prev._next = record;
	            }
	            if (before === this._mapHead) {
	                this._mapHead = record;
	            }
	            this._appendAfter = before;
	            return before;
	        }
	        if (this._appendAfter) {
	            this._appendAfter._next = record;
	            record._prev = this._appendAfter;
	        }
	        else {
	            this._mapHead = record;
	        }
	        this._appendAfter = record;
	        return null;
	    };
	    /**
	     * @param {?} key
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {
	        if (this._records.has(key)) {
	            var /** @type {?} */ record_1 = ((this._records.get(key)));
	            this._maybeAddToChanges(record_1, value);
	            var /** @type {?} */ prev = record_1._prev;
	            var /** @type {?} */ next = record_1._next;
	            if (prev) {
	                prev._next = next;
	            }
	            if (next) {
	                next._prev = prev;
	            }
	            record_1._next = null;
	            record_1._prev = null;
	            return record_1;
	        }
	        var /** @type {?} */ record = new KeyValueChangeRecord_(key);
	        this._records.set(key, record);
	        record.currentValue = value;
	        this._addToAdditions(record);
	        return record;
	    };
	    /**
	     * \@internal
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var /** @type {?} */ record = void 0;
	            // let `_previousMapHead` contain the state of the map before the changes
	            this._previousMapHead = this._mapHead;
	            for (record = this._previousMapHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            // Update `record.previousValue` with the value of the item before the changes
	            // We need to update all changed items (that's those which have been added and changed)
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                record.previousValue = record.currentValue;
	            }
	            for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                record.previousValue = record.currentValue;
	            }
	            this._changesHead = this._changesTail = null;
	            this._additionsHead = this._additionsTail = null;
	            this._removalsHead = null;
	        }
	    };
	    /**
	     * @param {?} record
	     * @param {?} newValue
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
	        if (!looseIdentical(newValue, record.currentValue)) {
	            record.previousValue = record.currentValue;
	            record.currentValue = newValue;
	            this._addToChanges(record);
	        }
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	        if (this._additionsHead === null) {
	            this._additionsHead = this._additionsTail = record;
	        }
	        else {
	            ((this._additionsTail))._nextAdded = record;
	            this._additionsTail = record;
	        }
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	        if (this._changesHead === null) {
	            this._changesHead = this._changesTail = record;
	        }
	        else {
	            ((this._changesTail))._nextChanged = record;
	            this._changesTail = record;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.toString = function () {
	        var /** @type {?} */ items = [];
	        var /** @type {?} */ previous = [];
	        var /** @type {?} */ changes = [];
	        var /** @type {?} */ additions = [];
	        var /** @type {?} */ removals = [];
	        this.forEachItem(function (r) { return items.push(stringify(r)); });
	        this.forEachPreviousItem(function (r) { return previous.push(stringify(r)); });
	        this.forEachChangedItem(function (r) { return changes.push(stringify(r)); });
	        this.forEachAddedItem(function (r) { return additions.push(stringify(r)); });
	        this.forEachRemovedItem(function (r) { return removals.push(stringify(r)); });
	        return 'map: ' + items.join(', ') + '\n' +
	            'previous: ' + previous.join(', ') + '\n' +
	            'additions: ' + additions.join(', ') + '\n' +
	            'changes: ' + changes.join(', ') + '\n' +
	            'removals: ' + removals.join(', ') + '\n';
	    };
	    /**
	     * \@internal
	     * @template K, V
	     * @param {?} obj
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	        if (obj instanceof Map) {
	            obj.forEach(fn);
	        }
	        else {
	            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
	        }
	    };
	    return DefaultKeyValueDiffer;
	}());
	/**
	 * \@stable
	 */
	var KeyValueChangeRecord_ = (function () {
	    /**
	     * @param {?} key
	     */
	    function KeyValueChangeRecord_(key) {
	        this.key = key;
	        this.previousValue = null;
	        this.currentValue = null;
	        /**
	         * \@internal
	         */
	        this._nextPrevious = null;
	        /**
	         * \@internal
	         */
	        this._next = null;
	        /**
	         * \@internal
	         */
	        this._prev = null;
	        /**
	         * \@internal
	         */
	        this._nextAdded = null;
	        /**
	         * \@internal
	         */
	        this._nextRemoved = null;
	        /**
	         * \@internal
	         */
	        this._nextChanged = null;
	    }
	    /**
	     * @return {?}
	     */
	    KeyValueChangeRecord_.prototype.toString = function () {
	        return looseIdentical(this.previousValue, this.currentValue) ?
	            stringify(this.key) :
	            (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
	                stringify(this.currentValue) + ']');
	    };
	    return KeyValueChangeRecord_;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	 * \@stable
	 */
	var IterableDiffers = (function () {
	    /**
	     * @param {?} factories
	     */
	    function IterableDiffers(factories) {
	        this.factories = factories;
	    }
	    /**
	     * @param {?} factories
	     * @param {?=} parent
	     * @return {?}
	     */
	    IterableDiffers.create = function (factories, parent) {
	        if (parent != null) {
	            var /** @type {?} */ copied = parent.factories.slice();
	            factories = factories.concat(copied);
	            return new IterableDiffers(factories);
	        }
	        else {
	            return new IterableDiffers(factories);
	        }
	    };
	    /**
	     * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
	     * inherited {\@link IterableDiffers} instance with the provided factories and return a new
	     * {\@link IterableDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	     * which will only be applied to the injector for this component and its children.
	     * This step is all that's required to make a new {\@link IterableDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * \@Component({
	     *   viewProviders: [
	     *     IterableDiffers.extend([new ImmutableListDiffer()])
	     *   ]
	     * })
	     * ```
	     * @param {?} factories
	     * @return {?}
	     */
	    IterableDiffers.extend = function (factories) {
	        return {
	            provide: IterableDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend IterableDiffers without a parent injector');
	                }
	                return IterableDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    /**
	     * @param {?} iterable
	     * @return {?}
	     */
	    IterableDiffers.prototype.find = function (iterable) {
	        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
	        if (factory != null) {
	            return factory;
	        }
	        else {
	            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	        }
	    };
	    return IterableDiffers;
	}());
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function getTypeNameForDebugging(type) {
	    return type['name'] || typeof type;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	 * \@stable
	 */
	var KeyValueDiffers = (function () {
	    /**
	     * @param {?} factories
	     */
	    function KeyValueDiffers(factories) {
	        this.factories = factories;
	    }
	    /**
	     * @template S
	     * @param {?} factories
	     * @param {?=} parent
	     * @return {?}
	     */
	    KeyValueDiffers.create = function (factories, parent) {
	        if (parent) {
	            var /** @type {?} */ copied = parent.factories.slice();
	            factories = factories.concat(copied);
	        }
	        return new KeyValueDiffers(factories);
	    };
	    /**
	     * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
	     * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
	     * {\@link KeyValueDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	     * which will only be applied to the injector for this component and its children.
	     * This step is all that's required to make a new {\@link KeyValueDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * \@Component({
	     *   viewProviders: [
	     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	     *   ]
	     * })
	     * ```
	     * @template S
	     * @param {?} factories
	     * @return {?}
	     */
	    KeyValueDiffers.extend = function (factories) {
	        return {
	            provide: KeyValueDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                    // to bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                }
	                return KeyValueDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    /**
	     * @param {?} kv
	     * @return {?}
	     */
	    KeyValueDiffers.prototype.find = function (kv) {
	        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
	        if (factory) {
	            return factory;
	        }
	        throw new Error("Cannot find a differ supporting object '" + kv + "'");
	    };
	    return KeyValueDiffers;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 */
	var keyValDiff = [new DefaultKeyValueDifferFactory()];
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 */
	var iterableDiff = [new DefaultIterableDifferFactory()];
	var defaultIterableDiffers = new IterableDiffers(iterableDiff);
	var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Change detection enables data binding in Angular.
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @return {?}
	 */
	function _reflector() {
	    return reflector;
	}
	var _CORE_PLATFORM_PROVIDERS = [
	    // Set a default platform name for platforms that don't set it explicitly.
	    { provide: PLATFORM_ID, useValue: 'unknown' },
	    PlatformRef_,
	    { provide: PlatformRef, useExisting: PlatformRef_ },
	    { provide: Reflector, useFactory: _reflector, deps: [] },
	    { provide: ReflectorReader, useExisting: Reflector },
	    TestabilityRegistry,
	    Console,
	];
	/**
	 * This platform has to be included in any other platform
	 *
	 * \@experimental
	 */
	var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@experimental i18n support is experimental.
	 */
	var LOCALE_ID = new InjectionToken('LocaleId');
	/**
	 * \@experimental i18n support is experimental.
	 */
	var TRANSLATIONS = new InjectionToken('Translations');
	/**
	 * \@experimental i18n support is experimental.
	 */
	var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
	var MissingTranslationStrategy = {};
	MissingTranslationStrategy.Error = 0;
	MissingTranslationStrategy.Warning = 1;
	MissingTranslationStrategy.Ignore = 2;
	MissingTranslationStrategy[MissingTranslationStrategy.Error] = "Error";
	MissingTranslationStrategy[MissingTranslationStrategy.Warning] = "Warning";
	MissingTranslationStrategy[MissingTranslationStrategy.Ignore] = "Ignore";
	var SecurityContext = {};
	SecurityContext.NONE = 0;
	SecurityContext.HTML = 1;
	SecurityContext.STYLE = 2;
	SecurityContext.SCRIPT = 3;
	SecurityContext.URL = 4;
	SecurityContext.RESOURCE_URL = 5;
	SecurityContext[SecurityContext.NONE] = "NONE";
	SecurityContext[SecurityContext.HTML] = "HTML";
	SecurityContext[SecurityContext.STYLE] = "STYLE";
	SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
	SecurityContext[SecurityContext.URL] = "URL";
	SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
	/**
	 * Sanitizer is used by the views to sanitize potentially dangerous values.
	 *
	 * \@stable
	 * @abstract
	 */
	var Sanitizer = (function () {
	    function Sanitizer() {
	    }
	    /**
	     * @abstract
	     * @param {?} context
	     * @param {?} value
	     * @return {?}
	     */
	    Sanitizer.prototype.sanitize = function (context, value) { };
	    return Sanitizer;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Node instance data.
	 *
	 * We have a separate type per NodeType to save memory
	 * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)
	 *
	 * To keep our code monomorphic,
	 * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).
	 * This way, no usage site can get a `NodeData` from view.nodes and then use it for different
	 * purposes.
	 */
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asTextData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asElementData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asProviderData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asPureExpressionData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asQueryList(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * @abstract
	 */
	var DebugContext = (function () {
	    function DebugContext() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.view = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.nodeIndex = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.injector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.component = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.providerTokens = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.references = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.context = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.componentRenderElement = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.renderNode = function () { };
	    /**
	     * @abstract
	     * @param {?} console
	     * @param {...?} values
	     * @return {?}
	     */
	    DebugContext.prototype.logError = function (console) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	    };
	    return DebugContext;
	}());
	/**
	 * This object is used to prevent cycles in the source files and to have a place where
	 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
	 */
	var Services = {
	    setCurrentNode: /** @type {?} */ ((undefined)),
	    createRootView: /** @type {?} */ ((undefined)),
	    createEmbeddedView: /** @type {?} */ ((undefined)),
	    checkAndUpdateView: /** @type {?} */ ((undefined)),
	    checkNoChangesView: /** @type {?} */ ((undefined)),
	    destroyView: /** @type {?} */ ((undefined)),
	    resolveDep: /** @type {?} */ ((undefined)),
	    createDebugContext: /** @type {?} */ ((undefined)),
	    handleEvent: /** @type {?} */ ((undefined)),
	    updateDirectives: /** @type {?} */ ((undefined)),
	    updateRenderer: /** @type {?} */ ((undefined)),
	    dirtyParentQueries: /** @type {?} */ ((undefined)),
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} context
	 * @param {?} oldValue
	 * @param {?} currValue
	 * @param {?} isFirstCheck
	 * @return {?}
	 */
	function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
	    var /** @type {?} */ msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	    if (isFirstCheck) {
	        msg +=
	            " It seems like the view has been created after its parent and its children have been dirty checked." +
	                " Has it been created in a change detection hook ?";
	    }
	    return viewDebugError(msg, context);
	}
	/**
	 * @param {?} err
	 * @param {?} context
	 * @return {?}
	 */
	function viewWrappedDebugError(err, context) {
	    if (!(err instanceof Error)) {
	        // errors that are not Error instances don't have a stack,
	        // so it is ok to wrap them into a new Error object...
	        err = new Error(err.toString());
	    }
	    _addDebugContext(err, context);
	    return err;
	}
	/**
	 * @param {?} msg
	 * @param {?} context
	 * @return {?}
	 */
	function viewDebugError(msg, context) {
	    var /** @type {?} */ err = new Error(msg);
	    _addDebugContext(err, context);
	    return err;
	}
	/**
	 * @param {?} err
	 * @param {?} context
	 * @return {?}
	 */
	function _addDebugContext(err, context) {
	    ((err))[ERROR_DEBUG_CONTEXT] = context;
	    ((err))[ERROR_LOGGER] = context.logError.bind(context);
	}
	/**
	 * @param {?} err
	 * @return {?}
	 */
	function isViewDebugError(err) {
	    return !!getDebugContext(err);
	}
	/**
	 * @param {?} action
	 * @return {?}
	 */
	function viewDestroyedError(action) {
	    return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NOOP = function () { };
	var _tokenKeyCache = new Map();
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function tokenKey(token) {
	    var /** @type {?} */ key = _tokenKeyCache.get(token);
	    if (!key) {
	        key = stringify(token) + '_' + _tokenKeyCache.size;
	        _tokenKeyCache.set(token, key);
	    }
	    return key;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIdx
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function unwrapValue(view, nodeIdx, bindingIdx, value) {
	    if (value instanceof WrappedValue) {
	        value = value.wrapped;
	        var /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
	        var /** @type {?} */ oldValue = view.oldValues[globalBindingIdx];
	        if (oldValue instanceof WrappedValue) {
	            oldValue = oldValue.wrapped;
	        }
	        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
	    }
	    return value;
	}
	var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
	var EMPTY_RENDERER_TYPE_ID = '$$empty';
	/**
	 * @param {?} values
	 * @return {?}
	 */
	function createRendererType2(values) {
	    return {
	        id: UNDEFINED_RENDERER_TYPE_ID,
	        styles: values.styles,
	        encapsulation: values.encapsulation,
	        data: values.data
	    };
	}
	var _renderCompCount = 0;
	/**
	 * @param {?=} type
	 * @return {?}
	 */
	function resolveRendererType2(type) {
	    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
	        // first time we see this RendererType2. Initialize it...
	        var /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||
	            type.styles.length || Object.keys(type.data).length);
	        if (isFilled) {
	            type.id = "c" + _renderCompCount++;
	        }
	        else {
	            type.id = EMPTY_RENDERER_TYPE_ID;
	        }
	    }
	    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
	        type = null;
	    }
	    return type || null;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkBinding(view, def, bindingIdx, value) {
	    var /** @type {?} */ oldValues = view.oldValues;
	    if ((view.state & 1 /* FirstCheck */) ||
	        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
	        return true;
	    }
	    return false;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkAndUpdateBinding(view, def, bindingIdx, value) {
	    if (checkBinding(view, def, bindingIdx, value)) {
	        view.oldValues[def.bindingIndex + bindingIdx] = value;
	        return true;
	    }
	    return false;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkBindingNoChanges(view, def, bindingIdx, value) {
	    var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
	    if ((view.state & 1 /* FirstCheck */) || !devModeEqual(oldValue, value)) {
	        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.index), oldValue, value, (view.state & 1 /* FirstCheck */) !== 0);
	    }
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function markParentViewsForCheck(view) {
	    var /** @type {?} */ currView = view;
	    while (currView) {
	        if (currView.def.flags & 2 /* OnPush */) {
	            currView.state |= 2 /* ChecksEnabled */;
	        }
	        currView = currView.viewContainerParent || currView.parent;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} eventName
	 * @param {?} event
	 * @return {?}
	 */
	function dispatchEvent(view, nodeIndex, eventName, event) {
	    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	    var /** @type {?} */ startView = nodeDef.flags & 16777216 /* ComponentView */ ? asElementData(view, nodeIndex).componentView : view;
	    markParentViewsForCheck(startView);
	    return Services.handleEvent(view, nodeIndex, eventName, event);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function declaredViewContainer(view) {
	    if (view.parent) {
	        var /** @type {?} */ parentView = view.parent;
	        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).index);
	    }
	    return null;
	}
	/**
	 * for component views, this is the host element.
	 * for embedded views, this is the index of the parent node
	 * that contains the view container.
	 * @param {?} view
	 * @return {?}
	 */
	function viewParentEl(view) {
	    var /** @type {?} */ parentView = view.parent;
	    if (parentView) {
	        return ((view.parentNodeDef)).parent;
	    }
	    else {
	        return null;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function renderNode(view, def) {
	    switch (def.flags & 100673535 /* Types */) {
	        case 1 /* TypeElement */:
	            return asElementData(view, def.index).renderElement;
	        case 2 /* TypeText */:
	            return asTextData(view, def.index).renderText;
	    }
	}
	/**
	 * @param {?} target
	 * @param {?} name
	 * @return {?}
	 */
	function elementEventFullName(target, name) {
	    return target ? target + ":" + name : name;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function isComponentView(view) {
	    return !!view.parent && !!(((view.parentNodeDef)).flags & 16384 /* Component */);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function isEmbeddedView(view) {
	    return !!view.parent && !(((view.parentNodeDef)).flags & 16384 /* Component */);
	}
	/**
	 * @param {?} queryId
	 * @return {?}
	 */
	function filterQueryId(queryId) {
	    return 1 << (queryId % 32);
	}
	/**
	 * @param {?} matchedQueriesDsl
	 * @return {?}
	 */
	function splitMatchedQueriesDsl(matchedQueriesDsl) {
	    var /** @type {?} */ matchedQueries = {};
	    var /** @type {?} */ matchedQueryIds = 0;
	    var /** @type {?} */ references = {};
	    if (matchedQueriesDsl) {
	        matchedQueriesDsl.forEach(function (_a) {
	            var queryId = _a[0], valueType = _a[1];
	            if (typeof queryId === 'number') {
	                matchedQueries[queryId] = valueType;
	                matchedQueryIds |= filterQueryId(queryId);
	            }
	            else {
	                references[queryId] = valueType;
	            }
	        });
	    }
	    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function getParentRenderElement(view, renderHost, def) {
	    var /** @type {?} */ renderParent = def.renderParent;
	    if (renderParent) {
	        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||
	            (renderParent.flags & 16777216 /* ComponentView */) === 0 ||
	            (((renderParent.element)).componentRendererType && ((((renderParent.element)).componentRendererType)).encapsulation ===
	                ViewEncapsulation.Native)) {
	            // only children of non components, or children of components with native encapsulation should
	            // be attached.
	            return asElementData(view, /** @type {?} */ ((def.renderParent)).index).renderElement;
	        }
	    }
	    else {
	        return renderHost;
	    }
	}
	var VIEW_DEFINITION_CACHE = new WeakMap();
	/**
	 * @param {?} factory
	 * @return {?}
	 */
	function resolveViewDefinition(factory) {
	    var /** @type {?} */ value = ((VIEW_DEFINITION_CACHE.get(factory)));
	    if (!value) {
	        value = factory(function () { return NOOP; });
	        value.factory = factory;
	        VIEW_DEFINITION_CACHE.set(factory, value);
	    }
	    return value;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function rootRenderNodes(view) {
	    var /** @type {?} */ renderNodes = [];
	    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);
	    return renderNodes;
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?=} target
	 * @return {?}
	 */
	function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
	    // We need to re-compute the parent node in case the nodes have been moved around manually
	    if (action === 3 /* RemoveChild */) {
	        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));
	    }
	    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @param {?} startIndex
	 * @param {?} endIndex
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?=} target
	 * @return {?}
	 */
	function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
	    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 4 /* TypeNgContent */)) {
	            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
	        }
	        // jump to next sibling
	        i += nodeDef.childCount;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} ngContentIndex
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?=} target
	 * @return {?}
	 */
	function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
	    var /** @type {?} */ compView = view;
	    while (compView && !isComponentView(compView)) {
	        compView = compView.parent;
	    }
	    var /** @type {?} */ hostView = ((compView)).parent;
	    var /** @type {?} */ hostElDef = viewParentEl(/** @type {?} */ ((compView)));
	    var /** @type {?} */ startIndex = ((hostElDef)).index + 1;
	    var /** @type {?} */ endIndex = ((hostElDef)).index + ((hostElDef)).childCount;
	    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
	        var /** @type {?} */ nodeDef = ((hostView)).def.nodes[i];
	        if (nodeDef.ngContentIndex === ngContentIndex) {
	            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);
	        }
	        // jump to next sibling
	        i += nodeDef.childCount;
	    }
	    if (!((hostView)).parent) {
	        // a root view
	        var /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];
	        if (projectedNodes) {
	            for (var /** @type {?} */ i = 0; i < projectedNodes.length; i++) {
	                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
	            }
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?=} target
	 * @return {?}
	 */
	function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
	    if (nodeDef.flags & 4 /* TypeNgContent */) {
	        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);
	    }
	    else {
	        var /** @type {?} */ rn = renderNode(view, nodeDef);
	        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 16777216 /* ComponentView */) &&
	            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {
	            // Note: we might need to do both actions.
	            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {
	                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
	            }
	            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {
	                var /** @type {?} */ compView = asElementData(view, nodeDef.index).componentView;
	                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
	            }
	        }
	        else {
	            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
	        }
	        if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	            var /** @type {?} */ embeddedViews = ((asElementData(view, nodeDef.index).viewContainer))._embeddedViews;
	            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
	                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
	            }
	        }
	        if (nodeDef.flags & 1 /* TypeElement */ && !((nodeDef.element)).name) {
	            visitSiblingRenderNodes(view, action, nodeDef.index + 1, nodeDef.index + nodeDef.childCount, parentNode, nextSibling, target);
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} renderNode
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?=} target
	 * @return {?}
	 */
	function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
	    var /** @type {?} */ renderer = view.renderer;
	    switch (action) {
	        case 1 /* AppendChild */:
	            renderer.appendChild(parentNode, renderNode);
	            break;
	        case 2 /* InsertBefore */:
	            renderer.insertBefore(parentNode, renderNode, nextSibling);
	            break;
	        case 3 /* RemoveChild */:
	            renderer.removeChild(parentNode, renderNode);
	            break;
	        case 0 /* Collect */:
	            ((target)).push(renderNode);
	            break;
	    }
	}
	var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	/**
	 * @param {?} name
	 * @return {?}
	 */
	function splitNamespace(name) {
	    if (name[0] === ':') {
	        var /** @type {?} */ match = ((name.match(NS_PREFIX_RE)));
	        return [match[1], match[2]];
	    }
	    return ['', name];
	}
	/**
	 * @param {?} bindings
	 * @return {?}
	 */
	function calcBindingFlags(bindings) {
	    var /** @type {?} */ flags = 0;
	    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	        flags |= bindings[i].flags;
	    }
	    return flags;
	}
	/**
	 * @param {?} valueCount
	 * @param {?} constAndInterp
	 * @return {?}
	 */
	function interpolate(valueCount, constAndInterp) {
	    var /** @type {?} */ result = '';
	    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {
	        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
	    }
	    return result + constAndInterp[valueCount * 2];
	}
	/**
	 * @param {?} valueCount
	 * @param {?} c0
	 * @param {?} a1
	 * @param {?} c1
	 * @param {?=} a2
	 * @param {?=} c2
	 * @param {?=} a3
	 * @param {?=} c3
	 * @param {?=} a4
	 * @param {?=} c4
	 * @param {?=} a5
	 * @param {?=} c5
	 * @param {?=} a6
	 * @param {?=} c6
	 * @param {?=} a7
	 * @param {?=} c7
	 * @param {?=} a8
	 * @param {?=} c8
	 * @param {?=} a9
	 * @param {?=} c9
	 * @return {?}
	 */
	function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	    switch (valueCount) {
	        case 1:
	            return c0 + _toStringWithNull(a1) + c1;
	        case 2:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	        case 3:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3;
	        case 4:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4;
	        case 5:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	        case 6:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	        case 7:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7;
	        case 8:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	        case 9:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	        default:
	            throw new Error("Does not support more than 9 expressions");
	    }
	}
	/**
	 * @param {?} v
	 * @return {?}
	 */
	function _toStringWithNull(v) {
	    return v != null ? v.toString() : '';
	}
	var EMPTY_ARRAY = [];
	var EMPTY_MAP = {};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} flags
	 * @param {?} matchedQueriesDsl
	 * @param {?} ngContentIndex
	 * @param {?} childCount
	 * @param {?=} handleEvent
	 * @param {?=} templateFactory
	 * @return {?}
	 */
	function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
	    flags |= 1 /* TypeElement */;
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    var /** @type {?} */ template = templateFactory ? resolveViewDefinition(templateFactory) : null;
	    return {
	        // will bet set by the view definition
	        index: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: {
	            ns: null,
	            name: null,
	            attrs: null, template: template,
	            componentProvider: null,
	            componentView: null,
	            componentRendererType: null,
	            publicProviders: null,
	            allProviders: null,
	            handleEvent: handleEvent || NOOP
	        },
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: null
	    };
	}
	/**
	 * @param {?} flags
	 * @param {?} matchedQueriesDsl
	 * @param {?} ngContentIndex
	 * @param {?} childCount
	 * @param {?} namespaceAndName
	 * @param {?=} fixedAttrs
	 * @param {?=} bindings
	 * @param {?=} outputs
	 * @param {?=} handleEvent
	 * @param {?=} componentView
	 * @param {?=} componentRendererType
	 * @return {?}
	 */
	function elementDef(flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
	    if (fixedAttrs === void 0) { fixedAttrs = []; }
	    if (!handleEvent) {
	        handleEvent = NOOP;
	    }
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    var /** @type {?} */ ns = ((null));
	    var /** @type {?} */ name = ((null));
	    if (namespaceAndName) {
	        _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
	    }
	    bindings = bindings || [];
	    var /** @type {?} */ bindingDefs = new Array(bindings.length);
	    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];
	        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];
	        var /** @type {?} */ securityContext = ((undefined));
	        var /** @type {?} */ suffix = ((undefined));
	        switch (bindingFlags & 15 /* Types */) {
	            case 4 /* TypeElementStyle */:
	                suffix = (suffixOrSecurityContext);
	                break;
	            case 1 /* TypeElementAttribute */:
	            case 8 /* TypeProperty */:
	                securityContext = (suffixOrSecurityContext);
	                break;
	        }
	        bindingDefs[i] =
	            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };
	    }
	    outputs = outputs || [];
	    var /** @type {?} */ outputDefs = new Array(outputs.length);
	    for (var /** @type {?} */ i = 0; i < outputs.length; i++) {
	        var _e = outputs[i], target = _e[0], eventName = _e[1];
	        outputDefs[i] = {
	            type: 0 /* ElementOutput */,
	            target: /** @type {?} */ (target), eventName: eventName,
	            propName: null
	        };
	    }
	    fixedAttrs = fixedAttrs || [];
	    var /** @type {?} */ attrs = (fixedAttrs.map(function (_a) {
	        var namespaceAndName = _a[0], value = _a[1];
	        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
	        return [ns, name, value];
	    }));
	    componentRendererType = resolveRendererType2(componentRendererType);
	    if (componentView) {
	        flags |= 16777216 /* ComponentView */;
	    }
	    flags |= 1 /* TypeElement */;
	    return {
	        // will bet set by the view definition
	        index: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
	        bindings: bindingDefs,
	        bindingFlags: calcBindingFlags(bindingDefs),
	        outputs: outputDefs,
	        element: {
	            ns: ns,
	            name: name,
	            attrs: attrs,
	            template: null,
	            // will bet set by the view definition
	            componentProvider: null,
	            componentView: componentView || null,
	            componentRendererType: componentRendererType,
	            publicProviders: null,
	            allProviders: null,
	            handleEvent: handleEvent || NOOP,
	        },
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: null
	    };
	    var _b;
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function createElement(view, renderHost, def) {
	    var /** @type {?} */ elDef = ((def.element));
	    var /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;
	    var /** @type {?} */ renderer = view.renderer;
	    var /** @type {?} */ el;
	    if (view.parent || !rootSelectorOrNode) {
	        if (elDef.name) {
	            el = renderer.createElement(elDef.name, elDef.ns);
	        }
	        else {
	            el = renderer.createComment('');
	        }
	        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
	        if (parentEl) {
	            renderer.appendChild(parentEl, el);
	        }
	    }
	    else {
	        el = renderer.selectRootElement(rootSelectorOrNode);
	    }
	    if (elDef.attrs) {
	        for (var /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {
	            var _a = elDef.attrs[i], ns = _a[0], name = _a[1], value = _a[2];
	            renderer.setAttribute(el, name, value, ns);
	        }
	    }
	    return el;
	}
	/**
	 * @param {?} view
	 * @param {?} compView
	 * @param {?} def
	 * @param {?} el
	 * @return {?}
	 */
	function listenToElementOutputs(view, compView, def, el) {
	    for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
	        var /** @type {?} */ output = def.outputs[i];
	        var /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.index, elementEventFullName(output.target, output.eventName));
	        var /** @type {?} */ listenTarget = output.target;
	        var /** @type {?} */ listenerView = view;
	        if (output.target === 'component') {
	            listenTarget = null;
	            listenerView = compView;
	        }
	        var /** @type {?} */ disposable = (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */
	        ((view.disposables))[def.outputIndex + i] = disposable;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} index
	 * @param {?} eventName
	 * @return {?}
	 */
	function renderEventHandlerClosure(view, index, eventName) {
	    return function (event) { return dispatchEvent(view, index, eventName, event); };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ bindLen = def.bindings.length;
	    var /** @type {?} */ changed = false;
	    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
	        changed = true;
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateElementDynamic(view, def, values) {
	    var /** @type {?} */ changed = false;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        if (checkAndUpdateElementValue(view, def, i, values[i]))
	            changed = true;
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkAndUpdateElementValue(view, def, bindingIdx, value) {
	    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
	        return false;
	    }
	    var /** @type {?} */ binding = def.bindings[bindingIdx];
	    var /** @type {?} */ elData = asElementData(view, def.index);
	    var /** @type {?} */ renderNode$$1 = elData.renderElement;
	    var /** @type {?} */ name = ((binding.name));
	    switch (binding.flags & 15 /* Types */) {
	        case 1 /* TypeElementAttribute */:
	            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);
	            break;
	        case 2 /* TypeElementClass */:
	            setElementClass(view, renderNode$$1, name, value);
	            break;
	        case 4 /* TypeElementStyle */:
	            setElementStyle(view, binding, renderNode$$1, name, value);
	            break;
	        case 8 /* TypeProperty */:
	            var /** @type {?} */ bindView = (def.flags & 16777216 /* ComponentView */ &&
	                binding.flags & 32 /* SyntheticHostProperty */) ?
	                elData.componentView :
	                view;
	            setElementProperty(bindView, binding, renderNode$$1, name, value);
	            break;
	    }
	    return true;
	}
	/**
	 * @param {?} view
	 * @param {?} binding
	 * @param {?} renderNode
	 * @param {?} ns
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementAttribute(view, binding, renderNode$$1, ns, name, value) {
	    var /** @type {?} */ securityContext = binding.securityContext;
	    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
	    renderValue = renderValue != null ? renderValue.toString() : null;
	    var /** @type {?} */ renderer = view.renderer;
	    if (value != null) {
	        renderer.setAttribute(renderNode$$1, name, renderValue, ns);
	    }
	    else {
	        renderer.removeAttribute(renderNode$$1, name, ns);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} renderNode
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementClass(view, renderNode$$1, name, value) {
	    var /** @type {?} */ renderer = view.renderer;
	    if (value) {
	        renderer.addClass(renderNode$$1, name);
	    }
	    else {
	        renderer.removeClass(renderNode$$1, name);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} binding
	 * @param {?} renderNode
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementStyle(view, binding, renderNode$$1, name, value) {
	    var /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));
	    if (renderValue != null) {
	        renderValue = renderValue.toString();
	        var /** @type {?} */ unit = binding.suffix;
	        if (unit != null) {
	            renderValue = renderValue + unit;
	        }
	    }
	    else {
	        renderValue = null;
	    }
	    var /** @type {?} */ renderer = view.renderer;
	    if (renderValue != null) {
	        renderer.setStyle(renderNode$$1, name, renderValue);
	    }
	    else {
	        renderer.removeStyle(renderNode$$1, name);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} binding
	 * @param {?} renderNode
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementProperty(view, binding, renderNode$$1, name, value) {
	    var /** @type {?} */ securityContext = binding.securityContext;
	    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
	    view.renderer.setProperty(renderNode$$1, name, renderValue);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} ngContentIndex
	 * @param {?} index
	 * @return {?}
	 */
	function ngContentDef(ngContentIndex, index) {
	    return {
	        // will bet set by the view definition
	        index: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        flags: 4 /* TypeNgContent */,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {}, ngContentIndex: ngContentIndex,
	        childCount: 0,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: null,
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: { index: index }
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function appendNgContent(view, renderHost, def) {
	    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
	    if (!parentEl) {
	        // Nothing to do if there is no parent element.
	        return;
	    }
	    var /** @type {?} */ ngContentIndex = ((def.ngContent)).index;
	    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} parentView
	 * @param {?} elementData
	 * @param {?} viewIndex
	 * @param {?} view
	 * @return {?}
	 */
	function attachEmbeddedView(parentView, elementData, viewIndex, view) {
	    var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
	    if (viewIndex === null || viewIndex === undefined) {
	        viewIndex = embeddedViews.length;
	    }
	    view.viewContainerParent = parentView;
	    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);
	    var /** @type {?} */ dvcElementData = declaredViewContainer(view);
	    if (dvcElementData && dvcElementData !== elementData) {
	        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
	        if (!projectedViews) {
	            projectedViews = dvcElementData.template._projectedViews = [];
	        }
	        projectedViews.push(view);
	    }
	    Services.dirtyParentQueries(view);
	    var /** @type {?} */ prevView = ((viewIndex)) > 0 ? embeddedViews[((viewIndex)) - 1] : null;
	    renderAttachEmbeddedView(elementData, prevView, view);
	}
	/**
	 * @param {?} elementData
	 * @param {?=} viewIndex
	 * @return {?}
	 */
	function detachEmbeddedView(elementData, viewIndex) {
	    var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
	    if (viewIndex == null || viewIndex >= embeddedViews.length) {
	        viewIndex = embeddedViews.length - 1;
	    }
	    if (viewIndex < 0) {
	        return null;
	    }
	    var /** @type {?} */ view = embeddedViews[viewIndex];
	    view.viewContainerParent = null;
	    removeFromArray(embeddedViews, viewIndex);
	    var /** @type {?} */ dvcElementData = declaredViewContainer(view);
	    if (dvcElementData && dvcElementData !== elementData) {
	        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
	        removeFromArray(projectedViews, projectedViews.indexOf(view));
	    }
	    Services.dirtyParentQueries(view);
	    renderDetachView(view);
	    return view;
	}
	/**
	 * @param {?} elementData
	 * @param {?} oldViewIndex
	 * @param {?} newViewIndex
	 * @return {?}
	 */
	function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
	    var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
	    var /** @type {?} */ view = embeddedViews[oldViewIndex];
	    removeFromArray(embeddedViews, oldViewIndex);
	    if (newViewIndex == null) {
	        newViewIndex = embeddedViews.length;
	    }
	    addToArray(embeddedViews, newViewIndex, view);
	    // Note: Don't need to change projectedViews as the order in there
	    // as always invalid...
	    Services.dirtyParentQueries(view);
	    renderDetachView(view);
	    var /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
	    renderAttachEmbeddedView(elementData, prevView, view);
	    return view;
	}
	/**
	 * @param {?} elementData
	 * @param {?} prevView
	 * @param {?} view
	 * @return {?}
	 */
	function renderAttachEmbeddedView(elementData, prevView, view) {
	    var /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :
	        elementData.renderElement;
	    var /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);
	    var /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);
	    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
	    // However, browsers automatically do `appendChild` when there is no `nextSibling`.
	    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function renderDetachView(view) {
	    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);
	}
	/**
	 * @param {?} arr
	 * @param {?} index
	 * @param {?} value
	 * @return {?}
	 */
	function addToArray(arr, index, value) {
	    // perf: array.push is faster than array.splice!
	    if (index >= arr.length) {
	        arr.push(value);
	    }
	    else {
	        arr.splice(index, 0, value);
	    }
	}
	/**
	 * @param {?} arr
	 * @param {?} index
	 * @return {?}
	 */
	function removeFromArray(arr, index) {
	    // perf: array.pop is faster than array.splice!
	    if (index >= arr.length - 1) {
	        arr.pop();
	    }
	    else {
	        arr.splice(index, 1);
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EMPTY_CONTEXT = new Object();
	/**
	 * @param {?} selector
	 * @param {?} componentType
	 * @param {?} viewDefFactory
	 * @param {?} inputs
	 * @param {?} outputs
	 * @param {?} ngContentSelectors
	 * @return {?}
	 */
	function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
	    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
	}
	/**
	 * @param {?} componentFactory
	 * @return {?}
	 */
	function getComponentViewDefinitionFactory(componentFactory) {
	    return ((componentFactory)).viewDefFactory;
	}
	var ComponentFactory_ = (function (_super) {
	    __extends(ComponentFactory_, _super);
	    /**
	     * @param {?} selector
	     * @param {?} componentType
	     * @param {?} viewDefFactory
	     * @param {?} _inputs
	     * @param {?} _outputs
	     * @param {?} ngContentSelectors
	     */
	    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
	        var _this = 
	        // Attention: this ctor is called as top level function.
	        // Putting any logic in here will destroy closure tree shaking!
	        _super.call(this) || this;
	        _this.selector = selector;
	        _this.componentType = componentType;
	        _this._inputs = _inputs;
	        _this._outputs = _outputs;
	        _this.ngContentSelectors = ngContentSelectors;
	        _this.viewDefFactory = viewDefFactory;
	        return _this;
	    }
	    Object.defineProperty(ComponentFactory_.prototype, "inputs", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ inputsArr = [];
	            var /** @type {?} */ inputs = ((this._inputs));
	            for (var /** @type {?} */ propName in inputs) {
	                var /** @type {?} */ templateName = inputs[propName];
	                inputsArr.push({ propName: propName, templateName: templateName });
	            }
	            return inputsArr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactory_.prototype, "outputs", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ outputsArr = [];
	            for (var /** @type {?} */ propName in this._outputs) {
	                var /** @type {?} */ templateName = this._outputs[propName];
	                outputsArr.push({ propName: propName, templateName: templateName });
	            }
	            return outputsArr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Creates a new component.
	     * @param {?} injector
	     * @param {?=} projectableNodes
	     * @param {?=} rootSelectorOrNode
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        if (!ngModule) {
	            throw new Error('ngModule should be provided');
	        }
	        var /** @type {?} */ viewDef = resolveViewDefinition(this.viewDefFactory);
	        var /** @type {?} */ componentNodeIndex = ((((viewDef.nodes[0].element)).componentProvider)).index;
	        var /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
	        var /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;
	        view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
	        return new ComponentRef_(view, new ViewRef_(view), component);
	    };
	    return ComponentFactory_;
	}(ComponentFactory));
	var ComponentRef_ = (function (_super) {
	    __extends(ComponentRef_, _super);
	    /**
	     * @param {?} _view
	     * @param {?} _viewRef
	     * @param {?} _component
	     */
	    function ComponentRef_(_view, _viewRef, _component) {
	        var _this = _super.call(this) || this;
	        _this._view = _view;
	        _this._viewRef = _viewRef;
	        _this._component = _component;
	        _this._elDef = _this._view.def.nodes[0];
	        return _this;
	    }
	    Object.defineProperty(ComponentRef_.prototype, "location", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return new ElementRef(asElementData(this._view, this._elDef.index).renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return new Injector_(this._view, this._elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "instance", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._component; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(ComponentRef_.prototype, "hostView", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._viewRef; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._viewRef; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(ComponentRef_.prototype, "componentType", {
	        /**
	         * @return {?}
	         */
	        get: function () { return (this._component.constructor); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };
	    return ComponentRef_;
	}(ComponentRef));
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} elData
	 * @return {?}
	 */
	function createViewContainerData(view, elDef, elData) {
	    return new ViewContainerRef_(view, elDef, elData);
	}
	var ViewContainerRef_ = (function () {
	    /**
	     * @param {?} _view
	     * @param {?} _elDef
	     * @param {?} _data
	     */
	    function ViewContainerRef_(_view, _elDef, _data) {
	        this._view = _view;
	        this._elDef = _elDef;
	        this._data = _data;
	        /**
	         * \@internal
	         */
	        this._embeddedViews = [];
	    }
	    Object.defineProperty(ViewContainerRef_.prototype, "element", {
	        /**
	         * @return {?}
	         */
	        get: function () { return new ElementRef(this._data.renderElement); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return new Injector_(this._view, this._elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ view = this._view;
	            var /** @type {?} */ elDef = this._elDef.parent;
	            while (!elDef && view) {
	                elDef = viewParentEl(view);
	                view = ((view.parent));
	            }
	            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.clear = function () {
	        var /** @type {?} */ len = this._embeddedViews.length;
	        for (var /** @type {?} */ i = len - 1; i >= 0; i--) {
	            var /** @type {?} */ view = ((detachEmbeddedView(this._data, i)));
	            Services.destroyView(view);
	        }
	    };
	    /**
	     * @param {?} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.get = function (index) {
	        var /** @type {?} */ view = this._embeddedViews[index];
	        if (view) {
	            var /** @type {?} */ ref = new ViewRef_(view);
	            ref.attachToViewContainerRef(this);
	            return ref;
	        }
	        return null;
	    };
	    Object.defineProperty(ViewContainerRef_.prototype, "length", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._embeddedViews.length; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    /**
	     * @template C
	     * @param {?} templateRef
	     * @param {?=} context
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
	        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || ({}));
	        this.insert(viewRef, index);
	        return viewRef;
	    };
	    /**
	     * @template C
	     * @param {?} componentFactory
	     * @param {?=} index
	     * @param {?=} injector
	     * @param {?=} projectableNodes
	     * @param {?=} ngModuleRef
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
	        var /** @type {?} */ contextInjector = injector || this.parentInjector;
	        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
	            ngModuleRef = contextInjector.get(NgModuleRef);
	        }
	        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
	        this.insert(componentRef.hostView, index);
	        return componentRef;
	    };
	    /**
	     * @param {?} viewRef
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.insert = function (viewRef, index) {
	        var /** @type {?} */ viewRef_ = (viewRef);
	        var /** @type {?} */ viewData = viewRef_._view;
	        attachEmbeddedView(this._view, this._data, index, viewData);
	        viewRef_.attachToViewContainerRef(this);
	        return viewRef;
	    };
	    /**
	     * @param {?} viewRef
	     * @param {?} currentIndex
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
	        var /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);
	        moveEmbeddedView(this._data, previousIndex, currentIndex);
	        return viewRef;
	    };
	    /**
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.indexOf = function (viewRef) {
	        return this._embeddedViews.indexOf(((viewRef))._view);
	    };
	    /**
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.remove = function (index) {
	        var /** @type {?} */ viewData = detachEmbeddedView(this._data, index);
	        if (viewData) {
	            Services.destroyView(viewData);
	        }
	    };
	    /**
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.detach = function (index) {
	        var /** @type {?} */ view = detachEmbeddedView(this._data, index);
	        return view ? new ViewRef_(view) : null;
	    };
	    return ViewContainerRef_;
	}());
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function createChangeDetectorRef(view) {
	    return new ViewRef_(view);
	}
	var ViewRef_ = (function () {
	    /**
	     * @param {?} _view
	     */
	    function ViewRef_(_view) {
	        this._view = _view;
	        this._viewContainerRef = null;
	        this._appRef = null;
	    }
	    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	        /**
	         * @return {?}
	         */
	        get: function () { return rootRenderNodes(this._view); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "context", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._view.context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "destroyed", {
	        /**
	         * @return {?}
	         */
	        get: function () { return (this._view.state & 8 /* Destroyed */) !== 0; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.detach = function () { this._view.state &= ~2 /* ChecksEnabled */; };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.detectChanges = function () { Services.checkAndUpdateView(this._view); };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.reattach = function () { this._view.state |= 2 /* ChecksEnabled */; };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    ViewRef_.prototype.onDestroy = function (callback) {
	        if (!this._view.disposables) {
	            this._view.disposables = [];
	        }
	        this._view.disposables.push(/** @type {?} */ (callback));
	    };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.destroy = function () {
	        if (this._appRef) {
	            this._appRef.detachView(this);
	        }
	        else if (this._viewContainerRef) {
	            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
	        }
	        Services.destroyView(this._view);
	    };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.detachFromAppRef = function () {
	        this._appRef = null;
	        renderDetachView(this._view);
	        Services.dirtyParentQueries(this._view);
	    };
	    /**
	     * @param {?} appRef
	     * @return {?}
	     */
	    ViewRef_.prototype.attachToAppRef = function (appRef) {
	        if (this._viewContainerRef) {
	            throw new Error('This view is already attached to a ViewContainer!');
	        }
	        this._appRef = appRef;
	    };
	    /**
	     * @param {?} vcRef
	     * @return {?}
	     */
	    ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {
	        if (this._appRef) {
	            throw new Error('This view is already attached directly to the ApplicationRef!');
	        }
	        this._viewContainerRef = vcRef;
	    };
	    return ViewRef_;
	}());
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createTemplateData(view, def) {
	    return new TemplateRef_(view, def);
	}
	var TemplateRef_ = (function (_super) {
	    __extends(TemplateRef_, _super);
	    /**
	     * @param {?} _parentView
	     * @param {?} _def
	     */
	    function TemplateRef_(_parentView, _def) {
	        var _this = _super.call(this) || this;
	        _this._parentView = _parentView;
	        _this._def = _def;
	        return _this;
	    }
	    /**
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateRef_.prototype.createEmbeddedView = function (context) {
	        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, context));
	    };
	    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return new ElementRef(asElementData(this._parentView, this._def.index).renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TemplateRef_;
	}(TemplateRef));
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @return {?}
	 */
	function createInjector(view, elDef) {
	    return new Injector_(view, elDef);
	}
	var Injector_ = (function () {
	    /**
	     * @param {?} view
	     * @param {?} elDef
	     */
	    function Injector_(view, elDef) {
	        this.view = view;
	        this.elDef = elDef;
	    }
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    Injector_.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	        var /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 16777216 /* ComponentView */) !== 0 : false;
	        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);
	    };
	    return Injector_;
	}());
	/**
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function nodeValue(view, index) {
	    var /** @type {?} */ def = view.def.nodes[index];
	    if (def.flags & 1 /* TypeElement */) {
	        var /** @type {?} */ elData = asElementData(view, def.index);
	        return ((def.element)).template ? elData.template : elData.renderElement;
	    }
	    else if (def.flags & 2 /* TypeText */) {
	        return asTextData(view, def.index).renderText;
	    }
	    else if (def.flags & (10112 /* CatProvider */ | 8 /* TypePipe */)) {
	        return asProviderData(view, def.index).instance;
	    }
	    throw new Error("Illegal state: read nodeValue for node index " + index);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function createRendererV1(view) {
	    return new RendererAdapter(view.renderer);
	}
	var RendererAdapter = (function () {
	    /**
	     * @param {?} delegate
	     */
	    function RendererAdapter(delegate) {
	        this.delegate = delegate;
	    }
	    /**
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {
	        return this.delegate.selectRootElement(selectorOrNode);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} namespaceAndName
	     * @return {?}
	     */
	    RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {
	        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
	        var /** @type {?} */ el = this.delegate.createElement(name, ns);
	        if (parent) {
	            this.delegate.appendChild(parent, el);
	        }
	        return el;
	    };
	    /**
	     * @param {?} hostElement
	     * @return {?}
	     */
	    RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };
	    /**
	     * @param {?} parentElement
	     * @return {?}
	     */
	    RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {
	        var /** @type {?} */ comment = this.delegate.createComment('');
	        if (parentElement) {
	            this.delegate.appendChild(parentElement, comment);
	        }
	        return comment;
	    };
	    /**
	     * @param {?} parentElement
	     * @param {?} value
	     * @return {?}
	     */
	    RendererAdapter.prototype.createText = function (parentElement, value) {
	        var /** @type {?} */ node = this.delegate.createText(value);
	        if (parentElement) {
	            this.delegate.appendChild(parentElement, node);
	        }
	        return node;
	    };
	    /**
	     * @param {?} parentElement
	     * @param {?} nodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {
	        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	            this.delegate.appendChild(parentElement, nodes[i]);
	        }
	    };
	    /**
	     * @param {?} node
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {
	        var /** @type {?} */ parentElement = this.delegate.parentNode(node);
	        var /** @type {?} */ nextSibling = this.delegate.nextSibling(node);
	        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
	            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
	        }
	    };
	    /**
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.detachView = function (viewRootNodes) {
	        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
	            var /** @type {?} */ node = viewRootNodes[i];
	            var /** @type {?} */ parentElement = this.delegate.parentNode(node);
	            this.delegate.removeChild(parentElement, node);
	        }
	    };
	    /**
	     * @param {?} hostElement
	     * @param {?} viewAllNodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {
	        for (var /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {
	            ((this.delegate.destroyNode))(viewAllNodes[i]);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    RendererAdapter.prototype.listen = function (renderElement, name, callback) {
	        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));
	    };
	    /**
	     * @param {?} target
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    RendererAdapter.prototype.listenGlobal = function (target, name, callback) {
	        return this.delegate.listen(target, name, /** @type {?} */ (callback));
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	        this.delegate.setProperty(renderElement, propertyName, propertyValue);
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} namespaceAndName
	     * @param {?} attributeValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {
	        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
	        if (attributeValue != null) {
	            this.delegate.setAttribute(renderElement, name, attributeValue, ns);
	        }
	        else {
	            this.delegate.removeAttribute(renderElement, name, ns);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
	    /**
	     * @param {?} renderElement
	     * @param {?} className
	     * @param {?} isAdd
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {
	        if (isAdd) {
	            this.delegate.addClass(renderElement, className);
	        }
	        else {
	            this.delegate.removeClass(renderElement, className);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	        if (styleValue != null) {
	            this.delegate.setStyle(renderElement, styleName, styleValue);
	        }
	        else {
	            this.delegate.removeStyle(renderElement, styleName);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} methodName
	     * @param {?} args
	     * @return {?}
	     */
	    RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	        ((renderElement))[methodName].apply(renderElement, args);
	    };
	    /**
	     * @param {?} renderNode
	     * @param {?} text
	     * @return {?}
	     */
	    RendererAdapter.prototype.setText = function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };
	    /**
	     * @return {?}
	     */
	    RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };
	    return RendererAdapter;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var RendererV1TokenKey = tokenKey(Renderer);
	var Renderer2TokenKey = tokenKey(Renderer2);
	var ElementRefTokenKey = tokenKey(ElementRef);
	var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
	var TemplateRefTokenKey = tokenKey(TemplateRef);
	var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
	var InjectorRefTokenKey = tokenKey(Injector);
	var NOT_CREATED = new Object();
	/**
	 * @param {?} flags
	 * @param {?} matchedQueries
	 * @param {?} childCount
	 * @param {?} ctor
	 * @param {?} deps
	 * @param {?=} props
	 * @param {?=} outputs
	 * @return {?}
	 */
	function directiveDef(flags, matchedQueries, childCount, ctor, deps, props, outputs) {
	    var /** @type {?} */ bindings = [];
	    if (props) {
	        for (var /** @type {?} */ prop in props) {
	            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];
	            bindings[bindingIndex] = {
	                flags: 8 /* TypeProperty */,
	                name: prop, nonMinifiedName: nonMinifiedName,
	                ns: null,
	                securityContext: null,
	                suffix: null
	            };
	        }
	    }
	    var /** @type {?} */ outputDefs = [];
	    if (outputs) {
	        for (var /** @type {?} */ propName in outputs) {
	            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });
	        }
	    }
	    flags |= 8192 /* TypeDirective */;
	    return _def(flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
	}
	/**
	 * @param {?} flags
	 * @param {?} ctor
	 * @param {?} deps
	 * @return {?}
	 */
	function pipeDef(flags, ctor, deps) {
	    flags |= 8 /* TypePipe */;
	    return _def(flags, null, 0, ctor, ctor, deps);
	}
	/**
	 * @param {?} flags
	 * @param {?} matchedQueries
	 * @param {?} token
	 * @param {?} value
	 * @param {?} deps
	 * @return {?}
	 */
	function providerDef(flags, matchedQueries, token, value, deps) {
	    return _def(flags, matchedQueries, 0, token, value, deps);
	}
	/**
	 * @param {?} flags
	 * @param {?} matchedQueriesDsl
	 * @param {?} childCount
	 * @param {?} token
	 * @param {?} value
	 * @param {?} deps
	 * @param {?=} bindings
	 * @param {?=} outputs
	 * @return {?}
	 */
	function _def(flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    if (!outputs) {
	        outputs = [];
	    }
	    if (!bindings) {
	        bindings = [];
	    }
	    var /** @type {?} */ depDefs = deps.map(function (value) {
	        var /** @type {?} */ token;
	        var /** @type {?} */ flags;
	        if (Array.isArray(value)) {
	            flags = value[0], token = value[1];
	        }
	        else {
	            flags = 0 /* None */;
	            token = value;
	        }
	        return { flags: flags, token: token, tokenKey: tokenKey(token) };
	    });
	    return {
	        // will bet set by the view definition
	        index: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,
	        ngContentIndex: -1, childCount: childCount, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings), outputs: outputs,
	        element: null,
	        provider: { token: token, tokenKey: tokenKey(token), value: value, deps: depDefs },
	        text: null,
	        query: null,
	        ngContent: null
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createProviderInstance(view, def) {
	    return def.flags & 2048 /* LazyProvider */ ? NOT_CREATED : _createProviderInstance(view, def);
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createPipeInstance(view, def) {
	    // deps are looked up from component.
	    var /** @type {?} */ compView = view;
	    while (compView.parent && !isComponentView(compView)) {
	        compView = compView.parent;
	    }
	    // pipes can see the private services of the component
	    var /** @type {?} */ allowPrivateServices = true;
	    // pipes are always eager and classes!
	    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createDirectiveInstance(view, def) {
	    // components can see other private services, other directives can't.
	    var /** @type {?} */ allowPrivateServices = (def.flags & 16384 /* Component */) > 0;
	    // directives are always eager and classes!
	    var /** @type {?} */ instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);
	    if (def.outputs.length) {
	        for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
	            var /** @type {?} */ output = def.outputs[i];
	            var /** @type {?} */ subscription = instance[((output.propName))].subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).index, output.eventName)); /** @type {?} */
	            ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
	        }
	    }
	    return instance;
	}
	/**
	 * @param {?} view
	 * @param {?} index
	 * @param {?} eventName
	 * @return {?}
	 */
	function eventHandlerClosure(view, index, eventName) {
	    return function (event) { return dispatchEvent(view, index, eventName, event); };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ providerData = asProviderData(view, def.index);
	    var /** @type {?} */ directive = providerData.instance;
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ changes = ((undefined));
	    var /** @type {?} */ bindLen = def.bindings.length;
	    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 0, v0, changes);
	    }
	    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 1, v1, changes);
	    }
	    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 2, v2, changes);
	    }
	    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 3, v3, changes);
	    }
	    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 4, v4, changes);
	    }
	    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 5, v5, changes);
	    }
	    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 6, v6, changes);
	    }
	    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 7, v7, changes);
	    }
	    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 8, v8, changes);
	    }
	    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 9, v9, changes);
	    }
	    if (changes) {
	        directive.ngOnChanges(changes);
	    }
	    if ((view.state & 1 /* FirstCheck */) && (def.flags & 32768 /* OnInit */)) {
	        directive.ngOnInit();
	    }
	    if (def.flags & 131072 /* DoCheck */) {
	        directive.ngDoCheck();
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateDirectiveDynamic(view, def, values) {
	    var /** @type {?} */ providerData = asProviderData(view, def.index);
	    var /** @type {?} */ directive = providerData.instance;
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ changes = ((undefined));
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        if (checkBinding(view, def, i, values[i])) {
	            changed = true;
	            changes = updateProp(view, providerData, def, i, values[i], changes);
	        }
	    }
	    if (changes) {
	        directive.ngOnChanges(changes);
	    }
	    if ((view.state & 1 /* FirstCheck */) && (def.flags & 32768 /* OnInit */)) {
	        directive.ngOnInit();
	    }
	    if (def.flags & 131072 /* DoCheck */) {
	        directive.ngDoCheck();
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function _createProviderInstance(view, def) {
	    // private services can see other private services
	    var /** @type {?} */ allowPrivateServices = (def.flags & 4096 /* PrivateProvider */) > 0;
	    var /** @type {?} */ providerDef = def.provider;
	    var /** @type {?} */ injectable;
	    switch (def.flags & 100673535 /* Types */) {
	        case 256 /* TypeClassProvider */:
	            injectable = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);
	            break;
	        case 512 /* TypeFactoryProvider */:
	            injectable = callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);
	            break;
	        case 1024 /* TypeUseExistingProvider */:
	            injectable = resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);
	            break;
	        case 128 /* TypeValueProvider */:
	            injectable = ((providerDef)).value;
	            break;
	    }
	    return injectable;
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @param {?} ctor
	 * @param {?} deps
	 * @return {?}
	 */
	function createClass(view, elDef, allowPrivateServices, ctor, deps) {
	    var /** @type {?} */ len = deps.length;
	    var /** @type {?} */ injectable;
	    switch (len) {
	        case 0:
	            injectable = new ctor();
	            break;
	        case 1:
	            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
	            break;
	        case 2:
	            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
	            break;
	        case 3:
	            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
	            break;
	        default:
	            var /** @type {?} */ depValues = new Array(len);
	            for (var /** @type {?} */ i = 0; i < len; i++) {
	                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
	            }
	            injectable = new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();
	    }
	    return injectable;
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @param {?} factory
	 * @param {?} deps
	 * @return {?}
	 */
	function callFactory(view, elDef, allowPrivateServices, factory, deps) {
	    var /** @type {?} */ len = deps.length;
	    var /** @type {?} */ injectable;
	    switch (len) {
	        case 0:
	            injectable = factory();
	            break;
	        case 1:
	            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
	            break;
	        case 2:
	            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
	            break;
	        case 3:
	            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
	            break;
	        default:
	            var /** @type {?} */ depValues = Array(len);
	            for (var /** @type {?} */ i = 0; i < len; i++) {
	                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
	            }
	            injectable = factory.apply(void 0, depValues);
	    }
	    return injectable;
	}
	// This default value is when checking the hierarchy for a token.
	//
	// It means both:
	// - the token is not provided by the current injector,
	// - only the element injectors should be checked (ie do not check module injectors
	//
	//          mod1
	//         /
	//       el1   mod2
	//         \  /
	//         el2
	//
	// When requesting el2.injector.get(token), we should check in the following order and return the
	// first found value:
	// - el2.injector.get(token, default)
	// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
	// - mod2.injector.get(token, default)
	var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @param {?} depDef
	 * @param {?=} notFoundValue
	 * @return {?}
	 */
	function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
	    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	    if (depDef.flags & 8 /* Value */) {
	        return depDef.token;
	    }
	    var /** @type {?} */ startView = view;
	    if (depDef.flags & 2 /* Optional */) {
	        notFoundValue = null;
	    }
	    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;
	    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {
	        allowPrivateServices = false;
	        elDef = ((elDef.parent));
	    }
	    while (view) {
	        if (elDef) {
	            switch (tokenKey$$1) {
	                case RendererV1TokenKey: {
	                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
	                    return createRendererV1(compView);
	                }
	                case Renderer2TokenKey: {
	                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
	                    return compView.renderer;
	                }
	                case ElementRefTokenKey:
	                    return new ElementRef(asElementData(view, elDef.index).renderElement);
	                case ViewContainerRefTokenKey:
	                    return asElementData(view, elDef.index).viewContainer;
	                case TemplateRefTokenKey: {
	                    if (((elDef.element)).template) {
	                        return asElementData(view, elDef.index).template;
	                    }
	                    break;
	                }
	                case ChangeDetectorRefTokenKey: {
	                    var /** @type {?} */ cdView = findCompView(view, elDef, allowPrivateServices);
	                    return createChangeDetectorRef(cdView);
	                }
	                case InjectorRefTokenKey:
	                    return createInjector(view, elDef);
	                default:
	                    var /** @type {?} */ providerDef_1 = (((allowPrivateServices ? ((elDef.element)).allProviders : ((elDef.element)).publicProviders)))[tokenKey$$1];
	                    if (providerDef_1) {
	                        var /** @type {?} */ providerData = asProviderData(view, providerDef_1.index);
	                        if (providerData.instance === NOT_CREATED) {
	                            providerData.instance = _createProviderInstance(view, providerDef_1);
	                        }
	                        return providerData.instance;
	                    }
	            }
	        }
	        allowPrivateServices = isComponentView(view);
	        elDef = ((viewParentEl(view)));
	        view = ((view.parent));
	    }
	    var /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
	    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
	        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
	        // Return the value from the root element injector when
	        // - it provides it
	        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	        // - the module injector should not be checked
	        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	        return value;
	    }
	    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @return {?}
	 */
	function findCompView(view, elDef, allowPrivateServices) {
	    var /** @type {?} */ compView;
	    if (allowPrivateServices) {
	        compView = asElementData(view, elDef.index).componentView;
	    }
	    else {
	        compView = view;
	        while (compView.parent && !isComponentView(compView)) {
	            compView = compView.parent;
	        }
	    }
	    return compView;
	}
	/**
	 * @param {?} view
	 * @param {?} providerData
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @param {?} changes
	 * @return {?}
	 */
	function updateProp(view, providerData, def, bindingIdx, value, changes) {
	    if (def.flags & 16384 /* Component */) {
	        var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((def.parent)).index).componentView;
	        if (compView.def.flags & 2 /* OnPush */) {
	            compView.state |= 2 /* ChecksEnabled */;
	        }
	    }
	    var /** @type {?} */ binding = def.bindings[bindingIdx];
	    var /** @type {?} */ propName = ((binding.name));
	    // Note: This is still safe with Closure Compiler as
	    // the user passed in the property name as an object has to `providerDef`,
	    // so Closure Compiler will have renamed the property correctly already.
	    providerData.instance[propName] = value;
	    if (def.flags & 262144 /* OnChanges */) {
	        changes = changes || {};
	        var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
	        if (oldValue instanceof WrappedValue) {
	            oldValue = oldValue.wrapped;
	        }
	        var /** @type {?} */ binding_1 = def.bindings[bindingIdx];
	        changes[((binding_1.nonMinifiedName))] =
	            new SimpleChange(oldValue, value, (view.state & 1 /* FirstCheck */) !== 0);
	    }
	    view.oldValues[def.bindingIndex + bindingIdx] = value;
	    return changes;
	}
	/**
	 * @param {?} view
	 * @param {?} lifecycles
	 * @return {?}
	 */
	function callLifecycleHooksChildrenFirst(view, lifecycles) {
	    if (!(view.def.nodeFlags & lifecycles)) {
	        return;
	    }
	    var /** @type {?} */ nodes = view.def.nodes;
	    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	        var /** @type {?} */ nodeDef = nodes[i];
	        var /** @type {?} */ parent = nodeDef.parent;
	        if (!parent && nodeDef.flags & lifecycles) {
	            // matching root node (e.g. a pipe)
	            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
	        }
	        if ((nodeDef.childFlags & lifecycles) === 0) {
	            // no child matches one of the lifecycles
	            i += nodeDef.childCount;
	        }
	        while (parent && (parent.flags & 1 /* TypeElement */) &&
	            i === parent.index + parent.childCount) {
	            // last child of an element
	            if (parent.directChildFlags & lifecycles) {
	                callElementProvidersLifecycles(view, parent, lifecycles);
	            }
	            parent = parent.parent;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} lifecycles
	 * @return {?}
	 */
	function callElementProvidersLifecycles(view, elDef, lifecycles) {
	    for (var /** @type {?} */ i = elDef.index + 1; i <= elDef.index + elDef.childCount; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & lifecycles) {
	            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
	        }
	        // only visit direct children
	        i += nodeDef.childCount;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} index
	 * @param {?} lifecycles
	 * @return {?}
	 */
	function callProviderLifecycles(view, index, lifecycles) {
	    var /** @type {?} */ provider = asProviderData(view, index).instance;
	    if (provider === NOT_CREATED) {
	        return;
	    }
	    Services.setCurrentNode(view, index);
	    if (lifecycles & 524288 /* AfterContentInit */) {
	        provider.ngAfterContentInit();
	    }
	    if (lifecycles & 1048576 /* AfterContentChecked */) {
	        provider.ngAfterContentChecked();
	    }
	    if (lifecycles & 2097152 /* AfterViewInit */) {
	        provider.ngAfterViewInit();
	    }
	    if (lifecycles & 4194304 /* AfterViewChecked */) {
	        provider.ngAfterViewChecked();
	    }
	    if (lifecycles & 65536 /* OnDestroy */) {
	        provider.ngOnDestroy();
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} argCount
	 * @return {?}
	 */
	function purePipeDef(argCount) {
	    // argCount + 1 to include the pipe as first arg
	    return _pureExpressionDef(64 /* TypePurePipe */, new Array(argCount + 1));
	}
	/**
	 * @param {?} argCount
	 * @return {?}
	 */
	function pureArrayDef(argCount) {
	    return _pureExpressionDef(16 /* TypePureArray */, new Array(argCount));
	}
	/**
	 * @param {?} propertyNames
	 * @return {?}
	 */
	function pureObjectDef(propertyNames) {
	    return _pureExpressionDef(32 /* TypePureObject */, propertyNames);
	}
	/**
	 * @param {?} flags
	 * @param {?} propertyNames
	 * @return {?}
	 */
	function _pureExpressionDef(flags, propertyNames) {
	    var /** @type {?} */ bindings = new Array(propertyNames.length);
	    for (var /** @type {?} */ i = 0; i < propertyNames.length; i++) {
	        var /** @type {?} */ prop = propertyNames[i];
	        bindings[i] = {
	            flags: 8 /* TypeProperty */,
	            name: prop,
	            ns: null,
	            nonMinifiedName: prop,
	            securityContext: null,
	            suffix: null
	        };
	    }
	    return {
	        // will bet set by the view definition
	        index: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        ngContentIndex: -1,
	        childCount: 0, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings),
	        outputs: [],
	        element: null,
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: null
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createPureExpression(view, def) {
	    return { value: undefined };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ bindLen = bindings.length;
	    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
	        changed = true;
	    if (changed) {
	        var /** @type {?} */ data = asPureExpressionData(view, def.index);
	        var /** @type {?} */ value = void 0;
	        switch (def.flags & 100673535 /* Types */) {
	            case 16 /* TypePureArray */:
	                value = new Array(bindings.length);
	                if (bindLen > 0)
	                    value[0] = v0;
	                if (bindLen > 1)
	                    value[1] = v1;
	                if (bindLen > 2)
	                    value[2] = v2;
	                if (bindLen > 3)
	                    value[3] = v3;
	                if (bindLen > 4)
	                    value[4] = v4;
	                if (bindLen > 5)
	                    value[5] = v5;
	                if (bindLen > 6)
	                    value[6] = v6;
	                if (bindLen > 7)
	                    value[7] = v7;
	                if (bindLen > 8)
	                    value[8] = v8;
	                if (bindLen > 9)
	                    value[9] = v9;
	                break;
	            case 32 /* TypePureObject */:
	                value = {};
	                if (bindLen > 0)
	                    value[((bindings[0].name))] = v0;
	                if (bindLen > 1)
	                    value[((bindings[1].name))] = v1;
	                if (bindLen > 2)
	                    value[((bindings[2].name))] = v2;
	                if (bindLen > 3)
	                    value[((bindings[3].name))] = v3;
	                if (bindLen > 4)
	                    value[((bindings[4].name))] = v4;
	                if (bindLen > 5)
	                    value[((bindings[5].name))] = v5;
	                if (bindLen > 6)
	                    value[((bindings[6].name))] = v6;
	                if (bindLen > 7)
	                    value[((bindings[7].name))] = v7;
	                if (bindLen > 8)
	                    value[((bindings[8].name))] = v8;
	                if (bindLen > 9)
	                    value[((bindings[9].name))] = v9;
	                break;
	            case 64 /* TypePurePipe */:
	                var /** @type {?} */ pipe = v0;
	                switch (bindLen) {
	                    case 1:
	                        value = pipe.transform(v0);
	                        break;
	                    case 2:
	                        value = pipe.transform(v1);
	                        break;
	                    case 3:
	                        value = pipe.transform(v1, v2);
	                        break;
	                    case 4:
	                        value = pipe.transform(v1, v2, v3);
	                        break;
	                    case 5:
	                        value = pipe.transform(v1, v2, v3, v4);
	                        break;
	                    case 6:
	                        value = pipe.transform(v1, v2, v3, v4, v5);
	                        break;
	                    case 7:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6);
	                        break;
	                    case 8:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
	                        break;
	                    case 9:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
	                        break;
	                    case 10:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
	                        break;
	                }
	                break;
	        }
	        data.value = value;
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdatePureExpressionDynamic(view, def, values) {
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ changed = false;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        // Note: We need to loop over all values, so that
	        // the old values are updates as well!
	        if (checkAndUpdateBinding(view, def, i, values[i])) {
	            changed = true;
	        }
	    }
	    if (changed) {
	        var /** @type {?} */ data = asPureExpressionData(view, def.index);
	        var /** @type {?} */ value = void 0;
	        switch (def.flags & 100673535 /* Types */) {
	            case 16 /* TypePureArray */:
	                value = values;
	                break;
	            case 32 /* TypePureObject */:
	                value = {};
	                for (var /** @type {?} */ i = 0; i < values.length; i++) {
	                    value[((bindings[i].name))] = values[i];
	                }
	                break;
	            case 64 /* TypePurePipe */:
	                var /** @type {?} */ pipe = values[0];
	                var /** @type {?} */ params = values.slice(1);
	                value = pipe.transform.apply(pipe, params);
	                break;
	        }
	        data.value = value;
	    }
	    return changed;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} flags
	 * @param {?} id
	 * @param {?} bindings
	 * @return {?}
	 */
	function queryDef(flags, id, bindings) {
	    var /** @type {?} */ bindingDefs = [];
	    for (var /** @type {?} */ propName in bindings) {
	        var /** @type {?} */ bindingType = bindings[propName];
	        bindingDefs.push({ propName: propName, bindingType: bindingType });
	    }
	    return {
	        // will bet set by the view definition
	        index: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        ngContentIndex: -1,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        childCount: 0,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: null,
	        provider: null,
	        text: null,
	        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },
	        ngContent: null
	    };
	}
	/**
	 * @return {?}
	 */
	function createQuery() {
	    return new QueryList();
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function dirtyParentQueries(view) {
	    var /** @type {?} */ queryIds = view.def.nodeMatchedQueries;
	    while (view.parent && isEmbeddedView(view)) {
	        var /** @type {?} */ tplDef = ((view.parentNodeDef));
	        view = view.parent;
	        // content queries
	        var /** @type {?} */ end = tplDef.index + tplDef.childCount;
	        for (var /** @type {?} */ i = 0; i <= end; i++) {
	            var /** @type {?} */ nodeDef = view.def.nodes[i];
	            if ((nodeDef.flags & 33554432 /* TypeContentQuery */) &&
	                (nodeDef.flags & 268435456 /* DynamicQuery */) &&
	                (((nodeDef.query)).filterId & queryIds) === ((nodeDef.query)).filterId) {
	                asQueryList(view, i).setDirty();
	            }
	            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.index) ||
	                !(nodeDef.childFlags & 33554432 /* TypeContentQuery */) ||
	                !(nodeDef.childFlags & 268435456 /* DynamicQuery */)) {
	                // skip elements that don't contain the template element or no query.
	                i += nodeDef.childCount;
	            }
	        }
	    }
	    // view queries
	    if (view.def.nodeFlags & 67108864 /* TypeViewQuery */) {
	        for (var /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {
	            var /** @type {?} */ nodeDef = view.def.nodes[i];
	            if ((nodeDef.flags & 67108864 /* TypeViewQuery */) && (nodeDef.flags & 268435456 /* DynamicQuery */)) {
	                asQueryList(view, i).setDirty();
	            }
	            // only visit the root nodes
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @return {?}
	 */
	function checkAndUpdateQuery(view, nodeDef) {
	    var /** @type {?} */ queryList = asQueryList(view, nodeDef.index);
	    if (!queryList.dirty) {
	        return;
	    }
	    var /** @type {?} */ directiveInstance;
	    var /** @type {?} */ newValues = ((undefined));
	    if (nodeDef.flags & 33554432 /* TypeContentQuery */) {
	        var /** @type {?} */ elementDef_1 = ((((nodeDef.parent)).parent));
	        newValues = calcQueryValues(view, elementDef_1.index, elementDef_1.index + elementDef_1.childCount, /** @type {?} */ ((nodeDef.query)), []);
	        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).index).instance;
	    }
	    else if (nodeDef.flags & 67108864 /* TypeViewQuery */) {
	        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);
	        directiveInstance = view.component;
	    }
	    queryList.reset(newValues);
	    var /** @type {?} */ bindings = ((nodeDef.query)).bindings;
	    var /** @type {?} */ notify = false;
	    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	        var /** @type {?} */ binding = bindings[i];
	        var /** @type {?} */ boundValue = void 0;
	        switch (binding.bindingType) {
	            case 0 /* First */:
	                boundValue = queryList.first;
	                break;
	            case 1 /* All */:
	                boundValue = queryList;
	                notify = true;
	                break;
	        }
	        directiveInstance[binding.propName] = boundValue;
	    }
	    if (notify) {
	        queryList.notifyOnChanges();
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} startIndex
	 * @param {?} endIndex
	 * @param {?} queryDef
	 * @param {?} values
	 * @return {?}
	 */
	function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
	    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        var /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];
	        if (valueType != null) {
	            values.push(getQueryValue(view, nodeDef, valueType));
	        }
	        if (nodeDef.flags & 1 /* TypeElement */ && ((nodeDef.element)).template &&
	            (((((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===
	                queryDef.filterId) {
	            // check embedded views that were attached at the place of their template.
	            var /** @type {?} */ elementData = asElementData(view, i);
	            if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	                var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
	                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
	                    var /** @type {?} */ embeddedView = embeddedViews[k];
	                    var /** @type {?} */ dvc = declaredViewContainer(embeddedView);
	                    if (dvc && dvc === elementData) {
	                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
	                    }
	                }
	            }
	            var /** @type {?} */ projectedViews = elementData.template._projectedViews;
	            if (projectedViews) {
	                for (var /** @type {?} */ k = 0; k < projectedViews.length; k++) {
	                    var /** @type {?} */ projectedView = projectedViews[k];
	                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
	                }
	            }
	        }
	        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
	            // if no child matches the query, skip the children.
	            i += nodeDef.childCount;
	        }
	    }
	    return values;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} queryValueType
	 * @return {?}
	 */
	function getQueryValue(view, nodeDef, queryValueType) {
	    if (queryValueType != null) {
	        // a match
	        var /** @type {?} */ value = void 0;
	        switch (queryValueType) {
	            case 1 /* RenderElement */:
	                value = asElementData(view, nodeDef.index).renderElement;
	                break;
	            case 0 /* ElementRef */:
	                value = new ElementRef(asElementData(view, nodeDef.index).renderElement);
	                break;
	            case 2 /* TemplateRef */:
	                value = asElementData(view, nodeDef.index).template;
	                break;
	            case 3 /* ViewContainerRef */:
	                value = asElementData(view, nodeDef.index).viewContainer;
	                break;
	            case 4 /* Provider */:
	                value = asProviderData(view, nodeDef.index).instance;
	                break;
	        }
	        return value;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} ngContentIndex
	 * @param {?} constants
	 * @return {?}
	 */
	function textDef(ngContentIndex, constants) {
	    var /** @type {?} */ bindings = new Array(constants.length - 1);
	    for (var /** @type {?} */ i = 1; i < constants.length; i++) {
	        bindings[i - 1] = {
	            flags: 8 /* TypeProperty */,
	            name: null,
	            ns: null,
	            nonMinifiedName: null,
	            securityContext: null,
	            suffix: constants[i]
	        };
	    }
	    var /** @type {?} */ flags = 2;
	    return {
	        // will bet set by the view definition
	        index: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {}, ngContentIndex: ngContentIndex,
	        childCount: 0, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings),
	        outputs: [],
	        element: null,
	        provider: null,
	        text: { prefix: constants[0] },
	        query: null,
	        ngContent: null
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function createText(view, renderHost, def) {
	    var /** @type {?} */ renderNode$$1;
	    var /** @type {?} */ renderer = view.renderer;
	    renderNode$$1 = renderer.createText(/** @type {?} */ ((def.text)).prefix);
	    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
	    if (parentEl) {
	        renderer.appendChild(parentEl, renderNode$$1);
	    }
	    return { renderText: renderNode$$1 };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ bindLen = bindings.length;
	    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
	        changed = true;
	    if (changed) {
	        var /** @type {?} */ value = ((def.text)).prefix;
	        if (bindLen > 0)
	            value += _addInterpolationPart(v0, bindings[0]);
	        if (bindLen > 1)
	            value += _addInterpolationPart(v1, bindings[1]);
	        if (bindLen > 2)
	            value += _addInterpolationPart(v2, bindings[2]);
	        if (bindLen > 3)
	            value += _addInterpolationPart(v3, bindings[3]);
	        if (bindLen > 4)
	            value += _addInterpolationPart(v4, bindings[4]);
	        if (bindLen > 5)
	            value += _addInterpolationPart(v5, bindings[5]);
	        if (bindLen > 6)
	            value += _addInterpolationPart(v6, bindings[6]);
	        if (bindLen > 7)
	            value += _addInterpolationPart(v7, bindings[7]);
	        if (bindLen > 8)
	            value += _addInterpolationPart(v8, bindings[8]);
	        if (bindLen > 9)
	            value += _addInterpolationPart(v9, bindings[9]);
	        var /** @type {?} */ renderNode$$1 = asTextData(view, def.index).renderText;
	        view.renderer.setValue(renderNode$$1, value);
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateTextDynamic(view, def, values) {
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ changed = false;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        // Note: We need to loop over all values, so that
	        // the old values are updates as well!
	        if (checkAndUpdateBinding(view, def, i, values[i])) {
	            changed = true;
	        }
	    }
	    if (changed) {
	        var /** @type {?} */ value = '';
	        for (var /** @type {?} */ i = 0; i < values.length; i++) {
	            value = value + _addInterpolationPart(values[i], bindings[i]);
	        }
	        value = ((def.text)).prefix + value;
	        var /** @type {?} */ renderNode$$1 = asTextData(view, def.index).renderText;
	        view.renderer.setValue(renderNode$$1, value);
	    }
	    return changed;
	}
	/**
	 * @param {?} value
	 * @param {?} binding
	 * @return {?}
	 */
	function _addInterpolationPart(value, binding) {
	    var /** @type {?} */ valueStr = value != null ? value.toString() : '';
	    return valueStr + binding.suffix;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} flags
	 * @param {?} nodes
	 * @param {?=} updateDirectives
	 * @param {?=} updateRenderer
	 * @return {?}
	 */
	function viewDef(flags, nodes, updateDirectives, updateRenderer) {
	    // clone nodes and set auto calculated values
	    var /** @type {?} */ viewBindingCount = 0;
	    var /** @type {?} */ viewDisposableCount = 0;
	    var /** @type {?} */ viewNodeFlags = 0;
	    var /** @type {?} */ viewRootNodeFlags = 0;
	    var /** @type {?} */ viewMatchedQueries = 0;
	    var /** @type {?} */ currentParent = null;
	    var /** @type {?} */ currentElementHasPublicProviders = false;
	    var /** @type {?} */ currentElementHasPrivateProviders = false;
	    var /** @type {?} */ lastRenderRootNode = null;
	    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	        while (currentParent && i > currentParent.index + currentParent.childCount) {
	            var /** @type {?} */ newParent = currentParent.parent;
	            if (newParent) {
	                newParent.childFlags |= ((currentParent.childFlags));
	                newParent.childMatchedQueries |= currentParent.childMatchedQueries;
	            }
	            currentParent = newParent;
	        }
	        var /** @type {?} */ node = nodes[i];
	        node.index = i;
	        node.parent = currentParent;
	        node.bindingIndex = viewBindingCount;
	        node.outputIndex = viewDisposableCount;
	        // renderParent needs to account for ng-container!
	        var /** @type {?} */ currentRenderParent = void 0;
	        if (currentParent && currentParent.flags & 1 /* TypeElement */ &&
	            !((currentParent.element)).name) {
	            currentRenderParent = currentParent.renderParent;
	        }
	        else {
	            currentRenderParent = currentParent;
	        }
	        node.renderParent = currentRenderParent;
	        if (node.element) {
	            var /** @type {?} */ elDef = node.element;
	            elDef.publicProviders =
	                currentParent ? ((currentParent.element)).publicProviders : Object.create(null);
	            elDef.allProviders = elDef.publicProviders;
	            // Note: We assume that all providers of an element are before any child element!
	            currentElementHasPublicProviders = false;
	            currentElementHasPrivateProviders = false;
	        }
	        validateNode(currentParent, node, nodes.length);
	        viewNodeFlags |= node.flags;
	        viewMatchedQueries |= node.matchedQueryIds;
	        if (node.element && node.element.template) {
	            viewMatchedQueries |= node.element.template.nodeMatchedQueries;
	        }
	        if (currentParent) {
	            currentParent.childFlags |= node.flags;
	            currentParent.directChildFlags |= node.flags;
	            currentParent.childMatchedQueries |= node.matchedQueryIds;
	            if (node.element && node.element.template) {
	                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
	            }
	        }
	        else {
	            viewRootNodeFlags |= node.flags;
	        }
	        viewBindingCount += node.bindings.length;
	        viewDisposableCount += node.outputs.length;
	        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {
	            lastRenderRootNode = node;
	        }
	        if (node.flags & 10112 /* CatProvider */) {
	            if (!currentElementHasPublicProviders) {
	                currentElementHasPublicProviders = true; /** @type {?} */
	                ((((
	                // Use prototypical inheritance to not get O(n^2) complexity...
	                currentParent)).element)).publicProviders =
	                    Object.create(/** @type {?} */ ((((currentParent)).element)).publicProviders); /** @type {?} */
	                ((((currentParent)).element)).allProviders = ((((currentParent)).element)).publicProviders;
	            }
	            var /** @type {?} */ isPrivateService = (node.flags & 4096 /* PrivateProvider */) !== 0;
	            var /** @type {?} */ isComponent = (node.flags & 16384 /* Component */) !== 0;
	            if (!isPrivateService || isComponent) {
	                ((((((currentParent)).element)).publicProviders))[((node.provider)).tokenKey] = node;
	            }
	            else {
	                if (!currentElementHasPrivateProviders) {
	                    currentElementHasPrivateProviders = true; /** @type {?} */
	                    ((((
	                    // Use protoyypical inheritance to not get O(n^2) complexity...
	                    currentParent)).element)).allProviders =
	                        Object.create(/** @type {?} */ ((((currentParent)).element)).publicProviders);
	                } /** @type {?} */
	                ((((((currentParent)).element)).allProviders))[((node.provider)).tokenKey] = node;
	            }
	            if (isComponent) {
	                ((((currentParent)).element)).componentProvider = node;
	            }
	        }
	        if (node.childCount) {
	            currentParent = node;
	        }
	    }
	    while (currentParent) {
	        var /** @type {?} */ newParent = currentParent.parent;
	        if (newParent) {
	            newParent.childFlags |= currentParent.childFlags;
	            newParent.childMatchedQueries |= currentParent.childMatchedQueries;
	        }
	        currentParent = newParent;
	    }
	    var /** @type {?} */ handleEvent = function (view, nodeIndex, eventName, event) { return ((((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };
	    return {
	        // Will be filled later...
	        factory: null,
	        nodeFlags: viewNodeFlags,
	        rootNodeFlags: viewRootNodeFlags,
	        nodeMatchedQueries: viewMatchedQueries, flags: flags,
	        nodes: nodes,
	        updateDirectives: updateDirectives || NOOP,
	        updateRenderer: updateRenderer || NOOP,
	        handleEvent: handleEvent || NOOP,
	        bindingCount: viewBindingCount,
	        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode
	    };
	}
	/**
	 * @param {?} parent
	 * @param {?} node
	 * @param {?} nodeCount
	 * @return {?}
	 */
	function validateNode(parent, node, nodeCount) {
	    var /** @type {?} */ template = node.element && node.element.template;
	    if (template) {
	        if (!template.lastRenderRootNode) {
	            throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
	        }
	        if (template.lastRenderRootNode &&
	            template.lastRenderRootNode.flags & 8388608 /* EmbeddedViews */) {
	            throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.index + "!");
	        }
	    }
	    if (node.flags & 10112 /* CatProvider */) {
	        var /** @type {?} */ parentFlags = parent ? parent.flags : 0;
	        if ((parentFlags & 1 /* TypeElement */) === 0) {
	            throw new Error("Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index " + node.index + "!");
	        }
	    }
	    if (node.query) {
	        if (node.flags & 33554432 /* TypeContentQuery */ &&
	            (!parent || (parent.flags & 8192 /* TypeDirective */) === 0)) {
	            throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.index + "!");
	        }
	        if (node.flags & 67108864 /* TypeViewQuery */ && parent) {
	            throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.index + "!");
	        }
	    }
	    if (node.childCount) {
	        var /** @type {?} */ parentEnd = parent ? parent.index + parent.childCount : nodeCount - 1;
	        if (node.index <= parentEnd && node.index + node.childCount > parentEnd) {
	            throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.index + "!");
	        }
	    }
	}
	/**
	 * @param {?} parent
	 * @param {?} anchorDef
	 * @param {?=} context
	 * @return {?}
	 */
	function createEmbeddedView(parent, anchorDef$$1, context) {
	    // embedded views are seen as siblings to the anchor, so we need
	    // to get the parent of the anchor and use it as parentIndex.
	    var /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef$$1, /** @type {?} */ ((((anchorDef$$1.element)).template)));
	    initView(view, parent.component, context);
	    createViewNodes(view);
	    return view;
	}
	/**
	 * @param {?} root
	 * @param {?} def
	 * @param {?=} context
	 * @return {?}
	 */
	function createRootView(root, def, context) {
	    var /** @type {?} */ view = createView(root, root.renderer, null, null, def);
	    initView(view, context, context);
	    createViewNodes(view);
	    return view;
	}
	/**
	 * @param {?} root
	 * @param {?} renderer
	 * @param {?} parent
	 * @param {?} parentNodeDef
	 * @param {?} def
	 * @return {?}
	 */
	function createView(root, renderer, parent, parentNodeDef, def) {
	    var /** @type {?} */ nodes = new Array(def.nodes.length);
	    var /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : null;
	    var /** @type {?} */ view = {
	        def: def,
	        parent: parent,
	        viewContainerParent: null, parentNodeDef: parentNodeDef,
	        context: null,
	        component: null, nodes: nodes,
	        state: 1 /* FirstCheck */ | 2 /* ChecksEnabled */, root: root, renderer: renderer,
	        oldValues: new Array(def.bindingCount), disposables: disposables
	    };
	    return view;
	}
	/**
	 * @param {?} view
	 * @param {?} component
	 * @param {?} context
	 * @return {?}
	 */
	function initView(view, component, context) {
	    view.component = component;
	    view.context = context;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function createViewNodes(view) {
	    var /** @type {?} */ renderHost;
	    if (isComponentView(view)) {
	        var /** @type {?} */ hostDef = view.parentNodeDef;
	        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((((hostDef)).parent)).index).renderElement;
	    }
	    var /** @type {?} */ def = view.def;
	    var /** @type {?} */ nodes = view.nodes;
	    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = def.nodes[i];
	        Services.setCurrentNode(view, i);
	        var /** @type {?} */ nodeData = void 0;
	        switch (nodeDef.flags & 100673535 /* Types */) {
	            case 1 /* TypeElement */:
	                var /** @type {?} */ el = (createElement(view, renderHost, nodeDef));
	                var /** @type {?} */ componentView = ((undefined));
	                if (nodeDef.flags & 16777216 /* ComponentView */) {
	                    var /** @type {?} */ compViewDef = resolveViewDefinition(/** @type {?} */ ((((nodeDef.element)).componentView)));
	                    var /** @type {?} */ rendererType = ((nodeDef.element)).componentRendererType;
	                    var /** @type {?} */ compRenderer = void 0;
	                    if (!rendererType) {
	                        compRenderer = view.root.renderer;
	                    }
	                    else {
	                        compRenderer = view.root.rendererFactory.createRenderer(el, rendererType);
	                    }
	                    componentView = createView(view.root, compRenderer, view, /** @type {?} */ ((nodeDef.element)).componentProvider, compViewDef);
	                }
	                listenToElementOutputs(view, componentView, nodeDef, el);
	                nodeData = ({
	                    renderElement: el,
	                    componentView: componentView,
	                    viewContainer: null,
	                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined
	                });
	                if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
	                }
	                break;
	            case 2 /* TypeText */:
	                nodeData = (createText(view, renderHost, nodeDef));
	                break;
	            case 256 /* TypeClassProvider */:
	            case 512 /* TypeFactoryProvider */:
	            case 1024 /* TypeUseExistingProvider */:
	            case 128 /* TypeValueProvider */: {
	                var /** @type {?} */ instance = createProviderInstance(view, nodeDef);
	                nodeData = ({ instance: instance });
	                break;
	            }
	            case 8 /* TypePipe */: {
	                var /** @type {?} */ instance = createPipeInstance(view, nodeDef);
	                nodeData = ({ instance: instance });
	                break;
	            }
	            case 8192 /* TypeDirective */: {
	                var /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);
	                nodeData = ({ instance: instance });
	                if (nodeDef.flags & 16384 /* Component */) {
	                    var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).index).componentView;
	                    initView(compView, instance, instance);
	                }
	                break;
	            }
	            case 16 /* TypePureArray */:
	            case 32 /* TypePureObject */:
	            case 64 /* TypePurePipe */:
	                nodeData = (createPureExpression(view, nodeDef));
	                break;
	            case 33554432 /* TypeContentQuery */:
	            case 67108864 /* TypeViewQuery */:
	                nodeData = (createQuery());
	                break;
	            case 4 /* TypeNgContent */:
	                appendNgContent(view, renderHost, nodeDef);
	                // no runtime data needed for NgContent...
	                nodeData = undefined;
	                break;
	        }
	        nodes[i] = nodeData;
	    }
	    // Create the ViewData.nodes of component views after we created everything else,
	    // so that e.g. ng-content works
	    execComponentViewsAction(view, ViewAction.CreateViewNodes);
	    // fill static content and view queries
	    execQueriesAction(view, 33554432 /* TypeContentQuery */ | 67108864 /* TypeViewQuery */, 134217728 /* StaticQuery */, 0 /* CheckAndUpdate */);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function checkNoChangesView(view) {
	    Services.updateDirectives(view, 1 /* CheckNoChanges */);
	    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
	    Services.updateRenderer(view, 1 /* CheckNoChanges */);
	    execComponentViewsAction(view, ViewAction.CheckNoChanges);
	    // Note: We don't check queries for changes as we didn't do this in v2.x.
	    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function checkAndUpdateView(view) {
	    Services.updateDirectives(view, 0 /* CheckAndUpdate */);
	    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
	    execQueriesAction(view, 33554432 /* TypeContentQuery */, 268435456 /* DynamicQuery */, 0 /* CheckAndUpdate */);
	    callLifecycleHooksChildrenFirst(view, 1048576 /* AfterContentChecked */ |
	        (view.state & 1 /* FirstCheck */ ? 524288 /* AfterContentInit */ : 0));
	    Services.updateRenderer(view, 0 /* CheckAndUpdate */);
	    execComponentViewsAction(view, ViewAction.CheckAndUpdate);
	    execQueriesAction(view, 67108864 /* TypeViewQuery */, 268435456 /* DynamicQuery */, 0 /* CheckAndUpdate */);
	    callLifecycleHooksChildrenFirst(view, 4194304 /* AfterViewChecked */ |
	        (view.state & 1 /* FirstCheck */ ? 2097152 /* AfterViewInit */ : 0));
	    if (view.def.flags & 2 /* OnPush */) {
	        view.state &= ~2 /* ChecksEnabled */;
	    }
	    view.state &= ~1 /* FirstCheck */;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    if (argStyle === 0 /* Inline */) {
	        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    }
	    else {
	        return checkAndUpdateNodeDynamic(view, nodeDef, v0);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ changed = false;
	    switch (nodeDef.flags & 100673535 /* Types */) {
	        case 1 /* TypeElement */:
	            changed = checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	        case 2 /* TypeText */:
	            changed = checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	        case 8192 /* TypeDirective */:
	            changed =
	                checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	        case 16 /* TypePureArray */:
	        case 32 /* TypePureObject */:
	        case 64 /* TypePurePipe */:
	            changed =
	                checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateNodeDynamic(view, nodeDef, values) {
	    var /** @type {?} */ changed = false;
	    switch (nodeDef.flags & 100673535 /* Types */) {
	        case 1 /* TypeElement */:
	            changed = checkAndUpdateElementDynamic(view, nodeDef, values);
	            break;
	        case 2 /* TypeText */:
	            changed = checkAndUpdateTextDynamic(view, nodeDef, values);
	            break;
	        case 8192 /* TypeDirective */:
	            changed = checkAndUpdateDirectiveDynamic(view, nodeDef, values);
	            break;
	        case 16 /* TypePureArray */:
	        case 32 /* TypePureObject */:
	        case 64 /* TypePurePipe */:
	            changed = checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
	            break;
	    }
	    if (changed) {
	        // Update oldValues after all bindings have been updated,
	        // as a setter for a property might update other properties.
	        var /** @type {?} */ bindLen = nodeDef.bindings.length;
	        var /** @type {?} */ bindingStart = nodeDef.bindingIndex;
	        var /** @type {?} */ oldValues = view.oldValues;
	        for (var /** @type {?} */ i = 0; i < bindLen; i++) {
	            oldValues[bindingStart + i] = values[i];
	        }
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    if (argStyle === 0 /* Inline */) {
	        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    }
	    else {
	        checkNoChangesNodeDynamic(view, nodeDef, v0);
	    }
	    // Returning false is ok here as we would have thrown in case of a change.
	    return false;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ bindLen = nodeDef.bindings.length;
	    if (bindLen > 0)
	        checkBindingNoChanges(view, nodeDef, 0, v0);
	    if (bindLen > 1)
	        checkBindingNoChanges(view, nodeDef, 1, v1);
	    if (bindLen > 2)
	        checkBindingNoChanges(view, nodeDef, 2, v2);
	    if (bindLen > 3)
	        checkBindingNoChanges(view, nodeDef, 3, v3);
	    if (bindLen > 4)
	        checkBindingNoChanges(view, nodeDef, 4, v4);
	    if (bindLen > 5)
	        checkBindingNoChanges(view, nodeDef, 5, v5);
	    if (bindLen > 6)
	        checkBindingNoChanges(view, nodeDef, 6, v6);
	    if (bindLen > 7)
	        checkBindingNoChanges(view, nodeDef, 7, v7);
	    if (bindLen > 8)
	        checkBindingNoChanges(view, nodeDef, 8, v8);
	    if (bindLen > 9)
	        checkBindingNoChanges(view, nodeDef, 9, v9);
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} values
	 * @return {?}
	 */
	function checkNoChangesNodeDynamic(view, nodeDef, values) {
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        checkBindingNoChanges(view, nodeDef, i, values[i]);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @return {?}
	 */
	function checkNoChangesQuery(view, nodeDef) {
	    var /** @type {?} */ queryList = asQueryList(view, nodeDef.index);
	    if (queryList.dirty) {
	        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.index), "Query " + ((nodeDef.query)).id + " not dirty", "Query " + ((nodeDef.query)).id + " dirty", (view.state & 1 /* FirstCheck */) !== 0);
	    }
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function destroyView(view) {
	    if (view.state & 8 /* Destroyed */) {
	        return;
	    }
	    execEmbeddedViewsAction(view, ViewAction.Destroy);
	    execComponentViewsAction(view, ViewAction.Destroy);
	    callLifecycleHooksChildrenFirst(view, 65536 /* OnDestroy */);
	    if (view.disposables) {
	        for (var /** @type {?} */ i = 0; i < view.disposables.length; i++) {
	            view.disposables[i]();
	        }
	    }
	    if (view.renderer.destroyNode) {
	        destroyViewNodes(view);
	    }
	    if (isComponentView(view)) {
	        view.renderer.destroy();
	    }
	    view.state |= 8 /* Destroyed */;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function destroyViewNodes(view) {
	    var /** @type {?} */ len = view.def.nodes.length;
	    for (var /** @type {?} */ i = 0; i < len; i++) {
	        var /** @type {?} */ def = view.def.nodes[i];
	        if (def.flags & 1 /* TypeElement */) {
	            ((view.renderer.destroyNode))(asElementData(view, i).renderElement);
	        }
	        else if (def.flags & 2 /* TypeText */) {
	            ((view.renderer.destroyNode))(asTextData(view, i).renderText);
	        }
	    }
	}
	var ViewAction = {};
	ViewAction.CreateViewNodes = 0;
	ViewAction.CheckNoChanges = 1;
	ViewAction.CheckAndUpdate = 2;
	ViewAction.Destroy = 3;
	ViewAction[ViewAction.CreateViewNodes] = "CreateViewNodes";
	ViewAction[ViewAction.CheckNoChanges] = "CheckNoChanges";
	ViewAction[ViewAction.CheckAndUpdate] = "CheckAndUpdate";
	ViewAction[ViewAction.Destroy] = "Destroy";
	/**
	 * @param {?} view
	 * @param {?} action
	 * @return {?}
	 */
	function execComponentViewsAction(view, action) {
	    var /** @type {?} */ def = view.def;
	    if (!(def.nodeFlags & 16777216 /* ComponentView */)) {
	        return;
	    }
	    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = def.nodes[i];
	        if (nodeDef.flags & 16777216 /* ComponentView */) {
	            // a leaf
	            callViewAction(asElementData(view, i).componentView, action);
	        }
	        else if ((nodeDef.childFlags & 16777216 /* ComponentView */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @return {?}
	 */
	function execEmbeddedViewsAction(view, action) {
	    var /** @type {?} */ def = view.def;
	    if (!(def.nodeFlags & 8388608 /* EmbeddedViews */)) {
	        return;
	    }
	    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = def.nodes[i];
	        if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	            // a leaf
	            var /** @type {?} */ embeddedViews = ((asElementData(view, i).viewContainer))._embeddedViews;
	            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
	                callViewAction(embeddedViews[k], action);
	            }
	        }
	        else if ((nodeDef.childFlags & 8388608 /* EmbeddedViews */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @return {?}
	 */
	function callViewAction(view, action) {
	    var /** @type {?} */ viewState = view.state;
	    switch (action) {
	        case ViewAction.CheckNoChanges:
	            if ((viewState & 2 /* ChecksEnabled */) &&
	                (viewState & (4 /* Errored */ | 8 /* Destroyed */)) === 0) {
	                checkNoChangesView(view);
	            }
	            break;
	        case ViewAction.CheckAndUpdate:
	            if ((viewState & 2 /* ChecksEnabled */) &&
	                (viewState & (4 /* Errored */ | 8 /* Destroyed */)) === 0) {
	                checkAndUpdateView(view);
	            }
	            break;
	        case ViewAction.Destroy:
	            destroyView(view);
	            break;
	        case ViewAction.CreateViewNodes:
	            createViewNodes(view);
	            break;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} queryFlags
	 * @param {?} staticDynamicQueryFlag
	 * @param {?} checkType
	 * @return {?}
	 */
	function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
	    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
	        return;
	    }
	    var /** @type {?} */ nodeCount = view.def.nodes.length;
	    for (var /** @type {?} */ i = 0; i < nodeCount; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
	            Services.setCurrentNode(view, nodeDef.index);
	            switch (checkType) {
	                case 0 /* CheckAndUpdate */:
	                    checkAndUpdateQuery(view, nodeDef);
	                    break;
	                case 1 /* CheckNoChanges */:
	                    checkNoChangesQuery(view, nodeDef);
	                    break;
	            }
	        }
	        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
	            // no child has a matching query
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var initialized = false;
	/**
	 * @return {?}
	 */
	function initServicesIfNeeded() {
	    if (initialized) {
	        return;
	    }
	    initialized = true;
	    var /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();
	    Services.setCurrentNode = services.setCurrentNode;
	    Services.createRootView = services.createRootView;
	    Services.createEmbeddedView = services.createEmbeddedView;
	    Services.checkAndUpdateView = services.checkAndUpdateView;
	    Services.checkNoChangesView = services.checkNoChangesView;
	    Services.destroyView = services.destroyView;
	    Services.resolveDep = resolveDep;
	    Services.createDebugContext = services.createDebugContext;
	    Services.handleEvent = services.handleEvent;
	    Services.updateDirectives = services.updateDirectives;
	    Services.updateRenderer = services.updateRenderer;
	    Services.dirtyParentQueries = dirtyParentQueries;
	}
	/**
	 * @return {?}
	 */
	function createProdServices() {
	    return {
	        setCurrentNode: function () { },
	        createRootView: createProdRootView,
	        createEmbeddedView: createEmbeddedView,
	        checkAndUpdateView: checkAndUpdateView,
	        checkNoChangesView: checkNoChangesView,
	        destroyView: destroyView,
	        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
	        handleEvent: function (view, nodeIndex, eventName, event) { return view.def.handleEvent(view, nodeIndex, eventName, event); },
	        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
	            prodCheckNoChangesNode, view); },
	        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
	            prodCheckNoChangesNode, view); },
	    };
	}
	/**
	 * @return {?}
	 */
	function createDebugServices() {
	    return {
	        setCurrentNode: debugSetCurrentNode,
	        createRootView: debugCreateRootView,
	        createEmbeddedView: debugCreateEmbeddedView,
	        checkAndUpdateView: debugCheckAndUpdateView,
	        checkNoChangesView: debugCheckNoChangesView,
	        destroyView: debugDestroyView,
	        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
	        handleEvent: debugHandleEvent,
	        updateDirectives: debugUpdateDirectives,
	        updateRenderer: debugUpdateRenderer
	    };
	}
	/**
	 * @param {?} elInjector
	 * @param {?} projectableNodes
	 * @param {?} rootSelectorOrNode
	 * @param {?} def
	 * @param {?} ngModule
	 * @param {?=} context
	 * @return {?}
	 */
	function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
	    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
	    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
	}
	/**
	 * @param {?} elInjector
	 * @param {?} projectableNodes
	 * @param {?} rootSelectorOrNode
	 * @param {?} def
	 * @param {?} ngModule
	 * @param {?=} context
	 * @return {?}
	 */
	function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
	    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
	    var /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
	    return callWithDebugContext(DebugAction.create, createRootView, null, [root, def, context]);
	}
	/**
	 * @param {?} elInjector
	 * @param {?} ngModule
	 * @param {?} rendererFactory
	 * @param {?} projectableNodes
	 * @param {?} rootSelectorOrNode
	 * @return {?}
	 */
	function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
	    var /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);
	    var /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);
	    return {
	        ngModule: ngModule,
	        injector: elInjector, projectableNodes: projectableNodes,
	        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function prodCheckAndUpdateNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    return (nodeDef.flags & 112 /* CatPureExpression */) ?
	        asPureExpressionData(view, nodeIndex).value :
	        undefined;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function prodCheckNoChangesNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    return (nodeDef.flags & 112 /* CatPureExpression */) ?
	        asPureExpressionData(view, nodeIndex).value :
	        undefined;
	}
	/**
	 * @param {?} parent
	 * @param {?} anchorDef
	 * @param {?=} context
	 * @return {?}
	 */
	function debugCreateEmbeddedView(parent, anchorDef, context) {
	    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parent, anchorDef, context]);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function debugCheckAndUpdateView(view) {
	    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function debugCheckNoChangesView(view) {
	    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function debugDestroyView(view) {
	    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
	}
	var DebugAction = {};
	DebugAction.create = 0;
	DebugAction.detectChanges = 1;
	DebugAction.checkNoChanges = 2;
	DebugAction.destroy = 3;
	DebugAction.handleEvent = 4;
	DebugAction[DebugAction.create] = "create";
	DebugAction[DebugAction.detectChanges] = "detectChanges";
	DebugAction[DebugAction.checkNoChanges] = "checkNoChanges";
	DebugAction[DebugAction.destroy] = "destroy";
	DebugAction[DebugAction.handleEvent] = "handleEvent";
	var _currentAction;
	var _currentView;
	var _currentNodeIndex;
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function debugSetCurrentNode(view, nodeIndex) {
	    _currentView = view;
	    _currentNodeIndex = nodeIndex;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} eventName
	 * @param {?} event
	 * @return {?}
	 */
	function debugHandleEvent(view, nodeIndex, eventName, event) {
	    debugSetCurrentNode(view, nodeIndex);
	    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
	}
	/**
	 * @param {?} view
	 * @param {?} checkType
	 * @return {?}
	 */
	function debugUpdateDirectives(view, checkType) {
	    if (view.state & 8 /* Destroyed */) {
	        throw viewDestroyedError(DebugAction[_currentAction]);
	    }
	    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
	    return view.def.updateDirectives(debugCheckDirectivesFn, view);
	    /**
	     * @param {?} view
	     * @param {?} nodeIndex
	     * @param {?} argStyle
	     * @param {...?} values
	     * @return {?}
	     */
	    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
	        var values = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            values[_i - 3] = arguments[_i];
	        }
	        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	        if (checkType === 0 /* CheckAndUpdate */) {
	            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
	        }
	        else {
	            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
	        }
	        if (nodeDef.flags & 8192 /* TypeDirective */) {
	            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
	        }
	        return (nodeDef.flags & 112 /* CatPureExpression */) ?
	            asPureExpressionData(view, nodeDef.index).value :
	            undefined;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} checkType
	 * @return {?}
	 */
	function debugUpdateRenderer(view, checkType) {
	    if (view.state & 8 /* Destroyed */) {
	        throw viewDestroyedError(DebugAction[_currentAction]);
	    }
	    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
	    return view.def.updateRenderer(debugCheckRenderNodeFn, view);
	    /**
	     * @param {?} view
	     * @param {?} nodeIndex
	     * @param {?} argStyle
	     * @param {...?} values
	     * @return {?}
	     */
	    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
	        var values = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            values[_i - 3] = arguments[_i];
	        }
	        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	        if (checkType === 0 /* CheckAndUpdate */) {
	            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
	        }
	        else {
	            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
	        }
	        if (nodeDef.flags & 3 /* CatRenderNode */) {
	            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
	        }
	        return (nodeDef.flags & 112 /* CatPureExpression */) ?
	            asPureExpressionData(view, nodeDef.index).value :
	            undefined;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?} givenValues
	 * @return {?}
	 */
	function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
	    var /** @type {?} */ changed = ((checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));
	    if (changed) {
	        var /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;
	        if (nodeDef.flags & 8192 /* TypeDirective */) {
	            var /** @type {?} */ bindingValues = {};
	            for (var /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {
	                var /** @type {?} */ binding = nodeDef.bindings[i];
	                var /** @type {?} */ value = values[i];
	                if (binding.flags & 8 /* TypeProperty */) {
	                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =
	                        normalizeDebugBindingValue(value);
	                }
	            }
	            var /** @type {?} */ elDef = ((nodeDef.parent));
	            var /** @type {?} */ el = asElementData(view, elDef.index).renderElement;
	            if (!((elDef.element)).name) {
	                // a comment.
	                view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
	            }
	            else {
	                // a regular element.
	                for (var /** @type {?} */ attr in bindingValues) {
	                    var /** @type {?} */ value = bindingValues[attr];
	                    if (value != null) {
	                        view.renderer.setAttribute(el, attr, value);
	                    }
	                    else {
	                        view.renderer.removeAttribute(el, attr);
	                    }
	                }
	            }
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?} values
	 * @return {?}
	 */
	function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
	    ((checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));
	}
	/**
	 * @param {?} name
	 * @return {?}
	 */
	function normalizeDebugBindingName(name) {
	    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
	    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
	    return "ng-reflect-" + name;
	}
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function camelCaseToDashCase(input) {
	    return input.replace(CAMEL_CASE_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        return '-' + m[1].toLowerCase();
	    });
	}
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function normalizeDebugBindingValue(value) {
	    try {
	        // Limit the size of the value as otherwise the DOM just gets polluted.
	        return value != null ? value.toString().slice(0, 30) : value;
	    }
	    catch (e) {
	        return '[ERROR] Exception while trying to serialize the value';
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function nextDirectiveWithBinding(view, nodeIndex) {
	    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & 8192 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {
	            return i;
	        }
	    }
	    return null;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function nextRenderNodeWithBinding(view, nodeIndex) {
	    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {
	            return i;
	        }
	    }
	    return null;
	}
	var DebugContext_ = (function () {
	    /**
	     * @param {?} view
	     * @param {?} nodeIndex
	     */
	    function DebugContext_(view, nodeIndex) {
	        this.view = view;
	        this.nodeIndex = nodeIndex;
	        if (nodeIndex == null) {
	            this.nodeIndex = nodeIndex = 0;
	        }
	        this.nodeDef = view.def.nodes[nodeIndex];
	        var elDef = this.nodeDef;
	        var elView = view;
	        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {
	            elDef = elDef.parent;
	        }
	        if (!elDef) {
	            while (!elDef && elView) {
	                elDef = viewParentEl(elView);
	                elView = elView.parent;
	            }
	        }
	        this.elDef = elDef;
	        this.elView = elView;
	    }
	    Object.defineProperty(DebugContext_.prototype, "elOrCompView", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            // Has to be done lazily as we use the DebugContext also during creation of elements...
	            return asElementData(this.elView, this.elDef.index).componentView || this.view;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return createInjector(this.elView, this.elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "component", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.elOrCompView.component; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "context", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.elOrCompView.context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "providerTokens", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ tokens = [];
	            if (this.elDef) {
	                for (var /** @type {?} */ i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
	                    var /** @type {?} */ childDef = this.elView.def.nodes[i];
	                    if (childDef.flags & 10112 /* CatProvider */) {
	                        tokens.push(/** @type {?} */ ((childDef.provider)).token);
	                    }
	                    i += childDef.childCount;
	                }
	            }
	            return tokens;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "references", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ references = {};
	            if (this.elDef) {
	                collectReferences(this.elView, this.elDef, references);
	                for (var /** @type {?} */ i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
	                    var /** @type {?} */ childDef = this.elView.def.nodes[i];
	                    if (childDef.flags & 10112 /* CatProvider */) {
	                        collectReferences(this.elView, childDef, references);
	                    }
	                    i += childDef.childCount;
	                }
	            }
	            return references;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "componentRenderElement", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ elData = findHostElement(this.elOrCompView);
	            return elData ? elData.renderElement : undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "renderNode", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :
	                renderNode(this.elView, this.elDef);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} console
	     * @param {...?} values
	     * @return {?}
	     */
	    DebugContext_.prototype.logError = function (console) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var /** @type {?} */ logViewDef;
	        var /** @type {?} */ logNodeIndex;
	        if (this.nodeDef.flags & 2 /* TypeText */) {
	            logViewDef = this.view.def;
	            logNodeIndex = this.nodeDef.index;
	        }
	        else {
	            logViewDef = this.elView.def;
	            logNodeIndex = this.elDef.index;
	        }
	        // Note: we only generate a log function for text and element nodes
	        // to make the generated code as small as possible.
	        var /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
	        var /** @type {?} */ currRenderNodeIndex = -1;
	        var /** @type {?} */ nodeLogger = function () {
	            currRenderNodeIndex++;
	            if (currRenderNodeIndex === renderNodeIndex) {
	                return (_a = console.error).bind.apply(_a, [console].concat(values));
	            }
	            else {
	                return NOOP;
	            }
	            var _a;
	        }; /** @type {?} */
	        ((logViewDef.factory))(nodeLogger);
	        if (currRenderNodeIndex < renderNodeIndex) {
	            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
	            console.error.apply(console, values);
	        }
	    };
	    return DebugContext_;
	}());
	/**
	 * @param {?} viewDef
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function getRenderNodeIndex(viewDef$$1, nodeIndex) {
	    var /** @type {?} */ renderNodeIndex = -1;
	    for (var /** @type {?} */ i = 0; i <= nodeIndex; i++) {
	        var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];
	        if (nodeDef.flags & 3 /* CatRenderNode */) {
	            renderNodeIndex++;
	        }
	    }
	    return renderNodeIndex;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function findHostElement(view) {
	    while (view && !isComponentView(view)) {
	        view = ((view.parent));
	    }
	    if (view.parent) {
	        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).index);
	    }
	    return null;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} references
	 * @return {?}
	 */
	function collectReferences(view, nodeDef, references) {
	    for (var /** @type {?} */ refName in nodeDef.references) {
	        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
	    }
	}
	/**
	 * @param {?} action
	 * @param {?} fn
	 * @param {?} self
	 * @param {?} args
	 * @return {?}
	 */
	function callWithDebugContext(action, fn, self, args) {
	    var /** @type {?} */ oldAction = _currentAction;
	    var /** @type {?} */ oldView = _currentView;
	    var /** @type {?} */ oldNodeIndex = _currentNodeIndex;
	    try {
	        _currentAction = action;
	        var /** @type {?} */ result = fn.apply(self, args);
	        _currentView = oldView;
	        _currentNodeIndex = oldNodeIndex;
	        _currentAction = oldAction;
	        return result;
	    }
	    catch (e) {
	        if (isViewDebugError(e) || !_currentView) {
	            throw e;
	        }
	        _currentView.state |= 4 /* Errored */;
	        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));
	    }
	}
	/**
	 * @return {?}
	 */
	function getCurrentDebugContext() {
	    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
	}
	var DebugRendererFactory2 = (function () {
	    /**
	     * @param {?} delegate
	     */
	    function DebugRendererFactory2(delegate) {
	        this.delegate = delegate;
	    }
	    /**
	     * @param {?} element
	     * @param {?} renderData
	     * @return {?}
	     */
	    DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {
	        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
	    };
	    return DebugRendererFactory2;
	}());
	var DebugRenderer2 = (function () {
	    /**
	     * @param {?} delegate
	     */
	    function DebugRenderer2(delegate) {
	        this.delegate = delegate;
	    }
	    Object.defineProperty(DebugRenderer2.prototype, "data", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.delegate.data; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DebugRenderer2.prototype.destroyNode = function (node) {
	        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));
	        if (this.delegate.destroyNode) {
	            this.delegate.destroyNode(node);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };
	    /**
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DebugRenderer2.prototype.createElement = function (name, namespace) {
	        var /** @type {?} */ el = this.delegate.createElement(name, namespace);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            var /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);
	            debugEl.name = name;
	            indexDebugNode(debugEl);
	        }
	        return el;
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.createComment = function (value) {
	        var /** @type {?} */ comment = this.delegate.createComment(value);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugNode(comment, null, debugCtx));
	        }
	        return comment;
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.createText = function (value) {
	        var /** @type {?} */ text = this.delegate.createText(value);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugNode(text, null, debugCtx));
	        }
	        return text;
	    };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    DebugRenderer2.prototype.appendChild = function (parent, newChild) {
	        var /** @type {?} */ debugEl = getDebugNode(parent);
	        var /** @type {?} */ debugChildEl = getDebugNode(newChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.addChild(debugChildEl);
	        }
	        this.delegate.appendChild(parent, newChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
	        var /** @type {?} */ debugEl = getDebugNode(parent);
	        var /** @type {?} */ debugChildEl = getDebugNode(newChild);
	        var /** @type {?} */ debugRefEl = ((getDebugNode(refChild)));
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.insertBefore(debugRefEl, debugChildEl);
	        }
	        this.delegate.insertBefore(parent, newChild, refChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeChild = function (parent, oldChild) {
	        var /** @type {?} */ debugEl = getDebugNode(parent);
	        var /** @type {?} */ debugChildEl = getDebugNode(oldChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.removeChild(debugChildEl);
	        }
	        this.delegate.removeChild(parent, oldChild);
	    };
	    /**
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    DebugRenderer2.prototype.selectRootElement = function (selectorOrNode) {
	        var /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugElement(el, null, debugCtx));
	        }
	        return el;
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
	            debugEl.attributes[fullName] = value;
	        }
	        this.delegate.setAttribute(el, name, value, namespace);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
	            debugEl.attributes[fullName] = null;
	        }
	        this.delegate.removeAttribute(el, name, namespace);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DebugRenderer2.prototype.addClass = function (el, name) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.classes[name] = true;
	        }
	        this.delegate.addClass(el, name);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeClass = function (el, name) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.classes[name] = false;
	        }
	        this.delegate.removeClass(el, name);
	    };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} value
	     * @param {?} flags
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.styles[style] = value;
	        }
	        this.delegate.setStyle(el, style, value, flags);
	    };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} flags
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeStyle = function (el, style, flags) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.styles[style] = null;
	        }
	        this.delegate.removeStyle(el, style, flags);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setProperty = function (el, name, value) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.properties[name] = value;
	        }
	        this.delegate.setProperty(el, name, value);
	    };
	    /**
	     * @param {?} target
	     * @param {?} eventName
	     * @param {?} callback
	     * @return {?}
	     */
	    DebugRenderer2.prototype.listen = function (target, eventName, callback) {
	        if (typeof target !== 'string') {
	            var /** @type {?} */ debugEl = getDebugNode(target);
	            if (debugEl) {
	                debugEl.listeners.push(new EventListener(eventName, callback));
	            }
	        }
	        return this.delegate.listen(target, eventName, callback);
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };
	    /**
	     * @param {?} node
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };
	    return DebugRenderer2;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @return {?}
	 */
	function _iterableDiffersFactory() {
	    return defaultIterableDiffers;
	}
	/**
	 * @return {?}
	 */
	function _keyValueDiffersFactory() {
	    return defaultKeyValueDiffers;
	}
	/**
	 * @param {?=} locale
	 * @return {?}
	 */
	function _localeFactory(locale) {
	    return locale || 'en-US';
	}
	/**
	 * @return {?}
	 */
	function _initViewEngine() {
	    initServicesIfNeeded();
	}
	/**
	 * This module includes the providers of \@angular/core that are needed
	 * to bootstrap components via `ApplicationRef`.
	 *
	 * \@experimental
	 */
	var ApplicationModule = (function () {
	    /**
	     * @param {?} appRef
	     */
	    function ApplicationModule(appRef) {
	    }
	    return ApplicationModule;
	}());
	ApplicationModule.decorators = [
	    { type: NgModule, args: [{
	                providers: [
	                    ApplicationRef_,
	                    { provide: ApplicationRef, useExisting: ApplicationRef_ },
	                    ApplicationInitStatus,
	                    Compiler,
	                    APP_ID_RANDOM_PROVIDER,
	                    { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
	                    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
	                    {
	                        provide: LOCALE_ID,
	                        useFactory: _localeFactory,
	                        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
	                    },
	                    { provide: APP_INITIALIZER, useValue: _initViewEngine, multi: true },
	                ]
	            },] },
	];
	/**
	 * @nocollapse
	 */
	ApplicationModule.ctorParameters = function () { return [
	    { type: ApplicationRef, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var LifecycleHooks = {};
	LifecycleHooks.OnInit = 0;
	LifecycleHooks.OnDestroy = 1;
	LifecycleHooks.DoCheck = 2;
	LifecycleHooks.OnChanges = 3;
	LifecycleHooks.AfterContentInit = 4;
	LifecycleHooks.AfterContentChecked = 5;
	LifecycleHooks.AfterViewInit = 6;
	LifecycleHooks.AfterViewChecked = 7;
	LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
	LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
	LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
	LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
	LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
	LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
	LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
	LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
	var LIFECYCLE_HOOKS_VALUES = [
	    LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
	    LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
	    LifecycleHooks.AfterViewChecked
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@experimental Animation support is experimental.
	 */
	/**
	 * `trigger` is an animation-specific function that is designed to be used inside of Angular's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular are used.
	 *
	 * `trigger` Creates an animation trigger which will a list of {\@link state state} and {\@link
	 * transition transition} entries that will be evaluated when the expression bound to the trigger
	 * changes.
	 *
	 * Triggers are registered within the component annotation data under the {\@link
	 * Component#animations-anchor animations section}. An animation trigger can be placed on an element
	 * within a template by referencing the name of the trigger followed by the expression value that the
	 * trigger is bound to (in the form of `[\@triggerName]="expression"`.
	 *
	 * ### Usage
	 *
	 * `trigger` will create an animation trigger reference based on the provided `name` value. The
	 * provided `animation` value is expected to be an array consisting of {\@link state state} and {\@link
	 * transition transition} declarations.
	 *
	 * ```typescript
	 * \@Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'my-component-tpl.html',
	 *   animations: [
	 *     trigger("myAnimationTrigger", [
	 *       state(...),
	 *       state(...),
	 *       transition(...),
	 *       transition(...)
	 *     ])
	 *   ]
	 * })
	 * class MyComponent {
	 *   myStatusExp = "something";
	 * }
	 * ```
	 *
	 * The template associated with this component will make use of the `myAnimationTrigger` animation
	 * trigger by binding to an element within its template code.
	 *
	 * ```html
	 * <!-- somewhere inside of my-component-tpl.html -->
	 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
	 * tools/gulp-tasks/validate-commit-message.js ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} name
	 * @param {?} definitions
	 * @return {?}
	 */
	function trigger$1(name, definitions) {
	    return { name: name, definitions: definitions };
	}
	/**
	 * `animate` is an animation-specific function that is designed to be used inside of Angular's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular are used.
	 *
	 * `animate` specifies an animation step that will apply the provided `styles` data for a given
	 * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
	 * to be used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link
	 * transition transition}.
	 *
	 * ### Usage
	 *
	 * The `animate` function accepts two input parameters: `timing` and `styles`:
	 *
	 * - `timing` is a string based value that can be a combination of a duration with optional delay
	 * and easing values. The format for the expression breaks down to `duration delay easing`
	 * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
	 * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
	 * `duration` value in millisecond form.
	 * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
	 * keyframes keyframes}. If left empty then the styles from the destination state will be collected
	 * and used (this is useful when describing an animation step that will complete an animation by
	 * {\@link transition#the-final-animate-call animating to the final state}).
	 *
	 * ```typescript
	 * // various functions for specifying timing data
	 * animate(500, style(...))
	 * animate("1s", style(...))
	 * animate("100ms 0.5s", style(...))
	 * animate("5s ease", style(...))
	 * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
	 *
	 * // either style() of keyframes() can be used
	 * animate(500, style({ background: "red" }))
	 * animate(500, keyframes([
	 *   style({ background: "blue" })),
	 *   style({ background: "red" }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} timings
	 * @param {?=} styles
	 * @return {?}
	 */
	function animate$1(timings, styles) {
	    if (styles === void 0) { styles = null; }
	    return { type: 4 /* Animate */, styles: styles, timings: timings };
	}
	/**
	 * `group` is an animation-specific function that is designed to be used inside of Angular's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular are used.
	 *
	 * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are
	 * useful when a series of styles must be animated/closed off at different statrting/ending times.
	 *
	 * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
	 * transition} and it will only continue to the next instruction once all of the inner animation
	 * steps have completed.
	 *
	 * ### Usage
	 *
	 * The `steps` data that is passed into the `group` animation function can either consist of {\@link
	 * style style} or {\@link animate animate} function calls. Each call to `style()` or `animate()`
	 * within a group will be executed instantly (use {\@link keyframes keyframes} or a {\@link
	 * animate#usage animate() with a delay value} to offset styles to be applied at a later time).
	 *
	 * ```typescript
	 * group([
	 *   animate("1s", { background: "black" }))
	 *   animate("2s", { color: "white" }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} steps
	 * @return {?}
	 */
	function group$1(steps) {
	    return { type: 3 /* Group */, steps: steps };
	}
	/**
	 * `sequence` is an animation-specific function that is designed to be used inside of Angular's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular are used.
	 *
	 * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
	 * default when an array is passed as animation data into {\@link transition transition}.)
	 *
	 * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
	 * transition} and it will only continue to the next instruction once each of the inner animation
	 * steps have completed.
	 *
	 * To perform animation styling in parallel with other animation steps then have a look at the
	 * {\@link group group} animation function.
	 *
	 * ### Usage
	 *
	 * The `steps` data that is passed into the `sequence` animation function can either consist of
	 * {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply the
	 * provided styling data immediately while a call to `animate()` will apply its styling data over a
	 * given time depending on its timing data.
	 *
	 * ```typescript
	 * sequence([
	 *   style({ opacity: 0 })),
	 *   animate("1s", { opacity: 1 }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} steps
	 * @return {?}
	 */
	function sequence$1(steps) {
	    return { type: 2 /* Sequence */, steps: steps };
	}
	/**
	 * `style` is an animation-specific function that is designed to be used inside of Angular's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular are used.
	 *
	 * `style` declares a key/value object containing CSS properties/styles that can then be used for
	 * {\@link state animation states}, within an {\@link sequence animation sequence}, or as styling data
	 * for both {\@link animate animate} and {\@link keyframes keyframes}.
	 *
	 * ### Usage
	 *
	 * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
	 * to be defined.
	 *
	 * ```typescript
	 * // string values are used for css properties
	 * style({ background: "red", color: "blue" })
	 *
	 * // numerical (pixel) values are also supported
	 * style({ width: 100, height: 0 })
	 * ```
	 *
	 * #### Auto-styles (using `*`)
	 *
	 * When an asterix (`*`) character is used as a value then it will be detected from the element
	 * being animated and applied as animation data when the animation starts.
	 *
	 * This feature proves useful for a state depending on layout and/or environment factors; in such
	 * cases the styles are calculated just before the animation starts.
	 *
	 * ```typescript
	 * // the steps below will animate from 0 to the
	 * // actual height of the element
	 * style({ height: 0 }),
	 * animate("1s", style({ height: "*" }))
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} tokens
	 * @return {?}
	 */
	function style$1(tokens) {
	    return { type: 6 /* Style */, styles: tokens };
	}
	/**
	 * `state` is an animation-specific function that is designed to be used inside of Angular's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular are used.
	 *
	 * `state` declares an animation state within the given trigger. When a state is active within a
	 * component then its associated styles will persist on the element that the trigger is attached to
	 * (even when the animation ends).
	 *
	 * To animate between states, have a look at the animation {\@link transition transition} DSL
	 * function. To register states to an animation trigger please have a look at the {\@link trigger
	 * trigger} function.
	 *
	 * #### The `void` state
	 *
	 * The `void` state value is a reserved word that angular uses to determine when the element is not
	 * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
	 * associated element is void).
	 *
	 * #### The `*` (default) state
	 *
	 * The `*` state (when styled) is a fallback state that will be used if the state that is being
	 * animated is not declared within the trigger.
	 *
	 * ### Usage
	 *
	 * `state` will declare an animation state with its associated styles
	 * within the given trigger.
	 *
	 * - `stateNameExpr` can be one or more state names separated by commas.
	 * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
	 * the state has been reached.
	 *
	 * ```typescript
	 * // "void" is a reserved name for a state and is used to represent
	 * // the state in which an element is detached from from the application.
	 * state("void", style({ height: 0 }))
	 *
	 * // user-defined states
	 * state("closed", style({ height: 0 }))
	 * state("open, visible", style({ height: "*" }))
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} name
	 * @param {?} styles
	 * @return {?}
	 */
	function state$1(name, styles) {
	    return { type: 0 /* State */, name: name, styles: styles };
	}
	/**
	 * `keyframes` is an animation-specific function that is designed to be used inside of Angular's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular are used.
	 *
	 * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
	 * by an `offset` value.
	 *
	 * ### Usage
	 *
	 * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
	 * animation function. Instead of applying animations from where they are currently to their
	 * destination, keyframes can describe how each style entry is applied and at what point within the
	 * animation arc (much like CSS Keyframe Animations do).
	 *
	 * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what
	 * percentage of the animate time the styles will be applied.
	 *
	 * ```typescript
	 * // the provided offset values describe when each backgroundColor value is applied.
	 * animate("5s", keyframes([
	 *   style({ backgroundColor: "red", offset: 0 }),
	 *   style({ backgroundColor: "blue", offset: 0.2 }),
	 *   style({ backgroundColor: "orange", offset: 0.3 }),
	 *   style({ backgroundColor: "black", offset: 1 })
	 * ]))
	 * ```
	 *
	 * Alternatively, if there are no `offset` values used within the style entries then the offsets
	 * will be calculated automatically.
	 *
	 * ```typescript
	 * animate("5s", keyframes([
	 *   style({ backgroundColor: "red" }) // offset = 0
	 *   style({ backgroundColor: "blue" }) // offset = 0.33
	 *   style({ backgroundColor: "orange" }) // offset = 0.66
	 *   style({ backgroundColor: "black" }) // offset = 1
	 * ]))
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} steps
	 * @return {?}
	 */
	function keyframes$1(steps) {
	    return { type: 5 /* KeyframeSequence */, steps: steps };
	}
	/**
	 * `transition` is an animation-specific function that is designed to be used inside of Angular's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular are used.
	 *
	 * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
	 * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
	 * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
	 * and/or ending state).
	 *
	 * A function can also be provided as the `stateChangeExpr` argument for a transition and this
	 * function will be executed each time a state change occurs. If the value returned within the
	 * function is true then the associated animation will be run.
	 *
	 * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
	 * to animate to a state value and persist its styles then one or more {\@link state animation
	 * states} is expected to be defined.
	 *
	 * ### Usage
	 *
	 * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
	 * what the previous state is and what the current state has become. In other words, if a transition
	 * is defined that matches the old/current state criteria then the associated animation will be
	 * triggered.
	 *
	 * ```typescript
	 * // all transition/state changes are defined within an animation trigger
	 * trigger("myAnimationTrigger", [
	 *   // if a state is defined then its styles will be persisted when the
	 *   // animation has fully completed itself
	 *   state("on", style({ background: "green" })),
	 *   state("off", style({ background: "grey" })),
	 *
	 *   // a transition animation that will be kicked off when the state value
	 *   // bound to "myAnimationTrigger" changes from "on" to "off"
	 *   transition("on => off", animate(500)),
	 *
	 *   // it is also possible to do run the same animation for both directions
	 *   transition("on <=> off", animate(500)),
	 *
	 *   // or to define multiple states pairs separated by commas
	 *   transition("on => off, off => void", animate(500)),
	 *
	 *   // this is a catch-all state change for when an element is inserted into
	 *   // the page and the destination state is unknown
	 *   transition("void => *", [
	 *     style({ opacity: 0 }),
	 *     animate(500)
	 *   ]),
	 *
	 *   // this will capture a state change between any states
	 *   transition("* => *", animate("1s 0s")),
	 *
	 *   // you can also go full out and include a function
	 *   transition((fromState, toState) => {
	 *     // when `true` then it will allow the animation below to be invoked
	 *     return fromState == "off" && toState == "on";
	 *   }, animate("1s 0s"))
	 * ])
	 * ```
	 *
	 * The template associated with this component will make use of the `myAnimationTrigger` animation
	 * trigger by binding to an element within its template code.
	 *
	 * ```html
	 * <!-- somewhere inside of my-component-tpl.html -->
	 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
	 * ```
	 *
	 * #### The final `animate` call
	 *
	 * If the final step within the transition steps is a call to `animate()` that **only** uses a
	 * timing value with **no style data** then it will be automatically used as the final animation arc
	 * for the element to animate itself to the final state. This involves an automatic mix of
	 * adding/removing CSS styles so that the element will be in the exact state it should be for the
	 * applied state to be presented correctly.
	 *
	 * ```
	 * // start off by hiding the element, but make sure that it animates properly to whatever state
	 * // is currently active for "myAnimationTrigger"
	 * transition("void => *", [
	 *   style({ opacity: 0 }),
	 *   animate(500)
	 * ])
	 * ```
	 *
	 * ### Transition Aliases (`:enter` and `:leave`)
	 *
	 * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
	 * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
	 * => void` state changes.
	 *
	 * ```
	 * transition(":enter", [
	 *   style({ opacity: 0 }),
	 *   animate(500, style({ opacity: 1 }))
	 * ])
	 * transition(":leave", [
	 *   animate(500, style({ opacity: 0 }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} stateChangeExpr
	 * @param {?} steps
	 * @return {?}
	 */
	function transition$1(stateChangeExpr, steps) {
	    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 */
	var AUTO_STYLE$$1 = '*';
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} name
	 * @param {?} definitions
	 * @return {?}
	 */
	function trigger$$1(name, definitions) {
	    return trigger$1(name, definitions);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} timings
	 * @param {?=} styles
	 * @return {?}
	 */
	function animate$$1(timings, styles) {
	    return animate$1(timings, styles);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} steps
	 * @return {?}
	 */
	function group$$1(steps) {
	    return group$1(steps);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} steps
	 * @return {?}
	 */
	function sequence$$1(steps) {
	    return sequence$1(steps);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} tokens
	 * @return {?}
	 */
	function style$$1(tokens) {
	    return style$1(tokens);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} name
	 * @param {?} styles
	 * @return {?}
	 */
	function state$$1(name, styles) {
	    return state$1(name, styles);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} steps
	 * @return {?}
	 */
	function keyframes$$1(steps) {
	    return keyframes$1(steps);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} stateChangeExpr
	 * @param {?} steps
	 * @return {?}
	 */
	function transition$$1(stateChangeExpr, steps) {
	    return transition$1(stateChangeExpr, steps);
	}

	exports.Class = Class;
	exports.createPlatform = createPlatform;
	exports.assertPlatform = assertPlatform;
	exports.destroyPlatform = destroyPlatform;
	exports.getPlatform = getPlatform;
	exports.PlatformRef = PlatformRef;
	exports.ApplicationRef = ApplicationRef;
	exports.enableProdMode = enableProdMode;
	exports.isDevMode = isDevMode;
	exports.createPlatformFactory = createPlatformFactory;
	exports.NgProbeToken = NgProbeToken;
	exports.APP_ID = APP_ID;
	exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
	exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
	exports.PLATFORM_ID = PLATFORM_ID;
	exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
	exports.APP_INITIALIZER = APP_INITIALIZER;
	exports.ApplicationInitStatus = ApplicationInitStatus;
	exports.DebugElement = DebugElement;
	exports.DebugNode = DebugNode;
	exports.asNativeElements = asNativeElements;
	exports.getDebugNode = getDebugNode;
	exports.Testability = Testability;
	exports.TestabilityRegistry = TestabilityRegistry;
	exports.setTestabilityGetter = setTestabilityGetter;
	exports.TRANSLATIONS = TRANSLATIONS;
	exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
	exports.LOCALE_ID = LOCALE_ID;
	exports.MissingTranslationStrategy = MissingTranslationStrategy;
	exports.ApplicationModule = ApplicationModule;
	exports.wtfCreateScope = wtfCreateScope;
	exports.wtfLeave = wtfLeave;
	exports.wtfStartTimeRange = wtfStartTimeRange;
	exports.wtfEndTimeRange = wtfEndTimeRange;
	exports.Type = Type;
	exports.EventEmitter = EventEmitter;
	exports.ErrorHandler = ErrorHandler;
	exports.Sanitizer = Sanitizer;
	exports.SecurityContext = SecurityContext;
	exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
	exports.Attribute = Attribute;
	exports.ContentChild = ContentChild;
	exports.ContentChildren = ContentChildren;
	exports.Query = Query;
	exports.ViewChild = ViewChild;
	exports.ViewChildren = ViewChildren;
	exports.Component = Component;
	exports.Directive = Directive;
	exports.HostBinding = HostBinding;
	exports.HostListener = HostListener;
	exports.Input = Input;
	exports.Output = Output;
	exports.Pipe = Pipe;
	exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
	exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
	exports.NgModule = NgModule;
	exports.ViewEncapsulation = ViewEncapsulation;
	exports.Version = Version;
	exports.VERSION = VERSION;
	exports.forwardRef = forwardRef;
	exports.resolveForwardRef = resolveForwardRef;
	exports.Injector = Injector;
	exports.ReflectiveInjector = ReflectiveInjector;
	exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
	exports.ReflectiveKey = ReflectiveKey;
	exports.InjectionToken = InjectionToken;
	exports.OpaqueToken = OpaqueToken;
	exports.Inject = Inject;
	exports.Optional = Optional;
	exports.Injectable = Injectable;
	exports.Self = Self;
	exports.SkipSelf = SkipSelf;
	exports.Host = Host;
	exports.NgZone = NgZone;
	exports.RenderComponentType = RenderComponentType;
	exports.Renderer = Renderer;
	exports.Renderer2 = Renderer2;
	exports.RendererFactory2 = RendererFactory2;
	exports.RendererStyleFlags2 = RendererStyleFlags2;
	exports.RootRenderer = RootRenderer;
	exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
	exports.Compiler = Compiler;
	exports.CompilerFactory = CompilerFactory;
	exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
	exports.ComponentFactory = ComponentFactory;
	exports.ComponentRef = ComponentRef;
	exports.ComponentFactoryResolver = ComponentFactoryResolver;
	exports.ElementRef = ElementRef;
	exports.NgModuleFactory = NgModuleFactory;
	exports.NgModuleRef = NgModuleRef;
	exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
	exports.getModuleFactory = getModuleFactory;
	exports.QueryList = QueryList;
	exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
	exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
	exports.TemplateRef = TemplateRef;
	exports.ViewContainerRef = ViewContainerRef;
	exports.EmbeddedViewRef = EmbeddedViewRef;
	exports.ViewRef = ViewRef;
	exports.ChangeDetectionStrategy = ChangeDetectionStrategy;
	exports.ChangeDetectorRef = ChangeDetectorRef;
	exports.DefaultIterableDiffer = DefaultIterableDiffer;
	exports.IterableDiffers = IterableDiffers;
	exports.KeyValueDiffers = KeyValueDiffers;
	exports.SimpleChange = SimpleChange;
	exports.WrappedValue = WrappedValue;
	exports.platformCore = platformCore;
	exports.ɵALLOW_MULTIPLE_PLATFORMS = ALLOW_MULTIPLE_PLATFORMS;
	exports.ɵAPP_ID_RANDOM_PROVIDER = APP_ID_RANDOM_PROVIDER;
	exports.ɵValueUnwrapper = ValueUnwrapper;
	exports.ɵdevModeEqual = devModeEqual;
	exports.ɵisListLikeIterable = isListLikeIterable;
	exports.ɵChangeDetectorStatus = ChangeDetectorStatus;
	exports.ɵisDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;
	exports.ɵConsole = Console;
	exports.ɵERROR_COMPONENT_TYPE = ERROR_COMPONENT_TYPE;
	exports.ɵComponentFactory = ComponentFactory;
	exports.ɵCodegenComponentFactoryResolver = CodegenComponentFactoryResolver;
	exports.ɵLIFECYCLE_HOOKS_VALUES = LIFECYCLE_HOOKS_VALUES;
	exports.ɵLifecycleHooks = LifecycleHooks;
	exports.ɵViewMetadata = ViewMetadata;
	exports.ɵReflector = Reflector;
	exports.ɵreflector = reflector;
	exports.ɵReflectionCapabilities = ReflectionCapabilities;
	exports.ɵReflectorReader = ReflectorReader;
	exports.ɵRenderDebugInfo = RenderDebugInfo;
	exports.ɵglobal = _global;
	exports.ɵlooseIdentical = looseIdentical;
	exports.ɵstringify = stringify;
	exports.ɵmakeDecorator = makeDecorator;
	exports.ɵisObservable = isObservable;
	exports.ɵisPromise = isPromise;
	exports.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR;
	exports.ɵNgModuleInjector = NgModuleInjector;
	exports.ɵregisterModuleFactory = registerModuleFactory;
	exports.ɵEMPTY_ARRAY = EMPTY_ARRAY;
	exports.ɵEMPTY_MAP = EMPTY_MAP;
	exports.ɵand = anchorDef;
	exports.ɵccf = createComponentFactory;
	exports.ɵcrt = createRendererType2;
	exports.ɵdid = directiveDef;
	exports.ɵeld = elementDef;
	exports.ɵelementEventFullName = elementEventFullName;
	exports.ɵgetComponentViewDefinitionFactory = getComponentViewDefinitionFactory;
	exports.ɵinlineInterpolate = inlineInterpolate;
	exports.ɵinterpolate = interpolate;
	exports.ɵncd = ngContentDef;
	exports.ɵnov = nodeValue;
	exports.ɵpid = pipeDef;
	exports.ɵprd = providerDef;
	exports.ɵpad = pureArrayDef;
	exports.ɵpod = pureObjectDef;
	exports.ɵppd = purePipeDef;
	exports.ɵqud = queryDef;
	exports.ɵted = textDef;
	exports.ɵunv = unwrapValue;
	exports.ɵvid = viewDef;
	exports.AUTO_STYLE = AUTO_STYLE$$1;
	exports.trigger = trigger$$1;
	exports.animate = animate$$1;
	exports.group = group$$1;
	exports.sequence = sequence$$1;
	exports.style = style$$1;
	exports.state = state$$1;
	exports.keyframes = keyframes$$1;
	exports.transition = transition$$1;
	exports.ɵba = animate$1;
	exports.ɵbb = group$1;
	exports.ɵbf = keyframes$1;
	exports.ɵbc = sequence$1;
	exports.ɵbe = state$1;
	exports.ɵbd = style$1;
	exports.ɵbg = transition$1;
	exports.ɵz = trigger$1;
	exports.ɵo = _initViewEngine;
	exports.ɵl = _iterableDiffersFactory;
	exports.ɵm = _keyValueDiffersFactory;
	exports.ɵn = _localeFactory;
	exports.ɵf = ApplicationRef_;
	exports.ɵg = _appIdRandomProviderFactory;
	exports.ɵh = defaultIterableDiffers;
	exports.ɵi = defaultKeyValueDiffers;
	exports.ɵj = DefaultIterableDifferFactory;
	exports.ɵk = DefaultKeyValueDifferFactory;
	exports.ɵc = ReflectiveInjector_;
	exports.ɵd = ReflectiveDependency;
	exports.ɵe = resolveReflectiveProviders;
	exports.ɵp = wtfEnabled;
	exports.ɵr = createScope$1;
	exports.ɵq = detectWTF;
	exports.ɵu = endTimeRange;
	exports.ɵs = leave;
	exports.ɵt = startTimeRange;
	exports.ɵa = makeParamDecorator;
	exports.ɵb = makePropDecorator;
	exports.ɵw = _def;
	exports.ɵx = DebugContext;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=core.umd.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(381);
	var toSubscriber_1 = __webpack_require__(382);
	var observable_1 = __webpack_require__(393);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is  called when the Observable is
	     * initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or
	     * `complete` can be called to notify of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * Creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @return {Observable} a new observable with the Operator applied
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            operator.call(sink, this.source);
	        }
	        else {
	            sink.add(this._trySubscribe(sink));
	        }
	        if (sink.syncErrorThrowable) {
	            sink.syncErrorThrowable = false;
	            if (sink.syncErrorThrown) {
	                throw sink.syncErrorValue;
	            }
	        }
	        return sink;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            sink.syncErrorThrown = true;
	            sink.syncErrorValue = err;
	            sink.error(err);
	        }
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @return {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, PromiseCtor) {
	        var _this = this;
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            // Must be declared in a separate statement to avoid a RefernceError when
	            // accessing subscription below in the closure due to Temporal Dead Zone.
	            var subscription;
	            subscription = _this.subscribe(function (value) {
	                if (subscription) {
	                    // if there is a subscription, then we can surmise
	                    // the next handling is asynchronous. Any errors thrown
	                    // need to be rejected explicitly and unsubscribe must be
	                    // called manually
	                    try {
	                        next(value);
	                    }
	                    catch (err) {
	                        reject(err);
	                        subscription.unsubscribe();
	                    }
	                }
	                else {
	                    // if there is NO subscription, then we're getting a nexted
	                    // value synchronously during subscription. We can just call it.
	                    // If it errors, Observable's `subscribe` will ensure the
	                    // unsubscription logic is called, then synchronously rethrow the error.
	                    // After that, Promise will trap the error and send it
	                    // down the rejection path.
	                    next(value);
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source.subscribe(subscriber);
	    };
	    /**
	     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     * @method Symbol.observable
	     * @return {Observable} this instance of the observable
	     */
	    Observable.prototype[observable_1.observable] = function () {
	        return this;
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * Creates a new cold Observable by calling the Observable constructor
	     * @static true
	     * @owner Observable
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @return {Observable} a new cold observable
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ }),
/* 381 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	/**
	 * window: browser in DOM main thread
	 * self: browser in WebWorker
	 * global: Node.js/other
	 */
	exports.root = (typeof window == 'object' && window.window === window && window
	    || typeof self == 'object' && self.self === self && self
	    || typeof global == 'object' && global.global === global && global);
	if (!exports.root) {
	    throw new Error('RxJS could not find any global context (window, self, global)');
	}
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Subscriber_1 = __webpack_require__(383);
	var rxSubscriber_1 = __webpack_require__(392);
	var Observer_1 = __webpack_require__(391);
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
	            return nextOrObserver[rxSubscriber_1.rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber_1.Subscriber(Observer_1.empty);
	    }
	    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	}
	exports.toSubscriber = toSubscriber;
	//# sourceMappingURL=toSubscriber.js.map

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isFunction_1 = __webpack_require__(384);
	var Subscription_1 = __webpack_require__(385);
	var Observer_1 = __webpack_require__(391);
	var rxSubscriber_1 = __webpack_require__(392);
	/**
	 * Implements the {@link Observer} interface and extends the
	 * {@link Subscription} class. While the {@link Observer} is the public API for
	 * consuming the values of an {@link Observable}, all Observers get converted to
	 * a Subscriber, in order to provide Subscription-like capabilities such as
	 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
	 * implementing operators, but it is rarely used as a public API.
	 *
	 * @class Subscriber<T>
	 */
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    /**
	     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
	     * defined Observer or a `next` callback function.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     */
	    function Subscriber(destinationOrNext, error, complete) {
	        _super.call(this);
	        this.syncErrorValue = null;
	        this.syncErrorThrown = false;
	        this.syncErrorThrowable = false;
	        this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                this.destination = Observer_1.empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    this.destination = Observer_1.empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        this.destination = destinationOrNext;
	                        this.destination.add(this);
	                    }
	                    else {
	                        this.syncErrorThrowable = true;
	                        this.destination = new SafeSubscriber(this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                this.syncErrorThrowable = true;
	                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
	                break;
	        }
	    }
	    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };
	    /**
	     * A static factory for a Subscriber, given a (potentially partial) definition
	     * of an Observer.
	     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
	     * Observer represented by the given arguments.
	     */
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `next` from
	     * the Observable, with a value. The Observable may call this method 0 or more
	     * times.
	     * @param {T} [value] The `next` value.
	     * @return {void}
	     */
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `error` from
	     * the Observable, with an attached {@link Error}. Notifies the Observer that
	     * the Observable has experienced an error condition.
	     * @param {any} [err] The `error` exception.
	     * @return {void}
	     */
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive a valueless notification of type
	     * `complete` from the Observable. Notifies the Observer that the Observable
	     * has finished sending push-based notifications.
	     * @return {void}
	     */
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    Subscriber.prototype._unsubscribeAndRecycle = function () {
	        var _a = this, _parent = _a._parent, _parents = _a._parents;
	        this._parent = null;
	        this._parents = null;
	        this.unsubscribe();
	        this.closed = false;
	        this.isStopped = false;
	        this._parent = _parent;
	        this._parents = _parents;
	        return this;
	    };
	    return Subscriber;
	}(Subscription_1.Subscription));
	exports.Subscriber = Subscriber;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
	        _super.call(this);
	        this._parentSubscriber = _parentSubscriber;
	        var next;
	        var context = this;
	        if (isFunction_1.isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (observerOrNext !== Observer_1.empty) {
	                context = Object.create(observerOrNext);
	                if (isFunction_1.isFunction(context.unsubscribe)) {
	                    this.add(context.unsubscribe.bind(context));
	                }
	                context.unsubscribe = this.unsubscribe.bind(this);
	            }
	        }
	        this._context = context;
	        this._next = next;
	        this._error = error;
	        this._complete = complete;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (!_parentSubscriber.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._error) {
	                if (!_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parentSubscriber.syncErrorThrowable) {
	                this.unsubscribe();
	                throw err;
	            }
	            else {
	                _parentSubscriber.syncErrorValue = err;
	                _parentSubscriber.syncErrorThrown = true;
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._complete) {
	                if (!_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._complete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, this._complete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            throw err;
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            parent.syncErrorValue = err;
	            parent.syncErrorThrown = true;
	            return true;
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parentSubscriber = this._parentSubscriber;
	        this._context = null;
	        this._parentSubscriber = null;
	        _parentSubscriber.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

/***/ }),
/* 384 */
/***/ (function(module, exports) {

	"use strict";
	function isFunction(x) {
	    return typeof x === 'function';
	}
	exports.isFunction = isFunction;
	//# sourceMappingURL=isFunction.js.map

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var isArray_1 = __webpack_require__(386);
	var isObject_1 = __webpack_require__(387);
	var isFunction_1 = __webpack_require__(384);
	var tryCatch_1 = __webpack_require__(388);
	var errorObject_1 = __webpack_require__(389);
	var UnsubscriptionError_1 = __webpack_require__(390);
	/**
	 * Represents a disposable resource, such as the execution of an Observable. A
	 * Subscription has one important method, `unsubscribe`, that takes no argument
	 * and just disposes the resource held by the subscription.
	 *
	 * Additionally, subscriptions may be grouped together through the `add()`
	 * method, which will attach a child Subscription to the current Subscription.
	 * When a Subscription is unsubscribed, all its children (and its grandchildren)
	 * will be unsubscribed as well.
	 *
	 * @class Subscription
	 */
	var Subscription = (function () {
	    /**
	     * @param {function(): void} [unsubscribe] A function describing how to
	     * perform the disposal of resources when the `unsubscribe` method is called.
	     */
	    function Subscription(unsubscribe) {
	        /**
	         * A flag to indicate whether this Subscription has already been unsubscribed.
	         * @type {boolean}
	         */
	        this.closed = false;
	        this._parent = null;
	        this._parents = null;
	        this._subscriptions = null;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    /**
	     * Disposes the resources held by the subscription. May, for instance, cancel
	     * an ongoing Observable execution or cancel any other type of work that
	     * started when the Subscription was created.
	     * @return {void}
	     */
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this.closed = true;
	        this._parent = null;
	        this._parents = null;
	        // null out _subscriptions first so any child subscriptions that attempt
	        // to remove themselves from this subscription will noop
	        this._subscriptions = null;
	        var index = -1;
	        var len = _parents ? _parents.length : 0;
	        // if this._parent is null, then so is this._parents, and we
	        // don't have to remove ourselves from any parent subscriptions.
	        while (_parent) {
	            _parent.remove(this);
	            // if this._parents is null or index >= len,
	            // then _parent is set to null, and the loop exits
	            _parent = ++index < len && _parents[index] || null;
	        }
	        if (isFunction_1.isFunction(_unsubscribe)) {
	            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject_1.errorObject) {
	                hasErrors = true;
	                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
	                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
	            }
	        }
	        if (isArray_1.isArray(_subscriptions)) {
	            index = -1;
	            len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject_1.isObject(sub)) {
	                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject_1.errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject_1.errorObject.e;
	                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
	                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
	        }
	    };
	    /**
	     * Adds a tear down to be called during the unsubscribe() of this
	     * Subscription.
	     *
	     * If the tear down being added is a subscription that is already
	     * unsubscribed, is the same reference `add` is being called on, or is
	     * `Subscription.EMPTY`, it will not be added.
	     *
	     * If this subscription is already in an `closed` state, the passed
	     * tear down logic will be executed immediately.
	     *
	     * @param {TeardownLogic} teardown The additional logic to execute on
	     * teardown.
	     * @return {Subscription} Returns the Subscription used or created to be
	     * added to the inner subscriptions list. This Subscription can be used with
	     * `remove()` to remove the passed teardown logic from the inner subscriptions
	     * list.
	     */
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === Subscription.EMPTY)) {
	            return Subscription.EMPTY;
	        }
	        if (teardown === this) {
	            return this;
	        }
	        var subscription = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                subscription = new Subscription(teardown);
	            case 'object':
	                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
	                    return subscription;
	                }
	                else if (this.closed) {
	                    subscription.unsubscribe();
	                    return subscription;
	                }
	                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
	                    var tmp = subscription;
	                    subscription = new Subscription();
	                    subscription._subscriptions = [tmp];
	                }
	                break;
	            default:
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        var subscriptions = this._subscriptions || (this._subscriptions = []);
	        subscriptions.push(subscription);
	        subscription._addParent(this);
	        return subscription;
	    };
	    /**
	     * Removes a Subscription from the internal list of subscriptions that will
	     * unsubscribe during the unsubscribe process of this Subscription.
	     * @param {Subscription} subscription The subscription to remove.
	     * @return {void}
	     */
	    Subscription.prototype.remove = function (subscription) {
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.prototype._addParent = function (parent) {
	        var _a = this, _parent = _a._parent, _parents = _a._parents;
	        if (!_parent || _parent === parent) {
	            // If we don't have a parent, or the new parent is the same as the
	            // current parent, then set this._parent to the new parent.
	            this._parent = parent;
	        }
	        else if (!_parents) {
	            // If there's already one parent, but not multiple, allocate an Array to
	            // store the rest of the parent Subscriptions.
	            this._parents = [parent];
	        }
	        else if (_parents.indexOf(parent) === -1) {
	            // Only add the new parent to the _parents list if it's not already there.
	            _parents.push(parent);
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	exports.Subscription = Subscription;
	function flattenUnsubscriptionErrors(errors) {
	    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
	}
	//# sourceMappingURL=Subscription.js.map

/***/ }),
/* 386 */
/***/ (function(module, exports) {

	"use strict";
	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ }),
/* 387 */
/***/ (function(module, exports) {

	"use strict";
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}
	exports.isObject = isObject;
	//# sourceMappingURL=isObject.js.map

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var errorObject_1 = __webpack_require__(389);
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject_1.errorObject.e = e;
	        return errorObject_1.errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	exports.tryCatch = tryCatch;
	;
	//# sourceMappingURL=tryCatch.js.map

/***/ }),
/* 389 */
/***/ (function(module, exports) {

	"use strict";
	// typeof any so that it we don't have to cast when comparing a result to the error object
	exports.errorObject = { e: {} };
	//# sourceMappingURL=errorObject.js.map

/***/ }),
/* 390 */
/***/ (function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when one or more errors have occurred during the
	 * `unsubscribe` of a {@link Subscription}.
	 */
	var UnsubscriptionError = (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        _super.call(this);
	        this.errors = errors;
	        var err = Error.call(this, errors ?
	            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
	        this.name = err.name = 'UnsubscriptionError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return UnsubscriptionError;
	}(Error));
	exports.UnsubscriptionError = UnsubscriptionError;
	//# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),
/* 391 */
/***/ (function(module, exports) {

	"use strict";
	exports.empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) { throw err; },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(381);
	var Symbol = root_1.root.Symbol;
	exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
	    Symbol.for('rxSubscriber') : '@@rxSubscriber';
	/**
	 * @deprecated use rxSubscriber instead
	 */
	exports.$$rxSubscriber = exports.rxSubscriber;
	//# sourceMappingURL=rxSubscriber.js.map

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(381);
	function getSymbolObservable(context) {
	    var $$observable;
	    var Symbol = context.Symbol;
	    if (typeof Symbol === 'function') {
	        if (Symbol.observable) {
	            $$observable = Symbol.observable;
	        }
	        else {
	            $$observable = Symbol('observable');
	            Symbol.observable = $$observable;
	        }
	    }
	    else {
	        $$observable = '@@observable';
	    }
	    return $$observable;
	}
	exports.getSymbolObservable = getSymbolObservable;
	exports.observable = getSymbolObservable(root_1.root);
	/**
	 * @deprecated use observable instead
	 */
	exports.$$observable = exports.observable;
	//# sourceMappingURL=observable.js.map

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var merge_1 = __webpack_require__(395);
	exports.merge = merge_1.mergeStatic;
	//# sourceMappingURL=merge.js.map

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(380);
	var ArrayObservable_1 = __webpack_require__(396);
	var mergeAll_1 = __webpack_require__(400);
	var isScheduler_1 = __webpack_require__(399);
	/* tslint:enable:max-line-length */
	/**
	 * Creates an output Observable which concurrently emits all values from every
	 * given input Observable.
	 *
	 * <span class="informal">Flattens multiple Observables together by blending
	 * their values into one Observable.</span>
	 *
	 * <img src="./img/merge.png" width="100%">
	 *
	 * `merge` subscribes to each given input Observable (either the source or an
	 * Observable given as argument), and simply forwards (without doing any
	 * transformation) all the values from all the input Observables to the output
	 * Observable. The output Observable only completes once all input Observables
	 * have completed. Any error delivered by an input Observable will be immediately
	 * emitted on the output Observable.
	 *
	 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var timer = Rx.Observable.interval(1000);
	 * var clicksOrTimer = clicks.merge(timer);
	 * clicksOrTimer.subscribe(x => console.log(x));
	 *
	 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var concurrent = 2; // the argument
	 * var merged = timer1.merge(timer2, timer3, concurrent);
	 * merged.subscribe(x => console.log(x));
	 *
	 * @see {@link mergeAll}
	 * @see {@link mergeMap}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 *
	 * @param {ObservableInput} other An input Observable to merge with the source
	 * Observable. More than one input Observables may be given as argument.
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
	 * Observables being subscribed to concurrently.
	 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
	 * concurrency of input Observables.
	 * @return {Observable} An Observable that emits items that are the result of
	 * every input Observable.
	 * @method merge
	 * @owner Observable
	 */
	function merge() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
	}
	exports.merge = merge;
	/* tslint:enable:max-line-length */
	/**
	 * Creates an output Observable which concurrently emits all values from every
	 * given input Observable.
	 *
	 * <span class="informal">Flattens multiple Observables together by blending
	 * their values into one Observable.</span>
	 *
	 * <img src="./img/merge.png" width="100%">
	 *
	 * `merge` subscribes to each given input Observable (as arguments), and simply
	 * forwards (without doing any transformation) all the values from all the input
	 * Observables to the output Observable. The output Observable only completes
	 * once all input Observables have completed. Any error delivered by an input
	 * Observable will be immediately emitted on the output Observable.
	 *
	 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var timer = Rx.Observable.interval(1000);
	 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
	 * clicksOrTimer.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // timer will emit ascending values, one every second(1000ms) to console
	 * // clicks logs MouseEvents to console everytime the "document" is clicked
	 * // Since the two streams are merged you see these happening
	 * // as they occur.
	 *
	 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var concurrent = 2; // the argument
	 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
	 * merged.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // - First timer1 and timer2 will run concurrently
	 * // - timer1 will emit a value every 1000ms for 10 iterations
	 * // - timer2 will emit a value every 2000ms for 6 iterations
	 * // - after timer1 hits it's max iteration, timer2 will
	 * //   continue, and timer3 will start to run concurrently with timer2
	 * // - when timer2 hits it's max iteration it terminates, and
	 * //   timer3 will continue to emit a value every 500ms until it is complete
	 *
	 * @see {@link mergeAll}
	 * @see {@link mergeMap}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 *
	 * @param {...ObservableInput} observables Input Observables to merge together.
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
	 * Observables being subscribed to concurrently.
	 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
	 * concurrency of input Observables.
	 * @return {Observable} an Observable that emits items that are the result of
	 * every input Observable.
	 * @static true
	 * @name merge
	 * @owner Observable
	 */
	function mergeStatic() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var concurrent = Number.POSITIVE_INFINITY;
	    var scheduler = null;
	    var last = observables[observables.length - 1];
	    if (isScheduler_1.isScheduler(last)) {
	        scheduler = observables.pop();
	        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
	            concurrent = observables.pop();
	        }
	    }
	    else if (typeof last === 'number') {
	        concurrent = observables.pop();
	    }
	    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
	        return observables[0];
	    }
	    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
	}
	exports.mergeStatic = mergeStatic;
	//# sourceMappingURL=merge.js.map

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(380);
	var ScalarObservable_1 = __webpack_require__(397);
	var EmptyObservable_1 = __webpack_require__(398);
	var isScheduler_1 = __webpack_require__(399);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ArrayObservable = (function (_super) {
	    __extends(ArrayObservable, _super);
	    function ArrayObservable(array, scheduler) {
	        _super.call(this);
	        this.array = array;
	        this.scheduler = scheduler;
	        if (!scheduler && array.length === 1) {
	            this._isScalar = true;
	            this.value = array[0];
	        }
	    }
	    ArrayObservable.create = function (array, scheduler) {
	        return new ArrayObservable(array, scheduler);
	    };
	    /**
	     * Creates an Observable that emits some values you specify as arguments,
	     * immediately one after the other, and then emits a complete notification.
	     *
	     * <span class="informal">Emits the arguments you provide, then completes.
	     * </span>
	     *
	     * <img src="./img/of.png" width="100%">
	     *
	     * This static operator is useful for creating a simple Observable that only
	     * emits the arguments given, and the complete notification thereafter. It can
	     * be used for composing with other Observables, such as with {@link concat}.
	     * By default, it uses a `null` IScheduler, which means the `next`
	     * notifications are sent synchronously, although with a different IScheduler
	     * it is possible to determine when those notifications will be delivered.
	     *
	     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
	     * var numbers = Rx.Observable.of(10, 20, 30);
	     * var letters = Rx.Observable.of('a', 'b', 'c');
	     * var interval = Rx.Observable.interval(1000);
	     * var result = numbers.concat(letters).concat(interval);
	     * result.subscribe(x => console.log(x));
	     *
	     * @see {@link create}
	     * @see {@link empty}
	     * @see {@link never}
	     * @see {@link throw}
	     *
	     * @param {...T} values Arguments that represent `next` values to be emitted.
	     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
	     * the emissions of the `next` notifications.
	     * @return {Observable<T>} An Observable that emits each given input value.
	     * @static true
	     * @name of
	     * @owner Observable
	     */
	    ArrayObservable.of = function () {
	        var array = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            array[_i - 0] = arguments[_i];
	        }
	        var scheduler = array[array.length - 1];
	        if (isScheduler_1.isScheduler(scheduler)) {
	            array.pop();
	        }
	        else {
	            scheduler = null;
	        }
	        var len = array.length;
	        if (len > 1) {
	            return new ArrayObservable(array, scheduler);
	        }
	        else if (len === 1) {
	            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
	        }
	        else {
	            return new EmptyObservable_1.EmptyObservable(scheduler);
	        }
	    };
	    ArrayObservable.dispatch = function (state) {
	        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
	        if (index >= count) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(array[index]);
	        if (subscriber.closed) {
	            return;
	        }
	        state.index = index + 1;
	        this.schedule(state);
	    };
	    ArrayObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var array = this.array;
	        var count = array.length;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(ArrayObservable.dispatch, 0, {
	                array: array, index: index, count: count, subscriber: subscriber
	            });
	        }
	        else {
	            for (var i = 0; i < count && !subscriber.closed; i++) {
	                subscriber.next(array[i]);
	            }
	            subscriber.complete();
	        }
	    };
	    return ArrayObservable;
	}(Observable_1.Observable));
	exports.ArrayObservable = ArrayObservable;
	//# sourceMappingURL=ArrayObservable.js.map

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(380);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ScalarObservable = (function (_super) {
	    __extends(ScalarObservable, _super);
	    function ScalarObservable(value, scheduler) {
	        _super.call(this);
	        this.value = value;
	        this.scheduler = scheduler;
	        this._isScalar = true;
	        if (scheduler) {
	            this._isScalar = false;
	        }
	    }
	    ScalarObservable.create = function (value, scheduler) {
	        return new ScalarObservable(value, scheduler);
	    };
	    ScalarObservable.dispatch = function (state) {
	        var done = state.done, value = state.value, subscriber = state.subscriber;
	        if (done) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(value);
	        if (subscriber.closed) {
	            return;
	        }
	        state.done = true;
	        this.schedule(state);
	    };
	    ScalarObservable.prototype._subscribe = function (subscriber) {
	        var value = this.value;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(ScalarObservable.dispatch, 0, {
	                done: false, value: value, subscriber: subscriber
	            });
	        }
	        else {
	            subscriber.next(value);
	            if (!subscriber.closed) {
	                subscriber.complete();
	            }
	        }
	    };
	    return ScalarObservable;
	}(Observable_1.Observable));
	exports.ScalarObservable = ScalarObservable;
	//# sourceMappingURL=ScalarObservable.js.map

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(380);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var EmptyObservable = (function (_super) {
	    __extends(EmptyObservable, _super);
	    function EmptyObservable(scheduler) {
	        _super.call(this);
	        this.scheduler = scheduler;
	    }
	    /**
	     * Creates an Observable that emits no items to the Observer and immediately
	     * emits a complete notification.
	     *
	     * <span class="informal">Just emits 'complete', and nothing else.
	     * </span>
	     *
	     * <img src="./img/empty.png" width="100%">
	     *
	     * This static operator is useful for creating a simple Observable that only
	     * emits the complete notification. It can be used for composing with other
	     * Observables, such as in a {@link mergeMap}.
	     *
	     * @example <caption>Emit the number 7, then complete.</caption>
	     * var result = Rx.Observable.empty().startWith(7);
	     * result.subscribe(x => console.log(x));
	     *
	     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
	     * var interval = Rx.Observable.interval(1000);
	     * var result = interval.mergeMap(x =>
	     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
	     * );
	     * result.subscribe(x => console.log(x));
	     *
	     * // Results in the following to the console:
	     * // x is equal to the count on the interval eg(0,1,2,3,...)
	     * // x will occur every 1000ms
	     * // if x % 2 is equal to 1 print abc
	     * // if x % 2 is not equal to 1 nothing will be output
	     *
	     * @see {@link create}
	     * @see {@link never}
	     * @see {@link of}
	     * @see {@link throw}
	     *
	     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
	     * the emission of the complete notification.
	     * @return {Observable} An "empty" Observable: emits only the complete
	     * notification.
	     * @static true
	     * @name empty
	     * @owner Observable
	     */
	    EmptyObservable.create = function (scheduler) {
	        return new EmptyObservable(scheduler);
	    };
	    EmptyObservable.dispatch = function (arg) {
	        var subscriber = arg.subscriber;
	        subscriber.complete();
	    };
	    EmptyObservable.prototype._subscribe = function (subscriber) {
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
	        }
	        else {
	            subscriber.complete();
	        }
	    };
	    return EmptyObservable;
	}(Observable_1.Observable));
	exports.EmptyObservable = EmptyObservable;
	//# sourceMappingURL=EmptyObservable.js.map

/***/ }),
/* 399 */
/***/ (function(module, exports) {

	"use strict";
	function isScheduler(value) {
	    return value && typeof value.schedule === 'function';
	}
	exports.isScheduler = isScheduler;
	//# sourceMappingURL=isScheduler.js.map

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(401);
	var subscribeToResult_1 = __webpack_require__(402);
	/**
	 * Converts a higher-order Observable into a first-order Observable which
	 * concurrently delivers all values that are emitted on the inner Observables.
	 *
	 * <span class="informal">Flattens an Observable-of-Observables.</span>
	 *
	 * <img src="./img/mergeAll.png" width="100%">
	 *
	 * `mergeAll` subscribes to an Observable that emits Observables, also known as
	 * a higher-order Observable. Each time it observes one of these emitted inner
	 * Observables, it subscribes to that and delivers all the values from the
	 * inner Observable on the output Observable. The output Observable only
	 * completes once all inner Observables have completed. Any error delivered by
	 * a inner Observable will be immediately emitted on the output Observable.
	 *
	 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
	 * var firstOrder = higherOrder.mergeAll();
	 * firstOrder.subscribe(x => console.log(x));
	 *
	 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
	 * var firstOrder = higherOrder.mergeAll(2);
	 * firstOrder.subscribe(x => console.log(x));
	 *
	 * @see {@link combineAll}
	 * @see {@link concatAll}
	 * @see {@link exhaust}
	 * @see {@link merge}
	 * @see {@link mergeMap}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 * @see {@link switch}
	 * @see {@link zipAll}
	 *
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
	 * Observables being subscribed to concurrently.
	 * @return {Observable} An Observable that emits values coming from all the
	 * inner Observables emitted by the source Observable.
	 * @method mergeAll
	 * @owner Observable
	 */
	function mergeAll(concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    return this.lift(new MergeAllOperator(concurrent));
	}
	exports.mergeAll = mergeAll;
	var MergeAllOperator = (function () {
	    function MergeAllOperator(concurrent) {
	        this.concurrent = concurrent;
	    }
	    MergeAllOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
	    };
	    return MergeAllOperator;
	}());
	exports.MergeAllOperator = MergeAllOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MergeAllSubscriber = (function (_super) {
	    __extends(MergeAllSubscriber, _super);
	    function MergeAllSubscriber(destination, concurrent) {
	        _super.call(this, destination);
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	    }
	    MergeAllSubscriber.prototype._next = function (observable) {
	        if (this.active < this.concurrent) {
	            this.active++;
	            this.add(subscribeToResult_1.subscribeToResult(this, observable));
	        }
	        else {
	            this.buffer.push(observable);
	        }
	    };
	    MergeAllSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeAllSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.MergeAllSubscriber = MergeAllSubscriber;
	//# sourceMappingURL=mergeAll.js.map

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(383);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var OuterSubscriber = (function (_super) {
	    __extends(OuterSubscriber, _super);
	    function OuterSubscriber() {
	        _super.apply(this, arguments);
	    }
	    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.destination.error(error);
	    };
	    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.destination.complete();
	    };
	    return OuterSubscriber;
	}(Subscriber_1.Subscriber));
	exports.OuterSubscriber = OuterSubscriber;
	//# sourceMappingURL=OuterSubscriber.js.map

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(381);
	var isArrayLike_1 = __webpack_require__(403);
	var isPromise_1 = __webpack_require__(404);
	var isObject_1 = __webpack_require__(387);
	var Observable_1 = __webpack_require__(380);
	var iterator_1 = __webpack_require__(405);
	var InnerSubscriber_1 = __webpack_require__(406);
	var observable_1 = __webpack_require__(393);
	function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
	    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
	    if (destination.closed) {
	        return null;
	    }
	    if (result instanceof Observable_1.Observable) {
	        if (result._isScalar) {
	            destination.next(result.value);
	            destination.complete();
	            return null;
	        }
	        else {
	            return result.subscribe(destination);
	        }
	    }
	    else if (isArrayLike_1.isArrayLike(result)) {
	        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
	            destination.next(result[i]);
	        }
	        if (!destination.closed) {
	            destination.complete();
	        }
	    }
	    else if (isPromise_1.isPromise(result)) {
	        result.then(function (value) {
	            if (!destination.closed) {
	                destination.next(value);
	                destination.complete();
	            }
	        }, function (err) { return destination.error(err); })
	            .then(null, function (err) {
	            // Escaping the Promise trap: globally throw unhandled errors
	            root_1.root.setTimeout(function () { throw err; });
	        });
	        return destination;
	    }
	    else if (result && typeof result[iterator_1.iterator] === 'function') {
	        var iterator = result[iterator_1.iterator]();
	        do {
	            var item = iterator.next();
	            if (item.done) {
	                destination.complete();
	                break;
	            }
	            destination.next(item.value);
	            if (destination.closed) {
	                break;
	            }
	        } while (true);
	    }
	    else if (result && typeof result[observable_1.observable] === 'function') {
	        var obs = result[observable_1.observable]();
	        if (typeof obs.subscribe !== 'function') {
	            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
	        }
	        else {
	            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
	        }
	    }
	    else {
	        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
	        var msg = ("You provided " + value + " where a stream was expected.")
	            + ' You can provide an Observable, Promise, Array, or Iterable.';
	        destination.error(new TypeError(msg));
	    }
	    return null;
	}
	exports.subscribeToResult = subscribeToResult;
	//# sourceMappingURL=subscribeToResult.js.map

/***/ }),
/* 403 */
/***/ (function(module, exports) {

	"use strict";
	exports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArrayLike.js.map

/***/ }),
/* 404 */
/***/ (function(module, exports) {

	"use strict";
	function isPromise(value) {
	    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
	}
	exports.isPromise = isPromise;
	//# sourceMappingURL=isPromise.js.map

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(381);
	function symbolIteratorPonyfill(root) {
	    var Symbol = root.Symbol;
	    if (typeof Symbol === 'function') {
	        if (!Symbol.iterator) {
	            Symbol.iterator = Symbol('iterator polyfill');
	        }
	        return Symbol.iterator;
	    }
	    else {
	        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
	        var Set_1 = root.Set;
	        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
	            return '@@iterator';
	        }
	        var Map_1 = root.Map;
	        // required for compatability with es6-shim
	        if (Map_1) {
	            var keys = Object.getOwnPropertyNames(Map_1.prototype);
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
	                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
	                    return key;
	                }
	            }
	        }
	        return '@@iterator';
	    }
	}
	exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
	exports.iterator = symbolIteratorPonyfill(root_1.root);
	/**
	 * @deprecated use iterator instead
	 */
	exports.$$iterator = exports.iterator;
	//# sourceMappingURL=iterator.js.map

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(383);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var InnerSubscriber = (function (_super) {
	    __extends(InnerSubscriber, _super);
	    function InnerSubscriber(parent, outerValue, outerIndex) {
	        _super.call(this);
	        this.parent = parent;
	        this.outerValue = outerValue;
	        this.outerIndex = outerIndex;
	        this.index = 0;
	    }
	    InnerSubscriber.prototype._next = function (value) {
	        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
	    };
	    InnerSubscriber.prototype._error = function (error) {
	        this.parent.notifyError(error, this);
	        this.unsubscribe();
	    };
	    InnerSubscriber.prototype._complete = function () {
	        this.parent.notifyComplete(this);
	        this.unsubscribe();
	    };
	    return InnerSubscriber;
	}(Subscriber_1.Subscriber));
	exports.InnerSubscriber = InnerSubscriber;
	//# sourceMappingURL=InnerSubscriber.js.map

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var multicast_1 = __webpack_require__(408);
	var Subject_1 = __webpack_require__(410);
	function shareSubjectFactory() {
	    return new Subject_1.Subject();
	}
	/**
	 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
	 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
	 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
	 * This is an alias for .publish().refCount().
	 *
	 * <img src="./img/share.png" width="100%">
	 *
	 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
	 * @method share
	 * @owner Observable
	 */
	function share() {
	    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
	}
	exports.share = share;
	;
	//# sourceMappingURL=share.js.map

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var ConnectableObservable_1 = __webpack_require__(409);
	/* tslint:enable:max-line-length */
	/**
	 * Returns an Observable that emits the results of invoking a specified selector on items
	 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
	 *
	 * <img src="./img/multicast.png" width="100%">
	 *
	 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
	 * which the source sequence's elements will be multicast to the selector function
	 * or Subject to push source elements into.
	 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
	 * as many times as needed, without causing multiple subscriptions to the source stream.
	 * Subscribers to the given source will receive all notifications of the source from the
	 * time of the subscription forward.
	 * @return {Observable} An Observable that emits the results of invoking the selector
	 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
	 * the underlying stream.
	 * @method multicast
	 * @owner Observable
	 */
	function multicast(subjectOrSubjectFactory, selector) {
	    var subjectFactory;
	    if (typeof subjectOrSubjectFactory === 'function') {
	        subjectFactory = subjectOrSubjectFactory;
	    }
	    else {
	        subjectFactory = function subjectFactory() {
	            return subjectOrSubjectFactory;
	        };
	    }
	    if (typeof selector === 'function') {
	        return this.lift(new MulticastOperator(subjectFactory, selector));
	    }
	    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
	    connectable.source = this;
	    connectable.subjectFactory = subjectFactory;
	    return connectable;
	}
	exports.multicast = multicast;
	var MulticastOperator = (function () {
	    function MulticastOperator(subjectFactory, selector) {
	        this.subjectFactory = subjectFactory;
	        this.selector = selector;
	    }
	    MulticastOperator.prototype.call = function (subscriber, source) {
	        var selector = this.selector;
	        var subject = this.subjectFactory();
	        var subscription = selector(subject).subscribe(subscriber);
	        subscription.add(source.subscribe(subject));
	        return subscription;
	    };
	    return MulticastOperator;
	}());
	exports.MulticastOperator = MulticastOperator;
	//# sourceMappingURL=multicast.js.map

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(410);
	var Observable_1 = __webpack_require__(380);
	var Subscriber_1 = __webpack_require__(383);
	var Subscription_1 = __webpack_require__(385);
	/**
	 * @class ConnectableObservable<T>
	 */
	var ConnectableObservable = (function (_super) {
	    __extends(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        _super.call(this);
	        this.source = source;
	        this.subjectFactory = subjectFactory;
	        this._refCount = 0;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var connection = this._connection;
	        if (!connection) {
	            connection = this._connection = new Subscription_1.Subscription();
	            connection.add(this.source
	                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription_1.Subscription.EMPTY;
	            }
	            else {
	                this._connection = connection;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return this.lift(new RefCountOperator(this));
	    };
	    return ConnectableObservable;
	}(Observable_1.Observable));
	exports.ConnectableObservable = ConnectableObservable;
	exports.connectableObservableDescriptor = {
	    operator: { value: null },
	    _refCount: { value: 0, writable: true },
	    _subject: { value: null, writable: true },
	    _connection: { value: null, writable: true },
	    _subscribe: { value: ConnectableObservable.prototype._subscribe },
	    getSubject: { value: ConnectableObservable.prototype.getSubject },
	    connect: { value: ConnectableObservable.prototype.connect },
	    refCount: { value: ConnectableObservable.prototype.refCount }
	};
	var ConnectableSubscriber = (function (_super) {
	    __extends(ConnectableSubscriber, _super);
	    function ConnectableSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    ConnectableSubscriber.prototype._error = function (err) {
	        this._unsubscribe();
	        _super.prototype._error.call(this, err);
	    };
	    ConnectableSubscriber.prototype._complete = function () {
	        this._unsubscribe();
	        _super.prototype._complete.call(this);
	    };
	    ConnectableSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (connectable) {
	            this.connectable = null;
	            var connection = connectable._connection;
	            connectable._refCount = 0;
	            connectable._subject = null;
	            connectable._connection = null;
	            if (connection) {
	                connection.unsubscribe();
	            }
	        }
	    };
	    return ConnectableSubscriber;
	}(Subject_1.SubjectSubscriber));
	var RefCountOperator = (function () {
	    function RefCountOperator(connectable) {
	        this.connectable = connectable;
	    }
	    RefCountOperator.prototype.call = function (subscriber, source) {
	        var connectable = this.connectable;
	        connectable._refCount++;
	        var refCounter = new RefCountSubscriber(subscriber, connectable);
	        var subscription = source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            refCounter.connection = connectable.connect();
	        }
	        return subscription;
	    };
	    return RefCountOperator;
	}());
	var RefCountSubscriber = (function (_super) {
	    __extends(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount = connectable._refCount;
	        if (refCount <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount - 1;
	        if (refCount > 1) {
	            this.connection = null;
	            return;
	        }
	        ///
	        // Compare the local RefCountSubscriber's connection Subscription to the
	        // connection Subscription on the shared ConnectableObservable. In cases
	        // where the ConnectableObservable source synchronously emits values, and
	        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
	        // execution continues to here before the RefCountOperator has a chance to
	        // supply the RefCountSubscriber with the shared connection Subscription.
	        // For example:
	        // ```
	        // Observable.range(0, 10)
	        //   .publish()
	        //   .refCount()
	        //   .take(5)
	        //   .subscribe();
	        // ```
	        // In order to account for this case, RefCountSubscriber should only dispose
	        // the ConnectableObservable's shared connection Subscription if the
	        // connection Subscription exists, *and* either:
	        //   a. RefCountSubscriber doesn't have a reference to the shared connection
	        //      Subscription yet, or,
	        //   b. RefCountSubscriber's connection Subscription reference is identical
	        //      to the shared connection Subscription
	        ///
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=ConnectableObservable.js.map

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(380);
	var Subscriber_1 = __webpack_require__(383);
	var Subscription_1 = __webpack_require__(385);
	var ObjectUnsubscribedError_1 = __webpack_require__(411);
	var SubjectSubscription_1 = __webpack_require__(412);
	var rxSubscriber_1 = __webpack_require__(392);
	/**
	 * @class SubjectSubscriber<T>
	 */
	var SubjectSubscriber = (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        _super.call(this, destination);
	        this.destination = destination;
	    }
	    return SubjectSubscriber;
	}(Subscriber_1.Subscriber));
	exports.SubjectSubscriber = SubjectSubscriber;
	/**
	 * @class Subject<T>
	 */
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        _super.call(this);
	        this.observers = [];
	        this.closed = false;
	        this.isStopped = false;
	        this.hasError = false;
	        this.thrownError = null;
	    }
	    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._trySubscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else {
	            return _super.prototype._trySubscribe.call(this, subscriber);
	        }
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable_1.Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable_1.Observable));
	exports.Subject = Subject;
	/**
	 * @class AnonymousSubject<T>
	 */
	var AnonymousSubject = (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.source = source;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription_1.Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));
	exports.AnonymousSubject = AnonymousSubject;
	//# sourceMappingURL=Subject.js.map

/***/ }),
/* 411 */
/***/ (function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an action is invalid because the object has been
	 * unsubscribed.
	 *
	 * @see {@link Subject}
	 * @see {@link BehaviorSubject}
	 *
	 * @class ObjectUnsubscribedError
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        var err = _super.call(this, 'object unsubscribed');
	        this.name = err.name = 'ObjectUnsubscribedError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ObjectUnsubscribedError;
	}(Error));
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(385);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        _super.call(this);
	        this.subject = subject;
	        this.subscriber = subscriber;
	        this.closed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription_1.Subscription));
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(379)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}),global.ng.core));
	}(this, (function (exports,_angular_core) { 'use strict';

	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This class should not be used directly by an application developer. Instead, use
	 * {\@link Location}.
	 *
	 * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
	 * agnostic.
	 * This means that we can have different implementation of `PlatformLocation` for the different
	 * platforms
	 * that angular supports. For example, the default `PlatformLocation` is {\@link
	 * BrowserPlatformLocation},
	 * however when you run your app in a WebWorker you use {\@link WebWorkerPlatformLocation}.
	 *
	 * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
	 * when
	 * they need to interact with the DOM apis like pushState, popState, etc...
	 *
	 * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
	 * by
	 * the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
	 * Router} /
	 * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
	 * class
	 * they are all platform independent.
	 *
	 * \@stable
	 * @abstract
	 */
	var PlatformLocation = (function () {
	    function PlatformLocation() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.getBaseHrefFromDOM = function () { };
	    /**
	     * @abstract
	     * @param {?} fn
	     * @return {?}
	     */
	    PlatformLocation.prototype.onPopState = function (fn) { };
	    /**
	     * @abstract
	     * @param {?} fn
	     * @return {?}
	     */
	    PlatformLocation.prototype.onHashChange = function (fn) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.pathname = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.search = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.hash = function () { };
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    PlatformLocation.prototype.replaceState = function (state, title, url) { };
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    PlatformLocation.prototype.pushState = function (state, title, url) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.forward = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.back = function () { };
	    return PlatformLocation;
	}());
	/**
	 * \@whatItDoes indicates when a location is initialized
	 * \@experimental
	 */
	var LOCATION_INITIALIZED = new _angular_core.InjectionToken('Location Initialized');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `LocationStrategy` is responsible for representing and reading route state
	 * from the browser's URL. Angular provides two strategies:
	 * {\@link HashLocationStrategy} and {\@link PathLocationStrategy}.
	 *
	 * This is used under the hood of the {\@link Location} service.
	 *
	 * Applications should use the {\@link Router} or {\@link Location} services to
	 * interact with application route state.
	 *
	 * For instance, {\@link HashLocationStrategy} produces URLs like
	 * `http://example.com#/foo`, and {\@link PathLocationStrategy} produces
	 * `http://example.com/foo` as an equivalent URL.
	 *
	 * See these two classes for more.
	 *
	 * \@stable
	 * @abstract
	 */
	var LocationStrategy = (function () {
	    function LocationStrategy() {
	    }
	    /**
	     * @abstract
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    LocationStrategy.prototype.path = function (includeHash) { };
	    /**
	     * @abstract
	     * @param {?} internal
	     * @return {?}
	     */
	    LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { };
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    LocationStrategy.prototype.forward = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    LocationStrategy.prototype.back = function () { };
	    /**
	     * @abstract
	     * @param {?} fn
	     * @return {?}
	     */
	    LocationStrategy.prototype.onPopState = function (fn) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    LocationStrategy.prototype.getBaseHref = function () { };
	    return LocationStrategy;
	}());
	/**
	 * The `APP_BASE_HREF` token represents the base href to be used with the
	 * {\@link PathLocationStrategy}.
	 *
	 * If you're using {\@link PathLocationStrategy}, you must provide a provider to a string
	 * representing the URL prefix that should be preserved when generating and recognizing
	 * URLs.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {Component, NgModule} from '\@angular/core';
	 * import {APP_BASE_HREF} from '\@angular/common';
	 *
	 * \@NgModule({
	 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
	 * })
	 * class AppModule {}
	 * ```
	 *
	 * \@stable
	 */
	var APP_BASE_HREF = new _angular_core.InjectionToken('appBaseHref');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.
	 * \@description
	 * Depending on which {\@link LocationStrategy} is used, `Location` will either persist
	 * to the URL's path or the URL's hash segment.
	 *
	 * Note: it's better to use {\@link Router#navigate} service to trigger route changes. Use
	 * `Location` only if you need to interact with or create normalized URLs outside of
	 * routing.
	 *
	 * `Location` is responsible for normalizing the URL against the application's base href.
	 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	 * trailing slash:
	 * - `/my/app/user/123` is normalized
	 * - `my/app/user/123` **is not** normalized
	 * - `/my/app/user/123/` **is not** normalized
	 *
	 * ### Example
	 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
	 * \@stable
	 */
	var Location = (function () {
	    /**
	     * @param {?} platformStrategy
	     */
	    function Location(platformStrategy) {
	        var _this = this;
	        /**
	         * \@internal
	         */
	        this._subject = new _angular_core.EventEmitter();
	        this._platformStrategy = platformStrategy;
	        var browserBaseHref = this._platformStrategy.getBaseHref();
	        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
	        this._platformStrategy.onPopState(function (ev) {
	            _this._subject.emit({
	                'url': _this.path(true),
	                'pop': true,
	                'type': ev.type,
	            });
	        });
	    }
	    /**
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    Location.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        return this.normalize(this._platformStrategy.path(includeHash));
	    };
	    /**
	     * Normalizes the given path and compares to the current normalized path.
	     * @param {?} path
	     * @param {?=} query
	     * @return {?}
	     */
	    Location.prototype.isCurrentPathEqualTo = function (path, query) {
	        if (query === void 0) { query = ''; }
	        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
	    };
	    /**
	     * Given a string representing a URL, returns the normalized URL path without leading or
	     * trailing slashes.
	     * @param {?} url
	     * @return {?}
	     */
	    Location.prototype.normalize = function (url) {
	        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
	    };
	    /**
	     * Given a string representing a URL, returns the platform-specific external URL path.
	     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
	     * before normalizing. This method will also add a hash if `HashLocationStrategy` is
	     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	     * @param {?} url
	     * @return {?}
	     */
	    Location.prototype.prepareExternalUrl = function (url) {
	        if (url && url[0] !== '/') {
	            url = '/' + url;
	        }
	        return this._platformStrategy.prepareExternalUrl(url);
	    };
	    /**
	     * Changes the browsers URL to the normalized version of the given URL, and pushes a
	     * new item onto the platform's history.
	     * @param {?} path
	     * @param {?=} query
	     * @return {?}
	     */
	    Location.prototype.go = function (path, query) {
	        if (query === void 0) { query = ''; }
	        this._platformStrategy.pushState(null, '', path, query);
	    };
	    /**
	     * Changes the browsers URL to the normalized version of the given URL, and replaces
	     * the top item on the platform's history stack.
	     * @param {?} path
	     * @param {?=} query
	     * @return {?}
	     */
	    Location.prototype.replaceState = function (path, query) {
	        if (query === void 0) { query = ''; }
	        this._platformStrategy.replaceState(null, '', path, query);
	    };
	    /**
	     * Navigates forward in the platform's history.
	     * @return {?}
	     */
	    Location.prototype.forward = function () { this._platformStrategy.forward(); };
	    /**
	     * Navigates back in the platform's history.
	     * @return {?}
	     */
	    Location.prototype.back = function () { this._platformStrategy.back(); };
	    /**
	     * Subscribe to the platform's `popState` events.
	     * @param {?} onNext
	     * @param {?=} onThrow
	     * @param {?=} onReturn
	     * @return {?}
	     */
	    Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
	    };
	    /**
	     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
	     * is.
	     * @param {?} params
	     * @return {?}
	     */
	    Location.normalizeQueryParams = function (params) {
	        return params && params[0] !== '?' ? '?' + params : params;
	    };
	    /**
	     * Given 2 parts of a url, join them with a slash if needed.
	     * @param {?} start
	     * @param {?} end
	     * @return {?}
	     */
	    Location.joinWithSlash = function (start, end) {
	        if (start.length == 0) {
	            return end;
	        }
	        if (end.length == 0) {
	            return start;
	        }
	        var /** @type {?} */ slashes = 0;
	        if (start.endsWith('/')) {
	            slashes++;
	        }
	        if (end.startsWith('/')) {
	            slashes++;
	        }
	        if (slashes == 2) {
	            return start + end.substring(1);
	        }
	        if (slashes == 1) {
	            return start + end;
	        }
	        return start + '/' + end;
	    };
	    /**
	     * If url has a trailing slash, remove it, otherwise return url as is.
	     * @param {?} url
	     * @return {?}
	     */
	    Location.stripTrailingSlash = function (url) { return url.replace(/\/$/, ''); };
	    return Location;
	}());
	Location.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Location.ctorParameters = function () { return [
	    { type: LocationStrategy, },
	]; };
	/**
	 * @param {?} baseHref
	 * @param {?} url
	 * @return {?}
	 */
	function _stripBaseHref(baseHref, url) {
	    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
	}
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function _stripIndexHtml(url) {
	    return url.replace(/\/index.html$/, '');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Use URL hash for storing application location data.
	 * \@description
	 * `HashLocationStrategy` is a {\@link LocationStrategy} used to configure the
	 * {\@link Location} service to represent its state in the
	 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	 * of the browser's URL.
	 *
	 * For instance, if you call `location.go('/foo')`, the browser's URL will become
	 * `example.com#/foo`.
	 *
	 * ### Example
	 *
	 * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
	 *
	 * \@stable
	 */
	var HashLocationStrategy = (function (_super) {
	    __extends(HashLocationStrategy, _super);
	    /**
	     * @param {?} _platformLocation
	     * @param {?=} _baseHref
	     */
	    function HashLocationStrategy(_platformLocation, _baseHref) {
	        var _this = _super.call(this) || this;
	        _this._platformLocation = _platformLocation;
	        _this._baseHref = '';
	        if (_baseHref != null) {
	            _this._baseHref = _baseHref;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.onPopState = function (fn) {
	        this._platformLocation.onPopState(fn);
	        this._platformLocation.onHashChange(fn);
	    };
	    /**
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	    /**
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        // the hash value is always prefixed with a `#`
	        // and if it is empty then it will stay empty
	        var /** @type {?} */ path = this._platformLocation.hash;
	        if (path == null)
	            path = '#';
	        return path.length > 0 ? path.substring(1) : path;
	    };
	    /**
	     * @param {?} internal
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	        var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
	        return url.length > 0 ? ('#' + url) : url;
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} path
	     * @param {?} queryParams
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	        if (url.length == 0) {
	            url = this._platformLocation.pathname;
	        }
	        this._platformLocation.pushState(state, title, url);
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} path
	     * @param {?} queryParams
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
	        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	        if (url.length == 0) {
	            url = this._platformLocation.pathname;
	        }
	        this._platformLocation.replaceState(state, title, url);
	    };
	    /**
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	    /**
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	    return HashLocationStrategy;
	}(LocationStrategy));
	HashLocationStrategy.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	HashLocationStrategy.ctorParameters = function () { return [
	    { type: PlatformLocation, },
	    { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Use URL for storing application location data.
	 * \@description
	 * `PathLocationStrategy` is a {\@link LocationStrategy} used to configure the
	 * {\@link Location} service to represent its state in the
	 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	 * browser's URL.
	 *
	 * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
	 * or add a base element to the document. This URL prefix that will be preserved
	 * when generating and recognizing URLs.
	 *
	 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	 * `location.go('/foo')`, the browser's URL will become
	 * `example.com/my/app/foo`.
	 *
	 * Similarly, if you add `<base href='/my/app'/>` to the document and call
	 * `location.go('/foo')`, the browser's URL will become
	 * `example.com/my/app/foo`.
	 *
	 * ### Example
	 *
	 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
	 *
	 * \@stable
	 */
	var PathLocationStrategy = (function (_super) {
	    __extends(PathLocationStrategy, _super);
	    /**
	     * @param {?} _platformLocation
	     * @param {?=} href
	     */
	    function PathLocationStrategy(_platformLocation, href) {
	        var _this = _super.call(this) || this;
	        _this._platformLocation = _platformLocation;
	        if (href == null) {
	            href = _this._platformLocation.getBaseHrefFromDOM();
	        }
	        if (href == null) {
	            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
	        }
	        _this._baseHref = href;
	        return _this;
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.onPopState = function (fn) {
	        this._platformLocation.onPopState(fn);
	        this._platformLocation.onHashChange(fn);
	    };
	    /**
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	    /**
	     * @param {?} internal
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	        return Location.joinWithSlash(this._baseHref, internal);
	    };
	    /**
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        var /** @type {?} */ pathname = this._platformLocation.pathname +
	            Location.normalizeQueryParams(this._platformLocation.search);
	        var /** @type {?} */ hash = this._platformLocation.hash;
	        return hash && includeHash ? "" + pathname + hash : pathname;
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	        this._platformLocation.pushState(state, title, externalUrl);
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
	        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	        this._platformLocation.replaceState(state, title, externalUrl);
	    };
	    /**
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	    /**
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	    return PathLocationStrategy;
	}(LocationStrategy));
	PathLocationStrategy.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	PathLocationStrategy.ctorParameters = function () { return [
	    { type: PlatformLocation, },
	    { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@experimental
	 * @abstract
	 */
	var NgLocalization = (function () {
	    function NgLocalization() {
	    }
	    /**
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    NgLocalization.prototype.getPluralCategory = function (value) { };
	    return NgLocalization;
	}());
	/**
	 * Returns the plural category for a given value.
	 * - "=value" when the case exists,
	 * - the plural category otherwise
	 *
	 * \@internal
	 * @param {?} value
	 * @param {?} cases
	 * @param {?} ngLocalization
	 * @return {?}
	 */
	function getPluralCategory(value, cases, ngLocalization) {
	    var /** @type {?} */ key = "=" + value;
	    if (cases.indexOf(key) > -1) {
	        return key;
	    }
	    key = ngLocalization.getPluralCategory(value);
	    if (cases.indexOf(key) > -1) {
	        return key;
	    }
	    if (cases.indexOf('other') > -1) {
	        return 'other';
	    }
	    throw new Error("No plural message found for value \"" + value + "\"");
	}
	/**
	 * Returns the plural case based on the locale
	 *
	 * \@experimental
	 */
	var NgLocaleLocalization = (function (_super) {
	    __extends(NgLocaleLocalization, _super);
	    /**
	     * @param {?} locale
	     */
	    function NgLocaleLocalization(locale) {
	        var _this = _super.call(this) || this;
	        _this.locale = locale;
	        return _this;
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    NgLocaleLocalization.prototype.getPluralCategory = function (value) {
	        var /** @type {?} */ plural = getPluralCase(this.locale, value);
	        switch (plural) {
	            case Plural.Zero:
	                return 'zero';
	            case Plural.One:
	                return 'one';
	            case Plural.Two:
	                return 'two';
	            case Plural.Few:
	                return 'few';
	            case Plural.Many:
	                return 'many';
	            default:
	                return 'other';
	        }
	    };
	    return NgLocaleLocalization;
	}(NgLocalization));
	NgLocaleLocalization.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	NgLocaleLocalization.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	var Plural = {};
	Plural.Zero = 0;
	Plural.One = 1;
	Plural.Two = 2;
	Plural.Few = 3;
	Plural.Many = 4;
	Plural.Other = 5;
	Plural[Plural.Zero] = "Zero";
	Plural[Plural.One] = "One";
	Plural[Plural.Two] = "Two";
	Plural[Plural.Few] = "Few";
	Plural[Plural.Many] = "Many";
	Plural[Plural.Other] = "Other";
	/**
	 * Returns the plural case based on the locale
	 *
	 * \@experimental
	 * @param {?} locale
	 * @param {?} nLike
	 * @return {?}
	 */
	function getPluralCase(locale, nLike) {
	    // TODO(vicb): lazy compute
	    if (typeof nLike === 'string') {
	        nLike = parseInt(/** @type {?} */ (nLike), 10);
	    }
	    var /** @type {?} */ n = (nLike);
	    var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
	    var /** @type {?} */ i = Math.floor(Math.abs(n));
	    var /** @type {?} */ v = nDecimal.length;
	    var /** @type {?} */ f = parseInt(nDecimal, 10);
	    var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
	    var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
	    switch (lang) {
	        case 'af':
	        case 'asa':
	        case 'az':
	        case 'bem':
	        case 'bez':
	        case 'bg':
	        case 'brx':
	        case 'ce':
	        case 'cgg':
	        case 'chr':
	        case 'ckb':
	        case 'ee':
	        case 'el':
	        case 'eo':
	        case 'es':
	        case 'eu':
	        case 'fo':
	        case 'fur':
	        case 'gsw':
	        case 'ha':
	        case 'haw':
	        case 'hu':
	        case 'jgo':
	        case 'jmc':
	        case 'ka':
	        case 'kk':
	        case 'kkj':
	        case 'kl':
	        case 'ks':
	        case 'ksb':
	        case 'ky':
	        case 'lb':
	        case 'lg':
	        case 'mas':
	        case 'mgo':
	        case 'ml':
	        case 'mn':
	        case 'nb':
	        case 'nd':
	        case 'ne':
	        case 'nn':
	        case 'nnh':
	        case 'nyn':
	        case 'om':
	        case 'or':
	        case 'os':
	        case 'ps':
	        case 'rm':
	        case 'rof':
	        case 'rwk':
	        case 'saq':
	        case 'seh':
	        case 'sn':
	        case 'so':
	        case 'sq':
	        case 'ta':
	        case 'te':
	        case 'teo':
	        case 'tk':
	        case 'tr':
	        case 'ug':
	        case 'uz':
	        case 'vo':
	        case 'vun':
	        case 'wae':
	        case 'xog':
	            if (n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'agq':
	        case 'bas':
	        case 'cu':
	        case 'dav':
	        case 'dje':
	        case 'dua':
	        case 'dyo':
	        case 'ebu':
	        case 'ewo':
	        case 'guz':
	        case 'kam':
	        case 'khq':
	        case 'ki':
	        case 'kln':
	        case 'kok':
	        case 'ksf':
	        case 'lrc':
	        case 'lu':
	        case 'luo':
	        case 'luy':
	        case 'mer':
	        case 'mfe':
	        case 'mgh':
	        case 'mua':
	        case 'mzn':
	        case 'nmg':
	        case 'nus':
	        case 'qu':
	        case 'rn':
	        case 'rw':
	        case 'sbp':
	        case 'twq':
	        case 'vai':
	        case 'yav':
	        case 'yue':
	        case 'zgh':
	        case 'ak':
	        case 'ln':
	        case 'mg':
	        case 'pa':
	        case 'ti':
	            if (n === Math.floor(n) && n >= 0 && n <= 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'am':
	        case 'as':
	        case 'bn':
	        case 'fa':
	        case 'gu':
	        case 'hi':
	        case 'kn':
	        case 'mr':
	        case 'zu':
	            if (i === 0 || n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'ar':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
	                return Plural.Few;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
	                return Plural.Many;
	            return Plural.Other;
	        case 'ast':
	        case 'ca':
	        case 'de':
	        case 'en':
	        case 'et':
	        case 'fi':
	        case 'fy':
	        case 'gl':
	        case 'it':
	        case 'nl':
	        case 'sv':
	        case 'sw':
	        case 'ur':
	        case 'yi':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            return Plural.Other;
	        case 'be':
	            if (n % 10 === 1 && !(n % 100 === 11))
	                return Plural.One;
	            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
	                !(n % 100 >= 12 && n % 100 <= 14))
	                return Plural.Few;
	            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
	                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'br':
	            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
	                return Plural.One;
	            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
	                return Plural.Two;
	            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
	                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
	                    n % 100 >= 90 && n % 100 <= 99))
	                return Plural.Few;
	            if (!(n === 0) && n % 1e6 === 0)
	                return Plural.Many;
	            return Plural.Other;
	        case 'bs':
	        case 'hr':
	        case 'sr':
	            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14) ||
	                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
	                    !(f % 100 >= 12 && f % 100 <= 14))
	                return Plural.Few;
	            return Plural.Other;
	        case 'cs':
	        case 'sk':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
	                return Plural.Few;
	            if (!(v === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'cy':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n === 3)
	                return Plural.Few;
	            if (n === 6)
	                return Plural.Many;
	            return Plural.Other;
	        case 'da':
	            if (n === 1 || !(t === 0) && (i === 0 || i === 1))
	                return Plural.One;
	            return Plural.Other;
	        case 'dsb':
	        case 'hsb':
	            if (v === 0 && i % 100 === 1 || f % 100 === 1)
	                return Plural.One;
	            if (v === 0 && i % 100 === 2 || f % 100 === 2)
	                return Plural.Two;
	            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
	                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
	                return Plural.Few;
	            return Plural.Other;
	        case 'ff':
	        case 'fr':
	        case 'hy':
	        case 'kab':
	            if (i === 0 || i === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'fil':
	            if (v === 0 && (i === 1 || i === 2 || i === 3) ||
	                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
	                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
	                return Plural.One;
	            return Plural.Other;
	        case 'ga':
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n === Math.floor(n) && n >= 3 && n <= 6)
	                return Plural.Few;
	            if (n === Math.floor(n) && n >= 7 && n <= 10)
	                return Plural.Many;
	            return Plural.Other;
	        case 'gd':
	            if (n === 1 || n === 11)
	                return Plural.One;
	            if (n === 2 || n === 12)
	                return Plural.Two;
	            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
	                return Plural.Few;
	            return Plural.Other;
	        case 'gv':
	            if (v === 0 && i % 10 === 1)
	                return Plural.One;
	            if (v === 0 && i % 10 === 2)
	                return Plural.Two;
	            if (v === 0 &&
	                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
	                return Plural.Few;
	            if (!(v === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'he':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (i === 2 && v === 0)
	                return Plural.Two;
	            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
	                return Plural.Many;
	            return Plural.Other;
	        case 'is':
	            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
	                return Plural.One;
	            return Plural.Other;
	        case 'ksh':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'kw':
	        case 'naq':
	        case 'se':
	        case 'smn':
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            return Plural.Other;
	        case 'lag':
	            if (n === 0)
	                return Plural.Zero;
	            if ((i === 0 || i === 1) && !(n === 0))
	                return Plural.One;
	            return Plural.Other;
	        case 'lt':
	            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
	                return Plural.One;
	            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
	                !(n % 100 >= 11 && n % 100 <= 19))
	                return Plural.Few;
	            if (!(f === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'lv':
	        case 'prg':
	            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
	                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
	                return Plural.Zero;
	            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
	                !(v === 2) && f % 10 === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'mk':
	            if (v === 0 && i % 10 === 1 || f % 10 === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'mt':
	            if (n === 1)
	                return Plural.One;
	            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
	                return Plural.Few;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
	                return Plural.Many;
	            return Plural.Other;
	        case 'pl':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14))
	                return Plural.Few;
	            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
	                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'pt':
	            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
	                return Plural.One;
	            return Plural.Other;
	        case 'ro':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (!(v === 0) || n === 0 ||
	                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
	                return Plural.Few;
	            return Plural.Other;
	        case 'ru':
	        case 'uk':
	            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14))
	                return Plural.Few;
	            if (v === 0 && i % 10 === 0 ||
	                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'shi':
	            if (i === 0 || n === 1)
	                return Plural.One;
	            if (n === Math.floor(n) && n >= 2 && n <= 10)
	                return Plural.Few;
	            return Plural.Other;
	        case 'si':
	            if (n === 0 || n === 1 || i === 0 && f === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'sl':
	            if (v === 0 && i % 100 === 1)
	                return Plural.One;
	            if (v === 0 && i % 100 === 2)
	                return Plural.Two;
	            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
	                return Plural.Few;
	            return Plural.Other;
	        case 'tzm':
	            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
	                return Plural.One;
	            return Plural.Other;
	        default:
	            return Plural.Other;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Adds and removes CSS classes on an HTML element.
	 *
	 * \@howToUse
	 * ```
	 *     <some-element [ngClass]="'first second'">...</some-element>
	 *
	 *     <some-element [ngClass]="['first', 'second']">...</some-element>
	 *
	 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
	 *
	 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
	 *
	 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
	 * ```
	 *
	 * \@description
	 *
	 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
	 * - `string` - the CSS classes listed in the string (space delimited) are added,
	 * - `Array` - the CSS classes declared as Array elements are added,
	 * - `Object` - keys are CSS classes that get added when the expression given in the value
	 *              evaluates to a truthy value, otherwise they are removed.
	 *
	 * \@stable
	 */
	var NgClass = (function () {
	    /**
	     * @param {?} _iterableDiffers
	     * @param {?} _keyValueDiffers
	     * @param {?} _ngEl
	     * @param {?} _renderer
	     */
	    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	        this._iterableDiffers = _iterableDiffers;
	        this._keyValueDiffers = _keyValueDiffers;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	        this._initialClasses = [];
	    }
	    Object.defineProperty(NgClass.prototype, "klass", {
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        set: function (v) {
	            this._applyInitialClasses(true);
	            this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
	            this._applyInitialClasses(false);
	            this._applyClasses(this._rawClass, false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgClass.prototype, "ngClass", {
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        set: function (v) {
	            this._cleanupClasses(this._rawClass);
	            this._iterableDiffer = null;
	            this._keyValueDiffer = null;
	            this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
	            if (this._rawClass) {
	                if (_angular_core.ɵisListLikeIterable(this._rawClass)) {
	                    this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
	                }
	                else {
	                    this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgClass.prototype.ngDoCheck = function () {
	        if (this._iterableDiffer) {
	            var /** @type {?} */ iterableChanges = this._iterableDiffer.diff(/** @type {?} */ (this._rawClass));
	            if (iterableChanges) {
	                this._applyIterableChanges(iterableChanges);
	            }
	        }
	        else if (this._keyValueDiffer) {
	            var /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff(/** @type {?} */ (this._rawClass));
	            if (keyValueChanges) {
	                this._applyKeyValueChanges(keyValueChanges);
	            }
	        }
	    };
	    /**
	     * @param {?} rawClassVal
	     * @return {?}
	     */
	    NgClass.prototype._cleanupClasses = function (rawClassVal) {
	        this._applyClasses(rawClassVal, true);
	        this._applyInitialClasses(false);
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgClass.prototype._applyKeyValueChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachRemovedItem(function (record) {
	            if (record.previousValue) {
	                _this._toggleClass(record.key, false);
	            }
	        });
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgClass.prototype._applyIterableChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) {
	            if (typeof record.item === 'string') {
	                _this._toggleClass(record.item, true);
	            }
	            else {
	                throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + _angular_core.ɵstringify(record.item));
	            }
	        });
	        changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
	    };
	    /**
	     * @param {?} isCleanup
	     * @return {?}
	     */
	    NgClass.prototype._applyInitialClasses = function (isCleanup) {
	        var _this = this;
	        this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	    };
	    /**
	     * @param {?} rawClassVal
	     * @param {?} isCleanup
	     * @return {?}
	     */
	    NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
	        var _this = this;
	        if (rawClassVal) {
	            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
	                ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	            }
	            else {
	                Object.keys(rawClassVal).forEach(function (klass) {
	                    if (rawClassVal[klass] != null)
	                        _this._toggleClass(klass, !isCleanup);
	                });
	            }
	        }
	    };
	    /**
	     * @param {?} klass
	     * @param {?} enabled
	     * @return {?}
	     */
	    NgClass.prototype._toggleClass = function (klass, enabled) {
	        var _this = this;
	        klass = klass.trim();
	        if (klass) {
	            klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, !!enabled); });
	        }
	    };
	    return NgClass;
	}());
	NgClass.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngClass]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgClass.ctorParameters = function () { return [
	    { type: _angular_core.IterableDiffers, },
	    { type: _angular_core.KeyValueDiffers, },
	    { type: _angular_core.ElementRef, },
	    { type: _angular_core.Renderer, },
	]; };
	NgClass.propDecorators = {
	    'klass': [{ type: _angular_core.Input, args: ['class',] },],
	    'ngClass': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Instantiates a single {\@link Component} type and inserts its Host View into current View.
	 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
	 *
	 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
	 * any existing component will get destroyed.
	 *
	 * ### Fine tune control
	 *
	 * You can control the component creation process by using the following optional attributes:
	 *
	 * * `ngComponentOutletInjector`: Optional custom {\@link Injector} that will be used as parent for
	 * the Component. Defaults to the injector of the current view container.
	 *
	 * * `ngComponentOutletProviders`: Optional injectable objects ({\@link Provider}) that are visible
	 * to the component.
	 *
	 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
	 * section of the component, if exists.
	 *
	 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
	 * module, then load a component from that module.
	 *
	 * ### Syntax
	 *
	 * Simple
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
	 * ```
	 *
	 * Customized injector/content
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression;
	 *                                   injector: injectorExpression;
	 *                                   content: contentNodesExpression;">
	 * </ng-container>
	 * ```
	 *
	 * Customized ngModuleFactory
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression;
	 *                                   ngModuleFactory: moduleFactory;">
	 * </ng-container>
	 * ```
	 * # Example
	 *
	 * {\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
	 *
	 * A more complete example with additional options:
	 *
	 * {\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
	 * A more complete example with ngModuleFactory:
	 *
	 * {\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}
	 *
	 * \@experimental
	 */
	var NgComponentOutlet = (function () {
	    /**
	     * @param {?} _viewContainerRef
	     */
	    function NgComponentOutlet(_viewContainerRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._componentRef = null;
	        this._moduleRef = null;
	    }
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgComponentOutlet.prototype.ngOnChanges = function (changes) {
	        this._viewContainerRef.clear();
	        this._componentRef = null;
	        if (this.ngComponentOutlet) {
	            var /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
	            if (changes['ngComponentOutletNgModuleFactory']) {
	                if (this._moduleRef)
	                    this._moduleRef.destroy();
	                if (this.ngComponentOutletNgModuleFactory) {
	                    var /** @type {?} */ parentModule = elInjector.get(_angular_core.NgModuleRef);
	                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
	                }
	                else {
	                    this._moduleRef = null;
	                }
	            }
	            var /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :
	                elInjector.get(_angular_core.ComponentFactoryResolver);
	            var /** @type {?} */ componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
	            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgComponentOutlet.prototype.ngOnDestroy = function () {
	        if (this._moduleRef)
	            this._moduleRef.destroy();
	    };
	    return NgComponentOutlet;
	}());
	NgComponentOutlet.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngComponentOutlet]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgComponentOutlet.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	]; };
	NgComponentOutlet.propDecorators = {
	    'ngComponentOutlet': [{ type: _angular_core.Input },],
	    'ngComponentOutletInjector': [{ type: _angular_core.Input },],
	    'ngComponentOutletContent': [{ type: _angular_core.Input },],
	    'ngComponentOutletNgModuleFactory': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@stable
	 */
	var NgForOfContext = (function () {
	    /**
	     * @param {?} $implicit
	     * @param {?} ngForOf
	     * @param {?} index
	     * @param {?} count
	     */
	    function NgForOfContext($implicit, ngForOf, index, count) {
	        this.$implicit = $implicit;
	        this.ngForOf = ngForOf;
	        this.index = index;
	        this.count = count;
	    }
	    Object.defineProperty(NgForOfContext.prototype, "first", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.index === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "last", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.index === this.count - 1; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "even", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.index % 2 === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "odd", {
	        /**
	         * @return {?}
	         */
	        get: function () { return !this.even; },
	        enumerable: true,
	        configurable: true
	    });
	    return NgForOfContext;
	}());
	/**
	 * The `NgForOf` directive instantiates a template once per item from an iterable. The context
	 * for each instantiated template inherits from the outer context with the given loop variable
	 * set to the current item from the iterable.
	 *
	 * ### Local Variables
	 *
	 * `NgForOf` provides several exported values that can be aliased to local variables:
	 *
	 * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
	 * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
	 * more complex then a property access, for example when using the async pipe (`userStreams |
	 * async`).
	 * - `index: number`: The index of the current item in the iterable.
	 * - `first: boolean`: True when the item is the first item in the iterable.
	 * - `last: boolean`: True when the item is the last item in the iterable.
	 * - `even: boolean`: True when the item has an even index in the iterable.
	 * - `odd: boolean`: True when the item has an odd index in the iterable.
	 *
	 * ```
	 * <li *ngFor="let user of userObservable | async as users; index as i; first as isFirst">
	 *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
	 * </li>
	 * ```
	 *
	 * ### Change Propagation
	 *
	 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 * * Otherwise, the DOM element for that item will remain the same.
	 *
	 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	 * those changes in the DOM. This has important implications for animations and any stateful
	 * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can
	 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
	 * such as user input.
	 *
	 * It is possible for the identities of elements in the iterator to change while the data does not.
	 * This can happen, for example, if the iterator produced from an RPC to the server, and that
	 * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
	 * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
	 * elements were deleted and all new elements inserted). This is an expensive operation and should
	 * be avoided if possible.
	 *
	 * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.
	 * `trackBy` takes a function which has two arguments: `index` and `item`.
	 * If `trackBy` is given, Angular tracks changes by the return value of the function.
	 *
	 * ### Syntax
	 *
	 * - `<li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>`
	 * - `<li template="ngFor let item of items; index as i; trackBy: trackByFn">...</li>`
	 *
	 * With `<ng-template>` element:
	 *
	 * ```
	 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
	 *   <li>...</li>
	 * </ng-template>
	 * ```
	 *
	 * ### Example
	 *
	 * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
	 * example.
	 *
	 * \@stable
	 */
	var NgForOf = (function () {
	    /**
	     * @param {?} _viewContainer
	     * @param {?} _template
	     * @param {?} _differs
	     */
	    function NgForOf(_viewContainer, _template, _differs) {
	        this._viewContainer = _viewContainer;
	        this._template = _template;
	        this._differs = _differs;
	        this._differ = null;
	    }
	    Object.defineProperty(NgForOf.prototype, "ngForTrackBy", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._trackByFn; },
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        set: function (fn) {
	            if (_angular_core.isDevMode() && fn != null && typeof fn !== 'function') {
	                // TODO(vicb): use a log service once there is a public one available
	                if ((console) && (console.warn)) {
	                    console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ". " +
	                        "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
	                }
	            }
	            this._trackByFn = fn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOf.prototype, "ngForTemplate", {
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        set: function (value) {
	            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
	            // The current type is too restrictive; a template that just uses index, for example,
	            // should be acceptable.
	            if (value) {
	                this._template = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgForOf.prototype.ngOnChanges = function (changes) {
	        if ('ngForOf' in changes) {
	            // React on ngForOf changes only once all inputs have been initialized
	            var /** @type {?} */ value = changes['ngForOf'].currentValue;
	            if (!this._differ && value) {
	                try {
	                    this._differ = this._differs.find(value).create(this.ngForTrackBy);
	                }
	                catch (e) {
	                    throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
	                }
	            }
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgForOf.prototype.ngDoCheck = function () {
	        if (this._differ) {
	            var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
	            if (changes)
	                this._applyChanges(changes);
	        }
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgForOf.prototype._applyChanges = function (changes) {
	        var _this = this;
	        var /** @type {?} */ insertTuples = [];
	        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
	            if (item.previousIndex == null) {
	                var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(/** @type {?} */ ((null)), _this.ngForOf, -1, -1), currentIndex);
	                var /** @type {?} */ tuple = new RecordViewTuple(item, view);
	                insertTuples.push(tuple);
	            }
	            else if (currentIndex == null) {
	                _this._viewContainer.remove(adjustedPreviousIndex);
	            }
	            else {
	                var /** @type {?} */ view = ((_this._viewContainer.get(adjustedPreviousIndex)));
	                _this._viewContainer.move(view, currentIndex);
	                var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
	                insertTuples.push(tuple);
	            }
	        });
	        for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
	            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	        }
	        for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
	            var /** @type {?} */ viewRef = (this._viewContainer.get(i));
	            viewRef.context.index = i;
	            viewRef.context.count = ilen;
	        }
	        changes.forEachIdentityChange(function (record) {
	            var /** @type {?} */ viewRef = (_this._viewContainer.get(record.currentIndex));
	            viewRef.context.$implicit = record.item;
	        });
	    };
	    /**
	     * @param {?} view
	     * @param {?} record
	     * @return {?}
	     */
	    NgForOf.prototype._perViewChange = function (view, record) {
	        view.context.$implicit = record.item;
	    };
	    return NgForOf;
	}());
	NgForOf.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgForOf.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	    { type: _angular_core.IterableDiffers, },
	]; };
	NgForOf.propDecorators = {
	    'ngForOf': [{ type: _angular_core.Input },],
	    'ngForTrackBy': [{ type: _angular_core.Input },],
	    'ngForTemplate': [{ type: _angular_core.Input },],
	};
	var RecordViewTuple = (function () {
	    /**
	     * @param {?} record
	     * @param {?} view
	     */
	    function RecordViewTuple(record, view) {
	        this.record = record;
	        this.view = view;
	    }
	    return RecordViewTuple;
	}());
	/**
	 * @deprecated from v4.0.0 - Use NgForOf instead.
	 */
	var NgFor = NgForOf;
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function getTypeNameForDebugging(type) {
	    return type['name'] || typeof type;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Conditionally includes a template based on the value of an `expression`.
	 *
	 * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place
	 * when expression is truthy or falsy respectively. Typically the:
	 *  - `then` template is the inline template of `ngIf` unless bound to a different value.
	 *  - `else` template is blank unless it is bound.
	 *
	 * # Most common usage
	 *
	 * The most common usage of the `ngIf` directive is to conditionally show the inline template as
	 * seen in this example:
	 * {\@example common/ngIf/ts/module.ts region='NgIfSimple'}
	 *
	 * # Showing an alternative template using `else`
	 *
	 * If it is necessary to display a template when the `expression` is falsy use the `else` template
	 * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.
	 * The template can be defined anywhere in the component view but is typically placed right after
	 * `ngIf` for readability.
	 *
	 * {\@example common/ngIf/ts/module.ts region='NgIfElse'}
	 *
	 * # Using non-inlined `then` template
	 *
	 * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using
	 * a binding (just like `else`). Because `then` and `else` are bindings, the template references can
	 * change at runtime as shown in this example.
	 *
	 * {\@example common/ngIf/ts/module.ts region='NgIfThenElse'}
	 *
	 * # Storing conditional result in a variable
	 *
	 * A common pattern is that we need to show a set of properties from the same object. If the
	 * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against
	 * dereferencing a `null` value. This is especially the case when waiting on async data such as
	 * when using the `async` pipe as shown in folowing example:
	 *
	 * ```
	 * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!
	 * ```
	 *
	 * There are several inefficiencies in the above example:
	 *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the
	 *    example above.
	 *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.
	 *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.
	 *  - We have to place the `async` pipe in parenthesis.
	 *
	 * A better way to do this is to use `ngIf` and store the result of the condition in a local
	 * variable as shown in the the example below:
	 *
	 * {\@example common/ngIf/ts/module.ts region='NgIfAs'}
	 *
	 * Notice that:
	 *  - We use only one `async` pipe and hence only one subscription gets created.
	 *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.
	 *  - The local `user` can then be bound repeatedly in a more efficient way.
	 *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only
	 *    display the data if `userStream` returns a value.
	 *  - We can display an alternative template while waiting for the data.
	 *
	 * ### Syntax
	 *
	 * Simple form:
	 * - `<div *ngIf="condition">...</div>`
	 * - `<div template="ngIf condition">...</div>`
	 * - `<ng-template [ngIf]="condition"><div>...</div></ng-template>`
	 *
	 * Form with an else block:
	 * ```
	 * <div *ngIf="condition; else elseBlock">...</div>
	 * <ng-template #elseBlock>...</ng-template>
	 * ```
	 *
	 * Form with a `then` and `else` block:
	 * ```
	 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
	 * <ng-template #thenBlock>...</ng-template>
	 * <ng-template #elseBlock>...</ng-template>
	 * ```
	 *
	 * Form with storing the value locally:
	 * ```
	 * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
	 * <ng-template #elseBlock>...</ng-template>
	 * ```
	 *
	 * \@stable
	 */
	var NgIf = (function () {
	    /**
	     * @param {?} _viewContainer
	     * @param {?} templateRef
	     */
	    function NgIf(_viewContainer, templateRef) {
	        this._viewContainer = _viewContainer;
	        this._context = new NgIfContext();
	        this._thenTemplateRef = null;
	        this._elseTemplateRef = null;
	        this._thenViewRef = null;
	        this._elseViewRef = null;
	        this._thenTemplateRef = templateRef;
	    }
	    Object.defineProperty(NgIf.prototype, "ngIf", {
	        /**
	         * @param {?} condition
	         * @return {?}
	         */
	        set: function (condition) {
	            this._context.$implicit = this._context.ngIf = condition;
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgIf.prototype, "ngIfThen", {
	        /**
	         * @param {?} templateRef
	         * @return {?}
	         */
	        set: function (templateRef) {
	            this._thenTemplateRef = templateRef;
	            this._thenViewRef = null; // clear previous view if any.
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgIf.prototype, "ngIfElse", {
	        /**
	         * @param {?} templateRef
	         * @return {?}
	         */
	        set: function (templateRef) {
	            this._elseTemplateRef = templateRef;
	            this._elseViewRef = null; // clear previous view if any.
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgIf.prototype._updateView = function () {
	        if (this._context.$implicit) {
	            if (!this._thenViewRef) {
	                this._viewContainer.clear();
	                this._elseViewRef = null;
	                if (this._thenTemplateRef) {
	                    this._thenViewRef =
	                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
	                }
	            }
	        }
	        else {
	            if (!this._elseViewRef) {
	                this._viewContainer.clear();
	                this._thenViewRef = null;
	                if (this._elseTemplateRef) {
	                    this._elseViewRef =
	                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
	                }
	            }
	        }
	    };
	    return NgIf;
	}());
	NgIf.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngIf]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgIf.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	]; };
	NgIf.propDecorators = {
	    'ngIf': [{ type: _angular_core.Input },],
	    'ngIfThen': [{ type: _angular_core.Input },],
	    'ngIfElse': [{ type: _angular_core.Input },],
	};
	/**
	 * \@stable
	 */
	var NgIfContext = (function () {
	    function NgIfContext() {
	        this.$implicit = null;
	        this.ngIf = null;
	    }
	    return NgIfContext;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SwitchView = (function () {
	    /**
	     * @param {?} _viewContainerRef
	     * @param {?} _templateRef
	     */
	    function SwitchView(_viewContainerRef, _templateRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._templateRef = _templateRef;
	        this._created = false;
	    }
	    /**
	     * @return {?}
	     */
	    SwitchView.prototype.create = function () {
	        this._created = true;
	        this._viewContainerRef.createEmbeddedView(this._templateRef);
	    };
	    /**
	     * @return {?}
	     */
	    SwitchView.prototype.destroy = function () {
	        this._created = false;
	        this._viewContainerRef.clear();
	    };
	    /**
	     * @param {?} created
	     * @return {?}
	     */
	    SwitchView.prototype.enforceState = function (created) {
	        if (created && !this._created) {
	            this.create();
	        }
	        else if (!created && this._created) {
	            this.destroy();
	        }
	    };
	    return SwitchView;
	}());
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
	 *             expression.
	 *
	 * \@howToUse
	 * ```
	 *     <container-element [ngSwitch]="switch_expression">
	 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
	 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
	 *       <ng-container *ngSwitchCase="match_expression_3">
	 *         <!-- use a ng-container to group multiple root nodes -->
	 *         <inner-element></inner-element>
	 *         <inner-other-element></inner-other-element>
	 *       </ng-container>
	 *       <some-element *ngSwitchDefault>...</some-element>
	 *     </container-element>
	 * ```
	 * \@description
	 *
	 * `NgSwitch` stamps out nested views when their match expression value matches the value of the
	 * switch expression.
	 *
	 * In other words:
	 * - you define a container element (where you place the directive with a switch expression on the
	 * `[ngSwitch]="..."` attribute)
	 * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
	 * root elements.
	 *
	 * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
	 * be preserved at the location.
	 *
	 * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
	 * expression is evaluated.
	 * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
	 * stamped out.
	 *
	 * \@stable
	 */
	var NgSwitch = (function () {
	    function NgSwitch() {
	        this._defaultUsed = false;
	        this._caseCount = 0;
	        this._lastCaseCheckIndex = 0;
	        this._lastCasesMatched = false;
	    }
	    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	        /**
	         * @param {?} newValue
	         * @return {?}
	         */
	        set: function (newValue) {
	            this._ngSwitch = newValue;
	            if (this._caseCount === 0) {
	                this._updateDefaultCases(true);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * \@internal
	     * @return {?}
	     */
	    NgSwitch.prototype._addCase = function () { return this._caseCount++; };
	    /**
	     * \@internal
	     * @param {?} view
	     * @return {?}
	     */
	    NgSwitch.prototype._addDefault = function (view) {
	        if (!this._defaultViews) {
	            this._defaultViews = [];
	        }
	        this._defaultViews.push(view);
	    };
	    /**
	     * \@internal
	     * @param {?} value
	     * @return {?}
	     */
	    NgSwitch.prototype._matchCase = function (value) {
	        var /** @type {?} */ matched = value == this._ngSwitch;
	        this._lastCasesMatched = this._lastCasesMatched || matched;
	        this._lastCaseCheckIndex++;
	        if (this._lastCaseCheckIndex === this._caseCount) {
	            this._updateDefaultCases(!this._lastCasesMatched);
	            this._lastCaseCheckIndex = 0;
	            this._lastCasesMatched = false;
	        }
	        return matched;
	    };
	    /**
	     * @param {?} useDefault
	     * @return {?}
	     */
	    NgSwitch.prototype._updateDefaultCases = function (useDefault) {
	        if (this._defaultViews && useDefault !== this._defaultUsed) {
	            this._defaultUsed = useDefault;
	            for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
	                var /** @type {?} */ defaultView = this._defaultViews[i];
	                defaultView.enforceState(useDefault);
	            }
	        }
	    };
	    return NgSwitch;
	}());
	NgSwitch.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngSwitch]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgSwitch.ctorParameters = function () { return []; };
	NgSwitch.propDecorators = {
	    'ngSwitch': [{ type: _angular_core.Input },],
	};
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgSwitch} when the
	 *             given expression evaluate to respectively the same/different value as the switch
	 *             expression.
	 *
	 * \@howToUse
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 * </container-element>
	 * ```
	 * \@description
	 *
	 * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
	 * expression.
	 *
	 * If multiple match expressions match the switch expression value, all of them are displayed.
	 *
	 * See {\@link NgSwitch} for more details and example.
	 *
	 * \@stable
	 */
	var NgSwitchCase = (function () {
	    /**
	     * @param {?} viewContainer
	     * @param {?} templateRef
	     * @param {?} ngSwitch
	     */
	    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
	        this.ngSwitch = ngSwitch;
	        ngSwitch._addCase();
	        this._view = new SwitchView(viewContainer, templateRef);
	    }
	    /**
	     * @return {?}
	     */
	    NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
	    return NgSwitchCase;
	}());
	NgSwitchCase.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngSwitchCase]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgSwitchCase.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	    { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	]; };
	NgSwitchCase.propDecorators = {
	    'ngSwitchCase': [{ type: _angular_core.Input },],
	};
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Creates a view that is added to the parent {\@link NgSwitch} when no case expressions
	 * match the
	 *             switch expression.
	 *
	 * \@howToUse
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 *   <some-other-element *ngSwitchDefault>...</some-other-element>
	 * </container-element>
	 * ```
	 *
	 * \@description
	 *
	 * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
	 * expression.
	 *
	 * See {\@link NgSwitch} for more details and example.
	 *
	 * \@stable
	 */
	var NgSwitchDefault = (function () {
	    /**
	     * @param {?} viewContainer
	     * @param {?} templateRef
	     * @param {?} ngSwitch
	     */
	    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
	        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
	    }
	    return NgSwitchDefault;
	}());
	NgSwitchDefault.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngSwitchDefault]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgSwitchDefault.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	    { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
	 *
	 * \@howToUse
	 * ```
	 * <some-element [ngPlural]="value">
	 *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
	 *   <ng-template ngPluralCase="=1">there is one</ng-template>
	 *   <ng-template ngPluralCase="few">there are a few</ng-template>
	 * </some-element>
	 * ```
	 *
	 * \@description
	 *
	 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
	 * that match the switch expression's pluralization category.
	 *
	 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
	 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
	 * expression:
	 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
	 *   matches the switch expression exactly,
	 * - otherwise, the view will be treated as a "category match", and will only display if exact
	 *   value matches aren't found and the value maps to its category for the defined locale.
	 *
	 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
	 *
	 * \@experimental
	 */
	var NgPlural = (function () {
	    /**
	     * @param {?} _localization
	     */
	    function NgPlural(_localization) {
	        this._localization = _localization;
	        this._caseViews = {};
	    }
	    Object.defineProperty(NgPlural.prototype, "ngPlural", {
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        set: function (value) {
	            this._switchValue = value;
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} value
	     * @param {?} switchView
	     * @return {?}
	     */
	    NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
	    /**
	     * @return {?}
	     */
	    NgPlural.prototype._updateView = function () {
	        this._clearViews();
	        var /** @type {?} */ cases = Object.keys(this._caseViews);
	        var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
	        this._activateView(this._caseViews[key]);
	    };
	    /**
	     * @return {?}
	     */
	    NgPlural.prototype._clearViews = function () {
	        if (this._activeView)
	            this._activeView.destroy();
	    };
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    NgPlural.prototype._activateView = function (view) {
	        if (view) {
	            this._activeView = view;
	            this._activeView.create();
	        }
	    };
	    return NgPlural;
	}());
	NgPlural.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngPlural]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgPlural.ctorParameters = function () { return [
	    { type: NgLocalization, },
	]; };
	NgPlural.propDecorators = {
	    'ngPlural': [{ type: _angular_core.Input },],
	};
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgPlural} when the
	 *             given expression matches the plural expression according to CLDR rules.
	 *
	 * \@howToUse
	 * ```
	 * <some-element [ngPlural]="value">
	 *   <ng-template ngPluralCase="=0">...</ng-template>
	 *   <ng-template ngPluralCase="other">...</ng-template>
	 * </some-element>
	 * ```
	 *
	 * See {\@link NgPlural} for more details and example.
	 *
	 * \@experimental
	 */
	var NgPluralCase = (function () {
	    /**
	     * @param {?} value
	     * @param {?} template
	     * @param {?} viewContainer
	     * @param {?} ngPlural
	     */
	    function NgPluralCase(value, template, viewContainer, ngPlural) {
	        this.value = value;
	        var isANumber = !isNaN(Number(value));
	        ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
	    }
	    return NgPluralCase;
	}());
	NgPluralCase.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngPluralCase]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgPluralCase.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['ngPluralCase',] },] },
	    { type: _angular_core.TemplateRef, },
	    { type: _angular_core.ViewContainerRef, },
	    { type: NgPlural, decorators: [{ type: _angular_core.Host },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Update an HTML element styles.
	 *
	 * \@howToUse
	 * ```
	 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
	 *
	 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
	 *
	 * <some-element [ngStyle]="objExp">...</some-element>
	 * ```
	 *
	 * \@description
	 *
	 * The styles are updated according to the value of the expression evaluation:
	 * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
	 * - values are the values assigned to those properties (expressed in the given unit).
	 *
	 * \@stable
	 */
	var NgStyle = (function () {
	    /**
	     * @param {?} _differs
	     * @param {?} _ngEl
	     * @param {?} _renderer
	     */
	    function NgStyle(_differs, _ngEl, _renderer) {
	        this._differs = _differs;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	    }
	    Object.defineProperty(NgStyle.prototype, "ngStyle", {
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        set: function (v) {
	            this._ngStyle = v;
	            if (!this._differ && v) {
	                this._differ = this._differs.find(v).create();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgStyle.prototype.ngDoCheck = function () {
	        if (this._differ) {
	            var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
	            if (changes) {
	                this._applyChanges(changes);
	            }
	        }
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgStyle.prototype._applyChanges = function (changes) {
	        var _this = this;
	        changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
	        changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	    };
	    /**
	     * @param {?} nameAndUnit
	     * @param {?} value
	     * @return {?}
	     */
	    NgStyle.prototype._setStyle = function (nameAndUnit, value) {
	        var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
	        value = value != null && unit ? "" + value + unit : value;
	        this._renderer.setElementStyle(this._ngEl.nativeElement, name, /** @type {?} */ (value));
	    };
	    return NgStyle;
	}());
	NgStyle.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngStyle]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgStyle.ctorParameters = function () { return [
	    { type: _angular_core.KeyValueDiffers, },
	    { type: _angular_core.ElementRef, },
	    { type: _angular_core.Renderer, },
	]; };
	NgStyle.propDecorators = {
	    'ngStyle': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Inserts an embedded view from a prepared `TemplateRef`
	 *
	 * \@howToUse
	 * ```
	 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
	 * ```
	 *
	 * \@description
	 *
	 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
	 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
	 * by the local template `let` declarations.
	 *
	 * Note: using the key `$implicit` in the context object will set it's value as default.
	 *
	 * # Example
	 *
	 * {\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
	 *
	 * \@experimental
	 */
	var NgTemplateOutlet = (function () {
	    /**
	     * @param {?} _viewContainerRef
	     */
	    function NgTemplateOutlet(_viewContainerRef) {
	        this._viewContainerRef = _viewContainerRef;
	    }
	    Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
	        /**
	         * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.
	         * @param {?} context
	         * @return {?}
	         */
	        set: function (context) { this.ngTemplateOutletContext = context; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
	        if (this._viewRef) {
	            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
	        }
	        if (this.ngTemplateOutlet) {
	            this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);
	        }
	    };
	    return NgTemplateOutlet;
	}());
	NgTemplateOutlet.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgTemplateOutlet.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	]; };
	NgTemplateOutlet.propDecorators = {
	    'ngTemplateOutletContext': [{ type: _angular_core.Input },],
	    'ngTemplateOutlet': [{ type: _angular_core.Input },],
	    'ngOutletContext': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A collection of Angular directives that are likely to be used in each and every Angular
	 * application.
	 */
	var COMMON_DIRECTIVES = [
	    NgClass,
	    NgComponentOutlet,
	    NgForOf,
	    NgIf,
	    NgTemplateOutlet,
	    NgStyle,
	    NgSwitch,
	    NgSwitchCase,
	    NgSwitchDefault,
	    NgPlural,
	    NgPluralCase,
	];
	/**
	 * A collection of deprecated directives that are no longer part of the core module.
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} type
	 * @param {?} value
	 * @return {?}
	 */
	function invalidPipeArgumentError(type, value) {
	    return Error("InvalidPipeArgument: '" + value + "' for pipe '" + _angular_core.ɵstringify(type) + "'");
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ObservableStrategy = (function () {
	    function ObservableStrategy() {
	    }
	    /**
	     * @param {?} async
	     * @param {?} updateLatestValue
	     * @return {?}
	     */
	    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
	    };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
	    return ObservableStrategy;
	}());
	var PromiseStrategy = (function () {
	    function PromiseStrategy() {
	    }
	    /**
	     * @param {?} async
	     * @param {?} updateLatestValue
	     * @return {?}
	     */
	    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async.then(updateLatestValue, function (e) { throw e; });
	    };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    PromiseStrategy.prototype.dispose = function (subscription) { };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    PromiseStrategy.prototype.onDestroy = function (subscription) { };
	    return PromiseStrategy;
	}());
	var _promiseStrategy = new PromiseStrategy();
	var _observableStrategy = new ObservableStrategy();
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Unwraps a value from an asynchronous primitive.
	 * \@howToUse `observable_or_promise_expression | async`
	 * \@description
	 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
	 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
	 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
	 * potential memory leaks.
	 *
	 *
	 * ## Examples
	 *
	 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
	 * promise.
	 *
	 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
	 *
	 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
	 * to the view. The Observable continuously updates the view with the current time.
	 *
	 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
	 *
	 * \@stable
	 */
	var AsyncPipe = (function () {
	    /**
	     * @param {?} _ref
	     */
	    function AsyncPipe(_ref) {
	        this._ref = _ref;
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._obj = null;
	        this._strategy = ((null));
	    }
	    /**
	     * @return {?}
	     */
	    AsyncPipe.prototype.ngOnDestroy = function () {
	        if (this._subscription) {
	            this._dispose();
	        }
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    AsyncPipe.prototype.transform = function (obj) {
	        if (!this._obj) {
	            if (obj) {
	                this._subscribe(obj);
	            }
	            this._latestReturnedValue = this._latestValue;
	            return this._latestValue;
	        }
	        if (obj !== this._obj) {
	            this._dispose();
	            return this.transform(/** @type {?} */ (obj));
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        }
	        this._latestReturnedValue = this._latestValue;
	        return _angular_core.WrappedValue.wrap(this._latestValue);
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    AsyncPipe.prototype._subscribe = function (obj) {
	        var _this = this;
	        this._obj = obj;
	        this._strategy = this._selectStrategy(obj);
	        this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    AsyncPipe.prototype._selectStrategy = function (obj) {
	        if (_angular_core.ɵisPromise(obj)) {
	            return _promiseStrategy;
	        }
	        if (_angular_core.ɵisObservable(obj)) {
	            return _observableStrategy;
	        }
	        throw invalidPipeArgumentError(AsyncPipe, obj);
	    };
	    /**
	     * @return {?}
	     */
	    AsyncPipe.prototype._dispose = function () {
	        this._strategy.dispose(/** @type {?} */ ((this._subscription)));
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._obj = null;
	    };
	    /**
	     * @param {?} async
	     * @param {?} value
	     * @return {?}
	     */
	    AsyncPipe.prototype._updateLatestValue = function (async, value) {
	        if (async === this._obj) {
	            this._latestValue = value;
	            this._ref.markForCheck();
	        }
	    };
	    return AsyncPipe;
	}());
	AsyncPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'async', pure: false },] },
	];
	/**
	 * @nocollapse
	 */
	AsyncPipe.ctorParameters = function () { return [
	    { type: _angular_core.ChangeDetectorRef, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Transforms text to lowercase.
	 *
	 * {\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }
	 *
	 * \@stable
	 */
	var LowerCasePipe = (function () {
	    function LowerCasePipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    LowerCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(LowerCasePipe, value);
	        }
	        return value.toLowerCase();
	    };
	    return LowerCasePipe;
	}());
	LowerCasePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'lowercase' },] },
	];
	/**
	 * @nocollapse
	 */
	LowerCasePipe.ctorParameters = function () { return []; };
	/**
	 * Helper method to transform a single word to titlecase.
	 *
	 * \@stable
	 * @param {?} word
	 * @return {?}
	 */
	function titleCaseWord(word) {
	    if (!word)
	        return word;
	    return word[0].toUpperCase() + word.substr(1).toLowerCase();
	}
	/**
	 * Transforms text to titlecase.
	 *
	 * \@stable
	 */
	var TitleCasePipe = (function () {
	    function TitleCasePipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    TitleCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(TitleCasePipe, value);
	        }
	        return value.split(/\b/g).map(function (word) { return titleCaseWord(word); }).join('');
	    };
	    return TitleCasePipe;
	}());
	TitleCasePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'titlecase' },] },
	];
	/**
	 * @nocollapse
	 */
	TitleCasePipe.ctorParameters = function () { return []; };
	/**
	 * Transforms text to uppercase.
	 *
	 * \@stable
	 */
	var UpperCasePipe = (function () {
	    function UpperCasePipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    UpperCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(UpperCasePipe, value);
	        }
	        return value.toUpperCase();
	    };
	    return UpperCasePipe;
	}());
	UpperCasePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'uppercase' },] },
	];
	/**
	 * @nocollapse
	 */
	UpperCasePipe.ctorParameters = function () { return []; };
	var NumberFormatStyle = {};
	NumberFormatStyle.Decimal = 0;
	NumberFormatStyle.Percent = 1;
	NumberFormatStyle.Currency = 2;
	NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
	NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
	NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
	var NumberFormatter = (function () {
	    function NumberFormatter() {
	    }
	    /**
	     * @param {?} num
	     * @param {?} locale
	     * @param {?} style
	     * @param {?=} __3
	     * @return {?}
	     */
	    NumberFormatter.format = function (num, locale, style, _a) {
	        var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
	        var /** @type {?} */ options = {
	            minimumIntegerDigits: minimumIntegerDigits,
	            minimumFractionDigits: minimumFractionDigits,
	            maximumFractionDigits: maximumFractionDigits,
	            style: NumberFormatStyle[style].toLowerCase()
	        };
	        if (style == NumberFormatStyle.Currency) {
	            options.currency = typeof currency == 'string' ? currency : undefined;
	            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	        }
	        return new Intl.NumberFormat(locale, options).format(num);
	    };
	    return NumberFormatter;
	}());
	var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
	var PATTERN_ALIASES = {
	    // Keys are quoted so they do not get renamed during closure compilation.
	    'yMMMdjms': datePartGetterFactory(combine([
	        digitCondition('year', 1),
	        nameCondition('month', 3),
	        digitCondition('day', 1),
	        digitCondition('hour', 1),
	        digitCondition('minute', 1),
	        digitCondition('second', 1),
	    ])),
	    'yMdjm': datePartGetterFactory(combine([
	        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
	        digitCondition('hour', 1), digitCondition('minute', 1)
	    ])),
	    'yMMMMEEEEd': datePartGetterFactory(combine([
	        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
	        digitCondition('day', 1)
	    ])),
	    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
	    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
	    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
	    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
	    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
	};
	var DATE_FORMATS = {
	    // Keys are quoted so they do not get renamed.
	    'yyyy': datePartGetterFactory(digitCondition('year', 4)),
	    'yy': datePartGetterFactory(digitCondition('year', 2)),
	    'y': datePartGetterFactory(digitCondition('year', 1)),
	    'MMMM': datePartGetterFactory(nameCondition('month', 4)),
	    'MMM': datePartGetterFactory(nameCondition('month', 3)),
	    'MM': datePartGetterFactory(digitCondition('month', 2)),
	    'M': datePartGetterFactory(digitCondition('month', 1)),
	    'LLLL': datePartGetterFactory(nameCondition('month', 4)),
	    'L': datePartGetterFactory(nameCondition('month', 1)),
	    'dd': datePartGetterFactory(digitCondition('day', 2)),
	    'd': datePartGetterFactory(digitCondition('day', 1)),
	    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
	    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
	    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
	    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	    'jj': datePartGetterFactory(digitCondition('hour', 2)),
	    'j': datePartGetterFactory(digitCondition('hour', 1)),
	    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
	    'm': datePartGetterFactory(digitCondition('minute', 1)),
	    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
	    's': datePartGetterFactory(digitCondition('second', 1)),
	    // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	    // we can be just safely rely on using `sss` since we currently don't support single or two digit
	    // fractions
	    'sss': datePartGetterFactory(digitCondition('second', 3)),
	    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
	    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
	    'EE': datePartGetterFactory(nameCondition('weekday', 2)),
	    'E': datePartGetterFactory(nameCondition('weekday', 1)),
	    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	    'Z': timeZoneGetter('short'),
	    'z': timeZoneGetter('long'),
	    'ww': datePartGetterFactory({}),
	    // first Thursday of the year. not support ?
	    'w': datePartGetterFactory({}),
	    // of the year not support ?
	    'G': datePartGetterFactory(nameCondition('era', 1)),
	    'GG': datePartGetterFactory(nameCondition('era', 2)),
	    'GGG': datePartGetterFactory(nameCondition('era', 3)),
	    'GGGG': datePartGetterFactory(nameCondition('era', 4))
	};
	/**
	 * @param {?} inner
	 * @return {?}
	 */
	function digitModifier(inner) {
	    return function (date, locale) {
	        var /** @type {?} */ result = inner(date, locale);
	        return result.length == 1 ? '0' + result : result;
	    };
	}
	/**
	 * @param {?} inner
	 * @return {?}
	 */
	function hourClockExtractor(inner) {
	    return function (date, locale) { return inner(date, locale).split(' ')[1]; };
	}
	/**
	 * @param {?} inner
	 * @return {?}
	 */
	function hourExtractor(inner) {
	    return function (date, locale) { return inner(date, locale).split(' ')[0]; };
	}
	/**
	 * @param {?} date
	 * @param {?} locale
	 * @param {?} options
	 * @return {?}
	 */
	function intlDateFormat(date, locale, options) {
	    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
	}
	/**
	 * @param {?} timezone
	 * @return {?}
	 */
	function timeZoneGetter(timezone) {
	    // To workaround `Intl` API restriction for single timezone let format with 24 hours
	    var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
	    return function (date, locale) {
	        var /** @type {?} */ result = intlDateFormat(date, locale, options);
	        // Then extract first 3 letters that related to hours
	        return result ? result.substring(3) : '';
	    };
	}
	/**
	 * @param {?} options
	 * @param {?} value
	 * @return {?}
	 */
	function hour12Modify(options, value) {
	    options.hour12 = value;
	    return options;
	}
	/**
	 * @param {?} prop
	 * @param {?} len
	 * @return {?}
	 */
	function digitCondition(prop, len) {
	    var /** @type {?} */ result = {};
	    result[prop] = len === 2 ? '2-digit' : 'numeric';
	    return result;
	}
	/**
	 * @param {?} prop
	 * @param {?} len
	 * @return {?}
	 */
	function nameCondition(prop, len) {
	    var /** @type {?} */ result = {};
	    if (len < 4) {
	        result[prop] = len > 1 ? 'short' : 'narrow';
	    }
	    else {
	        result[prop] = 'long';
	    }
	    return result;
	}
	/**
	 * @param {?} options
	 * @return {?}
	 */
	function combine(options) {
	    return ((Object)).assign.apply(((Object)), [{}].concat(options));
	}
	/**
	 * @param {?} ret
	 * @return {?}
	 */
	function datePartGetterFactory(ret) {
	    return function (date, locale) { return intlDateFormat(date, locale, ret); };
	}
	var DATE_FORMATTER_CACHE = new Map();
	/**
	 * @param {?} format
	 * @param {?} date
	 * @param {?} locale
	 * @return {?}
	 */
	function dateFormatter(format, date, locale) {
	    var /** @type {?} */ fn = PATTERN_ALIASES[format];
	    if (fn)
	        return fn(date, locale);
	    var /** @type {?} */ cacheKey = format;
	    var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
	    if (!parts) {
	        parts = [];
	        var /** @type {?} */ match = void 0;
	        DATE_FORMATS_SPLIT.exec(format);
	        var /** @type {?} */ _format = format;
	        while (_format) {
	            match = DATE_FORMATS_SPLIT.exec(_format);
	            if (match) {
	                parts = parts.concat(match.slice(1));
	                _format = ((parts.pop()));
	            }
	            else {
	                parts.push(_format);
	                _format = null;
	            }
	        }
	        DATE_FORMATTER_CACHE.set(cacheKey, parts);
	    }
	    return parts.reduce(function (text, part) {
	        var /** @type {?} */ fn = DATE_FORMATS[part];
	        return text + (fn ? fn(date, locale) : partToTime(part));
	    }, '');
	}
	/**
	 * @param {?} part
	 * @return {?}
	 */
	function partToTime(part) {
	    return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	}
	var DateFormatter = (function () {
	    function DateFormatter() {
	    }
	    /**
	     * @param {?} date
	     * @param {?} locale
	     * @param {?} pattern
	     * @return {?}
	     */
	    DateFormatter.format = function (date, locale, pattern) {
	        return dateFormatter(pattern, date, locale);
	    };
	    return DateFormatter;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
	/**
	 * @param {?} pipe
	 * @param {?} locale
	 * @param {?} value
	 * @param {?} style
	 * @param {?=} digits
	 * @param {?=} currency
	 * @param {?=} currencyAsSymbol
	 * @return {?}
	 */
	function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
	    if (currency === void 0) { currency = null; }
	    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	    if (value == null)
	        return null;
	    // Convert strings to numbers
	    value = typeof value === 'string' && isNumeric(value) ? +value : value;
	    if (typeof value !== 'number') {
	        throw invalidPipeArgumentError(pipe, value);
	    }
	    var /** @type {?} */ minInt = undefined;
	    var /** @type {?} */ minFraction = undefined;
	    var /** @type {?} */ maxFraction = undefined;
	    if (style !== NumberFormatStyle.Currency) {
	        // rely on Intl default for currency
	        minInt = 1;
	        minFraction = 0;
	        maxFraction = 3;
	    }
	    if (digits) {
	        var /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);
	        if (parts === null) {
	            throw new Error(digits + " is not a valid digit info for number pipes");
	        }
	        if (parts[1] != null) {
	            minInt = parseIntAutoRadix(parts[1]);
	        }
	        if (parts[3] != null) {
	            minFraction = parseIntAutoRadix(parts[3]);
	        }
	        if (parts[5] != null) {
	            maxFraction = parseIntAutoRadix(parts[5]);
	        }
	    }
	    return NumberFormatter.format(/** @type {?} */ (value), locale, style, {
	        minimumIntegerDigits: minInt,
	        minimumFractionDigits: minFraction,
	        maximumFractionDigits: maxFraction,
	        currency: currency,
	        currencyAsSymbol: currencyAsSymbol,
	    });
	}
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a number according to locale rules.
	 * \@howToUse `number_expression | number[:digitInfo]`
	 *
	 * Formats a number as text. Group sizing and separator and other locale-specific
	 * configurations are based on the active locale.
	 *
	 * where `expression` is a number:
	 *  - `digitInfo` is a `string` which has a following format: <br>
	 *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
	 *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
	 *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
	 *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
	 *
	 * For more information on the acceptable range for each of these numbers and other
	 * details see your native internationalization library.
	 *
	 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	 *
	 * ### Example
	 *
	 * {\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
	 *
	 * \@stable
	 */
	var DecimalPipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function DecimalPipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} digits
	     * @return {?}
	     */
	    DecimalPipe.prototype.transform = function (value, digits) {
	        return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
	    };
	    return DecimalPipe;
	}());
	DecimalPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'number' },] },
	];
	/**
	 * @nocollapse
	 */
	DecimalPipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a number as a percentage according to locale rules.
	 * \@howToUse `number_expression | percent[:digitInfo]`
	 *
	 * \@description
	 *
	 * Formats a number as percentage.
	 *
	 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
	 *
	 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	 *
	 * ### Example
	 *
	 * {\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
	 *
	 * \@stable
	 */
	var PercentPipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function PercentPipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} digits
	     * @return {?}
	     */
	    PercentPipe.prototype.transform = function (value, digits) {
	        return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
	    };
	    return PercentPipe;
	}());
	PercentPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'percent' },] },
	];
	/**
	 * @nocollapse
	 */
	PercentPipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a number as currency using locale rules.
	 * \@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
	 * \@description
	 *
	 * Use `currency` to format a number as currency.
	 *
	 * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
	 *    as `USD` for the US dollar and `EUR` for the euro.
	 * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
	 *   - `true`: use symbol (e.g. `$`).
	 *   - `false`(default): use code (e.g. `USD`).
	 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
	 *
	 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	 *
	 * ### Example
	 *
	 * {\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
	 *
	 * \@stable
	 */
	var CurrencyPipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function CurrencyPipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} currencyCode
	     * @param {?=} symbolDisplay
	     * @param {?=} digits
	     * @return {?}
	     */
	    CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
	        if (currencyCode === void 0) { currencyCode = 'USD'; }
	        if (symbolDisplay === void 0) { symbolDisplay = false; }
	        return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
	    };
	    return CurrencyPipe;
	}());
	CurrencyPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'currency' },] },
	];
	/**
	 * @nocollapse
	 */
	CurrencyPipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * @param {?} text
	 * @return {?}
	 */
	function parseIntAutoRadix(text) {
	    var /** @type {?} */ result = parseInt(text);
	    if (isNaN(result)) {
	        throw new Error('Invalid integer literal when parsing ' + text);
	    }
	    return result;
	}
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function isNumeric(value) {
	    return !isNaN(value - parseFloat(value));
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a date according to locale rules.
	 * \@howToUse `date_expression | date[:format]`
	 * \@description
	 *
	 * Where:
	 * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
	 * (https://www.w3.org/TR/NOTE-datetime).
	 * - `format` indicates which date/time components to include. The format can be predefined as
	 *   shown below or custom as shown in the table.
	 *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
	 *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
	 *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
	 *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
	 *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
	 *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
	 *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
	 *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
	 *
	 *
	 *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
	 *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
	 *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
	 *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
	 *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	 *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
	 *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	 *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
	 *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
	 *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
	 *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
	 *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
	 *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
	 *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
	 *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
	 *
	 * In javascript, only the components specified will be respected (not the ordering,
	 * punctuations, ...) and details of the formatting will be dependent on the locale.
	 *
	 * Timezone of the formatted text will be the local system timezone of the end-user's machine.
	 *
	 * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
	 * applied and the formatted text will have the same day, month and year of the expression.
	 *
	 * WARNINGS:
	 * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
	 *   Instead users should treat the date as an immutable object and change the reference when the
	 *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
	 *   which would be an expensive operation).
	 * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
	 *   browsers.
	 *
	 * ### Examples
	 *
	 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	 * in the _local_ time and locale is 'en-US':
	 *
	 * ```
	 *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
	 *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	 *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	 *     {{ dateObj | date:'mmss' }}        // output is '43:11'
	 * ```
	 *
	 * {\@example common/pipes/ts/date_pipe.ts region='DatePipe'}
	 *
	 * \@stable
	 */
	var DatePipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function DatePipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} pattern
	     * @return {?}
	     */
	    DatePipe.prototype.transform = function (value, pattern) {
	        if (pattern === void 0) { pattern = 'mediumDate'; }
	        var /** @type {?} */ date;
	        if (isBlank(value) || value !== value)
	            return null;
	        if (typeof value === 'string') {
	            value = value.trim();
	        }
	        if (isDate(value)) {
	            date = value;
	        }
	        else if (isNumeric(value)) {
	            date = new Date(parseFloat(value));
	        }
	        else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
	            /**
	            * For ISO Strings without time the day, month and year must be extracted from the ISO String
	            * before Date creation to avoid time offset and errors in the new Date.
	            * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
	            * date, some browsers (e.g. IE 9) will throw an invalid Date error
	            * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
	            * is applied
	            * Note: ISO months are 0 for January, 1 for February, ...
	            */
	            var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
	            date = new Date(y, m - 1, d);
	        }
	        else {
	            date = new Date(value);
	        }
	        if (!isDate(date)) {
	            var /** @type {?} */ match = void 0;
	            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {
	                date = isoStringToDate(match);
	            }
	            else {
	                throw invalidPipeArgumentError(DatePipe, value);
	            }
	        }
	        return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
	    };
	    return DatePipe;
	}());
	/**
	 * \@internal
	 */
	DatePipe._ALIASES = {
	    'medium': 'yMMMdjms',
	    'short': 'yMdjm',
	    'fullDate': 'yMMMMEEEEd',
	    'longDate': 'yMMMMd',
	    'mediumDate': 'yMMMd',
	    'shortDate': 'yMd',
	    'mediumTime': 'jms',
	    'shortTime': 'jm'
	};
	DatePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'date', pure: true },] },
	];
	/**
	 * @nocollapse
	 */
	DatePipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isBlank(obj) {
	    return obj == null || obj === '';
	}
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isDate(obj) {
	    return obj instanceof Date && !isNaN(obj.valueOf());
	}
	/**
	 * @param {?} match
	 * @return {?}
	 */
	function isoStringToDate(match) {
	    var /** @type {?} */ date = new Date(0);
	    var /** @type {?} */ tzHour = 0;
	    var /** @type {?} */ tzMin = 0;
	    var /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
	    var /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;
	    if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	    }
	    dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	    var /** @type {?} */ h = toInt(match[4] || '0') - tzHour;
	    var /** @type {?} */ m = toInt(match[5] || '0') - tzMin;
	    var /** @type {?} */ s = toInt(match[6] || '0');
	    var /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	    timeSetter.call(date, h, m, s, ms);
	    return date;
	}
	/**
	 * @param {?} str
	 * @return {?}
	 */
	function toInt(str) {
	    return parseInt(str, 10);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _INTERPOLATION_REGEXP = /#/g;
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
	 * \@howToUse `expression | i18nPlural:mapping`
	 * \@description
	 *
	 *  Where:
	 *  - `expression` is a number.
	 *  - `mapping` is an object that mimics the ICU format, see
	 *    http://userguide.icu-project.org/formatparse/messages
	 *
	 *  ## Example
	 *
	 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
	 *
	 * \@experimental
	 */
	var I18nPluralPipe = (function () {
	    /**
	     * @param {?} _localization
	     */
	    function I18nPluralPipe(_localization) {
	        this._localization = _localization;
	    }
	    /**
	     * @param {?} value
	     * @param {?} pluralMap
	     * @return {?}
	     */
	    I18nPluralPipe.prototype.transform = function (value, pluralMap) {
	        if (value == null)
	            return '';
	        if (typeof pluralMap !== 'object' || pluralMap === null) {
	            throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
	        }
	        var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
	        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
	    };
	    return I18nPluralPipe;
	}());
	I18nPluralPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'i18nPlural', pure: true },] },
	];
	/**
	 * @nocollapse
	 */
	I18nPluralPipe.ctorParameters = function () { return [
	    { type: NgLocalization, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Generic selector that displays the string that matches the current value.
	 * \@howToUse `expression | i18nSelect:mapping`
	 * \@description
	 *
	 *  Where `mapping` is an object that indicates the text that should be displayed
	 *  for different values of the provided `expression`.
	 *  If none of the keys of the mapping match the value of the `expression`, then the content
	 *  of the `other` key is returned when present, otherwise an empty string is returned.
	 *
	 *  ## Example
	 *
	 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
	 *
	 *  \@experimental
	 */
	var I18nSelectPipe = (function () {
	    function I18nSelectPipe() {
	    }
	    /**
	     * @param {?} value
	     * @param {?} mapping
	     * @return {?}
	     */
	    I18nSelectPipe.prototype.transform = function (value, mapping) {
	        if (value == null)
	            return '';
	        if (typeof mapping !== 'object' || typeof value !== 'string') {
	            throw invalidPipeArgumentError(I18nSelectPipe, mapping);
	        }
	        if (mapping.hasOwnProperty(value)) {
	            return mapping[value];
	        }
	        if (mapping.hasOwnProperty('other')) {
	            return mapping['other'];
	        }
	        return '';
	    };
	    return I18nSelectPipe;
	}());
	I18nSelectPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'i18nSelect', pure: true },] },
	];
	/**
	 * @nocollapse
	 */
	I18nSelectPipe.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Converts value into JSON string.
	 * \@howToUse `expression | json`
	 * \@description
	 *
	 * Converts value into string using `JSON.stringify`. Useful for debugging.
	 *
	 * ### Example
	 * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
	 *
	 * \@stable
	 */
	var JsonPipe = (function () {
	    function JsonPipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
	    return JsonPipe;
	}());
	JsonPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'json', pure: false },] },
	];
	/**
	 * @nocollapse
	 */
	JsonPipe.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Creates a new List or String containing a subset (slice) of the elements.
	 * \@howToUse `array_or_string_expression | slice:start[:end]`
	 * \@description
	 *
	 * Where the input expression is a `List` or `String`, and:
	 * - `start`: The starting index of the subset to return.
	 *   - **a positive integer**: return the item at `start` index and all items after
	 *     in the list or string expression.
	 *   - **a negative integer**: return the item at `start` index from the end and all items after
	 *     in the list or string expression.
	 *   - **if positive and greater than the size of the expression**: return an empty list or string.
	 *   - **if negative and greater than the size of the expression**: return entire list or string.
	 * - `end`: The ending index of the subset to return.
	 *   - **omitted**: return all items until the end.
	 *   - **if positive**: return all items before `end` index of the list or string.
	 *   - **if negative**: return all items before `end` index from the end of the list or string.
	 *
	 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
	 * and `String.prototype.slice()`.
	 *
	 * When operating on a [List], the returned list is always a copy even when all
	 * the elements are being returned.
	 *
	 * When operating on a blank value, the pipe returns the blank value.
	 *
	 * ## List Example
	 *
	 * This `ngFor` example:
	 *
	 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
	 *
	 * produces the following:
	 *
	 *     <li>b</li>
	 *     <li>c</li>
	 *
	 * ## String Examples
	 *
	 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
	 *
	 * \@stable
	 */
	var SlicePipe = (function () {
	    function SlicePipe() {
	    }
	    /**
	     * @param {?} value
	     * @param {?} start
	     * @param {?=} end
	     * @return {?}
	     */
	    SlicePipe.prototype.transform = function (value, start, end) {
	        if (value == null)
	            return value;
	        if (!this.supports(value)) {
	            throw invalidPipeArgumentError(SlicePipe, value);
	        }
	        return value.slice(start, end);
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
	    return SlicePipe;
	}());
	SlicePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'slice', pure: false },] },
	];
	/**
	 * @nocollapse
	 */
	SlicePipe.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * This module provides a set of common Pipes.
	 */
	/**
	 * A collection of Angular pipes that are likely to be used in each and every application.
	 */
	var COMMON_PIPES = [
	    AsyncPipe,
	    UpperCasePipe,
	    LowerCasePipe,
	    JsonPipe,
	    SlicePipe,
	    DecimalPipe,
	    PercentPipe,
	    TitleCasePipe,
	    CurrencyPipe,
	    DatePipe,
	    I18nPluralPipe,
	    I18nSelectPipe,
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The module that includes all the basic Angular directives like {\@link NgIf}, {\@link NgForOf}, ...
	 *
	 * \@stable
	 */
	var CommonModule = (function () {
	    function CommonModule() {
	    }
	    return CommonModule;
	}());
	CommonModule.decorators = [
	    { type: _angular_core.NgModule, args: [{
	                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
	                exports: [COMMON_DIRECTIVES, COMMON_PIPES],
	                providers: [
	                    { provide: NgLocalization, useClass: NgLocaleLocalization },
	                ],
	            },] },
	];
	/**
	 * @nocollapse
	 */
	CommonModule.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PLATFORM_BROWSER_ID = 'browser';
	var PLATFORM_SERVER_ID = 'server';
	var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
	var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
	/**
	 * Returns whether a platform id represents a browser platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformBrowser(platformId) {
	    return platformId === PLATFORM_BROWSER_ID;
	}
	/**
	 * Returns whether a platform id represents a server platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformServer(platformId) {
	    return platformId === PLATFORM_SERVER_ID;
	}
	/**
	 * Returns whether a platform id represents a web worker app platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformWorkerApp(platformId) {
	    return platformId === PLATFORM_WORKER_APP_ID;
	}
	/**
	 * Returns whether a platform id represents a web worker UI platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformWorkerUi(platformId) {
	    return platformId === PLATFORM_WORKER_UI_ID;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * \@stable
	 */
	var VERSION = new _angular_core.Version('4.1.0');

	exports.NgLocaleLocalization = NgLocaleLocalization;
	exports.NgLocalization = NgLocalization;
	exports.CommonModule = CommonModule;
	exports.NgClass = NgClass;
	exports.NgFor = NgFor;
	exports.NgForOf = NgForOf;
	exports.NgForOfContext = NgForOfContext;
	exports.NgIf = NgIf;
	exports.NgIfContext = NgIfContext;
	exports.NgPlural = NgPlural;
	exports.NgPluralCase = NgPluralCase;
	exports.NgStyle = NgStyle;
	exports.NgSwitch = NgSwitch;
	exports.NgSwitchCase = NgSwitchCase;
	exports.NgSwitchDefault = NgSwitchDefault;
	exports.NgTemplateOutlet = NgTemplateOutlet;
	exports.NgComponentOutlet = NgComponentOutlet;
	exports.AsyncPipe = AsyncPipe;
	exports.DatePipe = DatePipe;
	exports.I18nPluralPipe = I18nPluralPipe;
	exports.I18nSelectPipe = I18nSelectPipe;
	exports.JsonPipe = JsonPipe;
	exports.LowerCasePipe = LowerCasePipe;
	exports.CurrencyPipe = CurrencyPipe;
	exports.DecimalPipe = DecimalPipe;
	exports.PercentPipe = PercentPipe;
	exports.SlicePipe = SlicePipe;
	exports.UpperCasePipe = UpperCasePipe;
	exports.TitleCasePipe = TitleCasePipe;
	exports.ɵPLATFORM_BROWSER_ID = PLATFORM_BROWSER_ID;
	exports.ɵPLATFORM_SERVER_ID = PLATFORM_SERVER_ID;
	exports.ɵPLATFORM_WORKER_APP_ID = PLATFORM_WORKER_APP_ID;
	exports.ɵPLATFORM_WORKER_UI_ID = PLATFORM_WORKER_UI_ID;
	exports.isPlatformBrowser = isPlatformBrowser;
	exports.isPlatformServer = isPlatformServer;
	exports.isPlatformWorkerApp = isPlatformWorkerApp;
	exports.isPlatformWorkerUi = isPlatformWorkerUi;
	exports.VERSION = VERSION;
	exports.PlatformLocation = PlatformLocation;
	exports.LOCATION_INITIALIZED = LOCATION_INITIALIZED;
	exports.LocationStrategy = LocationStrategy;
	exports.APP_BASE_HREF = APP_BASE_HREF;
	exports.HashLocationStrategy = HashLocationStrategy;
	exports.PathLocationStrategy = PathLocationStrategy;
	exports.Location = Location;
	exports.ɵa = COMMON_DIRECTIVES;
	exports.ɵb = COMMON_PIPES;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=common.umd.js.map


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(413), __webpack_require__(379)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}),global.ng.common,global.ng.core));
	}(this, (function (exports,_angular_common,_angular_core) { 'use strict';

	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _DOM = ((null));
	/**
	 * @return {?}
	 */
	function getDOM() {
	    return _DOM;
	}
	/**
	 * @param {?} adapter
	 * @return {?}
	 */
	/**
	 * @param {?} adapter
	 * @return {?}
	 */
	function setRootDomAdapter(adapter) {
	    if (!_DOM) {
	        _DOM = adapter;
	    }
	}
	/**
	 * Provides DOM operations in an environment-agnostic way.
	 *
	 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
	 * can introduce XSS risks.
	 * @abstract
	 */
	var DomAdapter = (function () {
	    function DomAdapter() {
	        this.resourceLoaderType = ((null));
	    }
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.hasProperty = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setProperty = function (el, name, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getProperty = function (el, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} methodName
	     * @param {?} args
	     * @return {?}
	     */
	    DomAdapter.prototype.invoke = function (el, methodName, args) { };
	    /**
	     * @abstract
	     * @param {?} error
	     * @return {?}
	     */
	    DomAdapter.prototype.logError = function (error) { };
	    /**
	     * @abstract
	     * @param {?} error
	     * @return {?}
	     */
	    DomAdapter.prototype.log = function (error) { };
	    /**
	     * @abstract
	     * @param {?} error
	     * @return {?}
	     */
	    DomAdapter.prototype.logGroup = function (error) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.logGroupEnd = function () { };
	    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	        /**
	         * Maps attribute names to their corresponding property names for cases
	         * where attribute name doesn't match property name.
	         * @return {?}
	         */
	        get: function () { return this._attrToPropMap; },
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        set: function (value) { this._attrToPropMap = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    
	    /**
	     * @abstract
	     * @param {?} nodeA
	     * @param {?} nodeB
	     * @return {?}
	     */
	    DomAdapter.prototype.contains = function (nodeA, nodeB) { };
	    /**
	     * @abstract
	     * @param {?} templateHtml
	     * @return {?}
	     */
	    DomAdapter.prototype.parse = function (templateHtml) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    DomAdapter.prototype.querySelector = function (el, selector) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    DomAdapter.prototype.querySelectorAll = function (el, selector) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    DomAdapter.prototype.on = function (el, evt, listener) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    DomAdapter.prototype.onAndCancel = function (el, evt, listener) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} evt
	     * @return {?}
	     */
	    DomAdapter.prototype.dispatchEvent = function (el, evt) { };
	    /**
	     * @abstract
	     * @param {?} eventType
	     * @return {?}
	     */
	    DomAdapter.prototype.createMouseEvent = function (eventType) { };
	    /**
	     * @abstract
	     * @param {?} eventType
	     * @return {?}
	     */
	    DomAdapter.prototype.createEvent = function (eventType) { };
	    /**
	     * @abstract
	     * @param {?} evt
	     * @return {?}
	     */
	    DomAdapter.prototype.preventDefault = function (evt) { };
	    /**
	     * @abstract
	     * @param {?} evt
	     * @return {?}
	     */
	    DomAdapter.prototype.isPrevented = function (evt) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getInnerHTML = function (el) { };
	    /**
	     * Returns content if el is a <template> element, null otherwise.
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getTemplateContent = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getOuterHTML = function (el) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.nodeName = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.nodeValue = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.type = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.content = function (node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.firstChild = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.nextSibling = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.parentElement = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.childNodes = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.childNodesAsList = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.clearNodes = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.appendChild = function (el, node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.removeChild = function (el, node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} newNode
	     * @param {?} oldNode
	     * @return {?}
	     */
	    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.remove = function (el) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.insertBefore = function (parent, ref, node) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} nodes
	     * @return {?}
	     */
	    DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.insertAfter = function (parent, el, node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setInnerHTML = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getText = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setText = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getValue = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setValue = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getChecked = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setChecked = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} text
	     * @return {?}
	     */
	    DomAdapter.prototype.createComment = function (text) { };
	    /**
	     * @abstract
	     * @param {?} html
	     * @return {?}
	     */
	    DomAdapter.prototype.createTemplate = function (html) { };
	    /**
	     * @abstract
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createElement = function (tagName, doc) { };
	    /**
	     * @abstract
	     * @param {?} ns
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
	    /**
	     * @abstract
	     * @param {?} text
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createTextNode = function (text, doc) { };
	    /**
	     * @abstract
	     * @param {?} attrName
	     * @param {?} attrValue
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
	    /**
	     * @abstract
	     * @param {?} css
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createStyleElement = function (css, doc) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.createShadowRoot = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getShadowRoot = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getHost = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getDistributedNodes = function (el) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getElementsByClassName = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getElementsByTagName = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.classList = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    DomAdapter.prototype.addClass = function (element, className) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    DomAdapter.prototype.removeClass = function (element, className) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    DomAdapter.prototype.hasClass = function (element, className) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @return {?}
	     */
	    DomAdapter.prototype.removeStyle = function (element, styleName) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @return {?}
	     */
	    DomAdapter.prototype.getStyle = function (element, styleName) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?=} styleValue
	     * @return {?}
	     */
	    DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.tagName = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.attributeMap = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.hasAttribute = function (element, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.getAttribute = function (element, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setAttribute = function (element, name, value) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.removeAttribute = function (element, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.templateAwareRoot = function (el) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.createHtmlDocument = function () { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getBoundingClientRect = function (el) { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.getTitle = function (doc) { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @param {?} newTitle
	     * @return {?}
	     */
	    DomAdapter.prototype.setTitle = function (doc, newTitle) { };
	    /**
	     * @abstract
	     * @param {?} n
	     * @param {?} selector
	     * @return {?}
	     */
	    DomAdapter.prototype.elementMatches = function (n, selector) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.isTemplateElement = function (el) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isTextNode = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isCommentNode = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isElementNode = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.hasShadowRoot = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isShadowRoot = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.getHref = function (element) { };
	    /**
	     * @abstract
	     * @param {?} event
	     * @return {?}
	     */
	    DomAdapter.prototype.getEventKey = function (event) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} baseUrl
	     * @param {?} href
	     * @return {?}
	     */
	    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsDOMEvents = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsNativeShadowDOM = function () { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @param {?} target
	     * @return {?}
	     */
	    DomAdapter.prototype.getGlobalEventTarget = function (doc, target) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getHistory = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getLocation = function () { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.getBaseHref = function (doc) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.resetBaseElement = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getUserAgent = function () { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setData = function (element, name, value) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.getComputedStyle = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getData = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setGlobalVar = function (name, value) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsWebAnimation = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.performanceNow = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getAnimationPrefix = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getTransitionEnd = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsAnimation = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsCookies = function () { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getCookie = function (name) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setCookie = function (name, value) { };
	    return DomAdapter;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides DOM operations in any browser environment.
	 *
	 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
	 * can introduce XSS risks.
	 * @abstract
	 */
	var GenericBrowserDomAdapter = (function (_super) {
	    __extends(GenericBrowserDomAdapter, _super);
	    function GenericBrowserDomAdapter() {
	        var _this = _super.call(this) || this;
	        _this._animationPrefix = null;
	        _this._transitionEnd = null;
	        try {
	            var element_1 = _this.createElement('div', document);
	            if (_this.getStyle(element_1, 'animationName') != null) {
	                _this._animationPrefix = '';
	            }
	            else {
	                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
	                for (var i = 0; i < domPrefixes.length; i++) {
	                    if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {
	                        _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
	                        break;
	                    }
	                }
	            }
	            var transEndEventNames_1 = {
	                WebkitTransition: 'webkitTransitionEnd',
	                MozTransition: 'transitionend',
	                OTransition: 'oTransitionEnd otransitionend',
	                transition: 'transitionend'
	            };
	            Object.keys(transEndEventNames_1).forEach(function (key) {
	                if (_this.getStyle(element_1, key) != null) {
	                    _this._transitionEnd = transEndEventNames_1[key];
	                }
	            });
	        }
	        catch (e) {
	            _this._animationPrefix = null;
	            _this._transitionEnd = null;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
	    /**
	     * @param {?} el
	     * @param {?} baseUrl
	     * @param {?} href
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	    };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	        return typeof ((document.body)).createShadowRoot === 'function';
	    };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
	        return this._animationPrefix != null && this._transitionEnd != null;
	    };
	    return GenericBrowserDomAdapter;
	}(DomAdapter));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _attrToPropMap = {
	    'class': 'className',
	    'innerHtml': 'innerHTML',
	    'readonly': 'readOnly',
	    'tabindex': 'tabIndex',
	};
	var DOM_KEY_LOCATION_NUMPAD = 3;
	// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	var _keyMap = {
	    // The following values are here for cross-browser compatibility and to match the W3C standard
	    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	    '\b': 'Backspace',
	    '\t': 'Tab',
	    '\x7F': 'Delete',
	    '\x1B': 'Escape',
	    'Del': 'Delete',
	    'Esc': 'Escape',
	    'Left': 'ArrowLeft',
	    'Right': 'ArrowRight',
	    'Up': 'ArrowUp',
	    'Down': 'ArrowDown',
	    'Menu': 'ContextMenu',
	    'Scroll': 'ScrollLock',
	    'Win': 'OS'
	};
	// There is a bug in Chrome for numeric keypad keys:
	// https://code.google.com/p/chromium/issues/detail?id=155654
	// 1, 2, 3 ... are reported as A, B, C ...
	var _chromeNumKeyPadMap = {
	    'A': '1',
	    'B': '2',
	    'C': '3',
	    'D': '4',
	    'E': '5',
	    'F': '6',
	    'G': '7',
	    'H': '8',
	    'I': '9',
	    'J': '*',
	    'K': '+',
	    'M': '-',
	    'N': '.',
	    'O': '/',
	    '\x60': '0',
	    '\x90': 'NumLock'
	};
	var nodeContains;
	if (_angular_core.ɵglobal['Node']) {
	    nodeContains = _angular_core.ɵglobal['Node'].prototype.contains || function (node) {
	        return !!(this.compareDocumentPosition(node) & 16);
	    };
	}
	var BrowserDomAdapter = (function (_super) {
	    __extends(BrowserDomAdapter, _super);
	    function BrowserDomAdapter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} templateHtml
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
	    /**
	     * @param {?} el
	     * @param {?} methodName
	     * @param {?} args
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { ((el))[methodName].apply(((el)), args); };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.logError = function (error) {
	        if (window.console) {
	            if (console.error) {
	                console.error(error);
	            }
	            else {
	                console.log(error);
	            }
	        }
	    };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.log = function (error) {
	        if (window.console) {
	            window.console.log && window.console.log(error);
	        }
	    };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.logGroup = function (error) {
	        if (window.console) {
	            window.console.group && window.console.group(error);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.logGroupEnd = function () {
	        if (window.console) {
	            window.console.groupEnd && window.console.groupEnd();
	        }
	    };
	    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	        /**
	         * @return {?}
	         */
	        get: function () { return _attrToPropMap; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} nodeA
	     * @param {?} nodeB
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };
	    /**
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
	    /**
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	    /**
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	    /**
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        el.addEventListener(evt, listener, false);
	        // Needed to follow Dart's subscription semantic, until fix of
	        // https://code.google.com/p/dart/issues/detail?id=17406
	        return function () { el.removeEventListener(evt, listener, false); };
	    };
	    /**
	     * @param {?} el
	     * @param {?} evt
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
	    /**
	     * @param {?} eventType
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	        var /** @type {?} */ evt = document.createEvent('MouseEvent');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    /**
	     * @param {?} eventType
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createEvent = function (eventType) {
	        var /** @type {?} */ evt = document.createEvent('Event');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    /**
	     * @param {?} evt
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.preventDefault = function (evt) {
	        evt.preventDefault();
	        evt.returnValue = false;
	    };
	    /**
	     * @param {?} evt
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isPrevented = function (evt) {
	        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getTemplateContent = function (el) {
	        return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.content = function (node) {
	        if (this.hasProperty(node, 'content')) {
	            return ((node)).content;
	        }
	        else {
	            return node;
	        }
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	        var /** @type {?} */ childNodes = el.childNodes;
	        var /** @type {?} */ res = new Array(childNodes.length);
	        for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
	            res[i] = childNodes[i];
	        }
	        return res;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.clearNodes = function (el) {
	        while (el.firstChild) {
	            el.removeChild(el.firstChild);
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
	    /**
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
	    /**
	     * @param {?} el
	     * @param {?} newChild
	     * @param {?} oldChild
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.remove = function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild(node);
	        }
	        return node;
	    };
	    /**
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };
	    /**
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} nodes
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {
	        nodes.forEach(function (n) { return parent.insertBefore(n, ref); });
	    };
	    /**
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
	    /**
	     * @param {?} html
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createTemplate = function (html) {
	        var /** @type {?} */ t = document.createElement('template');
	        t.innerHTML = html;
	        return t;
	    };
	    /**
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElement(tagName);
	    };
	    /**
	     * @param {?} ns
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElementNS(ns, tagName);
	    };
	    /**
	     * @param {?} text
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createTextNode(text);
	    };
	    /**
	     * @param {?} attrName
	     * @param {?} attrValue
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) { doc = document; }
	        var /** @type {?} */ el = (doc.createElement('SCRIPT'));
	        el.setAttribute(attrName, attrValue);
	        return el;
	    };
	    /**
	     * @param {?} css
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) { doc = document; }
	        var /** @type {?} */ style = (doc.createElement('style'));
	        this.appendChild(style, this.createTextNode(css));
	        return style;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	        return element.getElementsByClassName(name);
	    };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	        return element.getElementsByTagName(name);
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
	    /**
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
	    /**
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
	    /**
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasClass = function (element, className) {
	        return element.classList.contains(className);
	    };
	    /**
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
	        element.style[styleName] = styleValue;
	    };
	    /**
	     * @param {?} element
	     * @param {?} stylename
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
	        // IE requires '' instead of null
	        // see https://github.com/angular/angular/issues/7916
	        element.style[stylename] = '';
	    };
	    /**
	     * @param {?} element
	     * @param {?} stylename
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
	    /**
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?=} styleValue
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
	        var /** @type {?} */ value = this.getStyle(element, styleName) || '';
	        return styleValue ? value == styleValue : value.length > 0;
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.attributeMap = function (element) {
	        var /** @type {?} */ res = new Map();
	        var /** @type {?} */ elAttrs = element.attributes;
	        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
	            var /** @type {?} */ attrib = elAttrs[i];
	            res.set(attrib.name, attrib.value);
	        }
	        return res;
	    };
	    /**
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
	        return element.hasAttribute(attribute);
	    };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
	        return element.hasAttributeNS(ns, attribute);
	    };
	    /**
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
	        return element.getAttribute(attribute);
	    };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
	        return element.getAttributeNS(ns, name);
	    };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
	        element.setAttributeNS(ns, name, value);
	    };
	    /**
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
	        element.removeAttributeNS(ns, name);
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createHtmlDocument = function () {
	        return document.implementation.createHTMLDocument('fakeTitle');
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	        try {
	            return el.getBoundingClientRect();
	        }
	        catch (e) {
	            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	        }
	    };
	    /**
	     * @param {?} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getTitle = function (doc) { return document.title; };
	    /**
	     * @param {?} doc
	     * @param {?} newTitle
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { document.title = newTitle || ''; };
	    /**
	     * @param {?} n
	     * @param {?} selector
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	        if (n instanceof HTMLElement) {
	            return n.matches && n.matches(selector) ||
	                n.msMatchesSelector && n.msMatchesSelector(selector) ||
	                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
	        }
	        return false;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	        return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
	        return node.shadowRoot != null && node instanceof HTMLElement;
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
	    /**
	     * @param {?} event
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getEventKey = function (event) {
	        var /** @type {?} */ key = event.key;
	        if (key == null) {
	            key = event.keyIdentifier;
	            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	            // Safari cf
	            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	            if (key == null) {
	                return 'Unidentified';
	            }
	            if (key.startsWith('U+')) {
	                key = String.fromCharCode(parseInt(key.substring(2), 16));
	                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                    // There is a bug in Chrome for numeric keypad keys:
	                    // https://code.google.com/p/chromium/issues/detail?id=155654
	                    // 1, 2, 3 ... are reported as A, B, C ...
	                    key = ((_chromeNumKeyPadMap))[key];
	                }
	            }
	        }
	        return _keyMap[key] || key;
	    };
	    /**
	     * @param {?} doc
	     * @param {?} target
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {
	        if (target === 'window') {
	            return window;
	        }
	        if (target === 'document') {
	            return document;
	        }
	        if (target === 'body') {
	            return document.body;
	        }
	        return null;
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	    /**
	     * @param {?} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getBaseHref = function (doc) {
	        var /** @type {?} */ href = getBaseElementHref();
	        return href == null ? null : relativePath(href);
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setData = function (element, name, value) {
	        this.setAttribute(element, 'data-' + name, value);
	    };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getData = function (element, name) {
	        return this.getAttribute(element, 'data-' + name);
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
	    /**
	     * @param {?} path
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(_angular_core.ɵglobal, path, value); };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.supportsWebAnimation = function () {
	        return typeof ((Element)).prototype['animate'] === 'function';
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.performanceNow = function () {
	        // performance.now() is not available in all browsers, see
	        // http://caniuse.com/#search=performance.now
	        return window.performance && window.performance.now ? window.performance.now() :
	            new Date().getTime();
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setCookie = function (name, value) {
	        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
	        // not clear other cookies.
	        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
	    };
	    return BrowserDomAdapter;
	}(GenericBrowserDomAdapter));
	var baseElement = null;
	/**
	 * @return {?}
	 */
	function getBaseElementHref() {
	    if (!baseElement) {
	        baseElement = ((document.querySelector('base')));
	        if (!baseElement) {
	            return null;
	        }
	    }
	    return baseElement.getAttribute('href');
	}
	// based on urlUtils.js in AngularJS 1
	var urlParsingNode;
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function relativePath(url) {
	    if (!urlParsingNode) {
	        urlParsingNode = document.createElement('a');
	    }
	    urlParsingNode.setAttribute('href', url);
	    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	        '/' + urlParsingNode.pathname;
	}
	/**
	 * @param {?} cookieStr
	 * @param {?} name
	 * @return {?}
	 */
	function parseCookieValue(cookieStr, name) {
	    name = encodeURIComponent(name);
	    for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
	        var cookie = _a[_i];
	        var /** @type {?} */ eqIndex = cookie.indexOf('=');
	        var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
	        if (cookieName.trim() === name) {
	            return decodeURIComponent(cookieValue);
	        }
	    }
	    return null;
	}
	/**
	 * @param {?} global
	 * @param {?} path
	 * @param {?} value
	 * @return {?}
	 */
	function setValueOnPath(global, path, value) {
	    var /** @type {?} */ parts = path.split('.');
	    var /** @type {?} */ obj = global;
	    while (parts.length > 1) {
	        var /** @type {?} */ name = ((parts.shift()));
	        if (obj.hasOwnProperty(name) && obj[name] != null) {
	            obj = obj[name];
	        }
	        else {
	            obj = obj[name] = {};
	        }
	    }
	    if (obj === undefined || obj === null) {
	        obj = {};
	    }
	    obj[((parts.shift()))] = value;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	 *
	 * Note: Document might not be available in the Application Context when Application and Rendering
	 * Contexts are not the same (e.g. when running the application into a Web Worker).
	 *
	 * \@stable
	 */
	var DOCUMENT = new _angular_core.InjectionToken('DocumentToken');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 * @return {?}
	 */
	function supportsState() {
	    return !!window.history.pushState;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
	 * This class should not be used directly by an application developer. Instead, use
	 * {\@link Location}.
	 */
	var BrowserPlatformLocation = (function (_super) {
	    __extends(BrowserPlatformLocation, _super);
	    /**
	     * @param {?} _doc
	     */
	    function BrowserPlatformLocation(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        _this._init();
	        return _this;
	    }
	    /**
	     * \@internal
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype._init = function () {
	        this._location = getDOM().getLocation();
	        this._history = getDOM().getHistory();
	    };
	    Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return ((getDOM().getBaseHref(this._doc))); };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.onPopState = function (fn) {
	        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.onHashChange = function (fn) {
	        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
	    };
	    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location.pathname; },
	        /**
	         * @param {?} newPath
	         * @return {?}
	         */
	        set: function (newPath) { this._location.pathname = newPath; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location.search; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location.hash; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
	        if (supportsState()) {
	            this._history.pushState(state, title, url);
	        }
	        else {
	            this._location.hash = url;
	        }
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
	        if (supportsState()) {
	            this._history.replaceState(state, title, url);
	        }
	        else {
	            this._location.hash = url;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
	    /**
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
	    return BrowserPlatformLocation;
	}(_angular_common.PlatformLocation));
	BrowserPlatformLocation.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	BrowserPlatformLocation.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A service that can be used to get and add meta tags.
	 *
	 * \@experimental
	 */
	var Meta = (function () {
	    /**
	     * @param {?} _doc
	     */
	    function Meta(_doc) {
	        this._doc = _doc;
	        this._dom = getDOM();
	    }
	    /**
	     * @param {?} tag
	     * @param {?=} forceCreation
	     * @return {?}
	     */
	    Meta.prototype.addTag = function (tag, forceCreation) {
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!tag)
	            return null;
	        return this._getOrCreateElement(tag, forceCreation);
	    };
	    /**
	     * @param {?} tags
	     * @param {?=} forceCreation
	     * @return {?}
	     */
	    Meta.prototype.addTags = function (tags, forceCreation) {
	        var _this = this;
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!tags)
	            return [];
	        return tags.reduce(function (result, tag) {
	            if (tag) {
	                result.push(_this._getOrCreateElement(tag, forceCreation));
	            }
	            return result;
	        }, []);
	    };
	    /**
	     * @param {?} attrSelector
	     * @return {?}
	     */
	    Meta.prototype.getTag = function (attrSelector) {
	        if (!attrSelector)
	            return null;
	        return this._dom.querySelector(this._doc, "meta[" + attrSelector + "]");
	    };
	    /**
	     * @param {?} attrSelector
	     * @return {?}
	     */
	    Meta.prototype.getTags = function (attrSelector) {
	        if (!attrSelector)
	            return [];
	        var /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, "meta[" + attrSelector + "]");
	        return list ? [].slice.call(list) : [];
	    };
	    /**
	     * @param {?} tag
	     * @param {?=} selector
	     * @return {?}
	     */
	    Meta.prototype.updateTag = function (tag, selector) {
	        if (!tag)
	            return null;
	        selector = selector || this._parseSelector(tag);
	        var /** @type {?} */ meta = ((this.getTag(selector)));
	        if (meta) {
	            return this._setMetaElementAttributes(tag, meta);
	        }
	        return this._getOrCreateElement(tag, true);
	    };
	    /**
	     * @param {?} attrSelector
	     * @return {?}
	     */
	    Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(/** @type {?} */ ((this.getTag(attrSelector)))); };
	    /**
	     * @param {?} meta
	     * @return {?}
	     */
	    Meta.prototype.removeTagElement = function (meta) {
	        if (meta) {
	            this._dom.remove(meta);
	        }
	    };
	    /**
	     * @param {?} meta
	     * @param {?=} forceCreation
	     * @return {?}
	     */
	    Meta.prototype._getOrCreateElement = function (meta, forceCreation) {
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!forceCreation) {
	            var /** @type {?} */ selector = this._parseSelector(meta);
	            var /** @type {?} */ elem = ((this.getTag(selector)));
	            // It's allowed to have multiple elements with the same name so it's not enough to
	            // just check that element with the same name already present on the page. We also need to
	            // check if element has tag attributes
	            if (elem && this._containsAttributes(meta, elem))
	                return elem;
	        }
	        var /** @type {?} */ element = (this._dom.createElement('meta'));
	        this._setMetaElementAttributes(meta, element);
	        var /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];
	        this._dom.appendChild(head, element);
	        return element;
	    };
	    /**
	     * @param {?} tag
	     * @param {?} el
	     * @return {?}
	     */
	    Meta.prototype._setMetaElementAttributes = function (tag, el) {
	        var _this = this;
	        Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });
	        return el;
	    };
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    Meta.prototype._parseSelector = function (tag) {
	        var /** @type {?} */ attr = tag.name ? 'name' : 'property';
	        return attr + "=\"" + tag[attr] + "\"";
	    };
	    /**
	     * @param {?} tag
	     * @param {?} elem
	     * @return {?}
	     */
	    Meta.prototype._containsAttributes = function (tag, elem) {
	        var _this = this;
	        return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });
	    };
	    return Meta;
	}());
	Meta.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Meta.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An id that identifies a particular application being bootstrapped, that should
	 * match across the client/server boundary.
	 */
	var TRANSITION_ID = new _angular_core.InjectionToken('TRANSITION_ID');
	/**
	 * @param {?} transitionId
	 * @param {?} document
	 * @return {?}
	 */
	function bootstrapListenerFactory(transitionId, document) {
	    var /** @type {?} */ factory = function () {
	        var /** @type {?} */ dom = getDOM();
	        var /** @type {?} */ styles = Array.prototype.slice.apply(dom.querySelectorAll(document, "style[ng-transition]"));
	        styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })
	            .forEach(function (el) { return dom.remove(el); });
	    };
	    return factory;
	}
	var SERVER_TRANSITION_PROVIDERS = [
	    {
	        provide: _angular_core.APP_INITIALIZER,
	        useFactory: bootstrapListenerFactory,
	        deps: [TRANSITION_ID, DOCUMENT],
	        multi: true
	    },
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BrowserGetTestability = (function () {
	    function BrowserGetTestability() {
	    }
	    /**
	     * @return {?}
	     */
	    BrowserGetTestability.init = function () { _angular_core.setTestabilityGetter(new BrowserGetTestability()); };
	    /**
	     * @param {?} registry
	     * @return {?}
	     */
	    BrowserGetTestability.prototype.addToWindow = function (registry) {
	        _angular_core.ɵglobal['getAngularTestability'] = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
	            if (testability == null) {
	                throw new Error('Could not find testability for element.');
	            }
	            return testability;
	        };
	        _angular_core.ɵglobal['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };
	        _angular_core.ɵglobal['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };
	        var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
	            var /** @type {?} */ testabilities = _angular_core.ɵglobal['getAllAngularTestabilities']();
	            var /** @type {?} */ count = testabilities.length;
	            var /** @type {?} */ didWork = false;
	            var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
	                didWork = didWork || didWork_;
	                count--;
	                if (count == 0) {
	                    callback(didWork);
	                }
	            };
	            testabilities.forEach(function (testability /** TODO #9100 */) {
	                testability.whenStable(decrement);
	            });
	        };
	        if (!_angular_core.ɵglobal['frameworkStabilizers']) {
	            _angular_core.ɵglobal['frameworkStabilizers'] = [];
	        }
	        _angular_core.ɵglobal['frameworkStabilizers'].push(whenAllStable);
	    };
	    /**
	     * @param {?} registry
	     * @param {?} elem
	     * @param {?} findInAncestors
	     * @return {?}
	     */
	    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        if (elem == null) {
	            return null;
	        }
	        var /** @type {?} */ t = registry.getTestability(elem);
	        if (t != null) {
	            return t;
	        }
	        else if (!findInAncestors) {
	            return null;
	        }
	        if (getDOM().isShadowRoot(elem)) {
	            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
	        }
	        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
	    };
	    return BrowserGetTestability;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A service that can be used to get and set the title of a current HTML document.
	 *
	 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
	 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	 * title value.
	 *
	 * \@experimental
	 */
	var Title = (function () {
	    /**
	     * @param {?} _doc
	     */
	    function Title(_doc) {
	        this._doc = _doc;
	    }
	    /**
	     * Get the title of the current HTML document.
	     * @return {?}
	     */
	    Title.prototype.getTitle = function () { return getDOM().getTitle(this._doc); };
	    /**
	     * Set the title of the current HTML document.
	     * @param {?} newTitle
	     * @return {?}
	     */
	    Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(this._doc, newTitle); };
	    return Title;
	}());
	Title.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Title.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __assign = (undefined && undefined.__assign) || Object.assign || function (t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s)
	            if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	    }
	    return t;
	};
	var CORE_TOKENS = {
	    'ApplicationRef': _angular_core.ApplicationRef,
	    'NgZone': _angular_core.NgZone,
	};
	var INSPECT_GLOBAL_NAME = 'ng.probe';
	var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
	/**
	 * Returns a {\@link DebugElement} for the given native DOM element, or
	 * null if the given native element does not have an Angular view associated
	 * with it.
	 * @param {?} element
	 * @return {?}
	 */
	function inspectNativeElement(element) {
	    return _angular_core.getDebugNode(element);
	}
	/**
	 * Deprecated. Use the one from '\@angular/core'.
	 * @deprecated
	 */
	var NgProbeToken$1 = (function () {
	    /**
	     * @param {?} name
	     * @param {?} token
	     */
	    function NgProbeToken$1(name, token) {
	        this.name = name;
	        this.token = token;
	    }
	    return NgProbeToken$1;
	}());
	/**
	 * @param {?} extraTokens
	 * @param {?} coreTokens
	 * @return {?}
	 */
	function _createNgProbe(extraTokens, coreTokens) {
	    var /** @type {?} */ tokens = (extraTokens || []).concat(coreTokens || []);
	    getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	    getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, __assign({}, CORE_TOKENS, _ngProbeTokensToMap(tokens || [])));
	    return function () { return inspectNativeElement; };
	}
	/**
	 * @param {?} tokens
	 * @return {?}
	 */
	function _ngProbeTokensToMap(tokens) {
	    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
	}
	/**
	 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	 */
	var ELEMENT_PROBE_PROVIDERS = [
	    {
	        provide: _angular_core.APP_INITIALIZER,
	        useFactory: _createNgProbe,
	        deps: [
	            [NgProbeToken$1, new _angular_core.Optional()],
	            [_angular_core.NgProbeToken, new _angular_core.Optional()],
	        ],
	        multi: true,
	    },
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@stable
	 */
	var EVENT_MANAGER_PLUGINS = new _angular_core.InjectionToken('EventManagerPlugins');
	/**
	 * \@stable
	 */
	var EventManager = (function () {
	    /**
	     * @param {?} plugins
	     * @param {?} _zone
	     */
	    function EventManager(plugins, _zone) {
	        var _this = this;
	        this._zone = _zone;
	        this._eventNameToPlugin = new Map();
	        plugins.forEach(function (p) { return p.manager = _this; });
	        this._plugins = plugins.slice().reverse();
	    }
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var /** @type {?} */ plugin = this._findPluginFor(eventName);
	        return plugin.addEventListener(element, eventName, handler);
	    };
	    /**
	     * @param {?} target
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var /** @type {?} */ plugin = this._findPluginFor(eventName);
	        return plugin.addGlobalEventListener(target, eventName, handler);
	    };
	    /**
	     * @return {?}
	     */
	    EventManager.prototype.getZone = function () { return this._zone; };
	    /**
	     * \@internal
	     * @param {?} eventName
	     * @return {?}
	     */
	    EventManager.prototype._findPluginFor = function (eventName) {
	        var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
	        if (plugin) {
	            return plugin;
	        }
	        var /** @type {?} */ plugins = this._plugins;
	        for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
	            var /** @type {?} */ plugin_1 = plugins[i];
	            if (plugin_1.supports(eventName)) {
	                this._eventNameToPlugin.set(eventName, plugin_1);
	                return plugin_1;
	            }
	        }
	        throw new Error("No event manager plugin found for event " + eventName);
	    };
	    return EventManager;
	}());
	EventManager.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	EventManager.ctorParameters = function () { return [
	    { type: Array, decorators: [{ type: _angular_core.Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
	    { type: _angular_core.NgZone, },
	]; };
	/**
	 * @abstract
	 */
	var EventManagerPlugin = (function () {
	    /**
	     * @param {?} _doc
	     */
	    function EventManagerPlugin(_doc) {
	        this._doc = _doc;
	    }
	    /**
	     * @abstract
	     * @param {?} eventName
	     * @return {?}
	     */
	    EventManagerPlugin.prototype.supports = function (eventName) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	        var /** @type {?} */ target = getDOM().getGlobalEventTarget(this._doc, element);
	        if (!target) {
	            throw new Error("Unsupported event target " + target + " for event " + eventName);
	        }
	        return this.addEventListener(target, eventName, handler);
	    };
	    
	    return EventManagerPlugin;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SharedStylesHost = (function () {
	    function SharedStylesHost() {
	        /**
	         * \@internal
	         */
	        this._stylesSet = new Set();
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    SharedStylesHost.prototype.addStyles = function (styles) {
	        var _this = this;
	        var /** @type {?} */ additions = new Set();
	        styles.forEach(function (style) {
	            if (!_this._stylesSet.has(style)) {
	                _this._stylesSet.add(style);
	                additions.add(style);
	            }
	        });
	        this.onStylesAdded(additions);
	    };
	    /**
	     * @param {?} additions
	     * @return {?}
	     */
	    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	    /**
	     * @return {?}
	     */
	    SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };
	    return SharedStylesHost;
	}());
	SharedStylesHost.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	SharedStylesHost.ctorParameters = function () { return []; };
	var DomSharedStylesHost = (function (_super) {
	    __extends(DomSharedStylesHost, _super);
	    /**
	     * @param {?} _doc
	     */
	    function DomSharedStylesHost(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        _this._hostNodes = new Set();
	        _this._styleNodes = new Set();
	        _this._hostNodes.add(_doc.head);
	        return _this;
	    }
	    /**
	     * @param {?} styles
	     * @param {?} host
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	        var _this = this;
	        styles.forEach(function (style) {
	            var /** @type {?} */ styleEl = _this._doc.createElement('style');
	            styleEl.textContent = style;
	            _this._styleNodes.add(host.appendChild(styleEl));
	        });
	    };
	    /**
	     * @param {?} hostNode
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.addHost = function (hostNode) {
	        this._addStylesToHost(this._stylesSet, hostNode);
	        this._hostNodes.add(hostNode);
	    };
	    /**
	     * @param {?} hostNode
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
	    /**
	     * @param {?} additions
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	        var _this = this;
	        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });
	    };
	    /**
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };
	    return DomSharedStylesHost;
	}(SharedStylesHost));
	DomSharedStylesHost.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomSharedStylesHost.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NAMESPACE_URIS = {
	    'svg': 'http://www.w3.org/2000/svg',
	    'xhtml': 'http://www.w3.org/1999/xhtml',
	    'xlink': 'http://www.w3.org/1999/xlink',
	    'xml': 'http://www.w3.org/XML/1998/namespace',
	    'xmlns': 'http://www.w3.org/2000/xmlns/',
	};
	var COMPONENT_REGEX = /%COMP%/g;
	var COMPONENT_VARIABLE = '%COMP%';
	var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	/**
	 * @param {?} componentShortId
	 * @return {?}
	 */
	function shimContentAttribute(componentShortId) {
	    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
	}
	/**
	 * @param {?} componentShortId
	 * @return {?}
	 */
	function shimHostAttribute(componentShortId) {
	    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
	}
	/**
	 * @param {?} compId
	 * @param {?} styles
	 * @param {?} target
	 * @return {?}
	 */
	function flattenStyles(compId, styles, target) {
	    for (var /** @type {?} */ i = 0; i < styles.length; i++) {
	        var /** @type {?} */ style = styles[i];
	        if (Array.isArray(style)) {
	            flattenStyles(compId, style, target);
	        }
	        else {
	            style = style.replace(COMPONENT_REGEX, compId);
	            target.push(style);
	        }
	    }
	    return target;
	}
	/**
	 * @param {?} eventHandler
	 * @return {?}
	 */
	function decoratePreventDefault(eventHandler) {
	    return function (event) {
	        var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
	        if (allowDefaultBehavior === false) {
	            // TODO(tbosch): move preventDefault into event plugins...
	            event.preventDefault();
	            event.returnValue = false;
	        }
	    };
	}
	var DomRendererFactory2 = (function () {
	    /**
	     * @param {?} eventManager
	     * @param {?} sharedStylesHost
	     */
	    function DomRendererFactory2(eventManager, sharedStylesHost) {
	        this.eventManager = eventManager;
	        this.sharedStylesHost = sharedStylesHost;
	        this.rendererByCompId = new Map();
	        this.defaultRenderer = new DefaultDomRenderer2(eventManager);
	    }
	    
	    /**
	     * @param {?} element
	     * @param {?} type
	     * @return {?}
	     */
	    DomRendererFactory2.prototype.createRenderer = function (element, type) {
	        if (!element || !type) {
	            return this.defaultRenderer;
	        }
	        switch (type.encapsulation) {
	            case _angular_core.ViewEncapsulation.Emulated: {
	                var /** @type {?} */ renderer = this.rendererByCompId.get(type.id);
	                if (!renderer) {
	                    renderer =
	                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);
	                    this.rendererByCompId.set(type.id, renderer);
	                }
	                ((renderer)).applyToHost(element);
	                return renderer;
	            }
	            case _angular_core.ViewEncapsulation.Native:
	                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
	            default: {
	                if (!this.rendererByCompId.has(type.id)) {
	                    var /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);
	                    this.sharedStylesHost.addStyles(styles);
	                    this.rendererByCompId.set(type.id, this.defaultRenderer);
	                }
	                return this.defaultRenderer;
	            }
	        }
	    };
	    return DomRendererFactory2;
	}());
	DomRendererFactory2.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomRendererFactory2.ctorParameters = function () { return [
	    { type: EventManager, },
	    { type: DomSharedStylesHost, },
	]; };
	var DefaultDomRenderer2 = (function () {
	    /**
	     * @param {?} eventManager
	     */
	    function DefaultDomRenderer2(eventManager) {
	        this.eventManager = eventManager;
	        this.data = Object.create(null);
	    }
	    /**
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.destroy = function () { };
	    /**
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.createElement = function (name, namespace) {
	        if (namespace) {
	            return document.createElementNS(NAMESPACE_URIS[namespace], name);
	        }
	        return document.createElement(name);
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
	        if (parent) {
	            parent.insertBefore(newChild, refChild);
	        }
	    };
	    /**
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {
	        if (parent) {
	            parent.removeChild(oldChild);
	        }
	    };
	    /**
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode) {
	        var /** @type {?} */ el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :
	            selectorOrNode;
	        if (!el) {
	            throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	        }
	        el.textContent = '';
	        return el;
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
	        if (namespace) {
	            name = namespace + ":" + name;
	            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
	            if (namespaceUri) {
	                el.setAttributeNS(namespaceUri, name, value);
	            }
	            else {
	                el.setAttribute(name, value);
	            }
	        }
	        else {
	            el.setAttribute(name, value);
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {
	        if (namespace) {
	            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
	            if (namespaceUri) {
	                el.removeAttributeNS(namespaceUri, name);
	            }
	            else {
	                el.removeAttribute(namespace + ":" + name);
	            }
	        }
	        else {
	            el.removeAttribute(name);
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} value
	     * @param {?} flags
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {
	        if (flags & _angular_core.RendererStyleFlags2.DashCase) {
	            el.style.setProperty(style, value, !!(flags & _angular_core.RendererStyleFlags2.Important) ? 'important' : '');
	        }
	        else {
	            el.style[style] = value;
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} flags
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {
	        if (flags & _angular_core.RendererStyleFlags2.DashCase) {
	            el.style.removeProperty(style);
	        }
	        else {
	            // IE requires '' instead of null
	            // see https://github.com/angular/angular/issues/7916
	            el.style[style] = '';
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {
	        checkNoSyntheticProp(name, 'property');
	        el[name] = value;
	    };
	    /**
	     * @param {?} node
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };
	    /**
	     * @param {?} target
	     * @param {?} event
	     * @param {?} callback
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.listen = function (target, event, callback) {
	        checkNoSyntheticProp(event, 'listener');
	        if (typeof target === 'string') {
	            return (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));
	        }
	        return ((this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))));
	    };
	    return DefaultDomRenderer2;
	}());
	var AT_CHARCODE = '@'.charCodeAt(0);
	/**
	 * @param {?} name
	 * @param {?} nameKind
	 * @return {?}
	 */
	function checkNoSyntheticProp(name, nameKind) {
	    if (name.charCodeAt(0) === AT_CHARCODE) {
	        throw new Error("Found the synthetic " + nameKind + " " + name + ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.");
	    }
	}
	var EmulatedEncapsulationDomRenderer2 = (function (_super) {
	    __extends(EmulatedEncapsulationDomRenderer2, _super);
	    /**
	     * @param {?} eventManager
	     * @param {?} sharedStylesHost
	     * @param {?} component
	     */
	    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {
	        var _this = _super.call(this, eventManager) || this;
	        _this.component = component;
	        var styles = flattenStyles(component.id, component.styles, []);
	        sharedStylesHost.addStyles(styles);
	        _this.contentAttr = shimContentAttribute(component.id);
	        _this.hostAttr = shimHostAttribute(component.id);
	        return _this;
	    }
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };
	    /**
	     * @param {?} parent
	     * @param {?} name
	     * @return {?}
	     */
	    EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {
	        var /** @type {?} */ el = _super.prototype.createElement.call(this, parent, name);
	        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');
	        return el;
	    };
	    return EmulatedEncapsulationDomRenderer2;
	}(DefaultDomRenderer2));
	var ShadowDomRenderer = (function (_super) {
	    __extends(ShadowDomRenderer, _super);
	    /**
	     * @param {?} eventManager
	     * @param {?} sharedStylesHost
	     * @param {?} hostEl
	     * @param {?} component
	     */
	    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
	        var _this = _super.call(this, eventManager) || this;
	        _this.sharedStylesHost = sharedStylesHost;
	        _this.hostEl = hostEl;
	        _this.component = component;
	        _this.shadowRoot = hostEl.createShadowRoot();
	        _this.sharedStylesHost.addHost(_this.shadowRoot);
	        var styles = flattenStyles(component.id, component.styles, []);
	        for (var i = 0; i < styles.length; i++) {
	            var styleEl = document.createElement('style');
	            styleEl.textContent = styles[i];
	            _this.shadowRoot.appendChild(styleEl);
	        }
	        return _this;
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };
	    /**
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {
	        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
	        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {
	        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.parentNode = function (node) {
	        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
	    };
	    return ShadowDomRenderer;
	}(DefaultDomRenderer2));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DomEventsPlugin = (function (_super) {
	    __extends(DomEventsPlugin, _super);
	    /**
	     * @param {?} doc
	     */
	    function DomEventsPlugin(doc) {
	        return _super.call(this, doc) || this;
	    }
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        element.addEventListener(eventName, /** @type {?} */ (handler), false);
	        return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };
	    };
	    return DomEventsPlugin;
	}(EventManagerPlugin));
	DomEventsPlugin.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomEventsPlugin.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EVENT_NAMES = {
	    // pan
	    'pan': true,
	    'panstart': true,
	    'panmove': true,
	    'panend': true,
	    'pancancel': true,
	    'panleft': true,
	    'panright': true,
	    'panup': true,
	    'pandown': true,
	    // pinch
	    'pinch': true,
	    'pinchstart': true,
	    'pinchmove': true,
	    'pinchend': true,
	    'pinchcancel': true,
	    'pinchin': true,
	    'pinchout': true,
	    // press
	    'press': true,
	    'pressup': true,
	    // rotate
	    'rotate': true,
	    'rotatestart': true,
	    'rotatemove': true,
	    'rotateend': true,
	    'rotatecancel': true,
	    // swipe
	    'swipe': true,
	    'swipeleft': true,
	    'swiperight': true,
	    'swipeup': true,
	    'swipedown': true,
	    // tap
	    'tap': true,
	};
	/**
	 * A DI token that you can use to provide{\@link HammerGestureConfig} to Angular. Use it to configure
	 * Hammer gestures.
	 *
	 * \@experimental
	 */
	var HAMMER_GESTURE_CONFIG = new _angular_core.InjectionToken('HammerGestureConfig');
	/**
	 * \@experimental
	 */
	var HammerGestureConfig = (function () {
	    function HammerGestureConfig() {
	        this.events = [];
	        this.overrides = {};
	    }
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    HammerGestureConfig.prototype.buildHammer = function (element) {
	        var /** @type {?} */ mc = new Hammer(element);
	        mc.get('pinch').set({ enable: true });
	        mc.get('rotate').set({ enable: true });
	        for (var /** @type {?} */ eventName in this.overrides) {
	            mc.get(eventName).set(this.overrides[eventName]);
	        }
	        return mc;
	    };
	    return HammerGestureConfig;
	}());
	HammerGestureConfig.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	HammerGestureConfig.ctorParameters = function () { return []; };
	var HammerGesturesPlugin = (function (_super) {
	    __extends(HammerGesturesPlugin, _super);
	    /**
	     * @param {?} doc
	     * @param {?} _config
	     */
	    function HammerGesturesPlugin(doc, _config) {
	        var _this = _super.call(this, doc) || this;
	        _this._config = _config;
	        return _this;
	    }
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    HammerGesturesPlugin.prototype.supports = function (eventName) {
	        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
	            return false;
	        }
	        if (!((window)).Hammer) {
	            throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
	        }
	        return true;
	    };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var _this = this;
	        var /** @type {?} */ zone = this.manager.getZone();
	        eventName = eventName.toLowerCase();
	        return zone.runOutsideAngular(function () {
	            // Creating the manager bind events, must be done outside of angular
	            var /** @type {?} */ mc = _this._config.buildHammer(element);
	            var /** @type {?} */ callback = function (eventObj) {
	                zone.runGuarded(function () { handler(eventObj); });
	            };
	            mc.on(eventName, callback);
	            return function () { return mc.off(eventName, callback); };
	        });
	    };
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
	    return HammerGesturesPlugin;
	}(EventManagerPlugin));
	HammerGesturesPlugin.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	HammerGesturesPlugin.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	    { type: HammerGestureConfig, decorators: [{ type: _angular_core.Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
	var MODIFIER_KEY_GETTERS = {
	    'alt': function (event) { return event.altKey; },
	    'control': function (event) { return event.ctrlKey; },
	    'meta': function (event) { return event.metaKey; },
	    'shift': function (event) { return event.shiftKey; }
	};
	/**
	 * \@experimental
	 */
	var KeyEventsPlugin = (function (_super) {
	    __extends(KeyEventsPlugin, _super);
	    /**
	     * @param {?} doc
	     */
	    function KeyEventsPlugin(doc) {
	        return _super.call(this, doc) || this;
	    }
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var /** @type {?} */ parsedEvent = ((KeyEventsPlugin.parseEventName(eventName)));
	        var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
	        return this.manager.getZone().runOutsideAngular(function () {
	            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
	        });
	    };
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    KeyEventsPlugin.parseEventName = function (eventName) {
	        var /** @type {?} */ parts = eventName.toLowerCase().split('.');
	        var /** @type {?} */ domEventName = parts.shift();
	        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
	            return null;
	        }
	        var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(/** @type {?} */ ((parts.pop())));
	        var /** @type {?} */ fullKey = '';
	        MODIFIER_KEYS.forEach(function (modifierName) {
	            var /** @type {?} */ index = parts.indexOf(modifierName);
	            if (index > -1) {
	                parts.splice(index, 1);
	                fullKey += modifierName + '.';
	            }
	        });
	        fullKey += key;
	        if (parts.length != 0 || key.length === 0) {
	            // returning null instead of throwing to let another plugin process the event
	            return null;
	        }
	        var /** @type {?} */ result = {};
	        result['domEventName'] = domEventName;
	        result['fullKey'] = fullKey;
	        return result;
	    };
	    /**
	     * @param {?} event
	     * @return {?}
	     */
	    KeyEventsPlugin.getEventFullKey = function (event) {
	        var /** @type {?} */ fullKey = '';
	        var /** @type {?} */ key = getDOM().getEventKey(event);
	        key = key.toLowerCase();
	        if (key === ' ') {
	            key = 'space'; // for readability
	        }
	        else if (key === '.') {
	            key = 'dot'; // because '.' is used as a separator in event names
	        }
	        MODIFIER_KEYS.forEach(function (modifierName) {
	            if (modifierName != key) {
	                var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
	                if (modifierGetter(event)) {
	                    fullKey += modifierName + '.';
	                }
	            }
	        });
	        fullKey += key;
	        return fullKey;
	    };
	    /**
	     * @param {?} fullKey
	     * @param {?} handler
	     * @param {?} zone
	     * @return {?}
	     */
	    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
	        return function (event /** TODO #9100 */) {
	            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	                zone.runGuarded(function () { return handler(event); });
	            }
	        };
	    };
	    /**
	     * \@internal
	     * @param {?} keyName
	     * @return {?}
	     */
	    KeyEventsPlugin._normalizeKey = function (keyName) {
	        // TODO: switch to a Map if the mapping grows too much
	        switch (keyName) {
	            case 'esc':
	                return 'escape';
	            default:
	                return keyName;
	        }
	    };
	    return KeyEventsPlugin;
	}(EventManagerPlugin));
	KeyEventsPlugin.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	KeyEventsPlugin.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A pattern that recognizes a commonly useful subset of URLs that are safe.
	 *
	 * This regular expression matches a subset of URLs that will not cause script
	 * execution if used in URL context within a HTML document. Specifically, this
	 * regular expression matches if (comment from here on and regex copied from
	 * Soy's EscapingConventions):
	 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
	 * (2) or no protocol.  A protocol must be followed by a colon. The below
	 *     allows that by allowing colons only after one of the characters [/?#].
	 *     A colon after a hash (#) must be in the fragment.
	 *     Otherwise, a colon after a (?) must be in a query.
	 *     Otherwise, a colon after a single solidus (/) must be in a path.
	 *     Otherwise, a colon after a double solidus (//) must be in the authority
	 *     (before port).
	 *
	 * The pattern disallows &, used in HTML entity declarations before
	 * one of the characters in [/?#]. This disallows HTML entities used in the
	 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
	 * It also disallows HTML entities in the first path part of a relative path,
	 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
	 * that. More importantly, it disallows masking of a colon,
	 * e.g. "javascript&#58;...".
	 *
	 * This regular expression was taken from the Closure sanitization library.
	 */
	var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
	/** A pattern that matches safe data URLs. Only matches image, video and audio types. */
	var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function sanitizeUrl(url) {
	    url = String(url);
	    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
	        return url;
	    if (_angular_core.isDevMode()) {
	        getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
	    }
	    return 'unsafe:' + url;
	}
	/**
	 * @param {?} srcset
	 * @return {?}
	 */
	function sanitizeSrcset(srcset) {
	    srcset = String(srcset);
	    return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
	var inertElement = null;
	/** Lazily initialized to make sure the DOM adapter gets set before use. */
	var DOM = ((null));
	/**
	 * Returns an HTML element that is guaranteed to not execute code when creating elements in it.
	 * @return {?}
	 */
	function getInertElement() {
	    if (inertElement)
	        return inertElement;
	    DOM = getDOM();
	    // Prefer using <template> element if supported.
	    var /** @type {?} */ templateEl = DOM.createElement('template');
	    if ('content' in templateEl)
	        return templateEl;
	    var /** @type {?} */ doc = DOM.createHtmlDocument();
	    inertElement = DOM.querySelector(doc, 'body');
	    if (inertElement == null) {
	        // usually there should be only one body element in the document, but IE doesn't have any, so we
	        // need to create one.
	        var /** @type {?} */ html = DOM.createElement('html', doc);
	        inertElement = DOM.createElement('body', doc);
	        DOM.appendChild(html, inertElement);
	        DOM.appendChild(doc, html);
	    }
	    return inertElement;
	}
	/**
	 * @param {?} tags
	 * @return {?}
	 */
	function tagSet(tags) {
	    var /** @type {?} */ res = {};
	    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
	        var t = _a[_i];
	        res[t] = true;
	    }
	    return res;
	}
	/**
	 * @param {...?} sets
	 * @return {?}
	 */
	function merge() {
	    var sets = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sets[_i] = arguments[_i];
	    }
	    var /** @type {?} */ res = {};
	    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
	        var s = sets_1[_a];
	        for (var /** @type {?} */ v in s) {
	            if (s.hasOwnProperty(v))
	                res[v] = true;
	        }
	    }
	    return res;
	}
	// Good source of info about elements and attributes
	// http://dev.w3.org/html5/spec/Overview.html#semantics
	// http://simon.html5.org/html-elements
	// Safe Void Elements - HTML5
	// http://dev.w3.org/html5/spec/Overview.html#void-elements
	var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
	// Elements that you can, intentionally, leave open (and which close themselves)
	// http://dev.w3.org/html5/spec/Overview.html#optional-tags
	var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
	var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
	var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
	// Safe Block Elements - HTML5
	var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
	    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
	    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
	// Inline Elements - HTML5
	var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
	    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
	    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
	var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
	// Attributes that have href and hence need to be sanitized
	var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
	// Attributes that have special href set hence need to be sanitized
	var SRCSET_ATTRS = tagSet('srcset');
	var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
	    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
	    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
	    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
	    'valign,value,vspace,width');
	// NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
	// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
	// innerHTML is required, SVG attributes should be added here.
	// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
	// can be sanitized, but they increase security surface area without a legitimate use case, so they
	// are left out here.
	var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
	/**
	 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
	 * attributes.
	 */
	var SanitizingHtmlSerializer = (function () {
	    function SanitizingHtmlSerializer() {
	        this.sanitizedSomething = false;
	        this.buf = [];
	    }
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
	        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
	        // However this code never accesses properties off of `document` before deleting its contents
	        // again, so it shouldn't be vulnerable to DOM clobbering.
	        var /** @type {?} */ current = ((el.firstChild));
	        while (current) {
	            if (DOM.isElementNode(current)) {
	                this.startElement(/** @type {?} */ (current));
	            }
	            else if (DOM.isTextNode(current)) {
	                this.chars(/** @type {?} */ ((DOM.nodeValue(current))));
	            }
	            else {
	                // Strip non-element, non-text nodes.
	                this.sanitizedSomething = true;
	            }
	            if (DOM.firstChild(current)) {
	                current = ((DOM.firstChild(current)));
	                continue;
	            }
	            while (current) {
	                // Leaving the element. Walk up and to the right, closing tags as we go.
	                if (DOM.isElementNode(current)) {
	                    this.endElement(/** @type {?} */ (current));
	                }
	                var /** @type {?} */ next = checkClobberedElement(current, /** @type {?} */ ((DOM.nextSibling(current))));
	                if (next) {
	                    current = next;
	                    break;
	                }
	                current = checkClobberedElement(current, /** @type {?} */ ((DOM.parentElement(current))));
	            }
	        }
	        return this.buf.join('');
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.startElement = function (element) {
	        var _this = this;
	        var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();
	        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
	            this.sanitizedSomething = true;
	            return;
	        }
	        this.buf.push('<');
	        this.buf.push(tagName);
	        DOM.attributeMap(element).forEach(function (value, attrName) {
	            var /** @type {?} */ lower = attrName.toLowerCase();
	            if (!VALID_ATTRS.hasOwnProperty(lower)) {
	                _this.sanitizedSomething = true;
	                return;
	            }
	            // TODO(martinprobst): Special case image URIs for data:image/...
	            if (URI_ATTRS[lower])
	                value = sanitizeUrl(value);
	            if (SRCSET_ATTRS[lower])
	                value = sanitizeSrcset(value);
	            _this.buf.push(' ');
	            _this.buf.push(attrName);
	            _this.buf.push('="');
	            _this.buf.push(encodeEntities(value));
	            _this.buf.push('"');
	        });
	        this.buf.push('>');
	    };
	    /**
	     * @param {?} current
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.endElement = function (current) {
	        var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();
	        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
	            this.buf.push('</');
	            this.buf.push(tagName);
	            this.buf.push('>');
	        }
	    };
	    /**
	     * @param {?} chars
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };
	    return SanitizingHtmlSerializer;
	}());
	/**
	 * @param {?} node
	 * @param {?} nextNode
	 * @return {?}
	 */
	function checkClobberedElement(node, nextNode) {
	    if (nextNode && DOM.contains(node, nextNode)) {
	        throw new Error("Failed to sanitize html because the element is clobbered: " + DOM.getOuterHTML(node));
	    }
	    return nextNode;
	}
	// Regular Expressions for parsing tags and attributes
	var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	// ! to ~ is the ASCII range.
	var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	/**
	 * Escapes all potentially dangerous characters, so that the
	 * resulting string can be safely inserted into attribute or
	 * element text.
	 * @param {?} value
	 * @return {?}
	 */
	function encodeEntities(value) {
	    return value.replace(/&/g, '&amp;')
	        .replace(SURROGATE_PAIR_REGEXP, function (match) {
	        var /** @type {?} */ hi = match.charCodeAt(0);
	        var /** @type {?} */ low = match.charCodeAt(1);
	        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	    })
	        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
	        .replace(/</g, '&lt;')
	        .replace(/>/g, '&gt;');
	}
	/**
	 * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
	 * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
	 *
	 * This is undesirable since we don't want to allow any of these custom attributes. This method
	 * strips them all.
	 * @param {?} el
	 * @return {?}
	 */
	function stripCustomNsAttrs(el) {
	    DOM.attributeMap(el).forEach(function (_, attrName) {
	        if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	            DOM.removeAttribute(el, attrName);
	        }
	    });
	    for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
	        var n = _a[_i];
	        if (DOM.isElementNode(n))
	            stripCustomNsAttrs(/** @type {?} */ (n));
	    }
	}
	/**
	 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
	 * the DOM in a browser environment.
	 * @param {?} defaultDoc
	 * @param {?} unsafeHtmlInput
	 * @return {?}
	 */
	function sanitizeHtml(defaultDoc, unsafeHtmlInput) {
	    try {
	        var /** @type {?} */ containerEl = getInertElement();
	        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
	        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
	        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
	        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
	        var /** @type {?} */ mXSSAttempts = 5;
	        var /** @type {?} */ parsedHtml = unsafeHtml;
	        do {
	            if (mXSSAttempts === 0) {
	                throw new Error('Failed to sanitize html because the input is unstable');
	            }
	            mXSSAttempts--;
	            unsafeHtml = parsedHtml;
	            DOM.setInnerHTML(containerEl, unsafeHtml);
	            if (defaultDoc.documentMode) {
	                // strip custom-namespaced attributes on IE<=11
	                stripCustomNsAttrs(containerEl);
	            }
	            parsedHtml = DOM.getInnerHTML(containerEl);
	        } while (unsafeHtml !== parsedHtml);
	        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
	        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
	        // Clear out the body element.
	        var /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;
	        for (var _i = 0, _a = DOM.childNodesAsList(parent); _i < _a.length; _i++) {
	            var child = _a[_i];
	            DOM.removeChild(parent, child);
	        }
	        if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {
	            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
	        }
	        return safeHtml;
	    }
	    catch (e) {
	        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
	        inertElement = null;
	        throw e;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Regular expression for safe style values.
	 *
	 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
	 *
	 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
	 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
	 * of XSS.
	 *
	 * The function expression checks only for XSS safety, not for CSS validity.
	 *
	 * This regular expression was taken from the Closure sanitization library, and augmented for
	 * transformation values.
	 */
	var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
	var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
	var COLOR_FNS = '(?:rgb|hsl)a?';
	var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
	var CSS3_FNS = '(?:calc|attr)';
	var FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
	var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|" +
	    ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
	    (FN_ARGS + ")$"), 'g');
	/**
	 * Matches a `url(...)` value with an arbitrary argument as long as it does
	 * not contain parentheses.
	 *
	 * The URL value still needs to be sanitized separately.
	 *
	 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
	 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
	 * by observing whether scroll bars are displayed, or character ranges used by a font face
	 * definition.
	 *
	 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
	 * binding a URL value without further cooperation from the page will cause an information leak, and
	 * if so, it is just a leak, not a full blown XSS vulnerability.
	 *
	 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
	 * code is permissive and allows URLs that sanitize otherwise.
	 */
	var URL_RE = /^url\(([^)]+)\)$/;
	/**
	 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
	 * that neither escape (\) nor any other character that could result in
	 * breaking out of a string parsing context are allowed;
	 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
	 *
	 * This code was taken from the Closure sanitization library.
	 * @param {?} value
	 * @return {?}
	 */
	function hasBalancedQuotes(value) {
	    var /** @type {?} */ outsideSingle = true;
	    var /** @type {?} */ outsideDouble = true;
	    for (var /** @type {?} */ i = 0; i < value.length; i++) {
	        var /** @type {?} */ c = value.charAt(i);
	        if (c === '\'' && outsideDouble) {
	            outsideSingle = !outsideSingle;
	        }
	        else if (c === '"' && outsideSingle) {
	            outsideDouble = !outsideDouble;
	        }
	    }
	    return outsideSingle && outsideDouble;
	}
	/**
	 * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
	 * value) and returns a value that is safe to use in a browser environment.
	 * @param {?} value
	 * @return {?}
	 */
	function sanitizeStyle(value) {
	    value = String(value).trim(); // Make sure it's actually a string.
	    if (!value)
	        return '';
	    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
	    // reasoning behind this.
	    var /** @type {?} */ urlMatch = value.match(URL_RE);
	    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
	        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
	        return value; // Safe style values.
	    }
	    if (_angular_core.isDevMode()) {
	        getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
	    }
	    return 'unsafe';
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
	 * values to be safe to use in the different DOM contexts.
	 *
	 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
	 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
	 * the website.
	 *
	 * In specific situations, it might be necessary to disable sanitization, for example if the
	 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
	 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
	 * methods, and then binding to that value from the template.
	 *
	 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
	 * Cross Site Scripting (XSS) security bug!
	 *
	 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
	 * close as possible to the source of the value, to make it easy to verify no security bug is
	 * created by its use.
	 *
	 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
	 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
	 * code. The sanitizer leaves safe values intact.
	 *
	 * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
	 * sanitization for the value passed in. Carefully check and audit all values and code paths going
	 * into this call. Make sure any user data is appropriately escaped for this security context.
	 * For more detail, see the [Security Guide](http://g.co/ng/security).
	 *
	 * \@stable
	 * @abstract
	 */
	var DomSanitizer = (function () {
	    function DomSanitizer() {
	    }
	    /**
	     * Sanitizes a value for use in the given SecurityContext.
	     *
	     * If value is trusted for the context, this method will unwrap the contained safe value and use
	     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
	     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
	     * is responsible to make sure that the value can definitely be safely used in the given context.
	     * @abstract
	     * @param {?} context
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.sanitize = function (context, value) { };
	    /**
	     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
	     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
	     * leave safe HTML intact, so in most situations this method should not be used.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
	    /**
	     * Bypass security and trust the given value to be safe style value (CSS).
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
	    /**
	     * Bypass security and trust the given value to be safe JavaScript.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
	    /**
	     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
	     * in hyperlinks or `<img src>`.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
	    /**
	     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
	     * be used to load executable code from, like `<script src>`, or `<iframe src>`.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
	    return DomSanitizer;
	}());
	var DomSanitizerImpl = (function (_super) {
	    __extends(DomSanitizerImpl, _super);
	    /**
	     * @param {?} _doc
	     */
	    function DomSanitizerImpl(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        return _this;
	    }
	    /**
	     * @param {?} ctx
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
	        if (value == null)
	            return null;
	        switch (ctx) {
	            case _angular_core.SecurityContext.NONE:
	                return (value);
	            case _angular_core.SecurityContext.HTML:
	                if (value instanceof SafeHtmlImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'HTML');
	                return sanitizeHtml(this._doc, String(value));
	            case _angular_core.SecurityContext.STYLE:
	                if (value instanceof SafeStyleImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'Style');
	                return sanitizeStyle(/** @type {?} */ (value));
	            case _angular_core.SecurityContext.SCRIPT:
	                if (value instanceof SafeScriptImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'Script');
	                throw new Error('unsafe value used in a script context');
	            case _angular_core.SecurityContext.URL:
	                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
	                    // Allow resource URLs in URL contexts, they are strictly more trusted.
	                    return value.changingThisBreaksApplicationSecurity;
	                }
	                this.checkNotSafeValue(value, 'URL');
	                return sanitizeUrl(String(value));
	            case _angular_core.SecurityContext.RESOURCE_URL:
	                if (value instanceof SafeResourceUrlImpl) {
	                    return value.changingThisBreaksApplicationSecurity;
	                }
	                this.checkNotSafeValue(value, 'ResourceURL');
	                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	            default:
	                throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
	        }
	    };
	    /**
	     * @param {?} value
	     * @param {?} expectedType
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
	        if (value instanceof SafeValueImpl) {
	            throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " +
	                "(see http://g.co/ng/security#xss)");
	        }
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
	        return new SafeResourceUrlImpl(value);
	    };
	    return DomSanitizerImpl;
	}(DomSanitizer));
	DomSanitizerImpl.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomSanitizerImpl.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @abstract
	 */
	var SafeValueImpl = (function () {
	    /**
	     * @param {?} changingThisBreaksApplicationSecurity
	     */
	    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
	        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
	        // empty
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    SafeValueImpl.prototype.getTypeName = function () { };
	    /**
	     * @return {?}
	     */
	    SafeValueImpl.prototype.toString = function () {
	        return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity +
	            " (see http://g.co/ng/security#xss)";
	    };
	    return SafeValueImpl;
	}());
	var SafeHtmlImpl = (function (_super) {
	    __extends(SafeHtmlImpl, _super);
	    function SafeHtmlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
	    return SafeHtmlImpl;
	}(SafeValueImpl));
	var SafeStyleImpl = (function (_super) {
	    __extends(SafeStyleImpl, _super);
	    function SafeStyleImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
	    return SafeStyleImpl;
	}(SafeValueImpl));
	var SafeScriptImpl = (function (_super) {
	    __extends(SafeScriptImpl, _super);
	    function SafeScriptImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
	    return SafeScriptImpl;
	}(SafeValueImpl));
	var SafeUrlImpl = (function (_super) {
	    __extends(SafeUrlImpl, _super);
	    function SafeUrlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
	    return SafeUrlImpl;
	}(SafeValueImpl));
	var SafeResourceUrlImpl = (function (_super) {
	    __extends(SafeResourceUrlImpl, _super);
	    function SafeResourceUrlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
	    return SafeResourceUrlImpl;
	}(SafeValueImpl));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
	    { provide: _angular_core.PLATFORM_ID, useValue: _angular_common.ɵPLATFORM_BROWSER_ID },
	    { provide: _angular_core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
	    { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation },
	    { provide: DOCUMENT, useFactory: _document, deps: [] },
	];
	/**
	 * \@security Replacing built-in sanitization providers exposes the application to XSS risks.
	 * Attacker-controlled data introduced by an unsanitized provider could expose your
	 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	 * \@experimental
	 */
	var BROWSER_SANITIZATION_PROVIDERS = [
	    { provide: _angular_core.Sanitizer, useExisting: DomSanitizer },
	    { provide: DomSanitizer, useClass: DomSanitizerImpl },
	];
	/**
	 * \@stable
	 */
	var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
	/**
	 * @return {?}
	 */
	function initDomAdapter() {
	    BrowserDomAdapter.makeCurrent();
	    BrowserGetTestability.init();
	}
	/**
	 * @return {?}
	 */
	function errorHandler() {
	    return new _angular_core.ErrorHandler();
	}
	/**
	 * @return {?}
	 */
	function _document() {
	    return document;
	}
	/**
	 * The ng module for the browser.
	 *
	 * \@stable
	 */
	var BrowserModule = (function () {
	    /**
	     * @param {?} parentModule
	     */
	    function BrowserModule(parentModule) {
	        if (parentModule) {
	            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
	        }
	    }
	    /**
	     * Configures a browser-based application to transition from a server-rendered app, if
	     * one is present on the page. The specified parameters must include an application id,
	     * which must match between the client and server applications.
	     *
	     * \@experimental
	     * @param {?} params
	     * @return {?}
	     */
	    BrowserModule.withServerTransition = function (params) {
	        return {
	            ngModule: BrowserModule,
	            providers: [
	                { provide: _angular_core.APP_ID, useValue: params.appId },
	                { provide: TRANSITION_ID, useExisting: _angular_core.APP_ID },
	                SERVER_TRANSITION_PROVIDERS,
	            ],
	        };
	    };
	    return BrowserModule;
	}());
	BrowserModule.decorators = [
	    { type: _angular_core.NgModule, args: [{
	                providers: [
	                    BROWSER_SANITIZATION_PROVIDERS,
	                    { provide: _angular_core.ErrorHandler, useFactory: errorHandler, deps: [] },
	                    { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
	                    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
	                    { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
	                    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
	                    DomRendererFactory2,
	                    { provide: _angular_core.RendererFactory2, useExisting: DomRendererFactory2 },
	                    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
	                    DomSharedStylesHost,
	                    _angular_core.Testability,
	                    EventManager,
	                    ELEMENT_PROBE_PROVIDERS,
	                    Meta,
	                    Title,
	                ],
	                exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]
	            },] },
	];
	/**
	 * @nocollapse
	 */
	BrowserModule.ctorParameters = function () { return [
	    { type: BrowserModule, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.SkipSelf },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var win = typeof window !== 'undefined' && window || {};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ChangeDetectionPerfRecord = (function () {
	    /**
	     * @param {?} msPerTick
	     * @param {?} numTicks
	     */
	    function ChangeDetectionPerfRecord(msPerTick, numTicks) {
	        this.msPerTick = msPerTick;
	        this.numTicks = numTicks;
	    }
	    return ChangeDetectionPerfRecord;
	}());
	/**
	 * Entry point for all Angular profiling-related debug tools. This object
	 * corresponds to the `ng.profiler` in the dev console.
	 */
	var AngularProfiler = (function () {
	    /**
	     * @param {?} ref
	     */
	    function AngularProfiler(ref) {
	        this.appRef = ref.injector.get(_angular_core.ApplicationRef);
	    }
	    /**
	     * Exercises change detection in a loop and then prints the average amount of
	     * time in milliseconds how long a single round of change detection takes for
	     * the current state of the UI. It runs a minimum of 5 rounds for a minimum
	     * of 500 milliseconds.
	     *
	     * Optionally, a user may pass a `config` parameter containing a map of
	     * options. Supported options are:
	     *
	     * `record` (boolean) - causes the profiler to record a CPU profile while
	     * it exercises the change detector. Example:
	     *
	     * ```
	     * ng.profiler.timeChangeDetection({record: true})
	     * ```
	     * @param {?} config
	     * @return {?}
	     */
	    AngularProfiler.prototype.timeChangeDetection = function (config) {
	        var /** @type {?} */ record = config && config['record'];
	        var /** @type {?} */ profileName = 'Change Detection';
	        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
	        var /** @type {?} */ isProfilerAvailable = win.console.profile != null;
	        if (record && isProfilerAvailable) {
	            win.console.profile(profileName);
	        }
	        var /** @type {?} */ start = getDOM().performanceNow();
	        var /** @type {?} */ numTicks = 0;
	        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
	            this.appRef.tick();
	            numTicks++;
	        }
	        var /** @type {?} */ end = getDOM().performanceNow();
	        if (record && isProfilerAvailable) {
	            // need to cast to <any> because type checker thinks there's no argument
	            // while in fact there is:
	            //
	            // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
	            ((win.console.profileEnd))(profileName);
	        }
	        var /** @type {?} */ msPerTick = (end - start) / numTicks;
	        win.console.log("ran " + numTicks + " change detection cycles");
	        win.console.log(msPerTick.toFixed(2) + " ms per check");
	        return new ChangeDetectionPerfRecord(msPerTick, numTicks);
	    };
	    return AngularProfiler;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PROFILER_GLOBAL_NAME = 'ng.profiler';
	/**
	 * Enabled Angular debug tools that are accessible via your browser's
	 * developer console.
	 *
	 * Usage:
	 *
	 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
	 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
	 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
	 *    then hit Enter.
	 *
	 * \@experimental All debugging apis are currently experimental.
	 * @template T
	 * @param {?} ref
	 * @return {?}
	 */
	function enableDebugTools(ref) {
	    getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
	    return ref;
	}
	/**
	 * Disables Angular tools.
	 *
	 * \@experimental All debugging apis are currently experimental.
	 * @return {?}
	 */
	function disableDebugTools() {
	    getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, null);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Predicates for use with {\@link DebugElement}'s query functions.
	 *
	 * \@experimental All debugging apis are currently experimental.
	 */
	var By = (function () {
	    function By() {
	    }
	    /**
	     * Match all elements.
	     *
	     * ## Example
	     *
	     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
	     * @return {?}
	     */
	    By.all = function () { return function (debugElement) { return true; }; };
	    /**
	     * Match elements by the given CSS selector.
	     *
	     * ## Example
	     *
	     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
	     * @param {?} selector
	     * @return {?}
	     */
	    By.css = function (selector) {
	        return function (debugElement) {
	            return debugElement.nativeElement != null ?
	                getDOM().elementMatches(debugElement.nativeElement, selector) :
	                false;
	        };
	    };
	    /**
	     * Match elements that have the given directive present.
	     *
	     * ## Example
	     *
	     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
	     * @param {?} type
	     * @return {?}
	     */
	    By.directive = function (type) {
	        return function (debugElement) { return ((debugElement.providerTokens)).indexOf(type) !== -1; };
	    };
	    return By;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * \@stable
	 */
	var VERSION = new _angular_core.Version('4.1.0');

	exports.BrowserModule = BrowserModule;
	exports.platformBrowser = platformBrowser;
	exports.Meta = Meta;
	exports.Title = Title;
	exports.disableDebugTools = disableDebugTools;
	exports.enableDebugTools = enableDebugTools;
	exports.By = By;
	exports.NgProbeToken = NgProbeToken$1;
	exports.DOCUMENT = DOCUMENT;
	exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
	exports.EventManager = EventManager;
	exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
	exports.HammerGestureConfig = HammerGestureConfig;
	exports.DomSanitizer = DomSanitizer;
	exports.VERSION = VERSION;
	exports.ɵBROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS;
	exports.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS = INTERNAL_BROWSER_PLATFORM_PROVIDERS;
	exports.ɵinitDomAdapter = initDomAdapter;
	exports.ɵBrowserDomAdapter = BrowserDomAdapter;
	exports.ɵsetValueOnPath = setValueOnPath;
	exports.ɵBrowserPlatformLocation = BrowserPlatformLocation;
	exports.ɵTRANSITION_ID = TRANSITION_ID;
	exports.ɵBrowserGetTestability = BrowserGetTestability;
	exports.ɵELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS;
	exports.ɵDomAdapter = DomAdapter;
	exports.ɵgetDOM = getDOM;
	exports.ɵsetRootDomAdapter = setRootDomAdapter;
	exports.ɵDomRendererFactory2 = DomRendererFactory2;
	exports.ɵNAMESPACE_URIS = NAMESPACE_URIS;
	exports.ɵflattenStyles = flattenStyles;
	exports.ɵshimContentAttribute = shimContentAttribute;
	exports.ɵshimHostAttribute = shimHostAttribute;
	exports.ɵDomEventsPlugin = DomEventsPlugin;
	exports.ɵHammerGesturesPlugin = HammerGesturesPlugin;
	exports.ɵKeyEventsPlugin = KeyEventsPlugin;
	exports.ɵDomSharedStylesHost = DomSharedStylesHost;
	exports.ɵSharedStylesHost = SharedStylesHost;
	exports.ɵb = _document;
	exports.ɵa = errorHandler;
	exports.ɵh = GenericBrowserDomAdapter;
	exports.ɵg = SERVER_TRANSITION_PROVIDERS;
	exports.ɵf = bootstrapListenerFactory;
	exports.ɵc = _createNgProbe;
	exports.ɵd = EventManagerPlugin;
	exports.ɵe = DomSanitizerImpl;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=platform-browser.umd.js.map


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(379)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.upgrade = global.ng.upgrade || {}, global.ng.upgrade.static = global.ng.upgrade.static || {}),global.ng.core));
	}(this, (function (exports,_angular_core) { 'use strict';

	/**
	 * @license Angular v4.1.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function noNg() {
	    throw new Error('AngularJS v1.x is not loaded!');
	}
	var angular = {
	    bootstrap: noNg,
	    module: noNg,
	    element: noNg,
	    version: noNg,
	    resumeBootstrap: noNg,
	    getTestability: noNg
	};
	try {
	    if (window.hasOwnProperty('angular')) {
	        angular = window.angular;
	    }
	}
	catch (e) {
	}
	/**
	 * Resets the AngularJS library.
	 *
	 * Used when angularjs is loaded lazily, and not available on `window`.
	 *
	 * @stable
	 */
	function setAngularLib(ng) {
	    angular = ng;
	}
	/**
	 * Returns the current version of the AngularJS library.
	 *
	 * @stable
	 */
	function getAngularLib() {
	    return angular;
	}
	var bootstrap = function (e, modules, config) {
	    return angular.bootstrap(e, modules, config);
	};
	var module$1 = function (prefix, dependencies) {
	    return angular.module(prefix, dependencies);
	};
	var element = function (e) { return angular.element(e); };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */ var $COMPILE = '$compile';
	var $CONTROLLER = '$controller';
	var $DELEGATE = '$delegate';
	var $HTTP_BACKEND = '$httpBackend';
	var $INJECTOR = '$injector';
	var $PARSE = '$parse';
	var $PROVIDE = '$provide';
	var $SCOPE = '$scope';
	var $TEMPLATE_CACHE = '$templateCache';
	var $$TESTABILITY = '$$testability';
	var INJECTOR_KEY = '$$angularInjector';
	var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;
	var REQUIRE_NG_MODEL = '?ngModel';
	var UPGRADE_MODULE_NAME = '$$UpgradeModule';
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A `PropertyBinding` represents a mapping between a property name
	 * and an attribute name. It is parsed from a string of the form
	 * `"prop: attr"`; or simply `"propAndAttr" where the property
	 * and attribute have the same identifier.
	 */
	var PropertyBinding = (function () {
	    function PropertyBinding(prop, attr) {
	        this.prop = prop;
	        this.attr = attr;
	        this.parseBinding();
	    }
	    PropertyBinding.prototype.parseBinding = function () {
	        this.bracketAttr = "[" + this.attr + "]";
	        this.parenAttr = "(" + this.attr + ")";
	        this.bracketParenAttr = "[(" + this.attr + ")]";
	        var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);
	        this.onAttr = "on" + capitalAttr;
	        this.bindAttr = "bind" + capitalAttr;
	        this.bindonAttr = "bindon" + capitalAttr;
	    };
	    return PropertyBinding;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function controllerKey(name) {
	    return '$' + name + 'Controller';
	}
	function getComponentName(component) {
	    // Return the name of the component or the first line of its stringified version.
	    return component.overriddenName || component.name || component.toString().split('\n')[0];
	}
	/**
	 * @return Whether the passed-in component implements the subset of the
	 *     `ControlValueAccessor` interface needed for AngularJS `ng-model`
	 *     compatibility.
	 */
	function supportsNgModel(component) {
	    return typeof component.writeValue === 'function' &&
	        typeof component.registerOnChange === 'function';
	}
	/**
	 * Glue the AngularJS `NgModelController` (if it exists) to the component
	 * (if it implements the needed subset of the `ControlValueAccessor` interface).
	 */
	function hookupNgModel(ngModel, component) {
	    if (ngModel && supportsNgModel(component)) {
	        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };
	        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var INITIAL_VALUE = {
	    __UNINITIALIZED__: true
	};
	var DowngradeComponentAdapter = (function () {
	    function DowngradeComponentAdapter(id, element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory) {
	        this.id = id;
	        this.element = element;
	        this.attrs = attrs;
	        this.scope = scope;
	        this.ngModel = ngModel;
	        this.parentInjector = parentInjector;
	        this.$injector = $injector;
	        this.$compile = $compile;
	        this.$parse = $parse;
	        this.componentFactory = componentFactory;
	        this.inputChangeCount = 0;
	        this.inputChanges = null;
	        this.componentRef = null;
	        this.component = null;
	        this.changeDetector = null;
	        this.element[0].id = id;
	        this.componentScope = scope.$new();
	    }
	    DowngradeComponentAdapter.prototype.compileContents = function () {
	        var _this = this;
	        var compiledProjectableNodes = [];
	        var projectableNodes = this.groupProjectableNodes();
	        var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });
	        this.element.empty();
	        linkFns.forEach(function (linkFn) {
	            linkFn(_this.scope, function (clone) {
	                compiledProjectableNodes.push(clone);
	                _this.element.append(clone);
	            });
	        });
	        return compiledProjectableNodes;
	    };
	    DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {
	        var childInjector = _angular_core.ReflectiveInjector.resolveAndCreate([{ provide: $SCOPE, useValue: this.componentScope }], this.parentInjector);
	        this.componentRef =
	            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);
	        this.changeDetector = this.componentRef.changeDetectorRef;
	        this.component = this.componentRef.instance;
	        hookupNgModel(this.ngModel, this.component);
	    };
	    DowngradeComponentAdapter.prototype.setupInputs = function () {
	        var _this = this;
	        var attrs = this.attrs;
	        var inputs = this.componentFactory.inputs || [];
	        for (var i = 0; i < inputs.length; i++) {
	            var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);
	            var expr = null;
	            if (attrs.hasOwnProperty(input.attr)) {
	                var observeFn = (function (prop) {
	                    var prevValue = INITIAL_VALUE;
	                    return function (currValue) {
	                        if (prevValue === INITIAL_VALUE) {
	                            prevValue = currValue;
	                        }
	                        _this.updateInput(prop, prevValue, currValue);
	                        prevValue = currValue;
	                    };
	                })(input.prop);
	                attrs.$observe(input.attr, observeFn);
	            }
	            else if (attrs.hasOwnProperty(input.bindAttr)) {
	                expr = attrs /** TODO #9100 */[input.bindAttr];
	            }
	            else if (attrs.hasOwnProperty(input.bracketAttr)) {
	                expr = attrs /** TODO #9100 */[input.bracketAttr];
	            }
	            else if (attrs.hasOwnProperty(input.bindonAttr)) {
	                expr = attrs /** TODO #9100 */[input.bindonAttr];
	            }
	            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {
	                expr = attrs /** TODO #9100 */[input.bracketParenAttr];
	            }
	            if (expr != null) {
	                var watchFn = (function (prop) {
	                    return function (currValue, prevValue) {
	                        return _this.updateInput(prop, prevValue, currValue);
	                    };
	                })(input.prop);
	                this.componentScope.$watch(expr, watchFn);
	            }
	        }
	        var prototype = this.componentFactory.componentType.prototype;
	        if (prototype && prototype.ngOnChanges) {
	            // Detect: OnChanges interface
	            this.inputChanges = {};
	            this.componentScope.$watch(function () { return _this.inputChangeCount; }, function () {
	                var inputChanges = _this.inputChanges;
	                _this.inputChanges = {};
	                _this.component.ngOnChanges(inputChanges);
	            });
	        }
	        this.componentScope.$watch(function () { return _this.changeDetector && _this.changeDetector.detectChanges(); });
	    };
	    DowngradeComponentAdapter.prototype.setupOutputs = function () {
	        var _this = this;
	        var attrs = this.attrs;
	        var outputs = this.componentFactory.outputs || [];
	        for (var j = 0; j < outputs.length; j++) {
	            var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);
	            var expr = null;
	            var assignExpr = false;
	            var bindonAttr = output.bindonAttr ? output.bindonAttr.substring(0, output.bindonAttr.length - 6) : null;
	            var bracketParenAttr = output.bracketParenAttr ?
	                "[(" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + ")]" :
	                null;
	            if (attrs.hasOwnProperty(output.onAttr)) {
	                expr = attrs /** TODO #9100 */[output.onAttr];
	            }
	            else if (attrs.hasOwnProperty(output.parenAttr)) {
	                expr = attrs /** TODO #9100 */[output.parenAttr];
	            }
	            else if (attrs.hasOwnProperty(bindonAttr)) {
	                expr = attrs /** TODO #9100 */[bindonAttr];
	                assignExpr = true;
	            }
	            else if (attrs.hasOwnProperty(bracketParenAttr)) {
	                expr = attrs /** TODO #9100 */[bracketParenAttr];
	                assignExpr = true;
	            }
	            if (expr != null && assignExpr != null) {
	                var getter = this.$parse(expr);
	                var setter = getter.assign;
	                if (assignExpr && !setter) {
	                    throw new Error("Expression '" + expr + "' is not assignable!");
	                }
	                var emitter = this.component[output.prop];
	                if (emitter) {
	                    emitter.subscribe({
	                        next: assignExpr ?
	                            (function (setter) { return function (v /** TODO #9100 */) { return setter(_this.scope, v); }; })(setter) :
	                            (function (getter) {
	                                return function (v /** TODO #9100 */) {
	                                    return getter(_this.scope, { $event: v });
	                                };
	                            })(getter)
	                    });
	                }
	                else {
	                    throw new Error("Missing emitter '" + output.prop + "' on component '" + getComponentName(this.componentFactory.componentType) + "'!");
	                }
	            }
	        }
	    };
	    DowngradeComponentAdapter.prototype.registerCleanup = function () {
	        var _this = this;
	        this.element.bind('$destroy', function () {
	            _this.componentScope.$destroy();
	            _this.componentRef.destroy();
	        });
	    };
	    DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef && this.componentRef.injector; };
	    DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {
	        if (this.inputChanges) {
	            this.inputChangeCount++;
	            this.inputChanges[prop] = new _angular_core.SimpleChange(prevValue, currValue, prevValue === currValue);
	        }
	        this.component[prop] = currValue;
	    };
	    DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {
	        var ngContentSelectors = this.componentFactory.ngContentSelectors;
	        return groupNodesBySelector(ngContentSelectors, this.element.contents());
	    };
	    return DowngradeComponentAdapter;
	}());
	/**
	 * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.
	 */
	function groupNodesBySelector(ngContentSelectors, nodes) {
	    var projectableNodes = [];
	    var wildcardNgContentIndex;
	    for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {
	        projectableNodes[i] = [];
	    }
	    for (var j = 0, jj = nodes.length; j < jj; ++j) {
	        var node = nodes[j];
	        var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);
	        if (ngContentIndex != null) {
	            projectableNodes[ngContentIndex].push(node);
	        }
	    }
	    return projectableNodes;
	}
	function findMatchingNgContentIndex(element, ngContentSelectors) {
	    var ngContentIndices = [];
	    var wildcardNgContentIndex = -1;
	    for (var i = 0; i < ngContentSelectors.length; i++) {
	        var selector = ngContentSelectors[i];
	        if (selector === '*') {
	            wildcardNgContentIndex = i;
	        }
	        else {
	            if (matchesSelector(element, selector)) {
	                ngContentIndices.push(i);
	            }
	        }
	    }
	    ngContentIndices.sort();
	    if (wildcardNgContentIndex !== -1) {
	        ngContentIndices.push(wildcardNgContentIndex);
	    }
	    return ngContentIndices.length ? ngContentIndices[0] : null;
	}
	var _matches;
	function matchesSelector(el, selector) {
	    if (!_matches) {
	        var elProto = Element.prototype;
	        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||
	            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;
	    }
	    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var downgradeCount = 0;
	/**
	 * @whatItDoes
	 *
	 * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)
	 * library for hybrid upgrade apps that support AoT compilation*
	 *
	 * Allows an Angular component to be used from AngularJS.
	 *
	 * @howToUse
	 *
	 * Let's assume that you have an Angular component called `ng2Heroes` that needs
	 * to be made available in AngularJS templates.
	 *
	 * {@example upgrade/static/ts/module.ts region="ng2-heroes"}
	 *
	 * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)
	 * that will make this Angular component available inside AngularJS templates.
	 * The `downgradeComponent()` function returns a factory function that we
	 * can use to define the AngularJS directive that wraps the "downgraded" component.
	 *
	 * {@example upgrade/static/ts/module.ts region="ng2-heroes-wrapper"}
	 *
	 * @description
	 *
	 * A helper function that returns a factory function to be used for registering an
	 * AngularJS wrapper directive for "downgrading" an Angular component.
	 *
	 * The parameter contains information about the Component that is being downgraded:
	 *
	 * * `component: Type<any>`: The type of the Component that will be downgraded
	 *
	 * @experimental
	 */
	function downgradeComponent(info) {
	    var idPrefix = "NG2_UPGRADE_" + downgradeCount++ + "_";
	    var idCount = 0;
	    var directiveFactory = function ($compile, $injector, $parse) {
	        return {
	            restrict: 'E',
	            terminal: true,
	            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],
	            link: function (scope, element, attrs, required) {
	                // We might have to compile the contents asynchronously, because this might have been
	                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have
	                // been compiled.
	                var parentInjector = required[0] || $injector.get(INJECTOR_KEY);
	                var ngModel = required[1];
	                var downgradeFn = function (injector) {
	                    var componentFactoryResolver = injector.get(_angular_core.ComponentFactoryResolver);
	                    var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);
	                    if (!componentFactory) {
	                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));
	                    }
	                    var id = idPrefix + (idCount++);
	                    var injectorPromise = new ParentInjectorPromise(element);
	                    var facade = new DowngradeComponentAdapter(id, element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory);
	                    var projectableNodes = facade.compileContents();
	                    facade.createComponent(projectableNodes);
	                    facade.setupInputs();
	                    facade.setupOutputs();
	                    facade.registerCleanup();
	                    injectorPromise.resolve(facade.getInjector());
	                };
	                if (parentInjector instanceof ParentInjectorPromise) {
	                    parentInjector.then(downgradeFn);
	                }
	                else {
	                    downgradeFn(parentInjector);
	                }
	            }
	        };
	    };
	    // bracket-notation because of closure - see #14441
	    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];
	    return directiveFactory;
	}
	/**
	 * Synchronous promise-like object to wrap parent injectors,
	 * to preserve the synchronous nature of Angular 1's $compile.
	 */
	var ParentInjectorPromise = (function () {
	    function ParentInjectorPromise(element) {
	        this.element = element;
	        this.injectorKey = controllerKey(INJECTOR_KEY);
	        this.callbacks = [];
	        // Store the promise on the element.
	        element.data(this.injectorKey, this);
	    }
	    ParentInjectorPromise.prototype.then = function (callback) {
	        if (this.injector) {
	            callback(this.injector);
	        }
	        else {
	            this.callbacks.push(callback);
	        }
	    };
	    ParentInjectorPromise.prototype.resolve = function (injector) {
	        this.injector = injector;
	        // Store the real injector on the element.
	        this.element.data(this.injectorKey, injector);
	        // Release the element to prevent memory leaks.
	        this.element = null;
	        // Run the queued callbacks.
	        this.callbacks.forEach(function (callback) { return callback(injector); });
	        this.callbacks.length = 0;
	    };
	    return ParentInjectorPromise;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @whatItDoes
	 *
	 * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)
	 * library for hybrid upgrade apps that support AoT compilation*
	 *
	 * Allow an Angular service to be accessible from AngularJS.
	 *
	 * @howToUse
	 *
	 * First ensure that the service to be downgraded is provided in an {@link NgModule}
	 * that will be part of the upgrade application. For example, let's assume we have
	 * defined `HeroesService`
	 *
	 * {@example upgrade/static/ts/module.ts region="ng2-heroes-service"}
	 *
	 * and that we have included this in our upgrade app {@link NgModule}
	 *
	 * {@example upgrade/static/ts/module.ts region="ng2-module"}
	 *
	 * Now we can register the `downgradeInjectable` factory function for the service
	 * on an AngularJS module.
	 *
	 * {@example upgrade/static/ts/module.ts region="downgrade-ng2-heroes-service"}
	 *
	 * Inside an AngularJS component's controller we can get hold of the
	 * downgraded service via the name we gave when downgrading.
	 *
	 * {@example upgrade/static/ts/module.ts region="example-app"}
	 *
	 * @description
	 *
	 * Takes a `token` that identifies a service provided from Angular.
	 *
	 * Returns a [factory function](https://docs.angularjs.org/guide/di) that can be
	 * used to register the service on an AngularJS module.
	 *
	 * The factory function provides access to the Angular service that
	 * is identified by the `token` parameter.
	 *
	 * @experimental
	 */
	function downgradeInjectable(token) {
	    var factory = function (i) { return i.get(token); };
	    factory.$inject = [INJECTOR_KEY];
	    return factory;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * @stable
	 */
	var VERSION = new _angular_core.Version('4.1.0');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var REQUIRE_PREFIX_RE = /^(\^\^?)?(\?)?(\^\^?)?/;
	var NOT_SUPPORTED = 'NOT_SUPPORTED';
	var INITIAL_VALUE$1 = {
	    __UNINITIALIZED__: true
	};
	var Bindings = (function () {
	    function Bindings() {
	        this.twoWayBoundProperties = [];
	        this.twoWayBoundLastValues = [];
	        this.expressionBoundProperties = [];
	        this.propertyToOutputMap = {};
	    }
	    return Bindings;
	}());
	/**
	 * @whatItDoes
	 *
	 * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)
	 * library for hybrid upgrade apps that support AoT compilation*
	 *
	 * Allows an AngularJS component to be used from Angular.
	 *
	 * @howToUse
	 *
	 * Let's assume that you have an AngularJS component called `ng1Hero` that needs
	 * to be made available in Angular templates.
	 *
	 * {@example upgrade/static/ts/module.ts region="ng1-hero"}
	 *
	 * We must create a {@link Directive} that will make this AngularJS component
	 * available inside Angular templates.
	 *
	 * {@example upgrade/static/ts/module.ts region="ng1-hero-wrapper"}
	 *
	 * In this example you can see that we must derive from the {@link UpgradeComponent}
	 * base class but also provide an {@link Directive `@Directive`} decorator. This is
	 * because the AoT compiler requires that this information is statically available at
	 * compile time.
	 *
	 * Note that we must do the following:
	 * * specify the directive's selector (`ng1-hero`)
	 * * specify all inputs and outputs that the AngularJS component expects
	 * * derive from `UpgradeComponent`
	 * * call the base class from the constructor, passing
	 *   * the AngularJS name of the component (`ng1Hero`)
	 *   * the {@link ElementRef} and {@link Injector} for the component wrapper
	 *
	 * @description
	 *
	 * A helper class that should be used as a base class for creating Angular directives
	 * that wrap AngularJS components that need to be "upgraded".
	 *
	 * @experimental
	 */
	var UpgradeComponent = (function () {
	    /**
	     * Create a new `UpgradeComponent` instance. You should not normally need to do this.
	     * Instead you should derive a new class from this one and call the super constructor
	     * from the base class.
	     *
	     * {@example upgrade/static/ts/module.ts region="ng1-hero-wrapper" }
	     *
	     * * The `name` parameter should be the name of the AngularJS directive.
	     * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency
	     *   injection into the base class constructor.
	     *
	     * Note that we must manually implement lifecycle hooks that call through to the super class.
	     * This is because, at the moment, the AoT compiler is not able to tell that the
	     * `UpgradeComponent`
	     * already implements them and so does not wire up calls to them at runtime.
	     */
	    function UpgradeComponent(name, elementRef, injector) {
	        this.name = name;
	        this.elementRef = elementRef;
	        this.injector = injector;
	        this.$injector = injector.get($INJECTOR);
	        this.$compile = this.$injector.get($COMPILE);
	        this.$templateCache = this.$injector.get($TEMPLATE_CACHE);
	        this.$httpBackend = this.$injector.get($HTTP_BACKEND);
	        this.$controller = this.$injector.get($CONTROLLER);
	        this.element = elementRef.nativeElement;
	        this.$element = element(this.element);
	        this.directive = this.getDirective(name);
	        this.bindings = this.initializeBindings(this.directive);
	        // We ask for the AngularJS scope from the Angular injector, since
	        // we will put the new component scope onto the new injector for each component
	        var $parentScope = injector.get($SCOPE);
	        // QUESTION 1: Should we create an isolated scope if the scope is only true?
	        // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?
	        this.$componentScope = $parentScope.$new(!!this.directive.scope);
	        this.initializeOutputs();
	    }
	    UpgradeComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        // Collect contents, insert and compile template
	        var contentChildNodes = this.extractChildNodes(this.element);
	        var linkFn = this.compileTemplate(this.directive);
	        // Instantiate controller
	        var controllerType = this.directive.controller;
	        var bindToController = this.directive.bindToController;
	        if (controllerType) {
	            this.controllerInstance = this.buildController(controllerType, this.$componentScope, this.$element, this.directive.controllerAs);
	        }
	        else if (bindToController) {
	            throw new Error("Upgraded directive '" + this.directive.name + "' specifies 'bindToController' but no controller.");
	        }
	        // Set up outputs
	        this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;
	        this.bindOutputs();
	        // Require other controllers
	        var directiveRequire = this.getDirectiveRequire(this.directive);
	        var requiredControllers = this.resolveRequire(this.directive.name, this.$element, directiveRequire);
	        if (this.directive.bindToController && isMap(directiveRequire)) {
	            var requiredControllersMap_1 = requiredControllers;
	            Object.keys(requiredControllersMap_1).forEach(function (key) {
	                _this.controllerInstance[key] = requiredControllersMap_1[key];
	            });
	        }
	        // Hook: $onChanges
	        if (this.pendingChanges) {
	            this.forwardChanges(this.pendingChanges);
	            this.pendingChanges = null;
	        }
	        // Hook: $onInit
	        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {
	            this.controllerInstance.$onInit();
	        }
	        // Hook: $doCheck
	        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {
	            var callDoCheck = function () { return _this.controllerInstance.$doCheck(); };
	            this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);
	            callDoCheck();
	        }
	        // Linking
	        var link = this.directive.link;
	        var preLink = (typeof link == 'object') && link.pre;
	        var postLink = (typeof link == 'object') ? link.post : link;
	        var attrs = NOT_SUPPORTED;
	        var transcludeFn = NOT_SUPPORTED;
	        if (preLink) {
	            preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);
	        }
	        var attachChildNodes = function (scope, cloneAttach) {
	            return cloneAttach(contentChildNodes);
	        };
	        linkFn(this.$componentScope, null, { parentBoundTranscludeFn: attachChildNodes });
	        if (postLink) {
	            postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);
	        }
	        // Hook: $postLink
	        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {
	            this.controllerInstance.$postLink();
	        }
	    };
	    UpgradeComponent.prototype.ngOnChanges = function (changes) {
	        if (!this.bindingDestination) {
	            this.pendingChanges = changes;
	        }
	        else {
	            this.forwardChanges(changes);
	        }
	    };
	    UpgradeComponent.prototype.ngDoCheck = function () {
	        var _this = this;
	        var twoWayBoundProperties = this.bindings.twoWayBoundProperties;
	        var twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;
	        var propertyToOutputMap = this.bindings.propertyToOutputMap;
	        twoWayBoundProperties.forEach(function (propName, idx) {
	            var newValue = _this.bindingDestination[propName];
	            var oldValue = twoWayBoundLastValues[idx];
	            if (!_angular_core.ɵlooseIdentical(newValue, oldValue)) {
	                var outputName = propertyToOutputMap[propName];
	                var eventEmitter = _this[outputName];
	                eventEmitter.emit(newValue);
	                twoWayBoundLastValues[idx] = newValue;
	            }
	        });
	    };
	    UpgradeComponent.prototype.ngOnDestroy = function () {
	        if (isFunction(this.unregisterDoCheckWatcher)) {
	            this.unregisterDoCheckWatcher();
	        }
	        if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {
	            this.controllerInstance.$onDestroy();
	        }
	        this.$componentScope.$destroy();
	    };
	    UpgradeComponent.prototype.getDirective = function (name) {
	        var directives = this.$injector.get(name + 'Directive');
	        if (directives.length > 1) {
	            throw new Error('Only support single directive definition for: ' + this.name);
	        }
	        var directive = directives[0];
	        if (directive.replace)
	            this.notSupported('replace');
	        if (directive.terminal)
	            this.notSupported('terminal');
	        if (directive.compile)
	            this.notSupported('compile');
	        var link = directive.link;
	        // QUESTION: why not support link.post?
	        if (typeof link == 'object') {
	            if (link.post)
	                this.notSupported('link.post');
	        }
	        return directive;
	    };
	    UpgradeComponent.prototype.getDirectiveRequire = function (directive) {
	        var require = directive.require || (directive.controller && directive.name);
	        if (isMap(require)) {
	            Object.keys(require).forEach(function (key) {
	                var value = require[key];
	                var match = value.match(REQUIRE_PREFIX_RE);
	                var name = value.substring(match[0].length);
	                if (!name) {
	                    require[key] = match[0] + key;
	                }
	            });
	        }
	        return require;
	    };
	    UpgradeComponent.prototype.initializeBindings = function (directive) {
	        var _this = this;
	        var btcIsObject = typeof directive.bindToController === 'object';
	        if (btcIsObject && Object.keys(directive.scope).length) {
	            throw new Error("Binding definitions on scope and controller at the same time is not supported.");
	        }
	        var context = (btcIsObject) ? directive.bindToController : directive.scope;
	        var bindings = new Bindings();
	        if (typeof context == 'object') {
	            Object.keys(context).forEach(function (propName) {
	                var definition = context[propName];
	                var bindingType = definition.charAt(0);
	                // QUESTION: What about `=*`? Ignore? Throw? Support?
	                switch (bindingType) {
	                    case '@':
	                    case '<':
	                        // We don't need to do anything special. They will be defined as inputs on the
	                        // upgraded component facade and the change propagation will be handled by
	                        // `ngOnChanges()`.
	                        break;
	                    case '=':
	                        bindings.twoWayBoundProperties.push(propName);
	                        bindings.twoWayBoundLastValues.push(INITIAL_VALUE$1);
	                        bindings.propertyToOutputMap[propName] = propName + 'Change';
	                        break;
	                    case '&':
	                        bindings.expressionBoundProperties.push(propName);
	                        bindings.propertyToOutputMap[propName] = propName;
	                        break;
	                    default:
	                        var json = JSON.stringify(context);
	                        throw new Error("Unexpected mapping '" + bindingType + "' in '" + json + "' in '" + _this.name + "' directive.");
	                }
	            });
	        }
	        return bindings;
	    };
	    UpgradeComponent.prototype.extractChildNodes = function (element$$1) {
	        var childNodes = [];
	        var childNode;
	        while (childNode = element$$1.firstChild) {
	            element$$1.removeChild(childNode);
	            childNodes.push(childNode);
	        }
	        return childNodes;
	    };
	    UpgradeComponent.prototype.compileTemplate = function (directive) {
	        if (this.directive.template !== undefined) {
	            return this.compileHtml(getOrCall(this.directive.template));
	        }
	        else if (this.directive.templateUrl) {
	            var url = getOrCall(this.directive.templateUrl);
	            var html = this.$templateCache.get(url);
	            if (html !== undefined) {
	                return this.compileHtml(html);
	            }
	            else {
	                throw new Error('loading directive templates asynchronously is not supported');
	            }
	        }
	        else {
	            throw new Error("Directive '" + this.name + "' is not a component, it is missing template.");
	        }
	    };
	    UpgradeComponent.prototype.buildController = function (controllerType, $scope, $element, controllerAs) {
	        // TODO: Document that we do not pre-assign bindings on the controller instance
	        // Quoted properties below so that this code can be optimized with Closure Compiler.
	        var locals = { '$scope': $scope, '$element': $element };
	        var controller = this.$controller(controllerType, locals, null, controllerAs);
	        $element.data(controllerKey(this.directive.name), controller);
	        return controller;
	    };
	    UpgradeComponent.prototype.resolveRequire = function (directiveName, $element, require) {
	        var _this = this;
	        if (!require) {
	            return null;
	        }
	        else if (Array.isArray(require)) {
	            return require.map(function (req) { return _this.resolveRequire(directiveName, $element, req); });
	        }
	        else if (typeof require === 'object') {
	            var value_1 = {};
	            Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(directiveName, $element, require[key]); });
	            return value_1;
	        }
	        else if (typeof require === 'string') {
	            var match = require.match(REQUIRE_PREFIX_RE);
	            var inheritType = match[1] || match[3];
	            var name_1 = require.substring(match[0].length);
	            var isOptional = !!match[2];
	            var searchParents = !!inheritType;
	            var startOnParent = inheritType === '^^';
	            var ctrlKey = controllerKey(name_1);
	            if (startOnParent) {
	                $element = $element.parent();
	            }
	            var value = searchParents ? $element.inheritedData(ctrlKey) : $element.data(ctrlKey);
	            if (!value && !isOptional) {
	                throw new Error("Unable to find required '" + require + "' in upgraded directive '" + directiveName + "'.");
	            }
	            return value;
	        }
	        else {
	            throw new Error("Unrecognized require syntax on upgraded directive '" + directiveName + "': " + require);
	        }
	    };
	    UpgradeComponent.prototype.initializeOutputs = function () {
	        var _this = this;
	        // Initialize the outputs for `=` and `&` bindings
	        this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)
	            .forEach(function (propName) {
	            var outputName = _this.bindings.propertyToOutputMap[propName];
	            _this[outputName] = new _angular_core.EventEmitter();
	        });
	    };
	    UpgradeComponent.prototype.bindOutputs = function () {
	        var _this = this;
	        // Bind `&` bindings to the corresponding outputs
	        this.bindings.expressionBoundProperties.forEach(function (propName) {
	            var outputName = _this.bindings.propertyToOutputMap[propName];
	            var emitter = _this[outputName];
	            _this.bindingDestination[propName] = function (value) { return emitter.emit(value); };
	        });
	    };
	    UpgradeComponent.prototype.forwardChanges = function (changes) {
	        var _this = this;
	        // Forward input changes to `bindingDestination`
	        Object.keys(changes).forEach(function (propName) { return _this.bindingDestination[propName] = changes[propName].currentValue; });
	        if (isFunction(this.bindingDestination.$onChanges)) {
	            this.bindingDestination.$onChanges(changes);
	        }
	    };
	    UpgradeComponent.prototype.notSupported = function (feature) {
	        throw new Error("Upgraded directive '" + this.name + "' contains unsupported feature: '" + feature + "'.");
	    };
	    UpgradeComponent.prototype.compileHtml = function (html) {
	        this.element.innerHTML = html;
	        return this.$compile(this.element.childNodes);
	    };
	    return UpgradeComponent;
	}());
	function getOrCall(property) {
	    return isFunction(property) ? property() : property;
	}
	function isFunction(value) {
	    return typeof value === 'function';
	}
	// NOTE: Only works for `typeof T !== 'object'`.
	function isMap(value) {
	    return value && !Array.isArray(value) && typeof value === 'object';
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// We have to do a little dance to get the ng1 injector into the module injector.
	// We store the ng1 injector so that the provider in the module injector can access it
	// Then we "get" the ng1 injector from the module injector, which triggers the provider to read
	// the stored injector and release the reference to it.
	var tempInjectorRef;
	function setTempInjectorRef(injector) {
	    tempInjectorRef = injector;
	}
	function injectorFactory() {
	    var injector = tempInjectorRef;
	    tempInjectorRef = null; // clear the value to prevent memory leaks
	    return injector;
	}
	function rootScopeFactory(i) {
	    return i.get('$rootScope');
	}
	function compileFactory(i) {
	    return i.get('$compile');
	}
	function parseFactory(i) {
	    return i.get('$parse');
	}
	var angular1Providers = [
	    // We must use exported named functions for the ng2 factories to keep the compiler happy:
	    // > Metadata collected contains an error that will be reported at runtime:
	    // >   Function calls are not supported.
	    // >   Consider replacing the function or lambda with a reference to an exported function
	    { provide: '$injector', useFactory: injectorFactory },
	    { provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector'] },
	    { provide: '$compile', useFactory: compileFactory, deps: ['$injector'] },
	    { provide: '$parse', useFactory: parseFactory, deps: ['$injector'] }
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @whatItDoes
	 *
	 * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)
	 * library for hybrid upgrade apps that support AoT compilation*
	 *
	 * Allows AngularJS and Angular components to be used together inside a hybrid upgrade
	 * application, which supports AoT compilation.
	 *
	 * Specifically, the classes and functions in the `upgrade/static` module allow the following:
	 * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so
	 *    that it can be used in an Angular template. See {@link UpgradeComponent}.
	 * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so
	 *    that it can be used in an AngularJS template. See {@link downgradeComponent}.
	 * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS
	 *    service so that it can be injected into an Angular context. See
	 *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.
	 * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable
	 *    so that it can be injected into an AngularJS context. See {@link downgradeInjectable}.
	 * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks
	 *    coexisting in a single application. See the
	 *    {@link UpgradeModule#example example} below.
	 *
	 * ## Mental Model
	 *
	 * When reasoning about how a hybrid application works it is useful to have a mental model which
	 * describes what is happening and explains what is happening at the lowest level.
	 *
	 * 1. There are two independent frameworks running in a single application, each framework treats
	 *    the other as a black box.
	 * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework
	 *    instantiated the element is the owner. Each framework only updates/interacts with its own
	 *    DOM elements and ignores others.
	 * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of
	 *    where they are instantiated.
	 * 4. Angular components always execute inside the Angular framework codebase regardless of
	 *    where they are instantiated.
	 * 5. An AngularJS component can be "upgraded"" to an Angular component. This is achieved by
	 *    defining an Angular directive, which bootstraps the AngularJS component at its location
	 *    in the DOM. See {@link UpgradeComponent}.
	 * 6. An Angular component can be "downgraded"" to an AngularJS component. This is achieved by
	 *    defining an AngularJS directive, which bootstraps the Angular component at its location
	 *    in the DOM. See {@link downgradeComponent}.
	 * 7. Whenever an "upgraded"/"downgraded" component is instantiated the host element is owned by
	 *    the framework doing the instantiation. The other framework then instantiates and owns the
	 *    view for that component.
	 *    a. This implies that the component bindings will always follow the semantics of the
	 *       instantiation framework.
	 *    b. The DOM attributes are parsed by the framework that owns the current template. So
	 * attributes
	 *       in AngularJS templates must use kebab-case, while AngularJS templates must use camelCase.
	 *    c. However the template binding syntax will always use the Angular style, e.g. square
	 *       brackets (`[...]`) for property binding.
	 * 8. AngularJS is always bootstrapped first and owns the root component.
	 * 9. The new application is running in an Angular zone, and therefore it no longer needs calls
	 * to
	 *    `$apply()`.
	 *
	 * @howToUse
	 *
	 * `import {UpgradeModule} from '@angular/upgrade/static';`
	 *
	 * ## Example
	 * Import the {@link UpgradeModule} into your top level {@link NgModule Angular `NgModule`}.
	 *
	 * {@example upgrade/static/ts/module.ts region='ng2-module'}
	 *
	 * Then bootstrap the hybrid upgrade app's module, get hold of the {@link UpgradeModule} instance
	 * and use it to bootstrap the top level [AngularJS
	 * module](https://docs.angularjs.org/api/ng/type/angular.Module).
	 *
	 * {@example upgrade/static/ts/module.ts region='bootstrap'}
	 *
	 *
	 * ## Upgrading an AngularJS service
	 *
	 * There is no specific API for upgrading an AngularJS service. Instead you should just follow the
	 * following recipe:
	 *
	 * Let's say you have an AngularJS service:
	 *
	 * {@example upgrade/static/ts/module.ts region="ng1-title-case-service"}
	 *
	 * Then you should define an Angular provider to be included in your {@link NgModule} `providers`
	 * property.
	 *
	 * {@example upgrade/static/ts/module.ts region="upgrade-ng1-service"}
	 *
	 * Then you can use the "upgraded" AngularJS service by injecting it into an Angular component
	 * or service.
	 *
	 * {@example upgrade/static/ts/module.ts region="use-ng1-upgraded-service"}
	 *
	 * @description
	 *
	 * This class is an `NgModule`, which you import to provide AngularJS core services,
	 * and has an instance method used to bootstrap the hybrid upgrade application.
	 *
	 * ## Core AngularJS services
	 * Importing this {@link NgModule} will add providers for the core
	 * [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.
	 *
	 * ## Bootstrap
	 * The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}
	 * method, which you use to bootstrap the top level AngularJS module onto an element in the
	 * DOM for the hybrid upgrade app.
	 *
	 * It also contains properties to access the {@link UpgradeModule#injector root injector}, the
	 * bootstrap {@link NgZone} and the
	 * [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).
	 *
	 * @experimental
	 */
	var UpgradeModule = (function () {
	    function UpgradeModule(
	        /** The root {@link Injector} for the upgrade application. */
	        injector, 
	        /** The bootstrap zone for the upgrade application */
	        ngZone) {
	        this.ngZone = ngZone;
	        this.injector = new NgAdapterInjector(injector);
	    }
	    /**
	     * Bootstrap an AngularJS application from this NgModule
	     * @param element the element on which to bootstrap the AngularJS application
	     * @param [modules] the AngularJS modules to bootstrap for this application
	     * @param [config] optional extra AngularJS bootstrap configuration
	     */
	    UpgradeModule.prototype.bootstrap = function (element$$1, modules, config /*angular.IAngularBootstrapConfig*/) {
	        var _this = this;
	        if (modules === void 0) {
	            modules = [];
	        }
	        var INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';
	        // Create an ng1 module to bootstrap
	        var initModule = module$1(INIT_MODULE_NAME, [])
	            .value(INJECTOR_KEY, this.injector)
	            .config([
	            $PROVIDE, $INJECTOR,
	            function ($provide, $injector) {
	                if ($injector.has($$TESTABILITY)) {
	                    $provide.decorator($$TESTABILITY, [
	                        $DELEGATE,
	                        function (testabilityDelegate) {
	                            var originalWhenStable = testabilityDelegate.whenStable;
	                            var injector = _this.injector;
	                            // Cannot use arrow function below because we need the context
	                            var newWhenStable = function (callback) {
	                                originalWhenStable.call(testabilityDelegate, function () {
	                                    var ng2Testability = injector.get(_angular_core.Testability);
	                                    if (ng2Testability.isStable()) {
	                                        callback();
	                                    }
	                                    else {
	                                        ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));
	                                    }
	                                });
	                            };
	                            testabilityDelegate.whenStable = newWhenStable;
	                            return testabilityDelegate;
	                        }
	                    ]);
	                }
	            }
	        ])
	            .run([
	            $INJECTOR,
	            function ($injector) {
	                _this.$injector = $injector;
	                // Initialize the ng1 $injector provider
	                setTempInjectorRef($injector);
	                _this.injector.get($INJECTOR);
	                // Put the injector on the DOM, so that it can be "required"
	                element(element$$1).data(controllerKey(INJECTOR_KEY), _this.injector);
	                // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles
	                // We need to do this in the next tick so that we don't prevent the bootup
	                // stabilizing
	                setTimeout(function () {
	                    var $rootScope = $injector.get('$rootScope');
	                    var subscription = _this.ngZone.onMicrotaskEmpty.subscribe(function () { return $rootScope.$digest(); });
	                    $rootScope.$on('$destroy', function () { subscription.unsubscribe(); });
	                }, 0);
	            }
	        ]);
	        var upgradeModule = module$1(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));
	        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred
	        var windowAngular = window /** TODO #???? */['angular'];
	        windowAngular.resumeBootstrap = undefined;
	        // Bootstrap the AngularJS application inside our zone
	        this.ngZone.run(function () { bootstrap(element$$1, [upgradeModule.name], config); });
	        // Patch resumeBootstrap() to run inside the ngZone
	        if (windowAngular.resumeBootstrap) {
	            var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;
	            var ngZone_1 = this.ngZone;
	            windowAngular.resumeBootstrap = function () {
	                var _this = this;
	                var args = arguments;
	                windowAngular.resumeBootstrap = originalResumeBootstrap_1;
	                ngZone_1.run(function () { windowAngular.resumeBootstrap.apply(_this, args); });
	            };
	        }
	    };
	    return UpgradeModule;
	}());
	UpgradeModule.decorators = [
	    { type: _angular_core.NgModule, args: [{ providers: [angular1Providers] },] },
	];
	/** @nocollapse */
	UpgradeModule.ctorParameters = function () {
	    return [
	        { type: _angular_core.Injector, },
	        { type: _angular_core.NgZone, },
	    ];
	};
	var NgAdapterInjector = (function () {
	    function NgAdapterInjector(modInjector) {
	        this.modInjector = modInjector;
	    }
	    // When Angular locate a service in the component injector tree, the not found value is set to
	    // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module
	    // injector.
	    // AngularJS only supports a single tree and should always check the module injector.
	    NgAdapterInjector.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === _angular_core.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
	            return notFoundValue;
	        }
	        return this.modInjector.get(token, notFoundValue);
	    };
	    return NgAdapterInjector;
	}());

	exports.ɵe = angular1Providers;
	exports.ɵc = compileFactory;
	exports.ɵa = injectorFactory;
	exports.ɵd = parseFactory;
	exports.ɵb = rootScopeFactory;
	exports.getAngularLib = getAngularLib;
	exports.setAngularLib = setAngularLib;
	exports.downgradeComponent = downgradeComponent;
	exports.downgradeInjectable = downgradeInjectable;
	exports.VERSION = VERSION;
	exports.UpgradeComponent = UpgradeComponent;
	exports.UpgradeModule = UpgradeModule;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=upgrade-static.umd.js.map


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path="../../../../../node_modules/typescript/lib/lib.es6.d.ts" />
	var core_1 = __webpack_require__(379);
	var platform_browser_1 = __webpack_require__(414);
	var static_1 = __webpack_require__(415);
	var app_component_1 = __webpack_require__(417);
	//Cards
	var card_view_component_1 = __webpack_require__(595); //root component and secondary entry way into application
	var card_component_1 = __webpack_require__(594);
	var card_body_component_1 = __webpack_require__(591);
	var card_title_component_1 = __webpack_require__(592);
	var card_icon_component_1 = __webpack_require__(593);
	var AppModule = (function () {
	    function AppModule() {
	    }
	    AppModule.prototype.constuctor = function (upgrade) {
	        upgrade.bootstrap(document.body, ['ngApp'], { strictDi: true });
	    };
	    return AppModule;
	}());
	AppModule = __decorate([
	    core_1.NgModule({
	        imports: [
	            platform_browser_1.BrowserModule,
	            static_1.UpgradeModule
	        ],
	        declarations: [app_component_1.AppComponent, card_view_component_1.CardViewComponent, card_component_1.CardComponent, card_title_component_1.CardTitleComponent, card_icon_component_1.CardIconComponent, card_body_component_1.CardBodyComponent],
	        bootstrap: [app_component_1.AppComponent, card_component_1.CardComponent],
	        entryComponents: [
	            app_component_1.AppComponent,
	            card_component_1.CardComponent
	        ]
	    })
	], AppModule);
	exports.AppModule = AppModule;


/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(379);
	var AppComponent = (function () {
	    function AppComponent() {
	        this.title = 'Slatwall Admin';
	    }
	    return AppComponent;
	}());
	AppComponent = __decorate([
	    core_1.Component({
	        selector: 'ng-app',
	        template: '',
	    })
	], AppComponent);
	exports.AppComponent = AppComponent;


/***/ }),
/* 418 */,
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	* @license
	* Copyright Google Inc. All Rights Reserved.
	*
	* Use of this source code is governed by an MIT-style license that can be
	* found in the LICENSE file at https://angular.io/license
	*/
	(function (global, factory) {
		 true ? factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(factory());
	}(this, (function () { 'use strict';

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Zone$1 = (function (global) {
	    if (global['Zone']) {
	        throw new Error('Zone already loaded.');
	    }
	    var NO_ZONE = { name: 'NO ZONE' };
	    var notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';
	    var microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';
	    var Zone = (function () {
	        function Zone(parent, zoneSpec) {
	            this._properties = null;
	            this._parent = parent;
	            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
	            this._properties = zoneSpec && zoneSpec.properties || {};
	            this._zoneDelegate =
	                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
	        }
	        Zone.assertZonePatched = function () {
	            if (global.Promise !== ZoneAwarePromise) {
	                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +
	                    'has been overwritten.\n' +
	                    'Most likely cause is that a Promise polyfill has been loaded ' +
	                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +
	                    'If you must load one, do so before loading zone.js.)');
	            }
	        };
	        Object.defineProperty(Zone, "root", {
	            get: function () {
	                var zone = Zone.current;
	                while (zone.parent) {
	                    zone = zone.parent;
	                }
	                return zone;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(Zone, "current", {
	            get: function () {
	                return _currentZoneFrame.zone;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone, "currentTask", {
	            get: function () {
	                return _currentTask;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "parent", {
	            get: function () {
	                return this._parent;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "name", {
	            get: function () {
	                return this._name;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Zone.prototype.get = function (key) {
	            var zone = this.getZoneWith(key);
	            if (zone)
	                return zone._properties[key];
	        };
	        Zone.prototype.getZoneWith = function (key) {
	            var current = this;
	            while (current) {
	                if (current._properties.hasOwnProperty(key)) {
	                    return current;
	                }
	                current = current._parent;
	            }
	            return null;
	        };
	        Zone.prototype.fork = function (zoneSpec) {
	            if (!zoneSpec)
	                throw new Error('ZoneSpec required!');
	            return this._zoneDelegate.fork(this, zoneSpec);
	        };
	        Zone.prototype.wrap = function (callback, source) {
	            if (typeof callback !== 'function') {
	                throw new Error('Expecting function got: ' + callback);
	            }
	            var _callback = this._zoneDelegate.intercept(this, callback, source);
	            var zone = this;
	            return function () {
	                return zone.runGuarded(_callback, this, arguments, source);
	            };
	        };
	        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = undefined; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	            }
	            finally {
	                _currentZoneFrame = _currentZoneFrame.parent;
	            }
	        };
	        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                try {
	                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZoneFrame = _currentZoneFrame.parent;
	            }
	        };
	        Zone.prototype.runTask = function (task, applyThis, applyArgs) {
	            if (task.zone != this)
	                throw new Error('A task can only be run in the zone of creation! (Creation: ' +
	                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
	            var reEntryGuard = task.state != running;
	            reEntryGuard && task._transitionTo(running, scheduled);
	            task.runCount++;
	            var previousTask = _currentTask;
	            _currentTask = task;
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                if (task.type == macroTask && task.data && !task.data.isPeriodic) {
	                    task.cancelFn = null;
	                }
	                try {
	                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                // if the task's state is notScheduled or unknown, then it has already been cancelled
	                // we should not reset the state to scheduled
	                if (task.state !== notScheduled && task.state !== unknown) {
	                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {
	                        reEntryGuard && task._transitionTo(scheduled, running);
	                    }
	                    else {
	                        task.runCount = 0;
	                        this._updateTaskCount(task, -1);
	                        reEntryGuard &&
	                            task._transitionTo(notScheduled, running, notScheduled);
	                    }
	                }
	                _currentZoneFrame = _currentZoneFrame.parent;
	                _currentTask = previousTask;
	            }
	        };
	        Zone.prototype.scheduleTask = function (task) {
	            if (task.zone && task.zone !== this) {
	                // check if the task was rescheduled, the newZone
	                // should not be the children of the original zone
	                var newZone = this;
	                while (newZone) {
	                    if (newZone === task.zone) {
	                        throw Error("can not reschedule task to " + this
	                            .name + " which is descendants of the original zone " + task.zone.name);
	                    }
	                    newZone = newZone.parent;
	                }
	            }
	            task._transitionTo(scheduling, notScheduled);
	            var zoneDelegates = [];
	            task._zoneDelegates = zoneDelegates;
	            task._zone = this;
	            try {
	                task = this._zoneDelegate.scheduleTask(this, task);
	            }
	            catch (err) {
	                // should set task's state to unknown when scheduleTask throw error
	                // because the err may from reschedule, so the fromState maybe notScheduled
	                task._transitionTo(unknown, scheduling, notScheduled);
	                // TODO: @JiaLiPassion, should we check the result from handleError?
	                this._zoneDelegate.handleError(this, err);
	                throw err;
	            }
	            if (task._zoneDelegates === zoneDelegates) {
	                // we have to check because internally the delegate can reschedule the task.
	                this._updateTaskCount(task, 1);
	            }
	            if (task.state == scheduling) {
	                task._transitionTo(scheduled, scheduling);
	            }
	            return task;
	        };
	        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
	            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));
	        };
	        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
	            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
	            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.cancelTask = function (task) {
	            if (task.zone != this)
	                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +
	                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
	            task._transitionTo(canceling, scheduled, running);
	            try {
	                this._zoneDelegate.cancelTask(this, task);
	            }
	            catch (err) {
	                // if error occurs when cancelTask, transit the state to unknown
	                task._transitionTo(unknown, canceling);
	                this._zoneDelegate.handleError(this, err);
	                throw err;
	            }
	            this._updateTaskCount(task, -1);
	            task._transitionTo(notScheduled, canceling);
	            task.runCount = 0;
	            return task;
	        };
	        Zone.prototype._updateTaskCount = function (task, count) {
	            var zoneDelegates = task._zoneDelegates;
	            if (count == -1) {
	                task._zoneDelegates = null;
	            }
	            for (var i = 0; i < zoneDelegates.length; i++) {
	                zoneDelegates[i]._updateTaskCount(task.type, count);
	            }
	        };
	        return Zone;
	    }());
	    Zone.__symbol__ = __symbol__;
	    var DELEGATE_ZS = {
	        name: '',
	        onHasTask: function (delegate, _, target, hasTaskState) {
	            return delegate.hasTask(target, hasTaskState);
	        },
	        onScheduleTask: function (delegate, _, target, task) {
	            return delegate.scheduleTask(target, task);
	        },
	        onInvokeTask: function (delegate, _, target, task, applyThis, applyArgs) { return delegate.invokeTask(target, task, applyThis, applyArgs); },
	        onCancelTask: function (delegate, _, target, task) {
	            return delegate.cancelTask(target, task);
	        }
	    };
	    var ZoneDelegate = (function () {
	        function ZoneDelegate(zone, parentDelegate, zoneSpec) {
	            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };
	            this.zone = zone;
	            this._parentDelegate = parentDelegate;
	            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
	            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
	            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);
	            this._interceptZS =
	                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
	            this._interceptDlgt =
	                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
	            this._interceptCurrZone =
	                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);
	            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
	            this._invokeDlgt =
	                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
	            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);
	            this._handleErrorZS =
	                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
	            this._handleErrorDlgt =
	                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
	            this._handleErrorCurrZone =
	                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);
	            this._scheduleTaskZS =
	                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
	            this._scheduleTaskDlgt =
	                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
	            this._scheduleTaskCurrZone =
	                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);
	            this._invokeTaskZS =
	                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
	            this._invokeTaskDlgt =
	                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
	            this._invokeTaskCurrZone =
	                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);
	            this._cancelTaskZS =
	                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
	            this._cancelTaskDlgt =
	                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
	            this._cancelTaskCurrZone =
	                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);
	            this._hasTaskZS = null;
	            this._hasTaskDlgt = null;
	            this._hasTaskDlgtOwner = null;
	            this._hasTaskCurrZone = null;
	            var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
	            var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;
	            if (zoneSpecHasTask || parentHasTask) {
	                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such
	                // a case all task related interceptors must go through this ZD. We can't short circuit it.
	                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
	                this._hasTaskDlgt = parentDelegate;
	                this._hasTaskDlgtOwner = this;
	                this._hasTaskCurrZone = zone;
	                if (!zoneSpec.onScheduleTask) {
	                    this._scheduleTaskZS = DELEGATE_ZS;
	                    this._scheduleTaskDlgt = parentDelegate;
	                    this._scheduleTaskCurrZone = this.zone;
	                }
	                if (!zoneSpec.onInvokeTask) {
	                    this._invokeTaskZS = DELEGATE_ZS;
	                    this._invokeTaskDlgt = parentDelegate;
	                    this._invokeTaskCurrZone = this.zone;
	                }
	                if (!zoneSpec.onCancelTask) {
	                    this._cancelTaskZS = DELEGATE_ZS;
	                    this._cancelTaskDlgt = parentDelegate;
	                    this._cancelTaskCurrZone = this.zone;
	                }
	            }
	        }
	        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
	            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :
	                new Zone(targetZone, zoneSpec);
	        };
	        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
	            return this._interceptZS ?
	                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :
	                callback;
	        };
	        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
	            return this._invokeZS ?
	                this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :
	                callback.apply(applyThis, applyArgs);
	        };
	        ZoneDelegate.prototype.handleError = function (targetZone, error) {
	            return this._handleErrorZS ?
	                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :
	                true;
	        };
	        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
	            var returnTask = task;
	            if (this._scheduleTaskZS) {
	                if (this._hasTaskZS) {
	                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
	                }
	                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
	                if (!returnTask)
	                    returnTask = task;
	            }
	            else {
	                if (task.scheduleFn) {
	                    task.scheduleFn(task);
	                }
	                else if (task.type == microTask) {
	                    scheduleMicroTask(task);
	                }
	                else {
	                    throw new Error('Task is missing scheduleFn.');
	                }
	            }
	            return returnTask;
	        };
	        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
	            return this._invokeTaskZS ?
	                this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :
	                task.callback.apply(applyThis, applyArgs);
	        };
	        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
	            var value;
	            if (this._cancelTaskZS) {
	                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
	            }
	            else {
	                if (!task.cancelFn) {
	                    throw Error('Task is not cancelable');
	                }
	                value = task.cancelFn(task);
	            }
	            return value;
	        };
	        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
	            // hasTask should not throw error so other ZoneDelegate
	            // can still trigger hasTask callback
	            try {
	                return this._hasTaskZS &&
	                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
	            }
	            catch (err) {
	            }
	        };
	        ZoneDelegate.prototype._updateTaskCount = function (type, count) {
	            var counts = this._taskCounts;
	            var prev = counts[type];
	            var next = counts[type] = prev + count;
	            if (next < 0) {
	                throw new Error('More tasks executed then were scheduled.');
	            }
	            if (prev == 0 || next == 0) {
	                var isEmpty = {
	                    microTask: counts.microTask > 0,
	                    macroTask: counts.macroTask > 0,
	                    eventTask: counts.eventTask > 0,
	                    change: type
	                };
	                // TODO(misko): what should happen if it throws?
	                this.hasTask(this.zone, isEmpty);
	            }
	        };
	        return ZoneDelegate;
	    }());
	    var ZoneTask = (function () {
	        function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {
	            this._zone = null;
	            this.runCount = 0;
	            this._zoneDelegates = null;
	            this._state = 'notScheduled';
	            this.type = type;
	            this.source = source;
	            this.data = options;
	            this.scheduleFn = scheduleFn;
	            this.cancelFn = cancelFn;
	            this.callback = callback;
	            var self = this;
	            this.invoke = function () {
	                _numberOfNestedTaskFrames++;
	                try {
	                    self.runCount++;
	                    return self.zone.runTask(self, this, arguments);
	                }
	                finally {
	                    if (_numberOfNestedTaskFrames == 1) {
	                        drainMicroTaskQueue();
	                    }
	                    _numberOfNestedTaskFrames--;
	                }
	            };
	        }
	        Object.defineProperty(ZoneTask.prototype, "zone", {
	            get: function () {
	                return this._zone;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ZoneTask.prototype, "state", {
	            get: function () {
	                return this._state;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        ZoneTask.prototype.cancelScheduleRequest = function () {
	            this._transitionTo(notScheduled, scheduling);
	        };
	        ZoneTask.prototype._transitionTo = function (toState, fromState1, fromState2) {
	            if (this._state === fromState1 || this._state === fromState2) {
	                this._state = toState;
	                if (toState == notScheduled) {
	                    this._zoneDelegates = null;
	                }
	            }
	            else {
	                throw new Error(this.type + " '" + this.source + "': can not transition to '" + toState + "', expecting state '" + fromState1 + "'" + (fromState2 ?
	                    ' or \'' + fromState2 + '\'' :
	                    '') + ", was '" + this._state + "'.");
	            }
	        };
	        ZoneTask.prototype.toString = function () {
	            if (this.data && typeof this.data.handleId !== 'undefined') {
	                return this.data.handleId;
	            }
	            else {
	                return Object.prototype.toString.call(this);
	            }
	        };
	        // add toJSON method to prevent cyclic error when
	        // call JSON.stringify(zoneTask)
	        ZoneTask.prototype.toJSON = function () {
	            return {
	                type: this.type,
	                state: this.state,
	                source: this.source,
	                data: this.data,
	                zone: this.zone.name,
	                invoke: this.invoke,
	                scheduleFn: this.scheduleFn,
	                cancelFn: this.cancelFn,
	                runCount: this.runCount,
	                callback: this.callback
	            };
	        };
	        return ZoneTask;
	    }());
	    var ZoneFrame = (function () {
	        function ZoneFrame(parent, zone) {
	            this.parent = parent;
	            this.zone = zone;
	        }
	        return ZoneFrame;
	    }());
	    function __symbol__(name) {
	        return '__zone_symbol__' + name;
	    }
	    
	    var symbolSetTimeout = __symbol__('setTimeout');
	    var symbolPromise = __symbol__('Promise');
	    var symbolThen = __symbol__('then');
	    var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));
	    var _currentTask = null;
	    var _microTaskQueue = [];
	    var _isDrainingMicrotaskQueue = false;
	    var _uncaughtPromiseErrors = [];
	    var _numberOfNestedTaskFrames = 0;
	    function scheduleQueueDrain() {
	        // if we are not running in any task, and there has not been anything scheduled
	        // we must bootstrap the initial task creation by manually scheduling the drain
	        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
	            // We are not running in Task, so we need to kickstart the microtask queue.
	            if (global[symbolPromise]) {
	                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
	            }
	            else {
	                global[symbolSetTimeout](drainMicroTaskQueue, 0);
	            }
	        }
	    }
	    function scheduleMicroTask(task) {
	        scheduleQueueDrain();
	        _microTaskQueue.push(task);
	    }
	    function consoleError(e) {
	        if (Zone[__symbol__('ignoreConsoleErrorUncaughtError')]) {
	            return;
	        }
	        var rejection = e && e.rejection;
	        if (rejection) {
	            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
	        }
	        console.error(e);
	    }
	    function handleUnhandledRejection(e) {
	        consoleError(e);
	        try {
	            var handler = Zone[__symbol__('unhandledPromiseRejectionHandler')];
	            if (handler && typeof handler === 'function') {
	                handler.apply(this, [e]);
	            }
	        }
	        catch (err) {
	        }
	    }
	    function drainMicroTaskQueue() {
	        if (!_isDrainingMicrotaskQueue) {
	            _isDrainingMicrotaskQueue = true;
	            while (_microTaskQueue.length) {
	                var queue = _microTaskQueue;
	                _microTaskQueue = [];
	                for (var i = 0; i < queue.length; i++) {
	                    var task = queue[i];
	                    try {
	                        task.zone.runTask(task, null, null);
	                    }
	                    catch (error) {
	                        consoleError(error);
	                    }
	                }
	            }
	            while (_uncaughtPromiseErrors.length) {
	                var _loop_1 = function () {
	                    var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
	                    try {
	                        uncaughtPromiseError.zone.runGuarded(function () {
	                            throw uncaughtPromiseError;
	                        });
	                    }
	                    catch (error) {
	                        handleUnhandledRejection(error);
	                    }
	                };
	                while (_uncaughtPromiseErrors.length) {
	                    _loop_1();
	                }
	            }
	            _isDrainingMicrotaskQueue = false;
	        }
	    }
	    function isThenable(value) {
	        return value && value.then;
	    }
	    function forwardResolution(value) {
	        return value;
	    }
	    function forwardRejection(rejection) {
	        return ZoneAwarePromise.reject(rejection);
	    }
	    var symbolState = __symbol__('state');
	    var symbolValue = __symbol__('value');
	    var source = 'Promise.then';
	    var UNRESOLVED = null;
	    var RESOLVED = true;
	    var REJECTED = false;
	    var REJECTED_NO_CATCH = 0;
	    function makeResolver(promise, state) {
	        return function (v) {
	            try {
	                resolvePromise(promise, state, v);
	            }
	            catch (err) {
	                resolvePromise(promise, false, err);
	            }
	            // Do not return value or you will break the Promise spec.
	        };
	    }
	    var once = function () {
	        var wasCalled = false;
	        return function wrapper(wrappedFunction) {
	            return function () {
	                if (wasCalled) {
	                    return;
	                }
	                wasCalled = true;
	                wrappedFunction.apply(null, arguments);
	            };
	        };
	    };
	    // Promise Resolution
	    function resolvePromise(promise, state, value) {
	        var onceWrapper = once();
	        if (promise === value) {
	            throw new TypeError('Promise resolved with itself');
	        }
	        if (promise[symbolState] === UNRESOLVED) {
	            // should only get value.then once based on promise spec.
	            var then = null;
	            try {
	                if (typeof value === 'object' || typeof value === 'function') {
	                    then = value && value.then;
	                }
	            }
	            catch (err) {
	                onceWrapper(function () {
	                    resolvePromise(promise, false, err);
	                })();
	                return promise;
	            }
	            // if (value instanceof ZoneAwarePromise) {
	            if (state !== REJECTED && value instanceof ZoneAwarePromise &&
	                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&
	                value[symbolState] !== UNRESOLVED) {
	                clearRejectedNoCatch(value);
	                resolvePromise(promise, value[symbolState], value[symbolValue]);
	            }
	            else if (state !== REJECTED && typeof then === 'function') {
	                try {
	                    then.apply(value, [
	                        onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false))
	                    ]);
	                }
	                catch (err) {
	                    onceWrapper(function () {
	                        resolvePromise(promise, false, err);
	                    })();
	                }
	            }
	            else {
	                promise[symbolState] = state;
	                var queue = promise[symbolValue];
	                promise[symbolValue] = value;
	                // record task information in value when error occurs, so we can
	                // do some additional work such as render longStackTrace
	                if (state === REJECTED && value instanceof Error) {
	                    value[__symbol__('currentTask')] = Zone.currentTask;
	                }
	                for (var i = 0; i < queue.length;) {
	                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
	                }
	                if (queue.length == 0 && state == REJECTED) {
	                    promise[symbolState] = REJECTED_NO_CATCH;
	                    try {
	                        throw new Error('Uncaught (in promise): ' + value +
	                            (value && value.stack ? '\n' + value.stack : ''));
	                    }
	                    catch (err) {
	                        var error_1 = err;
	                        error_1.rejection = value;
	                        error_1.promise = promise;
	                        error_1.zone = Zone.current;
	                        error_1.task = Zone.currentTask;
	                        _uncaughtPromiseErrors.push(error_1);
	                        scheduleQueueDrain();
	                    }
	                }
	            }
	        }
	        // Resolving an already resolved promise is a noop.
	        return promise;
	    }
	    function clearRejectedNoCatch(promise) {
	        if (promise[symbolState] === REJECTED_NO_CATCH) {
	            // if the promise is rejected no catch status
	            // and queue.length > 0, means there is a error handler
	            // here to handle the rejected promise, we should trigger
	            // windows.rejectionhandled eventHandler or nodejs rejectionHandled
	            // eventHandler
	            try {
	                var handler = Zone[__symbol__('rejectionHandledHandler')];
	                if (handler && typeof handler === 'function') {
	                    handler.apply(this, [{ rejection: promise[symbolValue], promise: promise }]);
	                }
	            }
	            catch (err) {
	            }
	            promise[symbolState] = REJECTED;
	            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
	                if (promise === _uncaughtPromiseErrors[i].promise) {
	                    _uncaughtPromiseErrors.splice(i, 1);
	                }
	            }
	        }
	    }
	    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
	        clearRejectedNoCatch(promise);
	        var delegate = promise[symbolState] ?
	            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :
	            (typeof onRejected === 'function') ? onRejected : forwardRejection;
	        zone.scheduleMicroTask(source, function () {
	            try {
	                resolvePromise(chainPromise, true, zone.run(delegate, undefined, [promise[symbolValue]]));
	            }
	            catch (error) {
	                resolvePromise(chainPromise, false, error);
	            }
	        });
	    }
	    var ZoneAwarePromise = (function () {
	        function ZoneAwarePromise(executor) {
	            var promise = this;
	            if (!(promise instanceof ZoneAwarePromise)) {
	                throw new Error('Must be an instanceof Promise.');
	            }
	            promise[symbolState] = UNRESOLVED;
	            promise[symbolValue] = []; // queue;
	            try {
	                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
	            }
	            catch (error) {
	                resolvePromise(promise, false, error);
	            }
	        }
	        ZoneAwarePromise.toString = function () {
	            return 'function ZoneAwarePromise() { [native code] }';
	        };
	        ZoneAwarePromise.resolve = function (value) {
	            return resolvePromise(new this(null), RESOLVED, value);
	        };
	        ZoneAwarePromise.reject = function (error) {
	            return resolvePromise(new this(null), REJECTED, error);
	        };
	        ZoneAwarePromise.race = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                _a = [res, rej], resolve = _a[0], reject = _a[1];
	                var _a;
	            });
	            function onResolve(value) {
	                promise && (promise = null || resolve(value));
	            }
	            function onReject(error) {
	                promise && (promise = null || reject(error));
	            }
	            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
	                var value = values_1[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then(onResolve, onReject);
	            }
	            return promise;
	        };
	        ZoneAwarePromise.all = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var count = 0;
	            var resolvedValues = [];
	            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
	                var value = values_2[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then((function (index) { return function (value) {
	                    resolvedValues[index] = value;
	                    count--;
	                    if (!count) {
	                        resolve(resolvedValues);
	                    }
	                }; })(count), reject);
	                count++;
	            }
	            if (!count)
	                resolve(resolvedValues);
	            return promise;
	        };
	        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
	            var chainPromise = new this.constructor(null);
	            var zone = Zone.current;
	            if (this[symbolState] == UNRESOLVED) {
	                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
	            }
	            else {
	                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
	            }
	            return chainPromise;
	        };
	        ZoneAwarePromise.prototype.catch = function (onRejected) {
	            return this.then(null, onRejected);
	        };
	        return ZoneAwarePromise;
	    }());
	    // Protect against aggressive optimizers dropping seemingly unused properties.
	    // E.g. Closure Compiler in advanced mode.
	    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
	    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
	    ZoneAwarePromise['race'] = ZoneAwarePromise.race;
	    ZoneAwarePromise['all'] = ZoneAwarePromise.all;
	    var NativePromise = global[symbolPromise] = global['Promise'];
	    global['Promise'] = ZoneAwarePromise;
	    var symbolThenPatched = __symbol__('thenPatched');
	    function patchThen(Ctor) {
	        var proto = Ctor.prototype;
	        var originalThen = proto.then;
	        // Keep a reference to the original method.
	        proto[symbolThen] = originalThen;
	        Ctor.prototype.then = function (onResolve, onReject) {
	            var _this = this;
	            var wrapped = new ZoneAwarePromise(function (resolve, reject) {
	                originalThen.call(_this, resolve, reject);
	            });
	            return wrapped.then(onResolve, onReject);
	        };
	        Ctor[symbolThenPatched] = true;
	    }
	    function zoneify(fn) {
	        return function () {
	            var resultPromise = fn.apply(this, arguments);
	            if (resultPromise instanceof ZoneAwarePromise) {
	                return resultPromise;
	            }
	            var Ctor = resultPromise.constructor;
	            if (!Ctor[symbolThenPatched]) {
	                patchThen(Ctor);
	            }
	            return resultPromise;
	        };
	    }
	    if (NativePromise) {
	        patchThen(NativePromise);
	        var fetch_1 = global['fetch'];
	        if (typeof fetch_1 == 'function') {
	            global['fetch'] = zoneify(fetch_1);
	        }
	    }
	    // This is not part of public API, but it is usefull for tests, so we expose it.
	    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
	    /*
	     * This code patches Error so that:
	     *   - It ignores un-needed stack frames.
	     *   - It Shows the associated Zone for reach frame.
	     */
	    var FrameType;
	    (function (FrameType) {
	        /// Skip this frame when printing out stack
	        FrameType[FrameType["blackList"] = 0] = "blackList";
	        /// This frame marks zone transition
	        FrameType[FrameType["transition"] = 1] = "transition";
	    })(FrameType || (FrameType = {}));
	    var NativeError = global[__symbol__('Error')] = global.Error;
	    // Store the frames which should be removed from the stack frames
	    var blackListedStackFrames = {};
	    // We must find the frame where Error was created, otherwise we assume we don't understand stack
	    // the frame will be an array, because Error with new or without new will
	    // have different stack frames.
	    var zoneAwareErrorStartFrames = [];
	    global.Error = ZoneAwareError;
	    var stackRewrite = 'stackRewrite';
	    // some functions are not easily to be detected here,
	    // for example Timeout.ZoneTask.invoke, if we want to detect those functions
	    // by detect zone, we have to run all patched APIs, it is too risky
	    // so for those functions, just check whether the stack contains the string or not.
	    var otherZoneAwareFunctionNames = [
	        'ZoneTask.invoke', 'ZoneAware', 'getStacktraceWithUncaughtError', 'new LongStackTrace',
	        'long-stack-trace'
	    ];
	    function attachZoneAndRemoveInternalZoneFrames(error) {
	        // Save original stack trace
	        error.originalStack = error.stack;
	        // Process the stack trace and rewrite the frames.
	        if (ZoneAwareError[stackRewrite] && error.originalStack) {
	            var frames_1 = error.originalStack.split('\n');
	            var zoneFrame = _currentZoneFrame;
	            var i_1 = 0;
	            // Find the first frame
	            while (i_1 < frames_1.length &&
	                zoneAwareErrorStartFrames.filter(function (zf) { return zf.trim() === frames_1[i_1].trim(); }).length === 0) {
	                i_1++;
	            }
	            var _loop_2 = function () {
	                // trim here because blackListedStackFrames store the trimmed frames
	                var frame = frames_1[i_1].trim();
	                if (frame) {
	                    var frameType = blackListedStackFrames.hasOwnProperty(frame) && blackListedStackFrames[frame];
	                    if (frameType === FrameType.blackList) {
	                        frames_1.splice(i_1, 1);
	                        i_1--;
	                    }
	                    else if (otherZoneAwareFunctionNames
	                        .filter(function (f) { return frame.toLowerCase().indexOf(f.toLowerCase()) !== -1; })
	                        .length > 0) {
	                        frames_1.splice(i_1, 1);
	                        i_1--;
	                    }
	                    else if (frameType === FrameType.transition) {
	                        if (zoneFrame.parent) {
	                            // This is the special frame where zone changed. Print and process it accordingly
	                            zoneFrame = zoneFrame.parent;
	                        }
	                        else {
	                            zoneFrame = null;
	                        }
	                        frames_1.splice(i_1, 1);
	                        i_1--;
	                    }
	                    else {
	                        frames_1[i_1] += " [" + zoneFrame.zone.name + "]";
	                    }
	                }
	            };
	            for (; i_1 < frames_1.length && zoneFrame; i_1++) {
	                _loop_2();
	            }
	            var finalStack = frames_1.join('\n');
	            try {
	                error.stack = error.zoneAwareStack = finalStack;
	            }
	            catch (nonWritableErr) {
	                // in some browser, the error.stack is readonly such as PhantomJS
	                // so we need to store the stack frames to zoneAwareError directly
	            }
	        }
	    }
	    /**
	     * This is ZoneAwareError which processes the stack frame and cleans up extra frames as well as
	     * adds zone information to it.
	     */
	    function ZoneAwareError() {
	        // We always have to return native error otherwise the browser console will not work.
	        var error = NativeError.apply(this, arguments);
	        if (!error.stack) {
	            // in IE, the error.stack will be undefined
	            // when error was constructed, it will only
	            // be available when throw
	            try {
	                throw error;
	            }
	            catch (err) {
	                error = err;
	            }
	        }
	        // 1. attach zone information to stack frame
	        // 2. remove zone internal stack frames
	        attachZoneAndRemoveInternalZoneFrames(error);
	        return error;
	    }
	    // Copy the prototype so that instanceof operator works as expected
	    ZoneAwareError.prototype = NativeError.prototype;
	    ZoneAwareError[Zone.__symbol__('blacklistedStackFrames')] = blackListedStackFrames;
	    ZoneAwareError[stackRewrite] = false;
	    // those properties need special handling
	    var specialPropertyNames = ['stackTraceLimit', 'captureStackTrace', 'prepareStackTrace'];
	    // those properties of NativeError should be set to ZoneAwareError
	    var nativeErrorProperties = Object.keys(NativeError);
	    if (nativeErrorProperties) {
	        nativeErrorProperties.forEach(function (prop) {
	            if (specialPropertyNames.filter(function (sp) { return sp === prop; }).length === 0) {
	                Object.defineProperty(ZoneAwareError, prop, {
	                    get: function () {
	                        return NativeError[prop];
	                    },
	                    set: function (value) {
	                        NativeError[prop] = value;
	                    }
	                });
	            }
	        });
	    }
	    if (NativeError.hasOwnProperty('stackTraceLimit')) {
	        // Extend default stack limit as we will be removing few frames.
	        NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);
	        // make sure that ZoneAwareError has the same property which forwards to NativeError.
	        Object.defineProperty(ZoneAwareError, 'stackTraceLimit', {
	            get: function () {
	                return NativeError.stackTraceLimit;
	            },
	            set: function (value) {
	                return NativeError.stackTraceLimit = value;
	            }
	        });
	    }
	    if (NativeError.hasOwnProperty('captureStackTrace')) {
	        Object.defineProperty(ZoneAwareError, 'captureStackTrace', {
	            // add named function here because we need to remove this
	            // stack frame when prepareStackTrace below
	            value: function zoneCaptureStackTrace(targetObject, constructorOpt) {
	                NativeError.captureStackTrace(targetObject, constructorOpt);
	            }
	        });
	    }
	    Object.defineProperty(ZoneAwareError, 'prepareStackTrace', {
	        get: function () {
	            return NativeError.prepareStackTrace;
	        },
	        set: function (value) {
	            if (!value || typeof value !== 'function') {
	                return NativeError.prepareStackTrace = value;
	            }
	            return NativeError.prepareStackTrace = function (error, structuredStackTrace) {
	                // remove additional stack information from ZoneAwareError.captureStackTrace
	                if (structuredStackTrace) {
	                    for (var i = 0; i < structuredStackTrace.length; i++) {
	                        var st = structuredStackTrace[i];
	                        // remove the first function which name is zoneCaptureStackTrace
	                        if (st.getFunctionName() === 'zoneCaptureStackTrace') {
	                            structuredStackTrace.splice(i, 1);
	                            break;
	                        }
	                    }
	                }
	                return value.apply(this, [error, structuredStackTrace]);
	            };
	        }
	    });
	    // Now we need to populate the `blacklistedStackFrames` as well as find the
	    // run/runGuraded/runTask frames. This is done by creating a detect zone and then threading
	    // the execution through all of the above methods so that we can look at the stack trace and
	    // find the frames of interest.
	    var detectZone = Zone.current.fork({
	        name: 'detect',
	        onInvoke: function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
	            // Here only so that it will show up in the stack frame so that it can be black listed.
	            return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);
	        },
	        onHandleError: function (parentZD, current, target, error) {
	            if (error.originalStack && Error === ZoneAwareError) {
	                var frames_2 = error.originalStack.split(/\n/);
	                var runFrame = false, runGuardedFrame = false, runTaskFrame = false;
	                while (frames_2.length) {
	                    var frame = frames_2.shift();
	                    // On safari it is possible to have stack frame with no line number.
	                    // This check makes sure that we don't filter frames on name only (must have
	                    // linenumber)
	                    if (/:\d+:\d+/.test(frame)) {
	                        // Get rid of the path so that we don't accidentally find function name in path.
	                        // In chrome the separator is `(` and `@` in FF and safari
	                        // Chrome: at Zone.run (zone.js:100)
	                        // Chrome: at Zone.run (http://localhost:9876/base/build/lib/zone.js:100:24)
	                        // FireFox: Zone.prototype.run@http://localhost:9876/base/build/lib/zone.js:101:24
	                        // Safari: run@http://localhost:9876/base/build/lib/zone.js:101:24
	                        var fnName = frame.split('(')[0].split('@')[0];
	                        var frameType = FrameType.transition;
	                        if (fnName.indexOf('ZoneAwareError') !== -1) {
	                            // we found the ZoneAwareError start frame
	                            // the frame will be different when call Error(...)
	                            // and new Error(...), so we store them both
	                            zoneAwareErrorStartFrames.push(frame);
	                        }
	                        if (fnName.indexOf('runGuarded') !== -1) {
	                            runGuardedFrame = true;
	                        }
	                        else if (fnName.indexOf('runTask') !== -1) {
	                            runTaskFrame = true;
	                        }
	                        else if (fnName.indexOf('run') !== -1) {
	                            runFrame = true;
	                        }
	                        else {
	                            frameType = FrameType.blackList;
	                        }
	                        blackListedStackFrames[frame.trim()] = frameType;
	                        // Once we find all of the frames we can stop looking.
	                        if (runFrame && runGuardedFrame && runTaskFrame) {
	                            ZoneAwareError[stackRewrite] = true;
	                            break;
	                        }
	                    }
	                }
	            }
	            return false;
	        }
	    });
	    // carefully constructor a stack frame which contains all of the frames of interest which
	    // need to be detected and blacklisted.
	    // use this method to handle
	    // 1. IE issue, the error.stack can only be not undefined after throw
	    // 2. handle Error(...) without new options
	    var throwError = function (message, withNew) {
	        try {
	            if (withNew) {
	                throw new Error(message);
	            }
	            else {
	                throw Error(message);
	            }
	        }
	        catch (err) {
	            return err;
	        }
	    };
	    var nativeStackTraceLimit = NativeError.stackTraceLimit;
	    // in some system/browser, some additional stack frames
	    // will be generated (such as inline function)
	    // so the the stack frame to check ZoneAwareError Start
	    // maybe ignored because the frame's number will exceed
	    // stackTraceLimit, so we just set stackTraceLimit to 100
	    // and reset after all detect work is done.
	    NativeError.stackTraceLimit = 100;
	    var detectRunFn = function () {
	        detectZone.run(function () {
	            detectZone.runGuarded(function () {
	                throw throwError('blacklistStackFrames', true);
	            });
	        });
	    };
	    var detectRunWithoutNewFn = function () {
	        detectZone.run(function () {
	            detectZone.runGuarded(function () {
	                throw throwError('blacklistStackFrames');
	            });
	        });
	    };
	    // Cause the error to extract the stack frames.
	    detectZone.runTask(detectZone.scheduleMacroTask('detect', detectRunFn, null, function () { return null; }, null));
	    detectZone.runTask(detectZone.scheduleMacroTask('detect', detectRunWithoutNewFn, null, function () { return null; }, null));
	    function handleDetectError(error) {
	        var frames = error.stack ? error.stack.split(/\n/) : [];
	        while (frames.length) {
	            var frame = frames.shift();
	            // On safari it is possible to have stack frame with no line number.
	            // This check makes sure that we don't filter frames on name only (must have
	            // linenumber)
	            var trimmedFrame = frame.trim().split('[')[0].trim();
	            if (/:\d+:\d+/.test(trimmedFrame) && !blackListedStackFrames.hasOwnProperty(trimmedFrame)) {
	                blackListedStackFrames[trimmedFrame] = FrameType.blackList;
	            }
	            // when we found runGuarded or runTask, we should stop
	            // otherwise we will store some stack frames like
	            // module.load, require and something like that
	            var fnName = frame.split('(')[0].split('@')[0];
	            if (fnName.indexOf('runGuarded') !== -1) {
	                break;
	            }
	            else if (fnName.indexOf('runTask') !== -1) {
	                break;
	            }
	        }
	    }
	    var detectEmptyZone = Zone.root.fork({
	        name: 'detectEmptyZone',
	        onHandleError: function (parentDelegate, currentZone, targetZone, error) {
	            parentDelegate.handleError(targetZone, error);
	            handleDetectError(error);
	            return false;
	        }
	    });
	    var detectZoneWithCallbacks = Zone.root.fork({
	        name: 'detectCallbackZone',
	        onFork: function (parentDelegate, currentZone, targetZone, zoneSpec) {
	            // we need to generate Error with or without new
	            handleDetectError(throwError('onFork'));
	            handleDetectError(throwError('onFork', false));
	            return parentDelegate.fork(targetZone, zoneSpec);
	        },
	        onIntercept: function (parentDelegate, currentZone, targetZone, delegate, source) {
	            handleDetectError(throwError('onIntercept'));
	            handleDetectError(throwError('onIntercept', false));
	            return parentDelegate.intercept(targetZone, delegate, source);
	        },
	        onInvoke: function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
	            handleDetectError(throwError('onInvoke'));
	            handleDetectError(throwError('onInvoke', false));
	            return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);
	        },
	        onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {
	            handleDetectError(throwError('onScheduleTask'));
	            handleDetectError(throwError('onScheduleTask', false));
	            return parentZoneDelegate.scheduleTask(targetZone, task);
	        },
	        onInvokeTask: function (parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs) {
	            handleDetectError(throwError('onInvokeTask'));
	            handleDetectError(throwError('onInvokeTask', false));
	            return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);
	        },
	        onCancelTask: function (parentZoneDelegate, currentZone, targetZone, task) {
	            handleDetectError(throwError('onCancelTask'));
	            handleDetectError(throwError('onCancelTask', false));
	            return parentZoneDelegate.cancelTask(targetZone, task);
	        },
	        onHasTask: function (delegate, current, target, hasTaskState) {
	            handleDetectError(throwError('onHasTask'));
	            handleDetectError(throwError('onHasTask', false));
	            return delegate.hasTask(target, hasTaskState);
	        },
	        onHandleError: function (parentDelegate, currentZone, targetZone, error) {
	            parentDelegate.handleError(targetZone, error);
	            handleDetectError(error);
	            return false;
	        }
	    });
	    var detectFn = function () {
	        throw throwError('zoneAwareFrames');
	    };
	    var detectWithoutNewFn = function () {
	        throw throwError('zoneAwareFrames', false);
	    };
	    var detectPromiseFn = function () {
	        new Promise(function (resolve, reject) {
	            reject(throwError('zoneAwareFrames'));
	        });
	    };
	    var detectPromiseWithoutNewFn = function () {
	        new Promise(function (resolve, reject) {
	            reject(throwError('zoneAwareFrames', false));
	        });
	    };
	    var detectPromiseCaughtFn = function () {
	        var p = new Promise(function (resolve, reject) {
	            reject(throwError('zoneAwareFrames'));
	        });
	        p.catch(function (err) {
	            throw err;
	        });
	    };
	    var detectPromiseCaughtWithoutNewFn = function () {
	        var p = new Promise(function (resolve, reject) {
	            reject(throwError('zoneAwareFrames', false));
	        });
	        p.catch(function (err) {
	            throw err;
	        });
	    };
	    // Cause the error to extract the stack frames.
	    detectEmptyZone.runTask(detectEmptyZone.scheduleEventTask('detect', detectFn, null, function () { return null; }, null));
	    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleEventTask('detect', detectFn, null, function () { return null; }, null));
	    detectEmptyZone.runTask(detectEmptyZone.scheduleMacroTask('detect', detectFn, null, function () { return null; }, null));
	    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMacroTask('detect', detectFn, null, function () { return null; }, null));
	    detectEmptyZone.runTask(detectEmptyZone.scheduleMicroTask('detect', detectFn, null, function () { return null; }));
	    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMicroTask('detect', detectFn, null, function () { return null; }));
	    detectEmptyZone.runGuarded(function () {
	        detectEmptyZone.run(detectFn);
	    });
	    detectZoneWithCallbacks.runGuarded(function () {
	        detectEmptyZone.run(detectFn);
	    });
	    detectEmptyZone.runTask(detectEmptyZone.scheduleEventTask('detect', detectWithoutNewFn, null, function () { return null; }, null));
	    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleEventTask('detect', detectWithoutNewFn, null, function () { return null; }, null));
	    detectEmptyZone.runTask(detectEmptyZone.scheduleMacroTask('detect', detectWithoutNewFn, null, function () { return null; }, null));
	    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMacroTask('detect', detectWithoutNewFn, null, function () { return null; }, null));
	    detectEmptyZone.runTask(detectEmptyZone.scheduleMicroTask('detect', detectWithoutNewFn, null, function () { return null; }));
	    detectZoneWithCallbacks.runTask(detectZoneWithCallbacks.scheduleMicroTask('detect', detectWithoutNewFn, null, function () { return null; }));
	    detectEmptyZone.runGuarded(function () {
	        detectEmptyZone.run(detectWithoutNewFn);
	    });
	    detectZoneWithCallbacks.runGuarded(function () {
	        detectEmptyZone.run(detectWithoutNewFn);
	    });
	    detectEmptyZone.runGuarded(detectPromiseFn);
	    detectZoneWithCallbacks.runGuarded(detectPromiseFn);
	    detectEmptyZone.runGuarded(detectPromiseWithoutNewFn);
	    detectZoneWithCallbacks.runGuarded(detectPromiseWithoutNewFn);
	    detectEmptyZone.runGuarded(detectPromiseCaughtFn);
	    detectZoneWithCallbacks.runGuarded(detectPromiseCaughtFn);
	    detectEmptyZone.runGuarded(detectPromiseCaughtWithoutNewFn);
	    detectZoneWithCallbacks.runGuarded(detectPromiseCaughtWithoutNewFn);
	    NativeError.stackTraceLimit = nativeStackTraceLimit;
	    return global['Zone'] = Zone;
	})(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Suppress closure compiler errors about unknown 'Zone' variable
	 * @fileoverview
	 * @suppress {undefinedVars,globalThis}
	 */
	var zoneSymbol = function (n) { return "__zone_symbol__" + n; };
	var _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;
	function bindArguments(args, source) {
	    for (var i = args.length - 1; i >= 0; i--) {
	        if (typeof args[i] === 'function') {
	            args[i] = Zone.current.wrap(args[i], source + '_' + i);
	        }
	    }
	    return args;
	}
	function patchPrototype(prototype, fnNames) {
	    var source = prototype.constructor['name'];
	    var _loop_1 = function (i) {
	        var name_1 = fnNames[i];
	        var delegate = prototype[name_1];
	        if (delegate) {
	            prototype[name_1] = (function (delegate) {
	                return function () {
	                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));
	                };
	            })(delegate);
	        }
	    };
	    for (var i = 0; i < fnNames.length; i++) {
	        _loop_1(i);
	    }
	}
	var isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);
	var isNode = (!('nw' in _global$1) && typeof process !== 'undefined' &&
	    {}.toString.call(process) === '[object process]');
	var isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);
	// we are in electron of nw, so we are both browser and nodejs
	var isMix = typeof process !== 'undefined' &&
	    {}.toString.call(process) === '[object process]' && !isWebWorker &&
	    !!(typeof window !== 'undefined' && window['HTMLElement']);
	function patchProperty(obj, prop) {
	    var desc = Object.getOwnPropertyDescriptor(obj, prop) || { enumerable: true, configurable: true };
	    var originalDesc = Object.getOwnPropertyDescriptor(obj, 'original' + prop);
	    if (!originalDesc && desc.get) {
	        Object.defineProperty(obj, 'original' + prop, { enumerable: false, configurable: true, get: desc.get });
	    }
	    // A property descriptor cannot have getter/setter and be writable
	    // deleting the writable and value properties avoids this error:
	    //
	    // TypeError: property descriptors must not specify a value or be writable when a
	    // getter or setter has been specified
	    delete desc.writable;
	    delete desc.value;
	    // substr(2) cuz 'onclick' -> 'click', etc
	    var eventName = prop.substr(2);
	    var _prop = zoneSymbol('_' + prop);
	    desc.set = function (fn) {
	        if (this[_prop]) {
	            this.removeEventListener(eventName, this[_prop]);
	        }
	        if (typeof fn === 'function') {
	            var wrapFn = function (event) {
	                var result;
	                result = fn.apply(this, arguments);
	                if (result != undefined && !result)
	                    event.preventDefault();
	            };
	            this[_prop] = wrapFn;
	            this.addEventListener(eventName, wrapFn, false);
	        }
	        else {
	            this[_prop] = null;
	        }
	    };
	    // The getter would return undefined for unassigned properties but the default value of an
	    // unassigned property is null
	    desc.get = function () {
	        var r = this[_prop] || null;
	        // result will be null when use inline event attribute,
	        // such as <button onclick="func();">OK</button>
	        // because the onclick function is internal raw uncompiled handler
	        // the onclick will be evaluated when first time event was triggered or
	        // the property is accessed, https://github.com/angular/zone.js/issues/525
	        // so we should use original native get to retrieve the handler
	        if (r === null) {
	            if (originalDesc && originalDesc.get) {
	                r = originalDesc.get.apply(this, arguments);
	                if (r) {
	                    desc.set.apply(this, [r]);
	                    if (typeof this['removeAttribute'] === 'function') {
	                        this.removeAttribute(prop);
	                    }
	                }
	            }
	        }
	        return this[_prop] || null;
	    };
	    Object.defineProperty(obj, prop, desc);
	}

	function patchOnProperties(obj, properties) {
	    var onProperties = [];
	    for (var prop in obj) {
	        if (prop.substr(0, 2) == 'on') {
	            onProperties.push(prop);
	        }
	    }
	    for (var j = 0; j < onProperties.length; j++) {
	        patchProperty(obj, onProperties[j]);
	    }
	    if (properties) {
	        for (var i = 0; i < properties.length; i++) {
	            patchProperty(obj, 'on' + properties[i]);
	        }
	    }
	}

	var EVENT_TASKS = zoneSymbol('eventTasks');
	// For EventTarget
	var ADD_EVENT_LISTENER = 'addEventListener';
	var REMOVE_EVENT_LISTENER = 'removeEventListener';
	function findExistingRegisteredTask(target, handler, name, capture, remove) {
	    var eventTasks = target[EVENT_TASKS];
	    if (eventTasks) {
	        for (var i = 0; i < eventTasks.length; i++) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            var listener = data.handler;
	            if ((data.handler === handler || listener.listener === handler) &&
	                data.useCapturing === capture && data.eventName === name) {
	                if (remove) {
	                    eventTasks.splice(i, 1);
	                }
	                return eventTask;
	            }
	        }
	    }
	    return null;
	}
	function attachRegisteredEvent(target, eventTask, isPrepend) {
	    var eventTasks = target[EVENT_TASKS];
	    if (!eventTasks) {
	        eventTasks = target[EVENT_TASKS] = [];
	    }
	    if (isPrepend) {
	        eventTasks.unshift(eventTask);
	    }
	    else {
	        eventTasks.push(eventTask);
	    }
	}
	var defaultListenerMetaCreator = function (self, args) {
	    return {
	        useCapturing: args[2],
	        eventName: args[0],
	        handler: args[1],
	        target: self || _global$1,
	        name: args[0],
	        invokeAddFunc: function (addFnSymbol, delegate) {
	            if (delegate && delegate.invoke) {
	                return this.target[addFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
	            }
	            else {
	                return this.target[addFnSymbol](this.eventName, delegate, this.useCapturing);
	            }
	        },
	        invokeRemoveFunc: function (removeFnSymbol, delegate) {
	            if (delegate && delegate.invoke) {
	                return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
	            }
	            else {
	                return this.target[removeFnSymbol](this.eventName, delegate, this.useCapturing);
	            }
	        }
	    };
	};
	function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    if (allowDuplicates === void 0) { allowDuplicates = false; }
	    if (isPrepend === void 0) { isPrepend = false; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    var addFnSymbol = zoneSymbol(addFnName);
	    var removeFnSymbol = zoneSymbol(removeFnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    function scheduleEventListener(eventTask) {
	        var meta = eventTask.data;
	        attachRegisteredEvent(meta.target, eventTask, isPrepend);
	        return meta.invokeAddFunc(addFnSymbol, eventTask);
	    }
	    function cancelEventListener(eventTask) {
	        var meta = eventTask.data;
	        findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
	        return meta.invokeRemoveFunc(removeFnSymbol, eventTask);
	    }
	    return function zoneAwareAddListener(self, args) {
	        var data = metaCreator(self, args);
	        data.useCapturing = data.useCapturing || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var delegate = null;
	        if (typeof data.handler == 'function') {
	            delegate = data.handler;
	        }
	        else if (data.handler && data.handler.handleEvent) {
	            delegate = function (event) { return data.handler.handleEvent(event); };
	        }
	        var validZoneHandler = false;
	        try {
	            // In cross site contexts (such as WebDriver frameworks like Selenium),
	            // accessing the handler object here will cause an exception to be thrown which
	            // will fail tests prematurely.
	            validZoneHandler = data.handler && data.handler.toString() === '[object FunctionWrapper]';
	        }
	        catch (error) {
	            // Returning nothing here is fine, because objects in a cross-site context are unusable
	            return;
	        }
	        // Ignore special listeners of IE11 & Edge dev tools, see
	        // https://github.com/angular/zone.js/issues/150
	        if (!delegate || validZoneHandler) {
	            return data.invokeAddFunc(addFnSymbol, data.handler);
	        }
	        if (!allowDuplicates) {
	            var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, false);
	            if (eventTask) {
	                // we already registered, so this will have noop.
	                return data.invokeAddFunc(addFnSymbol, eventTask);
	            }
	        }
	        var zone = Zone.current;
	        var source = data.target.constructor['name'] + '.' + addFnName + ':' + data.eventName;
	        zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
	    };
	}
	function makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    var symbol = zoneSymbol(fnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    return function zoneAwareRemoveListener(self, args) {
	        var data = metaCreator(self, args);
	        data.useCapturing = data.useCapturing || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, true);
	        if (eventTask) {
	            eventTask.zone.cancelTask(eventTask);
	        }
	        else {
	            data.invokeRemoveFunc(symbol, data.handler);
	        }
	    };
	}


	var zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);
	var zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);
	function patchEventTargetMethods(obj, addFnName, removeFnName, metaCreator) {
	    if (addFnName === void 0) { addFnName = ADD_EVENT_LISTENER; }
	    if (removeFnName === void 0) { removeFnName = REMOVE_EVENT_LISTENER; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    if (obj && obj[addFnName]) {
	        patchMethod(obj, addFnName, function () { return makeZoneAwareAddListener(addFnName, removeFnName, true, false, false, metaCreator); });
	        patchMethod(obj, removeFnName, function () { return makeZoneAwareRemoveListener(removeFnName, true, metaCreator); });
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	var originalInstanceKey = zoneSymbol('originalInstance');
	// wrap some native API on `window`
	function patchClass(className) {
	    var OriginalClass = _global$1[className];
	    if (!OriginalClass)
	        return;
	    _global$1[className] = function () {
	        var a = bindArguments(arguments, className);
	        switch (a.length) {
	            case 0:
	                this[originalInstanceKey] = new OriginalClass();
	                break;
	            case 1:
	                this[originalInstanceKey] = new OriginalClass(a[0]);
	                break;
	            case 2:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
	                break;
	            case 3:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
	                break;
	            case 4:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
	                break;
	            default:
	                throw new Error('Arg list too long.');
	        }
	    };
	    var instance = new OriginalClass(function () { });
	    var prop;
	    for (prop in instance) {
	        // https://bugs.webkit.org/show_bug.cgi?id=44721
	        if (className === 'XMLHttpRequest' && prop === 'responseBlob')
	            continue;
	        (function (prop) {
	            if (typeof instance[prop] === 'function') {
	                _global$1[className].prototype[prop] = function () {
	                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	                };
	            }
	            else {
	                Object.defineProperty(_global$1[className].prototype, prop, {
	                    set: function (fn) {
	                        if (typeof fn === 'function') {
	                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);
	                        }
	                        else {
	                            this[originalInstanceKey][prop] = fn;
	                        }
	                    },
	                    get: function () {
	                        return this[originalInstanceKey][prop];
	                    }
	                });
	            }
	        }(prop));
	    }
	    for (prop in OriginalClass) {
	        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
	            _global$1[className][prop] = OriginalClass[prop];
	        }
	    }
	}

	function createNamedFn(name, delegate) {
	    try {
	        return (Function('f', "return function " + name + "(){return f(this, arguments)}"))(delegate);
	    }
	    catch (error) {
	        // if we fail, we must be CSP, just return delegate.
	        return function () {
	            return delegate(this, arguments);
	        };
	    }
	}
	function patchMethod(target, name, patchFn) {
	    var proto = target;
	    while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
	        proto = Object.getPrototypeOf(proto);
	    }
	    if (!proto && target[name]) {
	        // somehow we did not find it, but we can see it. This happens on IE for Window properties.
	        proto = target;
	    }
	    var delegateName = zoneSymbol(name);
	    var delegate;
	    if (proto && !(delegate = proto[delegateName])) {
	        delegate = proto[delegateName] = proto[name];
	        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
	    }
	    return delegate;
	}
	// TODO: @JiaLiPassion, support cancel task later if necessary


	function findEventTask(target, evtName) {
	    var eventTasks = target[zoneSymbol('eventTasks')];
	    var result = [];
	    if (eventTasks) {
	        for (var i = 0; i < eventTasks.length; i++) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            var eventName = data && data.eventName;
	            if (eventName === evtName) {
	                result.push(eventTask);
	            }
	        }
	    }
	    return result;
	}
	Zone[zoneSymbol('patchEventTargetMethods')] = patchEventTargetMethods;
	Zone[zoneSymbol('patchOnProperties')] = patchOnProperties;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function patchTimer(window, setName, cancelName, nameSuffix) {
	    var setNative = null;
	    var clearNative = null;
	    setName += nameSuffix;
	    cancelName += nameSuffix;
	    var tasksByHandleId = {};
	    function scheduleTask(task) {
	        var data = task.data;
	        function timer() {
	            try {
	                task.invoke.apply(this, arguments);
	            }
	            finally {
	                delete tasksByHandleId[data.handleId];
	            }
	        }
	        
	        data.args[0] = timer;
	        data.handleId = setNative.apply(window, data.args);
	        tasksByHandleId[data.handleId] = task;
	        return task;
	    }
	    function clearTask(task) {
	        delete tasksByHandleId[task.data.handleId];
	        return clearNative(task.data.handleId);
	    }
	    setNative =
	        patchMethod(window, setName, function (delegate) { return function (self, args) {
	            if (typeof args[0] === 'function') {
	                var zone = Zone.current;
	                var options = {
	                    handleId: null,
	                    isPeriodic: nameSuffix === 'Interval',
	                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,
	                    args: args
	                };
	                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
	                if (!task) {
	                    return task;
	                }
	                // Node.js must additionally support the ref and unref functions.
	                var handle = task.data.handleId;
	                // check whether handle is null, because some polyfill or browser
	                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame
	                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&
	                    typeof handle.unref === 'function') {
	                    task.ref = handle.ref.bind(handle);
	                    task.unref = handle.unref.bind(handle);
	                }
	                return task;
	            }
	            else {
	                // cause an error by calling it directly.
	                return delegate.apply(window, args);
	            }
	        }; });
	    clearNative =
	        patchMethod(window, cancelName, function (delegate) { return function (self, args) {
	            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];
	            if (task && typeof task.type === 'string') {
	                if (task.state !== 'notScheduled' &&
	                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
	                    // Do not cancel already canceled functions
	                    task.zone.cancelTask(task);
	                }
	            }
	            else {
	                // cause an error by calling it directly.
	                delegate.apply(window, args);
	            }
	        }; });
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/*
	 * This is necessary for Chrome and Chrome mobile, to enable
	 * things like redefining `createdCallback` on an element.
	 */
	var _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;
	var _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] =
	    Object.getOwnPropertyDescriptor;
	var _create = Object.create;
	var unconfigurablesKey = zoneSymbol('unconfigurables');
	function propertyPatch() {
	    Object.defineProperty = function (obj, prop, desc) {
	        if (isUnconfigurable(obj, prop)) {
	            throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
	        }
	        var originalConfigurableFlag = desc.configurable;
	        if (prop !== 'prototype') {
	            desc = rewriteDescriptor(obj, prop, desc);
	        }
	        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	    };
	    Object.defineProperties = function (obj, props) {
	        Object.keys(props).forEach(function (prop) {
	            Object.defineProperty(obj, prop, props[prop]);
	        });
	        return obj;
	    };
	    Object.create = function (obj, proto) {
	        if (typeof proto === 'object' && !Object.isFrozen(proto)) {
	            Object.keys(proto).forEach(function (prop) {
	                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
	            });
	        }
	        return _create(obj, proto);
	    };
	    Object.getOwnPropertyDescriptor = function (obj, prop) {
	        var desc = _getOwnPropertyDescriptor(obj, prop);
	        if (isUnconfigurable(obj, prop)) {
	            desc.configurable = false;
	        }
	        return desc;
	    };
	}

	function _redefineProperty(obj, prop, desc) {
	    var originalConfigurableFlag = desc.configurable;
	    desc = rewriteDescriptor(obj, prop, desc);
	    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	}

	function isUnconfigurable(obj, prop) {
	    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
	}
	function rewriteDescriptor(obj, prop, desc) {
	    desc.configurable = true;
	    if (!desc.configurable) {
	        if (!obj[unconfigurablesKey]) {
	            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
	        }
	        obj[unconfigurablesKey][prop] = true;
	    }
	    return desc;
	}
	function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
	    try {
	        return _defineProperty(obj, prop, desc);
	    }
	    catch (error) {
	        if (desc.configurable) {
	            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's
	            // retry with the original flag value
	            if (typeof originalConfigurableFlag == 'undefined') {
	                delete desc.configurable;
	            }
	            else {
	                desc.configurable = originalConfigurableFlag;
	            }
	            try {
	                return _defineProperty(obj, prop, desc);
	            }
	            catch (error) {
	                var descJson = null;
	                try {
	                    descJson = JSON.stringify(desc);
	                }
	                catch (error) {
	                    descJson = descJson.toString();
	                }
	                console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + error);
	            }
	        }
	        else {
	            throw error;
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
	var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'
	    .split(',');
	var EVENT_TARGET = 'EventTarget';
	function eventTargetPatch(_global) {
	    var apis = [];
	    var isWtf = _global['wtf'];
	    if (isWtf) {
	        // Workaround for: https://github.com/google/tracing-framework/issues/555
	        apis = WTF_ISSUE_555.split(',').map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);
	    }
	    else if (_global[EVENT_TARGET]) {
	        apis.push(EVENT_TARGET);
	    }
	    else {
	        // Note: EventTarget is not available in all browsers,
	        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
	        apis = NO_EVENT_TARGET;
	    }
	    for (var i = 0; i < apis.length; i++) {
	        var type = _global[apis[i]];
	        patchEventTargetMethods(type && type.prototype);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// we have to patch the instance since the proto is non-configurable
	function apply(_global) {
	    var WS = _global.WebSocket;
	    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
	    // On older Chrome, no need since EventTarget was already patched
	    if (!_global.EventTarget) {
	        patchEventTargetMethods(WS.prototype);
	    }
	    _global.WebSocket = function (a, b) {
	        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
	        var proxySocket;
	        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
	        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
	        if (onmessageDesc && onmessageDesc.configurable === false) {
	            proxySocket = Object.create(socket);
	            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {
	                proxySocket[propName] = function () {
	                    return socket[propName].apply(socket, arguments);
	                };
	            });
	        }
	        else {
	            // we can patch the real socket
	            proxySocket = socket;
	        }
	        patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);
	        return proxySocket;
	    };
	    for (var prop in WS) {
	        _global.WebSocket[prop] = WS[prop];
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'
	    .split(' ');
	function propertyDescriptorPatch(_global) {
	    if (isNode && !isMix) {
	        return;
	    }
	    var supportsWebSocket = typeof WebSocket !== 'undefined';
	    if (canPatchViaPropertyDescriptor()) {
	        // for browsers that we can patch the descriptor:  Chrome & Firefox
	        if (isBrowser) {
	            patchOnProperties(HTMLElement.prototype, eventNames);
	        }
	        patchOnProperties(XMLHttpRequest.prototype, null);
	        if (typeof IDBIndex !== 'undefined') {
	            patchOnProperties(IDBIndex.prototype, null);
	            patchOnProperties(IDBRequest.prototype, null);
	            patchOnProperties(IDBOpenDBRequest.prototype, null);
	            patchOnProperties(IDBDatabase.prototype, null);
	            patchOnProperties(IDBTransaction.prototype, null);
	            patchOnProperties(IDBCursor.prototype, null);
	        }
	        if (supportsWebSocket) {
	            patchOnProperties(WebSocket.prototype, null);
	        }
	    }
	    else {
	        // Safari, Android browsers (Jelly Bean)
	        patchViaCapturingAllTheEvents();
	        patchClass('XMLHttpRequest');
	        if (supportsWebSocket) {
	            apply(_global);
	        }
	    }
	}
	function canPatchViaPropertyDescriptor() {
	    if ((isBrowser || isMix) && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&
	        typeof Element !== 'undefined') {
	        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
	        // IDL interface attributes are not configurable
	        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
	        if (desc && !desc.configurable)
	            return false;
	    }
	    var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, 'onreadystatechange');
	    // add enumerable and configurable here because in opera
	    // by default XMLHttpRequest.prototype.onreadystatechange is undefined
	    // without adding enumerable and configurable will cause onreadystatechange
	    // non-configurable
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {
	        enumerable: true,
	        configurable: true,
	        get: function () {
	            return true;
	        }
	    });
	    var req = new XMLHttpRequest();
	    var result = !!req.onreadystatechange;
	    // restore original desc
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', xhrDesc || {});
	    return result;
	}

	var unboundKey = zoneSymbol('unbound');
	// Whenever any eventListener fires, we check the eventListener target and all parents
	// for `onwhatever` properties and replace them with zone-bound functions
	// - Chrome (for now)
	function patchViaCapturingAllTheEvents() {
	    var _loop_1 = function (i) {
	        var property = eventNames[i];
	        var onproperty = 'on' + property;
	        self.addEventListener(property, function (event) {
	            var elt = event.target, bound, source;
	            if (elt) {
	                source = elt.constructor['name'] + '.' + onproperty;
	            }
	            else {
	                source = 'unknown.' + onproperty;
	            }
	            while (elt) {
	                if (elt[onproperty] && !elt[onproperty][unboundKey]) {
	                    bound = Zone.current.wrap(elt[onproperty], source);
	                    bound[unboundKey] = elt[onproperty];
	                    elt[onproperty] = bound;
	                }
	                elt = elt.parentElement;
	            }
	        }, true);
	    };
	    for (var i = 0; i < eventNames.length; i++) {
	        _loop_1(i);
	    }
	    
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function registerElementPatch(_global) {
	    if ((!isBrowser && !isMix) || !('registerElement' in _global.document)) {
	        return;
	    }
	    var _registerElement = document.registerElement;
	    var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
	    document.registerElement = function (name, opts) {
	        if (opts && opts.prototype) {
	            callbacks.forEach(function (callback) {
	                var source = 'Document.registerElement::' + callback;
	                if (opts.prototype.hasOwnProperty(callback)) {
	                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
	                    if (descriptor && descriptor.value) {
	                        descriptor.value = Zone.current.wrap(descriptor.value, source);
	                        _redefineProperty(opts.prototype, callback, descriptor);
	                    }
	                    else {
	                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                    }
	                }
	                else if (opts.prototype[callback]) {
	                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                }
	            });
	        }
	        return _registerElement.apply(document, [name, opts]);
	    };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var set = 'set';
	var clear = 'clear';
	var blockingMethods = ['alert', 'prompt', 'confirm'];
	var _global = typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global;
	patchTimer(_global, set, clear, 'Timeout');
	patchTimer(_global, set, clear, 'Interval');
	patchTimer(_global, set, clear, 'Immediate');
	patchTimer(_global, 'request', 'cancel', 'AnimationFrame');
	patchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');
	patchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
	for (var i = 0; i < blockingMethods.length; i++) {
	    var name_1 = blockingMethods[i];
	    patchMethod(_global, name_1, function (delegate, symbol, name) {
	        return function (s, args) {
	            return Zone.current.run(delegate, _global, args, name);
	        };
	    });
	}
	eventTargetPatch(_global);
	// patch XMLHttpRequestEventTarget's addEventListener/removeEventListener
	var XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];
	if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {
	    patchEventTargetMethods(XMLHttpRequestEventTarget.prototype);
	}
	propertyDescriptorPatch(_global);
	patchClass('MutationObserver');
	patchClass('WebKitMutationObserver');
	patchClass('FileReader');
	propertyPatch();
	registerElementPatch(_global);
	// Treat XMLHTTPRequest as a macrotask.
	patchXHR(_global);
	var XHR_TASK = zoneSymbol('xhrTask');
	var XHR_SYNC = zoneSymbol('xhrSync');
	var XHR_LISTENER = zoneSymbol('xhrListener');
	var XHR_SCHEDULED = zoneSymbol('xhrScheduled');
	function patchXHR(window) {
	    function findPendingTask(target) {
	        var pendingTask = target[XHR_TASK];
	        return pendingTask;
	    }
	    function scheduleTask(task) {
	        XMLHttpRequest[XHR_SCHEDULED] = false;
	        var data = task.data;
	        // remove existing event listener
	        var listener = data.target[XHR_LISTENER];
	        if (listener) {
	            data.target.removeEventListener('readystatechange', listener);
	        }
	        var newListener = data.target[XHR_LISTENER] = function () {
	            if (data.target.readyState === data.target.DONE) {
	                // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with
	                // readyState=4 multiple times, so we need to check task state here
	                if (!data.aborted && XMLHttpRequest[XHR_SCHEDULED] && task.state === 'scheduled') {
	                    task.invoke();
	                }
	            }
	        };
	        data.target.addEventListener('readystatechange', newListener);
	        var storedTask = data.target[XHR_TASK];
	        if (!storedTask) {
	            data.target[XHR_TASK] = task;
	        }
	        sendNative.apply(data.target, data.args);
	        XMLHttpRequest[XHR_SCHEDULED] = true;
	        return task;
	    }
	    function placeholderCallback() { }
	    function clearTask(task) {
	        var data = task.data;
	        // Note - ideally, we would call data.target.removeEventListener here, but it's too late
	        // to prevent it from firing. So instead, we store info for the event listener.
	        data.aborted = true;
	        return abortNative.apply(data.target, data.args);
	    }
	    var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () { return function (self, args) {
	        self[XHR_SYNC] = args[2] == false;
	        return openNative.apply(self, args);
	    }; });
	    var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {
	        var zone = Zone.current;
	        if (self[XHR_SYNC]) {
	            // if the XHR is sync there is no task to schedule, just execute the code.
	            return sendNative.apply(self, args);
	        }
	        else {
	            var options = { target: self, isPeriodic: false, delay: null, args: args, aborted: false };
	            return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);
	        }
	    }; });
	    var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {
	        var task = findPendingTask(self);
	        if (task && typeof task.type == 'string') {
	            // If the XHR has already completed, do nothing.
	            // If the XHR has already been aborted, do nothing.
	            // Fix #569, call abort multiple times before done will cause
	            // macroTask task count be negative number
	            if (task.cancelFn == null || (task.data && task.data.aborted)) {
	                return;
	            }
	            task.zone.cancelTask(task);
	        }
	        // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no task
	        // to cancel. Do nothing.
	    }; });
	}
	/// GEO_LOCATION
	if (_global['navigator'] && _global['navigator'].geolocation) {
	    patchPrototype(_global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
	}
	// handle unhandled promise rejection
	function findPromiseRejectionHandler(evtName) {
	    return function (e) {
	        var eventTasks = findEventTask(_global, evtName);
	        eventTasks.forEach(function (eventTask) {
	            // windows has added unhandledrejection event listener
	            // trigger the event listener
	            var PromiseRejectionEvent = _global['PromiseRejectionEvent'];
	            if (PromiseRejectionEvent) {
	                var evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });
	                eventTask.invoke(evt);
	            }
	        });
	    };
	}
	if (_global['PromiseRejectionEvent']) {
	    Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =
	        findPromiseRejectionHandler('unhandledrejection');
	    Zone[zoneSymbol('rejectionHandledHandler')] =
	        findPromiseRejectionHandler('rejectionhandled');
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(17)))

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path="../../typings/tsd.d.ts" />
	/// <reference path="../../typings/slatwallTypescript.d.ts" />
	var hibachi_module_1 = __webpack_require__(421);
	var workflow_module_1 = __webpack_require__(514);
	var entity_module_1 = __webpack_require__(473);
	var content_module_1 = __webpack_require__(530);
	var formbuilder_module_1 = __webpack_require__(537);
	var giftcard_module_1 = __webpack_require__(539);
	var optiongroup_module_1 = __webpack_require__(550);
	var orderitem_module_1 = __webpack_require__(553);
	var orderfulfillment_module_1 = __webpack_require__(560);
	var product_module_1 = __webpack_require__(563);
	var productbundle_module_1 = __webpack_require__(566);
	var sku_module_1 = __webpack_require__(573);
	//constant
	var slatwallpathbuilder_1 = __webpack_require__(588);
	//directives
	var swcurrencyformatter_1 = __webpack_require__(589);
	//filters
	var swcurrency_1 = __webpack_require__(590);
	var slatwalladminmodule = angular.module('slatwalladmin', [
	    //custom modules
	    hibachi_module_1.hibachimodule.name,
	    entity_module_1.entitymodule.name,
	    content_module_1.contentmodule.name,
	    formbuilder_module_1.formbuildermodule.name,
	    giftcard_module_1.giftcardmodule.name,
	    optiongroup_module_1.optiongroupmodule.name,
	    orderitem_module_1.orderitemmodule.name,
	    orderfulfillment_module_1.orderfulfillmentmodule.name,
	    product_module_1.productmodule.name,
	    productbundle_module_1.productbundlemodule.name,
	    sku_module_1.skumodule.name,
	    workflow_module_1.workflowmodule.name
	])
	    .constant("baseURL", $.slatwall.getConfig().baseURL)
	    .constant('slatwallPathBuilder', new slatwallpathbuilder_1.SlatwallPathBuilder()).config(["$provide", '$logProvider', '$filterProvider', '$httpProvider', '$routeProvider', '$injector', '$locationProvider', 'datepickerConfig', 'datepickerPopupConfig', 'slatwallPathBuilder', 'appConfig',
	    function ($provide, $logProvider, $filterProvider, $httpProvider, $routeProvider, $injector, $locationProvider, datepickerConfig, datepickerPopupConfig, slatwallPathBuilder, appConfig) {
	        //configure partials path properties
	        slatwallPathBuilder.setBaseURL($.slatwall.getConfig().baseURL);
	        slatwallPathBuilder.setBasePartialsPath('/admin/client/src/');
	        datepickerConfig.showWeeks = false;
	        datepickerConfig.format = 'MMM dd, yyyy hh:mm a';
	        datepickerPopupConfig.toggleWeeksText = null;
	        // route provider configuration
	    }])
	    .run(['$rootScope', '$filter', '$anchorScroll', '$hibachi', 'dialogService', 'observerService', 'utilityService', 'slatwallPathBuilder', function ($rootScope, $filter, $anchorScroll, $hibachi, dialogService, observerService, utilityService, slatwallPathBuilder) {
	        $anchorScroll.yOffset = 100;
	        $rootScope.openPageDialog = function (partial) {
	            dialogService.addPageDialog(partial);
	        };
	        $rootScope.closePageDialog = function (index) {
	            dialogService.removePageDialog(index);
	        };
	        $rootScope.createID = utilityService.createID;
	        $rootScope.slatwall = $rootScope.hibachiScope;
	        $rootScope.slatwall.getProcessObject = $hibachi.newEntity;
	    }])
	    .directive('swCurrencyFormatter', swcurrencyformatter_1.SWCurrencyFormatter.Factory())
	    .controller('preprocessaccount_addaccountpayment', ['$scope', '$compile', function ($scope, $compile) {
	        //Define the different payment types used here
	        var paymentType = { aptCharge: "444df32dd2b0583d59a19f1b77869025", aptCredit: "444df32e9b448ea196c18c66e1454c46", aptAdjustment: "68e3fb57d8102b47acc0003906d16ddd" };
	        $scope.totalAmountToApply = 0; //Default value to show on new form
	        $scope.paymentTypeName = $.slatwall.rbKey('define.charge'); //Default payment type
	        $scope.paymentTypeLock = true; //Used to lock down the order payment type dropdowns
	        $scope.amount = 0;
	        $scope.updatePaymentType = function () {
	            //Change all order payment types here
	            angular.forEach($scope.appliedOrderPayment, function (obj, key) {
	                //Only change the payment type if the type isn't adjustment'
	                if ($scope.paymentType != paymentType.aptAdjustment)
	                    obj.paymentType = $scope.paymentType;
	            });
	            if ($scope.paymentType == paymentType.aptCharge) {
	                $scope.paymentTypeName = $.slatwall.rbKey('define.charge');
	                $scope.paymentTypeLock = true;
	            }
	            else if ($scope.paymentType == paymentType.aptCredit) {
	                $scope.paymentTypeName = $.slatwall.rbKey('define.credit');
	                $scope.paymentTypeLock = true;
	            }
	            else if ($scope.paymentType == paymentType.aptAdjustment) {
	                $scope.paymentTypeLock = false;
	                $scope.paymentTypeName = $.slatwall.rbKey('define.adjustment');
	                $scope.amount = 0;
	            }
	            //Update the subtotal now that we changed the payment type
	            $scope.updateSubTotal();
	        };
	        $scope.updateSubTotal = function () {
	            $scope.totalAmountToApply = 0; //Reset the subtotal before we loop
	            //Loop through all the amount fields and create a running subtotal
	            angular.forEach($scope.appliedOrderPayment, function (obj, key) {
	                //Don't count the field if its undefied or not a number
	                if (obj.amount != undefined && !isNaN(obj.amount)) {
	                    //Charge / adjustment condition for subtotal
	                    if ($scope.paymentType == paymentType.aptCharge || $scope.paymentType == paymentType.aptAdjustment) {
	                        if (obj.paymentType == paymentType.aptCharge)
	                            $scope.totalAmountToApply += parseFloat(obj.amount);
	                        else if (obj.paymentType == paymentType.aptCredit)
	                            $scope.totalAmountToApply -= parseFloat(obj.amount);
	                        //Credit condition for subtotal
	                    }
	                    else if ($scope.paymentType == paymentType.aptCredit) {
	                        if (obj.paymentType == paymentType.aptCharge)
	                            $scope.totalAmountToApply -= parseFloat(obj.amount);
	                        else if (obj.paymentType == paymentType.aptCredit)
	                            $scope.totalAmountToApply += parseFloat(obj.amount);
	                    }
	                }
	            });
	            //The amount not applied to an order
	            $scope.amountUnapplied = (Math.round(($scope.amount - $scope.totalAmountToApply) * 100) / 100);
	            $scope.accountBalanceChange = parseFloat($scope.amount);
	            //Switch the account balance display amount to a negative if you are doing a charge
	            if ($scope.paymentType == paymentType.aptCharge)
	                $scope.accountBalanceChange = parseFloat(($scope.accountBalanceChange * -1).toString()); //If charge, change to neg since we are lowering account balance
	            else if ($scope.paymentType == paymentType.aptAdjustment)
	                $scope.accountBalanceChange += parseFloat($scope.amountUnapplied); //If adjustment, use the amount unapplied to determine the balance change
	        };
	    }])
	    .filter('swcurrency', ['$sce', '$log', '$hibachi', swcurrency_1.SWCurrency.Factory]);
	exports.slatwalladminmodule = slatwalladminmodule;
	// ((): void => {
	//     var app = angular.module('slatwalladmin', ['hibachi','ngSlatwall','ngSlatwallModel','ui.bootstrap','ngAnimate','ngRoute','ngSanitize','ngCkeditor']);
	//     app.config(
	//         ["$provide",'$logProvider','$filterProvider','$httpProvider','$routeProvider','$injector','$locationProvider','datepickerConfig', 'datepickerPopupConfig',
	//         ($provide, $logProvider,$filterProvider,$httpProvider,$routeProvider,$injector,$locationProvider,datepickerConfig, datepickerPopupConfig) =>
	//      {
	//         datepickerConfig.showWeeks = false;
	//         datepickerConfig.format = 'MMM dd, yyyy hh:mm a';
	//             datepickerPopupConfig.toggleWeeksText = null;
	//         if(slatwallAngular.hashbang){
	//             $locationProvider.html5Mode( false ).hashPrefix('!');
	//         }
	//         //
	//         $provide.constant("baseURL", $.slatwall.getConfig().baseURL);
	//         var _partialsPath = $.slatwall.getConfig().baseURL + '/admin/client/partials/';
	//         $provide.constant("partialsPath", _partialsPath);
	//         $provide.constant("productBundlePartialsPath", _partialsPath+'productbundle/');
	//         angular.forEach(slatwallAngular.constantPaths, function(constantPath,key){
	//             var constantKey = constantPath.charAt(0).toLowerCase()+constantPath.slice(1)+'PartialsPath';
	//             var constantPartialsPath = _partialsPath+constantPath.toLowerCase()+'/';
	//             $provide.constant(constantKey, constantPartialsPath);
	//         });
	//         $logProvider.debugEnabled( $.slatwall.getConfig().debugFlag );
	//         $filterProvider.register('likeFilter',function(){
	//             return function(text){
	//                 if(angular.isDefined(text) && angular.isString(text)){
	//                     return text.replace(new RegExp('%', 'g'), '');
	//                 }
	//             };
	//         });
	//         $filterProvider.register('truncate',function(){
	//             return function (input, chars, breakOnWord) {
	//                 if (isNaN(chars)) return input;
	//                 if (chars <= 0) return '';
	//                 if (input && input.length > chars) {
	//                     input = input.substring(0, chars);
	//                     if (!breakOnWord) {
	//                         var lastspace = input.lastIndexOf(' ');
	//                         //get last space
	//                         if (lastspace !== -1) {
	//                             input = input.substr(0, lastspace);
	//                         }
	//                     }else{
	//                         while(input.charAt(input.length-1) === ' '){
	//                             input = input.substr(0, input.length -1);
	//                         }
	//                     }
	//                     return input + '...';
	//                 }
	//                 return input;
	//             };
	//         });
	//         $httpProvider.interceptors.push('slatwallInterceptor');
	//         // route provider configuration
	//         $routeProvider.when('/entity/:entityName/', {
	//             template: function(params){
	//                 var entityDirectiveExists = $injector.has('sw'+params.entityName+'ListDirective');
	//                 if(entityDirectiveExists){
	//                     return '<sw-'+params.entityName.toLowerCase()+'-list>';
	//                 }else{
	//                     return '<sw-list></sw-list>';
	//                 }
	//             },
	//             controller: 'routerController'
	//         }).when('/entity/:entityName/:entityID', {
	//             template: function(params){
	//                 var entityDirectiveExists = $injector.has('sw'+params.entityName+'DetailDirective');
	//                 if(entityDirectiveExists){
	//                     return '<sw-'+params.entityName.toLowerCase()+'-detail>';
	//                 }else{
	//                     return '<sw-detail></sw-detail>';
	//                 }
	//             },
	//             controller: 'routerController',
	//         }).otherwise({
	//             //controller:'otherwiseController'
	//             templateUrl: $.slatwall.getConfig().baseURL + '/admin/client/js/partials/otherwise.html',
	//         });
	//     }]).run(['$rootScope','$filter','$anchorScroll','$hibachi','dialogService','observerService','utilityService', ($rootScope,$filter,$anchorScroll,$hibachi,dialogService,observerService,utilityService) => {
	//         $anchorScroll.yOffset = 100;
	//         $rootScope.openPageDialog = function( partial ) {
	//             dialogService.addPageDialog( partial );
	//         };
	//         $rootScope.closePageDialog = function( index ) {
	//             dialogService.removePageDialog( index );
	//         };
	//         $rootScope.loadedResourceBundle = false;
	//         $rootScope.loadedResourceBundle = $hibachi.hasResourceBundle();
	//         $rootScope.buildUrl = $hibachi.buildUrl;
	//         $rootScope.createID = utilityService.createID;
	//         var rbListener = $rootScope.$watch('loadedResourceBundle',function(newValue,oldValue){
	//             if(newValue !== oldValue){
	//                 $rootScope.$broadcast('hasResourceBundle');
	//                 rbListener();
	//             }
	//         });
	//     }])
	// })();


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//import alertmodule = require('./alert/alert.module');
	var alert_module_1 = __webpack_require__(370);
	var card_module_1 = __webpack_require__(422);
	var collection_module_1 = __webpack_require__(429);
	var listing_module_1 = __webpack_require__(457);
	var dialog_module_1 = __webpack_require__(374);
	var entity_module_1 = __webpack_require__(473);
	var pagination_module_1 = __webpack_require__(479);
	var form_module_1 = __webpack_require__(482);
	var validation_module_1 = __webpack_require__(497);
	var workflow_module_1 = __webpack_require__(514);
	//directives
	var swsaveandfinish_1 = __webpack_require__(529);
	var hibachimodule = angular.module('hibachi', [
	    alert_module_1.alertmodule.name,
	    card_module_1.cardmodule.name,
	    collection_module_1.collectionmodule.name,
	    entity_module_1.entitymodule.name,
	    dialog_module_1.dialogmodule.name,
	    listing_module_1.listingmodule.name,
	    pagination_module_1.paginationmodule.name,
	    form_module_1.formmodule.name,
	    validation_module_1.validationmodule.name,
	    workflow_module_1.workflowmodule.name
	]).config([function () {
	    }])
	    .run(['$rootScope', 'publicService', function ($rootScope, publicService) {
	        $rootScope.hibachiScope = publicService;
	        $rootScope.hasAccount = publicService.hasAccount;
	        $rootScope.hibachiScope.getAccount();
	        $rootScope.hibachiScope.getCart();
	        $rootScope.hibachiScope.getCountries();
	        $rootScope.hibachiScope.getStates();
	    }])
	    .constant('hibachiPartialsPath', 'hibachi/components/')
	    .directive('swSaveAndFinish', swsaveandfinish_1.SWSaveAndFinish.Factory());
	exports.hibachimodule = hibachimodule;


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path="../../typings/tsd.d.ts" />
	/// <reference path="../../typings/hibachiTypescript.d.ts" />
	Object.defineProperty(exports, "__esModule", { value: true });
	//modules
	//services
	//components
	var swcardview_1 = __webpack_require__(423);
	var swcardheader_1 = __webpack_require__(424);
	var swcardbody_1 = __webpack_require__(425);
	var swcardicon_1 = __webpack_require__(426);
	var swcardprogressbar_1 = __webpack_require__(427);
	var swcardlistitem_1 = __webpack_require__(428);
	var cardmodule = angular.module('hibachi.card', [])
	    .run([function () {
	    }])
	    .component('swCardView', swcardview_1.SWCardView.Factory())
	    .component('swCardHeader', swcardheader_1.SWCardHeader.Factory())
	    .component('swCardBody', swcardbody_1.SWCardBody.Factory())
	    .component('swCardIcon', swcardicon_1.SWCardIcon.Factory())
	    .component('swCardProgressBar', swcardprogressbar_1.SWCardProgressBar.Factory())
	    .component('swCardListItem', swcardlistitem_1.SWCardListItem.Factory());
	exports.cardmodule = cardmodule;


/***/ }),
/* 423 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCardViewController = (function () {
	    //@ngInject
	    function SWCardViewController($log) {
	        this.$log = $log;
	        this.cardSize = 'md';
	    }
	    return SWCardViewController;
	}());
	exports.SWCardViewController = SWCardViewController;
	var SWCardView = (function () {
	    function SWCardView() {
	        this.controller = SWCardViewController;
	        this.controllerAs = 'SwCardViewController';
	        this.bindings = {
	            cardTitle: "@?",
	            cardBody: "@?",
	            cardSize: "@?" //sm, md, lg
	        };
	        this.transclude = {
	            cardIcon: '?swCardIcon',
	            cardHeader: '?swCardHeader',
	            cardBody: '?swCardBody',
	            listItem: '?swCardListItem',
	            progressBar: '?swCardProgressBar'
	        };
	        this.template = "\n                \n                <div class=\"s-{{(SwCardViewController.cardSize)}}-content-block{{(SwCardViewController.cardSize=='md'?'-inner':'')}}\" style=\"margin-bottom:7px\">\n                    <!--- ICON --->\n                    <ng-transclude ng-transclude-slot=\"cardIcon\"></ng-transclude>\n                    \n                    <!-- TITLE -->\n                    <!-- This when using attributes -->\n                    <div class=\"s-title\" ng-bind=\"SwCardViewController.cardTitle\" ng-if=\"SwCardViewController.cardTitle\"></div>\n                    \n                    <!-- This when transcluding the content in -->\n                    <ng-transclude class=\"s-title\" ng-transclude-slot=\"cardHeader\"></ng-transclude>\n                    \n                    <!--- CONTENT --->\n                    <!-- This when using attributes -->\n                    <div class=\"s-body\" ng-bind=\"SwCardViewController.cardBody\" ng-if=\"SwCardViewController.cardBody\"></div>\n                    <!-- This when transcluding the content in -->\n                    <ng-transclude ng-transclude-slot=\"cardBody\"></ng-transclude>\n\n                    <!--- LIST ITEMS --->\n                    <ul class=\"list-unstyled\">\n                        <ng-transclude ng-transclude-slot=\"listItem\"></ng-transclude>\n                    </ul>\n\n                    <!--- PROGRESS --->\n                    <!-- This when transcluding the content in -->\n                    <ng-transclude ng-transclude-slot=\"progressBar\"></ng-transclude>\n\n\n                </div>\n           ";
	    }
	    /**
	     * Handles injecting the partials path into this class
	     */
	    SWCardView.Factory = function () {
	        return new SWCardView();
	    };
	    return SWCardView;
	}());
	exports.SWCardView = SWCardView;


/***/ }),
/* 424 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCardHeaderController = (function () {
	    //@ngInject
	    function SWCardHeaderController($log) {
	        this.$log = $log;
	        this.$onInit = function () {
	        };
	    }
	    return SWCardHeaderController;
	}());
	exports.SWCardHeaderController = SWCardHeaderController;
	var SWCardHeader = (function () {
	    function SWCardHeader() {
	        this.controller = SWCardHeaderController;
	        this.controllerAs = 'SwCardHeaderController';
	        this.bindings = {
	            style: '@?'
	        };
	        this.transclude = true;
	        this.require = "^SWCardView";
	        this.template = "\n                <div class=\"s-title\" style=\"{{(SwCardHeaderController.style||'border-bottom:2px solid #eee')}}\" ng-transclude></div>";
	    }
	    /**
	     * Handles injecting the partials path into this class
	     */
	    SWCardHeader.Factory = function () {
	        return new SWCardHeader();
	    };
	    return SWCardHeader;
	}());
	exports.SWCardHeader = SWCardHeader;


/***/ }),
/* 425 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCardBodyController = (function () {
	    //@ngInject
	    function SWCardBodyController($log) {
	        this.$log = $log;
	        this.$onInit = function () {
	        };
	    }
	    return SWCardBodyController;
	}());
	exports.SWCardBodyController = SWCardBodyController;
	var SWCardBody = (function () {
	    function SWCardBody() {
	        this.controller = SWCardBodyController;
	        this.controllerAs = 'SwCardBodyController';
	        this.bindings = {};
	        this.transclude = true;
	        this.require = "^SWCardView";
	        this.template = "\n                    <div class=\"s-body\" ng-transclude></div>\n            ";
	    }
	    /**
	     * Handles injecting the partials path into this class
	     */
	    SWCardBody.Factory = function () {
	        return new SWCardBody();
	    };
	    return SWCardBody;
	}());
	exports.SWCardBody = SWCardBody;


/***/ }),
/* 426 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCardIconController = (function () {
	    //@ngInject
	    function SWCardIconController($log) {
	        this.$log = $log;
	        this.iconMultiplier = "1x";
	        this.$onInit = function () {
	        };
	    }
	    return SWCardIconController;
	}());
	exports.SWCardIconController = SWCardIconController;
	var SWCardIcon = (function () {
	    function SWCardIcon() {
	        this.controller = SWCardIconController;
	        this.controllerAs = 'SwCardIconController';
	        this.bindings = {
	            iconName: "@?",
	            iconMultiplier: "@?"
	        };
	        this.transclude = true;
	        this.require = "^SWCardView";
	        this.template = "\n    <div class=\"col-xs-1 col-sm-1 col-md-2 col-lg-2 s-icon\" ng-transclude>\n        <i ng-class=\"{'fa fa-shopping-cart fa-{{SwCardIconController.iconMultiplier}}':SwCardIconController.iconName == 'shopping-cart'}\"></i>\n        <i ng-class=\"{'fa fa-user fa-{{SwCardIconController.iconMultiplier}}':SwCardIconController.iconName == 'user'}\"></i>\n        <i ng-class=\"{'fa fa-calendar fa-{{SwCardIconController.iconMultiplier}}':SwCardIconController.iconName == 'calendar'}\"></i>\n        <i ng-class=\"{'fa fa-building fa-{{SwCardIconController.iconMultiplier}}':SwCardIconController.iconName == 'building'}\"></i>\n    </div>\n            ";
	    }
	    /**
	     * Handles injecting the partials path into this class
	     */
	    SWCardIcon.Factory = function () {
	        return new SWCardIcon();
	    };
	    return SWCardIcon;
	}());
	exports.SWCardIcon = SWCardIcon;


/***/ }),
/* 427 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCardProgressBarController = (function () {
	    //@ngInject
	    function SWCardProgressBarController($log) {
	        this.$log = $log;
	        this.valueMin = 0;
	        this.valueMax = 100;
	        this.valueNow = 0;
	        this.$onInit = function () { };
	    }
	    return SWCardProgressBarController;
	}());
	exports.SWCardProgressBarController = SWCardProgressBarController;
	var SWCardProgressBar = (function () {
	    function SWCardProgressBar() {
	        this.controller = SWCardProgressBarController;
	        this.controllerAs = 'SwCardProgressBarController';
	        this.bindings = {
	            valueMin: "@?",
	            valueMax: "@?",
	            valueNow: "@?"
	        };
	        this.transclude = true;
	        this.require = "^SWCardView";
	        this.template = "\n        <div class=\"row s-line-item\" ng-transclude>\n            <div class=\"col-xs-12\">\n                <div class=\"progress\">\n                    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{SwCardProgressBarController.valueNow}}\" aria-valuemin=\"{{SwCardProgressBarController.valueMin}}\" aria-valuemax=\"{{SwCardProgressBarController.valueMax}}\" style=\"width:50%;\">\n                        50% \n                    </div>\n                </div>\n            </div>\n        </div>\n            ";
	    }
	    /**
	     * Handles injecting the partials path into this class
	     */
	    SWCardProgressBar.Factory = function () {
	        return new SWCardProgressBar();
	    };
	    return SWCardProgressBar;
	}());
	exports.SWCardProgressBar = SWCardProgressBar;


/***/ }),
/* 428 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCardListItemController = (function () {
	    //@ngInject
	    function SWCardListItemController($log) {
	        this.$log = $log;
	        this.strong = 'false';
	        this.style = 'padding-top:5px;padding-bottom:5px';
	        this.$onInit = function () { };
	    }
	    return SWCardListItemController;
	}());
	exports.SWCardListItemController = SWCardListItemController;
	var SWCardListItem = (function () {
	    function SWCardListItem() {
	        this.controller = SWCardListItemController;
	        this.controllerAs = 'SwCardListItemController';
	        this.bindings = {
	            title: "@?",
	            value: "@?",
	            strong: "@?",
	            style: "@?"
	        };
	        this.transclude = true;
	        this.require = "^SWCardView";
	        this.template = "\n        <li ng-transclude style=\"border-bottom:1px solid #eee;\">\n            <div class=\"row s-line-item {{(SwCardListItemController.strong == 'true')?'s-strong':''}}\" style=\"{{(SwCardListItemController.style)}}\">\n                <div class=\"col-xs-6 s-title\">{{SwCardListItemController.title}}:</div>\n                <div class=\"col-xs-6 s-value\">{{SwCardListItemController.value}}</div>\n            </div>\n        </li>\n            ";
	    }
	    /**
	     * Handles injecting the partials path into this class
	     */
	    SWCardListItem.Factory = function () {
	        return new SWCardListItem();
	    };
	    return SWCardListItem;
	}());
	exports.SWCardListItem = SWCardListItem;


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//modules
	var core_module_1 = __webpack_require__(275);
	//services
	var collectionconfigservice_1 = __webpack_require__(430);
	var collectionservice_1 = __webpack_require__(431);
	//controllers
	var collections_1 = __webpack_require__(432);
	var createcollection_1 = __webpack_require__(433);
	var confirmationcontroller_1 = __webpack_require__(434);
	var entity_createcollection_1 = __webpack_require__(435);
	//directives
	var swcollection_1 = __webpack_require__(436);
	var swaddfilterbuttons_1 = __webpack_require__(437);
	var swdisplayoptions_1 = __webpack_require__(438);
	var swdisplayitem_1 = __webpack_require__(439);
	var swdisplayitemaggregate_1 = __webpack_require__(440);
	var swcollectiontable_1 = __webpack_require__(441);
	var swcolumnitem_1 = __webpack_require__(442);
	var swconditioncriteria_1 = __webpack_require__(443);
	var swcriteria_1 = __webpack_require__(444);
	var swcriteriaboolean_1 = __webpack_require__(445);
	var swcriteriadate_1 = __webpack_require__(446);
	var swcriteriamanytomany_1 = __webpack_require__(447);
	var swcriteriamanytoone_1 = __webpack_require__(448);
	var swcriterianumber_1 = __webpack_require__(449);
	var swcriteriaonetomany_1 = __webpack_require__(450);
	var swcriteriarelatedobject_1 = __webpack_require__(451);
	var swcriteriastring_1 = __webpack_require__(452);
	var sweditfilteritem_1 = __webpack_require__(453);
	var swfiltergroups_1 = __webpack_require__(454);
	var swfilteritem_1 = __webpack_require__(455);
	var swfiltergroupitem_1 = __webpack_require__(456);
	var collectionmodule = angular.module('hibachi.collection', [core_module_1.coremodule.name])
	    .config([function () {
	    }]).run([function () {
	    }])
	    .constant('collectionPartialsPath', 'collection/components/')
	    .controller('collections', collections_1.CollectionController)
	    .controller('confirmationController', confirmationcontroller_1.ConfirmationController)
	    .controller('createCollection', createcollection_1.CreateCollection)
	    .controller('entity_createcollection', entity_createcollection_1.CollectionCreateController)
	    .factory('collectionConfigService', ['rbkeyService', '$hibachi', 'utilityService', 'observerService', function (rbkeyService, $hibachi, utilityService, observerService) { return new collectionconfigservice_1.CollectionConfig(rbkeyService, $hibachi, utilityService, observerService); }])
	    .service('collectionService', collectionservice_1.CollectionService)
	    .directive('swCollection', swcollection_1.SWCollection.Factory())
	    .directive('swAddFilterButtons', swaddfilterbuttons_1.SWAddFilterButtons.Factory())
	    .directive('swDisplayOptions', swdisplayoptions_1.SWDisplayOptions.Factory())
	    .directive('swDisplayItem', swdisplayitem_1.SWDisplayItem.Factory())
	    .directive('swDisplayItemAggregate', swdisplayitemaggregate_1.SWDisplayItemAggregate.Factory())
	    .directive('swCollectionTable', swcollectiontable_1.SWCollectionTable.Factory())
	    .directive('swColumnItem', swcolumnitem_1.SWColumnItem.Factory())
	    .directive('swConditionCriteria', swconditioncriteria_1.SWConditionCriteria.Factory())
	    .directive('swCriteria', swcriteria_1.SWCriteria.Factory())
	    .directive('swCriteriaBoolean', swcriteriaboolean_1.SWCriteriaBoolean.Factory())
	    .directive('swCriteriaDate', swcriteriadate_1.SWCriteriaDate.Factory())
	    .directive('swCriteriaManyToMany', swcriteriamanytomany_1.SWCriteriaManyToMany.Factory())
	    .directive('swCriteriaManyToOne', swcriteriamanytoone_1.SWCriteriaManyToOne.Factory())
	    .directive('swCriteriaNumber', swcriterianumber_1.SWCriteriaNumber.Factory())
	    .directive('swCriteriaOneToMany', swcriteriaonetomany_1.SWCriteriaOneToMany.Factory())
	    .directive('swCriteriaRelatedObject', swcriteriarelatedobject_1.SWCriteriaRelatedObject.Factory())
	    .directive('swCriteriaString', swcriteriastring_1.SWCriteriaString.Factory())
	    .directive('swEditFilterItem', sweditfilteritem_1.SWEditFilterItem.Factory())
	    .directive('swFilterGroups', swfiltergroups_1.SWFilterGroups.Factory())
	    .directive('swFilterItem', swfilteritem_1.SWFilterItem.Factory())
	    .directive('swFilterGroupItem', swfiltergroupitem_1.SWFilterGroupItem.Factory());
	exports.collectionmodule = collectionmodule;


/***/ }),
/* 430 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var Column = (function () {
	    function Column(propertyIdentifier, title, isVisible, isDeletable, isSearchable, isExportable, persistent, ormtype, attributeID, attributeSetObject) {
	        if (isVisible === void 0) { isVisible = true; }
	        if (isDeletable === void 0) { isDeletable = true; }
	        if (isSearchable === void 0) { isSearchable = true; }
	        if (isExportable === void 0) { isExportable = true; }
	        this.propertyIdentifier = propertyIdentifier;
	        this.title = title;
	        this.isVisible = isVisible;
	        this.isDeletable = isDeletable;
	        this.isSearchable = isSearchable;
	        this.isExportable = isExportable;
	        this.persistent = persistent;
	        this.ormtype = ormtype;
	        this.attributeID = attributeID;
	        this.attributeSetObject = attributeSetObject;
	    }
	    return Column;
	}());
	exports.Column = Column;
	var Filter = (function () {
	    function Filter(propertyIdentifier, value, comparisonOperator, logicalOperator, displayPropertyIdentifier, displayValue, hidden, pattern) {
	        if (hidden === void 0) { hidden = false; }
	        this.propertyIdentifier = propertyIdentifier;
	        this.value = value;
	        this.comparisonOperator = comparisonOperator;
	        this.logicalOperator = logicalOperator;
	        this.displayPropertyIdentifier = displayPropertyIdentifier;
	        this.displayValue = displayValue;
	        this.hidden = hidden;
	        this.pattern = pattern;
	    }
	    return Filter;
	}());
	exports.Filter = Filter;
	var CollectionFilter = (function () {
	    function CollectionFilter(propertyIdentifier, displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly) {
	        if (readOnly === void 0) { readOnly = false; }
	        this.propertyIdentifier = propertyIdentifier;
	        this.displayPropertyIdentifier = displayPropertyIdentifier;
	        this.displayValue = displayValue;
	        this.collectionID = collectionID;
	        this.criteria = criteria;
	        this.fieldtype = fieldtype;
	        this.readOnly = readOnly;
	    }
	    return CollectionFilter;
	}());
	exports.CollectionFilter = CollectionFilter;
	var Join = (function () {
	    function Join(associationName, alias) {
	        this.associationName = associationName;
	        this.alias = alias;
	    }
	    return Join;
	}());
	exports.Join = Join;
	var OrderBy = (function () {
	    function OrderBy(propertyIdentifier, direction) {
	        this.propertyIdentifier = propertyIdentifier;
	        this.direction = direction;
	    }
	    return OrderBy;
	}());
	exports.OrderBy = OrderBy;
	var CollectionConfig = (function () {
	    // @ngInject
	    function CollectionConfig(rbkeyService, $hibachi, utilityService, observerService, baseEntityName, baseEntityAlias, columns, keywordColumns, filterGroups, keywordFilterGroups, joins, orderBy, groupBys, id, currentPage, pageShow, keywords, allRecords, dirtyRead, isDistinct) {
	        if (keywordColumns === void 0) { keywordColumns = []; }
	        if (filterGroups === void 0) { filterGroups = [{ filterGroup: [] }]; }
	        if (keywordFilterGroups === void 0) { keywordFilterGroups = [{ filterGroup: [] }]; }
	        if (currentPage === void 0) { currentPage = 1; }
	        if (pageShow === void 0) { pageShow = 10; }
	        if (keywords === void 0) { keywords = ''; }
	        if (allRecords === void 0) { allRecords = false; }
	        if (dirtyRead === void 0) { dirtyRead = false; }
	        if (isDistinct === void 0) { isDistinct = false; }
	        var _this = this;
	        this.rbkeyService = rbkeyService;
	        this.$hibachi = $hibachi;
	        this.utilityService = utilityService;
	        this.observerService = observerService;
	        this.baseEntityName = baseEntityName;
	        this.baseEntityAlias = baseEntityAlias;
	        this.columns = columns;
	        this.keywordColumns = keywordColumns;
	        this.filterGroups = filterGroups;
	        this.keywordFilterGroups = keywordFilterGroups;
	        this.joins = joins;
	        this.orderBy = orderBy;
	        this.groupBys = groupBys;
	        this.id = id;
	        this.currentPage = currentPage;
	        this.pageShow = pageShow;
	        this.keywords = keywords;
	        this.allRecords = allRecords;
	        this.dirtyRead = dirtyRead;
	        this.isDistinct = isDistinct;
	        this.clearFilterGroups = function () {
	            _this.filterGroups = [{ filterGroup: [] }];
	            _this.keywordFilterGroups = [{ filterGroup: [] }];
	            return _this;
	        };
	        this.newCollectionConfig = function (baseEntityName, baseEntityAlias) {
	            return new CollectionConfig(_this.rbkeyService, _this.$hibachi, _this.utilityService, _this.observerService, baseEntityName, baseEntityAlias);
	        };
	        this.loadJson = function (jsonCollection) {
	            //if json then make a javascript object else use the javascript object
	            //if coldfusion has double encoded the json keep calling fromJson until it becomes an object
	            while (angular.isString(jsonCollection)) {
	                jsonCollection = angular.fromJson(jsonCollection);
	            }
	            _this.baseEntityAlias = jsonCollection.baseEntityAlias;
	            _this.baseEntityName = jsonCollection.baseEntityName;
	            if (angular.isDefined(jsonCollection.filterGroups)) {
	                _this.validateFilter(jsonCollection.filterGroups);
	                _this.filterGroups = jsonCollection.filterGroups;
	            }
	            _this.columns = jsonCollection.columns;
	            _this.joins = jsonCollection.joins;
	            _this.keywords = jsonCollection.keywords;
	            _this.orderBy = jsonCollection.orderBy;
	            _this.groupBys = jsonCollection.groupBys;
	            _this.pageShow = jsonCollection.pageShow;
	            _this.allRecords = jsonCollection.allRecords;
	            if (jsonCollection.dirtyRead) {
	                _this.dirtyRead = jsonCollection.dirtyRead;
	            }
	            _this.isDistinct = jsonCollection.isDistinct;
	            _this.currentPage = jsonCollection.currentPage || 1;
	            _this.pageShow = jsonCollection.pageShow || 10;
	            _this.keywords = jsonCollection.keywords;
	            return _this;
	        };
	        this.clone = function () {
	            return _this.newCollectionConfig(_this.baseEntityName, _this.baseEntityAlias).loadJson(JSON.parse(JSON.stringify(_this.getCollectionConfig())));
	        };
	        this.loadFilterGroups = function (filterGroupsConfig) {
	            if (filterGroupsConfig === void 0) { filterGroupsConfig = [{ filterGroup: [] }]; }
	            _this.filterGroups = filterGroupsConfig;
	            return _this;
	        };
	        this.loadColumns = function (columns) {
	            _this.columns = columns;
	            return _this;
	        };
	        this.getCollectionConfig = function () {
	            _this.validateFilter(_this.filterGroups);
	            return {
	                baseEntityAlias: _this.baseEntityAlias,
	                baseEntityName: _this.baseEntityName,
	                columns: _this.columns,
	                keywordColumns: _this.keywordColumns,
	                filterGroups: _this.filterGroups,
	                joins: _this.joins,
	                groupBys: _this.groupBys,
	                currentPage: _this.currentPage,
	                pageShow: _this.pageShow,
	                keywords: _this.keywords,
	                defaultColumns: (!_this.columns || !_this.columns.length),
	                allRecords: _this.allRecords,
	                dirtyRead: _this.dirtyRead,
	                isDistinct: _this.isDistinct,
	                orderBy: _this.orderBy
	            };
	        };
	        this.getEntityName = function () {
	            return _this.baseEntityName.charAt(0).toUpperCase() + _this.baseEntityName.slice(1);
	        };
	        this.getOptions = function () {
	            _this.validateFilter(_this.filterGroups);
	            if (_this.keywords && _this.keywords.length && _this.keywordColumns.length > 0) {
	                var columns = _this.keywordColumns;
	            }
	            else {
	                var columns = _this.columns;
	            }
	            if (_this.keywords && _this.keywords.length && _this.keywordFilterGroups[0].filterGroup.length > 0) {
	                var filters = _this.keywordFilterGroups;
	            }
	            else {
	                var filters = _this.filterGroups;
	            }
	            var options = {
	                columnsConfig: angular.toJson(columns),
	                filterGroupsConfig: angular.toJson(filters),
	                joinsConfig: angular.toJson(_this.joins),
	                orderByConfig: angular.toJson(_this.orderBy),
	                groupBysConfig: angular.toJson(_this.groupBys),
	                currentPage: _this.currentPage,
	                pageShow: _this.pageShow,
	                keywords: _this.keywords,
	                defaultColumns: (!_this.columns || !_this.columns.length),
	                allRecords: _this.allRecords,
	                dirtyRead: _this.dirtyRead,
	                isDistinct: _this.isDistinct
	            };
	            if (angular.isDefined(_this.id)) {
	                options['id'] = _this.id;
	            }
	            return options;
	        };
	        this.debug = function () {
	            return _this;
	        };
	        this.formatPropertyIdentifier = function (propertyIdentifier, addJoin) {
	            if (addJoin === void 0) { addJoin = false; }
	            //if already starts with alias, strip it out
	            if (propertyIdentifier.lastIndexOf(_this.baseEntityAlias, 0) === 0) {
	                propertyIdentifier = propertyIdentifier.slice(_this.baseEntityAlias.length + 1);
	            }
	            var _propertyIdentifier = _this.baseEntityAlias;
	            if (addJoin === true) {
	                _propertyIdentifier += _this.processJoin(propertyIdentifier);
	            }
	            else {
	                _propertyIdentifier += '.' + propertyIdentifier;
	            }
	            return _propertyIdentifier;
	        };
	        this.processJoin = function (propertyIdentifier) {
	            var _propertyIdentifier = '', propertyIdentifierParts = propertyIdentifier.split('.'), current_collection = _this.collection;
	            for (var i = 0; i < propertyIdentifierParts.length; i++) {
	                if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
	                    current_collection = _this.$hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
	                    _propertyIdentifier += '_' + propertyIdentifierParts[i];
	                    _this.addJoin(new Join(_propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1), _this.baseEntityAlias + _propertyIdentifier));
	                }
	                else {
	                    _propertyIdentifier += '.' + propertyIdentifierParts[i];
	                }
	            }
	            return _propertyIdentifier;
	        };
	        this.addJoin = function (join) {
	            if (!_this.joins) {
	                _this.joins = [];
	            }
	            var joinFound = false;
	            angular.forEach(_this.joins, function (configJoin) {
	                if (configJoin.alias === join.alias) {
	                    joinFound = true;
	                }
	            });
	            if (!joinFound) {
	                _this.joins.push(join);
	            }
	            return _this;
	        };
	        this.addAlias = function (propertyIdentifier) {
	            var parts = propertyIdentifier.split('.');
	            if (parts.length > 1 && parts[0] !== _this.baseEntityAlias) {
	                return _this.baseEntityAlias + '.' + propertyIdentifier;
	            }
	            return propertyIdentifier;
	        };
	        this.addColumn = function (column, title, options) {
	            if (title === void 0) { title = ''; }
	            if (options === void 0) { options = {}; }
	            if (!_this.columns || options.aggregate != null || _this.utilityService.ArrayFindByPropertyValue(_this.columns, 'propertyIdentifier', column) === -1) {
	                var isVisible = true, isDeletable = true, isSearchable = true, isExportable = true, persistent, ormtype = 'string', lastProperty = column.split('.').pop(), isKeywordColumn = true, isOnlyKeywordColumn = false;
	                var lastEntity = _this.$hibachi.getEntityExample(_this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, column));
	                if (angular.isUndefined(lastEntity)) {
	                    throw ("You have passed an incorrect entity name to a collection config");
	                }
	                if (angular.isUndefined(_this.columns)) {
	                    _this.columns = [];
	                }
	                //hide id columns
	                if (angular.isDefined(options['isVisible'])) {
	                    isVisible = options['isVisible'];
	                }
	                if (angular.isUndefined(options.isVisible) &&
	                    column.substring(column.length - 2) === "ID") {
	                    isVisible = false;
	                }
	                if (angular.isDefined(options['isDeletable'])) {
	                    isDeletable = options['isDeletable'];
	                }
	                if (angular.isDefined(options['isSearchable'])) {
	                    isSearchable = options['isSearchable'];
	                }
	                if (angular.isDefined(options['isExportable'])) {
	                    isExportable = options['isExportable'];
	                }
	                if (angular.isUndefined(options['isExportable']) && !isVisible) {
	                    isExportable = false;
	                }
	                if (angular.isDefined(options['ormtype'])) {
	                    ormtype = options['ormtype'];
	                }
	                else if (lastEntity.metaData[lastProperty] && lastEntity.metaData[lastProperty].ormtype) {
	                    ormtype = lastEntity.metaData[lastProperty].ormtype;
	                }
	                if (angular.isDefined(options['isKeywordColumn'])) {
	                    isKeywordColumn = options['isKeywordColumn'];
	                }
	                if (angular.isDefined(options['isOnlyKeywordColumn'])) {
	                    isOnlyKeywordColumn = options['isOnlyKeywordColumn'];
	                }
	                if (angular.isDefined(lastEntity.metaData[lastProperty])) {
	                    persistent = lastEntity.metaData[lastProperty].persistent;
	                }
	                var columnObject = new Column(column, title, isVisible, isDeletable, isSearchable, isExportable, persistent, ormtype, options['attributeID'], options['attributeSetObject']);
	                if (options['aggregate']) {
	                    columnObject['aggregate'] = options['aggregate'],
	                        columnObject['aggregateAlias'] = title;
	                }
	                //add any non-conventional options
	                for (var key in options) {
	                    if (!columnObject[key]) {
	                        columnObject[key] = options[key];
	                    }
	                }
	                if (!isOnlyKeywordColumn) {
	                    _this.columns.push(columnObject);
	                }
	                if (isKeywordColumn) {
	                    _this.keywordColumns.push(columnObject);
	                }
	            }
	            return _this;
	        };
	        this.setDisplayProperties = function (propertyIdentifier, title, options) {
	            if (title === void 0) { title = ''; }
	            if (options === void 0) { options = {}; }
	            _this.addDisplayProperty(propertyIdentifier, title, options);
	            return _this;
	        };
	        this.addDisplayAggregate = function (propertyIdentifier, aggregateFunction, aggregateAlias, options) {
	            if (angular.isUndefined(aggregateAlias)) {
	                aggregateAlias = propertyIdentifier.replace(/\./g, '_') + aggregateFunction;
	            }
	            var column = {
	                propertyIdentifier: _this.formatPropertyIdentifier(propertyIdentifier, true),
	                title: _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, propertyIdentifier) + "." + _this.utilityService.listLast(propertyIdentifier)),
	                aggregate: {
	                    aggregateFunction: aggregateFunction,
	                    aggregateAlias: aggregateAlias
	                }
	            };
	            angular.extend(column, options);
	            //Add columns
	            _this.addColumn(column.propertyIdentifier, undefined, column);
	            return _this;
	        };
	        this.addGroupBy = function (groupByAlias) {
	            if (!_this.groupBys) {
	                _this.groupBys = '';
	            }
	            _this.groupBys = _this.utilityService.listAppendUnique(_this.groupBys, groupByAlias);
	            return _this;
	        };
	        this.addDisplayProperty = function (propertyIdentifier, title, options) {
	            if (title === void 0) { title = ''; }
	            if (options === void 0) { options = {}; }
	            var _DividedColumns = propertyIdentifier.trim().split(',');
	            var _DividedTitles = title.trim().split(',');
	            var join = propertyIdentifier.split('.').length > 1;
	            _DividedColumns.forEach(function (column, index) {
	                column = column.trim();
	                if (angular.isDefined(_DividedTitles[index]) && _DividedTitles[index].trim() != '') {
	                    title = _DividedTitles[index].trim();
	                }
	                else {
	                    title = _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, column) + "." + _this.utilityService.listLast(column, "."));
	                }
	                _this.addColumn(_this.formatPropertyIdentifier(column, join), title, options);
	            });
	            return _this;
	        };
	        this.addFilter = function (propertyIdentifier, value, comparisonOperator, logicalOperator, hidden, isKeywordFilter, isOnlyKeywordFilter) {
	            if (comparisonOperator === void 0) { comparisonOperator = '='; }
	            if (hidden === void 0) { hidden = false; }
	            if (isKeywordFilter === void 0) { isKeywordFilter = true; }
	            if (isOnlyKeywordFilter === void 0) { isOnlyKeywordFilter = false; }
	            if (!_this.filterGroups[0].filterGroup.length) {
	                logicalOperator = undefined;
	            }
	            if (propertyIdentifier.split('.').length > 1) {
	                _this.processJoin(propertyIdentifier);
	            }
	            //create filter
	            var filter = _this.createFilter(propertyIdentifier, value, comparisonOperator, logicalOperator, hidden);
	            if (!isOnlyKeywordFilter) {
	                _this.filterGroups[0].filterGroup.push(filter);
	            }
	            if (isKeywordFilter) {
	                _this.keywordFilterGroups[0].filterGroup.push(filter);
	            }
	            return _this;
	        };
	        this.addLikeFilter = function (propertyIdentifier, value, pattern, logicalOperator, displayPropertyIdentifier, hidden) {
	            if (pattern === void 0) { pattern = '%w%'; }
	            if (hidden === void 0) { hidden = false; }
	            //if filterGroups does not exists then set a default
	            if (!_this.filterGroups) {
	                _this.filterGroups = [{ filterGroup: [] }];
	            }
	            //if filterGroups is longer than 0 then we at least need to default the logical Operator to AND
	            if (_this.filterGroups[0].filterGroup.length && !logicalOperator)
	                logicalOperator = 'AND';
	            var join = propertyIdentifier.split('.').length > 1;
	            if (angular.isUndefined(displayPropertyIdentifier)) {
	                displayPropertyIdentifier = _this.rbkeyService.getRBKey("entity." + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, propertyIdentifier) + "." + _this.utilityService.listLast(propertyIdentifier));
	            }
	            //create filter group
	            var filter = new Filter(_this.formatPropertyIdentifier(propertyIdentifier, join), value, 'like', logicalOperator, displayPropertyIdentifier, value, hidden, pattern);
	            _this.filterGroups[0].filterGroup.push(filter);
	            return _this;
	        };
	        this.createFilter = function (propertyIdentifier, value, comparisonOperator, logicalOperator, hidden) {
	            if (comparisonOperator === void 0) { comparisonOperator = '='; }
	            if (hidden === void 0) { hidden = false; }
	            //if filterGroups does not exists then set a default
	            if (!_this.filterGroups) {
	                _this.filterGroups = [{ filterGroup: [] }];
	            }
	            //if filterGroups is longer than 0 then we at least need to default the logical Operator to AND
	            if (_this.filterGroups[0].filterGroup.length && !logicalOperator)
	                logicalOperator = 'AND';
	            var join = propertyIdentifier.split('.').length > 1;
	            //create filter group
	            var filter = new Filter(_this.formatPropertyIdentifier(propertyIdentifier, join), value, comparisonOperator, logicalOperator, propertyIdentifier.split('.').pop(), value, hidden);
	            return filter;
	        };
	        this.addFilterGroup = function (filterGroup) {
	            var group = {
	                filterGroup: []
	            };
	            for (var i = 0; i < filterGroup.length; i++) {
	                var filter = _this.createFilter(filterGroup[i].propertyIdentifier, filterGroup[i].comparisonValue, filterGroup[i].comparisonOperator, filterGroup[i].logicalOperator, filterGroup[i].hidden);
	                group.filterGroup.push(filter);
	            }
	            _this.filterGroups[0].filterGroup.push(group);
	            return _this;
	        };
	        this.removeFilter = function (propertyIdentifier, value, comparisonOperator) {
	            if (comparisonOperator === void 0) { comparisonOperator = '='; }
	            _this.removeFilterHelper(_this.filterGroups, propertyIdentifier, value, comparisonOperator);
	            return _this;
	        };
	        this.removeFilterByDisplayPropertyIdentifier = function (displayPropertyIdentifier) {
	            _this.removeFromFilterGroupsByPropertyIdentifier(_this.filterGroups, displayPropertyIdentifier);
	            _this.removeFromFilterGroupsByPropertyIdentifier(_this.keywordFilterGroups, displayPropertyIdentifier);
	        };
	        this.removeFromFilterGroupsByPropertyIdentifier = function (filterGroups, displayPropertyIdentifier) {
	            for (var j = 0; j < filterGroups.length; j++) {
	                var filterGroup = filterGroups[j].filterGroup;
	                for (var i = 0; i < filterGroup.length; i++) {
	                    var filter = filterGroup[i];
	                    if (filter.displayPropertyIdentifier == displayPropertyIdentifier) {
	                        filterGroup.splice(i, 1);
	                        i--;
	                    }
	                }
	            }
	        };
	        this.removeFilterHelper = function (filter, propertyIdentifier, value, comparisonOperator, currentGroup) {
	            if (angular.isUndefined(currentGroup)) {
	                currentGroup = filter;
	            }
	            if (angular.isArray(filter)) {
	                angular.forEach(filter, function (key) {
	                    _this.removeFilterHelper(key, propertyIdentifier, value, comparisonOperator, filter);
	                });
	            }
	            else if (angular.isArray(filter.filterGroup)) {
	                _this.removeFilterHelper(filter.filterGroup, propertyIdentifier, value, comparisonOperator, filter.filterGroup);
	            }
	            else {
	                if (filter.propertyIdentifier == propertyIdentifier && filter.value == value && filter.comparisonOperator == comparisonOperator) {
	                    currentGroup.splice(currentGroup.indexOf(filter), 1);
	                }
	            }
	        };
	        this.addCollectionFilter = function (propertyIdentifier, displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly) {
	            if (criteria === void 0) { criteria = 'One'; }
	            if (readOnly === void 0) { readOnly = false; }
	            _this.filterGroups[0].filterGroup.push(new CollectionFilter(_this.formatPropertyIdentifier(propertyIdentifier), displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly));
	            return _this;
	        };
	        //orderByList in this form: "property|direction" concrete: "skuName|ASC"
	        this.setOrderBy = function (orderByList) {
	            var orderBys = orderByList.split(',');
	            angular.forEach(orderBys, function (orderBy) {
	                _this.addOrderBy(orderBy);
	            });
	            return _this;
	        };
	        this.clearOrderBy = function () {
	            _this.orderBy = [];
	        };
	        this.addOrderBy = function (orderByString, formatPropertyIdentifier) {
	            if (formatPropertyIdentifier === void 0) { formatPropertyIdentifier = true; }
	            if (!_this.orderBy) {
	                _this.orderBy = [];
	            }
	            var propertyIdentifier = _this.utilityService.listFirst(orderByString, '|');
	            if (formatPropertyIdentifier) {
	                propertyIdentifier = _this.formatPropertyIdentifier(propertyIdentifier);
	            }
	            var direction = _this.utilityService.listLast(orderByString, '|');
	            var orderBy = {
	                propertyIdentifier: propertyIdentifier,
	                direction: direction
	            };
	            _this.orderBy.push(orderBy);
	        };
	        this.toggleOrderBy = function (formattedPropertyIdentifier, singleColumn) {
	            if (singleColumn === void 0) { singleColumn = false; }
	            if (!_this.orderBy) {
	                _this.orderBy = [];
	            }
	            var found = false;
	            for (var i = _this.orderBy.length - 1; i >= 0; i--) {
	                if (_this.orderBy[i].propertyIdentifier == formattedPropertyIdentifier) {
	                    found = true;
	                    if (_this.orderBy[i].direction.toUpperCase() == "DESC") {
	                        _this.orderBy[i].direction = "ASC";
	                    }
	                    else if (_this.orderBy[i].direction.toUpperCase() == "ASC") {
	                        _this.orderBy.splice(i, 1);
	                    }
	                    break;
	                }
	            }
	            if (!found) {
	                if (singleColumn) {
	                    _this.orderBy = [];
	                    for (var i = 0; i < _this.columns.length; i++) {
	                        if (_this.columns[i]["sorting"] && _this.columns[i]["sorting"]["active"]) {
	                            _this.columns[i]["sorting"]["active"] = false;
	                            _this.columns[i]["sorting"]["sortOrder"] = 'asc';
	                        }
	                    }
	                }
	                _this.addOrderBy(formattedPropertyIdentifier + '|DESC', false);
	            }
	        };
	        this.removeOrderBy = function (formattedPropertyIdentifier) {
	            angular.forEach(_this.orderBy, function (orderBy, index) {
	                if (orderBy.propertyIdentifier == formattedPropertyIdentifier) {
	                    _this.orderBy.splice(index, 1);
	                    return true;
	                }
	            });
	            return false;
	        };
	        this.setCurrentPage = function (pageNumber) {
	            _this.currentPage = pageNumber;
	            return _this;
	        };
	        this.getCurrentPage = function () {
	            return _this.currentPage;
	        };
	        this.setPageShow = function (NumberOfPages) {
	            _this.pageShow = NumberOfPages;
	            return _this;
	        };
	        this.getPageShow = function () {
	            return _this.pageShow;
	        };
	        this.setAllRecords = function (allFlag) {
	            if (allFlag === void 0) { allFlag = false; }
	            _this.allRecords = allFlag;
	            return _this;
	        };
	        this.setDistinct = function (flag) {
	            if (flag === void 0) { flag = true; }
	            _this.isDistinct = flag;
	            return _this;
	        };
	        this.setDirtyRead = function (flag) {
	            if (flag === void 0) { flag = false; }
	            _this.dirtyRead = flag;
	            return _this;
	        };
	        this.setKeywords = function (keyword) {
	            _this.keywords = keyword;
	            return _this;
	        };
	        this.setId = function (id) {
	            _this.id = id;
	            return _this;
	        };
	        this.hasFilters = function () {
	            return (_this.filterGroups.length && _this.filterGroups[0].filterGroup.length);
	        };
	        this.hasColumns = function () {
	            return _this.columns != null && _this.columns.length > 0;
	        };
	        this.clearFilters = function () {
	            _this.filterGroups = [{ filterGroup: [] }];
	            return _this;
	        };
	        this.getEntity = function (id) {
	            if (angular.isDefined(id)) {
	                _this.setId(id);
	            }
	            return _this.$hibachi.getEntity(_this.baseEntityName, _this.getOptions());
	        };
	        this.validateFilter = function (filter, currentGroup) {
	            if (angular.isUndefined(currentGroup)) {
	                currentGroup = filter;
	            }
	            if (angular.isArray(filter)) {
	                angular.forEach(filter, function (key) {
	                    _this.validateFilter(key, filter);
	                });
	            }
	            else if (angular.isArray(filter.filterGroup)) {
	                _this.validateFilter(filter.filterGroup, filter.filterGroup);
	            }
	            else {
	                if ((!filter.comparisonOperator || !filter.comparisonOperator.length) && (!filter.propertyIdentifier || !filter.propertyIdentifier.length)) {
	                    var index = currentGroup.indexOf(filter);
	                    if (index > -1) {
	                        _this.observerService.notify('filterItemAction', {
	                            action: 'remove',
	                            filterItemIndex: index
	                        });
	                        currentGroup.splice(index, 1);
	                    }
	                }
	            }
	        };
	        this.getColumns = function () {
	            if (!_this.columns) {
	                _this.columns = [];
	            }
	            return _this.columns;
	        };
	        this.setColumns = function (columns) {
	            _this.columns = columns;
	            return _this;
	        };
	        this.$hibachi = $hibachi;
	        this.rbkeyService = rbkeyService;
	        if (angular.isDefined(this.baseEntityName)) {
	            this.collection = this.$hibachi.getEntityExample(this.baseEntityName);
	            if (angular.isUndefined(this.baseEntityAlias)) {
	                this.baseEntityAlias = '_' + this.baseEntityName.toLowerCase();
	            }
	        }
	    }
	    return CollectionConfig;
	}());
	exports.CollectionConfig = CollectionConfig;


/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var baseentityservice_1 = __webpack_require__(281);
	var CollectionService = (function (_super) {
	    __extends(CollectionService, _super);
	    //@ngInject
	    function CollectionService($injector, $hibachi, utilityService, $filter, $log) {
	        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Collection') || this;
	        _this.$injector = $injector;
	        _this.$hibachi = $hibachi;
	        _this.utilityService = utilityService;
	        _this.$filter = $filter;
	        _this.$log = $log;
	        _this.get = function () {
	            return _this._pageDialogs || [];
	        };
	        //test
	        _this.setFilterCount = function (count) {
	            _this.$log.debug('incrementFilterCount');
	            _this._filterCount = count;
	        };
	        _this.getFilterCount = function () {
	            return _this._filterCount;
	        };
	        _this.getColumns = function () {
	            return _this._collection.collectionConfig.columns;
	        };
	        _this.getFilterPropertiesList = function () {
	            return _this._filterPropertiesList;
	        };
	        _this.getFilterPropertiesListByBaseEntityAlias = function (baseEntityAlias) {
	            return _this._filterPropertiesList[baseEntityAlias];
	        };
	        _this.setFilterPropertiesList = function (value, key) {
	            if (angular.isUndefined(_this._filterPropertiesList[key])) {
	                _this._filterPropertiesList[key] = value;
	            }
	        };
	        _this.stringifyJSON = function (jsonObject) {
	            var jsonString = angular.toJson(jsonObject);
	            return jsonString;
	        };
	        _this.removeFilterItem = function (filterItem, filterGroup) {
	            filterGroup.pop(filterGroup.indexOf(filterItem));
	        };
	        _this.selectFilterItem = function (filterItem) {
	            if (filterItem.$$isClosed) {
	                for (var i in filterItem.$$siblingItems) {
	                    filterItem.$$siblingItems[i].$$isClosed = true;
	                    filterItem.$$siblingItems[i].$$disabled = true;
	                }
	                filterItem.$$isClosed = false;
	                filterItem.$$disabled = false;
	                filterItem.setItemInUse(true);
	            }
	            else {
	                for (var i in filterItem.$$siblingItems) {
	                    filterItem.$$siblingItems[i].$$disabled = false;
	                }
	                filterItem.$$isClosed = true;
	                filterItem.setItemInUse(false);
	            }
	        };
	        _this.selectFilterGroupItem = function (filterGroupItem) {
	            if (filterGroupItem.$$isClosed) {
	                for (var i in filterGroupItem.$$siblingItems) {
	                    filterGroupItem.$$siblingItems[i].$$disabled = true;
	                }
	                filterGroupItem.$$isClosed = false;
	                filterGroupItem.$$disabled = false;
	            }
	            else {
	                for (var i in filterGroupItem.$$siblingItems) {
	                    filterGroupItem.$$siblingItems[i].$$disabled = false;
	                }
	                filterGroupItem.$$isClosed = true;
	            }
	            filterGroupItem.setItemInUse(!filterGroupItem.$$isClosed);
	        };
	        _this.newFilterItem = function (filterItemGroup, setItemInUse, prepareForFilterGroup) {
	            if (angular.isUndefined(prepareForFilterGroup)) {
	                prepareForFilterGroup = false;
	            }
	            var filterItem = {
	                displayPropertyIdentifier: "",
	                propertyIdentifier: "",
	                comparisonOperator: "",
	                value: "",
	                $$disabled: false,
	                $$isClosed: true,
	                $$isNew: true,
	                $$siblingItems: filterItemGroup,
	                setItemInUse: setItemInUse
	            };
	            if (filterItemGroup.length !== 0) {
	                filterItem.logicalOperator = "AND";
	            }
	            if (prepareForFilterGroup === true) {
	                filterItem.$$prepareForFilterGroup = true;
	            }
	            filterItemGroup.push(filterItem);
	            _this.selectFilterItem(filterItem);
	            return (filterItemGroup.length - 1);
	        };
	        _this.newFilterGroupItem = function (filterItemGroup, setItemInUse) {
	            var filterGroupItem = {
	                filterGroup: [],
	                $$disabled: "false",
	                $$isClosed: "true",
	                $$siblingItems: filterItemGroup,
	                $$isNew: "true",
	                setItemInUse: setItemInUse
	            };
	            if (filterItemGroup.length !== 0) {
	                filterGroupItem.logicalOperator = "AND";
	            }
	            filterItemGroup.push(filterGroupItem);
	            _this.selectFilterGroupItem(filterGroupItem);
	            _this.newFilterItem(filterGroupItem.filterGroup, setItemInUse, undefined);
	        };
	        _this.transplantFilterItemIntoFilterGroup = function (filterGroup, filterItem) {
	            var filterGroupItem = {
	                filterGroup: [],
	                $$disabled: "false",
	                $$isClosed: "true",
	                $$isNew: "true"
	            };
	            if (angular.isDefined(filterItem.logicalOperator)) {
	                filterGroupItem.logicalOperator = filterItem.logicalOperator;
	                delete filterItem.logicalOperator;
	            }
	            filterGroupItem.setItemInUse = filterItem.setItemInUse;
	            filterGroupItem.$$siblingItems = filterItem.$$siblingItems;
	            filterItem.$$siblingItems = [];
	            filterGroup.pop(filterGroup.indexOf(filterItem));
	            filterItem.$$prepareForFilterGroup = false;
	            filterGroupItem.filterGroup.push(filterItem);
	            filterGroup.push(filterGroupItem);
	        };
	        _this.formatFilterPropertiesList = function (filterPropertiesList, propertyIdentifier) {
	            _this.$log.debug('format Filter Properties List arguments 2');
	            _this.$log.debug(filterPropertiesList);
	            _this.$log.debug(propertyIdentifier);
	            var simpleGroup = {
	                $$group: 'simple',
	                displayPropertyIdentifier: '-----------------'
	            };
	            filterPropertiesList.data.push(simpleGroup);
	            var drillDownGroup = {
	                $$group: 'drilldown',
	                displayPropertyIdentifier: '-----------------'
	            };
	            filterPropertiesList.data.push(drillDownGroup);
	            var compareCollections = {
	                $$group: 'compareCollections',
	                displayPropertyIdentifier: '-----------------'
	            };
	            filterPropertiesList.data.push(compareCollections);
	            var attributeCollections = {
	                $$group: 'attribute',
	                displayPropertyIdentifier: '-----------------'
	            };
	            filterPropertiesList.data.push(attributeCollections);
	            for (var i in filterPropertiesList.data) {
	                if (angular.isDefined(filterPropertiesList.data[i].ormtype)) {
	                    if (angular.isDefined(filterPropertiesList.data[i].attributeID)) {
	                        filterPropertiesList.data[i].$$group = 'attribute';
	                    }
	                    else {
	                        filterPropertiesList.data[i].$$group = 'simple';
	                    }
	                }
	                if (angular.isDefined(filterPropertiesList.data[i].fieldtype)) {
	                    if (filterPropertiesList.data[i].fieldtype === 'id') {
	                        filterPropertiesList.data[i].$$group = 'simple';
	                    }
	                    if (filterPropertiesList.data[i].fieldtype === 'many-to-one') {
	                        filterPropertiesList.data[i].$$group = 'drilldown';
	                    }
	                    if (filterPropertiesList.data[i].fieldtype === 'many-to-many' || filterPropertiesList.data[i].fieldtype === 'one-to-many') {
	                        filterPropertiesList.data[i].$$group = 'compareCollections';
	                    }
	                }
	                filterPropertiesList.data[i].propertyIdentifier = propertyIdentifier + '.' + filterPropertiesList.data[i].name;
	            }
	            filterPropertiesList.data = _this._orderBy(filterPropertiesList.data, ['-$$group', 'propertyIdentifier'], false);
	        };
	        _this.orderBy = function (propertiesList, predicate, reverse) {
	            return _this._orderBy(propertiesList, predicate, reverse);
	        };
	        _this.$filter = $filter;
	        _this.$log = $log;
	        _this._collection = null;
	        _this._collectionConfig = null;
	        _this._filterPropertiesList = {};
	        _this._filterCount = 0;
	        _this._orderBy = $filter('orderBy');
	        return _this;
	    }
	    return CollectionService;
	}(baseentityservice_1.BaseEntityService));
	exports.CollectionService = CollectionService;


/***/ }),
/* 432 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var CollectionController = (function () {
	    //@ngInject
	    function CollectionController($scope, $location, $log, $timeout, $hibachi, collectionService, metadataService, selectionService, paginationService, collectionConfigService, appConfig) {
	        //init values
	        //$scope.collectionTabs =[{tabTitle:'PROPERTIES',isActive:true},{tabTitle:'FILTERS ('+filterCount+')',isActive:false},{tabTitle:'DISPLAY OPTIONS',isActive:false}];
	        $scope.$id = "collectionsController";
	        /*used til we convert to use route params*/
	        var QueryString = function () {
	            // This function is anonymous, is executed immediately and
	            // the return value is assigned to QueryString!
	            var query_string = {};
	            var query = window.location.search.substring(1);
	            var vars = query.split("&");
	            for (var i = 0; i < vars.length; i++) {
	                var pair = vars[i].split("=");
	                // If first entry with this name
	                if (typeof query_string[pair[0]] === "undefined") {
	                    query_string[pair[0]] = pair[1];
	                    // If second entry with this name
	                }
	                else if (typeof query_string[pair[0]] === "string") {
	                    var arr = [query_string[pair[0]], pair[1]];
	                    query_string[pair[0]] = arr;
	                    // If third or later entry with this name
	                }
	                else {
	                    query_string[pair[0]].push(pair[1]);
	                }
	            }
	            return query_string;
	        }();
	        //get url param to retrieve collection listing
	        $scope.collectionID = QueryString.collectionID;
	        $scope.paginator = paginationService.createPagination();
	        $scope.appendToCollection = function () {
	            if ($scope.paginator.getPageShow() === 'Auto') {
	                $log.debug('AppendToCollection');
	                if ($scope.autoScrollPage < $scope.collection.totalPages) {
	                    $scope.autoScrollDisabled = true;
	                    $scope.autoScrollPage++;
	                    var collectionListingPromise = $hibachi.getEntity('collection', { id: $scope.collectionID, currentPage: $scope.paginator.autoScrollPage, pageShow: 50 });
	                    collectionListingPromise.then(function (value) {
	                        $scope.collection.pageRecords = $scope.collection.pageRecords.concat(value.pageRecords);
	                        $scope.autoScrollDisabled = false;
	                    }, function (reason) {
	                    });
	                }
	            }
	        };
	        $scope.keywords = "";
	        $scope.loadingCollection = false;
	        var searchPromise;
	        $scope.searchCollection = function () {
	            if (searchPromise) {
	                $timeout.cancel(searchPromise);
	            }
	            searchPromise = $timeout(function () {
	                $log.debug('search with keywords');
	                $log.debug($scope.keywords);
	                //Set current page here so that the pagination does not break when getting collection
	                $scope.paginator.setCurrentPage(1);
	                $scope.loadingCollection = true;
	            }, 500);
	        };
	        $scope.getCollection = function () {
	            var pageShow = 50;
	            if ($scope.paginator.getPageShow() !== 'Auto') {
	                pageShow = $scope.paginator.getPageShow();
	            }
	            //			$scope.currentPage = $scope.pagination.getCurrentPage();
	            var collectionListingPromise = $hibachi.getEntity('collection', { id: $scope.collectionID, currentPage: $scope.paginator.getCurrentPage(), pageShow: pageShow, keywords: $scope.keywords });
	            collectionListingPromise.then(function (value) {
	                $scope.collection = value;
	                $scope.paginator.setPageRecordsInfo($scope.collection);
	                $scope.collectionInitial = angular.copy($scope.collection);
	                if (angular.isUndefined($scope.collectionConfig)) {
	                    var test = collectionConfigService.newCollectionConfig();
	                    test.loadJson(value.collectionConfig);
	                    $scope.collectionConfig = test.getCollectionConfig();
	                }
	                //check if we have any filter Groups
	                if (angular.isUndefined($scope.collectionConfig.filterGroups)) {
	                    $scope.collectionConfig.filterGroups = [
	                        {
	                            filterGroup: []
	                        }
	                    ];
	                }
	                collectionService.setFilterCount(filterItemCounter());
	                $scope.loadingCollection = false;
	            }, function (reason) {
	            });
	            return collectionListingPromise;
	        };
	        $scope.paginator.getCollection = $scope.getCollection;
	        $scope.getCollection();
	        var unbindCollectionObserver = $scope.$watch('collection', function (newValue, oldValue) {
	            if (newValue !== oldValue) {
	                if (angular.isUndefined($scope.filterPropertiesList)) {
	                    $scope.filterPropertiesList = {};
	                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName($scope.collectionConfig.baseEntityAlias);
	                    filterPropertiesPromise.then(function (value) {
	                        metadataService.setPropertiesList(value, $scope.collectionConfig.baseEntityAlias);
	                        $scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias($scope.collectionConfig.baseEntityAlias);
	                        metadataService.formatPropertiesList($scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias], $scope.collectionConfig.baseEntityAlias);
	                    });
	                }
	                unbindCollectionObserver();
	            }
	        });
	        $scope.setCollectionForm = function (form) {
	            $scope.collectionForm = form;
	        };
	        $scope.collectionDetails = {
	            isOpen: false,
	            openCollectionDetails: function () {
	                $scope.collectionDetails.isOpen = true;
	            }
	        };
	        $scope.errorMessage = {};
	        var filterItemCounter = function (filterGroupArray) {
	            var filterItemCount = 0;
	            if (!angular.isDefined(filterGroupArray)) {
	                filterGroupArray = $scope.collectionConfig.filterGroups[0].filterGroup;
	            }
	            //Start out loop
	            for (var index in filterGroupArray) {
	                //If filter isn't new then increment the count
	                if (!filterGroupArray[index].$$isNew
	                    && !angular.isDefined(filterGroupArray[index].filterGroup)) {
	                    filterItemCount++;
	                    // If there are nested filter groups run introspectively
	                }
	                else if (angular.isDefined(filterGroupArray[index].filterGroup)) {
	                    //Call function recursively
	                    filterItemCount += filterItemCounter(filterGroupArray[index].filterGroup);
	                    //Otherwise make like the foo fighters and "Break Out!"
	                }
	                else {
	                    break;
	                }
	            }
	            return filterItemCount;
	        };
	        $scope.saveCollection = function () {
	            $timeout(function () {
	                $log.debug('saving Collection');
	                var entityName = 'collection';
	                var collection = $scope.collection;
	                $log.debug($scope.collectionConfig);
	                if (isFormValid($scope.collectionForm)) {
	                    if (angular.isDefined($scope.collectionConfig)
	                        && angular.isDefined($scope.collectionConfig.groupBys)
	                        && $scope.collectionConfig.groupBys.split(',').length != $scope.collectionConfig.columns.length) {
	                        var groupbyArray = $scope.collectionConfig.groupBys.split(',');
	                        for (var column = 0; column < $scope.collectionConfig.columns.length; column++) {
	                            if (groupbyArray.indexOf($scope.collectionConfig.columns[column].propertyIdentifier) == -1) {
	                                groupbyArray.push($scope.collectionConfig.columns[column].propertyIdentifier);
	                            }
	                        }
	                        $scope.collectionConfig.groupBys = groupbyArray.join(',');
	                    }
	                    var collectionConfigString = collectionService.stringifyJSON($scope.collectionConfig);
	                    $log.debug(collectionConfigString);
	                    var data = angular.copy(collection);
	                    data.collectionConfig = collectionConfigString;
	                    //has to be removed in order to save transient correctly
	                    delete data.pageRecords;
	                    var saveCollectionPromise = $hibachi.saveEntity(entityName, collection.collectionID, data, 'save');
	                    saveCollectionPromise.then(function (value) {
	                        $scope.errorMessage = {};
	                        //Set current page here so that the pagination does not break when getting collection
	                        $scope.paginator.setCurrentPage(1);
	                        $scope.collectionDetails.isOpen = false;
	                    }, function (reason) {
	                        //revert to original
	                        angular.forEach(reason.errors, function (value, key) {
	                            $scope.collectionForm[key].$invalid = true;
	                            $scope.errorMessage[key] = value[0];
	                        });
	                        //$scope.collection = angular.copy($scope.collectionInitial);
	                    });
	                }
	                collectionService.setFilterCount(filterItemCounter());
	            });
	        };
	        var isFormValid = function (angularForm) {
	            $log.debug('validateForm');
	            var formValid = true;
	            for (var field in angularForm) {
	                // look at each form input with a name attribute set
	                // checking if it is pristine and not a '$' special field
	                if (field[0] != '$') {
	                    // need to use formValid variable instead of formController.$valid because checkbox dropdown is not an input
	                    // and somehow formController didn't invalid if checkbox dropdown is invalid
	                    if (angularForm[field].$invalid) {
	                        formValid = false;
	                        for (var error in angularForm[field].$error) {
	                            if (error == 'required') {
	                                $scope.errorMessage[field] = 'This field is required';
	                            }
	                        }
	                    }
	                    if (angularForm[field].$pristine) {
	                        if (angular.isUndefined(angularForm[field].$viewValue)) {
	                            angularForm[field].$setViewValue("");
	                        }
	                        else {
	                            angularForm[field].$setViewValue(angularForm[field].$viewValue);
	                        }
	                    }
	                }
	            }
	            return formValid;
	        };
	        $scope.copyExistingCollection = function () {
	            $scope.collection.collectionConfig = $scope.selectedExistingCollection;
	        };
	        $scope.setSelectedExistingCollection = function (selectedExistingCollection) {
	            $scope.selectedExistingCollection = selectedExistingCollection;
	        };
	        $scope.setSelectedFilterProperty = function (selectedFilterProperty) {
	            $scope.selectedFilterProperty = selectedFilterProperty;
	        };
	        $scope.filterCount = collectionService.getFilterCount;
	        //export action
	        $scope.exportCollection = function () {
	            var url = '/?' + appConfig.action + '=main.collectionExport&collectionExportID=' + $scope.collectionID + '&downloadReport=1';
	            var data = {
	                "ids": selectionService.getSelections('collectionSelection'),
	                "keywords": $scope.keywords
	            };
	            console.log('exportData', data);
	            var target = "downloadCollection";
	            $('body').append('<form action="' + url + '" method="post" target="' + target + '" id="postToIframe"></form>');
	            $.each(data, function (n, v) {
	                $('#postToIframe').append('<input type="hidden" name="' + n + '" value="' + v + '" />');
	            });
	            $('#postToIframe').submit().remove();
	        };
	    }
	    return CollectionController;
	}());
	exports.CollectionController = CollectionController;
	// 'use strict';
	// angular.module('slatwalladmin')
	// //using $location to get url params, this will probably change to using routes eventually
	// .controller('collections', [
	// 	'$scope',
	// '$location',
	// '$log',
	// '$timeout',
	// '$hibachi',
	// 'collectionService',
	// 'metadataService',
	// 'selectionService',
	// 'paginationService',
	// 	function(
	// 		$scope,
	// $location,
	// $log,
	// $timeout,
	// $hibachi,
	// collectionService,
	// metadataService,
	// selectionService,
	// paginationService
	// 	){
	//
	// 	}
	// ]);


/***/ }),
/* 433 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var CreateCollection = (function () {
	    //@ngInject
	    function CreateCollection($scope, $log, $timeout, $hibachi, collectionService, metadataService, paginationService, dialogService, observerService, selectionService, collectionConfigService, rbkeyService, $window) {
	        $window.scrollTo(0, 0);
	        $scope.params = dialogService.getCurrentDialog().params;
	        $scope.readOnly = angular.isDefined($scope.params.readOnly) && $scope.params.readOnly == true;
	        $scope.myCollection = collectionConfigService.newCollectionConfig($scope.params.entityName);
	        var hibachiConfig = $hibachi.getConfig();
	        if ($scope.params.entityName == 'Type' && angular.isUndefined($scope.params.entityId) && angular.isDefined($scope.params.parentEntity)) {
	            $scope.params.parentEntity = $scope.params.parentEntity.replace(new RegExp('^' + hibachiConfig.applicationKey, 'i'), '');
	            var systemCode = $scope.params.parentEntity.charAt(0).toLowerCase() + $scope.params.parentEntity.slice(1) + 'Type';
	            $scope.myCollection.addFilter('parentType.systemCode', systemCode);
	        }
	        $scope.keywords = '';
	        $scope.paginator = paginationService.createPagination();
	        //$scope.isRadio = true;
	        $scope.hideEditView = true;
	        //$scope.closeSaving = true;
	        $scope.hasSelection = selectionService.getSelectionCount;
	        $scope.idsSelected = selectionService.getSelections;
	        $scope.unselectAll = function () {
	            selectionService.clearSelections('collectionSelection');
	            $scope.getCollection();
	        };
	        $scope.newCollection = $hibachi.newCollection();
	        $scope.newCollection.data.collectionCode = $scope.params.entityName + "-" + new Date().valueOf();
	        $scope.newCollection.data.collectionObject = $scope.params.entityName;
	        if (angular.isDefined($scope.params.entityId)) {
	            $scope.newCollection.data.collectionID = $scope.params.entityId;
	            $timeout(function () {
	                $scope.newCollection.forms['form.createCollection'].$setDirty();
	            });
	        }
	        if (angular.isDefined($scope.params.collectionName)) {
	            $scope.newCollection.data.collectionName = $scope.params.collectionName;
	            $timeout(function () {
	                $scope.newCollection.forms['form.createCollection'].$setDirty();
	            });
	        }
	        $scope.saveCollection = function () {
	            $scope.myCollection.loadJson($scope.collectionConfig);
	            $scope.getCollection();
	        };
	        $scope.getCollection = function () {
	            $scope.closeSaving = true;
	            $scope.myCollection.setPageShow($scope.paginator.getPageShow());
	            $scope.myCollection.setCurrentPage($scope.paginator.getCurrentPage());
	            $scope.myCollection.setKeywords($scope.keywords);
	            var collectionOptions;
	            if (angular.isDefined($scope.params.entityId)) {
	                collectionOptions = {
	                    id: $scope.params.entityId,
	                    currentPage: $scope.paginator.getCurrentPage(),
	                    pageShow: $scope.paginator.getPageShow(),
	                    keywords: $scope.keywords
	                };
	            }
	            else {
	                collectionOptions = $scope.myCollection.getOptions();
	            }
	            $log.debug($scope.myCollection.getOptions());
	            var collectionListingPromise = $hibachi.getEntity($scope.myCollection.getEntityName(), collectionOptions);
	            collectionListingPromise.then(function (value) {
	                if (angular.isDefined($scope.params.entityId)) {
	                    $scope.newCollection.data.collectionName = value.collectionName;
	                }
	                $scope.collection = value;
	                $scope.collection.collectionObject = $scope.myCollection.baseEntityName;
	                $scope.collectionInitial = angular.copy($scope.collection);
	                $scope.paginator.setRecordsCount($scope.collection.recordsCount);
	                $scope.paginator.setPageRecordsInfo($scope.collection);
	                if (angular.isUndefined($scope.myCollection.columns)) {
	                    var colConfig = angular.fromJson(value.collectionConfig);
	                    colConfig.baseEntityName = colConfig.baseEntityName.replace(new RegExp('^' + hibachiConfig.applicationKey, 'i'), '');
	                    $scope.myCollection.loadJson(colConfig);
	                }
	                if (angular.isUndefined($scope.collectionConfig)) {
	                    var tempCollectionConfig = collectionConfigService.newCollectionConfig();
	                    tempCollectionConfig.loadJson(value.collectionConfig);
	                    $scope.collectionConfig = tempCollectionConfig.getCollectionConfig();
	                }
	                if (angular.isUndefined($scope.collectionConfig.filterGroups) || !$scope.collectionConfig.filterGroups.length) {
	                    $scope.collectionConfig.filterGroups = [
	                        {
	                            filterGroup: []
	                        }
	                    ];
	                }
	                collectionService.setFilterCount(filterItemCounter());
	                $scope.loadingCollection = false;
	                $scope.closeSaving = false;
	            }, function (reason) {
	            });
	            return collectionListingPromise;
	        };
	        $scope.paginator.collection = $scope.newCollection;
	        $scope.paginator.getCollection = $scope.getCollection;
	        var unbindCollectionObserver = $scope.$watch('collection', function (newValue, oldValue) {
	            if (newValue !== oldValue) {
	                if (angular.isUndefined($scope.filterPropertiesList)) {
	                    $scope.filterPropertiesList = {};
	                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName($scope.collectionConfig.baseEntityAlias);
	                    filterPropertiesPromise.then(function (value) {
	                        metadataService.setPropertiesList(value, $scope.collectionConfig.baseEntityAlias);
	                        $scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias($scope.collectionConfig.baseEntityAlias);
	                        metadataService.formatPropertiesList($scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias], $scope.collectionConfig.baseEntityAlias);
	                    });
	                }
	                unbindCollectionObserver();
	            }
	        });
	        var filterItemCounter = function (filterGroupArray) {
	            var filterItemCount = 0;
	            if (!angular.isDefined(filterGroupArray)) {
	                filterGroupArray = $scope.collectionConfig.filterGroups[0].filterGroup;
	            }
	            //Start out loop
	            for (var index in filterGroupArray) {
	                //If filter isn't new then increment the count
	                if (!filterGroupArray[index].$$isNew && !angular.isDefined(filterGroupArray[index].filterGroup)) {
	                    filterItemCount++;
	                    // If there are nested filter groups run introspectively
	                }
	                else if (angular.isDefined(filterGroupArray[index].filterGroup)) {
	                    //Call function recursively
	                    filterItemCount += filterItemCounter(filterGroupArray[index].filterGroup);
	                    //Otherwise make like the foo fighters and "Break Out!"
	                }
	                else {
	                    break;
	                }
	            }
	            return filterItemCount;
	        };
	        $scope.getCollection();
	        $scope.copyExistingCollection = function () {
	            $scope.collection.collectionConfig = $scope.selectedExistingCollection;
	        };
	        $scope.setSelectedExistingCollection = function (selectedExistingCollection) {
	            $scope.selectedExistingCollection = selectedExistingCollection;
	        };
	        $scope.setSelectedFilterProperty = function (selectedFilterProperty) {
	            $scope.selectedFilterProperty = selectedFilterProperty;
	        };
	        $scope.loadingCollection = false;
	        var searchPromise;
	        $scope.searchCollection = function () {
	            if (searchPromise) {
	                $timeout.cancel(searchPromise);
	            }
	            searchPromise = $timeout(function () {
	                //$log.debug('search with keywords');
	                //$log.debug($scope.keywords);
	                //Set current page here so that the pagination does not break when getting collection
	                $scope.paginator.setCurrentPage(1);
	                $scope.loadingCollection = true;
	                $scope.getCollection();
	            }, 500);
	        };
	        $scope.filterCount = collectionService.getFilterCount;
	        //
	        $scope.hideExport = true;
	        $scope.saveNewCollection = function ($index) {
	            if ($scope.closeSaving)
	                return;
	            $scope.closeSaving = true;
	            if (!angular.isUndefined(selectionService.getSelections('collectionSelection'))
	                && (selectionService.getSelections('collectionSelection').length > 0)) {
	                $scope.collectionConfig.filterGroups[0].filterGroup = [
	                    {
	                        "displayPropertyIdentifier": rbkeyService.getRBKey("entity." + $scope.myCollection.baseEntityName.toLowerCase() + "." + $scope.myCollection.collection.$$getIDName().toLowerCase()),
	                        "propertyIdentifier": $scope.myCollection.baseEntityAlias + "." + $scope.myCollection.collection.$$getIDName(),
	                        "comparisonOperator": "in",
	                        "value": selectionService.getSelections('collectionSelection').join(),
	                        "displayValue": selectionService.getSelections('collectionSelection').join(),
	                        "ormtype": "string",
	                        "fieldtype": "id",
	                        "conditionDisplay": "In List"
	                    }
	                ];
	            }
	            $scope.newCollection.data.collectionConfig = $scope.collectionConfig;
	            if ($scope.newCollection.data.collectionConfig.baseEntityName.lastIndexOf(hibachiConfig.applicationKey, 0) !== 0) {
	                $scope.newCollection.data.collectionConfig.baseEntityName = hibachiConfig.applicationKey + $scope.newCollection.data.collectionConfig.baseEntityName;
	            }
	            $scope.newCollection.$$save().then(function () {
	                observerService.notify('addCollection', $scope.newCollection.data);
	                selectionService.clearSelection('collectionSelection');
	                dialogService.removePageDialog($index);
	                $scope.closeSaving = false;
	            }, function () {
	                $scope.closeSaving = false;
	            });
	        };
	    }
	    return CreateCollection;
	}());
	exports.CreateCollection = CreateCollection;


/***/ }),
/* 434 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var ConfirmationController = (function () {
	    //@ngInject
	    function ConfirmationController($scope, $log, $modalInstance) {
	        $scope.deleteEntity = function (entity) {
	            $log.debug("Deleting an entity.");
	            $log.debug($scope.entity);
	            this.close();
	        };
	        $scope.fireCallback = function (callbackFunction) {
	            callbackFunction();
	            this.close();
	        };
	        /**
	        * Closes the modal window
	        */
	        $scope.close = function () {
	            $modalInstance.close();
	        };
	        /**
	        * Cancels the modal window
	        */
	        $scope.cancel = function () {
	            $modalInstance.dismiss("cancel");
	        };
	    }
	    return ConfirmationController;
	}());
	exports.ConfirmationController = ConfirmationController;


/***/ }),
/* 435 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var CollectionCreateController = (function () {
	    //@ngInject
	    function CollectionCreateController($scope, collectionConfigService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.collectionConfigService = collectionConfigService;
	        this.$scope.entity_createcollectionCtrl = {};
	        this.$scope.entity_createcollectionCtrl.baseCollections = [];
	        this.collection = this.collectionConfigService.newCollectionConfig('Collection');
	        this.getBaseCollections('Access');
	        //on select change get collection
	        this.$scope.entity_createcollectionCtrl.collectionObjectChanged = function () {
	            _this.getBaseCollections(_this.$scope.entity_createcollectionCtrl.selectedOption);
	        };
	    }
	    CollectionCreateController.prototype.getBaseCollections = function (baseCollectionObject) {
	        var _this = this;
	        this.collection.clearFilters();
	        this.collection.addFilter('collectionObject', baseCollectionObject);
	        this.collection.getEntity().then(function (res) {
	            _this.$scope.entity_createcollectionCtrl.baseCollections = res.pageRecords;
	        });
	    };
	    return CollectionCreateController;
	}());
	exports.CollectionCreateController = CollectionCreateController;


/***/ }),
/* 436 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCollection = (function () {
	    //@ngInject
	    function SWCollection($http, $compile, $log, hibachiPathBuilder, collectionPartialsPath, collectionService) {
	        return {
	            restrict: 'A',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "collection.html",
	            link: function (scope, $element, $attrs) {
	                scope.tabsUniqueID = Math.floor(Math.random() * 999);
	                scope.toggleCogOpen = $attrs.toggleoption;
	                //Toggles open/close of filters and display options
	                scope.toggleFiltersAndOptions = function () {
	                    if (scope.toggleCogOpen === false) {
	                        scope.toggleCogOpen = true;
	                    }
	                    else {
	                        scope.toggleCogOpen = false;
	                    }
	                };
	            }
	        };
	    }
	    SWCollection.Factory = function () {
	        var directive = function ($http, $compile, $log, hibachiPathBuilder, collectionPartialsPath, collectionService) { return new SWCollection($http, $compile, $log, hibachiPathBuilder, collectionPartialsPath, collectionService); };
	        directive.$inject = [
	            '$http',
	            '$compile',
	            '$log',
	            'hibachiPathBuilder',
	            'collectionPartialsPath',
	            'collectionService'
	        ];
	        return directive;
	    };
	    return SWCollection;
	}());
	exports.SWCollection = SWCollection;


/***/ }),
/* 437 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWAddFilterButtons = (function () {
	    //@ngInject
	    function SWAddFilterButtons($http, $compile, $templateCache, collectionService, collectionPartialsPath, hibachiPathBuilder) {
	        return {
	            require: '^swFilterGroups',
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "addfilterbuttons.html",
	            scope: {
	                itemInUse: "=",
	                readOnly: "="
	            },
	            link: function (scope, element, attrs, filterGroupsController) {
	                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();
	                scope.addFilterItem = function () {
	                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse);
	                };
	                scope.addFilterGroupItem = function () {
	                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse, true);
	                };
	            }
	        };
	    }
	    SWAddFilterButtons.Factory = function () {
	        var directive = function ($http, $compile, $templateCache, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWAddFilterButtons($http, $compile, $templateCache, collectionService, collectionPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$http',
	            '$compile',
	            '$templateCache',
	            'collectionService',
	            'collectionPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWAddFilterButtons;
	}());
	exports.SWAddFilterButtons = SWAddFilterButtons;


/***/ }),
/* 438 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWDisplayOptions = (function () {
	    //@ngInject
	    function SWDisplayOptions($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService) {
	        return {
	            restrict: 'E',
	            transclude: true,
	            scope: {
	                orderBy: "=",
	                columns: '=',
	                joins: "=",
	                groupBys: "=",
	                propertiesList: "=",
	                saveCollection: "&",
	                baseEntityAlias: "=?",
	                baseEntityName: "=?"
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayoptions.html",
	            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
	                    $log.debug('display options initialize');
	                    $scope.breadCrumbs = [{
	                            entityAlias: $scope.baseEntityAlias,
	                            cfc: $scope.baseEntityAlias,
	                            propertyIdentifier: $scope.baseEntityAlias
	                        }];
	                    this.removeColumn = function (columnIndex) {
	                        $log.debug('parent remove column');
	                        $log.debug($scope.columns);
	                        if ($scope.columns.length) {
	                            $scope.columns.splice(columnIndex, 1);
	                        }
	                    };
	                    this.getPropertiesList = function () {
	                        return $scope.propertiesList;
	                    };
	                    $scope.addDisplayDialog = {
	                        isOpen: false,
	                        toggleDisplayDialog: function () {
	                            $scope.addDisplayDialog.isOpen = !$scope.addDisplayDialog.isOpen;
	                        }
	                    };
	                    var getTitleFromProperty = function (selectedProperty) {
	                        var baseEntityCfcName = $scope.baseEntityName.replace('Slatwall', '').charAt(0).toLowerCase() + $scope.baseEntityName.replace('Slatwall', '').slice(1);
	                        var propertyIdentifier = selectedProperty.propertyIdentifier;
	                        var title = '';
	                        var propertyIdentifierArray = propertyIdentifier.replace(/^_/, '').split(/[._]+/);
	                        var currentEntity;
	                        var currentEntityInstance;
	                        var prefix = 'entity.';
	                        if (selectedProperty.$$group == "attribute") {
	                            return selectedProperty.displayPropertyIdentifier;
	                        }
	                        angular.forEach(propertyIdentifierArray, function (propertyIdentifierItem, key) {
	                            //pass over the initial item
	                            if (key !== 0) {
	                                if (key === 1) {
	                                    currentEntityInstance = $hibachi['new' + $scope.baseEntityName.replace('Slatwall', '')]();
	                                    currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];
	                                    title += rbkeyService.getRBKey(prefix + baseEntityCfcName + '.' + propertyIdentifierItem);
	                                }
	                                else {
	                                    var currentEntityInstance = $hibachi['new' + currentEntity.cfc.charAt(0).toUpperCase() + currentEntity.cfc.slice(1)]();
	                                    currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];
	                                    title += rbkeyService.getRBKey(prefix + currentEntityInstance.metaData.className + '.' + currentEntity.name);
	                                }
	                                if (key < propertyIdentifierArray.length - 1) {
	                                    title += ' | ';
	                                }
	                            }
	                        });
	                        return title;
	                    };
	                    $scope.addColumn = function (closeDialog) {
	                        var selectedProperty = $scope.selectedProperty;
	                        if (angular.isDefined($scope.selectedAggregate)) {
	                            selectedProperty = $scope.selectedAggregate;
	                        }
	                        if (selectedProperty.$$group === 'simple' || 'attribute' || 'compareCollections') {
	                            $log.debug($scope.columns);
	                            if (angular.isDefined(selectedProperty)) {
	                                var column = {
	                                    title: getTitleFromProperty(selectedProperty),
	                                    propertyIdentifier: selectedProperty.propertyIdentifier,
	                                    isVisible: true,
	                                    isDeletable: true,
	                                    isSearchable: true,
	                                    isExportable: true
	                                };
	                                //only add attributeid if the selectedProperty is attributeid
	                                if (angular.isDefined(selectedProperty.attributeID)) {
	                                    column['attributeID'] = selectedProperty.attributeID;
	                                    column['attributeSetObject'] = selectedProperty.attributeSetObject;
	                                }
	                                if (angular.isDefined(selectedProperty.ormtype)) {
	                                    column['ormtype'] = selectedProperty.ormtype;
	                                }
	                                if (selectedProperty.hb_formattype) {
	                                    column['type'] = selectedProperty.hb_formattype;
	                                }
	                                else {
	                                    column['type'] = 'none';
	                                }
	                                if (angular.isDefined(selectedProperty.aggregate)) {
	                                    column['ormtype'] = 'string';
	                                    column['aggregate'] = {
	                                        aggregateFunction: selectedProperty.aggregate.toUpperCase(),
	                                        aggregateAlias: selectedProperty.propertyIdentifier.split(/[._]+/).pop() + selectedProperty.aggregate.charAt(0).toUpperCase() + selectedProperty.aggregate.slice(1)
	                                    };
	                                    column['title'] += ' ' + rbkeyService.getRBKey('define.' + column['aggregate']['aggregateFunction']);
	                                }
	                                $scope.columns.push(column);
	                                if ((selectedProperty.propertyIdentifier.match(/_/g) || []).length > 1) {
	                                    var PIlimit = selectedProperty.propertyIdentifier.length;
	                                    if (selectedProperty.propertyIdentifier.indexOf('.') != -1) {
	                                        PIlimit = selectedProperty.propertyIdentifier.indexOf('.');
	                                    }
	                                    var propertyIdentifierJoins = selectedProperty.propertyIdentifier.substring(1, PIlimit);
	                                    var propertyIdentifierParts = propertyIdentifierJoins.split('_');
	                                    var current_collection = $hibachi.getEntityExample($scope.baseEntityName);
	                                    var _propertyIdentifier = '';
	                                    var joins = [];
	                                    if (angular.isDefined($scope.joins)) {
	                                        joins = $scope.joins;
	                                    }
	                                    for (var i = 1; i < propertyIdentifierParts.length; i++) {
	                                        if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
	                                            current_collection = $hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
	                                            _propertyIdentifier += '_' + propertyIdentifierParts[i];
	                                            var newJoin = {
	                                                associationName: _propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1),
	                                                alias: '_' + propertyIdentifierParts[0] + _propertyIdentifier
	                                            };
	                                            var joinFound = false;
	                                            for (var j = 0; j < joins.length; j++) {
	                                                if (joins[j].alias === newJoin.alias) {
	                                                    joinFound = true;
	                                                    break;
	                                                }
	                                            }
	                                            if (!joinFound) {
	                                                joins.push(newJoin);
	                                            }
	                                        }
	                                    }
	                                    $scope.joins = joins;
	                                    if (angular.isUndefined($scope.groupBys) || $scope.groupBys.split(',').length != $scope.columns.length) {
	                                        var groupbyArray = angular.isUndefined($scope.groupBys) ? [] : $scope.groupBys.split(',');
	                                        for (var col = 0; col < $scope.columns.length; col++) {
	                                            if ('attributeID' in $scope.columns[col])
	                                                continue;
	                                            if (groupbyArray.indexOf($scope.columns[col].propertyIdentifier) == -1) {
	                                                groupbyArray.push($scope.columns[col].propertyIdentifier);
	                                            }
	                                        }
	                                        $scope.groupBys = groupbyArray.join(',');
	                                    }
	                                }
	                                $scope.saveCollection();
	                                if (angular.isDefined(closeDialog) && closeDialog === true) {
	                                    $scope.addDisplayDialog.toggleDisplayDialog();
	                                    $scope.selectBreadCrumb(0);
	                                }
	                            }
	                        }
	                    };
	                    $scope.selectBreadCrumb = function (breadCrumbIndex) {
	                        //splice out array items above index
	                        var removeCount = $scope.breadCrumbs.length - 1 - breadCrumbIndex;
	                        $scope.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
	                        $scope.selectedPropertyChanged(null);
	                    };
	                    var unbindBaseEntityAlias = $scope.$watch('baseEntityAlias', function (newValue, oldValue) {
	                        if (newValue !== oldValue) {
	                            $scope.breadCrumbs = [{
	                                    entityAlias: $scope.baseEntityAlias,
	                                    cfc: $scope.baseEntityAlias,
	                                    propertyIdentifier: $scope.baseEntityAlias
	                                }];
	                            unbindBaseEntityAlias();
	                        }
	                    });
	                    $scope.selectedPropertyChanged = function (selectedProperty, aggregate) {
	                        // drill down or select field?
	                        if (!aggregate) {
	                            $scope.selectedProperty = selectedProperty;
	                            $scope.selectedAggregate = undefined;
	                        }
	                        else {
	                            $scope.selectedAggregate = selectedProperty;
	                        }
	                    };
	                    jQuery(function ($) {
	                        var panelList = angular.element($element).children('ul');
	                        panelList.sortable({
	                            // Only make the .panel-heading child elements support dragging.
	                            // Omit this to make then entire <li>...</li> draggable.
	                            handle: '.s-pannel-name',
	                            update: function (event, ui) {
	                                var tempColumnsArray = [];
	                                $('.s-pannel-name', panelList).each(function (index, elem) {
	                                    var newIndex = $(elem).attr('j-column-index');
	                                    var columnItem = $scope.columns[newIndex];
	                                    tempColumnsArray.push(columnItem);
	                                });
	                                $scope.$apply(function () {
	                                    $scope.columns = tempColumnsArray;
	                                });
	                                $scope.saveCollection();
	                            }
	                        });
	                    });
	                    /*var unbindBaseEntityAlaisWatchListener = scope.$watch('baseEntityAlias',function(){
	                     $("select").selectBoxIt();
	                     unbindBaseEntityAlaisWatchListener();
	                     });*/
	                }]
	        };
	    }
	    SWDisplayOptions.Factory = function () {
	        var directive = function ($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService) { return new SWDisplayOptions($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            'hibachiPathBuilder',
	            'collectionPartialsPath',
	            'rbkeyService'
	        ];
	        return directive;
	    };
	    return SWDisplayOptions;
	}());
	exports.SWDisplayOptions = SWDisplayOptions;


/***/ }),
/* 439 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWDisplayItem = (function () {
	    //@ngInject
	    function SWDisplayItem($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) {
	        return {
	            require: '^swDisplayOptions',
	            restrict: 'A',
	            scope: {
	                selectedProperty: "=",
	                propertiesList: "=",
	                breadCrumbs: "=",
	                selectedPropertyChanged: "&"
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayitem.html",
	            link: function (scope, element, attrs, displayOptionsController) {
	                scope.showDisplayItem = false;
	                scope.selectedDisplayOptionChanged = function (selectedDisplayOption) {
	                    var breadCrumb = {
	                        entityAlias: scope.selectedProperty.name,
	                        cfc: scope.selectedProperty.cfc,
	                        propertyIdentifier: scope.selectedProperty.propertyIdentifier
	                    };
	                    scope.breadCrumbs.push(breadCrumb);
	                    scope.selectedPropertyChanged({ selectedProperty: selectedDisplayOption });
	                };
	                scope.$watch('selectedProperty', function (selectedProperty) {
	                    if (angular.isDefined(selectedProperty)) {
	                        if (angular.isUndefined(scope.propertiesList[selectedProperty.propertyIdentifier])) {
	                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedProperty.cfc);
	                            filterPropertiesPromise.then(function (value) {
	                                metadataService.setPropertiesList(value, selectedProperty.propertyIdentifier);
	                                scope.propertiesList[selectedProperty.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(selectedProperty.propertyIdentifier);
	                                metadataService.formatPropertiesList(scope.propertiesList[selectedProperty.propertyIdentifier], selectedProperty.propertyIdentifier);
	                            }, function (reason) {
	                            });
	                        }
	                    }
	                });
	            }
	        };
	    }
	    SWDisplayItem.Factory = function () {
	        var directive = function ($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWDisplayItem($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder); };
	        directive.$inject = [
	            '$hibachi',
	            'collectionPartialsPath',
	            'metadataService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWDisplayItem;
	}());
	exports.SWDisplayItem = SWDisplayItem;


/***/ }),
/* 440 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWDisplayItemAggregate = (function () {
	    //@ngInject
	    function SWDisplayItemAggregate($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) {
	        return {
	            require: '^swDisplayOptions',
	            restrict: 'A',
	            scope: {
	                selectedProperty: "=",
	                propertiesList: "=",
	                breadCrumbs: "=",
	                selectedPropertyChanged: "&"
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "displayitemaggregate.html",
	            link: function (scope, element, attrs, displayOptionsController) {
	                scope.showDisplayItem = false;
	                scope.aggegate = {};
	                scope.aggegate.selectedAggregate = '';
	                scope.aggregateOptions = [
	                    { id: 'average', value: 'Average' },
	                    { id: 'count', value: 'Count' },
	                    { id: 'sum', value: 'Sum' }
	                ];
	                scope.selectAggregate = function (aggregate) {
	                    if (aggregate == 'count') {
	                        scope.selectedProperty.aggregate = aggregate;
	                        scope.selectedPropertyChanged({ selectedProperty: scope.selectedProperty });
	                    }
	                    else {
	                        scope.aggegate.currentObject = scope.selectedProperty.cfc;
	                    }
	                };
	                scope.selectedDisplayOptionChanged = function (selectedDisplayOption) {
	                    selectedDisplayOption.aggregate = scope.aggegate.selectedAggregate;
	                    selectedDisplayOption.aggregateObject = scope.aggegate.currentObject;
	                    scope.selectedPropertyChanged({ selectedProperty: selectedDisplayOption });
	                };
	                scope.$watch('selectedProperty', function (selectedProperty) {
	                    if (angular.isDefined(selectedProperty)) {
	                        if (angular.isUndefined(scope.propertiesList[selectedProperty.propertyIdentifier])) {
	                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedProperty.cfc);
	                            filterPropertiesPromise.then(function (value) {
	                                metadataService.setPropertiesList(value, selectedProperty.propertyIdentifier);
	                                scope.propertiesList[selectedProperty.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(selectedProperty.propertyIdentifier);
	                                metadataService.formatPropertiesList(scope.propertiesList[selectedProperty.propertyIdentifier], selectedProperty.propertyIdentifier);
	                            }, function (reason) {
	                            });
	                        }
	                        scope.showDisplayItem = true;
	                    }
	                });
	            }
	        };
	    }
	    SWDisplayItemAggregate.Factory = function () {
	        var directive = function ($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWDisplayItemAggregate($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder); };
	        directive.$inject = [
	            '$hibachi',
	            'collectionPartialsPath',
	            'metadataService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWDisplayItemAggregate;
	}());
	exports.SWDisplayItemAggregate = SWDisplayItemAggregate;


/***/ }),
/* 441 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCollectionTable = (function () {
	    //@ngInject
	    function SWCollectionTable($http, $compile, $log, hibachiPathBuilder, collectionPartialsPath, paginationService, selectionService, $hibachi) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "collectiontable.html",
	            scope: {
	                collection: "=",
	                collectionConfig: "=",
	                isRadio: "=?",
	                //angularLink:true || false
	                angularLinks: "=?"
	            },
	            link: function (scope, element, attrs) {
	                if (angular.isUndefined(scope.angularLinks)) {
	                    scope.angularLinks = false;
	                }
	                scope.collectionObject = $hibachi['new' + scope.collection.collectionObject]();
	                var escapeRegExp = function (str) {
	                    return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
	                };
	                scope.replaceAll = function (str, find, replace) {
	                    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
	                };
	                /*
	                 * Handles setting the key on the data.
	                 * */
	                angular.forEach(scope.collectionConfig.columns, function (column) {
	                    $log.debug("Config Key : " + column);
	                    column.key = column.propertyIdentifier.replace(/\./g, '_').replace(scope.collectionConfig.baseEntityAlias + '_', '');
	                });
	                scope.addSelection = function (selectionid, selection) {
	                    selectionService.addSelection(selectionid, selection);
	                };
	            }
	        };
	    }
	    SWCollectionTable.Factory = function () {
	        var directive = function ($http, $compile, $log, hibachiPathBuilder, collectionPartialsPath, paginationService, selectionService, $hibachi) { return new SWCollectionTable($http, $compile, $log, hibachiPathBuilder, collectionPartialsPath, paginationService, selectionService, $hibachi); };
	        directive.$inject = [
	            '$http',
	            '$compile',
	            '$log',
	            'hibachiPathBuilder',
	            'collectionPartialsPath',
	            'paginationService',
	            'selectionService',
	            '$hibachi'
	        ];
	        return directive;
	    };
	    return SWCollectionTable;
	}());
	exports.SWCollectionTable = SWCollectionTable;


/***/ }),
/* 442 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWColumnItem = (function () {
	    function SWColumnItem($log, hibachiPathBuilder, collectionPartialsPath) {
	        return {
	            restrict: 'A',
	            require: "^swDisplayOptions",
	            scope: {
	                column: "=",
	                columns: "=",
	                columnIndex: "=",
	                saveCollection: "&",
	                propertiesList: "=",
	                orderBy: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "columnitem.html",
	            link: function (scope, element, attrs, displayOptionsController) {
	                scope.editingDisplayTitle = false;
	                scope.editDisplayTitle = function () {
	                    if (angular.isUndefined(scope.column.displayTitle) || !scope.column.displayTitle.length) {
	                        scope.column.displayTitle = scope.column.title;
	                    }
	                    scope.previousDisplayTitle = scope.column.displayTitle;
	                    scope.editingDisplayTitle = true;
	                };
	                scope.saveDisplayTitle = function () {
	                    scope.saveCollection();
	                    scope.editingDisplayTitle = false;
	                };
	                scope.cancelDisplayTitle = function () {
	                    scope.column.displayTitle = scope.previousDisplayTitle;
	                    scope.editingDisplayTitle = false;
	                };
	                $log.debug('displayOptionsController');
	                if (angular.isUndefined(scope.column.sorting)) {
	                    scope.column.sorting = {
	                        active: false,
	                        sortOrder: 'asc',
	                        priority: 0
	                    };
	                }
	                scope.toggleVisible = function (column) {
	                    $log.debug('toggle visible');
	                    if (angular.isUndefined(column.isVisible)) {
	                        column.isVisible = false;
	                    }
	                    column.isVisible = !column.isVisible;
	                    scope.saveCollection();
	                };
	                scope.toggleSearchable = function (column) {
	                    $log.debug('toggle searchable');
	                    if (angular.isUndefined(column.isSearchable)) {
	                        column.isSearchable = false;
	                    }
	                    column.isSearchable = !column.isSearchable;
	                    scope.saveCollection();
	                };
	                scope.toggleExportable = function (column) {
	                    $log.debug('toggle exporable');
	                    if (angular.isUndefined(column.isExportable)) {
	                        column.isExportable = false;
	                    }
	                    column.isExportable = !column.isExportable;
	                    scope.saveCollection();
	                };
	                var compareByPriority = function (a, b) {
	                    if (angular.isDefined(a.sorting) && angular.isDefined(a.sorting.priority)) {
	                        if (a.sorting.priority < b.sorting.priority) {
	                            return -1;
	                        }
	                        if (a.sorting.priority > b.sorting.priority) {
	                            return 1;
	                        }
	                    }
	                    return 0;
	                };
	                var updateOrderBy = function () {
	                    if (angular.isDefined(scope.columns)) {
	                        var columnsCopy = angular.copy(scope.columns);
	                        columnsCopy.sort(compareByPriority);
	                        scope.orderBy = [];
	                        angular.forEach(columnsCopy, function (column) {
	                            if (angular.isDefined(column.sorting) && column.sorting.active === true) {
	                                var orderBy = {
	                                    propertyIdentifier: column.propertyIdentifier,
	                                    direction: column.sorting.sortOrder
	                                };
	                                scope.orderBy.push(orderBy);
	                            }
	                        });
	                    }
	                };
	                scope.toggleSortable = function (column) {
	                    $log.debug('toggle sortable');
	                    if (angular.isUndefined(column.sorting)) {
	                        column.sorting = {
	                            active: true,
	                            sortOrder: 'asc',
	                            priority: 0
	                        };
	                    }
	                    if (column.sorting.active === true) {
	                        if (column.sorting.sortOrder === 'asc') {
	                            column.sorting.sortOrder = 'desc';
	                        }
	                        else {
	                            removeSorting(column);
	                            column.sorting.active = false;
	                        }
	                    }
	                    else {
	                        column.sorting.active = true;
	                        column.sorting.sortOrder = 'asc';
	                        column.sorting.priority = getActivelySorting().length;
	                    }
	                    updateOrderBy();
	                    scope.saveCollection();
	                };
	                var removeSorting = function (column, saving) {
	                    if (column.sorting.active === true) {
	                        for (var i in scope.columns) {
	                            if (scope.columns[i].sorting.active === true && scope.columns[i].sorting.priority > column.sorting.priority) {
	                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority - 1;
	                            }
	                        }
	                        column.sorting.priority = 0;
	                    }
	                    if (!saving) {
	                        updateOrderBy();
	                        scope.saveCollection();
	                    }
	                };
	                scope.prioritize = function (column) {
	                    if (column.sorting.priority === 1) {
	                        var activelySorting = getActivelySorting();
	                        for (var i in scope.columns) {
	                            if (scope.columns[i].sorting.active === true) {
	                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority - 1;
	                            }
	                        }
	                        column.sorting.priority = activelySorting.length;
	                    }
	                    else {
	                        for (var i in scope.columns) {
	                            if (scope.columns[i].sorting.active === true && scope.columns[i].sorting.priority === column.sorting.priority - 1) {
	                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority + 1;
	                            }
	                        }
	                        column.sorting.priority -= 1;
	                    }
	                    updateOrderBy();
	                    scope.saveCollection();
	                };
	                var getActivelySorting = function () {
	                    var activelySorting = [];
	                    for (var i in scope.columns) {
	                        if (scope.columns[i].sorting.active === true) {
	                            activelySorting.push(scope.columns[i]);
	                        }
	                    }
	                    return activelySorting;
	                };
	                scope.removeColumn = function (columnIndex) {
	                    $log.debug('remove column');
	                    $log.debug(columnIndex);
	                    removeSorting(scope.columns[columnIndex], true);
	                    displayOptionsController.removeColumn(columnIndex);
	                    updateOrderBy();
	                    scope.saveCollection();
	                };
	            }
	        };
	    }
	    SWColumnItem.Factory = function () {
	        var directive = function ($log, hibachiPathBuilder, collectionPartialsPath) { return new SWColumnItem($log, hibachiPathBuilder, collectionPartialsPath); };
	        directive.$inject = [
	            '$log',
	            'hibachiPathBuilder',
	            'collectionPartialsPath'
	        ];
	        return directive;
	    };
	    return SWColumnItem;
	}());
	exports.SWColumnItem = SWColumnItem;


/***/ }),
/* 443 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWConditionCriteria = (function () {
	    function SWConditionCriteria($http, $compile, $templateCache, $log, $hibachi, $filter, workflowPartialsPath, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder) {
	        /* Template info begin*/
	        var getTemplate = function (selectedFilterProperty) {
	            var template = '';
	            var templatePath = '';
	            if (angular.isUndefined(selectedFilterProperty.ormtype) && angular.isUndefined(selectedFilterProperty.fieldtype)) {
	                templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteria.html";
	            }
	            else {
	                var criteriaormtype = selectedFilterProperty.ormtype;
	                var criteriafieldtype = selectedFilterProperty.fieldtype;
	                /*TODO: convert all switches to object literals*/
	                switch (criteriaormtype) {
	                    case 'boolean':
	                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriaboolean.html";
	                        break;
	                    case 'string':
	                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriastring.html";
	                        break;
	                    case 'timestamp':
	                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriadate.html";
	                        break;
	                    case 'big_decimal':
	                    case 'integer':
	                    case 'float':
	                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criterianumber.html";
	                        break;
	                }
	                switch (criteriafieldtype) {
	                    case "many-to-one":
	                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriamanytoone.html";
	                        break;
	                    case "many-to-many":
	                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriamanytomany.html";
	                        break;
	                    case "one-to-many":
	                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriaonetomany.html";
	                        break;
	                }
	            }
	            var templateLoader = $http.get(templatePath, { cache: $templateCache });
	            return templateLoader;
	        };
	        /* Template info end*/
	        /* Options info begin */
	        var getStringOptions = function (type) {
	            var stringOptions = [];
	            if (angular.isUndefined(type)) {
	                type = 'filter';
	            }
	            if (type == 'filter') {
	                stringOptions = [
	                    {
	                        display: "Equals",
	                        comparisonOperator: "="
	                    },
	                    {
	                        display: "Doesn't Equal",
	                        comparisonOperator: "<>"
	                    },
	                    {
	                        display: "Contains",
	                        comparisonOperator: "like",
	                        pattern: "%w%"
	                    },
	                    {
	                        display: "Doesn't Contain",
	                        comparisonOperator: "not like",
	                        pattern: "%w%"
	                    },
	                    {
	                        display: "Starts With",
	                        comparisonOperator: "like",
	                        pattern: "w%"
	                    },
	                    {
	                        display: "Doesn't Start With",
	                        comparisonOperator: "not like",
	                        pattern: "w%"
	                    },
	                    {
	                        display: "Ends With",
	                        comparisonOperator: "like",
	                        pattern: "%w"
	                    },
	                    {
	                        display: "Doesn't End With",
	                        comparisonOperator: "not like",
	                        pattern: "%w"
	                    },
	                    {
	                        display: "In List",
	                        comparisonOperator: "in"
	                    },
	                    {
	                        display: "Not In List",
	                        comparisonOperator: "not in"
	                    },
	                    {
	                        display: "Defined",
	                        comparisonOperator: "is not",
	                        value: "null"
	                    },
	                    {
	                        display: "Not Defined",
	                        comparisonOperator: "is",
	                        value: "null"
	                    }
	                ];
	                if (type === 'condition') {
	                    stringOptions = [
	                        {
	                            display: "Equals",
	                            comparisonOperator: "="
	                        },
	                        {
	                            display: "In List",
	                            comparisonOperator: "in"
	                        },
	                        {
	                            display: "Defined",
	                            comparisonOperator: "is not",
	                            value: "null"
	                        },
	                        {
	                            display: "Not Defined",
	                            comparisonOperator: "is",
	                            value: "null"
	                        }
	                    ];
	                }
	            }
	            return stringOptions;
	        };
	        var getBooleanOptions = function (type) {
	            var booleanOptions = [];
	            if (angular.isUndefined(type)) {
	                type = 'filter';
	            }
	            if (type === 'filter' || type === 'condition') {
	                booleanOptions = [
	                    {
	                        display: "True",
	                        comparisonOperator: "=",
	                        value: "True"
	                    },
	                    {
	                        display: "False",
	                        comparisonOperator: "=",
	                        value: "False"
	                    },
	                    {
	                        display: "Defined",
	                        comparisonOperator: "is not",
	                        value: "null"
	                    },
	                    {
	                        display: "Not Defined",
	                        comparisonOperator: "is",
	                        value: "null"
	                    }
	                ];
	            }
	            return booleanOptions;
	        };
	        var getDateOptions = function (type) {
	            var dateOptions = [];
	            if (angular.isUndefined(type)) {
	                type = 'filter';
	            }
	            if (type === 'filter') {
	                dateOptions = [
	                    {
	                        display: "Date",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'exactDate',
	                        }
	                    },
	                    {
	                        display: "In Range",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'range'
	                        }
	                    },
	                    {
	                        display: "Not In Range",
	                        comparisonOperator: "not between",
	                        dateInfo: {
	                            type: 'range'
	                        }
	                    },
	                    {
	                        display: "Today",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'd',
	                            measureCount: 0,
	                            behavior: 'toDate'
	                        }
	                    },
	                    {
	                        display: "Yesterday",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'd',
	                            measureCount: -1,
	                            behavior: 'toDate'
	                        }
	                    },
	                    {
	                        display: "This Week",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'w',
	                            behavior: 'toDate'
	                        }
	                    },
	                    {
	                        display: "This Month",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'm',
	                            behavior: 'toDate'
	                        }
	                    },
	                    {
	                        display: "This Quarter",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'q',
	                            behavior: 'toDate'
	                        }
	                    },
	                    {
	                        display: "This Year",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'y',
	                            behavior: 'toDate'
	                        }
	                    },
	                    {
	                        display: "Last N Hour(s)",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'h',
	                            measureTypeDisplay: 'Hours'
	                        }
	                    },
	                    {
	                        display: "Last N Day(s)",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'd',
	                            measureTypeDisplay: 'Days'
	                        }
	                    },
	                    {
	                        display: "Last N Week(s)",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'w',
	                            measureTypeDisplay: 'Weeks'
	                        }
	                    },
	                    {
	                        display: "Last N Month(s)",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'm',
	                            measureTypeDisplay: 'Months'
	                        }
	                    },
	                    {
	                        display: "Last N Quarter(s)",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'q',
	                            measureTypeDisplay: 'Quarters'
	                        }
	                    },
	                    {
	                        display: "Last N Year(s)",
	                        comparisonOperator: "between",
	                        dateInfo: {
	                            type: 'calculation',
	                            measureType: 'y',
	                            measureTypeDisplay: 'Years'
	                        }
	                    },
	                    {
	                        display: "Defined",
	                        comparisonOperator: "is not",
	                        value: "null"
	                    },
	                    {
	                        display: "Not Defined",
	                        comparisonOperator: "is",
	                        value: "null"
	                    }
	                ];
	            }
	            if (type === 'condition') {
	                dateOptions = [
	                    {
	                        display: "Defined",
	                        comparisonOperator: "is not",
	                        value: "null"
	                    },
	                    {
	                        display: "Not Defined",
	                        comparisonOperator: "is",
	                        value: "null"
	                    }
	                ];
	            }
	            return dateOptions;
	        };
	        var getNumberOptions = function (type) {
	            var numberOptions = [];
	            if (angular.isUndefined(type)) {
	                type = 'filter';
	            }
	            if (type == 'filter') {
	                numberOptions = [
	                    {
	                        display: "Equals",
	                        comparisonOperator: "="
	                    },
	                    {
	                        display: "Doesn't Equal",
	                        comparisonOperator: "<>"
	                    },
	                    {
	                        display: "In Range",
	                        comparisonOperator: "between",
	                        type: "range"
	                    },
	                    {
	                        display: "Not In Range",
	                        comparisonOperator: "not between",
	                        type: "range"
	                    },
	                    {
	                        display: "Greater Than",
	                        comparisonOperator: ">"
	                    },
	                    {
	                        display: "Greater Than Or Equal",
	                        comparisonOperator: ">="
	                    },
	                    {
	                        display: "Less Than",
	                        comparisonOperator: "<"
	                    },
	                    {
	                        display: "Less Than Or Equal",
	                        comparisonOperator: "<="
	                    },
	                    {
	                        display: "In List",
	                        comparisonOperator: "in"
	                    },
	                    {
	                        display: "Not In List",
	                        comparisonOperator: "not in"
	                    },
	                    {
	                        display: "Defined",
	                        comparisonOperator: "is not",
	                        value: "null"
	                    },
	                    {
	                        display: "Not Defined",
	                        comparisonOperator: "is",
	                        value: "null"
	                    }
	                ];
	            }
	            if (type === 'condition') {
	                numberOptions = [
	                    {
	                        display: "Equals",
	                        comparisonOperator: "="
	                    },
	                    {
	                        display: "Doesn't Equal",
	                        comparisonOperator: "<>"
	                    },
	                    {
	                        display: "Greater Than",
	                        comparisonOperator: ">"
	                    },
	                    {
	                        display: "Greater Than Or Equal",
	                        comparisonOperator: ">="
	                    },
	                    {
	                        display: "Less Than",
	                        comparisonOperator: "<"
	                    },
	                    {
	                        display: "Less Than Or Equal",
	                        comparisonOperator: "<="
	                    },
	                    {
	                        display: "In List",
	                        comparisonOperator: "in"
	                    },
	                    {
	                        display: "Defined",
	                        comparisonOperator: "is not",
	                        value: "null"
	                    },
	                    {
	                        display: "Not Defined",
	                        comparisonOperator: "is",
	                        value: "null"
	                    }
	                ];
	            }
	            return numberOptions;
	        };
	        var getOneToManyOptions = function (type) {
	            var oneToManyOptions = [];
	            if (angular.isUndefined(type)) {
	                type = 'filter';
	            }
	            if (type == 'filter') {
	                oneToManyOptions = [
	                    {
	                        display: "All Exist In Collection",
	                        comparisonOperator: "All"
	                    },
	                    {
	                        display: "None Exist In Collection",
	                        comparisonOperator: "None"
	                    },
	                    {
	                        display: "Some Exist In Collection",
	                        comparisonOperator: "One"
	                    }
	                ];
	            }
	            if (type === 'condition') {
	                oneToManyOptions = [];
	            }
	            return oneToManyOptions;
	        };
	        var getManyToManyOptions = function (type) {
	            var manyToManyOptions = [];
	            if (angular.isUndefined(type)) {
	                type = 'filter';
	            }
	            if (type == 'filter') {
	                manyToManyOptions = [
	                    {
	                        display: "All Exist In Collection",
	                        comparisonOperator: "All"
	                    },
	                    {
	                        display: "None Exist In Collection",
	                        comparisonOperator: "None"
	                    },
	                    {
	                        display: "Some Exist In Collection",
	                        comparisonOperator: "One"
	                    },
	                    {
	                        display: "Empty",
	                        comparisonOperator: "is",
	                        value: "null"
	                    },
	                    {
	                        display: "Not Empty",
	                        comparisonOperator: "is not",
	                        value: "null"
	                    }
	                ];
	            }
	            if (type === 'condition') {
	                manyToManyOptions = [
	                    {
	                        display: "Empty",
	                        comparisonOperator: "is",
	                        value: "null"
	                    },
	                    {
	                        display: "Not Empty",
	                        comparisonOperator: "is not",
	                        value: "null"
	                    }
	                ];
	            }
	            return manyToManyOptions;
	        };
	        var getManyToOneOptions = function (type) {
	            var manyToOneOptions = [];
	            if (angular.isUndefined(type)) {
	                type = 'filter';
	            }
	            if (type == 'filter') {
	                manyToOneOptions = {
	                    drillEntity: {},
	                    hasEntity: {
	                        display: "Defined",
	                        comparisonOperator: "is not",
	                        value: "null"
	                    },
	                    notHasEntity: {
	                        display: "Not Defined",
	                        comparisonOperator: "is",
	                        value: "null"
	                    }
	                };
	            }
	            return manyToOneOptions;
	        };
	        /* Options info end */
	        var linker = function (scope, element, attrs) {
	            /*show the user the value without % symbols as these are reserved*/
	            scope.$watch('selectedFilterProperty.criteriaValue', function (criteriaValue) {
	                if (angular.isDefined(criteriaValue)) {
	                    scope.selectedFilterProperty.criteriaValue = $filter('likeFilter')(criteriaValue);
	                }
	            });
	            scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
	                if (angular.isDefined(selectedFilterProperty)) {
	                    $log.debug('watchSelectedFilterProperty');
	                    $log.debug(scope.selectedFilterProperty);
	                    /*prepopulate if we have a comparison operator and value*/
	                    if (selectedFilterProperty === null) {
	                        return;
	                    }
	                    if (angular.isDefined(selectedFilterProperty.ormtype)) {
	                        switch (scope.selectedFilterProperty.ormtype) {
	                            case "boolean":
	                                scope.conditionOptions = getBooleanOptions();
	                                break;
	                            case "string":
	                                scope.conditionOptions = getStringOptions();
	                                scope.selectedConditionChanged = function (selectedFilterProperty) {
	                                    //scope.selectedFilterProperty.criteriaValue = '';
	                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
	                                        selectedFilterProperty.showCriteriaValue = false;
	                                    }
	                                    else {
	                                        selectedFilterProperty.showCriteriaValue = true;
	                                    }
	                                };
	                                break;
	                            case "timestamp":
	                                scope.conditionOptions = getDateOptions();
	                                scope.today = function () {
	                                    if (angular.isDefined(scope.selectedFilterProperty)) {
	                                        scope.selectedFilterProperty.criteriaRangeStart = new Date();
	                                        scope.selectedFilterProperty.criteriaRangeEnd = new Date();
	                                    }
	                                };
	                                scope.clear = function () {
	                                    scope.selectedFilterProperty.criteriaRangeStart = null;
	                                    scope.selectedFilterProperty.criteriaRangeEnd = null;
	                                };
	                                scope.openCalendarStart = function ($event) {
	                                    $event.preventDefault();
	                                    $event.stopPropagation();
	                                    scope.openedCalendarStart = true;
	                                };
	                                scope.openCalendarEnd = function ($event) {
	                                    $event.preventDefault();
	                                    $event.stopPropagation();
	                                    scope.openedCalendarEnd = true;
	                                };
	                                scope.formats = [
	                                    'dd-MMMM-yyyy',
	                                    'yyyy/MM/dd',
	                                    'dd.MM.yyyy',
	                                    'shortDate'
	                                ];
	                                scope.format = scope.formats[1];
	                                scope.selectedConditionChanged = function (selectedFilterProperty) {
	                                    $log.debug('selectedConditionChanged Begin');
	                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
	                                    //check whether condition is checking for null values in date
	                                    if (angular.isDefined(selectedCondition.dateInfo)) {
	                                        //is condition a calculation
	                                        if (selectedCondition.dateInfo.type === 'calculation') {
	                                            selectedCondition.showCriteriaStart = true;
	                                            selectedCondition.showCriteriaEnd = true;
	                                            selectedCondition.disableCriteriaStart = true;
	                                            selectedCondition.disableCriteriaEnd = true;
	                                            //if item is a calculation of an N number of measure display the measure and number input
	                                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {
	                                                $log.debug('Not toDate');
	                                                selectedCondition.showNumberOf = true;
	                                                selectedCondition.conditionDisplay = 'Number of ' + selectedCondition.dateInfo.measureTypeDisplay + ' :';
	                                            }
	                                            else {
	                                                $log.debug('toDate');
	                                                var today = Date.parse('today');
	                                                var todayEOD = today.setHours(23, 59, 59, 999);
	                                                selectedFilterProperty.criteriaRangeEnd = todayEOD;
	                                                //get this Measure to date
	                                                switch (selectedCondition.dateInfo.measureType) {
	                                                    case 'd':
	                                                        var dateBOD = Date.parse('today').add(selectedCondition.dateInfo.measureCount).days();
	                                                        dateBOD.setHours(0, 0, 0, 0);
	                                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();
	                                                        break;
	                                                    case 'w':
	                                                        var firstDayOfWeek = Date.today().last().monday();
	                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();
	                                                        break;
	                                                    case 'm':
	                                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();
	                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();
	                                                        break;
	                                                    case 'q':
	                                                        var month = Date.parse('today').toString('MM');
	                                                        var year = Date.parse('today').toString('yyyy');
	                                                        var quarterMonth = (Math.floor(month / 3) * 3);
	                                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);
	                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();
	                                                        break;
	                                                    case 'y':
	                                                        var year = Date.parse('today').toString('yyyy');
	                                                        var firstDayOfYear = new Date(year, 0, 1);
	                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();
	                                                        break;
	                                                }
	                                            }
	                                        }
	                                        if (selectedCondition.dateInfo.type === 'range') {
	                                            selectedCondition.showCriteriaStart = true;
	                                            selectedCondition.showCriteriaEnd = true;
	                                            selectedCondition.disableCriteriaStart = false;
	                                            selectedCondition.disableCriteriaEnd = false;
	                                            selectedCondition.showNumberOf = false;
	                                        }
	                                        if (selectedCondition.dateInfo.type === 'exactDate') {
	                                            selectedCondition.showCriteriaEnd = false;
	                                            selectedCondition.disableCriteriaStart = false;
	                                            selectedCondition.disableCriteriaEnd = true;
	                                            if (!selectedCondition.dateInfo.measureType) {
	                                                selectedCondition.conditionDisplay = '';
	                                                selectedCondition.showCriteriaStart = true;
	                                                selectedCondition.showNumberOf = false;
	                                                selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
	                                                selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
	                                            }
	                                            else {
	                                                selectedCondition.conditionDisplay = 'How many ' + selectedCondition.dateInfo.measureTypeDisplay + ' ago?';
	                                                selectedCondition.showCriteriaStart = false;
	                                                selectedCondition.showNumberOf = true;
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        selectedCondition.showCriteriaStart = false;
	                                        selectedCondition.showCriteriaEnd = false;
	                                        selectedCondition.showNumberOf = false;
	                                        selectedCondition.conditionDisplay = '';
	                                    }
	                                    $log.debug('selectedConditionChanged End');
	                                    $log.debug('selectedConditionChanged Result');
	                                    $log.debug(selectedCondition);
	                                    $log.debug(selectedFilterProperty);
	                                };
	                                scope.criteriaRangeChanged = function (selectedFilterProperty) {
	                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
	                                    if (selectedCondition.dateInfo.type === 'calculation') {
	                                        var measureCount = selectedFilterProperty.criteriaNumberOf;
	                                        switch (selectedCondition.dateInfo.measureType) {
	                                            case 'h':
	                                                var today = Date.parse('today');
	                                                selectedFilterProperty.criteriaRangeEnd = today.getTime();
	                                                var todayXHoursAgo = Date.parse('today').add(-(measureCount)).hours();
	                                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();
	                                                break;
	                                            case 'd':
	                                                var lastFullDay = Date.parse('today').add(-1).days();
	                                                lastFullDay.setHours(23, 59, 59, 999);
	                                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();
	                                                var lastXDaysAgo = Date.parse('today').add(-(measureCount)).days();
	                                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();
	                                                break;
	                                            case 'w':
	                                                var lastFullWeekEnd = Date.today().last().sunday();
	                                                lastFullWeekEnd.setHours(23, 59, 59, 999);
	                                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();
	                                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();
	                                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();
	                                                break;
	                                            case 'm':
	                                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();
	                                                lastFullMonthEnd.setHours(23, 59, 59, 999);
	                                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();
	                                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();
	                                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();
	                                                break;
	                                            case 'q':
	                                                var currentQuarter = Math.floor((Date.parse('today').getMonth() / 3));
	                                                var firstDayOfCurrentQuarter = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
	                                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();
	                                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);
	                                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();
	                                                var lastXQuartersAgo = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
	                                                lastXQuartersAgo.add(-(measureCount * 3)).months();
	                                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();
	                                                break;
	                                            case 'y':
	                                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();
	                                                lastFullYearEnd.setHours(23, 59, 59, 999);
	                                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();
	                                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();
	                                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();
	                                                break;
	                                        }
	                                    }
	                                    if (selectedCondition.dateInfo.type === 'exactDate') {
	                                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);
	                                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
	                                    }
	                                    if (selectedCondition.dateInfo.type === 'range') {
	                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
	                                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
	                                        }
	                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd)) {
	                                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);
	                                        }
	                                    }
	                                    $log.debug('criteriaRangeChanged');
	                                    $log.debug(selectedCondition);
	                                    $log.debug(selectedFilterProperty);
	                                };
	                                break;
	                            case "big_decimal":
	                            case "integer":
	                            case "float":
	                                scope.conditionOptions = getNumberOptions();
	                                scope.criteriaRangeChanged = function (selectedFilterProperty) {
	                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
	                                };
	                                scope.selectedConditionChanged = function (selectedFilterProperty) {
	                                    selectedFilterProperty.showCriteriaValue = true;
	                                    //check whether the type is a range
	                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.type)) {
	                                        selectedFilterProperty.showCriteriaValue = false;
	                                        selectedFilterProperty.selectedCriteriaType.showCriteriaStart = true;
	                                        selectedFilterProperty.selectedCriteriaType.showCriteriaEnd = true;
	                                    }
	                                    //is null or is not null
	                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
	                                        selectedFilterProperty.showCriteriaValue = false;
	                                    }
	                                };
	                                break;
	                        }
	                    }
	                    if (angular.isDefined(scope.selectedFilterProperty.fieldtype)) {
	                        switch (scope.selectedFilterProperty.fieldtype) {
	                            case "many-to-one":
	                                scope.conditionOptions = getManyToOneOptions(scope.comparisonType);
	                                $log.debug('many-to-one');
	                                $log.debug(scope.selectedFilterProperty);
	                                $log.debug(scope.filterPropertiesList);
	                                if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
	                                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.selectedFilterProperty.cfc);
	                                    filterPropertiesPromise.then(function (value) {
	                                        scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
	                                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
	                                    }, function (reason) {
	                                    });
	                                }
	                                break;
	                            case "many-to-many":
	                            case "one-to-many":
	                                scope.manyToManyOptions = getManyToManyOptions();
	                                scope.oneToManyOptions = getOneToManyOptions();
	                                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(selectedFilterProperty.cfc);
	                                existingCollectionsPromise.then(function (value) {
	                                    scope.collectionOptions = value.data;
	                                    if (angular.isDefined(scope.workflowCondition.collectionID)) {
	                                        for (var i in scope.collectionOptions) {
	                                            if (scope.collectionOptions[i].collectionID === scope.workflowCondition.collectionID) {
	                                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
	                                            }
	                                        }
	                                        for (var i in scope.oneToManyOptions) {
	                                            if (scope.oneToManyOptions[i].comparisonOperator === scope.workflowCondition.criteria) {
	                                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];
	                                            }
	                                        }
	                                    }
	                                });
	                                break;
	                        }
	                    }
	                    $log.debug('workflowCondition');
	                    $log.debug(scope.workflowCondition);
	                    angular.forEach(scope.conditionOptions, function (conditionOption) {
	                        if (conditionOption.display == scope.workflowCondition.conditionDisplay) {
	                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
	                            scope.selectedFilterProperty.criteriaValue = scope.workflowCondition.value;
	                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo)
	                                && angular.isDefined(scope.workflowCondition.value)
	                                && scope.workflowCondition.value.length) {
	                                var dateRangeArray = scope.workflowCondition.value.split("-");
	                                scope.selectedFilterProperty.criteriaRangeStart = new Date(parseInt(dateRangeArray[0]));
	                                scope.selectedFilterProperty.criteriaRangeEnd = new Date(parseInt(dateRangeArray[1]));
	                            }
	                            if (angular.isDefined(scope.workflowCondition.criteriaNumberOf)) {
	                                scope.selectedFilterProperty.criteriaNumberOf = scope.workflowCondition.criteriaNumberOf;
	                            }
	                            if (angular.isDefined(scope.selectedConditionChanged)) {
	                                scope.selectedConditionChanged(scope.selectedFilterProperty);
	                            }
	                        }
	                    });
	                    $log.debug('templateLoader');
	                    $log.debug(selectedFilterProperty);
	                    var templateLoader = getTemplate(selectedFilterProperty);
	                    var promise = templateLoader.success(function (html) {
	                        element.html(html);
	                        $compile(element.contents())(scope);
	                    });
	                }
	            });
	            scope.selectedCriteriaChanged = function (selectedCriteria) {
	                $log.debug(selectedCriteria);
	                //update breadcrumbs as array of filterpropertylist keys
	                $log.debug(scope.selectedFilterProperty);
	                var breadCrumb = {
	                    entityAlias: scope.selectedFilterProperty.name,
	                    cfc: scope.selectedFilterProperty.cfc,
	                    propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier
	                };
	                scope.workflowCondition.breadCrumbs.push(breadCrumb);
	                //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
	                scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
	                //update criteria to display the condition of the new critera we have selected
	            };
	        };
	        return {
	            restrict: 'A',
	            scope: {
	                workflowCondition: "=",
	                selectedFilterProperty: "=",
	                filterPropertiesList: "=",
	                selectedFilterPropertyChanged: "&"
	            },
	            link: linker
	        };
	    }
	    SWConditionCriteria.Factory = function () {
	        var directive = function ($http, $compile, $templateCache, $log, $hibachi, $filter, workflowPartialsPath, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder) { return new SWConditionCriteria($http, $compile, $templateCache, $log, $hibachi, $filter, workflowPartialsPath, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder); };
	        directive.$inject = [
	            '$http',
	            '$compile',
	            '$templateCache',
	            '$log',
	            '$hibachi',
	            '$filter',
	            'workflowPartialsPath',
	            'collectionPartialsPath',
	            'collectionService',
	            'metadataService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWConditionCriteria;
	}());
	exports.SWConditionCriteria = SWConditionCriteria;


/***/ }),
/* 444 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCriteria = (function () {
	    function SWCriteria($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            scope: {
	                filterItem: "=",
	                selectedFilterProperty: "=",
	                filterPropertiesList: "=",
	                selectedFilterPropertyChanged: "&",
	                comparisonType: "=",
	                collectionConfig: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteria.html',
	            link: function (scope, element, attrs) {
	            }
	        };
	    }
	    SWCriteria.Factory = function () {
	        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder) { return new SWCriteria($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            '$filter',
	            'collectionPartialsPath',
	            'collectionService',
	            'metadataService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWCriteria;
	}());
	exports.SWCriteria = SWCriteria;


/***/ }),
/* 445 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCriteriaBoolean = (function () {
	    function SWCriteriaBoolean($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriaboolean.html',
	            link: function (scope, element, attrs) {
	                var getBooleanOptions = function (type) {
	                    if (angular.isUndefined(type)) {
	                        type = 'filter';
	                    }
	                    var booleanOptions = [];
	                    if (type === 'filter') {
	                        booleanOptions = [
	                            {
	                                display: "True",
	                                comparisonOperator: "=",
	                                value: "True"
	                            },
	                            {
	                                display: "False",
	                                comparisonOperator: "=",
	                                value: "False"
	                            },
	                            {
	                                display: "Defined",
	                                comparisonOperator: "is not",
	                                value: "null"
	                            },
	                            {
	                                display: "Not Defined",
	                                comparisonOperator: "is",
	                                value: "null"
	                            }
	                        ];
	                    }
	                    else if (type === 'condition') {
	                        booleanOptions = [
	                            {
	                                display: "True",
	                                comparisonOperator: "eq",
	                                value: "True"
	                            },
	                            {
	                                display: "False",
	                                comparisonOperator: "eq",
	                                value: "False"
	                            },
	                            {
	                                display: "Defined",
	                                comparisonOperator: "null",
	                                value: "False"
	                            },
	                            {
	                                display: "Not Defined",
	                                comparisonOperator: "null",
	                                value: "True"
	                            }
	                        ];
	                    }
	                    return booleanOptions;
	                };
	                scope.conditionOptions = getBooleanOptions(scope.comparisonType);
	                angular.forEach(scope.conditionOptions, function (conditionOption) {
	                    if (conditionOption.display == scope.filterItem.conditionDisplay) {
	                        scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
	                        scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
	                        if (angular.isDefined(scope.selectedConditionChanged)) {
	                            scope.selectedConditionChanged(scope.selectedFilterProperty);
	                        }
	                    }
	                });
	            }
	        };
	    }
	    SWCriteriaBoolean.Factory = function () {
	        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder) { return new SWCriteriaBoolean($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            '$filter',
	            'collectionPartialsPath',
	            'collectionService',
	            'metadataService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWCriteriaBoolean;
	}());
	exports.SWCriteriaBoolean = SWCriteriaBoolean;


/***/ }),
/* 446 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCriteriaDate = (function () {
	    function SWCriteriaDate($log, collectionPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriadate.html',
	            link: function (scope, element, attrs) {
	                var getDateOptions = function (type) {
	                    if (angular.isUndefined(type)) {
	                        type = 'filter';
	                    }
	                    var dateOptions = [];
	                    if (type === 'filter') {
	                        dateOptions = [
	                            {
	                                display: "Date",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'exactDate',
	                                }
	                            },
	                            {
	                                display: "In Range",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'range'
	                                }
	                            },
	                            {
	                                display: "Not In Range",
	                                comparisonOperator: "not between",
	                                dateInfo: {
	                                    type: 'range'
	                                }
	                            },
	                            {
	                                display: "Today",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'd',
	                                    measureCount: 0,
	                                    behavior: 'toDate'
	                                }
	                            },
	                            {
	                                display: "Yesterday",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'd',
	                                    measureCount: -1,
	                                    behavior: 'toDate'
	                                }
	                            },
	                            {
	                                display: "This Week",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'w',
	                                    behavior: 'toDate'
	                                }
	                            },
	                            {
	                                display: "This Month",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'm',
	                                    behavior: 'toDate'
	                                }
	                            },
	                            {
	                                display: "This Quarter",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'q',
	                                    behavior: 'toDate'
	                                }
	                            },
	                            {
	                                display: "This Year",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'y',
	                                    behavior: 'toDate'
	                                }
	                            },
	                            {
	                                display: "Last N Hour(s)",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'h',
	                                    measureTypeDisplay: 'Hours'
	                                }
	                            },
	                            {
	                                display: "Last N Day(s)",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'd',
	                                    measureTypeDisplay: 'Days'
	                                }
	                            },
	                            {
	                                display: "Last N Week(s)",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'w',
	                                    measureTypeDisplay: 'Weeks'
	                                }
	                            },
	                            {
	                                display: "Last N Month(s)",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'm',
	                                    measureTypeDisplay: 'Months'
	                                }
	                            },
	                            {
	                                display: "Last N Quarter(s)",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'q',
	                                    measureTypeDisplay: 'Quarters'
	                                }
	                            },
	                            {
	                                display: "Last N Year(s)",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'calculation',
	                                    measureType: 'y',
	                                    measureTypeDisplay: 'Years'
	                                }
	                            },
	                            {
	                                display: "Exact N Day(s) Ago",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'exactDate',
	                                    measureType: 'd',
	                                    measureTypeDisplay: 'Days'
	                                }
	                            },
	                            {
	                                display: "Exact N Month(s) Ago",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'exactDate',
	                                    measureType: 'm',
	                                    measureTypeDisplay: 'Months'
	                                }
	                            },
	                            {
	                                display: "Exact N Year(s) Ago",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'exactDate',
	                                    measureType: 'y',
	                                    measureTypeDisplay: 'Years'
	                                }
	                            },
	                            {
	                                display: "Exact N Day(s) Ago",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'exactDate',
	                                    measureType: 'd',
	                                    measureTypeDisplay: 'Days'
	                                }
	                            },
	                            {
	                                display: "Exact N Month(s) Ago",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'exactDate',
	                                    measureType: 'm',
	                                    measureTypeDisplay: 'Months'
	                                }
	                            },
	                            {
	                                display: "Exact N Year(s) Ago",
	                                comparisonOperator: "between",
	                                dateInfo: {
	                                    type: 'exactDate',
	                                    measureType: 'y',
	                                    measureTypeDisplay: 'Years'
	                                }
	                            },
	                            {
	                                display: "Defined",
	                                comparisonOperator: "is not",
	                                value: "null"
	                            },
	                            {
	                                display: "Not Defined",
	                                comparisonOperator: "is",
	                                value: "null"
	                            }
	                        ];
	                    }
	                    else if (type === 'condition') {
	                        dateOptions = [
	                            {
	                                display: "Equals",
	                                comparisonOperator: "eq"
	                            },
	                            {
	                                display: "Doesn't Equal",
	                                comparisonOperator: "neq"
	                            },
	                            {
	                                display: "Defined",
	                                comparisonOperator: "null",
	                                value: "False"
	                            },
	                            {
	                                display: "Not Defined",
	                                comparisonOperator: "null",
	                                value: "True"
	                            }
	                        ];
	                    }
	                    return dateOptions;
	                };
	                scope.conditionOptions = getDateOptions(scope.comparisonType);
	                scope.today = function () {
	                    if (angular.isDefined(scope.selectedFilterProperty)) {
	                        scope.selectedFilterProperty.criteriaRangeStart = new Date();
	                        scope.selectedFilterProperty.criteriaRangeEnd = new Date();
	                    }
	                };
	                scope.clear = function () {
	                    scope.selectedFilterProperty.criteriaRangeStart = null;
	                    scope.selectedFilterProperty.criteriaRangeEnd = null;
	                };
	                scope.openCalendarStart = function ($event) {
	                    $event.preventDefault();
	                    $event.stopPropagation();
	                    scope.openedCalendarStart = true;
	                };
	                scope.openCalendarEnd = function ($event) {
	                    $event.preventDefault();
	                    $event.stopPropagation();
	                    scope.openedCalendarEnd = true;
	                };
	                scope.formats = [
	                    'dd-MMMM-yyyy',
	                    'yyyy/MM/dd',
	                    'dd.MM.yyyy',
	                    'shortDate'
	                ];
	                scope.format = scope.formats[1];
	                scope.selectedConditionChanged = function (selectedFilterProperty) {
	                    $log.debug('selectedConditionChanged Begin');
	                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
	                    //check whether condition is checking for null values in date
	                    if (angular.isDefined(selectedCondition.dateInfo)) {
	                        //is condition a calculation
	                        if (selectedCondition.dateInfo.type === 'calculation') {
	                            selectedCondition.showCriteriaStart = true;
	                            selectedCondition.showCriteriaEnd = true;
	                            selectedCondition.disableCriteriaStart = true;
	                            selectedCondition.disableCriteriaEnd = true;
	                            //if item is a calculation of an N number of measure display the measure and number input
	                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {
	                                $log.debug('Not toDate');
	                                selectedCondition.showNumberOf = true;
	                                selectedCondition.conditionDisplay = 'Number of ' + selectedCondition.dateInfo.measureTypeDisplay + ' :';
	                            }
	                            else {
	                                $log.debug('toDate');
	                                var today = Date.parse('today');
	                                var todayEOD = today.setHours(23, 59, 59, 999);
	                                selectedFilterProperty.criteriaRangeEnd = todayEOD;
	                                //get this Measure to date
	                                switch (selectedCondition.dateInfo.measureType) {
	                                    case 'd':
	                                        var dateBOD = Date.parse('today').add(selectedCondition.dateInfo.measureCount).days();
	                                        dateBOD.setHours(0, 0, 0, 0);
	                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();
	                                        break;
	                                    case 'w':
	                                        var firstDayOfWeek = Date.today().last().monday();
	                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();
	                                        break;
	                                    case 'm':
	                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();
	                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();
	                                        break;
	                                    case 'q':
	                                        var month = Date.parse('today').toString('MM');
	                                        var year = Date.parse('today').toString('yyyy');
	                                        var quarterMonth = (Math.floor(month / 3) * 3);
	                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);
	                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();
	                                        break;
	                                    case 'y':
	                                        var year = Date.parse('today').toString('yyyy');
	                                        var firstDayOfYear = new Date(year, 0, 1);
	                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();
	                                        break;
	                                }
	                            }
	                        }
	                        if (selectedCondition.dateInfo.type === 'range') {
	                            selectedCondition.showCriteriaStart = true;
	                            selectedCondition.showCriteriaEnd = true;
	                            selectedCondition.disableCriteriaStart = false;
	                            selectedCondition.disableCriteriaEnd = false;
	                            selectedCondition.showNumberOf = false;
	                        }
	                        if (selectedCondition.dateInfo.type === 'exactDate') {
	                            selectedCondition.showCriteriaStart = true;
	                            selectedCondition.showCriteriaEnd = false;
	                            selectedCondition.disableCriteriaStart = false;
	                            selectedCondition.disableCriteriaEnd = true;
	                            if (!selectedCondition.dateInfo.measureType) {
	                                selectedCondition.conditionDisplay = '';
	                                selectedCondition.showCriteriaStart = true;
	                                selectedCondition.showNumberOf = false;
	                                selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
	                                selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
	                            }
	                            else {
	                                selectedCondition.conditionDisplay = 'How many ' + selectedCondition.dateInfo.measureTypeDisplay + ' ago?';
	                                selectedCondition.showCriteriaStart = false;
	                                selectedCondition.showNumberOf = true;
	                            }
	                        }
	                    }
	                    else {
	                        selectedCondition.showCriteriaStart = false;
	                        selectedCondition.showCriteriaEnd = false;
	                        selectedCondition.showNumberOf = false;
	                        selectedCondition.conditionDisplay = '';
	                    }
	                    $log.debug('selectedConditionChanged End');
	                    $log.debug('selectedConditionChanged Result');
	                    $log.debug(selectedCondition);
	                    $log.debug(selectedFilterProperty);
	                };
	                scope.criteriaRangeChanged = function (selectedFilterProperty) {
	                    $log.debug('criteriaRangeChanged');
	                    $log.debug(selectedFilterProperty);
	                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
	                    if (selectedCondition.dateInfo.type === 'calculation') {
	                        var measureCount = selectedFilterProperty.criteriaNumberOf;
	                        switch (selectedCondition.dateInfo.measureType) {
	                            case 'h':
	                                var today = Date.parse('today');
	                                selectedFilterProperty.criteriaRangeEnd = today.getTime();
	                                var todayXHoursAgo = Date.parse('today').add(-(measureCount)).hours();
	                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();
	                                break;
	                            case 'd':
	                                var lastFullDay = Date.parse('today').add(-1).days();
	                                lastFullDay.setHours(23, 59, 59, 999);
	                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();
	                                var lastXDaysAgo = Date.parse('today').add(-(measureCount)).days();
	                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();
	                                break;
	                            case 'w':
	                                var lastFullWeekEnd = Date.today().last().sunday();
	                                lastFullWeekEnd.setHours(23, 59, 59, 999);
	                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();
	                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();
	                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();
	                                break;
	                            case 'm':
	                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();
	                                lastFullMonthEnd.setHours(23, 59, 59, 999);
	                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();
	                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();
	                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();
	                                break;
	                            case 'q':
	                                var currentQuarter = Math.floor((Date.parse('today').getMonth() / 3));
	                                var firstDayOfCurrentQuarter = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
	                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();
	                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);
	                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();
	                                var lastXQuartersAgo = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);
	                                lastXQuartersAgo.add(-(measureCount * 3)).months();
	                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();
	                                break;
	                            case 'y':
	                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();
	                                lastFullYearEnd.setHours(23, 59, 59, 999);
	                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();
	                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();
	                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();
	                                break;
	                        }
	                    }
	                    if (selectedCondition.dateInfo.type === 'exactDate' && angular.isDefined(selectedFilterProperty.criteriaRangeStart) && angular.isDefined(selectedFilterProperty.criteriaRangeStart.setHours)) {
	                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);
	                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);
	                    }
	                    if (selectedCondition.dateInfo.type === 'range') {
	                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart) && angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
	                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);
	                        }
	                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd) && angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {
	                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);
	                        }
	                    }
	                    $log.debug('criteriaRangeChanged');
	                    $log.debug(selectedCondition);
	                    $log.debug(selectedFilterProperty);
	                };
	                if (angular.isUndefined(scope.filterItem.$$isNew) || scope.filterItem.$$isNew === false) {
	                    angular.forEach(scope.conditionOptions, function (conditionOption) {
	                        if (conditionOption.display == scope.filterItem.conditionDisplay) {
	                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
	                            scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
	                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo)
	                                && angular.isDefined(scope.filterItem.value)
	                                && scope.filterItem.value.length) {
	                                var dateRangeArray = scope.filterItem.value.split("-");
	                                scope.selectedFilterProperty.criteriaRangeStart = new Date(parseInt(dateRangeArray[0]));
	                                scope.selectedFilterProperty.criteriaRangeEnd = new Date(parseInt(dateRangeArray[1]));
	                            }
	                            if (angular.isDefined(scope.selectedConditionChanged)) {
	                                scope.selectedConditionChanged(scope.selectedFilterProperty);
	                            }
	                        }
	                    });
	                }
	                else {
	                    scope.selectedFilterProperty.criteriaValue = '';
	                    scope.selectedFilterProperty.criteriaRangeStart = '';
	                    scope.selectedFilterProperty.criteriaRangeEnd = '';
	                }
	            }
	        };
	    }
	    SWCriteriaDate.Factory = function () {
	        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaDate($log, collectionPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            'collectionPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWCriteriaDate;
	}());
	exports.SWCriteriaDate = SWCriteriaDate;


/***/ }),
/* 447 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCriteriaManyToMany = (function () {
	    function SWCriteriaManyToMany($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, dialogService, observerService, hibachiPathBuilder, rbkeyService) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriamanytomany.html',
	            link: function (scope, element, attrs) {
	                scope.data = {};
	                scope.collectionOptionsOpen = false;
	                scope.toggleCollectionOptions = function (flag) {
	                    scope.collectionOptionsOpen = (!angular.isUndefined(flag)) ? flag : !scope.collectionOptionsOpen;
	                };
	                scope.selectCollection = function (collection) {
	                    scope.toggleCollectionOptions();
	                    scope.selectedFilterProperty.selectedCollection = collection;
	                    scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[2];
	                };
	                scope.cleanSelection = function () {
	                    scope.toggleCollectionOptions(false);
	                    scope.data.collectionName = "";
	                    scope.selectedFilterProperty.selectedCollection = null;
	                };
	                var getManyToManyOptions = function (type) {
	                    if (angular.isUndefined(type)) {
	                        type = 'filter';
	                    }
	                    $log.debug('type', type);
	                    var manyToManyOptions = [];
	                    if (type == 'filter') {
	                        manyToManyOptions = [
	                            {
	                                display: "All Exist In Collection",
	                                comparisonOperator: "All"
	                            },
	                            {
	                                display: "None Exist In Collection",
	                                comparisonOperator: "None"
	                            },
	                            {
	                                display: "Some Exist In Collection",
	                                comparisonOperator: "One"
	                            },
	                            {
	                                display: "Empty",
	                                comparisonOperator: "is",
	                                value: "null"
	                            },
	                            {
	                                display: "Not Empty",
	                                comparisonOperator: "is not",
	                                value: "null"
	                            }
	                        ];
	                    }
	                    else if (type === 'condition') {
	                        manyToManyOptions = [];
	                    }
	                    return manyToManyOptions;
	                };
	                scope.manyToManyOptions = getManyToManyOptions(scope.comparisonType);
	                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(scope.selectedFilterProperty.cfc);
	                existingCollectionsPromise.then(function (value) {
	                    scope.collectionOptions = value.data;
	                    if (angular.isDefined(scope.filterItem.collectionID)) {
	                        for (var i in scope.collectionOptions) {
	                            if (scope.collectionOptions[i].collectionID === scope.filterItem.collectionID) {
	                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
	                            }
	                        }
	                        for (var i in scope.manyToManyOptions) {
	                            if (scope.manyToManyOptions[i].comparisonOperator === scope.filterItem.criteria) {
	                                scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[i];
	                            }
	                        }
	                    }
	                });
	                function populateUI(collection) {
	                    scope.collectionOptions.push(collection);
	                    scope.selectedFilterProperty.selectedCollection = collection;
	                    scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[2];
	                }
	                observerService.attach(populateUI, 'addCollection', 'addCollection');
	                scope.selectedCriteriaChanged = function (selectedCriteria) {
	                    $log.debug(selectedCriteria);
	                    //update breadcrumbs as array of filterpropertylist keys
	                    $log.debug(scope.selectedFilterProperty);
	                    var breadCrumb = {
	                        entityAlias: scope.selectedFilterProperty.name,
	                        cfc: scope.selectedFilterProperty.cfc,
	                        propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
	                        rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
	                    };
	                    scope.filterItem.breadCrumbs.push(breadCrumb);
	                    //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
	                    scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
	                    //update criteria to display the condition of the new critera we have selected
	                };
	                scope.addNewCollection = function () {
	                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
	                        entityName: scope.selectedFilterProperty.cfc,
	                        collectionName: scope.data.collectionName,
	                        parentEntity: scope.collectionConfig.baseEntityName
	                    });
	                    scope.cleanSelection();
	                };
	                scope.viewSelectedCollection = function () {
	                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
	                        entityName: 'collection',
	                        entityId: scope.selectedFilterProperty.selectedCollection.collectionID,
	                        parentEntity: scope.collectionConfig.baseEntityName
	                    });
	                };
	            }
	        };
	    }
	    SWCriteriaManyToMany.Factory = function () {
	        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, dialogService, observerService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaManyToMany($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, dialogService, observerService, hibachiPathBuilder, rbkeyService); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            '$filter',
	            'collectionPartialsPath',
	            'collectionService',
	            'metadataService',
	            'dialogService',
	            'observerService',
	            'hibachiPathBuilder',
	            'rbkeyService',
	        ];
	        return directive;
	    };
	    return SWCriteriaManyToMany;
	}());
	exports.SWCriteriaManyToMany = SWCriteriaManyToMany;


/***/ }),
/* 448 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCriteriaManyToOne = (function () {
	    function SWCriteriaManyToOne($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriamanytoone.html',
	            link: function (scope, element, attrs) {
	                var getManyToOneOptions = function () {
	                    var manyToOneOptions = {
	                        drillEntity: {},
	                        hasEntity: {
	                            display: "Defined",
	                            comparisonOperator: "is not",
	                            value: "null"
	                        },
	                        notHasEntity: {
	                            display: "Not Defined",
	                            comparisonOperator: "is",
	                            value: "null"
	                        }
	                    };
	                    return manyToOneOptions;
	                };
	                scope.manyToOneOptions = getManyToOneOptions();
	                scope.conditionOptions = getManyToOneOptions();
	                $log.debug('many-to-one');
	                $log.debug(scope.selectedFilterProperty);
	                $log.debug(scope.filterPropertiesList);
	                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
	                    if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
	                        var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
	                        filterPropertiesPromise.then(function (value) {
	                            scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
	                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
	                        }, function (reason) {
	                        });
	                    }
	                    scope.selectedCriteriaChanged = function (selectedCriteria) {
	                        $log.debug(selectedCriteria);
	                        $log.debug('changed');
	                        //update breadcrumbs as array of filterpropertylist keys
	                        $log.debug(scope.selectedFilterProperty);
	                        var breadCrumb = {
	                            entityAlias: scope.selectedFilterProperty.name,
	                            cfc: scope.selectedFilterProperty.cfc,
	                            propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
	                            rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
	                        };
	                        $log.debug('breadcrumb');
	                        $log.debug(breadCrumb);
	                        $log.debug(scope.filterItem.breadCrumbs);
	                        scope.filterItem.breadCrumbs.push(breadCrumb);
	                        //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
	                        scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
	                        //update criteria to display the condition of the new critera we have selected
	                        $log.debug(scope.selectedFilterProperty);
	                    };
	                });
	            }
	        };
	    }
	    SWCriteriaManyToOne.Factory = function () {
	        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaManyToOne($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            '$filter',
	            'collectionPartialsPath',
	            'collectionService',
	            'metadataService',
	            'hibachiPathBuilder',
	            'rbkeyService'
	        ];
	        return directive;
	    };
	    return SWCriteriaManyToOne;
	}());
	exports.SWCriteriaManyToOne = SWCriteriaManyToOne;
	// 'use strict';
	// angular.module('slatwalladmin')
	// .directive('swCriteriaManyToOne', [
	// 	'$log',
	// 	'$hibachi',
	// 	'$filter',
	// 	'collectionPartialsPath',
	// 	'collectionService',
	// 	'metadataService',
	// 	function(
	// 		$log,
	// 		$hibachi,
	// 		$filter,
	// 		collectionPartialsPath,
	// 		collectionService,
	// 		metadataService
	// 	){
	// 		return {
	// 			restrict: 'E',
	// 			templateUrl:collectionPartialsPath+'criteriamanytoone.html',
	// 			link: function(scope, element, attrs){
	// 				var getManyToOneOptions = function(){
	// 			    	var manyToOneOptions = {
	// 			            drillEntity:{},
	// 						hasEntity:{
	// 							display:"Defined",
	// 							comparisonOperator:"is not",
	// 							value:"null"
	// 						},
	// 						notHasEntity:{
	// 							display:"Not Defined",
	// 							comparisonOperator:"is",
	// 							value:"null"
	// 						}
	// 			    	};
	// 			    	return manyToOneOptions;
	// 			    };
	// 			    scope.manyToOneOptions = getManyToOneOptions();
	// 			    scope.conditionOptions = getManyToOneOptions();
	// 				$log.debug('many-to-one');
	// 				$log.debug(scope.selectedFilterProperty);
	// 				$log.debug(scope.filterPropertiesList);
	// 				scope.$watch('selectedFilterProperty',function(selectedFilterProperty){
	// 					if(angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])){
	// 						var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
	// 						filterPropertiesPromise.then(function(value){
	// 							scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
	// 							metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier],scope.selectedFilterProperty.propertyIdentifier);
	// 						}, function(reason){
	// 						});
	// 					}
	// 					scope.selectedCriteriaChanged = function(selectedCriteria){
	// 						$log.debug(selectedCriteria);
	// 						$log.debug('changed');
	// 						//update breadcrumbs as array of filterpropertylist keys
	// 						$log.debug(scope.selectedFilterProperty);
	// 						var breadCrumb = {
	// 								entityAlias:scope.selectedFilterProperty.name,
	// 								cfc:scope.selectedFilterProperty.cfc,
	// 								propertyIdentifier:scope.selectedFilterProperty.propertyIdentifier,
	// 								rbKey:rbkeyService.getRBKey('entity.'+scope.selectedFilterProperty.cfc.replace('_',''))
	// 						};
	// 						$log.debug('breadcrumb');
	// 						$log.debug(breadCrumb);
	// 						$log.debug(scope.filterItem.breadCrumbs);
	// 						scope.filterItem.breadCrumbs.push(breadCrumb);
	// 						//populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
	// 						scope.selectedFilterPropertyChanged({selectedFilterProperty:scope.selectedFilterProperty.selectedCriteriaType});
	// 						//update criteria to display the condition of the new critera we have selected
	// 						$log.debug(scope.selectedFilterProperty);
	// 					};
	// 				});
	// 			}
	// 		};
	// 	}
	// ]);


/***/ }),
/* 449 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCriteriaNumber = (function () {
	    function SWCriteriaNumber($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criterianumber.html',
	            link: function (scope, element, attrs) {
	                var getNumberOptions = function (type) {
	                    if (angular.isUndefined(type)) {
	                        type = 'filter';
	                    }
	                    var numberOptions = [];
	                    if (type === 'filter') {
	                        numberOptions = [
	                            {
	                                display: "Equals",
	                                comparisonOperator: "="
	                            },
	                            {
	                                display: "Doesn't Equal",
	                                comparisonOperator: "<>"
	                            },
	                            {
	                                display: "In Range",
	                                comparisonOperator: "between",
	                                type: "range"
	                            },
	                            {
	                                display: "Not In Range",
	                                comparisonOperator: "not between",
	                                type: "range"
	                            },
	                            {
	                                display: "Greater Than",
	                                comparisonOperator: ">"
	                            },
	                            {
	                                display: "Greater Than Or Equal",
	                                comparisonOperator: ">="
	                            },
	                            {
	                                display: "Less Than",
	                                comparisonOperator: "<"
	                            },
	                            {
	                                display: "Less Than Or Equal",
	                                comparisonOperator: "<="
	                            },
	                            {
	                                display: "In List",
	                                comparisonOperator: "in"
	                            },
	                            {
	                                display: "Not In List",
	                                comparisonOperator: "not in"
	                            },
	                            {
	                                display: "Defined",
	                                comparisonOperator: "is not",
	                                value: "null"
	                            },
	                            {
	                                display: "Not Defined",
	                                comparisonOperator: "is",
	                                value: "null"
	                            }
	                        ];
	                    }
	                    else if (type === 'condition') {
	                        numberOptions = [
	                            {
	                                display: "Equals",
	                                comparisonOperator: "eq"
	                            },
	                            {
	                                display: "Greater Than",
	                                comparisonOperator: "gt"
	                            },
	                            {
	                                display: "Greater Than Or Equal",
	                                comparisonOperator: "gte"
	                            },
	                            {
	                                display: "Less Than",
	                                comparisonOperator: "lt"
	                            },
	                            {
	                                display: "Less Than Or Equal",
	                                comparisonOperator: "lte"
	                            },
	                            {
	                                display: "Doesn't Equal",
	                                comparisonOperator: "neq"
	                            },
	                            {
	                                display: "Defined",
	                                comparisonOperator: "null",
	                                value: "False"
	                            },
	                            {
	                                display: "Not Defined",
	                                comparisonOperator: "null",
	                                value: "True"
	                            }
	                        ];
	                    }
	                    return numberOptions;
	                };
	                scope.$watch('selectedFilterProperty.criteriaValue', function (criteriaValue) {
	                    if (angular.isDefined(criteriaValue)) {
	                        scope.selectedFilterProperty.criteriaValue = criteriaValue;
	                        $log.debug(scope.selectedFilterProperty);
	                    }
	                });
	                scope.conditionOptions = getNumberOptions(scope.comparisonType);
	                scope.criteriaRangeChanged = function (selectedFilterProperty) {
	                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;
	                };
	                scope.selectedConditionChanged = function (selectedFilterProperty) {
	                    selectedFilterProperty.showCriteriaValue = true;
	                    //check whether the type is a range
	                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.type)) {
	                        selectedFilterProperty.showCriteriaValue = false;
	                        selectedFilterProperty.selectedCriteriaType.showCriteriaStart = true;
	                        selectedFilterProperty.selectedCriteriaType.showCriteriaEnd = true;
	                    }
	                    //is null or is not null
	                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
	                        selectedFilterProperty.showCriteriaValue = false;
	                    }
	                };
	                angular.forEach(scope.conditionOptions, function (conditionOption) {
	                    $log.debug('populate');
	                    if (conditionOption.display == scope.filterItem.conditionDisplay) {
	                        scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
	                        $log.debug(scope.filterItem);
	                        if (scope.filterItem.comparisonOperator === 'between' || scope.filterItem.comparisonOperator === 'not between') {
	                            var criteriaRangeArray = scope.filterItem.value.split('-');
	                            $log.debug(criteriaRangeArray);
	                            scope.selectedFilterProperty.criteriaRangeStart = parseInt(criteriaRangeArray[0]);
	                            scope.selectedFilterProperty.criteriaRangeEnd = parseInt(criteriaRangeArray[1]);
	                        }
	                        else {
	                            scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
	                        }
	                        if (angular.isDefined(scope.filterItem.criteriaNumberOf)) {
	                            scope.selectedFilterProperty.criteriaNumberOf = scope.filterItem.criteriaNumberOf;
	                        }
	                        if (angular.isDefined(scope.selectedConditionChanged)) {
	                            scope.selectedConditionChanged(scope.selectedFilterProperty);
	                        }
	                    }
	                });
	            }
	        };
	    }
	    SWCriteriaNumber.Factory = function () {
	        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder) { return new SWCriteriaNumber($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            '$filter',
	            'collectionPartialsPath',
	            'collectionService',
	            'metadataService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWCriteriaNumber;
	}());
	exports.SWCriteriaNumber = SWCriteriaNumber;


/***/ }),
/* 450 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCriteriaOneToMany = (function () {
	    function SWCriteriaOneToMany($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, dialogService, observerService, hibachiPathBuilder, rbkeyService) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriaonetomany.html',
	            link: function (scope, element, attrs) {
	                scope.data = {};
	                scope.collectionOptionsOpen = false;
	                scope.toggleCollectionOptions = function (flag) {
	                    scope.collectionOptionsOpen = (!angular.isUndefined(flag)) ? flag : !scope.collectionOptionsOpen;
	                };
	                scope.selectCollection = function (collection) {
	                    scope.toggleCollectionOptions();
	                    scope.selectedFilterProperty.selectedCollection = collection;
	                    scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[2];
	                };
	                scope.cleanSelection = function () {
	                    scope.toggleCollectionOptions(false);
	                    scope.data.collectionName = "";
	                    scope.selectedFilterProperty.selectedCollection = null;
	                };
	                var getOneToManyOptions = function (type) {
	                    if (angular.isUndefined(type)) {
	                        type = 'filter';
	                    }
	                    var oneToManyOptions = [];
	                    if (type == 'filter') {
	                        oneToManyOptions = [
	                            {
	                                display: "All Exist In Collection",
	                                comparisonOperator: "All"
	                            },
	                            {
	                                display: "None Exist In Collection",
	                                comparisonOperator: "None"
	                            },
	                            {
	                                display: "Some Exist In Collection",
	                                comparisonOperator: "One"
	                            }
	                            /*,
	                             {
	                             display:"Empty",
	                             comparisonOperator:"is",
	                             value:"null"
	                             },
	                             {
	                             display:"Not Empty",
	                             comparisonOperator:"is not",
	                             value:"null"
	                             }*/
	                        ];
	                    }
	                    else if (type === 'condition') {
	                        oneToManyOptions = [];
	                    }
	                    return oneToManyOptions;
	                };
	                $log.debug('onetomany');
	                $log.debug(scope.selectedFilterProperty);
	                scope.oneToManyOptions = getOneToManyOptions(scope.comparisonType);
	                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(scope.selectedFilterProperty.cfc);
	                existingCollectionsPromise.then(function (value) {
	                    scope.collectionOptions = value.data;
	                    if (angular.isDefined(scope.filterItem.collectionID)) {
	                        for (var i in scope.collectionOptions) {
	                            if (scope.collectionOptions[i].collectionID === scope.filterItem.collectionID) {
	                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];
	                            }
	                        }
	                        for (var i in scope.oneToManyOptions) {
	                            if (scope.oneToManyOptions[i].comparisonOperator === scope.filterItem.criteria) {
	                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];
	                            }
	                        }
	                    }
	                });
	                function populateUI(collection) {
	                    scope.collectionOptions.push(collection);
	                    scope.selectedFilterProperty.selectedCollection = collection;
	                    scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[2];
	                }
	                observerService.attach(populateUI, 'addCollection', 'addCollection');
	                scope.selectedCriteriaChanged = function (selectedCriteria) {
	                    $log.debug(selectedCriteria);
	                    //update breadcrumbs as array of filterpropertylist keys
	                    $log.debug(scope.selectedFilterProperty);
	                    var breadCrumb = {
	                        entityAlias: scope.selectedFilterProperty.name,
	                        cfc: scope.selectedFilterProperty.cfc,
	                        propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
	                        rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', '')),
	                        filterProperty: scope.selectedFilterProperty
	                    };
	                    scope.filterItem.breadCrumbs.push(breadCrumb);
	                    $log.debug('criteriaChanged');
	                    //$log.debug(selectedFilterPropertyChanged);
	                    $log.debug(scope.selectedFilterProperty);
	                    //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
	                    scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
	                    //update criteria to display the condition of the new critera we have selected
	                };
	                scope.addNewCollection = function () {
	                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
	                        entityName: scope.selectedFilterProperty.cfc,
	                        collectionName: scope.data.collectionName,
	                        parentEntity: scope.collectionConfig.baseEntityName
	                    });
	                    scope.cleanSelection();
	                };
	                scope.viewSelectedCollection = function () {
	                    scope.toggleCollectionOptions();
	                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
	                        entityName: 'collection',
	                        entityId: scope.selectedFilterProperty.selectedCollection.collectionID,
	                        parentEntity: scope.collectionConfig.baseEntityName
	                    });
	                };
	            }
	        };
	    }
	    SWCriteriaOneToMany.Factory = function () {
	        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, dialogService, observerService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaOneToMany($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, dialogService, observerService, hibachiPathBuilder, rbkeyService); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            '$filter',
	            'collectionPartialsPath',
	            'collectionService',
	            'metadataService',
	            'dialogService',
	            'observerService',
	            'hibachiPathBuilder',
	            'rbkeyService'
	        ];
	        return directive;
	    };
	    return SWCriteriaOneToMany;
	}());
	exports.SWCriteriaOneToMany = SWCriteriaOneToMany;


/***/ }),
/* 451 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCriteriaRelatedObject = (function () {
	    function SWCriteriaRelatedObject($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriarelatedobject.html',
	            link: function (scope, element, attrs) {
	                var getRelatedObjectOptions = function () {
	                    var relatedObjectOptions = {
	                        drillEntity: null,
	                        hasEntity: {
	                            display: "Defined",
	                            comparisonOperator: "is not",
	                            value: "null"
	                        },
	                        notHasEntity: {
	                            display: "Not Defined",
	                            comparisonOperator: "is",
	                            value: "null"
	                        },
	                        aggregate: {
	                            aggregate: ""
	                        }
	                    };
	                    return relatedObjectOptions;
	                };
	                scope.aggegate = {};
	                scope.aggegate.selectedAggregate = '';
	                scope.aggregateOptions = ['Average', 'Count', 'Sum'];
	                scope.selectAggregate = function (aggregate) {
	                    scope.selectedFilterProperty.selectedCriteriaType.aggregate = aggregate;
	                };
	                scope.relatedObjectOptions = getRelatedObjectOptions();
	                scope.conditionOptions = getRelatedObjectOptions();
	                $log.debug('many-to-one');
	                $log.debug(scope.selectedFilterProperty);
	                $log.debug(scope.filterPropertiesList);
	                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
	                    if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {
	                        var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);
	                        filterPropertiesPromise.then(function (value) {
	                            scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;
	                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);
	                        }, function (reason) {
	                        });
	                    }
	                    scope.selectedCriteriaChanged = function (selectedCriteria, selectedAggregate) {
	                        var breadCrumb = {
	                            entityAlias: scope.selectedFilterProperty.name,
	                            cfc: scope.selectedFilterProperty.cfc,
	                            propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,
	                            rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))
	                        };
	                        $log.debug('breadcrumb');
	                        $log.debug(breadCrumb);
	                        $log.debug(scope.filterItem.breadCrumbs);
	                        scope.filterItem.breadCrumbs.push(breadCrumb);
	                        if (selectedAggregate) {
	                            scope.selectedFilterProperty.selectedCriteriaType.ormtype = 'integer';
	                            scope.selectedFilterProperty.selectedCriteriaType.aggregate = selectedAggregate;
	                        }
	                        //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key
	                        scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });
	                        //update criteria to display the condition of the new critera we have selected
	                        $log.debug(scope.selectedFilterProperty);
	                    };
	                });
	            }
	        };
	    }
	    SWCriteriaRelatedObject.Factory = function () {
	        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaRelatedObject($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            '$filter',
	            'collectionPartialsPath',
	            'collectionService',
	            'metadataService',
	            'hibachiPathBuilder',
	            'rbkeyService'
	        ];
	        return directive;
	    };
	    return SWCriteriaRelatedObject;
	}());
	exports.SWCriteriaRelatedObject = SWCriteriaRelatedObject;


/***/ }),
/* 452 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCriteriaString = (function () {
	    function SWCriteriaString($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriastring.html',
	            link: function (scope, element, attrs) {
	                var getStringOptions = function (type) {
	                    if (angular.isUndefined(type)) {
	                        type = 'filter';
	                    }
	                    var stringOptions = [];
	                    if (type === 'filter') {
	                        stringOptions = [
	                            {
	                                display: "Equals",
	                                comparisonOperator: "="
	                            },
	                            {
	                                display: "Doesn't Equal",
	                                comparisonOperator: "<>"
	                            },
	                            {
	                                display: "Contains",
	                                comparisonOperator: "like",
	                                pattern: "%w%"
	                            },
	                            {
	                                display: "Doesn't Contain",
	                                comparisonOperator: "not like",
	                                pattern: "%w%"
	                            },
	                            {
	                                display: "Starts With",
	                                comparisonOperator: "like",
	                                pattern: "w%"
	                            },
	                            {
	                                display: "Doesn't Start With",
	                                comparisonOperator: "not like",
	                                pattern: "w%"
	                            },
	                            {
	                                display: "Ends With",
	                                comparisonOperator: "like",
	                                pattern: "%w"
	                            },
	                            {
	                                display: "Doesn't End With",
	                                comparisonOperator: "not like",
	                                pattern: "%w"
	                            },
	                            {
	                                display: "In List",
	                                comparisonOperator: "in"
	                            },
	                            {
	                                display: "Not In List",
	                                comparisonOperator: "not in"
	                            },
	                            {
	                                display: "Defined",
	                                comparisonOperator: "is not",
	                                value: "null"
	                            },
	                            {
	                                display: "Not Defined",
	                                comparisonOperator: "is",
	                                value: "null"
	                            }
	                        ];
	                    }
	                    else if (type === 'condition') {
	                        stringOptions = [
	                            {
	                                display: "Equals",
	                                comparisonOperator: "eq"
	                            },
	                            {
	                                display: "Doesn't Equal",
	                                comparisonOperator: "neq"
	                            },
	                            {
	                                display: "Defined",
	                                comparisonOperator: "null",
	                                value: "False"
	                            },
	                            {
	                                display: "Not Defined",
	                                comparisonOperator: "null",
	                                value: "True"
	                            }
	                        ];
	                    }
	                    return stringOptions;
	                };
	                //initialize values
	                scope.conditionOptions = getStringOptions(scope.comparisonType);
	                scope.inListArray = [];
	                if (angular.isDefined(scope.filterItem.value)) {
	                    scope.inListArray = scope.filterItem.value.split(',');
	                }
	                scope.newListItem = '';
	                //declare functions
	                scope.addToValueInListFormat = function (inListItem) {
	                    // Adds item into array
	                    scope.inListArray.push(inListItem);
	                    //set value field to the user generated list
	                    scope.filterItem.value = scope.inListArray.toString();
	                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, ', ');
	                    scope.newListItem = '';
	                };
	                scope.removelistItem = function (argListIndex) {
	                    scope.inListArray.splice(argListIndex, 1);
	                    scope.filterItem.value = scope.inListArray.toString();
	                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, ', ');
	                };
	                scope.clearField = function () {
	                    scope.newListItem = '';
	                };
	                scope.selectedConditionChanged = function (selectedFilterProperty) {
	                    //scope.selectedFilterProperty.criteriaValue = '';
	                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
	                        selectedFilterProperty.showCriteriaValue = false;
	                    }
	                    else {
	                        if (selectedFilterProperty.selectedCriteriaType.comparisonOperator === 'in' || selectedFilterProperty.selectedCriteriaType.comparisonOperator === 'not in') {
	                            selectedFilterProperty.showCriteriaValue = false;
	                            scope.comparisonOperatorInAndNotInFlag = true;
	                        }
	                        else {
	                            selectedFilterProperty.showCriteriaValue = true;
	                        }
	                    }
	                };
	                scope.$watch('filterItem.value', function (criteriaValue) {
	                    //remove percents for like values
	                    if (angular.isDefined(scope.filterItem) && angular.isDefined(scope.filterItem.value)) {
	                        scope.filterItem.value = scope.filterItem.value.replace('%', '');
	                    }
	                });
	                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {
	                    if (angular.isDefined(selectedFilterProperty)) {
	                        angular.forEach(scope.conditionOptions, function (conditionOption) {
	                            if (conditionOption.display == scope.filterItem.conditionDisplay) {
	                                scope.selectedFilterProperty.selectedCriteriaType = conditionOption;
	                                scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;
	                                if (angular.isDefined(scope.selectedConditionChanged)) {
	                                    scope.selectedConditionChanged(scope.selectedFilterProperty);
	                                }
	                            }
	                        });
	                    }
	                });
	            }
	        };
	    }
	    SWCriteriaString.Factory = function () {
	        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder) { return new SWCriteriaString($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            '$filter',
	            'collectionPartialsPath',
	            'collectionService',
	            'metadataService',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWCriteriaString;
	}());
	exports.SWCriteriaString = SWCriteriaString;


/***/ }),
/* 453 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWEditFilterItem = (function () {
	    function SWEditFilterItem($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService) {
	        return {
	            require: '^swFilterGroups',
	            restrict: 'E',
	            scope: {
	                collectionConfig: "=",
	                filterItem: "=",
	                filterPropertiesList: "=",
	                saveCollection: "&",
	                removeFilterItem: "&",
	                filterItemIndex: "=",
	                comparisonType: "=",
	                simple: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "editfilteritem.html",
	            link: function (scope, element, attrs, filterGroupsController) {
	                function daysBetween(first, second) {
	                    // Copy date parts of the timestamps, discarding the time parts.
	                    var one = new Date(first.getFullYear(), first.getMonth(), first.getDate());
	                    var two = new Date(second.getFullYear(), second.getMonth(), second.getDate());
	                    // Do the math.
	                    var millisecondsPerDay = 1000 * 60 * 60 * 24;
	                    var millisBetween = two.getTime() - one.getTime();
	                    var days = millisBetween / millisecondsPerDay;
	                    // Round down.
	                    return Math.floor(days);
	                }
	                if (angular.isUndefined(scope.filterItem.breadCrumbs)) {
	                    scope.filterItem.breadCrumbs = [];
	                    if (scope.filterItem.propertyIdentifier === "") {
	                        scope.filterItem.breadCrumbs = [
	                            {
	                                rbKey: rbkeyService.getRBKey('entity.' + scope.collectionConfig.baseEntityAlias.replace('_', '')),
	                                entityAlias: scope.collectionConfig.baseEntityAlias,
	                                cfc: scope.collectionConfig.baseEntityAlias,
	                                propertyIdentifier: scope.collectionConfig.baseEntityAlias
	                            }
	                        ];
	                    }
	                    else {
	                        var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
	                        entityAliasArrayFromString.pop();
	                        for (var i in entityAliasArrayFromString) {
	                            var breadCrumb = {
	                                rbKey: rbkeyService.getRBKey('entity.' + scope.collectionConfig.baseEntityAlias.replace('_', '')),
	                                entityAlias: entityAliasArrayFromString[i],
	                                cfc: entityAliasArrayFromString[i],
	                                propertyIdentifier: entityAliasArrayFromString[i]
	                            };
	                            scope.filterItem.breadCrumbs.push(breadCrumb);
	                        }
	                    }
	                }
	                else {
	                    angular.forEach(scope.filterItem.breadCrumbs, function (breadCrumb, key) {
	                        if (angular.isUndefined(scope.filterPropertiesList[breadCrumb.propertyIdentifier])) {
	                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(breadCrumb.cfc);
	                            filterPropertiesPromise.then(function (value) {
	                                metadataService.setPropertiesList(value, breadCrumb.propertyIdentifier);
	                                scope.filterPropertiesList[breadCrumb.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(breadCrumb.propertyIdentifier);
	                                metadataService.formatPropertiesList(scope.filterPropertiesList[breadCrumb.propertyIdentifier], breadCrumb.propertyIdentifier);
	                                var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
	                                entityAliasArrayFromString.pop();
	                                entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
	                                if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
	                                    for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
	                                        var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
	                                        if (filterProperty.propertyIdentifier === scope.filterItem.propertyIdentifier) {
	                                            //selectItem from drop down
	                                            scope.selectedFilterProperty = filterProperty;
	                                            //decorate with value and comparison Operator so we can use it in the Condition section
	                                            scope.selectedFilterProperty.value = scope.filterItem.value;
	                                            scope.selectedFilterProperty.comparisonOperator = scope.filterItem.comparisonOperator;
	                                        }
	                                    }
	                                }
	                            });
	                        }
	                        else {
	                            var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');
	                            entityAliasArrayFromString.pop();
	                            entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
	                            if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
	                                for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
	                                    var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
	                                    if (filterProperty.propertyIdentifier === scope.filterItem.propertyIdentifier) {
	                                        //selectItem from drop down
	                                        scope.selectedFilterProperty = filterProperty;
	                                        //decorate with value and comparison Operator so we can use it in the Condition section
	                                        scope.selectedFilterProperty.value = scope.filterItem.value;
	                                        scope.selectedFilterProperty.comparisonOperator = scope.filterItem.comparisonOperator;
	                                    }
	                                }
	                            }
	                        }
	                    });
	                }
	                if (angular.isUndefined(scope.filterItem.$$isClosed)) {
	                    scope.filterItem.$$isClosed = true;
	                }
	                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();
	                scope.togglePrepareForFilterGroup = function () {
	                    scope.filterItem.$$prepareForFilterGroup = !scope.filterItem.$$prepareForFilterGroup;
	                };
	                //public functions
	                scope.selectBreadCrumb = function (breadCrumbIndex) {
	                    //splice out array items above index
	                    var removeCount = scope.filterItem.breadCrumbs.length - 1 - breadCrumbIndex;
	                    scope.filterItem.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
	                    $log.debug('selectBreadCrumb');
	                    $log.debug(scope.selectedFilterProperty);
	                    //scope.selectedFilterPropertyChanged(scope.filterItem.breadCrumbs[scope.filterItem.breadCrumbs.length -1].filterProperty);
	                    scope.selectedFilterPropertyChanged(null);
	                };
	                scope.selectedFilterPropertyChanged = function (selectedFilterProperty) {
	                    $log.debug('selectedFilterProperty');
	                    $log.debug(selectedFilterProperty);
	                    if (angular.isDefined(scope.selectedFilterProperty) && scope.selectedFilterProperty === null) {
	                        scope.selectedFilterProperty = {};
	                    }
	                    if (angular.isDefined(scope.selectedFilterProperty) && angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType)) {
	                        delete scope.selectedFilterProperty.selectedCriteriaType;
	                    }
	                    if (angular.isDefined(scope.filterItem.value)) {
	                        delete scope.filterItem.value;
	                    }
	                    scope.selectedFilterProperty.showCriteriaValue = false;
	                    scope.selectedFilterProperty = selectedFilterProperty;
	                };
	                scope.addFilterItem = function () {
	                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse);
	                };
	                scope.cancelFilterItem = function () {
	                    $log.debug('cancelFilterItem');
	                    $log.debug(scope.filterItemIndex);
	                    //scope.deselectItems(scope.filterGroupItem[filterItemIndex]);
	                    scope.filterItem.setItemInUse(false);
	                    scope.filterItem.$$isClosed = true;
	                    for (var siblingIndex in scope.filterItem.$$siblingItems) {
	                        scope.filterItem.$$siblingItems[siblingIndex].$$disabled = false;
	                    }
	                    if (scope.filterItem.$$isNew === true) {
	                        observerService.notify('filterItemAction', { action: 'remove', filterItemIndex: scope.filterItemIndex });
	                        scope.removeFilterItem({ filterItemIndex: scope.filterItemIndex });
	                    }
	                    else {
	                        observerService.notify('filterItemAction', { action: 'close', filterItemIndex: scope.filterItemIndex });
	                    }
	                };
	                scope.saveFilter = function (selectedFilterProperty, filterItem, callback) {
	                    $log.debug('saveFilter begin');
	                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType) && angular.equals({}, selectedFilterProperty.selectedCriteriaType)) {
	                        return;
	                    }
	                    if ((selectedFilterProperty.propertyIdentifier.match(/_/g) || []).length > 1) {
	                        var propertyIdentifierStart = (selectedFilterProperty.propertyIdentifier.charAt(0) == '_') ? 1 : 0;
	                        var propertyIdentifierEnd = (selectedFilterProperty.propertyIdentifier.indexOf('.') == -1) ? selectedFilterProperty.propertyIdentifier.length : selectedFilterProperty.propertyIdentifier.indexOf('.');
	                        var propertyIdentifierJoins = selectedFilterProperty.propertyIdentifier.substring(propertyIdentifierStart, propertyIdentifierEnd);
	                        var propertyIdentifierParts = propertyIdentifierJoins.split('_');
	                        var current_collection = $hibachi.getEntityExample(scope.collectionConfig.baseEntityName);
	                        var _propertyIdentifier = '';
	                        var joins = [];
	                        if (angular.isDefined(scope.collectionConfig.joins)) {
	                            joins = scope.collectionConfig.joins;
	                        }
	                        for (var i = 1; i < propertyIdentifierParts.length; i++) {
	                            if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {
	                                current_collection = $hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);
	                                _propertyIdentifier += '_' + propertyIdentifierParts[i];
	                                var newJoin = {
	                                    associationName: _propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1),
	                                    alias: '_' + propertyIdentifierParts[0] + _propertyIdentifier
	                                };
	                                var joinFound = false;
	                                for (var j = 0; j < joins.length; j++) {
	                                    if (joins[j].alias === newJoin.alias) {
	                                        joinFound = true;
	                                        break;
	                                    }
	                                }
	                                if (!joinFound) {
	                                    joins.push(newJoin);
	                                }
	                            }
	                        }
	                        scope.collectionConfig.joins = joins;
	                        if (angular.isDefined(scope.collectionConfig.columns) && (angular.isUndefined(scope.collectionConfig.groupBys) || scope.collectionConfig.groupBys.split(',').length != scope.collectionConfig.columns.length)) {
	                            var groupbyArray = angular.isUndefined(scope.collectionConfig.groupBys) ? [] : scope.collectionConfig.groupBys.split(',');
	                            for (var column = 0; column < scope.collectionConfig.columns.length; column++) {
	                                if (groupbyArray.indexOf(scope.collectionConfig.columns[column].propertyIdentifier) == -1) {
	                                    groupbyArray.push(scope.collectionConfig.columns[column].propertyIdentifier);
	                                }
	                            }
	                            scope.collectionConfig.groupBys = groupbyArray.join(',');
	                        }
	                    }
	                    if (angular.isDefined(selectedFilterProperty) && angular.isDefined(selectedFilterProperty.selectedCriteriaType)) {
	                        //populate filterItem with selectedFilterProperty values
	                        filterItem.$$isNew = false;
	                        filterItem.propertyIdentifier = selectedFilterProperty.propertyIdentifier;
	                        filterItem.displayPropertyIdentifier = selectedFilterProperty.displayPropertyIdentifier;
	                        switch (selectedFilterProperty.ormtype) {
	                            case 'boolean':
	                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
	                                filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
	                                filterItem.displayValue = filterItem.value;
	                                break;
	                            case 'string':
	                                if (angular.isDefined(selectedFilterProperty.attributeID)) {
	                                    filterItem.attributeID = selectedFilterProperty.attributeID;
	                                    filterItem.attributeSetObject = selectedFilterProperty.attributeSetObject;
	                                }
	                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
	                                //retrieving implied value or user input | ex. implied:prop is null, user input:prop = "Name"
	                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
	                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
	                                    //if has a pattern then we need to evaluate where to add % for like statement
	                                }
	                                else if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.pattern)) {
	                                    filterItem.pattern = selectedFilterProperty.selectedCriteriaType.pattern;
	                                }
	                                filterItem.displayValue = filterItem.value;
	                                break;
	                            //TODO:simplify timestamp and big decimal to leverage reusable function for null, range, and value
	                            case 'timestamp':
	                                //retrieving implied value or user input | ex. implied:prop is null, user input:prop = "Name"
	                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
	                                //is it null or a range
	                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
	                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
	                                    filterItem.displayValue = filterItem.value;
	                                }
	                                else {
	                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.dateInfo.type) && selectedFilterProperty.selectedCriteriaType.dateInfo.type === 'calculation') {
	                                        var _daysBetween = daysBetween(new Date(selectedFilterProperty.criteriaRangeStart), new Date(selectedFilterProperty.criteriaRangeEnd));
	                                        filterItem.value = _daysBetween;
	                                        filterItem.displayValue = selectedFilterProperty.selectedCriteriaType.display;
	                                        if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
	                                            filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
	                                        }
	                                    }
	                                    else if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.dateInfo.type) && selectedFilterProperty.selectedCriteriaType.dateInfo.type === 'exactDate') {
	                                        if (angular.isUndefined(selectedFilterProperty.selectedCriteriaType.dateInfo.measureType)) {
	                                            filterItem.value = selectedFilterProperty.criteriaRangeStart + '-' + selectedFilterProperty.criteriaRangeEnd;
	                                            filterItem.displayValue = $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeStart), 'MM/dd/yyyy @ h:mma') + '-' + $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeEnd), 'MM/dd/yyyy @ h:mma');
	                                        }
	                                        else {
	                                            filterItem.measureType = selectedFilterProperty.selectedCriteriaType.dateInfo.measureType;
	                                            filterItem.measureCriteria = selectedFilterProperty.selectedCriteriaType.dateInfo.type;
	                                            filterItem.criteriaNumberOf = "0";
	                                            if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
	                                                filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
	                                            }
	                                            filterItem.value = filterItem.criteriaNumberOf;
	                                            filterItem.displayValue = filterItem.criteriaNumberOf;
	                                            switch (filterItem.measureType) {
	                                                case 'd':
	                                                    filterItem.displayValue += ' Day';
	                                                    break;
	                                                case 'm':
	                                                    filterItem.displayValue += ' Month';
	                                                    break;
	                                                case 'y':
	                                                    filterItem.displayValue += ' Year';
	                                                    break;
	                                            }
	                                            filterItem.displayValue += ((filterItem.criteriaNumberOf > 1) ? 's' : '') + ' Ago';
	                                        }
	                                    }
	                                    else {
	                                        var dateValueString = selectedFilterProperty.criteriaRangeStart + '-' + selectedFilterProperty.criteriaRangeEnd;
	                                        filterItem.value = dateValueString;
	                                        var formattedDateValueString = $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeStart), 'MM/dd/yyyy @ h:mma') + '-' + $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeEnd), 'MM/dd/yyyy @ h:mma');
	                                        filterItem.displayValue = formattedDateValueString;
	                                        if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {
	                                            filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;
	                                        }
	                                    }
	                                }
	                                break;
	                            case 'big_decimal':
	                            case 'integer':
	                            case 'float':
	                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
	                                //is null, is not null
	                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
	                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
	                                }
	                                else {
	                                    if (angular.isUndefined(selectedFilterProperty.selectedCriteriaType.type)) {
	                                        filterItem.value = selectedFilterProperty.criteriaValue;
	                                    }
	                                    else {
	                                        var decimalValueString = selectedFilterProperty.criteriaRangeStart + '-' + selectedFilterProperty.criteriaRangeEnd;
	                                        filterItem.value = decimalValueString;
	                                    }
	                                }
	                                if (angular.isDefined(selectedFilterProperty.aggregate)) {
	                                    filterItem.aggregate = selectedFilterProperty.aggregate;
	                                }
	                                filterItem.displayValue = filterItem.value;
	                                break;
	                        }
	                        switch (selectedFilterProperty.fieldtype) {
	                            case 'one-to-many':
	                            case 'many-to-many':
	                            case 'many-to-one':
	                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;
	                                //is null, is not null
	                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {
	                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;
	                                }
	                                filterItem.displayValue = filterItem.value;
	                                break;
	                        }
	                        if (angular.isUndefined(filterItem.displayValue)) {
	                            filterItem.displayValue = filterItem.value;
	                        }
	                        if (angular.isDefined(selectedFilterProperty.ormtype)) {
	                            filterItem.ormtype = selectedFilterProperty.ormtype;
	                        }
	                        if (angular.isDefined(selectedFilterProperty.fieldtype)) {
	                            filterItem.fieldtype = selectedFilterProperty.fieldtype;
	                        }
	                        for (var siblingIndex in filterItem.$$siblingItems) {
	                            filterItem.$$siblingItems[siblingIndex].$$disabled = false;
	                        }
	                        filterItem.conditionDisplay = selectedFilterProperty.selectedCriteriaType.display;
	                        //if the add to New group checkbox has been checked then we need to transplant the filter item into a filter group
	                        if (filterItem.$$prepareForFilterGroup === true) {
	                            collectionService.transplantFilterItemIntoFilterGroup(filterGroupsController.getFilterGroupItem(), filterItem);
	                        }
	                        //persist Config and 
	                        scope.saveCollection();
	                        $log.debug(selectedFilterProperty);
	                        $log.debug(filterItem);
	                        observerService.notify('filterItemAction', { action: 'add', filterItemIndex: scope.filterItemIndex });
	                        $timeout(function () {
	                            callback();
	                        });
	                        $log.debug('saveFilter end');
	                    }
	                };
	            }
	        };
	    }
	    SWEditFilterItem.Factory = function () {
	        var directive = function ($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService) { return new SWEditFilterItem($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService); };
	        directive.$inject = [
	            '$log',
	            '$filter',
	            '$timeout',
	            '$hibachi',
	            'collectionPartialsPath',
	            'collectionService',
	            'metadataService',
	            'hibachiPathBuilder',
	            'rbkeyService',
	            'observerService'
	        ];
	        return directive;
	    };
	    return SWEditFilterItem;
	}());
	exports.SWEditFilterItem = SWEditFilterItem;


/***/ }),
/* 454 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWFilterGroups = (function () {
	    function SWFilterGroups($log, collectionPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'EA',
	            scope: {
	                collectionConfig: "=?",
	                filterGroupItem: "=?",
	                filterPropertiesList: "=?",
	                saveCollection: "&",
	                filterGroup: "=?",
	                comparisonType: "=?",
	                simple: "=",
	                readOnly: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filtergroups.html",
	            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
	                    //if the filter group comparisontype is not specified, then assume we are doing filters
	                    if (!angular.isDefined($scope.comparisonType)) {
	                        $scope.comparisonType = 'filter';
	                    }
	                    $scope.itemInUse = false;
	                    $log.debug('collectionConfig');
	                    $log.debug($scope.collectionConfig);
	                    this.getFilterGroup = function () {
	                        return $scope.filterGroup;
	                    };
	                    this.getFilterGroupItem = function () {
	                        return $scope.filterGroupItem;
	                    };
	                    this.setItemInUse = function (booleanValue) {
	                        $scope.itemInUse = booleanValue;
	                    };
	                    this.getItemInUse = function () {
	                        return $scope.itemInUse;
	                    };
	                    this.saveCollection = function () {
	                        $scope.saveCollection();
	                    };
	                    $scope.deselectItems = function (filterItem) {
	                        for (var i in filterItem.$$siblingItems) {
	                            filterItem.$$siblingItems[i].$$disabled = false;
	                        }
	                    };
	                    this.removeFilterItem = function (filterItemIndex) {
	                        if (angular.isDefined(filterItemIndex)) {
	                            $scope.deselectItems($scope.filterGroupItem[filterItemIndex]);
	                            $scope.filterGroupItem[filterItemIndex].setItemInUse(false);
	                            //remove item
	                            $log.debug('removeFilterItem');
	                            $log.debug(filterItemIndex);
	                            $scope.filterGroupItem.splice(filterItemIndex, 1);
	                            //make sure first item has no logical operator if it exists
	                            if ($scope.filterGroupItem.length) {
	                                delete $scope.filterGroupItem[0].logicalOperator;
	                            }
	                            $log.debug('removeFilterItem');
	                            $log.debug(filterItemIndex);
	                            $scope.saveCollection();
	                        }
	                    };
	                    this.removeFilterGroupItem = function (filterGroupItemIndex) {
	                        //remove Item
	                        $scope.deselectItems($scope.filterGroupItem[filterGroupItemIndex]);
	                        $scope.filterGroupItem[filterGroupItemIndex].setItemInUse(false);
	                        $scope.filterGroupItem.splice(filterGroupItemIndex, 1);
	                        //make sure first item has no logical operator if it exists
	                        if ($scope.filterGroupItem.length) {
	                            delete $scope.filterGroupItem[0].logicalOperator;
	                        }
	                        $log.debug('removeFilterGroupItem');
	                        $log.debug(filterGroupItemIndex);
	                        $scope.saveCollection();
	                    };
	                }]
	        };
	    }
	    SWFilterGroups.Factory = function () {
	        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterGroups($log, collectionPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            'collectionPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWFilterGroups;
	}());
	exports.SWFilterGroups = SWFilterGroups;


/***/ }),
/* 455 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWFilterItem = (function () {
	    function SWFilterItem($log, collectionService, collectionPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'A',
	            require: '^swFilterGroups',
	            scope: {
	                collectionConfig: "=",
	                filterItem: "=",
	                siblingItems: "=",
	                filterPropertiesList: "=",
	                filterItemIndex: "=",
	                saveCollection: "&",
	                comparisonType: "=",
	                simple: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filteritem.html",
	            link: function (scope, element, attrs, filterGroupsController) {
	                scope.baseEntityAlias = scope.collectionConfig.baseEntityAlias;
	                if (angular.isUndefined(scope.filterItem.$$isClosed)) {
	                    scope.filterItem.$$isClosed = true;
	                }
	                if (angular.isUndefined(scope.filterItem.$$disabled)) {
	                    scope.filterItem.$$disabled = false;
	                }
	                if (angular.isUndefined(scope.filterItem.siblingItems)) {
	                    scope.filterItem.$$siblingItems = scope.siblingItems;
	                }
	                scope.filterItem.setItemInUse = filterGroupsController.setItemInUse;
	                scope.selectFilterItem = function (filterItem) {
	                    collectionService.selectFilterItem(filterItem);
	                };
	                scope.removeFilterItem = function () {
	                    filterGroupsController.removeFilterItem(scope.filterItemIndex, filterGroupsController.getFilterGroupItem());
	                };
	                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();
	                scope.logicalOperatorChanged = function (logicalOperatorValue) {
	                    $log.debug('logicalOperatorChanged');
	                    $log.debug(logicalOperatorValue);
	                    scope.filterItem.logicalOperator = logicalOperatorValue;
	                    filterGroupsController.saveCollection();
	                };
	            }
	        };
	    }
	    SWFilterItem.Factory = function () {
	        var directive = function ($log, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterItem($log, collectionService, collectionPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            'collectionService',
	            'collectionPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWFilterItem;
	}());
	exports.SWFilterItem = SWFilterItem;


/***/ }),
/* 456 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWFilterGroupItem = (function () {
	    function SWFilterGroupItem($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'A',
	            require: "^swFilterGroups",
	            scope: {
	                collectionConfig: "=",
	                filterGroupItem: "=",
	                siblingItems: "=",
	                filterPropertiesList: "=",
	                filterGroupItemIndex: "=",
	                saveCollection: "&",
	                comparisonType: "="
	            },
	            link: function (scope, element, attrs, filterGroupsController) {
	                var Partial = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filtergroupitem.html";
	                var templateLoader = $http.get(Partial, { cache: $templateCache });
	                var promise = templateLoader.success(function (html) {
	                    element.html(html);
	                }).then(function (response) {
	                    element.replaceWith($compile(element.html())(scope));
	                });
	                //for(item in filterGroupItem){}
	                scope.filterGroupItem.setItemInUse = filterGroupsController.setItemInUse;
	                scope.filterGroupItem.$$index = scope.filterGroupItemIndex;
	                scope.removeFilterGroupItem = function () {
	                    filterGroupsController.removeFilterGroupItem(scope.filterGroupItemIndex);
	                };
	                scope.filterGroupItem.removeFilterGroupItem = scope.removeFilterGroupItem;
	                scope.filterGroupItem.$$disabled = false;
	                if (angular.isUndefined(scope.filterGroupItem.$$isClosed)) {
	                    scope.filterGroupItem.$$isClosed = true;
	                }
	                scope.filterGroupItem.$$siblingItems = scope.siblingItems;
	                scope.selectFilterGroupItem = function (filterGroupItem) {
	                    collectionService.selectFilterGroupItem(filterGroupItem);
	                };
	                scope.logicalOperatorChanged = function (logicalOperatorValue) {
	                    $log.debug('logicalOperatorChanged');
	                    $log.debug(logicalOperatorValue);
	                    scope.filterGroupItem.logicalOperator = logicalOperatorValue;
	                    filterGroupsController.saveCollection();
	                };
	            }
	        };
	    }
	    SWFilterGroupItem.Factory = function () {
	        var directive = function ($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterGroupItem($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$http',
	            '$compile',
	            '$templateCache',
	            '$log',
	            'collectionService',
	            'collectionPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWFilterGroupItem;
	}());
	exports.SWFilterGroupItem = SWFilterGroupItem;


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path="../../typings/tsd.d.ts" />
	/// <reference path="../../typings/hibachiTypescript.d.ts" />
	Object.defineProperty(exports, "__esModule", { value: true });
	//modules
	var collection_module_1 = __webpack_require__(429);
	//services
	var listingservice_1 = __webpack_require__(458);
	//directives
	var swlistingdisplay_1 = __webpack_require__(459);
	var swlistingdisplaycell_1 = __webpack_require__(460);
	var swlistingcontrols_1 = __webpack_require__(461);
	var swlistingaggregate_1 = __webpack_require__(462);
	var swlistingcolorfilter_1 = __webpack_require__(463);
	var swlistingcolumn_1 = __webpack_require__(464);
	var swlistingdisablerule_1 = __webpack_require__(465);
	var swlistingexpandablerule_1 = __webpack_require__(466);
	var swlistingfilter_1 = __webpack_require__(467);
	var swlistingfiltergroup_1 = __webpack_require__(468);
	var swlistingorderby_1 = __webpack_require__(469);
	var swlistingrowsave_1 = __webpack_require__(470);
	var swlistingsearch_1 = __webpack_require__(471);
	var swlistingglobalsearch_1 = __webpack_require__(472);
	var listingmodule = angular.module('hibachi.listing', [collection_module_1.collectionmodule.name])
	    .run([function () {
	    }])
	    .service('listingService', listingservice_1.ListingService)
	    .directive('swListingDisplay', swlistingdisplay_1.SWListingDisplay.Factory())
	    .directive('swListingControls', swlistingcontrols_1.SWListingControls.Factory())
	    .directive('swListingAggregate', swlistingaggregate_1.SWListingAggregate.Factory())
	    .directive('swListingColorFilter', swlistingcolorfilter_1.SWListingColorFilter.Factory())
	    .directive('swListingColumn', swlistingcolumn_1.SWListingColumn.Factory())
	    .directive('swListingDisableRule', swlistingdisablerule_1.SWListingDisableRule.Factory())
	    .directive('swListingExpandableRule', swlistingexpandablerule_1.SWListingExpandableRule.Factory())
	    .directive('swListingDisplayCell', swlistingdisplaycell_1.SWListingDisplayCell.Factory())
	    .directive('swListingFilter', swlistingfilter_1.SWListingFilter.Factory())
	    .directive('swListingFilterGroup', swlistingfiltergroup_1.SWListingFilterGroup.Factory())
	    .directive('swListingOrderBy', swlistingorderby_1.SWListingOrderBy.Factory())
	    .directive('swListingRowSave', swlistingrowsave_1.SWListingRowSave.Factory())
	    .directive('swListingSearch', swlistingsearch_1.SWListingSearch.Factory())
	    .directive('swListingGlobalSearch', swlistingglobalsearch_1.SWListingGlobalSearch.Factory())
	    .constant('listingPartialPath', 'listing/components/');
	exports.listingmodule = listingmodule;


/***/ }),
/* 458 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var ListingService = (function () {
	    //@ngInject
	    function ListingService($timeout, $q, collectionConfigService, filterService, historyService, observerService, rbkeyService, selectionService, utilityService, $hibachi) {
	        var _this = this;
	        this.$timeout = $timeout;
	        this.$q = $q;
	        this.collectionConfigService = collectionConfigService;
	        this.filterService = filterService;
	        this.historyService = historyService;
	        this.observerService = observerService;
	        this.rbkeyService = rbkeyService;
	        this.selectionService = selectionService;
	        this.utilityService = utilityService;
	        this.$hibachi = $hibachi;
	        this.listingDisplays = {};
	        //Event Functions
	        this.getListingPageRecordsUpdateEventString = function (listingID) {
	            return listingID + "pageRecordsUpdated";
	        };
	        this.getListingOrderByChangedEventString = function (listingID) {
	            return listingID + "orderByChanged";
	        };
	        this.getListingInitiatedEventString = function (listingID) {
	            return listingID + "initiated";
	        };
	        this.notifyListingPageRecordsUpdate = function (listingID) {
	            _this.observerService.notify(_this.getListingPageRecordsUpdateEventString(listingID), listingID);
	        };
	        this.attachToListingPageRecordsUpdate = function (listingID, callback, id) {
	            _this.observerService.attach(callback, _this.getListingPageRecordsUpdateEventString(listingID), id);
	        };
	        this.attachToOrderByChangedUpdate = function (listingID, callback, id) {
	            _this.observerService.attach(callback, _this.getListingOrderByChangedEventString(listingID), id);
	        };
	        this.attachToListingInitiated = function (listingID, callback) {
	            _this.observerService.attach(callback, _this.getListingInitiatedEventString(listingID));
	            if (_this.historyService.hasHistory(_this.getListingInitiatedEventString(listingID))) {
	                callback();
	            }
	        };
	        //End Event Functions
	        //core getters and setters
	        this.setListingState = function (listingID, state) {
	            _this.listingDisplays[listingID] = state;
	            _this.observerService.notifyAndRecord(_this.getListingInitiatedEventString(listingID));
	        };
	        this.getListing = function (listingID) {
	            return _this.listingDisplays[listingID];
	        };
	        this.getListingColumns = function (listingID) {
	            return _this.getListing(listingID).columns || _this.getListingCollectionConfigColumns(listingID);
	        };
	        this.getListingCollectionConfigColumns = function (listingID) {
	            if (_this.getListing(listingID).collectionConfig != null) {
	                return _this.getListing(listingID).collectionConfig.columns;
	            }
	        };
	        this.getListingExampleEntity = function (listingID) {
	            if (_this.getListing(listingID).exampleEntity != null) {
	                return _this.getListing(listingID).exampleEntity;
	            }
	            else {
	                _this.setupExampleEntity(listingID);
	            }
	        };
	        this.getListingCollectionConfigColumnIndexByPropertyIdentifier = function (listingID, propertyIdentifier) {
	            var columns = _this.getListingCollectionConfigColumns(listingID);
	            return _this.utilityService.ArrayFindByPropertyValue(columns, 'propertyIdentifier', propertyIdentifier);
	        };
	        this.getListingColumnIndexByPropertyIdentifier = function (listingID, propertyIdentifier) {
	            var columns = _this.getListingColumns(listingID);
	            return _this.utilityService.ArrayFindByPropertyValue(columns, 'propertyIdentifier', propertyIdentifier);
	        };
	        this.getListingBaseEntityName = function (listingID) {
	            var baseEntityName = _this.getListing(listingID).baseEntityName || _this.getListing(listingID).collectionObject;
	            if (baseEntityName == null && _this.getListing(listingID).collectionConfig != null) {
	                baseEntityName = _this.getListing(listingID).collectionConfig.baseEntityName;
	            }
	            if (baseEntityName == null && _this.getListing(listingID).collectionData != null) {
	                baseEntityName = _this.getListing(listingID).collectionData.collectionObject;
	            }
	            return baseEntityName;
	        };
	        this.getListingBaseEntityPrimaryIDPropertyName = function (listingID) {
	            if (_this.getListingExampleEntity(listingID) != null) {
	                return _this.getListingExampleEntity(listingID).$$getIDName();
	            }
	        };
	        this.getListingPrimaryEntityName = function (listingID) {
	            return _this.getListing(listingID).baseEntityName ||
	                _this.getListing(listingID).collectionObject ||
	                _this.getListing(listingID).collectionConfig.baseEntityName;
	        };
	        this.getListingEntityPrimaryIDPropertyName = function (listingID) {
	            return _this.$hibachi.getPrimaryIDPropertyNameByEntityName(_this.getListingPrimaryEntityName(listingID));
	        };
	        this.getListingPageRecords = function (listingID) {
	            if (angular.isDefined(_this.getListing(listingID)) &&
	                angular.isDefined(_this.getListing(listingID).collectionData) &&
	                angular.isDefined(_this.getListing(listingID).collectionData.pageRecords)) {
	                return _this.getListing(listingID).collectionData.pageRecords;
	            }
	        };
	        this.getCollection = function (listingID) {
	            return _this.getListing(listingID).getCollection();
	        };
	        this.getPageRecordsWithManualSortOrder = function (listingID) {
	            if (angular.isDefined(_this.getListing(listingID)) && _this.getListingPageRecords(listingID) != null) {
	                var pageRecords = _this.getListingPageRecords(listingID);
	                var primaryIDPropertyName = _this.getListingEntityPrimaryIDPropertyName(listingID);
	                var primaryIDWithBaseAlias = _this.getListing(listingID).collectionConfig.baseEntityAlias + '.' + primaryIDPropertyName;
	                var pageRecordsWithManualSortOrder = {};
	                _this.$timeout(function () {
	                    for (var j = 0; j < pageRecords.length; j++) {
	                        var pageRecord = pageRecords[j];
	                        var primaryID = pageRecords[j][primaryIDPropertyName];
	                        var sortOrder = j + 1;
	                        var primaryIDColumnIndex = _this.getListingCollectionConfigColumnIndexByPropertyIdentifier(listingID, primaryIDWithBaseAlias);
	                        if (angular.isDefined(primaryID)) {
	                            pageRecordsWithManualSortOrder[primaryID] = sortOrder;
	                        }
	                        else if (primaryIDColumnIndex !== -1) {
	                            var column = _this.getListingCollectionConfigColumns(listingID)[primaryIDColumnIndex];
	                            if (angular.isDefined(column.fallbackPropertyIdentifiers)) {
	                                var fallbackPropertyArray = column.fallbackPropertyIdentifiers.split(",");
	                                for (var i = 0; i < fallbackPropertyArray.length; i++) {
	                                    if (angular.isDefined(pageRecord[fallbackPropertyArray[i]])) {
	                                        pageRecordsWithManualSortOrder[pageRecord[fallbackPropertyArray[i]]] = sortOrder;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    _this.getListing(listingID).pageRecordsWithManualSortOrder = angular.toJson(pageRecordsWithManualSortOrder);
	                    return _this.getListing(listingID).pageRecordsWithManualSortOrders;
	                }, 0);
	            }
	            else {
	                return angular.toJson({});
	            }
	        };
	        //Begin Listing Page Record Functions
	        this.getListingPageRecordIndexByPageRecord = function (listingID, pageRecordToCompare) {
	            var pageRecords = _this.getListingPageRecords(listingID);
	            var primaryIDPropertyName = _this.getListingEntityPrimaryIDPropertyName(listingID);
	            for (var j = 0; j < pageRecords.length; j++) {
	                var pageRecord = pageRecords[j];
	                if (pageRecord[primaryIDPropertyName] == pageRecordToCompare[primaryIDPropertyName]) {
	                    return j;
	                }
	            }
	            return -1;
	        };
	        this.insertListingPageRecord = function (listingID, pageRecord) {
	            pageRecord.newFlag = true;
	            if (angular.isDefined(_this.getListingPageRecords(listingID))) {
	                _this.notifyListingPageRecordsUpdate(listingID);
	                _this.getListingPageRecords(listingID).unshift(pageRecord); //insert at beginning be default
	            }
	        };
	        this.removeListingPageRecord = function (listingID, pageRecord) {
	            var pageRecords = _this.getListingPageRecords(listingID);
	            if (_this.getListingPageRecordIndexByPageRecord(listingID, pageRecord) != -1) {
	                _this.notifyListingPageRecordsUpdate(listingID);
	                return pageRecords.splice(_this.getListingPageRecordIndexByPageRecord(listingID, pageRecord), 1)[0]; //this will always be an array of one element 
	            }
	        };
	        this.getPageRecordKey = function (propertyIdentifier) {
	            if (propertyIdentifier) {
	                var propertyIdentifierWithoutAlias = '';
	                if (propertyIdentifier.indexOf('_') === 0) {
	                    propertyIdentifierWithoutAlias = propertyIdentifier.substring(propertyIdentifier.indexOf('.') + 1, propertyIdentifier.length);
	                }
	                else {
	                    propertyIdentifierWithoutAlias = propertyIdentifier;
	                }
	                return _this.utilityService.replaceAll(propertyIdentifierWithoutAlias, '.', '_');
	            }
	            return '';
	        };
	        this.getPageRecordValueByColumn = function (pageRecord, column) {
	            var pageRecordValue = pageRecord[_this.getPageRecordKey(column.propertyIdentifier)];
	            if ((angular.isUndefined(pageRecordValue) ||
	                (angular.isString(pageRecordValue) && pageRecordValue.trim().length == 0)) &&
	                angular.isDefined(column.fallbackPropertyIdentifiers)) {
	                var fallbackPropertyArray = column.fallbackPropertyIdentifiers.replace('.', '_').split(",");
	                for (var i = 0; i < fallbackPropertyArray.length; i++) {
	                    if (angular.isDefined(pageRecord[_this.getPageRecordKey(fallbackPropertyArray[i])])) {
	                        pageRecordValue = pageRecord[_this.getPageRecordKey(fallbackPropertyArray[i])];
	                        break;
	                    }
	                }
	            }
	            return pageRecordValue;
	        };
	        this.selectCurrentPageRecords = function (listingID) {
	            if (!_this.getListing(listingID).collectionData.pageRecords)
	                return;
	            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {
	                if (_this.getListing(listingID).isCurrentPageRecordsSelected == true) {
	                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
	                }
	                else {
	                    _this.selectionService.removeSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);
	                }
	            }
	        };
	        this.getNGClassObjectForPageRecordRow = function (listingID, pageRecord) {
	            var classObjectString = "{";
	            angular.forEach(_this.getListing(listingID).colorFilters, function (colorFilter, index) {
	                classObjectString = classObjectString.concat("'" + colorFilter.colorClass + "':" + _this.getColorFilterConditionString(colorFilter, pageRecord));
	                classObjectString = classObjectString.concat(",");
	            });
	            classObjectString = classObjectString.concat(" 's-child':" + _this.getPageRecordIsChild(listingID, pageRecord));
	            var newFlag = false;
	            if (pageRecord.newFlag != null && typeof pageRecord.newFlag === 'string' && pageRecord.newFlag.trim() !== '') {
	                newFlag = pageRecord.newFlag;
	            }
	            classObjectString = classObjectString.concat(",'s-selected-row':" + newFlag);
	            classObjectString = classObjectString.concat(",'s-disabled':" + _this.getPageRecordMatchesDisableRule(listingID, pageRecord));
	            classObjectString = classObjectString.concat(",'s-edited':pageRecord.edited");
	            return classObjectString + "}";
	        };
	        this.getPageRecordIsChild = function (listingID, pageRecord) {
	            var isChild = false;
	            //todo implement
	            return isChild;
	        };
	        //End Listing Page Record Functions
	        //Row Save Functionality
	        this.determineRowEdited = function (pageRecords, pageRecordIndex) {
	            var fieldCount = 0;
	            for (var key in pageRecords[pageRecordIndex].editedFields) {
	                fieldCount++;
	                if (fieldCount > 1) {
	                    pageRecords[pageRecordIndex].edited = true;
	                    return true;
	                }
	            }
	            pageRecords[pageRecordIndex].edited = false;
	            return false;
	        };
	        this.markUnedited = function (listingID, pageRecordIndex, propertyDisplayID) {
	            var pageRecords = _this.getListingPageRecords(listingID);
	            if (angular.isDefined(pageRecords[pageRecordIndex].editedFields[propertyDisplayID])) {
	                delete pageRecords[pageRecordIndex].editedFields[propertyDisplayID];
	            }
	            return _this.determineRowEdited(pageRecords, pageRecordIndex);
	        };
	        this.markEdited = function (listingID, pageRecordIndex, propertyDisplayID, saveCallback) {
	            var pageRecords = _this.getListingPageRecords(listingID);
	            if (angular.isUndefined(pageRecords[pageRecordIndex].editedFields) && !angular.isObject(pageRecords[pageRecordIndex].editedFields)) {
	                pageRecords[pageRecordIndex].editedFields = {};
	            }
	            pageRecords[pageRecordIndex].editedFields[propertyDisplayID] = saveCallback;
	            return _this.determineRowEdited(pageRecords, pageRecordIndex);
	        };
	        this.markSaved = function (listingID, pageRecordIndex) {
	            var pageRecords = _this.getListingPageRecords(listingID);
	            var savePromises = [];
	            for (var key in pageRecords[pageRecordIndex].editedFields) {
	                if (angular.isFunction(pageRecords[pageRecordIndex].editedFields[key])) {
	                    savePromises.push(pageRecords[pageRecordIndex].editedFields[key]());
	                }
	            }
	            _this.$q.all(savePromises).then(function () {
	                delete pageRecords[pageRecordIndex].editedFields;
	                pageRecords[pageRecordIndex].edited = false;
	            });
	        };
	        //End Row Save Functionality
	        //Setup Functions
	        this.setupInSingleCollectionConfigMode = function (listingID, listingDisplayScope) {
	            if (_this.getListing(listingID).collectionObject != null &&
	                _this.getListing(listingID).collectionConfig != null) {
	                _this.getListing(listingID).collectionObject = _this.getListing(listingID).collectionConfig.baseEntityName;
	            }
	            _this.initCollectionConfigData(listingID, _this.getListing(listingID).collectionConfig);
	            _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);
	            listingDisplayScope.$watch('swListingDisplay.collectionPromise', function (newValue, oldValue) {
	                if (newValue) {
	                    _this.$q.when(_this.getListing(listingID).collectionPromise).then(function (data) {
	                        _this.getListing(listingID).collectionData = data;
	                        _this.setupDefaultCollectionInfo(listingID);
	                        if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {
	                            _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);
	                        }
	                        else {
	                            _this.getListing(listingID).collectionConfig.loadJson(data.collectionConfig);
	                        }
	                        _this.notifyListingPageRecordsUpdate(listingID);
	                        _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords ||
	                            _this.getListing(listingID).collectionData.records;
	                        _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
	                        _this.getListing(listingID).searching = false;
	                    });
	                }
	            });
	        };
	        this.setupInMultiCollectionConfigMode = function (listingID) {
	            angular.forEach(_this.getListing(listingID).collectionConfigs, function (value, key) {
	                _this.getListing(listingID).collectionObjects[key] = value.baseEntityName;
	            });
	        };
	        this.setupDefaultCollectionInfo = function (listingID) {
	            if (_this.getListing(listingID).hasCollectionPromise
	                && angular.isDefined(_this.getListing(listingID).collection)
	                && _this.getListing(listingID).collectionConfig == null) {
	                _this.getListing(listingID).collectionObject = _this.getListing(listingID).collection.collectionObject;
	                _this.getListing(listingID).collectionConfig = _this.collectionConfigService.newCollectionConfig(_this.getListing(listingID).collectionObject);
	                _this.getListing(listingID).collectionConfig.loadJson(_this.getListing(listingID).collection.collectionConfig);
	            }
	            if (_this.getListing(listingID).multiSlot == false) {
	                _this.$timeout(function () {
	                    _this.getListing(listingID).collectionConfig.loadJson(_this.getListing(listingID).collectionData.collectionConfig);
	                    _this.getListing(listingID).columns = _this.getListing(listingID).collectionConfig.columns;
	                });
	            }
	            if (_this.getListing(listingID).paginator != null
	                && _this.getListing(listingID).collectionConfig != null) {
	                _this.getListing(listingID).collectionConfig.setPageShow(_this.getListing(listingID).paginator.getPageShow());
	                _this.getListing(listingID).collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.getCurrentPage());
	            }
	        };
	        this.addColumn = function (listingID, column) {
	            if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.baseEntityAlias != null) {
	                column.propertyIdentifier = _this.getListing(listingID).collectionConfig.baseEntityAlias + "." + column.propertyIdentifier;
	            }
	            else if (_this.getListingBaseEntityName(listingID) != null) {
	                column.propertyIdentifier = '_' + _this.getListingBaseEntityName(listingID).toLowerCase() + '.' + column.propertyIdentifier;
	            }
	            if (_this.getListingColumnIndexByPropertyIdentifier(listingID, column.propertyIdentifier) === -1) {
	                if (column.aggregate) {
	                    _this.getListing(listingID).aggregates.push(column.aggregate);
	                }
	                else {
	                    _this.getListing(listingID).columns.push(column);
	                }
	            }
	        };
	        this.setupColumns = function (listingID, collectionConfig, collectionObject) {
	            //assumes no alias formatting
	            if (_this.getListing(listingID).columns.length == 0 &&
	                collectionConfig != null) {
	                if (collectionConfig.columns == null) {
	                    collectionConfig.getEntity().then(function () {
	                        for (var j = 0; j < collectionConfig.columns.length; j++) {
	                            var column = collectionConfig.columns[j];
	                            if (column.isVisible) {
	                                _this.getListing(listingID).columns.push(column);
	                            }
	                        }
	                    }, function () {
	                        throw ("listing display couldn't initiate no columns");
	                    });
	                }
	                else {
	                    for (var j = 0; j < collectionConfig.columns.length; j++) {
	                        var column = collectionConfig.columns[j];
	                        if (column.isVisible) {
	                            _this.getListing(listingID).columns.push(column);
	                        }
	                    }
	                }
	            }
	            for (var i = 0; i < _this.getListing(listingID).columns.length; i++) {
	                var column = _this.getListing(listingID).columns[i];
	                if (_this.getListing(listingID).collectionConfig != null && !column.hasCellView) {
	                    _this.getListing(listingID).collectionConfig.addColumn(column.propertyIdentifier, undefined, column);
	                }
	                var baseEntityName = _this.getListingBaseEntityName(listingID);
	                //if we have entity information we can make some inferences about the column
	                if (baseEntityName != null) {
	                    var lastEntity = _this.$hibachi.getLastEntityNameInPropertyIdentifier(baseEntityName, column.propertyIdentifier);
	                    if (angular.isUndefined(column.title)) {
	                        column.title = _this.rbkeyService.getRBKey('entity.' + lastEntity.toLowerCase() + '.' + _this.utilityService.listLast(column.propertyIdentifier, '.'));
	                    }
	                    if (angular.isUndefined(column.isVisible)) {
	                        column.isVisible = true;
	                    }
	                    var metadata = _this.$hibachi.getPropertyByEntityNameAndPropertyName(lastEntity, _this.utilityService.listLast(column.propertyIdentifier, '.'));
	                    if (angular.isDefined(metadata) && angular.isDefined(metadata.hb_formattype)) {
	                        column.type = metadata.hb_formatType;
	                    }
	                    else {
	                        column.type = "none";
	                    }
	                    if (column.propertyIdentifier) {
	                        _this.getListing(listingID).allpropertyidentifiers = _this.utilityService.listAppend(_this.getListing(listingID).allpropertyidentifiers, column.propertyIdentifier);
	                    }
	                    else if (column.processObjectProperty) {
	                        column.searchable = false;
	                        column.sort = false;
	                        _this.getListing(listingID).allprocessobjectproperties = _this.utilityService.listAppend(_this.getListing(listingID).allprocessobjectproperties, column.processObjectProperty);
	                    }
	                    if (column.tdclass) {
	                        var tdclassArray = column.tdclass.split(' ');
	                        if (tdclassArray.indexOf("primary") >= 0 && _this.getListing(listingID).expandable) {
	                            _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-expandsortproperty=' + column.propertyIdentifier, " ");
	                            column.sort = false;
	                        }
	                    }
	                }
	                if (angular.isDefined(column.tooltip)) {
	                    var parsedProperties = _this.utilityService.getPropertiesFromString(column.tooltip);
	                    if (parsedProperties && parsedProperties.length) {
	                        collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
	                    }
	                }
	                else {
	                    column.tooltip = '';
	                }
	                if (angular.isDefined(column.queryString)) {
	                    var parsedProperties = _this.utilityService.getPropertiesFromString(column.queryString);
	                    if (parsedProperties && parsedProperties.length) {
	                        collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
	                    }
	                }
	                //if the passed in collection has columns perform some formatting
	                if (_this.getListing(listingID).hasCollectionPromise) {
	                    var lastEntity = _this.$hibachi.getLastEntityNameInPropertyIdentifier(collectionObject, _this.utilityService.listRest(column.propertyIdentifier, '.'));
	                    column.title = column.title || _this.rbkeyService.getRBKey('entity.' + lastEntity.toLowerCase() + '.' + _this.utilityService.listLast(column.propertyIdentifier, '.'));
	                    if (angular.isUndefined(column.isVisible)) {
	                        column.isVisible = true;
	                    }
	                }
	                _this.columnOrderBy(listingID, column);
	            }
	        };
	        this.initCollectionConfigData = function (listingID, collectionConfig) {
	            //kick off other essential setup 
	            _this.setupSelect(listingID);
	            _this.setupMultiselect(listingID);
	            _this.setupExampleEntity(listingID);
	            if (collectionConfig != null) {
	                angular.forEach(_this.getListing(listingID).filterGroups, function (filterGroup) {
	                    collectionConfig.addFilterGroup(filterGroup);
	                });
	                angular.forEach(_this.getListing(listingID).filters, function (filter) {
	                    collectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);
	                });
	                angular.forEach(_this.getListing(listingID).orderBys, function (orderBy) {
	                    collectionConfig.addOrderBy(orderBy.orderBy);
	                });
	                angular.forEach(_this.getListing(listingID).aggregates, function (aggregate) {
	                    collectionConfig.addDisplayAggregate(aggregate.propertyIdentifier, aggregate.aggregateFunction, aggregate.aggregateAlias);
	                });
	                //make sure we have necessary properties to make the actions 
	                angular.forEach(_this.getListing(listingID).actions, function (action) {
	                    if (angular.isDefined(action.queryString)) {
	                        var parsedProperties = _this.utilityService.getPropertiesFromString(action.queryString);
	                        if (parsedProperties && parsedProperties.length) {
	                            collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), "", { isVisible: false });
	                        }
	                    }
	                });
	                //also make sure we have necessary color filter properties
	                angular.forEach(_this.getListing(listingID).colorFilters, function (colorFilter) {
	                    if (angular.isDefined(colorFilter.propertyToCompare)) {
	                        collectionConfig.addDisplayProperty(colorFilter.propertyToCompare, "", { isVisible: false });
	                    }
	                });
	                if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {
	                    collectionConfig.addDisplayProperty(_this.getListingExampleEntity(listingID).$$getIDName(), undefined, { isVisible: false });
	                }
	                collectionConfig.setPageShow(_this.getListing(listingID).paginator.pageShow);
	                collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.currentPage);
	                if (_this.getListing(listingID).multiselectable && (!_this.getListing(listingID).columns || !_this.getListing(listingID).columns.length)) {
	                    //check if it has an active flag and if so then add the active flag
	                    if (_this.getListing(listingID).exampleEntity.metaData.activeProperty && !_this.getListing(listingID).hasCollectionPromise) {
	                        collectionConfig.addFilter('activeFlag', 1, '=', undefined, true);
	                    }
	                }
	                _this.setupHierarchicalExpandable(listingID, collectionConfig);
	            }
	            _this.setupSortable(listingID);
	            _this.updateColumnAndAdministrativeCount(listingID);
	        };
	        this.setupSortable = function (listingID) {
	            _this.attachToListingPageRecordsUpdate(listingID, _this.getPageRecordsWithManualSortOrder, _this.utilityService.createID(32));
	        };
	        this.setupSelect = function (listingID) {
	            if (_this.getListing(listingID).selectFieldName && _this.getListing(listingID).selectFieldName.length) {
	                _this.getListing(listingID).selectable = true;
	                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-select', ' ');
	                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-selectfield="' + _this.getListing(listingID).selectFieldName + '"', ' ');
	            }
	        };
	        this.setupMultiselect = function (listingID) {
	            if (_this.getListing(listingID).multiselectFieldName && _this.getListing(listingID).multiselectFieldName.length) {
	                _this.getListing(listingID).multiselectable = true;
	                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-multiselect', ' ');
	                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-multiselectpropertyidentifier="' + _this.getListing(listingID).multiselectPropertyIdentifier + '"', ' ');
	                //attach observer so we know when a selection occurs
	                _this.getListing(listingID).observerService.attach(_this.getListing(listingID).updateMultiselectValues, _this.getListing(listingID).defaultSelectEvent, _this.getListing(listingID).collectionObject);
	                //attach observer so we know when a pagination change occurs
	                _this.getListing(listingID).observerService.attach(_this.getListing(listingID).paginationPageChange, 'swPaginationAction');
	            }
	            if (_this.getListing(listingID).multiselectValues && _this.getListing(listingID).multiselectValues.length) {
	                //select all owned ids
	                angular.forEach(_this.getListing(listingID).multiselectValues, function (value) {
	                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, value);
	                });
	            }
	            if (_this.getListing(listingID).multiselectIdPaths && _this.getListing(listingID).multiselectIdPaths.length) {
	                angular.forEach(_this.getListing(listingID).multiselectIdPaths.split(','), function (value) {
	                    var id = _this.getListing(listingID).utilityService.listLast(value, '/');
	                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, id);
	                });
	            }
	        };
	        this.setupExampleEntity = function (listingID) {
	            _this.getListing(listingID).exampleEntity = _this.$hibachi.getEntityExample(_this.getListingBaseEntityName(listingID));
	            if (_this.getListing(listingID).exampleEntity != null) {
	                //Look for Hierarchy in example entity
	                if (!_this.getListing(listingID).parentPropertyName || (_this.getListing(listingID).parentPropertyName && !_this.getListing(listingID).parentPropertyName.length)) {
	                    if (_this.getListing(listingID).exampleEntity.metaData.hb_parentPropertyName) {
	                        _this.getListing(listingID).parentPropertyName = _this.getListing(listingID).exampleEntity.metaData.hb_parentPropertyName;
	                    }
	                }
	                if (!_this.getListing(listingID).childPropertyName || (_this.getListing(listingID).childPropertyName && !_this.getListing(listingID).childPropertyName.length)) {
	                    if (_this.getListing(listingID).exampleEntity.metaData.hb_childPropertyName) {
	                        _this.getListing(listingID).childPropertyName = _this.getListing(listingID).exampleEntity.metaData.hb_childPropertyName;
	                    }
	                }
	            }
	        };
	        this.setupHierarchicalExpandable = function (listingID, collectionConfig) {
	            //Setup Hierachy Expandable
	            if (_this.getListing(listingID).parentPropertyName && _this.getListing(listingID).parentPropertyName.length && _this.getListing(listingID).expandable != false) {
	                if (angular.isUndefined(_this.getListing(listingID).expandable)) {
	                    _this.getListing(listingID).expandable = true;
	                }
	                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-expandable', ' ');
	                //add parent property root filter
	                if (!_this.getListing(listingID).hasCollectionPromise) {
	                    collectionConfig.addFilter(_this.getListing(listingID).parentPropertyName + '.' + _this.getListing(listingID).exampleEntity.$$getIDName(), 'NULL', 'IS', undefined, true, false, false);
	                }
	                //this.collectionConfig.addDisplayProperty(this.exampleEntity.$$getIDName()+'Path',undefined,{isVisible:false});
	                //add children column
	                if (_this.getListing(listingID).childPropertyName && _this.getListing(listingID).childPropertyName.length) {
	                    if (_this.getListing(listingID).getChildCount || !_this.getListing(listingID).hasCollectionPromise) {
	                        collectionConfig.addDisplayAggregate(_this.getListing(listingID).childPropertyName, 'COUNT', _this.getListing(listingID).childPropertyName + 'Count', { isVisible: false, isSearchable: false });
	                    }
	                }
	                _this.getListing(listingID).allpropertyidentifiers = _this.utilityService.listAppend(_this.getListing(listingID).allpropertyidentifiers, _this.getListing(listingID).exampleEntity.$$getIDName() + 'Path');
	                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-parentidproperty=' + _this.getListing(listingID).parentPropertyName + '.' + _this.getListing(listingID).exampleEntity.$$getIDName(), ' ');
	            }
	        };
	        this.updateColumnAndAdministrativeCount = function (listingID) {
	            //Setup a variable for the number of columns so that the none can have a proper colspan
	            _this.getListing(listingID).columnCount = (_this.getListing(listingID).columns) ? _this.getListing(listingID).columns.length : 0;
	            if (_this.getListing(listingID).selectable) {
	                _this.getListing(listingID).columnCount++;
	            }
	            if (_this.getListing(listingID).multiselectable) {
	                _this.getListing(listingID).columnCount++;
	            }
	            if (_this.getListing(listingID).sortable) {
	                _this.getListing(listingID).columnCount++;
	            }
	            if (_this.getListing(listingID).administrativeCount) {
	                _this.getListing(listingID).administrativeCount++;
	            }
	        };
	        this.setupDefaultGetCollection = function (listingID) {
	            if (_this.getListing(listingID).collectionConfigs.length == 0) {
	                _this.getListing(listingID).collectionPromise = _this.getListing(listingID).collectionConfig.getEntity();
	                return function () {
	                    _this.getListing(listingID).collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.getCurrentPage());
	                    _this.getListing(listingID).collectionConfig.setPageShow(_this.getListing(listingID).paginator.getPageShow());
	                    if (_this.getListing(listingID).multiSlot) {
	                        _this.getListing(listingID).getEntity().then(function (data) {
	                            _this.getListing(listingID).collectionData = data;
	                            _this.setupDefaultCollectionInfo(listingID);
	                            _this.getListing(listingID).collectionData.pageRecords = data.pageRecords || data.records;
	                            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
	                        }, function (reason) {
	                            throw ("Listing Service encounter a problem when trying to get collection. Reason: " + reason);
	                        });
	                    }
	                    else {
	                        _this.getListing(listingID).collectionPromise.then(function (data) {
	                            _this.getListing(listingID).collectionData = data;
	                            _this.setupDefaultCollectionInfo(listingID);
	                            _this.getListing(listingID).collectionData.pageRecords = data.pageRecords || data.records;
	                            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);
	                        }, function (reason) {
	                            throw ("Listing Service encounter a problem when trying to get collection. Reason: " + reason);
	                        });
	                    }
	                };
	            }
	            else {
	                return function () {
	                    _this.getListing(listingID).collectionData = {};
	                    _this.getListing(listingID).collectionData.pageRecords = [];
	                    var allGetEntityPromises = [];
	                    angular.forEach(_this.getListing(listingID).collectionConfigs, function (collectionConfig, key) {
	                        allGetEntityPromises.push(collectionConfig.getEntity());
	                    });
	                    if (allGetEntityPromises.length) {
	                        _this.$q.all(allGetEntityPromises).then(function (results) {
	                            angular.forEach(results, function (result, key) {
	                                _this.getListing(listingID).listingService.setupColumns(listingID, _this.getListing(listingID).collectionConfigs[key], _this.getListing(listingID).collectionObjects[key]);
	                                _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords.concat(result.records);
	                            });
	                        }, function (reason) {
	                            throw ("listing service had trouble getting collection data because: " + reason);
	                        });
	                    }
	                };
	            }
	        };
	        //End Setup Functions
	        //Order By Functions
	        //for multi order by
	        this.columnOrderBy = function (listingID, column) {
	            var isfound = false;
	            if (_this.getListing(listingID).collectionConfigs != null) {
	                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
	                    if (column.propertyIdentifier == orderBy.propertyIdentifier) {
	                        isfound = true;
	                        _this.getListing(listingID).orderByStates[column.propertyIdentifier] = orderBy.direction;
	                    }
	                });
	            }
	            if (!isfound) {
	                _this.getListing(listingID).orderByStates[column.propertyIdentifier] = '';
	            }
	            return _this.getListing(listingID).orderByStates[column.propertyIdentifier];
	        };
	        //for multi order by
	        this.columnOrderByIndex = function (listingID, column) {
	            var isfound = false;
	            if (_this.getListing(listingID).collectionConfig != null) {
	                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
	                    if (column.propertyIdentifier == orderBy.propertyIdentifier) {
	                        isfound = true;
	                        _this.getListing(listingID).orderByIndices[column.propertyIdentifier] = index + 1;
	                    }
	                });
	            }
	            if (!isfound) {
	                _this.getListing(listingID).orderByIndices[column.propertyIdentifier] = '';
	            }
	            return _this.getListing(listingID).orderByIndices[column.propertyIdentifier];
	        };
	        //for single column order by
	        this.setSingleColumnOrderBy = function (listingID, propertyIdentifier, direction, notify) {
	            if (notify === void 0) { notify = true; }
	            if (direction.toUpperCase() === "ASC") {
	                var oppositeDirection = "DESC";
	            }
	            else {
	                var oppositeDirection = "ASC";
	            }
	            if (_this.getListing(listingID).collectionConfig != null) {
	                var found = false;
	                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {
	                    if (propertyIdentifier == orderBy.propertyIdentifier) {
	                        orderBy.direction = direction;
	                        found = true;
	                    }
	                    else {
	                        orderBy.direction = oppositeDirection;
	                    }
	                });
	                if (!found) {
	                    _this.getListing(listingID).collectionConfig.addOrderBy(propertyIdentifier + "|" + direction);
	                }
	                if (notify) {
	                    _this.observerService.notify(_this.getListingOrderByChangedEventString(listingID));
	                }
	                _this.getCollection(listingID);
	            }
	        };
	        //for manual sort
	        this.setManualSort = function (listingID, toggle) {
	            _this.getListing(listingID).sortable = toggle;
	            if (toggle) {
	                _this.setSingleColumnOrderBy(listingID, "sortOrder", "ASC");
	            }
	        };
	        //for single column order by
	        this.toggleOrderBy = function (listingID, column) {
	            if (_this.getListing(listingID).hasSingleCollectionConfig()) {
	                _this.getListing(listingID).collectionConfig.toggleOrderBy(column.propertyIdentifier, true);
	            }
	            _this.getCollection(listingID);
	        };
	        //End Order By Functions
	        this.getColorFilterConditionString = function (colorFilter, pageRecord) {
	            if (angular.isDefined(colorFilter.comparisonProperty)) {
	                return pageRecord[colorFilter.propertyToCompare.replace('.', '_')] + colorFilter.comparisonOperator + pageRecord[colorFilter.comparisonProperty.replace('.', '_')];
	            }
	            else {
	                return pageRecord[colorFilter.propertyToCompare.replace('.', '_')] + colorFilter.comparisonOperator + colorFilter.comparisonValue;
	            }
	        };
	        //Disable Row Functions
	        this.getKeyOfMatchedDisableRule = function (listingID, pageRecord) {
	            var disableRuleMatchedKey = -1;
	            if (angular.isDefined(_this.getListing(listingID).disableRules)) {
	                angular.forEach(_this.getListing(listingID).disableRules, function (rule, key) {
	                    if (angular.isDefined(pageRecord[rule.filterPropertyIdentifier])) {
	                        if (angular.isString(pageRecord[rule.filterPropertyIdentifier])) {
	                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier].trim();
	                        }
	                        else {
	                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier];
	                        }
	                        if (rule.filterComparisonValue == "null") {
	                            rule.filterComparisonValue = "";
	                        }
	                        if (_this.filterService.filterMatch(pageRecordValue, rule.filterComparisonOperator, rule.filterComparisonValue)) {
	                            disableRuleMatchedKey = key;
	                        }
	                        if (disableRuleMatchedKey != -1) {
	                            return disableRuleMatchedKey;
	                        }
	                    }
	                });
	            }
	            return disableRuleMatchedKey;
	        };
	        this.getPageRecordMatchesDisableRule = function (listingID, pageRecord) {
	            return _this.getKeyOfMatchedDisableRule(listingID, pageRecord) != -1;
	        };
	        //End disable rule functions
	        //Expandable Functions
	        this.setExpandable = function (listingID, value) {
	            if (angular.isDefined(_this.getListing(listingID))) {
	                _this.getListing(listingID).expandable = value;
	            }
	        };
	        this.getKeyOfMatchedExpandableRule = function (listingID, pageRecord) {
	            var expandableRuleMatchedKey = -1;
	            if (angular.isDefined(_this.getListing(listingID)) &&
	                angular.isDefined(_this.getListing(listingID).expandableRules)) {
	                angular.forEach(_this.getListing(listingID).expandableRules, function (rule, key) {
	                    if (angular.isDefined(pageRecord[rule.filterPropertyIdentifier])) {
	                        if (angular.isString(pageRecord[rule.filterPropertyIdentifier])) {
	                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier].trim();
	                        }
	                        else {
	                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier];
	                        }
	                        if (_this.filterService.filterMatch(pageRecordValue, rule.filterComparisonOperator, rule.filterComparisonValue)) {
	                            expandableRuleMatchedKey = key;
	                        }
	                        if (expandableRuleMatchedKey != -1) {
	                            return expandableRuleMatchedKey;
	                        }
	                    }
	                });
	            }
	            return expandableRuleMatchedKey;
	        };
	        this.getExampleEntityForExpandableRecord = function (listingID, pageRecord) {
	            var childCollectionConfig = _this.getListing(listingID).getPageRecordChildCollectionConfigForExpandableRule(pageRecord);
	            if (angular.isDefined(childCollectionConfig)) {
	                return _this.$hibachi.getEntityExample(_this.getListing(listingID).getPageRecordChildCollectionConfigForExpandableRule(pageRecord).baseEntityName);
	            }
	            return _this.getListing(listingID).exampleEntity;
	        };
	        this.getPageRecordMatchesExpandableRule = function (listingID, pageRecord) {
	            return _this.getKeyOfMatchedExpandableRule(listingID, pageRecord) != -1;
	        };
	        this.hasPageRecordRefreshChildrenEvent = function (listingID, pageRecord) {
	            return _this.getPageRecordRefreshChildrenEvent(listingID, pageRecord) != null;
	        };
	        this.getPageRecordRefreshChildrenEvent = function (listingID, pageRecord) {
	            var keyOfExpandableRuleMet = _this.getKeyOfMatchedExpandableRule(listingID, pageRecord);
	            if (keyOfExpandableRuleMet != -1) {
	                return _this.getListing(listingID).expandableRules[keyOfExpandableRuleMet].refreshChildrenEvent;
	            }
	        };
	        this.getPageRecordChildCollectionConfigForExpandableRule = function (listingID, pageRecord) {
	            var keyOfExpandableRuleMet = _this.getKeyOfMatchedExpandableRule(listingID, pageRecord);
	            if (_this.getListing(listingID) != null &&
	                angular.isFunction(_this.getListing(listingID).exampleEntity.$$getIDName) &&
	                angular.isDefined(pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]) &&
	                angular.isDefined(_this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]])) {
	                return _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]];
	            }
	            if (keyOfExpandableRuleMet != -1) {
	                var childCollectionConfig = _this.getListing(listingID).expandableRules[keyOfExpandableRuleMet].childrenCollectionConfig.clone();
	                angular.forEach(childCollectionConfig.filterGroups[0], function (filterGroup, key) {
	                    angular.forEach(filterGroup, function (filter, key) {
	                        if (angular.isString(filter.value)
	                            && filter.value.length
	                            && filter.value.charAt(0) == '$') {
	                            filter.value = _this.utilityService.replaceStringWithProperties(filter.value, pageRecord);
	                        }
	                    });
	                });
	                _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]] = childCollectionConfig;
	                return _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]];
	            }
	        };
	    }
	    return ListingService;
	}());
	exports.ListingService = ListingService;


/***/ }),
/* 459 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingDisplayController = (function () {
	    //@ngInject
	    function SWListingDisplayController($scope, $transclude, $timeout, $q, $hibachi, utilityService, collectionConfigService, listingService, paginationService, selectionService, observerService, rbkeyService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$transclude = $transclude;
	        this.$timeout = $timeout;
	        this.$q = $q;
	        this.$hibachi = $hibachi;
	        this.utilityService = utilityService;
	        this.collectionConfigService = collectionConfigService;
	        this.listingService = listingService;
	        this.paginationService = paginationService;
	        this.selectionService = selectionService;
	        this.observerService = observerService;
	        this.rbkeyService = rbkeyService;
	        /* local state variables */
	        this.actions = [];
	        this.allpropertyidentifiers = "";
	        this.allprocessobjectproperties = "false";
	        this.aggregates = [];
	        this.buttonGroup = [];
	        this.childCollectionConfigs = {};
	        this.collectionConfigs = [];
	        this.collectionObjects = [];
	        this.colorFilters = [];
	        this.columns = [];
	        this.disableRules = [];
	        this.expandableRules = [];
	        this.exampleEntity = "";
	        this.filters = [];
	        this.filterGroups = [];
	        this.hideRules = [];
	        this.multiselectable = false;
	        this.orderBys = [];
	        this.orderByStates = {};
	        this.orderByIndices = {};
	        this.pageRecordsWithManualSortOrder = {};
	        this.searching = false;
	        this.selectable = false;
	        this.showSearchFilters = false;
	        this.sortable = false;
	        this.setupCollectionPromise = function () {
	            if (angular.isUndefined(_this.getCollection)) {
	                _this.getCollection = _this.listingService.setupDefaultGetCollection(_this.tableID);
	            }
	            _this.paginator.getCollection = _this.getCollection;
	            var getCollectionEventID = _this.tableID;
	            //this.observerService.attach(this.getCollectionObserver,'getCollection',getCollectionEventID);
	            _this.listingService.getCollection(_this.tableID);
	        };
	        this.getCollectionObserver = function (param) {
	            console.warn("getCollectionObserver", param);
	            _this.collectionConfig.loadJson(param.collectionConfig);
	            _this.collectionData = undefined;
	            _this.$timeout(function () {
	                _this.getCollection();
	            });
	        };
	        this.initializeState = function () {
	            if (angular.isDefined(_this.name)) {
	                _this.tableID = _this.name;
	            }
	            else {
	                _this.tableID = 'LD' + _this.utilityService.createID();
	            }
	            if (angular.isUndefined(_this.collectionConfig)) {
	                //make it available to swCollectionConfig
	                _this.collectionConfig = null;
	            }
	            if (angular.isUndefined(_this.multiSlot)) {
	                _this.multiSlot = false;
	            }
	            if (angular.isDefined(_this.administrativeCount)) {
	                _this.administrativeCount = parseInt(_this.administrativeCount);
	            }
	            else {
	                _this.administrativeCount = 0;
	            }
	            if (_this.recordDetailAction && _this.recordDetailAction.length) {
	                _this.administrativeCount++;
	                _this.adminattributes = _this.getAdminAttributesByType('detail');
	            }
	            if (_this.recordEditAction && _this.recordEditAction.length) {
	                _this.administrativeCount++;
	                _this.adminattributes = _this.getAdminAttributesByType('edit');
	            }
	            if (_this.recordDeleteAction && _this.recordDeleteAction.length) {
	                _this.administrativeCount++;
	                _this.adminattributes = _this.getAdminAttributesByType('delete');
	            }
	            if (_this.recordAddAction && _this.recordAddAction.length) {
	                _this.administrativeCount++;
	                _this.adminattributes = _this.getAdminAttributesByType('add');
	            }
	            if (_this.collectionConfig != null &&
	                angular.isDefined(_this.collection) &&
	                angular.isDefined(_this.collection.collectionConfig)) {
	                _this.collectionConfig = _this.collection.collectionConfig;
	            }
	            if (angular.isUndefined(_this.collectionObject) &&
	                angular.isDefined(_this.collection) &&
	                angular.isDefined(_this.collection.collectionObject)) {
	                _this.collectionObject = _this.collection.collectionObject;
	            }
	            //set defaults if value is not specifies
	            _this.processObjectProperties = _this.processObjectProperties || '';
	            _this.recordProcessButtonDisplayFlag = _this.recordProcessButtonDisplayFlag || true;
	            _this.norecordstext = _this.rbkeyService.getRBKey('entity.' + _this.collectionObject + '.norecords');
	            if (angular.isUndefined(_this.defaultSelectEvent)) {
	                _this.defaultSelectEvent = 'swSelectionToggleSelection' + _this.tableID;
	            }
	            if (angular.isUndefined(_this.isAngularRoute)) {
	                _this.isAngularRoute = true;
	            }
	            if (angular.isUndefined(_this.customListingControls)) {
	                _this.customListingControls = false;
	            }
	            if (angular.isUndefined(_this.hasSearch)) {
	                _this.hasSearch = true;
	                _this.showSearch = true;
	            }
	            if (angular.isUndefined(_this.showOrderBy)) {
	                _this.showOrderBy = true;
	            }
	            if (angular.isUndefined(_this.expandable)) {
	                _this.expandable = false;
	            }
	            //setup export action
	            if (angular.isDefined(_this.exportAction)) {
	                _this.exportAction = _this.$hibachi.buildUrl('main.collectionExport') + '&collectionExportID=';
	            }
	            _this.paginator = _this.paginationService.createPagination();
	            _this.hasCollectionPromise = false;
	            if (angular.isUndefined(_this.getChildCount)) {
	                _this.getChildCount = false;
	            }
	            //Setup table class
	            _this.tableclass = _this.tableclass || '';
	            _this.tableclass = _this.utilityService.listPrepend(_this.tableclass, 'table table-bordered table-hover', ' ');
	            if (angular.isDefined(_this.sortableFieldName)) {
	                _this.sortableFieldName = "sorting" + _this.tableID;
	            }
	        };
	        this.getListingPageRecordsUpdateEventString = function () {
	            return _this.listingService.getListingPageRecordsUpdateEventString(_this.tableID);
	        };
	        this.getKeyOfMatchedHideRule = function (pageRecord) {
	            return _this.listingService.getKeyOfMatchedHideRule(_this.tableID, pageRecord);
	        };
	        this.getPageRecordMatchesHideRule = function (pageRecord) {
	            return _this.listingService.getPageRecordMatchesHideRule(_this.tableID, pageRecord);
	        };
	        this.getPageRecordValueByColumn = function (pageRecord, column) {
	            return _this.listingService.getPageRecordValueByColumn(pageRecord, column);
	        };
	        this.getKeyOfMatchedDisableRule = function (pageRecord) {
	            return _this.listingService.getKeyOfMatchedExpandableRule(_this.tableID, pageRecord);
	        };
	        this.getPageRecordMatchesDisableRule = function (pageRecord) {
	            return _this.listingService.getPageRecordMatchesDisableRule(_this.tableID, pageRecord);
	        };
	        this.getKeyOfMatchedExpandableRule = function (pageRecord) {
	            return _this.listingService.getKeyOfMatchedExpandableRule(_this.tableID, pageRecord);
	        };
	        this.getPageRecordMatchesExpandableRule = function (pageRecord) {
	            return _this.listingService.getPageRecordMatchesExpandableRule(_this.tableID, pageRecord);
	        };
	        this.getPageRecordChildCollectionConfigForExpandableRule = function (pageRecord) {
	            return _this.listingService.getPageRecordChildCollectionConfigForExpandableRule(_this.tableID, pageRecord);
	        };
	        this.getPageRecordRefreshChildrenEvent = function (pageRecord) {
	            if (_this.listingService.hasPageRecordRefreshChildrenEvent(_this.tableID, pageRecord)) {
	                return _this.listingService.getPageRecordRefreshChildrenEvent(_this.tableID, pageRecord);
	            }
	            else {
	                return "";
	            }
	        };
	        this.getExampleEntityForExpandableRecord = function (pageRecord) {
	            return _this.listingService.getExampleEntityForExpandableRecord(_this.tableID, pageRecord);
	        };
	        this.getNGClassObjectForPageRecordRow = function (pageRecord) {
	            return _this.listingService.getNGClassObjectForPageRecordRow(_this.tableID, pageRecord);
	        };
	        this.getNGClassObjectForPageRecordCell = function (pageRecord, column) {
	            var classObjectString = "{";
	            return classObjectString + "}";
	        };
	        this.getColorFilterConditionString = function (colorFilter, pageRecord) {
	            return _this.listingService.getColorFilterConditionString(colorFilter, pageRecord);
	        };
	        this.hasSingleCollectionConfig = function () {
	            return _this.collectionConfig && _this.collectionConfigs.length == 0;
	        };
	        this.toggleOrderBy = function (column) {
	            _this.listingService.toggleOrderBy(_this.tableID, column);
	        };
	        this.columnOrderByIndex = function (column) {
	            return _this.listingService.columnOrderByIndex(_this.tableID, column);
	        };
	        this.updateMultiselectValues = function (res) {
	            _this.multiselectValues = _this.selectionService.getSelections(_this.tableID);
	            if (_this.selectionService.isAllSelected(_this.tableID)) {
	                _this.multiselectCount = _this.collectionData.recordsCount - _this.selectionService.getSelectionCount(_this.tableID);
	            }
	            else {
	                _this.multiselectCount = _this.selectionService.getSelectionCount(_this.tableID);
	            }
	            switch (res.action) {
	                case 'uncheck':
	                    _this.isCurrentPageRecordsSelected = false;
	                    break;
	                case 'selectAll':
	                    _this.allSelected = true;
	                    _this.isCurrentPageRecordsSelected = false;
	                    break;
	                case 'clear':
	                    _this.allSelected = false;
	                    _this.isCurrentPageRecordsSelected = false;
	                    break;
	            }
	        };
	        this.getPageRecordKey = function (propertyIdentifier) {
	            return _this.listingService.getPageRecordKey(propertyIdentifier);
	        };
	        this.getAdminAttributesByType = function (type) {
	            var recordActionName = 'record' + type.toUpperCase() + 'Action';
	            var recordActionPropertyName = recordActionName + 'Property';
	            var recordActionQueryStringName = recordActionName + 'QueryString';
	            var recordActionModalName = recordActionName + 'Modal';
	            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'action="' + _this[recordActionName] + '"', " ");
	            if (_this[recordActionPropertyName] && _this[recordActionPropertyName].length) {
	                _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'actionproperty="' + _this[recordActionPropertyName] + '"', " ");
	            }
	            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'querystring="' + _this[recordActionQueryStringName] + '"', " ");
	            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, 'data-' + type + 'modal="' + _this[recordActionModalName] + '"', " ");
	        };
	        this.getExportAction = function () {
	            return _this.exportAction + _this.collectionID;
	        };
	        this.exportCurrentList = function (selection) {
	            if (selection === void 0) { selection = false; }
	            if (_this.collectionConfigs.length == 0) {
	                var exportCollectionConfig = angular.copy(_this.collectionConfig.getCollectionConfig());
	                if (selection && !angular.isUndefined(_this.selectionService.getSelections(_this.tableID))
	                    && (_this.selectionService.getSelections(_this.tableID).length > 0)) {
	                    exportCollectionConfig.filterGroups[0].filterGroup = [
	                        {
	                            "displayPropertyIdentifier": _this.rbkeyService.getRBKey("entity." + exportCollectionConfig.baseEntityName.toLowerCase() + "." + _this.exampleEntity.$$getIDName().toLowerCase()),
	                            "propertyIdentifier": exportCollectionConfig.baseEntityAlias + "." + _this.exampleEntity.$$getIDName(),
	                            "comparisonOperator": (_this.allSelected) ? "not in" : "in",
	                            "value": _this.selectionService.getSelections(_this.tableID).join(),
	                            "displayValue": _this.selectionService.getSelections(_this.tableID).join(),
	                            "ormtype": "string",
	                            "fieldtype": "id",
	                            "conditionDisplay": "In List"
	                        }
	                    ];
	                }
	            }
	            else {
	                //multiCollectionConfig logic
	            }
	            $('body').append('<form action="/?' + _this.$hibachi.getConfigValue('action') + '=main.collectionConfigExport" method="post" id="formExport"></form>');
	            $('#formExport')
	                .append("<input type='hidden' name='collectionConfig' value='" + angular.toJson(exportCollectionConfig) + "' />")
	                .submit()
	                .remove();
	        };
	        this.paginationPageChange = function (res) {
	            _this.isCurrentPageRecordsSelected = false;
	        };
	        this.selectCurrentPageRecords = function () {
	            _this.listingService.selectCurrentPageRecords(_this.tableID);
	        };
	        //these are no longer going to work
	        this.clearSelection = function () {
	            _this.selectionService.clearSelection(_this.tableID);
	        };
	        this.selectAll = function () {
	            _this.selectionService.selectAll(_this.tableID);
	        };
	        //promises to determine which set of logic will run
	        this.multipleCollectionDeffered = $q.defer();
	        this.multipleCollectionPromise = this.multipleCollectionDeffered.promise;
	        this.singleCollectionDeferred = $q.defer();
	        this.singleCollectionPromise = this.singleCollectionDeferred.promise;
	        if (angular.isDefined(this.collection) && angular.isString(this.collection)) {
	            //not sure why we have two properties for this
	            this.baseEntityName = this.collection;
	            this.collectionObject = this.collection;
	            this.collectionConfig = this.collectionConfigService.newCollectionConfig(this.collectionObject);
	            this.$timeout(function () {
	                _this.collection = _this.collectionConfig;
	                _this.columns = _this.collectionConfig.columns;
	            });
	            this.multipleCollectionDeffered.reject();
	        }
	        this.initializeState();
	        this.hasCollectionPromise = angular.isDefined(this.collectionPromise);
	        if (angular.isDefined(this.collectionPromise)) {
	            this.hasCollectionPromise = true;
	            this.multipleCollectionDeffered.reject();
	        }
	        if (this.collectionConfig != null) {
	            this.multipleCollectionDeffered.reject();
	        }
	        this.listingService.setListingState(this.tableID, this);
	        //this is performed after the listing state is set above to populate columns and multiple collectionConfigs if present
	        this.$transclude(this.$scope, function () { });
	        console.log('multislot', this.multiSlot);
	        if (this.multiSlot) {
	            this.singleCollectionPromise.then(function () {
	                _this.multipleCollectionDeffered.reject();
	            });
	            this.multipleCollectionPromise.then(function () {
	                //now do the intial setup
	                _this.listingService.setupInMultiCollectionConfigMode(_this.tableID);
	            }).catch(function () {
	                //do the initial setup for single collection mode
	                _this.listingService.setupInSingleCollectionConfigMode(_this.tableID, _this.$scope);
	            }).finally(function () {
	                if (angular.isUndefined(_this.getCollection)) {
	                    _this.getCollection = _this.listingService.setupDefaultGetCollection(_this.tableID);
	                }
	                _this.paginator.getCollection = _this.getCollection;
	                var getCollectionEventID = _this.tableID;
	                _this.observerService.attach(_this.getCollectionObserver, 'getCollection', getCollectionEventID);
	            });
	        }
	        else if (this.multiSlot == false) {
	            this.setupCollectionPromise();
	        }
	    }
	    return SWListingDisplayController;
	}());
	var SWListingDisplay = (function () {
	    //@ngInject
	    function SWListingDisplay(listingPartialPath, hibachiPathBuilder) {
	        this.listingPartialPath = listingPartialPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.restrict = 'E';
	        this.scope = {};
	        this.transclude = {
	            addAction: "?swListingAddAction",
	            detailAction: "?swListingDetailAction",
	            deleteAction: "?swListingDeleteAction",
	            editAction: "?swListingEditAction",
	            saveAction: "?swListingSaveAction",
	            columns: "?swListingColumns",
	            collectionConfigs: "?swCollectionConfigs",
	            disableRules: "?swDisabledRowRules",
	            expandableRules: "?swExpandableRowRules",
	            customListingControls: "?swCustomListingControls"
	        };
	        this.bindToController = {
	            isRadio: "<?",
	            angularLinks: "<?",
	            isAngularRoute: "<?",
	            name: "@?",
	            /*required*/
	            collection: "<?",
	            collectionConfig: "<?",
	            getCollection: "&?",
	            collectionPromise: "<?",
	            edit: "<?",
	            /*Optional*/
	            title: "<?",
	            childPropertyName: "@?",
	            baseEntity: "<?",
	            baseEntityName: "@?",
	            baseEntityId: "@?",
	            /*Admin Actions*/
	            actions: "<?",
	            administrativeCount: "@?",
	            recordEditAction: "@?",
	            recordEditActionProperty: "@?",
	            recordEditQueryString: "@?",
	            recordEditModal: "<?",
	            recordEditDisabled: "<?",
	            recordDetailAction: "@?",
	            recordDetailActionProperty: "@?",
	            recordDetailQueryString: "@?",
	            recordDetailModal: "<?",
	            recordDeleteAction: "@?",
	            recordDeleteActionProperty: "@?",
	            recordDeleteQueryString: "@?",
	            recordAddAction: "@?",
	            recordAddActionProperty: "@?",
	            recordAddQueryString: "@?",
	            recordAddModal: "<?",
	            recordAddDisabled: "<?",
	            recordProcessesConfig: "<?",
	            /* record processes config is an array of actions. Example:
	            [
	            {
	                recordProcessAction:"@",
	                recordProcessActionProperty:"@",
	                recordProcessQueryString:"@",
	                recordProcessContext:"@",
	                recordProcessEntity:"=",
	                recordProcessEntityData:"=",
	                recordProcessUpdateTableID:"=",
	                recordProcessButtonDisplayFlag:"=",
	            }
	            ]
	            */
	            /*Hierachy Expandable*/
	            parentPropertyName: "@?",
	            //booleans
	            expandable: "<?",
	            expandableOpenRoot: "<?",
	            /*Searching*/
	            searchText: "<?",
	            /*Sorting*/
	            sortable: "<?",
	            sortableFieldName: "@?",
	            sortProperty: "@?",
	            sortContextIDColumn: "@?",
	            sortContextIDValue: "@?",
	            /*Single Select*/
	            selectFiledName: "@?",
	            selectValue: "@?",
	            selectTitle: "@?",
	            /*Multiselect*/
	            multiselectFieldName: "@?",
	            multiselectPropertyIdentifier: "@?",
	            multiselectIdPaths: "@?",
	            multiselectValues: "@?",
	            /*Helper / Additional / Custom*/
	            tableattributes: "@?",
	            tableclass: "@?",
	            typeaheadDataKey: "@?",
	            adminattributes: "@?",
	            /* Settings */
	            showheader: "<?",
	            showOrderBy: "<?",
	            showTopPagination: "<?",
	            showSearch: "<?",
	            showSearchFilters: "<?",
	            /* Basic Action Caller Overrides*/
	            createModal: "<?",
	            createAction: "@?",
	            createQueryString: "@?",
	            exportAction: "@?",
	            getChildCount: "<?",
	            hasSearch: "<?",
	            hasActionBar: "<?",
	            multiSlot: "<?",
	            customListingControls: "<?"
	        };
	        this.controller = SWListingDisplayController;
	        this.controllerAs = "swListingDisplay";
	        this.compile = function (element, attrs) {
	            return {
	                pre: function ($scope, element, attrs, transclude) {
	                },
	                post: function ($scope, element, attrs) {
	                }
	            };
	        };
	        this.listingPartialPath = listingPartialPath;
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.listingPartialPath) + 'listingdisplay.html';
	    }
	    SWListingDisplay.Factory = function () {
	        var directive = function (listingPartialPath, hibachiPathBuilder) { return new SWListingDisplay(listingPartialPath, hibachiPathBuilder); };
	        directive.$inject = [
	            'listingPartialPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWListingDisplay;
	}());
	exports.SWListingDisplay = SWListingDisplay;


/***/ }),
/* 460 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingDisplayCellController = (function () {
	    //@ngInject
	    function SWListingDisplayCellController(listingPartialPath, hibachiPathBuilder, listingService, utilityService, $scope) {
	        var _this = this;
	        this.listingPartialPath = listingPartialPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.listingService = listingService;
	        this.utilityService = utilityService;
	        this.$scope = $scope;
	        this.expandable = false;
	        this.getDirectiveTemplate = function () {
	            var templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycell.html';
	            if (_this.expandable || (_this.swListingDisplay.expandable && _this.column.tdclass && _this.column.tdclass === 'primary')) {
	                templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplayselectablecellexpandable.html';
	            }
	            if (!_this.swListingDisplay.expandable || !_this.column.tdclass || _this.column.tdclass !== 'primary') {
	                if (_this.column.ormtype === 'timestamp') {
	                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycelldate.html';
	                }
	                else if (_this.column.type === 'currency') {
	                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycellcurrency.html';
	                }
	                else if (_this.column.aggregate) {
	                    _this.value = _this.pageRecord[_this.swListingDisplay.getPageRecordKey(_this.column.aggregate.aggregateAlias)];
	                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + 'listingdisplaycellaggregate.html';
	                }
	            }
	            return templateUrl;
	        };
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.listingPartialPath = listingPartialPath;
	        this.$scope = $scope;
	        this.value = this.listingService.getPageRecordValueByColumn(this.pageRecord, this.column);
	        this.popover = this.utilityService.replaceStringWithProperties(this.column.tooltip, this.pageRecord);
	        this.hasActionCaller = false;
	        if (this.column.action && this.column.queryString) {
	            this.hasActionCaller = true;
	            this.actionCaller = {
	                action: this.column.action
	            };
	            if (this.column.queryString) {
	                this.actionCaller.action.queryString = this.swListingDisplay.replaceStringWithProperties(this.column.queryString, this.pageRecord);
	            }
	        }
	        if (this.cellView) {
	            var htmlCellView = this.utilityService.camelCaseToSnakeCase(this.cellView);
	            this.template = htmlCellView;
	            //convert the page records into attrs
	            this.templateVariables = this.pageRecord;
	            if (angular.isDefined(this.column.columnID)) {
	                this.templateVariables["column"] = this.column.columnID;
	            }
	            if (angular.isDefined(this.swListingDisplay.baseEntityName) && angular.isDefined(this.swListingDisplay.baseEntityId)) {
	                this.templateVariables["baseEntityId"] = this.swListingDisplay.baseEntityId;
	                this.templateVariables["baseEntityName"] = this.swListingDisplay.baseEntityName;
	            }
	            if (angular.isDefined(this.column.propertyIdentifier)) {
	                this.templateVariables["columnPropertyIdentifier"] = this.column.propertyIdentifier;
	            }
	            this.templateVariables["listingDisplayID"] = this.swListingDisplay.tableID;
	        }
	        else {
	            this.templateUrl = this.getDirectiveTemplate();
	        }
	    }
	    return SWListingDisplayCellController;
	}());
	var SWListingDisplayCell = (function () {
	    //@ngInject
	    function SWListingDisplayCell() {
	        this.restrict = 'E';
	        this.scope = {};
	        this.bindToController = {
	            swListingDisplay: "=?",
	            column: "=?",
	            pageRecord: "=?",
	            cellView: "@?",
	            expandableRules: "=?"
	        };
	        this.controller = SWListingDisplayCellController;
	        this.controllerAs = "swListingDisplayCell";
	        this.template = "\n        <div ng-if=\"swListingDisplayCell.template\" sw-directive data-variables=\"swListingDisplayCell.templateVariables\" data-directive-template=\"swListingDisplayCell.template\"></div>\n        <div ng-if=\"swListingDisplayCell.templateUrl\" ng-include src=\"swListingDisplayCell.templateUrl\"></div>\n        <sw-action-caller ng-if=\"swListingDisplayCell.hasActionCaller\"\n                    data-action=\"{{swListingDisplayCell.actionCaller.action}}\"\n                    data-query-string=\"{{swListingDisplayCell.actionCaller.action.queryString}}\"\n                    data-text=\"{{swListingDisplayCell.value}}\"\n                    data-tooltip-text=\"{{swListingDisplayCell.popover}}\"\n\n        >\n        </sw-action-caller>\n    ";
	    }
	    SWListingDisplayCell.Factory = function () {
	        var directive = function () { return new SWListingDisplayCell(); };
	        directive.$inject = [];
	        return directive;
	    };
	    return SWListingDisplayCell;
	}());
	exports.SWListingDisplayCell = SWListingDisplayCell;


/***/ }),
/* 461 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingControlsController = (function () {
	    //@ngInject
	    function SWListingControlsController($hibachi, metadataService, collectionService, listingService, observerService) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.metadataService = metadataService;
	        this.collectionService = collectionService;
	        this.listingService = listingService;
	        this.observerService = observerService;
	        this.displayOptionsClosed = true;
	        this.filtersClosed = true;
	        this.columnIsControllableMap = {};
	        this.filterActions = function (res) {
	            if (res.action == 'add') {
	                _this.paginator.setCurrentPage(1);
	            }
	            _this.filtersClosed = true;
	        };
	        this.getSelectedSearchColumnName = function () {
	            return (angular.isUndefined(_this.selectedSearchColumn)) ? 'All' : _this.selectedSearchColumn.title;
	        };
	        this.canDisplayColumn = function (column) {
	            if (angular.isDefined(_this.columnIsControllableMap[column.propertyIdentifier])) {
	                return _this.columnIsControllableMap[column.propertyIdentifier];
	            }
	            for (var i = 0; i < _this.listingColumns.length; i++) {
	                if (column.propertyIdentifier == _this.listingColumns[i].propertyIdentifier) {
	                    _this.columnIsControllableMap[column.propertyIdentifier] = true;
	                }
	            }
	            if (!_this.columnIsControllableMap[column.propertyIdentifier]) {
	                _this.columnIsControllableMap[column.propertyIdentifier] = false;
	            }
	            return _this.columnIsControllableMap[column.propertyIdentifier];
	        };
	        this.addSearchFilter = function () {
	            if (angular.isUndefined(_this.selectedSearchColumn) || !_this.searchText)
	                return;
	            var keywords = _this.searchText.split(" ");
	            for (var i = 0; i < keywords.length; i++) {
	                _this.collectionConfig.addLikeFilter(_this.selectedSearchColumn.propertyIdentifier, keywords[i], '%w%', undefined, _this.selectedSearchColumn.title);
	            }
	            _this.searchText = '';
	            _this.collectionConfig.setKeywords(_this.searchText);
	            _this.paginator.setCurrentPage(1);
	        };
	        this.toggleDisplayOptions = function (closeButton) {
	            if (closeButton === void 0) { closeButton = false; }
	            if (closeButton) {
	                _this.displayOptionsClosed = true;
	            }
	            else {
	                _this.displayOptionsClosed = !_this.displayOptionsClosed;
	            }
	        };
	        this.setItemInUse = function (booleanValue) {
	            _this.itemInUse = booleanValue;
	        };
	        this.removeFilter = function (array, index, reloadCollection) {
	            if (reloadCollection === void 0) { reloadCollection = true; }
	            array.splice(index, 1);
	            if (reloadCollection) {
	                _this.paginator.setCurrentPage(1);
	            }
	        };
	        this.toggleFilters = function () {
	            if (_this.filtersClosed) {
	                _this.filtersClosed = false;
	                _this.newFilterPosition = _this.collectionService.newFilterItem(_this.collectionConfig.filterGroups[0].filterGroup, _this.setItemInUse);
	            }
	        };
	        this.selectFilterItem = function (filterItem) {
	            _this.filtersClosed = false;
	            _this.collectionService.selectFilterItem(filterItem);
	        };
	        this.saveCollection = function () {
	            _this.getCollection()();
	        };
	        if (angular.isUndefined(this.showToggleFilters)) {
	            this.showToggleFilters = true;
	        }
	        if (angular.isUndefined(this.showToggleDisplayOptions)) {
	            this.showToggleDisplayOptions = true;
	        }
	        if (angular.isUndefined(this.showFilters)) {
	            this.showFilters = false;
	        }
	        this.backupColumnsConfig = this.collectionConfig.getColumns();
	        if (angular.isDefined(this.tableId)) {
	            this.listingColumns = this.listingService.getListingColumns(this.tableId);
	        }
	        this.filterPropertiesList = {};
	        $hibachi.getFilterPropertiesByBaseEntityName(this.collectionConfig.baseEntityAlias).then(function (value) {
	            metadataService.setPropertiesList(value, _this.collectionConfig.baseEntityAlias);
	            _this.filterPropertiesList[_this.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias(_this.collectionConfig.baseEntityAlias);
	            metadataService.formatPropertiesList(_this.filterPropertiesList[_this.collectionConfig.baseEntityAlias], _this.collectionConfig.baseEntityAlias);
	        });
	        this.observerService.attach(this.filterActions, 'filterItemAction');
	    }
	    return SWListingControlsController;
	}());
	var SWListingControls = (function () {
	    function SWListingControls(collectionPartialsPath, hibachiPathBuilder) {
	        this.collectionPartialsPath = collectionPartialsPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.restrict = 'E';
	        this.scope = {};
	        this.bindToController = {
	            collectionConfig: "=",
	            tableId: "=?",
	            paginator: "=",
	            getCollection: "&",
	            showFilters: "=?",
	            showToggleFilters: "=?",
	            showToggleDisplayOptions: "=?"
	        };
	        this.controller = SWListingControlsController;
	        this.controllerAs = 'swListingControls';
	        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "listingcontrols.html";
	    }
	    SWListingControls.Factory = function () {
	        var directive = function (listingPartialPath, hibachiPathBuilder) { return new SWListingControls(listingPartialPath, hibachiPathBuilder); };
	        directive.$inject = ['listingPartialPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWListingControls;
	}());
	SWListingControls.$inject = ['listingPartialPath', 'hibachiPathBuilder'];
	exports.SWListingControls = SWListingControls;


/***/ }),
/* 462 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingAggregateController = (function () {
	    function SWListingAggregateController() {
	        var _this = this;
	        this.init = function () {
	            _this.editable = _this.editable || false;
	        };
	        this.init();
	    }
	    return SWListingAggregateController;
	}());
	var SWListingAggregate = (function () {
	    function SWListingAggregate() {
	        this.restrict = 'EA';
	        this.scope = true;
	        this.bindToController = {
	            propertyIdentifier: "@",
	            aggregateFunction: "@",
	            aggregateAlias: "@?"
	        };
	        this.controller = SWListingAggregateController;
	        this.controllerAs = "swListingAggregate";
	        this.link = function (scope, element, attrs) {
	            var aggregate = {
	                propertyIdentifier: scope.swListingAggregate.propertyIdentifier,
	                aggregateFunction: scope.swListingAggregate.aggregateFunction,
	                aggregateAlias: scope.swListingAggregate.aggregateAlias,
	            };
	            scope.$parent.swListingDisplay.aggregates.push(aggregate);
	        };
	    }
	    SWListingAggregate.Factory = function () {
	        var directive = function () { return new SWListingAggregate(); };
	        directive.$inject = [];
	        return directive;
	    };
	    return SWListingAggregate;
	}());
	exports.SWListingAggregate = SWListingAggregate;


/***/ }),
/* 463 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingColorFilterController = (function () {
	    function SWListingColorFilterController() {
	        this.init = function () {
	        };
	        this.init();
	    }
	    return SWListingColorFilterController;
	}());
	var SWListingColorFilter = (function () {
	    function SWListingColorFilter(utilityService) {
	        var _this = this;
	        this.utilityService = utilityService;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.bindToController = {
	            propertyToCompare: "@",
	            comparisonOperator: "@",
	            comparisonValue: "@",
	            comparisonProperty: "@",
	            colorClass: "@",
	            color: "@"
	        };
	        this.controller = SWListingColorFilterController;
	        this.controllerAs = "swListingColorFilter";
	        this.link = function (scope, element, attrs) {
	            var colorFilter = {
	                propertyToCompare: scope.swListingColorFilter.propertyToCompare,
	                comparisonOperator: scope.swListingColorFilter.comparisonOperator,
	                comparisonValue: scope.swListingColorFilter.comparisonValue,
	                comparisonProperty: scope.swListingColorFilter.comparisonProperty,
	                colorClass: scope.swListingColorFilter.colorClass,
	                color: scope.swListingColorFilter.color
	            };
	            if (_this.utilityService.ArrayFindByPropertyValue(scope.$parent.swListingDisplay.colorFilters, 'propertyToCompare', colorFilter.propertyToCompare) === -1) {
	                scope.$parent.swListingDisplay.colorFilters.push(colorFilter);
	            }
	        };
	    }
	    SWListingColorFilter.Factory = function () {
	        var directive = function (utilityService) { return new SWListingColorFilter(utilityService); };
	        directive.$inject = [
	            'utilityService'
	        ];
	        return directive;
	    };
	    return SWListingColorFilter;
	}());
	exports.SWListingColorFilter = SWListingColorFilter;


/***/ }),
/* 464 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingColumnController = (function () {
	    //@ngInject
	    function SWListingColumnController($injector) {
	        var _this = this;
	        this.$injector = $injector;
	        this.hasCellView = false;
	        this.hasHeaderView = false;
	        this.init = function () {
	            _this.editable = _this.editable || false;
	            //did a cellView get suggested, if so does it exist
	            if (_this.cellView) {
	                if (_this.$injector.has(_this.cellView + 'Directive')) {
	                    _this.hasCellView = true;
	                }
	                else {
	                    throw (_this.cellView + ' is not an existing directive');
	                }
	            }
	            if (_this.headerView) {
	                if (_this.$injector.has(_this.headerView + 'Directive')) {
	                    _this.hasHeaderView = true;
	                }
	                else {
	                    throw (_this.headerView + ' is not an existing directive');
	                }
	            }
	        };
	        this.$injector = $injector;
	        this.init();
	    }
	    return SWListingColumnController;
	}());
	var SWListingColumn = (function () {
	    function SWListingColumn(listingService, scopeService, utilityService) {
	        var _this = this;
	        this.listingService = listingService;
	        this.scopeService = scopeService;
	        this.utilityService = utilityService;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.bindToController = {
	            propertyIdentifier: "@",
	            processObjectProperty: "@?",
	            //defined as aggregate = {aggregateFunction:'COUNT',aggregateAlias:'aliasstring'}
	            aggregate: "=?",
	            title: "@?",
	            tdclass: "@?",
	            search: "=?",
	            sort: "=?",
	            filter: "=?",
	            isVisible: "=?",
	            range: "=?",
	            editable: "=?",
	            buttonGroup: "=?",
	            cellView: "@?",
	            headerView: "@?",
	            fallbackPropertyIdentifiers: "@?"
	        };
	        this.controller = SWListingColumnController;
	        this.controllerAs = "swListingColumn";
	        this.link = function (scope, element, attrs) {
	            var column = {
	                columnID: "C" + _this.utilityService.createID(31),
	                propertyIdentifier: scope.swListingColumn.propertyIdentifier,
	                fallbackPropertyIdentifiers: scope.swListingColumn.fallbackPropertyIdentifiers,
	                processObjectProperty: scope.swListingColumn.processObjectProperty,
	                title: scope.swListingColumn.title,
	                tdclass: scope.swListingColumn.tdclass,
	                search: scope.swListingColumn.search,
	                sort: scope.swListingColumn.sort,
	                filter: scope.swListingColumn.filter,
	                range: scope.swListingColumn.range,
	                editable: scope.swListingColumn.editable,
	                buttonGroup: scope.swListingColumn.buttonGroup,
	                hasCellView: scope.swListingColumn.hasCellView,
	                hasHeaderView: scope.swListingColumn.hasHeaderView,
	                isVisible: scope.swListingColumn.isVisible || true
	            };
	            if (scope.swListingColumn.hasCellView) {
	                column.cellView = scope.swListingColumn.cellView;
	            }
	            if (scope.swListingColumn.hasHeaderView) {
	                column.headerView = _this.utilityService.camelCaseToSnakeCase(scope.swListingColumn.headerView);
	            }
	            //aggregate logic
	            if (scope.swListingColumn.aggregate) {
	                column.aggregate = scope.swListingColumn.aggregate;
	                column.aggregate.propertyIdentifier = scope.swListingColumn.propertyIdentifier;
	            }
	            var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");
	            if (angular.isDefined(listingDisplayScope)
	                && angular.isDefined(listingDisplayScope.swListingDisplay)
	                && angular.isDefined(listingDisplayScope.swListingDisplay.tableID)
	                && listingDisplayScope.swListingDisplay.tableID.length) {
	                var listingDisplayID = listingDisplayScope.swListingDisplay.tableID;
	                _this.listingService.addColumn(listingDisplayID, column);
	            }
	            else {
	                throw ("listing display scope not available to sw-listing-column or there is no table id");
	            }
	        };
	    }
	    SWListingColumn.Factory = function () {
	        var directive = function (listingService, scopeService, utilityService) { return new SWListingColumn(listingService, scopeService, utilityService); };
	        directive.$inject = [
	            'listingService',
	            'scopeService',
	            'utilityService'
	        ];
	        return directive;
	    };
	    return SWListingColumn;
	}());
	SWListingColumn.$inject = ['utilityService'];
	exports.SWListingColumn = SWListingColumn;


/***/ }),
/* 465 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	/* SwListingDisableRule
	 * defines a filter, by which to determine what rows will be disabled
	 */
	var SWListingDisableRuleController = (function () {
	    //@ngInject
	    function SWListingDisableRuleController($q) {
	        this.$q = $q;
	    }
	    return SWListingDisableRuleController;
	}());
	var SWListingDisableRule = (function () {
	    function SWListingDisableRule(scopeService, $q) {
	        var _this = this;
	        this.scopeService = scopeService;
	        this.$q = $q;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.template = "\n        \n    ";
	        this.bindToController = {
	            filterPropertyIdentifier: "@",
	            filterComparisonOperator: "@",
	            filterComparisonValue: "@"
	        };
	        this.controller = SWListingDisableRuleController;
	        this.controllerAs = "swListingDisableRule";
	        this.link = function (scope, element, attrs) {
	            var rule = {
	                filterPropertyIdentifier: scope.swListingDisableRule.filterPropertyIdentifier,
	                filterComparisonOperator: scope.swListingDisableRule.filterComparisonOperator,
	                filterComparisonValue: scope.swListingDisableRule.filterComparisonValue
	            };
	            var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");
	            if (angular.isDefined(listingDisplayScope.swListingDisplay)) {
	                listingDisplayScope = listingDisplayScope.swListingDisplay;
	            }
	            else {
	                throw ("listing display scope not available to sw-listing-disable-rule");
	            }
	            listingDisplayScope.disableRules.push(rule);
	        };
	    }
	    SWListingDisableRule.Factory = function () {
	        var directive = function (scopeService, $q) { return new SWListingDisableRule(scopeService, $q); };
	        directive.$inject = [
	            'scopeService',
	            '$q'
	        ];
	        return directive;
	    };
	    return SWListingDisableRule;
	}());
	exports.SWListingDisableRule = SWListingDisableRule;


/***/ }),
/* 466 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	/* SWListingExpandableRule
	 * defines a filter, by which to determine what will be expanded
	 * supplies the collection config and any other necessary rules for what will be loaded and displayed
	 */
	var SWListingExpandableRuleController = (function () {
	    //@ngInject
	    function SWListingExpandableRuleController($q) {
	        this.$q = $q;
	        this.hasChildrenCollectionConfigDeferred = $q.defer();
	        this.hasChildrenCollectionConfigPromise = this.hasChildrenCollectionConfigDeferred.promise;
	        //why did I need this? 
	        this.childrenCollectionConfig = null;
	    }
	    return SWListingExpandableRuleController;
	}());
	var SWListingExpandableRule = (function () {
	    function SWListingExpandableRule(scopeService, $q) {
	        var _this = this;
	        this.scopeService = scopeService;
	        this.$q = $q;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.transclude = {
	            collectionConfig: "?swConfig"
	        };
	        this.template = "\n        <div ng-transclude=\"collectionConfig\"></div> \n    ";
	        this.bindToController = {
	            childrenCollectionConfig: "=?",
	            filterPropertyIdentifier: "@",
	            filterComparisonOperator: "@",
	            filterComparisonValue: "@",
	            refreshChildrenEvent: "@?"
	        };
	        this.controller = SWListingExpandableRuleController;
	        this.controllerAs = "swListingExpandableRule";
	        this.link = function (scope, element, attrs) {
	            scope.swListingExpandableRule.hasChildrenCollectionConfigPromise.then(function () {
	                var rule = {
	                    filterPropertyIdentifier: scope.swListingExpandableRule.filterPropertyIdentifier,
	                    filterComparisonOperator: scope.swListingExpandableRule.filterComparisonOperator,
	                    filterComparisonValue: scope.swListingExpandableRule.filterComparisonValue,
	                    childrenCollectionConfig: scope.swListingExpandableRule.childrenCollectionConfig,
	                    refreshChildrenEvent: scope.swListingExpandableRule.refreshChildrenEvent
	                };
	                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");
	                if (angular.isDefined(listingDisplayScope.swListingDisplay)) {
	                    listingDisplayScope = listingDisplayScope.swListingDisplay;
	                }
	                else {
	                    throw ("listing display scope not available to sw-listing-expandable-rule");
	                }
	                listingDisplayScope.expandableRules.push(rule);
	            });
	        };
	    }
	    SWListingExpandableRule.Factory = function () {
	        var directive = function (scopeService, $q) { return new SWListingExpandableRule(scopeService, $q); };
	        directive.$inject = [
	            'scopeService',
	            '$q'
	        ];
	        return directive;
	    };
	    return SWListingExpandableRule;
	}());
	exports.SWListingExpandableRule = SWListingExpandableRule;


/***/ }),
/* 467 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingFilterController = (function () {
	    function SWListingFilterController() {
	        this.init = function () {
	        };
	        this.init();
	    }
	    return SWListingFilterController;
	}());
	var SWListingFilter = (function () {
	    function SWListingFilter() {
	        this.restrict = 'EA';
	        this.scope = true;
	        this.bindToController = {
	            propertyIdentifier: "@",
	            comparisonOperator: "@",
	            comparisonValue: "@",
	            logicalOperator: "@",
	            hidden: "@?"
	        };
	        this.controller = SWListingFilterController;
	        this.controllerAs = "swListingFilter";
	        this.link = function (scope, element, attrs) {
	            var filter = {
	                propertyIdentifier: scope.swListingFilter.propertyIdentifier,
	                comparisonOperator: scope.swListingFilter.comparisonOperator,
	                comparisonValue: scope.swListingFilter.comparisonValue,
	                logicalOperator: scope.swListingFilter.logicalOperator,
	                hidden: false
	            };
	            if (angular.isDefined(scope.swListingFilter.hidden)) {
	                filter['hidden'] = scope.swListingFilter.hidden;
	            }
	            if (angular.isDefined(scope.$parent.swListingFilterGroup)) {
	                scope.$parent.swListingFilterGroup.filters.push(filter);
	            }
	            else {
	                scope.$parent.swListingDisplay.filters.push(filter);
	            }
	        };
	    }
	    SWListingFilter.Factory = function () {
	        var directive = function () { return new SWListingFilter(); };
	        directive.$inject = [];
	        return directive;
	    };
	    return SWListingFilter;
	}());
	exports.SWListingFilter = SWListingFilter;


/***/ }),
/* 468 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingFilterGroupController = (function () {
	    function SWListingFilterGroupController($scope, $transclude) {
	        this.$scope = $scope;
	        this.$transclude = $transclude;
	        this.filters = [];
	        $transclude($scope, function () { });
	        $scope.$parent.swListingDisplay.filterGroups.push(this.filters);
	    }
	    return SWListingFilterGroupController;
	}());
	var SWListingFilterGroup = (function () {
	    function SWListingFilterGroup() {
	        this.restrict = 'EA';
	        this.transclude = true;
	        this.scope = true;
	        this.bindToController = {};
	        this.controller = SWListingFilterGroupController;
	        this.controllerAs = "swListingFilterGroup";
	    }
	    SWListingFilterGroup.Factory = function () {
	        var directive = function () { return new SWListingFilterGroup(); };
	        directive.$inject = [];
	        return directive;
	    };
	    return SWListingFilterGroup;
	}());
	SWListingFilterGroup.$inject = [];
	exports.SWListingFilterGroup = SWListingFilterGroup;


/***/ }),
/* 469 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingOrderByController = (function () {
	    //@ngInject
	    function SWListingOrderByController() {
	        this.init = function () {
	        };
	        this.init();
	    }
	    return SWListingOrderByController;
	}());
	var SWListingOrderBy = (function () {
	    //@ngInject
	    function SWListingOrderBy(utilityService) {
	        this.utilityService = utilityService;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.bindToController = {
	            orderBy: "@",
	        };
	        this.controller = SWListingOrderByController;
	        this.controllerAs = "swListingOrderBy";
	        this.link = function (scope, element, attrs) {
	            var orderBy = {
	                orderBy: scope.swListingOrderBy.orderBy,
	            };
	            scope.$parent.swListingDisplay.orderBys.push(orderBy);
	        };
	    }
	    SWListingOrderBy.Factory = function () {
	        var directive = function (utilityService) { return new SWListingOrderBy(utilityService); };
	        directive.$inject = [
	            'utilityService'
	        ];
	        return directive;
	    };
	    return SWListingOrderBy;
	}());
	exports.SWListingOrderBy = SWListingOrderBy;


/***/ }),
/* 470 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingRowSaveController = (function () {
	    //@ngInject
	    function SWListingRowSaveController(listingService) {
	        var _this = this;
	        this.listingService = listingService;
	        this.save = function () {
	            _this.listingService.markSaved(_this.listingID, _this.pageRecordIndex);
	        };
	    }
	    return SWListingRowSaveController;
	}());
	var SWListingRowSave = (function () {
	    function SWListingRowSave(hibachiPathBuilder, listingPartialPath, utilityService, scopeService) {
	        var _this = this;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.listingPartialPath = listingPartialPath;
	        this.utilityService = utilityService;
	        this.scopeService = scopeService;
	        this.restrict = 'EA';
	        this.scope = true;
	        this.bindToController = {};
	        this.controller = SWListingRowSaveController;
	        this.controllerAs = "swListingRowSave";
	        this.link = function ($scope, element, attrs) {
	            var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
	            if (angular.isDefined(currentScope["pageRecord"])) {
	                $scope.swListingRowSave.pageRecord = currentScope["pageRecord"];
	            }
	            var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
	            if (angular.isDefined(currentScope["pageRecordKey"])) {
	                $scope.swListingRowSave.pageRecordIndex = currentScope["pageRecordKey"];
	            }
	            var currentScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
	            if (angular.isDefined(currentScope["swListingDisplay"])) {
	                $scope.swListingRowSave.listingID = currentScope["swListingDisplay"].tableID;
	            }
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.listingPartialPath) + 'listingrowsave.html';
	    }
	    SWListingRowSave.Factory = function () {
	        var directive = function (hibachiPathBuilder, listingPartialPath, utilityService, scopeService) { return new SWListingRowSave(hibachiPathBuilder, listingPartialPath, utilityService, scopeService); };
	        directive.$inject = [
	            'hibachiPathBuilder',
	            'listingPartialPath',
	            'utilityService',
	            'scopeService'
	        ];
	        return directive;
	    };
	    return SWListingRowSave;
	}());
	SWListingRowSave.$inject = ['utilityService'];
	exports.SWListingRowSave = SWListingRowSave;


/***/ }),
/* 471 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingSearchController = (function () {
	    //@ngInject
	    function SWListingSearchController($hibachi, metadataService, listingService, collectionService, observerService) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.metadataService = metadataService;
	        this.listingService = listingService;
	        this.collectionService = collectionService;
	        this.observerService = observerService;
	        this.displayOptionsClosed = true;
	        this.filtersClosed = true;
	        this.selectSearchColumn = function (column) {
	            _this.selectedSearchColumn = column;
	            if (_this.searchText) {
	                _this.search();
	            }
	        };
	        this.getSelectedSearchColumnName = function () {
	            return (angular.isUndefined(_this.selectedSearchColumn)) ? 'All' : _this.selectedSearchColumn.title;
	        };
	        this.search = function () {
	            if (_this.searchText.length > 0) {
	                _this.listingService.setExpandable(_this.listingId, false);
	            }
	            else {
	                _this.listingService.setExpandable(_this.listingId, true);
	            }
	            if (angular.isDefined(_this.selectedSearchColumn)) {
	                _this.backupColumnsConfig = angular.copy(_this.collectionConfig.getColumns());
	                var collectionColumns = _this.collectionConfig.getColumns();
	                for (var i = 0; i < collectionColumns.length; i++) {
	                    if (collectionColumns[i].propertyIdentifier != _this.selectedSearchColumn.propertyIdentifier) {
	                        collectionColumns[i].isSearchable = false;
	                    }
	                }
	                _this.collectionConfig.setKeywords(_this.searchText);
	                _this.paginator.setCurrentPage(1);
	                _this.collectionConfig.setColumns(_this.backupColumnsConfig);
	            }
	            else {
	                _this.collectionConfig.setKeywords(_this.searchText);
	                _this.paginator.setCurrentPage(1);
	            }
	        };
	        this.addSearchFilter = function () {
	            if (angular.isUndefined(_this.selectedSearchColumn) || !_this.searchText)
	                return;
	            var keywords = _this.searchText.split(" ");
	            for (var i = 0; i < keywords.length; i++) {
	                _this.collectionConfig.addLikeFilter(_this.selectedSearchColumn.propertyIdentifier, keywords[i], '%w%', undefined, _this.selectedSearchColumn.title);
	            }
	            _this.searchText = '';
	            _this.collectionConfig.setKeywords(_this.searchText);
	            _this.paginator.setCurrentPage(1);
	        };
	        if (angular.isUndefined(this.showToggleFilters)) {
	            this.showToggleFilters = true;
	        }
	        if (angular.isUndefined(this.showToggleDisplayOptions)) {
	            this.showToggleDisplayOptions = true;
	        }
	    }
	    return SWListingSearchController;
	}());
	var SWListingSearch = (function () {
	    //@ngInject
	    function SWListingSearch(scopeService, collectionPartialsPath, hibachiPathBuilder) {
	        var _this = this;
	        this.scopeService = scopeService;
	        this.collectionPartialsPath = collectionPartialsPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            collectionConfig: "=?",
	            paginator: "=?",
	            getCollection: "&",
	            toggleFilters: "&?",
	            toggleDisplayOptions: "&?",
	            showToggleFilters: "=?",
	            showToggleDisplayOptions: "=?",
	            listingId: "@?"
	        };
	        this.controller = SWListingSearchController;
	        this.controllerAs = 'swListingSearch';
	        this.link = function (scope, element, attrs) {
	            if (angular.isUndefined(scope.swListingSearch.collectionConfig) && _this.scopeService.hasParentScope(scope, "swListingDisplay")) {
	                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay")["swListingDisplay"];
	                if (listingDisplayScope.collectionConfig != null) {
	                    scope.swListingSearch.collectionConfig = listingDisplayScope.collectionConfig;
	                }
	                if (listingDisplayScope.paginator != null) {
	                    scope.swListingSearch.paginator = listingDisplayScope.paginator;
	                }
	                scope.swListingSearch.listingId = listingDisplayScope.tableID;
	            }
	            scope.swListingSearch.backupColumnsConfig = scope.swListingSearch.collectionConfig.getColumns();
	        };
	        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + "listingsearch.html";
	    }
	    SWListingSearch.Factory = function () {
	        var directive = function (scopeService, listingPartialPath, hibachiPathBuilder) { return new SWListingSearch(scopeService, listingPartialPath, hibachiPathBuilder); };
	        directive.$inject = ['scopeService', 'listingPartialPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWListingSearch;
	}());
	exports.SWListingSearch = SWListingSearch;


/***/ }),
/* 472 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWListingGlobalSearchController = (function () {
	    //@ngInject
	    function SWListingGlobalSearchController($timeout) {
	        var _this = this;
	        this.$timeout = $timeout;
	        this.init = function () {
	            _this.searching = false;
	        };
	        this.search = function () {
	            _this.searching = true;
	            if (_this._timeoutPromise) {
	                _this.$timeout.cancel(_this._timeoutPromise);
	            }
	            _this._timeoutPromise = _this.$timeout(function () {
	                _this.getCollection();
	            }, 500);
	        };
	        this.init();
	    }
	    return SWListingGlobalSearchController;
	}());
	var SWListingGlobalSearch = (function () {
	    //@ngInject
	    function SWListingGlobalSearch(utilityService, listingPartialPath, hibachiPathBuilder) {
	        this.utilityService = utilityService;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            searching: "=",
	            searchText: "=",
	            getCollection: "="
	        };
	        this.controller = SWListingGlobalSearchController;
	        this.controllerAs = "swListingGlobalSearch";
	        this.link = function (scope, element, attrs) {
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(listingPartialPath) + "listingglobalsearch.html";
	    }
	    SWListingGlobalSearch.Factory = function () {
	        var directive = function (utilityService, listingPartialPath, hibachiPathBuilder) { return new SWListingGlobalSearch(utilityService, listingPartialPath, hibachiPathBuilder); };
	        directive.$inject = ['utilityService', 'listingPartialPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWListingGlobalSearch;
	}());
	exports.SWListingGlobalSearch = SWListingGlobalSearch;


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//services
	// import {AccountService} from "./services/accountservice";
	// import {CartService} from "./services/cartservice";
	// import {UtilityService} from "./services/utilityservice";
	// import {SelectionService} from "./services/selectionservice";
	// import {ObserverService} from "./services/observerservice";
	// import {FormService} from "./services/formservice";
	// import {MetaDataService} from "./services/metadataservice";
	//controllers
	var otherwisecontroller_1 = __webpack_require__(474);
	var routercontroller_1 = __webpack_require__(475);
	//directives
	var swdetailtabs_1 = __webpack_require__(476);
	var swdetail_1 = __webpack_require__(477);
	var swlist_1 = __webpack_require__(478);
	var core_module_1 = __webpack_require__(275);
	var entitymodule = angular.module('hibachi.entity', ['ngRoute', core_module_1.coremodule.name])
	    .config(['$routeProvider', '$injector', '$locationProvider', 'appConfig',
	    function ($routeProvider, $injector, $locationProvider, appConfig) {
	        //detect if we are in hashbang mode
	        var vars = {};
	        var parts = window.location.href.replace(/[?&]+([^=&]+)#([^/]*)/gi, function (m, key, value) {
	            vars[key] = value;
	        });
	        if (vars.ng) {
	            $locationProvider.html5Mode(false).hashPrefix('!');
	        }
	        var snakeToCapitalCase = function (s) {
	            return s.charAt(0).toUpperCase() + s.replace(/(\-\w)/g, function (m) { return m[1].toUpperCase(); }).slice(1);
	        };
	        $routeProvider.when('/entity/:entityName/', {
	            template: function (params) {
	                var entityDirectiveExists = $injector.has('sw' + snakeToCapitalCase(params.entityName) + 'ListDirective');
	                if (entityDirectiveExists) {
	                    return '<sw-' + params.entityName.toLowerCase() + '-list></sw-' + params.entityName.toLowerCase() + '-list>';
	                }
	                else {
	                    return '<sw-list></sw-list>';
	                }
	            },
	            controller: 'routerController'
	        }).when('/entity/:entityName/:entityID', {
	            template: function (params) {
	                var entityDirectiveExists = $injector.has('sw' + snakeToCapitalCase(params.entityName) + 'DetailDirective');
	                if (entityDirectiveExists) {
	                    return '<sw-' + params.entityName.toLowerCase() + '-detail></sw-' + params.entityName.toLowerCase() + '-detail>';
	                }
	                else {
	                    return '<sw-detail></sw-detail>';
	                }
	            },
	            controller: 'routerController',
	        });
	        //        .otherwise({
	        //         //controller:'otherwiseController'
	        //         templateUrl: appConfig.baseURL + '/admin/client/js/partials/otherwise.html',
	        //     });
	    }])
	    .constant('coreEntityPartialsPath', 'entity/components/')
	    .controller('otherwiseController', otherwisecontroller_1.OtherWiseController)
	    .controller('routerController', routercontroller_1.RouterController)
	    .directive('swDetail', swdetail_1.SWDetail.Factory())
	    .directive('swDetailTabs', swdetailtabs_1.SWDetailTabs.Factory())
	    .directive('swList', swlist_1.SWList.Factory());
	exports.entitymodule = entitymodule;


/***/ }),
/* 474 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var OtherWiseController = (function () {
	    //@ngInject
	    function OtherWiseController($scope) {
	        $scope.$id = "otherwiseController";
	    }
	    return OtherWiseController;
	}());
	exports.OtherWiseController = OtherWiseController;


/***/ }),
/* 475 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var RouterController = (function () {
	    //@ngInject
	    function RouterController($scope, $routeParams, $location, $log, partialsPath, baseURL, utilityService) {
	        $scope.$id = "routerController";
	        $scope.partialRoute = '';
	        $log.debug($routeParams);
	        $log.debug($location);
	        var path = $location.path();
	        $scope.controllerType = path.split('/')[1];
	        var type;
	        if ($scope.controllerType === 'entity') {
	            //remove all dashes
	            $scope.entityName = utilityService.snakeToCapitalCase($routeParams.entityName);
	            if (angular.isDefined($routeParams.entityID)) {
	                $scope.entityID = $routeParams.entityID || '';
	            }
	        }
	    }
	    return RouterController;
	}());
	exports.RouterController = RouterController;


/***/ }),
/* 476 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWDetailTabs = (function () {
	    function SWDetailTabs($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + 'detailtabs.html',
	            link: function (scope, element, attr) {
	            }
	        };
	    }
	    SWDetailTabs.Factory = function () {
	        var directive = function ($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) { return new SWDetailTabs($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$location',
	            '$log',
	            '$hibachi',
	            'coreEntityPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWDetailTabs;
	}());
	exports.SWDetailTabs = SWDetailTabs;


/***/ }),
/* 477 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWDetail = (function () {
	    function SWDetail($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + '/detail.html',
	            link: function (scope, element, attr) {
	                scope.$id = "slatwallDetailController";
	                $log.debug('slatwallDetailController');
	                /*Sets the view dirty on save*/
	                scope.setDirty = function (entity) {
	                    angular.forEach(entity.forms, function (form) {
	                        form.$setSubmitted();
	                    });
	                };
	                var setupMetaData = function () {
	                    scope[scope.entityName.toLowerCase()] = scope.entity;
	                    scope.entity.metaData.$$getDetailTabs().then(function (value) {
	                        scope.detailTabs = value.data;
	                        $log.debug('detailtabs');
	                        $log.debug(scope.detailTabs);
	                    });
	                };
	                var propertyCasedEntityName = scope.entityName.charAt(0).toUpperCase() + scope.entityName.slice(1);
	                scope.tabPartialPath = hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath);
	                scope.getEntity = function () {
	                    if (scope.entityID === 'create') {
	                        scope.createMode = true;
	                        scope.entity = $hibachi['new' + propertyCasedEntityName]();
	                        setupMetaData();
	                    }
	                    else {
	                        scope.createMode = false;
	                        var entityPromise = $hibachi['get' + propertyCasedEntityName]({ id: scope.entityID });
	                        entityPromise.promise.then(function () {
	                            scope.entity = entityPromise.value;
	                            setupMetaData();
	                        });
	                    }
	                };
	                scope.getEntity();
	                scope.deleteEntity = function () {
	                    var deletePromise = scope.entity.$$delete();
	                    deletePromise.then(function () {
	                        $location.path('/entity/' + propertyCasedEntityName + '/');
	                    });
	                };
	                scope.allTabsOpen = false;
	            }
	        };
	    }
	    SWDetail.Factory = function () {
	        var directive = function ($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) { return new SWDetail($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$location',
	            '$log',
	            '$hibachi',
	            'coreEntityPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWDetail;
	}());
	exports.SWDetail = SWDetail;


/***/ }),
/* 478 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWList = (function () {
	    function SWList($log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + '/list.html',
	            link: function (scope, element, attr) {
	                $log.debug('slatwallList init');
	                //scope.getCollection = function(){
	                //
	                //	var pageShow = 50;
	                //	if(scope.pageShow !== 'Auto'){
	                //		pageShow = scope.pageShow;
	                //	}
	                //	scope.entityName = scope.entityName.charAt(0).toUpperCase()+scope.entityName.slice(1);
	                //	var collectionListingPromise = $hibachi.getEntity(scope.entityName, {currentPage:scope.currentPage, pageShow:pageShow, keywords:scope.keywords});
	                //	collectionListingPromise.then(function(value){
	                //		scope.collection = value;
	                //		scope.collectionConfig = angular.fromJson(scope.collection.collectionConfig);
	                //	});
	                //};
	                //scope.getCollection();
	            }
	        };
	    }
	    SWList.Factory = function () {
	        var directive = function ($log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) { return new SWList($log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            'coreEntityPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWList;
	}());
	exports.SWList = SWList;


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path="../../typings/tsd.d.ts" />
	/// <reference path="../../typings/hibachiTypescript.d.ts" />
	//services
	var paginationservice_1 = __webpack_require__(480);
	var swpaginationbar_1 = __webpack_require__(481);
	var core_module_1 = __webpack_require__(275);
	var paginationmodule = angular.module('hibachi.pagination', [core_module_1.coremodule.name])
	    .run([function () {
	    }])
	    .service('paginationService', paginationservice_1.PaginationService)
	    .directive('swPaginationBar', swpaginationbar_1.SWPaginationBar.Factory())
	    .constant('partialsPath', 'pagination/components/');
	exports.paginationmodule = paginationmodule;


/***/ }),
/* 480 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path="../../../typings/tsd.d.ts" />
	/// <reference path="../../../typings/hibachiTypescript.d.ts" />
	/*collection service is used to maintain the state of the ui*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var Pagination = (function () {
	    //@ngInject
	    function Pagination(observerService, uuid) {
	        var _this = this;
	        this.observerService = observerService;
	        this.uuid = uuid;
	        this.pageShow = 10;
	        this.currentPage = 1;
	        this.pageStart = 0;
	        this.pageEnd = 0;
	        this.recordsCount = 0;
	        this.totalPages = 0;
	        this.pageShowOptions = [
	            { display: 10, value: 10 },
	            { display: 20, value: 20 },
	            { display: 50, value: 50 },
	            { display: 250, value: 250 },
	            { display: "Auto", value: "Auto" }
	        ];
	        this.autoScrollPage = 1;
	        this.autoScrollDisabled = false;
	        this.getSelectedPageShowOption = function () {
	            return _this.selectedPageShowOption;
	        };
	        this.pageShowOptionChanged = function (pageShowOption) {
	            _this.setPageShow(pageShowOption.value);
	            _this.setCurrentPage(1);
	        };
	        this.getTotalPages = function () {
	            return _this.totalPages;
	        };
	        this.setTotalPages = function (totalPages) {
	            _this.totalPages = totalPages;
	        };
	        this.getPageStart = function () {
	            return _this.pageStart;
	        };
	        this.setPageStart = function (pageStart) {
	            _this.pageStart = pageStart;
	        };
	        this.getPageEnd = function () {
	            return _this.pageEnd;
	        };
	        this.setPageEnd = function (pageEnd) {
	            _this.pageEnd = pageEnd;
	        };
	        this.getRecordsCount = function () {
	            return _this.recordsCount;
	        };
	        this.setRecordsCount = function (recordsCount) {
	            _this.recordsCount = recordsCount;
	        };
	        this.getPageShowOptions = function () {
	            return _this.pageShowOptions;
	        };
	        this.setPageShowOptions = function (pageShowOptions) {
	            _this.pageShowOptions = pageShowOptions;
	        };
	        this.getPageShow = function () {
	            return _this.pageShow;
	        };
	        this.setPageShow = function (pageShow) {
	            _this.pageShow = pageShow;
	        };
	        this.getCurrentPage = function () {
	            return _this.currentPage;
	        };
	        this.setCurrentPage = function (currentPage) {
	            _this.currentPage = currentPage;
	            _this.getCollection();
	            _this.observerService.notify('swPaginationAction', { action: 'pageChange', currentPage: currentPage });
	        };
	        this.previousPage = function () {
	            if (_this.getCurrentPage() == 1)
	                return;
	            _this.setCurrentPage(_this.getCurrentPage() - 1);
	        };
	        this.nextPage = function () {
	            if (_this.getCurrentPage() < _this.getTotalPages()) {
	                _this.setCurrentPage(_this.getCurrentPage() + 1);
	            }
	        };
	        this.hasPrevious = function () {
	            return (_this.getPageStart() <= 1);
	        };
	        this.hasNext = function () {
	            return (_this.getPageEnd() === _this.getRecordsCount());
	        };
	        this.showPreviousJump = function () {
	            return (angular.isDefined(_this.getCurrentPage()) && _this.getCurrentPage() > 3);
	        };
	        this.showNextJump = function () {
	            return !!(_this.getCurrentPage() < _this.getTotalPages() - 3 && _this.getTotalPages() > 6);
	        };
	        this.previousJump = function () {
	            _this.setCurrentPage(_this.currentPage - 3);
	        };
	        this.nextJump = function () {
	            _this.setCurrentPage(_this.getCurrentPage() + 3);
	        };
	        this.showPageNumber = function (pageNumber) {
	            if (_this.getCurrentPage() >= _this.getTotalPages() - 3) {
	                if (pageNumber > _this.getTotalPages() - 6) {
	                    return true;
	                }
	            }
	            if (_this.getCurrentPage() <= 3) {
	                if (pageNumber < 6) {
	                    return true;
	                }
	            }
	            else {
	                var bottomRange = _this.getCurrentPage() - 2;
	                var topRange = _this.getCurrentPage() + 2;
	                if (pageNumber > bottomRange && pageNumber < topRange) {
	                    return true;
	                }
	            }
	            return false;
	        };
	        this.setPageRecordsInfo = function (collection) {
	            _this.setRecordsCount(collection.recordsCount);
	            if (_this.getRecordsCount() === 0) {
	                _this.setPageStart(0);
	            }
	            else {
	                _this.setPageStart(collection.pageRecordsStart);
	            }
	            _this.setPageEnd(collection.pageRecordsEnd);
	            _this.setTotalPages(collection.totalPages);
	            _this.totalPagesArray = [];
	            if (angular.isUndefined(_this.getCurrentPage()) || _this.getCurrentPage() < 5) {
	                var start = 1;
	                var end = (_this.getTotalPages() <= 10) ? _this.getTotalPages() + 1 : 10;
	            }
	            else {
	                var start = (!_this.showNextJump()) ? _this.getTotalPages() - 4 : _this.getCurrentPage() - 3;
	                var end = (_this.showNextJump()) ? _this.getCurrentPage() + 5 : _this.getTotalPages() + 1;
	            }
	            for (var i = start; i < end; i++) {
	                _this.totalPagesArray.push(i);
	            }
	        };
	        this.uuid = uuid;
	        this.selectedPageShowOption = this.pageShowOptions[0];
	    }
	    return Pagination;
	}());
	exports.Pagination = Pagination;
	var PaginationService = (function () {
	    //@ngInject
	    function PaginationService(utilityService, observerService) {
	        var _this = this;
	        this.utilityService = utilityService;
	        this.observerService = observerService;
	        this.paginations = {};
	        this.createPagination = function () {
	            var uuid = _this.utilityService.createID(10);
	            _this.paginations[uuid] = new Pagination(_this.observerService, uuid);
	            return _this.paginations[uuid];
	        };
	        this.getPagination = function (uuid) {
	            if (!uuid)
	                return;
	            return _this.paginations[uuid];
	        };
	    }
	    return PaginationService;
	}());
	exports.PaginationService = PaginationService;


/***/ }),
/* 481 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	//import pagination = require('../services/paginationservice');
	//var PaginationService = pagination.PaginationService;
	//'use strict';
	var SWPaginationBarController = (function () {
	    //@ngInject
	    function SWPaginationBarController(paginationService) {
	        this.paginationService = paginationService;
	        if (angular.isUndefined(this.paginator)) {
	            this.paginator = paginationService.createPagination();
	        }
	    }
	    return SWPaginationBarController;
	}());
	exports.SWPaginationBarController = SWPaginationBarController;
	var SWPaginationBar = (function () {
	    //@ngInject
	    function SWPaginationBar(hibachiPathBuilder, partialsPath) {
	        this.restrict = 'E';
	        this.scope = {};
	        this.bindToController = {
	            paginator: "=?"
	        };
	        this.controller = SWPaginationBarController;
	        this.controllerAs = "swPaginationBar";
	        this.link = function (scope, element, attrs) { };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(partialsPath) + 'paginationbar.html';
	    }
	    SWPaginationBar.Factory = function () {
	        var directive = function (hibachiPathBuilder, partialsPath) { return new SWPaginationBar(hibachiPathBuilder, partialsPath); };
	        directive.$inject = ['hibachiPathBuilder', 'partialsPath'];
	        return directive;
	    };
	    return SWPaginationBar;
	}());
	exports.SWPaginationBar = SWPaginationBar;


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	//module
	var core_module_1 = __webpack_require__(275);
	//services
	var fileservice_1 = __webpack_require__(483);
	//directives
	//  components
	//form
	var swinput_1 = __webpack_require__(484);
	var swfformfield_1 = __webpack_require__(485);
	var swform_1 = __webpack_require__(486);
	var swformfield_1 = __webpack_require__(487);
	var swformfieldfile_1 = __webpack_require__(488);
	var swformfieldjson_1 = __webpack_require__(489);
	var swformfieldsearchselect_1 = __webpack_require__(490);
	var swformregistrar_1 = __webpack_require__(491);
	var swerrordisplay_1 = __webpack_require__(492);
	var swaddressform_1 = __webpack_require__(493);
	var swpropertydisplay_1 = __webpack_require__(494);
	var swfpropertydisplay_1 = __webpack_require__(495);
	var swformsubscriber_1 = __webpack_require__(496);
	var formmodule = angular.module('hibachi.form', ['angularjs-datetime-picker', core_module_1.coremodule.name]).config(function () {
	})
	    .constant('coreFormPartialsPath', 'form/components/')
	    .service('fileService', fileservice_1.FileService)
	    .directive('swInput', swinput_1.SWInput.Factory())
	    .directive('swfFormField', swfformfield_1.SWFFormField.Factory())
	    .directive('swForm', swform_1.SWForm.Factory())
	    .directive('swFormField', swformfield_1.SWFormField.Factory())
	    .directive('swFormFieldFile', swformfieldfile_1.SWFormFieldFile.Factory())
	    .directive('swFormFieldJson', swformfieldjson_1.SWFormFieldJson.Factory())
	    .directive('swFormFieldSearchSelect', swformfieldsearchselect_1.SWFormFieldSearchSelect.Factory())
	    .directive('swFormRegistrar', swformregistrar_1.SWFormRegistrar.Factory())
	    .directive('swfPropertyDisplay', swfpropertydisplay_1.SWFPropertyDisplay.Factory(swfpropertydisplay_1.SWFPropertyDisplay, "swfpropertydisplay.html"))
	    .directive('swPropertyDisplay', swpropertydisplay_1.SWPropertyDisplay.Factory(swpropertydisplay_1.SWPropertyDisplay, "propertydisplay.html"))
	    .directive('swErrorDisplay', swerrordisplay_1.SWErrorDisplay.Factory())
	    .directive('swAddressForm', swaddressform_1.SWAddressForm.Factory())
	    .directive('swFormSubscriber', swformsubscriber_1.SWFormSubscriber.Factory());
	exports.formmodule = formmodule;


/***/ }),
/* 483 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var FileService = (function () {
	    //@ngInject
	    function FileService($q, observerService) {
	        var _this = this;
	        this.$q = $q;
	        this.observerService = observerService;
	        this.fileStates = {};
	        this.imageExists = function (src) {
	            var deferred = _this.$q.defer();
	            var image = new Image();
	            image.onerror = function () {
	                deferred.reject();
	            };
	            image.onload = function () {
	                deferred.resolve();
	            };
	            image.src = src;
	            return deferred.promise;
	        };
	        this.uploadFile = function (file, object, property) {
	            var deferred = _this.$q.defer();
	            var promise = deferred.promise;
	            var fileReader = new FileReader();
	            fileReader.readAsDataURL(file);
	            fileReader.onload = function (result) {
	                object.data[property] = fileReader.result;
	                deferred.resolve(fileReader.result);
	            };
	            fileReader.onerror = function (result) {
	                deferred.reject();
	                throw ("fileservice couldn't read the file");
	            };
	            return promise;
	        };
	    }
	    return FileService;
	}());
	exports.FileService = FileService;


/***/ }),
/* 484 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWInputController = (function () {
	    //@ngInject
	    function SWInputController($timeout, $scope, $log, $compile, $hibachi, $injector, listingService, utilityService, rbkeyService, observerService, metadataService) {
	        var _this = this;
	        this.$timeout = $timeout;
	        this.$scope = $scope;
	        this.$log = $log;
	        this.$compile = $compile;
	        this.$hibachi = $hibachi;
	        this.$injector = $injector;
	        this.listingService = listingService;
	        this.utilityService = utilityService;
	        this.rbkeyService = rbkeyService;
	        this.observerService = observerService;
	        this.metadataService = metadataService;
	        this.eventHandlers = "";
	        this.onSuccess = function () {
	            _this.utilityService.setPropertyValue(_this.swForm.object, _this.property, _this.value);
	            if (_this.swPropertyDisplay) {
	                _this.utilityService.setPropertyValue(_this.swPropertyDisplay.object, _this.property, _this.value);
	            }
	            if (_this.swfPropertyDisplay) {
	                _this.utilityService.setPropertyValue(_this.swfPropertyDisplay.object, _this.property, _this.value);
	                _this.swfPropertyDisplay.editing = false;
	            }
	            _this.utilityService.setPropertyValue(_this.swFormField.object, _this.property, _this.value);
	        };
	        this.getValidationDirectives = function () {
	            var spaceDelimitedList = '';
	            var name = _this.property;
	            var form = _this.form;
	            _this.$log.debug("Name is:" + name + " and form is: " + form);
	            if (_this.metadataService.isAttributePropertyByEntityAndPropertyIdentifier(_this.object, _this.propertyIdentifier)) {
	                _this.object.validations.properties[name] = [];
	                if (_this.object.metaData[_this.property].requiredFlag && _this.object.metaData[_this.property].requiredFlag.trim().toLowerCase() == "yes") {
	                    _this.object.validations.properties[name].push({
	                        contexts: "save",
	                        required: true
	                    });
	                }
	                if (_this.object.metaData[_this.property].validationRegex) {
	                    _this.object.validations.properties[name].push({
	                        contexts: "save", regex: _this.object.metaData[_this.property].validationRegex
	                    });
	                }
	            }
	            if (angular.isUndefined(_this.object.validations)
	                || angular.isUndefined(_this.object.validations.properties)
	                || angular.isUndefined(_this.object.validations.properties[_this.property])) {
	                return '';
	            }
	            var validations = _this.object.validations.properties[_this.property];
	            _this.$log.debug("Validations: ", validations);
	            _this.$log.debug(_this.form);
	            var validationsForContext = [];
	            //get the form context and the form name.
	            var formContext = _this.swForm.context;
	            var formName = _this.swForm.name;
	            _this.$log.debug("Form context is: ");
	            _this.$log.debug(formContext);
	            _this.$log.debug("Form Name: ");
	            _this.$log.debug(formName);
	            //get the validations for the current element.
	            var propertyValidations = _this.object.validations.properties[name];
	            /*
	            * Investigating why number inputs are not working.
	            * */
	            //check if the contexts match.
	            if (angular.isObject(propertyValidations)) {
	                //if this is a procesobject validation then the context is implied
	                if (angular.isUndefined(propertyValidations[0].contexts) && _this.object.metaData.isProcessObject) {
	                    propertyValidations[0].contexts = _this.object.metaData.className.split('_')[1];
	                }
	                if (propertyValidations[0].contexts === formContext) {
	                    _this.$log.debug("Matched");
	                    for (var prop in propertyValidations[0]) {
	                        if (prop != "contexts" && prop !== "conditions") {
	                            spaceDelimitedList += (" swvalidation" + prop.toLowerCase() + "='" + propertyValidations[0][prop] + "'");
	                        }
	                    }
	                }
	                _this.$log.debug(spaceDelimitedList);
	            }
	            //loop over validations that are required and create the space delimited list
	            _this.$log.debug(validations);
	            //get all validations related to the form context;
	            _this.$log.debug(form);
	            angular.forEach(validations, function (validation, key) {
	                if (validation.contexts && _this.utilityService.listFind(validation.contexts.toLowerCase(), _this.swForm.context.toLowerCase()) !== -1) {
	                    _this.$log.debug("Validations for context");
	                    _this.$log.debug(validation);
	                    validationsForContext.push(validation);
	                }
	            });
	            return spaceDelimitedList;
	        };
	        this.clear = function () {
	            if (_this.reverted) {
	                _this.reverted = false;
	                _this.showRevert = true;
	            }
	            _this.edited = false;
	            _this.value = _this.initialValue;
	            if (_this.inListingDisplay && _this.rowSaveEnabled) {
	                _this.listingService.markUnedited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID);
	            }
	        };
	        this.revert = function () {
	            _this.showRevert = false;
	            _this.reverted = true;
	            _this.value = _this.revertToValue;
	            _this.onEvent({}, "change");
	        };
	        this.onEvent = function (event, eventName) {
	            var customEventName = _this.swForm.name + _this.name + eventName;
	            var data = {
	                event: event,
	                eventName: eventName,
	                form: _this.form,
	                swForm: _this.swForm,
	                swInput: _this,
	                inputElement: $('input').first()[0]
	            };
	            _this.observerService.notify(customEventName, data);
	        };
	        this.getTemplate = function () {
	            var template = '';
	            var validations = '';
	            var currencyTitle = '';
	            var currencyFormatter = '';
	            var style = "";
	            if (!_this.class) {
	                _this.class = "form-control";
	            }
	            if (!_this.noValidate) {
	                validations = _this.getValidationDirectives();
	            }
	            if (_this.object && _this.object.metaData && _this.object.metaData.$$getPropertyFormatType(_this.property) != undefined && _this.object.metaData.$$getPropertyFormatType(_this.property) == "currency") {
	                currencyFormatter = 'sw-currency-formatter ';
	                if (angular.isDefined(_this.object.data.currencyCode)) {
	                    currencyFormatter = currencyFormatter + 'data-currency-code="' + _this.object.data.currencyCode + '" ';
	                    currencyTitle = '<span class="s-title">' + _this.object.data.currencyCode + '</span>';
	                }
	            }
	            var appConfig = _this.$hibachi.getConfig();
	            var placeholder = '';
	            if (_this.object.metaData && _this.object.metaData[_this.property] && _this.object.metaData[_this.property].hb_nullrbkey) {
	                placeholder = _this.rbkeyService.getRBKey(_this.object.metaData[_this.property].hb_nullrbkey);
	            }
	            if (_this.fieldType.toLowerCase() === 'json') {
	                style = style += 'display:none';
	            }
	            var acceptedFieldTypes = ['email', 'text', 'password', 'number', 'time', 'date', 'datetime', 'json', 'file'];
	            if (acceptedFieldTypes.indexOf(_this.fieldType.toLowerCase()) >= 0) {
	                var inputType = _this.fieldType.toLowerCase();
	                if (_this.fieldType === 'time') {
	                    inputType = "text";
	                }
	                template = currencyTitle + '<input type="' + inputType + '" class="' + _this.class + '" ' +
	                    ' ng-model="swInput.value" ' +
	                    ' ng-disabled="swInput.editable === false" ' +
	                    ' ng-show="swInput.editing" ' +
	                    " ng-class=\"{'form-control':swInput.inListingDisplay, 'input-xs':swInput.inListingDisplay} \"" +
	                    ' name="' + _this.property + '" ' +
	                    ' placeholder="' + placeholder + '" ' +
	                    validations + currencyFormatter +
	                    ' id="swinput' + _this.swForm.name + _this.name + '" ' +
	                    ' style="' + style + '" ' + " " +
	                    _this.inputAttributes + " " +
	                    _this.eventHandlerTemplate;
	            }
	            var dateFieldTypes = ['date', 'datetime', 'time'];
	            if (dateFieldTypes.indexOf(_this.fieldType.toLowerCase()) >= 0) {
	                template = template + 'datetime-picker ';
	            }
	            if (_this.fieldType === 'time') {
	                template = template + 'data-time-only="true" date-format="' + appConfig.timeFormat.replace('tt', 'a') + '" ng-blur="swInput.pushBindings()"';
	            }
	            if (_this.fieldType === 'date') {
	                template = template + 'data-date-only="true" future-only date-format="' + appConfig.dateFormat + '" ';
	            }
	            if (template.length) {
	                template = template + ' />';
	            }
	            var actionButtons = "\n\t\t\t<a class=\"s-remove-change\"\n\t\t\t\tdata-ng-click=\"swPropertyDisplay.clear()\"\n\t\t\t\tdata-ng-if=\"swInput.edited && swInput.editing\">\n\t\t\t\t\t<i class=\"fa fa-remove\"></i>\n\t\t\t</a>\n\n\t\t\t<!-- Revert Button -->\n\t\t\t<button class=\"btn btn-xs btn-default s-revert-btn\"\n\t\t\t\t\tdata-ng-show=\"swInput.showRevert\"\n\t\t\t\t\tdata-ng-click=\"swInput.revert()\"\n\t\t\t\t\tdata-toggle=\"popover\"\n\t\t\t\t\tdata-trigger=\"hover\"\n\t\t\t\t\tdata-content=\"{{swInput.revertText}}\"\n\t\t\t\t\tdata-original-title=\"\"\n\t\t\t\t\ttitle=\"\">\n\t\t\t\t<i class=\"fa fa-refresh\"></i>\n\t\t\t</button>\n\t\t";
	            return template + actionButtons;
	        };
	        this.pullBindings = function () {
	            var bindToControllerProps = _this.$injector.get('swInputDirective')[0].bindToController;
	            for (var i in bindToControllerProps) {
	                if (!_this[i]) {
	                    if (!_this[i] && _this.swFormField && _this.swFormField[i]) {
	                        _this[i] = _this.swFormField[i];
	                    }
	                    else if (!_this[i] && _this.swPropertyDisplay && _this.swPropertyDisplay[i]) {
	                        _this[i] = _this.swPropertyDisplay[i];
	                    }
	                    else if (!_this[i] && _this.swfPropertyDisplay && _this.swfPropertyDisplay[i]) {
	                        _this[i] = _this.swfPropertyDisplay[i];
	                    }
	                    else if (!_this[i] && _this.swForm && _this.swForm[i]) {
	                        _this[i] = _this.swForm[i];
	                    }
	                }
	            }
	            _this.property = _this.property || _this.propertyIdentifier;
	            _this.propertyIdentifier = _this.propertyIdentifier || _this.property;
	            _this.type = _this.type || _this.fieldType;
	            _this.fieldType = _this.fieldType || _this.type;
	            _this.edit = _this.edit || _this.editing;
	            _this.editing = _this.editing || _this.edit;
	            _this.editing = _this.editing || true;
	            _this.fieldType = _this.fieldType || "text";
	            _this.inputAttributes = _this.inputAttributes || "";
	            _this.inputAttributes = _this.utilityService.replaceAll(_this.inputAttributes, "'", '"');
	            _this.value = _this.utilityService.getPropertyValue(_this.object, _this.property);
	        };
	        this.pushBindings = function () {
	            _this.observerService.notify('updateBindings').then(function () { });
	        };
	        this.$onInit = function () {
	            _this.pullBindings();
	            _this.eventHandlersArray = _this.eventHandlers.split(',');
	            _this.eventHandlerTemplate = "";
	            for (var i in _this.eventHandlersArray) {
	                var eventName = _this.eventHandlersArray[i];
	                if (eventName.length) {
	                    _this.eventHandlerTemplate += " ng-" + eventName + "=\"swInput.onEvent($event,'" + eventName + "')\"";
	                }
	            }
	            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
	                _this.eventNameForObjectSuccess = _this.object.metaData.className.split('_')[0] + _this.context.charAt(0).toUpperCase() + _this.context.slice(1) + 'Success';
	            }
	            else {
	                _this.eventNameForObjectSuccess = _this.context.charAt(0).toUpperCase() + _this.context.slice(1) + 'Success';
	            }
	            var eventNameForObjectSuccessID = _this.eventNameForObjectSuccess + _this.property;
	            var eventNameForUpdateBindings = 'updateBindings';
	            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
	                var eventNameForUpdateBindingsID = _this.object.metaData.className.split('_')[0] + _this.property + 'updateBindings';
	            }
	            else {
	                var eventNameForUpdateBindingsID = _this.property + 'updateBindings';
	            }
	            var eventNameForPullBindings = 'pullBindings';
	            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {
	                var eventNameForPullBindingsID = _this.object.metaData.className.split('_')[0] + _this.property + 'pullBindings';
	            }
	            else {
	                var eventNameForPullBindingsID = _this.property + 'pullBindings';
	            }
	            //attach a successObserver
	            if (_this.object) {
	                //update bindings on save success
	                _this.observerService.attach(_this.onSuccess, _this.eventNameForObjectSuccess, eventNameForObjectSuccessID);
	                //update bindings manually
	                _this.observerService.attach(_this.onSuccess, eventNameForUpdateBindings, eventNameForUpdateBindingsID);
	                //pull bindings from higher binding level manually
	                _this.observerService.attach(_this.pullBindings, eventNameForPullBindings, eventNameForPullBindingsID);
	            }
	            _this.$scope.$on("$destroy", function () {
	                _this.observerService.detachById(eventNameForUpdateBindings);
	                _this.observerService.detachById(eventNameForUpdateBindingsID);
	            });
	        };
	    }
	    return SWInputController;
	}());
	var SWInput = (function () {
	    //ngInject
	    function SWInput($compile, $timeout, $parse, fileService) {
	        var _this = this;
	        this.$compile = $compile;
	        this.$timeout = $timeout;
	        this.$parse = $parse;
	        this.fileService = fileService;
	        this.restrict = "E";
	        this.require = {
	            swForm: "?^swForm",
	            form: "?^form",
	            swFormField: "?^swFormField",
	            swPropertyDisplay: "?^swPropertyDisplay",
	            swfPropertyDisplay: "?^swfPropertyDisplay"
	        };
	        this.scope = {};
	        this.bindToController = {
	            propertyIdentifier: "@?",
	            name: "@?",
	            class: "@?",
	            errorClass: "@?",
	            option: "=?",
	            valueObject: "=?",
	            object: "=?",
	            label: "@?",
	            labelText: "@?",
	            labelClass: "@?",
	            inListingDisplay: "=?",
	            listingID: "=?",
	            pageRecordIndex: "=?",
	            propertyDisplayID: "=?",
	            initialValue: "=?",
	            optionValues: "=?",
	            edit: "=?",
	            title: "@?",
	            value: "=?",
	            errorText: "@?",
	            fieldType: "@?",
	            property: "@?",
	            binaryFileTarget: "@?",
	            rawFileTarget: "@?",
	            reverted: "=?",
	            revertToValue: "=?",
	            showRevert: "=?",
	            inputAttributes: "@?",
	            type: "@?",
	            editing: "=?",
	            eventHandlers: "@?",
	            context: "@?"
	        };
	        this.controller = SWInputController;
	        this.controllerAs = "swInput";
	        this.link = function (scope, element, attr) {
	            if (scope.swInput.type === 'file') {
	                if (angular.isUndefined(scope.swInput.object.data[scope.swInput.rawFileTarget])) {
	                    scope.swInput.object[scope.swInput.rawFileTarget] = "";
	                    scope.swInput.object.data[scope.swInput.rawFileTarget] = "";
	                }
	                var model = _this.$parse("swInput.object.data[swInput.rawFileTarget]");
	                var modelSetter = model.assign;
	                element.bind("change", function (e) {
	                    var fileToUpload = (e.srcElement || e.target).files[0];
	                    scope.$apply(function () {
	                        modelSetter(scope, fileToUpload);
	                    }, function () {
	                        throw ("swinput couldn't apply the file to scope");
	                    });
	                    _this.$timeout(function () {
	                        _this.fileService.uploadFile(fileToUpload, scope.swInput.object, scope.swInput.binaryFileTarget)
	                            .then(function (result) {
	                            scope.swInput.object[scope.swInput.property] = fileToUpload;
	                            scope.swInput.onEvent(e, "change");
	                        }, function () {
	                            //error	notify user
	                        });
	                    });
	                });
	            }
	            //renders the template and compiles it
	            element.html(scope.swInput.getTemplate());
	            _this.$compile(element.contents())(scope);
	        };
	    }
	    SWInput.Factory = function () {
	        var directive = function ($compile, $timeout, $parse, fileService) { return new SWInput($compile, $timeout, $parse, fileService); };
	        directive.$inject = [
	            '$compile',
	            '$timeout',
	            '$parse',
	            'fileService'
	        ];
	        return directive;
	    };
	    return SWInput;
	}());
	exports.SWInput = SWInput;


/***/ }),
/* 485 */
/***/ (function(module, exports) {

	"use strict";
	/**********************************************************************************************
	 **********************************************************************************************
	 **********************************************************************************************
	 **		___________________________________________
	 ** 	Form Field - type have the following options (This is for the frontend so it can be modified):
	 **
	 **		checkbox			|	As a single checkbox this doesn't require any options, but it will create a hidden field for you so that the key gets submitted even when not checked.  The value of the checkbox will be 1
	 **		checkboxgroup		|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
	 **		file				|	No value can be passed in
	 **		multiselect			|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
	 **		password			|	No Value can be passed in
	 **		radiogroup			|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
	 **		select      		|	Requires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}
	 **		text				|	Simple Text Field
	 **		textarea			|	Simple Textarea
	 **		yesno				|	This is used by booleans and flags to create a radio group of Yes and No
	 **		submit				|	submit button to post these properties back to the server.
	 **		------------------------------------------------------------------------------------------------------
	 **
	 **		attr.valueObject" type="any" default="" />
	 **		attr.valueObjectProperty" type="string" default="" />
	 **
	 **		General Settings that end up getting applied to the value object
	 **		attr.type" type="string" default="text"
	 **		attr.name" type="string" default=""
	 **		attr.class" type="string" default=""
	 **		attr.value" type="any" default=""
	 **		attr.valueOptions" type="array" default="#arrayNew(1)#"		<!--- Used for select, checkbox group, multiselect --->
	 **		attr.fieldAttributes" type="string" default=""
	 **
	 *********************************************************************************************
	 *********************************************************************************************
	 *********************************************************************************************
	 */
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	    * Property Display Controller handles the logic for this directive.
	    */
	var SWFFormFieldController = (function () {
	    //@ngInject
	    function SWFFormFieldController($scope, $element, $compile, utilityService) {
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$compile = $compile;
	        this.utilityService = utilityService;
	        this.utilityService = utilityService;
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$compile = $compile;
	    }
	    return SWFFormFieldController;
	}());
	/**
	    * Handles the logic for the frontend version of the property display.
	    */
	SWFFormFieldController.$inject = ['$scope', '$element', '$compile', 'utilityService'];
	/**
	    * This class handles configuring formFields for use in process forms on the front end.
	    */
	var SWFFormField = (function () {
	    function SWFFormField(coreFormPartialsPath, hibachiPathBuilder) {
	        this.restrict = "E";
	        this.require = { swfPropertyDisplayCtrl: "^?swfPropertyDisplay", form: "^?form" };
	        this.controller = SWFFormFieldController;
	        this.controllerAs = "swfFormField";
	        this.scope = {};
	        this.bindToController = {
	            propertyDisplay: "=?",
	            propertyIdentifier: "@?",
	            name: "@?",
	            class: "@?",
	            errorClass: "@?",
	            type: "@?"
	        };
	        this.link = function (scope, element, attrs, formController, transcludeFn) {
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'swfformfield.html';
	    }
	    /**
	        * Handles injecting the partials path into this class
	        */
	    SWFFormField.Factory = function () {
	        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFFormField(coreFormPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            'coreFormPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWFFormField;
	}());
	exports.SWFFormField = SWFFormField;


/***/ }),
/* 486 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	* Form Controller handles the logic for this directive.
	*/
	var SWFormController = (function () {
	    /**
	     * This controller handles most of the logic for the swFormDirective when more complicated self inspection is needed.
	     */
	    // @ngInject
	    function SWFormController($scope, $element, $hibachi, $http, $timeout, observerService, $rootScope, entityService, utilityService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$hibachi = $hibachi;
	        this.$http = $http;
	        this.$timeout = $timeout;
	        this.observerService = observerService;
	        this.$rootScope = $rootScope;
	        this.entityService = entityService;
	        this.utilityService = utilityService;
	        this.eventsObj = [];
	        this.formData = {};
	        this.isObject = function () {
	            return (angular.isObject(_this.object));
	        };
	        /** create the generic submit function */
	        this.submit = function (actions) {
	            actions = actions || _this.action;
	            _this.clearErrors();
	            _this.formData = _this.getFormData() || "";
	            _this.doActions(actions);
	        };
	        //array or comma delimited
	        this.doActions = function (actions) {
	            if (angular.isArray(actions)) {
	                for (var _i = 0, _a = actions; _i < _a.length; _i++) {
	                    var action = _a[_i];
	                    _this.doAction(action);
	                }
	            }
	            else if (angular.isString(actions)) {
	                _this.doAction(actions);
	            }
	            else {
	                throw ("Unknown type of action exception");
	            }
	        };
	        // /** iterates through the factory submitting data */
	        this.doAction = function (action) {
	            if (!action) {
	                throw "Action not defined on form";
	            }
	            _this.formData = _this.formData || {};
	            //
	            var request = _this.$rootScope.hibachiScope.doAction(action, _this.formData)
	                .then(function (result) {
	                if (_this.events && _this.events.events) {
	                    if (result.errors) {
	                        _this.parseErrors(result.errors);
	                        //trigger an onError event
	                        _this.observerService.notify("onError", { "caller": _this.context, "events": _this.events.events || "" });
	                    }
	                    else {
	                        //trigger a on success event
	                        _this.observerService.notify("onSuccess", { "caller": _this.context, "events": _this.events.events || "" });
	                    }
	                }
	            }, angular.noop);
	        };
	        this.parseEvents = function (str, evntType) {
	            if (str == undefined)
	                return;
	            var strTokens = str.split(","); //this gives the format [hide:this, show:Account_Logout, update:Account or Cart, event:element]
	            var eventsObj = {
	                "events": []
	            }; //will hold events
	            for (var token in strTokens) {
	                var eventName = strTokens[token].split(":")[0].toLowerCase().replace(' ', '');
	                var formName = strTokens[token].split(":")[1].toLowerCase().replace(' ', '');
	                if (formName == "this") {
	                    formName == _this.context.toLowerCase();
	                } //<--replaces the alias this with the name of this form.
	                var event_1 = { "name": eventName, "value": formName };
	                eventsObj.events.push(event_1);
	            }
	            if (eventsObj.events.length) {
	                _this.observerService.attach(_this.eventsHandler, "onSuccess");
	            }
	            return eventsObj;
	        };
	        /** looks at the onSuccess, onError, and onLoading and parses the string into useful subcategories */
	        this.parseEventString = function (evntStr, evntType) {
	            _this.events = _this.parseEvents(evntStr, evntType); //onSuccess : [hide:this, show:someOtherForm, refresh:Account]
	        };
	        /****
	             * Handle parsing through the server errors and injecting the error text for that field
	            * If the form only has a submit, then simply call that function and set errors.
	            ***/
	        this.parseErrors = function (errors) {
	            if (angular.isDefined(errors) && errors) {
	                angular.forEach(errors, function (val, key) {
	                    var primaryElement = _this.$element.find("[error-for='" + key + "']");
	                    _this.$timeout(function () {
	                        primaryElement.append("<span name='" + key + "Error'>" + errors[key] + "</span>");
	                    }, 0);
	                }, _this);
	            }
	        };
	        /** find and clear all errors on form */
	        this.clearErrors = function () {
	            /** clear all form errors on submit. */
	            _this.$timeout(function () {
	                var errorElements = _this.$element.find("[error-for]");
	                errorElements.empty();
	                //vm["formCtrl"][this.context].$setPristine(true);
	            }, 0);
	        };
	        this.eventsHandler = function (params) {
	            //this will call any form specific functions such as hide,show,refresh,update or whatever else you later add
	            for (var e in params.events) {
	                if (angular.isDefined(params.events[e].value) && params.events[e].value == _this.name.toLowerCase()) {
	                    if (params.events[e].name && _this[params.events[e].name]) {
	                        _this[params.events[e].name](params.events[e].value);
	                    }
	                }
	            }
	        };
	        /** hides this directive on event */
	        this.hide = function (param) {
	            if (_this.name.toLowerCase() == param) {
	                _this.$element.hide();
	            }
	        };
	        /** shows this directive on event */
	        this.show = function (param) {
	            if (_this.name.toLowerCase() == param) {
	                _this.$element.show();
	            }
	        };
	        /** refreshes this directive on event */
	        this.refresh = function (params) {
	            //stub
	        };
	        /** updates this directive on event */
	        this.update = function (params) {
	            //stub
	        };
	        /** clears this directive on event */
	        this.clear = function (params) {
	            //stub
	        };
	        /** returns all the data from the form by iterating the form elements */
	        this.getFormData = function () {
	            var iterable = _this.formCtrl;
	            angular.forEach(iterable, function (val, key) {
	                if (typeof val === 'object' && val.hasOwnProperty('$modelValue')) {
	                    if (_this.object.forms[_this.name][key].$modelValue) {
	                        val = _this.object.forms[_this.name][key].$modelValue;
	                    }
	                    else if (_this.object.forms[_this.name][key].$viewValue) {
	                        val = _this.object.forms[_this.name][key].$viewValue;
	                    }
	                    /** Check for form elements that have a name that doesn't start with $ */
	                    if (angular.isString(val)) {
	                        _this.formData[key] = val;
	                    }
	                    if (val.$modelValue) {
	                        _this.formData[key] = val.$modelValue;
	                    }
	                    else if (val.$viewValue) {
	                        _this.formData[key] = val.$viewValue;
	                    }
	                }
	            });
	            return _this.formData || "";
	        };
	        /** only use if the developer has specified these features with isProcessForm */
	        this.$hibachi = $hibachi;
	        this.utilityService = utilityService;
	        if (angular.isUndefined(this.isDirty)) {
	            this.isDirty = false;
	        }
	        //object can be either an instance or a string that will become an instance
	        if (angular.isString(this.object)) {
	            var objectNameArray = this.object.split('_');
	            this.entityName = objectNameArray[0];
	            //if the object name array has two parts then we can infer that it is a process object
	            if (objectNameArray.length > 1) {
	                this.context = this.context || objectNameArray[1];
	                this.isProcessForm = true;
	            }
	            else {
	                this.context = this.context || 'save';
	                this.isProcessForm = false;
	            }
	            //convert the string to an object
	            this.$timeout(function () {
	                _this.object = _this.$hibachi['new' + _this.object]();
	            });
	        }
	        else {
	            if (this.object && this.object.metaData) {
	                this.isProcessForm = this.object.metaData.isProcessObject;
	                this.entityName = this.object.metaData.className.split('_')[0];
	                if (this.isProcessForm) {
	                    this.context = this.context || this.object.metaData.className.split('_')[1];
	                }
	                else {
	                    this.context = this.context || 'save';
	                }
	            }
	        }
	        //
	        this.context = this.context || this.name;
	        if (this.isProcessForm) {
	            /** Cart is an alias for an Order */
	            if (this.entityName == "Order") {
	                this.entityName = "Cart";
	            }
	            ;
	        }
	        //  /** find the form scope */
	        // this.$scope.$on('anchor', (event, data) =>
	        // {
	        //     if (data.anchorType == "form" && data.scope !== undefined) {
	        //         this.formCtrl = data.scope;
	        //     }
	        // });
	        /** make sure we have our data using new logic and $hibachi*/
	        //        if (this.context == undefined || this.entityName == undefined) {
	        //            throw ("ProcessObject Undefined Exception");
	        //        }
	        /* handle events
	        */
	        if (this.onSuccess) {
	            this.parseEventString(this.onSuccess, "onSuccess");
	            observerService.attach(this.eventsHandler, "onSuccess");
	        }
	        else if (this.onError) {
	            this.parseEventString(this.onError, "onError");
	            observerService.attach(this.eventsHandler, "onError"); //stub
	        }
	    }
	    return SWFormController;
	}());
	exports.SWFormController = SWFormController;
	var SWForm = (function () {
	    // @ngInject
	    function SWForm(coreFormPartialsPath, hibachiPathBuilder) {
	        this.coreFormPartialsPath = coreFormPartialsPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.templateUrl = "";
	        this.transclude = true;
	        this.restrict = "E";
	        this.controller = SWFormController;
	        this.controllerAs = "swForm";
	        this.scope = {};
	        /**
	         * Binds all of our variables to the controller so we can access using this
	         */
	        this.bindToController = {
	            name: "@?",
	            context: "@?",
	            entityName: "@?",
	            hiddenFields: "=?",
	            action: "@?",
	            actions: "@?",
	            formClass: "@?",
	            formData: "=?",
	            object: "=?",
	            onSuccess: "@?",
	            onError: "@?",
	            hideUntil: "@?",
	            isDirty: "=?",
	            inputAttributes: "@?",
	            eventHandlers: "@?"
	        };
	        /**
	            * Sets the context of this form
	            */
	        this.link = function (scope, element, attrs, controller) {
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "form.html";
	    }
	    /**
	     * Handles injecting the partials path into this class
	     */
	    SWForm.Factory = function () {
	        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWForm(coreFormPartialsPath, hibachiPathBuilder); };
	        directive.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWForm;
	}());
	exports.SWForm = SWForm;


/***/ }),
/* 487 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWFormFieldController = (function () {
	    //@ngInject
	    function SWFormFieldController($injector, $scope, $timeout, $log, $hibachi, observerService, utilityService) {
	        var _this = this;
	        this.$injector = $injector;
	        this.$scope = $scope;
	        this.$timeout = $timeout;
	        this.$log = $log;
	        this.$hibachi = $hibachi;
	        this.observerService = observerService;
	        this.utilityService = utilityService;
	        this.formFieldChanged = function (option) {
	            if (_this.fieldType === 'yesno') {
	                _this.object.data[_this.property] = option.value;
	                _this.form[_this.property].$dirty = true;
	                _this.form['selected' + _this.object.metaData.className + _this.property + _this.selectedRadioFormName].$dirty = false;
	            }
	            else if (_this.fieldType === 'select') {
	                _this.$log.debug('formfieldchanged');
	                _this.$log.debug(option);
	                if (_this.selectType === 'object' && typeof _this.object.data[_this.property].$$getIDName == "function") {
	                    _this.object.data[_this.property]['data'][_this.object.data[_this.property].$$getIDName()] = option.value;
	                    if (angular.isDefined(_this.form[_this.object.data[_this.property].$$getIDName()])) {
	                        _this.form[_this.object.data[_this.property].$$getIDName()].$dirty = true;
	                    }
	                }
	                else if (_this.selectType === 'string' && option && option.value != null) {
	                    _this.object.data[_this.property] = option.value;
	                    _this.form[_this.property].$dirty = true;
	                }
	                _this.observerService.notify(_this.object.metaData.className + _this.property.charAt(0).toUpperCase() + _this.property.slice(1) + 'OnChange', option);
	            }
	            else {
	                _this.object.data[_this.property] = option.value;
	                _this.form[_this.property].$dirty = true;
	                _this.form['selected' + _this.object.metaData.className + _this.property + _this.selectedRadioFormName].$dirty = false;
	            }
	        };
	        this.$onInit = function () {
	            var bindToControllerProps = _this.$injector.get('swFormFieldDirective')[0].bindToController;
	            for (var i in bindToControllerProps) {
	                if (!_this[i]) {
	                    if (!_this[i] && _this.swPropertyDisplay && _this.swPropertyDisplay[i]) {
	                        _this[i] = _this.swPropertyDisplay[i];
	                    }
	                    else if (!_this[i] && _this.swfPropertyDisplay && _this.swfPropertyDisplay[i]) {
	                        _this[i] = _this.swfPropertyDisplay[i];
	                    }
	                    else if (!_this[i] && _this.swForm && _this.swForm[i]) {
	                        _this[i] = _this.swForm[i];
	                    }
	                }
	            }
	            _this.property = _this.property || _this.propertyIdentifier;
	            _this.propertyIdentifier = _this.propertyIdentifier || _this.property;
	            _this.type = _this.type || _this.fieldType;
	            _this.fieldType = _this.fieldType || _this.type;
	            _this.edit = _this.edit || _this.editing;
	            _this.editing = _this.editing || _this.edit;
	            _this.editing = _this.editing || true;
	            _this.fieldType = _this.fieldType || "text";
	            if (_this.fieldType === 'yesno') {
	                _this.yesnoStrategy();
	            }
	            if (_this.fieldType === 'select') {
	                _this.selectStrategy();
	            }
	        };
	        this.selectStrategy = function () {
	            //this is specific to the admin because it implies loading of options via api
	            if (angular.isDefined(_this.object.metaData[_this.property].fieldtype)) {
	                _this.selectType = 'object';
	                _this.$log.debug('selectType:object');
	            }
	            else {
	                _this.selectType = 'string';
	                _this.$log.debug('selectType:string');
	            }
	            _this.getOptions();
	        };
	        this.getOptions = function () {
	            if (angular.isUndefined(_this.options)) {
	                if (!_this.optionsArguments || !_this.optionsArguments.hasOwnProperty('property')) {
	                    _this.optionsArguments = {
	                        'property': _this.propertyIdentifier || _this.property
	                    };
	                }
	                var optionsPromise = _this.$hibachi.getPropertyDisplayOptions(_this.object.metaData.className, _this.optionsArguments);
	                optionsPromise.then(function (value) {
	                    _this.options = value.data;
	                    if (_this.selectType === 'object') {
	                        if (angular.isUndefined(_this.object.data[_this.property])) {
	                            _this.object.data[_this.property] = _this.$hibachi['new' + _this.object.metaData[_this.property].cfc]();
	                        }
	                        if (_this.object.data[_this.property].$$getID() === '') {
	                            _this.$log.debug('no ID');
	                            _this.$log.debug(_this.object.data[_this.property].$$getIDName());
	                            _this.object.data['selected' + _this.property] = _this.options[0];
	                            _this.object.data[_this.property] = _this.$hibachi['new' + _this.object.metaData[_this.property].cfc]();
	                            _this.object.data[_this.property]['data'][_this.object.data[_this.property].$$getIDName()] = _this.options[0].value;
	                        }
	                        else {
	                            var found = false;
	                            for (var i in _this.options) {
	                                if (angular.isObject(_this.options[i].value)) {
	                                    _this.$log.debug('isObject');
	                                    _this.$log.debug(_this.object.data[_this.property].$$getIDName());
	                                    if (_this.options[i].value === _this.object.data[_this.property]) {
	                                        _this.object.data['selected' + _this.property] = _this.options[i];
	                                        _this.object.data[_this.property] = _this.options[i].value;
	                                        found = true;
	                                        break;
	                                    }
	                                }
	                                else {
	                                    _this.$log.debug('notisObject');
	                                    _this.$log.debug(_this.object.data[_this.property].$$getIDName());
	                                    if (_this.options[i].value === _this.object.data[_this.property].$$getID()) {
	                                        _this.object.data['selected' + _this.property] = _this.options[i];
	                                        _this.object.data[_this.property]['data'][_this.object.data[_this.property].$$getIDName()] = _this.options[i].value;
	                                        found = true;
	                                        break;
	                                    }
	                                }
	                                if (!found) {
	                                    _this.object.data['selected' + _this.property] = _this.options[0];
	                                }
	                            }
	                        }
	                    }
	                    else if (_this.selectType === 'string') {
	                        if (_this.object.data[_this.property] !== null) {
	                            for (var i in _this.options) {
	                                if (_this.options[i].value === _this.object.data[_this.property]) {
	                                    _this.object.data['selected' + _this.property] = _this.options[i];
	                                    _this.object.data[_this.property] = _this.options[i].value;
	                                }
	                            }
	                        }
	                        else {
	                            _this.object.data['selected' + _this.property] = _this.options[0];
	                            _this.object.data[_this.property] = _this.options[0].value;
	                        }
	                    }
	                });
	            }
	        };
	        this.yesnoStrategy = function () {
	            //format value
	            _this.selectedRadioFormName = _this.utilityService.createID(26);
	            _this.object.data[_this.property] = (_this.object.data[_this.property]
	                && _this.object.data[_this.property].length
	                && _this.object.data[_this.property].toLowerCase().trim() === 'yes') || _this.object.data[_this.property] == 1 ? 1 : 0;
	            _this.options = [
	                {
	                    name: 'Yes',
	                    value: 1
	                },
	                {
	                    name: 'No',
	                    value: 0
	                }
	            ];
	            if (angular.isDefined(_this.object.data[_this.property])) {
	                for (var i in _this.options) {
	                    if (_this.options[i].value === _this.object.data[_this.property]) {
	                        _this.selected = _this.options[i];
	                        _this.object.data[_this.property] = _this.options[i].value;
	                    }
	                }
	            }
	            else {
	                _this.selected = _this.options[0];
	                _this.object.data[_this.property] = _this.options[0].value;
	            }
	            _this.$timeout(function () {
	                _this.form[_this.property].$dirty = _this.isDirty;
	            });
	        };
	        this.$injector = $injector;
	        this.$scope = $scope;
	        this.$timeout = $timeout;
	        this.$log = $log;
	        this.$hibachi = $hibachi;
	        this.observerService = observerService;
	        this.utilityService = utilityService;
	    }
	    return SWFormFieldController;
	}());
	exports.SWFormFieldController = SWFormFieldController;
	var SWFormField = (function () {
	    //@ngInject
	    function SWFormField($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) {
	        this.restrict = "EA";
	        this.require = {
	            swfPropertyDisplay: "^?swfPropertyDisplay",
	            swPropertyDisplay: "^?swPropertyDisplay",
	            form: "^?form",
	            swForm: '^?swForm'
	        };
	        this.controller = SWFormFieldController;
	        this.controllerAs = "swFormField";
	        this.scope = {};
	        this.bindToController = {
	            propertyIdentifier: "@?",
	            name: "@?",
	            class: "@?",
	            errorClass: "@?",
	            type: "@?",
	            option: "=?",
	            valueObject: "=?",
	            object: "=?",
	            label: "@?",
	            labelText: "@?",
	            labelClass: "@?",
	            optionValues: "=?",
	            edit: "=?",
	            title: "@?",
	            value: "=?",
	            errorText: "@?",
	            fieldType: "@?",
	            property: "@?",
	            inListingDisplay: "=?",
	            inputAttributes: "@?",
	            options: "=?",
	            optionsArguments: "=?",
	            eagerLoadOptions: "=?",
	            rawFileTarget: "@?",
	            binaryFileTarget: "@?",
	            isDirty: "=?",
	            onChange: "=?",
	            editable: "=?",
	            eventHandlers: "@?",
	            context: "@?"
	        };
	        this.link = function (scope, element, attrs) {
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'formfield.html';
	    }
	    SWFormField.Factory = function () {
	        var directive = function ($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormField($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$templateCache',
	            '$window',
	            '$hibachi',
	            'formService',
	            'coreFormPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWFormField;
	}());
	exports.SWFormField = SWFormField;


/***/ }),
/* 488 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWFormFieldFileController = (function () {
	    //@ngInject
	    function SWFormFieldFileController(formService) {
	        this.formService = formService;
	        if (this.propertyDisplay.isDirty == undefined)
	            this.propertyDisplay.isDirty = false;
	        this.propertyDisplay.form.$dirty = this.propertyDisplay.isDirty;
	        //this.formService.setPristinePropertyValue(this.propertyDisplay.property,this.propertyDisplay.object.data[this.propertyDisplay.property]);
	    }
	    return SWFormFieldFileController;
	}());
	var SWFormFieldFile = (function () {
	    function SWFormFieldFile(coreFormPartialsPath, hibachiPathBuilder) {
	        this.restrict = 'E';
	        this.require = "^form";
	        this.controller = SWFormFieldFileController;
	        this.controllerAs = "swFormFieldFile";
	        this.scope = true;
	        this.bindToController = {
	            propertyDisplay: "="
	        };
	        //@ngInject
	        this.link = function (scope, element, attr, formController) {
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + "file.html";
	    }
	    SWFormFieldFile.Factory = function () {
	        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldFile(coreFormPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            'coreFormPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWFormFieldFile;
	}());
	exports.SWFormFieldFile = SWFormFieldFile;


/***/ }),
/* 489 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWFormFieldJsonController = (function () {
	    //@ngInject
	    function SWFormFieldJsonController(formService) {
	        this.propertyDisplay.form.$dirty = this.propertyDisplay.isDirty;
	    }
	    return SWFormFieldJsonController;
	}());
	var SWFormFieldJson = (function () {
	    function SWFormFieldJson(coreFormPartialsPath, hibachiPathBuilder) {
	        this.restrict = 'E';
	        this.require = "^form";
	        this.scope = true;
	        this.controller = SWFormFieldJsonController;
	        this.bindToController = {
	            propertyDisplay: "=?"
	        };
	        this.controllerAs = "ctrl";
	        this.templateUrl = "";
	        this.link = function (scope, element, attrs, formController) { };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + "json.html";
	    }
	    SWFormFieldJson.Factory = function () {
	        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldJson(coreFormPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            'coreFormPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWFormFieldJson;
	}());
	exports.SWFormFieldJson = SWFormFieldJson;


/***/ }),
/* 490 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWFormFieldSearchSelect = (function () {
	    function SWFormFieldSearchSelect($http, $log, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) {
	        return {
	            templateUrl: hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'search-select.html',
	            require: "^form",
	            restrict: 'E',
	            scope: {
	                propertyDisplay: "="
	            },
	            link: function (scope, element, attr, formController) {
	                //set up selectionOptions
	                scope.selectionOptions = {
	                    value: [],
	                    $$adding: false
	                };
	                //match in matches track by
	                //function to set state of adding new item
	                scope.setAdding = function (isAdding) {
	                    scope.isAdding = isAdding;
	                    scope.showAddBtn = false;
	                };
	                scope.selectedOption = {};
	                scope.showAddBtn = false;
	                var propertyMetaData = scope.propertyDisplay.object.$$getMetaData(scope.propertyDisplay.property);
	                //create basic
	                var object = $hibachi.newEntity(propertyMetaData.cfc);
	                //				scope.propertyDisplay.template = '';
	                //				//check for a template
	                //				//rules are tiered: check if an override is specified at scope.template, check if the cfc name .html exists, use
	                //				var templatePath = coreFormPartialsPath + 'formfields/searchselecttemplates/';
	                //				if(angular.isUndefined(scope.propertyDisplay.template)){
	                //					var templatePromise = $http.get(templatePath+propertyMetaData.cfcProperCase+'.html',function(){
	                //						$log.debug('template');
	                //						scope.propertyDisplay.template = templatePath+propertyMetaData.cfcProperCase+'.html';
	                //					},function(){
	                //						scope.propertyDisplay.template = templatePath+'index.html';
	                //						$log.debug('template');
	                //						$log.debug(scope.propertyDisplay.template);
	                //					});
	                //				}
	                //set up query function for finding related object
	                scope.cfcProperCase = propertyMetaData.cfcProperCase;
	                scope.selectionOptions.getOptionsByKeyword = function (keyword) {
	                    var filterGroupsConfig = '[' +
	                        ' {  ' +
	                        '"filterGroup":[  ' +
	                        '{' +
	                        ' "propertyIdentifier":"_' + scope.cfcProperCase.toLowerCase() + '.' + scope.cfcProperCase + 'Name",' +
	                        ' "comparisonOperator":"like",' +
	                        ' "ormtype":"string",' +
	                        ' "value":"%' + keyword + '%"' +
	                        '  }' +
	                        ' ]' +
	                        ' }' +
	                        ']';
	                    return $hibachi.getEntity(propertyMetaData.cfc, { filterGroupsConfig: filterGroupsConfig.trim() })
	                        .then(function (value) {
	                        $log.debug('typesByKeyword');
	                        $log.debug(value);
	                        scope.selectionOptions.value = value.pageRecords;
	                        var myLength = keyword.length;
	                        if (myLength > 0) {
	                            scope.showAddBtn = true;
	                        }
	                        else {
	                            scope.showAddBtn = false;
	                        }
	                        return scope.selectionOptions.value;
	                    });
	                };
	                var propertyPromise = scope.propertyDisplay.object['$$get' + propertyMetaData.nameCapitalCase]();
	                propertyPromise.then(function (data) {
	                });
	                //set up behavior when selecting an item
	                scope.selectItem = function ($item, $model, $label) {
	                    scope.$item = $item;
	                    scope.$model = $model;
	                    scope.$label = $label;
	                    scope.showAddBtn = false; //turns off the add btn on select
	                    //angular.extend(inflatedObject.data,$item);
	                    object.$$init($item);
	                    $log.debug('select item');
	                    $log.debug(object);
	                    scope.propertyDisplay.object['$$set' + propertyMetaData.nameCapitalCase](object);
	                };
	                //				if(angular.isUndefined(scope.propertyDipslay.object[scope.propertyDisplay.property])){
	                //					$log.debug('getmeta');
	                //					$log.debug(scope.propertyDisplay.object.metaData[scope.propertyDisplay.property]);
	                //
	                //					//scope.propertyDipslay.object['$$get'+]
	                //				}
	                //
	                //				scope.propertyDisplay.object.data[scope.propertyDisplay.property].$dirty = true;
	            }
	        };
	    }
	    SWFormFieldSearchSelect.Factory = function () {
	        var directive = function ($http, $log, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldSearchSelect($http, $log, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$http',
	            '$log',
	            '$hibachi',
	            'formService',
	            'coreFormPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWFormFieldSearchSelect;
	}());
	exports.SWFormFieldSearchSelect = SWFormFieldSearchSelect;


/***/ }),
/* 491 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWFormRegistrar = (function () {
	    //@ngInject
	    function SWFormRegistrar(formService, coreFormPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            require: ["^form", "^swForm"],
	            scope: {
	                object: "=?",
	                context: "@?",
	                name: "@?",
	                isDirty: "=?"
	            },
	            link: function (scope, element, attrs, formController, transclude) {
	                /*add form info at the form level*/
	                scope.$watch(function () { return formController[0]; }, function () {
	                    formController[1].formCtrl = formController[0];
	                });
	                formController[0].$$swFormInfo = {
	                    object: scope.object,
	                    context: scope.context || 'save',
	                    name: scope.name
	                };
	                var makeRandomID = function makeid(count) {
	                    var text = "";
	                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	                    for (var i = 0; i < count; i++)
	                        text += possible.charAt(Math.floor(Math.random() * possible.length));
	                    return text;
	                };
	                if (scope.isDirty) {
	                    formController[0].autoDirty = true;
	                }
	                scope.form = formController[0];
	                /*register form with service*/
	                formController[0].name = scope.name;
	                formController[0].$setDirty();
	                formService.setForm(formController[0]);
	                /*register form at object level*/
	                if (!angular.isDefined(scope.object.forms)) {
	                    scope.object.forms = {};
	                }
	                scope.object.forms[scope.name] = formController[0];
	            }
	        };
	    }
	    SWFormRegistrar.Factory = function () {
	        var directive = function (formService, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormRegistrar(formService, coreFormPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            'formService',
	            'coreFormPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWFormRegistrar;
	}());
	exports.SWFormRegistrar = SWFormRegistrar;
	// 	angular.module('slatwalladmin').directive('swFormRegistrar',[ 'formService', 'partialsPath', (formService, partialsPath) => new swFormRegistrar(formService, partialsPath)]);
	// }


/***/ }),
/* 492 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWErrorDisplayController = (function () {
	    //@ngInject
	    function SWErrorDisplayController($injector) {
	        this.$injector = $injector;
	        this.$injector = $injector;
	    }
	    SWErrorDisplayController.prototype.$onInit = function () {
	        var bindToControllerProps = this.$injector.get('swErrorDisplayDirective')[0].bindToController;
	        for (var i in bindToControllerProps) {
	            if (!this[i] && i !== 'name') {
	                if (!this[i] && this.swPropertyDisplay && this.swPropertyDisplay[i]) {
	                    this[i] = this.swPropertyDisplay[i];
	                }
	                else if (!this[i] && this.swfPropertyDisplay && this.swfPropertyDisplay[i]) {
	                    this[i] = this.swfPropertyDisplay[i];
	                }
	                else if (!this[i] && this.swForm && this.swForm[i]) {
	                    this[i] = this.swForm[i];
	                }
	            }
	        }
	        this.property = this.property || this.propertyIdentifier;
	        this.propertyIdentifier = this.propertyIdentifier || this.property;
	        if (!this.name && this.property) {
	            this.name = this.property;
	        }
	    };
	    return SWErrorDisplayController;
	}());
	exports.SWErrorDisplayController = SWErrorDisplayController;
	var SWErrorDisplay = (function () {
	    // @ngInject
	    function SWErrorDisplay(coreFormPartialsPath, hibachiPathBuilder) {
	        this.coreFormPartialsPath = coreFormPartialsPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.require = {
	            swForm: "^?swForm",
	            form: "^?form",
	            swPropertyDisplay: "^?swPropertyDisplay",
	            swfPropertyDisplay: "^?swfPropertyDisplay"
	        };
	        this.restrict = "E";
	        this.controller = SWErrorDisplayController;
	        this.controllerAs = "swErrorDisplay";
	        this.scope = {};
	        this.bindToController = {
	            form: "=?",
	            name: "@?",
	            property: "@?",
	            propertyIdentifier: "@?",
	            errorClass: "@?"
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "errordisplay.html";
	    }
	    SWErrorDisplay.Factory = function () {
	        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWErrorDisplay(coreFormPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            'coreFormPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWErrorDisplay;
	}());
	exports.SWErrorDisplay = SWErrorDisplay;


/***/ }),
/* 493 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWAddressFormController = (function () {
	    //@ngInject
	    function SWAddressFormController($log) {
	        var _this = this;
	        this.$log = $log;
	        this.showAddressBookSelect = false;
	        this.showCountrySelect = true;
	        this.showSubmitButton = true;
	        this.param = "?slataction=";
	        this.getAction = function () {
	            if (!angular.isDefined(_this.action)) {
	                _this.action = "addAddress";
	            }
	            if (_this.action.indexOf(":") != -1 && _this.action.indexOf(_this.param) == -1) {
	                _this.action = _this.param + _this.action;
	            }
	            return _this.action;
	        };
	        this.hasField = function (field) {
	            if (_this.fieldList.indexOf(field) != -1) {
	                return true;
	            }
	            return false;
	        };
	        //if exists, just name it slatwall.
	        if (angular.isDefined(this.slatwallScope)) {
	            this.slatwall = this.slatwallScope;
	        }
	        if (this.fieldList == undefined) {
	            this.fieldList = "countryCode,name,company,streetAddress,street2Address,locality,city,stateCode,postalCode";
	        }
	        if (this.showAddressBookSelect == undefined) {
	            this.showAddressBookSelect = false;
	        }
	        if (this.showCountrySelect == undefined) {
	            this.showCountrySelect = true;
	        }
	        if (this.action == undefined) {
	            this.showSubmitButton = false;
	        }
	    }
	    return SWAddressFormController;
	}());
	exports.SWAddressFormController = SWAddressFormController;
	var SWAddressForm = (function () {
	    // @ngInject
	    function SWAddressForm(coreFormPartialsPath, hibachiPathBuilder) {
	        this.coreFormPartialsPath = coreFormPartialsPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.templateUrl = "";
	        this.controller = SWAddressFormController;
	        this.controllerAs = 'SwAddressForm';
	        this.bindToController = {
	            action: '@',
	            actionText: '@',
	            customPartial: '@',
	            slatwallScope: '=',
	            address: "=",
	            id: "@?",
	            fieldNamePrefix: "@",
	            fieldList: "@",
	            fieldClass: "@",
	            tabIndex: "@",
	            addressName: "@",
	            showAddressBookSelect: "@",
	            showCountrySelect: "@",
	            showSubmitButton: "@"
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "addressform.html";
	    }
	    /**
	     * Handles injecting the partials path into this class
	     */
	    SWAddressForm.Factory = function () {
	        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWAddressForm(coreFormPartialsPath, hibachiPathBuilder); };
	        directive.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWAddressForm;
	}());
	exports.SWAddressForm = SWAddressForm;


/***/ }),
/* 494 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWPropertyDisplayController = (function () {
	    //@ngInject
	    function SWPropertyDisplayController($filter, utilityService, $injector, metadataService, observerService, listingService) {
	        var _this = this;
	        this.$filter = $filter;
	        this.utilityService = utilityService;
	        this.$injector = $injector;
	        this.metadataService = metadataService;
	        this.observerService = observerService;
	        this.listingService = listingService;
	        this.saved = false;
	        this.optionValues = [];
	        this.$onInit = function () {
	            var bindToControllerProps = _this.$injector.get('swPropertyDisplayDirective')[0].bindToController;
	            for (var i in bindToControllerProps) {
	                if (!_this[i] && _this.swForm && _this.swForm[i]) {
	                    _this[i] = _this.swForm[i];
	                }
	            }
	            _this.errors = {};
	            _this.edited = false;
	            _this.initialValue = _this.object.data[_this.property];
	            _this.propertyDisplayID = _this.utilityService.createID(32);
	            if (angular.isUndefined(_this.showSave)) {
	                _this.showSave = true;
	            }
	            if (angular.isUndefined(_this.inListingDisplay)) {
	                _this.inListingDisplay = false;
	            }
	            if (angular.isUndefined(_this.rowSaveEnabled)) {
	                _this.rowSaveEnabled = _this.inListingDisplay;
	            }
	            if (angular.isDefined(_this.revertToValue) && angular.isUndefined(_this.showRevert)) {
	                _this.showRevert = true;
	            }
	            if (angular.isDefined(_this.revertToValue) && angular.isUndefined(_this.revertText)) {
	                _this.revertText = _this.revertToValue;
	            }
	            if (angular.isUndefined(_this.showRevert)) {
	                _this.showRevert = false;
	            }
	            if (angular.isUndefined(_this.rawFileTarget)) {
	                _this.rawFileTarget = _this.property;
	            }
	            if (angular.isUndefined(_this.editing)) {
	                _this.editing = false;
	            }
	            if (angular.isUndefined(_this.editable)) {
	                _this.editable = true;
	            }
	            if (angular.isUndefined(_this.isHidden)) {
	                _this.isHidden = false;
	            }
	            if (angular.isUndefined(_this.noValidate)) {
	                _this.noValidate = false;
	            }
	            if (angular.isUndefined(_this.inModal)) {
	                _this.inModal = false;
	            }
	            if (angular.isUndefined(_this.optionsArguments)) {
	                _this.optionsArguments = {};
	            }
	            if ((_this.fieldType !== 'hidden' &&
	                angular.isUndefined(_this.inListingDisplay)) ||
	                (angular.isDefined(_this.inListingDisplay) && !_this.inListingDisplay)) {
	                _this.showLabel = true;
	            }
	            else {
	                _this.showLabel = false;
	            }
	            if (angular.isDefined(_this.pageRecord) && angular.isUndefined(_this.pageRecord.edited)) {
	                _this.pageRecord.edited = false;
	            }
	            _this.applyFilter = function (model, filter) {
	                try {
	                    return _this.$filter(filter)(model);
	                }
	                catch (e) {
	                    return model;
	                }
	            };
	            _this.property = _this.property || _this.propertyIdentifier;
	            _this.propertyIdentifier = _this.propertyIdentifier || _this.property;
	            _this.type = _this.type || _this.fieldType;
	            _this.fieldType = _this.fieldType || _this.type;
	            _this.edit = _this.edit || _this.editing;
	            _this.editing = _this.editing || _this.edit;
	            //swfproperty logic
	            if (angular.isUndefined(_this.type) && _this.object && _this.object.metaData) {
	                _this.type = _this.metadataService.getPropertyFieldType(_this.object, _this.propertyIdentifier);
	            }
	            if (angular.isUndefined(_this.title) && _this.object && _this.object.metaData) {
	                _this.labelText = _this.metadataService.getPropertyTitle(_this.object, _this.propertyIdentifier);
	            }
	            _this.labelText = _this.labelText || _this.title;
	            _this.title = _this.title || _this.labelText;
	            _this.type = _this.type || "text";
	            _this.class = _this.class || "form-control";
	            _this.fieldAttributes = _this.fieldAttributes || "";
	            _this.label = _this.label || "true";
	            _this.labelText = _this.labelText || "";
	            _this.labelClass = _this.labelClass || "";
	            _this.name = _this.name || "unnamed";
	            _this.object = _this.object || _this.swForm.object; //this is the process object
	            /** handle options */
	            if (_this.options && angular.isString(_this.options)) {
	                var optionsArray = [];
	                optionsArray = _this.options.toString().split(",");
	                angular.forEach(optionsArray, function (o) {
	                    var newOption = {
	                        name: "",
	                        value: ""
	                    };
	                    newOption.name = o;
	                    newOption.value = o;
	                    _this.optionValues.push(newOption);
	                });
	            }
	            /** handle turning the options into an array of objects */
	            /** handle setting the default value for the yes / no element  */
	            if (_this.type == "yesno" && (_this.value && angular.isString(_this.value))) {
	                _this.selected == _this.value;
	            }
	            if (angular.isUndefined(_this.hint) && _this.object && _this.object.metaData) {
	                _this.hint = _this.metadataService.getPropertyHintByObjectAndPropertyIdentifier(_this.object, _this.propertyIdentifier);
	            }
	            if ((_this.hasOnChangeCallback || _this.inListingDisplay || _this.onChangeEvent) &&
	                (angular.isDefined(_this.swForm) && angular.isDefined(_this.name))) {
	                _this.swInputOnChangeEvent = _this.swForm.name + _this.name + 'change';
	                _this.observerService.attach(_this.onChange, _this.swInputOnChangeEvent);
	            }
	        };
	        this.onChange = function (result) {
	            _this.edited = true;
	            if (_this.saved) {
	                _this.saved = false;
	            }
	            if (_this.hasOnChangeCallback) {
	                _this.onChangeCallback(result);
	            }
	            if (_this.inListingDisplay && _this.rowSaveEnabled) {
	                _this.listingService.markEdited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID, _this.save);
	            }
	            if (angular.isDefined(_this.onChangeEvent)) {
	                _this.observerService.notify(_this.onChangeEvent, result);
	            }
	        };
	        this.clear = function () {
	            if (_this.reverted) {
	                _this.reverted = false;
	                _this.showRevert = true;
	            }
	            _this.edited = false;
	            _this.object.data[_this.property] = _this.initialValue;
	            if (_this.inListingDisplay && _this.rowSaveEnabled) {
	                _this.listingService.markUnedited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID);
	            }
	        };
	        this.revert = function () {
	            _this.showRevert = false;
	            _this.reverted = true;
	            _this.object.data[_this.property] = _this.revertToValue;
	            _this.onChange();
	        };
	        this.save = function () {
	            //do this eagerly to hide save will reverse if theres an error
	            _this.edited = false;
	            _this.saved = true;
	            if (!_this.inModal) {
	                _this.object.$$save().then(function (response) {
	                    if (_this.hasSaveCallback) {
	                        _this.saveCallback(response);
	                    }
	                }, function (reason) {
	                    _this.edited = true;
	                    _this.saved = false;
	                });
	            }
	            else if (_this.hasModalCallback) {
	                _this.modalCallback();
	            }
	        };
	    }
	    return SWPropertyDisplayController;
	}());
	exports.SWPropertyDisplayController = SWPropertyDisplayController;
	var SWPropertyDisplay = (function () {
	    //@ngInject
	    function SWPropertyDisplay($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) {
	        var _this = this;
	        this.$compile = $compile;
	        this.scopeService = scopeService;
	        this.coreFormPartialsPath = coreFormPartialsPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.swpropertyPartialPath = swpropertyPartialPath;
	        this.require = { swForm: "?^swForm", form: "?^form" };
	        this.restrict = 'AE';
	        this.scope = {};
	        this.bindToController = {
	            //swfproperty scope
	            type: "@?",
	            name: "@?",
	            class: "@?",
	            edit: "@?",
	            valueObject: "=?",
	            valueObjectProperty: "=?",
	            propertyIdentifier: "@?",
	            valueOptions: "=?",
	            fieldAttributes: "@?",
	            label: "@?",
	            labelText: "@?",
	            labelClass: "@?",
	            errorText: "@?",
	            errorClass: "@?",
	            formTemplate: "@?",
	            //swpropertyscope
	            property: "@?",
	            object: "=?",
	            editable: "=?",
	            editing: "=?",
	            isHidden: "=?",
	            title: "=?",
	            hint: "@?",
	            options: "=?",
	            optionsArguments: "=?",
	            eagerLoadOptions: "=?",
	            isDirty: "=?",
	            onChangeCallback: "&?onChange",
	            onChangeEvent: "@?",
	            saveCallback: "&?",
	            fieldType: "@?",
	            rawFileTarget: "@?",
	            binaryFileTarget: "@?",
	            noValidate: "=?",
	            inListingDisplay: "=?",
	            inModal: "=?",
	            modalCallback: "&?",
	            hasModalCallback: "=?",
	            rowSaveEnabled: "=?",
	            revertToValue: "=?",
	            revertText: "@?",
	            showRevert: "=?",
	            showSave: "=?",
	            placeholderText: "@",
	            placeholderRbKey: "@",
	            inputAttributes: "@?",
	            optionValues: "=?",
	            eventHandlers: "@?",
	            context: "@?"
	        };
	        this.controller = SWPropertyDisplayController;
	        this.controllerAs = "swPropertyDisplay";
	        this.templateUrlPath = "propertydisplay.html";
	        this.link = function ($scope, element, attrs, formController) {
	            $scope.frmController = formController;
	            $scope.swfPropertyDisplay = $scope.swPropertyDisplay;
	            if (angular.isDefined(attrs.onChange)) {
	                $scope.swPropertyDisplay.hasOnChangeCallback = true;
	            }
	            else {
	                $scope.swPropertyDisplay.hasOnChangeCallback = false;
	            }
	            if (angular.isDefined(attrs.saveCallback)) {
	                $scope.swPropertyDisplay.hasSaveCallback = true;
	            }
	            else {
	                $scope.swPropertyDisplay.hasSaveCallback = false;
	            }
	            if (angular.isDefined($scope.swPropertyDisplay.inListingDisplay) && $scope.swPropertyDisplay.inListingDisplay) {
	                var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
	                if (angular.isDefined(currentScope["pageRecord"])) {
	                    $scope.swPropertyDisplay.pageRecord = currentScope["pageRecord"];
	                }
	                var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
	                if (angular.isDefined(currentScope["pageRecordKey"])) {
	                    $scope.swPropertyDisplay.pageRecordIndex = currentScope["pageRecordKey"];
	                }
	                var currentScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
	                if (angular.isDefined(currentScope["swListingDisplay"])) {
	                    $scope.swPropertyDisplay.listingID = currentScope["swListingDisplay"].tableID;
	                }
	            }
	            if (angular.isDefined($scope.swPropertyDisplay.inModal) && $scope.swPropertyDisplay.inModal) {
	                var modalScope = _this.scopeService.getRootParentScope($scope, "swModalLauncher");
	                $scope.swPropertyDisplay.modalName = modalScope.swModalLauncher.modalName;
	                if (angular.isFunction(modalScope.swModalLauncher.launchModal)) {
	                    $scope.swPropertyDisplay.modalCallback = modalScope.swModalLauncher.launchModal;
	                    $scope.swPropertyDisplay.hasModalCallback = true;
	                }
	            }
	        };
	        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + swpropertyPartialPath;
	    }
	    SWPropertyDisplay.Factory = function (swpropertyClass, swpropertyPartialPath) {
	        var directive = function ($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder) { return new swpropertyClass($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, 
	        //not an inejctable don't add to $inject. This is in the form.module Factory implementation
	        swpropertyPartialPath); };
	        directive.$inject = ['$compile', 'scopeService', 'coreFormPartialsPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWPropertyDisplay;
	}());
	SWPropertyDisplay.$inject = ['coreFormPartialsPath', 'hibachiPathBuilder'];
	exports.SWPropertyDisplay = SWPropertyDisplay;


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var swpropertydisplay_1 = __webpack_require__(494);
	var SWFPropertyDisplayController = (function (_super) {
	    __extends(SWFPropertyDisplayController, _super);
	    //@ngInject
	    function SWFPropertyDisplayController($filter, utilityService, $injector, metadataService, observerService) {
	        var _this = _super.call(this, $filter, utilityService, $injector, metadataService, observerService) || this;
	        _this.$filter = $filter;
	        _this.utilityService = utilityService;
	        _this.$injector = $injector;
	        _this.metadataService = metadataService;
	        _this.observerService = observerService;
	        _this.editing = true;
	        return _this;
	    }
	    return SWFPropertyDisplayController;
	}(swpropertydisplay_1.SWPropertyDisplayController));
	exports.SWFPropertyDisplayController = SWFPropertyDisplayController;
	var SWFPropertyDisplay = (function (_super) {
	    __extends(SWFPropertyDisplay, _super);
	    //@ngInject
	    function SWFPropertyDisplay($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) {
	        var _this = _super.call(this, $compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) || this;
	        _this.$compile = $compile;
	        _this.scopeService = scopeService;
	        _this.coreFormPartialsPath = coreFormPartialsPath;
	        _this.hibachiPathBuilder = hibachiPathBuilder;
	        _this.swpropertyPartialPath = swpropertyPartialPath;
	        _this.controller = SWFPropertyDisplayController;
	        _this.controllerAs = "swfPropertyDisplay";
	        _this.link = function (scope, element, attrs) {
	        };
	        return _this;
	    }
	    return SWFPropertyDisplay;
	}(swpropertydisplay_1.SWPropertyDisplay));
	exports.SWFPropertyDisplay = SWFPropertyDisplay;


/***/ }),
/* 496 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWFormSubscriberController = (function () {
	    //@ngInject
	    function SWFormSubscriberController($log, $compile, $hibachi, utilityService, rbkeyService, $injector) {
	        var _this = this;
	        this.$log = $log;
	        this.$compile = $compile;
	        this.$hibachi = $hibachi;
	        this.utilityService = utilityService;
	        this.rbkeyService = rbkeyService;
	        this.$injector = $injector;
	        this.$onInit = function () {
	            var bindToControllerProps = _this.$injector.get('swFormSubscriberDirective')[0].bindToController;
	            for (var i in bindToControllerProps) {
	                if (!_this[i]) {
	                    if (!_this[i] && _this.swForm && _this.swForm[i]) {
	                        _this[i] = _this.swForm[i];
	                    }
	                }
	            }
	            _this.property = _this.property || _this.propertyIdentifier;
	            _this.propertyIdentifier = _this.propertyIdentifier || _this.property;
	            _this.type = _this.type || _this.fieldType;
	            _this.fieldType = _this.fieldType || _this.type;
	            _this.edit = _this.edit || _this.editing;
	            _this.editing = _this.editing || _this.edit;
	            _this.editing = _this.editing || true;
	            _this.fieldType = _this.fieldType || "text";
	            _this.inputAttributes = _this.inputAttributes || "";
	        };
	        this.utilityService = utilityService;
	        this.$hibachi = $hibachi;
	        this.rbkeyService = rbkeyService;
	        this.$log = $log;
	        this.$injector = $injector;
	    }
	    return SWFormSubscriberController;
	}());
	var SWFormSubscriber = (function () {
	    //ngInject
	    function SWFormSubscriber() {
	        this.restrict = "A";
	        this.require = {
	            swForm: "?^swForm",
	            form: "?^form"
	        };
	        this.scope = {};
	        this.bindToController = {
	            propertyIdentifier: "@?",
	            name: "@?",
	            class: "@?",
	            errorClass: "@?",
	            option: "=?",
	            valueObject: "=?",
	            object: "=?",
	            label: "@?",
	            labelText: "@?",
	            labelClass: "@?",
	            optionValues: "=?",
	            edit: "=?",
	            title: "@?",
	            value: "=?",
	            errorText: "@?",
	            fieldType: "@?",
	            property: "@?",
	            inputAttributes: "@?",
	            type: "@?",
	            editing: "=?"
	        };
	        this.controller = SWFormSubscriberController;
	        this.controllerAs = "SWFormSubscriber";
	        this.link = function (scope, element, attr) {
	        };
	    }
	    SWFormSubscriber.Factory = function () {
	        var directive = function () { return new SWFormSubscriber(); };
	        directive.$inject = [];
	        return directive;
	    };
	    return SWFormSubscriber;
	}());
	exports.SWFormSubscriber = SWFormSubscriber;


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path="../../typings/tsd.d.ts" />
	/// <reference path="../../typings/hibachiTypescript.d.ts" />
	Object.defineProperty(exports, "__esModule", { value: true });
	//components
	var swvalidate_1 = __webpack_require__(498);
	var swvalidationminlength_1 = __webpack_require__(499);
	var swvalidationdatatype_1 = __webpack_require__(500);
	var swvalidationeq_1 = __webpack_require__(501);
	var swvalidationgte_1 = __webpack_require__(502);
	var swvalidationlte_1 = __webpack_require__(503);
	var swvalidationmaxlength_1 = __webpack_require__(504);
	var swvalidationmaxvalue_1 = __webpack_require__(505);
	var swvalidationminvalue_1 = __webpack_require__(506);
	var swvalidationneq_1 = __webpack_require__(507);
	var swvalidationnumeric_1 = __webpack_require__(508);
	var swvalidationregex_1 = __webpack_require__(509);
	var swvalidationrequired_1 = __webpack_require__(510);
	var swvalidationunique_1 = __webpack_require__(511);
	var swvalidationuniqueornull_1 = __webpack_require__(512);
	//services
	var validationservice_1 = __webpack_require__(513);
	var core_module_1 = __webpack_require__(275);
	var validationmodule = angular.module('hibachi.validation', [core_module_1.coremodule.name])
	    .run([function () {
	    }])
	    .directive('swValidate', swvalidate_1.SWValidate.Factory())
	    .directive('swvalidationminlength', swvalidationminlength_1.SWValidationMinLength.Factory())
	    .directive('swvalidationdatatype', swvalidationdatatype_1.SWValidationDataType.Factory())
	    .directive('swvalidationeq', swvalidationeq_1.SWValidationEq.Factory())
	    .directive("swvalidationgte", swvalidationgte_1.SWValidationGte.Factory())
	    .directive("swvalidationlte", swvalidationlte_1.SWValidationLte.Factory())
	    .directive('swvalidationmaxlength', swvalidationmaxlength_1.SWValidationMaxLength.Factory())
	    .directive("swvalidationmaxvalue", swvalidationmaxvalue_1.SWValidationMaxValue.Factory())
	    .directive("swvalidationminvalue", swvalidationminvalue_1.SWValidationMinValue.Factory())
	    .directive("swvalidationneq", swvalidationneq_1.SWValidationNeq.Factory())
	    .directive("swvalidationnumeric", swvalidationnumeric_1.SWValidationNumeric.Factory())
	    .directive("swvalidationregex", swvalidationregex_1.SWValidationRegex.Factory())
	    .directive("swvalidationrequired", swvalidationrequired_1.SWValidationRequired.Factory())
	    .directive("swvalidationunique", swvalidationunique_1.SWValidationUnique.Factory())
	    .directive("swvalidationuniqueornull", swvalidationuniqueornull_1.SWValidationUniqueOrNull.Factory())
	    .service("validationService", validationservice_1.ValidationService);
	exports.validationmodule = validationmodule;


/***/ }),
/* 498 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/**
	 * This validate directive will look at the current element, figure out the context (save, edit, delete) and
	 * validate based on that context as defined in the validation properties object.
	 */
	// 'use strict';
	// angular.module('slatwalladmin').directive('swValidate',
	Object.defineProperty(exports, "__esModule", { value: true });
	// [ '$log','$hibachi', function($log, $hibachi) {
	var SWValidate = (function () {
	    function SWValidate($log, $hibachi) {
	        return {
	            restrict: "A",
	            require: '^ngModel',
	            link: function (scope, elem, attr, ngModel) {
	                //Define our contexts and validation property enums.
	                var ContextsEnum = {
	                    SAVE: { name: "save", value: 0 },
	                    DELETE: { name: "delete", value: 1 },
	                    EDIT: { name: "edit", value: 2 }
	                };
	                var ValidationPropertiesEnum = {
	                    REGEX: { name: "regex", value: 0 },
	                    MIN_VALUE: { name: "minValue", value: 1 },
	                    MAX_VALUE: { name: "maxValue", value: 2 },
	                    EQ: { name: "eq", value: 3 },
	                    NEQ: { name: "neq", value: 4 },
	                    UNIQUE: { name: "unique", value: 5 },
	                    LTE: { name: "lte", value: 6 },
	                    GTE: { name: "gte", value: 7 },
	                    MIN_LENGTH: { name: "minLength", value: 8 },
	                    MAX_LENGTH: { name: "maxLength", value: 9 },
	                    DATA_TYPE: { name: "dataType", value: 10 },
	                    REQUIRED: { name: "required", value: 11 }
	                };
	                scope.validationPropertiesEnum = ValidationPropertiesEnum;
	                scope.contextsEnum = ContextsEnum;
	                var myCurrentContext = scope.contextsEnum.SAVE; //We are only checking the save context right now.
	                var contextNamesArray = getNamesFromObject(ContextsEnum); //Convert for higher order functions.
	                var validationPropertiesArray = getNamesFromObject(ValidationPropertiesEnum); //Convert for higher order functions.
	                var validationObject = scope.propertyDisplay.object.validations.properties; //Get the scope validation object.
	                var errors = scope.propertyDisplay.errors;
	                var errorMessages = [];
	                var failFlag = 0;
	                /**
	                * Iterates over the validation object looking for the current elements validations, maps that to a validation function list
	                * and calls those validate functions. When a validation fails, an error is set, the elements border turns red.
	                */
	                function validate(name, context, elementValue) {
	                    var validationResults = {};
	                    validationResults = { "name": "name", "context": "context", "required": "required", "error": "none", "errorkey": "none" };
	                    for (var key in validationObject) {
	                        // Look for the current attribute in the
	                        // validation parameters.
	                        if (key === name || key === name + "Flag") {
	                            // Now that we have found the current
	                            // validation parameters, iterate
	                            // through them looking for
	                            // the required parameters that match
	                            // the current page context (save,
	                            // delete, etc.)
	                            for (var inner in validationObject[key]) {
	                                var required = validationObject[key][inner].required || "false"; // Get
	                                // the
	                                // required
	                                // value
	                                var context = validationObject[key][inner].contexts || "none"; // Get
	                                // the
	                                // element
	                                // context
	                                //Setup the validation results object to pass back to caller.
	                                validationResults = { "name": key, "context": context, "required": required, "error": "none", "errorkey": "none" };
	                                var elementValidationArr = map(checkHasValidationType, validationPropertiesArray, validationObject[key][inner]);
	                                //Iterate over the array and call the validate function if it has that property.
	                                for (var i = 0; i < elementValidationArr.length; i++) {
	                                    if (elementValidationArr[i] == true) {
	                                        if (validationPropertiesArray[i] === "regex" && elementValue !== "") {
	                                            //Get the regex string to match and send to validation function.
	                                            var re = validationObject[key][inner].regex;
	                                            var result = validate_RegExp(elementValue, re); //true if pattern match, fail otherwise.
	                                            if (result != true) {
	                                                errorMessages
	                                                    .push("Invalid input");
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["REGEX"].name;
	                                                validationResults.fail = true;
	                                            }
	                                            else {
	                                                errorMessages
	                                                    .push("Valid input");
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["REGEX"].name;
	                                                validationResults.fail = false;
	                                            }
	                                            return validationResults;
	                                        }
	                                        if (validationPropertiesArray[i] === "minValue") {
	                                            var validationMinValue = validationObject[key][inner].minValue;
	                                            $log.debug(validationMinValue);
	                                            var result = validate_MinValue(elementValue, validationMinValue);
	                                            $log.debug("e>v" + result + " :" + elementValue, ":" + validationMinValue);
	                                            if (result != true) {
	                                                errorMessages
	                                                    .push("Minimum value is: "
	                                                    + validationMinValue);
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_VALUE"].name;
	                                                validationResults.fail = true;
	                                            }
	                                            else {
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_VALUE"].name;
	                                                validationResults.fail = false;
	                                            }
	                                            return validationResults;
	                                        }
	                                        if (validationPropertiesArray[i] === "maxValue") {
	                                            var validationMaxValue = validationObject[key][inner].maxValue;
	                                            var result = validate_MaxValue(elementValue, validationMaxValue);
	                                            $log.debug("Max Value result is: " + result);
	                                            if (result != true) {
	                                                errorMessages
	                                                    .push("Maximum value is: "
	                                                    + validationMaxValue);
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MAX_VALUE"].name;
	                                                validationResults.fail = true;
	                                            }
	                                            return validationResults;
	                                        }
	                                        if (validationPropertiesArray[i] === "minLength") {
	                                            var validationMinLength = validationObject[key][inner].minLength;
	                                            var result = validate_MinLength(elementValue, validationMinLength);
	                                            $log.debug("Min Length result is: " + result);
	                                            if (result != true) {
	                                                errorMessages
	                                                    .push("Minimum length must be: "
	                                                    + validationMinLength);
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_LENGTH"].name;
	                                                validationResults.fail = true;
	                                            }
	                                            return validationResults;
	                                        }
	                                        if (validationPropertiesArray[i] === "maxLength") {
	                                            var validationMaxLength = validationObject[key][inner].maxLength;
	                                            var result = validate_MaxLength(elementValue, validationMaxLength);
	                                            $log.debug("Max Length result is: " + result);
	                                            if (result != true) {
	                                                errorMessages
	                                                    .push("Maximum length is: "
	                                                    + validationMaxLength);
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MAX_LENGTH"].name;
	                                                validationResults.fail = true;
	                                            }
	                                            return validationResults;
	                                        }
	                                        if (validationPropertiesArray[i] === "eq") {
	                                            var validationEq = validationObject[key][inner].eq;
	                                            var result = validate_Eq(elementValue, validationEq);
	                                            if (result != true) {
	                                                errorMessages
	                                                    .push("Must equal "
	                                                    + validationEq);
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["EQ"].name;
	                                                validationResults.fail = true;
	                                            }
	                                            return validationResults;
	                                        }
	                                        if (validationPropertiesArray[i] === "neq") {
	                                            var validationNeq = validationObject[key][inner].neq;
	                                            var result = validate_Neq(elementValue, validationNeq);
	                                            if (result != true) {
	                                                errorMessages
	                                                    .push("Must not equal: "
	                                                    + validationNeq);
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["NEQ"].name;
	                                                validationResults.fail = true;
	                                            }
	                                            return validationResults;
	                                        }
	                                        if (validationPropertiesArray[i] === "lte") {
	                                            var validationLte = validationObject[key][inner].lte;
	                                            var result = validate_Lte(elementValue, validationLte);
	                                            if (result != true) {
	                                                errorMessages
	                                                    .push("Must be less than "
	                                                    + validationLte);
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["LTE"].name;
	                                                validationResults.fail = true;
	                                            }
	                                            return validationResults;
	                                        }
	                                        if (validationPropertiesArray[i] === "gte") {
	                                            var validationGte = validationObject[key][inner].gte;
	                                            var result = validate_Gte(elementValue, validationGte);
	                                            if (result != true) {
	                                                errorMessages
	                                                    .push("Must be greater than: "
	                                                    + validationGte);
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["GTE"].name;
	                                                validationResults.fail = true;
	                                            }
	                                            return validationResults;
	                                        }
	                                        if (validationPropertiesArray[i] === "required") {
	                                            var validationRequire = validationObject[key][inner].require;
	                                            var result = validate_Required(elementValue, validationRequire);
	                                            if (result != true) {
	                                                errorMessages
	                                                    .push("Required");
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = ValidationPropertiesEnum["REQUIRED"].name;
	                                                validationResults.fail = true;
	                                            }
	                                            else {
	                                                errorMessages
	                                                    .push("Required");
	                                                validationResults.error = errorMessages[errorMessages.length - 1];
	                                                validationResults.errorkey = ValidationPropertiesEnum["REQUIRED"].name;
	                                                validationResults.fail = false;
	                                            }
	                                            return validationResults;
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    } //<---end validate.			
	                }
	                /**
	                * Function to map if we need a validation on this element.
	                */
	                function checkHasValidationType(validationProp, validationType) {
	                    if (validationProp[validationType] != undefined) {
	                        return true;
	                    }
	                    else {
	                        return false;
	                    }
	                }
	                /**
	                * Iterates over the properties object finding which types of validation are needed.
	                */
	                function map(func, array, obj) {
	                    var result = [];
	                    forEach(array, function (element) {
	                        result.push(func(obj, element));
	                    });
	                    return result;
	                }
	                /**
	                * Array iteration helper.
	                */
	                function forEach(array, action) {
	                    for (var i = 0; i < array.length; i++)
	                        action(array[i]);
	                }
	                /**
	                * Helper function to read all the names in our enums into an array that the higher order functions can use.
	                */
	                function getNamesFromObject(obj) {
	                    var result = [];
	                    for (var i in obj) {
	                        var name = obj[i].name || "stub";
	                        result.push(name);
	                    }
	                    return result;
	                }
	                /**
	                * Tests the value for a RegExp match given by the pattern string.
	                * Validates true if pattern match, false otherwise.
	                */
	                function validate_RegExp(value, pattern) {
	                    var regex = new RegExp(pattern);
	                    if (regex.test(value)) {
	                        return true;
	                    }
	                    return false;
	                }
	                /**
	                * Validates true if userValue >= minValue (inclusive)
	                */
	                function validate_MinValue(userValue, minValue) {
	                    return (userValue >= minValue);
	                }
	                /**
	                * Validates true if userValue <= maxValue (inclusive)
	                */
	                function validate_MaxValue(userValue, maxValue) {
	                    return (userValue <= maxValue) ? true : false;
	                }
	                /**
	                * Validates true if length of the userValue >= minLength (inclusive)
	                */
	                function validate_MinLength(userValue, minLength) {
	                    return (userValue.length >= minLength) ? true : false;
	                }
	                /**
	                * Validates true if length of the userValue <= maxLength (inclusive)
	                */
	                function validate_MaxLength(userValue, maxLength) {
	                    return (userValue.length <= maxLength) ? true : false;
	                }
	                /**
	                * Validates true if the userValue == eqValue
	                */
	                function validate_Eq(userValue, eqValue) {
	                    return (userValue == eqValue) ? true : false;
	                }
	                /**
	                * Validates true if the userValue != neqValue
	                */
	                function validate_Neq(userValue, neqValue) {
	                    return (userValue != neqValue) ? true : false;
	                }
	                /**
	                * Validates true if the userValue < decisionValue (exclusive)
	                */
	                function validate_Lte(userValue, decisionValue) {
	                    return (userValue < decisionValue) ? true : false;
	                }
	                /**
	                * Validates true if the userValue > decisionValue (exclusive)
	                */
	                function validate_Gte(userValue, decisionValue) {
	                    return (userValue > decisionValue) ? true : false;
	                }
	                /**
	                * Validates true if the userValue === property
	                */
	                function validate_EqProperty(userValue, property) {
	                    return (userValue === property) ? true : false;
	                }
	                /**
	                * Validates true if the given value is !NaN (Negate, Not a Number).
	                */
	                function validate_IsNumeric(value) {
	                    return !isNaN(value) ? true : false;
	                }
	                /**
	                * Validates true if the given userValue is empty and the field is required.
	                */
	                function validate_Required(property, userValue) {
	                    return (userValue == "" && property == true) ? true : false;
	                }
	                /**
	                * Handles the 'eager' validation on every key press.
	                */
	                ngModel.$parsers.unshift(function (value) {
	                    var name = elem.context.name; //Get the element name for the validate function.
	                    var currentValue = elem.val(); //Get the current element value to check validations against.
	                    var val = validate(name, myCurrentContext, currentValue) || {};
	                    //Check if field is required.				
	                    $log.debug(scope);
	                    $log.debug(val);
	                    ngModel.$setValidity(val.errorkey, !val.fail);
	                    return true;
	                }); //<---end $parsers
	                /**
	                * This handles 'lazy' validation on blur.
	                */
	                elem.bind('blur', function (e) {
	                });
	            }
	        };
	    }
	    SWValidate.Factory = function () {
	        var directive = function ($log, $hibachi) { return new SWValidate($log, $hibachi); };
	        directive.$inject = ['$log', '$hibachi'];
	        return directive;
	    };
	    return SWValidate;
	}());
	exports.SWValidate = SWValidate;


/***/ }),
/* 499 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationMinLength = (function () {
	    function SWValidationMinLength($log, validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationminlength =
	                    function (modelValue, viewValue) {
	                        var length = 0;
	                        if (viewValue && viewValue.length) {
	                            length = viewValue.length;
	                        }
	                        return validationService.validateMinLength(length || 0, attributes.swvalidationminlength);
	                    };
	            }
	        };
	    }
	    SWValidationMinLength.Factory = function () {
	        var directive = function ($log, validationService) { return new SWValidationMinLength($log, validationService); };
	        directive.$inject = ['$log', 'validationService'];
	        return directive;
	    };
	    return SWValidationMinLength;
	}());
	exports.SWValidationMinLength = SWValidationMinLength;


/***/ }),
/* 500 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationDataType = (function () {
	    //@ngInject
	    function SWValidationDataType(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                var isValidFunction = function (modelValue) {
	                    return validationService.validateDataType(modelValue, attributes.swvalidationdatatype);
	                };
	                ngModel.$validators.swvalidationdatatype = isValidFunction;
	                ngModel.$validators['swvalidation' + attributes.swvalidationdatatype] = isValidFunction;
	            }
	        };
	    }
	    SWValidationDataType.Factory = function () {
	        var directive = function (validationService) { return new SWValidationDataType(validationService); };
	        directive.$inject = ['validationService'];
	        return directive;
	    };
	    return SWValidationDataType;
	}());
	exports.SWValidationDataType = SWValidationDataType;


/***/ }),
/* 501 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationEq = (function () {
	    //@ngInject
	    function SWValidationEq(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationeq =
	                    function (modelValue, viewValue) {
	                        return validationService.validateEq(modelValue, attributes.swvalidationeq);
	                    }; //<--end function
	            } //<--end link
	        };
	    }
	    SWValidationEq.Factory = function () {
	        var directive = function (validationService) { return new SWValidationEq(validationService); };
	        directive.$inject = [
	            'validationService'
	        ];
	        return directive;
	    };
	    return SWValidationEq;
	}());
	exports.SWValidationEq = SWValidationEq;


/***/ }),
/* 502 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationGte = (function () {
	    function SWValidationGte(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationGte =
	                    function (modelValue, viewValue) {
	                        return validationService.validateGte(modelValue, attributes.swvalidationGte);
	                    }; //<--end function
	            } //<--end link
	        };
	    }
	    SWValidationGte.Factory = function () {
	        var directive = function (validationService) { return new SWValidationGte(validationService); };
	        directive.$inject = ['validationService'];
	        return directive;
	    };
	    return SWValidationGte;
	}());
	exports.SWValidationGte = SWValidationGte;


/***/ }),
/* 503 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationLte = (function () {
	    function SWValidationLte(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationlte =
	                    function (modelValue, viewValue) {
	                        return validationService.validateLte(modelValue, attributes.swvalidationlte);
	                    };
	            }
	        };
	    }
	    SWValidationLte.Factory = function () {
	        var directive = function (validationService) { return new SWValidationLte(validationService); };
	        directive.$inject = ['validationService'];
	        return directive;
	    };
	    return SWValidationLte;
	}());
	exports.SWValidationLte = SWValidationLte;


/***/ }),
/* 504 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationMaxLength = (function () {
	    function SWValidationMaxLength(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationmaxlength =
	                    function (modelValue, viewValue) {
	                        var length = 0;
	                        if (viewValue && viewValue.length) {
	                            length = viewValue.length;
	                        }
	                        return validationService.validateMaxLength(length || 0, attributes.swvalidationmaxlength);
	                    };
	            }
	        };
	    }
	    SWValidationMaxLength.Factory = function () {
	        var directive = function (validationService) { return new SWValidationMaxLength(validationService); };
	        directive.$inject = ['validationService'];
	        return directive;
	    };
	    return SWValidationMaxLength;
	}());
	exports.SWValidationMaxLength = SWValidationMaxLength;


/***/ }),
/* 505 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationMaxValue = (function () {
	    function SWValidationMaxValue(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationmaxvalue =
	                    function (modelValue, viewValue) {
	                        if (viewValue == null) {
	                            return true;
	                        }
	                        validationService.validateMaxValue(viewValue, attributes.swvalidationmaxvalue);
	                    };
	            }
	        };
	    }
	    SWValidationMaxValue.Factory = function () {
	        var directive = function (validationService) { return new SWValidationMaxValue(validationService); };
	        directive.$inject = ['validationService'];
	        return directive;
	    };
	    return SWValidationMaxValue;
	}());
	exports.SWValidationMaxValue = SWValidationMaxValue;


/***/ }),
/* 506 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationMinValue = (function () {
	    function SWValidationMinValue(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationminvalue =
	                    function (modelValue, viewValue) {
	                        if (viewValue == null) {
	                            return true;
	                        }
	                        return validationService.validateMinValue(viewValue, attributes.swvalidationminvalue);
	                    };
	            }
	        };
	    }
	    SWValidationMinValue.Factory = function () {
	        var directive = function (validationService) { return new SWValidationMinValue(validationService); };
	        directive.$inject = ['validationService'];
	        return directive;
	    };
	    return SWValidationMinValue;
	}());
	exports.SWValidationMinValue = SWValidationMinValue;


/***/ }),
/* 507 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationNeq = (function () {
	    function SWValidationNeq(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationneq =
	                    function (modelValue) {
	                        return validationService.validateNeq(modelValue, attributes.swvalidationneq);
	                    };
	            }
	        };
	    }
	    SWValidationNeq.Factory = function () {
	        var directive = function (validationService) { return new SWValidationNeq(validationService); };
	        directive.$inject = ['validationService'];
	        return directive;
	    };
	    return SWValidationNeq;
	}());
	exports.SWValidationNeq = SWValidationNeq;


/***/ }),
/* 508 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationNumeric = (function () {
	    function SWValidationNumeric(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationnumeric =
	                    function (modelValue, viewValue) {
	                        return validationService.validateNumeric(viewValue);
	                    };
	            }
	        };
	    }
	    SWValidationNumeric.Factory = function () {
	        var directive = function (validationService) { return new SWValidationNumeric(validationService); };
	        directive.$inject = ['validationService'];
	        return directive;
	    };
	    return SWValidationNumeric;
	}());
	exports.SWValidationNumeric = SWValidationNumeric;


/***/ }),
/* 509 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationRegex = (function () {
	    function SWValidationRegex(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationregex =
	                    function (modelValue) {
	                        //Returns true if this user value (model value) does match the pattern
	                        return validationService.validateRegex(modelValue, attributes.swvalidationregex);
	                    };
	            }
	        };
	    }
	    SWValidationRegex.Factory = function () {
	        var directive = function (validationService) { return new SWValidationRegex(validationService); };
	        directive.$inject = ['validationService'];
	        return directive;
	    };
	    return SWValidationRegex;
	}());
	exports.SWValidationRegex = SWValidationRegex;


/***/ }),
/* 510 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationRequired = (function () {
	    //@ngInject
	    function SWValidationRequired(validationService) {
	        return {
	            restrict: "A",
	            require: "^ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$validators.swvalidationrequired =
	                    function (modelValue, viewValue) {
	                        var value = modelValue || viewValue;
	                        if (attributes.swvalidationrequired === "true") {
	                            return validationService.validateRequired(value);
	                        }
	                        else {
	                            return true;
	                        }
	                    };
	            }
	        };
	    }
	    SWValidationRequired.Factory = function () {
	        var directive = function (validationService) { return new SWValidationRequired(validationService); };
	        directive.$inject = ['validationService'];
	        return directive;
	    };
	    return SWValidationRequired;
	}());
	exports.SWValidationRequired = SWValidationRequired;


/***/ }),
/* 511 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationUnique = (function () {
	    //@ngInject
	    function SWValidationUnique($http, $q, $hibachi, $log, validationService) {
	        return {
	            restrict: "A",
	            require: ["ngModel", "^?swFormField"],
	            link: function (scope, element, attributes, controllers) {
	                var ngModel = controllers[0];
	                ngModel.$asyncValidators.swvalidationunique = function (modelValue, viewValue) {
	                    var currentValue = modelValue || viewValue;
	                    var property = controllers[1].property;
	                    return validationService.validateUnique(currentValue, controllers[1].object, property);
	                };
	            }
	        };
	    }
	    SWValidationUnique.Factory = function () {
	        var directive = function ($http, $q, $hibachi, $log, validationService) { return new SWValidationUnique($http, $q, $hibachi, $log, validationService); };
	        directive.$inject = ['$http', '$q', '$hibachi', '$log', 'validationService'];
	        return directive;
	    };
	    return SWValidationUnique;
	}());
	exports.SWValidationUnique = SWValidationUnique;


/***/ }),
/* 512 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWValidationUniqueOrNull = (function () {
	    //@ngInject
	    function SWValidationUniqueOrNull($http, $q, $hibachi, $log, validationService) {
	        return {
	            restrict: "A",
	            require: "ngModel",
	            link: function (scope, element, attributes, ngModel) {
	                ngModel.$asyncValidators.swvalidationuniqueornull = function (modelValue, viewValue) {
	                    var currentValue = modelValue || viewValue;
	                    var property = scope.propertyDisplay.property;
	                    return validationService.validateUniqueOrNull(currentValue, scope.propertyDisplay.object, property);
	                };
	            }
	        };
	    }
	    SWValidationUniqueOrNull.Factory = function () {
	        var directive = function ($http, $q, $hibachi, $log, validationService) { return new SWValidationUniqueOrNull($http, $q, $hibachi, $log, validationService); };
	        directive.$inject = ['$http', '$q', '$hibachi', '$log', 'validationService'];
	        return directive;
	    };
	    return SWValidationUniqueOrNull;
	}());
	exports.SWValidationUniqueOrNull = SWValidationUniqueOrNull;


/***/ }),
/* 513 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/*services return promises which can be handled uniquely based on success or failure by the controller*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var ValidationService = (function () {
	    //@ngInject
	    function ValidationService($hibachi, $q) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.$q = $q;
	        this.MY_EMAIL_REGEXP = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	        this.validateUnique = function (value, object, property) {
	            var deferred = _this.$q.defer();
	            //First time the asyncValidators function is loaded the
	            //key won't be set  so ensure that we have
	            //key and propertyName before checking with the server
	            if (object && property) {
	                _this.$hibachi.checkUniqueValue(object, property, value)
	                    .then(function (unique) {
	                    if (unique) {
	                        deferred.resolve(); //It's unique
	                    }
	                    else {
	                        deferred.reject(); //Add unique to $errors
	                    }
	                });
	            }
	            else {
	                deferred.resolve(); //Ensure promise is resolved if we hit this
	            }
	            return deferred.promise;
	        };
	        this.validateUniqueOrNull = function (value, object, property) {
	            var deferred = _this.$q.defer();
	            //First time the asyncValidators function is loaded the
	            //key won't be set  so ensure that we have
	            //key and propertyName before checking with the server
	            if (object && property) {
	                _this.$hibachi.checkUniqueOrNullValue(object, property, value)
	                    .then(function (unique) {
	                    if (unique) {
	                        deferred.resolve(); //It's unique
	                    }
	                    else {
	                        deferred.reject(); //Add unique to $errors
	                    }
	                });
	            }
	            else {
	                deferred.resolve(); //Ensure promise is resolved if we hit this
	            }
	            return deferred.promise;
	        };
	        this.validateEmail = function (value) {
	            return _this.validateDataType(value, 'email');
	        };
	        this.validateDataType = function (value, type) {
	            if (value == null) {
	                return true;
	            } //let required validate this
	            if (angular.isString(value) && type === "string") {
	                return true;
	            }
	            if (angular.isNumber(parseInt(value)) && type === "numeric") {
	                return true;
	            }
	            if (angular.isArray(value) && type === "array") {
	                return true;
	            }
	            if (angular.isDate(value) && type === "date") {
	                return true;
	            }
	            if (angular.isObject(value) && type === "object") {
	                return true;
	            }
	            if (type === 'email') {
	                return _this.MY_EMAIL_REGEXP.test(value);
	            }
	            if (angular.isUndefined(value && type === "undefined")) {
	                return true;
	            }
	            return false;
	        };
	        this.validateEq = function (value, expectedValue) {
	            return (value === expectedValue);
	        };
	        this.validateNeq = function (value, expectedValue) {
	            return (value !== expectedValue);
	        };
	        this.validateGte = function (value, comparisonValue) {
	            if (comparisonValue === void 0) { comparisonValue = 0; }
	            if (angular.isString(value)) {
	                value = parseInt(value);
	            }
	            if (angular.isString(comparisonValue)) {
	                comparisonValue = parseInt(comparisonValue);
	            }
	            return (value >= comparisonValue);
	        };
	        this.validateLte = function (value, comparisonValue) {
	            if (comparisonValue === void 0) { comparisonValue = 0; }
	            if (angular.isString(value)) {
	                value = parseInt(value);
	            }
	            if (angular.isString(comparisonValue)) {
	                comparisonValue = parseInt(comparisonValue);
	            }
	            return (value <= comparisonValue);
	        };
	        this.validateMaxLength = function (value, comparisonValue) {
	            if (comparisonValue === void 0) { comparisonValue = 0; }
	            return _this.validateLte(value, comparisonValue);
	        };
	        this.validateMaxValue = function (value, comparisonValue) {
	            if (comparisonValue === void 0) { comparisonValue = 0; }
	            return _this.validateLte(value, comparisonValue);
	        };
	        this.validateMinLength = function (value, comparisonValue) {
	            if (comparisonValue === void 0) { comparisonValue = 0; }
	            return _this.validateGte(value, comparisonValue);
	        };
	        this.validateMinValue = function (value, comparisonValue) {
	            if (comparisonValue === void 0) { comparisonValue = 0; }
	            return _this.validateGte(value, comparisonValue);
	        };
	        this.validateNumeric = function (value) {
	            return !isNaN(value);
	        };
	        this.validateRegex = function (value, pattern) {
	            var regex = new RegExp(pattern);
	            return regex.test(value);
	        };
	        this.validateRequired = function (value) {
	            if (value) {
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        this.$hibachi = $hibachi;
	        this.$q = $q;
	    }
	    return ValidationService;
	}());
	exports.ValidationService = ValidationService;


/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//services
	var workflowconditionservice_1 = __webpack_require__(515);
	var scheduleservice_1 = __webpack_require__(516);
	//directives
	var swadmincreatesuperuser_1 = __webpack_require__(517);
	var swworkflowbasic_1 = __webpack_require__(518);
	var swworkflowcondition_1 = __webpack_require__(519);
	var swworkflowconditiongroupitem_1 = __webpack_require__(520);
	var swworkflowconditiongroups_1 = __webpack_require__(521);
	var swworkflowtask_1 = __webpack_require__(522);
	var swworkflowtaskactions_1 = __webpack_require__(523);
	var swworkflowtasks_1 = __webpack_require__(524);
	var swworkflowtrigger_1 = __webpack_require__(525);
	var swworkflowtriggers_1 = __webpack_require__(526);
	var swworkflowtriggerhistory_1 = __webpack_require__(527);
	var swschedulepreview_1 = __webpack_require__(528);
	//filters
	var workflowmodule = angular.module('hibachi.workflow', ['hibachi.collection']).config(function () {
	})
	    .constant('workflowPartialsPath', 'workflow/components/')
	    .service('workflowConditionService', workflowconditionservice_1.WorkflowConditionService)
	    .service('scheduleService', scheduleservice_1.ScheduleService)
	    .directive('swAdminCreateSuperUser', swadmincreatesuperuser_1.SWAdminCreateSuperUser.Factory())
	    .directive('swWorkflowBasic', swworkflowbasic_1.SWWorkflowBasic.Factory())
	    .directive('swWorkflowCondition', swworkflowcondition_1.SWWorkflowCondition.Factory())
	    .directive('swWorkflowConditionGroupItem', swworkflowconditiongroupitem_1.SWWorkflowConditionGroupItem.Factory())
	    .directive('swWorkflowConditionGroups', swworkflowconditiongroups_1.SWWorkflowConditionGroups.Factory())
	    .directive('swWorkflowTask', swworkflowtask_1.SWWorkflowTask.Factory())
	    .directive('swWorkflowTaskActions', swworkflowtaskactions_1.SWWorkflowTaskActions.Factory())
	    .directive('swWorkflowTasks', swworkflowtasks_1.SWWorkflowTasks.Factory())
	    .directive('swWorkflowTrigger', swworkflowtrigger_1.SWWorkflowTrigger.Factory())
	    .directive('swWorkflowTriggers', swworkflowtriggers_1.SWWorkflowTriggers.Factory())
	    .directive('swWorkflowTriggerHistory', swworkflowtriggerhistory_1.SWWorkflowTriggerHistory.Factory())
	    .directive('swSchedulePreview', swschedulepreview_1.SWSchedulePreview.Factory());
	exports.workflowmodule = workflowmodule;


/***/ }),
/* 515 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var WorkflowCondition = (function () {
	    function WorkflowCondition() {
	        this.propertyIdentifer = "";
	        this.comparisonOperator = "";
	        this.value = "";
	        this.displayPropertyIdentifier = "";
	        this.$$disabled = false;
	        this.$$isClosed = true;
	        this.$$isNew = true;
	    }
	    return WorkflowCondition;
	}());
	exports.WorkflowCondition = WorkflowCondition;
	var WorkflowConditionGroupItem = (function () {
	    function WorkflowConditionGroupItem() {
	        this.workflowConditionGroup = [];
	    }
	    return WorkflowConditionGroupItem;
	}());
	exports.WorkflowConditionGroupItem = WorkflowConditionGroupItem;
	var WorkflowConditionService = (function () {
	    function WorkflowConditionService($log, $hibachi, alertService) {
	        var _this = this;
	        this.$log = $log;
	        this.newWorkflowCondition = function () {
	            return new WorkflowCondition;
	        };
	        this.addWorkflowCondition = function (groupItem, condition) {
	            _this.$log.debug('addWorkflowCondition');
	            _this.$log.debug(groupItem);
	            _this.$log.debug(condition);
	            if (groupItem.length >= 1) {
	                condition.logicalOperator = 'AND';
	            }
	            groupItem.push(condition);
	        };
	        this.newWorkflowConditionGroupItem = function () {
	            return new WorkflowConditionGroupItem;
	        };
	        this.addWorkflowConditionGroupItem = function (group, groupItem) {
	            group.push(groupItem);
	        };
	    }
	    return WorkflowConditionService;
	}());
	WorkflowConditionService.$inject = ["$log", "$hibachi", "alertService"];
	exports.WorkflowConditionService = WorkflowConditionService;


/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var baseentityservice_1 = __webpack_require__(281);
	var ScheduleService = (function (_super) {
	    __extends(ScheduleService, _super);
	    //@ngInject
	    function ScheduleService($injector, $hibachi, utilityService) {
	        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Schedule') || this;
	        _this.$injector = $injector;
	        _this.$hibachi = $hibachi;
	        _this.utilityService = utilityService;
	        _this.schedulePreview = {};
	        _this.clearSchedulePreview = function () {
	            _this.schedulePreview = {};
	        };
	        _this.addSchedulePreviewItem = function (cdate, longMonthName) {
	            if (longMonthName === void 0) { longMonthName = true; }
	            var weekday = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
	            var month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	            var monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
	            var currentDate = (cdate.getMonth() + 1) + '-' + cdate.getDate() + '-' + cdate.getFullYear();
	            if (_this.schedulePreview[currentDate] === undefined) {
	                _this.schedulePreview[currentDate] = {
	                    day: cdate.getDate(),
	                    month: (longMonthName) ? month[cdate.getMonth() + 1] : monthShort[cdate.getMonth() + 1],
	                    year: cdate.getFullYear(),
	                    weekday: weekday[cdate.getDay()],
	                    times: []
	                };
	            }
	            _this.schedulePreview[currentDate].times.push(cdate.toLocaleTimeString());
	        };
	        _this.buildSchedulePreview = function (scheduleObject, totalOfPreviews) {
	            if (totalOfPreviews === void 0) { totalOfPreviews = 10; }
	            _this.clearSchedulePreview();
	            var startTime = new Date(Date.parse(scheduleObject.frequencyStartTime));
	            var endTime = (scheduleObject.frequencyEndTime.trim()) ? new Date(Date.parse(scheduleObject.frequencyEndTime)) : false;
	            var now = new Date();
	            var startPoint = new Date();
	            startPoint.setHours(startTime.getHours());
	            startPoint.setMinutes(startTime.getMinutes());
	            startPoint.setSeconds(startTime.getSeconds());
	            var daysToRun = [];
	            if (scheduleObject.recuringType == 'weekly') {
	                daysToRun = scheduleObject.daysOfWeekToRun.toString().split(',');
	                if (!daysToRun.length || scheduleObject.daysOfWeekToRun.toString().trim() == '') {
	                    return _this.schedulePreview;
	                }
	            }
	            if (scheduleObject.recuringType == 'monthly') {
	                daysToRun = scheduleObject.daysOfMonthToRun.toString().split(',');
	                if (!daysToRun.length || !scheduleObject.daysOfWeekToRun || scheduleObject.daysOfWeekToRun.toString().trim() == '') {
	                    return _this.schedulePreview;
	                }
	            }
	            var datesAdded = 0;
	            for (var i = 0;; i++) {
	                if (datesAdded >= totalOfPreviews || i >= 500)
	                    break;
	                var timeToadd = (scheduleObject.frequencyInterval && scheduleObject.frequencyInterval.toString().trim()) ? (scheduleObject.frequencyInterval * i) * 60000 : i * 24 * 60 * 60 * 1000;
	                var currentDatetime = new Date(startPoint.getTime() + timeToadd);
	                if (currentDatetime < now)
	                    continue;
	                if (scheduleObject.recuringType == 'weekly') {
	                    if (daysToRun.indexOf((currentDatetime.getDay() + 1).toString()) == -1)
	                        continue;
	                }
	                else if (scheduleObject.recuringType == 'monthly') {
	                    if (daysToRun.indexOf(currentDatetime.getDate().toString()) == -1)
	                        continue;
	                }
	                if (!endTime) {
	                    _this.addSchedulePreviewItem(currentDatetime);
	                    datesAdded++;
	                }
	                else {
	                    if (_this.utilityService.minutesOfDay(startTime) <= _this.utilityService.minutesOfDay(currentDatetime)
	                        && _this.utilityService.minutesOfDay(endTime) >= _this.utilityService.minutesOfDay(currentDatetime)) {
	                        _this.addSchedulePreviewItem(currentDatetime);
	                        datesAdded++;
	                    }
	                }
	            }
	            return _this.schedulePreview;
	        };
	        return _this;
	    }
	    return ScheduleService;
	}(baseentityservice_1.BaseEntityService));
	exports.ScheduleService = ScheduleService;


/***/ }),
/* 517 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWAdminCreateSuperUser = (function () {
	    function SWAdminCreateSuperUser($log, $hibachi, workflowPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            scope: {},
	            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "admincreatesuperuser.html",
	            link: function (scope, element, attrs) {
	                scope.Account_SetupInitialAdmin = $hibachi.newAccount_SetupInitialAdmin();
	            }
	        };
	    }
	    SWAdminCreateSuperUser.Factory = function () {
	        var directive = function ($log, $hibachi, workflowPartialsPath, hibachiPathBuilder) { return new SWAdminCreateSuperUser($log, $hibachi, workflowPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            'workflowPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWAdminCreateSuperUser;
	}());
	exports.SWAdminCreateSuperUser = SWAdminCreateSuperUser;


/***/ }),
/* 518 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWWorkflowBasic = (function () {
	    function SWWorkflowBasic($log, $location, $hibachi, formService, workflowPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'A',
	            scope: {
	                workflow: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowbasic.html",
	            link: function (scope, element, attrs) {
	            }
	        };
	    }
	    SWWorkflowBasic.Factory = function () {
	        var directive = function ($log, $location, $hibachi, formService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowBasic($log, $location, $hibachi, formService, workflowPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$location',
	            '$hibachi',
	            'formService',
	            'workflowPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWWorkflowBasic;
	}());
	exports.SWWorkflowBasic = SWWorkflowBasic;


/***/ }),
/* 519 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWWorkflowCondition = (function () {
	    function SWWorkflowCondition($log, $location, $hibachi, formService, metadataService, workflowPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            scope: {
	                workflowCondition: "=",
	                workflowConditionIndex: "=",
	                workflow: "=",
	                filterPropertiesList: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowcondition.html",
	            link: function (scope, element, attrs) {
	                $log.debug('workflowCondition init');
	                $log.debug(scope);
	                scope.selectBreadCrumb = function (breadCrumbIndex) {
	                    //splice out array items above index
	                    var removeCount = scope.filterItem.breadCrumbs.length - 1 - breadCrumbIndex;
	                    scope.filterItem.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);
	                    scope.selectedFilterPropertyChanged(null);
	                };
	                scope.selectedFilterPropertyChanged = function (selectedFilterProperty) {
	                    $log.debug('selectedFilterProperty');
	                    $log.debug(selectedFilterProperty);
	                    scope.selectedFilterProperty = selectedFilterProperty;
	                };
	                if (angular.isUndefined(scope.workflowCondition.breadCrumbs)) {
	                    scope.workflowCondition.breadCrumbs = [];
	                    if (scope.workflowCondition.propertyIdentifier === "") {
	                        scope.workflowCondition.breadCrumbs = [
	                            {
	                                entityAlias: scope.workflow.data.workflowObject,
	                                cfc: scope.workflow.data.workflowObject,
	                                propertyIdentifier: scope.workflow.data.workflowObject
	                            }
	                        ];
	                    }
	                    else {
	                        var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
	                        entityAliasArrayFromString.pop();
	                        for (var i in entityAliasArrayFromString) {
	                            var breadCrumb = {
	                                entityAlias: entityAliasArrayFromString[i],
	                                cfc: entityAliasArrayFromString[i],
	                                propertyIdentifier: entityAliasArrayFromString[i]
	                            };
	                            scope.workflowCondition.breadCrumbs.push(breadCrumb);
	                        }
	                    }
	                }
	                else {
	                    angular.forEach(scope.workflowCondition.breadCrumbs, function (breadCrumb, key) {
	                        if (angular.isUndefined(scope.filterPropertiesList[breadCrumb.propertyIdentifier])) {
	                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(breadCrumb.cfc, true);
	                            filterPropertiesPromise.then(function (value) {
	                                metadataService.setPropertiesList(value, breadCrumb.propertyIdentifier);
	                                scope.filterPropertiesList[breadCrumb.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(breadCrumb.propertyIdentifier);
	                                metadataService.formatPropertiesList(scope.filterPropertiesList[breadCrumb.propertyIdentifier], breadCrumb.propertyIdentifier);
	                                var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
	                                entityAliasArrayFromString.pop();
	                                entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
	                                if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
	                                    for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
	                                        var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
	                                        if (filterProperty.propertyIdentifier === scope.workflowCondition.propertyIdentifier) {
	                                            //selectItem from drop down
	                                            scope.selectedFilterProperty = filterProperty;
	                                            //decorate with value and comparison Operator so we can use it in the Condition section
	                                            scope.selectedFilterProperty.value = scope.workflowCondition.value;
	                                            scope.selectedFilterProperty.comparisonOperator = scope.workflowCondition.comparisonOperator;
	                                        }
	                                    }
	                                }
	                            });
	                        }
	                        else {
	                            var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');
	                            entityAliasArrayFromString.pop();
	                            entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();
	                            if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {
	                                for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {
	                                    var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];
	                                    if (filterProperty.propertyIdentifier === scope.workflowCondition.propertyIdentifier) {
	                                        //selectItem from drop down
	                                        scope.selectedFilterProperty = filterProperty;
	                                        //decorate with value and comparison Operator so we can use it in the Condition section
	                                        scope.selectedFilterProperty.value = scope.workflowCondition.value;
	                                        scope.selectedFilterProperty.comparisonOperator = scope.workflowCondition.comparisonOperator;
	                                    }
	                                }
	                            }
	                        }
	                    });
	                }
	            }
	        };
	    }
	    SWWorkflowCondition.Factory = function () {
	        var directive = function ($log, $location, $hibachi, formService, metadataService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowCondition($log, $location, $hibachi, formService, metadataService, workflowPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$location',
	            '$hibachi',
	            'formService',
	            'metadataService',
	            'workflowPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWWorkflowCondition;
	}());
	exports.SWWorkflowCondition = SWWorkflowCondition;


/***/ }),
/* 520 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWWorkflowConditionGroupItem = (function () {
	    function SWWorkflowConditionGroupItem($log, $location, $hibachi, formService, workflowPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowconditiongroupitem.html",
	            link: function (scope, element, attrs) {
	            }
	        };
	    }
	    SWWorkflowConditionGroupItem.Factory = function () {
	        var directive = function ($log, $location, $hibachi, formService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowConditionGroupItem($log, $location, $hibachi, formService, workflowPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$location',
	            '$hibachi',
	            'formService',
	            'workflowPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWWorkflowConditionGroupItem;
	}());
	exports.SWWorkflowConditionGroupItem = SWWorkflowConditionGroupItem;


/***/ }),
/* 521 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWWorkflowConditionGroups = (function () {
	    function SWWorkflowConditionGroups($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            scope: {
	                workflowConditionGroupItem: "=",
	                workflowConditionGroup: "=",
	                workflow: "=",
	                filterPropertiesList: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowconditiongroups.html",
	            link: function (scope, element, attrs) {
	                $log.debug('workflowconditiongroups init');
	                scope.addWorkflowCondition = function () {
	                    $log.debug('addWorkflowCondition');
	                    var workflowCondition = workflowConditionService.newWorkflowCondition();
	                    workflowConditionService.addWorkflowCondition(scope.workflowConditionGroupItem, workflowCondition);
	                };
	                scope.addWorkflowGroupItem = function () {
	                    $log.debug('addWorkflowGrouptItem');
	                    var workflowConditionGroupItem = workflowConditionService.newWorkflowConditionGroupItem();
	                    workflowConditionService.addWorkflowConditionGroupItem(scope.workflowConditionItem, workflowConditionGroupItem);
	                };
	            }
	        };
	    }
	    SWWorkflowConditionGroups.Factory = function () {
	        var directive = function ($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowConditionGroups($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            'workflowConditionService',
	            'workflowPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWWorkflowConditionGroups;
	}());
	exports.SWWorkflowConditionGroups = SWWorkflowConditionGroups;


/***/ }),
/* 522 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWWorkflowTask = (function () {
	    function SWWorkflowTask($log, $location, $timeout, $hibachi, metadataService, collectionService, workflowPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'E',
	            scope: {
	                workflowTask: "=",
	                workflowTasks: "=",
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtask.html",
	            link: function (scope, element, attrs) {
	                scope.removeWorkflowTask = function (workflowTask) {
	                    var deletePromise = workflowTask.$$delete();
	                    deletePromise.then(function () {
	                        if (workflowTask === scope.workflowTasks.selectedTask) {
	                            delete scope.workflowTasks.selectedTask;
	                        }
	                        scope.workflowTasks.splice(workflowTask.$$index, 1);
	                        for (var i in scope.workflowTasks) {
	                            scope.workflowTasks[i].$$index = i;
	                        }
	                    });
	                };
	            }
	        };
	    }
	    SWWorkflowTask.Factory = function () {
	        var directive = function ($log, $location, $timeout, $hibachi, metadataService, collectionService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTask($log, $location, $timeout, $hibachi, metadataService, collectionService, workflowPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$location',
	            '$timeout',
	            '$hibachi',
	            'metadataService',
	            'collectionService',
	            'workflowPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWWorkflowTask;
	}());
	exports.SWWorkflowTask = SWWorkflowTask;


/***/ }),
/* 523 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWWorkflowTaskActionsController = (function () {
	    //@ngInject
	    function SWWorkflowTaskActionsController($scope, $log, $hibachi, metadataService, collectionService, workflowPartialsPath, hibachiPathBuilder, collectionConfigService, observerService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$log = $log;
	        this.$hibachi = $hibachi;
	        this.metadataService = metadataService;
	        this.collectionService = collectionService;
	        this.workflowPartialsPath = workflowPartialsPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.collectionConfigService = collectionConfigService;
	        this.observerService = observerService;
	        this.$log.debug('Workflow Task Actions Init');
	        this.$log.debug(this.workflowTask);
	        this.openActions = false;
	        this.observerService.attach(function (item) {
	            if (angular.isDefined(_this.emailTemplateCollectionConfig)) {
	                _this.emailTemplateCollectionConfig.clearFilters();
	                _this.emailTemplateCollectionConfig.addFilter("emailTemplateObject", item.value);
	            }
	            if (angular.isDefined(_this.printTemplateCollectionConfig)) {
	                _this.printTemplateCollectionConfig.clearFilters();
	                _this.printTemplateCollectionConfig.addFilter("printTemplateObject", item.value);
	            }
	        }, 'WorkflowWorkflowObjectOnChange');
	        /**
	         * Returns the correct object based on the selected object type.
	         */
	        var getObjectByActionType = function (workflowTaskAction) {
	            if (workflowTaskAction.data.actionType === 'email') {
	                workflowTaskAction.$$getEmailTemplate();
	            }
	            else if (workflowTaskAction.data.actionType === 'print') {
	                workflowTaskAction.$$getPrintTemplate();
	            }
	        };
	        /**
	         * --------------------------------------------------------------------------------------------------------
	         * Returns workflow task action, and saves them to the scope variable workflowtaskactions
	         * --------------------------------------------------------------------------------------------------------
	         */
	        this.getWorkflowTaskActions = function () {
	            /***
	             Note:
	             This conditional is checking whether or not we need to be retrieving to
	             items all over again. If we already have them, we won't make another
	             trip to the database.

	             ***/
	            if (angular.isUndefined(_this.workflowTask.data.workflowTaskActions)) {
	                var workflowTaskPromise = _this.workflowTask.$$getWorkflowTaskActions();
	                workflowTaskPromise.then(function () {
	                    _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
	                    angular.forEach(_this.workflowTaskActions, function (workflowTaskAction) {
	                        getObjectByActionType(workflowTaskAction);
	                    });
	                    _this.$log.debug(_this.workflowTaskActions);
	                });
	            }
	            else {
	                _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
	            }
	            if (angular.isUndefined(_this.workflowTask.data.workflowTaskActions)) {
	                _this.workflowTask.data.workflowTaskActions = [];
	                _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;
	            }
	        };
	        this.getWorkflowTaskActions(); //Call get
	        /**
	         * --------------------------------------------------------------------------------------------------------
	         * Saves the workflow task actions by calling the objects $$save method.
	         * @param taskAction
	         * --------------------------------------------------------------------------------------------------------
	         */
	        this.saveWorkflowTaskAction = function (taskAction, context) {
	            _this.$log.debug("Context: " + context);
	            _this.$log.debug("saving task action and parent task");
	            _this.$log.debug(taskAction);
	            var savePromise = _this.workflowTaskActions.selectedTaskAction.$$save();
	            savePromise.then(function () {
	                var taSavePromise = taskAction.$$save;
	                //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished
	                if (context == 'add') {
	                    _this.$log.debug("Save and New");
	                    _this.addWorkflowTaskAction(taskAction);
	                    _this.finished = false;
	                }
	                else if (context == "finish") {
	                    _this.finished = true;
	                }
	            }, function (err) {
	                angular.element('a[href="/##j-basic-2"]').click();
	                console.warn(err);
	            });
	        }; //<--end save
	        /**
	         * Sets the editing state to show/hide the edit screen.
	         */
	        this.setHidden = function (task) {
	            if (!angular.isObject(task)) {
	                task = {};
	            }
	            if (angular.isUndefined(task.hidden)) {
	                task.hidden = false;
	            }
	            else {
	                _this.$log.debug("setHidden()", "Setting Hide Value To " + !task.hidden);
	                task.hidden = !task.hidden;
	            }
	        };
	        /**
	         * --------------------------------------------------------------------------------------------------------
	         * Adds workflow action items by calling the workflowTask objects $$addWorkflowTaskAction() method
	         * and sets the result to scope.
	         * @param taskAction
	         * --------------------------------------------------------------------------------------------------------
	         */
	        this.addWorkflowTaskAction = function (taskAction) {
	            var workflowTaskAction = _this.workflowTask.$$addWorkflowTaskAction();
	            _this.selectWorkflowTaskAction(workflowTaskAction);
	            _this.$log.debug(_this.workflow);
	        };
	        /**
	         * --------------------------------------------------------------------------------------------------------
	         * Selects a new task action and populates the task action properties.
	         * --------------------------------------------------------------------------------------------------------
	         */
	        this.selectWorkflowTaskAction = function (workflowTaskAction) {
	            _this.$log.debug("Selecting new task action for editing: ");
	            _this.$log.debug(workflowTaskAction);
	            _this.finished = false;
	            _this.workflowTaskActions.selectedTaskAction = undefined;
	            var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName(_this.workflowTask.data.workflow.data.workflowObject, true);
	            filterPropertiesPromise.then(function (value) {
	                _this.filterPropertiesList = {
	                    baseEntityName: _this.workflowTask.data.workflow.data.workflowObject,
	                    baseEntityAlias: "_" + _this.workflowTask.data.workflow.data.workflowObject
	                };
	                _this.metadataService.setPropertiesList(value, _this.workflowTask.data.workflow.data.workflowObject);
	                _this.filterPropertiesList[_this.workflowTask.data.workflow.data.workflowObject] = _this.metadataService.getPropertiesListByBaseEntityAlias(_this.workflowTask.data.workflow.data.workflowObject);
	                _this.metadataService.formatPropertiesList(_this.filterPropertiesList[_this.workflowTask.data.workflow.data.workflowObject], _this.workflowTask.data.workflow.data.workflowObject);
	                _this.workflowTaskActions.selectedTaskAction = workflowTaskAction;
	                _this.emailTemplateSelected = (_this.workflowTaskActions.selectedTaskAction.data.emailTemplate) ? _this.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateName : '';
	                _this.emailTemplateCollectionConfig = _this.collectionConfigService.newCollectionConfig("EmailTemplate");
	                _this.emailTemplateCollectionConfig.setDisplayProperties("emailTemplateID,emailTemplateName");
	                _this.emailTemplateCollectionConfig.addFilter("emailTemplateObject", _this.workflowTask.data.workflow.data.workflowObject);
	                _this.printTemplateSelected = (_this.workflowTaskActions.selectedTaskAction.data.printTemplate) ? _this.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateName : '';
	                _this.printTemplateCollectionConfig = _this.collectionConfigService.newCollectionConfig("PrintTemplate");
	                _this.printTemplateCollectionConfig.setDisplayProperties("printTemplateID,printTemplateName");
	                _this.printTemplateCollectionConfig.addFilter("printTemplateObject", _this.workflowTask.data.workflow.data.workflowObject);
	            });
	        };
	        /**
	         * Overrides the confirm directive method deleteEntity. This is needed for the modal popup.
	         */
	        this.deleteEntity = function (entity) {
	            _this.removeWorkflowTaskAction(entity);
	        };
	        /**
	         * --------------------------------------------------------------------------------------------------------
	         * Removes a workflow task action by calling the selected tasks $$delete method
	         * and reindexes the list.
	         * --------------------------------------------------------------------------------------------------------
	         */
	        this.removeWorkflowTaskAction = function (workflowTaskAction) {
	            var deletePromise = workflowTaskAction.$$delete();
	            deletePromise.then(function () {
	                if (workflowTaskAction === _this.workflowTaskActions.selectedTaskAction) {
	                    delete _this.workflowTaskActions.selectedTaskAction;
	                }
	                _this.$log.debug("removeWorkflowTaskAction");
	                _this.$log.debug(workflowTaskAction);
	                _this.workflowTaskActions.splice(workflowTaskAction.$$actionIndex, 1);
	                for (var i in _this.workflowTaskActions) {
	                    _this.workflowTaskActions[i].$$actionIndex = i;
	                }
	            });
	        };
	        this.searchProcess = {
	            name: ''
	        };
	        /**
	         * Watches for changes in the proccess
	         */
	        this.showProcessOptions = false;
	        this.processOptions = [];
	        //this.$scope.$watch('swWorkflowTaskActions.searchProcess.name', (newValue, oldValue)=>{
	        //    if(newValue !== oldValue){
	        //        this.getProcessOptions(this.workflowTask.data.workflow.data.workflowObject);
	        //    }
	        //});
	        /**
	         * Retrieves the proccess options for a workflow trigger action.
	         */
	        this.getProcessOptions = function (objectName) {
	            if (!_this.processOptions.length) {
	                var proccessOptionsPromise = _this.$hibachi.getProcessOptions(objectName);
	                proccessOptionsPromise.then(function (value) {
	                    _this.$log.debug('getProcessOptions');
	                    _this.processOptions = value.data;
	                });
	            }
	            _this.showProcessOptions = true;
	        };
	        /**
	         * Changes the selected process option value.
	         */
	        this.selectProcess = function (processOption) {
	            _this.workflowTaskActions.selectedTaskAction.data.processMethod = processOption.value;
	            _this.searchProcess.name = processOption.name;
	            _this.workflowTaskActions.selectedTaskAction.forms.selectedTaskAction.$setDirty();
	            //this.searchProcess = processOption.name;
	            _this.showProcessOptions = false;
	        };
	        this.selectEmailTemplate = function (item) {
	            if (angular.isDefined(_this.workflowTaskActions.selectedTaskAction.data.emailTemplate)) {
	                _this.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateID = item.emailTemplateID;
	            }
	            else {
	                var templateEmail = _this.$hibachi.newEmailTemplate();
	                templateEmail.data.emailTemplateID = item.emailTemplateID;
	                _this.workflowTaskActions.selectedTaskAction.$$setEmailTemplate(templateEmail);
	            }
	        };
	        this.selectPrintTemplate = function (item) {
	            if (angular.isDefined(_this.workflowTaskActions.selectedTaskAction.data.printTemplate)) {
	                _this.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateID = item.printTemplateID;
	            }
	            else {
	                var templatePrint = _this.$hibachi.newPrintTemplate();
	                templatePrint.data.printTemplateID = item.printTemplateID;
	                _this.workflowTaskActions.selectedTaskAction.$$setPrintTemplate(templatePrint);
	            }
	        };
	    }
	    return SWWorkflowTaskActionsController;
	}());
	var SWWorkflowTaskActions = (function () {
	    function SWWorkflowTaskActions(workflowPartialsPath, hibachiPathBuilder) {
	        this.workflowPartialsPath = workflowPartialsPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.restrict = 'AE';
	        this.scope = {};
	        this.bindToController = {
	            workflowTask: "="
	        };
	        this.controller = SWWorkflowTaskActionsController;
	        this.controllerAs = "swWorkflowTaskActions";
	        this.link = function ($scope, element, attrs) {
	        };
	        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath) + "workflowtaskactions.html";
	    }
	    SWWorkflowTaskActions.Factory = function () {
	        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTaskActions(workflowPartialsPath, hibachiPathBuilder); };
	        directive.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWWorkflowTaskActions;
	}());
	SWWorkflowTaskActions.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
	exports.SWWorkflowTaskActions = SWWorkflowTaskActions;


/***/ }),
/* 524 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/**
	 * Handles adding, editing, and deleting Workflows Tasks.
	 */
	var SWWorkflowTasks = (function () {
	    function SWWorkflowTasks($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) {
	        return {
	            restrict: 'A',
	            scope: {
	                workflow: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtasks.html",
	            link: function (scope, element, attrs) {
	                scope.workflowPartialsPath = hibachiPathBuilder.buildPartialsPath(workflowPartialsPath);
	                scope.propertiesList = {};
	                function logger(context, message) {
	                    $log.debug("SwWorkflowTasks :" + context + " : " + message);
	                }
	                /**
	                 * Sets workflowTasks on the scope by populating with $$getWorkflowTasks()
	                 */
	                scope.getWorkflowTasks = function () {
	                    logger("getWorkflowTasks", "Retrieving items");
	                    logger("getWorkflowTasks", "Workflow Tasks");
	                    $log.debug(scope.workflowTasks);
	                    if (!scope.workflow.$$isPersisted()) {
	                        scope.workflow.data.workflowTasks = [];
	                        scope.workflowTasks = scope.workflow.data.workflowTasks;
	                        return;
	                    }
	                    /***
	                       Note:
	                       This conditional is checking whether or not we need to be retrieving to
	                       items all over again. If we already have them, we won't make another
	                       trip to the database.

	                     ***/
	                    if (angular.isUndefined(scope.workflow.data.workflowTasks)) {
	                        var workflowTasksPromise = scope.workflow.$$getWorkflowTasks();
	                        workflowTasksPromise.then(function () {
	                            scope.workflowTasks = scope.workflow.data.workflowTasks;
	                        });
	                    }
	                    else {
	                        logger("getWorkflowTasks", "Retrieving cached Items");
	                        scope.workflowTasks = scope.workflow.data.workflowTasks;
	                    }
	                    if (angular.isUndefined(scope.workflow.data.workflowTasks)) {
	                        //Reset the workflowTasks.
	                        logger("getWorkflowTasks", "workflowTasks is undefined.");
	                        scope.workflow.data.workflowTasks = [];
	                        scope.workflowTasks = scope.workflow.data.workflowTasks;
	                    }
	                };
	                scope.getWorkflowTasks(); //call tasks
	                /**
	                 * Sets the editing state to show/hide the edit screen.
	                 */
	                scope.setHidden = function (task) {
	                    if (!angular.isObject(task) || angular.isUndefined(task.hidden)) {
	                        task.hidden = false;
	                    }
	                    else {
	                        logger("setHidden()", "Setting Hide Value To " + !task.hidden);
	                        task.hidden = !task.hidden;
	                    }
	                };
	                /**
	                 * Add a workflow task and logs the result.
	                 */
	                scope.addWorkflowTask = function () {
	                    var newWorkflowTask = scope.workflow.$$addWorkflowTask();
	                    logger("var newWorkflowTask", newWorkflowTask);
	                    scope.selectWorkflowTask(newWorkflowTask);
	                };
	                /**
	                  * Watches the select for changes.
	                  */
	                scope.$watch('workflowTasks.selectedTask.data.workflow.data.workflowObject', function (newValue, oldValue) {
	                    logger("scope.$watch", "Change Detected " + newValue + " from " + oldValue);
	                    if ((newValue !== oldValue && angular.isDefined(scope.workflowTasks.selectedTask))) {
	                        logger("scope.$watch", "Change to " + newValue);
	                        scope.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityAlias = newValue;
	                        scope.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityName = newValue;
	                    }
	                });
	                /**
	                   * --------------------------------------------------------------------------------------------------------
	                   * Saves the workflow task by calling the objects $$save method.
	                   * @param task
	                   * --------------------------------------------------------------------------------------------------------
	                   */
	                scope.saveWorkflowTask = function (task, context) {
	                    //scope.workflowTasks.selectedTask.$$setWorkflow(scope.workflow);
	                    scope.workflowTasks.selectedTask.$$save().then(function (res) {
	                        scope.done = true;
	                        delete scope.workflowTasks.selectedTask;
	                        if (context === 'add') {
	                            logger("SaveWorkflowTask", "Save and New");
	                            scope.addWorkflowTask();
	                            scope.finished = true;
	                        }
	                        else if (context == "finish") {
	                            scope.finished = false;
	                        }
	                    }, function (err) {
	                    });
	                }; //<--end save*/
	                /**
	                 * Select a workflow task.
	                 */
	                scope.selectWorkflowTask = function (workflowTask) {
	                    scope.done = false;
	                    logger("selectWorkflowTask", "selecting a workflow task");
	                    $log.debug(workflowTask);
	                    scope.finished = false;
	                    scope.workflowTasks.selectedTask = undefined;
	                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.workflow.data.workflowObject, true);
	                    filterPropertiesPromise.then(function (value) {
	                        scope.filterPropertiesList = {
	                            baseEntityName: scope.workflow.data.workflowObject,
	                            baseEntityAlias: "_" + scope.workflow.data.workflowObject
	                        };
	                        metadataService.setPropertiesList(value, scope.workflow.data.workflowObject);
	                        scope.filterPropertiesList[scope.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflow.data.workflowObject);
	                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflow.data.workflowObject], scope.workflow.data.workflowObject);
	                        scope.workflowTasks.selectedTask = workflowTask;
	                    });
	                };
	                /* Does a delete of the property using delete */
	                scope.softRemoveTask = function (workflowTask) {
	                    logger("SoftRemoveTask", "calling delete");
	                    if (workflowTask === scope.workflowTasks.selectedTask) {
	                        delete scope.workflowTasks.selectedTask;
	                    }
	                    scope.removeIndexFromTasks(workflowTask.$$index);
	                    scope.reindexTaskList();
	                };
	                /* Does an API call delete using $$delete */
	                scope.hardRemoveTask = function (workflowTask) {
	                    logger("HardRemoveTask", "$$delete");
	                    var deletePromise = workflowTask.$$delete();
	                    deletePromise.then(function () {
	                        if (workflowTask === scope.workflowTasks.selectedTask) {
	                            delete scope.workflowTasks.selectedTask;
	                        }
	                        scope.removeIndexFromTasks(workflowTask.$$index);
	                        scope.reindexTaskList();
	                    });
	                };
	                /*Override the delete entity in the confirmation controller*/
	                scope.deleteEntity = function (entity) {
	                    scope.hardRemoveTask(entity);
	                };
	                /* Re-indexes the task list */
	                scope.reindexTaskList = function () {
	                    for (var i in scope.workflowTasks) {
	                        logger("ReIndexing the list", i);
	                        scope.workflowTasks[i].$$index = i;
	                    }
	                };
	                /* Removes the tasks index from the tasks array */
	                scope.removeIndexFromTasks = function (index) {
	                    logger("RemoveIndexFromTasks", index);
	                    scope.workflowTasks.splice(index, 1);
	                };
	            }
	        };
	    }
	    SWWorkflowTasks.Factory = function () {
	        var directive = function ($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTasks($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            'metadataService',
	            'workflowPartialsPath',
	            'hibachiPathBuilder'
	        ];
	        return directive;
	    };
	    return SWWorkflowTasks;
	}());
	exports.SWWorkflowTasks = SWWorkflowTasks;


/***/ }),
/* 525 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWWorkflowTrigger = (function () {
	    function SWWorkflowTrigger($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService) {
	        return {
	            restrict: 'A',
	            replace: true,
	            scope: {
	                workflowTrigger: "=",
	                workflowTriggers: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtrigger.html",
	            link: function (scope, element, attrs) {
	                /**
	                 * Selects the current workflow trigger.
	                 */
	                scope.selectWorkflowTrigger = function (workflowTrigger) {
	                    scope.done = false;
	                    scope.finished = false;
	                    scope.workflowTriggers.selectedTrigger = undefined;
	                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.workflowTrigger.data.workflow.data.workflowObject, true);
	                    filterPropertiesPromise.then(function (value) {
	                        scope.filterPropertiesList = {
	                            baseEntityName: scope.workflowTrigger.data.workflow.data.workflowObject,
	                            baseEntityAlias: "_" + scope.workflowTrigger.data.workflow.data.workflowObject
	                        };
	                        metadataService.setPropertiesList(value, scope.workflowTrigger.data.workflow.data.workflowObject);
	                        scope.filterPropertiesList[scope.workflowTrigger.data.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflowTrigger.data.workflow.data.workflowObject);
	                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflowTrigger.data.workflow.data.workflowObject], scope.workflowTrigger.data.workflow.data.workflowObject);
	                        scope.workflowTriggers.selectedTrigger = workflowTrigger;
	                    });
	                };
	                scope.executingTrigger = false;
	                scope.executeWorkflowTrigger = function (workflowTrigger) {
	                    if (scope.executingTrigger)
	                        return;
	                    if (!workflowTrigger.data.workflow.data.workflowTasks || !workflowTrigger.data.workflow.data.workflowTasks.length) {
	                        var alert = alertService.newAlert();
	                        alert.msg = "You don't have any Task yet!";
	                        alert.type = "error";
	                        alert.fade = true;
	                        alertService.addAlert(alert);
	                        return;
	                    }
	                    scope.executingTrigger = true;
	                    var appConfig = $hibachi.getConfig();
	                    var urlString = appConfig.baseURL + '/index.cfm/?' + appConfig.action + '=api:workflow.executeScheduleWorkflowTrigger&workflowTriggerID=' + workflowTrigger.data.workflowTriggerID + '&x=' + utilityService.createID();
	                    $http.get(urlString).finally(function () {
	                        scope.executingTrigger = false;
	                        var alert = alertService.newAlert();
	                        alert.msg = "Task Triggered Successfully. Check History for Status";
	                        alert.type = "success";
	                        alert.fade = true;
	                        alertService.addAlert(alert);
	                    });
	                };
	                /**
	                 * Overrides the delete function for the confirmation modal. Delegates to the normal delete method.
	                 */
	                scope.deleteEntity = function (entity, index) {
	                    scope.deleteTrigger(entity, index);
	                };
	                /**
	                 * Hard deletes a workflow trigger
	                 */
	                scope.deleteTrigger = function (workflowTrigger, index) {
	                    var deleteTriggerPromise = $hibachi.saveEntity('WorkflowTrigger', workflowTrigger.data.workflowTriggerID, {}, 'Delete');
	                    deleteTriggerPromise.then(function (value) {
	                        scope.workflowTriggers.splice(index, 1);
	                    });
	                };
	            }
	        };
	    }
	    SWWorkflowTrigger.Factory = function () {
	        var directive = function ($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService) { return new SWWorkflowTrigger($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService); };
	        directive.$inject = [
	            '$http',
	            '$hibachi',
	            'alertService',
	            'metadataService',
	            'workflowPartialsPath',
	            'hibachiPathBuilder',
	            'utilityService'
	        ];
	        return directive;
	    };
	    return SWWorkflowTrigger;
	}());
	exports.SWWorkflowTrigger = SWWorkflowTrigger;


/***/ }),
/* 526 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWWorkflowTriggers = (function () {
	    function SWWorkflowTriggers($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService, $timeout) {
	        return {
	            restrict: 'E',
	            scope: {
	                workflow: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtriggers.html",
	            link: function (scope, element, attrs, formController) {
	                scope.schedule = {};
	                scope.$watch('workflowTriggers.selectedTrigger', function (newValue, oldValue) {
	                    if (newValue !== undefined && newValue !== oldValue) {
	                        if (newValue.data.triggerType == 'Schedule') {
	                            if (angular.isDefined(newValue.data.schedule)) {
	                                scope.schedule.selectedName = newValue.data.schedule.data.scheduleName;
	                                scope.selectSchedule(newValue.data.schedule.data);
	                            }
	                            if (angular.isDefined(newValue.data.scheduleCollection)) {
	                                scope.selectedCollection = newValue.data.scheduleCollection.data.collectionName;
	                            }
	                        }
	                        else {
	                            scope.searchEvent.name = scope.workflowTriggers.selectedTrigger.triggerEventTitle;
	                        }
	                    }
	                });
	                scope.collectionCollectionConfig = collectionConfigService.newCollectionConfig("Collection");
	                scope.collectionCollectionConfig.setDisplayProperties("collectionID,collectionName");
	                scope.collectionCollectionConfig.addFilter("collectionObject", scope.workflow.data.workflowObject);
	                observerService.attach(function (item) {
	                    scope.collectionCollectionConfig.clearFilters();
	                    scope.collectionCollectionConfig.addFilter("collectionObject", item.value);
	                    scope.eventOptions = [];
	                }, 'WorkflowWorkflowObjectOnChange');
	                scope.scheduleCollectionConfig = collectionConfigService.newCollectionConfig("Schedule");
	                scope.scheduleCollectionConfig.setDisplayProperties("scheduleID,scheduleName,daysOfMonthToRun,daysOfWeekToRun,recuringType,frequencyStartTime,frequencyEndTime,frequencyInterval");
	                scope.daysOfweek = [];
	                scope.daysOfMonth = [];
	                scope.$id = 'swWorkflowTriggers';
	                /**
	                 * Retrieves the workflow triggers.
	                 */
	                scope.getWorkflowTriggers = function () {
	                    /***
	                       Note:
	                       This conditional is checking whether or not we need to be retrieving to
	                       items all over again. If we already have them, we won't make another
	                       trip to the database.

	                    ***/
	                    if (!scope.workflow.$$isPersisted()) {
	                        scope.workflow.data.workflowTriggers = [];
	                        scope.workflowTriggers = scope.workflow.data.workflowTriggers;
	                        return;
	                    }
	                    if (angular.isUndefined(scope.workflow.data.workflowTriggers)) {
	                        var workflowTriggersPromise = scope.workflow.$$getWorkflowTriggers();
	                        workflowTriggersPromise.then(function () {
	                            scope.workflowTriggers = scope.workflow.data.workflowTriggers;
	                            /* resets the workflow trigger */
	                            if (angular.isUndefined(scope.workflow.data.workflowTriggers)) {
	                                scope.workflow.data.workflowTriggers = [];
	                                scope.workflowTriggers = scope.workflow.data.workflowTriggers;
	                            }
	                            angular.forEach(scope.workflowTriggers, function (workflowTrigger, key) {
	                                if (workflowTrigger.data.triggerType === 'Schedule') {
	                                    workflowTrigger.$$getSchedule();
	                                    workflowTrigger.$$getScheduleCollection();
	                                } //<---end if
	                            }); //<---end forEach
	                        }); //<---end workflow triggers promise
	                    }
	                    else {
	                        //Use the cached versions.
	                        scope.workflowTriggers = scope.workflow.data.workflowTriggers;
	                    } //<---end else
	                };
	                scope.getWorkflowTriggers(); //call triggers
	                scope.showCollections = false;
	                scope.collections = [];
	                scope.searchEvent = {
	                    name: ''
	                };
	                /**
	                 * Watches for changes in the event
	                 */
	                scope.showEventOptions = false;
	                scope.eventOptions = [];
	                /**
	                 * Retrieves the event options for a workflow trigger item.
	                 */
	                scope.getEventOptions = function (objectName) {
	                    if (!scope.eventOptions.length) {
	                        var eventOptionsPromise = $hibachi.getEventOptions(objectName);
	                        eventOptionsPromise.then(function (value) {
	                            scope.eventOptions = value.data;
	                        });
	                    }
	                    scope.showEventOptions = !scope.showEventOptions;
	                };
	                /**
	                 * Saves the workflow triggers.
	                 */
	                scope.saveWorkflowTrigger = function (context) {
	                    if (!scope.workflowTriggers.selectedTrigger.$$isPersisted()) {
	                        scope.workflowTriggers.selectedTrigger.$$setWorkflow(scope.workflow);
	                    }
	                    var saveWorkflowTriggerPromise = scope.workflowTriggers.selectedTrigger.$$save();
	                    saveWorkflowTriggerPromise.then(function () {
	                        scope.showEventOptions = true;
	                        scope.searchEvent = {
	                            name: ''
	                        };
	                        scope.schedule.selectedName = '';
	                        scope.schedulePreview = {};
	                        //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished
	                        if (context == 'add') {
	                            scope.addWorkflowTrigger();
	                        }
	                        else if (context == "finish") {
	                            scope.workflowTriggers.selectedTrigger = undefined;
	                        }
	                    });
	                };
	                scope.closeTrigger = function () {
	                    console.warn("workflow", scope.workflow);
	                    if (!scope.workflowTriggers.selectedTrigger.$$isPersisted()) {
	                        scope.workflowTriggers.selectedTrigger.$$setWorkflow();
	                    }
	                    scope.workflowTriggers.selectedTrigger = undefined;
	                };
	                /**
	                 * Changes the selected trigger value.
	                 */
	                scope.selectEvent = function (eventOption) {
	                    //Needs to clear old and set new.
	                    scope.workflowTriggers.selectedTrigger.data.triggerEventTitle = eventOption.name;
	                    scope.workflowTriggers.selectedTrigger.data.triggerEvent = eventOption.value;
	                    if (eventOption.entityName == scope.workflow.data.workflowObject) {
	                        scope.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier = '';
	                    }
	                    else {
	                        scope.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier = eventOption.entityName;
	                    }
	                    scope.searchEvent.name = eventOption.name;
	                    scope.showEventOptions = false;
	                    observerService.notifyById('pullBindings', 'WorkflowTriggertriggerEventpullBindings').then(function () {
	                    });
	                    observerService.notifyById('pullBindings', 'WorkflowTriggertriggerEventTitlepullBindings').then(function () {
	                    });
	                };
	                /**
	                 * Selects a new collection.
	                 */
	                scope.selectCollection = function (collection) {
	                    scope.workflowTriggers.selectedTrigger.data.scheduleCollection = collection;
	                    scope.showCollections = false;
	                };
	                /**
	                 * Removes a workflow trigger
	                 */
	                scope.removeWorkflowTrigger = function (workflowTrigger) {
	                    if (workflowTrigger === scope.workflowTriggers.selectedTrigger) {
	                        delete scope.workflowTriggers.selectedTrigger;
	                    }
	                    scope.workflowTriggers.splice(workflowTrigger.$$index, 1);
	                };
	                scope.setAsEvent = function (workflowTrigger) {
	                    if (!workflowTrigger.$$isPersisted()) {
	                        workflowTrigger.data.saveTriggerHistoryFlag = 0;
	                    }
	                    //add event,  clear schedule
	                };
	                scope.setAsSchedule = function (workflowTrigger) {
	                    if (!workflowTrigger.$$isPersisted()) {
	                        workflowTrigger.data.saveTriggerHistoryFlag = 1;
	                    }
	                };
	                /**
	                 * Adds a workflow trigger.
	                 */
	                scope.addWorkflowTrigger = function () {
	                    var newWorkflowTrigger = $hibachi.newWorkflowTrigger();
	                    scope.workflowTriggers.selectedTrigger = newWorkflowTrigger;
	                };
	                scope.addNewSchedule = function () {
	                    scope.createSchedule = true;
	                    scope.scheduleEntity = $hibachi.newSchedule();
	                };
	                scope.saveSchedule = function () {
	                    if (scope.scheduleEntity.data.recuringType == 'weekly') {
	                        scope.scheduleEntity.data.daysOfWeekToRun = scope.daysOfweek.filter(Number).join();
	                    }
	                    else if (scope.scheduleEntity.data.recuringType == 'monthly') {
	                        scope.scheduleEntity.data.daysOfMonthToRun = scope.daysOfMonth.filter(Number).join();
	                    }
	                    scope.scheduleEntity.$$save().then(function (res) {
	                        scope.schedule.selectedName = angular.copy(scope.scheduleEntity.data.scheduleName);
	                        scope.selectSchedule(angular.copy(scope.scheduleEntity.data));
	                        formService.resetForm(scope.scheduleEntity.forms['scheduleForm']);
	                        scope.createSchedule = false;
	                    }, function () {
	                    });
	                };
	                scope.selectCollection = function (item) {
	                    if (item === undefined) {
	                        scope.workflowTriggers.selectedTrigger.$$setScheduleCollection();
	                        return;
	                    }
	                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.scheduleCollection)) {
	                        scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID = item.collectionID;
	                        scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionName = item.collectionName;
	                    }
	                    else {
	                        var _collection = $hibachi.newCollection();
	                        _collection.data.collectionID = item.collectionID;
	                        _collection.data.collectionName = item.collectionName;
	                        scope.workflowTriggers.selectedTrigger.$$setScheduleCollection(_collection);
	                    }
	                };
	                scope.viewCollection = function () {
	                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.scheduleCollection)) {
	                        dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {
	                            entityName: 'Collection',
	                            entityId: scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID,
	                            readOnly: true
	                        });
	                    }
	                };
	                scope.selectSchedule = function (item) {
	                    if (item === undefined) {
	                        scope.schedulePreview = {};
	                        scope.workflowTriggers.selectedTrigger.$$setSchedule();
	                        return;
	                    }
	                    scope.schedulePreview = scheduleService.buildSchedulePreview(item, 6);
	                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.schedule)) {
	                        scope.workflowTriggers.selectedTrigger.data.schedule.data.scheduleID = item.scheduleID;
	                        scope.workflowTriggers.selectedTrigger.data.schedule.data.scheduleName = item.scheduleName;
	                    }
	                    else {
	                        var _schedule = $hibachi.newSchedule();
	                        _schedule.data.scheduleID = item.scheduleID;
	                        _schedule.data.scheduleName = item.scheduleName;
	                        scope.workflowTriggers.selectedTrigger.$$setSchedule(_schedule);
	                    }
	                };
	            }
	        };
	    }
	    SWWorkflowTriggers.Factory = function () {
	        var directive = function ($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService, $timeout) { return new SWWorkflowTriggers($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService, $timeout); };
	        directive.$inject = [
	            '$hibachi',
	            'workflowPartialsPath',
	            'formService',
	            'observerService',
	            'hibachiPathBuilder',
	            'collectionConfigService',
	            'scheduleService',
	            'dialogService',
	            '$timeout'
	        ];
	        return directive;
	    };
	    return SWWorkflowTriggers;
	}());
	exports.SWWorkflowTriggers = SWWorkflowTriggers;


/***/ }),
/* 527 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWWorkflowTriggerHistory = (function () {
	    function SWWorkflowTriggerHistory($log, $location, $hibachi, formService, workflowPartialsPath, hibachiPathBuilder, $rootScope) {
	        return {
	            restrict: 'A',
	            scope: {
	                workflow: "="
	            },
	            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtriggerhistory.html",
	            link: function (scope, element, attrs) {
	                $rootScope.workflowID = scope.workflow.data.workflowID;
	            }
	        };
	    }
	    SWWorkflowTriggerHistory.Factory = function () {
	        var directive = function ($log, $location, $hibachi, formService, workflowPartialsPath, hibachiPathBuilder, $rootScope) { return new SWWorkflowTriggerHistory($log, $location, $hibachi, formService, workflowPartialsPath, hibachiPathBuilder, $rootScope); };
	        directive.$inject = [
	            '$log',
	            '$location',
	            '$hibachi',
	            'formService',
	            'workflowPartialsPath',
	            'hibachiPathBuilder',
	            '$rootScope'
	        ];
	        return directive;
	    };
	    return SWWorkflowTriggerHistory;
	}());
	exports.SWWorkflowTriggerHistory = SWWorkflowTriggerHistory;


/***/ }),
/* 528 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWSchedulePreviewController = (function () {
	    function SWSchedulePreviewController() {
	    }
	    return SWSchedulePreviewController;
	}());
	var SWSchedulePreview = (function () {
	    function SWSchedulePreview(workflowPartialsPath, hibachiPathBuilder) {
	        this.workflowPartialsPath = workflowPartialsPath;
	        this.hibachiPathBuilder = hibachiPathBuilder;
	        this.restrict = 'AE';
	        this.scope = {};
	        this.bindToController = {
	            schedule: "="
	        };
	        this.controller = SWSchedulePreviewController;
	        this.controllerAs = "swSchedulePreview";
	        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath) + "schedulepreview.html";
	    }
	    SWSchedulePreview.Factory = function () {
	        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWSchedulePreview(workflowPartialsPath, hibachiPathBuilder); };
	        directive.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
	        return directive;
	    };
	    return SWSchedulePreview;
	}());
	SWSchedulePreview.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];
	exports.SWSchedulePreview = SWSchedulePreview;


/***/ }),
/* 529 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/hibachiTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWSaveAndFinishController = (function () {
	    //@ngInject
	    function SWSaveAndFinishController($hibachi, dialogService, alertService, rbkeyService, $log) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.dialogService = dialogService;
	        this.alertService = alertService;
	        this.rbkeyService = rbkeyService;
	        this.$log = $log;
	        this.saving = false;
	        this.initialSetup = function () {
	            if (!angular.isDefined(_this.finish)) {
	                _this.openNewDialog = false;
	            }
	            else {
	                _this.openNewDialog = (_this.finish.toLowerCase() == 'true') ? false : true;
	            }
	            if (_this.openNewDialog) {
	                _this.rbKey = 'admin.define.saveandnew';
	            }
	            else {
	                _this.rbKey = 'admin.define.saveandfinish';
	            }
	        };
	        this.save = function () {
	            _this.saving = true;
	            var savePromise = _this.entity.$$save();
	            savePromise.then(function (data) {
	                _this.dialogService.removeCurrentDialog();
	                if (_this.openNewDialog && angular.isDefined(_this.partial)) {
	                    _this.dialogService.addPageDialog(_this.partial);
	                }
	                else {
	                    if (angular.isDefined(_this.redirectUrl)) {
	                        window.location.href = _this.redirectUrl;
	                    }
	                    else if (angular.isDefined(_this.redirectAction)) {
	                        if (angular.isUndefined(_this.redirectQueryString)) {
	                            _this.redirectQueryString = "";
	                        }
	                        window.location.href = _this.$hibachi.buildUrl(_this.redirectAction, _this.redirectQueryString);
	                    }
	                    else {
	                        _this.$log.debug("You did not specify a redirect for swSaveAndFinish");
	                    }
	                }
	            }).catch(function (data) {
	                if (angular.isDefined(_this.customErrorRbkey)) {
	                    data = _this.rbkeyService.getRBKey(_this.customErrorRbkey);
	                }
	                if (angular.isString(data)) {
	                    var alert = _this.alertService.newAlert();
	                    alert.msg = data;
	                    alert.type = "error";
	                    alert.fade = true;
	                    _this.alertService.addAlert(alert);
	                }
	                else {
	                    _this.alertService.addAlerts(data);
	                }
	            }).finally(function () {
	                _this.saving = false;
	            });
	        };
	        if (!angular.isFunction(this.entity.$$save)) {
	            throw ("Your entity does not have the $$save function.");
	        }
	        this.initialSetup();
	    }
	    return SWSaveAndFinishController;
	}());
	exports.SWSaveAndFinishController = SWSaveAndFinishController;
	var SWSaveAndFinish = (function () {
	    //@ngInject
	    function SWSaveAndFinish(hibachiPartialsPath, hibachiPathBuilder) {
	        this.hibachiPartialsPath = hibachiPartialsPath;
	        this.restrict = "EA";
	        this.scope = {};
	        this.controller = SWSaveAndFinishController;
	        this.controllerAs = "swSaveAndFinish";
	        this.bindToController = {
	            entity: "=",
	            redirectUrl: "@?",
	            redirectAction: "@?",
	            redirectQueryString: "@?",
	            finish: "@?",
	            partial: "@?",
	            customErrorRbkey: "@?"
	        };
	        this.templateUrl = hibachiPathBuilder.buildPartialsPath(hibachiPartialsPath) + "saveandfinish.html";
	    }
	    SWSaveAndFinish.Factory = function () {
	        var directive = function (hibachiPartialsPath, hibachiPathBuilder) { return new SWSaveAndFinish(hibachiPartialsPath, hibachiPathBuilder); };
	        directive.$inject = ["hibachiPartialsPath", "hibachiPathBuilder"];
	        return directive;
	    };
	    return SWSaveAndFinish;
	}());
	exports.SWSaveAndFinish = SWSaveAndFinish;


/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//modules
	var core_module_1 = __webpack_require__(275);
	//services
	//filters
	//directives
	var swcontentbasic_1 = __webpack_require__(531);
	var swcontenteditor_1 = __webpack_require__(532);
	var swcontentlist_1 = __webpack_require__(533);
	var swcontentnode_1 = __webpack_require__(534);
	var swassignedproducts_1 = __webpack_require__(535);
	var swsiteselector_1 = __webpack_require__(536);
	var contentmodule = angular.module('hibachi.content', [core_module_1.coremodule.name]).config(function () {
	})
	    .constant('contentPartialsPath', 'content/components/')
	    .directive('swContentBasic', swcontentbasic_1.SWContentBasic.Factory())
	    .directive('swContentEditor', swcontenteditor_1.SWContentEditor.Factory())
	    .directive('swContentList', swcontentlist_1.SWContentList.Factory())
	    .directive('swContentNode', swcontentnode_1.SWContentNode.Factory())
	    .directive('swAssignedProducts', swassignedproducts_1.SWAssignedProducts.Factory())
	    .directive('swSiteSelector', swsiteselector_1.SWSiteSelector.Factory());
	exports.contentmodule = contentmodule;


/***/ }),
/* 531 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWContentBasic = (function () {
	    function SWContentBasic($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) {
	        return {
	            restrict: 'EA',
	            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "contentbasic.html",
	            link: function (scope, element, attrs) {
	                if (!scope.content.$$isPersisted()) {
	                    if (angular.isDefined($routeParams.siteID)) {
	                        var sitePromise;
	                        var options = {
	                            id: $routeParams.siteID
	                        };
	                        sitePromise = $hibachi.getSite(options);
	                        sitePromise.promise.then(function () {
	                            var site = sitePromise.value;
	                            scope.content.$$setSite(site);
	                        });
	                    }
	                    else {
	                        var site = $hibachi.newSite();
	                        scope.content.$$setSite(site);
	                    }
	                    var parentContent;
	                    if (angular.isDefined($routeParams.parentContentID)) {
	                        var parentContentPromise;
	                        var options = {
	                            id: $routeParams.parentContentID
	                        };
	                        parentContentPromise = $hibachi.getContent(options);
	                        parentContentPromise.promise.then(function () {
	                            var parentContent = parentContentPromise.value;
	                            scope.content.$$setParentContent(parentContent);
	                            $log.debug('contenttest');
	                            $log.debug(scope.content);
	                        });
	                    }
	                    else {
	                        var parentContent = $hibachi.newContent();
	                        scope.content.$$setParentContent(parentContent);
	                    }
	                    var contentTemplateType = $hibachi.newType();
	                    scope.content.$$setContentTemplateType(contentTemplateType);
	                }
	                else {
	                    scope.content.$$getSite();
	                    scope.content.$$getParentContent();
	                    scope.content.$$getContentTemplateType();
	                }
	            }
	        };
	    }
	    SWContentBasic.Factory = function () {
	        var directive = function ($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) { return new SWContentBasic($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$routeParams',
	            '$hibachi',
	            'formService',
	            'contentPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWContentBasic;
	}());
	exports.SWContentBasic = SWContentBasic;


/***/ }),
/* 532 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWContentEditor = (function () {
	    function SWContentEditor($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) {
	        return {
	            restrict: 'EA',
	            scope: {
	                content: "="
	            },
	            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "contenteditor.html",
	            link: function (scope, element, attrs) {
	                scope.editorOptions = CKEDITOR.editorConfig;
	                scope.onContentChange = function () {
	                    var form = formService.getForm('contentEditor');
	                    form.contentBody.$setDirty();
	                };
	                //                scope.saveContent = function(){
	                //                   var urlString = _config.baseURL+'/index.cfm/?slatAction=api:main.post';
	                //                   var params = {
	                //                        entityID:scope.content.contentID,
	                //                        templateHTML:scope.content.templateHTML,
	                //                        context:'saveTemplateHTML',
	                //                        entityName:'content'
	                //                   }
	                //                   $http.post(urlString,
	                //                        {
	                //                            params:params
	                //                        }
	                //                    )
	                //                    .success(function(data){
	                //                    }).error(function(reason){
	                //                    });
	                //                }
	            }
	        };
	    }
	    SWContentEditor.Factory = function () {
	        var directive = function ($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) { return new SWContentEditor($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$location',
	            '$http',
	            '$hibachi',
	            'formService',
	            'contentPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWContentEditor;
	}());
	exports.SWContentEditor = SWContentEditor;


/***/ }),
/* 533 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWContentListController = (function () {
	    //@ngInject
	    function SWContentListController($scope, $log, $timeout, $hibachi, paginationService, observerService, collectionConfigService, localStorageService) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$log = $log;
	        this.$timeout = $timeout;
	        this.$hibachi = $hibachi;
	        this.paginationService = paginationService;
	        this.observerService = observerService;
	        this.collectionConfigService = collectionConfigService;
	        this.localStorageService = localStorageService;
	        this.openRoot = true;
	        this.$log.debug('slatwallcontentList init');
	        var pageShow = 50;
	        if (this.pageShow !== 'Auto') {
	            pageShow = this.pageShow;
	        }
	        this.pageShowOptions = [
	            { display: 10, value: 10 },
	            { display: 20, value: 20 },
	            { display: 50, value: 50 },
	            { display: 250, value: 250 }
	        ];
	        this.loadingCollection = false;
	        if (this.localStorageService.hasItem('selectedSiteOption')) {
	            this.selectedSite = this.localStorageService.getItem('selectedSiteOption');
	        }
	        this.orderBy;
	        var orderByConfig;
	        this.getCollection = function (isSearching) {
	            _this.collectionConfig = collectionConfigService.newCollectionConfig('Content');
	            var columnsConfig = [
	                //{"propertyIdentifier":"_content_childContents","title":"","isVisible":true,"isDeletable":true,"isSearchable":true,"isExportable":true,"ormtype":"string","aggregate":{"aggregateFunction":"COUNT","aggregateAlias":"childContentsCount"}},
	                {
	                    propertyIdentifier: '_content.contentID',
	                    isVisible: false,
	                    ormtype: 'id',
	                    isSearchable: true
	                },
	                {
	                    propertyIdentifier: '_content.urlTitlePath',
	                    isVisible: false,
	                    isSearchable: true
	                },
	                //need to get template via settings
	                {
	                    propertyIdentifier: '_content.allowPurchaseFlag',
	                    isVisible: true,
	                    ormtype: 'boolean',
	                    isSearchable: false
	                },
	                {
	                    propertyIdentifier: '_content.productListingPageFlag',
	                    isVisible: true,
	                    ormtype: 'boolean',
	                    isSearchable: false
	                },
	                {
	                    propertyIdentifier: '_content.activeFlag',
	                    isVisible: true,
	                    ormtype: 'boolean',
	                    isSearchable: false
	                }
	            ];
	            var options = {
	                currentPage: '1',
	                pageShow: '1',
	                keywords: _this.keywords
	            };
	            var column = {};
	            if (!isSearching || _this.keywords === '') {
	                _this.isSearching = false;
	                var filterGroupsConfig = [
	                    {
	                        "filterGroup": [
	                            {
	                                "propertyIdentifier": "parentContent",
	                                "comparisonOperator": "is",
	                                "value": 'null'
	                            }
	                        ]
	                    }
	                ];
	                column = {
	                    propertyIdentifier: '_content.title',
	                    isVisible: true,
	                    ormtype: 'string',
	                    isSearchable: true,
	                    tdclass: 'primary'
	                };
	                columnsConfig.unshift(column);
	            }
	            else {
	                _this.collectionConfig.setKeywords(_this.keywords);
	                _this.isSearching = true;
	                var filterGroupsConfig = [
	                    {
	                        "filterGroup": [
	                            {
	                                "propertyIdentifier": "excludeFromSearch",
	                                "comparisonOperator": "!=",
	                                "value": true
	                            }
	                        ]
	                    }
	                ];
	                column = {
	                    propertyIdentifier: '_content.title',
	                    isVisible: false,
	                    ormtype: 'string',
	                    isSearchable: true
	                };
	                columnsConfig.unshift(column);
	                var titlePathColumn = {
	                    propertyIdentifier: '_content.titlePath',
	                    isVisible: true,
	                    ormtype: 'string',
	                    isSearchable: false
	                };
	                columnsConfig.unshift(titlePathColumn);
	            }
	            //if we have a selected Site add the filter
	            if (_this.selectedSite && _this.selectedSite.siteID) {
	                var selectedSiteFilter = {
	                    logicalOperator: "AND",
	                    propertyIdentifier: "site.siteID",
	                    comparisonOperator: "=",
	                    value: _this.selectedSite.siteID
	                };
	                filterGroupsConfig[0].filterGroup.push(selectedSiteFilter);
	            }
	            if (angular.isDefined(_this.orderBy)) {
	                var orderByConfig = [];
	                orderByConfig.push(_this.orderBy);
	                options.orderByConfig = angular.toJson(orderByConfig);
	            }
	            angular.forEach(columnsConfig, function (column) {
	                _this.collectionConfig.addColumn(column.propertyIdentifier, column.title, column);
	            });
	            _this.collectionConfig.addDisplayAggregate('childContents', 'COUNT', 'childContentsCount', { isVisible: false, isSearchable: false, title: 'test' });
	            _this.collectionConfig.addDisplayProperty('site.siteID', undefined, {
	                isVisible: false,
	                ormtype: 'id',
	                isSearchable: false
	            });
	            _this.collectionConfig.addDisplayProperty('site.domainNames', undefined, {
	                isVisible: false,
	                isSearchable: true
	            });
	            angular.forEach(filterGroupsConfig[0].filterGroup, function (filter) {
	                _this.collectionConfig.addFilter(filter.propertyIdentifier, filter.value, filter.comparisonOperator, filter.logicalOperator);
	            });
	            _this.collectionListingPromise = _this.collectionConfig.getEntity();
	            _this.collectionListingPromise.then(function (value) {
	                _this.$timeout(function () {
	                    _this.collection = value;
	                    _this.collection.collectionConfig = _this.collectionConfig;
	                    _this.firstLoad = true;
	                    _this.loadingCollection = false;
	                });
	            });
	            return _this.collectionListingPromise;
	        };
	        //this.getCollection(false);
	        this.loadingCollection = false;
	        this.searchCollection = function () {
	            $log.debug('search with keywords');
	            $log.debug(_this.keywords);
	            $('.childNode').remove();
	            //Set current page here so that the pagination does not break when getting collection
	            _this.loadingCollection = true;
	            var promise = _this.getCollection(true);
	            promise.then(function () {
	                _this.collection.collectionConfig = _this.collectionConfig;
	                _this.loadingCollection = false;
	            });
	        };
	        var siteChanged = function (selectedSiteOption) {
	            _this.localStorageService.setItem('selectedSiteOption', selectedSiteOption);
	            _this.selectedSite = _this.localStorageService.getItem('selectedSiteOption');
	            _this.openRoot = true;
	            _this.getCollection();
	        };
	        this.observerService.attach(siteChanged, 'optionsChanged', 'siteOptions');
	        var sortChanged = function (orderBy) {
	            _this.orderBy = orderBy;
	            _this.getCollection();
	        };
	        this.observerService.attach(sortChanged, 'sortByColumn', 'siteSorting');
	        var optionsLoaded = function () {
	            var option;
	            if (_this.selectedSite) {
	                option = _this.selectedSite;
	            }
	            _this.observerService.notify('selectOption', option);
	        };
	        this.observerService.attach(optionsLoaded, 'optionsLoaded', 'siteOptionsLoaded');
	    }
	    return SWContentListController;
	}());
	var SWContentList = (function () {
	    //@ngInject
	    function SWContentList(contentPartialsPath, observerService, slatwallPathBuilder) {
	        this.restrict = 'E';
	        //public bindToController=true;
	        this.controller = SWContentListController;
	        this.controllerAs = "swContentList";
	        this.link = function (scope, element, attrs, controller, transclude) {
	            scope.$on('$destroy', function handler() {
	                this.observerService.detachByEvent('optionsChanged');
	                this.observerService.detachByEvent('sortByColumn');
	            });
	        };
	        this.observerService = observerService;
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + 'contentlist.html';
	    }
	    SWContentList.Factory = function () {
	        var directive = function (contentPartialsPath, observerService, slatwallPathBuilder) { return new SWContentList(contentPartialsPath, observerService, slatwallPathBuilder); };
	        directive.$inject = [
	            'contentPartialsPath',
	            'observerService',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWContentList;
	}());
	exports.SWContentList = SWContentList;


/***/ }),
/* 534 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWContentNode = (function () {
	    function SWContentNode($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder) {
	        return {
	            restrict: 'A',
	            scope: {
	                contentData: '=',
	                loadChildren: "="
	            },
	            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + 'contentnode.html',
	            link: function (scope, element, attr) {
	                if (angular.isUndefined(scope.depth)) {
	                    scope.depth = 0;
	                }
	                if (angular.isDefined(scope.$parent.depth)) {
	                    scope.depth = scope.$parent.depth + 1;
	                }
	                var childContentColumnsConfig = [{
	                        propertyIdentifier: '_content.contentID',
	                        isVisible: false,
	                        isSearchable: false
	                    },
	                    {
	                        propertyIdentifier: '_content.title',
	                        isVisible: true,
	                        isSearchable: true
	                    },
	                    {
	                        propertyIdentifier: '_content.urlTitlePath',
	                        isVisible: true,
	                        isSearchable: true
	                    },
	                    {
	                        propertyIdentifier: '_content.site.siteID',
	                        isVisible: false,
	                        isSearchable: false
	                    },
	                    {
	                        propertyIdentifier: '_content.site.siteName',
	                        isVisible: true,
	                        isSearchable: true
	                    },
	                    {
	                        propertyIdentifier: '_content.site.domainNames',
	                        isVisible: true,
	                        isSearchable: true
	                    },
	                    //                            {
	                    //                                propertyIdentifier: '_content.contentTemplateFile',
	                    //                                persistent: false,
	                    //                                setting: true,
	                    //                                isVisible: true
	                    //                            },
	                    //need to get template via settings
	                    {
	                        propertyIdentifier: '_content.allowPurchaseFlag',
	                        isVisible: true,
	                        isSearchable: true
	                    }, {
	                        propertyIdentifier: '_content.productListingPageFlag',
	                        isVisible: true,
	                        isSearchable: true
	                    }, {
	                        propertyIdentifier: '_content.activeFlag',
	                        isVisible: true,
	                        isSearchable: true
	                    }
	                ];
	                var childContentOrderBy = [
	                    {
	                        "propertyIdentifier": "_content.sortOrder",
	                        "direction": "DESC"
	                    }
	                ];
	                scope.toggleChildContent = function (parentContentRecord) {
	                    if (angular.isUndefined(scope.childOpen) || scope.childOpen === false) {
	                        scope.childOpen = true;
	                        if (!scope.childrenLoaded) {
	                            scope.getChildContent(parentContentRecord);
	                        }
	                    }
	                    else {
	                        scope.childOpen = false;
	                    }
	                };
	                scope.getChildContent = function (parentContentRecord) {
	                    var childContentfilterGroupsConfig = [{
	                            "filterGroup": [{
	                                    "propertyIdentifier": "_content.parentContent.contentID",
	                                    "comparisonOperator": "=",
	                                    "value": parentContentRecord.contentID
	                                }]
	                        }];
	                    var collectionListingPromise = $hibachi.getEntity('Content', {
	                        columnsConfig: angular.toJson(childContentColumnsConfig),
	                        filterGroupsConfig: angular.toJson(childContentfilterGroupsConfig),
	                        orderByConfig: angular.toJson(childContentOrderBy),
	                        allRecords: true
	                    });
	                    collectionListingPromise.then(function (value) {
	                        parentContentRecord.children = value.records;
	                        var index = 0;
	                        angular.forEach(parentContentRecord.children, function (child) {
	                            child.site_domainNames = child.site_domainNames.split(",")[0];
	                            scope['child' + index] = child;
	                            element.after($compile('<tr class="childNode" style="margin-left:{{depth*15||0}}px" ng-if="childOpen"  sw-content-node data-content-data="child' + index + '"></tr>')(scope));
	                            index++;
	                        });
	                        scope.childrenLoaded = true;
	                    });
	                };
	                scope.childrenLoaded = false;
	                //if the children have never been loaded and we are not in search mode based on the title received
	                if (angular.isDefined(scope.loadChildren) && scope.loadChildren === true && !(scope.contentData.titlePath && scope.contentData.titlePath.trim().length)) {
	                    scope.toggleChildContent(scope.contentData);
	                }
	            }
	        };
	    }
	    SWContentNode.Factory = function () {
	        var directive = function ($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder) { return new SWContentNode($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$compile',
	            '$hibachi',
	            'contentPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWContentNode;
	}());
	exports.SWContentNode = SWContentNode;


/***/ }),
/* 535 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWAssignedProductsController = (function () {
	    //@ngInject
	    function SWAssignedProductsController(collectionConfigService, utilityService) {
	        this.collectionConfigService = collectionConfigService;
	        this.utilityService = utilityService;
	        this.collectionConfig = collectionConfigService.newCollectionConfig("Product");
	        this.collectionConfig.addDisplayProperty("productID,productName,productCode,productDescription,activeFlag,publishedFlag,productType.productTypeNamePath,productType.productTypeName,defaultSku.price");
	        this.alreadySelectedProductsCollectionConfig = collectionConfigService.newCollectionConfig("ProductListingPage");
	        this.alreadySelectedProductsCollectionConfig.addDisplayProperty("productListingPageID,sortOrder,product.productID,product.productName,product.productCode,product.productDescription,product.activeFlag,product.publishedFlag");
	        this.alreadySelectedProductsCollectionConfig.addFilter("content.contentID", this.contentId, "=");
	        this.typeaheadDataKey = utilityService.createID(32);
	    }
	    return SWAssignedProductsController;
	}());
	exports.SWAssignedProductsController = SWAssignedProductsController;
	var SWAssignedProducts = (function () {
	    //@ngInject
	    function SWAssignedProducts($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder) {
	        this.$http = $http;
	        this.$hibachi = $hibachi;
	        this.paginationService = paginationService;
	        this.contentPartialsPath = contentPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            contentId: "@?",
	            edit: "=?",
	            productSortProperty: "@?",
	            productSortDefaultDirection: "@?"
	        };
	        this.controller = SWAssignedProductsController;
	        this.controllerAs = "swAssignedProducts";
	        this.link = function ($scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "/assignedproducts.html";
	    }
	    SWAssignedProducts.Factory = function () {
	        var directive = function ($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder) { return new SWAssignedProducts($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$http',
	            '$hibachi',
	            'paginationService',
	            'contentPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWAssignedProducts;
	}());
	exports.SWAssignedProducts = SWAssignedProducts;


/***/ }),
/* 536 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWSiteSelectorController = (function () {
	    //@ngInject
	    function SWSiteSelectorController(collectionConfigService, listingService, localStorageService, typeaheadService, utilityService) {
	        var _this = this;
	        this.collectionConfigService = collectionConfigService;
	        this.listingService = listingService;
	        this.localStorageService = localStorageService;
	        this.typeaheadService = typeaheadService;
	        this.utilityService = utilityService;
	        this.selectSite = function () {
	            _this.collectionConfigToFilter.removeFilterByDisplayPropertyIdentifier(_this.simpleFilterPropertyIdentifier);
	            console.log("selectSite", _this.selectedSite);
	            switch (_this.selectedSite) {
	                case "all":
	                    //do nothing
	                    console.log("donothing");
	                    break;
	                case "default":
	                    _this.updateDefaultSiteID();
	                    if (_this.defaultEstablished) {
	                        console.log("adding filter", _this.defaultSiteID);
	                        _this.collectionConfigToFilter.addFilter(_this.filterPropertyIdentifier, _this.defaultSiteID, "=");
	                    }
	                    break;
	                case undefined:
	                    //do nothing
	                    break;
	                default:
	                    _this.localStorageService.setItem("defaultSiteID", _this.selectedSite);
	                    _this.collectionConfigToFilter.addFilter(_this.filterPropertyIdentifier, _this.selectedSite, "=");
	                    break;
	            }
	            if (_this.withTypeahead && _this.typeaheadDataKey != null) {
	                _this.typeaheadService.getData(_this.typeaheadDataKey);
	            }
	            if (_this.inListingDisplay && _this.listingID != null) {
	                _this.listingService.getCollection(_this.listingID);
	            }
	        };
	        this.updateDefaultSiteID = function () {
	            console.log("updating default established");
	            if (_this.localStorageService.hasItem("defaultSiteID")) {
	                _this.defaultEstablished = true;
	                _this.defaultSiteID = _this.localStorageService.getItem("defaultSiteID");
	            }
	            else {
	                console.log("default established false");
	                _this.defaultEstablished = false;
	            }
	        };
	        if (angular.isUndefined(this.disabled)) {
	            this.disabled = false;
	        }
	        if (angular.isUndefined(this.simpleFilterPropertyIdentifier)) {
	            this.simpleFilterPropertyIdentifier = "siteID";
	        }
	        this.sitesCollectionConfig = collectionConfigService.newCollectionConfig("Site");
	        this.sitesCollectionConfig.addDisplayProperty("siteID, siteName, siteCode");
	        this.sitesCollectionConfig.setAllRecords(true);
	        this.sitesCollectionConfig.getEntity().then(function (data) {
	            _this.sites = data.records;
	            if (_this.sites[0]) {
	                _this.selectedSite = _this.sites[0].siteID;
	            }
	        }, function (reason) {
	            throw ("SWProductListingPages had trouble fetching sites because of " + reason);
	        }).finally(function () {
	            _this.selectSite();
	        });
	    }
	    return SWSiteSelectorController;
	}());
	exports.SWSiteSelectorController = SWSiteSelectorController;
	var SWSiteSelector = (function () {
	    //@ngInject
	    function SWSiteSelector($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder) {
	        var _this = this;
	        this.$http = $http;
	        this.$hibachi = $hibachi;
	        this.listingService = listingService;
	        this.scopeService = scopeService;
	        this.contentPartialsPath = contentPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            inListingDisplay: "=?",
	            filterPropertyIdentifier: "@?",
	            collectionConfigToFilter: "=?",
	            withTypeahead: "=?",
	            typeaheadDataKey: "@?",
	            disabled: "=?"
	        };
	        this.controller = SWSiteSelectorController;
	        this.controllerAs = "swSiteSelector";
	        this.link = function ($scope, element, attrs) {
	            if ($scope.swSiteSelector.withTypeahead == null) {
	                $scope.swSiteSelector.withTypeahead = false;
	            }
	            if ($scope.swSiteSelector.inListingDisplay == null) {
	                $scope.swSiteSelector.inListingDisplay = !$scope.swSiteSelector.withTypeahead;
	            }
	            if ($scope.swSiteSelector.inListingDisplay == true && _this.scopeService.hasParentScope($scope, "swListingDisplay")) {
	                var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];
	                $scope.swSiteSelector.listingID = listingDisplayScope.tableID;
	                if (listingDisplayScope.collectionConfig != null) {
	                    $scope.swSiteSelector.collectionConfigToFilter = listingDisplayScope.collectionConfig;
	                }
	                _this.listingService.attachToListingInitiated($scope.swSiteSelector.listingID, $scope.swSiteSelector.selectSite);
	            }
	            else {
	                $scope.swSiteSelector.selectSite();
	            }
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "/siteselector.html";
	    }
	    SWSiteSelector.Factory = function () {
	        var directive = function ($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder) { return new SWSiteSelector($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$http',
	            '$hibachi',
	            'listingService',
	            'scopeService',
	            'contentPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWSiteSelector;
	}());
	exports.SWSiteSelector = SWSiteSelector;


/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//modules
	var core_module_1 = __webpack_require__(275);
	//controllers
	//directives
	var swformresponselisting_1 = __webpack_require__(538);
	//models
	var formbuildermodule = angular.module('formbuilder', [core_module_1.coremodule.name])
	    .config([function () {
	    }]).run([function () {
	    }])
	    .constant('formBuilderPartialsPath', 'formbuilder/components/')
	    .directive('swFormResponseListing', swformresponselisting_1.SWFormResponseListing.Factory());
	exports.formbuildermodule = formbuildermodule;


/***/ }),
/* 538 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWFormResponseListingController = (function () {
	    //@ngInject
	    function SWFormResponseListingController($filter, $http, $hibachi, paginationService, requestService) {
	        var _this = this;
	        this.$filter = $filter;
	        this.$http = $http;
	        this.$hibachi = $hibachi;
	        this.paginationService = paginationService;
	        this.requestService = requestService;
	        this.init = function () {
	            if (angular.isUndefined(_this.formId)) {
	                throw ("Form ID is required for swFormResponseListing");
	            }
	            _this.paginator = _this.paginationService.createPagination();
	            _this.paginator.getCollection = _this.updateFormResponses;
	            _this.updateFormResponses();
	        };
	        this.export = function () {
	            var exportFormResponseRequest = _this.requestService.newAdminRequest(_this.$hibachi.getUrlWithActionPrefix() + 'api:main.exportformresponses&formID=' + _this.formId, {}, 'GET');
	            exportFormResponseRequest.promise.then(function (response) {
	                var anchor = angular.element('<a/>');
	                anchor.attr({
	                    href: 'data:attachment/csv;charset=utf-8,' + encodeURI(response),
	                    target: '_blank',
	                    download: 'formresponses' + _this.formId + '.csv'
	                })[0].click();
	            });
	        };
	        this.updateFormResponses = function () {
	            var formResponsesRequestUrl = _this.$hibachi.getUrlWithActionPrefix() + "api:main.getformresponses&formID=" + _this.formId;
	            var params = {};
	            params.currentPage = _this.paginator.currentPage || 1;
	            params.pageShow = _this.paginator.pageShow || 10;
	            var formResponsesPromise = _this.$http({
	                method: 'GET',
	                url: formResponsesRequestUrl,
	                params: params
	            });
	            formResponsesPromise.then(function (response) {
	                _this.columns = response.data.columnRecords;
	                _this.pageRecords = response.data.pageRecords;
	                _this.paginator.recordsCount = response.data.recordsCount;
	                _this.paginator.totalPages = response.data.totalPages;
	                _this.paginator.pageStart = response.data.pageRecordsStart;
	                _this.paginator.pageEnd = response.data.pageRecordsEnd;
	                for (var i = 0; i < _this.pageRecords.length; i++) {
	                    if (angular.isDefined(_this.pageRecords[i].createdDateTime)) {
	                        _this.pageRecords[i].createdDateTime = _this.dateFilter(_this.pageRecords[i].createdDateTime, "MMM dd, yyyy - hh:mm a");
	                    }
	                }
	            }, function (response) {
	                throw ("There was a problem collecting the form responses");
	            });
	        };
	        this.dateFilter = $filter("dateFilter");
	        this.init();
	    }
	    return SWFormResponseListingController;
	}());
	exports.SWFormResponseListingController = SWFormResponseListingController;
	var SWFormResponseListing = (function () {
	    //@ngInject
	    function SWFormResponseListing($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder) {
	        this.$http = $http;
	        this.$hibachi = $hibachi;
	        this.paginationService = paginationService;
	        this.formBuilderPartialsPath = formBuilderPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            "formId": "@"
	        };
	        this.controller = SWFormResponseListingController;
	        this.controllerAs = "swFormResponseListing";
	        this.link = function ($scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(formBuilderPartialsPath) + "/formresponselisting.html";
	    }
	    SWFormResponseListing.Factory = function () {
	        var directive = function ($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder) { return new SWFormResponseListing($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$http',
	            '$hibachi',
	            'paginationService',
	            'formBuilderPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWFormResponseListing;
	}());
	exports.SWFormResponseListing = SWFormResponseListing;


/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//modules
	var core_module_1 = __webpack_require__(275);
	//controllers
	var preprocessorderitem_addorderitemgiftrecipient_1 = __webpack_require__(540);
	//directives
	var swaddorderitemgiftrecipient_1 = __webpack_require__(541);
	var swgiftcardbalance_1 = __webpack_require__(543);
	var swgiftcarddetail_1 = __webpack_require__(544);
	var swgiftcardhistory_1 = __webpack_require__(545);
	var swgiftcardoverview_1 = __webpack_require__(546);
	var swgiftcardorderinfo_1 = __webpack_require__(547);
	var swgiftcardrecipientinfo_1 = __webpack_require__(548);
	var sworderitemgiftrecipientrow_1 = __webpack_require__(549);
	var giftcardmodule = angular.module('giftcard', [core_module_1.coremodule.name])
	    .config([function () {
	    }]).run([function () {
	    }])
	    .constant('giftCardPartialsPath', 'giftcard/components/')
	    .controller('preprocessorderitem_addorderitemgiftrecipient', preprocessorderitem_addorderitemgiftrecipient_1.OrderItemGiftRecipientControl)
	    .directive('swAddOrderItemGiftRecipient', swaddorderitemgiftrecipient_1.SWAddOrderItemGiftRecipient.Factory())
	    .directive('swGiftCardBalance', swgiftcardbalance_1.SWGiftCardBalance.Factory())
	    .directive('swGiftCardOverview', swgiftcardoverview_1.SWGiftCardOverview.Factory())
	    .directive('swGiftCardDetail', swgiftcarddetail_1.SWGiftCardDetail.Factory())
	    .directive('swGiftCardHistory', swgiftcardhistory_1.SWGiftCardHistory.Factory())
	    .directive('swGiftCardRecipientInfo', swgiftcardrecipientinfo_1.SWGiftCardRecipientInfo.Factory())
	    .directive('swGiftCardOrderInfo', swgiftcardorderinfo_1.SWGiftCardOrderInfo.Factory())
	    .directive('swOrderItemGiftRecipientRow', sworderitemgiftrecipientrow_1.SWOrderItemGiftRecipientRow.Factory());
	exports.giftcardmodule = giftcardmodule;


/***/ }),
/* 540 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var OrderItemGiftRecipientControl = (function () {
	    //@ngInject
	    function OrderItemGiftRecipientControl($scope, $hibachi) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$hibachi = $hibachi;
	        this.getUnassignedCountArray = function () {
	            var unassignedCountArray = new Array();
	            for (var i = 1; i <= _this.getUnassignedCount(); i++) {
	                unassignedCountArray.push(i);
	            }
	            return unassignedCountArray;
	        };
	        this.getAssignedCount = function () {
	            var assignedCount = 0;
	            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
	                assignedCount += orderItemGiftRecipient.quantity;
	            });
	            return assignedCount;
	        };
	        this.getUnassignedCount = function () {
	            var unassignedCount = _this.quantity;
	            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
	                unassignedCount -= orderItemGiftRecipient.quantity;
	            });
	            return unassignedCount;
	        };
	        this.orderItemGiftRecipients = $scope.orderItemGiftRecipients = [];
	        $scope.collection = {};
	        this.adding = false;
	        this.searchText = "";
	        var count = 1;
	    }
	    return OrderItemGiftRecipientControl;
	}());
	OrderItemGiftRecipientControl.$inject = ["$scope", "$hibachi"];
	exports.OrderItemGiftRecipientControl = OrderItemGiftRecipientControl;


/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var giftrecipient_1 = __webpack_require__(542);
	var SWAddOrderItemRecipientController = (function () {
	    //@ngInject
	    function SWAddOrderItemRecipientController($hibachi, collectionConfigService, entityService, observerService) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.collectionConfigService = collectionConfigService;
	        this.entityService = entityService;
	        this.observerService = observerService;
	        this.unassignedCountArray = [];
	        this.addGiftRecipientFromAccountList = function (account) {
	            var giftRecipient = new giftrecipient_1.GiftRecipient();
	            giftRecipient.firstName = account.firstName;
	            giftRecipient.lastName = account.lastName;
	            giftRecipient.emailAddress = account.primaryEmailAddress_emailAddress;
	            giftRecipient.account = true;
	            _this.orderItemGiftRecipients.push(giftRecipient);
	            _this.searchText = "";
	        };
	        this.getUnassignedCountArray = function () {
	            if (_this.getUnassignedCount() < _this.unassignedCountArray.length) {
	                _this.unassignedCountArray.splice(_this.getUnassignedCount(), _this.unassignedCountArray.length);
	            }
	            if (_this.getUnassignedCount() > _this.unassignedCountArray.length) {
	                for (var i = _this.unassignedCountArray.length + 1; i <= _this.getUnassignedCount(); i++) {
	                    _this.unassignedCountArray.push({ name: i, value: i });
	                }
	            }
	            return _this.unassignedCountArray;
	        };
	        this.getAssignedCount = function () {
	            _this.assignedCount = 0;
	            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
	                _this.assignedCount += orderItemGiftRecipient.quantity;
	            });
	            return _this.assignedCount;
	        };
	        this.getUnassignedCount = function () {
	            _this.unassignedCount = _this.quantity;
	            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
	                _this.unassignedCount -= orderItemGiftRecipient.quantity;
	            });
	            return _this.unassignedCount;
	        };
	        this.addGiftRecipient = function () {
	            if (_this.currentGiftRecipient.forms.createRecipient.$valid) {
	                _this.observerService.notify('updateBindings').then(function () {
	                    _this.showInvalidAddFormMessage = true;
	                    _this.adding = false;
	                    var giftRecipient = new giftrecipient_1.GiftRecipient();
	                    angular.extend(giftRecipient, _this.currentGiftRecipient.data);
	                    _this.orderItemGiftRecipients.push(giftRecipient);
	                    _this.searchText = "";
	                    _this.currentGiftRecipient = _this.entityService.newEntity("OrderItemGiftRecipient");
	                });
	            }
	            else {
	                _this.showInvalidAddFormMessage = true;
	            }
	        };
	        this.cancelAddRecipient = function () {
	            _this.adding = false;
	            _this.currentGiftRecipient.reset();
	            _this.searchText = "";
	            _this.showInvalidAddFormMessage = false;
	        };
	        this.startFormWithName = function (searchString) {
	            if (searchString === void 0) { searchString = _this.searchText; }
	            _this.adding = !_this.adding;
	            if (_this.adding) {
	                _this.currentGiftRecipient.forms.createRecipient.$setUntouched();
	                _this.currentGiftRecipient.forms.createRecipient.$setPristine();
	                if (searchString != "") {
	                    _this.currentGiftRecipient.firstName = searchString;
	                    _this.searchText = "";
	                }
	            }
	        };
	        this.getTotalQuantity = function () {
	            var totalQuantity = 0;
	            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {
	                totalQuantity += orderItemGiftRecipient.quantity;
	            });
	            return totalQuantity;
	        };
	        this.getMessageCharactersLeft = function () {
	            if (_this.currentGiftRecipient.giftMessage && _this.currentGiftRecipient.giftMessage != null) {
	                return 250 - _this.currentGiftRecipient.giftMessage.length;
	            }
	            else {
	                return 250;
	            }
	        };
	        if (angular.isUndefined(this.adding)) {
	            this.adding = false;
	        }
	        if (angular.isUndefined(this.assignedCount)) {
	            this.assignedCount = 0;
	        }
	        if (angular.isUndefined(this.searchText)) {
	            this.searchText = "";
	        }
	        var count = 1;
	        this.currentGiftRecipient = this.entityService.newEntity("OrderItemGiftRecipient");
	        if (angular.isUndefined(this.orderItemGiftRecipients)) {
	            this.orderItemGiftRecipients = [];
	        }
	        if (angular.isUndefined(this.showInvalidAddFormMessage)) {
	            this.showInvalidAddFormMessage = false;
	        }
	        this.typeaheadCollectionConfig = collectionConfigService.newCollectionConfig('Account');
	        this.typeaheadCollectionConfig.addDisplayProperty("accountID,firstName,lastName,primaryEmailAddress.emailAddress");
	        this.typeaheadCollectionConfig.addFilter("primaryEmailAddress", "null", "is not");
	    }
	    return SWAddOrderItemRecipientController;
	}());
	exports.SWAddOrderItemRecipientController = SWAddOrderItemRecipientController;
	var SWAddOrderItemGiftRecipient = (function () {
	    function SWAddOrderItemGiftRecipient($hibachi, giftCardPartialsPath, slatwallPathBuilder) {
	        this.$hibachi = $hibachi;
	        this.giftCardPartialsPath = giftCardPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.require = "^form";
	        this.restrict = "EA";
	        this.transclude = true;
	        this.scope = {};
	        this.bindToController = {
	            "quantity": "=?",
	            "orderItemGiftRecipients": "=?",
	            "adding": "=?",
	            "searchText": "=?",
	            "currentgiftRecipient": "=?",
	            "showInvalidAddFormMessage": "=?",
	            "showInvalidRowMessage": "=?",
	            "tableForm": "=?",
	            "recipientAddForm": "=?"
	        };
	        this.controller = SWAddOrderItemRecipientController;
	        this.controllerAs = "addGiftRecipientControl";
	        this.link = function ($scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/addorderitemgiftrecipient.html";
	    }
	    SWAddOrderItemGiftRecipient.Factory = function () {
	        var directive = function ($hibachi, giftCardPartialsPath, slatwallPathBuilder) { return new SWAddOrderItemGiftRecipient($hibachi, giftCardPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$hibachi',
	            'giftCardPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWAddOrderItemGiftRecipient;
	}());
	SWAddOrderItemGiftRecipient.$inject = ["$hibachi"];
	exports.SWAddOrderItemGiftRecipient = SWAddOrderItemGiftRecipient;


/***/ }),
/* 542 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var GiftRecipient = (function () {
	    function GiftRecipient(firstName, lastName, emailAddress, giftMessage, quantity, account, editing) {
	        var _this = this;
	        this.reset = function () {
	            _this.firstName = null;
	            _this.lastName = null;
	            _this.emailAddress = null;
	            _this.account = null;
	            _this.editing = false;
	            _this.quantity = 1;
	        };
	        this.quantity = 1;
	        this.editing = false;
	        this.account = false;
	    }
	    return GiftRecipient;
	}());
	exports.GiftRecipient = GiftRecipient;


/***/ }),
/* 543 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWGiftCardBalanceController = (function () {
	    function SWGiftCardBalanceController(collectionConfigService) {
	        var _this = this;
	        this.collectionConfigService = collectionConfigService;
	        this.init = function () {
	            _this.initialBalance = 0;
	            var totalDebit = 0;
	            var totalCredit = 0;
	            var transactionConfig = _this.collectionConfigService.newCollectionConfig('GiftCardTransaction');
	            transactionConfig.setDisplayProperties("giftCardTransactionID, creditAmount, debitAmount, giftCard.giftCardID");
	            transactionConfig.addFilter('giftCard.giftCardID', _this.giftCard.giftCardID);
	            transactionConfig.setAllRecords(true);
	            transactionConfig.setOrderBy("createdDateTime|DESC");
	            var transactionPromise = transactionConfig.getEntity();
	            transactionPromise.then(function (response) {
	                _this.transactions = response.records;
	                var initialCreditIndex = _this.transactions.length - 1;
	                _this.initialBalance = _this.transactions[initialCreditIndex].creditAmount;
	                angular.forEach(_this.transactions, function (transaction, index) {
	                    if (!angular.isString(transaction.debitAmount)) {
	                        totalDebit += transaction.debitAmount;
	                    }
	                    if (!angular.isString(transaction.creditAmount)) {
	                        totalCredit += transaction.creditAmount;
	                    }
	                });
	                _this.currentBalance = totalCredit - totalDebit;
	                _this.balancePercentage = parseInt(((_this.currentBalance / _this.initialBalance) * 100).toString());
	            });
	        };
	        this.init();
	    }
	    return SWGiftCardBalanceController;
	}());
	SWGiftCardBalanceController.$inject = ["collectionConfigService"];
	exports.SWGiftCardBalanceController = SWGiftCardBalanceController;
	var SWGiftCardBalance = (function () {
	    function SWGiftCardBalance(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
	        this.collectionConfigService = collectionConfigService;
	        this.giftCardPartialsPath = giftCardPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.scope = {};
	        this.bindToController = {
	            giftCard: "=?",
	            transactions: "=?",
	            initialBalance: "=?",
	            currentBalance: "=?",
	            balancePercentage: "=?"
	        };
	        this.controller = SWGiftCardBalanceController;
	        this.controllerAs = "swGiftCardBalance";
	        this.link = function (scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/balance.html";
	        this.restrict = "EA";
	    }
	    SWGiftCardBalance.Factory = function () {
	        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardBalance(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'collectionConfigService',
	            'giftCardPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWGiftCardBalance;
	}());
	exports.SWGiftCardBalance = SWGiftCardBalance;


/***/ }),
/* 544 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWGiftCardDetailController = (function () {
	    function SWGiftCardDetailController(collectionConfigService) {
	        var _this = this;
	        this.collectionConfigService = collectionConfigService;
	        this.init = function () {
	            var giftCardConfig = _this.collectionConfigService.newCollectionConfig('GiftCard');
	            giftCardConfig.setDisplayProperties("giftCardID, giftCardCode, currencyCode, giftCardPin, expirationDate, ownerFirstName, ownerLastName, ownerEmailAddress, activeFlag, balanceAmount,  originalOrderItem.sku.product.productName, originalOrderItem.sku.product.productID, originalOrderItem.order.orderID, originalOrderItem.orderItemID, orderItemGiftRecipient.firstName, orderItemGiftRecipient.lastName, orderItemGiftRecipient.emailAddress, orderItemGiftRecipient.giftMessage, ownerAccount.accountID, ownerAccount.firstName, ownerAccount.lastName");
	            giftCardConfig.addFilter('giftCardID', _this.giftCardId);
	            giftCardConfig.setAllRecords(true);
	            giftCardConfig.getEntity().then(function (response) {
	                _this.giftCard = response.records[0];
	            });
	        };
	        this.init();
	    }
	    return SWGiftCardDetailController;
	}());
	SWGiftCardDetailController.$inject = ["collectionConfigService"];
	exports.SWGiftCardDetailController = SWGiftCardDetailController;
	var SWGiftCardDetail = (function () {
	    function SWGiftCardDetail(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
	        this.collectionConfigService = collectionConfigService;
	        this.giftCardPartialsPath = giftCardPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.scope = {};
	        this.bindToController = {
	            giftCardId: "@",
	            giftCard: "=?"
	        };
	        this.controller = SWGiftCardDetailController;
	        this.controllerAs = "swGiftCardDetail";
	        this.link = function (scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/basic.html";
	        this.restrict = "E";
	    }
	    SWGiftCardDetail.Factory = function () {
	        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardDetail(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'collectionConfigService',
	            'giftCardPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWGiftCardDetail;
	}());
	exports.SWGiftCardDetail = SWGiftCardDetail;


/***/ }),
/* 545 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWGiftCardHistoryController = (function () {
	    //@ngInject
	    function SWGiftCardHistoryController(collectionConfigService, $hibachi) {
	        var _this = this;
	        this.collectionConfigService = collectionConfigService;
	        this.$hibachi = $hibachi;
	        var initialBalance = 0;
	        var totalDebit = 0;
	        var transactionConfig = this.collectionConfigService.newCollectionConfig('GiftCardTransaction');
	        transactionConfig.setDisplayProperties("giftCardTransactionID, creditAmount, debitAmount, createdDateTime, giftCard.giftCardID, orderPayment.order.orderID, orderPayment.order.orderNumber, orderPayment.order.orderOpenDateTime", "id,credit,debit,created,giftcardID,ordernumber,orderdatetime");
	        transactionConfig.addFilter('giftCard.giftCardID', this.giftCard.giftCardID);
	        transactionConfig.setAllRecords(true);
	        transactionConfig.setOrderBy("createdDateTime|DESC");
	        var emailBounceConfig = this.collectionConfigService.newCollectionConfig('EmailBounce');
	        emailBounceConfig.setDisplayProperties("emailBounceID, rejectedEmailTo, rejectedEmailSendTime, relatedObject, relatedObjectID");
	        emailBounceConfig.addFilter('relatedObjectID', this.giftCard.giftCardID);
	        emailBounceConfig.setAllRecords(true);
	        emailBounceConfig.setOrderBy("rejectedEmailSendTime|DESC");
	        var emailConfig = this.collectionConfigService.newCollectionConfig('Email');
	        emailConfig.setDisplayProperties('emailID, emailTo, relatedObject, relatedObjectID, createdDateTime');
	        emailConfig.addFilter('relatedObjectID', this.giftCard.giftCardID);
	        emailConfig.setAllRecords(true);
	        emailConfig.setOrderBy("createdDateTime|DESC");
	        emailConfig.getEntity().then(function (response) {
	            _this.emails = response.records;
	            emailBounceConfig.getEntity().then(function (response) {
	                _this.bouncedEmails = response.records;
	                transactionConfig.getEntity().then(function (response) {
	                    _this.transactions = response.records;
	                    var initialCreditIndex = _this.transactions.length - 1;
	                    var initialBalance = _this.transactions[initialCreditIndex].creditAmount;
	                    var currentBalance = initialBalance;
	                    for (var i = initialCreditIndex; i >= 0; i--) {
	                        var transaction = _this.transactions[i];
	                        if (typeof transaction.debitAmount !== "string") {
	                            transaction.debit = true;
	                            totalDebit += transaction.debitAmount;
	                        }
	                        else if (typeof transaction.creditAmount !== "string") {
	                            if (i != initialCreditIndex) {
	                                currentBalance += transaction.creditAmount;
	                            }
	                            transaction.debit = false;
	                        }
	                        transaction.detailOrderLink = $hibachi.buildUrl('admin:entity.detailOrder', 'orderID=' + transaction.orderPayment_order_orderID);
	                        var tempCurrentBalance = currentBalance - totalDebit;
	                        transaction.balance = tempCurrentBalance;
	                        if (i == initialCreditIndex) {
	                            var activeCard = {
	                                activated: true,
	                                debit: false,
	                                activeAt: transaction.orderPayment_order_orderOpenDateTime,
	                                balance: initialBalance
	                            };
	                            _this.transactions.splice(i, 0, activeCard);
	                            if (angular.isDefined(_this.bouncedEmails)) {
	                                angular.forEach(_this.bouncedEmails, function (email, bouncedEmailIndex) {
	                                    email.bouncedEmail = true;
	                                    email.balance = initialBalance;
	                                    _this.transactions.splice(i, 0, email);
	                                });
	                            }
	                            if (angular.isDefined(_this.emails)) {
	                                angular.forEach(_this.emails, function (email) {
	                                    email.emailSent = true;
	                                    email.debit = false;
	                                    email.sentAt = email.createdDateTime;
	                                    email.balance = initialBalance;
	                                    _this.transactions.splice(i, 0, email);
	                                });
	                            }
	                        }
	                    }
	                });
	            });
	        });
	        var orderConfig = this.collectionConfigService.newCollectionConfig('Order');
	        orderConfig.setDisplayProperties("orderID,orderNumber,orderOpenDateTime,account.firstName,account.lastName,account.accountID,account.primaryEmailAddress.emailAddress");
	        orderConfig.addFilter('orderID', this.giftCard.originalOrderItem_order_orderID);
	        orderConfig.setAllRecords(true);
	        orderConfig.getEntity().then(function (response) {
	            _this.order = response.records[0];
	        });
	    }
	    return SWGiftCardHistoryController;
	}());
	exports.SWGiftCardHistoryController = SWGiftCardHistoryController;
	var SWGiftCardHistory = (function () {
	    //@ngInject
	    function SWGiftCardHistory(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
	        this.collectionConfigService = collectionConfigService;
	        this.giftCardPartialsPath = giftCardPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.scope = {};
	        this.bindToController = {
	            giftCard: "=?",
	            transactions: "=?",
	            bouncedEmails: "=?",
	            order: "=?"
	        };
	        this.controller = SWGiftCardHistoryController;
	        this.controllerAs = "swGiftCardHistory";
	        this.link = function (scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/history.html";
	        this.restrict = "EA";
	    }
	    SWGiftCardHistory.Factory = function () {
	        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardHistory(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'collectionConfigService',
	            'giftCardPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWGiftCardHistory;
	}());
	exports.SWGiftCardHistory = SWGiftCardHistory;


/***/ }),
/* 546 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWGiftCardOverviewController = (function () {
	    function SWGiftCardOverviewController() {
	    }
	    return SWGiftCardOverviewController;
	}());
	exports.SWGiftCardOverviewController = SWGiftCardOverviewController;
	var SWGiftCardOverview = (function () {
	    function SWGiftCardOverview(giftCardPartialsPath, slatwallPathBuilder) {
	        this.giftCardPartialsPath = giftCardPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.scope = {};
	        this.bindToController = {
	            giftCard: "=?"
	        };
	        this.controller = SWGiftCardOverviewController;
	        this.controllerAs = "swGiftCardOverview";
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/overview.html";
	        this.restrict = "EA";
	    }
	    SWGiftCardOverview.Factory = function () {
	        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardOverview(giftCardPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'giftCardPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWGiftCardOverview;
	}());
	exports.SWGiftCardOverview = SWGiftCardOverview;


/***/ }),
/* 547 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWGiftCardOrderInfoController = (function () {
	    function SWGiftCardOrderInfoController(collectionConfigService) {
	        var _this = this;
	        this.collectionConfigService = collectionConfigService;
	        this.init = function () {
	            var orderConfig = _this.collectionConfigService.newCollectionConfig('Order');
	            orderConfig.setDisplayProperties("orderID, orderNumber, orderOpenDateTime, account.firstName, account.lastName");
	            orderConfig.addFilter('orderID', _this.giftCard.originalOrderItem_order_orderID);
	            orderConfig.setAllRecords(true);
	            orderConfig.getEntity().then(function (response) {
	                _this.order = response.records[0];
	            });
	        };
	        this.init();
	    }
	    return SWGiftCardOrderInfoController;
	}());
	SWGiftCardOrderInfoController.$inject = ["collectionConfigService"];
	exports.SWGiftCardOrderInfoController = SWGiftCardOrderInfoController;
	var SWGiftCardOrderInfo = (function () {
	    function SWGiftCardOrderInfo(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {
	        this.collectionConfigService = collectionConfigService;
	        this.giftCardPartialsPath = giftCardPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.scope = {};
	        this.bindToController = {
	            giftCard: "=?",
	            order: "=?"
	        };
	        this.controller = SWGiftCardOrderInfoController;
	        this.controllerAs = "swGiftCardOrderInfo";
	        this.link = function (scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/orderinfo.html";
	        this.restrict = "EA";
	    }
	    SWGiftCardOrderInfo.Factory = function () {
	        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardOrderInfo(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'collectionConfigService',
	            'giftCardPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWGiftCardOrderInfo;
	}());
	SWGiftCardOrderInfo.$inject = ["collectionConfigService", "partialsPath"];
	exports.SWGiftCardOrderInfo = SWGiftCardOrderInfo;


/***/ }),
/* 548 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWGiftCardRecipientInfoController = (function () {
	    //@ngInject
	    function SWGiftCardRecipientInfoController($hibachi) {
	        this.$hibachi = $hibachi;
	        if (angular.isDefined(this.giftCard.ownerAccount_accountID)) {
	            this.detailAccountLink = $hibachi.buildUrl('admin:entity.detailaccount', 'accountID=' + this.giftCard.ownerAccount_accountID);
	        }
	    }
	    return SWGiftCardRecipientInfoController;
	}());
	exports.SWGiftCardRecipientInfoController = SWGiftCardRecipientInfoController;
	var SWGiftCardRecipientInfo = (function () {
	    function SWGiftCardRecipientInfo(giftCardPartialsPath, slatwallPathBuilder) {
	        this.giftCardPartialsPath = giftCardPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.scope = {};
	        this.bindToController = {
	            giftCard: "=?"
	        };
	        this.controller = SWGiftCardRecipientInfoController;
	        this.controllerAs = "swGiftCardRecipientInfo";
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/recipientinfo.html";
	        this.restrict = "EA";
	    }
	    SWGiftCardRecipientInfo.Factory = function () {
	        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardRecipientInfo(giftCardPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'giftCardPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWGiftCardRecipientInfo;
	}());
	exports.SWGiftCardRecipientInfo = SWGiftCardRecipientInfo;


/***/ }),
/* 549 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWOrderItemGiftRecipientRowController = (function () {
	    function SWOrderItemGiftRecipientRowController() {
	        var _this = this;
	        this.edit = function (recipient) {
	            angular.forEach(_this.recipients, function (recipient) {
	                recipient.editing = false;
	            });
	            if (!recipient.editing) {
	                recipient.editing = true;
	            }
	        };
	        this.delete = function (recipient) {
	            _this.recipients.splice(_this.recipients.indexOf(recipient), 1);
	        };
	        this.saveGiftRecipient = function (recipient) {
	            if (_this.tableForm.$valid) {
	                _this.showInvalidRecipientMessage = false;
	                recipient.editing = false;
	            }
	            else {
	                _this.showInvalidRecipientMessage = true;
	            }
	        };
	        this.getQuantity = function () {
	            if (isNaN(_this.quantity)) {
	                return 0;
	            }
	            else {
	                return _this.quantity;
	            }
	        };
	        this.getUnassignedCount = function () {
	            var unassignedCount = _this.getQuantity();
	            angular.forEach(_this.recipients, function (recipient) {
	                unassignedCount -= recipient.quantity;
	            });
	            return unassignedCount;
	        };
	        this.getMessageCharactersLeft = function () {
	            if (angular.isDefined(_this.recipient.giftMessage) && _this.recipient.giftMessage != null) {
	                return 250 - _this.recipient.giftMessage.length;
	            }
	            else {
	                return 250;
	            }
	        };
	        this.getUnassignedCountArray = function () {
	            var unassignedCountArray = new Array();
	            for (var i = 1; i <= _this.recipient.quantity + _this.getUnassignedCount(); i++) {
	                unassignedCountArray.push(i);
	            }
	            return unassignedCountArray;
	        };
	    }
	    return SWOrderItemGiftRecipientRowController;
	}());
	exports.SWOrderItemGiftRecipientRowController = SWOrderItemGiftRecipientRowController;
	var SWOrderItemGiftRecipientRow = (function () {
	    function SWOrderItemGiftRecipientRow(giftCardPartialsPath, slatwallPathBuilder) {
	        var _this = this;
	        this.giftCardPartialsPath = giftCardPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.restrict = 'AE';
	        this.scope = {
	            recipient: "=",
	            recipients: "=",
	            quantity: "=",
	            showInvalidRecipientMessage: "=",
	            tableForm: "=?",
	            index: "="
	        };
	        this.bindToController = {
	            recipient: "=",
	            recipients: "=",
	            quantity: "=",
	            showInvalidRecipientMessage: "=",
	            tableForm: "=?",
	            index: "="
	        };
	        this.controller = SWOrderItemGiftRecipientRowController;
	        this.controllerAs = "giftRecipientRowControl";
	        this.init = function () {
	            _this.templateUrl = _this.slatwallPathBuilder.buildPartialsPath(_this.giftCardPartialsPath) + "/orderitemgiftrecipientrow.html";
	        };
	        this.init();
	    }
	    SWOrderItemGiftRecipientRow.Factory = function () {
	        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWOrderItemGiftRecipientRow(giftCardPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'giftCardPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWOrderItemGiftRecipientRow;
	}());
	exports.SWOrderItemGiftRecipientRow = SWOrderItemGiftRecipientRow;


/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//modules
	var core_module_1 = __webpack_require__(275);
	//controllers
	//directives
	var swaddoptiongroup_1 = __webpack_require__(551);
	var swoptionsforoptiongroup_1 = __webpack_require__(552);
	var optiongroupmodule = angular.module('optiongroup', [core_module_1.coremodule.name])
	    .config([function () {
	    }]).run([function () {
	    }])
	    .constant('optionGroupPartialsPath', 'optiongroup/components/')
	    .directive('swAddOptionGroup', swaddoptiongroup_1.SWAddOptionGroup.Factory())
	    .directive('swOptionsForOptionGroup', swoptionsforoptiongroup_1.SWOptionsForOptionGroup.Factory());
	exports.optiongroupmodule = optiongroupmodule;


/***/ }),
/* 551 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var optionWithGroup = (function () {
	    function optionWithGroup(optionID, optionGroupID, match) {
	        var _this = this;
	        this.optionID = optionID;
	        this.optionGroupID = optionGroupID;
	        this.match = match;
	        this.toString = function () {
	            return _this.optionID;
	        };
	    }
	    return optionWithGroup;
	}());
	exports.optionWithGroup = optionWithGroup;
	var SWAddOptionGroupController = (function () {
	    // @ngInject
	    function SWAddOptionGroupController($hibachi, $timeout, collectionConfigService, observerService, utilityService) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.observerService = observerService;
	        this.utilityService = utilityService;
	        this.getOptionList = function () {
	            return _this.utilityService.arrayToList(_this.selection);
	        };
	        this.validateOptions = function (args) {
	            _this.addToSelection(args[0], args[1].optionGroupID);
	            if (_this.hasCompleteSelection()) {
	                if (_this.validateSelection()) {
	                    _this.selectedOptionList = _this.getOptionList();
	                    _this.showValidFlag = true;
	                    _this.showInvalidFlag = false;
	                }
	                else {
	                    _this.showValidFlag = false;
	                    _this.showInvalidFlag = true;
	                }
	            }
	        };
	        this.validateSelection = function () {
	            var valid = true;
	            angular.forEach(_this.usedOptions, function (combination) {
	                if (valid) {
	                    var counter = 0;
	                    angular.forEach(combination, function (usedOption) {
	                        if (_this.selection[counter].optionGroupID === usedOption.optionGroup_optionGroupID
	                            && _this.selection[counter].optionID != usedOption.optionID) {
	                            _this.selection[counter].match = true;
	                        }
	                        counter++;
	                    });
	                    if (!_this.allSelectionFieldsValidForThisCombination()) {
	                        valid = false;
	                    }
	                }
	            });
	            return valid;
	        };
	        this.allSelectionFieldsValidForThisCombination = function () {
	            var matches = 0;
	            angular.forEach(_this.selection, function (pair) {
	                if (!pair.match) {
	                    matches++;
	                }
	                //reset 
	                pair.match = false;
	            });
	            return matches != _this.selection.length;
	        };
	        this.hasCompleteSelection = function () {
	            var answer = true;
	            angular.forEach(_this.selection, function (pair) {
	                if (pair.optionID.length === 0) {
	                    answer = false;
	                }
	            });
	            return answer;
	        };
	        this.addToSelection = function (optionId, optionGroupId) {
	            angular.forEach(_this.selection, function (pair) {
	                if (pair.optionGroupID === optionGroupId) {
	                    pair.optionID = optionId;
	                    return true;
	                }
	            });
	            return false;
	        };
	        this.optionGroupIds = this.optionGroups.split(",");
	        this.optionGroupIds.sort();
	        this.selection = [];
	        this.showValidFlag = false;
	        this.showInvalidFlag = false;
	        for (var i = 0; i < this.optionGroupIds.length; i++) {
	            this.selection.push(new optionWithGroup("", this.optionGroupIds[i], false));
	        }
	        this.productCollectionConfig = collectionConfigService.newCollectionConfig("Product");
	        this.productCollectionConfig.addDisplayProperty("productID, productName, productType.productTypeID");
	        this.productCollectionConfig.getEntity(this.productId).then(function (response) {
	            _this.product = response;
	            _this.productTypeID = response.productType_productTypeID;
	            _this.skuCollectionConfig = collectionConfigService.newCollectionConfig("Sku");
	            _this.skuCollectionConfig.addDisplayProperty("skuID, skuCode, product.productID");
	            _this.skuCollectionConfig.addFilter("product.productID", _this.productId);
	            _this.skuCollectionConfig.setAllRecords(true);
	            _this.usedOptions = [];
	            _this.skuCollectionConfig.getEntity().then(function (response) {
	                _this.skus = response.records;
	                angular.forEach(_this.skus, function (sku) {
	                    var optionCollectionConfig = collectionConfigService.newCollectionConfig("Option");
	                    optionCollectionConfig.addDisplayProperty("optionID, optionName, optionCode, optionGroup.optionGroupID");
	                    optionCollectionConfig.setAllRecords(true);
	                    optionCollectionConfig.addFilter("skus.skuID", sku.skuID);
	                    optionCollectionConfig.getEntity().then(function (response) {
	                        _this.usedOptions.push(utilityService.arraySorter(response.records, ["optionGroup_optionGroupID"]));
	                    });
	                });
	            });
	        });
	        this.observerService.attach(this.validateOptions, "validateOptions");
	    }
	    return SWAddOptionGroupController;
	}());
	exports.SWAddOptionGroupController = SWAddOptionGroupController;
	var SWAddOptionGroup = (function () {
	    // @ngInject
	    function SWAddOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) {
	        this.$hibachi = $hibachi;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.observerService = observerService;
	        this.optionGroupPartialsPath = optionGroupPartialsPath;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            productId: "@",
	            optionGroups: "="
	        };
	        this.controller = SWAddOptionGroupController;
	        this.controllerAs = "swAddOptionGroup";
	        this.link = function ($scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(optionGroupPartialsPath) + "addoptiongroup.html";
	    }
	    SWAddOptionGroup.Factory = function () {
	        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) { return new SWAddOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$hibachi',
	            '$timeout',
	            'collectionConfigService',
	            'observerService',
	            'optionGroupPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWAddOptionGroup;
	}());
	exports.SWAddOptionGroup = SWAddOptionGroup;


/***/ }),
/* 552 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWOptionsForOptionGroupController = (function () {
	    // @ngInject
	    function SWOptionsForOptionGroupController($hibachi, $timeout, collectionConfigService, observerService) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.observerService = observerService;
	        this.validateChoice = function () {
	            _this.observerService.notify("validateOptions", [_this.selectedOption, _this.optionGroup]);
	        };
	        this.optionGroupCollectionConfig = collectionConfigService.newCollectionConfig("OptionGroup");
	        this.optionGroupCollectionConfig.getEntity(this.optionGroupId).then(function (response) {
	            _this.optionGroup = response;
	        });
	        this.optionCollectionConfig = collectionConfigService.newCollectionConfig("Option");
	        this.optionCollectionConfig.setDisplayProperties("optionID, optionName, optionGroup.optionGroupID");
	        this.optionCollectionConfig.addFilter("optionGroup.optionGroupID", this.optionGroupId);
	        this.optionCollectionConfig.setOrderBy('sortOrder|ASC');
	        this.optionCollectionConfig.setAllRecords(true);
	        this.optionCollectionConfig.getEntity().then(function (response) {
	            _this.options = response.records;
	        });
	    }
	    return SWOptionsForOptionGroupController;
	}());
	exports.SWOptionsForOptionGroupController = SWOptionsForOptionGroupController;
	var SWOptionsForOptionGroup = (function () {
	    // @ngInject
	    function SWOptionsForOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) {
	        this.$hibachi = $hibachi;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.observerService = observerService;
	        this.optionGroupPartialsPath = optionGroupPartialsPath;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            optionGroupId: "@",
	            usedOptions: "="
	        };
	        this.controller = SWOptionsForOptionGroupController;
	        this.controllerAs = "swOptionsForOptionGroup";
	        this.link = function ($scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(optionGroupPartialsPath) + "optionsforoptiongroup.html";
	    }
	    SWOptionsForOptionGroup.Factory = function () {
	        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) { return new SWOptionsForOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$hibachi',
	            '$timeout',
	            'collectionConfigService',
	            'observerService',
	            'optionGroupPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWOptionsForOptionGroup;
	}());
	exports.SWOptionsForOptionGroup = SWOptionsForOptionGroup;


/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path="../../typings/tsd.d.ts" />
	/// <reference path="../../typings/slatwallTypescript.d.ts" />
	var core_module_1 = __webpack_require__(275);
	//directives
	var swchildorderitem_1 = __webpack_require__(554);
	var sworderitem_1 = __webpack_require__(555);
	var swoishippinglabelstamp_1 = __webpack_require__(556);
	var sworderitemdetailstamp_1 = __webpack_require__(557);
	var sworderitems_1 = __webpack_require__(558);
	var swresizedimage_1 = __webpack_require__(559);
	var orderitemmodule = angular.module('hibachi.orderitem', [core_module_1.coremodule.name])
	    .run([function () {
	    }])
	    .directive('swChildOrderItem', swchildorderitem_1.SWChildOrderItem.Factory())
	    .directive('swOrderItem', sworderitem_1.SWOrderItem.Factory())
	    .directive('swoishippinglabelstamp', swoishippinglabelstamp_1.SWOiShippingLabelStamp.Factory())
	    .directive('swOrderItemDetailStamp', sworderitemdetailstamp_1.SWOrderItemDetailStamp.Factory())
	    .directive('swOrderItems', sworderitems_1.SWOrderItems.Factory())
	    .directive('swresizedimage', swresizedimage_1.SWResizedImage.Factory())
	    .constant('orderItemPartialsPath', 'orderitem/components/');
	exports.orderitemmodule = orderitemmodule;


/***/ }),
/* 554 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWChildOrderItem = (function () {
	    function SWChildOrderItem($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) {
	        return {
	            restrict: "A",
	            scope: {
	                orderItem: "=",
	                orderId: "@",
	                childOrderItems: "=",
	                attributes: "="
	            },
	            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "childorderitem.html",
	            link: function (scope, element, attr) {
	                var columnsConfig = [
	                    {
	                        "isDeletable": false,
	                        "isExportable": true,
	                        "propertyIdentifier": "_orderitem.orderItemID",
	                        "ormtype": "id",
	                        "isVisible": true,
	                        "isSearchable": true,
	                        "title": "Order Item ID"
	                    },
	                    {
	                        "title": "Order Item Type",
	                        "propertyIdentifier": "_orderitem.orderItemType",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Order Item Price",
	                        "propertyIdentifier": "_orderitem.price",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Sku Name",
	                        "propertyIdentifier": "_orderitem.sku.skuName",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Sku Price",
	                        "propertyIdentifier": "_orderitem.skuPrice",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Sku ID",
	                        "propertyIdentifier": "_orderitem.sku.skuID",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "SKU Code",
	                        "propertyIdentifier": "_orderitem.sku.skuCode",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Product ID",
	                        "propertyIdentifier": "_orderitem.sku.product.productID",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Product Name",
	                        "propertyIdentifier": "_orderitem.sku.product.productName",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Product Description",
	                        "propertyIdentifier": "_orderitem.sku.product.productDescription",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Image File Name",
	                        "propertyIdentifier": "_orderitem.sku.imageFile",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.sku.skuPrice",
	                        "ormtype": "string"
	                    },
	                    {
	                        "title": "Product Type",
	                        "propertyIdentifier": "_orderitem.sku.product.productType",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.sku.baseProductType",
	                        "persistent": false
	                    },
	                    {
	                        "title": "Qty.",
	                        "propertyIdentifier": "_orderitem.quantity",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Fulfillment Method Name",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Fulfillment ID",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.orderFulfillmentID",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Fulfillment Method Type",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Street Address",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.streetAddress",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Street Address 2",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.street2Address",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Postal Code",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.postalCode",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "City",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.city",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "State",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.stateCode",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Country",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.countryCode",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Total",
	                        "propertyIdentifier": "_orderitem.itemTotal",
	                        "persistent": false
	                    },
	                    {
	                        "title": "Discount Amount",
	                        "propertyIdentifier": "_orderitem.discountAmount",
	                        "persistent": false
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.extendedPrice",
	                        "persistent": false
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.productBundleGroup.amount"
	                    },
	                    {
	                        "title": "Product Bundle Group",
	                        "propertyIdentifier": "_orderitem.productBundleGroup.productBundleGroupID",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.productBundleGroup.amountType"
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.productBundleGroupPrice",
	                        "persistent": false
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.productBundlePrice",
	                        "persistent": false
	                    }
	                ];
	                //add attributes to the column config
	                angular.forEach(scope.attributes, function (attribute) {
	                    var attributeColumn = {
	                        propertyIdentifier: "_orderitem." + attribute.attributeCode,
	                        attributeID: attribute.attributeID,
	                        attributeSetObject: "orderItem"
	                    };
	                    columnsConfig.push(attributeColumn);
	                });
	                var filterGroupsConfig = [
	                    {
	                        "filterGroup": [
	                            {
	                                "propertyIdentifier": "_orderitem.parentOrderItem.orderItemID",
	                                "comparisonOperator": "=",
	                                "value": scope.orderItem.$$getID(),
	                            }
	                        ]
	                    }
	                ];
	                var options = {
	                    columnsConfig: angular.toJson(columnsConfig),
	                    filterGroupsConfig: angular.toJson(filterGroupsConfig),
	                    allRecords: true
	                };
	                //hide the children on click
	                scope.hideChildren = function (orderItem) {
	                    //Set all child order items to clicked = false.
	                    angular.forEach(scope.childOrderItems, function (child) {
	                        console.dir(child);
	                        child.hide = !child.hide;
	                        scope.orderItem.clicked = !scope.orderItem.clicked;
	                    });
	                };
	                /**
	                * Returns a list of child order items.
	                */
	                scope.getChildOrderItems = function (orderItem) {
	                    orderItem.clicked = true;
	                    if (!scope.orderItem.childItemsRetrieved) {
	                        scope.orderItem.childItemsRetrieved = true;
	                        var orderItemsPromise = $hibachi.getEntity('orderItem', options);
	                        orderItemsPromise.then(function (value) {
	                            var collectionConfig = {};
	                            collectionConfig.columns = columnsConfig;
	                            collectionConfig.baseEntityName = 'SlatwallOrderItem';
	                            collectionConfig.baseEntityAlias = '_orderitem';
	                            var childOrderItems = $hibachi.populateCollection(value.records, collectionConfig);
	                            angular.forEach(childOrderItems, function (childOrderItem) {
	                                childOrderItem.hide = false;
	                                childOrderItem.depth = orderItem.depth + 1;
	                                childOrderItem.data.parentOrderItem = orderItem;
	                                childOrderItem.data.parentOrderItemQuantity = scope.orderItem.data.quantity / scope.orderItem.data.parentOrderItemQuantity;
	                                scope.childOrderItems.splice(scope.childOrderItems.indexOf(orderItem) + 1, 0, childOrderItem);
	                                childOrderItem.data.productBundleGroupPercentage = 1;
	                                if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageIncrease') {
	                                    childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;
	                                }
	                                else if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageDecrease') {
	                                    childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;
	                                }
	                            });
	                        });
	                    }
	                };
	            }
	        };
	    }
	    SWChildOrderItem.Factory = function () {
	        var directive = function ($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) { return new SWChildOrderItem($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$http',
	            '$compile',
	            '$templateCache',
	            '$hibachi',
	            'orderItemPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWChildOrderItem;
	}());
	exports.SWChildOrderItem = SWChildOrderItem;


/***/ }),
/* 555 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWOrderItem = (function () {
	    //@ngInject
	    function SWOrderItem($log, $compile, $http, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) {
	        return {
	            restrict: "A",
	            scope: {
	                orderItem: "=",
	                orderId: "@",
	                attributes: "=",
	                paginator: "=?"
	            },
	            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem.html",
	            link: function (scope, element, attr) {
	                $log.debug('order item init');
	                $log.debug(scope.orderItem);
	                scope.orderItem.clicked = false; //Never been clicked
	                scope.orderItem.details = [];
	                scope.orderItem.events = [];
	                scope.orderItem.queuePosition;
	                scope.orderItem.onWaitlist = false;
	                scope.orderItem.isPending = false;
	                scope.orderItem.isRegistered = false;
	                var foundPosition = false;
	                if (scope.orderItem.data.sku.data.product.data.productType.data.systemCode === 'event') {
	                    var eventRegistrationPromise = scope.orderItem.$$getEventRegistrations();
	                    eventRegistrationPromise.then(function () {
	                        angular.forEach(scope.orderItem.data.eventRegistrations, function (eventRegistration) {
	                            $log.debug(eventRegistration);
	                            var eventRegistrationPromise = eventRegistration.$$getEventRegistrationStatusType();
	                            eventRegistrationPromise.then(function (rec) {
	                                $log.debug(rec);
	                                angular.forEach(rec.records, function (record) {
	                                    $log.debug("Records");
	                                    $log.debug(record.eventRegistrationStatusType);
	                                    angular.forEach(record.eventRegistrationStatusType, function (statusType) {
	                                        if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstWaitlisted") {
	                                            scope.orderItem.onWaitlist = true;
	                                            $log.debug("Found + " + statusType.systemCode);
	                                            //Because the customer is waitlisted, we need to get the number of customers ahead of them in the queue.
	                                            var position = getPositionInQueueFor(scope.orderItem);
	                                            scope.orderItem.queuePosition = position;
	                                        }
	                                        else if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstRegistered") {
	                                            scope.orderItem.isRegistered = true;
	                                            $log.debug("Found + " + statusType.systemCode);
	                                        }
	                                        else if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstPendingApproval") {
	                                            scope.orderItem.isPending = true;
	                                            $log.debug("Found + " + statusType.systemCode);
	                                        }
	                                        else {
	                                            $log.error("Couldn't resolve a status type for: " + statusType.systemCode);
	                                        }
	                                    });
	                                });
	                            });
	                        });
	                    });
	                }
	                /**
	                * Returns the current position in the queue for an orderItem that's on the waiting list.
	                */
	                var getPositionInQueueFor = function (orderItem) {
	                    $log.debug("Retrieving position in Queue: ");
	                    var queueConfig = [
	                        {
	                            "propertyIdentifier": "_eventregistration.waitlistQueuePositionStruct",
	                            "isVisible": true,
	                            "persistent": false,
	                            "title": "Event Registrations"
	                        }
	                    ];
	                    var queueGroupsConfig = [
	                        {
	                            "filterGroup": [
	                                {
	                                    "propertyIdentifier": "_eventregistration.orderItem.orderItemID",
	                                    "comparisonOperator": "=",
	                                    "value": orderItem.$$getID(),
	                                }
	                            ]
	                        }
	                    ];
	                    var queueOptions = {
	                        columnsConfig: angular.toJson(queueConfig),
	                        filterGroupsConfig: angular.toJson(queueGroupsConfig),
	                        allRecords: true
	                    };
	                    var positionPromise = $hibachi.getEntity('EventRegistration', queueOptions);
	                    $log.debug(positionPromise);
	                    positionPromise.then(function (value) {
	                        angular.forEach(value.records, function (position) {
	                            $log.debug("Position: " + position.waitlistQueuePositionStruct);
	                            if (position.waitlistQueuePositionStruct !== -1) {
	                                scope.orderItem.queuePosition = position.waitlistQueuePositionStruct; //Use the value.
	                                return position.waitlistQueuePositionStruct;
	                            }
	                        });
	                    });
	                };
	                //define how we get child order items
	                var columnsConfig = [
	                    {
	                        "isDeletable": false,
	                        "isExportable": true,
	                        "propertyIdentifier": "_orderitem.orderItemID",
	                        "ormtype": "id",
	                        "isVisible": true,
	                        "isSearchable": true,
	                        "title": "Order Item ID"
	                    },
	                    {
	                        "title": "Order Item Type",
	                        "propertyIdentifier": "_orderitem.orderItemType",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Order Item Price",
	                        "propertyIdentifier": "_orderitem.price",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Sku Name",
	                        "propertyIdentifier": "_orderitem.sku.skuName",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Sku Price",
	                        "propertyIdentifier": "_orderitem.skuPrice",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Sku ID",
	                        "propertyIdentifier": "_orderitem.sku.skuID",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "SKU Code",
	                        "propertyIdentifier": "_orderitem.sku.skuCode",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Product Bundle Group",
	                        "propertyIdentifier": "_orderitem.productBundleGroup.productBundleGroupID",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Product ID",
	                        "propertyIdentifier": "_orderitem.sku.product.productID",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Product Name",
	                        "propertyIdentifier": "_orderitem.sku.product.productName",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Product Type",
	                        "propertyIdentifier": "_orderitem.sku.product.productType",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Product Description",
	                        "propertyIdentifier": "_orderitem.sku.product.productDescription",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.sku.baseProductType",
	                        "persistent": false
	                    },
	                    {
	                        "title": "Event Start Date",
	                        "propertyIdentifier": "_orderitem.sku.eventStartDateTime",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Product Description",
	                        "propertyIdentifier": "_orderitem.sku.options",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.skuPrice",
	                        "ormtype": "string"
	                    },
	                    {
	                        "title": "Image File Name",
	                        "propertyIdentifier": "_orderitem.sku.imageFile",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Qty.",
	                        "propertyIdentifier": "_orderitem.quantity",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Fulfillment Method Name",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Fulfillment ID",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.orderFulfillmentID",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Fulfillment Method Type",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Street Address",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.streetAddress",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Street Address 2",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.street2Address",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Postal Code",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.postalCode",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "City",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.city",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "State",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.stateCode",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Country",
	                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.countryCode",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",
	                        "isVisible": true,
	                        "isDeletable": true
	                    },
	                    {
	                        "title": "Total",
	                        "propertyIdentifier": "_orderitem.itemTotal",
	                        "persistent": false
	                    },
	                    {
	                        "title": "Discount Amount",
	                        "propertyIdentifier": "_orderitem.discountAmount",
	                        "persistent": false
	                    },
	                    {
	                        "title": "Tax Amount",
	                        "propertyIdentifier": "_orderitem.taxAmount",
	                        "persistent": false
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.extendedPrice",
	                        "persistent": false
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.productBundleGroup.amount",
	                        "ormtype": "big_decimal"
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.productBundleGroup.amountType",
	                        "ormtype": "string"
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.productBundleGroupPrice",
	                        "persistent": false
	                    },
	                    {
	                        "propertyIdentifier": "_orderitem.productBundlePrice",
	                        "persistent": false
	                    }
	                ];
	                //Add attributes to the column configuration
	                angular.forEach(scope.attributes, function (attribute) {
	                    var attributeColumn = {
	                        propertyIdentifier: "_orderitem." + attribute.attributeCode,
	                        attributeID: attribute.attributeID,
	                        attributeSetObject: "orderItem"
	                    };
	                    columnsConfig.push(attributeColumn);
	                });
	                var filterGroupsConfig = [
	                    {
	                        "filterGroup": [
	                            {
	                                "propertyIdentifier": "_orderitem.parentOrderItem.orderItemID",
	                                "comparisonOperator": "=",
	                                "value": scope.orderItem.$$getID(),
	                            }
	                        ]
	                    }
	                ];
	                var options = {
	                    columnsConfig: angular.toJson(columnsConfig),
	                    filterGroupsConfig: angular.toJson(filterGroupsConfig),
	                    allRecords: true
	                };
	                //Create a list of order items.
	                scope.childOrderItems = [];
	                scope.orderItem.depth = 1;
	                /**
	                * Hide orderItem children on clicking the details link.
	                */
	                scope.hideChildren = function (orderItem) {
	                    //Set all child order items to clicked = false.
	                    angular.forEach(scope.childOrderItems, function (child) {
	                        $log.debug("hideing");
	                        child.hide = !child.hide;
	                        scope.orderItem.clicked = !scope.orderItem.clicked;
	                    });
	                };
	                //Delete orderItem
	                scope.deleteEntity = function () {
	                    $log.debug("Deleting");
	                    $log.debug(scope.orderItem);
	                    var deletePromise = scope.orderItem.$$delete();
	                    deletePromise.then(function () {
	                        delete scope.orderItem;
	                        scope.paginator.getCollection();
	                    });
	                };
	                /**
	                * Gets a list of child order items if they exist.
	                */
	                scope.getChildOrderItems = function () {
	                    if (!scope.orderItem.childItemsRetrieved) {
	                        scope.orderItem.clicked = !scope.orderItem.clicked;
	                        scope.orderItem.hide = !scope.orderItem.hide;
	                        scope.orderItem.childItemsRetrieved = true;
	                        var orderItemsPromise = $hibachi.getEntity('orderItem', options);
	                        orderItemsPromise.then(function (value) {
	                            var collectionConfig = {};
	                            collectionConfig.columns = columnsConfig;
	                            collectionConfig.baseEntityName = 'SlatwallOrderItem';
	                            collectionConfig.baseEntityAlias = '_orderitem';
	                            var childOrderItems = $hibachi.populateCollection(value.records, collectionConfig);
	                            angular.forEach(childOrderItems, function (childOrderItem) {
	                                childOrderItem.depth = scope.orderItem.depth + 1;
	                                scope.childOrderItems.push(childOrderItem);
	                                childOrderItem.data.productBundleGroupPercentage = 1;
	                                if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageIncrease') {
	                                    childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;
	                                }
	                                else if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageDecrease') {
	                                    childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;
	                                }
	                            });
	                        });
	                    }
	                    else {
	                        //We already have the items so we just need to show them.
	                        angular.forEach(scope.childOrderItems, function (child) {
	                            child.hide = !child.hide;
	                            scope.orderItem.clicked = !scope.orderItem.clicked;
	                        });
	                    }
	                };
	            }
	        };
	    }
	    SWOrderItem.Factory = function () {
	        var directive = function ($log, $compile, $http, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) { return new SWOrderItem($log, $compile, $http, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$compile',
	            '$http',
	            '$templateCache',
	            '$hibachi',
	            'orderItemPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWOrderItem;
	}());
	exports.SWOrderItem = SWOrderItem;


/***/ }),
/* 556 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/**
	 * Displays a shipping label in the order items row.
	 * @module slatwalladmin
	 * @class swOrderItemsShippingLabelStamp
	 */
	var SWOiShippingLabelStamp = (function () {
	    function SWOiShippingLabelStamp($log, orderItemPartialsPath, slatwallPathBuilder) {
	        return {
	            restrict: 'E',
	            scope: {
	                orderFulfillment: "="
	            },
	            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderfulfillment-shippinglabel.html",
	            link: function (scope, element, attrs) {
	                //Get the template.
	                $log.debug("\n\n<---ORDER FULFILLMENT STAMP--->\n\n");
	                $log.debug(scope.orderFulfillment);
	                $log.debug(scope.orderFulfillment.data.fulfillmentMethodType);
	            }
	        };
	    }
	    SWOiShippingLabelStamp.Factory = function () {
	        var directive = function ($log, orderItemPartialsPath, slatwallPathBuilder) { return new SWOiShippingLabelStamp($log, orderItemPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$log',
	            'orderItemPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWOiShippingLabelStamp;
	}());
	exports.SWOiShippingLabelStamp = SWOiShippingLabelStamp;


/***/ }),
/* 557 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/**
	 * Displays a shipping label in the order items row.
	 * @module slatwalladmin
	 * @class swOrderItemsShippingLabelStamp
	 */
	var SWOrderItemDetailStamp = (function () {
	    function SWOrderItemDetailStamp($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) {
	        return {
	            restrict: 'A',
	            scope: {
	                systemCode: "=",
	                orderItemId: "=",
	                skuId: "=",
	                orderItem: "="
	            },
	            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem-detaillabel.html",
	            link: function (scope, element, attrs) {
	                scope.details = [];
	                scope.orderItem.detailsName = [];
	                var results;
	                $log.debug("Detail stamp");
	                $log.debug(scope.systemCode);
	                $log.debug(scope.orderItemId);
	                $log.debug(scope.skuId);
	                $log.debug(scope.orderItem);
	                /**
	                 * For each type of orderItem, get the appropriate detail information.
	                 *
	                 * Merchandise: Option Group Name and Option
	                 * Event: Event Date, Event Location
	                 * Subscription: Subscription Term, Subscription Benefits
	                 */
	                var getMerchandiseDetails = function (orderItem) {
	                    //Get option and option groups
	                    for (var i = 0; i <= orderItem.data.sku.data.options.length - 1; i++) {
	                        var optionGroupCollectionConfig = collectionConfigService.newCollectionConfig("Option");
	                        optionGroupCollectionConfig.addDisplayProperty("optionID,optionName, optionGroup.optionGroupName");
	                        optionGroupCollectionConfig.addFilter("optionID", orderItem.data.sku.data.options[i].optionID, "=");
	                        optionGroupCollectionConfig.getEntity().then(function (results) {
	                            if (angular.isDefined(results.pageRecords[0])) {
	                                orderItem.detailsName.push(results.pageRecords[0].optionGroup_optionGroupName);
	                                orderItem.details.push(results.pageRecords[0].optionName);
	                            }
	                        }, function (reason) {
	                            throw ("SWOrderItemDetailStamp had trouble retrieving the option group for option");
	                        });
	                    }
	                };
	                var getSubscriptionDetails = function (orderItem) {
	                    //get Subscription Term and Subscription Benefits
	                    var name = orderItem.data.sku.data.subscriptionTerm.data.subscriptionTermName || "";
	                    orderItem.detailsName.push("Subscription Term:");
	                    orderItem.details.push(name);
	                    //Maybe multiple benefits so show them all.
	                    for (var i = 0; i <= orderItem.data.sku.data.subscriptionBenefits.length - 1; i++) {
	                        var benefitName = orderItem.data.sku.data.subscriptionBenefits[i].subscriptionBenefitName || "";
	                        orderItem.detailsName.push("Subscription Benefit:");
	                        orderItem.details.push(benefitName);
	                    }
	                };
	                var getEventDetails = function (orderItem) {
	                    //get event date, and event location
	                    orderItem.detailsName.push("Event Date: ");
	                    orderItem.details.push(orderItem.data.sku.data.eventStartDateTime);
	                    //Need to iterate this.
	                    for (var i = 0; i <= orderItem.data.sku.data.locations.length - 1; i++) {
	                        orderItem.detailsName.push("Location: ");
	                        orderItem.details.push(orderItem.data.sku.data.locations[i].locationName);
	                    }
	                };
	                if (angular.isUndefined(scope.orderItem.details)) {
	                    scope.orderItem.details = [];
	                }
	                if (angular.isDefined(scope.orderItem.details)) {
	                    switch (scope.systemCode) {
	                        case "merchandise":
	                            getMerchandiseDetails(scope.orderItem);
	                            break;
	                        case "subscription":
	                            getSubscriptionDetails(scope.orderItem);
	                            break;
	                        case "event":
	                            getEventDetails(scope.orderItem);
	                            break;
	                    }
	                }
	            }
	        };
	    }
	    SWOrderItemDetailStamp.Factory = function () {
	        var directive = function ($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) { return new SWOrderItemDetailStamp($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$log',
	            '$hibachi',
	            'collectionConfigService',
	            'orderItemPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWOrderItemDetailStamp;
	}());
	exports.SWOrderItemDetailStamp = SWOrderItemDetailStamp;


/***/ }),
/* 558 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWOrderItems = (function () {
	    //@ngInject
	    function SWOrderItems($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService) {
	        return {
	            restrict: 'E',
	            scope: {
	                orderId: "@"
	            },
	            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitems.html",
	            link: function (scope, element, attrs) {
	                var options = {};
	                scope.keywords = "";
	                scope.loadingCollection = false;
	                var searchPromise;
	                scope.searchCollection = function () {
	                    if (searchPromise) {
	                        $timeout.cancel(searchPromise);
	                    }
	                    searchPromise = $timeout(function () {
	                        $log.debug('search with keywords');
	                        $log.debug(scope.keywords);
	                        //Set current page here so that the pagination does not break when getting collection
	                        scope.paginator.setCurrentPage(1);
	                        scope.loadingCollection = true;
	                        scope.getCollection();
	                    }, 500);
	                };
	                $log.debug('Init Order Item');
	                $log.debug(scope.orderId);
	                //Setup the data needed for each order item object.
	                scope.getCollection = function () {
	                    if (scope.pageShow === 'Auto') {
	                        scope.pageShow = 50;
	                    }
	                    var orderItemCollection = collectionConfigService.newCollectionConfig('OrderItem');
	                    orderItemCollection.setDisplayProperties("orderItemID,currencyCode,sku.skuName\n                         ,price,skuPrice,sku.skuID,sku.skuCode,productBundleGroup.productBundleGroupID,sku.product.productID\n \t\t\t\t\t\t,sku.product.productName,sku.product.productDescription,sku.eventStartDateTime\n \t\t\t\t\t\t,quantity,orderFulfillment.fulfillmentMethod.fulfillmentMethodName,orderFulfillment.orderFulfillmentID\n \t\t\t\t\t\t,orderFulfillment.shippingAddress.streetAddress\n     \t\t\t\t\t,orderFulfillment.shippingAddress.street2Address,orderFulfillment.shippingAddress.postalCode,orderFulfillment.shippingAddress.city,orderFulfillment.shippingAddress.stateCode\n \t\t\t\t\t\t,orderFulfillment.shippingAddress.countryCode\n                         ,orderItemType.systemCode,orderFulfillment.fulfillmentMethod.fulfillmentMethodType\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.streetAddress,orderFulfillment.pickupLocation.primaryAddress.address.street2Address\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.city,orderFulfillment.pickupLocation.primaryAddress.address.stateCode\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.postalCode\n \t\t\t\t\t\t,itemTotal,discountAmount,taxAmount,extendedPrice,productBundlePrice,sku.baseProductType\n                         ,sku.subscriptionBenefits\n                         ,sku.product.productType.systemCode,sku.options,sku.locations\n \t\t\t\t\t\t,sku.subscriptionTerm.subscriptionTermName\n \t\t\t\t\t\t,sku.imageFile,\n                        stock.location.locationName")
	                        .addFilter('order.orderID', scope.orderId)
	                        .addFilter('parentOrderItem', 'null', 'IS')
	                        .setKeywords(scope.keywords)
	                        .setPageShow(scope.paginator.getPageShow())
	                        .setCurrentPage(scope.paginator.getCurrentPage());
	                    //add attributes to the column config
	                    angular.forEach(scope.attributes, function (attribute) {
	                        var attributeColumn = {
	                            propertyIdentifier: "_orderitem." + attribute.attributeCode,
	                            attributeID: attribute.attributeID,
	                            attributeSetObject: "orderItem"
	                        };
	                        orderItemCollection.columns.push(attributeColumn);
	                    });
	                    var orderItemsPromise = orderItemCollection.getEntity();
	                    orderItemsPromise.then(function (value) {
	                        scope.collection = value;
	                        var collectionConfig = {};
	                        scope.orderItems = $hibachi.populateCollection(value.pageRecords, orderItemCollection);
	                        for (var orderItem in scope.orderItems) {
	                            $log.debug("OrderItem Product Type");
	                            $log.debug(scope.orderItems);
	                            //orderItem.productType = orderItem.data.sku.data.product.data.productType.$$getParentProductType();
	                        }
	                        scope.paginator.setPageRecordsInfo(scope.collection);
	                        scope.loadingCollection = false;
	                    }, function (value) {
	                        scope.orderItems = [];
	                    });
	                };
	                var attributesCollection = collectionConfigService.newCollectionConfig('Attribute');
	                attributesCollection.setDisplayProperties('attributeID,attributeCode,attributeName')
	                    .addFilter('displayOnOrderDetailFlag', true)
	                    .addFilter('activeFlag', true)
	                    .setAllRecords(true);
	                var attItemsPromise = attributesCollection.getEntity();
	                attItemsPromise.then(function (value) {
	                    scope.attributes = [];
	                    angular.forEach(value.records, function (attributeItemData) {
	                        //Use that custom attribute name to get the value.
	                        scope.attributes.push(attributeItemData);
	                    });
	                    scope.getCollection();
	                });
	                //Add claim function and cancel function
	                /*scope.appendToCollection = function(){
	                    if(scope.pageShow === 'Auto'){
	                        $log.debug('AppendToCollection');
	                        if(scope.paginator.autoScrollPage < scope.collection.totalPages){
	                            scope.paginator.autoScrollDisabled = true;
	                            scope.paginator.autoScrollPage++;

	                            var appendOptions:any = {};
	                            angular.extend(appendOptions,options);
	                            appendOptions.pageShow = 50;
	                            appendOptions.currentPage = scope.paginator.autoScrollPage;

	                            var collectionListingPromise = $hibachi.getEntity('orderItem', appendOptions);
	                            collectionListingPromise.then(function(value){
	                                scope.collection.pageRecords = scope.collection.pageRecords.concat(value.pageRecords);
	                                scope.autoScrollDisabled = false;
	                            },function(reason){
	                                scope.collection.pageRecords = [];
	                            });
	                        }
	                    }
	                };*/
	                scope.paginator = paginationService.createPagination();
	                scope.paginator.collection = scope.collection;
	                scope.paginator.getCollection = scope.getCollection;
	                //set up custom event as temporary fix to update when new sku is adding via jquery ajax instead of angular scope
	                $(document).on("listingDisplayUpdate", {}, function (event, arg1, arg2) {
	                    scope.orderItems = undefined;
	                    scope.getCollection();
	                });
	            } //<--End link
	        };
	    }
	    SWOrderItems.Factory = function () {
	        var directive = function ($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService) { return new SWOrderItems($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService); };
	        directive.$inject = [
	            '$log',
	            '$timeout',
	            '$location',
	            '$hibachi',
	            'collectionConfigService',
	            'formService',
	            'orderItemPartialsPath',
	            'slatwallPathBuilder',
	            'paginationService'
	        ];
	        return directive;
	    };
	    return SWOrderItems;
	}());
	exports.SWOrderItems = SWOrderItems;


/***/ }),
/* 559 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWResizedImage = (function () {
	    function SWResizedImage($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder) {
	        return {
	            restrict: 'E',
	            scope: {
	                orderItem: "=",
	            },
	            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem-image.html",
	            link: function (scope, element, attrs) {
	                var profileName = attrs.profilename;
	                var skuID = scope.orderItem.data.sku.data.skuID;
	                //Get the template.
	                //Call slatwallService to get the path from the image.
	                $hibachi.getResizedImageByProfileName(profileName, skuID)
	                    .then(function (response) {
	                    $log.debug(response.resizedImagePaths[0]);
	                    scope.orderItem.imagePath = response.resizedImagePaths[0];
	                });
	            }
	        };
	    }
	    SWResizedImage.Factory = function () {
	        var directive = function ($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder) { return new SWResizedImage($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$http', '$log', '$q', '$hibachi', 'orderItemPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWResizedImage;
	}());
	exports.SWResizedImage = SWResizedImage;


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//modules
	var core_module_1 = __webpack_require__(275);
	//services
	var orderfulfillmentservice_1 = __webpack_require__(561);
	//controllers
	//directives
	var sworderfulfillmentlist_1 = __webpack_require__(562);
	//models 
	var orderfulfillmentmodule = angular.module('orderFulfillment', [core_module_1.coremodule.name])
	    .config([function () {
	    }]).run([function () {
	    }])
	    .constant('orderFulfillmentPartialsPath', 'orderfulfillment/components/')
	    .service('orderFulfillmentService', orderfulfillmentservice_1.OrderFulfillmentService)
	    .directive('swOrderFulfillmentList', sworderfulfillmentlist_1.SWOrderFulfillmentList.Factory());
	exports.orderfulfillmentmodule = orderfulfillmentmodule;


/***/ }),
/* 561 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Fulfillment List Controller
	 */
	var OrderFulfillmentService = (function () {
	    // @ngInject
	    function OrderFulfillmentService($hibachi, $timeout, collectionConfigService, $http) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.$http = $http;
	        /**
	         * This manages all the observer events without the need for setting ids etc.
	         */
	        this.registerObserver = function (_observer) {
	            if (!_observer) {
	                throw new Error('Observer required for registration');
	            }
	            if (_this.observers == undefined) {
	                _this.observers = new Array();
	            }
	            _this.observers.push(_observer);
	        };
	        /**
	         * Removes the observer. Just pass in this
	         */
	        this.removeObserver = function (_observer) {
	            if (!_observer) {
	                throw new Error('Observer required for removal.');
	            }
	            for (var observer in _this.observers) {
	                if (_this.observers[observer] === (_observer)) {
	                    if (_this.observers.indexOf(_observer) > -1) {
	                        _this.observers.splice(_this.observers.indexOf(_observer), 1);
	                    }
	                }
	            }
	        };
	        /**
	         * Note that message should have a type and a data field
	         */
	        this.notifyObservers = function (_message) {
	            for (var observer in _this.observers) {
	                _this.observers[observer].recieveNotification(_message);
	            }
	        };
	        /**
	         * Creates a batch. This should use api:main.post with a context of process and an entityName instead of doAction.
	         * The process object should have orderItemIdList or orderFulfillmentIDList defined and should have
	         * optionally an accountID, and or locationID (or locationIDList).
	         */
	        this.addBatch = function (processObject) {
	            if (processObject) {
	                processObject.data.entityName = "FulfillmentBatch";
	                processObject.data['fulfillmentBatch'] = {};
	                processObject.data['fulfillmentBatch']['fulfillmentBatchID'] = "";
	                return _this.$hibachi.saveEntity("fulfillmentBatch", '', processObject.data, "create");
	            }
	        };
	    }
	    return OrderFulfillmentService;
	}());
	exports.OrderFulfillmentService = OrderFulfillmentService;


/***/ }),
/* 562 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	//import * as rxjs from 'rxjs';
	var FulfillmentsList;
	(function (FulfillmentsList) {
	    var Views;
	    (function (Views) {
	        Views[Views["Fulfillments"] = 0] = "Fulfillments";
	        Views[Views["Items"] = 1] = "Items";
	    })(Views = FulfillmentsList.Views || (FulfillmentsList.Views = {}));
	    var ofisStatusType;
	    (function (ofisStatusType) {
	        ofisStatusType[ofisStatusType["unavailable"] = 0] = "unavailable";
	        ofisStatusType[ofisStatusType["partial"] = 1] = "partial";
	        ofisStatusType[ofisStatusType["available"] = 2] = "available";
	    })(ofisStatusType = FulfillmentsList.ofisStatusType || (FulfillmentsList.ofisStatusType = {}));
	})(FulfillmentsList || (FulfillmentsList = {}));
	/**
	 * Fulfillment List Controller
	 */
	var SWOrderFulfillmentListController = (function () {
	    // @ngInject
	    function SWOrderFulfillmentListController($hibachi, $timeout, collectionConfigService, observerService, utilityService, $location, $http, $window, typeaheadService, orderFulfillmentService) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.observerService = observerService;
	        this.utilityService = utilityService;
	        this.$location = $location;
	        this.$http = $http;
	        this.$window = $window;
	        this.typeaheadService = typeaheadService;
	        this.orderFulfillmentService = orderFulfillmentService;
	        /**
	         * Implements a listener for the orderFulfillment selections
	         */
	        this.swSelectionToggleSelectionorderFulfillmentCollectionTableListener = function (callBackData) {
	            var processObject = _this.getProcessObject();
	            if (_this.isSelected(callBackData.action)) {
	                processObject['data']['orderFulfillmentIDList'] = _this.listAppend(processObject.data['orderFulfillmentIDList'], callBackData.selection);
	            }
	            else {
	                processObject['data']['orderFulfillmentIDList'] = _this.listRemove(processObject.data['orderFulfillmentIDList'], callBackData.selection);
	            }
	            _this.setProcessObject(processObject);
	        };
	        /**
	         * Implements a listener for the orderItem selections
	         */
	        this.swSelectionToggleSelectionorderItemCollectionTableListener = function (callBackData) {
	            var processObject = _this.getProcessObject();
	            if (_this.isSelected(callBackData.action)) {
	                processObject['data']['orderItemIDList'] = _this.listAppend(processObject['data']['orderItemIDList'], callBackData.selection);
	            }
	            else {
	                processObject['data']['orderItemIDList'] = _this.listRemove(processObject['data']['orderItemIDList'], callBackData.selection);
	            }
	        };
	        /**
	         * returns true if the action is selected
	         */
	        this.isSelected = function (test) {
	            if (test == "check") {
	                return true;
	            }
	            else {
	                return false;
	            }
	            ;
	        };
	        /**
	         * Each collection has a view. The view is maintained by the enum. This Returns
	         * the collection for that view.
	         */
	        this.getCollectionByView = function (view) {
	            if (view == undefined || _this.collections == undefined) {
	                return;
	            }
	            return _this.collections[view];
	        };
	        this.updateCollectionsInView = function () {
	            _this.collections = [];
	            _this.collections.push(_this.orderFulfillmentCollection);
	            _this.collections.push(_this.orderItemCollection);
	        };
	        /**
	         * Setup the initial orderFulfillment Collection.
	         */
	        this.createOrderFulfillmentCollection = function () {
	            _this.orderFulfillmentCollection = _this.collectionConfigService.newCollectionConfig("OrderFulfillment");
	            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentID");
	            _this.orderFulfillmentCollection.addDisplayProperty("order.orderNumber");
	            _this.orderFulfillmentCollection.addDisplayProperty("order.orderOpenDateTime");
	            _this.orderFulfillmentCollection.addDisplayProperty("shippingMethod.shippingMethodName");
	            _this.orderFulfillmentCollection.addDisplayProperty("shippingAddress.stateCode");
	            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentStatusType.typeName");
	            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentItems.stock.location.locationID");
	            _this.orderFulfillmentCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstFulfilled", "!=");
	            _this.orderFulfillmentCollection.addFilter("order.orderNumber", "", "!=");
	        };
	        /**
	         * Setup the initial orderItem Collection.
	         */
	        this.createOrderItemCollection = function () {
	            _this.orderItemCollection = _this.collectionConfigService.newCollectionConfig("OrderItem");
	            _this.orderItemCollection.addDisplayProperty("orderItemID");
	            _this.orderItemCollection.addDisplayProperty("quantity");
	            _this.orderItemCollection.addDisplayProperty("order.orderNumber");
	            _this.orderItemCollection.addDisplayProperty("order.orderOpenDateTime");
	            _this.orderItemCollection.addDisplayProperty("orderFulfillment.orderFulfillmentStatusType.typeName");
	            _this.orderItemCollection.addDisplayProperty("sku.product.productName");
	            _this.orderItemCollection.addFilter("orderFulfillment.orderFulfillmentStatusType.systemCode", "ofstFulfilled", "!=");
	            _this.orderItemCollection.addFilter("order.orderNumber", "", "!=");
	        };
	        /**
	         * Toggle the Status Type filters on and off.
	         */
	        this.toggleFilter = function (filterName) {
	            _this.filters[filterName] = !_this.filters[filterName];
	            _this.addFilter(filterName, _this.filters[filterName]);
	        };
	        /**
	         * Toggle between views. We refresh the collection everytime we set the view.
	         */
	        this.setView = function (view) {
	            _this.view = view;
	            if (_this.getCollectionByView(_this.getView())) {
	                _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));
	            }
	        };
	        /**
	         * Returns the current view.
	         */
	        this.getView = function () {
	            return _this.view;
	        };
	        /**
	         * Refreshes the view
	         */
	        this.refreshPage = function () {
	            if (_this.utilityService.isMultiPageMode()) {
	                console.log("MultiPageMode");
	                window.location.reload();
	            }
	        };
	        /**
	         * Initialized the collection so that the listingDisplay can you it to display its data.
	         */
	        this.refreshCollectionTotal = function (collection) {
	            if (collection) {
	                collection.getEntity().then(function (response) {
	                    _this.total = response.recordsCount;
	                });
	                return collection;
	            }
	        };
	        /**
	         * Adds one of the status type filters into the collectionConfigService
	         * @param key: FulfillmentsList.CollectionFilterValues {'partial' | 'available' | 'unavailable' | 'location'}
	         * @param Vvalue: boolean: {true|false}
	         */
	        this.addFilter = function (key, value) {
	            //Always keep the orderNumber filter.
	            if (_this.getCollectionByView(_this.getView()) && _this.getCollectionByView(_this.getView()).baseEntityName == "OrderFulfillment") {
	                //If there is only one filter group add a second. otherwise add to the second.
	                var filterGroup = [];
	                var filter = {};
	                if (value == true) {
	                    if (key == "partial") {
	                        filter = _this.getCollectionByView(_this.getView()).createFilter("orderFulfillmentInvStatusType.systemCode", "ofisPartial", "=", "OR", false);
	                    }
	                    if (key == "available") {
	                        filter = _this.getCollectionByView(_this.getView()).createFilter("orderFulfillmentInvStatusType.systemCode", "ofisAvailable", "=", "OR", false);
	                    }
	                    if (key == "unavailable") {
	                        filter = _this.getCollectionByView(_this.getView()).createFilter("orderFulfillmentInvStatusType.systemCode", "ofisUnavailable", "=", "OR", false);
	                    }
	                    if (key == "location") {
	                        filter = _this.getCollectionByView(_this.getView()).createFilter("orderFulfillmentItems.stock.location.locationName", value, "=", "OR", false);
	                    }
	                    //add the filter to the group
	                    filterGroup.push(filter);
	                    //add the group
	                    _this.getCollectionByView(_this.getView()).addFilterGroup(filterGroup);
	                }
	                if (value = false) {
	                    console.log("False");
	                }
	            }
	            else if (_this.getCollectionByView(_this.getView()).baseEntityName == "OrderItem") {
	                console.log("Adding orderItem Filters", _this.getCollectionByView(_this.getView()));
	            }
	            //Calls to auto refresh the collection since a filter was added.
	            _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));
	        };
	        /**
	         * This applies or removes a location filter from the collection.
	         */
	        this.addLocationFilter = function (locationID) {
	            var currentCollection = _this.getCollectionByView(_this.getView());
	            if (currentCollection && currentCollection.baseEntityName == "OrderFulfillment") {
	                //If this is the fulfillment collection, the location is against, orderItems.stock.location
	                currentCollection.addFilter("orderFulfillmentItems.stock.location.locationID", locationID, "=");
	            }
	            if (currentCollection && currentCollection.baseEntityName == "OrderItem") {
	                //If this is the fulfillment collection, the location is against, stock.location
	                currentCollection.addFilter("stock.location.locationID", locationID, "=");
	            }
	            _this.refreshCollectionTotal(currentCollection);
	        };
	        /**
	         * Saved the batch using the data stored in the processObject. This delegates to the service method.
	         */
	        this.addBatch = function () {
	            if (_this.getProcessObject()) {
	                _this.orderFulfillmentService.addBatch(_this.getProcessObject()).then(_this.processCreateSuccess, _this.processCreateError);
	            }
	        };
	        /**
	         * Handles a successful post of the processObject
	         */
	        this.processCreateSuccess = function (result) {
	            //Redirect to the created fulfillmentBatch.
	            if (result.data && result.data['fulfillmentBatchID']) {
	                _this.$window.location.href = "/?slataction=entity.detailfulfillmentbatch&fulfillmentBatchID=" + result.data['fulfillmentBatchID'];
	            }
	        };
	        /**
	         * Handles a successful post of the processObject
	         */
	        this.processCreateError = function (data) {
	            console.log("Process Errors", data);
	        };
	        /**
	         * Returns the processObject
	         */
	        this.getProcessObject = function () {
	            return _this.processObject;
	        };
	        /**
	         * Sets the processObject
	         */
	        this.setProcessObject = function (processObject) {
	            _this.processObject = processObject;
	        };
	        /**
	         * This will recieve all the notifications from all typeaheads on the page.
	         * When I revieve a notification, it will be an object that has a name and data.
	         * The name is the name of the form and the data is the selected id. The three types,
	         * that I'm currently looking for are:
	         * "locationIDfilter", "locationID", or "accountID" These are the same as the names of the forms.
	         */
	        this.recieveNotification = function (message) {
	            switch (message.name) {
	                case "locationIDfilter":
	                    //If this is called, then the filter needs to be updated based on this id.
	                    _this.addLocationFilter(message.data);
	                    break;
	                case "locationID":
	                    //If this is called, then a location for the batch has been selected.
	                    _this.getProcessObject().data['locationID'] = message.data || "";
	                    break;
	                case "accountID":
	                    //If this is called, then an account to assign to the batch has been selected.
	                    _this.getProcessObject().data['assignedAccountID'] = message.data || "";
	                    break;
	                default:
	                    console.log("Warning: A default case was hit with the data: ", message);
	            }
	        };
	        /**
	         * Returns the number of selected fulfillments
	         */
	        this.getTotalFulfillmentsSelected = function () {
	            var total = 0;
	            if (_this.getProcessObject() && _this.getProcessObject().data) {
	                try {
	                    if (_this.getProcessObject().data.orderFulfillmentIDList && _this.getProcessObject().data.orderFulfillmentIDList.split(",").length > 0 && _this.getProcessObject().data.orderItemIDList && _this.getProcessObject().data.orderItemIDList.split(",").length > 0) {
	                        return _this.getProcessObject().data.orderFulfillmentIDList.split(",").length + _this.getProcessObject().data.orderItemIDList.split(",").length;
	                    }
	                    else if (_this.getProcessObject().data.orderFulfillmentIDList && _this.getProcessObject().data.orderFulfillmentIDList.split(",").length > 0) {
	                        return _this.getProcessObject().data.orderFulfillmentIDList.split(",").length;
	                    }
	                    else if (_this.getProcessObject().data.orderItemIDList && _this.getProcessObject().data.orderItemIDList.split(",").length > 0) {
	                        return _this.getProcessObject().data.orderItemIDList.split(",").length;
	                    }
	                }
	                catch (error) {
	                    return 0; //default
	                }
	            }
	        };
	        //Set the initial state for the filters.
	        this.filters = { "unavailable": false, "partial": true, "available": true };
	        this.collections = [];
	        //Some setup for the fulfillments collection.
	        this.createOrderFulfillmentCollection();
	        this.createOrderItemCollection();
	        //some view setup.
	        this.views = FulfillmentsList.Views;
	        this.setView(this.views.Fulfillments);
	        //add both collections into the collection object. Removed 0 elements (insert only).
	        this.collections.push(this.orderFulfillmentCollection);
	        this.collections.push(this.orderItemCollection);
	        //Setup the processObject
	        this.setProcessObject(this.$hibachi.newFulfillmentBatch_Create());
	        //adds the two default filters to start.
	        //this.addFilter('available', true);
	        //this.addFilter('partial', true);
	        var collection = this.refreshCollectionTotal(this.getCollectionByView(this.getView()));
	        if (collection.entityName = "OrderFulfillment") {
	            this.orderFulfillmentCollection = collection;
	        }
	        else {
	            this.orderItemCollection = collection;
	        }
	        //Attach our listeners for selections on both listing displays.
	        this.observerService.attach(this.swSelectionToggleSelectionorderFulfillmentCollectionTableListener, "swSelectionToggleSelectionorderFulfillmentCollectionTable", "swSelectionToggleSelectionorderFulfillmentCollectionTableListener");
	        this.observerService.attach(this.swSelectionToggleSelectionorderItemCollectionTableListener, "swSelectionToggleSelectionorderItemCollectionTable", "swSelectionToggleSelectionorderItemCollectionTableListener");
	        //This tells the typeaheadService to send us all of its events to our recieveNotification method.
	        this.typeaheadService.registerObserver(this);
	        // Higher order function to send actions to the action stream
	        /*const actionDispatcher = (func) => (...args) =>  this.typeaheadService.actionStream.next(func(...args));

	        // Example action function for adding a selection.
	        this.addSelection = actionDispatcher((payload) => ({
	            type: 'ADD_SELECTION',
	                payload
	            }
	        ));

	        //Won't get notified of this one because we have not subscribed to the stream yet.
	        this.addSelection({"id" : "123456", "data" : "This is my data"});

	        //Subscribe to the stores events and just print out the next emitted item.
	        let storeListener = this.typeaheadService.typeaheadStore.subscribe( (nextState) => {console.log("Next State: ", nextState)}, (errorState)=>{console.log("Error State", errorState)} );
	        
	        //Will get notified of this one.
	        this.addSelection({"id" : "123457", "data" : "This is my data"});
	        this.addSelection({"id" : "123458", "data" : "This is my data"});

	        //Testing some rxjs operators.
	        var test:any = [{id: 1,name:"ian"},{id:2, name:"casey"},{id:3,name:"john"},{id:4, name:"dan"}];
	        var testObservable = rxjs.Observable.from<any>(test);
	        testObservable.map(o => (o.id + '_' + o.name) ).take(2).map((result) => { console.log(result) }).subscribe();
	        */
	    }
	    /**
	     * Adds a string to a list.
	     */
	    SWOrderFulfillmentListController.prototype.listAppend = function (str, subStr) {
	        return this.utilityService.listAppend(str, subStr, ",");
	    };
	    /**
	     * Removes a substring from a string.
	     * str: The original string.
	     * subStr: The string to remove.
	     */
	    SWOrderFulfillmentListController.prototype.listRemove = function (str, subStr) {
	        return this.utilityService.listRemove(str, subStr);
	    };
	    return SWOrderFulfillmentListController;
	}());
	exports.SWOrderFulfillmentListController = SWOrderFulfillmentListController;
	/**
	 * This is a view helper class that uses the collection helper class.
	 */
	var SWOrderFulfillmentList = (function () {
	    // @ngInject
	    function SWOrderFulfillmentList($hibachi, $timeout, collectionConfigService, observerService, orderFulfillmentPartialsPath, slatwallPathBuilder) {
	        this.$hibachi = $hibachi;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.observerService = observerService;
	        this.orderFulfillmentPartialsPath = orderFulfillmentPartialsPath;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {};
	        this.controller = SWOrderFulfillmentListController;
	        this.controllerAs = "swOrderFulfillmentListController";
	        this.link = function ($scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(orderFulfillmentPartialsPath) + "orderfulfillmentlist.html";
	    }
	    SWOrderFulfillmentList.Factory = function () {
	        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, orderFulfillmentPartialsPath, slatwallPathBuilder) { return new SWOrderFulfillmentList($hibachi, $timeout, collectionConfigService, observerService, orderFulfillmentPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$hibachi',
	            '$timeout',
	            'collectionConfigService',
	            'observerService',
	            'orderFulfillmentPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWOrderFulfillmentList;
	}());
	exports.SWOrderFulfillmentList = SWOrderFulfillmentList;


/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	//modules
	var core_module_1 = __webpack_require__(275);
	//services
	//controllers
	var preprocessproduct_create_1 = __webpack_require__(564);
	//filters
	//directives
	var swproductlistingpages_1 = __webpack_require__(565);
	var productmodule = angular.module('hibachi.product', [core_module_1.coremodule.name]).config(function () {
	})
	    .constant('productPartialsPath', 'product/components/')
	    .controller('preprocessproduct_create', preprocessproduct_create_1.ProductCreateController)
	    .directive('swProductListingPages', swproductlistingpages_1.SWProductListingPages.Factory());
	exports.productmodule = productmodule;


/***/ }),
/* 564 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var ProductCreateController = (function () {
	    //@ngInject
	    function ProductCreateController($q, $scope, $element, $log, $hibachi, collectionConfigService, selectionService, rbkeyService) {
	        var _this = this;
	        this.$q = $q;
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$log = $log;
	        this.$hibachi = $hibachi;
	        this.collectionConfigService = collectionConfigService;
	        this.selectionService = selectionService;
	        this.rbkeyService = rbkeyService;
	        //on select change get collection
	        this.$scope.preprocessproduct_createCtrl.productTypeChanged = function (selectedOption) {
	            _this.$scope.preprocessproduct_createCtrl.selectedOption = selectedOption;
	            _this.$scope.preprocessproduct_createCtrl.getCollection();
	            _this.selectionService.clearSelection('ListingDisplay');
	        };
	        this.$scope.productTypeIDPaths = {};
	        this.$scope.preprocessproduct_createCtrl.getCollection = function () {
	            var productTypeDeffered = _this.$q.defer();
	            var productTypePromise = productTypeDeffered.promise;
	            if (angular.isUndefined(_this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value])) {
	                var productTypeCollectionConfig = _this.collectionConfigService.newCollectionConfig('ProductType');
	                productTypeCollectionConfig.addDisplayProperty('productTypeID, productTypeIDPath');
	                productTypeCollectionConfig.addFilter('productTypeID', _this.$scope.preprocessproduct_createCtrl.selectedOption.value, "=");
	                productTypeCollectionConfig.getEntity().then(function (result) {
	                    if (angular.isDefined(result.pageRecords[0])) {
	                        _this.$scope.productTypeIDPaths[result.pageRecords[0].productTypeID] = result.pageRecords[0].productTypeIDPath;
	                    }
	                    productTypeDeffered.resolve();
	                }, function (reason) {
	                    productTypeDeffered.reject();
	                    throw ("ProductCreateController was unable to retrieve the product type ID Path.");
	                });
	            }
	            else {
	                productTypeDeffered.resolve();
	            }
	            productTypePromise.then(function () {
	                if (_this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value]) {
	                    var collectionConfig = _this.collectionConfigService.newCollectionConfig('Option');
	                    collectionConfig.setDisplayProperties('optionGroup.optionGroupName,optionName', undefined, { isVisible: true });
	                    collectionConfig.setDisplayProperties('optionID', undefined, { isVisible: false });
	                    //this.collectionConfig.addFilter('optionGroup.optionGroupID',$('input[name="currentOptionGroups"]').val(),'NOT IN')
	                    collectionConfig.addFilter('optionGroup.globalFlag', 1, '=');
	                    var productTypeIDArray = _this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value].split(",");
	                    for (var j = 0; j < productTypeIDArray.length; j++) {
	                        collectionConfig.addFilter('optionGroup.productTypes.productTypeID', productTypeIDArray[j], '=', 'OR');
	                    }
	                    collectionConfig.setOrderBy('optionGroup.sortOrder|ASC,sortOrder|ASC');
	                    _this.$scope.preprocessproduct_createCtrl.collectionListingPromise = collectionConfig.getEntity();
	                    _this.$scope.preprocessproduct_createCtrl.collectionListingPromise.then(function (data) {
	                        _this.$scope.preprocessproduct_createCtrl.collection = data;
	                        _this.$scope.preprocessproduct_createCtrl.collection.collectionConfig = collectionConfig;
	                    });
	                }
	            }, function () {
	                throw ("ProductCreateController was unable to resolve the product type.");
	            });
	        };
	        var renewalMethodOptions = $("select[name='renewalMethod']")[0];
	        this.$scope.preprocessproduct_createCtrl.renewalMethodOptions = [];
	        angular.forEach(renewalMethodOptions, function (option) {
	            var optionToAdd = {
	                label: option.label,
	                value: option.value
	            };
	            _this.$scope.preprocessproduct_createCtrl.renewalMethodOptions.push(optionToAdd);
	        });
	        this.$scope.preprocessproduct_createCtrl.renewalSkuChoice = this.$scope.preprocessproduct_createCtrl.renewalMethodOptions[1];
	        var productTypeOptions = $("select[name='product.productType.productTypeID']")[0];
	        this.$scope.preprocessproduct_createCtrl.options = [];
	        angular.forEach(productTypeOptions, function (jQueryOption) {
	            var option = {
	                label: jQueryOption.label,
	                value: jQueryOption.value
	            };
	            _this.$scope.preprocessproduct_createCtrl.options.push(option);
	        });
	        this.$scope.preprocessproduct_createCtrl.selectedOption = {};
	        if (angular.isDefined(this.$scope.preprocessproduct_createCtrl.options[0]) && angular.isDefined(this.$scope.preprocessproduct_createCtrl.options[0].value)) {
	            this.$scope.preprocessproduct_createCtrl.selectedOption.value = this.$scope.preprocessproduct_createCtrl.options[0].value;
	            this.$scope.preprocessproduct_createCtrl.productTypeChanged(this.$scope.preprocessproduct_createCtrl.selectedOption);
	        }
	        else {
	            this.$scope.preprocessproduct_createCtrl.selectedOption.value = "";
	        }
	        this.$scope.preprocessproduct_createCtrl.getCollection();
	    }
	    return ProductCreateController;
	}());
	exports.ProductCreateController = ProductCreateController;


/***/ }),
/* 565 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWProductListingPagesController = (function () {
	    //@ngInject
	    function SWProductListingPagesController(collectionConfigService, listingService, utilityService) {
	        this.collectionConfigService = collectionConfigService;
	        this.listingService = listingService;
	        this.utilityService = utilityService;
	        this.collectionConfig = collectionConfigService.newCollectionConfig("Content");
	        this.collectionConfig.addDisplayProperty("contentID, title, activeFlag, site.siteName, titlePath");
	        this.typeaheadDataKey = utilityService.createID(32);
	        this.alreadySelectedContentCollectionConfig = collectionConfigService.newCollectionConfig("ProductListingPage");
	        this.alreadySelectedContentCollectionConfig.addDisplayProperty("productListingPageID, product.productID, content.contentID, content.title, content.site.siteName, content.activeFlag");
	        this.alreadySelectedContentCollectionConfig.addFilter("product.productID", this.productId, "=");
	    }
	    return SWProductListingPagesController;
	}());
	exports.SWProductListingPagesController = SWProductListingPagesController;
	var SWProductListingPages = (function () {
	    //@ngInject
	    function SWProductListingPages($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) {
	        this.$http = $http;
	        this.$hibachi = $hibachi;
	        this.paginationService = paginationService;
	        this.productPartialsPath = productPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            edit: "=?",
	            selectedListingPageIdPaths: "@?",
	            productId: "@?"
	        };
	        this.controller = SWProductListingPagesController;
	        this.controllerAs = "swProductListingPages";
	        this.link = function ($scope, element, attrs) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productPartialsPath) + "/productlistingpages.html";
	    }
	    SWProductListingPages.Factory = function () {
	        var directive = function ($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) { return new SWProductListingPages($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$http',
	            '$hibachi',
	            'paginationService',
	            'productPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWProductListingPages;
	}());
	exports.SWProductListingPages = SWProductListingPages;


/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	//modules
	var core_module_1 = __webpack_require__(275);
	//services
	var productbundleservice_1 = __webpack_require__(567);
	//controllers
	var create_bundle_controller_1 = __webpack_require__(568);
	//directives
	var swproductbundlegrouptype_1 = __webpack_require__(569);
	var swproductbundlegroups_1 = __webpack_require__(570);
	var swproductbundlegroup_1 = __webpack_require__(571);
	var swproductbundlecollectionfilteritemtypeahead_1 = __webpack_require__(572);
	//filters
	var productbundlemodule = angular.module('hibachi.productbundle', [core_module_1.coremodule.name]).config(function () {
	})
	    .constant('productBundlePartialsPath', 'productbundle/components/')
	    .service('productBundleService', productbundleservice_1.ProductBundleService)
	    .controller('create-bundle-controller', create_bundle_controller_1.CreateBundleController)
	    .directive('swProductBundleGroupType', swproductbundlegrouptype_1.SWProductBundleGroupType.Factory())
	    .directive('swProductBundleGroups', swproductbundlegroups_1.SWProductBundleGroups.Factory())
	    .directive('swProductBundleGroup', swproductbundlegroup_1.SWProductBundleGroup.Factory())
	    .directive('swProductBundleCollectionFilterItemTypeahead', swproductbundlecollectionfilteritemtypeahead_1.SWProductBundleCollectionFilterItemTypeahead.Factory());
	exports.productbundlemodule = productbundlemodule;


/***/ }),
/* 567 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var ProductBundleService = (function () {
	    //ngInject
	    function ProductBundleService($log, $hibachi, utilityService) {
	        var _this = this;
	        this.$log = $log;
	        this.$hibachi = $hibachi;
	        this.utilityService = utilityService;
	        this.decorateProductBundleGroup = function (productBundleGroup) {
	            productBundleGroup.data.$$editing = true;
	            var prototype = {
	                $$setMinimumQuantity: function (quantity) {
	                    if (quantity < 0 || quantity === null) {
	                        this.minimumQuantity = 0;
	                    }
	                    if (quantity > this.maximumQuantity) {
	                        this.maximumQuantity = quantity;
	                    }
	                },
	                $$setMaximumQuantity: function (quantity) {
	                    if (quantity < 1 || quantity === null) {
	                        this.maximumQuantity = 1;
	                    }
	                    if (this.maximumQuantity < this.minimumQuantity) {
	                        this.minimumQuantity = this.maximumQuantity;
	                    }
	                },
	                $$setActive: function (value) {
	                    this.active = value;
	                },
	                $$toggleEdit: function () {
	                    if (angular.isUndefined(this.$$editing) || this.$$editing === false) {
	                        this.$$editing = true;
	                    }
	                    else {
	                        this.$$editing = false;
	                    }
	                }
	            };
	            angular.extend(productBundleGroup.data, prototype);
	        };
	        this.formatProductBundleGroupFilters = function (productBundleGroupFilters, filterTerm) {
	            _this.$log.debug('FORMATTING PRODUCT BUNDLE FILTERs');
	            _this.$log.debug(productBundleGroupFilters);
	            _this.$log.debug(filterTerm);
	            if (filterTerm.value === 'sku') {
	                for (var i in productBundleGroupFilters) {
	                    productBundleGroupFilters[i].name = productBundleGroupFilters[i][filterTerm.value + 'Code'];
	                    productBundleGroupFilters[i].type = filterTerm.name;
	                    productBundleGroupFilters[i].entityType = filterTerm.value;
	                    productBundleGroupFilters[i].propertyIdentifier = '_sku.skuID';
	                }
	            }
	            else {
	                for (var i in productBundleGroupFilters) {
	                    productBundleGroupFilters[i].name = productBundleGroupFilters[i][filterTerm.value + 'Name'];
	                    productBundleGroupFilters[i].type = filterTerm.name;
	                    productBundleGroupFilters[i].entityType = filterTerm.value;
	                    if (filterTerm.value === 'brand' || filterTerm.value === 'productType') {
	                        productBundleGroupFilters[i].propertyIdentifier = '_sku.product.' + filterTerm.value + '.' + filterTerm.value + 'ID';
	                    }
	                    else {
	                        productBundleGroupFilters[i].propertyIdentifier = '_sku.' + filterTerm.value + '.' + filterTerm.value + 'ID';
	                    }
	                }
	            }
	            _this.$log.debug(productBundleGroupFilters);
	            return productBundleGroupFilters;
	        };
	        this.$log = $log;
	        this.$hibachi = $hibachi;
	        this.utilityService = utilityService;
	    }
	    return ProductBundleService;
	}());
	exports.ProductBundleService = ProductBundleService;


/***/ }),
/* 568 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var CreateBundleController = (function () {
	    //@ngInject
	    function CreateBundleController($scope, $location, $log, $rootScope, $window, $hibachi, dialogService, alertService, productBundleService, formService, productBundlePartialsPath) {
	        $scope.productBundlePartialsPath = productBundlePartialsPath;
	        var getParameterByName = function (name) {
	            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
	            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"), results = regex.exec(location.search);
	            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
	        };
	        $scope.$id = "create-bundle-controller";
	        //if this view is part of the dialog section, call the inherited function
	        if (angular.isDefined($scope.scrollToTopOfDialog)) {
	            $scope.scrollToTopOfDialog();
	        }
	        var productID = getParameterByName('productID');
	        var productBundleConstructor = function () {
	            $log.debug($scope);
	            if (angular.isDefined($scope.product)) {
	                for (var form in $scope.product.forms) {
	                    formService.resetForm($scope.product.forms[form]);
	                }
	                if (angular.isDefined($scope.product.data.skus[0])) {
	                    for (var form in $scope.product.data.skus[0].forms) {
	                        formService.resetForm($scope.product.data.skus[0].forms[form]);
	                    }
	                }
	                if (angular.isDefined($scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup)) {
	                    for (var form in $scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup.forms) {
	                        formService.resetForm($scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup.forms[form]);
	                    }
	                }
	            }
	            $scope.product = $hibachi.newProduct();
	            var brand = $hibachi.newBrand();
	            var productType = $hibachi.newProductType();
	            $scope.product.$$setBrand(brand);
	            $scope.product.$$setProductType(productType);
	            $scope.product.$$addSku();
	            $scope.product.data.skus[0].data.productBundleGroups = [];
	        };
	        $scope.productBundleGroup;
	        if (angular.isDefined(productID) && productID !== '') {
	            var productPromise = $hibachi.getProduct({ id: productID });
	            productPromise.promise.then(function () {
	                $log.debug(productPromise.value);
	                productPromise.value.$$getSkus().then(function () {
	                    productPromise.value.data.skus[0].$$getProductBundleGroups().then(function () {
	                        $scope.product = productPromise.value;
	                        angular.forEach($scope.product.data.skus[0].data.productBundleGroups, function (productBundleGroup) {
	                            productBundleGroup.$$getProductBundleGroupType();
	                            productBundleService.decorateProductBundleGroup(productBundleGroup);
	                            productBundleGroup.data.$$editing = false;
	                        });
	                    });
	                });
	            }, productBundleConstructor());
	        }
	        else {
	            productBundleConstructor();
	        }
	    }
	    return CreateBundleController;
	}());
	exports.CreateBundleController = CreateBundleController;


/***/ }),
/* 569 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWProductBundleGroupType = (function () {
	    function SWProductBundleGroupType($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) {
	        return {
	            restrict: 'A',
	            templateUrl: slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlegrouptype.html",
	            scope: {
	                productBundleGroup: "="
	            },
	            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
	                    $log.debug('productBundleGrouptype');
	                    $log.debug($scope.productBundleGroup);
	                    $scope.productBundleGroupTypes = {};
	                    $scope.$$id = "productBundleGroupType";
	                    $scope.productBundleGroupTypes.value = [];
	                    $scope.productBundleGroupTypes.$$adding = false;
	                    $scope.productBundleGroupTypeSaving = false;
	                    $scope.productBundleGroupType = {};
	                    if (angular.isUndefined($scope.productBundleGroup.data.productBundleGroupType)) {
	                        var productBundleGroupType = $hibachi.newType();
	                        var parentType = $hibachi.newType();
	                        parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';
	                        productBundleGroupType.$$setParentType(parentType);
	                        $scope.productBundleGroup.$$setProductBundleGroupType(productBundleGroupType);
	                    }
	                    /**
	                     * Sets the state to adding and sets the initial data.
	                     */
	                    $scope.productBundleGroupTypes.setAdding = function () {
	                        $scope.productBundleGroupTypes.$$adding = !$scope.productBundleGroupTypes.$$adding;
	                        if (!$scope.productBundleGroupTypes.$$adding) {
	                            var productBundleGroupType = $hibachi.newType();
	                            var parentType = $hibachi.newType();
	                            parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';
	                            productBundleGroupType.$$setParentType(parentType);
	                            $scope.productBundleGroup.data.productBundleGroupType.data.typeName = "";
	                            productBundleGroupType.data.typeName = $scope.productBundleGroup.data.productBundleGroupType.data.typeName;
	                            productBundleGroupType.data.typeDescription = '';
	                            productBundleGroupType.data.typeNameCode = '';
	                            angular.extend($scope.productBundleGroup.data.productBundleGroupType, productBundleGroupType);
	                            //formService.getForm('form.addProductBundleGroupType').$setDirty();
	                        }
	                    };
	                    $scope.showAddProductBundleGroupTypeBtn = false;
	                    /**
	                     * Handles looking up the keyword and populating the dropdown as a user types.
	                     */
	                    $scope.productBundleGroupTypes.getTypesByKeyword = function (keyword) {
	                        $log.debug('getTypesByKeyword');
	                        var filterGroupsConfig = '[' +
	                            ' {  ' +
	                            '"filterGroup":[  ' +
	                            ' {  ' +
	                            ' "propertyIdentifier":"_type.parentType.systemCode",' +
	                            ' "comparisonOperator":"=",' +
	                            ' "value":"productBundleGroupType",' +
	                            ' "ormtype":"string",' +
	                            ' "conditionDisplay":"Equals"' +
	                            '},' +
	                            '{' +
	                            '"logicalOperator":"AND",' +
	                            ' "propertyIdentifier":"_type.typeName",' +
	                            ' "comparisonOperator":"like",' +
	                            ' "ormtype":"string",' +
	                            ' "value":"%' + keyword + '%"' +
	                            '  }' +
	                            ' ]' +
	                            ' }' +
	                            ']';
	                        return $hibachi.getEntity('type', { filterGroupsConfig: filterGroupsConfig.trim() })
	                            .then(function (value) {
	                            $log.debug('typesByKeyword');
	                            $log.debug(value);
	                            $scope.productBundleGroupTypes.value = value.pageRecords;
	                            var myLength = keyword.length;
	                            if (myLength > 0) {
	                                $scope.showAddProductBundleGroupTypeBtn = true;
	                            }
	                            else {
	                                $scope.showAddProductBundleGroupTypeBtn = false;
	                            }
	                            return $scope.productBundleGroupTypes.value;
	                        });
	                    };
	                    /**
	                     * Handles user selection of the dropdown.
	                     */
	                    $scope.selectProductBundleGroupType = function (item) {
	                        angular.extend($scope.productBundleGroup.data.productBundleGroupType.data, item);
	                        var parentType = $hibachi.newType();
	                        parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';
	                        $scope.productBundleGroup.data.productBundleGroupType.$$setParentType(parentType);
	                        $scope.showAddProductBundleGroupTypeBtn = false;
	                    };
	                    /**
	                     * Closes the add screen
	                     */
	                    $scope.closeAddScreen = function () {
	                        $scope.productBundleGroupTypes.$$adding = false;
	                        $scope.showAddProductBundleGroupTypeBtn = false;
	                    };
	                    /**
	                     * Clears the type name
	                     */
	                    $scope.clearTypeName = function () {
	                        if (angular.isDefined($scope.productBundleGroup.data.productBundleGroupType)) {
	                            $scope.productBundleGroup.data.productBundleGroupType.data.typeName = '';
	                        }
	                    };
	                    /**
	                     * Saves product bundle group type
	                     */
	                    $scope.saveProductBundleGroupType = function () {
	                        $scope.productBundleGroupTypeSaving = true;
	                        //Gets the promise from save                    
	                        var promise = $scope.productBundleGroup.data.productBundleGroupType.$$save();
	                        promise.then(function (response) {
	                            //Calls close function
	                            if (promise.$$state.status) {
	                                $scope.productBundleGroupTypeSaving = false;
	                                $scope.closeAddScreen();
	                            }
	                        }, function () {
	                            $scope.productBundleGroupTypeSaving = false;
	                        });
	                    };
	                    //Sets up clickOutside Directive call back arguments
	                    $scope.clickOutsideArgs = {
	                        callBackActions: [$scope.closeAddScreen]
	                    };
	                    /**
	                     * Works with swclickoutside directive to close dialog
	                     */
	                    $scope.closeThis = function (clickOutsideArgs) {
	                        //Check against the object state
	                        if (!$scope.productBundleGroup.data.productBundleGroupType.$$isPersisted()) {
	                            //Perform all callback actions
	                            for (var callBackAction in clickOutsideArgs.callBackActions) {
	                                clickOutsideArgs.callBackActions[callBackAction]();
	                            }
	                        }
	                    };
	                }]
	        };
	    }
	    SWProductBundleGroupType.Factory = function () {
	        var directive = function ($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) { return new SWProductBundleGroupType($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder); };
	        directive.$inject = [
	            '$http',
	            '$log',
	            '$hibachi',
	            'formService',
	            'collectionConfigService',
	            'productBundlePartialsPath',
	            'productBundleService',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWProductBundleGroupType;
	}());
	exports.SWProductBundleGroupType = SWProductBundleGroupType;


/***/ }),
/* 570 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWProductBundleGroupsController = (function () {
	    //@ngInject
	    function SWProductBundleGroupsController($scope, $element, $attrs, $log, productBundleService, $hibachi) {
	        var _this = this;
	        this.$scope = $scope;
	        this.$element = $element;
	        this.$attrs = $attrs;
	        this.$log = $log;
	        this.productBundleService = productBundleService;
	        this.$hibachi = $hibachi;
	        this.removeProductBundleGroup = function (index) {
	            if (angular.isDefined(_this.productBundleGroups[index]) && _this.productBundleGroups[index].$$isPersisted()) {
	                _this.productBundleGroups[index].$$delete().then(function (data) {
	                    //no more logic to run
	                });
	            }
	            _this.productBundleGroups.splice(index, 1);
	        };
	        this.addProductBundleGroup = function () {
	            var productBundleGroup = _this.$hibachi.newProductBundleGroup();
	            productBundleGroup.$$setProductBundleSku(_this.sku);
	            productBundleGroup = _this.productBundleService.decorateProductBundleGroup(productBundleGroup);
	        };
	        $scope.editing = $scope.editing || true;
	        angular.forEach(this.productBundleGroups, function (obj) {
	            productBundleService.decorateProductBundleGroup(obj);
	            obj.data.$$editing = false;
	        });
	    }
	    return SWProductBundleGroupsController;
	}());
	exports.SWProductBundleGroupsController = SWProductBundleGroupsController;
	var SWProductBundleGroups = (function () {
	    function SWProductBundleGroups($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) {
	        this.restrict = 'EA';
	        this.scope = {
	            sku: "=",
	            productBundleGroups: "="
	        };
	        this.bindToController = {
	            sku: "=",
	            productBundleGroups: "="
	        };
	        this.controller = SWProductBundleGroupsController;
	        this.controllerAs = "swProductBundleGroups";
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlegroups.html";
	    }
	    SWProductBundleGroups.Factory = function () {
	        var directive = function ($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) { return new SWProductBundleGroups($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder); };
	        directive.$inject = [
	            '$http',
	            '$log',
	            '$hibachi',
	            'metadataService',
	            'productBundlePartialsPath',
	            'productBundleService',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWProductBundleGroups;
	}());
	exports.SWProductBundleGroups = SWProductBundleGroups;


/***/ }),
/* 571 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var CollectionFilterItem = (function () {
	    function CollectionFilterItem(name, type, displayPropertyIdentifier, propertyIdentifier, displayValue, value, comparisonOperator, logicalOperator) {
	        this.name = name;
	        this.type = type;
	        this.displayPropertyIdentifier = displayPropertyIdentifier;
	        this.propertyIdentifier = propertyIdentifier;
	        this.displayValue = displayValue;
	        this.value = value;
	        this.comparisonOperator = comparisonOperator;
	        this.logicalOperator = logicalOperator;
	    }
	    return CollectionFilterItem;
	}());
	var SWProductBundleGroupController = (function () {
	    // @ngInject
	    function SWProductBundleGroupController($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath) {
	        var _this = this;
	        this.$log = $log;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.productBundleService = productBundleService;
	        this.metadataService = metadataService;
	        this.utilityService = utilityService;
	        this.formService = formService;
	        this.$hibachi = $hibachi;
	        this.productBundlePartialsPath = productBundlePartialsPath;
	        this.init = function () {
	            _this.maxRecords = 10;
	            _this.recordsCount = 0;
	            _this.pageRecordsStart = 0;
	            _this.pageRecordsEnd = 0;
	            _this.recordsPerPage = 10;
	            _this.showAll = false;
	            _this.showAdvanced = false;
	            _this.currentPage = 1;
	            _this.pageShow = 10;
	            _this.searchAllCollectionConfigs = [];
	            if (angular.isUndefined(_this.filterPropertiesList)) {
	                _this.filterPropertiesList = {};
	                var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName('_sku');
	                filterPropertiesPromise.then(function (value) {
	                    _this.metadataService.setPropertiesList(value, '_sku');
	                    _this.filterPropertiesList['_sku'] = _this.metadataService.getPropertiesListByBaseEntityAlias('_sku');
	                    _this.metadataService.formatPropertiesList(_this.filterPropertiesList['_sku'], '_sku');
	                });
	            }
	            _this.searchOptions = {
	                options: [
	                    {
	                        name: "All",
	                        value: "All"
	                    },
	                    {
	                        name: "Product Type",
	                        value: "productType"
	                    },
	                    {
	                        name: "Brand",
	                        value: "brand"
	                    },
	                    {
	                        name: "Products",
	                        value: "product"
	                    },
	                    {
	                        name: "Skus",
	                        value: "sku"
	                    }
	                ],
	                selected: {
	                    name: "All",
	                    value: "All"
	                },
	                setSelected: function (searchOption) {
	                    _this.searchOptions.selected = searchOption;
	                }
	            };
	            _this.navigation = {
	                value: 'Basic',
	                setValue: function (value) {
	                    _this.value = value;
	                }
	            };
	            _this.filterTemplatePath = _this.productBundlePartialsPath + "productbundlefilter.html";
	            _this.productBundleGroupFilters = {};
	            _this.productBundleGroupFilters.value = [];
	            if (angular.isUndefined(_this.productBundleGroup.data.skuCollectionConfig) || _this.productBundleGroup.data.skuCollectionConfig === null) {
	                _this.productBundleGroup.data.skuCollectionConfig = _this.collectionConfigService.newCollectionConfig("Sku").getCollectionConfig();
	            }
	            var options = {
	                filterGroupsConfig: _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup,
	                columnsConfig: _this.productBundleGroup.data.skuCollectionConfig.columns,
	            };
	            _this.getCollection();
	        };
	        this.deleteEntity = function (type) {
	            _this.removeProductBundleGroup({ index: _this.index });
	            _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];
	        };
	        this.getCollection = function () {
	            var options = {
	                filterGroupsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.filterGroups),
	                columnsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.columns),
	                currentPage: 1,
	                pageShow: 10
	            };
	            var collectionPromise = _this.$hibachi.getEntity('Sku', options);
	            collectionPromise.then(function (response) {
	                _this.collection = response;
	            });
	        };
	        this.increaseCurrentCount = function () {
	            if (angular.isDefined(_this.totalPages) && _this.totalPages != _this.currentPage) {
	                _this.currentPage++;
	            }
	            else {
	                _this.currentPage = 1;
	            }
	        };
	        this.resetCurrentCount = function () {
	            _this.currentPage = 1;
	        };
	        this.save = function () {
	            var savePromise = _this.productBundleGroup.$$save();
	            savePromise.then(function (response) {
	                _this.productBundleGroup.data.$$toggleEdit();
	            }).catch(function (data) {
	                //error handling handled by $$save
	            });
	        };
	        this.saveAndAddBundleGroup = function () {
	            var savePromise = _this.productBundleGroup.$$save();
	            savePromise.then(function (response) {
	                _this.productBundleGroup.data.$$toggleEdit();
	                _this.addProductBundleGroup();
	            }).catch(function (data) {
	                //error handling handled by $$save
	            });
	        };
	        this.init();
	    }
	    return SWProductBundleGroupController;
	}());
	var SWProductBundleGroup = (function () {
	    // @ngInject
	    function SWProductBundleGroup($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) {
	        this.$log = $log;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.productBundleService = productBundleService;
	        this.metadataService = metadataService;
	        this.utilityService = utilityService;
	        this.formService = formService;
	        this.$hibachi = $hibachi;
	        this.productBundlePartialsPath = productBundlePartialsPath;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            productBundleGroup: "=",
	            productBundleGroups: "=",
	            index: "=",
	            addProductBundleGroup: "&",
	            removeProductBundleGroup: "&",
	            formName: "@"
	        };
	        this.controller = SWProductBundleGroupController;
	        this.controllerAs = "swProductBundleGroup";
	        this.link = function ($scope, element, attrs, ctrl) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlegroup.html";
	    }
	    SWProductBundleGroup.Factory = function () {
	        var directive = function ($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) { return new SWProductBundleGroup($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            "$log", "$timeout", "collectionConfigService", "productBundleService", "metadataService", "utilityService", "formService", "$hibachi", "productBundlePartialsPath",
	            "slatwallPathBuilder"
	        ];
	        return directive;
	    };
	    return SWProductBundleGroup;
	}());
	exports.SWProductBundleGroup = SWProductBundleGroup;


/***/ }),
/* 572 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var CollectionFilterItem = (function () {
	    function CollectionFilterItem(name, type, displayPropertyIdentifier, propertyIdentifier, displayValue, value, comparisonOperator, logicalOperator) {
	        this.name = name;
	        this.type = type;
	        this.displayPropertyIdentifier = displayPropertyIdentifier;
	        this.propertyIdentifier = propertyIdentifier;
	        this.displayValue = displayValue;
	        this.value = value;
	        this.comparisonOperator = comparisonOperator;
	        this.logicalOperator = logicalOperator;
	    }
	    return CollectionFilterItem;
	}());
	var SWProductBundleCollectionFilterItemTypeaheadController = (function () {
	    // @ngInject
	    function SWProductBundleCollectionFilterItemTypeaheadController($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath) {
	        var _this = this;
	        this.$log = $log;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.productBundleService = productBundleService;
	        this.metadataService = metadataService;
	        this.utilityService = utilityService;
	        this.formService = formService;
	        this.$hibachi = $hibachi;
	        this.productBundlePartialsPath = productBundlePartialsPath;
	        this.init = function () {
	            _this.maxRecords = 10;
	            _this.recordsCount = 0;
	            _this.pageRecordsStart = 0;
	            _this.pageRecordsEnd = 0;
	            _this.recordsPerPage = 10;
	            _this.showAll = false;
	            _this.showAdvanced = false;
	            _this.currentPage = 1;
	            _this.pageShow = 10;
	            _this.searchAllCollectionConfigs = [];
	            if (angular.isUndefined(_this.filterPropertiesList)) {
	                _this.filterPropertiesList = {};
	                var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName('_sku');
	                filterPropertiesPromise.then(function (value) {
	                    _this.metadataService.setPropertiesList(value, '_sku');
	                    _this.filterPropertiesList['_sku'] = _this.metadataService.getPropertiesListByBaseEntityAlias('_sku');
	                    _this.metadataService.formatPropertiesList(_this.filterPropertiesList['_sku'], '_sku');
	                });
	            }
	            _this.skuCollectionConfig = {
	                baseEntityName: "Sku",
	                baseEntityAlias: "_sku",
	                collectionConfig: _this.productBundleGroup.data.skuCollectionConfig,
	                collectionObject: 'Sku'
	            };
	            _this.searchOptions = {
	                options: [
	                    {
	                        name: "All",
	                        value: "All"
	                    },
	                    {
	                        name: "Product Type",
	                        value: "productType"
	                    },
	                    {
	                        name: "Brand",
	                        value: "brand"
	                    },
	                    {
	                        name: "Products",
	                        value: "product"
	                    },
	                    {
	                        name: "Skus",
	                        value: "sku"
	                    }
	                ],
	                selected: {
	                    name: "All",
	                    value: "All"
	                },
	                setSelected: function (searchOption) {
	                    _this.searchOptions.selected = searchOption;
	                    _this.getFiltersByTerm(_this.productBundleGroupFilters.keyword, searchOption);
	                }
	            };
	            _this.navigation = {
	                value: 'Basic',
	                setValue: function (value) {
	                    _this.value = value;
	                }
	            };
	            _this.filterTemplatePath = _this.productBundlePartialsPath + "productbundlefilter.html";
	            _this.productBundleGroupFilters = {};
	            _this.productBundleGroupFilters.value = [];
	            if (angular.isUndefined(_this.productBundleGroup.data.skuCollectionConfig)) {
	                _this.productBundleGroup.data.skuCollectionConfig = {};
	                _this.productBundleGroup.data.skuCollectionConfig.filterGroups = [];
	            }
	            if (!angular.isDefined(_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0])) {
	                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0] = {};
	                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];
	            }
	            var options = {
	                filterGroupsConfig: _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup,
	                columnsConfig: _this.productBundleGroup.data.skuCollectionConfig.columns,
	            };
	            _this.getCollection();
	        };
	        this.openCloseAndRefresh = function () {
	            _this.showAdvanced = !_this.showAdvanced;
	            if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.length) {
	                _this.getCollection();
	            }
	        };
	        this.deleteEntity = function (type) {
	            if (angular.isNumber(type)) {
	                _this.removeProductBundleGroupFilter(type);
	            }
	            else {
	                _this.removeProductBundleGroup({ index: _this.index });
	                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];
	            }
	        };
	        this.getCollection = function () {
	            var options = {
	                filterGroupsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.filterGroups),
	                columnsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.columns),
	                currentPage: 1,
	                pageShow: 10
	            };
	            var collectionPromise = _this.$hibachi.getEntity('Sku', options);
	            collectionPromise.then(function (response) {
	                _this.collection = response;
	            });
	        };
	        this.increaseCurrentCount = function () {
	            if (angular.isDefined(_this.totalPages) && _this.totalPages != _this.currentPage) {
	                _this.currentPage++;
	            }
	            else {
	                _this.currentPage = 1;
	            }
	        };
	        this.resetCurrentCount = function () {
	            _this.currentPage = 1;
	        };
	        this.getFiltersByTerm = function (keyword, filterTerm) {
	            //save search
	            _this.keyword = keyword;
	            _this.filterTerm = filterTerm;
	            _this.loading = true;
	            _this.showAll = true;
	            var _loadingCount;
	            if (_this.timeoutPromise) {
	                _this.$timeout.cancel(_this.timeoutPromise);
	            }
	            _this.timeoutPromise = _this.$timeout(function () {
	                if (filterTerm.value === 'All') {
	                    _this.showAll = true;
	                    _this.productBundleGroupFilters.value = [];
	                    _loadingCount = _this.searchOptions.options.length - 1;
	                    for (var i = 0; i < _this.searchOptions.options.length; i++) {
	                        if (i > 0) {
	                            var option = _this.searchOptions.options[i];
	                            (function (keyword, option) {
	                                if (_this.searchAllCollectionConfigs.length <= 4) {
	                                    _this.searchAllCollectionConfigs.push(_this.collectionConfigService.newCollectionConfig(_this.searchOptions.options[i].value));
	                                }
	                                _this.searchAllCollectionConfigs[i - 1].setKeywords(keyword);
	                                _this.searchAllCollectionConfigs[i - 1].setCurrentPage(_this.currentPage);
	                                _this.searchAllCollectionConfigs[i - 1].setPageShow(_this.pageShow);
	                                //searchAllCollectionConfig.setAllRecords(true);
	                                _this.searchAllCollectionConfigs[i - 1].getEntity().then(function (value) {
	                                    _this.recordsCount = value.recordsCount;
	                                    _this.pageRecordsStart = value.pageRecordsStart;
	                                    _this.pageRecordsEnd = value.pageRecordsEnd;
	                                    _this.totalPages = value.totalPages;
	                                    var formattedProductBundleGroupFilters = _this.productBundleService.formatProductBundleGroupFilters(value.pageRecords, option, _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup);
	                                    for (var j in formattedProductBundleGroupFilters) {
	                                        if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.indexOf(formattedProductBundleGroupFilters[j]) == -1) {
	                                            _this.productBundleGroupFilters.value.push(formattedProductBundleGroupFilters[j]);
	                                            _this.$log.debug(formattedProductBundleGroupFilters[j]);
	                                        }
	                                    }
	                                    // Increment Down The Loading Count
	                                    _loadingCount--;
	                                    // If the loadingCount drops to 0, then we can update scope
	                                    if (_loadingCount == 0) {
	                                        //This sorts the array of objects by the objects' "type" property alphabetically
	                                        _this.productBundleGroupFilters.value = _this.utilityService.arraySorter(_this.productBundleGroupFilters.value, ["type", "name"]);
	                                        _this.$log.debug(_this.productBundleGroupFilters.value);
	                                        if (_this.productBundleGroupFilters.value.length == 0) {
	                                            _this.currentPage = 0;
	                                        }
	                                    }
	                                    _this.loading = false;
	                                });
	                            })(keyword, option);
	                        }
	                    }
	                }
	                else {
	                    _this.showAll = false;
	                    if (angular.isUndefined(_this.searchCollectionConfig) || filterTerm.value != _this.searchCollectionConfig.baseEntityName) {
	                        _this.searchCollectionConfig = _this.collectionConfigService.newCollectionConfig(filterTerm.value);
	                    }
	                    _this.searchCollectionConfig.setKeywords(keyword);
	                    _this.searchCollectionConfig.setCurrentPage(_this.currentPage);
	                    _this.searchCollectionConfig.setPageShow(_this.pageShow);
	                    _this.searchCollectionConfig.getEntity().then(function (value) {
	                        _this.recordsCount = value.recordsCount;
	                        _this.pageRecordsStart = value.pageRecordsStart;
	                        _this.pageRecordsEnd = value.pageRecordsEnd;
	                        _this.totalPages = value.totalPages;
	                        _this.productBundleGroupFilters.value = _this.productBundleService.formatProductBundleGroupFilters(value.pageRecords, filterTerm, _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup) || [];
	                        _this.loading = false;
	                    });
	                }
	            }, 500);
	        };
	        this.addFilterToProductBundle = function (filterItem, include, index) {
	            var collectionFilterItem = new CollectionFilterItem(filterItem.name, filterItem.type, filterItem.type, filterItem.propertyIdentifier, filterItem[filterItem.entityType.charAt(0).toLowerCase() + filterItem.entityType.slice(1) + 'ID'], filterItem[filterItem.entityType.charAt(0).toLowerCase() + filterItem.entityType.slice(1) + 'ID']);
	            if (include === false) {
	                collectionFilterItem.comparisonOperator = '!=';
	            }
	            else {
	                collectionFilterItem.comparisonOperator = '=';
	            }
	            if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.length > 0) {
	                collectionFilterItem.logicalOperator = 'OR';
	            }
	            if (angular.isDefined(_this.searchCollectionConfig)) {
	                _this.searchCollectionConfig.addFilter(_this.searchCollectionConfig.baseEntityName + "ID", collectionFilterItem.value, "!=");
	            }
	            if (_this.showAll) {
	                switch (collectionFilterItem.type) {
	                    case 'Product Type':
	                        _this.searchAllCollectionConfigs[0].addFilter("productTypeID", collectionFilterItem.value, "!=");
	                        break;
	                    case 'Brand':
	                        _this.searchAllCollectionConfigs[1].addFilter("brandID", collectionFilterItem.value, "!=");
	                        break;
	                    case 'Products':
	                        _this.searchAllCollectionConfigs[2].addFilter("productID", collectionFilterItem.value, "!=");
	                        break;
	                    case 'Skus':
	                        _this.searchAllCollectionConfigs[3].addFilter("skuID", collectionFilterItem.value, "!=");
	                        break;
	                }
	            }
	            _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.push(collectionFilterItem);
	            _this.productBundleGroup.forms[_this.formName].skuCollectionConfig.$setDirty();
	            //reload the list to correct pagination show all takes too long for this to be graceful
	            if (!_this.showAll) {
	                _this.getFiltersByTerm(_this.keyword, _this.filterTerm);
	            }
	            else {
	                //Removes the filter item from the left hand search result
	                _this.productBundleGroupFilters.value.splice(index, 1);
	            }
	        };
	        this.removeProductBundleGroupFilter = function (index) {
	            //Pushes item back into array
	            _this.productBundleGroupFilters.value.push(_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup[index]);
	            //Sorts Array
	            _this.productBundleGroupFilters.value = _this.utilityService.arraySorter(_this.productBundleGroupFilters.value, ["type", "name"]);
	            //Removes the filter item from the filtergroup
	            var collectionFilterItem = _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.splice(index, 1)[0];
	            if (angular.isDefined(_this.searchCollectionConfig)) {
	                _this.searchCollectionConfig.removeFilter(_this.searchCollectionConfig.baseEntityAlias + '.' + _this.searchCollectionConfig.baseEntityName + "ID", collectionFilterItem.value, "!=");
	            }
	            if (_this.showAll) {
	                switch (collectionFilterItem.type) {
	                    case 'Product Type':
	                        _this.searchAllCollectionConfigs[0].removeFilter("_productType.productTypeID", collectionFilterItem.value, "!=");
	                        break;
	                    case 'Brand':
	                        _this.searchAllCollectionConfigs[1].removeFilter("_brand.brandID", collectionFilterItem.value, "!=");
	                        break;
	                    case 'Products':
	                        _this.searchAllCollectionConfigs[2].removeFilter("_product.productID", collectionFilterItem.value, "!=");
	                        break;
	                    case 'Skus':
	                        _this.searchAllCollectionConfigs[3].removeFilter("_sku.skuID", collectionFilterItem.value, "!=");
	                        break;
	                }
	            }
	            if (!_this.showAll) {
	                _this.getFiltersByTerm(_this.keyword, _this.filterTerm);
	            }
	            else {
	                _this.productBundleGroupFilters.value.splice(index, 0, collectionFilterItem);
	            }
	        };
	        this.init();
	    }
	    return SWProductBundleCollectionFilterItemTypeaheadController;
	}());
	exports.SWProductBundleCollectionFilterItemTypeaheadController = SWProductBundleCollectionFilterItemTypeaheadController;
	var SWProductBundleCollectionFilterItemTypeahead = (function () {
	    // @ngInject
	    function SWProductBundleCollectionFilterItemTypeahead($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) {
	        this.$log = $log;
	        this.$timeout = $timeout;
	        this.collectionConfigService = collectionConfigService;
	        this.productBundleService = productBundleService;
	        this.metadataService = metadataService;
	        this.utilityService = utilityService;
	        this.formService = formService;
	        this.$hibachi = $hibachi;
	        this.productBundlePartialsPath = productBundlePartialsPath;
	        this.restrict = "EA";
	        this.scope = {};
	        this.bindToController = {
	            productBundleGroup: "=",
	            index: "=",
	            formName: "@"
	        };
	        this.controller = SWProductBundleCollectionFilterItemTypeaheadController;
	        this.controllerAs = "swProductBundleCollectionFilteritemTypeahead";
	        this.link = function ($scope, element, attrs, ctrl) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlecollectionfilteritemtypeahead.html";
	    }
	    SWProductBundleCollectionFilterItemTypeahead.Factory = function () {
	        var directive = function ($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) { return new SWProductBundleCollectionFilterItemTypeahead($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            "$log", "$timeout", "collectionConfigService", "productBundleService", "metadataService", "utilityService", "formService", "$hibachi", "productBundlePartialsPath",
	            "slatwallPathBuilder"
	        ];
	        return directive;
	    };
	    return SWProductBundleCollectionFilterItemTypeahead;
	}());
	exports.SWProductBundleCollectionFilterItemTypeahead = SWProductBundleCollectionFilterItemTypeahead;


/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/// <reference path='../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	//modules
	var core_module_1 = __webpack_require__(275);
	//services
	var defaultskuservice_1 = __webpack_require__(574);
	var skupriceservice_1 = __webpack_require__(575);
	//controllers
	//directives
	var swpricingmanager_1 = __webpack_require__(576);
	var swimagedetailmodallauncher_1 = __webpack_require__(577);
	var swaddskupricemodallauncher_1 = __webpack_require__(578);
	var swdeleteskupricemodallauncher_1 = __webpack_require__(579);
	var swskustockadjustmentmodallauncher_1 = __webpack_require__(580);
	var swdefaultskuradio_1 = __webpack_require__(581);
	var swskucurrencyselector_1 = __webpack_require__(582);
	var swskupriceedit_1 = __webpack_require__(583);
	var swskucodeedit_1 = __webpack_require__(584);
	var swskupricesedit_1 = __webpack_require__(585);
	var swskupricequantityedit_1 = __webpack_require__(586);
	var swskuthumbnail_1 = __webpack_require__(587);
	//filters
	var skumodule = angular.module('hibachi.sku', [core_module_1.coremodule.name]).config(function () {
	})
	    .constant('skuPartialsPath', 'sku/components/')
	    .service('defaultSkuService', defaultskuservice_1.DefaultSkuService)
	    .service('skuPriceService', skupriceservice_1.SkuPriceService)
	    .directive('swPricingManager', swpricingmanager_1.SWPricingManager.Factory())
	    .directive('swImageDetailModalLauncher', swimagedetailmodallauncher_1.SWImageDetailModalLauncher.Factory())
	    .directive('swAddSkuPriceModalLauncher', swaddskupricemodallauncher_1.SWAddSkuPriceModalLauncher.Factory())
	    .directive('swDeleteSkuPriceModalLauncher', swdeleteskupricemodallauncher_1.SWDeleteSkuPriceModalLauncher.Factory())
	    .directive('swSkuStockAdjustmentModalLauncher', swskustockadjustmentmodallauncher_1.SWSkuStockAdjustmentModalLauncher.Factory())
	    .directive('swDefaultSkuRadio', swdefaultskuradio_1.SWDefaultSkuRadio.Factory())
	    .directive('swSkuCurrencySelector', swskucurrencyselector_1.SWSkuCurrencySelector.Factory())
	    .directive('swSkuPriceEdit', swskupriceedit_1.SWSkuPriceEdit.Factory())
	    .directive('swSkuCodeEdit', swskucodeedit_1.SWSkuCodeEdit.Factory())
	    .directive('swSkuPricesEdit', swskupricesedit_1.SWSkuPricesEdit.Factory())
	    .directive('swSkuPriceQuantityEdit', swskupricequantityedit_1.SWSkuPriceQuantityEdit.Factory())
	    .directive('swSkuThumbnail', swskuthumbnail_1.SWSkuThumbnail.Factory());
	exports.skumodule = skumodule;


/***/ }),
/* 574 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var DefaultSkuService = (function () {
	    //@ngInject
	    function DefaultSkuService($hibachi, observerService) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.observerService = observerService;
	        this.observerKeys = {};
	        this.defaultSkuSelections = {};
	        this.attachObserver = function (selectionID, productID) {
	            if (angular.isUndefined(_this.observerKeys[selectionID])) {
	                _this.observerKeys[selectionID] = { attached: true, productID: productID, hasBeenCalled: false };
	                _this.observerService.attach(_this.decideToSaveSku, 'swSelectionToggleSelection' + selectionID);
	            } //otherwise the event has been attached
	        };
	        this.decideToSaveSku = function (args) {
	            if (_this.defaultSkuSelections[args.selectionid] == null) {
	                _this.defaultSkuSelections[args.selectionid] = args.selection;
	            }
	            else if (_this.defaultSkuSelections[args.selectionid] != args.selection) {
	                _this.defaultSkuSelections[args.selectionid] = args.selection;
	                _this.saveDefaultSku(args);
	            }
	        };
	        this.saveDefaultSku = function (args) {
	            //we only want to call save on the second and subsequent times the event fires, because it will fire when it is initialized
	            _this.$hibachi.getEntity("Product", _this.observerKeys[args.selectionid].productID).then(function (product) {
	                var product = _this.$hibachi.populateEntity("Product", product);
	                product.$$setDefaultSku(_this.$hibachi.populateEntity("Sku", { skuID: args.selection }));
	                product.$$save().then(function () {
	                    //there was success
	                }, function () {
	                    //there was a problem
	                });
	            }, function (reason) {
	            });
	        };
	    }
	    return DefaultSkuService;
	}());
	exports.DefaultSkuService = DefaultSkuService;


/***/ }),
/* 575 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SkuPriceService = (function () {
	    //@ngInject
	    function SkuPriceService($http, $q, $hibachi, entityService, cacheService, collectionConfigService, observerService, utilityService) {
	        var _this = this;
	        this.$http = $http;
	        this.$q = $q;
	        this.$hibachi = $hibachi;
	        this.entityService = entityService;
	        this.cacheService = cacheService;
	        this.collectionConfigService = collectionConfigService;
	        this.observerService = observerService;
	        this.utilityService = utilityService;
	        this.skuPrices = {};
	        this.skuPriceCollectionConfigs = {};
	        this.skuPriceGetEntityPromises = {};
	        this.skuDictionary = {};
	        this.skuPriceHasEntityDeferred = {};
	        this.skuPriceHasEntityPromises = {};
	        this.newSkuPrice = function () {
	            return _this.entityService.newEntity('SkuPrice');
	        };
	        this.getRelatedSkuPriceCollectionConfig = function (skuID, currencyCode, minQuantity, maxQuantity) {
	            var relatedSkuPriceCollectionConfig = _this.collectionConfigService.newCollectionConfig("SkuPrice");
	            relatedSkuPriceCollectionConfig.addDisplayProperty("skuPriceID,sku.skuID,minQuantity,maxQuantity,currencyCode,price");
	            relatedSkuPriceCollectionConfig.addFilter("minQuantity", minQuantity, "=");
	            relatedSkuPriceCollectionConfig.addFilter("maxQuantity", maxQuantity, "=");
	            relatedSkuPriceCollectionConfig.addFilter("currencyCode", currencyCode, "!=");
	            relatedSkuPriceCollectionConfig.addFilter("sku.skuID", skuID, "=");
	            relatedSkuPriceCollectionConfig.addOrderBy("currencyCode|asc");
	            relatedSkuPriceCollectionConfig.setAllRecords(true);
	            return relatedSkuPriceCollectionConfig;
	        };
	        //wrapper function to split up args
	        this.updateSkuPrices = function (args) {
	            _this.loadSkuPricesForSku(args.skuID, args.refresh);
	        };
	        this.loadSkuPricesForSku = function (skuID, refresh) {
	            _this.skuPriceHasEntityDeferred[skuID] = _this.$q.defer();
	            _this.skuPriceHasEntityPromises[skuID] = _this.skuPriceHasEntityDeferred[skuID].promise;
	            if (angular.isUndefined(_this.skuPriceCollectionConfigs[skuID])) {
	                _this.skuPriceCollectionConfigs[skuID] = _this.collectionConfigService.newCollectionConfig("SkuPrice");
	                _this.skuPriceCollectionConfigs[skuID].addDisplayProperty("skuPriceID,minQuantity,maxQuantity,currencyCode,price,sku.skuID");
	                _this.skuPriceCollectionConfigs[skuID].addFilter("sku.skuID", skuID, "=");
	                _this.skuPriceCollectionConfigs[skuID].addOrderBy("currencyCode|asc");
	                _this.skuPriceCollectionConfigs[skuID].setAllRecords(true);
	            }
	            if (angular.isUndefined(_this.skuPriceGetEntityPromises[skuID]) || refresh) {
	                _this.skuPriceGetEntityPromises[skuID] = _this.skuPriceCollectionConfigs[skuID].getEntity();
	                refresh = true;
	            }
	            if (refresh) {
	                _this.skuPriceGetEntityPromises[skuID].then(function (response) {
	                    angular.forEach(response.records, function (value, key) {
	                        _this.setSkuPrices(skuID, [_this.$hibachi.populateEntity("SkuPrice", value)]);
	                    });
	                }, function (reason) {
	                    _this.skuPriceHasEntityPromises[skuID].reject();
	                    throw ("skupriceservice failed to get sku prices" + reason);
	                }).finally(function () {
	                    _this.skuPriceHasEntityPromises[skuID].resolve();
	                });
	            }
	            return _this.skuPriceGetEntityPromises[skuID];
	        };
	        this.setSkuPrices = function (skuID, skuPrices) {
	            if (angular.isDefined(_this.skuPrices[skuID])) {
	                for (var i = 0; i < skuPrices.length; i++) {
	                    if (_this.getKeyOfSkuPriceMatch(skuID, skuPrices[i]) != -1) {
	                        _this.getSkuPrices(skuID)[_this.getKeyOfSkuPriceMatch(skuID, skuPrices[i])].data.price = skuPrices[i].data.price;
	                        skuPrices.splice(i, 1);
	                        i--;
	                    }
	                }
	                _this.skuPrices[skuID] = _this.skuPrices[skuID].concat(skuPrices);
	            }
	            else {
	                _this.skuPrices[skuID] = skuPrices;
	            }
	        };
	        this.hasSkuPrices = function (skuID) {
	            if (angular.isDefined(_this.skuPrices[skuID])) {
	                return true;
	            }
	            return false;
	        };
	        this.getSkuPrices = function (skuID) {
	            if (angular.isDefined(_this.skuPrices[skuID])) {
	                return _this.skuPrices[skuID];
	            }
	        };
	        this.loadCurrencies = function () {
	            var loadCurrenciesDeferred = _this.$q.defer();
	            var loadCurrenciesPromise = loadCurrenciesDeferred.promise;
	            if (angular.isDefined(_this.currencies)) {
	                loadCurrenciesDeferred.resolve(_this.currencies);
	            }
	            else {
	                var currencyRatePromise = _this.$http({
	                    method: "POST",
	                    url: _this.$hibachi.getUrlWithActionPrefix() + "api:main.getcurrencyrates"
	                });
	                currencyRatePromise.then(function (response) {
	                    _this.currencies = response.data;
	                    loadCurrenciesDeferred.resolve(_this.currencies);
	                }, function (reason) {
	                    loadCurrenciesDeferred.reject(reason);
	                });
	            }
	            return loadCurrenciesPromise;
	        };
	        //logic for inferred currency prices
	        this.getInferredSkuPrice = function (sku, basePrice, currencyCode) {
	            if (angular.isDefined(_this.currencies[currencyCode]) && sku.data.currencyCode != currencyCode) {
	                var currencyData = _this.currencies[currencyCode];
	                if (currencyData.CONVERTFROM == sku.data.currencyCode) {
	                    return basePrice * (1 / currencyData.CONVERSIONRATE);
	                }
	                else if (currencyData.CONVERTFROM == "EUR" && _this.currencies[sku.data.currencyCode].CONVERTFROM == "EUR") {
	                    //Convert using euro
	                    var tempPrice = basePrice * (1 / currencyData.CONVERSIONRATE);
	                    return tempPrice * (1 / _this.currencies[sku.data.currencyCode].CONVERSIONRATE);
	                }
	                else {
	                    return "N/A"; //will become NaN
	                }
	            }
	            else if (sku.data.currencyCode == currencyCode) {
	                return basePrice;
	            }
	            return "N/A"; //will become NaN
	        };
	        this.createInferredSkuPriceForCurrency = function (sku, skuPrice, currencyCode) {
	            var nonPersistedSkuPrice = _this.entityService.newEntity('SkuPrice');
	            nonPersistedSkuPrice.$$setSku(sku);
	            nonPersistedSkuPrice.data.currencyCode = currencyCode;
	            //if for some reason the price that came back was preformatted althought this really shouldn't be needed
	            if (angular.isString(sku.data.price) && isNaN(parseFloat(sku.data.price.substr(0, 1)))) {
	                //strip currency symbol
	                sku.data.price = parseFloat(sku.data.price.substr(1, sku.data.price.length));
	            }
	            var basePrice = 0;
	            if (angular.isDefined(skuPrice)) {
	                basePrice = skuPrice.data.price;
	            }
	            else {
	                basePrice = sku.data.price;
	            }
	            nonPersistedSkuPrice.data.price = _this.getInferredSkuPrice(sku, basePrice, currencyCode);
	            if (angular.isDefined(skuPrice) && angular.isDefined(skuPrice.data.minQuantity) && !isNaN(skuPrice.data.minQuantity)) {
	                nonPersistedSkuPrice.data.minQuantity = skuPrice.data.minQuantity;
	            }
	            if (angular.isDefined(skuPrice) && angular.isDefined(skuPrice.data.maxQuantity) && !isNaN(skuPrice.data.maxQuantity)) {
	                nonPersistedSkuPrice.data.maxQuantity = skuPrice.data.maxQuantity;
	            }
	            nonPersistedSkuPrice.data.inferred = true;
	            return nonPersistedSkuPrice;
	        };
	        this.skuPriceSetHasCurrencyCode = function (skuPriceSet, currencyCode) {
	            for (var k = 0; k < skuPriceSet.length; k++) {
	                if (currencyCode == skuPriceSet[k].data.currencyCode) {
	                    return true;
	                }
	            }
	            return false;
	        };
	        this.defaultCurrencySkuPriceForSet = function (skuPriceSet) {
	            for (var i = 0; i < skuPriceSet.length; i++) {
	                //temporarily hard coded
	                if (skuPriceSet[i].data.currencyCode == "USD") {
	                    return skuPriceSet[i];
	                }
	            }
	        };
	        this.getSku = function (skuID) {
	            var deferred = _this.$q.defer();
	            var promise = deferred.promise;
	            if (skuID in _this.skuDictionary) {
	                var sku = _this.skuDictionary[skuID];
	                deferred.resolve(sku);
	            }
	            else {
	                _this.$hibachi.getEntity("Sku", skuID).then(function (response) {
	                    _this.skuDictionary[skuID] = _this.$hibachi.populateEntity("Sku", response);
	                    deferred.resolve(_this.skuDictionary[skuID]);
	                }, function (reason) {
	                    deferred.reject(reason);
	                });
	            }
	            return promise;
	        };
	        this.loadInferredSkuPricesForSkuPriceSet = function (skuID, skuPriceSet, eligibleCurrencyCodes) {
	            var deferred = _this.$q.defer();
	            var promise = deferred.promise;
	            _this.loadCurrencies().then(function () {
	                _this.getSku(skuID).then(function (sku) {
	                    for (var j = 0; j < eligibleCurrencyCodes.length; j++) {
	                        if ((sku.data.currencyCode != eligibleCurrencyCodes[j]) &&
	                            (skuPriceSet.length > 0 && !_this.skuPriceSetHasCurrencyCode(skuPriceSet, eligibleCurrencyCodes[j])) ||
	                            ((sku.data.currencyCode != eligibleCurrencyCodes[j]) && skuPriceSet.length == 0)) {
	                            skuPriceSet.push(_this.createInferredSkuPriceForCurrency(sku, _this.defaultCurrencySkuPriceForSet(skuPriceSet), eligibleCurrencyCodes[j]));
	                        }
	                    }
	                    skuPriceSet = _this.sortSkuPrices(skuPriceSet);
	                }, function (reason) {
	                }).finally(function () {
	                    deferred.resolve(skuPriceSet);
	                });
	            });
	            return promise;
	        };
	        this.getBaseSkuPricesForSku = function (skuID, eligibleCurrencyCodes) {
	            var deferred = _this.$q.defer();
	            var promise = deferred.promise;
	            var skuPriceSet = [];
	            if (angular.isDefined(_this.skuPriceHasEntityPromises[skuID])) {
	                _this.skuPriceGetEntityPromises[skuID].then(function () {
	                    var skuPrices = _this.getSkuPrices(skuID) || [];
	                    for (var i = 0; i < skuPrices.length; i++) {
	                        var skuPrice = skuPrices[i];
	                        if (_this.isBaseSkuPrice(skuPrice.data)) {
	                            skuPriceSet.push(skuPrice);
	                        }
	                    }
	                }).finally(function () {
	                    if (angular.isDefined(eligibleCurrencyCodes)) {
	                        _this.loadInferredSkuPricesForSkuPriceSet(skuID, skuPriceSet, eligibleCurrencyCodes).then(function (data) {
	                            deferred.resolve(_this.sortSkuPrices(data));
	                        });
	                    }
	                    else {
	                        deferred.resolve(_this.sortSkuPrices(skuPriceSet));
	                    }
	                });
	            }
	            return promise;
	        };
	        this.getSkuPricesForQuantityRange = function (skuID, minQuantity, maxQuantity, eligibleCurrencyCodes) {
	            var deferred = _this.$q.defer();
	            var promise = deferred.promise;
	            var skuPriceSet = [];
	            if (angular.isDefined(_this.skuPriceHasEntityPromises[skuID])) {
	                _this.skuPriceGetEntityPromises[skuID].then(function () {
	                    var skuPrices = _this.getSkuPrices(skuID);
	                    for (var i = 0; i < skuPrices.length; i++) {
	                        var skuPrice = skuPrices[i];
	                        if (_this.isQuantityRangeSkuPrice(skuPrice.data, minQuantity, maxQuantity)) {
	                            skuPriceSet.push(skuPrice);
	                        }
	                    }
	                }).finally(function () {
	                    if (angular.isDefined(eligibleCurrencyCodes)) {
	                        _this.loadInferredSkuPricesForSkuPriceSet(skuID, skuPriceSet, eligibleCurrencyCodes).then(function (data) {
	                            deferred.resolve(_this.sortSkuPrices(data));
	                        });
	                    }
	                    else {
	                        deferred.resolve(_this.sortSkuPrices(skuPriceSet));
	                    }
	                });
	            }
	            return promise;
	        };
	        this.getKeyOfSkuPriceMatch = function (skuID, skuPrice) {
	            if (_this.hasSkuPrices(skuID)) {
	                for (var i = 0; i < _this.getSkuPrices(skuID).length; i++) {
	                    var savedSkuPriceData = _this.getSkuPrices(skuID)[i].data;
	                    if (savedSkuPriceData.currencyCode == skuPrice.data.currencyCode &&
	                        ((_this.isBaseSkuPrice(savedSkuPriceData) &&
	                            _this.isBaseSkuPrice(savedSkuPriceData) == _this.isBaseSkuPrice(skuPrice.data)) || _this.isQuantityRangeSkuPrice(savedSkuPriceData, skuPrice.data.minQuantity, skuPrice.data.maxQuantity))) {
	                        return i;
	                    }
	                }
	            }
	            return -1;
	        };
	        this.isBaseSkuPrice = function (skuPriceData) {
	            return isNaN(parseInt(skuPriceData.minQuantity)) && isNaN(parseInt(skuPriceData.maxQuantity));
	        };
	        this.isQuantityRangeSkuPrice = function (skuPriceData, minQuantity, maxQuantity) {
	            var minQuantityMatch = (parseInt(skuPriceData.minQuantity) == parseInt(minQuantity));
	            var maxQuantityMatch = (parseInt(skuPriceData.maxQuantity) == parseInt(maxQuantity));
	            return minQuantityMatch && maxQuantityMatch;
	        };
	        this.sortSkuPrices = function (skuPriceSet) {
	            function compareSkuPrices(a, b) {
	                //temporarily hardcoded to usd needs to be default sku value
	                if (a.data.currencyCode == "USD")
	                    return -1;
	                if (a.data.currencyCode < b.data.currencyCode)
	                    return -1;
	                if (a.data.currencyCode > b.data.currencyCode)
	                    return 1;
	                return 0;
	            }
	            return skuPriceSet.sort(compareSkuPrices);
	        };
	        this.observerService.attach(this.updateSkuPrices, 'skuPricesUpdate');
	    }
	    return SkuPriceService;
	}());
	exports.SkuPriceService = SkuPriceService;


/***/ }),
/* 576 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWPricingManagerController = (function () {
	    //@ngInject
	    function SWPricingManagerController(collectionConfigService) {
	        var _this = this;
	        this.collectionConfigService = collectionConfigService;
	        this.productCollectionConfig = this.collectionConfigService.newCollectionConfig("Product");
	        this.productCollectionConfig.addFilter("productID", this.productId, "=");
	        this.productCollectionConfig.addDisplayProperty("productID,defaultSku.currencyCode");
	        this.productCollectionConfig.getEntity().then(function (response) {
	            _this.product = response.pageRecords[0];
	        }, function (reason) {
	        });
	    }
	    return SWPricingManagerController;
	}());
	exports.SWPricingManagerController = SWPricingManagerController;
	var SWPricingManager = (function () {
	    // @ngInject
	    function SWPricingManager($hibachi, skuPartialsPath, slatwallPathBuilder) {
	        this.$hibachi = $hibachi;
	        this.skuPartialsPath = skuPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.restrict = 'EA';
	        this.priority = 1000;
	        this.scope = {};
	        this.bindToController = {
	            productId: "@",
	            trackInventory: "=?"
	        };
	        this.controller = SWPricingManagerController;
	        this.controllerAs = "swPricingManager";
	        this.compile = function (element, attrs) {
	            return {
	                pre: function ($scope, element, attrs) {
	                },
	                post: function ($scope, element, attrs) {
	                }
	            };
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "pricingmanager.html";
	    }
	    SWPricingManager.Factory = function () {
	        var directive = function ($hibachi, skuPartialsPath, slatwallPathBuilder) { return new SWPricingManager($hibachi, skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$hibachi',
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWPricingManager;
	}());
	exports.SWPricingManager = SWPricingManager;


/***/ }),
/* 577 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWImageDetailModalLauncherController = (function () {
	    //@ngInject
	    function SWImageDetailModalLauncherController(observerService, formService, fileService, collectionConfigService, utilityService, $hibachi, $http) {
	        var _this = this;
	        this.observerService = observerService;
	        this.formService = formService;
	        this.fileService = fileService;
	        this.collectionConfigService = collectionConfigService;
	        this.utilityService = utilityService;
	        this.$hibachi = $hibachi;
	        this.$http = $http;
	        this.baseName = "j-image-detail";
	        this.imageOptions = [];
	        this.numberOfSkusWithImageFile = 0;
	        this.fetchImageOptionData = function () {
	            _this.imageOptionsAttachedToSku = _this.collectionConfigService.newCollectionConfig("Option");
	            _this.imageOptionsAttachedToSku.addDisplayProperty('optionGroup.optionGroupName,optionName,optionCode,optionID');
	            _this.imageOptionsAttachedToSku.addFilter('skus.skuID', _this.skuId, "=");
	            _this.imageOptionsAttachedToSku.addFilter('optionGroup.imageGroupFlag', true, "=");
	            _this.imageOptionsAttachedToSku.setAllRecords(true);
	            _this.imageOptionsAttachedToSku.getEntity().then(function (data) {
	                angular.forEach(data.records, function (value, key) {
	                    _this.imageOptions.push(_this.$hibachi.populateEntity("Option", value));
	                });
	            }, function (reason) {
	                throw ("Could not calculate affected skus in SWImageDetailModalLauncher because of: " + reason);
	            });
	            _this.otherSkusWithSameImageCollectionConfig = _this.collectionConfigService.newCollectionConfig("Sku");
	            _this.otherSkusWithSameImageCollectionConfig.addFilter("imageFile", _this.imageFile, "=");
	            _this.otherSkusWithSameImageCollectionConfig.setAllRecords(true);
	            _this.otherSkusWithSameImageCollectionConfig.getEntity().then(function (data) {
	                _this.skusAffectedCount = data.records.length;
	            }, function (reason) {
	                throw ("Could not calculate affected skus in SWImageDetailModalLauncher because of: " + reason);
	            });
	        };
	        this.updateImage = function (rawImage) {
	        };
	        this.saveAction = function () {
	            var data = new FormData();
	            data.append('slatAction', "admin:entity.processProduct");
	            data.append('processContext', "uploadDefaultImage");
	            data.append('sRedirectAction', "admin:entity.detailProduct");
	            data.append('preprocessDisplayedFlag', 'true');
	            data.append('ajaxRequest', 'true');
	            data.append('productID', _this.sku.data.product_productID);
	            if (_this.customImageNameFlag) {
	                data.append('imageFile', _this.imageFileName);
	            }
	            else {
	                data.append('imageFile', _this.sku.data.imageFile);
	            }
	            data.append('uploadFile', _this.sku.data.uploadFile);
	            var savePromise = _this.$http.post("/?s=1", data, {
	                transformRequest: angular.identity,
	                headers: { 'Content-Type': undefined }
	            });
	            return savePromise;
	        };
	        this.cancelAction = function () {
	            _this.observerService.notify(_this.imageFileUpdateEvent, _this.imagePath);
	        };
	        this.name = this.baseName + this.utilityService.createID(18);
	        fileService.imageExists(this.imagePath).then(function () {
	            _this.imagePathToUse = _this.imagePath;
	        }, function () {
	            _this.imagePathToUse = '/assets/images/image-placeholder.jpg';
	        }).finally(function () {
	            var skuData = {
	                skuID: _this.skuId,
	                skuCode: _this.skuCode,
	                imageFileName: _this.imageFileName,
	                imagePath: _this.imagePathToUse,
	                imageFile: _this.imageFile
	            };
	            _this.sku = _this.$hibachi.populateEntity("Sku", skuData);
	            _this.imageFileUpdateEvent = "file:" + _this.imagePath;
	            _this.observerService.attach(_this.updateImage, _this.imageFileUpdateEvent, _this.skuId);
	            _this.fetchImageOptionData();
	        });
	    }
	    return SWImageDetailModalLauncherController;
	}());
	exports.SWImageDetailModalLauncherController = SWImageDetailModalLauncherController;
	var SWImageDetailModalLauncher = (function () {
	    function SWImageDetailModalLauncher(skuPartialsPath, slatwallPathBuilder) {
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            skuId: "@",
	            skuCode: "@",
	            imagePath: "@",
	            imageFile: "@",
	            imageFileName: "@"
	        };
	        this.controller = SWImageDetailModalLauncherController;
	        this.controllerAs = "swImageDetailModalLauncher";
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "imagedetailmodallauncher.html";
	    }
	    SWImageDetailModalLauncher.Factory = function () {
	        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWImageDetailModalLauncher(skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWImageDetailModalLauncher;
	}());
	exports.SWImageDetailModalLauncher = SWImageDetailModalLauncher;


/***/ }),
/* 578 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWAddSkuPriceModalLauncherController = (function () {
	    //@ngInject
	    function SWAddSkuPriceModalLauncherController($hibachi, entityService, formService, listingService, observerService, skuPriceService, utilityService) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.entityService = entityService;
	        this.formService = formService;
	        this.listingService = listingService;
	        this.observerService = observerService;
	        this.skuPriceService = skuPriceService;
	        this.utilityService = utilityService;
	        this.baseName = "j-add-sku-item-";
	        this.saveSuccess = true;
	        this.initData = function () {
	            //these are populated in the link function initially
	            _this.skuPrice = _this.entityService.newEntity('SkuPrice');
	            _this.skuPrice.$$setSku(_this.sku);
	            if (angular.isUndefined(_this.disableAllFieldsButPrice)) {
	                _this.disableAllFieldsButPrice = false;
	            }
	            if (angular.isUndefined(_this.defaultCurrencyOnly)) {
	                _this.defaultCurrencyOnly = false;
	            }
	            if (angular.isDefined(_this.minQuantity) && !isNaN(parseInt(_this.minQuantity))) {
	                _this.skuPrice.data.minQuantity = parseInt(_this.minQuantity);
	            }
	            if (angular.isDefined(_this.maxQuantity) && !isNaN(parseInt(_this.minQuantity))) {
	                _this.skuPrice.data.maxQuantity = parseInt(_this.maxQuantity);
	            }
	            if (angular.isUndefined(_this.currencyCodeOptions) && angular.isDefined(_this.eligibleCurrencyCodeList)) {
	                _this.currencyCodeOptions = _this.eligibleCurrencyCodeList.split(",");
	            }
	            if (_this.defaultCurrencyOnly) {
	                _this.skuPrice.data.currencyCode = "USD"; //temporarily hardcoded
	            }
	            else if (angular.isDefined(_this.currencyCode)) {
	                _this.skuPrice.data.currencyCode = _this.currencyCode;
	            }
	            else if (angular.isDefined(_this.currencyCodeOptions) && _this.currencyCodeOptions.length) {
	                _this.skuPrice.data.currencyCode = _this.currencyCodeOptions[0];
	            }
	            _this.observerService.notify("pullBindings");
	        };
	        this.save = function () {
	            _this.observerService.notify("updateBindings");
	            var firstSkuPriceForSku = !_this.skuPriceService.hasSkuPrices(_this.sku.data.skuID);
	            var savePromise = _this.skuPrice.$$save();
	            savePromise.then(function (response) {
	                _this.saveSuccess = true;
	                _this.observerService.notify('skuPricesUpdate', { skuID: _this.sku.data.skuID, refresh: true });
	                //temporarily overriding for USD need to get this setting accessable to client side
	                if (angular.isDefined(_this.listingID) &&
	                    _this.skuPrice.data.currencyCode == "USD") {
	                    var pageRecords = _this.listingService.getListingPageRecords(_this.listingID);
	                    for (var i = 0; i < pageRecords.length; i++) {
	                        if (angular.isDefined(pageRecords[i].skuID) &&
	                            pageRecords[i].skuID == _this.sku.data.skuID) {
	                            var skuPageRecord = pageRecords[i];
	                            var index = i + 1;
	                            while (index < pageRecords.length && angular.isUndefined(pageRecords[index].skuID)) {
	                                //if there is a place in the listing to insert the new sku price lets insert it
	                                if ((pageRecords[index].minQuantity <= _this.skuPrice.data.minQuantity) &&
	                                    (index + 1 < pageRecords.length && (pageRecords[index + 1].minQuantity >= _this.skuPrice.data.minQuantity ||
	                                        angular.isDefined(pageRecords[index + 1].skuID))) || index + 1 == pageRecords.length) {
	                                    _this.skuPrice.data.eligibleCurrencyCodeList = _this.currencyCodeOptions.join(",");
	                                    //spoof the page record
	                                    var skuPriceForListing = {};
	                                    for (var key in _this.skuPrice.data) {
	                                        skuPriceForListing[key] = _this.skuPrice.data[key];
	                                    }
	                                    skuPriceForListing["sku_skuID"] = _this.sku.skuID;
	                                    skuPriceForListing["sku_skuCode"] = _this.sku.skuCode;
	                                    skuPriceForListing["sku_skuDefinition"] = _this.sku.skuDefinition;
	                                    pageRecords.splice(index + 1, 0, skuPriceForListing);
	                                    break;
	                                }
	                                index++;
	                            }
	                        }
	                    }
	                }
	            }, function (reason) {
	                //error callback
	                _this.saveSuccess = false;
	            }).finally(function () {
	                if (_this.saveSuccess) {
	                    for (var key in _this.skuPrice.data) {
	                        _this.skuPrice.data[key] = null;
	                    }
	                    _this.initData();
	                    if (firstSkuPriceForSku) {
	                        _this.listingService.getCollection(_this.listingID);
	                    }
	                    _this.listingService.notifyListingPageRecordsUpdate(_this.listingID);
	                }
	            });
	            return savePromise;
	        };
	        this.uniqueName = this.baseName + this.utilityService.createID(16);
	        this.formName = "addSkuPrice" + this.utilityService.createID(16);
	        this.skuPrice = this.entityService.newEntity('SkuPrice');
	    }
	    return SWAddSkuPriceModalLauncherController;
	}());
	exports.SWAddSkuPriceModalLauncherController = SWAddSkuPriceModalLauncherController;
	var SWAddSkuPriceModalLauncher = (function () {
	    function SWAddSkuPriceModalLauncher($hibachi, entityService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.entityService = entityService;
	        this.scopeService = scopeService;
	        this.collectionConfigService = collectionConfigService;
	        this.skuPartialsPath = skuPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.transclude = true;
	        this.bindToController = {
	            sku: "=?",
	            pageRecord: "=?",
	            minQuantity: "@?",
	            maxQuantity: "@?",
	            currencyCode: "@?",
	            eligibleCurrencyCodeList: "@?",
	            defaultCurrencyOnly: "=?",
	            disableAllFieldsButPrice: "=?"
	        };
	        this.controller = SWAddSkuPriceModalLauncherController;
	        this.controllerAs = "swAddSkuPriceModalLauncher";
	        this.compile = function (element, attrs) {
	            return {
	                pre: function ($scope, element, attrs) {
	                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive
	                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
	                    if (angular.isDefined(currentScope.pageRecord)) {
	                        $scope.swAddSkuPriceModalLauncher.pageRecord = currentScope.pageRecord;
	                        //sku record case
	                        if (angular.isDefined(currentScope.pageRecord.skuID)) {
	                            var skuData = {
	                                skuID: currentScope.pageRecord.skuID,
	                                skuCode: currentScope.pageRecord.skuCode,
	                                skuDescription: currentScope.pageRecord.skuDescription,
	                                eligibleCurrencyCodeList: currentScope.pageRecord.eligibleCurrencyCodeList
	                            };
	                            $scope.swAddSkuPriceModalLauncher.currencyCodeOptions = currentScope.pageRecord.eligibleCurrencyCodeList.split(",");
	                            $scope.swAddSkuPriceModalLauncher.sku = _this.$hibachi.populateEntity('Sku', skuData);
	                            $scope.swAddSkuPriceModalLauncher.skuPrice = _this.entityService.newEntity('SkuPrice');
	                            $scope.swAddSkuPriceModalLauncher.skuPrice.$$setSku($scope.swAddSkuPriceModalLauncher.sku);
	                        }
	                    }
	                    else {
	                        throw ("swAddSkuPriceModalLauncher was unable to find the pageRecord that it needs!");
	                    }
	                    var listingScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
	                    if (angular.isDefined(listingScope.swListingDisplay)) {
	                        $scope.swAddSkuPriceModalLauncher.listingID = listingScope.swListingDisplay.tableID;
	                    }
	                    $scope.swAddSkuPriceModalLauncher.initData();
	                },
	                post: function ($scope, element, attrs) {
	                }
	            };
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "addskupricemodallauncher.html";
	    }
	    SWAddSkuPriceModalLauncher.Factory = function () {
	        var directive = function ($hibachi, entityService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder) { return new SWAddSkuPriceModalLauncher($hibachi, entityService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$hibachi',
	            'entityService',
	            'scopeService',
	            'collectionConfigService',
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWAddSkuPriceModalLauncher;
	}());
	exports.SWAddSkuPriceModalLauncher = SWAddSkuPriceModalLauncher;


/***/ }),
/* 579 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWDeleteSkuPriceModalLauncherController = (function () {
	    //@ngInject
	    function SWDeleteSkuPriceModalLauncherController($q, $hibachi, listingService, skuPriceService, utilityService) {
	        var _this = this;
	        this.$q = $q;
	        this.$hibachi = $hibachi;
	        this.listingService = listingService;
	        this.skuPriceService = skuPriceService;
	        this.utilityService = utilityService;
	        this.baseName = "j-delete-sku-item-";
	        this.delete = function () {
	            var skuPricesToDelete = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuId, _this.skuPrice.data.minQuantity, _this.skuPrice.data.maxQuantity);
	            var deletePromises = [];
	            skuPricesToDelete.then(function (skuPrices) {
	                for (var i = 0; i < skuPrices.length; i++) {
	                    deletePromises.push(skuPrices[i].$$delete());
	                }
	            }, function (reason) {
	                //error
	            }).finally(function () {
	                _this.$q.all(deletePromises).then(function (response) {
	                    if (angular.isDefined(_this.listingID)) {
	                        var pageRecords = _this.listingService.getListingPageRecords(_this.listingID);
	                        for (var i = 0; i < pageRecords.length; i++) {
	                            if (angular.isDefined(pageRecords[i].skuPriceID) &&
	                                _this.skuPrice.data.skuPriceID == pageRecords[i].skuPriceID) {
	                                pageRecords.splice(i, 1);
	                                break;
	                            }
	                        }
	                    }
	                });
	            });
	            return _this.$q.all(deletePromises);
	        };
	        this.uniqueName = this.baseName + this.utilityService.createID(16);
	    }
	    return SWDeleteSkuPriceModalLauncherController;
	}());
	exports.SWDeleteSkuPriceModalLauncherController = SWDeleteSkuPriceModalLauncherController;
	var SWDeleteSkuPriceModalLauncher = (function () {
	    function SWDeleteSkuPriceModalLauncher($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder) {
	        var _this = this;
	        this.$hibachi = $hibachi;
	        this.scopeService = scopeService;
	        this.skuPartialsPath = skuPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            pageRecord: "=?"
	        };
	        this.controller = SWDeleteSkuPriceModalLauncherController;
	        this.controllerAs = "swDeleteSkuPriceModalLauncher";
	        this.compile = function (element, attrs) {
	            return {
	                pre: function ($scope, element, attrs) {
	                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive
	                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
	                    if (angular.isDefined(currentScope.pageRecord)) {
	                        $scope.swDeleteSkuPriceModalLauncher.pageRecord = currentScope.pageRecord;
	                        if (angular.isDefined(currentScope.pageRecord.sku_skuID)) {
	                            $scope.swDeleteSkuPriceModalLauncher.skuId = currentScope.pageRecord.sku_skuID;
	                        }
	                        if (angular.isDefined(currentScope.pageRecord.skuPriceID) && currentScope.pageRecord.skuPriceID.length) {
	                            var skuPriceData = {
	                                skuPriceID: currentScope.pageRecord.skuPriceID,
	                                minQuantity: currentScope.pageRecord.minQuantity,
	                                maxQuantity: currentScope.pageRecord.maxQuantity,
	                                currencyCode: currentScope.pageRecord.currencyCode,
	                                price: currentScope.pageRecord.price
	                            };
	                            $scope.swDeleteSkuPriceModalLauncher.skuPrice = _this.$hibachi.populateEntity('SkuPrice', skuPriceData);
	                        }
	                    }
	                    else {
	                        throw ("swDeleteSkuPriceModalLauncher was unable to find the pageRecord that it needs!");
	                    }
	                    var listingScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");
	                    if (angular.isDefined(listingScope.swListingDisplay)) {
	                        $scope.swDeleteSkuPriceModalLauncher.listingID = listingScope.swListingDisplay.tableID;
	                    }
	                },
	                post: function ($scope, element, attrs) {
	                }
	            };
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "deleteskupricemodallauncher.html";
	    }
	    SWDeleteSkuPriceModalLauncher.Factory = function () {
	        var directive = function ($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWDeleteSkuPriceModalLauncher($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            '$hibachi',
	            'scopeService',
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWDeleteSkuPriceModalLauncher;
	}());
	exports.SWDeleteSkuPriceModalLauncher = SWDeleteSkuPriceModalLauncher;


/***/ }),
/* 580 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWSkuStockAdjustmentModalLauncherController = (function () {
	    //@ngInject
	    function SWSkuStockAdjustmentModalLauncherController($http, $q, $hibachi, observerService, utilityService) {
	        var _this = this;
	        this.$http = $http;
	        this.$q = $q;
	        this.$hibachi = $hibachi;
	        this.observerService = observerService;
	        this.utilityService = utilityService;
	        this.initData = function () {
	            _this.toLocation = undefined;
	            var skudata = {
	                skuID: _this.skuId,
	                skuCode: _this.skuCode,
	                skuDescription: _this.skuDescription,
	                imagePath: _this.imagePath,
	                calculatedQATS: _this.calculatedQats || 0,
	                calculatedQOH: _this.calculatedQoh || 0,
	            };
	            _this.sku = _this.$hibachi.populateEntity("Sku", skudata);
	            _this.sku.setNewQOH(_this.calculatedQoh || 0);
	            _this.stockAdjustmentID = "";
	            _this.stock = _this.$hibachi.newStock();
	            _this.stockAdjustment = _this.$hibachi.newStockAdjustment();
	            _this.stockAdjustmentItem = _this.$hibachi.newStockAdjustmentItem();
	            _this.toLocation = _this.$hibachi.newLocation();
	            _this.stockAdjustment.$$setToLocation(_this.toLocation);
	            _this.stockAdjustment.$$addStockAdjustmentItem(_this.stockAdjustmentItem);
	            _this.stock.$$setSku(_this.sku);
	            _this.stockAdjustmentItem.$$setToStock(_this.stock);
	            _this.stockAdjustmentType = _this.$hibachi.populateEntity("Type", { typeID: "444df2e60db81c12589c9b39346009f2" }); //manual in stock adjustment type 
	            _this.stockAdjustmentStatusType = _this.$hibachi.populateEntity("Type", { typeID: "444df2e2f66ddfaf9c60caf5c76349a6" }); //new status type for stock adjusment
	            _this.stockAdjustment.$$setStockAdjustmentType(_this.stockAdjustmentType);
	            _this.stockAdjustment.$$setStockAdjustmentStatusType(_this.stockAdjustmentStatusType);
	            _this.stockAdjustmentItem.$$setSku(_this.sku);
	            _this.newQuantity = _this.calculatedQoh || 0;
	            _this.observerService.notify(_this.toLocationTypeaheadDataKey + 'clearSearch');
	        };
	        this.save = function () {
	            return _this.$q.all([_this.observerService.notify('updateBindings'), _this.stock.$$save()]).then().finally(function () {
	                var stockAdjustmentSavePromise = _this.stockAdjustment.$$save();
	                stockAdjustmentSavePromise.then(function (response) {
	                    _this.sku.newQOH = _this.newQuantity;
	                    _this.sku.data.newQOH = _this.newQuantity;
	                    _this.sku.data.calculatedQOH = _this.newQuantity;
	                    _this.stockAdjustmentID = response.stockAdjustmentID;
	                }).finally(function () {
	                    _this.$http({
	                        method: "POST",
	                        url: _this.$hibachi.getUrlWithActionPrefix() + "entity.processStockAdjustment&processContext=processAdjustment&stockAdjustmentID=" + _this.stockAdjustmentID
	                    }).then(function (response) {
	                        //don't need to do anything here
	                    });
	                });
	            });
	        };
	        this.addToLocation = function (item) {
	            if (angular.isDefined(item)) {
	                _this.toLocation = _this.$hibachi.populateEntity('Location', item);
	                _this.stockAdjustment.$$setToLocation(_this.toLocation);
	            }
	            else {
	                _this.toLocation = undefined;
	            }
	        };
	        this.updateNewQuantity = function (args) {
	            if (!isNaN(args.swInput.value)) {
	                _this.newQuantity = args.swInput.value;
	            }
	            else {
	                _this.sku.data.newQOH = 0;
	            }
	            _this.updateStockAdjustmentQuantity();
	        };
	        this.updateStockAdjustmentQuantity = function () {
	            if (!isNaN(_this.newQuantity)) {
	                _this.stockAdjustmentItem.data.quantity = _this.newQuantity - _this.sku.data.calculatedQOH;
	            }
	            else {
	                _this.newQuantity = 0;
	            }
	        };
	        this.toLocationTypeaheadDataKey = this.utilityService.createID(32);
	        if (angular.isDefined(this.skuId)) {
	            this.name = "skuStockAdjustment" + this.utilityService.createID(32);
	        }
	        else {
	            throw ("SWSkuStockAdjustmentModalLauncherController was not provided with a sku id");
	        }
	        if (angular.isDefined(this.calculatedQats)) {
	            this.calculatedQats = parseInt(this.calculatedQats);
	        }
	        if (angular.isDefined(this.calculatedQoh)) {
	            this.calculatedQoh = parseInt(this.calculatedQoh);
	        }
	        this.initData();
	        this.observerService.attach(this.updateNewQuantity, this.name + 'newQuantitychange');
	    }
	    return SWSkuStockAdjustmentModalLauncherController;
	}());
	exports.SWSkuStockAdjustmentModalLauncherController = SWSkuStockAdjustmentModalLauncherController;
	var SWSkuStockAdjustmentModalLauncher = (function () {
	    function SWSkuStockAdjustmentModalLauncher(skuPartialsPath, slatwallPathBuilder) {
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            skuId: "@",
	            skuCode: "@",
	            skuDescription: "@",
	            imagePath: "@",
	            calculatedQats: "@?",
	            calculatedQoh: "@?"
	        };
	        this.controller = SWSkuStockAdjustmentModalLauncherController;
	        this.controllerAs = "swSkuStockAdjustmentModalLauncher";
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skustockadjustmentmodallauncher.html";
	    }
	    SWSkuStockAdjustmentModalLauncher.Factory = function () {
	        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWSkuStockAdjustmentModalLauncher(skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWSkuStockAdjustmentModalLauncher;
	}());
	exports.SWSkuStockAdjustmentModalLauncher = SWSkuStockAdjustmentModalLauncher;


/***/ }),
/* 581 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWDefaultSkuRadioController = (function () {
	    //@ngInject
	    function SWDefaultSkuRadioController($hibachi, defaultSkuService) {
	        this.$hibachi = $hibachi;
	        this.defaultSkuService = defaultSkuService;
	        if (angular.isDefined(this.listingDisplayId) && angular.isDefined(this.columnId)) {
	            this.selectionId = this.listingDisplayId + this.columnId;
	        }
	        else if (angular.isDefined(this.listingDisplayId)) {
	            this.selectionId = this.listingDisplayId;
	        }
	        else {
	            throw ("You must provide the listingDisplayId to SWDefaultSkuRadioController");
	        }
	        defaultSkuService.attachObserver(this.selectionId, this.productProductId);
	        if (angular.isUndefined(this.selectionFieldName)) {
	            this.selectionFieldName = this.selectionId + 'selection';
	        }
	        if (angular.isUndefined(this.skuId) && angular.isUndefined(this.sku)) {
	            throw ("You must provide a skuID to SWDefaultSkuRadioController");
	        }
	        this.isDefaultSku = (this.skuId == this.productDefaultSkuSkuId);
	        if (angular.isUndefined(this.sku)) {
	            var skuData = {
	                skuID: this.skuId
	            };
	            this.sku = this.$hibachi.populateEntity('Sku', skuData);
	        }
	    }
	    return SWDefaultSkuRadioController;
	}());
	exports.SWDefaultSkuRadioController = SWDefaultSkuRadioController;
	var SWDefaultSkuRadio = (function () {
	    function SWDefaultSkuRadio(skuPartialsPath, slatwallPathBuilder) {
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            skuId: "@",
	            sku: "=?",
	            productProductId: "@?",
	            productDefaultSkuSkuId: "@?",
	            productId: "@?",
	            listingDisplayId: "@?",
	            columnId: "@?"
	        };
	        this.controller = SWDefaultSkuRadioController;
	        this.controllerAs = "swDefaultSkuRadio";
	        this.compile = function (element, attrs) {
	            return {
	                pre: function ($scope, element, attrs) {
	                },
	                post: function ($scope, element, attrs) {
	                }
	            };
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "defaultskuradio.html";
	    }
	    SWDefaultSkuRadio.Factory = function () {
	        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWDefaultSkuRadio(skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWDefaultSkuRadio;
	}());
	exports.SWDefaultSkuRadio = SWDefaultSkuRadio;


/***/ }),
/* 582 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWSkuCurrencySelectorController = (function () {
	    //@ngInject
	    function SWSkuCurrencySelectorController(collectionConfigService, observerService, $hibachi) {
	        var _this = this;
	        this.collectionConfigService = collectionConfigService;
	        this.observerService = observerService;
	        this.$hibachi = $hibachi;
	        this.currencyCodes = [];
	        this.baseEntityName = "Product";
	        this.select = function (currencyCode) {
	            _this.selectedCurrencyCode = currencyCode;
	            _this.observerService.notifyAndRecord(_this.selectCurrencyCodeEventName, currencyCode);
	        };
	        //this should be an rbkey
	        this.currencyCodes.push("All");
	        if (angular.isDefined(this.baseEntityId)) {
	            this.selectCurrencyCodeEventName = "currencyCodeSelect" + this.baseEntityId;
	        }
	        this.selectedCurrencyCode = "USD";
	        this.observerService.notifyAndRecord(this.selectCurrencyCodeEventName, this.selectedCurrencyCode);
	        if (angular.isDefined(this.baseEntityName) && angular.isDefined(this.baseEntityId)) {
	            this.baseEntityCollectionConfig = this.collectionConfigService.newCollectionConfig(this.baseEntityName);
	            this.baseEntityCollectionConfig.addDisplayProperty("eligibleCurrencyCodeList");
	            this.baseEntityCollectionConfig.addFilter("productID", this.baseEntityId, "=");
	            this.baseEntityCollectionConfig.getEntity().then(function (response) {
	                _this.product = _this.$hibachi.populateEntity(_this.baseEntityName, response.pageRecords[0]);
	                var tempCurrencyCodeArray = _this.product.data.eligibleCurrencyCodeList.split(",");
	                for (var key in tempCurrencyCodeArray) {
	                    _this.currencyCodes.push(tempCurrencyCodeArray[key]);
	                }
	            }, function (reason) {
	                //error callback
	            });
	        }
	    }
	    return SWSkuCurrencySelectorController;
	}());
	exports.SWSkuCurrencySelectorController = SWSkuCurrencySelectorController;
	var SWSkuCurrencySelector = (function () {
	    function SWSkuCurrencySelector(scopeService, skuPartialsPath, slatwallPathBuilder) {
	        this.scopeService = scopeService;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            baseEntityName: "@?",
	            baseEntityId: "@?"
	        };
	        this.controller = SWSkuCurrencySelectorController;
	        this.controllerAs = "swSkuCurrencySelector";
	        this.link = function (scope, element, attrs, formController, transcludeFn) {
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skucurrencyselector.html";
	    }
	    SWSkuCurrencySelector.Factory = function () {
	        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuCurrencySelector(scopeService, skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'scopeService',
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWSkuCurrencySelector;
	}());
	exports.SWSkuCurrencySelector = SWSkuCurrencySelector;


/***/ }),
/* 583 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWSkuPriceEditController = (function () {
	    //@ngInject
	    function SWSkuPriceEditController(historyService, listingService, observerService, skuPriceService, utilityService, $hibachi, $filter, $timeout) {
	        var _this = this;
	        this.historyService = historyService;
	        this.listingService = listingService;
	        this.observerService = observerService;
	        this.skuPriceService = skuPriceService;
	        this.utilityService = utilityService;
	        this.$hibachi = $hibachi;
	        this.$filter = $filter;
	        this.$timeout = $timeout;
	        this.showSave = true;
	        this.baseEntityName = "Product";
	        this.updateDisplay = function (currencyCode) {
	            if (angular.isDefined(currencyCode) && angular.isDefined(_this.currencyCode)) {
	                _this.filterOnCurrencyCode = currencyCode;
	                if (_this.currencyCode == _this.filterOnCurrencyCode || _this.filterOnCurrencyCode == "All") {
	                    _this.showPriceEdit = true;
	                }
	                else {
	                    _this.showPriceEdit = false;
	                }
	            }
	        };
	        this.switchTabContext = function () {
	            _this.observerService.notify(_this.switchTabContextEventName, _this.tabToSwitchTo);
	        };
	        if (angular.isDefined(this.pageRecord)) {
	            this.pageRecord.edited = false;
	        }
	        this.currencyFilter = this.$filter('swcurrency');
	        this.formName = this.utilityService.createID(32);
	        if (angular.isUndefined(this.showPriceEdit)) {
	            this.showPriceEdit = true;
	        }
	        if (angular.isUndefined(this.skuId) && angular.isDefined(this.bundledSkuSkuId)) {
	            this.skuId = this.bundledSkuSkuId;
	        }
	        if (angular.isDefined(this.bundledSkuCurrencyCode)) {
	            this.currencyCode = this.bundledSkuCurrencyCode;
	        }
	        if (angular.isUndefined(this.currencyCode) && angular.isDefined(this.sku)) {
	            this.currencyCode = this.sku.data.currencyCode;
	        }
	        if (angular.isUndefined(this.currencyCode) && angular.isDefined(this.skuPrice)) {
	            this.currencyCode = this.skuPrice.data.currencyCode;
	        }
	        if (angular.isUndefined(this.price) && angular.isDefined(this.bundledSkuPrice)) {
	            this.price = this.bundledSkuPrice;
	        }
	        if (angular.isDefined(this.sku)) {
	            this.sku.data.price = this.currencyFilter(this.sku.data.price, this.currencyCode, 2, false);
	        }
	        if (angular.isDefined(this.skuPrice)) {
	            this.skuPrice.data.price = this.currencyFilter(this.skuPrice.data.price, this.currencyCode, 2, false);
	        }
	        if (angular.isUndefined(this.skuId)
	            && angular.isUndefined(this.sku)
	            && angular.isUndefined(this.skuPriceId)
	            && angular.isUndefined(this.skuPrice)) {
	            throw ("You must provide either a skuID or a skuPriceID or a sku or a skuPrice to SWSkuPriceSingleEditController");
	        }
	        else {
	            if (angular.isDefined(this.skuId) && angular.isUndefined(this.sku)) {
	                var skuData = {
	                    skuID: this.skuId,
	                    skuCode: this.skuCode,
	                    currencyCode: this.currencyCode,
	                    price: this.currencyFilter(this.price, this.currencyCode, 2, false)
	                };
	                this.sku = this.$hibachi.populateEntity("Sku", skuData);
	            }
	            if (angular.isDefined(this.skuPriceId) && angular.isUndefined(this.skuPrice)) {
	                var skuPriceData = {
	                    skuPriceId: this.skuPriceId,
	                    currencyCode: this.currencyCode,
	                    minQuantity: this.minQuantity,
	                    maxQuantity: this.maxQuantity,
	                    price: this.currencyFilter(this.price, this.currencyCode, 2, false)
	                };
	                this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);
	            }
	        }
	        if (angular.isDefined(this.masterPriceObject)) {
	            if (angular.isDefined(this.masterPriceObject.data.sku)) {
	                var sku = this.masterPriceObject.data.sku;
	            }
	            else {
	                var sku = this.masterPriceObject;
	            }
	            this.revertToValue = this.currencyFilter(this.skuPriceService.getInferredSkuPrice(sku, this.masterPriceObject.data.price, this.currencyCode), this.currencyCode, 2, false);
	        }
	    }
	    return SWSkuPriceEditController;
	}());
	exports.SWSkuPriceEditController = SWSkuPriceEditController;
	var SWSkuPriceEdit = (function () {
	    function SWSkuPriceEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) {
	        var _this = this;
	        this.observerService = observerService;
	        this.historyService = historyService;
	        this.scopeService = scopeService;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            skuId: "@?",
	            skuPriceId: "@?",
	            skuCode: "@?",
	            price: "@?",
	            baseEntityId: "@?",
	            baseEntityName: "@?",
	            bundledSkuSkuId: "@?",
	            bundledSkuCurrencyCode: "@?",
	            bundledSkuPrice: "@?",
	            eligibleCurrencyCodeList: "@?",
	            listingDisplayId: "@?",
	            currencyCode: "@?",
	            masterPriceObject: "=?",
	            revertToValue: "=?",
	            sku: "=?",
	            skuPrice: "=?"
	        };
	        this.controller = SWSkuPriceEditController;
	        this.controllerAs = "swSkuPriceEdit";
	        this.link = function (scope, element, attrs, formController, transcludeFn) {
	            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecord");
	            if (angular.isDefined(currentScope["pageRecord"])) {
	                scope.swSkuPriceEdit.pageRecord = currentScope["pageRecord"];
	            }
	            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecordKey");
	            if (angular.isDefined(currentScope["pageRecordKey"])) {
	                scope.swSkuPriceEdit.pageRecordIndex = currentScope["pageRecordKey"];
	            }
	            var skuPricesEditScope = _this.scopeService.getRootParentScope(scope, "swSkuPricesEdit");
	            if (skuPricesEditScope != null) {
	                scope.swSkuPriceEdit.baseEntityId = skuPricesEditScope["swSkuPricesEdit"].baseEntityId;
	                scope.swSkuPriceEdit.baseEntityName = skuPricesEditScope["swSkuPricesEdit"].baseEntityName;
	            }
	            if (angular.isDefined(scope.swSkuPriceEdit.baseEntityId) && angular.isUndefined(scope.swSkuPriceEdit.skuId)) {
	                scope.swSkuPriceEdit.selectCurrencyCodeEventName = "currencyCodeSelect" + scope.swSkuPriceEdit.baseEntityId;
	                _this.observerService.attach(scope.swSkuPriceEdit.updateDisplay, scope.swSkuPriceEdit.selectCurrencyCodeEventName, scope.swSkuPriceEdit.formName);
	                if (_this.historyService.hasHistory(scope.swSkuPriceEdit.selectCurrencyCodeEventName)) {
	                    scope.swSkuPriceEdit.updateDisplay(_this.historyService.getHistory(scope.swSkuPriceEdit.selectCurrencyCodeEventName));
	                }
	            }
	            var tabGroupScope = _this.scopeService.getRootParentScope(scope, "swTabGroup");
	            var tabContentScope = _this.scopeService.getRootParentScope(scope, "swTabContent");
	            if (tabContentScope != null) {
	                if (angular.isDefined(tabGroupScope) && tabContentScope["swTabContent"].name == "Basic") {
	                    scope.swSkuPriceEdit.switchTabContextEventName = tabGroupScope["swTabGroup"].switchTabEventName;
	                    scope.swSkuPriceEdit.tabToSwitchTo = tabGroupScope["swTabGroup"].getTabByName("Pricing");
	                    scope.swSkuPriceEdit.showSwitchTabContextButton = true;
	                }
	                else {
	                    scope.swSkuPriceEdit.showSwitchTabContextButton = false;
	                }
	            }
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupriceedit.html";
	    }
	    SWSkuPriceEdit.Factory = function () {
	        var directive = function (observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPriceEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'observerService',
	            'historyService',
	            'scopeService',
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWSkuPriceEdit;
	}());
	exports.SWSkuPriceEdit = SWSkuPriceEdit;


/***/ }),
/* 584 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWSkuCodeEditController = (function () {
	    //@ngInject
	    function SWSkuCodeEditController(historyService, listingService, observerService, skuPriceService, utilityService, $hibachi, $filter, $timeout) {
	        this.historyService = historyService;
	        this.listingService = listingService;
	        this.observerService = observerService;
	        this.skuPriceService = skuPriceService;
	        this.utilityService = utilityService;
	        this.$hibachi = $hibachi;
	        this.$filter = $filter;
	        this.$timeout = $timeout;
	        this.showSave = true;
	        this.baseEntityName = "Product";
	        if (angular.isDefined(this.pageRecord)) {
	            this.pageRecord.edited = false;
	        }
	        this.formName = this.utilityService.createID(32);
	        if (angular.isUndefined(this.skuId) && angular.isDefined(this.bundledSkuSkuId)) {
	            this.skuId = this.bundledSkuSkuId;
	        }
	        if (angular.isUndefined(this.price) && angular.isDefined(this.bundledSkuPrice)) {
	            this.price = this.bundledSkuPrice;
	        }
	        if (angular.isDefined(this.sku)) {
	            this.sku.data.price = this.currencyFilter(this.sku.data.price, this.currencyCode, 2, false);
	        }
	        if (angular.isDefined(this.skuPrice)) {
	            this.skuPrice.data.price = this.currencyFilter(this.skuPrice.data.price, this.currencyCode, 2, false);
	        }
	        if (angular.isDefined(this.bundledSkuSkuCode)) {
	            this.skuCode = this.bundledSkuSkuCode;
	        }
	        if (angular.isDefined(this.skuId) && angular.isUndefined(this.sku)) {
	            var skuData = {
	                skuID: this.skuId,
	                skuCode: this.skuCode
	            };
	            this.sku = this.$hibachi.populateEntity("Sku", skuData);
	        }
	    }
	    return SWSkuCodeEditController;
	}());
	exports.SWSkuCodeEditController = SWSkuCodeEditController;
	var SWSkuCodeEdit = (function () {
	    function SWSkuCodeEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) {
	        var _this = this;
	        this.observerService = observerService;
	        this.historyService = historyService;
	        this.scopeService = scopeService;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            skuId: "@?",
	            skuPriceId: "@?",
	            skuCode: "@?",
	            price: "@?",
	            baseEntityId: "@?",
	            baseEntityName: "@?",
	            bundledSkuSkuId: "@?",
	            bundledSkuSkuCode: "@?",
	            bundledSkuCurrencyCode: "@?",
	            bundledSkuPrice: "@?",
	            eligibleCurrencyCodeList: "@?",
	            listingDisplayId: "@?",
	            currencyCode: "@?",
	            masterPriceObject: "=?",
	            revertToValue: "=?",
	            sku: "=?",
	            skuPrice: "=?"
	        };
	        this.controller = SWSkuCodeEditController;
	        this.controllerAs = "swSkuCodeEdit";
	        this.link = function (scope, element, attrs, formController, transcludeFn) {
	            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecord");
	            if (angular.isDefined(currentScope["pageRecord"])) {
	                scope.swSkuCodeEdit.pageRecord = currentScope["pageRecord"];
	            }
	            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecordKey");
	            if (angular.isDefined(currentScope["pageRecordKey"])) {
	                scope.swSkuCodeEdit.pageRecordIndex = currentScope["pageRecordKey"];
	            }
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skucodeedit.html";
	    }
	    SWSkuCodeEdit.Factory = function () {
	        var directive = function (observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuCodeEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'observerService',
	            'historyService',
	            'scopeService',
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWSkuCodeEdit;
	}());
	exports.SWSkuCodeEdit = SWSkuCodeEdit;


/***/ }),
/* 585 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWSkuPricesEditController = (function () {
	    //@ngInject
	    function SWSkuPricesEditController(observerService, collectionConfigService, utilityService, skuPriceService, $hibachi) {
	        var _this = this;
	        this.observerService = observerService;
	        this.collectionConfigService = collectionConfigService;
	        this.utilityService = utilityService;
	        this.skuPriceService = skuPriceService;
	        this.$hibachi = $hibachi;
	        this.baseEntityName = "Product";
	        this.refreshSkuPrices = function () {
	            _this.skuPriceService.loadSkuPricesForSku(_this.skuId).finally(function () {
	                _this.getSkuPrices();
	            });
	        };
	        this.hasSkuPrices = function () {
	            return _this.skuPriceService.hasSkuPrices(_this.skuId);
	        };
	        this.getSkuPrices = function () {
	            if (angular.isDefined(_this.skuSkuId)) {
	                _this.loadingPromise = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuId, _this.minQuantity, _this.maxQuantity, _this.eligibleCurrencyCodes);
	            }
	            else if (angular.isDefined(_this.skuId)) {
	                _this.loadingPromise = _this.skuPriceService.getBaseSkuPricesForSku(_this.skuId, _this.eligibleCurrencyCodes);
	            }
	            _this.loadingPromise.then(function (data) {
	                _this.skuPrices = data;
	            }, function (reason) {
	                throw ("swSkuPrices was unable to fetch skuPrices because: " + reason);
	            });
	            return _this.loadingPromise;
	        };
	        this.Id = this.utilityService.createID(32);
	        if (angular.isDefined(this.skuEligibleCurrencyCodeList)) {
	            this.eligibleCurrencyCodeList = this.skuEligibleCurrencyCodeList;
	        }
	        if (angular.isDefined(this.eligibleCurrencyCodeList)) {
	            this.eligibleCurrencyCodes = this.eligibleCurrencyCodeList.split(",");
	        }
	        if (angular.isUndefined(this.skuPrices)) {
	            this.skuPrices = [];
	        }
	        if (angular.isDefined(this.skuSkuId)) {
	            this.skuId = this.skuSkuId;
	        }
	        else {
	            //inflate the sku
	            this.sku = this.$hibachi.populateEntity("Sku", { skuID: this.skuId, price: this.price });
	        }
	        if (angular.isDefined(this.skuPriceId)) {
	            var skuPriceData = {
	                skuPriceID: this.skuPriceId,
	                minQuantity: this.minQuantity,
	                maxQuantity: this.maxQuantity,
	                currencyCode: this.currencyCode,
	                price: this.price
	            };
	            this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);
	        }
	        if (angular.isDefined(this.skuSkuId) && angular.isDefined(this.skuPrice)) {
	            this.masterPriceObject = this.skuPrice;
	        }
	        else if (angular.isDefined(this.sku)) {
	            this.masterPriceObject = this.sku;
	        }
	        this.refreshSkuPrices();
	        this.observerService.attach(this.refreshSkuPrices, "skuPricesUpdate");
	    }
	    return SWSkuPricesEditController;
	}());
	exports.SWSkuPricesEditController = SWSkuPricesEditController;
	var SWSkuPricesEdit = (function () {
	    function SWSkuPricesEdit(scopeService, skuPartialsPath, slatwallPathBuilder) {
	        this.scopeService = scopeService;
	        this.skuPartialsPath = skuPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            skuId: "@",
	            skuSkuId: "@",
	            skuPriceId: "@",
	            minQuantity: "@",
	            maxQuantity: "@",
	            currencyCode: "@",
	            price: "@",
	            bundledSkuSkuId: "@",
	            baseEntityName: "@?",
	            baseEntityId: "@?",
	            listingDisplayId: "@?",
	            eligibleCurrencyCodeList: "@?",
	            skuEligibleCurrencyCodeList: "@?",
	            sku: "=?"
	        };
	        this.controller = SWSkuPricesEditController;
	        this.controllerAs = "swSkuPricesEdit";
	        this.compile = function (element, attrs) {
	            return {
	                pre: function ($scope, element, attrs) {
	                },
	                post: function ($scope, element, attrs) {
	                }
	            };
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupricesedit.html";
	    }
	    SWSkuPricesEdit.Factory = function () {
	        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPricesEdit(scopeService, skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'scopeService',
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWSkuPricesEdit;
	}());
	exports.SWSkuPricesEdit = SWSkuPricesEdit;


/***/ }),
/* 586 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWSkuPriceQuantityEditController = (function () {
	    //@ngInject
	    function SWSkuPriceQuantityEditController($q, $hibachi, collectionConfigService, listingService, observerService, skuPriceService) {
	        var _this = this;
	        this.$q = $q;
	        this.$hibachi = $hibachi;
	        this.collectionConfigService = collectionConfigService;
	        this.listingService = listingService;
	        this.observerService = observerService;
	        this.skuPriceService = skuPriceService;
	        this.skuPrices = [];
	        this.showSave = true;
	        this.refreshSkuPrices = function () {
	            _this.skuPriceService.loadSkuPricesForSku(_this.skuSkuId).finally(function () {
	                _this.getSkuPrices();
	            });
	        };
	        this.updateSkuPrices = function () {
	            angular.forEach(_this.skuPrices, function (value, key) {
	                if (key > 0) {
	                    var formName = _this.columnPropertyIdentifier + value.data.skuPriceID;
	                    value.forms[formName].$setDirty(true);
	                    if (angular.isDefined(value.forms[formName][_this.columnPropertyIdentifier]) &&
	                        angular.isFunction(value.forms[formName][_this.columnPropertyIdentifier].$setDirty)) {
	                        value.forms[formName][_this.columnPropertyIdentifier].$setDirty(true);
	                    }
	                    value.data[_this.columnPropertyIdentifier] = _this.skuPrice.data[_this.columnPropertyIdentifier];
	                }
	            });
	        };
	        this.saveSkuPrices = function () {
	            var savePromises = [];
	            angular.forEach(_this.skuPrices, function (value, key) {
	                if (key > 0) {
	                    savePromises.push(value.$$save());
	                }
	            });
	            _this.savePromise = _this.$q.all(savePromises);
	            _this.savePromise.then(function (response) {
	                //success
	            }, function (reason) {
	                //failure
	            });
	            return _this.savePromise;
	        };
	        this.getSkuPrices = function () {
	            var promise = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuSkuId, _this.minQuantity, _this.maxQuantity);
	            promise.then(function (data) {
	                _this.skuPrices = data;
	            });
	            return promise;
	        };
	        if (angular.isDefined(this.pageRecord)) {
	            this.pageRecord.edited = false;
	        }
	        if (angular.isDefined(this.skuSkuId) && angular.isUndefined(this.skuPrice)) {
	            var skuPriceData = {
	                skuPriceID: this.skuPriceId,
	                minQuantity: parseInt(this.minQuantity),
	                maxQuantity: parseInt(this.maxQuantity),
	                currencyCode: this.currencyCode,
	                price: this.price
	            };
	            this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);
	            this.skuPriceService.setSkuPrices(this.skuSkuId, [this.skuPrice]);
	            this.refreshSkuPrices();
	            this.observerService.attach(this.refreshSkuPrices, "skuPricesUpdate");
	        }
	    }
	    return SWSkuPriceQuantityEditController;
	}());
	exports.SWSkuPriceQuantityEditController = SWSkuPriceQuantityEditController;
	var SWSkuPriceQuantityEdit = (function () {
	    function SWSkuPriceQuantityEdit(scopeService, skuPartialsPath, slatwallPathBuilder) {
	        var _this = this;
	        this.scopeService = scopeService;
	        this.skuPartialsPath = skuPartialsPath;
	        this.slatwallPathBuilder = slatwallPathBuilder;
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            skuPrice: "=?",
	            skuPriceId: "@",
	            currencyCode: "@",
	            skuSkuId: "@",
	            column: "=?",
	            columnPropertyIdentifier: "@",
	            minQuantity: "@",
	            maxQuantity: "@",
	            price: "@",
	            showSave: "=?",
	            listingDisplayId: "@?"
	        };
	        this.controller = SWSkuPriceQuantityEditController;
	        this.controllerAs = "swSkuPriceQuantityEdit";
	        this.compile = function (element, attrs) {
	            return {
	                pre: function ($scope, element, attrs) {
	                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive
	                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");
	                    if (angular.isDefined(currentScope["pageRecord"])) {
	                        $scope.swSkuPriceQuantityEdit.pageRecord = currentScope["pageRecord"];
	                    }
	                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");
	                    if (angular.isDefined(currentScope["pageRecordKey"])) {
	                        $scope.swSkuPriceQuantityEdit.pageRecordIndex = currentScope["pageRecordKey"];
	                    }
	                },
	                post: function ($scope, element, attrs) {
	                }
	            };
	        };
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupricequantityedit.html";
	    }
	    SWSkuPriceQuantityEdit.Factory = function () {
	        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPriceQuantityEdit(scopeService, skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'scopeService',
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWSkuPriceQuantityEdit;
	}());
	exports.SWSkuPriceQuantityEdit = SWSkuPriceQuantityEdit;


/***/ }),
/* 587 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWSkuThumbnailController = (function () {
	    //@ngInject
	    function SWSkuThumbnailController() {
	        if (!angular.isDefined(this.skuData)) {
	            throw ("You must provide a sku to the SWSkuThumbnailController");
	        }
	        if (angular.isDefined(this.skuData.imagePath)) {
	            this.image = this.skuData.imagePath;
	        }
	    }
	    return SWSkuThumbnailController;
	}());
	exports.SWSkuThumbnailController = SWSkuThumbnailController;
	var SWSkuThumbnail = (function () {
	    function SWSkuThumbnail(skuPartialsPath, slatwallPathBuilder) {
	        this.restrict = 'EA';
	        this.scope = {};
	        this.bindToController = {
	            skuData: "=",
	            imageOnly: "=?",
	            imagePath: "@?"
	        };
	        this.controller = SWSkuThumbnailController;
	        this.controllerAs = "swSkuThumbnail";
	        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skuthumbnail.html";
	    }
	    SWSkuThumbnail.Factory = function () {
	        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWSkuThumbnail(skuPartialsPath, slatwallPathBuilder); };
	        directive.$inject = [
	            'skuPartialsPath',
	            'slatwallPathBuilder'
	        ];
	        return directive;
	    };
	    return SWSkuThumbnail;
	}());
	exports.SWSkuThumbnail = SWSkuThumbnail;


/***/ }),
/* 588 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	/*services return promises which can be handled uniquely based on success or failure by the controller*/
	var SlatwallPathBuilder = (function () {
	    //@ngInject
	    function SlatwallPathBuilder() {
	        var _this = this;
	        this.setBaseURL = function (baseURL) {
	            _this.baseURL = baseURL;
	        };
	        this.setBasePartialsPath = function (basePartialsPath) {
	            _this.basePartialsPath = basePartialsPath;
	        };
	        this.buildPartialsPath = function (componentsPath) {
	            if (angular.isDefined(_this.baseURL) && angular.isDefined(_this.basePartialsPath)) {
	                return _this.baseURL + _this.basePartialsPath + componentsPath;
	            }
	            else {
	                throw ('need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there');
	            }
	        };
	    }
	    return SlatwallPathBuilder;
	}());
	exports.SlatwallPathBuilder = SlatwallPathBuilder;


/***/ }),
/* 589 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	var SWCurrencyFormatter = (function () {
	    function SWCurrencyFormatter($filter, $timeout) {
	        var _this = this;
	        this.$filter = $filter;
	        this.$timeout = $timeout;
	        this.restrict = "A";
	        this.require = "ngModel";
	        this.scope = {
	            ngModel: '=',
	            currencyCode: '@?'
	        };
	        this.link = function ($scope, element, attrs, modelCtrl) {
	            modelCtrl.$parsers.push(function (data) {
	                var currencyFilter = _this.$filter('swcurrency');
	                if (isNaN(data)) {
	                    data = 0;
	                    modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));
	                    modelCtrl.$render();
	                }
	                else {
	                    if (_this._timeoutPromise) {
	                        _this.$timeout.cancel(_this._timeoutPromise);
	                    }
	                    _this._timeoutPromise = _this.$timeout(function () {
	                        modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));
	                        modelCtrl.$render();
	                    }, 1500);
	                }
	                return modelCtrl.$viewValue;
	            });
	            modelCtrl.$formatters.push(function (data) {
	                if (isNaN(data)) {
	                    data = 0;
	                }
	                var currencyFilter = _this.$filter('swcurrency');
	                modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));
	                modelCtrl.$render();
	                return modelCtrl.$viewValue;
	            });
	        };
	    }
	    SWCurrencyFormatter.Factory = function () {
	        var directive = function ($filter, $timeout) { return new SWCurrencyFormatter($filter, $timeout); };
	        directive.$inject = [
	            '$filter',
	            '$timeout'
	        ];
	        return directive;
	    };
	    return SWCurrencyFormatter;
	}());
	exports.SWCurrencyFormatter = SWCurrencyFormatter;


/***/ }),
/* 590 */
/***/ (function(module, exports) {

	"use strict";
	/// <reference path='../../../typings/slatwallTypescript.d.ts' />
	/// <reference path='../../../typings/tsd.d.ts' />
	Object.defineProperty(exports, "__esModule", { value: true });
	var SWCurrency = (function () {
	    function SWCurrency() {
	    }
	    //@ngInject
	    SWCurrency.Factory = function ($sce, $log, $hibachi) {
	        var data = null, serviceInvoked = false;
	        function realFilter(value, decimalPlace, returnStringFlag) {
	            if (returnStringFlag === void 0) { returnStringFlag = true; }
	            // REAL FILTER LOGIC, DISREGARDING PROMISES
	            if (!angular.isDefined(data)) {
	                $log.debug("Please provide a valid currencyCode, swcurrency defaults to $");
	                data = "$";
	            }
	            if (angular.isDefined(value)) {
	                if (angular.isDefined(decimalPlace)) {
	                    value = parseFloat(value.toString()).toFixed(decimalPlace);
	                }
	                else {
	                    value = parseFloat(value.toString()).toFixed(2);
	                }
	            }
	            if (returnStringFlag) {
	                return data + value;
	            }
	            else {
	                return value;
	            }
	        }
	        var filterStub;
	        filterStub = function (value, currencyCode, decimalPlace, returnStringFlag) {
	            if (returnStringFlag === void 0) { returnStringFlag = true; }
	            if (data === null && returnStringFlag) {
	                if (!serviceInvoked) {
	                    serviceInvoked = true;
	                    $hibachi.getCurrencies().then(function (currencies) {
	                        var result = currencies.data;
	                        data = result[currencyCode];
	                    });
	                }
	                return "-";
	            }
	            else
	                return realFilter(value, decimalPlace, returnStringFlag);
	        };
	        filterStub.$stateful = true;
	        return filterStub;
	    };
	    return SWCurrency;
	}());
	exports.SWCurrency = SWCurrency;


/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(379);
	var CardBodyComponent = (function () {
	    function CardBodyComponent() {
	    }
	    return CardBodyComponent;
	}());
	__decorate([
	    core_1.Input('body'),
	    __metadata("design:type", String)
	], CardBodyComponent.prototype, "body", void 0);
	CardBodyComponent = __decorate([
	    core_1.Component({
	        selector: 'card-body',
	        template: "\n    <div class=\"s-body\">{{body}}</div>\n  "
	    })
	], CardBodyComponent);
	exports.CardBodyComponent = CardBodyComponent;


/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(379);
	var CardTitleComponent = (function () {
	    function CardTitleComponent() {
	    }
	    return CardTitleComponent;
	}());
	__decorate([
	    core_1.Input(),
	    __metadata("design:type", String)
	], CardTitleComponent.prototype, "title", void 0);
	CardTitleComponent = __decorate([
	    core_1.Component({
	        selector: 'card-title',
	        template: "\n    <div class=\"s-title\" >{{title}}</div>\n  "
	    })
	], CardTitleComponent);
	exports.CardTitleComponent = CardTitleComponent;


/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(379);
	var CardIconComponent = (function () {
	    function CardIconComponent() {
	    }
	    return CardIconComponent;
	}());
	__decorate([
	    core_1.Input(),
	    __metadata("design:type", String)
	], CardIconComponent.prototype, "icon", void 0);
	CardIconComponent = __decorate([
	    core_1.Component({
	        selector: 'card-icon',
	        template: "\n    <div class=\"col-xs-1 col-sm-1 col-md-2 col-lg-2 s-icon\">\n        <i class=\"fa fa-{{icon}} fa-2\"></i>\n    </div>\n  "
	    })
	], CardIconComponent);
	exports.CardIconComponent = CardIconComponent;


/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(379);
	var CardComponent = (function () {
	    /** Get the values from the dom attributes since this is a top level component. */
	    function CardComponent(ref) {
	        this.blockSize = 'md';
	        this.useInner = true;
	        this.inner = '';
	        console.log("Found ");
	        var native = ref.nativeElement;
	        this.name = native.getAttribute("name");
	        this.body = native.getAttribute("body");
	        this.icon = native.getAttribute("icon");
	        this.blockSize = (this.icon == undefined) ? 'md' : 'sm';
	        this.useInner = this.blockSize == 'md';
	        if (this.useInner) {
	            this.inner = '-inner';
	        }
	    }
	    return CardComponent;
	}());
	__decorate([
	    core_1.Output('card'),
	    __metadata("design:type", core_1.EventEmitter)
	], CardComponent.prototype, "initCard", void 0);
	CardComponent = __decorate([
	    core_1.Component({
	        selector: 'card',
	        template: "\n    <div id=\"{{id}}\" class=\"s-{{blockSize}}-content-block{{inner}}\" style=\"margin-bottom:7px\">                \n      <card-icon icon=\"{{icon}}\" *ngIf=\"icon\"></card-icon>\n      <card-title title=\"{{name}}\" *ngIf=\"name\"></card-title>\n      <card-body body=\"{{body}}\" *ngIf=\"body\"></card-body>\n    </div>\n  "
	    }),
	    __metadata("design:paramtypes", [core_1.ElementRef])
	], CardComponent);
	exports.CardComponent = CardComponent;


/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(379);
	var CardViewComponent = (function () {
	    /** Get the values from the dom attributes since this is a top level component. */
	    function CardViewComponent(elementRef) {
	        this.elementRef = elementRef;
	        //if needed, get the attributes from top level component here and set on this.
	        /*var native = this.elementRef.nativeElement;
	        this.id = native.getAttribute("id");*/
	    }
	    return CardViewComponent;
	}());
	CardViewComponent = __decorate([
	    core_1.Component({
	        selector: 'card-view',
	        template: "\n    <ng-content select='card'></ng-content>\n  "
	    }),
	    __metadata("design:paramtypes", [core_1.ElementRef])
	], CardViewComponent);
	exports.CardViewComponent = CardViewComponent;


/***/ })
/******/ ]);